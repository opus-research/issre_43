[
  {
    "_id": "6623e5dfd9087c4d6d37a2ed",
    "number": 2493,
    "body": null,
    "head_branch": "remove/hamcrest",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Replace leftover hamcrest usage with junit and drop dependency (#2493)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e5e1d9087c4d6d37a2ee",
    "number": 2492,
    "body": "Closes https://github.com/SpongePowered/SpongeAPI/issues/1726\r\nCloses https://github.com/SpongePowered/SpongeAPI/issues/1936",
    "head_branch": "remove/sqlmanager",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove SqlManager (#2492)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e5e2d9087c4d6d37a2ef",
    "number": 2491,
    "body": "Fixing link to guildlines to working one",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Mentioned at https://github.com/SpongePowered/SpongeAPI/issues/1000#issuecomment-963911267",
      "> Mentioned at [#1000 (comment)](https://github.com/SpongePowered/SpongeAPI/issues/1000#issuecomment-963911267)\r\n\r\nyeah but it's not even working"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e5e3d9087c4d6d37a2f0",
    "number": 2490,
    "body": "this is handled in the common action in the .github repo",
    "head_branch": "remove/gradle-action",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove gradle wrapper validation action (#2490)\n\nthis is handled in the common action in the .github repo"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e5e4d9087c4d6d37a2f1",
    "number": 2489,
    "body": null,
    "head_branch": "bump/dep",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Bump dependencies and fix more dependency conflicts (#2489)\n\n* Bump dependencies and fix more dependency conflicts\r\n\r\n* Update verification metadata\r\n\r\n* Update verification metadata"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e5e5d9087c4d6d37a2f2",
    "number": 2488,
    "body": null,
    "head_branch": "gradle/verification",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Enable gradle dependency verification (#2488)\n\n* Enable gradle dependency verification\r\n\r\n* Update verification metadata"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e5e6d9087c4d6d37a2f3",
    "number": 2487,
    "body": null,
    "head_branch": "gradle/checksum",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add distributionSha256Sum (#2487)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e5e7d9087c4d6d37a2f4",
    "number": 2486,
    "body": null,
    "head_branch": "validate/wrapper",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add gradle wrapper validation action (#2486)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e5e8d9087c4d6d37a2f5",
    "number": 2485,
    "body": null,
    "head_branch": "api-11",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Bump gradle to 8.7 (#2485)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e5e9d9087c4d6d37a2f6",
    "number": 2484,
    "body": null,
    "head_branch": "fix/compilation-warnings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix compilation warnings (#2484)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e5ead9087c4d6d37a2f7",
    "number": 2483,
    "body": "Recent additions like ComponentEncoder and ComponentDecoder as super for ComponentSerializer make multi-platform support more cumbersome. Updating Adventure resolves this.\r\n\r\nThis also aligns the GsonComponentSerializer with vanilla 1.20.4 output by default.",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Bump Adventure to 4.16 (#2483)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e5ebd9087c4d6d37a2f8",
    "number": 2482,
    "body": "[Sponge](https://github.com/SpongePowered/Sponge/pull/3938) | **SpongeAPI**\r\n\r\nresolve gradle deprecations, reduce duplications, that sort of fun. kinda-sorta broken up into commits that makes sense",
    "head_branch": "chore/build-updates",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Build cleanup (#2482)\n\n* chore(build): bump gradle plugins, add junit launcher to resolve some deprecations\r\n\r\n* chore(build): Move to using version catalogs for dependencies\r\n\r\n* chore(build): remove duplicated repository declaration\r\n\r\n* chore(build): Clean up idea-ext blocks\r\n\r\n* chore(deps): Bump misc dependencies\r\n\r\n* chore(build): Silence some warnings from Adventure references\r\n\r\n* chore(build): Resolve remaining deprecation warnings\r\n\r\n* chore(build): break out idea-ext version for impl use\r\n\r\n* chore(build): Bump foojay plugin version\r\n\r\n* chore(build): Declare our Java target in one central place"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e5ecd9087c4d6d37a2f9",
    "number": 2480,
    "body": "Added `Ticks#infinite` and updated the documentation where we would not accept it with the current design. At the moment vanilla only supports this for PotionEffects.\r\n\r\nSome immediate problems are that we have no way of blocking the usage of infinite ticks in events in a nice way where we accept `Ticks` to modify the outcome. The event execution would explode at the implementation when it eventually call `Ticks#ticks` which would end up throwing `IllegalStateException`. Should we return `Integer.MAX_VALUE` or `Long.MAX_VALUE` instead? Or should we look at how we could easily solve the problem of being able to deny these params.",
    "head_branch": "api11/infinite-ticks",
    "is_a_fork": false,
    "comments": [
      "Some other alternatives that I don't quite like are that we could change the `PotionEffect#duration` type to `Optional<Ticks>` but that's quite vague. Would that imply that not specifying the duration in the builder mean that it creates a infinite one? That however could be solved with another method `PotionEffect.Builder#infinite`.\r\n\r\nAdding new more concreate type like `TicksOrInfinite` is basically the same approach as the `Optional<Ticks>` one as we couldn't implement the `Ticks` interface or we are back at square one. Also adds more surface area for not much added clarity?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e5edd9087c4d6d37a2fa",
    "number": 2478,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3922)",
    "head_branch": "feat/negative-amplifier",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow negative amplifiers in potion effects (#2478)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e5eed9087c4d6d37a2fb",
    "number": 2477,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3920)",
    "head_branch": "feat/particle-options",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add missing particle options (#2477)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e5efd9087c4d6d37a2fc",
    "number": 2476,
    "body": null,
    "head_branch": "bump/dependencies",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Bump additional dependencies (#2476)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e5f0d9087c4d6d37a2fd",
    "number": 2475,
    "body": null,
    "head_branch": "fix/warning-errorprone",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix errorprone warnings and remove printstacktrace (#2475)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e5f1d9087c4d6d37a2fe",
    "number": 2474,
    "body": "API 11 is 1.20",
    "head_branch": "remove/experimental-120",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Stop marking sniffer as experimental api (#2474)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e5f2d9087c4d6d37a2ff",
    "number": 2473,
    "body": null,
    "head_branch": "dep/conflict",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix dependency conflicts (#2473)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e5f3d9087c4d6d37a300",
    "number": 2472,
    "body": "Forgot to remove this along with guava",
    "head_branch": "drop/caffeine-guava",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Drop caffeine-guava adapter (#2472)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e5f4d9087c4d6d37a301",
    "number": 2471,
    "body": null,
    "head_branch": "bump/gradle-8",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Bump to gradle 8.4 (#2471)\n\n* Bump to gradle 8.4\r\n\r\n* Bump to gradle 8.4\r\n\r\n* Bump gradle wrapper"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e5f5d9087c4d6d37a302",
    "number": 2470,
    "body": "Add new generators and regenerate API data",
    "head_branch": "feat/api-data",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Regenerate API data (#2470)\n\n* Regenerate api data\r\n\r\n* Add ArmorMaterials generator\r\n\r\n* Add BambooLeavesTypes generator\r\n\r\n* Add DyeColors generator\r\n\r\n* Add FoxTypes generator\r\n\r\n* Add HorseColors generator\r\n\r\n* Add HorseStyles generator\r\n\r\n* Add InstrumentTypes generator\r\n\r\n* Add TropicalFishShapes generator\r\n\r\n* Add GameRules generator"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e5f6d9087c4d6d37a303",
    "number": 2469,
    "body": "Now that the API is free from guava we don't need the dependency anymore.\r\n",
    "head_branch": "feat/remove-guava",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove guava from the API (#2469)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e5f7d9087c4d6d37a304",
    "number": 2468,
    "body": "So that it doesn't rely on the current skin for one specific player UUID.\r\nBut instead can use any skin from Mojang (with signature).\r\n\r\nSee https://github.com/SpongePowered/Sponge/pull/3909 for implementation pull request.",
    "head_branch": "better-humans",
    "is_a_fork": true,
    "comments": [
      "Hey! You seem to be running an unsupported version (API 7) of SpongeAPI. Support for API 7 ended in January 2022.\r\n\r\nAPI-7 is now end-of-life. We will not be issuing any more API updates for version 7 of our API[^1]\r\n\r\nAs part of our legacy cleanup we are closing issues relating to API7/1.12.2[^2]\r\n___\r\n\r\nIf you wish to move this forward, please rebase this PR on the current branch and reopen it.\r\n\r\n[^1]: https://forums.spongepowered.org/t/status-update-8th-january-2022-spongeapi-8-released/39861#minecraft-1122-spongeapi-7-10\r\n[^2]: https://forums.spongepowered.org/t/sponge-status-update-28th-may-2022/40135#api-71122-community-support-8"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e5f8d9087c4d6d37a305",
    "number": 2466,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3903)\r\n\r\nAdds API to handle region files,\r\n\r\nas discussed, adding access to offline chunks instead.",
    "head_branch": "feature/regionfiles",
    "is_a_fork": false,
    "comments": [
      "Aren't regions an implementation detail? A custom implementation could theoretically stores worlds in a different format (not region based). It could even be in memory or in a database, without files.",
      "@Yeregorix I fully agree, but the API already leaks this detail currently (ServerWorld.directory)."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e5f9d9087c4d6d37a306",
    "number": 2465,
    "body": "This PR updates all Gamepedia, owned by Fandom, wiki urls accordingly.",
    "head_branch": "api-10",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update Gamepedia wiki links"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e5fbd9087c4d6d37a307",
    "number": 2464,
    "body": null,
    "head_branch": "api-10",
    "is_a_fork": true,
    "comments": [
      "thanks!"
    ],
    "commit_messages": [
      "Replace Fandom links with new wiki (#2464)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e5fcd9087c4d6d37a308",
    "number": 2463,
    "body": "[**SpongeAPI**|[Sponge](https://github.com/SpongePowered/Sponge/pull/3895)]\r\n\r\n- Added `SerializableDataHolder#rawData()` to access current raw (extra) data.\r\n- Deprecated `EntityArchetype#entityData()` and `BlockEntityArchetype#blockEntityData()`.",
    "head_branch": "feature/raw-data",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e5fdd9087c4d6d37a309",
    "number": 2462,
    "body": "[**SpongeAPI**|[Sponge](https://github.com/SpongePowered/Sponge/pull/3884)]\r\n\r\nThere is currently no quick way in the API to check if a particular block type can contain block entity data. It's possible to iterate over `BlockEntityTypes` and check `BlockEntityType#isValidBlock`, but obviously that would be much slower than just checking `instanceof` behind the scenes. I propose to introduce such a method.",
    "head_branch": "feature/has-block-entity",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add BlockType#hasBlockEntity"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e5fed9087c4d6d37a30a",
    "number": 2460,
    "body": "[Sponge](https://github.com/SpongePowered/Sponge/pull/3876) | SpongeAPI\r\n\r\nAdd keys to access & modify the frozen ticks of entities. This is the value that causes the freeze effect to appear on the screen & freeze damage when an entity is inside powdered snow. ",
    "head_branch": "api-10",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Keys.FROZEN_TIME & Keys.MAX_FROZEN_TIME"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e5ffd9087c4d6d37a30b",
    "number": 2459,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3868)\r\n\r\nthis was something i was working on ages ago, might be useful still?",
    "head_branch": "feat/build-changes",
    "is_a_fork": false,
    "comments": [
      "Hey! You seem to be running an unsupported version (API 8) of SpongeAPI. Support for API 8 ended in October 2023.\r\n\r\nAPI-8 is now end-of-life. We will not be issuing any more API updates for version 8 of our API[^1]\r\n\r\nAs part of our legacy cleanup we are closing issues relating to API8/1.16\r\n___\r\n\r\nIf you wish to move this forward, please rebase this PR on the current branch and reopen it.\r\n\r\n[^1]: https://forums.spongepowered.org/t/sponge-status-update-17th-october-2023/42212#spongeapi-82-1"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e600d9087c4d6d37a30c",
    "number": 2458,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3860)\r\n\r\nAPI breakage for:\r\n- Signs (as they can be double sided now)\r\n- Smithing (recipe format changed)\r\n- Scoreboard (score keys are no longer Component but String/Entity/GameProfile)",
    "head_branch": "dev/1.20",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e601d9087c4d6d37a30d",
    "number": 2457,
    "body": "`onlinePlayers` is creating a copy of the collection on each call.\r\n\r\nThis can get costly on large server, especially because the scheduler is calling that method on each tick.\r\n",
    "head_branch": "feat/stream-online-players",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add stream online players method (#2457)\n\n* Add stream online players method\r\n\r\n* run spotless apply"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e602d9087c4d6d37a30e",
    "number": 2456,
    "body": "Historically we considered the Minecraft protocol versions as \"implementation detail\" that should not be exposed in SpongeAPI.\r\n\r\nHowever, since the addition of the status ping API 8 years ago (#367) the protocol version still exists exactly the same way, and there are use cases for checking it (identifying the exact client version) and modifying it (making the server appear as incompatible to clients).\r\n\r\nRight now plugins have to resort to using implementation-specific code for this, which is complicated and now hopelessly broken for api-10 (due to internal changes in the Minecraft code).\r\n\r\nMake it possible to check and modify the server version to fix this once and for all.\r\n\r\nCloses #2251",
    "head_branch": "status-protocol",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Expose protocol version for status pings (#2456)\n\nHistorically we considered the Minecraft protocol versions as\r\n\"implementation detail\" that should not be exposed in SpongeAPI.\r\n\r\nHowever, since the addition of the status ping API 8 years ago the\r\nprotocol version still exists exactly the same way, and there are\r\nuse cases for checking it (identifying the exact client version) and\r\nmodifying it (making the server appear as incompatible to clients).\r\n\r\nRight now plugins have to resort to using implementation-specific code\r\nfor this, which is complicated and now hopelessly broken for api-10\r\n(due to internal changes in the Minecraft code).\r\n\r\nMake it possible to check and modify the server version to fix this\r\nonce and for all."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e603d9087c4d6d37a30f",
    "number": 2455,
    "body": "Similar to https://github.com/SpongePowered/Sponge/issues/1931 but for API\r\n\r\n",
    "head_branch": "fix/nullability",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix nullability issues (#2455)\n\n* fix nullability issues\r\n\r\n* add missing package-info files\r\n\r\n* more nullability fixes\r\n\r\n* more nullability fixes\r\n\r\n* fix missorted modifier\r\n\r\n* run spotless apply"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e604d9087c4d6d37a310",
    "number": 2454,
    "body": "Continuation of https://github.com/SpongePowered/SpongeAPI/pull/2246\r\n\r\nReplace guava immutable collections with java new immutable collections.\r\n\r\nWith this the guava usage has been completely removed from the API",
    "head_branch": "drop/guava",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Replace guava immutable collections with java immutable collections (#2454)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e605d9087c4d6d37a311",
    "number": 2453,
    "body": "- Remove TicketTypes from being in the registry. They are not within the\r\n  registry whatsoever in the base game nor is a resource id required to\r\n  create them. Thus being impossible to maintain that contract\r\n\r\nSigned-off-by: Chris Sanders <zidane@spongepowered.org>",
    "head_branch": "feature/custom-ticket-types",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e606d9087c4d6d37a312",
    "number": 2452,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3824)",
    "head_branch": "fix/fluid-state-locatable",
    "is_a_fork": true,
    "comments": [
      "Revert https://github.com/SpongePowered/SpongeAPI/commit/3e6014a0e43b1b4fb7fe435de300ded452e75486"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e607d9087c4d6d37a313",
    "number": 2451,
    "body": "[Sponge](https://github.com/SpongePowered/Sponge/pull/3821) | **SpongeAPI**\r\n\r\n`AbstractDamageSource` is supposed to implement all methods in `DamageSource`. `isFire` was missing.",
    "head_branch": "fix/fire-damage",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Implement missing method isFire in AbstractDamageSource (#2451)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e608d9087c4d6d37a314",
    "number": 2449,
    "body": "add implNote when the comment is an implementation detail\r\nremove ignored newlines\r\n\r\n____\r\n\r\nOpening a PR to gather more feedback on this before pushing more changes.\r\n\r\nWe're currently using a mix of \r\n```javadoc\r\n* foo\r\n*\r\n* <p>bar\r\n```\r\nand\r\n```javadoc\r\n* foo\r\n* <p>\r\n* bar\r\n```\r\n\r\nThis is confusing and already created some issues (missing paragraphs). Since empty lines are ignored by the javadoc, this PR is using 2) consistently.",
    "head_branch": "docs/paragraph-space",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "docs: add missing p tags and rework existing tag for consistency (#2449)\n\nadd implNote when the comment is an implementation detail\r\nremove ignored newlines"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e609d9087c4d6d37a315",
    "number": 2448,
    "body": "MC 1.18+ require java 17+\r\n\r\nUpdate readme accordingly and replace old links",
    "head_branch": "build/update-readme-jdk-17",
    "is_a_fork": false,
    "comments": [
      "This does however bring up the issue of the CI running gradle with Java 11, which is a bit redundant since 17 will have to be downloaded by Gradle anyways.\r\n\r\nYou should be able to add a `runtime_version: 17` to the `with:` block on all the shared workflow actions used in SpongeAPI to avoid that. (as defined [in the shared workflows](https://github.com/SpongePowered/.github/blob/master/.github/workflows/shared-check-spotless.yaml#L7))",
      "> This does however bring up the issue of the CI running gradle with Java 11, which is a bit redundant since 17 will have to be downloaded by Gradle anyways.\r\n> \r\n> You should be able to add a `runtime_version: 17` to the `with:` block on all the shared workflow actions used in SpongeAPI to avoid that. (as defined [in the shared workflows](https://github.com/SpongePowered/.github/blob/master/.github/workflows/shared-check-spotless.yaml#L7))\r\n\r\nThanks, had to dig into the common workflows :smile: "
    ],
    "commit_messages": [
      "build: require java 17+ and update readme (#2448)\n\n* build: require java 17+ and update readme\r\n\r\n* ci: update java version in github workflows\r\n\r\n* ci: update java version in github workflows pt 2\r\n\r\n* Update settings.gradle.kts"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e60bd9087c4d6d37a316",
    "number": 2447,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3784)\r\n\r\nsee https://github.com/SpongePowered/SpongeAPI/pull/2433 for previous work\r\n\r\n\r\n### Chat/Messages/Commands ###\r\n\r\nhttps://github.com/KyoriPowered/adventure/issues/765 / https://github.com/KyoriPowered/adventure/pull/777\r\n\r\n- [ ] Signed Text Messages (pending Adventure Library Update)  \r\n- [ ] ChatType (pending Adventure Library Update)\r\n- [ ] interface for signed message\r\n- [ ] command parameter for signed message\r\n\r\n### Datapacks ###\r\n\r\nmissing API DataPackTypes:\r\n- [ ] game_event tag + registry\r\n- [ ] loot_tables\r\n- [ ] `worldgen/world_preset` (not needed?)\r\n- [ ] `worldgen/flat_level_generator_preset` (not needed?)\r\n\r\n### Inventory ###\r\n- [ ] deprecate Inventory#get with child?\r\n- [ ] containsInventory might not work\r\n- [ ] ContainerTypes missing inventories?\r\n- [ ] Entity dependent Container Creation (horse/villager)\r\n\r\n### Entity ###\r\n\r\n- [ ] missing entity categories\r\n\r\n### Keys Refactor ###\r\n\r\nThe Keys class is getting quite big. Should we separate them depending on what they apply to.\r\nThese might contain duplicates as Keys like DISPLAY_NAME apply to many things.\r\ne.g.\r\n- Entity\r\n- Block\r\n- World\r\n- etc.\r\n\r\n\r\n### Other ###\r\n-[ ] setting TradeOfferGenerators for Villagers\r\n\r\n",
    "head_branch": "api-10",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e60cd9087c4d6d37a317",
    "number": 2446,
    "body": "The previous link was liking to a dead page. This is now changed to always point to the newest version of the contribution guidelines.\r\n\r\nEven though this is currently merging into `api-8` this problem exists in the other branches as well.",
    "head_branch": "fix/contribution-guidelines",
    "is_a_fork": true,
    "comments": [
      "I am currently realizing that this should rather be an issue. If it is needed I will recreate this as an issue.",
      "Sorry for the late response,\r\n\r\nThis was reported in the minor issue list at https://github.com/SpongePowered/SpongeAPI/issues/1000#issuecomment-963911267\r\n\r\nThere are a few more links that need to be updated in the readme.\r\nThanks for your contribution!",
      "> Sorry for the late response,\r\n> \r\n> This was reported in the minor issue list at [#1000 (comment)](https://github.com/SpongePowered/SpongeAPI/issues/1000#issuecomment-963911267)\r\n> \r\n> There are a few more links that need to be updated in the readme. Thanks for your contribution!\r\n\r\nNo problem. I haven't seen the issue itself so it was my mistake. 😄 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e60dd9087c4d6d37a318",
    "number": 2445,
    "body": "one of many (so many) steps towards supporting ModLauncher 10 on the impl side\r\n\r\n- fix eig\r\n- decide what to do with maven-artifact\r\n- longer-term, get adventure and configurate proper module metadata files\r\n- can we avoid thinking about this?",
    "head_branch": "feature/modular-awakening",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e60ed9087c4d6d37a319",
    "number": 2444,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3779)\r\n\r\nAs a consequence, SLF4J is an API dependency again (it's always existed at some level in the implementations). We don't really want that, but how long can we avoid it if MC's switch to slf4j leads to developers expecting SLF4J to be present?\r\n\r\nNow, we currently expose component logging functionality on SpongeVanilla by injecting into log4j -- that allows passing components to a logger the exact same way from the plugin developer side. This takes a fair bit of mucking about with Log4J internals, though so it is vulnerable to being disrupted by changes on Mojang's side. This functionality also hasn't been implemented on SpongeForge, and I am unsure exactly how much work it would be to do so.\r\n\r\nUse of Adventure's ComponentLogger wrapper results in less work on our side, but adds more places for plugin developers to be confused about which logging interfaces should be used.\r\n\r\nThoughts?\r\n",
    "head_branch": "feature/component-logger",
    "is_a_fork": false,
    "comments": [
      "Hey! You seem to be running an unsupported version (API 8) of SpongeAPI. Support for API 8 ended in October 2023.\r\n\r\nAPI-8 is now end-of-life. We will not be issuing any more API updates for version 8 of our API[^1]\r\n\r\nAs part of our legacy cleanup we are closing issues relating to API8/1.16\r\n___\r\n\r\nIf you wish to move this forward, please rebase this PR on the current branch and reopen it.\r\n\r\n[^1]: https://forums.spongepowered.org/t/sponge-status-update-17th-october-2023/42212#spongeapi-82-1"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e60fd9087c4d6d37a31a",
    "number": 2443,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3768)\r\n\r\nAt some point I had this in my workspace, not sure why, but saw an opportunity to improve the quality of usage for fluid states during various ChangeBlockEvent.Pre",
    "head_branch": "fluid-locatable",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add FluidState to LocatableBlock (#2443)\n\nSigned-off-by: Gabriel Harris-Rouquette <gabizou@me.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e610d9087c4d6d37a31b",
    "number": 2442,
    "body": "[**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3757)]",
    "head_branch": "feature/previous-game-mode",
    "is_a_fork": true,
    "comments": [
      "@Lignium \r\n\r\nI wonder if we should allow this key to be set? I only bring this up because setting it effectively feels like breaking the contract of what it is?",
      "@Zidane My authorization plugin manipulates game mode, adventure is set for the duration of authorization. And there was a problem, the key combination F3 + N broke, the previous game mode turned out to be the mode that temporarily set the authorization plugin, not at all what was expected. Instead of switching back and forth between creative and spectator, I get thrown into adventure mode and falling from a height.",
      "My point is I'd expect setting of GAME_MODE via key would change PREVIOUS_GAME_MODE but no one can rely on PREVIOUS_GAME_MODE actually being truthful if anyone can simply go set it via API contract.",
      "One option is to make it read-only, and with two Keys#GAME_MODE set in a row, I can set both values.",
      "The way I see it is that while game modes can change, we easily provide the DataTransaction including the Keys.PREVIOUS_GAME_MODE, since it can very well be changing."
    ],
    "commit_messages": [
      "Merge pull request #2442 from Lignium/feature/previous-game-mode\n\nAdd Keys#PREVIOUS_GAME_MODE"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e611d9087c4d6d37a31c",
    "number": 2441,
    "body": "Per https://github.com/SpongePowered/Sponge/issues/3747, the provided lookup allows the EventManager implementation to have privileged access to the listener class. This is particularly useful where the listener class is created outside the normal plugin classloader.\r\n\r\n**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3749)",
    "head_branch": "register-listeners-with-lookup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add EventManager#registerListeners overload with lookup (#2441)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e612d9087c4d6d37a31d",
    "number": 2440,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3741)\r\n\r\ngenerate Keys for all StateProperties\r\n\r\nFor reference:\r\nhttps://github.com/SpongePowered/SpongeAPI/pull/2438\r\nhttps://github.com/SpongePowered/SpongeAPI/pull/2437",
    "head_branch": "api8/statepropertiesasdata",
    "is_a_fork": false,
    "comments": [
      "@Faithcaio is this (and relatd impl PR) ready for review ? "
    ],
    "commit_messages": [
      "generate BlockStateKeys (#2440)\n\n* generate BlockStateKeys and add missing enum property types\r\n\r\nrename WallType -> WallConnectionState\r\n\r\n* generate API10 properties\r\n\r\n* foobar"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e613d9087c4d6d37a31e",
    "number": 2438,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3730)",
    "head_branch": "feature/lantern-data",
    "is_a_fork": true,
    "comments": [
      "API9 https://github.com/SpongePowered/SpongeAPI/blob/api-9/src/main/java/org/spongepowered/api/state/BooleanStateProperties.java#L81",
      "@Faithcaio \r\n\r\nGoing to merge this for api-8 just to allow this version to have this feature. When you merge this upstream, you'll need to omit this commit. Or deprecate the data entry and mention to use the state properties?",
      "@Zidane If I understand you correctly, why are you suggesting to omit this in API 9? Isn't the Data API the preferred way to work with data? The State Property API is, and has always been, a secondary (fallback) way to get data when the data is not reflected in the Data API. Let me remind you that the more data is implemented using the Data API, the better methods such as `mergeWith`, `values`, etc. will work.\r\n\r\nYou also forgot to merge the [implementation](https://github.com/SpongePowered/Sponge/pull/3730).",
      "@Lignium \r\n\r\nI didn't forget to merge it, just haven't had the chance to merge your impl PR and bump the API ref. If you wanna help me out further, have your impl PR bump the API ref then it is a clean pull.\r\n\r\nAlso I only pointed it out to @Faithcaio in-case there was some reason this cannot remain in the data system. If no such reason exists, this will be a clean merge upstream.",
      "Its more work to have the properties as Data atm. as the properties get generated automatically.\r\nAlso `Keys` becomes quite cluttered.\r\n\r\nSo the best option would be to improve how to register Properties as Data and then deprecate the properties entirely."
    ],
    "commit_messages": [
      "Add Keys#HANGING for lanterns (#2438)\n\n* Add Keys#HANGING for lanterns\r\n\r\n* Keys.HANGING -> Keys.IS_HANGING"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e614d9087c4d6d37a31f",
    "number": 2437,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3729)",
    "head_branch": "feature/wall-connection-state",
    "is_a_fork": true,
    "comments": [
      "I did add those in API9 as Properties:\r\n\r\nhttps://github.com/SpongePowered/SpongeAPI/blob/api-9/src/main/java/org/spongepowered/api/data/type/WallType.java\r\nhttps://github.com/SpongePowered/SpongeAPI/blob/api-9/src/main/java/org/spongepowered/api/state/EnumStateProperties.java#L99\r\n",
      "@Faithcaio I find the name `WallType` extremely unfortunate in this case. This is not about the wall as such, but about its connection, and there are 4 such connections. And of course, such an implementation is not complete. It does not allow the use of `BlockState#mergeWith()` and is also inconsistent with the generic `Keys#CONNECTED_DIRECTIONS`.",
      "Thanks for your contribution! This is being addressed in api-10 with a more generic approach.\r\n\r\nSuperseded by https://github.com/SpongePowered/SpongeAPI/pull/2440"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e615d9087c4d6d37a320",
    "number": 2435,
    "body": "- Remove Criterion from being in the registry as no registration process\r\nexists to properly register new criterion. A factory is provided to\r\nacquired Vanilla types\r\n- Correct the registry for STATISTIC to be the keys (So a Registry of\r\nKeys by Keys). This now follows Vanilla spec\r\n- Expose the StatisticFormatter to the API so that mod formatters on\r\nSpongeForge are properly provided to plugins. This is not complete, an\r\nimplementation issue on Sponge needs to be addressed to allow this to\r\nwork completely\r\n- Correctly dictate that a Statistic IS a Criterion which now bridges\r\nover into Scoreboard code correctly\r\n- Introduce new API onto a StatisticCategory to allow adding new\r\nstatistics to a category\r\n- Fixup javadocs in a few spots (this is not complete)\r\n\r\nSigned-off-by: Chris Sanders <zidane@spongepowered.org>",
    "head_branch": "refactor/statistic",
    "is_a_fork": false,
    "comments": [
      "Hey! You seem to be running an unsupported version (API 8) of SpongeAPI. Support for API 8 ended in October 2023.\r\n\r\nAPI-8 is now end-of-life. We will not be issuing any more API updates for version 8 of our API[^1]\r\n\r\nAs part of our legacy cleanup we are closing issues relating to API8/1.16\r\n___\r\n\r\nIf you wish to move this forward, please rebase this PR on the current branch and reopen it.\r\n\r\n[^1]: https://forums.spongepowered.org/t/sponge-status-update-17th-october-2023/42212#spongeapi-82-1"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e616d9087c4d6d37a321",
    "number": 2433,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3700)\r\n\r\n### API Issues/Breaks:\r\n\r\n#### WorldGen\r\n- [x] WorldGen see https://github.com/SpongePowered/SpongeAPI/pull/2428\r\n\r\n#### RandomSource\r\n\r\n- [x] `RandomProvider.Source`\r\n  - extends `RandomGenerator`\r\n  - [x] `setSeed`\r\n  - [x] `fork`\r\n  - [x] `consume(int)`\r\n  - [ ] `forkPositional` `PositionalRandomFactory`?\r\n  - [ ] `triangle(double, double)`?\r\n  - [ ] `nextIntBetweenInclusive(int, int)`?\r\n- [ ] Factory?\r\n  - LegacyRandomSource\r\n  - XoroshiroRandomSource\r\n  - [ ] PositionalRandomFactory?\r\n    - `RandomSource at(int, int, int)`\r\n    - `RandomSource fromHashOf(String)`\r\n- `RandomProvider` impls\r\n  - [x] `Region` - `LevelReaderMixin_API` + WorldLike\r\n  - [x] `WorldLike` - `LevelAccessorMixin_API`\r\n  - [x] `Entity` - `EntityMixin_API`\r\n- [x] `ItemStackGenerator.Builder#add/addall` /w RandomGenerator instead of Random\r\n- [x] `TradeOfferGenerator#apply(entity, RandomProvider.Source)`\r\n- [x] `RandomObjectTable#get(RandomGenerator)` and impls\r\n- [x] `NestedTableEntry#get(RandomGenerator)`\r\n- [x] `VariableAmount#flooredAmount(RandomGenerator)`\r\n- [x] `VariableAmount#amount(RandomGenerator)` and impls\r\n- [x] `LootTable#get(RandomGenerator)` (unused?)\r\n- [x] `SeededVariableAmount#amount(RandomGenerator, T)`\r\n- [x] `WeightedCollectionValue#get(RandomGenerator)`\r\n\r\n#### Chat\r\nhttps://github.com/KyoriPowered/adventure/issues/765 / https://github.com/KyoriPowered/adventure/pull/777\r\n\r\n- [ ] Signed Text Messages (pending Adventure Library Update)  \r\n- [ ] ChatType (pending Adventure Library Update)\r\n- [x] ChatType registry\r\n- [x] ChatTypeTemplate\r\n  - [ ] advanced Builder\r\n    - ChatDecoration.Parameter enum (SENDER,TEAM_NAME,CONTENT)\r\n    - translation_key can contain color codes: §a<%s>: %s\r\n    - currently not reloadable (https://bugs.mojang.com/browse/MC-251318) \r\n      - dynamically created ChatTypes cannot be used to send messages\r\n- Event\r\n  - [x] `PlayerChatEvent.Decorate` \r\n      - message mutable\r\n      - is also called for command messages\r\n  - [x] `PlayerChatEvent.Submit` \r\n    - message component cannot be changed when signed\r\n    - sender/target component can be changed\r\n    - chattype can be changed\r\n    - predicate to filter players receiving\r\n  - [x] `SystemMessageEvent`\r\n  - [ ] event for command messages?\r\n- [ ] interface for signed message\r\n- [ ] command parameter for signed message\r\n\r\n#### DataPackTypes\r\n- [ ] game_event tag + registry\r\n- [x] chat_type + registry\r\n- [ ] loot_tables\r\n- [ ] `worldgen/world_preset` (not needed?)\r\n- [ ] `worldgen/flat_level_generator_preset` (not needed?)\r\n\r\n#### Other\r\n- [x] `PackContents#paths(..)`\r\n  - removed `depth` parameter\r\n  - `filter` Predicate now accepts `ResourceKey` instead of String\r\n\r\n",
    "head_branch": "snapshots/1.19",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e617d9087c4d6d37a322",
    "number": 2432,
    "body": "Implement: https://github.com/SpongePowered/Sponge/pull/3697\r\nclose #2431",
    "head_branch": "feature/snbt_format",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "feat(data): add `DataFormats#SNBT`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e619d9087c4d6d37a323",
    "number": 2430,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3688)",
    "head_branch": "feature/improve-save",
    "is_a_fork": true,
    "comments": [
      "Now explain exactly what the two enum values do :). Rather what the implementation is contractually obligated to do.",
      "Some concerns were raised about whatever the new method is ambiguous with the old one and that it would be a bit better to be more explicit here. The first option would be to introduce a new method `saveAndFlush` and keep the old one. The second option would be to use more explicit enum names.\r\n\r\nI'm not really sure what would be the best approach for the enums here and would vision it more like:\r\n```java\r\npublic enum WorldSaveMode {\r\n    SAVE_CHUNKS,\r\n    SAVE_METADATA,\r\n    FLUSH\r\n}\r\n\r\nboolean save(EnumSet<WorldSaveMode> saveModes) throws IOException;\r\n```\r\nThis would give more flexibility but it could hurt more the typical use case as you usually would want to have (`SAVE_CHUNKS`, `SAVE_METADATA`) combo and optionally add the `FLUSH` option there. Also does passing just `FLUSH` mean its a no-op or does it flush the pending writes if there are any? On top of that it does require more stuff on the implementation side. In my opinion using enums here would look cumbersome without the use of `EnumSet`.\r\n\r\nSorry for going back and forth with this.",
      "> Some concerns were raised about whatever the new method is ambiguous with the old one and that it would be a bit better to be more explicit here. The first option would be to introduce a new method `saveAndFlush` and keep the old one. The second option would be to use more explicit enum names.\r\n\r\nI like the option with the `saveAndFlush()` method. It's simple and obvious. Better than the boolean flag. Initially, I did so, but Zidane expressed an opinion about the Enum option. Other potential \"modes\" of saving in the future, as it seems to me, cannot be for the sake of which we need to do Enum. And the `SerializationBehavior` is responsible for managing what needs to be stored (manually or automatic), it is actually a world parameter, not a passed argument. I suggest just making the `saveAndFlush()` method. If in the future you need to redo this, the method can be easily deprecated and redirect the call to the right place.",
      "> Other potential \"modes\" of saving in the future, as it seems to me, cannot be for the sake of which we need to do Enum.\r\n\r\nI would imagine you could want to do something like `world.save(EnumSet.of(WorldSaveMode.SAVE_METADATA))` to save the metadata immediately but without the chunks. But it is more complicated.\r\n\r\n> I suggest just making the saveAndFlush() method. \r\n\r\nThat should be enough for now to get this merged."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e619d9087c4d6d37a324",
    "number": 2429,
    "body": "**SpongeAPI** |  [Sponge](https://github.com/SpongePowered/Sponge/pull/3686)\r\n\r\nAdd separate method for saving world with forced flushing.\r\nRequired to avoid memory leaks during intensive modification of a huge number of chunks.\r\nBy analogy with the `/save-all [flush]` command, you can perform both simple save and save with flush here and now.",
    "head_branch": "fix/block-entity-memory-leak",
    "is_a_fork": true,
    "comments": [
      "Need a lot more docs on this method to explain exactly what it will do and exactly what implementations are expected to honor.\r\n\r\nFurther, I'd prefer just a single `save` method that is given a `SaveMode` (name not final) (which could be an enum, similar to SerializationBehavior). The current save method can be deprecated and default implemented to call the new version with a value that is just save."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e61bd9087c4d6d37a325",
    "number": 2428,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3683)\r\n\r\n### World\r\n\r\n- [x] `WorldTemplate` `dimension` data pack entry (DataHolder)\r\n- [x] `WorldGenerationConfig`\r\n    - part of `WorldTemplate` and `ServerWorldProperties`\r\n    - in vanilla unique based on server.properties\r\n    - sponge overrides in `dimension` data pack entry\r\n- [ ] `worldgen/world_preset` data pack entry? (WorldGenerationConfig) \r\n- [x] `ServerWorldProperties` ()\r\n- [x] `WorldProperties`/`ServerWorldProperties` (DataHolder)\r\n\r\n### WorldType\r\n\r\n- [x] `WorldTypeTemplate` `dimension_type` data pack entry\r\n- [x] `WorldType` `RegsistryTypes.WORLD_TYPE` loaded `dimension_type` data pack entry (DataHolder)\r\n  - `WorldTypeEffect`\r\n\r\n### ChunkGenerator\r\n\r\n- [x] `ChunkGenerator`/`ConfigurableChunkGenerator`\r\n- [x] `ChunkGeneratorConfig` \r\n  - `NoiseGeneratorConfig` \r\n  - `FlatGeneratorConfig`\r\n- BiomeProvider\r\n- StructureSet list\r\n\r\n### BiomeProvider\r\n\r\n- [x] `BiomeProvider`\r\n  - [x] `ConfigurableBiomeProvider`\r\n  - [x] `FixedBiomeProvider`\r\n- [x] `BiomeProviderConfig`\r\n  - [x] `EndStyleBiomeConfig`\r\n  - [x] `CheckerboardBiomeConfig`\r\n  - [x] `MultiNoiseBiomeConfig`\r\n\r\n### NoiseGeneratorConfig\r\n\r\n- [x] `NoiseGeneratorConfigTemplate` `worldgen/noise_settings` data pack entry\r\n- [x] `NoiseGeneratorConfig` loaded `worldgen/noise_settings` data pack entry\r\n- [x] `NoiseGeneratorConfigs` `RegistryTypes.NOISE_GENERATOR_CONFIG`\r\n- [x] `NoiseConfig`\r\n- [x] `NoiseConfigs` `RegistryTypes.NOISE_CONFIG`\r\n- [x] `SurfaceRule`\r\n  - [x] `Factory` noiseThreshold\r\n- [x] `NoiseTemplate` `worldgen/noise` data pack entry\r\n- [x] `Noise` loaded `worldgen/noise` data pack entry\r\n- [x] `Noises` `RegsistryTypes.NOISE`\r\n- [x] `NoiseRouter`\r\n    - [x] `DensityFunction` loaded `worldgen/density_function` data pack entry\r\n    - [x] `DensityFunctions` `RegistryTypes.DENSITY_FUNCTION`\r\n    - [x] `DensityFunctionTemplate` `worldgen/density_function` data pack entry\r\n      - [ ] advanced construction of density functions\r\n- [x] `BiomeAttributes` for initial spawn\r\n\r\n### FlatGeneratorConfig\r\n\r\n- [x] `FlatGeneratorConfig`\r\n- [x] `FlatGeneratorConfigs` `RegistryTypes.FLAT_GENERATOR_CONFIG`\r\n- [ ] `worldgen/flat_level_generator_preset` data pack entry?\r\n- [x] `LayerConfig`\r\n  - StructureSets \r\n\r\n### Structures\r\n\r\n- [x] `StructureType`\r\n- [x] `StructureTypes` `RegistryTypes.STRUCTURE_TYPE`\r\n- [x] `Structure` loaded `worldgen/structure` data pack entry\r\n  - [ ] Structure.Builder?\r\n    - [ ] Jigsaw structure builder?\r\n- [x] `Structures` `RegistryTypes.STRUCTURE`\r\n- [x] `Structures` `RegistryTypes.STRUCTURE`\r\n- [x] `StructureTemplate` `worldgen/structure` data pack entry\r\n- [x] `StructureSet` loaded `worldgen/structure_set` data pack entry\r\n  - (weighted Structure list with StructurePlacement)\r\n  - used in ChunkGenerator (`possibleStructureSets`)\r\n- [x] `StructureSets` `RegistryTypes.STRUCTURE_SET` \r\n- [x] `StructureSetTemplate` `worldgen/structure_set` data pack entry\r\n- [x] `StructurePlacement` + `.Builder`\r\n    - [ ] sub types in API?\r\n    - [ ] expose frequency?\r\n    - [ ] expose FrequencyReductionMethod?\r\n    - [ ] expose deprecated ExclusionZone?\r\n- [x] `JigsawPool` loaded `worldgen/template_pool` data pack entry\r\n- [x] `JigsawPoolTemplate` `worldgen/template_pool` data pack entry\r\n- [x] `JigsawPools` `RegistryType.JIGSAW_POOL`\r\n- [x] `JigsawPoolElement`\r\n  - [ ] sub types in API? or other ways to access the Schematic key / feature / list of elements\r\n- [x] `SchematicTemplate` `structures` data pack entry\r\n  - [ ] saving Schematic as Template\r\n- [x] `Schematic` on vanilla `StructureTemplate`\r\n  - [ ] easier access? atm. available via DataPackManager->Template->Schematic\r\n- [x] `ProcessorList` loaded `worldgen/processor_list` data pack entry\r\n- [x] `ProcessorListTemplate` `worldgen/processor_list` data pack entry\r\n- [x] `ProcessorLists` `RegistryTypes.PROCESSOR_LIST`\r\n- [x] `Processor`\r\n- [x] `ProcessorType`\r\n- [x] `ProcessorsTypes` `RegistryTypes.PROCESSOR_TYPE`\r\n\r\n### Biome\r\n\r\n- [x] `BiomeTemplate` `worldgen/biome` data pack entry\r\n- [x] `Biome` `RegistryTypes.BIOME` loaded `worldgen/biome` data pack entry\r\n  - Placed Features in decoration steps\r\n  - Carvers in carving steps\r\n  - [x] `SoundConfig.Mood`\r\n  - [x] `SoundConfig.Additional`\r\n  - [x] `SoundConfig.BackgroundMusic`\r\n  - [x] `ParticleConfig`\r\n  - [x] `GrassColorModifier`/`GrassColorModifiers` `RegistryType.GRASS_COLOR_MODIFIER`\r\n  - [x] `Precipitation`/`Precipitations` `RegistryType.PRECIPITATION`\r\n  - [x] `TemperatureModifier`/`TemperatureModifiers` `RegistryType.TEMPERATURE_MODIFIER`\r\n- [x] `BiomeTags`\r\n- [x] `BiomeAttributes` (better Factory)\r\n- [x] `NaturalSpawnCost` (mapped by EntityType)\r\n- [x] `NaturalSpawner` (mapped by EntityCategory)\r\n\r\n### Feature\r\n\r\n- [x] `FeatureType` \r\n- [x] `FeatureTypes` `RegistryTypes.FEATURE_TYPE`\r\n- [x] `FeatureTemplate` `worldgen/configured_feature' data pack entry\r\n- [x] `Feature` loaded `worldgen/configured_feature` data pack entry\r\n- [x] `Features` `RegistryTypes.FEATURE`\r\n- [x] `PlacedFeatureTemplate` `worldgen/placed_feature' data pack entry\r\n- [x] `PlacedFeature` loaded `worldgen/placed_feature` data pack entry\r\n  - [x] `PlacementModifier`\r\n  - [x] `PlacementModifierType`\r\n  - [x] `PlacementModifierTypes` `RegistryTypes.PLACEMENT_MODIFIER`\r\n- [x] `PlacedFeatures` `RegistryTypes.PLACED_FEATURE`\r\n- [x] `DecorationStep` `RegistryTypes.DECORATION_STEP`(enum)\r\n\r\n### Carver\r\n\r\n- [x] `CarverType` \r\n- [x] `CarverTypes` `RegistryTypes.CARVER_TYPE`\r\n- [x] `CarverTemplate` `worldgen/configured_carver` data pack entry\r\n- [x] `Carver` loaded `worldgen/configured_carver` data pack entry\r\n- [x] `Carvers` `RegistryTypes.CARVER`\r\n- [x] `CarvingStep` \r\n- [x] `CarvingSteps` `RegistryTypes.CARVING_STEP`(enum)\r\n\r\n## Other API Breaks/Adjustments/Additions/Fixes\r\n- `Advancement.Builder` is now `AdvancementTemplate.Builder`\r\n- `DataPackSerializable` is now `DataPackEntry`\r\n- `DataPackManager` to register `DataPackEntry` at any time\r\n  - entries cannot always be reloaded\r\n- moved `WorldManager` `#teplateKeys` `#templateExists` `#loadTemplate` `#saveTemplate` to `DataPackManager`\r\n- `DataPackType`/`DataPack`\r\n  - `RecipeRegistration` and Builders\r\n  - `TagTemplate`\r\n- `DataPackEntiryBuilder`\r\n- removed `ServerWorld#asTemplate` use `WorldTemplate.Builder#from(world)` instead\r\n- `VolumeApplicators#applyBlockEntityArchetype` fix missing rounding\r\n- `VolumePositionTranslators#relativeTo` fix block offset direction add->sub\r\n\r\n\r\n",
    "head_branch": "api10/worldgen",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2428 from SpongePowered/api10/worldgen\n\n[API10] World Generation API"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e61cd9087c4d6d37a326",
    "number": 2425,
    "body": "[Sponge](https://github.com/SpongePowered/Sponge/pull/3668) | SpongeAPI",
    "head_branch": "api8/serialized-blockstate",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Expose BlockState string representation (#2425)\n\n* Expose BlockState string representation\r\n\r\n* Clarify BlockState#asString javadoc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e61dd9087c4d6d37a327",
    "number": 2420,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3659)",
    "head_branch": "api9/remove-structure-config",
    "is_a_fork": true,
    "comments": [
      "@ImMorpheus \r\n\r\nHow is this handled now?",
      "@Zidane With the current system (api-9) you add structures by creating a `StructureGenerationConfig` and adding it to the `NoiseGenerationConfig`.\r\nThe `NoiseGenerationConfig` is then used by the `ChunkGenerator`\r\n\r\nhttps://github.com/SpongePowered/SpongeAPI/blob/9a481d36ba9c9fee4d63627452c199c68f4b9910/src/main/java/org/spongepowered/api/world/generation/config/structure/StructureGenerationConfig.java#L63-L67\r\n\r\nhttps://github.com/SpongePowered/SpongeAPI/blob/9a481d36ba9c9fee4d63627452c199c68f4b9910/src/main/java/org/spongepowered/api/world/generation/config/NoiseGeneratorConfig.java#L185\r\n\r\nhttps://github.com/SpongePowered/SpongeAPI/blob/9a481d36ba9c9fee4d63627452c199c68f4b9910/src/main/java/org/spongepowered/api/world/generation/ChunkGenerator.java#L37-L51\r\n\r\nThe `ChunkGenerator` can be used to generate a world (See WorldTemplate and WorldTest testplugin)\r\n\r\n1.18.2 however nuked `StructureSettings` and decoupled `NoiseGenerationConfig` from structure generation, added a `StructureSet` class with a `STRUCTURE_SET_REGISTRY` and did a complete refactor of structure generation.\r\nThis PR removes the current api so that we can update to 1.18.2 and rework our current approach."
    ],
    "commit_messages": [
      "remove structure config api (#2420)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e61ed9087c4d6d37a328",
    "number": 2418,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3645)\r\n\r\n`StateProperty` are not in a registry. \r\n\r\nProvide Factory methods to access them instead.\r\n\r\nSome EnumStateProperty were missing an API Type",
    "head_branch": "api9/blockstateproperty",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "BlockStateProperties are not in a registry\n\nadd missing API types for enum block states"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e61fd9087c4d6d37a329",
    "number": 2416,
    "body": "(impl pending)\r\n\r\nJust a quick peek at what some API could look like, to expose MiniMessage as a type of command argument, and integrate it with Sponge's placeholder system.\r\n\r\nOn the impl side, I also plan to adjust the default config serialization so any object-mapped chat components are serialized using MiniMessage.",
    "head_branch": "api8/adventure-4.10",
    "is_a_fork": false,
    "comments": [
      "Hey! You seem to be running an unsupported version (API 8) of SpongeAPI. Support for API 8 ended in October 2023.\r\n\r\nAPI-8 is now end-of-life. We will not be issuing any more API updates for version 8 of our API[^1]\r\n\r\nAs part of our legacy cleanup we are closing issues relating to API8/1.16\r\n___\r\n\r\nIf you wish to move this forward, please rebase this PR on the current branch and reopen it.\r\n\r\n[^1]: https://forums.spongepowered.org/t/sponge-status-update-17th-october-2023/42212#spongeapi-82-1"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e620d9087c4d6d37a32a",
    "number": 2415,
    "body": "**API** | [Impl](https://github.com/SpongePowered/Sponge/pull/3638)",
    "head_branch": "snapshots/1.18.2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge branch 'api-9' into snapshots/1.18.2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e621d9087c4d6d37a32b",
    "number": 2414,
    "body": "**API** | [Impl](https://github.com/SpongePowered/Sponge/pull/3628)\r\n\r\nThis matches `ItemStackSnapshot`",
    "head_branch": "feature/hoverable-itemstack",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Make ItemStack also implement HoverEventSource (#2414)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e622d9087c4d6d37a32c",
    "number": 2412,
    "body": "I am interested in knowing the page that a player is viewing of a paginated list I sent them.\r\n\r\nI want the option to send a new paginated list as a clickable menu, but it will only work well if I send them back an updated paginated list at the same page they left off at. So, I want to be able to ask what page they were viewing when they clicked on something.\r\n\r\nTo use this, the developer would do something like the following:\r\n\r\n```java\r\nMap<UUID, PaginationList> playerLists = new HashMap<>();\r\nString textData = \"Click to update me!\";\r\n\r\nvoid sendPagination(ServerPlayer player) {\r\n  PaginationList list = paginationService.builder().title(\"title\")\r\n    .contents(Collections.singletonList(Component.text(textData)\r\n      .clickEvent(ClickEvent.runCommand(\"/update\"))\r\n    .build();\r\n  int index;\r\n  if (playerLists.contains(player.uniqueId())) {\r\n    index = paginationService.currentPage(playerLists.get(player.uniqueId())).orElse(1);\r\n  } else {\r\n    index = 1;\r\n  }\r\n  list.sendTo(player, index);\r\n  playerLists.put(player.uniqueId(), list);\r\n}\r\n\r\n...\r\n// in send command\r\nsendPagination(player);\r\n...\r\n\r\n...\r\n// in update command\r\ntextData = \"Updated!\"\r\nsendPagination(player)\r\n...\r\n```\r\n\r\nAnother option would be to put this current page data in the PaginationList interface itself. Or is there another, simpler way to request a specific page that a player left off at?",
    "head_branch": "api8/pagination-pages",
    "is_a_fork": true,
    "comments": [
      "Another option could be to add a custom index option when building a paginator in `PaginationList.Builder`. So, when you build a `PaginationList`, you can set some integer or string that identifies it so that when you build another `PaginationList` with the same id, it opens back up to the same page they were viewing before, essentially \"replacing\" the previous one.",
      "This isn't a great way to solve the problem as we don't assume stored state anywhere in the API (whether or not that's the case in the impl is irrelavent, even if it's the only viable way to do it -- [though all we really store is the paginationlist for a given player](https://github.com/SpongePowered/Sponge/blob/800c32eb4baf9d241676a1151b1a803ab25004a2/src/main/java/org/spongepowered/common/service/game/pagination/SpongePaginationService.java#L64-L96)).\r\n\r\nI don't want to store any more state.\r\n\r\nThere might be a case for adding a callback or event (`ChangePaginationPageEvent`?) for changing a page, so that your plugin can do the state management it needs to do - though it might require some internal logic changes.",
      "I was hoping we could just pass through the [stored page index in the ActivePagination](https://github.com/SpongePowered/Sponge/blob/800c32eb4baf9d241676a1151b1a803ab25004a2/src/main/java/org/spongepowered/common/service/game/pagination/ActivePagination.java#L59) of the [last known pagination](https://github.com/SpongePowered/Sponge/blob/800c32eb4baf9d241676a1151b1a803ab25004a2/src/main/java/org/spongepowered/common/service/game/pagination/SpongePaginationService.java#L66-L67). \r\n\r\nI'm all for the page-change event though. Isn't that only when `/page next` and `/page prev` is called though? ",
      "> I was hoping we could just pass through the [stored page index in the ActivePagination](https://github.com/SpongePowered/Sponge/blob/800c32eb4baf9d241676a1151b1a803ab25004a2/src/main/java/org/spongepowered/common/service/game/pagination/ActivePagination.java#L59) of the [last known pagination](https://github.com/SpongePowered/Sponge/blob/800c32eb4baf9d241676a1151b1a803ab25004a2/src/main/java/org/spongepowered/common/service/game/pagination/SpongePaginationService.java#L66-L67).\r\n\r\nI honestly do not want to do that - it's very much an implementation detail designed to support the `/page` command which, in itself, [is part of the pagination service](https://github.com/SpongePowered/Sponge/blob/ee6029fcc6aa2a48deca53ba0ea557680ad2bcc1/src/main/java/org/spongepowered/common/service/game/pagination/SpongePaginationService.java#L127-L169). The state of the system is internal and I don't want other implementations of the service to feel beholden to that.\r\n\r\n> I'm all for the page-change event though. Isn't that only when /page next and /page prev is called though?\r\n\r\nWell... considering there isn't one right now, we can do what we like. Could be on the `/page` command, could be on clicking things, it'd all be up to the service.",
      "> Well... considering there isn't one right now, we can do what we like. \r\n\r\nWould you like me to come up with an event interface then? Or do you no want to put other pagination implementations on the hook for posting those events?",
      "Going over old PRs. \r\n\r\n> I honestly do not want to do that - it's very much an implementation detail designed to support the /page command which, in itself, [is part of the pagination service](https://github.com/SpongePowered/Sponge/blob/ee6029fcc6aa2a48deca53ba0ea557680ad2bcc1/src/main/java/org/spongepowered/common/service/game/pagination/SpongePaginationService.java#L127-L169).\r\n\r\nI think this is a core point of why this solution is not going to work. A few other valid solutions have been proposed, events being a similar approach to what we are doing for economy, so I'll close this PR.\r\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e623d9087c4d6d37a32d",
    "number": 2409,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3604)\r\n\r\nAdds the API for effectively a Transaction with the World for an \"all or nothing\" approach.\r\n\r\nAims to provide https://github.com/SpongePowered/SpongeAPI/issues/2407",
    "head_branch": "api8/game-transaction",
    "is_a_fork": false,
    "comments": [
      "Hey! You seem to be running an unsupported version (API 8) of SpongeAPI. Support for API 8 ended in October 2023.\r\n\r\nAPI-8 is now end-of-life. We will not be issuing any more API updates for version 8 of our API[^1]\r\n\r\nAs part of our legacy cleanup we are closing issues relating to API8/1.16\r\n___\r\n\r\nIf you wish to move this forward, please rebase this PR on the current branch and reopen it.\r\n\r\n[^1]: https://forums.spongepowered.org/t/sponge-status-update-17th-october-2023/42212#spongeapi-82-1"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e624d9087c4d6d37a32e",
    "number": 2405,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3573)\r\n\r\nThis introduces a new form of Vanish as an API. With 1.17+ adding more possible customization chances for Vanish, I felt it necessary to introduce a possible option for how vanish can be customized further out of the box. In hindsight, the added Keys just made for worse experience using the API, so I bring VanishState, which has some relatively simple methods by itself, and it is in itself immutable.\r\n\r\nThe intended use is simply:\r\n```java\r\n// Vanish entirely\r\nplayer.offer(Keys.VANISH_STATE, VanishState.vanished());\r\n\r\n// Vanish with collisions\r\nplayer.offer(Keys.VANISH_STATE, VanishState.vanished().ignoreCollisions(false));\r\n\r\n// Vanish with targeting\r\nplayer.offer(Keys.VANISH_STATE, VanishState.vanished().untargetable(false));\r\n\r\n// Unvanish (visible)\r\nplayer.offer(Keys.VANISH_STATE, VanishState.unvanished());\r\n```\r\n\r\n\r\nAnd pulling from the VanishTest test plugin:\r\n```java\r\n\r\n@Plugin(\"vanish-test\")\r\npublic class VanishTest {\r\n\r\n    private final PluginContainer plugin;\r\n\r\n    @Inject\r\n    public VanishTest(PluginContainer plugin) {\r\n        this.plugin = plugin;\r\n    }\r\n\r\n    @Listener\r\n    public void onRegisterSpongeCommand(final RegisterCommandEvent<Command.Parameterized> event) {\r\n        final Parameter.Value<Entity> entityKey = Parameter.entity()\r\n            .key(\"entity\")\r\n            .usage(key -> \"any entity\")\r\n            .optional()\r\n            .build();\r\n        final Flag collisionsFlag = Flag.builder()\r\n            .setParameter(entityKey)\r\n            .alias(\"c\")\r\n            .build();\r\n        final Flag targetingFlag = Flag.builder()\r\n            .setParameter(entityKey)\r\n            .alias(\"t\")\r\n            .build();\r\n        event.register(\r\n            this.plugin,\r\n            Command.builder()\r\n                .addParameter(entityKey)\r\n                .addFlag(collisionsFlag)\r\n                .addFlag(targetingFlag)\r\n                .executor(ctx -> {\r\n                    ctx.all(entityKey).forEach(entity -> entity.offer(Keys.VANISH_STATE, VanishState.vanished()\r\n                        .untargetable(ctx.hasFlag(targetingFlag))\r\n                        .ignoreCollisions(ctx.hasFlag(collisionsFlag))));\r\n                    ctx.sendMessage(Identity.nil(), Component.text(\"Vanished!\", NamedTextColor.DARK_AQUA));\r\n                    return CommandResult.success();\r\n                })\r\n                .build(),\r\n            \"vanish\"\r\n        );\r\n        event.register(\r\n            this.plugin,\r\n            Command.builder()\r\n                .addParameter(entityKey)\r\n                .executor(ctx -> {\r\n                    ctx.all(entityKey).forEach(entity -> entity.offer(Keys.VANISH_STATE, VanishState.unvanished()));\r\n                    ctx.sendMessage(Identity.nil(), Component.text(\"Unvanished! Huzzah!\", NamedTextColor.AQUA));\r\n                    return CommandResult.success();\r\n                })\r\n                .build(),\r\n            \"unvanish\"\r\n        );\r\n    }\r\n\r\n}\r\n```",
    "head_branch": "api8/vanish-state",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Introduce VanishState\n\nThis state keeps track of the extra options and enables a\nsimpler usage of 'simple vanish' vs customizations of vanish.\n\nSigned-off-by: Gabriel Harris-Rouquette <gabizou@me.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e625d9087c4d6d37a32f",
    "number": 2404,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3572)\r\n\r\nAPI I did not add but to consider for the future:\r\n - Building custom `SurfaceRule`s and exposing all of the vanilla provided SurfaceRules.\r\n   -  I only exposed the SurfaceRules for the main dimensions for now.\r\n - Building custom terrain `Shaper`s based on CubicSplines like vanilla.\r\n",
    "head_branch": "api9/worldgen",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "update WorldGen API"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e626d9087c4d6d37a330",
    "number": 2403,
    "body": "Fixes outright issues in some of the builder javadocs and elaborates on some non-obvious methods/parameters/etc\r\n\r\nSome of these could also be backported to API 7 but I believe that's officially finished? Would be happy to PR to it anyway if desired",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Improve PotionEffect(.Builder) javadocs (#2403)\n\n* Improve PotionEffect(.Builder) javadocs\r\n\r\nFixes outright issues in some of the builder javadocs and elaborates on some non-obvious methods\r\n\r\n* Further javadoc improvements/fixes\r\n\r\n* Update ambient description & improve consistency"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e627d9087c4d6d37a331",
    "number": 2401,
    "body": "Impl PR : [Sponge#3564](https://github.com/SpongePowered/Sponge/pull/3564)\r\n\r\nChanges:\r\n- Make `entities` and `filterAffectedLocations` unmodifiable.\r\n- Make `filterEntities` and `filterAffectedLocations` return void.\r\n- Fix event impl class hierarchy (enforces the presence of `SPAWN_TYPE` context key)\r\n- Exclude `SpawnEntityEvent` from `SpongeEventFactoryTest#testCreate` because the context key is not mocked.\r\n",
    "head_branch": "fix/spawnfilter",
    "is_a_fork": true,
    "comments": [
      "I just saw that [ExplosionEvent.Detonate](https://github.com/SpongePowered/SpongeAPI/blob/api-8/src/main/java/org/spongepowered/api/event/world/ExplosionEvent.java#L99) is in similar situation (`affectedLocations()` and `filterAffectedLocations(Predicate)`). Should I make this list unmodifiable too?\r\n",
      "> Should I make this list unmodifiable too?\r\n\r\nyep!",
      "Looks like I have an issue with `event-impl-gen`. I ran `clean` then `genEventImpl` gradle tasks multiple times but the generated event doesn't inherit `AbstractDetonateEvent`.\r\n\r\nTest code:\r\n```java\r\n    @Listener\r\n    public void onDetonate(ExplosionEvent.Detonate event) {\r\n        System.out.println(event.getClass().getName());\r\n        System.out.println(event.getClass().getSuperclass().getName());\r\n    }\r\n```\r\n\r\nResult:\r\n```\r\norg.spongepowered.api.event.ExplosionEvent$Detonate$Impl\r\norg.spongepowered.api.event.impl.entity.AbstractAffectEntityEvent\r\n```\r\n\r\nSame problem for `SpawnEntityEvent`:\r\n```\r\norg.spongepowered.api.event.SpawnEntityEvent$Pre$Impl\r\norg.spongepowered.api.event.impl.entity.AbstractAffectEntityEvent\r\n```\r\n\r\nIt seems that the first superclass is always ignored despite the `@ImplementedBy` annotation. ",
      "I have probably identified the problem. This sounds like a priority issue with the `ImplementedBy` annotation. \r\n\r\nI can easily fix it by increasing priority of the annotation on the proper interface but I find it counterintuitive that `event-impl-gen` chooses the furthest annotation by default.\r\n\r\nhttps://github.com/SpongePowered/event-impl-gen/blob/6f28baf367d2e95cbdd314cd6160468e2a0209d6/src/main/java/org/spongepowered/eventimplgen/processor/EventImplWriter.java#L184\r\n`priority > max` would make more sense here IMO.",
      "https://github.com/SpongePowered/SpongeAPI/commit/3481b71ed1d7d9f9e5bcf8c55628ff1905da2ad6"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e628d9087c4d6d37a332",
    "number": 2400,
    "body": "**API** | [IMPL](https://github.com/SpongePowered/Sponge/pull/3562)\r\n\r\nPretty simple change. Since #2362 has been sitting for a while, thought I'd take it up myself.",
    "head_branch": "api8/impl-componentlike",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "make ItemStack implement ComponentLike (fixes #2362) (#2400)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e629d9087c4d6d37a333",
    "number": 2396,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3546) | [Original Issue](https://github.com/SpongePowered/Sponge/issues/3540)\r\n\r\nThis is because we don't necessarily know the plugin or mod that registers a command via Brigadier\r\n\r\nSee the original issue.",
    "head_branch": "api8/command-plugin",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Make the plugin optional for CommandMapping\n\nThis is because we don't necessarily know the plugin or mod that registers a command via Brigadier"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e62ad9087c4d6d37a334",
    "number": 2394,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3536)",
    "head_branch": "api8/entity-category",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add EntityCategory to API\n\nSigned-off-by: Gabriel Harris-Rouquette <gabizou@me.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e62bd9087c4d6d37a335",
    "number": 2393,
    "body": "For tracking purposes",
    "head_branch": "feature/resources",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add resource manager for data packs\n\nAdd packs\n\nUpdates to resources\nI did most of this a few months ago. I don't remember all the specifics.\n\nRemove leftover empty file from rebase\n\nFix compile errors related to PluginContainer\n\nAdd some missing javadocs\n\nConvert PackVersion to a standard catalog type\n\nMore edits to javadocs\n\nFix licenses\n\nMake proper register events for ResourceReloadListener and PackDiscoverer\n\nAdd a reload method to Engine to reload resources.\n\nTweaks to API for common impl\n\nUpdate to use kyori text\n\nUpdate for API changes\n\nImplement resource events\nAPI: rename the register event method\n\nUpdate for registry changes\n\nResourcePath now wraps ResourceKey\n\nUpdate for latest api-8.\n\nSigned-off-by: Chris Sanders <zidane@spongepowered.org>\n\nFixup more naming convention\n\n- Remove the need for a Closeablelist by turning it into Stream (which\nauto closes) in ResourceManager.\n\nSigned-off-by: Chris Sanders <zidane@spongepowered.org>\n\nMore refactoring\n\n- PackInfo -> PackInformation\n- Establish that `Pack` is engine-scoped. It is not the intention of\nthis API to instill that client resources should be loaded server side\nnor should server data be loaded client side. That does not mean that a\nplugin couldn't take it upon themselves to do so (they are simply files\nafter all) but it is the goal of the API to correctly establish what a\ndeveloper *should* be doing ultimately.\n- Per the former, move retrieval of a PluginContainer's pack to\nResourceManager\n- Migrate PackVersion/PackType to enums. There is no reason a developer\nshould be creating additional versions or types via the API.\n\nSigned-off-by: Chris Sanders <zidane@spongepowered.org>\n\nMove the information manager to the resource manager.\n\nPlugins should grab their information first. If they want a pack, they\ncan call it off the information object.\n\nSigned-off-by: Chris Sanders <zidane@spongepowered.org>\n\nUpdate for feedback/refactoring\n\n- Remove exposing listeners, not really a goal of this API unless we one\n day add the ability to do additional plugin provided packs\n- Move PackRepository up to engine, this is not tied to resource\nmanagers\n- Various method name fixes/javadoc fixes (needs an overall javadoc\npass)\n\nSigned-off-by: Chris Sanders <zidane@spongepowered.org>\n\nName isn't very helpful.\n\nSigned-off-by: Chris Sanders <zidane@spongepowered.org>\n\nMore updates to the resource packs API based on feedback.\n\nSigned-off-by: Chris Sanders <zidane@spongepowered.org>\n\nMore updates based on discussion\n\n- Toss PackOrder\n- Toss PackVersion\n- Add PackStatus (makes way more sense than order)\n- Toss PackContentsMetadata (way too tied to Vanilla)\n- Adjust more javadocs\n\nSigned-off-by: Chris Sanders <zidane@spongepowered.org>\n\nFurther work after implementing the resource pack API\n\nSigned-off-by: Chris Sanders <zidane@spongepowered.org>\n\nEnforce that this is an id (and not a name)\n\nSigned-off-by: Chris Sanders <zidane@spongepowered.org>\n\nAdd requireResource method to Pack\n\n* Add #close override to resource related AutoClosables to match what is expected in Vanilla to reduce unnecessary checked exceptions (and FindBugs warnings)\n\nUpdate based on comments in PR\n\nCo-authored-by: Chris Sanders <zidane@spongepowered.org>\nCo-authored-by: Daniel Naylor <dualspiral@spongepowered.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e62cd9087c4d6d37a336",
    "number": 2391,
    "body": "SpongeAPI | [Sponge](https://github.com/SpongePowered/Sponge/pull/3520)\r\n\r\nThis PR adds the ability to get all entities from chunks as well as worlds. It is not breaking.",
    "head_branch": "add-entities-to-entity-volume",
    "is_a_fork": true,
    "comments": [
      "https://github.com/SpongePowered/SpongeAPI/commit/b5076e9420e4377f6bd18df81be5dcb48831170a"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e62dd9087c4d6d37a337",
    "number": 2390,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3507)\r\n\r\nSee the impl PR for the original work that includes this bump.",
    "head_branch": "api8/spi-0.3",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Bump to plugin-spi 0.3.0 (#2390)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e62ed9087c4d6d37a338",
    "number": 2387,
    "body": "needs plugin-meta 0.8 to finish + test",
    "head_branch": "feature/plugin-main-class",
    "is_a_fork": false,
    "comments": [
      "Hey! You seem to be running an unsupported version (API 8) of SpongeAPI. Support for API 8 ended in October 2023.\r\n\r\nAPI-8 is now end-of-life. We will not be issuing any more API updates for version 8 of our API[^1]\r\n\r\nAs part of our legacy cleanup we are closing issues relating to API8/1.16\r\n___\r\n\r\nIf you wish to move this forward, please rebase this PR on the current branch and reopen it.\r\n\r\n[^1]: https://forums.spongepowered.org/t/sponge-status-update-17th-october-2023/42212#spongeapi-82-1"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e62fd9087c4d6d37a339",
    "number": 2386,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3504)\r\n\r\nAdds PortalTypes#UNKNOWN and makes generatePortal return a boolean.",
    "head_branch": "api8/unknown-portal-types",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add UNKNOWN portal type, make generatePortal return a boolean (#2386)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e630d9087c4d6d37a33a",
    "number": 2384,
    "body": "Most of the supplier methods existed when types were going to be fed by\r\nexplicit suppliers (and not by lookups that references do right now).\r\nWhereas references are suppliers, that was only done for passing to\r\nother java constructs easier. The plugin dev needs to always call get\r\nthemselves to terminate the callstack at the call site.\r\n\r\nIt also doesn't help that the only consistent thing regarding suppliers\r\nwere we were inconsistent which makes for a messier API. This cleans\r\nthis up.\r\n\r\nSigned-off-by: Chris Sanders <zidane@spongepowered.org>\r\n\r\n@dualspiral \r\n@gabizou ",
    "head_branch": "desupply",
    "is_a_fork": false,
    "comments": [
      "If we can retain suppliers throughout, that’s be better (since DefaultedRegistryReference naturally implements it) than removing all supplier usage since it does make the various api calls a fair bit cluttered for the various places. ",
      "Closing this as discussion was made and the intent will be to go and standardize the supplier calls throughout the API."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e631d9087c4d6d37a33b",
    "number": 2381,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3481)\r\n\r\nBeen discussed in Discord - sorting out confusing naming and such.",
    "head_branch": "api8/missing-level-chunk",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Refactor Chunk and Volume\n\nThere have been multiple renames to more accurately reflect what the objects represent. Particularly of note:\n\n* ProtoWorld is now WorldLike\n* Chunk is now WorldChunk\n* ProtoChunk is now Chunk (as it is the basic chunk)\n* PrimitiveChunk is now a GenerationChunk\n* ChunkVolume no longer implements BlockVolume, just Volume\n* Volume methods that return block co-ordinates are renamed to not include the word \"block\" to reduce confusion, as they return positions, not blocks\n* ChunkEvent has a WorldScoped subinterface that most chunk events now implement.\n* regenerateChunk has been moved from ServerLevel to ChunkManager and now returns a completable future."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e632d9087c4d6d37a33c",
    "number": 2379,
    "body": "This is a bit of a dicey event since quite a lot of the game is unavailable at this point, but it does allow plugins with game-scoped thread pools to shut down in an orderly fashion.",
    "head_branch": "feature/stopping-game",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add an event to be fired when the game is performing its final shutdown (#2379)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e633d9087c4d6d37a33d",
    "number": 2378,
    "body": "**SpongeAPI** | Sponge\r\n\r\nUsers now load on their own thread.\r\n\r\nThe impl PR is way more interesting.",
    "head_branch": "api8/user",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Change the UserManager to use CompletableFutures to avoid on-thread IO\n\n* EventContextKeys that were users are now UUIDs."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e634d9087c4d6d37a33e",
    "number": 2376,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3467)\r\n\r\nThe allowed event listeners here are not a strict superset of those allowed in api 8 -- most notably, event methods cannot be picked up from supertypes anymore. This restriction could be relaxed by traversing supertypes, but it would make the class generation logic more complicated, and is imo a fringe use case.",
    "head_branch": "api9/non-public-listeners",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove the restriction that listener methods must be public (#2376)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e635d9087c4d6d37a33f",
    "number": 2375,
    "body": "SpongeAPI | [Sponge](https://github.com/SpongePowered/Sponge/pull/3465)",
    "head_branch": "api8/datatrans",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2375 from ItsDoot/api8/datatrans\n\nAdd shorthand value fetchers to DataTransactionResult"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e636d9087c4d6d37a340",
    "number": 2372,
    "body": "For Game/Server scope, a REGISTRY field\r\n\r\nFor world scope, a static util method that is passed a ServerWorld\r\n\r\nhttps://github.com/SpongePowered/Sponge/commit/cb8be18c052acb545a1d2c6fc463e3af238898ae\r\n\r\nSigned-off-by: Chris Sanders <zidane@spongepowered.org>",
    "head_branch": "registry/more_sugar",
    "is_a_fork": false,
    "comments": [
      "@zml2008 Be kind :)\r\n\r\nAdditionally, could probably elect to not do a method for GAME/SERVER scope but was having issues keeping it \"clean\"",
      "@Grinch will continue this one."
    ],
    "commit_messages": [
      "Add remaining registry methods\n\nSigned-off-by: Steven Downer <grinch@outlook.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e637d9087c4d6d37a341",
    "number": 2371,
    "body": "",
    "head_branch": "api8/fix-default-data-methods",
    "is_a_fork": true,
    "comments": [
      "This PR was done for the most part according to the implementation.",
      "@Lignium Absolutely, you've shown a light at some spots that needed review. Thanks.",
      "I don't see anything wrong beyond what you've already fixed. Thanks for the effort here!",
      "There are keys that could not be added due to name collisions with other methods, these are Keys.SCALE and Keys.LOCALE.",
      "https://github.com/SpongePowered/SpongeAPI/commit/a7ee7bd3d7b6426c02d80d2bc3e864f0a019308d"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e638d9087c4d6d37a342",
    "number": 2370,
    "body": "SpongeAPI | [Sponge](https://github.com/SpongePowered/Sponge/pull/3447)\r\n\r\nSee implementation for details.",
    "head_branch": "api8/accuracy",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add Keys.INACCURACY (#2370)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e639d9087c4d6d37a343",
    "number": 2369,
    "body": "SpongeAPI | Sponge (TODO)\r\n\r\nThe functionality previously in TabList now exists as a Key for entries and as methods in Audience.\r\n\r\nEssentially, the idea is that when you offer a player these entries, the implementation will compare to the current state of a player's tab list and [determine what changes need to be sent](https://gist.github.com/ejm/00b2a377df6eef66e668164619d23851) to the client. Additionally, by making `TAB_LIST_ENTRIES` a key, we can take advantage of `ChangeDataHolderEvent.ValueChange` to regulate changes to the tab list by Vanilla or other plugins.",
    "head_branch": "api8/tab-list",
    "is_a_fork": true,
    "comments": [
      "We'll take the break on this one - full speed ahead with impl!",
      "I've done some more thinking, and while it might make sense to serialize as if the entries are just a list (or set?), being able to reference by UUID internally is just too useful to get rid of. Making any operation that gets an entry O(n) feels like a regression. Regardless, the entry set still won't be tied to any individual player.\r\n\r\nAlso, should we track a server-wide `TabListEntrySet` that plugins could use to restore the state of the player's tab list?",
      "> Also, should we track a server-wide TabListEntrySet that plugins could use to restore the state of the player's tab list?\r\n\r\nRather, you should treat the absence of the data on a player as \"defer to server\" (you can remove data so use that to your advantage).\r\n\r\nNothing wrong with having the \"server\" list accessible, you might want to see what the server says though, but offering this to a player should be a snapshot in time and not \"auto-updating\".",
      "I think at this point, then, it makes sense to store two entry sets per-player. One is regularly updated by vanilla/mods, etc. and the other is the one offered with the Data API. If the second entry is removed, just revert to the first entry and continually update it as if there was never any custom list to begin with.",
      "> > Also, should we track a server-wide TabListEntrySet that plugins could use to restore the state of the player's tab list?\n> \n> Rather, you should treat the absence of the data on a player as \"defer to server\" (you can remove data so use that to your advantage).\n> \n> Nothing wrong with having the \"server\" list accessible, you might want to see what the server says though, but offering this to a player should be a snapshot in time and not \"auto-updating\".\n\nI just want to confirm here, if a plugin offers a tab list, the server should not otherwise touch it at all, correct? Just want to make sure I write this in a way consistent to that!",
      "> I just want to confirm here, if a plugin offers a tab list, the server should not otherwise touch it at all, correct? Just want to make sure I write this in a way consistent to that!\r\n\r\nI went to read the implementation to see how it works and I'd argue this is more complicated than meets the eye.\r\n\r\nI think before we make any more decisions, make an implementation of what you think should happen in the _simplest_ case. That is:\r\n\r\n* What do you think should happen if someone gets the data (include both the \"never set\" case and \"previous set\" cases)?\r\n* What do you think should happen if someone sets the data?\r\n* Later on: if I set the data, what happens if a new player joins or leaves? (this is where I was thinking about removing data, and why your suggesting of a \"default\" tab list on the server might be a good idea)\r\n\r\nGet that built. Then, we can think more about the problem of whether something should be updated or not. We save no time by just sitting around with an API, having an impl to talk over will make it easier to frame the problems.\r\n\r\nHowever, there is going to be a bit of a problem (and this isn't your fault or anything!) in that I think this is going to affect things like tab completions for players and other things where the client uses the local player list - from the tab completion point of view this may be a real problem. I guess we'll see what happens...",
      "Well, SS API-8 has sailed.\r\n\r\nI think that, given the above, we might be better going back to basics and having a think about what is wrong with tab lists at the moment, and how we might want to fix it. I think I derailed this somewhat - that's on me.\r\n\r\nI'd welcome a new PR for API-9 (though we may end up better thinking about versions later), or even just an issue with a core problem statement and what is deficient about the current API.\r\n\r\n(I also have to add, in impl, tab lists are a pain in the ass...).",
      "That \"pain in the ass\"-ness is the reason I ultimately never finished this.\nI don't think you really derailed this one as much as it just not being\ntrivial to track what's going on.\n\nI'll think about this more for a future version, though!\n\nOn Tue, Feb 1, 2022, 2:50 PM Daniel Naylor ***@***.***> wrote:\n\n> Well, SS API-8 has sailed.\n>\n> I think that, given the above, we might be better going back to basics and\n> having a think about what is wrong with tab lists at the moment, and how we\n> might want to fix it. I think I derailed this somewhat - that's on me.\n>\n> I'd welcome a new PR for API-9 (though we may end up better thinking about\n> versions later), or even just an issue with a core problem statement and\n> what is deficient about the current API.\n>\n> (I also have to add, in impl, tab lists are a pain in the ass...).\n>\n> —\n> Reply to this email directly, view it on GitHub\n> <https://github.com/SpongePowered/SpongeAPI/pull/2369#issuecomment-1027224783>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAN77BGEBRHEATVPKKOWTMTUZA2OPANCNFSM47RC2GKA>\n> .\n> You are receiving this because you authored the thread.Message ID:\n> ***@***.***>\n>\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e63ad9087c4d6d37a344",
    "number": 2368,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3444)\r\n\r\nSlight breaking change here, but this is to support https://github.com/SpongePowered/SpongeAPI/pull/2355#pullrequestreview-672589756\r\n\r\nThis basically splits up how a `RegistryHolder` is selected from then attempting to grab the correct `Registry` from it. The breaking change is that we can no longer support supplying a `Function<CommandContext, Registry>` as we now need the split.",
    "head_branch": "api8/reg-param",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update registry parameters to separate retrieval of RegistryHolders and the Registry from the RegistryType\n\nSupports #2355"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e63bd9087c4d6d37a345",
    "number": 2367,
    "body": "See https://github.com/SpongePowered/event-impl-gen/pull/12\r\n\r\nThis is the changes necessary to update for that PR, tracking in a PR until I've had a chance to test these changes more thoroughly.",
    "head_branch": "feature/eig-ap",
    "is_a_fork": false,
    "comments": [
      "This will be ready to merge once Gradle 7.2 is released, fixing issues with incremental compilation.",
      "@zml2008 \r\n\r\nETA on 7.2?",
      "7.2's RC1 is scheduled for Monday (via https://github.com/gradle/gradle/milestone/174) -- I expect the final release will be a few weeks after that. This PR should maintain an identical API for users -- there was one generics change necessary, but that has been applied to the `api-8` branch separately.",
      "What's our thinking on this - merge conflicts aside are we ready to go with this?",
      "there are still some issues with incremental builds in intellij that I haven't had a chance to resolve yet - I think that's the only blocker though ",
      "@zml2008 Are those still an issue ? What's the status of this ?",
      "I think the blocker here is still incremental processing unfortunately",
      "Hey! You seem to be running an unsupported version (API 8) of SpongeAPI. Support for API 8 ended in October 2023.\r\n\r\nAPI-8 is now end-of-life. We will not be issuing any more API updates for version 8 of our API[^1]\r\n\r\nAs part of our legacy cleanup we are closing issues relating to API8/1.16\r\n___\r\n\r\nIf you wish to move this forward, please rebase this PR on the current branch and reopen it.\r\n\r\n[^1]: https://forums.spongepowered.org/t/sponge-status-update-17th-october-2023/42212#spongeapi-82-1"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e63cd9087c4d6d37a346",
    "number": 2365,
    "body": "SpongeAPI | [Sponge](https://github.com/SpongePowered/Sponge/pull/3422)\r\nAdd a Tag API into sponge, to make life easier for plugin developers.",
    "head_branch": "api8/tag-api",
    "is_a_fork": true,
    "comments": [
      "This API does not yet have a way of adding to existing tags. I think I would need a custom event for that. Adding your own tags should be possible via RegisterRegistryValue event, using Tag.builder to build  them.\r\nI am also unsure currently on whether to force adding a .uniqueKey() on Tag.Builder or to make it optional.",
      "@tyhdefu Example plugin code? Ignoring lack of impl.",
      "Now has a test plugin, but no ability to retrieve Tag instances in plugins. But its proven working by looking at the F3 menu ingame and observing its effects.",
      "Just pulled in Zidane's most recent data pack commits. Currently in an non-working state, as I didn't bother merging some files properly, as those files were most likely going to be reverted later. Will fix when we have a decision on how to handle everything.",
      "I've also realised that you can specify an entry that allows specifying if the tag or taggable is required for the tag to load or not. Now added to the API.",
      "I seem to have fixed the Registry remove Iterable<T> diff, but now git thinks i renamed TwoDimensionalPortal and changed all its contents. Interesting.",
      "Now complete / ready for further review, the same as the implementation.",
      "https://github.com/SpongePowered/SpongeAPI/commit/119a9e97384465416f0d377871df4c633dd6fb09\r\nhttps://github.com/SpongePowered/SpongeAPI/commit/9e9f8c2c54ef82905ba9e6cc3f7791f2d08cc56c"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e63dd9087c4d6d37a347",
    "number": 2364,
    "body": "[Sponge](https://github.com/SpongePowered/Sponge/pull/3421) | SpongeAPI",
    "head_branch": "api-8",
    "is_a_fork": true,
    "comments": [
      "> We have `RideEntityEvent`. While this seems to be specific to `Vehicle`s, should this event really be a sub-event of that?\r\n\r\nQuoting the Javadoc, RideEntityEvent is \"an event that involves an entity riding another.\" While this is fine for mount & dismount, only a player can steer a vehicle.",
      "Taking over this.\n\nChanged the API to be more friendly to consume. This is at least somewhat how I would imagine the values would be exposed.\n\nThe input can be directly used to manipulate the entitys velocity.",
      "Also to add; This event is completly based on input. It does not take into account the current velocity, movement or direction.\n\nIf the plugin developer wants to make the entity controllable by the rider, it should use the riders direction and then add velocity to the entity based on the input.",
      "I really don't know what I think about this - other than it's become a victim of ideas rather than solving a specific problem.\r\n\r\nWhat is the problem we want to solve? To be able to stop someone from steering clockwise/counter-clockwise? Or is there some more fine grained control we need? Once we know what we want to do, we can design the event around that.",
      "We are trying to solve how can we allow plugin to take control of how vehicle is being moved based on controls given by the player. To better visualize this, lets take a look at a real world example; Hypixel Turbo Kart Racers.\r\n\r\nThe \"vehicle\" the player is inside is actually a armor stand with item on its head. The item has 3D model to make it look like you are sitting inside actual race car. To be able to \"control\" this vehicle, the client sends the steering packet, which normally would do nothing. In this case however, the vanilla action is overridden by a plugin to give the armor stand velocity based where the player would like to move (wasd). When the player tries to jump (pressed space), a honk is used instead and when the player tries to sneak (pressed shift), the car starts to drift. To make the visuals look more pleasing, it also moves the armor stands head around to allow the car to tilt a bit when making a turn.\r\n\r\nTo solve that, we need a way for the plugin to interpret the steering packet and implement its own logic to override the vanilla behavior.",
      "> we need a way for the plugin to interpret the steering packet \r\n\r\nTo clear any confusion, an event should not be a façade for a packet itself, which is what this event tried to become. Instead, I see three significant events that should occur here:\r\n\r\n* Steer - left and right\r\n* Jump - this _could_ be part of \"steering\", but I feel like it's a separate action\r\n* Dismount - [we already have this](https://jd.spongepowered.org/spongeapi/8.0.0-SNAPSHOT/org/spongepowered/api/event/entity/RideEntityEvent.Dismount.html)\r\n\r\nIn all cases you're riding an entity. Should we then be including this in `RideEntityEvent` as sub events? I'd propose we probably would have:\r\n\r\n* `RideEntityEvent.Steer`: with just a left and right (I know what I previously said, I am a victim of my own ideas too) - if we need to flesh it out later, so be it.\r\n* `RideEntityEvent.Jump`: hopefully this one is obvious\r\n* `RideEntityEvent.Dismount`: if we have to tell the server to remount if this is cancelled, so be it\r\n\r\nDoes that cover what you're interested in doing?\r\n\r\n@gabizou @Zidane I suppose a good question here is if steer and jump should be sub-events or RideEntityEvent or not - any opinions?",
      "I did consider to implement them all as sub events (as I did for dismount) but then got a bit worried about whatever that would be too impactful for performance reasons. It looks way cleaner in my opinion and would :+1: for it. However, what data type should we use when exposing the steering direction? Booleans? New enum? Existing enum? Vector like I used?\r\n\r\nAlso makes sense to move this all to RideEntityEvent, lets do that.",
      "> I suppose a good question here is if steer and jump should be sub-events or RideEntityEvent or not - any opinions?\r\n\r\nI have no personal opinions here, sub events mean more to filter out. I don't know how spammy these events would be otherwise.\r\n\r\n\r\n\r\n> However, what data type should we use when exposing the steering direction? Booleans? New enum? Existing enum? Vector like I used?\r\n\r\nCorrect me if I'm wrong, but there's 8 possible directions, (forward, back, left, right, forward left, forward right, back right, back left) at which point I personally believe we should just expose the Vector3d direction aligned by the entity currently riding (maybe even expose the Vector3d of the direction from the entity riding vs the direction aligned to the world's coordinates).\r\n",
      "> Correct me if I'm wrong\r\n\r\nSteering is clockwise or anti-clockwise - it's relative to the steering entity, not the world. Thus, that or left and right will suffice.",
      "Hey! You seem to be running an unsupported version (API 8) of SpongeAPI. Support for API 8 ended in October 2023.\r\n\r\nAPI-8 is now end-of-life. We will not be issuing any more API updates for version 8 of our API[^1]\r\n\r\nAs part of our legacy cleanup we are closing issues relating to API8/1.16\r\n___\r\n\r\nIf you wish to move this forward, please rebase this PR on the current branch and reopen it.\r\n\r\n[^1]: https://forums.spongepowered.org/t/sponge-status-update-17th-october-2023/42212#spongeapi-82-1"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e63ed9087c4d6d37a348",
    "number": 2361,
    "body": "Just another small typo fix on JavaDocs. Thanks!",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [
      "#1000 - please leave a comment here instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e63fd9087c4d6d37a349",
    "number": 2359,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3418)\r\n\r\nThis superscedes #2280 \r\n\r\nThe basic premise is that world borders require a `WorldBorder` object to be passed to the `MutableWorldBorder` object to update it. This is to enable proper ChangeWorldBorderEvent events to be fired for both worlds and players. I've not quite finished sorting out the listeners in the test plugin, but basic commands are there.\r\n\r\nHaving multiple set* functions made the event difficult to implement as you never really had the same border, which is why I've gone down this route.\r\n\r\nComments are needed quickly because this is a break! I'll merge tomorrow early afternoon UK time if there are no objections.",
    "head_branch": "api8/world-border2",
    "is_a_fork": false,
    "comments": [
      "I ended up dropping the notion of a mutable border completely, it turned out to be useless fluff. Instead, we just use immutable `WorldBorder` objects to set/get the state of the border (it's backed by `WorldBorder.Settings` in the impl code).\r\n\r\nIt seems to me that to code works, but in my limited testing, I found that the world border wasn't being displayed on the client for some reason, though if I walked into a world border it did start damaging me. It looks like packets are being sent though so I'm not sure exactly what to think at the moment, it could be the `PerWorldBorderListener` needs something doing to it.\r\n\r\nAs far as API goes, I think this is what we want.\r\n\r\n(Edit: testing with the server shows the world border, still have the problem of it not saving though...)",
      "I got it all working and saving, turns out I had an and check instead of an or check.\r\n\r\nI think this is ready. I thought about throwing DataSerializable onto WorldBorder, but that's really an addition at this stage and can be done after this. If we do adapt Transaction so that it accepts null values, then we can just deprecate some of the current methods and have them redirect to a Transaction - we'll just have to manually implement the event if we choose to do that. However, if we're going to go down that route let's think about simply making `WorldBorder`s part of the Data API for API 9 (or even possibly 8.1, I'm sure it could be done)."
    ],
    "commit_messages": [
      "Update world borders API\n\nCo-authored-by: Riley Park <riley.park@meino.net>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e640d9087c4d6d37a34a",
    "number": 2358,
    "body": "",
    "head_branch": "feature/build-convention",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "build: Use convention plugin, standard GH actions workflows (#2358)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e641d9087c4d6d37a34b",
    "number": 2357,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3414)\r\n\r\nwip -- seems there are some oddities with the current ways BlockState API is exposed, so this is waiting for @gabizou to resolve some of that.",
    "head_branch": "api9/block-entities",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 1.17 block and block entity additions. Merges #2357\n\nSigned-off-by: Gabriel Harris-Rouquette <gabizou@me.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e642d9087c4d6d37a34c",
    "number": 2355,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3300) | [Specification](https://github.com/SpongePowered/Schematic-Specification/pull/20)\r\n\r\nDO NOT MERGE\r\n\r\nAccompanying changes for enabling Schematic supporting the Spec. Some of the changes are necessitated to represent a Schematic from deserialization.\r\n\r\nI'll jot some mental notes here as time permits, but there's some ramifications that arise from having Biomes being Server scoped. I can't imagine that the game scope would change before 1.18, but in effect, biomes are re-created every server instance, so it's very well possible that a Schematic cannot exist between server restarts (like on the client going between single player worlds).",
    "head_branch": "fix/schematic-serialization",
    "is_a_fork": false,
    "comments": [
      "Given we're now in \"soft freeze\", we need to consider whether some of the changes are necessary. Most of the `Mutable` -> `Modifiable` changes seem to be ABI rather that pure API breaks, but there are a couple of functions that move - I think mostly `empty` calls on `BlockVolume` were what I saw.\r\n\r\nIf we absolutely _must_ do this then this needs to be done ASAP, but if we don't _have_ to we shouldn't now.",
      "@dualspiral Some things we gotta do:\r\n- Entities and BlockEntities need their positions relative to the [0,0,0] of the volume not the offset (currently min) so their positions are purely additive to the block min of the volume itself (Since we know some of the details about the minimum on copying of the entity/blockentity -> archetype, we can do this math on copy, maybe an adjustment on the volume applicator to take it into consideration?\r\n- It feels dirty that we have a pseudo position on an archetype, maybe we should make the stream of archetype entries instead so that position is not being stored within the object?\r\n  -  This would resolve doing the transform on position separately from the archetype being transformed\r\n- Pass transformation around through the transformation referents and verify their transforms (there's some problems with the inversion, it's slightly going off if you try to rotate 180 across the center)\r\n"
    ],
    "commit_messages": [
      "Convert VolumeStream to use Vector3d's\n\nThere's effectively a problem with positions of blocks, they're\ntechnically considered the corners of a dotted world, and since\ntransformations are performed on the double accuracy positioning, we\nwant to be able to retain those positions as much as possible throughout\nhowever many transformations on a volume are made.\n\nThis is mostly to support the ability to rotate and mirror volumes in\ntheir entirety. The implementations are already semi-functional, pending\n some off by one errors to be found and fixed.\n\nSigned-off-by: Gabriel Harris-Rouquette <gabizou@me.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e643d9087c4d6d37a34d",
    "number": 2354,
    "body": "https://github.com/KyoriPowered/adventure/pull/343",
    "head_branch": "adventure/css",
    "is_a_fork": false,
    "comments": [
      "@dualspiral We should probably remove these methods instead of just deprecating them - do you agree?",
      "If it's done before freeze. If we find we need to re-add them later, we can do so, can't remove them after freezing."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e644d9087c4d6d37a34e",
    "number": 2353,
    "body": "Just changed the link from https://docs.spongepowered.org/en/contributing/guidelines.html to https://docs.spongepowered.org/stable/en/contributing/guidelines.html",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "https://github.com/SpongePowered/SpongeAPI/issues/1000#issuecomment-852264086"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e645d9087c4d6d37a34f",
    "number": 2352,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3411)\r\n\r\nThis class is mostly replaced with Class literals, and minimal use of\r\nTypeTokens directly created where no alternative makes sense.",
    "head_branch": "feature/bye-bye-typetokens",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Purge the TypeTokens constant holder class (#2352)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e646d9087c4d6d37a350",
    "number": 2351,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3409)\r\n\r\nAdds `ItemRarity` and APIs to get the rarity of `ItemStack`s and `ItemType`s.",
    "head_branch": "item-rarity",
    "is_a_fork": true,
    "comments": [
      "https://github.com/SpongePowered/SpongeAPI/commit/2d1cf182da004649a16a62507868c99990568f4b"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e647d9087c4d6d37a351",
    "number": 2350,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3405)\r\n\r\nThis superscedes #2295 (thanks to @thibaulthenry for the initial commit!)\r\n\r\nMakes `withTeamColor` static and renames it to `findByTeamColor`. I have used a factory to provide the mapping from colour to slot because I couldn't really think of any logical place to put an instance method that does this mapping (maybe `Scoreboard` could house such a method, but it felt a little out of place).\r\n\r\nAre we okay with this being a factory, or should we look to make this an instance method somewhere?",
    "head_branch": "api8/display-slots",
    "is_a_fork": false,
    "comments": [
      "Yeah that is an odd name isn't it. That isn't a factory. It doesn't create instances, correct?\r\n\r\nHow does that actually work, in concept, when you don't provide a Scoreboard to query?\r\n",
      "> Yeah that is an odd name isn't it. That isn't a factory. It doesn't create instances, correct?\r\n\r\nThat's right - which is why I'm icky about it, it just doesn't feel right.\r\n\r\n> How does that actually work, in concept, when you don't provide a Scoreboard to query?\r\n\r\nNot sure I'm 100% sure what you mean here, but all a display slot is in our impl is something that wraps around an integer. That integer is used to get an element from an Objectives array. So, for all intents and purposes, a `DisplaySlot` is just a fancy way to abstract the magic numbers away - no connection to a scoreboard what so ever.",
      "A factory doesn't always need to *create* instances, technically - it can simply provide already-created things too.",
      "@dualspiral \r\n\r\nAh that makes sense, thanks for the clarification. You are also correct @kashike , based on that terminology that works here. This can remain then."
    ],
    "commit_messages": [
      "Make obtaining a DisplaySlot by NamedTextColor static"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e648d9087c4d6d37a352",
    "number": 2349,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3404)",
    "head_branch": "api8/collideevent",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "CollideBlockEvents"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e649d9087c4d6d37a353",
    "number": 2348,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3399)\r\n\r\nSpecifically:\r\n\r\n* ClientCompletionKey -> CommandTreeNodeType\r\n* ClientSuggestionProvider -> CommandCompletionProvider\r\n\r\nThe previous terminology was a hangover to when I originally designed the system and from numerous issues and chats on Discord, it's clear that... well, it's not clear what they are. Along with making sure we're consistent with using \"completion\" instead of \"suggestion\", it makes sense to revisit this and make sure the names are sensible (and the Javadocs are clearer)\r\n\r\nI have not renamed \"ClientCompletionType\" because that's for use with parameterized commands and for what it does, it's a reasonable name (while I'm open to that being renamed, it's less important here).\r\n\r\nThis kind of follows on from #2347 where we should basically be consistent with terminology, but done separately as the CCK rename is out of scope there. \r\n\r\nThis PR won't stick around for long, mostly a diff check and a quick oppotunity for any other reasonable comments.",
    "head_branch": "api8/rename-cck",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Rename some Command interfaces\n\nSpecifically:\n\n* ClientCompletionKey -> CommandTreeNodeType\n* ClientSuggestionProvider -> CommandCompletionProvider\n\nThe previous terminology was a hangover to when I originally designed the system and from numerous issues and chats on Discord, it's clear that... well, it's not clear what they are. Along with making sure we're consistent with using \"completion\" instead of \"suggestion\", it makes sense to revisit this and make sure the names are sensible (and the Javadocs are clearer)\n\nI have not renamed \"ClientCompletionType\" because that's for use with parameterized commands and for what it does, it's a reasonable name (while I'm open to that being renamed, it's less important here)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e64ad9087c4d6d37a354",
    "number": 2347,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3398)\r\n\r\nSee #2343 - supports tooltips in suggestions. I used tooltips in `/sponge plugins info <plugin>` to show the name of the plugin - we can expand on that if we like - figured it'd be a nice little demonstration.\r\n\r\n![Showing off the tooltip](https://user-images.githubusercontent.com/1904167/116822194-63463180-ab75-11eb-8300-96a92217226a.png)",
    "head_branch": "api8/command-tooltips",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add CommandCompletion for command completion tooltips\n\n* Rename command methods that use the word \"suggest\" to \"complete\""
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e64bd9087c4d6d37a355",
    "number": 2346,
    "body": "**API** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3397)\r\nThe library is located at SpongePowered/timings",
    "head_branch": "extract-timings",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Move timings to it's own library (#2346)\n\nPlugins looking to keep using timings and creating them\r\nwill be able to do so by depending on org.spongepowered:timings.\r\nIt is verbatim what timings existed in API, and Sponge\r\nwill still ship the timings implementation itself.\r\n\r\nSigned-off-by: Gabriel Harris-Rouquette <gabizou@me.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e64cd9087c4d6d37a356",
    "number": 2345,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3396)",
    "head_branch": "cleanup/forgetting-plugins",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update for dropping get prefix in plugin-meta/-spi"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e64dd9087c4d6d37a357",
    "number": 2344,
    "body": "[error-prone](https://errorprone.info) is an AP that runs as part of the Java compile performing some helpful checks.\r\n\r\nThe tool is fairly lenient, and won't fail the build for things that it isn't super confident are bugs. When run on Sponge, it emitted quite a few warnings, but the errors it emitted appeared to all be legitimate bugs. \r\n\r\nThis came up almost accidentally when I changed IntelliJ to use error-prone for its own compilation, which ended up affecting the whole workspace. Those checks caught a bad copy & paste in `Ticks`, plus a variety of other odds & ends across the project.\r\n\r\nI've disabled some of the more spammy warnings for now, and fixed the easily fixable -- what's left is:\r\n\r\n```\r\n> Task :compileJava\r\nC:\\Users\\zml\\dev\\mc\\sponge\\Sponge\\SpongeAPI\\src\\main\\java\\org\\spongepowered\\api\\registry\\Registry.java:121: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of ge\r\nnerics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.\r\n    <V extends T> V value(ResourceKey key);\r\n                    ^\r\n    (see https://errorprone.info/bugpattern/TypeParameterUnusedInFormals)\r\nC:\\Users\\zml\\dev\\mc\\sponge\\Sponge\\SpongeAPI\\src\\main\\java\\org\\spongepowered\\api\\registry\\Registry.java:129: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of ge\r\nnerics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.\r\n    default <V extends T> V value(final RegistryKey<T> key) {\r\n                            ^\r\n    (see https://errorprone.info/bugpattern/TypeParameterUnusedInFormals)\r\nC:\\Users\\zml\\dev\\mc\\sponge\\Sponge\\SpongeAPI\\src\\main\\java\\org\\spongepowered\\api\\world\\volume\\stream\\StreamOptions.java:175: warning: [EmptyBlockTag] A block tag (@param, @return, @throws, @deprecated) has an empty description. Bl\r\nock tags without descriptions don't add much value for future readers of the code; consider removing the tag entirely or adding a description.\r\n     * @return\r\n       ^\r\n    (see https://google.github.io/styleguide/javaguide.html#s7.1.3-javadoc-block-tags)\r\n  Did you mean '*'?\r\nC:\\Users\\zml\\dev\\mc\\sponge\\Sponge\\SpongeAPI\\src\\main\\java\\org\\spongepowered\\api\\world\\volume\\stream\\VolumeElement.java:105: warning: [EmptyBlockTag] A block tag (@param, @return, @throws, @deprecated) has an empty description. Bl\r\nock tags without descriptions don't add much value for future readers of the code; consider removing the tag entirely or adding a description.\r\n     * @return\r\n       ^\r\n    (see https://google.github.io/styleguide/javaguide.html#s7.1.3-javadoc-block-tags)\r\n  Did you mean '*'?\r\nC:\\Users\\zml\\dev\\mc\\sponge\\Sponge\\SpongeAPI\\src\\main\\java\\org\\spongepowered\\api\\world\\volume\\stream\\VolumePositionTranslator.java:33: warning: [EmptyBlockTag] A block tag (@param, @return, @throws, @deprecated) has an empty descr\r\niption. Block tags without descriptions don't add much value for future readers of the code; consider removing the tag entirely or adding a description.\r\n * @param <V>\r\n   ^\r\n    (see https://google.github.io/styleguide/javaguide.html#s7.1.3-javadoc-block-tags)\r\n  Did you mean '*'?\r\nC:\\Users\\zml\\dev\\mc\\sponge\\Sponge\\SpongeAPI\\src\\main\\java\\org\\spongepowered\\api\\world\\volume\\stream\\VolumePositionTranslator.java:34: warning: [EmptyBlockTag] A block tag (@param, @return, @throws, @deprecated) has an empty descr\r\niption. Block tags without descriptions don't add much value for future readers of the code; consider removing the tag entirely or adding a description.\r\n * @param <T>\r\n   ^\r\n    (see https://google.github.io/styleguide/javaguide.html#s7.1.3-javadoc-block-tags)\r\n  Did you mean '*'?\r\nC:\\Users\\zml\\dev\\mc\\sponge\\Sponge\\SpongeAPI\\src\\main\\java\\org\\spongepowered\\api\\data\\DataManipulator.java:500: warning: [CatchAndPrintStackTrace] Logging or rethrowing exceptions should usually be preferred to catching and callin\r\ng printStackTrace\r\n                    e.printStackTrace();\r\n                    ^\r\n    (see https://errorprone.info/bugpattern/CatchAndPrintStackTrace)\r\nC:\\Users\\zml\\dev\\mc\\sponge\\Sponge\\SpongeAPI\\src\\main\\java\\org\\spongepowered\\api\\data\\DataManipulator.java:522: warning: [CatchAndPrintStackTrace] Logging or rethrowing exceptions should usually be preferred to catching and callin\r\ng printStackTrace\r\n                    e.printStackTrace();\r\n                    ^\r\n    (see https://errorprone.info/bugpattern/CatchAndPrintStackTrace)\r\nC:\\Users\\zml\\dev\\mc\\sponge\\Sponge\\SpongeAPI\\src\\main\\java\\org\\spongepowered\\api\\data\\DataAlreadyRegisteredException.java:32: warning: [UnusedVariable] The field 'owningRegistration' is never read.\r\n    private final DataRegistration owningRegistration;\r\n                                   ^\r\n    (see https://errorprone.info/bugpattern/UnusedVariable)\r\n  Did you mean to remove this line?\r\nC:\\Users\\zml\\dev\\mc\\sponge\\Sponge\\SpongeAPI\\src\\main\\java\\org\\spongepowered\\api\\data\\DataAlreadyRegisteredException.java:31: warning: [UnusedVariable] The field 'registeredKey' is never read.\r\n    private final Key<?> registeredKey;\r\n                         ^\r\n    (see https://errorprone.info/bugpattern/UnusedVariable)\r\n  Did you mean to remove this line?\r\nC:\\Users\\zml\\dev\\mc\\sponge\\Sponge\\SpongeAPI\\src\\main\\java\\org\\spongepowered\\api\\util\\Coerce.java:767: warning: [MixedMutabilityReturnType] This method returns both mutable and immutable collections or maps from different paths. T\r\nhis may be confusing for users of the method.\r\n    private static List<?> parseStringToList(String string) {\r\n                           ^\r\n    (see https://errorprone.info/bugpattern/MixedMutabilityReturnType)\r\n  Did you mean 'private static ImmutableList<?> parseStringToList(String string) {' or 'private static ImmutableList<?> parseStringToList(String string) {'?\r\n11 warnings\r\n```",
    "head_branch": "feature/error-prone",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Implement error-prone for basic analysis (#2344)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e64ed9087c4d6d37a358",
    "number": 2342,
    "body": "",
    "head_branch": "remove/timings",
    "is_a_fork": true,
    "comments": [
      "Superseded by https://github.com/SpongePowered/SpongeAPI/pull/2346"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e64fd9087c4d6d37a359",
    "number": 2341,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3393)",
    "head_branch": "api8/location",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make ServerLocation implement DataSerializable (#2341)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e650d9087c4d6d37a35a",
    "number": 2340,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3391)\r\n#2259\r\n  - adds an easy way to filter Audiences for `MessageChannelEvent`.\r\n  - `PlayerChatRouter` -> `PlayerChatFormatter` now only handles message formatting. Which is applied to each audience of a `ForwardingAudience`\r\n  - `PlayerChatEvent` extends `MessageChannelEvent` to handle the audience target replacing `PlayerChatRouter`",
    "head_branch": "api8/chatrouter",
    "is_a_fork": false,
    "comments": [
      "I've been talking to Faith about this as it's been done and this is a step up from where we were.\r\n\r\nI do have a couple of thoughts on a slightly different approach and any feedback/thoughts on this would be welcome.\r\n\r\n---\r\n\r\nFor this, the intention is that chat formatters are chained. Would a list of formatters that are then executed in order, rather than chained, be better here. My thought was that plugins could inspect the formatters that other plugins have applied and make decisions based on that, so if I detected a chat router that came from UltimateChat, via some heuristic, for example, I might not want to apply mine at all. It should also be possible for a plugin to clear formatters from this list too\r\n\r\nThat might be complicating it a bit though. I don't mind not doing this, it's just an alternative, but it might not be all the useful. \r\n\r\n---\r\n\r\nProtection plugins, such as GriefDefender, may only care about the end result of a message. Rather than having to go and execute the chat formatter on every audience manually, is there merit to create a second \"post but not post\" event after the formatting has been resolved? Something like:\r\n\r\n```java\r\ninterface PlayerChatEvent extends Cancellable {\r\n\r\n    interface Format extends PlayerChatEvent {\r\n        // this would be what we have now\r\n    }\r\n\r\n    interface Formatted extends PlayerChatEvent {\r\n\r\n        /*\r\n         * The Audiences that will recieve a message, and their respective message\r\n         */\r\n        Map<Audience, Component> messages();\r\n\r\n        /*\r\n         * Protection plugins could stop certain messages getting through to specific\r\n         * audiences\r\n         */\r\n        void filter(Audience audience);        \r\n\r\n    }\r\n\r\n}\r\n\r\n```\r\n\r\nProtection plugins etc. that really only care to cancel something may appreciate this."
    ],
    "commit_messages": [
      "improve PlayerChatEvent\n#2259"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e651d9087c4d6d37a35b",
    "number": 2338,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3382)",
    "head_branch": "fix/chunk-availability",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Improve javadocs and clarify availability of Chunks by coordinates\n\nBeing the previous methods were poorly named and implemented on world coordinates, when\n they ought to be clearer about chunk positions versus\n block positions.\n\nSigned-off-by: Gabriel Harris-Rouquette <gabizou@me.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e652d9087c4d6d37a35c",
    "number": 2337,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3381)",
    "head_branch": "feature/build-updates",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "build: Bump to gradle 7, accomodate changes in impl"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e653d9087c4d6d37a35d",
    "number": 2335,
    "body": "SpongeAPI | [Sponge](https://github.com/SpongePowered/Sponge/pull/3377)",
    "head_branch": "add-missing-clientcompletionkeys",
    "is_a_fork": true,
    "comments": [
      "https://github.com/SpongePowered/SpongeAPI/commit/e15895954d43945f86fe6f8fbb3c29a15e031bfd"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e654d9087c4d6d37a35e",
    "number": 2334,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3376)\r\n\r\nSuperscedes #2333.\r\n\r\nThis allows for plugins that use raw/custom registrars to access the suggestion providers that come with Minecraft. See my comment on the supersceded PR as to why additional ClientCompletionKeys is not the answer.\r\n\r\nThis is intended to be able to fit with Minecraft registries if Mojang ever put the command stuff in the standard registries, which for some reason they don't here...\r\n",
    "head_branch": "api8/suggestion-provider",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add ClientSuggestionProvider to add client-based suggestions for things like biomes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e655d9087c4d6d37a35f",
    "number": 2333,
    "body": "[Sponge](https://github.com/SpongePowered/Sponge/pull/3375) | SpongeAPI\r\n\r\nAdds `ClientCompletionKey`s for `all_recipes`, `available_biomes`, and `available_sounds`. These are not specific argument types, only suggestion providers. In Vanilla, these suggestion providers are always used in combination with the `ResourceLocationArgument`.",
    "head_branch": "client-completion-types",
    "is_a_fork": true,
    "comments": [
      "This isn't the right way to go about it.\r\n\r\nCCKs map to Brig's `ArgumentType`, so the keys that are provided match to those argument types (why they aren't in a registry, I'll never know, but I digress). \r\n\r\nWhat you're doing here is adding suggestions to existing argument types. If (and hopefully, when) Mojang create a registry for their argument types, this is what will effectively map on to it. What you're trying to do here actually completely muddies that - \"suggestion providers\" are different.\r\n\r\nI understand what you're trying to do (and what you do in the impl with the Entity Summon argument), but CCKs are meant to represent what you're parsing, not what the completions are. `ALL_RECIPES` still actually parses a `ResourceKey`, regardless of whether you pass a recipe to it or not, and so really it shouldn't be its own key.\r\n\r\nWhat we really need is a separate registry for these suggestion providers and a way to link them up to the nodes.",
      "(I'm working on it)",
      "Supersceded by https://github.com/SpongePowered/SpongeAPI/pull/2334. Thanks for taking a stab, unfortunately it was the wrong approach."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e656d9087c4d6d37a360",
    "number": 2332,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3374)\r\n\r\nSee https://github.com/SpongePowered/SpongeAPI/issues/2320. Basically here to ensure that we're okay with the proposed renames.",
    "head_branch": "api8/find-renames",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add \"find\" to some methods"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e657d9087c4d6d37a361",
    "number": 2331,
    "body": "[Sponge](https://github.com/SpongePowered/Sponge/pull/3370) | SpongeAPI\r\n\r\nAdds methods to `Selector` to retrieve\r\n- Whether it is able to select players only or any entity type\r\n- The limit for number of entities it can select\r\n\r\nThese APIs are particularly useful for external command frameworks when combined with the `ENTITY` `ClientCompletionKey`.",
    "head_branch": "selector-inputstring",
    "is_a_fork": true,
    "comments": [
      "I've reworded the Javadocs slightly and made them conform to our style - figured it'd be better to do that rather than get you to do it and waste time doing so.\r\n\r\nhttps://github.com/SpongePowered/SpongeAPI/commit/9273ea9a33c7c239ec95862b07a31a5e7a87e397"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e658d9087c4d6d37a362",
    "number": 2330,
    "body": "This particle type was commented out, I implemented this option in SpongePowered/Sponge#3368 so this PR adds the option back to the API.",
    "head_branch": "api-8",
    "is_a_fork": true,
    "comments": [
      "> Can you add a default method to `ParticleEffect.Builder` ? See\r\n\r\n@ImMorpheus   Done and re-tested.  :)"
    ],
    "commit_messages": [
      "Revive ParticleOptions.SCALE"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e659d9087c4d6d37a363",
    "number": 2329,
    "body": "[Sponge](https://github.com/SpongePowered/Sponge/pull/3366) | SpongeAPI",
    "head_branch": "fix-range-arguments",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix range client completions (#2329)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e65ad9087c4d6d37a364",
    "number": 2327,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3363)\r\n\r\nAdd a parameter that represents an Operation like `+=`, `-=` etc.\r\n\r\nUntested - I'll do so tomorrow.",
    "head_branch": "api8/operator-parameter",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add operator parameter"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e65bd9087c4d6d37a365",
    "number": 2326,
    "body": "Noticed these while I was working, nothing crazy!",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "thanks!"
    ],
    "commit_messages": [
      "Fixing minor typos in CommandRegistrar JavaDocs (#2326)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e65cd9087c4d6d37a366",
    "number": 2323,
    "body": "",
    "head_branch": "favicon-factory",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add missing throws to Favicon.Factory methods (#2323)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e65dd9087c4d6d37a367",
    "number": 2322,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3344)\r\n\r\n@Zidane @thibaulthenry \r\n\r\nI think this is the sort of thing you were looking for to expose when a portal does a teleport? Impl will pop the portal onto the context when teleporting via a portal, Nether portals will be this \"TwoDimensionalPortal\" construct (but I could just fold it into Portal and make the max corner optional, I guess?)",
    "head_branch": "api8/2dportalinfo",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add TwoDimensionalPortal for teleport events"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e65ed9087c4d6d37a368",
    "number": 2317,
    "body": "This allows plugins to easily and accurately determine whether they\r\nhave permission to perform data collection.",
    "head_branch": "metrics-effective-state",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add getter for effective plugin data collection state (#2317)\n\nThis allows plugins to easily and accurately determine whether they\r\nhave permission to perform data collection."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e65fd9087c4d6d37a369",
    "number": 2316,
    "body": "@dualspiral argued that the Javadocs were unclear on Discord. I've made\nthem a good deal more explicit now - and also cleaned them up\nsomewhat.\n\nI may follow this up with subsequent pull requests, but for now - lets\njust tidy up the Javadocs :)\n\nThanks,\nJamie\n",
    "head_branch": "metrics-javadoc-clarify",
    "is_a_fork": true,
    "comments": [
      "https://github.com/SpongePowered/SpongeAPI/commit/b1db988bef9aff0e6654e9432c6d5168f7006535"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e660d9087c4d6d37a36a",
    "number": 2315,
    "body": "SpongeAPI | [Sponge](https://github.com/SpongePowered/Sponge/pull/3336)",
    "head_branch": "api8/auto-spin-attack",
    "is_a_fork": true,
    "comments": [
      "Merged in a7d1ce8"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e661d9087c4d6d37a36b",
    "number": 2314,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3384)\r\n\r\nSee discussion on https://github.com/SpongePowered/SpongeAPI/issues/2186",
    "head_branch": "fix/completable-ban",
    "is_a_fork": true,
    "comments": [
      "> One thing I was further wondering was, should the documentation stress that `getBanFor` should not be used before calling `pardon` or `addBan`? Those methods, as you mentioned, might be open to abuse as well. I'm not clear on the degree to which you want to pursue correct API usage but I see it as an advantage that Sponge generally steers developers in the right direction.\r\n\r\nI was leaning towards explaining that in the docs, similar to how we have a \"best practice\" section for the economy service: https://docs.spongepowered.org/stable/en/plugin/economy/practices.html",
      "This is going to need changes in the impl to support this because the ban entry lists use these methods. Before pulling this I'd like to see an impl PR.\r\n\r\nIt might be a good time to investigate properly using the `CompletableFuture` returning methods during the login phase rather than just `join`ing - if we have to sync on the main thread every time someone logs in anyway then having futures seems rather pointless because the main use of the service is going to be on login anyway."
    ],
    "commit_messages": [
      "Remove BanService#hasBan and BanService#isBanned in favour of checking the Optional returned by the other methods (#2314)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e662d9087c4d6d37a36c",
    "number": 2312,
    "body": null,
    "head_branch": "feature/interact-event-delegating-methods",
    "is_a_fork": true,
    "comments": [
      "See https://github.com/SpongePowered/SpongeAPI/issues/1975 for the discussion on this and a possible approach to the method doc",
      "@CDFN I am going to put this PR onto the back burner because you have, intentionally or not, shined a light onto a much bigger issue with our events.\r\n\r\nThe Cause system means our event metadata is completely dynamic...but the fact that it is cuts us both ways. Namely it makes it difficult for plugin devs to know what to reasonably expect from an event without simply listening to it and printing a cause. We are discussing as a team how best to tackle this issue without compromising the dynamic attributes that truly sets Sponge a part from the other platforms.",
      "Hey! You seem to be running an unsupported version (API 8) of SpongeAPI. Support for API 8 ended in October 2023.\r\n\r\nAPI-8 is now end-of-life. We will not be issuing any more API updates for version 8 of our API[^1]\r\n\r\nAs part of our legacy cleanup we are closing issues relating to API8/1.16\r\n___\r\n\r\nIf you wish to move this forward, please rebase this PR on the current branch and reopen it.\r\n\r\n[^1]: https://forums.spongepowered.org/t/sponge-status-update-17th-october-2023/42212#spongeapi-82-1"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e663d9087c4d6d37a36d",
    "number": 2311,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3333)\r\n\r\nThis allows us to be somewhat future-proofed, but does mean implementations may have to use a fork of Guice in order to remain compatible with our Guava version\r\n\r\nThere are some drawbacks on the implementation side of this -- see that PR for a rundown of the issues.\r\n\r\nThis fixes #2305 ",
    "head_branch": "fix/guice",
    "is_a_fork": false,
    "comments": [
      "We depend on Guava 21.0 here too, so I think its best to just specify the Guice fork here too.",
      "While it would be strictly correct to specify the fork here, it would cause a few issues:\n\n- Cross-platform plugins that use upstream guice would have duplicate classes in their classpaths, since there's nothing that tells gradle that `ca.stellardrift.guice-backport:guice` and `com.google.inject:guice` provide the same API.\n- We add API in our fork (by reverting a commit that removed deprecated API) since no suitable replacement exists yet. Currently, we can drop that revert if upstream does eventually add the necessary API. If the fork were visible in SpongeAPI, we would have to maintain that change until a breaking API revision.\n\nBecause we explicitly exclude Guava from the Guice dependency, the newer version shouldn't pollute plugin classpaths in most cases, so upstream seems to be the least bad choice for API imo.\n\nOn Mon, Mar 15, 2021, at 10:14, Jamie Mansfield wrote:\n> \n\n> We depend on Guava 21.0 here too, so I think its best to just specify the Guice fork here too.\n\n\n> —\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub <https://github.com/SpongePowered/SpongeAPI/pull/2311#issuecomment-799592719>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAEZSZHQF7GMODLFRD7CXPTTDY55XANCNFSM4ZBQKQNA>.\n\n",
      "This potentially affects unit testing for plugins because of incompatible dependencies though, and means that third-party implementations need to replace it in their implementation too.",
      "Yes -- it's not at all an ideal solution, but we don't really have any good options. We were forced to upgrade because guice 4.1.0 shaded an ancient version of ASM that was incompatible with any Java version newer than Java 8, and needed workarounds to allow its outdated method of class generation to work. Guice 5 is the earliest version that fixes the class generation issues, but also removes the API we need on the implementation side.\r\n\r\nThe issues with third-party implementations has been brought up on the implementation PR -- hoping to hear from @Cybermaxke on how suitable this route will be for Lantern."
    ],
    "commit_messages": [
      "Update Guice 4.1.0 -> 5.0.1 (#2311)\n\nThis allows us to be somewhat future-proofed, but does\r\nmean implementations may have to use a fork of Guice in\r\norder to remain compatible with our Guava version and \r\nAPI specification"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e665d9087c4d6d37a36e",
    "number": 2310,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3332)\r\n\r\nSee impl PR",
    "head_branch": "api8/command-forget",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove the \"get\" prefix from most API elements.\n\nSome builders have also been renamed - dropping \"set\", favouring \"add\".\n\nFixes #2276 - so far that we're dropping \"get\" prefixes. We decided not to drop \"set\" prefixes.\n\nCo-authored-by: Riley Park <riley.park@meino.net>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e666d9087c4d6d37a36f",
    "number": 2309,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3330)",
    "head_branch": "fix/advancement-background",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add support for ResourceKey in advancement background (#2309)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e667d9087c4d6d37a370",
    "number": 2308,
    "body": "See Registry test testplugin PR for reproduction.\r\n\r\nError:\r\n\r\n`java.lang.AbstractMethodError: Receiver class net.minecraft.advancements.critereon.TickTrigger does not define or inherit an implementation of the resolved method 'abstract java.lang.String getName()' of interface org.spongepowered.api.util.Nameable.`\r\n\r\n`CriterionTrigger`s (minecraft name) aren't Nameable ",
    "head_branch": "fix/triggers-nameable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove Nameable interface from Trigger (#2308)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e668d9087c4d6d37a371",
    "number": 2307,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3318)\r\nFix https://github.com/SpongePowered/SpongeAPI/issues/2186",
    "head_branch": "ban/completable",
    "is_a_fork": true,
    "comments": [
      "The documentation for these methods really needs to reflect this change."
    ],
    "commit_messages": [
      "Add CompletableFutures to Ban/Whitelist Service (#2307)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e669d9087c4d6d37a372",
    "number": 2306,
    "body": "SpongeAPI | [Sponge](https://github.com/SpongePowered/Sponge/pull/3317)\r\nExpand the possibilities for named decoration by allowed translatable components.",
    "head_branch": "api8/mapapi/expandcomponent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Change TextComponent -> Component (#2306)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e66ad9087c4d6d37a373",
    "number": 2304,
    "body": "**API** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3314)\r\n\r\nThis revamps the previously meticulous brain-ache\r\nNotifyNeighborBlockEvent into a more\r\nstreamlined event similar to ChangeBlock event. As\r\nthe batching system has proven useful, this can\r\nsafely expose directional suppliers\r\nwithout explicitly relying on legacy logic of\r\n\"Always notify every neighbor on a target position\"\r\n\r\nSigned-off-by: Gabriel Harris-Rouquette <gabizou@me.com>",
    "head_branch": "notification-ticket",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "api: Introduce NotificationTickets (#2304)\n\n* api: Introduce NotificationTickets\r\n\r\nThis revamps the previously meticulous brain-ache\r\nNotifyNeighborBlockEvent into a more\r\nstreamlined event similar to ChangeBlock event. As\r\nthe batching system has proven useful, this can\r\nsafely expose directional suppliers\r\nwithout explicitly relying on legacy logic of\r\n\"Always notify every neighbor on a target position\"\r\n\r\nSigned-off-by: Gabriel Harris-Rouquette <gabizou@me.com>\r\n\r\n* we only dropped get prefixes\r\n\r\n* Oops\r\n\r\nCo-authored-by: ImMorpheus <ImMorpheus@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e66bd9087c4d6d37a374",
    "number": 2303,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3312)\r\n\r\nThis exposes the component resolution functionality needed to display score, selector, and NBT components to plugins, in a way that is fairly close to what Vanilla provides.\r\n\r\nSome things I'm still thinking about:\r\n- Is `Entity` the most appropriate type for a receiver? Perhaps `Audience` would make more sense for the API\r\n- Not sure I like the name `resolve` -- my original choice was `render` to match `ComponentRenderer` in the adventure API, but that makes it sound like a client-side graphics thing.\r\n- Would it make sense to allow plugins to register other renderers?",
    "head_branch": "feature/resolve-component",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e66cd9087c4d6d37a375",
    "number": 2301,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3305)",
    "head_branch": "api8/chunkevent",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "update and implement ChunkEvent"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e66dd9087c4d6d37a376",
    "number": 2300,
    "body": "The automated update is a little more inflexible with comments. It's also done a bit of a number on ContainerTypes -- thoughts?\r\n\r\nThis is automatically generated from the `generateApiData` task in `vanilla`, so any comments on this PR will be used to update the generator, with changes applied on the next snapshot.",
    "head_branch": "mc/1.17/registry-gen",
    "is_a_fork": false,
    "comments": [
      "https://github.com/SpongePowered/SpongeAPI/commit/d4f7831a9a944c57eea0cf6d9cc085431f2d50fa"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e66ed9087c4d6d37a377",
    "number": 2298,
    "body": "Impl PR: SpongePowered/Sponge#3296\r\n\r\nSome of you may remember the discussions in Discord. I've recently implemented a prometheus metrics exporter as a plugin (actually a CubeEngine module: [observe](https://github.com/CubeEngine/modules-extra/tree/master/observe)). A few days ago I also added  health checking to the module to get better supervision of the server and allow the orchestrator to automatically restart the container and I'm currently looking at OpenTracing and if/how that might come in handy (considering intrumenting @Faithcaio's terra module).\r\n\r\nThis PR is a direct copy from the observe code base minus the implementations. All service interfaces accept PluginContainer instances to track plugin ownership and I do support unregistration, not sure if that is something that is necessary/useful.\r\n\r\n## Health Checks\r\n\r\nIn observe's implementation, healthchecks are exposed as an HTTP endpoint which will be polled by docker in our case. The API has the concept of a health probe, which is practically a `Suppler<HealthState>`, so an arbitrary function that, when asked, exposes the current health state of whatever it is probing. The simple probe I implemented simply has a task running on every tick recording the last tick timestamp and depending on how long that last tick was during the probe call, it will either return HEALTHY or BROKEN. The API differentiates between \"sync probes\" and \"async probes\", meaning probes that must be run on the server main thread and must provide their state in a synchronous way and probes that may be called from any thread and provide their result in an asynchronous way. The implementation in observe schedules them separately and joins the results.\r\n\r\n## ~~Metrics~~\r\n\r\n~~The metrics service is merely a managing layer on top of Prometheus' java libraries. The dependencies that's being pulled and exposed, is the core library that provides the registries, basic collector types (Gauges, Counters, Histograms). On top of that I added a `PullGauge` helper, that makes it simple to define stateless gauges, that extract their value on-demand (e.g. while being scraped by prometheus) from some target object. I use these to pull information from the Server and ServerWorld's, without requiring me to create a timer (blackbox monitoring basically). The API, similar to the health check service, differentiates between standard `Collector` instances, that can be scraped from any thread, and `SyncCollectors` (just a marker), that must be scraped from the server main thread. The implementation in observe schedules them separately and joins the results.~~\r\n\r\n~~We use these interfaces and the exporter implementation behind it (netty based webserver, scheduling scraping jobs using the sponge schedulers) for weeks now without issues. We measured the overhead of the sync scraping using aikar timings to confirm the overhead is insignificant. The metrics are powering a Grafana dashboard which some of you might have seen.~~\r\n\r\n## ~~Tracing~~\r\n\r\n~~This one is the latest addition, which I assume would be useful to have, but I haven't actually applied this one directly. The service interface simply provides an opentracing `Tracer` instance, which is backed by whatever opentracing implementation. I chose jaeger in my implementation, because I have experience with that, but I could even make this easily configurable in the plugin. I don't really see much more that needs to be covered by the service interface here. I could however imagine having a set of helpers to ease the instrumentation of code. Since OpenTracing is especially useful for distributed tracing, it might be useful to provide e.g. pre-instrumented web-clients, scheduling interfaces/callback wrapping and so on.~~",
    "head_branch": "feature/observability",
    "is_a_fork": true,
    "comments": [
      "I think I'll drop the TracingService from this PR until I have a clearer idea of what is required for that.",
      "I've been thinking about what @gabizou said in discord about wanting to trace information on a per chunk level. I agree, that the information would definitely be useful, but I don't think prometheus is necessarily the right tool for that job. I've been toying with the idea of generating world heatmaps to visualize various high level game play aspects, but I guess the same could be done with low-level information.\r\n\r\nThis makes me reconsider the idea of directly exposing prometheus/openmetrics and instead abstracting over it in order to be more flexible with the provided information.",
      "Just to give an update: I'm working on another design in the observe plugin. I will update this branch once I have something useful",
      "@gabizou @kashike reduced this one to just healthchecks",
      "@gabizou moved the health check stuff over to observer as well. Nothing remains in the PR, so I close it."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e66fd9087c4d6d37a378",
    "number": 2297,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/Sponge/pull/3289)",
    "head_branch": "api8/data",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "add back content-version to datastores\nlegacy registrations update to datastore"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e670d9087c4d6d37a379",
    "number": 2296,
    "body": "**SpongeAPI** | [Sponge Impl](https://github.com/SpongePowered/Sponge/pull/3286)\r\n\r\nWhile I've got a minute...\r\n\r\n* Introduces `ValueParameter.Simple` which is primarily used to allow the use of Mojang provided parameters that we wrap - they don't need to know about the `CommandContext.Builder` so this allows third party frameworks to use the Mojang provided parameters.\r\n  \r\n  Note that aspirationally, at some point I might associate a `ClientCompletionKey` with each of these to make it clear what parameter links to what key - again, a QoL thing for third party consumers.\r\n  \r\n  This will fix the issue in #2290 insofar as composition is concerned, though the next point will make that moot.\r\n* Adds a `ValueParameterModifier` that modifies the output/completions of a parameter. This is generally going to be easier than trying to recreate a parameter (such as entities) itself.\r\n  \r\n  I have **not** allowed for the transformation of parameter types. As well as it being difficult to do because of the more strongly typed system we have, it's not really encouraged that non-parsing logic should go in a parser - they should do the minimum to validate that a parameter is valid for the context - if a later parameter fails then the work in the parser is wasted and so it is best to do as much work as possible in the executor, when you have a guarantee that your transformations will be used.\r\n  \r\n  This should be a better way of solving the issue in #2290 and basically sidestep the problem in #2289.\r\n\r\n",
    "head_branch": "api8/command-simple-params",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Allow some parameters to be used without a CommandContext\n\n* Add ValueParameterModifier\n* Fix command JD warnings"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e671d9087c4d6d37a37a",
    "number": 2295,
    "body": "**[Sponge ](https://github.com/SpongePowered/Sponge/pull/3283) | SpongeAPI**\r\n\r\nThis has been discussed on Discord a while ago, with Masa and Zidane.\r\nThe important code changes are on Sponge repository.\r\n\r\nThanks for reading the PRs",
    "head_branch": "api8/display-slots",
    "is_a_fork": true,
    "comments": [
      "Supersceded by #2350\r\n\r\nThanks for the initial contribution which I have taken forward."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e672d9087c4d6d37a37b",
    "number": 2293,
    "body": "",
    "head_branch": "getGet",
    "is_a_fork": false,
    "comments": [
      "This has been pulled via https://github.com/SpongePowered/SpongeAPI/commit/bcc994fd84049ff7630d9f241bedefa2d7ba815e"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e673d9087c4d6d37a37c",
    "number": 2292,
    "body": "Just to display the changes",
    "head_branch": "1.17",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e674d9087c4d6d37a37d",
    "number": 2288,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3262)\r\n\r\nThis is a companion to the Sponge PR where I spent some time looking through the commands. My main goal here was to add a bit to some documentation that felt unclear and look at some other minor things as I came across them.\r\n\r\nSome more detail is present on the Sponge side of this PR.",
    "head_branch": "feature/commands-tweaks",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Some minor tweaks to the Commands API (#2288)\n\nMostly naming/docs changes, plus necessary lifecycle changes."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e675d9087c4d6d37a37e",
    "number": 2286,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3247)",
    "head_branch": "api8/cmddefaultparam",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "expose MultiParameter to API"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e676d9087c4d6d37a37f",
    "number": 2285,
    "body": "Simply to follow my changes though feedback is welcomed.",
    "head_branch": "feature/datapack/dimension",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Expose the standard \"nether\" noise as a factory getter.\n\nSigned-off-by: Chris Sanders <zidane@spongepowered.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e677d9087c4d6d37a380",
    "number": 2284,
    "body": "The implementation now has a semi-functional implementation of Schematic\r\nAPI that may well support multiple Registries in use for various object\r\ntype definitions, including the BlockState/BlockType handling, BiomeTypes,\r\nand BlockEntityType handling.\r\n\r\nThis improves the test plugin \"CopyPasta\" to further take advantage of\r\nbeing able to now consume ArchetypeVolumes and construct streams\r\nfor BlockState, Biome, BlockEntity, and Entity Archetypes.\r\n\r\nSigned-off-by: Gabriel Harris-Rouquette <gabizou@me.com>",
    "head_branch": "api8/volume-palettes",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e678d9087c4d6d37a381",
    "number": 2282,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3237)\r\n\r\nSigned-off-by: Steven Downer <grinch@outlook.com>",
    "head_branch": "patch/registry1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add additional Registries (#2282)\n\nSigned-off-by: Steven Downer <grinch@outlook.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e679d9087c4d6d37a382",
    "number": 2281,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3235)\r\n\r\nSigned-off-by: Steven Downer <grinch@outlook.com>",
    "head_branch": "api8/registry-value",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update for Registry value changes (#2281)\n\nSigned-off-by: Steven Downer <grinch@outlook.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e67ad9087c4d6d37a383",
    "number": 2280,
    "body": "",
    "head_branch": "api8/border",
    "is_a_fork": false,
    "comments": [
      "Supersceded by https://github.com/SpongePowered/SpongeAPI/pull/2359"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e67bd9087c4d6d37a384",
    "number": 2279,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3235)\r\n\r\nSigned-off-by: Steven Downer <grinch@outlook.com>",
    "head_branch": "api8/registry-value",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e67cd9087c4d6d37a385",
    "number": 2278,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/Sponge/pull/3242)\r\n\r\nIssues solved by this PR:\r\n- `InteractBlockEvent.Primary` getting called multiple times for survival players without a way to differentiate between the actions.\r\n  - by intruducing `InteractBlockEvent.Primary.Start` `InteractBlockEvent.Primary.Cancel` `InteractBlockEvent.Primary.Finish`\r\n- `InteractEntityEvent.Secondary` getting called twice times for each entity.\r\n  - by intruducing `InteractEntityEvent.Secondary.At` `InteractEntityEvent.Secondary.On`\r\n\r\n@ImMorpheus \r\n\r\n",
    "head_branch": "api8/interactevent",
    "is_a_fork": false,
    "comments": [
      "I'm really not sure we should have a cancellable event that doesn't actually do anything on cancel - I understand that you don't want to put `Cancellable` on all events but one, but given impls are generated, I don't think it's that big of a deal to do so."
    ],
    "commit_messages": [
      "split up InteractBlockEvent.Primary, InteractEntityEvent.Secondary\nremove Cancellable where appropriate\nmove interaction points to events they always exists in"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e67dd9087c4d6d37a386",
    "number": 2277,
    "body": "Needs some heavy documentation to explain the methods but assume any method that doesn't return an Optional will throw an exception should the value not exist.\r\n\r\nFeel free to wait to review this until that exists but much of this is likely self explanatory.\r\n\r\nTo help with demonstration, `MatterTypes` has been updated.",
    "head_branch": "api8/registry",
    "is_a_fork": false,
    "comments": [
      "Was manually merged in https://github.com/SpongePowered/SpongeAPI/commit/7ae0c2e79483511708130984a24861b3cf34bab3\r\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e67ed9087c4d6d37a387",
    "number": 2275,
    "body": "@Faithcaio @Zidane Moving this commit to a PR, as per @gabizou.\r\n\r\nPR will be updated as we handle things with Adventure.",
    "head_branch": "api-8-text",
    "is_a_fork": false,
    "comments": [
      "For initial discussion, see 4e0ec9b",
      "Buckle up, for this is going to be a long one. You are free to turn parts of these into Adventure issues as you see fit. None of the following is meant to belittle what Adventure is, but to point out some of my major misgivings with it.\r\n\r\nThis commit (and subsequent fallout) is borne out of one thing: ease of use and discoverability of the Adventure library when used with Sponge. While I'm going to try to approach my comments from a Sponge point of view, these are **my** comments, **my** opinions. You are free to disagree with them, but I must be clear that you would be disagreeing with me, not the Sponge team. Disagree with them here too - this is something that everyone will benefit from - a private discussion helps no-one.\r\n\r\nWith that in mind, it's worth keeping in mind my preference for style, which _do_ conflict with some of the design decisions of Adventure. I'm not saying I'm right, rather I am trying to give my viewpoint so you can see where my head is coming from. I also freely admit that I sometimes get it wrong and contravene my own guidelines... anyhow - these are things that I feel Adventure doesn't do that I would:\r\n\r\n* Verbosity over brevity: a method name should be clear as to its function - often using verbs to provide the action (for example, I prefer the use of `get`, `set`, `with` etc.).\r\n* Distinctiveness: two methods on the same object that do not do the same thing should not be named the same thing.\r\n* Static factory methods should be associated with the type they create where possible: this aids the comprehension of what the method creates.\r\n\r\nThere are valid reasons as to why you've done some of these things and I'm _not_ saying that you should do some of these things, however, I'll explain why we felt the need to create the `Text` class that is now in this PR, whereby some of these principles do come into play.\r\n\r\n# Yes, discoverability is a problem\r\n\r\nSome of us know the library, and we know it fairly well. Unfortunately, the authors of a library or API are the _worst_ people to comment on discoverability. Having used it now, there are things that I still struggle to get right and they need to be thought about. That is absolutely why the commit appeared in the first place - there has been a lot of fumbling trying to do things and so the class came out to try to support us and our plugin developers.\r\n\r\n## Naming can be confusing\r\n\r\nThe biggest one is your static factory methods. Take the following two methods from your library in isolation - what someone booting an IDE and typing `Component.text(` might see.\r\n\r\n```java\r\nComponent.text();\r\nComponent.text(String);\r\n```\r\n\r\nThey both look like factory methods to me: my assumption is that they would both create `Component`s, one empty, one containing the string. However, it turns out that the first is a `TextComponent.Builder`, and one is a `TextComponent`. What's bad, however, is that my assumption can actually hold - if I use these as `ComponentLike`s in something that accepts `ComponentLike`s, then I will indeed end up with `Component.empty()` (a method that's actually okay but totally eclipsed by this) and my text component. So now we have two methods that don't do the same thing, but can be treated as such, but are actually totally different ways to do the same thing.\r\n\r\nThat's not discoverablilty. It's actually ignorance of what the two methods do that means people get away with it. While both can actually be used in the same way, with the same methods names (something I'll come back to under convenience methods), they really shouldn't be.\r\n\r\nA comment on the commit said:\r\n\r\n> These fall into the same issue as above -- it's not super clear which type of component is being created\r\n\r\nYou have the same problem to a lesser degree, the naming and the placing of the methods does hurt discoverabilty, even if the return type is `TextComponent`. Putting the `TextComponent` factory methods on `Component` rather than `TextComponent` doesn't make sense to me _for that very reason_. Yes, they return `TextComponent` and they are `Component`s, but `TextComponent.text(...)` rather than `Component.text(String...)` reinforces that the method creates and returns a `TextComponent`. Futher, from the Sponge point of view, where `Text.of()` in API 7 was a (admittedly bad) thing, that is the first place that people are going to start looking. Putting the factory and (renamed) builder methods back on `TextComponent` will aid IDE autocompletion and we're onto a winner - people **will** look for that.\r\n\r\nI was personally willing to try run with it, but my ultimate reaction is that `Component.text(...)` should return a `Component`, and not a sub type - indeed, that's how I treat it.\r\n\r\nNote that I agree that it's not always appropriate to use `builder()` as the name for a builder. Take the `Parameters` class, where we have a _lot_ of builder methods. The key thing is that they are all unique names, there is no ambiguity as to what they might return if two methods are the same.\r\n\r\nFor what it's worth, I fell into the same trap with command parameters, particularly the `firstOf` and `seq` methods, some of which returned builders, some didn't. After zml used it, they suggested that it would be better if we renamed the builders to include the word \"builder\". I was hesitant at first but thought on it. [They were right](https://github.com/SpongePowered/SpongeAPI/commit/8a63de257940fd45af6c5a77462216634d2a3230). It was a slightly different situation, but the naming just makes it clear you're getting something different back. I really think this needs to be done here, and `Component.text()` deprecated - a similar situation with other areas where that is the case.\r\n\r\n## Sponge just does things differently\r\n\r\nPart of the problem is a different philosophy between Sponge and Adventure. They use `of()` and `builder()` as the standard venacular for creating instances and builders. Adventure has not - and I personally have no problem with having a factory method named `text()` (though I don't like the reasoning of it being used for static imports, but that's a purely personal preference so isn't something I should complain about). The problem is simply that of the previous section - `text()` and `text(...)` are two different things, yet can be used the same way.\r\n\r\nOur `Text` class is completely borne out of that. Name it what you will, it pulls some of these discoverable methods into the Sponge namespace so we can cater for Sponge developers who may have trouble breaking with the Sponge way of doing these things (though I don't like that it doesn't then produce \"`Text`\" interfaces...). \r\n\r\nIt is important to note that it is entirely in the right of the Sponge project to do this if they see fit, if Sponge ends up deciding they need to do this, that's up to them. Ultimately, I would much prefer for Sponge interfaces to front some of the Adventure ones to reduce the step for the majority who have no interest in cross platform development, while keeping Adventure interfaces for those of us that want to do cross-platform stuff, but it's not something that I think is entirely realistic at this point in time.\r\n\r\n## Serialisers are just not discoverable at all - there is no central place to find them\r\n\r\nThis isn't really a problem with Adventure itself because I know your serialisers are basicaly separate projects. They are, however, difficult for people to find. zml's suggestion on the commit is a good one and I think we need to do that in Sponge.\r\n\r\n(As they are options, rather than constructing objects, I do think they can just sit in a `AdventureSerializers` class somewhere, rather than having their own class... somewhat backwards to the above!)\r\n\r\n## Numerous convenience methods does not mean they are discoverable - in fact, they may be harmful\r\n\r\nA comment that I saw made earlier is that Adventure has a lot of convenience methods. All well and good - but either _people don't know they are there_ or _they are potentially allowing people to do the wrong thing_.\r\n\r\nAn example of a difficult to discover method is `LinearComponents.linear(...)`. It's obviously designed to ease the burden of creating a tree like structure, but who is going to go looking for it? You've lost the benefit of this method because it's just not obvious to them. Remember who a lot of the user base is. I only know of it because I was told about it after suggesting such a method would be useful. This was the basis of the `Text.of(...)` method - we actually didn't want to emulate exactly what that did but it was a useful vehicle to allow for the joining of components. Intended or not, that is how the method can be used and it is indeed how I'm using it myself - using it to join multiple `Component`s together without having the `Component.text().append(...).append(...).build()` wrapping.\r\n\r\nLet's go back to the `text()` methods from before. This returns two objects with a very important difference, one is mutable, one is not. And yet, both of these are valid `ComponentLike`s that can be used in many areas of Adventure:\r\n\r\n```java\r\nComponent.text().content(\"Text\").color(NamedTextColor.GREEN).style(Style.style().decorate(TextDecoration.BOLD).decorate(TextDecoration.ITALIC).build());\r\nComponent.text(\"\").content(\"Text\").color(NamedTextColor.GREEN).decorate(TextDecoration.BOLD).style(Style.style(TextDecoration.BOLD).decoration(TextDecoration.ITALIC, TextDecoration.State.TRUE)); // slighly facetious with the starting method, but it proves a point\r\n```\r\n\r\n**They look pretty much the same, and yet have completely different semantics.** One is created from mutable builders, one is created from immutable objects. There is **nothing** to tell me which one I should use (I know it should be the first one) - part of why the lack of verbs is a problem. In the first method, I create three objects, the text component builder, the style builder and the style object (a fourth will be created upon use). The second method creates five - maybe more, I haven't looked at the implementation. For more complicated structures, this is only going to get worse. There should be _some_ way to differentiate between what happens in both of these methods, and ideally, the latter should not exist at all. But there isn't. This is **bad**, and I am concerned it's going to hit a lot of people, and potentially going to cause a lot of mistakes.\r\n\r\nSome thought needs to go into what is the \"right\" way to do things, and these need to be promoted. I do not know what the right way to do things is as it stands.\r\n\r\n# There are just too many options to do the same thing\r\n\r\nOn a `TextComponent.Builder`, I can set a colour using `.color(...)` or `.style(Style.style(TextColor))` or `.style(Style.style().color(TextColor).build())`. I can set a colour and a decoration using `.decorate(...).color(...)` or `.style(Style.style(TextColor, TextDecoration))` or `.style(Style.style().color(TextColor).decorate(TextDecoration).build())` or `.style(Style.style().color(TextColor).decoration(TextDecoration, TextDecoration.State).build())` or `.style(Style.style(TextColor).decoration(TextDecoration, TextDecoration.State))`.\r\n\r\nThere isn't inherently anything wrong with options, but there are a lot of ways to do things - when gabi was writing a text yesterday, three of us came up with three different ways of doing things. Kind of in hand with the previous statement, some of these ways feel more correct than others - I feel like the library has been written to please everybody and cater to everyone's style. There is not a single consistent workflow for people using the library, for reasons I've given above.\r\n\r\nI think keeping the builders is fine, and the convenience methods of `color` and `decorate` on the base builder. Beyond that - particularly the \"with\" methods - I'd seriously consider whether they add value (and I don't think they do).\r\n\r\n# Documentation is a big problem\r\n\r\nI know you're the first person to say documentation is a difficult thing, but it's a _really important one_. The front page of your docs still says that the docs are for an unreleased version of Adventure. They have some basic examples but are sparse. The javadocs are also rather sparse, and this is really hindering some of the usabilty of the library. While I could say \"sure, I'll get my elbows out and muck in\", in reality, the problem is yours. Javadocs are the second port of call for a developer using their IDE to develop. I honestly think a fair amount of time needs to go into the documentation so that things are much clearer - and to sign post some of the convenience methods where appropriate.\r\n\r\n# Don't (just) design the API to the platform, design it to the user\r\n\r\nAs a final thought: I feel that Adventure for text is less an abstraction layer on top of Minecraft text components, and more just a layer that mimics the Minecraft system. That's okay, but it's not how people think. Take the `Text.of(Component...)` method, for example. The comment made saying \"but this means you can't add colours and style in a linear fashion\" actually misses the mark. It wasn't to expose the linear components function for all its glory, the point was to make people create the components and allow them to piece them together easily, rather than have to think about children which can add needless complexity. `linear` allows us to do that - and it works - the idea is to get people to use components properly and join them together without having to go `Component.text().content(\"1\").append(Component.text().context(\".\").append(...).build()).build()).build()` (which is what I think has been suggested before), or even just what I suggested above (`Component.text().append(...).append(...).build()`).\r\n\r\nAt the end of the day, a good percentage of developers for the Minecraft platforms are relatively new, green developers. Think about what they want to do, not how they should do things in a Minecraft way - and API is meant to turn a machine way of doing things into a human way of doing things. They want a coloured text, maybe one with italics, and perhaps a click event - and they want a simple, discoverable way to do so. \r\n\r\nAnd that's what this commit was all about - the recognition that we needed the bridge the gap. I really want to see Adventure as a library that simplifes text development and is easy to use and discover, and hard to make mistakes with - but Sponge is always going to have its own take on things - if that spawns classes like this to aid developers, so be it.\r\n\r\n---\r\n\r\nA final reminder - these are my personal opinions, not those of the Sponge team.",
      "As a note, I have had a brief exchange with @kashike and the appropriate points will go into issues on the Adventure project.",
      "@kashike @dualspiral is this still necessary or can this be closed out?",
      "Most of this has been raised in Adventure issues (above), but most have also not seen too much traction. Honestly, I still think there are usability and API design problems in Adventure (I clearly make no secret about that) but I've said my piece about them and I have nothing to add in that regard.\r\n\r\nAs for this PR, we can close it, but we reserve the right to re-introduce a PR like this if we find that people are generally struggling with Adventure (and by that, I mean it becomes a common question) when using Sponge. If this happens, I must absolutely stress - much like Adventure is not Sponge, Sponge is not Adventure. If we need to put utility methods into Sponge to soften the curve, so be it.\r\n\r\nWe'll monitor and see what happens."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e67fd9087c4d6d37a388",
    "number": 2274,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3228)\r\n\r\nCreates a `ChunkManager`, currently just fronts chunk loading tickets.",
    "head_branch": "api8/chunk-tickets",
    "is_a_fork": false,
    "comments": [
      "Zidane asked me to look over this, and I'll say that I think it looks pretty nice so far.\r\n\r\nHowever, there doesn't seem to be any way for a plugin to be notified as to when the chunk(s) for a particular ticket have been loaded, at a given chunk state (if not just loaded vs generated). I think this would be a worthwhile addition as many plugins will not care about the tickets themselves, but really just want access to chunks. In API 7 this would have been possible using something such as World#loadChunkAsync since it returns a future (and yes, I'm aware that API was never really functional, but it gets the point I'm trying to make across).",
      "For anyone who is even _thinking_ about merging, please don't. While I think I've gotten most of the issues I'm still in the middle of testing, chunk tickets are a little weird.\r\n\r\n> However, there doesn't seem to be any way for a plugin to be notified as to when the chunk(s) for a particular ticket have been loaded, at a given chunk state (if not just loaded vs generated). I think this would be a worthwhile addition as many plugins will not care about the tickets themselves, but really just want access to chunks. In API 7 this would have been possible using something such as World#loadChunkAsync since it returns a future (and yes, I'm aware that API was never really functional, but it gets the point I'm trying to make across).\r\n\r\nI've actually spent a lot of time looking at this and it's not going to happen, at least short term. The problem is that the implementation doesn't really hold a link between a ticket and the chunk loading lifecycle so much - the ticket and actual action are so far removed from each other that a ticket is nothing more than a level to Minecraft - there is no \"completion\" notification.\r\n\r\nThe best I'll be able to do (and I'm not doing it as part of this) will be to just have our tickets listen for a chunk load and notify based on that - but there is no guarantee that a chunk load would happen as part of a ticket.\r\n\r\nGetting the tickets working with the manager as we expect is the goal for this PR. There is no reason why such a mechanism, should one be found, couldn't be added in a non-breaking change manner to a future revision of API 8 if it misses the original cut.",
      "Thanks for taking a look. I agree it probably doesn't make too much sense as part of the ticket system for the reasons you've just described. The original idea I had was that a loadChunk method returning a future could be re-added in API 8 (as mentioned in #2287). Implementations of this already exist on other platforms, though another mechanism could also be used. Perhaps after some further discussion this can be considered for a revision of API 8 (since the freeze is approaching)."
    ],
    "commit_messages": [
      "First stab at a Ticket Manager"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e680d9087c4d6d37a389",
    "number": 2273,
    "body": "**[SpongeCommon ](https://github.com/SpongePowered/Sponge/pull/3226)| SpongeAPI**\r\n\r\nMore information in SpongeCommon PR.\r\n\r\n\r\nThanks for reading ",
    "head_branch": "feature/implement-changeworldtimeevent",
    "is_a_fork": true,
    "comments": [
      "Closing for reasons given on impl PR."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e681d9087c4d6d37a38a",
    "number": 2272,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3222)\r\n\r\nI took a look at updating the Chunk API (stepping out of comfort zone!) from invalid and... it's been more of a journey than I thought. This is not near being done but I haven't really touched this area of the code before so I want to make sure I'm doing the right things.\r\n\r\nThe biggest thing (at the moment!) is that I've changed `HeightTypes` and `ChunkState` to mirror the MCP entries. There will likely need to be some rejigging of the ProtoChunk and PrimitiveChunk interfaces. I also don't think `loadChunk` and `unloadChunk` should be on this interface - that should be on the associated `World`.\r\n\r\nSee the associated Common PR for the implementation.",
    "head_branch": "api8/update-chunks",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Morph the Chunk API to fit Minecraft itself. (#2272)\n\n* ProtoChunk doesn't have a reference to a world\r\n\r\nNote that I've erred on the side of caution where something might not be possible and removed the API call. We can re-add things in a non-breaking manner if things become possible (like worlds on ProtoChunk)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e682d9087c4d6d37a38b",
    "number": 2271,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3221)\r\n\r\nCurrently, DamageTypes can be registered via `RegisterCatalogEvent<DamageType>`, but there is no builder to create them.\r\nThis PR adds one.",
    "head_branch": "api8/damagetype",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add DamageType.Builder (#2271)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e683d9087c4d6d37a38c",
    "number": 2270,
    "body": "Perks of the changes, so far:\r\n\r\n- Types go back to being enums (as long as they do not have generic parameters) which brings back the ease of use to plugin devs\r\n- Suppliers now available for all registries and under any key, not just for Sponge\r\n- Dynamic registration now available after lifecycle\r\n\r\nMuch more to come, seeking feedback before applying these changes on a wide scale.\r\n\r\nSigned-off-by: Chris Sanders <zidane@spongepowered.org>",
    "head_branch": "api8/registry2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e684d9087c4d6d37a38d",
    "number": 2269,
    "body": "https://github.com/SpongePowered/SpongeCommon/pull/3218",
    "head_branch": "feature/aabb",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove AABB implementation from the API (#2269)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e685d9087c4d6d37a38e",
    "number": 2268,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/3217)\r\n\r\n- Cleaned up and added more javadocs\r\n- Added new `resolve` methods that let you specify a custom default namespace\r\n\r\nEDIT: Also keep in mind now that `ResourceKey.Builder#namespace` must always be set.",
    "head_branch": "api8/resourcekey",
    "is_a_fork": true,
    "comments": [
      "My concerns are now resolved as well",
      "@dualspiral @kashike Removed the other resolve methods.\r\n\r\nIMO, we should still keep the factory even though its a single method, because using the builder for resolving is a weird special case."
    ],
    "commit_messages": [
      "ResourceKey improvements (#2268)\n\n* Improve ResourceKey javadocs, and add additional resolve methods\r\n\r\n* Prefix static methods with class name\r\n\r\n* Update ResourceKey for requested changes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e686d9087c4d6d37a38f",
    "number": 2267,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/3216)\r\nPrevious events were disjointed by a class definition of what possible\r\noperations were being performed, regardless whether an operation was\r\nperformed in a specific order. This lead to either logically reading the\r\ntransactions in order from the Post event, and deducing changes, or\r\navoiding transaction ordering entirely. Now, with the new API, the\r\ntransaction itself lends the Operation as a signifier about what\r\noperation the transaction is itself, without needing to know whether the\r\nchanges were done in a specific order or not, they're always in the\r\norder the engine provides, with the added information for each transaction\r\nto have the operation being performed to achieve the result of the final\r\nblock state.\r\n\r\nSigned-off-by: Gabriel Harris-Rouquette <gabizou@me.com>",
    "head_branch": "api8/changeblock-event-update",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge ChangeBlockEvent changes. Merges #2267\n\nSigned-off-by: Gabriel Harris-Rouquette <gabizou@me.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e687d9087c4d6d37a390",
    "number": 2266,
    "body": "**[SpongeCommon ](https://github.com/SpongePowered/SpongeCommon/pull/3214)| SpongeAPI**\r\n\r\nHey,\r\n\r\nHere is a small PR trying to expose entity tags which can be used as selector arguments in commands.\r\nUntil now they were not exposed in the API.\r\n\r\nLearn more about tags: https://minecraft.gamepedia.com/Scoreboard#Tags\r\n\r\nThanks for reading this PR.",
    "head_branch": "feature/expose-entity-tags",
    "is_a_fork": true,
    "comments": [
      "Also needs an implementation in API-8",
      "Manually merged, thanks!"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e688d9087c4d6d37a391",
    "number": 2265,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/3213)\r\n\r\nFirst time implementing data in the API8 scheme, so putting this up for some review",
    "head_branch": "api8/client-settings",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add keys for data from client settings (#2265)\n\n* Add keys for data from client settings\r\n\r\n* Make ServerPlayer data accessors match standards"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e689d9087c4d6d37a392",
    "number": 2264,
    "body": "**[SpongeCommon ](https://github.com/SpongePowered/SpongeCommon/pull/3212) | SpongeAPI**\r\n\r\nIn this PR I'm trying to expose the management of portal agents directly from the API.\r\n\r\nSee the PR in SpongeCommon for more information about implementation.\r\n\r\nThanks for reading this PR.",
    "head_branch": "feature/expose-portal-agents",
    "is_a_fork": true,
    "comments": [
      "Unfortunately, I'm going to close this. We're done with API changes on API 7 and, partially my fault, we never got to finishing this. API 8 does not have the notion of portal agents, so won't be needed there, but thank you for this regardless."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e68bd9087c4d6d37a393",
    "number": 2263,
    "body": "https://github.com/SpongePowered/SpongeCommon/pull/3211",
    "head_branch": "1.16.4",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2263 from SpongePowered/1.16.4\n\n1.16.4"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e68cd9087c4d6d37a394",
    "number": 2262,
    "body": "SpongeAPI | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/3210)\r\n\r\nAs my original issue fix was desired for stable-7, I repost the work of @ImMorpheus \r\nFix https://github.com/SpongePowered/SpongeAPI/issues/2230",
    "head_branch": "fix/score-locked",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add missing locked field in Score class (#2262)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e68dd9087c4d6d37a395",
    "number": 2261,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/3209)\r\n\r\nThis PR adds support for the `CustomModelData` tag as noted here:\r\nhttps://minecraft.gamepedia.com/Player.dat_format#General_Tags\r\n\r\nAnd used in resource packs here:\r\nhttps://minecraft.gamepedia.com/Model#Item_Predicates",
    "head_branch": "api8/custommodeldata",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Keys#CUSTOM_MODEL_DATA (#2261)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e68ed9087c4d6d37a396",
    "number": 2260,
    "body": "SpongeAPI | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/3208)\r\n\r\nSpongeAPI of the map api. I think this is mostly complete. However lots of javadocs need work/completing.",
    "head_branch": "api8/map-api",
    "is_a_fork": true,
    "comments": [
      "Thinking about it now - I think there should be more information provided about MapBanners. In vanilla you can right click on a banner in the world to add it to a map. (With the api you can also add map banner decorations that are not attached to any in-world blocks). However the only access to use currently is `toggleBanner(...)` (or something similar to that) on MapInfo. This should probably be able to be accessed via a Key, and be a Collection<MapBanner> or something similar to that. This allows access to see all mapbanners, whether a banner is added etc, etc. I will try to work on adding this ASAP.",
      "Merged in https://github.com/SpongePowered/SpongeAPI/commit/081d45961756316dfc6bb8deb55cdfc04d2fdd41\r\nFeel free to make a new PR for additional API."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e68fd9087c4d6d37a397",
    "number": 2258,
    "body": "Hey,\r\n\r\nHere is the fix for SpongeAPI issue : https://github.com/SpongePowered/SpongeAPI/issues/2187\r\nLinked PR on SpongeCommon: https://github.com/SpongePowered/SpongeCommon/pull/3205\r\n\r\nThank you for reading this PR.",
    "head_branch": "feature/add-missing-scoreboard-criteria",
    "is_a_fork": true,
    "comments": [
      "Any chance you would be willing to review what is in api-8 and make sure that is also taken care of?\r\n\r\nYou'll find that api-8 does registry VERY different than 7 did. Look at `SpongeCatalogRegistry` for insight.",
      "Manually merged, thanks!"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e690d9087c4d6d37a398",
    "number": 2252,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/3197)\r\n\r\nNeeds to be tested, but otherwise heralds the return of ray tracing.",
    "head_branch": "api8/raytrace",
    "is_a_fork": false,
    "comments": [
      "This and the corresponding implementation works. Two questions remain:\r\n\r\n* Do we split this up slightly to make it possible to have a client version without breaking this?\r\n* Do we rename this as `RayCast` (like always, I don't really care what we call it but I'd rather we choose what is easy to understand for the consumers and `RayTrace` is used in MCP, even though this is mostly independent from it.)",
      "Forget the client for now, I can't justify it.\r\n\r\nRayCast would be the more correct term I guess but most people just always treat it as RayTrace. I don't care either way.",
      "Manually merged."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e691d9087c4d6d37a399",
    "number": 2250,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/3192)\r\n\r\nDataStores can now be built for\r\n - custom data (saved under \"ForgeData.SpongeData.CustomManipulators\") which is what plugins should use\r\nor\r\n- vanilla data (saved on the root dataview corresponding the base CompoundNBT) which is used by Sponge to set data on Archetypes and Snapshots\r\n\r\nThe DataStoreBuilder features Steps forcing you to call required builder methods at least once.\r\n\r\nAdds convenience methods for building very simple dataregistration & datastores.\r\nA dataregistration for a `String` value on an `ItemStack` is now as simple as:\r\n```java\r\n        this.mySimpleDataKey = Key.of(this.plugin, \"mysimpledata\", TypeTokens.STRING_VALUE_TOKEN);\r\n        event.register(DataRegistration.of(this.mySimpleDataKey, ItemStack.class));\r\n```\r\n\r\n\r\n",
    "head_branch": "api8-nbtdata",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "adjust DataRegistrations for impl\nDataStore builder with Steps\nAdded convenience methods"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e692d9087c4d6d37a39a",
    "number": 2249,
    "body": "Largely replacing Jenkins with actions. This is to migrate the legacy builds off Jenkins before it gets shut down.",
    "head_branch": "api7/github-actions",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add github actions to stable-7 workflows\n\nSigned-off-by: Gabriel Harris-Rouquette <gabizou@me.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e693d9087c4d6d37a39b",
    "number": 2248,
    "body": "https://github.com/KyoriPowered/adventure/pull/181",
    "head_branch": "feature/adventure-id",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2248 from SpongePowered/feature/adventure-id\n\nPlayer has an identity"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e694d9087c4d6d37a39c",
    "number": 2247,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/3183)\r\n\r\nI'm aware there is #2107 but as I've used the API, I've found that a purely `Duration` based API is cumbersome and confusing to use. From discussion in Discord with @Zidane and @kashike, we've decided to look at introducing the `Ticks` class and disassociating the idea of a minecraft tick from a temporal unit.\r\n\r\n[Note I've argued this before but kept an open mind](https://github.com/SpongePowered/SpongeAPI/pull/2007#issuecomment-494107226). Now I've given it a go - I stuggled badly with it and had to look at the common code to work out what was going on.\r\n\r\nThis came about when I was trying to create a set time command in Nucleus using the `WorldProperties#setDayTime(Duration)` method. It became apparent _very_ quickly that the method itself was confusing. For example:\r\n\r\n* What did the `Duration` represent? Days in Minecraft time? Real time? It turned out to be the latter, but nearly everyone will simply want to say \"set the time to noon\".\r\n* How would you set the time to noon? In our impl, that would mean setting the duration to a couple of minutes or so. That's just for vanilla backed engines - different implementations might have different day cycles.\r\n* There was `TemporalUnits.MINECRAFT_DAY` and `TemporalUnits.HALF_MINECRAFT_DAY` tied to `TemporalUnits.MINECRAFT_TICKS`. Basically - the way you're meant to use this method is to do `setDayTime(Duration.of(18000, TemporalUnits.MINECRAFT_TICKS));` to get midnight - completely defeating the purpose of removing ticks from the API...\r\n* ... but then, you can't use `Duration.get(TemporalUnits.MINECRAFT_TICKS)` when you get a `Duration` back _because the javadocs of [Duration.get](https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html#get-java.time.temporal.TemporalUnit-) only accepts `SECONDS` and `NANOS`_! So the return value is especially useless because you now need to know what the day length is wall clock time to be able to convert!\r\n\r\n**Minecraft is a tick based game** and while I'm a proponent of abstracting as much as we can, I don't think we can abstract this out. If we're still including ticks in some form (`TemporalUnits.MINECRAFT_TICKS`, additions to #2107 add the notion of TPS) then there is no point shoehorning it into Duration because ticks are not a duration. They do not have a reliable clock time - they are units of work. Rarely will they take 50ms, they'll fluctuate wildly above and below this time and we need to stop treating ticks as these fixed time units - just that we expect them to fit **within** a 50ms window. The more important thing about ticks is that they more of a guarantee of order rather than a guarantee of time - if you scheduled task A for 5 ticks and task B for 10 ticks, even if the engine drops the four ticks in the middle to try to recover performance, B will never happen before A (but _may_ happen in the same tick as A - effectively at the same time).\r\n\r\nAs a result, @kashike suggested the notion of a `Ticks` interface in Discord, to which @Zidane and I agreed with. This way, we don't propose any tick time, and if an implemention does not run on a tick based system, they can emulate what a tick time would be using it. By having a concrete type that replaces `Duration` that indicates some engine dependent time-frame and ordering, we're not muddying the waters and, more importantly, we're not using `Duration` where confusion may occur.\r\n\r\nAt the end of the day, this API needs to be clear to its consumers - using `Duration` with `TemporalUnits.MINECRAFT_TICKS` (or, as proposed, `Duration.Ticks` when ticks aren't a time unit) was only going to serve to be confusing and, ultimately, give the wrong impression when very few servers are really going to run at 50ms per tick (for vanilla) all the time. If it's going to run for a tick rather than 50ms, we should at least convey that clearly - and if a non-tick based system is built, they can just specifiy a tick to be whatever unit they want it to be and build the `Ticks` interface around that.\r\n\r\n(As an aside, for world time, we should perhaps consider some other construct to indicate a specific time of minecraft day for the `get/setDayTime` that might be more user friendly and would allow for disassociation with a tick based time, but that's ~~another idea for another time~~ included too.)\r\n\r\n---\r\n\r\n* Added Ticks to shield the notion of a tick from consumers\r\n* Removed TemporalUnits\r\n* Renamed Task methods delayTicks and intervalTicks to delay and interval as they now take a Ticks object",
    "head_branch": "api8/time-units",
    "is_a_fork": false,
    "comments": [
      "I added the notion of a `MinecraftDayTime` after thinking about it overnight/this morning so minecraft times can be disassociated with ticks. It's not a duration, more akin to an Instant, so I haven't done this for weather - if we want to do this sort of thing for weather we'll likely want to make a `MinecraftDayDuration` too.\r\n\r\nWe may also not want this - if not I'll just throw away the last two commits. Just wanted to proof of concept it.",
      "@kashike made a good point to me - the client and server may have different tick rates. I think it's probably _unlikely_ that this is going to be the case but it does need to be thought about (and how we logically think about that).\r\n\r\nIt might just have to be `Ticks<E extends Engine>` and have the `of` method specify an engine...",
      "Manually merged."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e695d9087c4d6d37a39d",
    "number": 2246,
    "body": "Pretty basic premise, we've got issues with relying on guava, and as Configurate is migrating away from Guava altogether, so shall we (on the basis that we don't really use too much of guava, this is a good chance for cleanup as well).\r\n\r\n@zml2008 has got more to do with migrating our usage of TypeTokens.",
    "head_branch": "api8/de-guavafy",
    "is_a_fork": false,
    "comments": [
      "What about plugins? If each plugin will add Guava to JAR manually, there will be version conflicts.",
      "> What about plugins? If each plugin will add Guava to JAR manually, there will be version conflicts.\r\n\r\nWe're not removing guava as part of the API set of libraries, we're just removing our usage of them in the API. There's also an overall issue of \"we're stuck with the versions of guava based on the MC implementation\" but other implementations (like lantern) are irrespective of Minecraft's version dependencies."
    ],
    "commit_messages": [
      "Merge deguavafication. Merges #2246.\n\nSigned-off-by: Gabriel Harris-Rouquette <gabizou@me.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e696d9087c4d6d37a39e",
    "number": 2244,
    "body": "**SpongeAPI** | [SpongeCommon]()\r\n\r\n# Palettes and their evolution\r\n\r\nMostly as a request for WorldEdits' better handling, we seek to improve palettes to be more generic outside the purview of being indexing on `CatalogType`s alone. As Minecraft evolves, the handling of what a `BlockState` is allowed to contain increasingly becomes more and more data driven. As such, we need to less focus on a `ResourceKey` based object and more of a \"here's a palette of object definitions that are defined by the `Palette`'s `PaletteType`.\r\n\r\n## PaletteType and the encoder/decoder\r\n\r\nPreviously, we made `Palette` intrinsically serializable by building it up based on an index of `int`s to either `BlockState` or some other `CatalogType`. Now, we need to be able to serialize these `Palette`s  based on a predefinition from their `PaletteType` that already defines the *type* of object the `Palette` will support. As such, the `String` encoder/decoder will be maintained at the `PaletteType` level, and less so on the `Palette` itself.\r\n\r\n\r\n\r\n",
    "head_branch": "api8/palettes",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Introduce more generic Palettes\n\nSigned-off-by: Gabriel Harris-Rouquette <gabizou@me.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e697d9087c4d6d37a39f",
    "number": 2243,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/3176)\r\n\r\nFix https://github.com/SpongePowered/SpongeAPI/issues/2230",
    "head_branch": "fix/score-locked",
    "is_a_fork": true,
    "comments": [
      "Stable-7 for this one please"
    ],
    "commit_messages": [
      "Add missing locked field in Score class (#2243)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e698d9087c4d6d37a3a0",
    "number": 2242,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/3175)",
    "head_branch": "fix/triggers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add missing triggers (#2242)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e699d9087c4d6d37a3a1",
    "number": 2241,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/3174)\r\n\r\n# Merrily Merrily Merrily, Life is but a ~~dream~~ Stream\r\n\r\n`Volume`s enjoy some abstract sense of their knowledge of what sort of entities they contain, and while in the previous major version of SpongeAPI, we had something called [`BlockWorker`](https://github.com/SpongePowered/SpongeAPI/blob/299f484b680631d30da76543c1eb0318d859eb87/src/main/java/org/spongepowered/api/world/extent/worker/BlockVolumeWorker.java#L37), it isn't necessary to have non-generified \"Workers\" that effectively contained a pre-compiled set of operations to perform on a pre-compiled dataset to apply later, and the trouble with them in the past was that it wasn't possible to virtually \"extend\" them outside of their purview of a \"Block worker works on blocks\" and a Biome worker works on biomes\" with some operations.\r\n\r\nThe end result is embracing Java 8's Stream API and some more functional programming concepts to a stream of data to effectively keep the idea of \"Here's a stream of things that you can change their output of and then apply them to somewhere else.\"\r\n\r\n## Huh? Streams? Outputs? Apply???\r\n\r\n(I'm putting a pause on finishing this doc, because while I do want to explain it more thoroughly, it is half past midnight and I need to sleep).",
    "head_branch": "api8/volume-streams",
    "is_a_fork": false,
    "comments": [
      "I love the idea of facilitating mirrors and rotations and I have few suggestions:\r\n\r\n1. `Mirrors` is missing `UP_DOWN`.\r\n\r\n2. `Rotations` is missing `FRONT`, `BACK`, `FRONT_LEFT`, `FRONT_TOP`, etc.\r\n\r\n3. I find `LEFT`, `RIGHT`, `FRONT` and `BACK` names confusing because these are relative. My right is not the same as your right if you stand in front of me. In the same way I'm not sure of what `LEFT_RIGHT` means in a 3D world. I would prefer absolute values such as `WEST`, `EAST`, `NORTH`, `SOUTH`, like there are in other places in the API. \r\n\r\n4. About `Rotations`, `CLOCKWISE_90` is unclear whether it's around x, y, or z axis. I guess it's around y but then what about other axes? Why not allow such rotations? A solution could be to define `X_CLOCKWISE_90`, `Y_CLOCKWISE_90` and `Z_CLOCKWISE_90`.\r\n\r\n5. I find `Rotation`, `Orientation` and `Direction` classes to be redundant. Moreover, from a mathematical point of view, there is already a perfect class to represents these things: `Quaterniond`. Replacing these 3 classes with `Quaterniond` would solve (2. 3. and 4.).\r\n\r\nEDIT: `Quaterniond` might not be as easy to use as `Direction` for simple things so keeping a single catalog type wrapping `Quaterniond` is a solution too.",
      "> Mirrors is missing UP_DOWN.\r\n\r\n> I find LEFT, RIGHT, FRONT and BACK names confusing because these are relative. My right is not the same as your right if you stand in front of me. In the same way I'm not sure of what LEFT_RIGHT means in a 3D world. I would prefer absolute values such as WEST, EAST, NORTH, SOUTH, like there are in other places in the API.\r\n\r\nRather, I think the mirrors should be by axis. `X_AXIS`, `Y_AXIS` and `Z_AXIS` would make a lot more sense (but only if x/y/z directional data is included with such things, which I'd expect they are).\r\n\r\n> Rotations is missing FRONT, BACK, FRONT_LEFT, FRONT_TOP, etc.\r\n\r\nDo you mean `Orientation`? That's intentionally a 2D orientation of an object with a notion of its own orientation relative to something else (Item in an item frame, which way does it point relative to normal expectations?), it was renamed while @gabizou and I were talking about this API. In that sense, it's not missing that at all.\r\n\r\n> About Rotations, CLOCKWISE_90 is unclear whether it's around x, y, or z axis. I guess it's around y but then what about other axes? Why not allow such rotations? A solution could be to define X_CLOCKWISE_90, Y_CLOCKWISE_90 and Z_CLOCKWISE_90.\r\n\r\nRotations are a 2D rotation operation with no such information, it's simply a \"rotate around something\". Yes, you would need to couple this with an axis of rotation, but that's specifically not defined here.\r\n\r\n>I find Rotation, Orientation and Direction classes to be redundant. Moreover, from a mathematical point of view, there is already a perfect class to represents these things: Quaterniond. Replacing these 3 classes with Quaterniond would solve (2. 3. and 4.).\r\n\r\nSure, but your edit sums it up.\r\n\r\n> EDIT: Quaterniond might not be as easy to use as Direction for simple things so keeping a single catalog type wrapping Quaterniond is a solution too.\r\n\r\nExactly. In fact, I'd go further and say it's not easy to use for most developers at all because they _do not_ have a mathematical background. I've said it before and I'll say it again, _we need to remember them_. I would not be in favour of removing these classes for that reason alone.\r\n\r\nI'd be up for the idea of being able to create some sort of `Transformation` from a chain of rotations and translations that is then backed by a quaternion, but that might be creeping out of the scope of this PR.",
      "> Rather, I think the mirrors should be by axis. X_AXIS, Y_AXIS and Z_AXIS would make a lot more sense (but only if x/y/z directional data is included with such things, which I'd expect they are).\r\n\r\nI do prefer this over `LEFT_RIGHT` but the mention of \"axis\" still confuses me because a mirror is a plane symmetry and not an axis symmetry.\r\n\r\n\r\n> Do you mean Orientation? That's intentionally a 2D orientation of an object with a notion of its own orientation relative to something else\r\n\r\nI thought everything was in 3D. I didn't understood that `Orientation` was for item frames, I should have read the changes twice 😅. 2D makes a lot of sense for `Orientation` in this case.\r\n\r\n\r\n> Rotations are a 2D rotation operation with no such information, it's simply a \"rotate around something\". Yes, you would need to couple this with an axis of rotation, but that's specifically not defined here.\r\n\r\nThe method [`BlockState#rotate(Rotation)`](https://github.com/SpongePowered/SpongeAPI/pull/2241/files#diff-c00b1420115c3cf9601763262c66ddbdR118) doesn't take any axis parameter. Either `Rotation` should be in 3D, either each `rotate` method should take an axis parameter. Unless `Rotation` is used elsewhere I would prefer it to be in 3D.\r\n\r\n",
      "Going to just put a foot down that the Mirror and Rotation catalogs are 1:1 mappings for what Minecraft supports us to perform as mirrors and rotations on `BlockState`s. There's little wiggle room to expand further of \"top-down\" mirroring or adding other possible rotations that the game engine limits what rotations are available.\r\n"
    ],
    "commit_messages": [
      "Merge VolumeStream API. Merges #2241.\n\nSigned-off-by: Gabriel Harris-Rouquette <gabizou@me.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e69ad9087c4d6d37a3a2",
    "number": 2240,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/3172)\r\n\r\n---\r\n\r\nThis is kind of me updating/fixing/thinking about things as I write Nucleus for API 8.\r\n\r\nTwo reasons I've made this a PR specifically:\r\n\r\n* I don't want to tread on @Zidane's toes while the registry changes are underway. I don't know how close it is to being done. This isn't urgent and I can fix this up once that's merged.\r\n* The use of `Collection` in `Parameter.Value<>` and whether we want to think about that a little - this is a thought that's come to mind as I've been building Nucleus for API 8.\r\n\r\nOn that latter point, we have some `Parameter.Values` that return `Collection<T>` rather than just `T`. \r\n\r\nIt can be argued that this is a good thing in that it clearly specifies whether a parameter will potentially return multiple entries or not. However, it might be confusing when it comes to `CommandContext#getOne` vs. `CommandContext#getAll`. When this parameter value/key is used in these methods, they will return `Collection<T>` and `Collection<Collection<T>>`, and this might be confusing to some people used to the old system.\r\n\r\nAs an example, say we have the following parameter:\r\n\r\n```java\r\nfinal Parameter.Value<Collection<GameProfile>> profile = Parameter.builder(new TypeToken<Collection<GameProfile>>() {}).parser(CatalogedValueParameters.MANY_GAME_PROFILES).setKey(\"profile\").build();\r\n```\r\n\r\nIf we specify this once in a command then invoke the command, to get it from the resulting context, we'd need to use the `requireOne` method:\r\n\r\n```java\r\nfinal CommandContext context = ...\r\nfinal Collection<GameProfile> gameProfiles = context.requireOne(this.profile);\r\n```\r\n\r\nThis makes sense because you're getting one parsed result. However, if you were to have this parameter twice (or more) in the command, you'd use `getAll`...\r\n\r\n```java\r\nfinal CommandContext context = ...\r\nfinal Collection<Collection<GameProfile>> gameProfiles = context.getAllthis.profile);\r\n```\r\n\r\nAs you can see, you get a collection of collections. While this makes sense as what you're doing is getting multiple result sets from the separate parameters, it might trip people up and I just wonder if this is really what we should be doing. Do we want to perhaps remove the notion of `Collection` from some of these value parameters and basically assume that all parameters can return multiple values, or do we want to enforce returning a `Collection` when we _could_ be returning multiple values?\r\n\r\nI think I like the latter. I'd just have to make some of the javadocs and docs examples (when I write them) clear about what's going on.\r\n\r\n(I'm also not inclined to change it because a) it's getting late in the API cycle and b) it would actually be painful to implement because of the way Brig works and how I'm trying to keep some sembelence of compatibility. I thought I'd mention it, however, because it also gives some context to the change I'm making in the first place!)\r\n\r\nI'll merge this when registry changes are done or if Zidane is willing to add this into his changes.",
    "head_branch": "api8/one-game-profile",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add MANY_GAME_PROFILES parameter, repurpose GAME_PROFILE to only return one (#2240)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e69bd9087c4d6d37a3a3",
    "number": 2239,
    "body": "[Common pr](https://github.com/SpongePowered/SpongeCommon/pull/3171)",
    "head_branch": "update/licenser/0.5.0",
    "is_a_fork": true,
    "comments": [
      "https://github.com/SpongePowered/SpongeAPI/blob/api-8/settings.gradle.kts#L17",
      "Aha. Thanks, was only testing in a SC environment so that explains it."
    ],
    "commit_messages": [
      "Merge update to licenser. Merges #2239\n\nUpdate to licenser 0.5"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e69cd9087c4d6d37a3a4",
    "number": 2238,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/3170)",
    "head_branch": "api8/advancements",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Advancements"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e69dd9087c4d6d37a3a5",
    "number": 2237,
    "body": "xml copied from https://github.com/checkstyle/checkstyle/blob/checkstyle-8.36.1/src/main/resources/google_checks.xml\r\n\r\nUpdated to reflect https://docs.spongepowered.org/stable/en/contributing/implementation/codestyle.html\r\nSome rules are also suppressed to reflect sponge coding style.\r\n\r\n\r\n\r\n",
    "head_branch": "update/checkstyle",
    "is_a_fork": true,
    "comments": [
      "@ImMorpheus give an idea of what steps to set up IntelliJ + Gradle with the new configs. I updated the PR against api-8 for you so you don't have to deal with that shenanigans.",
      "File -> Settings -> Tools -> Checkstyle\r\n\r\nAdd a new `Configuration File`\r\n\r\n![2020-12-01-211147_502x403_scrot](https://user-images.githubusercontent.com/24737505/100792501-035b2b80-341b-11eb-84e8-bd70acd68682.png)\r\n\r\nIt will ask you about the properties defined in the config:\r\nset the suppressions.xml\r\n\r\n![2020-12-01-211223_505x412_scrot](https://user-images.githubusercontent.com/24737505/100792504-03f3c200-341b-11eb-88d1-40ec3e7e1808.png)\r\n\r\nOpen a SpongeAPI class\r\n\r\nGo in the CheckStyle tab, make sure you are using the `Sponge` rules and run `check module`\r\n\r\n![2020-12-01-212207_520x210_scrot](https://user-images.githubusercontent.com/24737505/100792758-6cdb3a00-341b-11eb-9106-0f263f1f0993.png)\r\n\r\nNote: the suppressions rules may not be updated "
    ],
    "commit_messages": [
      "Update checkstyle and fix style issues (#2237)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e69ed9087c4d6d37a3a6",
    "number": 2236,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/3168)\r\n\r\nRecipeRegistrations are saved as a datapack under:\r\n`<serverlocation>/world/datapacks/plugin-recipes/data/<pluginid>/recipes/<name>.json`\r\n\r\nWhen possible the recipes use vanilla syntax but sponge allows for more complex recipes too.\r\nVanilla Recipe Example:\r\n\r\n```json\r\n{\r\n    \"type\": \"minecraft:crafting_shaped\",\r\n    \"pattern\": [\r\n        \"AAA\",\r\n        \"ADA\",\r\n        \"AAA\"\r\n    ],\r\n    \"key\": {\r\n        \"A\": {\r\n            \"item\": \"minecraft:polished_diorite\"\r\n        },\r\n        \"D\": {\r\n            \"item\": \"minecraft:white_bed\"\r\n        }\r\n    },\r\n    \"result\": {\r\n        \"item\": \"minecraft:bedrock\"\r\n    }\r\n}\r\n```\r\nSponge Recipe Example:\r\n\r\n```json\r\n{\r\n    \"type\": \"sponge:crafting_shaped\",\r\n    \"pattern\": [\r\n        \"ggg\",\r\n        \"gbg\",\r\n        \"ggg\"\r\n    ],\r\n    \"key\": {\r\n        \"b\": {\r\n            \"item\": \"minecraft:red_bed\"\r\n        },\r\n        \"g\": {\r\n            \"item\": \"minecraft:polished_granite\"\r\n        }\r\n    },\r\n    \"result\": {\r\n        \"item\": \"minecraft:bedrock\"\r\n    },\r\n    \"sponge:result\": {\r\n        \"ContentVersion\": 1,\r\n        \"ItemType\": \"minecraft:bedrock\",\r\n        \"Count\": 1,\r\n        \"UnsafeDamage\": 0,\r\n        \"UnsafeData\": {\r\n            \"display\": {\r\n                \"Name\": \"{\\\"color\\\":\\\"red\\\",\\\"text\\\":\\\"Bedrock\\\"}\"\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n",
    "head_branch": "api8/recipe",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "update Recipe API for impl"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e69fd9087c4d6d37a3a7",
    "number": 2235,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/3165)\r\n\r\nOriginally, I'd written Commands in mind with the idea that developers would only need to provide all the completions that their command would want to supply, and that we would do the filtering. However, as I've been updating my own plugin, as well as thinking about the `User` parameter (I don't want to get every user to tab complete an nearly complete name, for example), I've realised this was not a good way to think about it.\r\n\r\nThis PR adds a `String` parameter to `ValueCompleter#complete` to give developers control on how they filter, meaning that they can potentially reduce the load on calculating completions. ~~I've also added `ValueCompleter.All` for the previous behaviour, but I'm open to dropping that idea.~~ - opted to drop this idea.",
    "head_branch": "api8/completion",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6a0d9087c4d6d37a3a8",
    "number": 2234,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/3164) | [Original Issue](https://github.com/SpongePowered/SpongeAPI/issues/2233)\r\n\r\nSee the original issue.",
    "head_branch": "api7/savechunkworlduuid",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add getWorldUUID to SaveChunkEvent. Fixes #2233 (#2234)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6a1d9087c4d6d37a3a9",
    "number": 2232,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/3161)\r\nI found using the full builder a bit verbose to make simple flags -- this should be a touch shorter.",
    "head_branch": "api8/command-flags",
    "is_a_fork": true,
    "comments": [
      "ab52841cf"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6a2d9087c4d6d37a3aa",
    "number": 2231,
    "body": "",
    "head_branch": "patch/data_pass_2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Another Round of Data (API Edition) (#2231)\n\n* Update FireworkShapes\r\n\r\nSigned-off-by: Steven Downer <grinch@outlook.com>\r\n\r\n* Add SpellTypes.NONE\r\n\r\nSigned-off-by: Steven Downer <grinch@outlook.com>\r\n\r\n* Add missing Instrument Types (and fix naming)\r\n\r\nSigned-off-by: Steven Downer <grinch@outlook.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6a3d9087c4d6d37a3ab",
    "number": 2229,
    "body": "@kashike",
    "head_branch": "api8/adv-update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "adventure: Update for api changes (#2229)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6a4d9087c4d6d37a3ac",
    "number": 2228,
    "body": "the last holdout on the classpath it seems",
    "head_branch": "api8/depexculsion",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "build: fix guice exclusion for configurate (#2228)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6a5d9087c4d6d37a3ad",
    "number": 2227,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/3155) | [Original Issue]( https://github.com/SpongePowered/SpongeAPI/issues/2217)\r\n\r\nSee https://github.com/SpongePowered/SpongeAPI/issues/2217 - basically adds a way to get the `Command.Parameterized` being executed from the `CommandContext`.",
    "head_branch": "api8/command-on-context",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add ability to get Command.Parameterized from CommandContext (#2217)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6a6d9087c4d6d37a3ae",
    "number": 2226,
    "body": "Required for SpongePowered/SpongeCommon#3154",
    "head_branch": "patch/data_pass",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update Key JavaDocs + Rename SlabPortions.FULL -> DOUBLE (#2226)\n\n* Update Keys.IS_WET javadocs\r\n\r\nSigned-off-by: Steven Downer <grinch@outlook.com>\r\n\r\n* Update Keys.IS_PRIMED javadocs\r\n\r\nSigned-off-by: Steven Downer <grinch@outlook.com>\r\n\r\n* SlabPortion FULL -> DOUBLE\r\n\r\nSigned-off-by: Steven Downer <grinch@outlook.com>\r\n\r\n* Add BoatType\r\n\r\nSigned-off-by: Steven Downer <grinch@outlook.com>\r\n\r\n* Implement Keys.TRANSIENT for Entity\r\n\r\nSigned-off-by: Steven Downer <grinch@outlook.com>\r\n\r\n* Update Weather\r\n\r\nSigned-off-by: Steven Downer <grinch@outlook.com>\r\n\r\n* Add EntityType#isSummonable|isFlammable...\r\n\r\n...|canSpawnFarAwayFromPlayer\r\n\r\nSigned-off-by: Steven Downer <grinch@outlook.com>\r\n\r\n* Move fall distance from Living to Entity\r\n\r\nSigned-off-by: Steven Downer <grinch@outlook.com>\r\n\r\n* Add Keys.FIRE_DAMAGE_DELAY to Entity\r\n\r\nSigned-off-by: Steven Downer <grinch@outlook.com>\r\n\r\n* Fix BoatTypes javadoc\r\n\r\nSigned-off-by: Steven Downer <grinch@outlook.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6a7d9087c4d6d37a3af",
    "number": 2225,
    "body": "**API** | [Common](https://github.com/SpongePowered/SpongeCommon/pull/3153)\r\n\r\nThis PR refactors the `GameProfile`, `GameProfileManager` and `GameProfileCache`. \r\n\r\n- It's no longer possible to add entries to the `GameProfileCache`, only remove them to invalidate.\r\n- `GameProfileCache` is now just a cache, it was previously also a lookup service.\r\n- `GameProfileCache` is no longer replaceable.\r\n- `GameProfile` is now immutable, but has transformation methods.\r\n- \"filled\" profiles are now just \"profile\", and non filled ones are \"basic profile\", e.g. `getProfile` and `getBasicProfile`.\r\n- \"filled\" was previously a bit confusing, because `isFilled` meant that the profile has a name, although filling a profile through `GameProfileManager` also added properties. This is now renamed to `hasName`.",
    "head_branch": "api8/game-profile-manager",
    "is_a_fork": false,
    "comments": [
      "Manually merged, thanks!"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6a8d9087c4d6d37a3b0",
    "number": 2223,
    "body": "Updated to provide consistency and use entity textures as guidance for variant naming.\r\n\r\nSigned-off-by: Steven Downer <grinch@outlook.com>",
    "head_branch": "patch/data-provider-pass",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update ParrotType IDs (#2223)\n\nUpdated to provide consistency and use entity textures as guidance\r\nfor variant naming.\r\n\r\nSigned-off-by: Steven Downer <grinch@outlook.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6a9d9087c4d6d37a3b1",
    "number": 2222,
    "body": "SpongeAPI | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/3149)\r\n\r\nAPI's `ProjectileLauncher` was completely useless, even as a marker because `Living` extends `EntityProjectileSource`.",
    "head_branch": "api8/projectiles",
    "is_a_fork": true,
    "comments": [
      "manually merged"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6aad9087c4d6d37a3b2",
    "number": 2221,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/3148)\r\n\r\nAdds a method that permission plugins (typically) will want to call when a player's permission is updated in order to send an update client completion tree.",
    "head_branch": "api8/force-update-tree",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add method to send updated command tree to a player"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6abd9087c4d6d37a3b3",
    "number": 2220,
    "body": "SpongeAPI | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/3144)\r\n\r\nAdds an API method to access the game's data version, when available.",
    "head_branch": "api8/data-version-accessor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add an API method to access the Minecraft DataVersion (#2220)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6acd9087c4d6d37a3b4",
    "number": 2219,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/3141)\r\n\r\nSchematics need fixing as `BlockState`s are no longer `CatalogType`s.",
    "head_branch": "api8/state_serialization",
    "is_a_fork": false,
    "comments": [
      "I think we're mostly there with this. I've folded the `BlockStateMatcher` into the `StateMatcher` and replaced the block state serialiser with the in built block state serialiser/deserialiser (not the DFU one). Fluid state is also serialisable and matching is available. Please take a look at the common impl in particular to see what I've done to make sure we're on the right track.\r\n\r\nThe one big thing left is the fact that the matchers are data serialisable. Why? I don't know how we want to serialise them but I'm not sure why they need to be in the first place - if we don't need them I can remove it, if we do, we need to work out how the container serialisation will work.",
      "> The one big thing left is the fact that the matchers are data serialisable. Why? I don't know how we want to serialise them but I'm not sure why they need to be in the first place - if we don't need them I can remove it, if we do, we need to work out how the container serialisation will work\r\n\r\nWe're not doing this."
    ],
    "commit_messages": [
      "Update StateMatcher to support both BlockState and FluidState"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6aed9087c4d6d37a3b5",
    "number": 2215,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/3138)",
    "head_branch": "add/audience-withpermission",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Audiences#withPermission (#2215)\n\n* Add Audiences#withPermission\r\n\r\n* Add final and requireNonNull"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6afd9087c4d6d37a3b6",
    "number": 2213,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/3134)",
    "head_branch": "api8/particle",
    "is_a_fork": true,
    "comments": [
      "manually merged so we have at least most particles working"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6b0d9087c4d6d37a3b7",
    "number": 2212,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/3132)\r\n\r\nClose https://github.com/SpongePowered/SpongeAPI/issues/1575",
    "head_branch": "add/sleep-timer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Keys#SLEEP_TIMER (#2212)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6b1d9087c4d6d37a3b8",
    "number": 2211,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/3131) \r\n\r\nFix https://github.com/SpongePowered/SpongeAPI/issues/1858",
    "head_branch": "fix/game-profile-manager",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Change GameProfileManager method signature to return a map (#2211)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6b2d9087c4d6d37a3b9",
    "number": 2210,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/3124)\r\n\r\nWhile other services have their classes in the same package (contextualservice, economyservice, etc.), banservice was the only one having the ban classes in the util package (what?).\r\n\r\n",
    "head_branch": "fix/ban-package",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Move ban classes to ban package (#2210)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6b3d9087c4d6d37a3ba",
    "number": 2209,
    "body": "`EconomyService#deleteAccount` was default implemented back in api 7 to avoid a breaking change. \r\nThis PR removes the default implementation.\r\nInput wanted on whether `AccountDeletionResultTypes#UNSUPPORTED` is worth keeping.",
    "head_branch": "remove/default-deleteaccount",
    "is_a_fork": true,
    "comments": [
      "> Input wanted on whether AccountDeletionResultTypes#UNSUPPORTED is worth keeping.\r\n\r\nDo we expect econ services to not be able to delete their own data, or do we want to infer that they must provide that ability? I'd lean towards the latter, so it should disappear in that case.",
      "Done"
    ],
    "commit_messages": [
      "Remove EconomyService#deleteAccount default implementation (#2209)\n\n* Remove EconomyService#deleteAccount default implementation\r\n\r\n* Remove AccountDeletionResultTypes#UNSUPPORTED"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6b4d9087c4d6d37a3bb",
    "number": 2208,
    "body": "Use the same wrapper used in common (https://github.com/SpongePowered/SpongeCommon/blob/f999ecc4a4e6269602cfb78108b28a168f54773a/gradle/wrapper/gradle-wrapper.properties#L3), this should avoid gradle downloading the wrapper twice.",
    "head_branch": "gradle/all",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use gradle wrapper all (#2208)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6b5d9087c4d6d37a3bc",
    "number": 2207,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/3118) \r\n\r\n### Asm:\r\n\r\nAsm was used for `dummy object generation` but `DummyObjectProvider`s were nuked by https://github.com/SpongePowered/SpongeAPI/pull/2190\r\n\r\n### jcache:\r\n\r\nUnused. \r\n\r\n### commons-lang:\r\n\r\n`Validate` was used instead of `Objects#requireNonNull`.\r\n\r\n\r\nNote: common-langs was originally added with GSON because it was deemed useful to plugin devs. Times have changed: J8 has much of those methods and shadow jar can be minimized so I'm removing the dep.",
    "head_branch": "fix/dep",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove unused dependencies (#2207)\n\n* Remove caffeine-jcache\r\n\r\n* Remove asm\r\n\r\n* Remove commons-lang\r\n\r\n* Remove comment\r\n\r\n* Remove doc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6b6d9087c4d6d37a3bd",
    "number": 2206,
    "body": "Part 1 of noideahowmanyprsthisisgoingtotake \r\n\r\ntrying to solve the duplicate dependencies issue.\r\n\r\nSpongeAPI uses errorprone 2.1.3:\r\n\r\nhttps://github.com/SpongePowered/SpongeAPI/blob/585bb68da3b7536c232cc86a660a548b6aad46b7/build.gradle.kts#L43\r\n\r\nSpongeAPI uses caffeine 2.8.4:\r\n\r\nhttps://github.com/SpongePowered/SpongeAPI/blob/585bb68da3b7536c232cc86a660a548b6aad46b7/build.gradle.kts#L60\r\n\r\ncaffeine 2.8.4 uses errorprone 2.3.4:\r\n\r\nhttps://github.com/ben-manes/caffeine/blob/7239bb0dda2af1e7301e8f66a5df28215b5173bc/gradle/dependencies.gradle#L38\r\n\r\nNote: errorprone is not used AFAIK. I'm bumping them to solve the issue but I've no problem with removing the dep.",
    "head_branch": "update/errorprone",
    "is_a_fork": true,
    "comments": [
      "I'd say we just remove the error-prone dependency instead?",
      "Removed. Thanks."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6b7d9087c4d6d37a3be",
    "number": 2205,
    "body": "🐝 ",
    "head_branch": "api-8-1.15",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add Minecraft 1.15.2 content.\n\nSigned-off-by: Chris Sanders <zidane@spongepowered.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6b8d9087c4d6d37a3bf",
    "number": 2204,
    "body": "Fix https://github.com/SpongePowered/SpongeAPI/issues/1556",
    "head_branch": "add/chorus",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add MovementTypes#CHORUS_FRUIT (#2204)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6b9d9087c4d6d37a3c0",
    "number": 2203,
    "body": "- Rename GeneratorType to GeneratorModifierType (to better fit what it is)\r\n- Remove actual generators from GeneratorType (they'll come back in a future commit)\r\n- Load/UnloadWorldEvents are no longer cancellable\r\n- Various javadoc corrections\r\n\r\nSigned-off-by: Chris Sanders <zidane@spongepowered.org>",
    "head_branch": "api8/custom-world",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Simplify the futures in the WorldManager.\n\nNow the futures will return the values or return exceptions.\n\nSigned-off-by: Chris Sanders <zidane@spongepowered.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6bad9087c4d6d37a3c1",
    "number": 2202,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/3114) | [Original Issue](https://github.com/SpongePowered/SpongeAPI/issues/2178)\r\n\r\nAs it says. We don't use the message channel on the event.\r\n\r\nWe haven't added the ability to cancel the event as `Player#kick` returns a `void`, not a `boolean`, so there is no way to indicate to a plugin that a player wasn't kicked.\r\n\r\nSee #2178 ",
    "head_branch": "api7/kick-event",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Deprecate unused elements of the KickPlayerEvent"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6bbd9087c4d6d37a3c2",
    "number": 2200,
    "body": "",
    "head_branch": "api8/dimension_change",
    "is_a_fork": false,
    "comments": [
      "7bc9064cf5c2e23cac42bcfcb8d98c1f0841b6e7"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6bcd9087c4d6d37a3c3",
    "number": 2199,
    "body": "It's in the javadocs as to why.",
    "head_branch": "api8/common-parameters",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Define some common parameters"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6bdd9087c4d6d37a3c4",
    "number": 2198,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/3110)\r\n\r\nThis should fix @clienthax's issue where the text serialization format changed from the last RB.",
    "head_branch": "fix/7/textserial",
    "is_a_fork": true,
    "comments": [
      "I can't understand why this PR is needed,  @Zidane said this wasn't broken......  told me repeatedly it wasn't broken and that it was my server configs......",
      "I trusted him... and he failed me."
    ],
    "commit_messages": [
      "text: Support reading DataContainer text format from Configurate (#2198)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6bed9087c4d6d37a3c5",
    "number": 2197,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/3107)\r\n\r\nThis should be the last major change for the Command subsystem - everything is now hooked up and working.\r\n\r\nThese changes are not of use to those using the command builder, this is for Raw command users and those using the command registrars to register their own commands but want to take advantage of Brig's command completion.",
    "head_branch": "api8/clientcompletion",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add support for non-Sponge/Brig client completions.\n\nThis should be the last major change for the Command subsystem - everything is now hooked up and working."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6bfd9087c4d6d37a3c6",
    "number": 2194,
    "body": "This isn't for creating new selector types (i.e. `@a` alternatives), this is simply for if you want a selector outside of commands. I chose to ditch the `ArgumentTypes` system because really that seemed to be a reimplementation of selectors and I'd prefer to sit on top of what Vanilla has.\r\n\r\nI did actually start trying to redo the ArgumentTypes system, but it was a rabbit hole. I'm open to doing so in the future, but for now, this should cover most (if not all) of the current options.\r\n\r\nAlso added `Range` utility. Might be useful in advancements because of the MinMaxBounds in the advancement package.",
    "head_branch": "api8/selector",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add ability to programmatically create selectors (#2194)\n\n* Replace current selector system with selector builder\r\n\r\n* Add Range utility class\r\n\r\n* Update for comments\r\n\r\n* Add custom filter method\r\n\r\n* Rename"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6c0d9087c4d6d37a3c7",
    "number": 2193,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/3188)\r\n\r\nThis updates the API for changes in Configurate, and to move away from the Guava `TypeToken`.\r\n\r\n## API spec changes\r\n\r\nThe biggest non-obvious changes are to injection -- since these are defined in the implementation they aren't captured super well. I've added in a few new injectable types:\r\n\r\n- `ConfigurationReference<CommentedConfigurationNode>`: both shared and private roots, provides an auto-reloading configuration\r\n- `TypeSerializerCollection`: Exposes the Sponge-defined serializers\r\n\r\nand set up some customized default options for configurations:\r\n\r\n- implicit initialization is enabled for object-mapped values\r\n- defaults are automatically copied",
    "head_branch": "api8/configurate-4",
    "is_a_fork": true,
    "comments": [
      "Alright, I've made some more progress on this PR, and most of the groundwork is in.\r\n\r\nThe big change (apart from Configurate 4 itself) is moving away from Guava's `TypeToken`. While performing that migration, I've also been moving the API to align with the pattern I've begun using in Configurate, which avoids a lot of unnecessary TypeToken usage.\r\n\r\nFor areas where a type is expected from a user, two variants are provided: One that accepts a `TypeToken<T>` and one that accepts a `Class<T>`. For areas where a type is provided to a user, a plain `Type` is provided. In most cases, the actual value of the `T` parameter in a `TypeToken` is not actually known at runtime, and so it provides a false sense of type-safety. This leaves the `TypeToken` as a tool for type *capture* more type *storage*. For simple cases, this means that users don't have to provide a TypeToken when one is not necessary to fully express their type. For example, most of the test plugins in common barely need TypeToken. Some areas affected quite a bit by this change are the key-type objects in API - `Key`, `Parameter.Key`, and `EventContextKey`, and the API that works with them.\r\n\r\nWhere this strategy gets a bit tricky is for methods that return `TypeToken` in interfaces designed to be implemented by users. I think most of those will have to stay, since we can't have two options for return types on the method, and in those cases the type parameter is needed to prevent errors -- for example in `CommandRegistrar`\r\n\r\nAn area that will need a bit more thought is the catalog registry. While a lot of its API takes `TypeToken`, internally it still uses `Class`, which results in a bit of a nasty implementation. I don't know if it makes sense to move the internal storage over to `Type` and make the system generic-aware, or to make sure all the access and registration methods are paired.\r\n\r\nWith these changes I hope to constrain the spread of TypeTokens to only types that need to capture generic parameters, which will help reduce the verbosity of the API. The majority of the constants in `TypeTokens` should become irrelevant."
    ],
    "commit_messages": [
      "Merge Configurate 4 upgrade. Merges #2193.\n\nSigned-off-by: Gabriel Harris-Rouquette <gabizou@me.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6c1d9087c4d6d37a3c8",
    "number": 2192,
    "body": "The majority of plugins do not put their configuration in the shared root configuration directory. This PR makes this normal case less verbose but leaves the option to put a configuration in the root directory if needed.\r\n\r\nThere have been talks in the 1.14 updates channel of potentially removing the option to set sharedRoot at all. However, I believe that setting a default false value is a better alternative. It provides both the convenience of not having to specify it and keeps the option available for those who want it.",
    "head_branch": "feature/shared-root-default-false",
    "is_a_fork": true,
    "comments": [
      "I'm not accepting this. Such a change is something that needs more discussion and, quite honestly, I think that it's important that there is a larger discussion around this when we come to it. You've taken what's been said in 1dot14updates and jumped the gun.\r\n\r\n> It provides both the convenience of not having to specify it and keeps the option available for those who want it.\r\n\r\nThis is a really weak argument. `sharedRoot = true` or `sharedRoot = false` is not a burden on anybody and it makes the annotation's purpose more discoverable. Most plugin devs of established plugins aren't going to go change this either.\r\n\r\n> There have been talks in the 1.14 updates channel of potentially removing the option to set sharedRoot at all.\r\n\r\nYes, talk, and mostly fleeting at that. Right now we're focussed on getting the core product working and deciding these things are going to be almost plumb last as we wire up the final bits. \r\n\r\nI get that this isn't necessarily a breaking change as it stands, but what if we then decide that actually, we want all configs to be in the root? Then we've backed the wrong horse and we're stuck with it. I'd rather not do that.\r\n\r\n`@DefaultConfig(sharedRoot = false)` is not onerous and is clearer to the developer that there are options involved. We may well revisit it in 8 but as for now, it stays, and it remains mandatory."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6c2d9087c4d6d37a3c9",
    "number": 2191,
    "body": "Basic premise is that `CommandContext` and `CommandContext.Builder` no longer implement `CommandCause`.\r\n\r\nI basically shouldn't have done this anyway, but the idea was that a `CommandContext` could functionally act as a `CommandCause` as a convenience to them. However, in implementation, there is an assumption that a `CommandSource` is a `CommandCause`, which is true. The opposite isn't necessarily true, however, and I've bumped up places where I've made this bad assupmption.\r\n\r\nWhat I have opted to do is stop `CommandContext` and its builder from implementing `CommandCause`, but to continue helping plugin devs, it now implements the new `SubjectProxy` interface and continues to have the `sendMessage(Component)` method. So, if you need a `CommandCause` you have to explicity get it, but if you wanted to do a permission check and/or send a message (two very common things), this can be done via the context.\r\n\r\nI do want to merge this soon because I'm working on Selectors and that does rely on this, but I'm using the PR as a sanity check for style and such.",
    "head_branch": "api8/split-commandcause",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Create a SubjectProxy and separate CommandCause from CommandContext\n\nThis actually doesn't change much, but it was actually a problem in our implementation. It makes sense to keep it separate, and all the standard tasks can still be done in the same way (the context is now a SubjectProxy and you can easily send a message from it)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6c3d9087c4d6d37a3ca",
    "number": 2190,
    "body": "It was still used for `AccountDeletionType`s",
    "head_branch": "nuke/dummy-obj-provider",
    "is_a_fork": true,
    "comments": [
      "`EconomyService` will need updating to account for the suppliers.",
      "Done"
    ],
    "commit_messages": [
      "Nuke DummyObjectProvider (#2190)\n\n* Nuke DummyObjectProvider\r\n\r\n* Update EconomyService"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6c4d9087c4d6d37a3cb",
    "number": 2189,
    "body": "As discussed on discord, read-only orders can't be enforced. This PR removes the concept from the jd.\r\n\r\nI think there's value in `cancellation allowed` (prism-like plugins) in the sense of an event guaranteed not to be cancelled (`POST` is the last order, wheter the event has been cancelled or not. That's not gonna change after that) so I'm leaving the tab in the jd for discussion.\r\n\r\nClose https://github.com/SpongePowered/SpongeCommon/issues/1213 (if we decide to remove both)\r\n\r\n",
    "head_branch": "fix/order",
    "is_a_fork": true,
    "comments": [
      "> I think there's value in cancellation allowed (prism-like plugins) in the sense of an event guaranteed not to be cancelled \r\n\r\nI was having a (very) brief discussion with @gabizou about that, many events have a `Post` event that is effectively an unmodifiable event. In the case of the phase tracker and block capturing, it would be better to use such events because these occur when everything is said and done, rather than being in a position to allow the action associated with the event to go ahead. So I'd rather ditch the idea of \"unmodifiable\" cancellation altogether, instead, where it's needed, create `Post` events that plugins can listen to and know they are read only, uncancellable views of what's happened.\r\n\r\nPreventing cancellation won't stop other things being modifed in an event, meaning that the event would still be useless to logging plugins - another reason for a proper read only event.\r\n\r\nWe have some post events, but there will be some that are missing of course - if there are any that should be there that aren't, I think that's the discussion we really need to have with interested members of the community.",
      "> Preventing cancellation won't stop other things being modifed in an event.\r\n\r\nMy thought was that this was an edge case, however upon close inspection that's not the case at all. Basically every subclass of `AffectEntityEvent`, `AffectItemStackEvent` (inventory events and the likes), etc. can be modified (filter transaction) but not cancelled. \r\n\r\nThat being said, I've removed the \"cancellation allowed\" part. There's not much value to it as it is.",
      "The thing is, there's still side effectual modifications that are effectively \"permitted\". The nature of how some events and listener-based side effects happen though is that the order of operations will be that an event listener (like prism) will get an event from a listener performing side effects as a result of the event that listener received an event, and *then* the original event, so like this:\r\n```\r\nPlace Wool Block\r\n |---PluginA Listener\r\n |       |---Place torches around wool block\r\n |       |        |---PluginA Listener ignores (because of causes)\r\n |       |        |---PluginB's Listener gets called\r\n |       |________|\r\n |---PluginB's Listener\r\nEND\r\n```\r\nSo while we've removed order, we still have a side-effectual understanding that even if the original Place Wool Block was cancelled, the plugin's side effects may not have been cancelled, and therefor still played out., and PluginB will recognize PluginA's changes before the original intention of the Place Wool Block.",
      "> So while we've removed order\r\n\r\nWe haven't at all. This is just about removing javadocs that say something that have never been enforced, and the discussion was about the enforcement of cancellation status. \r\n\r\nMy point was that monitoring plugins want to know what's absolutely happened, not what's about to happen, and a `Post` event is the way to go. As we control when the post events fire, we can just have one that groups together all the changes made, all the way down the tree for the root cause of the changes after all the side effects play out. Everything you've said there enforces the need for the `Post` event to remain!",
      "So would it make sense then to change up the `ChangeBlockEvent` hierarchy to where we have `ChangeBlockEvent { Place, Destroy, Modify, Decay, All } Pre, Post`? to where we can effectively play a `Pre` for the first proposed transaction (if it's a child or the start of a chain) and then the `Post` being for the entire chain with all the children and listener side-effects? I can imagine having to capture listener side-effects being the trouble since that'd effectively mean selective \"recording\"/\"lifting\" of transactions from a child `PhaseContext`.."
    ],
    "commit_messages": [
      "Remove the concept of read-only orders (#2189)\n\n* Remove the concept of read-only orders\r\n\r\n* Remove cancellable"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6c5d9087c4d6d37a3cc",
    "number": 2188,
    "body": "",
    "head_branch": "api8/chunk-data-stream",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6c6d9087c4d6d37a3cd",
    "number": 2185,
    "body": "Fix https://github.com/SpongePowered/SpongeAPI/issues/1526\r\n\r\nSee https://github.com/SpongePowered/SpongeAPI/pull/1977\r\n\r\nI've updated the PR (most of those events are gone).",
    "head_branch": "fix/event-gen",
    "is_a_fork": true,
    "comments": [
      "@ImMorpheus Put these on the lifecycle file exclusions please.",
      "How is `@NoFactoryMethod` different from an `exclude` directive in the Gradle file? If there is no difference, I'd rather we just add things to the exclude directive, especially as we want to move the factory generation to Common, reducing the exposure of the generator to the API itself.",
      "@dualspiral That is a good point, didn't even think about that.",
      "> How is @NoFactoryMethod different from an exclude directive in the Gradle file? If there is no difference, I'd rather we just add things to the exclude directive, especially as we want to move the factory generation to Common, reducing the exposure of the generator to the API itself.\r\n\r\nThe exclude directive targets a java file. The annotation targets a type.\r\nThis means that \r\nhttps://github.com/SpongePowered/SpongeAPI/blob/dc2186f59d37dd277ef8d02b0aef72f3fde2f61a/src/main/java/org/spongepowered/api/event/action/CollideEvent.java#L37-L47\r\ncan't be implemented using the exclude directive AFAIK.\r\n\r\nI'll move the other ones since this doesn't apply to them."
    ],
    "commit_messages": [
      "Fix event-gen factory (#2185)\n\n* Fix event-gen factory\r\n\r\n* Use the exclude directive where possible"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6c7d9087c4d6d37a3ce",
    "number": 2184,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/3083)\r\n\r\nAlso CommandRegistrars will now need to either keep hold of mappings, or the primary alias, as this enables us to pass the invoked command down rather than the namespaced alias all the time.",
    "head_branch": "api8/flags",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add command flags & ArgumentReader#parseResourceKey\n\nAlso includes additional Javadocs for users"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6c8d9087c4d6d37a3cf",
    "number": 2183,
    "body": "",
    "head_branch": "channel-exception-handler",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add exception handlers for the network channel. (#2183)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6c9d9087c4d6d37a3d0",
    "number": 2182,
    "body": "Reverts SpongePowered/SpongeAPI#2123\r\n\r\nWhat we hadn't realised is that some of the new features of Guice 4.2.x rely on a newer version of Guava (23) that Mojang ships (21). While we didn't encounter this issue in testing because we don't/won't use any of these features, if we're on this version, a plugin might. It is therefore unsafe to remain on this version.\r\n\r\nWe're kind of tied to the version of Guava that Mojang uses on this one.\r\n\r\nAs the change is only in API snapshots, we can do this.",
    "head_branch": "revert-2123-feature/guice-4.2.3",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Revert \"Bump guice version to 4.2.3 (#2123)\"\n\nThis reverts commit 712c42d9e5dfc53fed6da9767b930978a1c119e4."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6cad9087c4d6d37a3d1",
    "number": 2181,
    "body": "Turns out that what I had meant that you'd lose all the type safety that I sought to bring. The generics are functionally equivalent to what we had now.\r\n\r\nAlso, added getKnownAliases to the command manager.",
    "head_branch": "api8/command-generics",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Redo some of the Parameter.Key generics\n\nTurns out that what I had meant that you'd lose all the type safety that I sought to bring. The generics are functionally equivalent to what we had now.\n\nAlso, added getKnownAliases to the command manager."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6cbd9087c4d6d37a3d2",
    "number": 2180,
    "body": "",
    "head_branch": "feature/adventure",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Implement Adventure (#2180)\n\nReviewed-by: Daniel Naylor <git@drnaylor.co.uk>\r\nReviewed-by: Chris Sanders <zidane@spongepowered.org>\r\nReviewed-by: zml <zml@aoeu.xyz>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6ccd9087c4d6d37a3d3",
    "number": 2179,
    "body": "Fix https://github.com/SpongePowered/SpongeAPI/issues/2178",
    "head_branch": "fix/kick-event",
    "is_a_fork": true,
    "comments": [
      "@ImMorpheus \r\n\r\nThis can target 7.",
      "The event is not implemented on stable-7.",
      "With regards to 7: https://github.com/SpongePowered/SpongeAPI/issues/2178#issuecomment-667669811 - this needs to be thought about when it's done.\r\n\r\nWith regards to 8: remove the `MessageChannelEvent` implementation (or whatever the adventure equivalent is/will be). I do not see the use of having an audience attached to the method.",
      "Done\r\n\r\nEDIT: while it's true channels are not used we still use the message of MessageEvent.",
      "> while it's true channels are not used we still use the message of MessageEvent.\r\n\r\nAdd it on manually, don't keep an interface on if you don't use all of the elements of it.",
      "> Add it on manually, don't keep an interface on if you don't use all of the elements of it.\r\n\r\nThey are two different events.\r\n\r\n`MessageChannelEvent` != `MessageEvent`\r\n\r\n`KickPlayerEvent` makes full use of the latter",
      "Also, while we're at it, make `Player#kick` return a boolean, because if a kick is cancelled, a comsumer of the event should be notified of it. This also needs an implementation update, so that needs doing in Common too.",
      "> KickPlayerEvent makes full use of the latter\r\n\r\n[No it doesn't](https://github.com/SpongePowered/SpongeAPI/blob/api-8/src/main/java/org/spongepowered/api/event/message/MessageEvent.java#L42-L56) - these are not used.",
      "> [No it doesn't](https://github.com/SpongePowered/SpongeAPI/blob/api-8/src/main/java/org/spongepowered/api/event/message/MessageEvent.java#L42-L56) - these are not used.\r\n\r\nTrue, `KickPlayerEvent#isMessageCancelled` is not used but shouldn't it be ?\r\n\r\n`ServerSideConnectionEvent.Auth` and `ServerSideConnectionEvent.Login` are the same (both are `MessageEvent` whose message refers to the \"disconnect message\"). \r\nIf the message is cancelled then the default `disconnect.disconnected` message is used. \r\nWhy shouldn't the same apply to `KickPlayerEvent` ? ",
      "> If the message is cancelled then the default disconnect.disconnected message is used.\r\n\r\nI'd rather that was ditched entirely - cancelling a message doesn't make sense in that scenario (all it's doing is basically using the original message instead). The message event should just be original/get/set if you ask me - then it's totally appropriate to put here.",
      "> I'd rather that was ditched entirely - cancelling a message doesn't make sense in that scenario (all it's doing is basically using the original message instead)\r\n\r\nDone\r\n\r\n> The message event should just be original/get/set if you ask me - then it's totally appropriate to put here.\r\n\r\nDone and added a separate interface to mark the event as \"message cancellable\" (just like Event and Cancellable)."
    ],
    "commit_messages": [
      "Make KickPlayerEvent cancellable (#2179)\n\n* Make KickPlayerEvent cancellable\r\n\r\n* KickPlayerEvent is no longer a MessageChannelEvent\r\n\r\n* KickPlayerEvent is still a MessageEvent\r\n\r\n* ServerPlayer#kick returns a boolean now\r\n\r\n* Add MessageCancellable interface\r\n\r\n* Join is MessageCancellable"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6cdd9087c4d6d37a3d4",
    "number": 2177,
    "body": "Common PR: https://github.com/SpongePowered/SpongeCommon/pull/3070\r\n\r\n@Zidane Would this work for you?",
    "head_branch": "api8/redo-command-register-event",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "RegisterCommandEvent now acts on commands, not registrars (specifically)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6ced9087c4d6d37a3d5",
    "number": 2176,
    "body": "Haven't checked everything but this is a start. I'm opening a wip PR because it's not finished but what's pushed can be reviewed.\r\n\r\n### Now for the fun part\r\n\r\nThere are:\r\nmissing commits from api-8 history which can be cherry-picked (this PR)\r\nmissing commits from api-8 history which cannot be cherry-picked (the old api has been nuked, command api is a good example of this). This means bugs fixed by those commits needs to be retested on the new API (out of scope for this PR)\r\nmissing commits from api-8 history which cannot be cherry-picked because their classes are missing (read this as \"the world API is gone, reduced to atoms\") \r\n\r\n### Be more specific!\r\n\r\nhttps://github.com/SpongePowered/SpongeAPI/commit/c154fd4b06cddc1dd0f3557f46349eddf681fee1\r\nhttps://github.com/SpongePowered/SpongeAPI/commit/bb14b831b537a7b37539eaf6fd3fa72c5090f9c1\r\nhttps://github.com/SpongePowered/SpongeAPI/commit/bd284c2285db20792bddc554615b9fefcf0e8986\r\nhttps://github.com/SpongePowered/SpongeAPI/commit/4e17b0a7b2ae122d98494e13cc058e5f09f0ec03\r\nhttps://github.com/SpongePowered/SpongeAPI/commit/96bb9d1b806a4ac8758d53f2784f4acf5fe66218\r\nhttps://github.com/SpongePowered/SpongeAPI/commit/f12f8e7743844b8761b890ce3e440911e97c6f38\r\n\r\n### But wait, there's more\r\n\r\nhttps://github.com/SpongePowered/SpongeAPI/commit/85a951a7c250110a19ece0276cf218bb1c9a1d05\r\n\r\nThat commit was not completely cherry-picked.\r\n`ChangeLevelEvent` is deprecated on api7, but perfectly fine on api8 (fixed in this PR)\r\n`ChangeEntityExperienceEvent` has all of its int-based methods deprecated in favour of Data-based one on api-7, but no deprecation or data methods on api8. What's more, that event is now screwed because there's no `ExperienceHolderData` in api8 so it cannot be cherry-picked. ",
    "head_branch": "update/7",
    "is_a_fork": true,
    "comments": [
      "Is it possible to get this done soon please? I've just hit a point porting Nucleus where I need something currently not in API 8 (placeholders) so I personally would like it (but it would be good to get this off the plate, regardless!)",
      "Done",
      "@gabizou Does this look good to you?"
    ],
    "commit_messages": [
      "Merge API 7 into API 8"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6cfd9087c4d6d37a3d6",
    "number": 2174,
    "body": "API | [Common](https://github.com/SpongePowered/SpongeCommon/pull/3095)\r\n\r\nUsing an int is an impl detail, damage is represented as doubles.",
    "head_branch": "api8/double-falling-block-damage",
    "is_a_fork": false,
    "comments": [
      "This should apply to `Keys#DAMAGE_ABSORPTION` as well",
      "@Cybermaxke Please update this.",
      "@Zidane Done"
    ],
    "commit_messages": [
      "Use a double for damage related keys. (#2174)\n\nUsing an int is an impl detail, damage is represented as doubles."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6d0d9087c4d6d37a3d7",
    "number": 2173,
    "body": "As title. [See common PR for more details](https://github.com/SpongePowered/SpongeCommon/pull/3067).",
    "head_branch": "api8/userdiscoverer",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update UserManager and GameProfile method to return Streams"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6d1d9087c4d6d37a3d8",
    "number": 2172,
    "body": "Fix https://github.com/SpongePowered/SpongeAPI/issues/970",
    "head_branch": "fix/exp-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6d2d9087c4d6d37a3d9",
    "number": 2171,
    "body": "Also fix the horse and zombie entries using wrong suggested name",
    "head_branch": "attributefix2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Rename fields again to match registry names. (#2171)\n\nAlso fix the horse and zombie entries using wrong suggested name"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6d3d9087c4d6d37a3da",
    "number": 2170,
    "body": "",
    "head_branch": "enginething",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Return generic type E extends Engine in EngineLifcycle event instead of Engine (#2170)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6d4d9087c4d6d37a3db",
    "number": 2169,
    "body": "This PR removes the cause parameter from the methods in the Account interface (just like other methods in the past: World#setblock, etc.).\r\n\r\nThe migration was done at some point (api6 -> api7 I think) but these methods were not updated. \r\nStackFrames can be used to add Objects to the current cause.",
    "head_branch": "fix/account-cause",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove Cause parameters from Account methods (#2169)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6d5d9087c4d6d37a3dc",
    "number": 2168,
    "body": "Internally the implementation needed for these is immense, multiple templates sharing names, hundreds of magic values all over the game. I decided the templating aspect is too much more to maintain. This does not affect the rest of the attribute api in function.",
    "head_branch": "attributenightmare",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Drop modifier templates. And remove attribute that was added in a later version of the game. Match registry names (#2168)\n\n* Drop modifier templates.\r\n\r\nInternally the implementation needed for these is immense, multiple templates sharing names, hundreds of magic values all over the game. I decided the templating aspect is too much more to maintain. This does not affect the rest of the attribute api.\r\n\r\n* Parrot flying speed is from a later version. Not 1.14\r\n\r\n* Change suggested names to correctly match registry entries"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6d6d9087c4d6d37a3dd",
    "number": 2167,
    "body": "Fix https://github.com/SpongePowered/SpongeAPI/issues/1408\r\n\r\nThe related issue explained it very well:\r\n\r\n> All of the sub-events of ExplosionEvent extend Cancellable in some way, shape or form.\r\n> \r\n> It would make sense to declare ExplosionEvent as Cancellable to make it easier to work with if a listener is just listening for the base event.",
    "head_branch": "explosion/cancellable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make generic ExplosionEvent cancellable (#2167)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6d7d9087c4d6d37a3de",
    "number": 2166,
    "body": "Fix https://github.com/SpongePowered/SpongeCommon/issues/2233",
    "head_branch": "stream/user-manager",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add streamAll method to UserManager (#2166)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6d8d9087c4d6d37a3df",
    "number": 2164,
    "body": "This should make it easier for 3rd party AccountHolders (towns, shop, chest shop, etc.) as well as clearly define the Account of a Player.",
    "head_branch": "account-holder",
    "is_a_fork": true,
    "comments": [
      "Expanding a bit on why and how of this PR.\r\n\r\n### Why\r\n\r\n#### a. No standard way to get an Account for API defined classes (for this PR: ServerPlayer)\r\n\r\nPlugins using the Economy API are left guessing how to get a Player account. \r\nThis is the interface we provide:\r\n\r\nhttps://github.com/SpongePowered/SpongeAPI/blob/94d7fb22fcc0b77e5af44b9f9e7dc68534ecc3da/src/main/java/org/spongepowered/api/service/economy/EconomyService.java#L95-L124\r\n\r\nUniqueAccounts (identified by `UUID`s) and VirtualAccount (identified by `string`s) is all we have.\r\nSure, account creation and all that is a job of the Economy plugin providing the EconomyService (eco plugin from now on) but the API should provide a clue on what a Player Account is.\r\n\r\nThere's only one reference to Player accounts here\r\nhttps://github.com/SpongePowered/SpongeAPI/blob/94d7fb22fcc0b77e5af44b9f9e7dc68534ecc3da/src/main/java/org/spongepowered/api/service/economy/account/UniqueAccount.java#L36-L37\r\nsuggesting `UniqueAccount`s are Player accounts identified by their `UUID`s.\r\nThat's just a suggestion though and what is actually happening is plugin devs being creative with their code, resorting to things like:\r\n\r\necoService.getOrCreate(uuid)   // Player#getUniqueID\r\necoService.getOrCreate(name) // Player#getName\r\necoService.getOrCreate(id)       // Player#getIdentifier\r\n\r\nThe first one is an `UUID`, the others are strings. \r\nThe first one is returning a `UniqueAccount`, the others are returning a `VirtualAccount`.\r\n\r\n#### b. Provide 3rd party plugins a way to mark an Object as an AccountHolder (it holds an Account)\r\n\r\n_Note: Account creation is still delegated to the eco plugin._ \r\n\r\nEx. \r\nA is a towny plugin\r\nB wants to use the towny API and wants to get the town bank. \r\n\r\nHe can:\r\n1. call ecoservice#getOrCreate guessing what A is using as the town identifier for the Account. (An update from A is all it takes to screw this up)\r\n2. pray really hard that A has a Town#getBank method.\r\n\r\nThis PR aims to make 2. easier by providing a common means to define `AccountHolder`s and get their `Account`.\r\n\r\n### How\r\n\r\nAn `AccountHolder` interface is added to solve problem b. and a method in `ServerPlayer` is added to solve problem a.\r\n\r\n___\r\n\r\nNow, based on a quick discussion on discord I want to address a few points.\r\n\r\n1. It's not up to the EconomyService to decide how an `AccountHolder` is identified. It's up to the owner of the class. \r\nFor `ServerPlayer` it's us. For a town is the town plugin.\r\nThe eco plugin handles Account creation and manages transaction. That's it.\r\nThis is for a number of reasons, namely:\r\nAn eco plugin can't possibly know every `AccountHolder` implementation out there and have 200 dependencies just to handle specific logic for each `AccountHolder`.\r\n3rd party plugins can only query an `Account` by identifier. They have no way to know how eco plugins decide to handle a specific `AccountHolder`s because that's an implementation detail. Knowing that would defy the point of having a common interface for the `EconomyService` in the API.\r\n\r\n> Take Pieconomy for example. Why would you use that method when, actually, his account is the inventory? \r\n\r\n2. Even with Pieconomy a plugin would query the `EconomyService` (provided by Pieconomy) to get the player account. The problem we should try to solve (problem a.) is how to query the player account.\r\n\r\n> What if an economy plugin just doesn't want to tie accounts to players. \r\n\r\n3. There's no way to do that and this PR doesn't change it. An eco plugin provide an EconomyService which receives either a string identifier or a UUID and return an Account. It doesn't know who owns that Account. It just knows by what it's identified.\r\n\r\n\r\n> Honestly, I'd ditch the interface and just have a getAccount() on ServerPlayer\r\n\r\n4. That's fine by me, it solves problem `a.` which is the main focus of the PR. (assuming we keep the current default implementation)\r\n\r\n### Alternative solution\r\n\r\nAn alternative approach is to replace `UniqueAccount` with `PlayerAccount`.\r\nIt would remove the method from the ServerPlayer interface, leave the AccountHolder as a marker for plugins devs and the EconomyService interface with:\r\n\r\ngetOrCreate(string identifier)        //for 3rd party AccountHolders\r\ngetOrCreate(ServerPlayer player) //for player accounts\r\n\r\nBut what about offline players (User) ? Use a GameProfile instead ? ",
      "I was thinking about this last night and I can see some more value in this - though I think the problem is not solved by simply saying \"slap this interface on, you're good\".\r\n\r\nYou've missed off some parts of the conversation that happened in Discord which I think are pretty key to this. @Zidane said\r\n\r\n> That can't be implemented though\r\n> Without saying \"It must be a UUID\"\r\n> What if my accounts are based on names?\r\n> Me = Econ plugin\r\n\r\nof which I then said:\r\n\r\n> Right\r\n> It would be better to have something like  EconService#getAccounts(AccountHolder)\r\n> because then the economy plugin has full control over what it does for a player, or a town, or whatever\r\n> the control needs to be on the econ service as much as possible.\r\n\r\nThe point that was being made was that we do not know how an economy plugin will store this data and what parts of the identifier it will use. Zidane's point was that they might not choose to store by UUID, or you might store by UUID from a town, or whatever. The econ plugin might very well have a different identifying mechanism.\r\n\r\nThinking back, however, that way of thinking is actually kind of bedded into the way things are set up now. Yep, the object, in general, is identifying itself and the econ plugin should take note of that (but said plugin could then choose to use a different identifier to store the values, of course). So this interface _might_ hold value, but I think the whole economy service needs to be looked at in tandem.\r\n\r\nThis interested me:\r\n\r\n> It's not up to the EconomyService to decide how an AccountHolder is identified. It's up to the owner of the class.\r\n\r\nIf that's the case, why is there no way to identify the `AccountHolder` with just that interface? If it's not a player, the economy plugin may not have any clue as to whether it's a town, or whatever. There needs to be a way to identify that. There may also be a case for identifying whether the account holder is a player, or a town, or a world bank (if someone chose to go mega-economy on their server).\r\n\r\nThe major problem with what you've done is said that the implementation controls the identifer, and the econ plugin doesn't have any information beyond that - and that limits the control of the econ plugin. It actually leads to what is really a deficiency in the econ service itself, which is really the larger problem here. You've correctly noted that the `getAccount(UUID)` method only provides a suggestion that the `UUID` is a player's `UUID` - and that's not good.\r\n\r\nYour alternative solution is better because the control properly goes through to the econ plugin - they have _more_ information that they can work with. I'd just have the `Account` interface. I'd have, for example:\r\n\r\n```\r\nAccount getOrCreate(String identifier); // create arbitary account - this is always going to be important.\r\n\r\nAccount getOrCreate(AccountHolder holder);  // create account for (registered?) account holder.\r\n```\r\n\r\nA `User` would be an `AccountHolder`.\r\n\r\nIf you were to then have a `getAccount()` on the player, I think it should be implemented as `EconomyService#getAccount(this)`. `AccountHolder` would need to provide identifying inforation, alternatively, you could create a catalog type that converts an `AccountHolder` to `UUID` or `String` function that provides a way to perform identification if you wanted to (e.g. User -> getUniqueId().toString()), or register class types with the econ plugin and say \"hey, this is a type of `AccountHolder` we support, and this is how you identify it\". \r\n\r\nYou could make it a requirement to register `AccountHolder` types and define how accounts should operate - when withdrawing, should there be specific people in the cause? Do they need a permission? I seem to recall that there was the notion of an `AccountArchetype` in a previous PR which seemed to be superflous to requirements there, but may have a use here - register an account holder to have an archetype or some other control system to also give plugins some of that control.\r\n\r\nThese are just ideas and some might not be viable, but I just feel like slapping this interface on just papers over issues in the EconomyService that we have a golden oppotunity to fix, so that Econ plugins get a lot more control. Plugins that tightly integrate with the economy could benefit from a full discussion of how this might work, such that they can register town accounts with their own control over how the account runs without having to guess whether account \"abc-def\" is a town account or not.",
      "> That can't be implemented though\r\n> Without saying \"It must be a UUID\"\r\n> What if my accounts are based on names?\r\n> Me = Econ plugin\r\n\r\n> The point that was being made was that we do not know how an economy plugin will store this data and what parts of the identifier it will use. Zidane's point was that they might not choose to store by UUID, or you might store by UUID from a town, or whatever. The econ plugin might very well have a different identifying mechanism.\r\n> \r\n> Thinking back, however, that way of thinking is actually kind of bedded into the way things are set up now. Yep, the object, in general, is identifying itself and the econ plugin should take note of that (but said plugin could then choose to use a different identifier to store the values, of course). So this interface might hold value, but I think the whole economy service needs to be looked at in tandem.\r\n\r\nIt can't do that. \r\nAgain, you can create an account using an identifier (be it a UUID for UniqueAccounts or a string for VirtualAccounts) and that's about it.\r\nThe eco plugin can encode, add a prefix, add a suffix, do black magic with that identifier. We (or 3rd party plugins) don't care. What we care about is that said account can be gotten/deleted using the identifier we used to create the account.\r\n\r\n\r\n> Right\r\n> It would be better to have something like EconService#getAccounts(AccountHolder)\r\n> because then the economy plugin has full control over what it does for a player, or a town, or whatever\r\n> the control needs to be on the econ service as much as possible.\r\n\r\nSee point 1. in my previous post.\r\n\r\n> If that's the case, why is there no way to identify the AccountHolder with just that interface? If it's not a player, the economy plugin may not have any clue as to whether it's a town, or whatever. There needs to be a way to identify that. There may also be a case for identifying whether the account holder is a player, or a town, or a world bank (if someone chose to go mega-economy on their server).\r\n\r\nGood point.\r\n\r\n> The major problem with what you've done is said that the implementation controls the identifer, and the econ plugin doesn't have any information beyond that - and that limits the control of the econ plugin. It actually leads to what is really a deficiency in the econ service itself, which is really the larger problem here. You've correctly noted that the getAccount(UUID) method only provides a suggestion that the UUID is a player's UUID - and that's not good.\r\n\r\nThe situation is not changed. An eco plugin doesn't have any information beyond the identifier. It never did. \r\nIt seems that's what should be changed.\r\n\r\n> Your alternative solution is better because the control properly goes through to the econ plugin - they have more information that they can work with. \r\n\r\nKeep in mind that from a 3rd party plugin perspective I just changed the identifier from a UUID to a Player object. Those plugins would query a player account by their player object.\r\n\r\n> AccountHolder would need to provide identifying inforation\r\n\r\nuh, so giving the owner of the AccountHolder control over the identifier, maybe specifying in the jd that it's only a hint and the eco plugin can just ignore the identifier and use its own.\r\nThat would make everyone happy. I think I'm going with that.",
      "My point wasn't \"AccountHolder needs a couple of methods, also query by player, jobs a good'un\", which is what I feel you're still edging towards. This is sidestepping a problem, not solving it. It's about the wider \"okay, but what does this solve, and how can we improve the API to do what people want to do natively?\"\r\n\r\nAt the end of the day, it boils down to this: if we basically want the economy service to be dumb, then getting the account for a player needs to basically state the player UUID is the key for players and everything else has a string identifier. Towny plugins specify in their docs what string identifiers to use for their accounts. Else, let's be bold and consider how this is really used, could be used, and make changes for that. Let's not just slap an interface on players and hope that solves everything.\r\n\r\nSpecific comments:\r\n\r\n> Again, you can create an account using an identifier (be it a UUID for UniqueAccounts or a string for VirtualAccounts) and that's about it.\r\n\r\nWhy do we have both unique and virtual accounts? Surely that's partially arisen from this identification problem? I think there was some talk about removing the notion of these separate accounts, at least on a consumer facing level.\r\n\r\n> >    Right\r\n> >    It would be better to have something like EconService#getAccounts(AccountHolder)\r\n> >    because then the economy plugin has full control over what it does for a player, or a town, or whatever\r\n> >    the control needs to be on the econ service as much as possible.\r\n\r\n> See point 1. in my previous post.\r\n\r\nI did. It's something I talked about later in my post.\r\n\r\n> If you were to then have a getAccount() on the player, I think it should be implemented as EconomyService#getAccount(this). AccountHolder would need to provide identifying inforation, alternatively, you could create a catalog type that converts an AccountHolder to UUID or String function that provides a way to perform identification if you wanted to (e.g. User -> getUniqueId().toString()), or register class types with the econ plugin and say \"hey, this is a type of AccountHolder we support, and this is how you identify it\".\r\n> \r\n> You could make it a requirement to register AccountHolder types and define how accounts should operate - when withdrawing, should there be specific people in the cause? Do they need a permission? I seem to recall that there was the notion of an AccountArchetype in a previous PR which seemed to be superflous to requirements there, but may have a use here - register an account holder to have an archetype or some other control system to also give plugins some of that control.\r\n\r\n\r\n> Keep in mind that from a 3rd party plugin perspective I just changed the identifier from a UUID to a Player object. Those plugins would query a player account by their player object.\r\n\r\nNo... as I said in my post it should at least be a `User` for the very reason that it needs to be something you can query offline. You even made that point...\r\n\r\n> But what about offline players (User) ? Use a GameProfile instead ?\r\n\r\n> The situation is not changed. An eco plugin doesn't have any information beyond the identifier. It never did.\r\nIt seems that's what should be changed.\r\n\r\nYes. This is an oppotunity to try to improve things on a larger scale.",
      "I made it pretty clear what problems this PR solves and what the aim is.\r\n\r\nFor others who want to chime in and have a discussion:\r\n\r\n- I don't mind giving more control/knowledge to the eco plugin. For example by giving it the whole object instead of the identifier (in this PR the AccountHolder as an argument in the eco service).\r\n- I don't want to give total control to the eco plugin. Read this as \"AccountHolder is just a marker and does not provide any identifying inforation\". (in this PR the owner of the AccountHolder can provide an hint on what identifier to use).¹\r\n- We need to establish a standard way to query a player account since we are the owner of that class. (in this PR ServerPlayer is an AccountHolder an you can just query by AccountHolder) ²\r\n- I'm ok with querying by AccountHolder and merge UniqueAccounts and VirtualAccounts (this is what the PR is doing now)\r\n\r\n¹ If you want this, please provide a solution of how this would work. Note that having the eco plugin have a dependencies on each plugin that implement an AccountHolder is not a solution, it's madness.\r\n² I said **query**. How the eco plugin internally identifies (UUID, string, name, inventory, encoded string, etc.) an account is none of our business. What we need to make sure is that 3rd party plugins can get a player account without taking guesses. Be it with by passing the UUID or the Player/User/AccountHolder instance.\r\n",
      "> > AccountHolder would need to provide identifying inforation\r\n>\r\n> uh, so giving the owner of the AccountHolder control over the identifier, maybe specifying in the jd that it's only a hint and the eco plugin can just ignore the identifier and use its own.\r\nThat would make everyone happy. I think I'm going with that.\r\n\r\nI think we are going too fast here.\r\n\r\nIf the identifier is just decoration then the plugins providing that identifier are troubled if they for example rename the AccountHolder and the eco plugin uses the name instead.\r\n\r\nAlso it does not cover for cases where the kingdoms balance is the same as the kings.\r\n(The player pays for all expenses of the town).\r\n\r\nLets use reality as a guide here.\r\nIf I wish to send someone money. I ask that person \"whats your Account(number)\". Maybe we can slightly defiate from and just ask the economy plugin directly give me the account for `type:xyz`. I would even go as far as declaring `type` to a catalog type.\r\nFor players this would look like this `sponge:player:12334-1234-134...`\r\nFor those towns it could be `towny:town:my-awesome-city2k20`.\r\nHow the economy plugin stores those keys? We dont care. We also don't care whether the town returns a player account or a guild account or whatever.\r\n\r\nThe following code  is used to express my concept in more detail. It does not cover all aspects related to economy only the X -> account mapping. So please take it with a grain of salt.\r\n\r\n````java\r\ninterface AccountOwnerType extends CatalogType {\r\n}\r\n````\r\n\r\n````java\r\nfinal class AccountRef { // IBAN\r\n\r\nstatic AccountRef of(String accountId)\r\n\r\nstatic AccountRef of(AccountOwnerType type, String ownerId)\r\n\r\nString getAccountId() {\r\n    return getOwnerType() + \":\" + getOwnerId();\r\n}\r\n\r\nAccountHolderType getOwnerType();\r\n\r\nString getOwnerId();\r\n\r\n}\r\n````\r\n\r\n````java\r\ninterface AccountHolder { // Optional\r\n\r\nAccountRef/Account getAccount(); // Return type does not matter\r\n\r\n}\r\n````\r\n\r\n````java\r\ninterface AccountRefResolver {\r\n\r\nOptional<AccountRef> resolve(Object source);\r\n\r\n}\r\n````\r\n\r\n````java\r\nclass PlayerAccountRefResolver implements AccountRefResolver {\r\n\r\nOptional<AccountRef> resolve(Object source) {\r\n    if (source instanceof Player p) {\r\n        return AccountRef.of(AccountOwnerTypes.PLAYER, p.getUuid().toString());\r\n    }\r\n    return null;\r\n}\r\n\r\n}\r\n````\r\n\r\n````java\r\nclass MyShopAccountRefResolver implements AccountRefResolver {\r\n\r\nOptional<AccountRef> resolve(Object source) {\r\n    if (source instanceof InventoryShop is) {\r\n        return AccountRef.of(AccountOwnerTypes.PLAYER, is.getOwnerUuid());\r\n    }\r\n    if (source instanceof Merchant m) {\r\n        return myPlugin.getShop(m).getAccountRef();\r\n    }\r\n    return null;\r\n}\r\n````\r\n\r\n````java\r\ninterface EconomyService {\r\n\r\nAccount getAccount(AccountRef)\r\n\r\nAccount resolveAccount(Object target)\r\n\r\nAccountRef resolve(Object target)\r\n\r\nvoid register(AccountRefResolver)\r\n\r\n}\r\n````",
      "I think this is something we now need to revisit before we wind down for freezing API 8.\r\n\r\nThe ultimate issue that really needs to be considered is the fact that there are many different objects that may very well have an account on them. Thinking over this some more, I came to a similar conclusion as @ST-DDT above, that we may be better served with the notion of an `AccountHolderType` or something to that effect.\r\n\r\nIt could be something like this:\r\n\r\n```java\r\ninterface AccountHolderType<T> {\r\n\r\n    String identifier(T type);    \r\n\r\n}\r\n```\r\n\r\nadd this `AccountHolderType` to the registry so Econ plugins can query it, and use it to get the unique identifier, using something like:\r\n\r\n```\r\nOptional<Account> findAccount(AccountHolderType<T> type, T entity);\r\n```\r\n\r\netc. The use of an `AccountRef` may also be useful in the way that it links a type and entity together (but it may not be necessary)\r\n\r\nWe could have two standard types:\r\n\r\n```\r\nAccountHolderType.GENERIC\r\nAccountHolderType.USER\r\n```\r\n\r\nand other plugins can support town banks, even if the plugin is an addon to a town plugin and said town plugin doesn't make itself economy aware. And of course, we need to keep hold of a generic type in case something does just want a one off account.\r\n\r\nThere is one large drawback to this idea, however: what if a plugin providing a town type is removed - how can we access it after removal? Do we provide a method such as\r\n\r\n```\r\nOptional<Account> findAccount(String type, String identifier);\r\n```\r\n\r\nto account for this scenario? I'm not entirely sure what to suggest there.\r\n\r\n(I do not think we need to complicate matters with resolvers. By forcing the use of types plugin developers are unambiguously stating what their intention is).\r\n\r\n---\r\n\r\nWhere do we think we want to go with this?",
      "This stalled a long time ago and is no longer eligible for API-8 as it's breaking. I'm going to close this.\r\n\r\nI would say that as far as economy goes, it might be worth starting to plan out what is needed from a economy service rather than just throw out some code, and work out where we're gonna go from there. I think there was a huge clash of ideals here and it unfortunately petered out."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6dad9087c4d6d37a3e0",
    "number": 2163,
    "body": "Part of the Economy API refactor.\r\n\r\nFix https://github.com/SpongePowered/SpongeAPI/issues/1501\r\n\r\n`EconomyTransactionEvent` is now split between\r\n\r\nPre: is fired **BEFORE** the transaction has been processed (it can still fails and is cancellable).\r\nPost: is fired **AFTER** the transaction has been processed. This is read-only and the transaction result can be used to reliably check the result of the transaction.\r\n",
    "head_branch": "fix/transaction-event",
    "is_a_fork": true,
    "comments": [
      "Looking back at this, I missed something about `EconomyTransactionEvent.Pre` and `getAccount`. Specifically: while the method works fine for deposit/withdraw, it's unclear for transfer since that involves two accounts. Something to retrieve the other account is needed. \r\nDo we add a method returning an Optional<Account> ? A subclass for the event ? \r\nInput wanted.",
      "Would it be better to just have an event that can handle multiple transactions at once? Rather than having a `getAccount()` and `getCurrency()` etc., have a collection of `ProposedTransactions` (or whatever) that contains this info, each one being a simple deposit or withdraw That way, a transfer is one event and the same event, and a plugin listening to this can treat/use it the same way as other plugins.\r\n\r\nThis could also allow economy plugins to build a complex web of transactions that might happen - a currency exchange plugin might allow two players to exchange their currencies so you might have two deposits and two withdrawals that all depend on each other (two accounts, two currencies, deposit and withdrawal on each side).",
      "I've shifted the base branch here to API-9, but is this something we want to revisit, or are we better off closing and thinking about Economy in a wider sense?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6dbd9087c4d6d37a3e1",
    "number": 2162,
    "body": "Fix https://github.com/SpongePowered/SpongeAPI/issues/1584",
    "head_branch": "key/transient",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Keys#TRANSIENT (#2162)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6dcd9087c4d6d37a3e2",
    "number": 2161,
    "body": "",
    "head_branch": "hasviewedcredits",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add key which specifies if a player has viewed the credits (#2161)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6ddd9087c4d6d37a3e3",
    "number": 2159,
    "body": "Tweaks for commands, from as I implement and realise I did things wrong (or can add super simple things).",
    "head_branch": "api8/commands-tweaks",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add mapping method to command manager"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6ded9087c4d6d37a3e4",
    "number": 2158,
    "body": "Mostly to get around the status checks.",
    "head_branch": "api8/codeowners",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Delete CODEOWNERS"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6dfd9087c4d6d37a3e5",
    "number": 2155,
    "body": "Fix https://github.com/SpongePowered/SpongeAPI/issues/1682\r\n\r\nIn stable-7 `Player#getViewDistance` was used on the client to get the clientside view-distance setting. In api-8 the method was moved to `ServerPlayer` but the setter was missing.",
    "head_branch": "serverplayer/view-distance",
    "is_a_fork": true,
    "comments": [
      "Actually, `getViewDistance` still refers to the client view-distance. We're hijacking `CPacketClientSettings` to know the client setting, since the client is telling us its view-distance.\r\n\r\nThis PR is still valid but the methods need to be renamed.\r\n\r\nconcept (ignore the names)\r\n```\r\ngetClientSideViewDistance -> this is the setting on the client. The client tells us what it is and we can't change that.\r\ngetServerSideViewDistance -> server-side view-distance, enforced (the client-side view-distance is ignored if this is set) \r\nsetServerSideViewDistance -> setter for the above\r\n```"
    ],
    "commit_messages": [
      "Add view-distance setter (#2155)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6e0d9087c4d6d37a3e6",
    "number": 2154,
    "body": "Fix https://github.com/SpongePowered/SpongeAPI/issues/1853\r\n\r\n",
    "head_branch": "annotation/do-not-store",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add marker for classes that should not be stored (#2154)\n\n* Add marker for classes that should not be stored\r\n\r\n* Add Documented annotation and update javadoc\r\n\r\n* Annotate more classes with DoNotStore"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6e1d9087c4d6d37a3e7",
    "number": 2153,
    "body": "Fix https://github.com/SpongePowered/SpongeAPI/issues/1845\r\n\r\nOffline players:\r\n```\r\nA joined  -> first joined\r\nA left\r\nA joined\r\nA left\r\nA joined  -> last joined\r\nA left    -> last played\r\n```\r\n\r\nOnline players:\r\n```\r\nA joined  -> first joined\r\nA left\r\nA joined\r\nA left    -> last played\r\nA joined  -> last joined\r\n```\r\n",
    "head_branch": "fix/join-data",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Improve JoinData (#2153)\n\n* Improve JoinData\r\n\r\n* Fix javadoc for FIRST_DATE_JOINED"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6e2d9087c4d6d37a3e8",
    "number": 2152,
    "body": "Fix https://github.com/SpongePowered/SpongeAPI/issues/1398",
    "head_branch": "eco/accounts",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      " Add a way to get all unique and virtual accounts from the economy service (#2152)\n\n* Add a way to get all unique and virtual accounts from the economy service\r\n\r\n* Add collection getters\r\n\r\n* Use the same phrasing as the catalog registry\r\n\r\n* Fix method names\r\n\r\n* Remove unused import"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6e3d9087c4d6d37a3e9",
    "number": 2151,
    "body": "Closes #2138.\r\n",
    "head_branch": "api8/pagination",
    "is_a_fork": true,
    "comments": [
      "Also, this could target api-7 as well.",
      "I think it's worth noting in the documentation that this assumes the vanilla font. In ChatUILib I have [`FontData`](https://github.com/simon816/ChatUI/blob/ba4fc94457d6dc741e6b7bafe0605096f7a6e5af/ChatUILib/src/main/java/com/simon816/chatui/util/FontData.java) which reads a .png to determine character sizes, allowing non-vanilla ascii.png measurements.\r\nFor unicode characters there's `glyph_sizes.bin`, though I'm not sure if this is modifiable in a datapack.",
      "Also, to centre text means knowing the width of the chat box. SpongeCommon [assumes the default](https://github.com/SpongePowered/SpongeCommon/blob/7ea7c5d8e69f84fa9b1c1c3eddb90d4fff5d4dd7/src/main/java/org/spongepowered/common/service/pagination/PaginationCalculator.java#L56) (320), but it is customizable (see https://ore.spongepowered.org/simon816/Chat-UI-Library#player-settings)",
      "I think it's entirely fine that the Sponge Common implementation only supports vanilla content. Perhaps it could be expanded to be able to load data from resource packs and automatically configure based on the server pack, but it *is* a service and can be replaced by other more customizable implementations.\n\nAnother theoretical implementation could integrate with a client mod that passed the necessary sizing and resource pack information to the server,but that would be imo out of scope for sponge itself. However, to make this more friendly to such an implementation, the `getCalculator` method should probably take a `Player` parameter? ",
      "This has sat around for some time - what do we want to do with this?",
      "Hey! You seem to be running an unsupported version (API 8) of SpongeAPI. Support for API 8 ended in October 2023.\r\n\r\nAPI-8 is now end-of-life. We will not be issuing any more API updates for version 8 of our API[^1]\r\n\r\nAs part of our legacy cleanup we are closing issues relating to API8/1.16\r\n___\r\n\r\nIf you wish to move this forward, please rebase this PR on the current branch and reopen it.\r\n\r\n[^1]: https://forums.spongepowered.org/t/sponge-status-update-17th-october-2023/42212#spongeapi-82-1"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6e4d9087c4d6d37a3ea",
    "number": 2150,
    "body": "The concept of creating an empty value of a given object, belongs in a factory, and not a builder.",
    "head_branch": "api8/blocksnapshot",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[API-8] Reroute BlockSnapshot#empty into a factory, and add misc missing javadocs (#2150)\n\n* Reroute BlockSnapshot#empty into a Factory\r\n\r\n* Add missing javadocs\r\n\r\n* Adjust for feedback\r\n\r\n* Fix grammar error"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6e5d9087c4d6d37a3eb",
    "number": 2149,
    "body": "",
    "head_branch": "api8/eventgensort",
    "is_a_fork": true,
    "comments": [
      "Gonna close this for now as AbsoluteSortPosition is quite borked in eventimplgen. Need to spend the time to fix it."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6e6d9087c4d6d37a3ec",
    "number": 2148,
    "body": "This makes it easier for protection plugins to remove locations, and mirrors `AffectEntityEvent#filterEntityLocations(Predicate<ServerLocation>)`.",
    "head_branch": "api8/explosion",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge Add ExplosionEvent.Detonate and other API additions. Merges #2148 #2146 #2145\n\n[API-8] Add ExplosionEvent.Detonate#filterAffectedLocations"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6e7d9087c4d6d37a3ed",
    "number": 2147,
    "body": "",
    "head_branch": "fix-licenser",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2147 from SpongePowered/fix-licenser\n\nFix resolving the licenser plugin."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6e8d9087c4d6d37a3ee",
    "number": 2146,
    "body": "My \"Avatar the Last Airbender in Minecraft\" plugin manages a Task per ability execution, so that abilities can be executed over an indefinite amount of time. I need to be able to check if tasks are cancelled, so that I can correctly cleanup the object that wraps them.",
    "head_branch": "api8/scheduler",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add ScheduledTask#isCancelled (#2146)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6e9d9087c4d6d37a3ef",
    "number": 2145,
    "body": "",
    "head_branch": "api8/location",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[API-8] Add Location#getBlockType (#2145)\n\n* Add Location#getBlockType\r\n\r\n* Fix javadocs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6ead9087c4d6d37a3f0",
    "number": 2144,
    "body": "Adds value accessors for the following keys to `Living`:\r\n- `ABSORPTION`\r\n- `ACTIVE_ITEM`\r\n- `EYE_HEIGHT`\r\n- `EYE_POSITION`\r\n- `FALL_DISTANCE`\r\n- `MAX_AIR`\r\n- `REMAINING_AIR`\r\n- `STUCK_ARROWS`\r\n- `WALKING_SPEED`",
    "head_branch": "api8/eyeposition",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[API-8] Add missing Living value accessors (#2144)\n\n* Add Living#eyeHeight and Living#eyePosition\r\n\r\n* Return `Value` instead of `Value.Immutable`\r\n\r\n* Add Living#fallDistance\r\n\r\n* Add more missing value accessors"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6ebd9087c4d6d37a3f1",
    "number": 2143,
    "body": "Back when the Economy API was added `Currency` was not a Catalog type and there was no CurrencyRegistryModule.\r\n\r\nLater (https://github.com/SpongePowered/SpongeAPI/commit/c6fa6a62961784a7ca7e0e047c8071544ca770d4) `Currency` was made a Catalog type with a `PluginProvidedRegistryModule`. This PR removes the old method.",
    "head_branch": "remove/eco-currencies",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove EconomyService#getCurrencies (#2143)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6ecd9087c4d6d37a3f2",
    "number": 2142,
    "body": "Allowing API consumers to resolve `CatalogKey`s with custom default namespaces will make it easier to handle user input of custom `CatalogType`s.\r\n\r\nFor example, my \"Avatar the Last Airbender in Minecraft\" plugin defines abilities as `CatalogType`s (which allows other plugins to register their own custom abilities), and it would be handy to by default resolve non-namespaced keys to my plugin's namespace with a single `CatalogKey.resolve` call.\r\n\r\nI've also taken the opportunity to add missing javadocs to the interface.\r\n\r\n--- \r\n\r\nTo end off, my final concern is whether we should be defaulting the `namespace` in `CatalogKey.Builder`. IMO, we should prefer for API consumers to specifically set the namespace, or use builtin factories like `CatalogKey#minecraft` or `CatalogKey#sponge`.\r\n\r\nI wager that plugin devs will rarely want `minecraft`-namespaced keys, especially since most of the time they'll be calling `CatalogKey` builders/factories for their own custom `CatalogType`s.",
    "head_branch": "api8/catalogkey",
    "is_a_fork": true,
    "comments": [
      "@ST-DDT Adjusted based on your feedback.",
      "Closed in favor of https://github.com/SpongePowered/SpongeAPI/pull/2268 and https://github.com/SpongePowered/SpongeCommon/pull/3217"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6edd9087c4d6d37a3f3",
    "number": 2141,
    "body": "Two things this PR does:\r\n\r\n> Relax the `MessageChannel#getMembers()` return type from `Collection<MessageReceiver>` to `Collection<? extends MessageReceiver>`\r\n\r\nThis makes it easier to create `MessageChannel`s that just delegate `getMembers()` to another `Collection<SomeTypeThatImplementsMessageReceiver>`. ~~It also functionally prevents consumers from calling `Collection#add` or other mutating operations.~~\r\n\r\n> Pull `MessageReceiver#setMessageChannel(MessageChannel)` into a separete subinterface `MessageReceiver.Mutable`\r\n\r\nNot all `MessageReceiver`s need or should be able to have their `MessageChannel` changed.\r\n\r\nTODO:\r\n- [X] Figure out what other API interfaces besides `Player` should be `MessageReceiver.Mutable`.\r\n    - I think we're good for now, and can make other receivers mutable as needed.",
    "head_branch": "api8/messagechannel",
    "is_a_fork": true,
    "comments": [
      "Completely agree with everything you propose. Just one point:\r\n\r\n> It also functionally prevents consumers from calling Collection#add or other mutating operations.\r\n\r\nWe shouldn't rely on that because type erasure and raw types are a thing - the returned collection should be immutable or a copy to ensure that is the case (crucially, javadocced as such). As `MutableMessageChannel` has methods that already mutate the list, I don't really think this is a problem.",
      "@dualspiral For sure. I tacked it on in case others wanted more than 1 reason. Will leave that part out of any javadocs of course. 👍",
      "Actually, I'd go the other way and make it explicit. I personally don't think that the collection returned should be able affect the channel in any situation - so I think it should either be returning a copy or an immutable view. I can see the situation where a dev gets the collection and alters it, not realising how it's affecting the channel.\r\n\r\nCould also just note that the returned collection backs the message channel and that any changes are reflected - but that's at odds with the extends clause!",
      "Alright, I've updated `#getMembers()` javadocs to reflect this. @dualspiral ",
      "No longer valid as of #2180.\r\n\r\nThe replacement now has the `? extends` for getMembers(),\r\nthough a Mutable `Audience` is now missing."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6eed9087c4d6d37a3f4",
    "number": 2140,
    "body": "Two things this PR does:\r\n\r\n> Remove the default implementation of `NamedCatalogType#getName`\r\n\r\nIf we were to keep this default implementation, we're right back at the issue of api 7's `CatalogType`. If plugin devs want their catalog types to have names, the names should be meaningful.\r\n\r\n> Make `NamedCatalogBuilder#name(Translation)` default implemented\r\n\r\nI expect that most plugin devs will not care about translations for their catalog type names, and will just want quick and dirty (yet still meaningful) names.",
    "head_branch": "api8/namedcatalogtype",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[API-8] Adjust NamedCatalogType and NamedCatalogBuilder interfaces for expectations (#2140)\n\n* Remove default implementation of NamedCatalogType\r\n\r\n* Default implement NamedCatalogBuilder#name(Translation)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6efd9087c4d6d37a3f5",
    "number": 2139,
    "body": "This PR adds `Entity#getDirection()` and `Living#getHeadDirection()`, analogous to Bukkit's `getDirection()` methods. This has become a common enough use case that I've added a trick to the Discord bot that shows how to get the direction currently. Therefore, I think it's finally time for Sponge to have the methods builtin.\r\n\r\nI'm open to also adding `Transform#getDirection()`, but unsure if there's much point to it, if you can just do `transform.getRotationAsQuaternion().getDirection()`.",
    "head_branch": "api8/direction",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[API-8] Add direction methods on Entity and Living (#2139)\n\n* Add Entity#getDirection and Living#getHeadDirection\r\n\r\n* Quick before Zidane yells at me"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6f0d9087c4d6d37a3f6",
    "number": 2137,
    "body": "Adds:\r\n* `Tristate#not`\r\n* `Tristate#fromNullableBoolean`\r\n* `Tristate#asNullableBoolean`",
    "head_branch": "api8/tristate",
    "is_a_fork": true,
    "comments": [
      "While we are at it we should also change:\r\nhttps://github.com/SpongePowered/SpongeAPI/blob/d0426575e3c6197363550a072f2a7c80b5d384d1/src/main/java/org/spongepowered/api/util/Tristate.java#L33-L37\r\n\r\nto\r\n\r\n````java\r\nreturn other == FALSE ? FALSE : TRUE;\r\n````\r\n\r\nThis is shorter/easier to understand and also matches the `FALSE#or(...)` style.",
      "Agreed @ST-DDT"
    ],
    "commit_messages": [
      "[API-8] Improve Tristate (#2137)\n\n* Improve Tristate:\r\n* Add Tristate#not\r\n* Add Tristate#fromNullable\r\n\r\n* Edit Tristate#not javadocs\r\n\r\n* Simplify Tristate.TRUE#and\r\n\r\n* * Tristate#fromNullable -> Tristate#fromNullableBoolean\r\n* Add Tristate#asNullableBoolean\r\n\r\n* Added an extra note to Tristate#asNullableBoolean about the nullable return type.\r\n\r\n* Grammar"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6f1d9087c4d6d37a3f7",
    "number": 2136,
    "body": "There is currently no fluid type exposed to represent absence of a fluid. In vanilla, this is the `EMPTY` fluid.",
    "head_branch": "fluid/empty",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Yes, EMPTY is a fluid. (#2136)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6f2d9087c4d6d37a3f8",
    "number": 2135,
    "body": "[Common](https://github.com/SpongePowered/SpongeCommon/pull/3108)\r\n\r\nIt's been nearly 3 years since I opened #1706, so here's starting fresh on a new branch with mostly new code.\r\n\r\nThe only thing I don't like is `PackDiscoverer`s. That part isn't critical to resources, so we can remove it and do it for another time if we're short on time.\r\n\r\nI'm also not sure if we need a separate event for registering reload listeners. We may be able to get away with having them be registered during ServerAboutToStartEvent. Input is appreciated.",
    "head_branch": "feature/resources",
    "is_a_fork": true,
    "comments": [
      "Closing in favor of https://github.com/SpongePowered/SpongeAPI/tree/feature/resources\r\n\r\nThank you for all your work on this Killjoy."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6f3d9087c4d6d37a3f9",
    "number": 2134,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/3031)\r\n\r\n```java\r\nKey<Value<String>> stringKey = Key.builder().key(CatalogKey.of(\"myplugin\", \"stringKey\")).type(TypeTokens.STRING_VALUE_TOKEN).build();\r\nDataQuery stringQuery = DataQuery.of(\"stringQuery\");\r\nDataStore.builder().key(stringKey, (view, value) -> view.set(stringQuery, value), view -> view.getString(stringQuery)).build(TypeTokens.ENTITY_TOKEN);\r\n// Simplified\r\nDataStore.of(stringKey, stringQuery, TypeTokens.ENTITY_TOKEN);\r\n\r\n// for Collection/Map/Array\r\nKey<ListValue<String>> stringListKey = Key.builder().key(CatalogKey.of(\"myplugin\", \"stringListKey\")).type(TypeTokens.LIST_STRING_VALUE_TOKEN).build();\r\nDataQuery stringListQuery = DataQuery.of(\"stringListQuery\");\r\nDataStore.builder().key(stringListKey, (view, value) -> view.set(stringListQuery, value), view -> view.getStringList(stringListQuery)).build(TypeTokens.ENTITY_TOKEN);\r\n\r\n// multiple keys\r\nDataStore.builder()\r\n        .key(stringKey, stringQuery)\r\n        .key(stringListKey, (view, value) -> view.set(stringListQuery, value), view -> view.getStringList(stringListQuery))\r\n        .build(TypeTokens.ENTITY_TOKEN);\r\n```",
    "head_branch": "api8/datastore",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "add DataStore Builder"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6f4d9087c4d6d37a3fa",
    "number": 2133,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/2653)\r\n\r\n@Zidane For discussion. Very proof of concept-y, but this was what I was thinking. Plugin recieves event. Plugin chooses whether to supply to event. Event only sent to a plugin if:\r\n\r\n* It is named as the provider for the given service in the config (see Common)\r\n* There is no named provider and a registration hasn't been successfully made yet\r\n\r\nYou'll see in Common that I send the event to one plugin at a time. I've not added the service provider to `Game` or `Sponge` yet, that's part of the discussion!\r\n\r\nVanilla/Sponge services have low priority and will always be created last (or as a fallback to a named provider that failed to load)",
    "head_branch": "api8/service-registration",
    "is_a_fork": false,
    "comments": [
      "> But how do I get access to the ServiceProvider? AFAICT there is no longer a static way to get that instance.\r\n\r\nYou need to remember that this is a proof of concept and is a draft - something that's come up after discussion with Zidane. Because init is still up in the air and it's not clear where the access will go, I've not added it, and that's concious. It _will_ be added.\r\n\r\nThis concept may not go futher - if it does, I'll expend the effort then."
    ],
    "commit_messages": [
      "Replace Service Manager with Provider (#2133)\n\n* PoC for service manager\r\n\r\n* Update comment\r\n\r\n* Add entry point for service provider\r\n\r\n* Licence\r\n\r\n* Move service event\r\n\r\n* Fix compile error"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6f5d9087c4d6d37a3fb",
    "number": 2131,
    "body": "",
    "head_branch": "clarifications",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Clarify some stuff with Server players on a server (#2131)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6f6d9087c4d6d37a3fc",
    "number": 2130,
    "body": "[ **SpongeAPI** | [SpongeCommon ](https://github.com/SpongePowered/SpongeCommon/pull/2640)]\r\n\r\nResolves https://github.com/SpongePowered/SpongeAPI/issues/2093\r\n\r\nThe intention of this PR is to allow plugins to intercept the fetching of a block's explosion resistance and adjust the value dynamically based on the block's location and type.\r\n\r\nExample Usage:\r\n```\r\n   public void changeBlockResistance(ExplosionEvent.BlockResistance event) {\r\n\r\n        for (Map.Entry<Vector3i, Pair<BlockState, Float>> entry : event.getBlocks().entrySet()) {\r\n            Vector3i blockPos = entry.getKey();\r\n            Pair<BlockState, Float> pair = entry.getValue();\r\n\r\n\r\n            float newResistance = pair.getValue();\r\n            if (Settings.DurabilityOverride != null && Settings.DurabilityOverride.containsKey(pair.getKey().getType())) {\r\n                newResistance = Settings.DurabilityOverride.get(pair.getKey().getType());\r\n            }\r\n\r\n            for (Craft craft : CraftManager.getInstance().getCraftsFromLocation(new Location<>(event.getTargetWorld(), blockPos))) {\r\n                float testNum = pair.getValue() * (1F + ((float) craft.getSize() / 50000F));\r\n\r\n                if (testNum > newResistance) {\r\n                    newResistance = testNum;\r\n                }\r\n            }\r\n\r\n            event.getBlocks().put(entry.getKey(), Pair.of(pair.getKey(), newResistance));\r\n        }\r\n    }\r\n```",
    "head_branch": "feature/explosion-block-resistance",
    "is_a_fork": true,
    "comments": [
      "I'm really worrying about performance. `FetchBlockExplosionResistance` would be fired multiple times for each block. Given that an explosion affects many blocks and they can be many explosions at once on a server I expect a huge cost from this approach. I might be wrong, it needs to be tested.\r\n\r\nI suggest a different approach, the one I used in my plugin SuperPiston. The problem was similar, I needed to replace the logic of each block affected by a piston. See https://github.com/Yeregorix/SuperPiston/blob/master/src/main/java/net/smoofyuniverse/superpiston/api/event/PistonStructureCalculationEvent.java for example.\r\n\r\nHere is the trick, make two cancellable events `Pre` and `Post`. During `Pre`, plugins must choose a `Calculator`, then the explosion logic is fully replaced and calculated using the `Calculator`, and then `Post` is fired, with the result of the explosion. \r\n\r\nThis approach has the advantage to give more freedom to plugins, they can fully replace the explosion logic by a custom one, totally different. It's a bulk operation, no need to fire multiple events for each block. It ensures only one logic is calculated to avoid performance overhead, for example if the vanilla logic is fully replaced it will never be calculated, only the custom one will. The only problem of this approach is that it's possible but difficult for two \"conflicting\" plugins to merge their `Calculator`s.\r\n\r\nThis approach would be better **in my opinion**, but I let people here debate about it.\r\n\r\nNB: `Pre` and `Post` was the names I chose in my plugin, in case of modifying the current api, editing `Pre` and `Detonate` should be more appropriate.",
      "> While working to move it to a single event per explosion I have discovered that explosions continue a given raytrace outside of the explosion radius if it does not meet enough resistance.\r\n> \r\n> This could be optimized so that it stops if it exits the radius, however, this may have unforeseen side-effects. What would you advise?\r\n\r\n@dualspiral @Yeregorix \r\n\r\nAlso, if I was to do as you suggest Yeregorix where should the new classes be located?",
      "@dualspiral Yay or nay?",
      "It's active _but_ I really do not think this is the right way to go. I still think this should be on `Pre` and/or `Detonate` rather than its own event, but I admit I do admit I've not looked into what it would take for it to go onto one of these events and I've been working on other things (unsurprisingly).\r\n\r\nMy major concern is that by putting this onto 7, we're going to be expected to put this onto 8 in the same way. I'm not convinced this is right for 8. I also think that, having a quick look at the Common PR, there may be some work involved before this is ready for pulling (there are numerous style issues and I think some of the methods can indeed be minimised).\r\n\r\nIf the use case is to have a simple multiplier for explosion resistance that can be specified in `Pre`, _maybe_ on a per-block type/state level, that can then be used in the calculations, I'd be more receptive to that - it would be minimal on performance and we're not having a whole event just to tack on numbers to blocks and potentially hurting performance.\r\n\r\nFor those reasons, I'm leaning towards a no, this should not be a separate event.",
      "> It's active _but_ I really do not think this is the right way to go. I still think this should be on `Pre` and/or `Detonate` rather than its own event, but I admit I do admit I've not looked into what it would take for it to go onto one of these events and I've been working on other things (unsurprisingly).\r\n\r\nAs I think I explained previously, `Pre` is not located within the ExplosionMixin (not sure why not tho?), and `Detonate` is too late unless we want to run the entire block damage, entity damage, and entity knockback code again.\r\n\r\n> My major concern is that by putting this onto 7, we're going to be expected to put this onto 8 in the same way. I'm not convinced this is right for 8. I also think that, having a quick look at the Common PR, there may be some work involved before this is ready for pulling (there are numerous style issues and I think some of the methods can indeed be minimised).\r\n\r\nYeah, I'm trying my best but I don't know how to correctly do a lot of stuff.\r\n\r\n> If the use case is to have a simple multiplier for explosion resistance that can be specified in `Pre`, _maybe_ on a per-block type/state level, that can then be used in the calculations, I'd be more receptive to that - it would be minimal on performance and we're not having a whole event just to tack on numbers to blocks and potentially hurting performance.\r\n> \r\n> For those reasons, I'm leaning towards a no, this should not be a separate event.\r\n\r\nUnfortunately, my use case requires block location as well and it does not provide a multiplier, it completely replaces the existing number. Perhaps we should review why the `Pre` event is not located within the Explosion Mixin. I suspect it is so that we don't waste time processing code unnecessarily?\r\n\r\n@dualspiral \r\n\r\n",
      "Perhaps, I could drastically alter the Mixin so that there are two versions of the effected method and use an if-else containing the ShouldFire for the Block Resistance Event to decide which version to use. This would mean that performance is only affected when there is a listener for the event?",
      "So, why not just have new methods on `Pre`, `get/setExplosionResistanceCalcuator` which is a `ResistanceCalculator` which takes a `Location`, the current resistance as a `float`, and returns the new resistance as a `float`. We can then inject that into the explosion code to make the calculation. That way, we avoid a new event and we tell the engine how to calculate resistance for a given block.\r\n\r\nI think that's in line with what @Yeregorix suggested and it'll completely remove the requirement to have a second event. It could even go on the `Explosion` builder too, but let's not worry about that for now.",
      "@dualspiral This seems like a good solution once we have resolved a few concerns that were raised.\r\n\r\n> This approach has the advantage to give more freedom to plugins, they can fully replace the explosion logic by a custom one, totally different. It's a bulk operation, no need to fire multiple events for each block. It ensures only one logic is calculated to avoid performance overhead, for example if the vanilla logic is fully replaced it will never be calculated, only the custom one will. The only problem of this approach is that it's possible but difficult for two \"conflicting\" plugins to merge their `Calculator`s.\r\n\r\nHow will we handle multiple plugins trying to alter the results?\r\n\r\nAnd where should the new Interface and Implementation classes for `ExplosionResistanceCalculator` be located?\r\n\r\n\r\n",
      "> How will we handle multiple plugins trying to alter the results?\r\n\r\nI, personally, don't care too much about that, because if you can get the resistance calculator you can chain it in your own. If you do though (and others), then the event needs to become more complex, where you supply your own calculator which adds it to a list of calculators and order of registration will determine order of applicaton.\r\n\r\n> And where should the new Interface and Implementation classes for ExplosionResistanceCalculator be located?\r\n\r\nInterface should be wherever the explosion classes are. I'd imagine it's going to be a `FunctionalInterface`, so there wouldn't need to be an implementation class - the default could always be `Optional.empty()` so the impl wouldn't need one.",
      "> How will we handle multiple plugins trying to alter the results?\r\n\r\nIf you do this way it would not be the role of the implementation but the role of the plugins.\r\n\r\neg.\r\nPlugin A: `event.setCalculator(new MyCalculatorA())`\r\n\r\nthen\r\n\r\nPlugin B have two choices:\r\nerase A's calculator: `event.setCalculator(new MyCalculatorB())`\r\nor\r\nregister a special calculator based on the previous one: `event.setCalculator(new MyCalculatorAdapterB(event.getCalculator()))`\r\n\r\nEven without speaking of calculators, this is always the case for all events of the API. When you set a value in an event, you can ignore the previous value, or do calculation based on it.",
      "How does one access the functional interface ResistanceCalculator in their plugin if it is located in SpongeAPI? Should I have put it somewhere else?",
      "The interface should be in the API - when I said explosion classes, I meant interfaces in the API.",
      "> The interface should be in the API - when I said explosion classes, I meant interfaces in the API.\r\n\r\nThat's what I thought. I've put it at `org.spongepowered.api.world.explosion.ResistanceCalculator`. However, when I do `gradlew build install` and point my plugin to it the IDE errors when my plugin tries to use it \"Cannot resolve symbol 'ResistanceCalculator'\" and asks if I want to add `SpongeVanilla.SpongeCommon.SpongeAPI.main` to the dependencies.",
      "That's likely the IDE being weird. If you're using IntelliJ, try invalidating the caches and restarting. Don't know about other IDEs.",
      "@dualspiral I think that this PR is complete where functionality is concerned. Any remaining issues I suspect are bad coding/formatting on my part.",
      "Hopefully, I haven't marked anything as resolved without actually resolving it.\r\nI'll recheck all code style related stuff and push a final commit after everything else is confirmed to be correct.",
      "I think the code style is now correct?",
      "I'm iffy on the block resistance because resistance seems to be a semi arbitary number and I'd imagine that such a number would be different across differing implementations. I don't like that we're so tied to the implementation on that.\r\n\r\nI've asked a couple of people to look at this aspect but had no respose. I'm gonna ask again because I'm really not sure about the notion of telling people to go look at the Minecraft wiki to get the values on this.\r\n\r\n@SpongePowered/developers. Are we okay with block resistance being arbitary and thus kind of trap all other impls into this notion or not? If we are, then minor issues aside, this looks okay to me. If we are not, then I think this is ultimately going to either get closed or simply based on a multiplier.\r\n\r\nThe use case seems to me to be to expose an internal resistance and potentially modify it. Is this one of those cases where we say \"this is clearly impl dependent, you may just want to use the internals\"?",
      "> I'm iffy on the block resistance because resistance seems to be a semi arbitary number and I'd imagine that such a number would be different across differing implementations. I don't like that we're so tied to the implementation on that.\r\n> \r\n> I've asked a couple of people to look at this aspect but had no respose. I'm gonna ask again because I'm really not sure about the notion of telling people to go look at the Minecraft wiki to get the values on this.\r\n> \r\n> @SpongePowered/developers. Are we okay with block resistance being arbitary and thus kind of trap all other impls into this notion or not? If we are, then minor issues aside, this looks okay to me. If we are not, then I think this is ultimately going to either get closed or simply based on a multiplier.\r\n> \r\n> The use case seems to me to be to expose an internal resistance and potentially modify it. Is this one of those cases where we say \"this is clearly impl dependent, you may just want to use the internals\"?\r\n\r\nHow would one use internals? If this becomes a multiplier it won't provide what I require for my plugin. I do agree that this might not be the best, but how else could it be done?\r\n\r\nI would point out that the arbitrary numbers exist because blast resistance in vanilla Minecraft is just that.",
      "> I would point out that the arbitrary numbers exist because blast resistance in vanilla Minecraft is just that.\r\n\r\nAnd I would point out that one of the points of our API is to, effectively, provide a layer between Minecraft and plugins that provides predictable, known behaviour. We also consider third party implementations who might not want to use Mojang's blast resistance mechanic.\r\n\r\nTake @gabizou's comment above. Some of it is geared at the javadocs, but there is also this:\r\n\r\n> Is it possible to return some bounds?\r\n>\r\n> What are the numbers meaning? Do I return 0 to say \"don't break me\" or do I use 1f to say \"I'm impenetrable? Or is it a resistance factor based on 0-10?\r\n\r\nwhich I think is the sticking point and why I'm reticent to go with this. [Indeed, I also reference this here](https://github.com/SpongePowered/SpongeAPI/pull/2130#discussion_r447060681) and while I simply say \"what can you do\", linking to the Minecraft wiki, which can change over time, isn't the way to go. Our docs should really be self contained.\r\n\r\nIf this numbers were 0 to 1, that's something that makes sense - but it's not. I understand how Minecraft does it (now I've looked at it) but it's just a magic number that makes no sense to plugin developers on their own. The range shouldn't just be 0 to Infinity where the scale is some non-linear function. I'd rather say \"okay, the probability of this block going boom is 75%\" or whatever, because, from what I can see, that's really what this resistance does, it just has a weird non-linear scale.\r\n\r\nIf you can make the block resistance a sane number and a sane scale, that is, 0 to 1 where it's effectively a percentage. I'd be happier. You can probably work what the percentages represent by looking at how Minecraft deals with resistance and work out probabilities from there. That way, it makes sense to any plugin developer that uses this (they just need to say \"I want this chance\") and any third party implementor, and gives a common implementation base, not just some weird numbers that base Minecraft uses.",
      "> > I would point out that the arbitrary numbers exist because blast resistance in vanilla Minecraft is just that.\r\n> \r\n> And I would point out that one of the points of our API is to, effectively, provide a layer between Minecraft and plugins that provides predictable, known behaviour. We also consider third party implementations who might not want to use Mojang's blast resistance mechanic.\r\n> \r\n> Take @gabizou's comment above. Some of it is geared at the javadocs, but there is also this:\r\n> \r\n> > Is it possible to return some bounds?\r\n> > What are the numbers meaning? Do I return 0 to say \"don't break me\" or do I use 1f to say \"I'm impenetrable? Or is it a resistance factor based on 0-10?\r\n> \r\n> which I think is the sticking point and why I'm reticent to go with this. [Indeed, I also reference this here](https://github.com/SpongePowered/SpongeAPI/pull/2130#discussion_r447060681) and while I simply say \"what can you do\", linking to the Minecraft wiki, which can change over time, isn't the way to go. Our docs should really be self contained.\r\n\r\nI agree but am not sure what to do about it.\r\n\r\n> If this numbers were 0 to 1, that's something that makes sense - but it's not. I understand how Minecraft does it (now I've looked at it) but it's just a magic number that makes no sense to plugin developers on their own. The range shouldn't just be 0 to Infinity where the scale is some non-linear function. I'd rather say \"okay, the probability of this block going boom is 75%\" or whatever, because, from what I can see, that's really what this resistance does, it just has a weird non-linear scale.\r\n>\r\n> If you can make the block resistance a sane number and a sane scale, that is, 0 to 1 where it's effectively a percentage. I'd be happier. You can probably work what the percentages represent by looking at how Minecraft deals with resistance and work out probabilities from there. That way, it makes sense to any plugin developer that uses this (they just need to say \"I want this chance\") and any third party implementor, and gives a common implementation base, not just some weird numbers that base Minecraft uses.\r\n\r\n\r\nThere is no randomness to whether a block is broken or not where Blast Resistance is involved.\r\nThe explosion calculation gives each raytrace a `strength`, e.g. 20.\r\nFor each step it moves along the raytrace it deducts a hardcoded number.\r\nWhen it finds a block it fetches the `resistance` of the block and deducts it from the `strength` that is remaining.\r\nIf there is still `strength` remaining then the block will be broken.\r\nOnce there is no `strength` remaining the raytrace will stop.",
      "Herein lies the issue - this reeks of implementation details. Using our API:\r\n\r\n* How do you know what blast rays exist?\r\n* How do you know what the strength of the blast ray is?\r\n* How are you meant to know that this block resistance does this?\r\n* Why is it even assumed that ray tracing is done for an explosion?\r\n* Will the block stop the ray if given a specific resistance or not (you might want to know this?)\r\n\r\nThere is a **lot** more to just exposing the block resistance than a magic number that requires innate knowledge of the system to understand correctly. We're not going to expose the strength of a ray, or even talk about the strength of a ray. So the block resistance number we talk about here inherently will _never_ make sense to a consumer on its own, or to a third party implementor that is completely writing their own server software (see, Lantern).\r\n\r\nSome of us have had a discussion about this and we decided that we're going to close the PR. As much as we'd love to support you fully with the API, we honestly don't see how to do this in the API without leaking all this implementation detail - you're asking for modification of the implementation (rather than the concept) at a really granular level. I realise that you've put a fair amount of effort into this (some of it, at our behest!) but now knowing exactly what is going on, this really strays into something you'd use Forge for.\r\n\r\nIt may be worth looking at converting your plugin into a hybrid Sponge/Forge mod. You can still use the Sponge API as much as you like by depending on it with in a mod workspace, but you'll also get access to the base classes and implementation detail that we're unwilling to provide access to.\r\n\r\nThank you for your contribution regardless - I hope that some of these discussions we've had refining your idea have helped you see how we might tackle things too!",
      "> Herein lies the issue - this reeks of implementation details. Using our API:\r\n> \r\n> * How do you know what blast rays exist?\r\n> * How do you know what the strength of the blast ray is?\r\n> * How are you meant to know that this block resistance does this?\r\n> * Why is it even assumed that ray tracing is done for an explosion?\r\n> * Will the block stop the ray if given a specific resistance or not (you might want to know this?)\r\n> \r\n> There is a **lot** more to just exposing the block resistance than a magic number that requires innate knowledge of the system to understand correctly. We're not going to expose the strength of a ray, or even talk about the strength of a ray. So the block resistance number we talk about here inherently will _never_ make sense to a consumer on its own, or to a third party implementor that is completely writing their own server software (see, Lantern).\r\n> \r\n> Some of us have had a discussion about this and we decided that we're going to close the PR. As much as we'd love to support you fully with the API, we honestly don't see how to do this in the API without leaking all this implementation detail - you're asking for modification of the implementation (rather than the concept) at a really granular level. I realise that you've put a fair amount of effort into this (some of it, at our behest!) but now knowing exactly what is going on, this really strays into something you'd use Forge for.\r\n> \r\n> It may be worth looking at converting your plugin into a hybrid Sponge/Forge mod. You can still use the Sponge API as much as you like by depending on it with in a mod workspace, but you'll also get access to the base classes and implementation detail that we're unwilling to provide access to.\r\n> \r\n> Thank you for your contribution regardless - I hope that some of these discussions we've had refining your idea have helped you see how we might tackle things too!\r\n\r\nI understand your position but with every one of these repeat experiences, I feel more and more like Sponge is just overly hyped up.\r\n\r\nI will offer one suggestion, and it's really about Mixins, make it possible to overwrite mixin methods that are annotated with `@Final`. Give it a big huge warning label for all I care, but I wouldn't have even bothered with this PR if I could have supplied an `Unstable` Mixin with my plugin.",
      "@Pulverizer You clearly do not understand any of this.\r\n\r\nYou are clearly angry because we denied an API request that very much is tied to what Mojang does. SpongeAPI is an API for implementations that want to re-create Minecraft or Minecraft itself. Because it is, that means that the API CANNOT simply do \"what Mojang does\". You were told this above, that this is very much an implementation detail. I am sorry if you're offended.\r\n\r\nInstead of being professional, you commence with a snide comment. If you actually understood the technology you're using, you would already know that you CAN do per-platform mixins (Forge/Vanilla), \"`@Final` Mixins\" as you put it makes not a bit of sense, and ultimately would be done with this already.\r\n\r\nDon't blame us for issues with your code and your environment."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6f7d9087c4d6d37a3fd",
    "number": 2127,
    "body": "Fixes #2126\r\n\r\n@ImMorpheus please check that this works for you. I have written a couple of test commands (below) which work, but want to make sure it works with you too.\r\n\r\n```java\r\n        Sponge.getCommandManager().register(this.pluginContainer, CommandSpec.builder()\r\n                .arguments(GenericArguments.allOf(GenericArguments.player(Text.of(\"player\"))))\r\n                .executor((src, args) -> {\r\n                    Collection<Player> playerCollection = args.getAll(\"player\");\r\n                    src.sendMessage(Text.of(\"Selected players: \", playerCollection\r\n                            .stream()\r\n                            .map(User::getName)\r\n                            .collect(Collectors.joining(\", \"))));\r\n                    return CommandResult.success();\r\n                })\r\n                .build(), \"allofplayers\");\r\n\r\n        final Collection<String> choices = ImmutableList.of(\"bacon\", \"eggs\", \"sausages\", \"beans\", \"spam\", \"sponge\");\r\n        Sponge.getCommandManager().register(this.pluginContainer, CommandSpec.builder()\r\n                .arguments(GenericArguments.allOf(GenericArguments.choices(\r\n                                    Text.of(\"choices\"),\r\n                                    () -> choices,\r\n                                    input -> {\r\n                                        if (choices.contains(input.toLowerCase())) {\r\n                                            return input;\r\n                                        }\r\n                                        return null;\r\n                                    }\r\n                                )))\r\n                .executor((src, args) -> {\r\n                    Collection<String> playerCollection = args.getAll(\"choices\");\r\n                    src.sendMessage(Text.of(\"Selected choices: \", String.join(\", \", playerCollection)));\r\n                    return CommandResult.success();\r\n                })\r\n                .build(), \"allofchoices\");\r\n```",
    "head_branch": "fix-2126",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix completion with allOf element\n\nFixes #2126"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6f8d9087c4d6d37a3fe",
    "number": 2124,
    "body": "In the super method for copy it says the following:\r\n![image](https://user-images.githubusercontent.com/33832062/83155841-92e4f200-a0f9-11ea-8b65-f8cf99a8a312.png)\r\nHowever, the current implementation doesn't clone the Vector object holding the position of the location.",
    "head_branch": "LocationCopyFix",
    "is_a_fork": true,
    "comments": [
      "It's actually okay as it is. Surely if we clone the position, we'd have to clone the `Extent` too?\r\n\r\nIt boils down to three things:\r\n\r\n1: `Vector3d` is immutable and so is safe to just reuse.\r\n2: The position is not actually a `BaseValue` or, indeed, part of a value container.\r\n3: The javadocs for the class says the following:\r\n\r\nhttps://github.com/SpongePowered/SpongeAPI/blob/4a53e6d12a36ddc2698996169d512658faa1b38e/src/main/java/org/spongepowered/api/world/Location.java#L76-L78\r\n\r\nThe location itself is not a data holder, but is a proxy for a specfic block in the selected `Extent` - sure, perhaps the Javadocs should be clearer, but cloning the position is an unnecessary use of memory and processing time _especially_ as the position is immutable.\r\n\r\nThank you for looking at this and providing a PR, but I'm closing this for the reasons above.",
      "> It's actually okay as it is. Surely if we clone the position, we'd have to clone the `Extent` too?\r\n> \r\n> It boils down to three things:\r\n> \r\n> 1: `Vector3d` is immutable and so is safe to just reuse.\r\n> 2: The position is not actually a `BaseValue` or, indeed, part of a value container.\r\n> 3: The javadocs for the class says the following:\r\n> \r\n> https://github.com/SpongePowered/SpongeAPI/blob/4a53e6d12a36ddc2698996169d512658faa1b38e/src/main/java/org/spongepowered/api/world/Location.java#L76-L78\r\n> \r\n> The location itself is not a data holder, but is a proxy for a specfic block in the selected `Extent` - sure, perhaps the Javadocs should be clearer, but cloning the position is an unnecessary use of memory and processing time _especially_ as the position is immutable.\r\n> \r\n> Thank you for looking at this and providing a PR, but I'm closing this for the reasons above.\r\n\r\nI see, I didn't realize it was immutable because this method's name is misleading. Given it's immutable should the \"copy\" method not be deprecated, and only return ``this``? Surely it's also a waste of memory to return a copy of an immutable object?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6f9d9087c4d6d37a3ff",
    "number": 2123,
    "body": "This PR updates the Guice dependency from 4.1.0 to 4.2.3. This is a minor version bump and so does not break backward compatibility.\r\n\r\nGoogle does have some classes annotated with `@Beta` which make them exempt from any compatibility guarantees (Such as `TypeToken`). However, I looked here:\r\n\r\n- https://github.com/google/guice/wiki/Guice42\r\n- http://google.github.io/guice/api-docs/4.2/api-diffs/changes.html\r\n\r\nand was unable to find any breaking changes.\r\n\r\nI tested this change with the following plugins from ore on SpongeForge and everything worked as expected:\r\n\r\n- Nucleus\r\n- LuckPerms\r\n- WorldEdit\r\n- Anvil and OnTime (two of my plugins that rely heavily on Guice)\r\n- Respect\r\n\r\nResolves #2122",
    "head_branch": "feature/guice-4.2.3",
    "is_a_fork": true,
    "comments": [
      "@gabizou @dualspiral Will this run into any issues to bump?",
      "Unlikely. Going to need to do so with Configurate 3.7 anyway, was going to test and do so then."
    ],
    "commit_messages": [
      "Bump guice version to 4.2.3 (#2123)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6fad9087c4d6d37a400",
    "number": 2120,
    "body": "Pretty self explanatory I think. Common PR is [here](https://github.com/SpongePowered/SpongeCommon/pull/2613).",
    "head_branch": "totem-effect",
    "is_a_fork": true,
    "comments": [
      "Was that the only one missing?"
    ],
    "commit_messages": [
      "Add totem effect to ParticleTypes (#2120)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6fbd9087c4d6d37a401",
    "number": 2116,
    "body": "**Sponge API (that's here!)** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/2588) | [SpongeDocs](https://github.com/SpongePowered/SpongeDocs/pull/834)\r\n\r\nThe intent behind this is to harmonise the various templating systems to use a common bank of placeholders, and comes from initial ideas from when trying to rebuild my placeholder system for Nucleus. I thought that this would be valuable to have in Sponge some time ago (akin to Econ and Permissions), but [this forum post](https://forums.spongepowered.org/t/help-best-approach-for-a-chat-plugin/36135) kicked me into actually doing it. \r\n\r\nThis simply provides `PlaceholderParsers` that plugins can supply to the Sponge registry, and `PlaceholderContext` and `PlaceholderText` objects that templating engines can use \r\n\r\n* `PlaceholderParser`s will be registered centrally using the Sponge registry system such that there is a standard way for all plugins to get a placeholder, along with a standard way to include them in text constructions.\r\n* Consumers wanting a placeholder grab the appropriate `PlaceholderParser` from the Sponge Registry, and create `PlaceholderContext` objects to supply to the parser to get a concrete `Text`.\r\n* `PlaceholderText`s are `TextRepresentable`s that bundle the `PlaceholderParser` along with a `PlaceholderContext` so can be used easily within `Text.of(...)` or `Text.Builder`, minimising the effort required on the plugin side. The `Text` is evaluated at the time the text is built.\r\n\r\nPart of the ideas are from #1891, but notably, this PR does NOT include a templating system. This is intentional, to allow plugins to provide their own systems as they do now.\r\n\r\n---\r\n\r\n<details> \r\n  <summary>The original text from this PR is here, when there was also a service.</summary>\r\n\r\nThe text below is from the previous iteration of the PR, the service no longer exists, but the idea is about the same.\r\n\r\nThe intent behind such a service is to harmonise the various templating systems to use a common bank of placeholders, and comes from initial ideas from when trying to rebuild my placeholder system for Nucleus. I thought that this would be valuable to have in Sponge some time ago (akin to Econ and Permissions), but [this forum post](https://forums.spongepowered.org/t/help-best-approach-for-a-chat-plugin/36135) kicked me into actually doing it. \r\n\r\nThis is for discussion, particularly javadocs - is there anything I could do there to make them clearer?\r\n\r\n* `PlaceholderParser`s will be registered centrally using the Sponge registry system such that there is a standard way for all plugins to get a placeholder, along with a standard way to include them in text constructions.\r\n* Consumers wanting a placeholder can use this service to either parse a token, or they can go for a more DIY approach and supplying a builder (which is supplied by the service, rather than the normal thing of `PlaceholderText.builder()`, though I could do that I guess and just reference back to the service)\r\n* `PlaceholderText`s are `TextRepresentable`s so can be used easily within `Text.of(...)` or `Text.Builder`, minimising the effort required on the plugin side.\r\n\r\nThe basic idea is that you build a `PlaceholderText` with a `PlaceholderParser` and use that in `Text.of(...)` or ` Text.builder()` objects.\r\n\r\nThis service is replaceable, allowing for a plugin to support a superset of the required base - so for example, I could add my more advanced stuff in, or a dedicated placeholder plugin could make use of the service. Other plugins can also just make use of the parser registry if they wish - they don't need to parse via the service if they don't want to.\r\n\r\nPart of the ideas are from #1891, but notably, this PR does NOT include a templating system. This is intentional, to allow plugins to provide their own systems as they do now.\r\n</details>",
    "head_branch": "feature/placeholder",
    "is_a_fork": false,
    "comments": [
      "Could you add an example for both specifing and using those placeholders? Or will you write a docs PR as well?",
      "@ST-DDT I'll write a Docs PR, because at least then it's translatable.",
      "I've updated the API to include a `getParser` method - explanation why is on the javadocs. I've also added a Docs PR with some more information on how it works - please read that in tandem with this to understand the thought process.",
      "How about turning argumentString into a List<String> or something similar. That allows consistent parameter transmissions across plugins / avoids different separator/escape characters per plugin.",
      "> That allows consistent parameter transmissions across plugins / avoids different separator/escape characters per plugin.\r\n\r\nSo does a string. If a templating system is passing its own implementation specific escape strings then it's absolutely doing it wrong - only the templating system should care about its escape strings and should be removing them before passing them along. Futher, specifying that a plaveholder may accept a single argument string which it will manage itself is a simpler concept than asking systems to parse multiple arguments.\r\n\r\nNote that these placeholders have nothing to do with templating systems (from an API and design perspective) and so should not have to compensate for them. They are two different things.\r\n\r\n`PlaceholderParsers` are, in effect, mini commands and so they should parse an argument string in the way they see fit. They can use our command system if they want to.",
      "That’s the thought I had with that argument. It really can be whatever given the placeholder parser should be the one processing the arguments, whereas the request should only be sending them through. For my case, since I’ll need placeholders to be focused on a source that doesn’t implement the MessageReceiver interface, I very likely will consider using json or something along the lines for my parsers. \r\n\r\nSo in a sense, processing it exactly like a command makes sense.",
      "Here's a good discussion point\r\n\r\n> For my case, since I’ll need placeholders to be focused on a source that doesn’t implement the MessageReceiver interface\r\n\r\nThe choice of that return object as a `MessageReciever` wasn't particularly arbitary, because it's chat related. But, in many cases, the associated object isn't actually the _receiver_, but the _sender_. To take my use case, for example, a chat message sent by player X might be formatted like:\r\n\r\n```\r\n{{nucleus:prefix}} {{nucleus:displayname}} > here is my message\r\n```\r\n\r\nThe \"associated receiver\" in the `PlaceholderText` for these tokens would actually be the sender! But in another case, Nucleus' `/broadcast`, for example, the \"associated receiver\" is actually the receiver, except in the case of my special token `{{sender}}` - at this point, it's my templating engine that decides what the context is. So the method is named badly, really only named after the choice of `MessageReceiver` as the asssociated context.\r\n\r\nBefore people suggest the notion of \"receiver\" and \"sender\", that's not going to happen. Most, if not all, placeholders are going to need to consider at most _one_ \"associated\" object. For Nucleus' `{{displayname}}`, which context would I pick if both were provided?\r\n\r\nThe plugin and/or templating engine knows what it wants the placeholder to be about and should be the one to provide the \"associated context\". Remember what placeholders are: `TextRepresentable`s that require a little more information to know what to output.\r\n\r\nSo, should I make the \"associated receiver\" an `Object` and let plugins just do the checks they need on it? Or should it be some other bound? Considering that `MessageChannel`s support `Object` senders, there is precedent for the fomer. Just remember, the control of this object isn't in the placeholder's hands, but the plugin providing the message - no guarantees what it will be, just like the Cause!\r\n\r\n(I did consider the `Cause`, but the cause of a message is not the same as who the subject of a placeholder is. So that's out.)",
      "I've done some thinking on this, namely going as far as trying to consider a means of a placeholder parser being able to make some call to report a _potentially_ non-empty text only when it meets the source requirements of the parser. \r\n\r\nUnfortunately, I haven't been able to come up with a design for such a concept that'd be an acceptable way to do such. Thought of having a default method that will take in a class type and supplier for a Text, but given that the parse call will be the function calling this method more than likely, the whole block of code that should be in that parse function ends up as a supplier to the convenience function.\r\n\r\nAnyways, I believe an Object here for the associated receiver would be ideal, as it tremendously expands the range of possible placeholder values. This is one of the great things with Nucleus Placeholder Variables, as those allow for plenty of control over the input string. \r\n\r\nThe only case where I can see this being potentially disadvantageous would be for a message string that contains more than one placeholder expecting different sources. You could have something like `{{sponge:player}} is selling {{plugin:item_id}}`, where the item_id placeholder expects an ItemStack(Snapshot) or something similar. Both placeholders could be parsed individually, but the problem I see comes down to message services that only support the passing of a singular source. \r\n\r\nI could be overthinking the concept at this point, so correct me if I'm wrong here. ",
      "_Sorry for the long post, but there is a lot of text here to explain why this entire PR has been written the way it has, mostly to explain why it might seem simplistic._\r\n\r\n---\r\n\r\nLet's take it back a step and talk through what this is, why I've gone for the minimal set I have, and why adding Nucleus style variables was not proposed here (though they could be).\r\n\r\nRight now, we have Nucleus, UltimateChat, NanoChat, PlaceholderAPI<sup>1</sup> (the Sponge version), and FeatherChat (at least, we did), probably others, all offering chat customisation functionality. These systems come in two parts:\r\n\r\n* A way to provide variables in a message that require context to render (things that change, such as current server time or who sent a message) - the **placeholders**\r\n* A way to specify what the chat message will look like that contains these dynamic text placeholders - the formatting **template**\r\n\r\nTemplates are out of scope of this system because they operate entirely in the scope of the plugin generating a message - it makes little to no sense to require a central templating method. On the other hand, some plugins want to provide ways for server owners to add their information to player chat messages, amongst over things. Thus the ultimate goal of this PR is for plugins to provide placeholders these placeholders with little regard to templates.\r\n\r\nHowever, the templating engines **are** important and do need to be considered, in this system:\r\n\r\n* **Templates** supply the `PlaceholderText` and _adds_ the context\r\n* **Plugins** supply the `PlaceholderParser` which _acts_ on the context\r\n\r\nSo, say your plugin provides a `plugin:placeholder` placeholder, and I set Nucleus' chat message prefix template to:\r\n```\r\n{{nucleus:displayname}} {{plugin:placeholder}} > \r\n```\r\n\r\nand then I wrote a message, Nucleus would create a `PlaceholderText` that sets `getAssociatedReceiver()` (bad name, I know) to me, and there would be nothing more it could add. It would pass this to the `PlaceholderParser` which would then consider what to do with it.\r\n\r\n> The only case where I can see this being potentially disadvantageous would be for a message string that contains more than one placeholder expecting different sources. \r\n\r\nNote that a templating engine could decide different placeholders have different sources. In fact, for Nucleus' broadcast command, most placeholders have an associated source of the chat sender, but if Nucleus comes across the `{{sender}}` token, it replaces it with a \"displayname\" token with an associated source of the receiver. It is entirely up to the **templating** engine to decide what placeholders to fetch and what context to build into them.\r\n\r\n> This is one of the great things with Nucleus Placeholder Variables, as those allow for plenty of control over the input string.\r\n\r\n[Nucleus Placeholder Variables](https://github.com/NucleusPowered/Nucleus/blob/v2/S7/nucleus-api/src/main/java/io/github/nucleuspowered/nucleus/api/placeholder/PlaceholderVariables.java#L13-L135) are a way for a templating engine to provide additional context to a `PlaceholderText`-like object. It's basically a way to provide type safe context _by the templating engine_, in addition to the associated source and argument string (which is generally user specified)<sup>2</sup>.\r\n\r\nSo, to tie it in to the previous point, this would only become useful if you controlled the templating engine and/or built the `PlaceholderText` yourself - because the variables would be provided by the templating engine. As a result, given the usage of this will be primarily for chat plugins wanting to grab placeholders they know nothing about, I have opted to keep this simple by just supporting an associated object (usually the chat sender, but is the context the placeholder should use) and an argument string (which are effectively user specified options). I felt that the variable system was too complicated for this and was rarely/never going to be used because it _was_ generally used as an implementation detail between different parts of Nucleus - it was actually a `Map<String, Object>` and so was _very_ implementation specific. Suffice to say, it was originally born from laziness on my part and was actually slated for removal!<sup>3</sup>\r\n\r\nIt must also be said that there is no _requirement_ that the `PlaceholderText` object presented to `PlaceholderParser`s is the one provided by the service. You can roll your own that includes extra context that your templating system provides, that's totally okay. I plan to do this with Nucleus with the variable system, which is why this is specified as a service. As long as the `PlaceholderParser` and `PlaceholderText` conform to the API, any extensions of that, as long as they are properly checked for via `instanceof` checks and the like, aren't going to interfere with the way this system is envisaged to run.\r\n\r\n@NickImpact I hope this helps bring some clarity as to why variables are something I actually was keen to avoid.\r\n\r\n> I've done some thinking on this, namely going as far as trying to consider a means of a placeholder parser being able to make some call to report a potentially non-empty text only when it meets the source requirements of the parser.\r\n\r\nI'm not really sure what you mean by this, but if the `PlaceholderText` your parser is supplied doesn't contain the right information (or is not of the right type because it doesn't have the variables, see above) then you could just reject it with an empty text. If you have your own templating engine, or you use Nucleus' (which will still be available and will continue to have the variable system in a custom `PlaceholderText`), then output text, else, output nothing.\r\n\r\n---\r\n<sup>1</sup> PlaceholderAPI is a weird one in that it has a templating engine that _other_ plugins use, rather than managing chat itself, but I'll include it because it's relavent.\r\n<sup>2</sup> As an example, a `econplugin:balance` placeholder than may want to accept additional user input that specifies the currency type to get the balance from. How that is presented to the **templating** engine, we don't care, (Nucleus might do `{{econplugin:balance|GBP}}`, PlaceholderAPI might do `%econplugin:balance_GBP%` - we'd expect `getArgumentString()` to return `GBP` in both cases.)\r\n<sup>3</sup> But if there is enough support for it being central, I'll add it, I just don't see it being useful in the context above.",
      "Definitely makes sense, I think I was starting to think outside of scope and envision a little too far beyond based on the background of everything. If I made it sound like I was suggesting the addition of variables to this PR, that's my mistake. I wanted to reference them given you actually know the concept. \r\n\r\nGiven that, I believe my thoughts started to pander into the template system you're mentioning, which led me on the path to what I wrote up. I was thinking in terms of how I do things now where an entire string of text is translated based on one CommandSource and the variables, which does indeed go into the template system.\r\n\r\nAs for the point of confusion in the last bit of your response, that was based on some ideas I was trying to brainstorm for the earlier discussion idea, but the concept would have been unnecessary. \r\n\r\nAnyways, back to the topic of the PR, definitely agree with the simple approach, and I don't believe we will need variables with this system. I do believe there's power in using just an Object for the associated receiver, but I don't want to be the deciding factor on that detail. ",
      "> If I made it sound like I was suggesting the addition of variables to this PR, that's my mistake.\r\n\r\nMy comment was meant to explain to anyone else reading the issue thread what they were, and then explain why I didn't bring that over.",
      "I have added two methods to the service to make it clear a `Supplier<Object>` can be provided when creating `PlaceholderText`s. Similarly, added a `PlaceholderParser.Builder` for simple parsers.\r\n\r\nI do find myself wondering if the service is necessary and if we should just move parsers and texts into the text package. All this really provides is a registry for placeholders and a way to parse them, the service mostly just provides a way to get a parser given a token. I know I wrote the service but it might have been me overthinking it!\r\n\r\nI suspect we should keep it for now - see how it goes, revisit for API 8.",
      "> I suspect we should keep it for now - see how it goes, revisit for API 8.\r\n\r\nI would rather remove it, to avoid causing unnecessary steps when migrating to API 8 as an API user.\r\n\r\nAFAICT the service currently has two functions:\r\n\r\n1. token or alias to Parser mapping\r\n2. utility methods to create `PlaceholderTexts`\r\n\r\nRegarding the first point: We should encourage users to use the original ids instead of aliases, especially since the parameters are parser dependent. If we discover an actual need for it we can still add it later.\r\nRegarding the second point: Static helper methods would probably do the same job.\r\n\r\nWhat I don't like about the current approach is, that I need a `PlaceholderParser` to create a `PlaceholderText` but I there is a `parse(PlaceholderText)` method on the parser. What is supposed to happen if I create the PlaceholderText with parser A and pass it to parser B?\r\n\r\nTo avoid this problem you should change the PlaceholderParser to only have the following method or no such method at all:\r\n\r\n`newTextBuilder() : PlaceholderTextBuilder`\r\n\r\n\r\n-------------------------------------------\r\n<details>\r\n<summary>\r\nHow about a structure like this: (Click to expand)\r\n</summary>\r\n\r\n- `PlaceholderParser<T extends PlaceholderText.Builder> extends CatalogType`\r\n  - `newTextBuilder() : T`\r\n- `PlaceholderText extends TextRepresentable`\r\n  - `toText() : Text`\r\n\r\nThe `PlaceholderParser` is a catalog type, that does not contain any logic except creating a new builder.\r\nBy default, the PlaceholderText/Builder \"supports\" some basic options (those that are currently specified in the `PlaceholderText.Builder`), but the PlaceholderParser might as well return custom subclasses.\r\nTemplating plugins can then inspect those custom implementations for attributes to set or they just use the default ones.\r\nPlugin developers that invoke a specific parser (e.g. via catalog class) can use the setters to set specific values directly without guessing how to set it. E.g. set the format via `setFormat(\"#,###.00\")` instead of `setArgumentString(\"format=#,###.00\")`.\r\n\r\nExample:\r\n\r\n````java\r\ninterface PlaceholderParser<T extends PlaceholderText.Builder > extends CatalogType {\r\n\r\n    Class<T> getTextBuilderClass(); // <-- Optional, helper for templating plugin introspection (It would return interface class instead of impl class)\r\n\r\n    T newTextBuilder();\r\n\r\n}\r\n````\r\n\r\n````java\r\ninterface PlaceholderText extends TextRepresentable {\r\n\r\n    interface Builder<T extends Builder> extends ResetableBuilder {\r\n\r\n        T setAssociatedObject(Object object);\r\n\r\n        T setArgumentString(String argument);\r\n\r\n        PlaceholderText build();\r\n\r\n    }\r\n\r\n}\r\n````\r\n\r\n````java\r\nfinal class PlaceholderParsers {\r\n\r\n    public static final PlaceholderParser<BalancePlaceholderTextBuilder> BALANCE = ...;\r\n\r\n}\r\n````\r\n\r\n````java\r\ninterface BalancePlaceholderTextBuilder extends PlaceholderText.Builder<BalancePlaceholderTextBuilder> {\r\n\r\n    BalancePlaceholderTextBuilder setCurrencyId(String currencyId);\r\n\r\n    BalancePlaceholderTextBuilder setCurrency(Currency currency);\r\n\r\n    BalancePlaceholderTextBuilder setAddSendWithdrawTextButton(boolean add);\r\n\r\n    [...]\r\n\r\n}\r\n````\r\n````java\r\nclass BalancePlaceholderTextBuilderImpl extends BalancePlaceholderTextBuilder {\r\n\r\n    private Supplier<Currency> currencySupplier = () -> null;\r\n\r\n    BalancePlaceholderTextBuilder setCurrencyId(String currencyId) {\r\n        currencySupplier  = () -> toCurrency(currencyId);\r\n        return this;\r\n    }\r\n\r\n    BalancePlaceholderTextBuilder setCurrency(Currency currency) {\r\n        currencySupplier  = () -> currency;\r\n        return this;\r\n    }\r\n\r\n    BalancePlaceholderTextBuilder setArgumentString(String argument) {\r\n        argument.splitAsStream(\";\")\r\n                .map(s -> s.split(\"=\"))\r\n                .filter(s ->  s[0] == \"currency\")\r\n                .forEach(s -> setCurrencyId(s[1]));\r\n        return this;\r\n    }\r\n}\r\n````\r\n\r\n````java\r\nclass BalancePlaceholderText extends PlaceholderText {\r\n\r\n    Text toText() {\r\n        try{\r\n             Currency currency = currencySupplier.get().orElse(economyService.getDefaultCurrency()):\r\n             return Text.of(formatter.format(economyService.getBalance(getAssociatedObject(), currency)));\r\n        } catch (Exception e) {\r\n            return Text.EMPTY;\r\n        }\r\n    }\r\n\r\n    String getArgumentString() {\r\n        return joiner(\";\")\r\n                .addIfSet(\"currency\", currencySupplier)\r\n                .addIfSet(\"format\", formatter.getFormat()):\r\n}\r\n````\r\n\r\n````java\r\n// From code (known parser in dependency)\r\nPlaceholderParsers.BALANCE.newTextBuilder()\r\n        .setAccountOwner(player)\r\n        .setFormat(\"#,###.00\")\r\n        .toText();\r\n// From template/config (plugin X)\r\nmessages.show_current_player_balance=You have ${foobar:balance;format=\"#,###.00\"}.\r\nregistry.getCatalog(PlaceholderParser.class, \"foobar:balance\")\r\n        .setAssociatedObject(player)\r\n        .setArgumentString(\"format=\"#,###.00\") // Requires lookup from documentation\r\n        .toText();\r\n````\r\n<details>",
      "First thing I'm going to do is direct you right back to https://github.com/SpongePowered/SpongeAPI/pull/2116#issuecomment-624334776, that explains why things are separated.\r\n\r\n> The PlaceholderParser is a catalog type, that does not contain any logic except creating a new builder.\r\n\r\nThis is not going to happen at all. What you're suggesting is violating _exactly_ what I said about separating templates from parsers. The templating engine **does not care about the parser and its function at all**. It is not, and will not be, starting to inspect the variable and go \"hmm, so now I have to cast to placeholder X's builder, but wait, I have no awareness of the plugin, _what do I do_?\"\r\n\r\nIf a plugin wants to provide a way to make a specific text builder with specific parameters, I'm not going to stop them. If you know about the plugin, then what do you need this for? I'm also not going to require it, and make every parser implement a builder. That's madness. Think about what developers want to do. They want to say \"here's my context, this is the text I want to display based on that context\". Are you saying that I should start adding builders for context on commands? Commands do effectively the same thing as we're doing here, someone provides a string, the command parses it, neither have knowledge of the other.\r\n\r\n> Plugin developers that invoke a specific parser (e.g. via catalog class) can use the setters to set specific values directly without guessing how to set it. E.g. set the format via setFormat(\"#,###.00\") instead of setArgumentString(\"format=#,###.00\").\r\n\r\nThe `PlaceholderParser` can handle the string. **It is not for the templating engine to do.** For the same reason I was talking about removing the service, I am not about to add plugin dependent builders so that the templating engine has to be aware of other plugins. \r\n\r\n**The respononsibility for configuring the parser is the `PlaceholderParser` alone, with the parameters defined in `PlaceholderText`. The templating engine should simply pass on an argument string that the plugin has defined in their docs.**\r\n\r\nAll plugin developers who write templating systems should need to do is define something like `{{ testplugin:balance|current=GBP}}`, get the `testplugin:balance` parser, set the context, and pass the string `current=GBP` to it. The parser can then decide what to do with that. The templating engine has no role in this. It is a similar reason I didn't include Nucleus' \"placeholder variables\" system I talked about above.\r\n\r\nThe point of a `PlaceholderParser` is to simply say \"given this context, produce this `Text`\". The context is `PlaceholderText`. The `PlaceholderParser` holds no state. You might want to use the parser outside of a `Text.of()` context and just throw in different contexts. `parse(PlaceholderText)`. Plugin developers, by extension, have no reason to create `PlaceholderText`s. Keep it simple. They just want to add their own tokens (parsers) that recieve context (placeholder text).\r\n\r\nFinally, note it's only called `PlaceholderText` because it's usable in a `Text` object.\r\n\r\n> What I don't like about the current approach is, that I need a PlaceholderParser to create a PlaceholderText but I there is a parse(PlaceholderText) method on the parser.\r\n\r\nIt would be worth you reading the implementation to understand the logic, but it's basically so `PlaceholderText` can be used as a `TextElement` and know which parser to use.\r\n\r\n> What is supposed to happen if I create the PlaceholderText with parser A and pass it to parser B?\r\n\r\nImagine that I create a `PlaceholderContext` object that doesn't include the `PlaceholderParser` so it can't be used in Text objects, but otherwise has the same arguments. The basic sentiment of this will be \"it doesn't care\", it'll just use it. Unless it specifically checks for the parser, it's only going to care about the associated object and string. So it's really not a problem.\r\n\r\nIf you _really_ want it, I can make a `PlaceholderContext` that doesn't include the parser, so you have a context to pass around, but I didn't really think that people were going to use it that way.",
      "I actually have one more point to make that came to mind later, rather than edit the above, I'll add it as another comment:\r\n\r\n> Plugin developers that invoke a specific parser (e.g. via catalog class) can use the setters to set specific values directly without guessing how to set it.\r\n\r\nThat would require a dep on the plugin in question. In that scenario, either the parser class can be referenced directly and if a builder is supplied, it can discover it _without_ needing to rely on Sponge. So parsers really should not enforced to build `PlaceholderText`s at all, such a method is pointless.\r\n\r\nWhat I will probably do is separate out the text such that we have a `PlaceholderContext` that holds the associated object and string, and the `PlaceholderText` will be the following:\r\n\r\n```java\r\ninterface PlaceholderText extends TextRepresentable {\r\n\r\n    PlaceholderContext getContext();\r\n\r\n    PlaceholderParser getParser();\r\n\r\n    Text toText() { // impl will be something like\r\n        getParser().parse(getContext());\r\n     }\r\n}\r\n```\r\n\r\nIt changes very little, but will mean that the context has no dep on the parser whatsoever. I will not change anything else to complicate matters for templating systems or plugins that want to provide a simple placeholder - they can do it in one class or with our builder.\r\n\r\n---\r\n\r\nDo remember what this placeholder system is all about. It is about unifying all the current Placeholder based chat systems so that plugins can just provide placeholders and we can all use them. This is intended as a _simple_ way to provide a placeholder with a simple way for templating engines to interface with it without having to understand parsers. This puts the burden of correctly filling out the argument string on the user, as it should be, to make it simple for templating engines to do what they do best, provide a template.\r\n\r\nIf you want to get a text outside of this with a parameter builder, it might be worth asking the plugin developer to provide a builder outside of the parser altogether. That, however, is outside of the scope of what this will do.",
      "Thank you. I understand your argument, however I dont fully agree with it. We both stated our arguments, so there is no need to repeat them again.",
      "I've ditched the service and there are now simply three components: `PlaceholderParser`, `PlaceholderContext` and `PlaceholderText` - the service didn't add value as explained above, except to increase awareness of the system. Have a look at the added test plugin in the Common PR to see how it all fits together in code, simply put:\r\n\r\n* Plugins wanting to provide placeholders provide `PlaceholderParsers`\r\n* Templating plugins wanting to use placeholders grab these from the registry, fill out the `PlaceholderContext` (based on the token they've been provided, users should use the documentation of the plugins providing the placeholder to configure correctly) and optionally use a `PlaceholderText` to add the placeholder to `Text` objects.\r\n\r\nAs this is a little bit different from before because of the movement of stuff from PlaceholderText to PlaceholderContext and the removal of the service, I've dismissed the reviews - so a fresh look would be nice. The general idea is the same, however. Feedback is welcome on the javadocs etc. I'll update the Docs PR once this is all done and dusted."
    ],
    "commit_messages": [
      "Add simple Placeholder system\n\nThis enables plugins to register their own PlaceholderParsers to the Sponge registry, enabling plugins to provide and access placeholders without needing a third party plugin.\n\nNotably, this PR does NOT include a templating system. This is intentional, to allow plugins to provide their own systems as now.\n\nPart of the ideas from #1891"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6fcd9087c4d6d37a402",
    "number": 2114,
    "body": "This makes it easy and consistent to play effects, previously you had to use `playSound`, `spawnParticles`, `stopSounds`, or create a particle effect with firework effects.\r\n\r\nThis PR cleans that up and now there's a single method for `Viewer.play(PlayableEffect)`, supported `PlayableEffect` types are `SoundEffect`, `ParticleEffect`, `FireworkEffect`, `StopSoundEffects` (possibly a music disc related one, still TODO). `SoundEffect`, `StopSoundEffects` is also serializable, which makes it easy to use in config files.",
    "head_branch": "api8/effects",
    "is_a_fork": false,
    "comments": [
      "Seem to be missing `minVolume` for `SoundEffect`.",
      "@ItsDoot I don't see why `minVolume` is in the api.  You can easily do `Math.max(minVolume, volume)`, or am I missing something?",
      "Well, it's part of the `/playsounds` command, but doesn't seem to be part of the packet itself? So unsure what it actually does.",
      "@Cybermaxke Need this updated.",
      "Can `Location` (or `ServerLocation`) also be made a `Viewer`?",
      "@Cybermaxke Can you update this for Adventure?",
      "Superceded by Adventure or may return at a later date if deemed necessary."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6fdd9087c4d6d37a403",
    "number": 2112,
    "body": "SpongeAPI | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/2573) | [SpongeVanilla](https://github.com/SpongePowered/SpongeVanilla/pull/429) | [SpongeForge](https://github.com/SpongePowered/SpongeForge/pull/3149)\r\n\r\n### **Keys**\r\n- MAP_CANVAS - Key for obtaining the MapCanvas object from a map - represents pixels. **This is the only key that causes the pixels on the map to change immediately**, if required, offer a MapCanvas.blank() if you want to blank the map etc.\r\n- MAP_WORLD - Key for which world a map \"maps\".\r\n- MAP_LOCATION - Key for where in a world a world maps.\r\n- MAP_TRACKS_PLAYERS - Key for whether a map tracks players\r\n- MAP_UNLIMITED_TRACKING - Key for whether a map can track players from anywhere in the world.\r\n- MAP_LOCKED - Key for whether a map should update as a player explores it.\r\n### **DataManipulator**\r\nStandard stuff, has all the keys etc.\r\n### **Event**\r\nAdded a MapInfo creation event. This is fired when a new map is added to the server. (basically when a map file is created). This may not be caused by a player, it could be caused by a plugin.\r\n### **MapCanvas**\r\nA Map canvas represents the pixels on a map. It is made using a builder, which has basic paint methods, or you can create a canvas from an `java.awt.Image.` The image must be 128*128, and must be directly convertable to one of the MapColorTypes, with a shade. It can also be converted to a `java.awt.Image`\r\n### **MapColors**\r\nMap Colors represent a fully created color, which has had shading added. A MapColorType, does not have shading added. Theres a Registry and MapColorTypes for this.",
    "head_branch": "feature/mapapi",
    "is_a_fork": true,
    "comments": [
      "Is this intended to be a \"full\" map API with methods for creating canvases etc? If so it may be worth looking at the previous efforts for a map API here: #1162",
      "(Was also posted in discord)\r\nI have been thinking for a while about your comments and I think I have a solution. I create a MapInfo class as dualspiral suggested. This replaces a lot of the uses of the datamanipulator, and also holds the id for the map, but this will not be accessable via the api, it will purely be in the implementation. You will be able to create new MapInfo's, which will assign new ids as required, (technically it should be possible not to add a new map id until it is actually applied). There could be methods for checking if two MapInfo's refer to the same underlying data, that is, their int ids are the same, (they have been copied via crafting or copied by a plugin). You can get the MapInfo from a key, and the .getMapData(int id), will either be replaced with .getMapInfo(ItemStack itemStack), or removed. You would then be able to apply the MapInfo to an itemStack, which would change its id to the MapInfo's, unlinking it from previous ones meaning it shouldn't change ItemStacks unless they are copied/also applied the MapInfo to.\r\nUltimately, we need some reference to int id in the implementation, because thats how clients understand what goes where, but atleast this should eliminate any need for it in the API.",
      "MapInfo is a DataHolder, meaning it can be offered keys, all old keys that used to apply to ItemStacks, now work on MapInfo. We still have to use a backing of int ids because we need to send packets to the clients and identify them with int ids, but they are no longer exposed in the API.\r\n\r\nNot quite finished yet but I wanted to see if I was on the right track\r\n\r\nStill working on MapDecorations, currently they are mutable, as it seems like a huge annoyance to repeatedly reoffer them when you're only changing cordinates (which could easily be changed by a plugin every tick). Theres also quite a few complications to work out still.",
      "@dualspiral See if you can wrap this up with the op.",
      "@tyhdefu I'm sorry I've been quiet, I've been trying to get an initial implementation of commands set up on 1.14.4 so that's taken all of my time. That's nearly there though (!) so I figured I'd come revisit this.\r\n\r\nI've not attempted to run this yet, is it functional in the state it's in now? Do you have a test plugin or two that we can use to verify this?",
      "@dualspiral It was functional with the previous features, but I was working on being able to use custom MapDecorations. I do have a test plugin, but its mostly just commands that test different features since its not that easy to test as maps are a visual thing. I will try to finish that off, clean up anything. My hope is after this I will help get 1.14 running, then after that, hopefully implement a map api in 1.14 too.",
      "Alright, good news. The map api is now finished as I see it.\r\n\r\n*Why I think MapInfo should be a DataHolder*\r\n- It is mutable, like an entity\r\n- Changing its values has a direct consequence ingame\r\n- I think it fits better in the current style of having keys to access any data.\r\n\r\nI will resolve the review about it implementing DataHolder once we have agreed upon what if any action needs to be taken.",
      "Can we delete a `MapInfo` so we can reuse the map ID?\r\n\r\nI say remove rather than clear because if someone creates a new map, we will want to reuse the ID. If it's cleared but not removed, we can't reuse it.\r\n\r\nShould we have maps associated with a UUID too so we can get a specific map we know about? I guess there would be maintenance mapping UUID to map ID, but I can see that being useful too.",
      "> Can we delete a `MapInfo` so we can reuse the map ID?\r\n> \r\n> I say remove rather than clear because if someone creates a new map, we will want to reuse the ID. If it's cleared but not removed, we can't reuse it.\r\n> \r\n> Should we have maps associated with a UUID too so we can get a specific map we know about? I guess there would be maintenance mapping UUID to map ID, but I can see that being useful too.\r\n\r\nI like the idea of having a mapping to UUID. I think that this UUID probably would also need saving into the map files, (I think UUIDs need to be persistant across restarts. As for being able to delete maps, minecraft stores the highest known map id in a file called idcounts, which is how it knows what to set the next map id as. I think most likely the best way to implement a feature to delete maps would be to store a list of map ids that are free for use, (unless the highest map id is deleted). The problem with this, is that any map item with that map id, would not have any map attached to it, we would probably need some checks to say that its okay to have maps that don't exist. When a plugin added a map back, it would fill the id in, and all of sudden, unknowingly, a plugin has created a map info thats already linked to a map. At that point it seems pretty useless to delete maps, if the next map created will \"undelete\" it, with different data.",
      "Potetially, if we think there are going to be a lot of plugins that want to use temporary maps, I could write a service called \"MapRecycler\" or similar that you gave a certain amount of maps as a pool, then you requested a map, handed it out to a player, then deleted it from the player's inventory (and made sure it was not stored in a chest or similar), then marked it as recycled where it would be re-added to the pool. This service would make note of the UUIDs of the map pool, and would have to store it in config somewhere so that no maps were \"leaked\".\r\nAlso take note that 1.13+ uses an int instead of a short for the amount of maps. This means we would be able to have a lot more maps. Potentially at that point it could make sense to allow plugins to delete maps, which would delete the map file, and just let the map number progress upwards without having to worry about using a map hidden in a player's chest somewhere.",
      "As far as I know, this is complete and ready to merge.",
      "Gonna give this a review sometime this week if not today/tomorrow. Great work getting this fleshed out and implemented.",
      "So, thinking on this, all our work has pretty much shifted to API-8 and the Map API was implemented there. I don't think anyone has a particular interest in making the required changes to API-7 to get this working. I'm therefore going to close this and associated PRs.\r\n\r\nI will note (again) that this work was not wasted as it is in API-8, thanks @tyhdefu."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6fed9087c4d6d37a404",
    "number": 2111,
    "body": "A general cleanup of the text API, mainly to make the API more clear and fix some inconsistencies.\r\n\r\nChanges:\r\n- Remove TextActions and move factory methods to their classes. E.g. `HoverAction.showText(..)`\r\n- Add CopyToClipboard click action.\r\n- Remove all the \"Creates a new builder with the formatting and actions of the specified text and ...\" methods, I think they avoid confusion among all the other factory methods.\r\n- Add factory methods to subclasses, most translation factory methods are now only found in `TranslatableText`.",
    "head_branch": "api8/cleanup-text",
    "is_a_fork": false,
    "comments": [
      "@Cybermaxke Need this updated.",
      "Closing as @kashike is working on a complete replacement for this part."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e6ffd9087c4d6d37a405",
    "number": 2110,
    "body": "These functions have been deprecated and replaced with `whilst` and `select`, along with clearer javadocs.\r\n\r\n~~* Fix bug where a BlockRay containing a ContinueAfterFilter will give a different result upon ray reset.~~\r\n\r\n@Zidane - I did see your comments, but I mostly used Github for the diff! This is a better thing to review.\r\n\r\nNote that `selectWhen` is what you suggested `completeWhen` should be. In my first iteration, I got the function of `skipFilter` wrong... - `selectWhen` is meant to indicate there can be multiple selections, they just have a `BlockRay#next()` call between them.",
    "head_branch": "update/block-ray-7",
    "is_a_fork": false,
    "comments": [
      "Okay, so, something I've noticed in the javadocs:\r\n\r\nhttps://github.com/SpongePowered/SpongeAPI/blob/f12f8e7743844b8761b890ce3e440911e97c6f38/src/main/java/org/spongepowered/api/util/blockray/BlockRay.java#L68-L71\r\n\r\ndirectly conflicts with the existance of a `reset()` method...\r\n\r\nhttps://github.com/SpongePowered/SpongeAPI/blob/f12f8e7743844b8761b890ce3e440911e97c6f38/src/main/java/org/spongepowered/api/util/blockray/BlockRay.java#L189\r\n\r\nmeaning that resetting a ray and re-iterating could end up with a different result. \r\n\r\n~~I have fixed it for our `ContinueAfterFilter`, but if we want to do this for external filters, we might need to introduce the concept of a \"resettable\" predicate...~~ no, I haven't, and no, I won't, given how we're going to ask plugin authors to compose their own predicates instead...",
      "I've had a think, but I couldn't come up with a better word than \"whilst\" to avoid a Java keyword, unless we use \"whileTrue\".\r\n\r\n@Zidane Any more thoughts on this yourself or does it look okay? Don't want to accidently let this fall into the abyss.",
      "Does anyone have any more comments on this? Want to merge this soon. Particularly the method names - `select` is fine, but currently using `whilst` as `while` is a reserved keyword. Any better ideas?"
    ],
    "commit_messages": [
      "Add select and whilst to BlockRay\n\nAdd new functions to replace stopFilter and skipFilter\r\n\r\nThese functions have been deprecated and replaced with whilst and select, along with clearer javadocs."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e700d9087c4d6d37a406",
    "number": 2108,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/2565)\r\nhttps://github.com/SpongePowered/SpongeCommon/issues/2545",
    "head_branch": "api8/keys",
    "is_a_fork": false,
    "comments": [
      "I added some comments related to key naming, we should try to name them that there won't be a lot of conflicts in the future. I will revisit some of them when I finish my duration PR, but that's nothing to worry about right now. For `Boolean` keys, I would like to use proper prefixes like `IS_`, `HAS_`, etc. for consistency across keys, I now that's currently not the case, but at some point I will clean that up."
    ],
    "commit_messages": [
      "API8 Keys"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e702d9087c4d6d37a407",
    "number": 2107,
    "body": "Continuation of https://github.com/SpongePowered/SpongeAPI/pull/2007\r\neverything in this PR will be revisited for the latest changes of the API-8 branch and the discussion there. Still WIP\r\n\r\nThe java `Duration` will be replaced by a custom one, which has two subclasses `Ticks` and `Time` (renaming is an option), explicit conversion is needed between these two durations if you want to use methods like `toSeconds` or `toTicks`. \r\n\r\nIf you pass in a time based duration to something that in vanilla uses ticks, it will be converted to ticks based on the engine performance. If you want to ticks exactly, you'll have to pass in a tick based duration. There are methods for performance based and optimal conversions.\r\n\r\n`Engine.getEstimatedTime`, `Engine.getEstimatedTicks` - performance based conversion\r\n`Duration.toTicks`, `Duration.toTime` - optimal conversion, assumes every tick is 50ms",
    "head_branch": "better-duration",
    "is_a_fork": false,
    "comments": [
      "I heard that `java.time` interfaces will be sealed, but i'm not sure. So this may break compatibility with future java versions\r\nhttps://openjdk.java.net/jeps/360",
      "@Cybermaxke Would this mean all Task scheduling in Sponge will be Tick based? Or can we still use exact time?",
      "@Pulverizer You can still use both. E.g. you use `Duration.ofTicks` you'll get tick based scheduling, if you use `Duration.ofSeconds` you'll use time based scheduling.",
      "@XakepSDK Where did you hear that it will be sealed? I can't find any information about it.",
      "@Cybermaxke amber or valhalla mailing list, but i'm not sure if it was about making these classes inline or inline and sealed",
      "I feel that changing the wording of classes and documentation to use \"cycle\" instead of \"tick\" may confuse users that are used to calling a game cycle a \"tick\", eg. from using a different API.",
      "I think it's not worth.\r\n1. It adds maintenance burden\r\n2. Increases API complexity\r\n3. Nobody really will implement SpongeAPI outside of vanilla minecraft. Look at bukkit, there are several implementations like glowstone, but nobody really uses them and none of them are actually have full game features\r\n4. If somebody will implement SpongeAPI, it's his work to interpret ticks, ticks are standardized in vanilla, so implementor can easily implement ticks mechanism on top of his engine which may have no real ticks",
      "I don't think it will add a maintance burden, sure you need to implement it, but after that's done you don't have a lot of maintance. \r\n\r\nSure it adds a new data type, but it will make the API more clear what's expected, there are places where ticks are expected, milliseconds, seconds, etc. all represented by a long or int. This makes it clear that a duration is expected, and you can't be mistaken by the unit. It also makes the API easier to use for people who don't care about ticks and just want things to happen based on time, which I think are the most cases.\r\n\r\nOfc other projects like lantern will benefit from this change, but that's not the main reason to do this. Even the sponge has a realtime module that could benefit from this change.",
      "I'm using `j.t.Duration` in my plugins. Can sponge duration class renamed to something else?\r\n\r\nAlso would be good if sponge time classes implement `java.time` classes, even if `java.time` may become sealed. I think it's too preemptive to not implement `java.time`, it adds more mental complexity for a developer.",
      "@XakepSDK I wouldn't mind renaming it, but I'm not able to come up with a good alternative name. And yeah, it makes sense to implement the TemporalAmount interface, but only for `Duration.Time`.",
      "An alternative naming scheme could be `Duration` -> `TimeDuration`, then `Duration.Time` -> `TimeDuration.Real`. Then at least they don't conflict with java.time.Duration in the same class.",
      "I can't understand how it will work.\r\n1. Let's imagine i submit task to execute every tick using `Tick` time.\r\nTask will be executed every tick?\r\n\r\n2. Let's imagine i submit task to execute every second using `Time` time and current TPS is 20.\r\nTask will be executed every 20 ticks?\r\n\r\n3. Let's imagine i submit task to execute every second using `Time` time and current TPS is 10\r\nTask will be executed every 10 ticks?",
      "@XakepSDK\r\n\r\n1 -> Yes, since you used \"ticks\" with `Duration.Ticks`\r\n2, 3 -> No, you used `Duration.Time`, so it will use the clock time, so it will be a realtime second\r\n\r\nTicks and real time tasks were always a thing in sponge, e.g. if you used `TaskBuilder.delayTicks` it would use tick based scheduling, if you used `TaskBuilder.delay` it was time based scheduling.",
      "Then, i think, it would be better to:\r\n1. Introduce `Tick` `TimeUnit`, expose as `Supplier<TickUnit>` in API, so engine can implement it\r\n2. Implement `TickDuration` `TemporalAmount`, API like in `Duration`\r\n3. In API, accept `TemporalAmount` everywhere, so implementation could:\r\n3.1. Check if it's `TickDuration` and use ticks\r\n3.2. Or calculate time manually based on `TemporalAmount`\r\n\r\nSo `Duration.of(...)` or `Period` or etc for real time clock and `TickDuration.of(...)` for engine clock",
      "\"Ticks Are Not Time Units and Should Not Be Treated As One\" is something said by @dualspiral in the discussion of the previous PR and I agree with that. That's why I want to enforce explicit conversion between normal and tick based durations, and not implementing `TemporalAmount` because that would break the explicit conversion.",
      "I'll rename `Duration` to `EngineDuration`, this was a suggestion I did in the previous PR.",
      "Superceded by the ticks framework. Thanks for the work on this Cyber, really helped devise a compromise."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e703d9087c4d6d37a408",
    "number": 2106,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/2554)\r\nChests can only be connected to one other chest now in Vanilla.",
    "head_branch": "update/chests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update Chest API for new merging logic. (#2106)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e704d9087c4d6d37a409",
    "number": 2105,
    "body": "ClientPlayers cannot exist on a Server ever.\r\n\r\nMy weird raid javadoc spelling",
    "head_branch": "fix/docs1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Javadoc fixes. (#2105)\n\nClientPlayers cannot exist on a Server ever."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e705d9087c4d6d37a40a",
    "number": 2104,
    "body": "For discussion, @dualspiral .\r\n\r\nSigned-off-by: Chris Sanders <zidane@spongepowered.org>",
    "head_branch": "feature/chunk-save",
    "is_a_fork": false,
    "comments": [
      "For note, associated PR: https://github.com/SpongePowered/SpongeCommon/pull/2551\r\n\r\nIs this good to go, or is there more to consider? Anyone else have any comments on this?"
    ],
    "commit_messages": [
      "Add SaveChunkEvent.\n\nSigned-off-by: Chris Sanders <zidane@spongepowered.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e706d9087c4d6d37a40b",
    "number": 2103,
    "body": "",
    "head_branch": "fix/biomesupplierhotfix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add supplier overload for persisted biome type (#2103)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e707d9087c4d6d37a40c",
    "number": 2101,
    "body": "As per Zidane's request with #2091 ",
    "head_branch": "tradeoffers2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add new features to trade offers. (#2101)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e708d9087c4d6d37a40d",
    "number": 2098,
    "body": "Just for review before merging - some docs were missing, incorrect, leaked implementation detail or incorrectly formatted.",
    "head_branch": "update-jd-72",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update Explosion and sound event javadocs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e709d9087c4d6d37a40e",
    "number": 2097,
    "body": "`requirePermission` doesn't actually make an element optional, sometimes you might want that. Due to the way `optional` works, I ended up deciding that a new API method was the best way to suit the needs of people who want `requirePermission` to only parse an element if a player has a permission, else it is ignored by the parser.\r\n\r\nUnit tests added to suit.\r\n\r\n* Also don't put [] around usage text that is empty when wrapping element in \"optional\" or \"optionalWeak\"\r\n\r\nSee #2083",
    "head_branch": "feature/optional-permission",
    "is_a_fork": false,
    "comments": [
      "b3236fa8281059ff30e74b59d5bcffe9bae60803"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e70ad9087c4d6d37a40f",
    "number": 2096,
    "body": "We have 3 way to get the hand used in an interact event:\r\n\r\n1. a method: `HandInteractEvent#getHandType`\r\n2. specific sub events: `X.MainHand` and `X.OffHand`\r\n3. `EventContextKeys.USED_HAND`\r\n\r\nThis is overly verbose, unnecessary and confusing to a degree.\r\nThis PR removes 1. and 2. \r\n",
    "head_branch": "hand-events",
    "is_a_fork": true,
    "comments": [
      "1. may need to return(ish, in a different form), as per https://github.com/SpongePowered/SpongeAPI/issues/1975",
      "@ImMorpheus Status on this?",
      "Nothing to add on my end.\r\n\r\nEDIT: I didn't mean to close it"
    ],
    "commit_messages": [
      "Remove HandInteractEvent and sub events (#2096)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e70bd9087c4d6d37a410",
    "number": 2091,
    "body": "Adds Supplier overloads in many methods for CatalogTypes, this one mainly covering builders. Of course more of these commits will come along in time to handle all the Supplier overloads.",
    "head_branch": "supplieroverloads",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add supplier overloads to all builder methods"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e70cd9087c4d6d37a411",
    "number": 2088,
    "body": "A work in progress mix of ideas for the economy service. I haven't worked with this API necessarily too much on my own nor have I worked on Sponge recently, so looking for feedback on everything.\r\n\r\nA large question I have is how do you feel about if the API should be modified to use `CompletableFuture`s where appropriate similar to the permissions service since some implementations may have network wide economies. \r\n\r\nCloses #1588 \r\nFixes #1501 ",
    "head_branch": "feature/8-economy",
    "is_a_fork": false,
    "comments": [
      "I say the following realising that you've basically looked at #1588 and created API methods for that - a lot more thought needs to go into it though. \r\n\r\nReading this, I'm a little concerned that this is adding complexity where the vast majorty of cases don't need it. As a plugin developer who uses the economy API to query, withdraw and deposit, I want to make sure I can simply ask the API to perform a transaction... and that's it. I do not care about account status, nor do I want to care.\r\n\r\nRight now, I do that on a per account basis. I get the player's account and withdraw a specific currency, reversing the transaction if things go awry. That's simple. However, now I'm going to have to get all the accounts for an owner, and then have to choose one (how? probably the first.) then withdraw, and if that doesn't succeed, try the next one, etc. etc. You've now added much in the way of boilerplate for plugin developers who simply want to access an account.\r\n\r\nI would say that some of these changes are just going to serve to confuse plugin developers, particularly consumers. I am concerned that some of the suggestions in #1588 have  \"what could economy plugins do\" in mind, rather than \"how could a plugin _use_ an economy\" - it's very important to realise that **the latter** is what this API is for, not the former.\r\n\r\nSpecific thoughts:\r\n\r\n* Some things feel overly specific. Do I care if an account is frozen? I see no `setFrozen` counterpart for a start. Is it important that all econ plugins have this, that is, should a third-party be able to set frozen status, or is this just a feature of an economy plugin and doesn't matter to the wider consumer?\r\n\r\n  I can tell you now, as a plugin developer, I'm not going to bother checking to see if the account is frozen before attempting a withdrawal. I'm just going to do it. The result will tell me it failed and why, but I'm probably not even going to care for that.\r\n* `AccountType` should actually be `AccountArchetype`, and I would probably only use it as a template to create an account, actually storing min/max etc. on the created account itself (thus avoiding issues if the type is removed in the future). In fact, I'd actually just remove this and make `createAccount` on the service return a builder. Plugins shouldn't need to create account types to create an account, IMO - especially as in 8 you'll need to create all the account archetypes you'll ever need during data registration events on startup. \r\n* Some of the javadocs specify \"optional\" behaviour, such as priorities and such, but that's going to confuse developers who use the API. Delete all traces of \"optional\" behaviour. When writing the API and associated docs, plugin developers simply want to know what to do, not what might be the case. I certainly don't want to start check other parts of the API to see what I want to do. \r\n  \r\n  If order is potentially important, it's always important. Either order matters, or it doesn't.\r\n* If you **must** add implementation notes that consumers don't need to care about, make it explicit that it's an implementation note.\r\n* The `EconomyTransactionEvent` is not currently cancellable. Should it be? It probably should, considering everything else you can do. For a \"frozen\" account, should this be fired but in a cancelled state? Why can you access the result before the event completes (especially as you can alter the transaction in that event). Should it be settable, and set a cancellation state on that? That event needs a lot more thought going into it and the workflow - right now you've just added a lot of methods to it.\r\n\r\nWe need to talk to consumers of this API, as well as implementors. More thought needs to go into this.\r\n\r\n---\r\n\r\nOn `CompletableFuture`s ... eh. The intention of the API is that it can run async directly. A common misconception (and one I saw in Discord the other day) is that `CompletableFuture` means \"run this off thread\". It does not. It means that it _might_ spawn another thread to do the work, and so in the case of our API, indicates that the method is for use on the main thread, but that the result might come later.\r\n\r\nThe question is basically, is there a use case for having a delayed economy result? If not, then no, because everyone will `join()` anyway.",
      "Things that were changed but I think should not be:\r\n\r\nI preferred the old package name for the event. It's much more convenient to have every class related to a service, in the package for that service.\r\n\r\nI don't see the use-case for AccountType. If it's a catalog type implemented by the provider plugin, then consumer plugins can see that two accounts have different types, but since both types are meaningless, this isn't something that helps the consumer plugin.\r\n\r\nThings that were not changed but I think should be:\r\n\r\nEverything in the API is meant to interoperate with the CauseStackManager; explicit use of Cause is only seen in events. I think the Cause parameter in the EconomyService methods should be removed.\r\n\r\nIn the EconomyTransferResult class, you can get an error value for the result type, but you can't get *which* account caused that error.\r\n\r\nThere is no mechanism for commands selecting accounts; String can be used but there is no tab-completion. A method on EconomyService to create a whatever-replaced-CommandElement for economy accounts would be great.\r\n\r\nThings that I disagree with @dualspiral about: \r\n\r\nI like how many different options for results there are. This is a case of increased available functionality without increased complexity, since if you don't care what the problem was you can just get an error message string. Unlike AccountType this is something that *neither* party has to handle if they don't want to, meaning that a blue-moon use-case is a good enough reason to put it in.",
      "> I don't see the use-case for AccountType. If it's a catalog type implemented by the provider plugin, then consumer plugins can see that two accounts have different types, but since both types are meaningless, this isn't something that helps the consumer plugin.\r\n\r\nAs I pointed out above, shouldn't these properties just be set on the account? Account min/max limits should probably be mutable too (you might have a server which grants you a larger account balance limit for finding the holy grail, or some overdraft facility for cosying up to a staff member), so certainly don't fit in this rigid notion of an account type.\r\n\r\nIt really should be removed.\r\n\r\n> Everything in the API is meant to interoperate with the CauseStackManager; explicit use of Cause is only seen in events. I think the Cause parameter in the EconomyService methods should be removed.\r\n\r\nFor context, I believe the Economy API was designed to be called async - which is why a specific `Cause` was provided as that doesn't work with the CSM (yet). It is also a hint to the implementor to say \"hey, you need this\".\r\n\r\nWe could remove the parameter. We could also _explicity_ define the system as being callable async. That's something else we should be considering here. I know Pieconomy would need to run on the game loop, but most of impls will be using database backed storage - which is where the whole `CompletableFuture` question comes from.\r\n\r\n> A method on EconomyService to create a whatever-replaced-CommandElement for economy accounts would be great.\r\n\r\n~~It's a catalogue type, right? If it's not, it possibly should be. In that case, that'll fit with the replacement of `catalogedElement`.~~\r\n\r\n> I like how many different options for results there are.\r\n\r\nI'd like to point out I didn't say I wanted this gone. I said that I wouldn't check it. I'd check to see if it's successful, and I'd likely display the message to the end user if it wasn't. That's quite different to wanting it gone.\r\n\r\nAs it stands, they will be registerable by economy plugins and so anything that is specfic to an economy plugin will still be discoverable. The API should only provide default reasons for actions that are exposed by the API - the only one I actually want to see gone is the one to do with accounts being frozen - that has nothing to do with the API and there is no (longer) exposure of that concept. It should not be there. A plugin can create that reason if you want.\r\n\r\nTo be honest, in theory, there is actually no need for them to be catalogable or even defined in the API. Most plugins will **only** care about the successfulness, and will then return the message in the result. I don't think they should be removed though, if only to provide a sanity check for econ API implementors to ensure they don't miss error conditions.",
      "> It's a catalogue type, right? If it's not, it possibly should be. In that case, that'll fit with the replacement of catalogedElement.\r\n\r\nAccounts are definitely not catalog types and I have no idea why they would be.",
      "> \r\n> \r\n> > It's a catalogue type, right? If it's not, it possibly should be. In that case, that'll fit with the replacement of catalogedElement.\r\n> \r\n> Accounts are definitely not catalog types and I have no idea why they would be.\r\n\r\nI agree, but a dedicated `AccountCommandElement` would definitely be useful. At least as an optional/defaulted command parameter.",
      "> Accounts are definitely not catalog types and I have no idea why they would be.\r\n\r\nMy mistake. Read it as currency, not accounts.",
      "I randomly was just having another thought about this and wanted to get my thoughts down while I was thinking them. It links back to @pie-flavor's comment:\r\n\r\n> I preferred the old package name for the event. It's much more convenient to have every class related to a service, in the package for that service.\r\n\r\nI completely agree. In this instance I am putting my foot down and **requesting** that it is returned back to what it was previously. It means that plugin implementors know everything they must implement by looking at the service package. If it is all scattered, I guarantee that economy plugin developers will simply forget those events exist and will not implement them. If I was looking to create an economy plugin, I'd just want everything there, in one place.\r\n\r\nPackage names, conventions, etc. are important, but I would argue that our structure is mostly built around our own implemention. Plugins in general need to use interfaces we provide the implementation for. In this case, the Economy API, it is almost entirely in plugin-implemented land. The _only_ thing I can kind of potentially relent on is the result based classes, but even then I feel like they should remain in the service package.\r\n\r\nThe gist of it looks to be that user implemented services and associated events (econ and permissions, at this stage) should be kept together in the same base service package to improve discoverability for implementing plugins. If we were to make economy a standalone repo in the future, then little to nothing would then have to change, like we're already looking at with permissions...",
      "Closing as this PR has a few issues and no activity has happened in months. Correct these issues and we'll re-open."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e70dd9087c4d6d37a412",
    "number": 2087,
    "body": "",
    "head_branch": "fix/small-warnings",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix javadoc and checkstyle warnings (#2087)\n\n* Fix various Javadoc warnings\r\n\r\n* Fix remaining checkstyle warnings"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e70ed9087c4d6d37a413",
    "number": 2085,
    "body": "Definitely not complete or structured entirely. A few things definitely need to be moved around into proper packages.\r\n\r\nThe system is based off this:\r\nhttp://minecraft.gamepedia.com/Attribute\r\n\r\nReplaces #1428 ",
    "head_branch": "feature/attributes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Entity Attribute api (#2085)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e70fd9087c4d6d37a414",
    "number": 2084,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/2454) | [SpongeForge](https://github.com/SpongePowered/SpongeForge/pull/3048)\r\n\r\nSimilar to the existing `SerializationBehaviors.NONE`, except it continues to store all information other than chunks. Useful for cases when `NONE` causes mods to break.",
    "head_branch": "save-off",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge SerializationBehaviors.METADATA_ONLY addition. Merges #2084\n\nSigned-off-by: Gabriel Harris-Rouquette <gabizou@me.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e710d9087c4d6d37a415",
    "number": 2082,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/2481)\r\n\r\n### Recipe Types ###\r\n- CRAFTING\r\n  - `ShapedRecipe`\r\n  - `ShapelessRecipe`\r\n  - `SpecialRecipe` (Recipes with coded conditions/results and no recipebook entry)\r\n- `AbstractCookingRecipe`\r\n  - SMELTING `FurnaceRecipe`\r\n  - BLASTING `BlastingRecipe`\r\n  - SMOKING `SmokingRecipe`\r\n  - CAMPFIRE_COOKING `CampfireCookingRecipe`\r\n- STONECUTTING `StonecuttingRecipe`\r\n\r\n### Registry ###\r\nThe old specialised RecipeRegistries get replaced by the one RecipeRegistry with RecipeType Parameters where needed.\r\n\r\n- `Optional<Recipe> getById(CatalogKey)`\r\n- `Collection<Recipe> getAll()`\r\n- `Collection<T> getAllOfType(RecipeType<T>)`\r\n- `Collection<T> findByResult(RecipeType<T>, ItemStackSnapshot)`\r\n- `Optional<Recipe> findMatchingRecipe(Inventory, World)` \r\n- `Optional<SmeltingRecipe> findSmeltingRecipe(RecipeType<T>, ItemStackSnapshot)`\r\n- `Optional<RecipeResult> getResult(Inventory, World)`\r\n\r\n### Building Recipes ###\r\nimplementing Interface will not be supported anymore (replaced by SpecialCraftingRecipe)\r\nrecipes no longer have name/translation\r\n\r\nBuilders for \r\n- ShapedCraftingRecipe\r\n- ShapelessCraftingRecipe\r\n- SpecialCraftingRecipe (replacement for implementing interface ; possibly with emulated recipe book entry)\r\n- StoneCutterRecipe\r\n- SmeltingRecipe (RecipeType<SmeltingRecipe> determines in what block it works - requires multiple registration for different types)\r\n\r\nnew Builder Features\r\n- exp for SmeltingRecipe\r\n- cooktime for SmeltingRecipe\r\n- copy ingredients from other recipe (to replace it)\r\n- group (grouping recipes in the recipe book)\r\n\r\n#### Ingredients ####\r\nIngredients for the recipe book are lists of:\r\n`net.minecraft.item.crafting.Ingredient.SingleItemList` (one item matching and item id)\r\n`net.minecraft.item.crafting.Ingredient.TagList` (all items matching an item tag)\r\nSpecialRecipes don't use Ingredients, but instead implement `boolean matching(inventory, world)`\r\nBy providing exemplary ingredients we can maybe emulate the recipe book entry.\r\n\r\n### Registration ###\r\nOnly during `RegistryEvent.Catalog<Recipe>`.\r\nA recipe matching the same ingredients as another recipe will override it.\r\n______________________\r\n\r\n### related mc classes ###\r\n\r\n`net.minecraft.item.crafting`\r\n`net.minecraft.data.RecipeProvider`",
    "head_branch": "api8/recipe",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "API8 Recipes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e711d9087c4d6d37a416",
    "number": 2081,
    "body": "This puts all the Value.Mutable blah blah blah in the BlockEntity classes. This is here to check incase I've added Values to things that don't apply to BlockEntities or some blatantly missing ones are not there.\r\n\r\n~~So far there are two obvious values I have not done yet (DISPLAY_NAME for BlockEntities) and all of the `STRUCTURE` keys due to the optionality of the methods depending on the specific state of the Structure Block.~~\r\n\r\nRenames `PlayerHead` -> `Skull` to match the vanilla impl since all heads/skulls share the same BlockEntityType. Also the `representedPlayer` data value is now `Optional`.\r\n\r\nRenames `ComparatorType` -> `ComparatorMode` as per Zidane's request.\r\n\r\nChanges `Keys#REPRESENTED_PLAYER` to a simple `Keys#GAME_PROFILE` for the Skull.",
    "head_branch": "missing_blockentity_data",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Put all the BlockEntity values in the BlockEntities and rename PlayerHead -> Skull to match the vanilla BlockEntity impl and make representedPlayer Optional. (#2081)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e712d9087c4d6d37a417",
    "number": 2080,
    "body": "Also add a Key related to the new data value in the Vex.",
    "head_branch": "missing_entity_data",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add missing data values to ItemFrame, Sheep and Vex. (#2080)\n\nAdd a Key related to the Vex."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e713d9087c4d6d37a418",
    "number": 2079,
    "body": "",
    "head_branch": "fix/enderman",
    "is_a_fork": true,
    "comments": [
      "Merged manually. Thanks as always i50."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e714d9087c4d6d37a419",
    "number": 2078,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/2474)\r\n\r\nAdded several missing methods, without which it is impossible to transform rails and logs.\r\n\r\nResolves: https://github.com/SpongePowered/SpongeAPI/issues/2026",
    "head_branch": "feature/rail-direction-and-log-axis",
    "is_a_fork": true,
    "comments": [
      "@dualspiral Yay or nay?",
      "No, too many issues as it stands and I'm not sure how much of an impact it'll make.",
      "Given the fact that in API 8 it became possible to easily transform any blocks, including from modifications, this PR now does not make much sense, so I will close it (and the implementation PR)."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e715d9087c4d6d37a41a",
    "number": 2077,
    "body": "",
    "head_branch": "fix/entity_values",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2077 from i509VCB/fix/entity_values\n\nAdd missing entity data values, Sittable and Spawner"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e716d9087c4d6d37a41b",
    "number": 2076,
    "body": "This adds the TropicalFishShape catalog and adds Data values to the Tropical fish (baseColor, patternColor and shape).",
    "head_branch": "add/cat_food",
    "is_a_fork": true,
    "comments": [
      "Only mistake I see is missing adding this to TypeTokens.\r\n\r\nGreat job.",
      "Sorted Type Tokens properly and added type tokens. "
    ],
    "commit_messages": [
      "Merge pull request #2076 from i509VCB/add/cat_food\n\nAdd TropicalFishShape Catalog and Data values to Tropical Fish."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e717d9087c4d6d37a41c",
    "number": 2075,
    "body": "~~This is a sister PR to https://github.com/SpongePowered/SpongeCommon/pull/2455~~\r\n\r\nAdds Pillager Outpost to Features and BigMushroomConfig\r\n\r\nWorld gen impl will be handed in a different PR much later when the implementation starts.\r\n\r\nCurrently this PR just removes FeatureConfigs which don't exist anymore and adds the Pillager Outpost to Features.\r\n\r\n~~This PR will add missing features which were added in the near future and specify some detail about each feature config.~~\r\n\r\nAlso I've noticed one of my past PRs had tabs in the classes so I nuked those.",
    "head_branch": "feature/wgen/configs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove non-existant feature configs in 1.14.4 and add Pillager Outpost to Features. (#2075)\n\nDetabification"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e718d9087c4d6d37a41d",
    "number": 2074,
    "body": "Adds the DISABLE_RAIDS GameRule into GameRules\r\n\r\nChanges suggested id of LIQUID CarvingLayer actually to LIQUID instead of air.\r\n\r\nAdds a bit of Client related javadoc to LocalServer and ClientWorld.",
    "head_branch": "feature/little114tweaks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2074 from i509VCB/feature/little114tweaks\n\nA few tweaks [1.14]"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e719d9087c4d6d37a41e",
    "number": 2073,
    "body": "**This adds some new events (#2068):**\r\n\r\nRingBellEvent (Needs to have a way to get a list of all villagers which will hear the bell ring).\r\n\r\nVillagerEvent.ProfessionChange\r\nVillagerEvent.ProfessionLevelUp\r\nVillagerEvent.Panic\r\n\r\nTradeMerchantEvent\r\n\r\nRaidEvent.Start\r\nRaidEvent.StartWave\r\nRaidEvent.End\r\n\r\n**Other additions:**\r\n\r\nAdds a new Key to get a Villager's Profession level.\r\n\r\nAdd a way to reference all the Raids within a world, inside of ServerWorld. (#2069)",
    "head_branch": "feature/new_114_events",
    "is_a_fork": true,
    "comments": [
      "Do not force push your changes as it complicates the review process.",
      "> \r\n> \r\n> Do not force push your changes as it complicates the review process.\r\n\r\nWill note that.",
      "Only these last minor issues otherwise it looks good to me."
    ],
    "commit_messages": [
      "Merge pull request #2073 from i509VCB/feature/new_114_events\n\nAdd new 1.14 Merchant, Raid and Villager related features. #2068 #2069"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e71ad9087c4d6d37a41f",
    "number": 2072,
    "body": "**This adds some new events (#2068):**\r\n\r\nRingBellEvent (Needs to have a way to get a list of all villagers which will hear the bell ring).\r\n\r\nVillagerEvent.ProfessionChange \r\nVillagerEvent.ProfessionLevelUp\r\nVillagerEvent.Panic\r\n\r\nTradeMerchantEvent\r\n\r\nRaidEvent.Start\r\nRaidEvent.StartWave\r\nRaidEvent.End\r\n\r\n**TODO List:**\r\nWhen Zidane and gabizou finish nuking Keys, a Key needs to be added to get a Villager's Profession Level. (Maybe a BoundedKey since the Vanilla Profession levels are 0-5)\r\n\r\nAdd a way to reference all the Raids within a world, most likely inside of ServerWorld. (#2069)\r\n\r\nPossibly more events if needed.",
    "head_branch": "feature/new_114_events",
    "is_a_fork": true,
    "comments": [
      "Well, uh, this is awkward, I merged the wrong PR.... "
    ],
    "commit_messages": [
      "Add new 1.14 Events related to Merchants and Villagers."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e71bd9087c4d6d37a420",
    "number": 2071,
    "body": "Signed-off-by: liach <liach@users.noreply.github.com>",
    "head_branch": "fix/alt-catalog-registry",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2071 from liachmodded/fix/alt-catalog-registry\n\nFix missing in string -> catalog key migration"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e71cd9087c4d6d37a421",
    "number": 2070,
    "body": "This is to compensate for 1.14 now requiring a Merchant to call `VillagerTrades$ITrade#getOffer(Entity, Random)` since some Villagers such as the Cartographer Villager require access to the world from the entity to find a Woodland Mansion or a Monument.\r\n\r\nThis here is part of the changes with https://github.com/SpongePowered/SpongeCommon/pull/2434",
    "head_branch": "update/fix_tradeoffergenerator",
    "is_a_fork": true,
    "comments": [
      "Is this used as a bifunction so often that it must implement `BiFunction`? Or is it used rarely enough that a method reference that convert it to a bifunction suffices?"
    ],
    "commit_messages": [
      "Make TradeOfferGenerator extend a BiFunction<Random, Merchant, TradeOffer> instead of a Function<Random, TradeOffer>.\n\nThis is to compensate for 1.14 now requiring a Merchant to call VillagerTrades$ITrade#getOffer(Entity, Random) since some Villagers such as the Cartogrpher Villager require access to the world from the entity to find a Woodland Mansion or a Monument."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e71dd9087c4d6d37a422",
    "number": 2067,
    "body": "Location#toContainer() calls World#getBlockType, leading to an Illegal Async Chunk Load if you try to serialize a location asynchronously.\r\nIt's also lost when deserializing* a location object (the blocktype is saved but it's ignored by locationbuilder) so there's no need for a contentupdater.\r\n\r\n*https://github.com/SpongePowered/SpongeCommon/blob/0b6e0819d266e9f92770a6024fd26458b7264a90/src/main/java/org/spongepowered/common/data/builder/world/LocationBuilder.java#L46",
    "head_branch": "fix/location-container",
    "is_a_fork": true,
    "comments": [
      "Should bump the version to omit the block type."
    ],
    "commit_messages": [
      "Remove blocktype from location#tocontainer (#2067)\n\n* Remove blocktype from location#tocontainer\r\n\r\n* Bump content version\r\n\r\n* Remove world name from location container"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e71ed9087c4d6d37a423",
    "number": 2066,
    "body": "The big thing here is the addition of a \"CommandRegistrar\". This is meant to be a lightweight interface that tries to give external command frameworks (Aikar's ACF, Katrix's Scammander, Faith's Butler, amongst others) a simple way to add their commands to Sponge. The idea of registrars was originally an implementation one - if you look at that code, you'll see that the vanilla brig system is separated from the Sponge one - it takes little work to add support for arbitary registrars, so why not add them?\r\n\r\nThe Javadocs should provide a fair amount of explanation. There will be more for client completions, I'm sure - though enabling that is the thing that is missing right now. That'll come later - it'll likely mimic Brig's suggestion provider with a tree like format to build the command elements up with.\r\n\r\nThis is simply for review of code style and Javadocs.",
    "head_branch": "api8/command-registrars",
    "is_a_fork": false,
    "comments": [
      "So effectively, `CommandRegistrar` is similar to a `Dispatcher` + `CatalogType`?",
      "I guess, though it doesn't really need to be a dispatcher so much. A registrar could conceivebly be a command executor - I don't put a restriction on it.\r\n\r\nNote that there are a couple of classes that don't have JDs. That's a mistake on my part, some API elements have made it through that were nowhere near ready. I won't be merging tonight as it is, so pick on anything and I'll review over the next couple of days."
    ],
    "commit_messages": [
      "Updates to the Command API to support implementation (#2066)\n\n* Updates to the Command API:\r\n\r\n* Added concept of CommandRegistrars to try to support external frameworks\r\n* Updates to some JavaDocs\r\n* Removed ArgumentReader parameter from completions, we just need to know what options there are.\r\n* Add ClientCompletionKeys to try to enable non-Sponge client completions\r\n* Update the CommandCause to directly implement Subject\r\n* Introduce the notion of a terminal parameter\r\n\r\n* RegisterCommandEvent is a lifecycle event\r\n\r\n* Fix compile errors"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e71fd9087c4d6d37a424",
    "number": 2065,
    "body": "**SpongeAPI** | [Sponge](https://github.com/SpongePowered/Sponge/pull/3106)\r\n\r\nThese are some QOL tweaks, plus a few methods to make the API more defined. \r\n\r\nI have a few more things I'd like to add -- the idea of a fallback permission for subjects, and a context refactor based on work I've been testing out in PEX.\r\n\r\nThe changes so far fall into a few categories:\r\n\r\n## Context handling\r\n\r\nIn order to handle the possibility of a command being executed in a state remote from that of its current environment, I've changed the primary context calculation source from the `Subject` itself to a provided `Cause`.\r\n\r\nWhen querying permissions on a subject itself, this Cause is built from the subject's current state, but when using a proxy such as a `CommandCause`, the `Cause` used is the game state in play.\r\n\r\nThis allows directly passing the `Cause` from an event to perform permissions checks, making accurate context calculations more straightforward.\r\n\r\n## Permissions descriptions / role template changes\r\n\r\nPermissions descriptions are currently quite limited in what they can do. These changes make permissions descriptions more powerful by more thoroughly linking some relatively spread out portions of the API. New features include:\r\n\r\n- Permissions descriptions can supply a default value\r\n- Role templates are now explicitly namespaced by plugin -- so a `staff` role for Nucleus would be stored internally as `nucleus:staff`. This allows more fine-grained control over templates, or, for example, only copying the permissions provided by a role from one plugin.\r\n- There are methods on `PermissionService` that allow querying role template information without having to know the details of how the implementation stores that data.\r\n\r\n## Bulk data editing methods\r\n\r\nHaving these operations allows plugins to more efficiently work with permissions subjects. Having copy/move operations explicitly as part of the API will hopefully encourage permissions plugins to provide that functionality.\r\n\r\n- Allow setting all permissions, options, or parents on a `SubjectData`\r\n- Allow copying/moving all data from another subject data entry\r\n- Added a new `TransferMethod` to customize the behaviour when overwriting existing subject data -- either replacing everything or merging with existing values\r\n\r\n## QOL tweaks\r\n\r\n- Make most generic parameters wildcards to allow implementations to interoperate more easily with native objects",
    "head_branch": "api8/permissions-updates",
    "is_a_fork": true,
    "comments": [
      "@lucko @zml2008 Is this PR going to go anywhere or set this aside? Need something done on this soon else it won't be in API 8.0.0",
      "I'd almost forgotten I had this -- i'll take some time this week to get everything I can buttoned down. The improvements already in are still useful -- and i have a couple more design changes I'd like to explore.",
      "Alright, I've pared this down a bit and taken out the context changes -- everything that's left should be good to go. Impl PR coming soon.",
      "> for example, only copying the permissions provided by a role from one plugin.\r\n\r\nCan it not only be copied, but applied transparently? So when plugin update introduces new permission, it would be applied to user / group / etc automatically.",
      "> Can it not only be copied, but applied transparently? So when plugin u[date introduces new permission, it would be applied to user / group / etc automatically.\r\n\r\nYes, it would be possible to add the role template subject as a parent of the user.",
      "> Heya, `SubjectData::getPermissions` gives me all directly assigned permissions of a player. Is there a way to get all inherited permissions as well?\r\n\r\n*From #dev on 2020-08-03 00:06*\r\n\r\nIt would be nice to have some way of getting all permissions for a given Subject, regardless of the source. Right now, the only way to do it would be to check through each parent individually",
      "Why do you want to get all permissions?",
      "I'm not convinced the reasoning is relevant, but, at the time I wanted to run a regex against it on certain users."
    ],
    "commit_messages": [
      "API 8: Tweaks to permissions API (#2065)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e720d9087c4d6d37a425",
    "number": 2064,
    "body": "Fixes #2061\r\n\r\n@clienthax Please test this throughly and make sure it doesn't break anything else of yours, this command stuff is very fickle.",
    "head_branch": "fix/2061",
    "is_a_fork": false,
    "comments": [
      "Actually, no need to just yet, the tests failed - something I didn't think about (only tested this in an integrated server).\r\n\r\nI'll update this and fix the tests...",
      "_Now_ it should be okay.",
      "Verified it myself. Merging now.",
      "https://github.com/SpongePowered/SpongeAPI/commit/fba57b6a65863295bf1025ce5d0ab212ba72416c"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e721d9087c4d6d37a426",
    "number": 2056,
    "body": "Without these 3 id declarations, the groovy-based regular gradle dsl will error out when encountering these lines, trying to resolve these as class names instead of gradle plugin ids.\r\n\r\nSigned-off-by: liach <liach@users.noreply.github.com>",
    "head_branch": "fix/bs-id",
    "is_a_fork": true,
    "comments": [
      "This is already done. Thanks for the tip!"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e722d9087c4d6d37a427",
    "number": 2055,
    "body": "Added a common builder interface for mutable and immutable data holders. This reduces some duplication with data related builders.\r\n\r\n`DataBuilder<T extends DataSerializable>` is now only used to reconstruct data objects from a data container/view. This is to prevent conflicts between the new interface and data builder.\r\n\r\n@gabizou ",
    "head_branch": "api8/cleanup-data-builders",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e723d9087c4d6d37a428",
    "number": 2054,
    "body": "Retargets #1424\r\n\r\nFixes #1312",
    "head_branch": "feature/text-compact-api8",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add compact methods to Text"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e724d9087c4d6d37a429",
    "number": 2053,
    "body": "Retargets #1678\r\n\r\nCloses #1528.",
    "head_branch": "feature/serialize-statematcher-api8",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make StateMatcher serializable"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e725d9087c4d6d37a42a",
    "number": 2052,
    "body": "testing fork",
    "head_branch": "stable-7",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e726d9087c4d6d37a42b",
    "number": 2050,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/2395)\r\n\r\nbased on changes in: #1998 \r\n\r\n#### Merged QueryOperations and InventoryTransformations ####\r\n  * `Query`, `QueryType.NoParam|OneParam|TwoParam`\r\n  * `transform` replaced by `query(Query)`\r\n  * new query type to query for a grid in another grid.",
    "head_branch": "api8/redesign/inventory2",
    "is_a_fork": false,
    "comments": [
      "@Faithcaio can you rebase api8/redesign/inventory onto api-8 so that changes are better reflected?"
    ],
    "commit_messages": [
      "Merged QueryOperations and InventoryTransformations"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e727d9087c4d6d37a42c",
    "number": 2049,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/2385) | [Original Issue](https://github.com/SpongePowered/SpongeAPI/issues/2048)\r\n\r\nThis PR is mostly to remove the `final` modifier from `SimpleDispatcher` and rearrange a little bit of logic to support the goals of SpongePowered/SpongeCommon#2385 and SpongePowered/SpongeAPI#2048.\r\n\r\nBig thing here is removing the `final` modifier. I don't see it as a problem. However, if we are not okay with that, that's okay, but the whole Dispatcher will be copied into Common.\r\n\r\nPlease see the Common PR for a lot more information as to what this will achieve.\r\n\r\n---\r\n\r\n* Move some logic into protected methods to reduce deduplication\r\n* As this was final, no previous plugins will have extended this - changes are safe.\r\n* Logic has not changed except for a reversion (below) that will go into the impl instead.\r\n* Revert \"Filter CommandMapping result based on source permission.\", this reverts commit b38390e1751fff802d355155c45b2eb4913f5817 (the spirit of this will be in the Common PR).",
    "head_branch": "feature/hide-cmds-with-no-perms",
    "is_a_fork": false,
    "comments": [
      "can't you just make a command dispatcher that use this one in a field and just delegate most calls?",
      "and if you do decide to remove final, consider making some fields protected",
      "> can't you just make a command dispatcher that use this one in a field and just delegate most calls?\r\n\r\nIt becomes tricky to ensure that the common PR can do what it does without copying huge chunks of code - if you read how the common PR works compared to this you'll see that the `get` method requires a third parameter there - and not being able to override methods would have severely hampered what I was trying to do.\r\n\r\nQuite frankly, I'm not wasting more time on something that is going to be gutted in API 8 anyway. The only reason I've done it this way is to minimise the code duplication, such that if we _do_ need to change some logic to fix a bug or whatever, we're not duplicating these fixes. There may be others using such a dispatcher.\r\n\r\nIt's either this or copying it into common. I've made no secret about that, it's something I muse upon in the Common PR. It's a draft because I'm not sure I want to do this at all, and I simply want opinions on final vs. non final from @gabizou and @Zidane.\r\n\r\n> consider making some fields protected\r\n\r\nNo. I am simply going to do what is necessary to support the implementation. Honestly, this class should not be in the API layer at all and so, without breaking things, I'm going to consider it as implementation. If someone then wants something to be exposed for whatever reason, they can PR it, but again, I see little reason to.",
      "I've talked to @Zidane about this, and all I'm going to do is copy this into Common - no-one should be using this anyway..."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e728d9087c4d6d37a42d",
    "number": 2047,
    "body": "**API only**\r\n\r\nAdds support for deleting economy accounts. Left as a default method so as to not break any existing economy plugins.\r\n\r\n@ItsDoot ;)",
    "head_branch": "feature/account-deletion",
    "is_a_fork": true,
    "comments": [
      "Can it return a boolean to indicate operation success or failure?",
      "> Can it return a boolean to indicate operation success or failure?\r\n\r\nIt could, and I had it there to begin with. It just wouldn't be as pretty. Should I add it?",
      "If doot asked for the deletion functionality, let him decide it.",
      "> If doot asked for the deletion functionality, let him decide it.\r\n\r\nHe just mentioned it was bothering him too. @ItsDoot what'cha think?",
      "Yea, definitely needs to return `boolean`. We gotta know if it was successful or not.",
      "I considered the following results:\r\n\r\n* ABSENT ( doesnt exist )\r\n* SUCCESS\r\n* RESET  (player that is online)\r\n* UNDELETEABLE (virtual and game accounts)\r\n* UNSUPPORTED (feature not available)\r\n* FAILED_IN_USE ? (player online)\r\n* FAILED_ERROR (internal error)\r\n* ?",
      "Revisiting this PR; should the `Account` even have a `delete()` method? ",
      "No, put it on the EconomyService only.",
      "There are some niggles (javadocs over 80 characters wide, etc. - [please note that we do have a style guide](https://docs.spongepowered.org/stable/en/contributing/implementation/codestyle.html) that should be adhered to), but otherwise, there needs to be a companion Common PR that adds a registry module and implementations to the `AccountDeletionResultTypes` before this is pulled."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e729d9087c4d6d37a42e",
    "number": 2046,
    "body": "[SpongeGradle](https://github.com/SpongePowered/SpongeGradle/pull/22) | **SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/2374) | [SpongeVanilla](https://github.com/SpongePowered/SpongeVanilla/pull/419) | [SpongeForge]()\r\n\r\nThis is a **working** PR with the development lock step with **SpongeGradle**. While this technically is compatible with Gradle 4.10.3, I've elected to use the latest Gradle 5.6.2 (as of current writing) to take advantage of the improved Kotlin-DSL since those versions, and configuration avoidance throughout the build process. \r\n\r\nSome changes:\r\n- Constants are just constants in files\r\n- Things that should've been made properties are now properties and/or functions in SpongeGradle or in the `gradle.properties` of their respective projects\r\n- Updated to use appropriate Gradle ideologies with configuration avoidance (lazy evaluation)\r\n- Reduced the overall build file size and using as much handling with the gradle plugins to configure most things we've otherwise duplicated and/or scripted with other scripts.",
    "head_branch": "build/kotlin-dsl",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e72ad9087c4d6d37a42f",
    "number": 2045,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/2370)\r\n\r\nThis PR introduces a new Key: `POTION_COLOR`. \r\n\r\n- It is used to change the color of an ItemStack potion.\r\n- Getting the value will return the custom color if set, or the default color for the attached effects.\r\n- Thrown potions color can be changed by updating their represented item.\r\n- It is possible to remove the custom color.\r\n\r\nResolves #1961",
    "head_branch": "feature/potion-color",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add ability to change potion color"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e72bd9087c4d6d37a430",
    "number": 2043,
    "body": "Both a plugin and sponge (this is an example, I don't have a plugin in mind) provide an interface named `Career`. Suppose they both use `DummyObjectProvider` to separate API and implementation.\r\n\r\nBefore:\r\n`org.spongepowered.api.util.dummy.Career$DummyClass`\r\n`org.spongepowered.api.util.dummy.Career$DummyClass`\r\n\r\nCausing a duplicate class definition error (and chain of exception without a meaningful error)\r\n\r\nAfter this PR:\r\n`org.spongepowered.api.util.dummy.org.spongepowered.api.data.type.Career$DummyClass`\r\n`\r\norg.spongepowered.api.util.dummy.com.author.pluginname.Career$DummyClass`\r\n\r\nI've also added a test to replicate the issue.",
    "head_branch": "fix/dummyobjectprovider",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix duplicate class definition (#2043)\n\n* Fix duplicate class definition\r\n\r\n* Fix enclosing classes\r\n\r\nThe meaning of the previous loop was to get a meaningful name for the class\r\nsince Class#getSimpleName would ignore the enclosing classes, but that's not the\r\ncase with Class#getName"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e72cd9087c4d6d37a431",
    "number": 2041,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/2358)\r\n\r\nCode required for the implementation of three new variables in ExplosionMixin in SpongeCommon.\r\n\r\nAll variables to be used in the newer versions of my plugin.\r\n\r\nJavaDocs still required in Explosion.java for the new methods. I don't know how to explain it in a clear manner.",
    "head_branch": "stable-7",
    "is_a_fork": true,
    "comments": [
      "This is exposing a few implementation details. (`isRandomnessReduced` is really bad)\r\n\r\nboundingBoxSize shouldn't be touched IMO, you can just use size.\r\nEDIT: no, you can't, but I still don't think we should expose this.\r\n\r\n> All variables to be used in the newer versions of my plugin, Movecraft for Sponge.\r\n\r\nThis doesn't really add anything to the PR since you didn't provide any use case (which would have been useful) and looks like self-promotion to me.\r\n\r\nI will leave the final say to an api developer.",
      "@ImMorpheus Right, sorry, I'm not very good at explaining it.\r\n\r\nReduced randomness - Reduces how random each ray is. This gives a more even explosion.\r\n\r\nboundingBoxSize - Controls the number of rays cast by the explosion. This is **NOT** the same as `size`. Increasing this number **WILL** make explosions generate more lag. However, if a higher value is used on explosions larger than `size` 16 it will provide a nicer crater and generally removes the tunnel bores that usually occur. It can also be used to improve performance slightly by reducing the number of rays cast by explosions where `size` is less than 16.\r\n\r\nI'm sorry that seems like self-promotion I was just trying to explain that these values are required for my plugin.\r\n\r\nI've got a family matter to deal with atm as my Grandma has just passed away earlier today, but I will try to get some screenshots to you in the next few days demonstrating the results of using the variables.",
      "TBF, these settings should come with a warning label and are not required for most explosions.",
      "Imgur Album, each picture is described. https://imgur.com/a/A9Cqpap",
      "So, just looking at the API and impl together:\r\n\r\n* I don't like `boundingBoxSize` at all. For a start, that name is not really describing what it is doing. You're increasing the number of rays from the source point of the explosion and it basically generates more explosions. I suspect a power of 2 was chosen for a reason, though I haven't combed through it enough to see what is going on. I don't think we should be touching that - what would you use it for?\r\n* `isReducedRandomness` - I actually don't have much of an issue with this in general, though what I would prefer to see is this be a double between 0 and 1 that indicates how random the generated explosions are - and a better name!\r\n* `entityKnockbackMultiplier` could be fun to play with...\r\n\r\nI think we need to see what your use cases are for all these - you've said what they do, but not what they are.",
      "I would recommend getting familiar with the Effect section of the [Minecraft Wiki Explosion page](https://minecraft.gamepedia.com/Explosion) as I am rubbish explaining things.\r\n\r\n> So, just looking at the API and impl together:\r\n> \r\n> * I don't like `boundingBoxSize` at all. For a start, that name is not really describing what it is doing. You're increasing the number of rays from the source point of the explosion and it basically generates more explosions. I suspect a power of 2 was chosen for a reason, though I haven't combed through it enough to see what is going on. I don't think we should be touching that - what would you use it for?\r\n\r\nYou're right, the name irks me too, but as with all the names, they are what I could think of.\r\nI welcome any edits.\r\n\r\nMinecraft Wiki:\r\n`A cube around the explosion is divided into a 16×16×16 grid, and rays are created from the center to each outer point of this grid.`\r\n\r\nWith Vanilla you can see where the rays start to separate at the edges, the larger the explosion the more noticeable it is and tunnels start to form through the surrounding blocks.\r\n\r\nIncreasing this variable will cause addition lag and therefore should be done with caution. However, doing so allows you to give a nicer explosion crater with less to no tunnelling depending on the situation.\r\n\r\n> * `isReducedRandomness` - I actually don't have much of an issue with this in general, though what I would prefer to see is this be a double between 0 and 1 that indicates how random the generated explosions are - and a better name!\r\n\r\nI'm not sure what you mean?\r\n\r\nMinecraft Wiki:\r\n`Each ray is given an intensity, calculated as (0.7 + [a random value from 0 to 0.6]) × [power].`\r\n\r\n`power` is what we'd call radius.\r\n\r\nThis variable simply sets if the rays should all use the same random value or not. With it on explosion craters are more symmetrical, as seen in the picture album.\r\n\r\n> * `entityKnockbackMultiplier` could be fun to play with...\r\n\r\nIt's very fun.\r\n\r\n> I think we need to see what your use cases are for all these - you've said what they do, but not what they are.\r\n\r\nI haven't actually written it into my code yet but this is what my code would look like:\r\n[Gist](https://gist.github.com/Pulverizer/6cc8b8d9b1ef7ad4645f59e9ede2183e)\r\n",
      "> `boundingBoxSize`\r\n\r\nSo, I actually went down the route of looking at the MCP code for explosions to see what it did, rather than reading the wiki. It's a set of unit vector directions, so rather than increasing the size of the rays, you're increasing the number of rays (as you've said). Going from 16 to 32 means that you basically increase the number of explosions by 8 (well, ish). You can see this might get bad very quickly.\r\n\r\nIt's nothing to do with size at all, it's not a bouding box. It's more to do with the \"resolution\" of the explosion. It _does_ increase the power of the explosion - and so I'm somewhat wary of this addition for the number of side effects it really will have.\r\n\r\nAgain - why do you want this? It's not code we need to see, nor what it does - it's an explanation as to why it's important to you. Having an API that no-one uses is not really a good API!\r\n\r\n> isReducedRandomness - I actually don't have much of an issue with this in general, though what I would prefer to see is this be a double between 0 and 1 that indicates how random the generated explosions are - and a better name!\r\n\r\n`(0.7 + [a random value from 0 to 0.6]) × [power]` -> `(1.0 + ([a random value from 0 to 0.6] × [randomness] - 0.3)) × [power])` - this isReducedRandomness would become randomness, centred around 1.0 x power (zero randomness would be \"power\", one would be current behaviour). The higher it is, the more random the pattern that comes out of explosions would appear. ",
      "@dualspiral So I've taken some time to think about how I can do a good job of explaining why I need/want these variables.\r\n\r\n`boundingBoxSize` - I think you're right, `resolution` would be a much better name.\r\n\r\nThis is what the rays look like on a really big explosion:\r\n\r\n![Big Explosion Rays](https://i.redd.it/brglxto2jyay.png)\r\n\r\nYou can just barely see the effects of using this variable in the picture album.\r\n\r\n`radius` 16, current:\r\n\r\n![](https://i.imgur.com/KqEIZ7h.png)\r\n\r\n`radius` 16 with `resolution` 32:\r\n\r\n![](https://i.imgur.com/tlNEIs0.png)\r\n\r\nWhile this will generate more lag it's a sacrifice I'm willing to make for tidier craters.\r\n\r\n`isReducedRandomness` - I like what you're trying to do but this will mean that explosions with reduced randomness are always the lowest possible strength for their `radius`.",
      "> I like what you're trying to do but this will mean that explosions with reduced randomness are always the lowest possible strength for their radius\r\n\r\nI got the equation wrong, I meant\r\n\r\n```\r\n(1.0 + (([a random value from 0 to 0.6] - 0.3) × [randomness])) × [power]\r\n```\r\n\r\nAt randomness = 0, power is of strength 1 (times power). At a half, 0.85-1.15. At full, we get 0.7 to 1.3. That's what I was intending.",
      "Okay, I'll try to revise the PRs with these changes in the next few days.",
      "@dualspiral Made those changes. Think it's good to go?",
      "I think I'd like to get a set of opinions from the devs. I agree with @ImMorpheus that _some_ of this is just implementation that we probably don't want to expose.\r\n\r\nI'm not trying to give anyone the runaround here, but I wanted to get a better understanding of what's going on - including names.\r\n\r\n@SpongePowered/developers \r\n\r\nI think we need to come to a consensus on this. My feeling on this PR is that the knockback and randomness parts are probably okay. I don't think I'm particularly happy with the \"resolution\" being exposed though, other implementations such as Lantern might do explosions very differently and so resolution would have no meaning.\r\n\r\nWhat do you all think?",
      "I've added a couple of thoughts on the Common PR with reference to how the implementation is handled, but figured I'd note the overarching idea here as well.\r\n\r\nThe changes made seem to be arbitrary in the sense that there's a lot of areas for customization, both in what settings are exposed and how they're implemented. I think it makes the most sense for this to be it's own project separate from Sponge, that way you can tailor the customized behavior to your needs.\r\n\r\nAdditionally, reading through things in the implementation the names feel really weird and I can't predict what they do. I think the easiest way to get this across would be specifying how the explosions are related to these ray calcuations - ultimately `resolution` acts like a `rayDensity`, and `randomness` is basically `rayVariance`. Knockback also feels more like a `knockbackScale` as well - it's a multiplier there (on it's own it feels like a boolean).",
      "> randomness is basically rayVariance\r\n\r\nI just want to quickly say no to this particular name. I suggested randomness as a name for the simple reason that you're otherwise specifying an implementation detail. Lantern, for example, does not have to use ray tracing for explosions if they don't want to.\r\n\r\nIf any of this is getting pulled, the names need to be sufficiently descriptive to explain what the outcome is, without explaining how that is done.",
      "I agree with dualspiral \r\n\r\nIn regards to being a separate project, are you suggesting I create a competing API or something because, to my understanding, it isn't possible to override a mixin with the @Final tag? As you said, bukkit could do it.",
      "> other implementations such as Lantern might do explosions very differently and so resolution would have no meaning.\r\n\r\nThis is exactly the \"problem\" I have with `randomness` and `resolution`. We shouldn't be biased by the current minecraft implementation.\r\n\r\nDon't have an issue with knockback, maybe switch to a Vector3d to support different knockback for different coordinates ? \r\n\r\nAdditionally pinging @Cybermaxke since working on Lantern/different implementation could really help with giving feedback on this.\r\n ",
      "@Pulverizer Aside from wanting to 'change explosions' What does Movecraft need/want from the API here?\r\n\r\nAre you trying to control the explosion size? Density? or do you just want to basically just reimplement the type of explosion to look completely different, in a way that aligns with what you think explosions should look like?\r\n\r\nIt's my understanding that Movecraft is a port, are you porting functionality that already hooks into NMS and you are trying to replicate this feature exactly? Or is this a more free-form thing, where you would like to add a feature to Movecraft to change the explosions themselves.\r\n\r\nUltimately I believe that plugins currently have full control over the explosions, by modifying the list of affected blocks. Although the docs do say that may have a strange effect, and I havn't tested it myself. https://github.com/SpongePowered/SpongeAPI/blob/api-8/src/main/java/org/spongepowered/api/event/world/ExplosionEvent.java#L89-L91\r\n\r\nIt would be my preference to remove any strange effects from removing the list of affected locations, and allow you to change the explosion to exactly how you would like it handled, without exposing implementation un-necessarially. (Even if this means that you need to basically copy the NMS algo + your changes.)\r\n\r\nIs it possible to change the knockback of entities using the entity snapshots? with the current event? or is it such a performance drain, that it would be worth adding additional API for explosion knockback (Not that I think adding knockback API is bad, it just feels like extra maintenance that needs reasoning through).",
      "> or is it such a performance drain, that it would be worth adding additional API for explosion knockback (Not that I think adding knockback API is bad, it just feels like extra maintenance that needs reasoning through).\r\n\r\nThat's the one thing I think most people here agree is an okay thing to add. [The implementation amounts to being a multiplier like so](https://github.com/SpongePowered/SpongeCommon/pull/2358/files#diff-8b417570b299753ff70d99886c28d1a6R254-R256), I don't really think the maintainence burden is high on that and it saves recalculations later, I think it would be a performance hit to do otherwise.\r\n\r\nAs for the other points, yup, totally see where you are coming from - we really should remove side effects from that method but that may end up being done for 1.14 if it's decided that this is a deficient API.\r\n\r\nI do really want to re-iterate a point you made ryan because I think this is really important to understand the motivation here:\r\n\r\n> What does Movecraft need/want from the API here?\r\n>\r\n> Are you trying to control the explosion size? Density? or do you just want to basically just reimplement the type of explosion to look completely different, in a way that aligns with what you think explosions should look like?\r\n>\r\n> It's my understanding that Movecraft is a port, are you porting functionality that already hooks into NMS and you are trying to replicate this feature exactly? Or is this a more free-form thing, where you would like to add a feature to Movecraft to change the explosions themselves.\r\n\r\nYes. This. Exactly. I asked previously:\r\n\r\n> Again - why do you want this? It's not code we need to see, nor what it does - it's an explanation as to why it's important to you. Having an API that no-one uses is not really a good API!\r\n\r\n@Pulverizer, we never got a use case, we got examples of what you are proposing does - except that you might want a more even explosion by removing the randomness. As you can see, I am in favour of the knockback and I'm relatively okay with the idea of tweaking the randomness of the explosion, though as others have commented, this can be seen as an implementation detail, Lantern might not have randomness (though you could also argue that the API specifies that there should be some randomness in explosions, but I digress).\r\n\r\nThe reason we are asking for use cases is so that we can consider whether the API supports what you want to do, or if there are better solutions to it. But we need those use cases to help understand what you need from us, and whether this really is the best way forward.\r\n\r\nWhat are you doing in Movecraft that **needs** these changes?",
      "I am on holiday atm with only a phone. I thought I had managed to give the information that you desired. I see now that this is not the case but am not sure what you want.\r\n\r\nI will try again...\r\n\r\nMovecaft currently has a bit of code that allows for different levels of armour. However the method used is very crude and therefore, imo, damages gameplay.\r\n\r\nMy plan was to alter TNT explosions so that instead of blocks randomly being told to not break I could instead give the BlockType a higher blast resistance.\r\n\r\nAfter having created a listener to condense explosions into a single larger explosion (to break the now stronger blocks) I found some issues.\r\n\r\nA. Large explosions suffer from lack of ray density. (resolution) \r\n\r\nB. The strength of the blast along a given ray could not be guaranteed. (randomness) \r\n\r\nC. Knockback on a size 1 blast is the same as a size 1,000,00... (you get the point) blast. (knockback) \r\n\r\nSo rather than copy the algorithm and have to run it in my listener (potentially increasing overhead) I thought it would to better to add the required control to Sponge.\r\n\r\n@dualspiral @ryantheleach",
      "@Pulverizer Thanks, that's exactly what I was looking for.",
      "@gabizou 👍 I'll get on that as quickly as possible. Been AFK for 2 weeks and am currently on getting settled in at uni.",
      "Is there anything I still need to do?",
      "I'll go ahead and merge this since @gabizou approved it a while back.",
      "...but common wasn’t necessarily ready - which I noticed you haven’t merged, and is likely why this wasn’t merged.\r\n\r\nEither that should be moved, or this should be reverted (can be done any time up to 7.2s release) We can’t do one and not the other. Please check the implementation PR and take appropriate action @JBYoshi",
      "Whoops - completely forgot about that. I don't see any complaints on the implementation at the moment, so I'll look at it and run some tests."
    ],
    "commit_messages": [
      "Implement New Explosion Settings (#2041)\n\n* Update Explosion.java\r\n\r\nAdds methods for new variables in ExplosionMixin.java located in SpongeCommon.\r\n\r\n* Alterations as discussed in the PR\r\n\r\n* Default Implementations (#3)\r\n\r\n* Update Explosion.java"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e72dd9087c4d6d37a432",
    "number": 2040,
    "body": "Adds methods for new variables in ExplosionMixin.java located in SpongeCommon.",
    "head_branch": "ExplosionMixinPR",
    "is_a_fork": true,
    "comments": [
      "PR'd wrong thing 🤦‍♂ "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e72ed9087c4d6d37a433",
    "number": 2038,
    "body": "Currently, completion ignores whether a source has permission for a particular command. This results in the unexpected behavior that players can complete commands they can't execute and can view help commands they don't have permission for (I feel like there's an issue for this, but I couldn't find it).\r\n\r\nThis PR adds a permission check to the `SimpleDispatcher#get(String, CommandSource)` method when the source is not null. The source should only be able to 'get' mappings for which they have permission for and thus aware of. This appears to be the intended behavior of the method.",
    "head_branch": "fix/completion-permission",
    "is_a_fork": true,
    "comments": [
      "b38390e1751fff802d355155c45b2eb4913f5817"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e72fd9087c4d6d37a434",
    "number": 2037,
    "body": "Fixes #1983.\r\n\r\nThe current implementation of `MemoryDataView#equals` uses normal equality comparisons for the internal map, which does not support arrays. This PR replaces this segment of the equals method with one that checks values for arrays and performs the proper comparisons from there. I have also added in a test using a `byte[][]` array that shows this is working.\r\n\r\nWhether this is correct solution, however, is a bit more debatable. The use of `DataTranslator`s was discussed in the issue, but given the explicit checks that `MemoryDataView` has for arrays in other locations this seems to be what's required. ",
    "head_branch": "fix/dataview-array-equality",
    "is_a_fork": true,
    "comments": [
      "I realise this has been here some time now, apologies.\r\n\r\nAny changes here will need to be mirrored in Common: https://github.com/SpongePowered/SpongeCommon/blob/stable-7/src/main/java/org/spongepowered/common/data/MemoryDataView.java. Best to make sure that this is OK first though, no point copying something that a change is then requested on.\r\n\r\nIt looks okay to me, but @gabizou might have a better insight.",
      "@dualspiral Another one, now or never.",
      "This actually needs to be done in Common, if it's done there, I'll backport it here as an \"impl in API\" thing.\r\n\r\nOtherwise, closing this."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e730d9087c4d6d37a435",
    "number": 2035,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/2350)\r\nDeprecates HealEntityEvent that is/was impossible to implement with modifiers and sources. \r\n\r\nAdds RegainHealthEvent with appropriate usages and `HealingType`s.\r\n",
    "head_branch": "feature/regain-health",
    "is_a_fork": false,
    "comments": [
      "Closing as we're going to be looking at an alternative option for adding this event. It'll be a sub-event of ChangeValueEvent via some generation of annotated Keys."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e731d9087c4d6d37a436",
    "number": 2033,
    "body": "### Overview\r\nBased on discussion in #1978, being able to differentiate between an absent flag and a flag with an absent optional value could be useful for handling default values. Additionally, this is extremely helpful when working with complex flag systems where the same value could be set through multiple flags (used in validation). The PR is intended to provide a base implementation and serve as discussion for whether this is worth adding to the API.\r\n\r\nAdditionally, given the new `hasFlag` method it would make sense to have this be the recommend way for checking non-value flags.\r\n\r\n### Implementation\r\n\r\nThis adds methods to `CommandContext` for defining and checking flags, implemented with a set. Methods that accept a `Text` are also provided to match existing `putArg` methods, but this may not be necessary.\r\n\r\nTo handle parsing, a new `FlagElement` has been added that ensures flags are added to the context. The key used is the first flag found, same as for the element used previously. Notably, this replaces the use case for the `MarkTrue` element used previously, so this could potentially be deprecated as well.\r\n\r\nAdditionally, I made the decision to also define the flag for the `ACCEPT_VALUE` and `ACCEPT_NONVALUE` behaviors for unknown flags. This is probably worth discussing as well.",
    "head_branch": "feature/flag-context",
    "is_a_fork": true,
    "comments": [
      "@dualspiral Now or never on this for API-7. If not close it.",
      "I'll test, it's my fault it's been held and I think it would be unfair to close it. Will decide based on that."
    ],
    "commit_messages": [
      "Add defined flags to CommandContext (#2033)\n\n* Allow context to track defined flags for complex flag parsing, such as with optional values.\r\n* Include flags in context snapshot, add flag to context after parsing, and delegate to valueElement for completion when present.\r\n* Inline MARK_TRUE_FUNC"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e732d9087c4d6d37a437",
    "number": 2032,
    "body": "This PR defines the false behavior of `acceptsArbitraryLongFlags` to be `Error`. The method is also deprecated in favor of `setUnknownLongFlagBehavior`, which appears to be the intention.\r\n\r\nThis addresses SpongeAPI#2024, as the parameter was previously unused and always result in unknown flags being accepted. Unsure if this would be accepted but figured it was worth discussing and easy enough to set up.",
    "head_branch": "fix/accepts-arbitrary-long-flags",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Defines the false behavior of `acceptsArbitraryLongFlags` to be `ERROR` and deprecates the method in favor of `setUnknownLongFlagBehavior`."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e733d9087c4d6d37a438",
    "number": 2031,
    "body": "Impl: https://github.com/SpongePowered/SpongeCommon/pull/2342",
    "head_branch": "noteblockevent",
    "is_a_fork": true,
    "comments": [
      "https://github.com/SpongePowered/SpongeAPI/issues/1752",
      "Can you add some Javadocs please?"
    ],
    "commit_messages": [
      "Add PlaySoundEvent.NoteBlock (#2031)\n\n* Add PlaySoundEvent.NoteBlock\r\n\r\n* Javadocs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e734d9087c4d6d37a439",
    "number": 2030,
    "body": "**API** | [Common](https://github.com/SpongePowered/SpongeCommon/pull/2340) | no forge changes\r\n\r\nBased on discussions with @lucko and @bloodmc, this gives more flexibility with how different levels of permission take priority over each other.\r\n\r\nPEX has had weighted permissions for quite a while now, so hopefully it makes sense to bring them into Sponge as well.\r\n\r\nI've kept the old methods around to avoid breaking changes -- the deprecated methods and classes can go away for API 8.",
    "head_branch": "feature/permission-weights",
    "is_a_fork": true,
    "comments": [
      "@kashike Does this PR look good to you?",
      "Dont forget to create a PR for our docs repo explaining the new API properly.",
      "The javadocs on the new methods dont explain what use/impact the integer values have, do they? How is 5 any different from 3?",
      "Closing in favor of #2065 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e735d9087c4d6d37a43a",
    "number": 2029,
    "body": "A user can now remove a child at a specific index.\r\n\r\nThis pull request fixes #1727 ",
    "head_branch": "feature/remove-text-elements-from-builder",
    "is_a_fork": true,
    "comments": [
      "Can you squash the commits? Once done, can merge.",
      "You can squash the commits when you merge. "
    ],
    "commit_messages": [
      "Add possibility to remove a child at an index (#2029)\n\n* Add Text.Builder#remove(int) to remove a child at the given index\r\n\r\n* Add Text.Builder#removeLastChild to remove the last child in a better way\r\n\r\n* Add test for remove(int) and removeLastChild()"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e736d9087c4d6d37a43b",
    "number": 2028,
    "body": "Implementation: https://github.com/SpongePowered/SpongeCommon/pull/2335\r\n\r\nAllows the canceling of Broadcast sounds, eg Wither/Dragon death, without causing event spam.",
    "head_branch": "broadcastsound",
    "is_a_fork": true,
    "comments": [
      "Not sure about this, this event looks too specific.\r\n\r\nI'd prefer something like \r\n\r\n```\r\nSoundEvent\r\nSoundEvent.Broadcast\r\nSoundEvent.Record\r\n```\r\n\r\n",
      "@mosemister Broadcast Sounds do not have SoundTypes linked to them, they seem to use some internal MC ids that have been stripped, see previous comments, the Entity involved is already in the causetracker from upstream.\r\n\r\n@ImMorpheus I can get behind that idea, the only problem is we don't want to be spaming events for every sound.\r\n\r\n\r\n",
      "> I can get behind that idea, the only problem is we don't want to be spaming events for every sound.\r\n\r\nPut a ShouldFire check before firing the event. That's no different that ServerTickEvent, CollideEntityEvent and other expensive events.",
      "I think you missread the entity bit. It was just an example. I was expecting if an entity caused the sound to have that entity in the cause. \r\n\r\nIf the ids are internal MC ids then maybe expose them as an catalogue type (BroadcastType as an example) just to stop confusion as I as a plugin developer who just jumps to assumptions when in the mood would attempt to get a sound type from the id using the sponge register. If its a different type then i wouldn't make that wrong assumption. ",
      "@mosemister There are only three broadcast sound types, personally as a plugin developer I would just  grab the Entity causing the sound from the cause and compare against that.\r\n\r\nRenderGlobal.broadcastSound for an example.\r\nI might just remove the ID as its practically useless as a data point.\r\n",
      "@mosemister Just noticed there is a reference to these type of ids in util.Constants, I may use that for these.",
      "@ImMorpheus Updated",
      "Updated",
      "Ready for review."
    ],
    "commit_messages": [
      "add SoundEvent"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e737d9087c4d6d37a43c",
    "number": 2022,
    "body": "The issue can be replicated using the skull testplugin.\r\n\r\nuser \"sponge\" join the game\r\n\r\nbefore: `/skullme sponge bukk<tab>` -> `/skullme sponge sponge`\r\nwith this PR: `/skullme sponge bukk<tab>` -> `/skullme sponge bukk`\r\n\r\nAlso, add `size` and `get` to `CommandArgs` to help plugin provided command elements\r\n\r\nNote: the two added methods can be replicated using `getAll().size()` and `getAll().get(index)`, however `getAll()` has quite a bit of overhead.",
    "head_branch": "enhance/cmd-args",
    "is_a_fork": true,
    "comments": [
      "[This was the problem](https://github.com/SpongePowered/SpongeAPI/commit/240a43e70e2445f5169636a6f84de1cf52c4a0da). The `seq` element handles the completion and parsing elements before it, not the `CommandSpec`, but in the case of only one parameter being set on a `CommandSpec`, the spec didn't bother wrapping the element and so the system just ran the complete method with no regard to the current number of elements. This would have affected everything, not just the player element.\r\n\r\nI see no issue with adding the other methods you propose, so I didn't want to close the PR. However, the override on the complete method for the `PlayerCommandElement` should be removed.",
      "Thank you for the explanation.\r\n\r\nI missed the fact you could autocomplete selectors (explained in `GenericArguments`, my bad).\r\nYeah, overriding the complete method in the player element is wrong, this is also happening with UserCommandElement.. It's a broader bug with autocompletion.\r\n\r\n\r\n> This was the problem. The seq element handles the completion and parsing elements before it, not the CommandSpec, but in the case of only one parameter being set on a CommandSpec, the spec didn't bother wrapping the element and so the system just ran the complete method with no regard to the current number of elements. \r\n\r\nI have to disagree. That commmit has just broken autocompletion for command elements returning multiple values.\r\nhttps://github.com/SpongePowered/SpongeAPI/blob/240a43e70e2445f5169636a6f84de1cf52c4a0da/src/main/java/org/spongepowered/api/command/args/GenericArguments.java#L176\r\n\r\nIf a command element may return multiple values, I expect completition to work if I provide multiple arguments.\r\n\r\nThis is after you commit:\r\n\r\nuser \"sponge\" join the game\r\n`/skullme sponge bukk<tab>` -> `/skullme sponge bukk` (which is good)\r\n`/skullme sponge spon<tab>` -> `/skullme sponge spon` (This should not happen)\r\n`/skullme sponge spon<tab>` -> `/skullme sponge sponge` (Expected behaviour)\r\n\r\n\r\n",
      "> If a command element may return multiple values, I expect completition to work if I provide multiple arguments.\r\n\r\nYou're misunderstanding how these elements work. The singular element consumes one argument, but may return multiple results. For example, if you have players `sponge1` and `sponge2`, `spon` will return both of these because it's pattern matching. If you have a selector (`@a`, for example), that might return multiple players. That's what that javadoc comment means - for one input you can get multiple outputs.\r\n\r\nFor the behaviour you want, you need to use `GenericArguments.allOf(...)`, or `GenericArguments.repeated(...)` - these indicate to the command parser that there may be more than one element - and that will work as intended.\r\n\r\n> I have to disagree. That commmit has just broken autocompletion for command elements returning multiple values.\r\n\r\nIgnoring the above, given that it wasn't working correctly in the first place, my commit hasn't broken it. Nor has it broken existing behaviour when multiple elements are specified. So to tell me that I broke it is downright wrong. If there was a player called `sponge` and `bukkit`, you still would have ended up with `/skullme sponge sponge` because the completion relied upon the first element _only_.",
      "> You're misunderstanding how these elements work. The singular element consumes one argument, but may return multiple results. For example, if you have players sponge1 and sponge2, spon will return both of these because it's pattern matching. If you have a selector (@a, for example), that might return multiple players. That's what that javadoc comment means - for one input you can get multiple outputs.\r\n\r\nThis cleared up everything."
    ],
    "commit_messages": [
      "Fix PlayerCommandElement autocompletion and enhance CommandArgs (#2022)\n\n* Fix PlayerCommandElement autocompletion and enhance CommandArgs\r\n\r\n* Complete on empty arg\r\n\r\n* This is wrong"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e738d9087c4d6d37a43d",
    "number": 2020,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/2312)\r\n\r\nhttps://github.com/SpongePowered/SpongeAPI/issues/1970",
    "head_branch": "feature/breakequipmentevent",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "ChangeEntityEquipmentEvent.Break (#2020)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e739d9087c4d6d37a43e",
    "number": 2019,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/2303)\r\n\r\nResolves #1981 \r\n\r\nSigned-off-by: Steven Downer <grinch@outlook.com>",
    "head_branch": "feature/accelerationdata",
    "is_a_fork": true,
    "comments": [
      ":tada: Finally we don't need to register an event listener to constantly change the velocity of the fireball like in the cookbook!",
      "This variable is also needed for WitherSkull.",
      "@Pulverizer Updated based on your feedback.",
      "may this affect any entity?",
      "There may be some entities we've missed. But in vanilla, it only affects certain entities.\r\n\r\nMaybe it should be discussed if we want to modify Minecraft to have it for all entities."
    ],
    "commit_messages": [
      "Add Acceleration Data\n\nSigned-off-by: Steven Downer <grinch@outlook.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e73ad9087c4d6d37a43f",
    "number": 2018,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/2300) | [SpongeVanilla](https://github.com/SpongePowered/SpongeVanilla/pull/411) | [SpongeForge](https://github.com/SpongePowered/SpongeForge/pull/2824)\r\n\r\n  - Deprecate `MetricsConfigManager#areMetricsEnabled(PluginContainer)`\r\n  - Deprecate `MetricsConfigManager#areMetricsEnabled(Object)`\r\n  - Add `MetricsConfigManager#getGlobalCollectionState`\r\n  - Add `MetricsConfigManager#getCollectionState(PluginContainer)`\r\n\r\nSigned-off-by: Steven Downer <grinch@outlook.com>",
    "head_branch": "feature/metrics-collection-state",
    "is_a_fork": true,
    "comments": [
      "> Not sure about the tristates.\r\n> This complicates the logic for plugin authors as they dont know what to do if it returns undefined.\r\n\r\nI can see why it would be confusing, how would you recommend going about it? Undefined is effectively false but without expressed intent on it being false.",
      "What is the purpose of changing the API?\r\nWhy should plugin devs care whether it is implicitly false or explicitly false?",
      "> What is the purpose of changing the API?\r\n> Why should plugin devs care whether it is implicitly false or explicitly false?\r\n\r\nFor what purpose would you hide that information from them? One defines intent not to allow stat collection while the other is just \"They haven't specifically decided but it's still disabled by default\". You still haven't told me how you would recommend going about it.\r\n\r\nWe could stick with only exposing a yay or nay to the plugin developers but I don't see the harm in them knowing a bit more.",
      "> > What is the purpose of changing the API?\r\n> > Why should plugin devs care whether it is implicitly false or explicitly false?\r\n>\r\n> For what purpose would you hide that information from them? One defines intent not to allow stat collection while the other is just \"They haven't specifically decided but it's still disabled by default\". You still haven't told me how you would recommend going about it.\r\n> \r\n> We could stick with only exposing a yay or nay to the plugin developers but I don't see the harm in them knowing a bit more.\r\n\r\nMy recommendation is: don't change the API.\r\nFor the following (related) reasons:\r\n* Using a Tristate does not implicate that false is the default.\r\n* It requires additional documentation that clearly explains what the states refer to\r\n  * Otherwise you might be mislead to \"if the plugin is not specified, you have to ask the server, if the server is not specified you can decide on your own\"\r\n* Checking for it is more complicated than a boolean\r\n* I don't see a benefit in exposing it\r\n  * Adding functions without real benefit is harmful in the long run.\r\n\r\nThe sole purpose of exposing this I can think of would be adding a plea to enable metrics if it is not defined. However if a plugin author actually pleas to enable metrics for their plugin, then I assume that they would do so even if metrics are explicitly disabled for them (and we shouldn't encourage plugin devs to do that either way).",
      "> However if a plugin author actually pleas to enable metrics for their plugin, then I assume that they would do so even if metrics are explicitly disabled for them (and we shouldn't encourage plugin devs to do that either way).\r\n\r\nOn the contrary, enabling plugin authors to mute their plugins willingly, will better their reputation to users. Once that happens, plugins that continue to beg after disabling will be looked down upon the community.\r\n\r\nWithout revealing that information, if plugin developers want to ask users to enable, they are forced to do so even when the user has explicitly opted out, or be forced to implement their own muting mechanism for each plugin.\r\n\r\n+1",
      "@ST-DDT also have a look at #1966  \r\n@Grinch in case you haven't check that issue, I think would be great if you could check it too."
    ],
    "commit_messages": [
      "Introduce Metrics Collection States (#2018)\n\nDeprecate MetricsConfigManager#areMetricsEnabled(PluginContainer)\r\nDeprecate MetricsConfigManager#areMetricsEnabled(Object)\r\nAdd MetricsConfigManager#getGlobalCollectionState\r\nAdd MetricsConfigManager#getCollectionState(PluginContainer)\r\n\r\nSigned-off-by: Steven Downer <grinch@outlook.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e73cd9087c4d6d37a440",
    "number": 2010,
    "body": "Heyo,\r\n\r\nI'm not sure if I've done everything needed to register a new DataManipulator so I've done what seemed relevant.\r\n\r\nDisabledSlotsData (DISABLED_SLOTS_DATA in CatalogEntityData) has methods:\r\n\r\n  - `takingDisabled()` (`ARMOR_STAND_TAKING_DISABLED`)\r\n  - `placingDisabled()` (`ARMOR_STAND_PLACING_DISABLED`)\r\n\r\nwhich each return `Map<EquipmentType, Boolean>`. The boolean for each slot is if that action is disabled (ie false allows access).\r\n\r\nFixes #1837 ",
    "head_branch": "1837-disabledslots",
    "is_a_fork": true,
    "comments": [
      "This can actually target stable-7.",
      "I appreciate the new additions! Definitely something that's been neglected. If possible, can you re-target this for `stable-7` so that it can be used in that API version? Do you intend to implement this? If you would like, we can provide some sort of assistance in understanding the implementation to do so.",
      "Moved to `stable-7` and used SetValue instead.\r\n\r\nI can probably implement it.",
      "> I can probably implement it.\r\n\r\nLet me know if you've got questions, I'm available on our [discord](https://discord.gg/sponge) to point you to some example implementations and basically what to look out for.\r\n\r\nSome immediate examples of an implementation that would closer match the \"feature implementation\" for this would be [the implementation of the ~~bloated~~ existing armor stand data for rotations](https://github.com/SpongePowered/SpongeCommon/commit/2f12890794ddd6bb2b9d33cf5602e4d57095969b)."
    ],
    "commit_messages": [
      "Added Data manipulator/Keys for Disabled Slots in an ArmorStand.\n\nKeys:\n\t- ARMOR_STAND_TAKING_DISABLED\n\t- ARMOR_STAND_PLACING_DISABLED\n\nDISABLED_SLOTS_DATA -> DisabledSlotsData + immutable counterpart:\n\t- takingDisabled -> Set<EquipmentType>\n\t- placingDisabled -> Set<EquipmentType>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e73dd9087c4d6d37a441",
    "number": 2009,
    "body": "Required for https://github.com/SpongePowered/SpongeCommon/pull/2270. This is a non-breaking change.",
    "head_branch": "sandstone",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2009 from SpongePowered/sandstone\n\nAllow GroundCoverLayers to vary depth based on Y position."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e73ed9087c4d6d37a442",
    "number": 2008,
    "body": "A few major additions are in this PR, plugin channel support for the login phase and request/response based message registration. The request/response system was originally added for the login phase but will be expanded to the normal ones as well. \r\n\r\n- `RawDataChannel` - Only during play phase.\r\n- `RawLoginDataChannel` - Only during login phase.\r\n- `MessageChannel` - Both login and play phases.`sendToServer` is limited to the play phase.\r\n\r\nHandlers are now attached to the `MessageBinding` which is returned by the register method. The reduces the amount of method parameters that were used previously.",
    "head_branch": "plugin-client-login-phase",
    "is_a_fork": false,
    "comments": [
      "@Cybermaxke Need this updated."
    ],
    "commit_messages": [
      "Channel API Improvements + Client login phase (#2008)\n\n* Improve the channel API.\r\n\r\n- Allow plugins to sync data with the client during the login phase.\r\n- Add request/reponse message system.\r\n\r\n* Remove getRegistry method from event.\r\n\r\n* Use LocalPlayer for ClientPlayerConnection.\r\n\r\n* Rename ClientPlayerConnection to LocalPlayerConnection.\r\n\r\n* Bring more flexibility to RawHandshakeDataRequestHandler.\r\n\r\nThis also fixes the need to instantiate a response channel buffer."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e73fd9087c4d6d37a443",
    "number": 2007,
    "body": "Eliminates the remaining usage of ticks. Timings still need to be done.",
    "head_branch": "eliminate-ticks",
    "is_a_fork": false,
    "comments": [
      "Ticks are a fundamental idea in just about any game engine. Is there a reason to remove the notion of a tick other than \"ticks are not a real unit\"?",
      "@simon816 Completely depends on the implementation, and even if you use ticks, who says you need to use 20 ticks per second, maybe 50 per second is an option. This also eliminates all the different units being used across the API, like this setter uses ticks, another one seconds or milliseconds.",
      "Note that you can still use \"minecraft ticks\" as a `TemporalUnit`, see `TemporalUnits.MINECRAFT_TICKS`",
      "If the Temporal classes are remaining concrete classes in the API, they need some tests.",
      "I'm not completely against this, but there have been some discussions over this and I wanted to get my thoughts down, as well as try to help get discussion going where it's going to be recorded.\r\n\r\nThe fundamental problem with this PR is the following:\r\n\r\n## Ticks Are Not Time Units and Should Not Be Treated As One\r\n\r\nWhile I can understand the reason why we might want to remove the idea of a tick from the API, as noted above, a tick is not a time unit, it is a unit of work that the server does and the beginning and end of a tick represent synchronisation points, snapshots where everything in the game is consistent with each other. A common misconception that a tick is 50ms - it is infact not at all. The vanilla game strives to **complete** each tick within 50ms, such that it can perform 20 units of work a second. A tick itself could last a much smaller amount of time and is different from tick to tick.\r\n\r\nIn a perfect world, the difference in time between the **beginning** of each tick is 50ms. Note that I didn't say **end**. So if we could guarantee that the tick **spacing** is 50ms, then it is a valid unit of time. **However, we cannot, and we can never guarantee that a tick _itself_ takes 50ms.** Now, that latter part is me being pedantic over phaseology but I feel it needs cleaning up. This is especially important if we run a task at the end of a tick - the task may happen 54ms later if the first tick took 2ms and the second 6ms.\r\n\r\nWe shouldn't be inferring a concrete connection between ticks and time, as is being proposed by including the `TemporalUnits#MINECRAFT_TICKS` unit for use with `Duration`s, because that really is comparing apples with oranges, about all you can say in that case is that they are both fruit, or in this case, indicate an action somewhere in the future. We say in the javadocs that one tick is 50ms... we'll we've now coupled back up to the implementation. Another implementation might not use a 20 TPS model, they might have 40, or 10, or 13, or 3.\r\n\r\nI don't, however, see the issue of having `expectedTickRate()` and `actualTickRate()` methods somewhere that exposes this information. Could also have a `float currentServerPerformance()` that returns a float between 0 and 1 that indicates what percentage of updates are being fired per second.\r\n\r\n## Ticks over Durations?\r\n\r\nShoving the notion of units of work that only has some approximate time meaning into a time based `Duration`, in light of this, is just plain wrong. If a server takes longer than 50ms to tick and you therefore don't get 20 ticks per second, then the duration is wrong. I know about this annotation that you've proposed (and I've commented on at length), but I almost feel like we're doing a disservice to API consumers by saying \"well, this storm will last 40 seconds, but your TPS is 15 so actually, it'll be longer, but I won't tell you that directly, you should just know that, have fun\". If they then set a scheduler to run after 40 seconds, the storm still has 10 seconds or so to go - if they were able to schedule on ticks, they would have been right on the mark. Durations in this way strip the consumer of syncing up with the game.\r\n\r\nThe counterpoint is that we should have events that cover these possibilities - which is probably true, but you may want to sync up with a mod that works in ticks.\r\n\r\nI suppose an alternative is to create an event that fires on tick end, but I can see that being abused by plugin developers very quickly.\r\n\r\n## Durations over Ticks?\r\n\r\nThere are situations where 20 ticks doesn't actually mean 1 second. \r\n\r\n* By enabling the realtime mixin, you are fundamentally changing the assumption of the game engine, \"do something in 20 ticks\" may suddenly become \"do something in 10 ticks because our ticks have taken twice as long as the game is expecting\" - in fact, this is the engine deciding what it should run per tick based on the duration, not the tick count. In that sense, the Duration is more accurate, not ticks.\r\n* A tick time is arbitary, and 20 ticks per second might not be used in all implementations. Exposing ticks means that plugin developers are going to be lazy and assume 20 TPS across all implementations (which is, I suspect, a fundamental driving force in this PR)\r\n* There is also the potential for an implementation to _not_ use ticks.\r\n\r\nAlso, a duration is a natural unit that we're all used to. Specifying ticks is not. However, with the way the game engine works, **all** javadocs (and even method names) for methods that get/set durations with a tick based storage with the words \"expected\" or \"approximate\".\r\n\r\n## Ticks or Durations?\r\n\r\nThe question is do we want plugin authors to be concerned about wall-clock time or synchronised tick times? In most cases, I imagine a plugin will want something to happen for a specific period of time, rather than ticks which is already understood to be highly variable - in which case this PR is a good thing. Specifying in ticks, on the other hand, allows for easy synchronisation across tasks when bad performance hits. You might want to process every tick or two, or after x ticks when you want a guarantee that something has developed, or on every entity update.\r\n\r\nWe need to choose what we really want our API to work with, on wallclock times or ticks. Or both. I don't see the removal of ticks from the API as a bad thing, but we must make sure that what was possible is possible after - and we should not pretend that converting between ticks and time makes sense, it does not.",
      "I agree with @dualspiral.\r\nTicks and durations are fundamentally different concepts that should not be mixed.\r\n\r\nAs an example, you've changed `Keys.MAX_BURN_TIME` to be of type `java.time.Duration`. There is no way to properly implement this without stripping out massive parts of the `TileEntityFurnace` code to support wall clock time.\r\ne.g. If I set the value to \"10 seconds\" then I expect that the fuel lasts 10 seconds. If normal TPS is 20 but the server is overloaded and runs at 10 TPS, I still want it to finish after 10 seconds.\r\nFrom a behavioural point of view, the \"fuel efficiency\" therefore changes depending on server load - I only get 50% efficiency at 10 TPS. Now, if the entire game engine somehow used wall-clock time then it would still be consistent (i.e. `10 seconds = x fuel usage units`, regardless of TPS speed). But this fundamentally changes how the engine works, good luck with that.\r\n\r\nWhat I described there is how I would expect a duration-based API to behave, this is how `SyncScheduler` works when given a duration (`delay(long delay, TimeUnit unit)`). `SyncScheduler` will run the task on the next tick where the wall-clock time equals (or exceeds) the given duration.\r\nThe scheduler API provides `delayTicks` and `intervalTicks` because ticks are not the same concept as duration.\r\n\r\nThe only feasible implementation of `MAX_BURN_TIME` would be to convert the duration into ticks using some sort of multiplier, but \"10 seconds is actually 20 because the server is overloaded\" is not how real-world wall clock time works (thus ticks are a different concept).",
      "When I was developing game mechanic plugins, I was nearly always interested in counting ticks, not wall time.\r\n\r\nEven when teleporting players, and lying to the players for the sake of communication, \"You will be teleported in 5 seconds\" The goal of that cooldown, is to make sure they are not in danger or being attacked by another creature or player.\r\n\r\nWhen the tick rate suffers, gameplay turns into slow motion, which means I want my plugins delays delayed as well so that it's repeatable, no advantage is gained, and so that custom circuits/contraptions can be relied upon to have reliable timing in redstone contraptions.\r\n\r\nWhilst the Wall-Clock mixin can have a positive player experience for newer players, hiding some aspects of performance issues, it absolutely wrecks redstone contraptions that rely upon those timings.\r\n\r\nThere are **some** circumstances when wall time is appropriate, but 9/10 for plugins I've made in the past I've wanted them to slow when the server does. Especially if they themselves are the cause of the performance issues, and violates player expectations of durations.",
      "+1 against this change. `Duration`s should be for time independent of ticks, and tick counts should be for ticks independent of time, and there should absolutely not be an attempt to unify them because they are fundamentally different constructs. `@TickBasedByDefault` is a poor way of putting it; it's not just that it's tick-*based*, it's that you're suddenly treating a `Duration` like another way of counting tick increments. Annotating a type is for what kind of values it accepts or produces; if you want a type used in a totally different way, use a different type. If the methods need to be unified so there's only one way of specifying durations, then intent should be specified by the *user*, not by the API; e.g. a `ServerDuration` parameter type, where you can pass `FlexibleDuration` which is tick-based or `ConcreteDuration` which is time-based.",
      "I was thinking about providing a custom \"duration\" class to represent ticks/time, `Duration` is also not as flexible as I originally thought. Properly naming this new duration is currently a problem, maybe `ServerDuration` is an option (`EngineDuration` to target client and server), but I am not sure about it. The new duration would hold the `TemporalUnit` which can be tick based or time based, and the duration value based on the unit.\r\n\r\nProviding a time based duration to a function that still uses ticks could convert that time based value to an estimated tick value based on the server performance.",
      "+1 for `EngineDuration`",
      "`TemporalUnit` being tick-based or time-based is again the wrong way of thinking about it. The time API is meant to be used in terms of increments of time, not in terms of increments of arbitrarily-timed events. The reason I mentioned subclassing is for that very reason, so that you can express something both in ticks and in time periods. A 50ms `TemporalUnit` *would* be useful, I've used them myself, but not as a tick increment but as a tick-sized time increment.",
      "I tried reading all this. As far as I can tell you are trying to remove the usage of Ticks and that it may mean plugin developers can't use a variable time frame to time actions in their plugins.\r\n\r\nI am on rewriting my port of the Movecraft plugin. The reason why the plugin uses Ticks, a variable time frame, over a set time frame, like Seconds, is due to lag.\r\n\r\nMovecraft is very performance intensive. By using Ticks, I can still synchronise plugin actions without putting additional strain on the server.\r\n\r\nI don't know if I explained that very well, but I hope it helps.",
      "Will be revisited in https://github.com/SpongePowered/SpongeAPI/pull/2107"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e740d9087c4d6d37a444",
    "number": 2006,
    "body": " * Fix longstanding heiarchy issues\r\n * Fix naming to be consistent across the board for common Entity parents\r\n * Remove worldness from Transform and turn it into a utility (as it was meant to be)\r\n * Correct events for Transform change\r\n * Correct javadocs in several areas\r\n\r\nPlease note that while I'll entertain discussion on some of my names and choices for locations of interfaces, I am pretty hard set\r\non where things are to be. Please speak up on obvious mistakes but don't feel bad if I deny requests for changes.\r\n\r\nSigned-off-by: Chris Sanders <zidane@spongepowered.org>",
    "head_branch": "api8/refactor/entity",
    "is_a_fork": false,
    "comments": [
      "@liach You asked before about making Humanoid a Ranger. I cleaned up Ranger usage and now that is included."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e741d9087c4d6d37a445",
    "number": 2005,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/2265)\r\n\r\nHave some Javadocs.\r\n\r\n\r\nNotes for API8:\r\n\r\n - Start/Tick Up could be one event with the current smeltTime\r\n - Tick Down could be a separate event\r\n - Start/Tick do not actually affect itemstacks\r\n - Interrupt has no smelting result. It was cancelled...\r\n - Finish only has a single result. This could include an actual SlotTransaction.\r\n - ConsumeFuel could  include an actual SlotTransaction.",
    "head_branch": "feature/smeltevent",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "implement SmeltEvent"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e742d9087c4d6d37a446",
    "number": 2004,
    "body": "This is marked as a Draft PR so that the extent of the changes I'm proposing can be seen. It is intended as a way to foster discussion on a specific point that previous PRs could not.\r\n\r\n**We are investigating how best to utilise the Cause system in our Command framework - the code in this PR is the purest option** - but hear me out as I explain what we're really looking at. This is long, but please read all of it before passing comment because I'm more interested in reaching convergence of ideas rather than a \"I don't like this, put it back how it was.\"\r\n\r\n### A recap of `Cause`s (and why we all should love them!)\r\n\r\nThe SpongeAPI and its implementation is a system driven by `Cause`s. They have primarily been used in events, though they have crept into data registration and other uses where we determine which plugin is doing what. It is a powerful tool in the plugin developer's toolkit, enabling not only the determination of redstone being caused by redstone, but being able to track the player who spawned the sheep who aimlessly walked onto a pressure plate turning on redstone wire and causing an explosion, or opening a door, or firing a command block...\r\n\r\n...except actually, we don't fully expose the cause to commands (we could get the cause from the CSM, but that's a live snapshot and _not_ the cause at the specific time a command was sent). So, we are setting out to remedy this. If a player fires a command block because they stood on a pressure plate, we want to be able to directly tell a command consumer \"hey, this player was the one who set your command off on this command block. Maybe you want to target them?\" \r\n\r\nThis could be really handy for game servers who use command blocks or signs to trigger events, but want the context of who triggered it, rather than who is nearby. So, we have been talking a lot internally (and in previous command PRs), but I wanted to really get opnions on this point, rather than as part of a big API PR because this is rather important.\r\n\r\n### Causing those Commands\r\n\r\nThe basic idea is that you could check the `Cause` for what's going on. The root might be a sign, but you can the scan the cause and find a `Player` who clicked on the sign. That sign could be a `Subject`, so permission checks are performed on that sign - but the player is the first `MessageReceiver` - so you send the messages to them! Similarly, you might have a command block executed by a sheep on a pressure plate - but you want to execute the command on a player only. So, no problem, let's just find the first `Entity` on the stack and just not execute if it's a player. By opening causes to the command system, commands can take advantage of this rich, contextual system we already have and make Sponge an even better system to develop commands against.\r\n\r\nEven better, we could expose our Event filters to Commands, so we can reduce the amount of boilerplate you write - want to have a command that only executes if the root of the command is a `Player`? Perhaps two different logic paths if you have a root `Player` or a root `Console`? While this is a little later down the line - `Cause`s will really enable all this, allowing command executors to get the same treatments as events (though specialised).\r\n\r\n### Removing those Sources?\r\n\r\nOf course, that shouldn't all be too contriversial... but you may have been alarmed by the title of this PR. Yes, we are considering the removal of `CommandSource`s in the API. The simple reason is, the cause already tells you the source of the command - particularly the root of the cause. The `CommandSource` is in API 7 a collection of the following:\r\n\r\n* `Subject` - an object that permissions can be attached to;\r\n* `MessageReceiver` - an object that can receive `Text` messages;\r\n* A `getLocale()` method (moved to `MessageReceiver` in API 8 as that is a more logical place for it\r\n* A `getName()` method for identifying this source as a `String` - this has been moved to `NamedIdentifiable` (but that name sucks IMO and could do with a better one if this goes ahead)\r\n\r\nSo, in most cases, these interfaces will simply replace the `CommandSource` and the various sub sources that existed prior to this. **However**, there are some sub sources that have already disappeared:\r\n\r\n* **`ProxySource`**: this is a source that wraps around a source to intercept permission checks etc. A common use for it _should_ be to front a player when executing a command from a different source, such as a Discord bot. In future, the Discord bot plugin should already be in the cause, but can push a `Player` to the cause prior to execution (or the player an then some other proxy `Subject` if they want to control permission checks, for example).\r\n* **`RemoteSource`** didn't belong - the command system in itself shouldn't care if a command executor is remote.\r\n* **`RconSource`** is now an `RconConnection` in the appropriate package\r\n* **`SignSource`** is now just the `Sign` that would be pushed to the `Cause`, **and would be a `Subject` only**.\r\n* **`CommandBlockSource`** similarly is just the `CommandBlock` and `MinecartCommandBlock`\r\n\r\n### Cause and Effect (on Plugin Developers)\r\n\r\nYou may see a problem here - plugin developers will still likely want to get a traditional command source out of the cause - such that they get an easy object to obtain the console or the player out of. So, we might want to consider a `CommandTarget` interface that can be used to group the `Console`, `Rcon` and `Player`s together - or more precisely, interfaces that indicate objects that would operate with commands more _interactively_ and would normally be the recipient of messages. Of course, command blocks would probably have to be in that category too as the output of command are important to them.\r\n\r\nWe also have to think about how Sponge managed components (parameters etc.) handle the cause for permissions and messages, but I was likely to go with first `Subject` and first `MessageReceiver` (there are currently overrides in the Context, but I fear they would be ignored and we are better just focusing on the direct `Cause`).\r\n\r\nThere is the potential to be more confusing - but with good documentation and established standards we can absolutely make the `Cause` the new `CommandSource`. We just need to make sure we do this right so it works for everyone.\r\n\r\n### Sourcing those Opinions!\r\n\r\nSo, the question is, do we:\r\n\r\n* Just remove all `CommandSource`s like this and document that permission checks should be performed on the first `Subject`, similarly, messages should go to the first `MessageReceiver`?\r\n* Add a `CommandTarget` marker interface that performs a \"quasi-`CommandSource`\" like job, but this rename indicating that command sources are no longer actual sources (that's the root of the `Cause` now!)\r\n* Always make `CommandSource`s the ultimate root of an object (this is closest to what Mojang does but we don't necessarily need to follow that for Sponge plugins)\r\n\r\nOpen for discussion, but as always, please keep it civil and please give reasoning. Note that we will likely go somewhere between the first two points as it stands.\r\n\r\n---\r\n\r\nJust on the note of the `Console` object appearing, it's there simply because I'd completely forgotten that I'd started working on it until most of the way through this PR. Note that the `Server` and `Console` objects are both `Subject`s to account for the possibility that (as said elsewhere) one console could support multiple servers and so someone, somewhere, might have different permissions per server... but that could also be too complex for the API. That, however, will likely go into api-8 sooner, once @Zidane, @Cybermaxke and I have settled on this (though I doubt we're far off that).",
    "head_branch": "feature/api-8-commandsource",
    "is_a_fork": false,
    "comments": [
      "I vote for the first option of selecting the first `Subject` and first `MessageReceiver`.\r\n\r\n1. It's a relatively simple solution to describe to developers new to Sponge.\r\n2. Works across any command framework one may use, be it the one Sponge provides or a third-party library.\r\n3. It unifies the command system with the event system.\r\n4. It just *feels* right.\r\n\r\nFor a while I was really adamant against replacing `CommandSource` with `Cause`, but after some thought it actually seems like the best way going forward.",
      "I might be misunderstanding how this will work, but I see a few problems with simply selecting the first `Subject` or `MessageReceiver`.\r\n\r\nSay that a player steps on a pressure plate that triggers a command block. I'm assuming the player would be earlier in the cause (because the pressure plate processing occurs before the command block processing).\r\n- This would mean that a plugin grabbing the first `MessageReceiver` would get the player, and output messages would then go to the player. Normally, these messages would be [stored in the command block](https://github.com/SpongePowered/SpongeAPI/blob/3fdbf2993d487e0170ce8f77823805e86fee254f/src/main/java/org/spongepowered/api/data/key/Keys.java#L1364) instead of being sent to the player.\r\n- If a plugin selects the first `Subject`, it would check the permissions of the player instead of the command block. The command execution should usually have the permissions of the command block, but it gets the player instead - who may have fewer permissions. (This case would also occur if a player clicks a sign and ends up before the sign in the cause.)\r\n\r\nOn the other hand, selecting the last one would also break in some cases. Take `/execute` as an example. Say that the console types `/execute as Steve run somecommand` (or `/execute Steve ~ ~ ~ somecommand` in 1.12 notation). The command should check the permissions of the console. However, if the console is before the player, selecting the last `Subject` would return the player, which would break the permission test.\r\n\r\nIs there something I'm missing here?",
      "Remember causes are last in, first out.\r\n\r\n> This would mean that a plugin grabbing the first MessageReceiver would get the player, and output messages would then go to the player\r\n> \r\n> If a plugin selects the first Subject, it would check the permissions of the player instead of the command block. The command execution should usually have the permissions of the command block, but it gets the player instead - who may have fewer permissions. (This case would also occur if a player clicks a sign and ends up before the sign in the cause.)\r\n\r\nNo, the first `MessageReceiver` and `Subject` would be the `CommandBlock` as the cause is effectively a last in, first out - `@First` really means latest on the stack. So, when the command block is triggered, that command block should be the root and the \"first\" subject/receiver.\r\n\r\n> The command should check the permissions of the console. However, if the console is before the player, selecting the last Subject would return the player, which would break the permission test.\r\n\r\nThis is the tricky part. The original solution was to use the `EventContext` as an override (so, if there is an object in `EventContextKeys.SUBJECT`, that would be checked as opposed to the direct cause). However, I explain above:\r\n\r\n> We also have to think about how Sponge managed components (parameters etc.) handle the cause for permissions and messages, but I was likely to go with first Subject and first MessageReceiver **(there are currently overrides in the Context, but I fear they would be ignored and we are better just focusing on the direct Cause)**.\r\n\r\nIn this case, there would be a specialist `Subject` that contained the permissions of the super user on the top of the stack, but the player second in the stack. This would allow the first `Subject` to be super users permissions, and the first `MessageReceiver` to be the player.\r\n\r\nNow, this is why I want to use event contexts as part of our command structure! The player isn't a direct cause, and so this is part of the event context - but if we do that, plugin developers aren't going to want to check the context before the cause each time. As I write this, I wonder if we'd be better served by creating a `CommandCause` object that has `getCause()`, `getSubject()` and `getMessageReceiver()` methods on it so that most plugins can just use the subject and message receiver easily, but have access to the `Cause` (which is all controlling this anyway).\r\n\r\nOf worthy note, if we were to retain `CommandSource`, then we'd still have to use a special proxy source to mask the player permissions when using `/execute`, so this is not a problem that has been created by making this switch - we would still have to make a subject proxy.",
      "> As I write this, I wonder if we'd be better served by creating a `CommandCause` object that has `getCause()`, `getSubject()` and `getMessageReceiver()` methods on it so that most plugins can just use the subject and message receiver easily, but have access to the Cause (which is all controlling this anyway).\r\n\r\nSo, if I'm understanding this correctly, a `CommandCause` would be effectively the drop-in replacement for a `CommandSource`? I don't see why this is any better than just having `Location`, `Rotation`, `Subject`, etc. each stored as an `EventContextKey`? Yes, plugin developers would now need to check those, but, if you have mappings to them in the existing `CommandContext` (which already has methods for a lot of these things already), you wouldn't need to introduce a new dummy `Cause`. I don't think it is too much to ask from developers to utilize the `CommandContext`.\r\n\r\nI understand the challenges in that, though. It is tempting to just grab the first `Player` off the `Cause` stack and run with it, but, commands aren't that simple, especially with `/execute` being as powerful as it is. Plugin developers will need to keep it in mind no matter what or risk their commands having unexpected behaviors, so, using `CommandContext` to check for permissions, location, etc. doesn't seem like a huge ask.\r\n\r\n> Of worthy note, if we were to retain `CommandSource`, then we'd still have to use a special proxy source to mask the player permissions when using `/execute`, so this is not a problem that has been created by making this switch - we would still have to make a subject proxy.\r\n\r\nOne of the developers on a project I work on currently does this using delegation, and, it *almost* works, but, Vanilla commands deal with `CommandSource`s a little funny so it causes weird side effects with Vanilla permissions. No matter what ends up happening, could this possibly be rectified?",
      "> I don't think it is too much to ask from developers to utilize the CommandContext.\r\n> \r\n> Plugin developers will need to keep it in mind no matter what or risk their commands having unexpected behaviors, so, using CommandContext to check for permissions, location, etc. doesn't seem like a huge ask.\r\n\r\nI think you're assuming that command consumers will always have a `CommandContext`. They won't - if you implement a command without using our framework, you simply get the `Cause`, not this context. That's why I'm proposing a `CommandCause`, it will effectively be a wrapper around the `Cause` with those methods on the `Context`. Everything will still be controlled by the `Cause` itself - the `CommandCause` would not be a dummy, but informed by (and exposes) the cause itself.\r\n\r\nEffectively, I'm proposing that this line:\r\n\r\nhttps://github.com/SpongePowered/SpongeAPI/blob/0520f48b05bc026c083f490991cdf3a39fd58cbf/src/main/java/org/spongepowered/api/command/Command.java#L122\r\n\r\nbecomes \r\n\r\n```java\r\nCommandResult process(CommandCause cause, String arguments) throws CommandException; \r\n```\r\n\r\nwhere `CommandCause` will have a `getCause()` method, plus the utility methods on `CommandContext`. As `CommandContext` already contains the methods, that wouldn't change on the context. It's simply a way to ensure that these methods are always available.\r\n\r\nAs for vanilla commands, yes, I'll keep this in mind.",
      "I was just writing a reply after I remembered that `Command` doesn't necessarily need to use `CommandContext`. `CommandCause` makes sense in that case! Disregard my above comment aside from the vanilla-related concern. Thanks!",
      "Note to self - `CommandSendEvent` was forgotten... need to readd.",
      "`ClickAction.ExecuteCallback` still uses `Cause`, which should be changed to `CommandCause`. Its factory method in `TextActions` also needs to be readded.",
      "+1 for the CommandCause idea. One of the primary failings of a map-and-key system is that what there is supposed to be is not immediately clear; which ones are optional in a particular context vs which ones are just never present in that context, for example. EventContextKeys should still be accepted *in* that cause, but a wrapper API guaranteeing things like location of execution, dimension of execution, alignment, rotation, executor, original executor, should have dedicated methods in some kind of wrapper class, that *don't* return Optional, as guarantees that these things always exist. Especially because these things are only used in commands and nowhere else, and context keys used lots of other places won't be used here.",
      "Soon:tm: sponge will be the plugin api that can detect the malicious plugin that called \"player.setOp\" :laughing:\r\n\r\nNote for implementation: While most parts of minecraft can be simulated by the vm stack, the command functions are stored in an external stack and their cause, etc. needs to be handled delicately.",
      "Any more comments? I'm going to merge this soon otherwise (and fix a couple of javadocs that have TODOs on them).",
      "We have the location but not the rotation of the command. Maybe change the Location to a Transform?",
      "How does that work if a block is the focus of the command?",
      "It would face the direction the block is facing (since command blocks are directional). Or maybe it'd be a rotation of zero if it's a nondirectional block, I don't know. But commands can have relative rotations to the execution targets, so a. it's gotta be in there and b. vanilla knows what to do.",
      "Making sure that all quantities in vanilla `ServerCommandSource` is present in the cause stack, and we should be fine.",
      "> Or maybe it'd be a rotation of zero if it's a nondirectional block, I don't know.\r\n\r\nAnd this is why it shouldn’t be a `Transform`, there is a difference between 0,0,0 and no rotational data. Adding a rotation separately makes more sense in this case.\r\n\r\nI do have to point out that this is all driven by the `Cause` and the `CommandCause` is solely driven by that. There is no separate cause stack for a command in normal usage. I’m not keen on adding every helper method under the sun, in the example of a command block, it’s going to be the message receiver so you can always get more information from that. Similarly, we do have the target block method which would also have this info.\r\n\r\nI am not saying I’m against adding the rotation, but do remember that the `CommandCause` is to simplify common actions and to allow plugins to harmonise with the impl (what Subject is being checked, etc.) and is not intended as a draconian toolkit that removes the point of the Cause in the first place.\r\n\r\nPlugins are allowed to think for themselves too!",
      "Right. The point of a CommandCause is to provide stuff that's guaranteed to be relevant.\r\nThe reason, however, that you *can't* just get the rotational data from the command block, is because commands have a relative rotation just like they have a relative position that may or may not be the execution target's actual position or rotation.",
      "> The point of a CommandCause is to provide stuff that's guaranteed to be relevant.\r\n\r\nWhere did I say that? Also what determines what is relevant? The `Cause` contains all information. The `CommandCause` contains that `Cause` and helper methods. **That's it**.\r\n\r\nVery much like how events don't have any particular guarantees, we've made that the case with commands too by making it use the `Cause` system. The point is that command can see _exactly_ where the command came from, who executed, why that execution occured, etc. etc. It all goes on the `Cause` and the `CommandCause` is a simple wrapper for the `Cause` that explains how the implementation will select a `Subject`, for example, so that plugins don't need to check the `SUBJECT` context on the cause before looking for the first `Subject` in the `Cause`. Same with the `MessageReceiver`.\r\n\r\nQuite simply, the point of the `CommandCause` is to harmonise how the `Cause` is used across Sponge and plugins, particularly across obtaining the `Subject` and `MessageReceiver`s.\r\n\r\nThe `Cause` is the ultimate control of this process. Everything will be present in the `Cause`, the `CommandCause` has no other information beyond this. This wrapper can simply be thought of as a specialised \"event\". That's it.",
      "Exactly. And the event has a rotation associated with it.",
      "Okay. I don't really think you're getting this point of this entire command system here and you are fixated on one point that I've not even rejected. \r\n\r\nCommands in Sponge can be summed up like this:\r\n\r\n**Commands using the Sponge system are different to those using the Vanilla system. By using the Cause system we, in effect, state that our commands have a different set of criteria upon execution - which is entirely our right to do.**\r\n\r\nOriginally, after much discussion with @Zidane, I was just going to provide the `Cause` of the command and tell developers to go nuts. We  make absolutely no guarantees about _anything_ when a Sponge command is invoked. The is no requirement for a `CommandSource` (indeed, they won't exist in our system), no requirement for a `Subject` to be present, or a `MessageReceiver`, it could just be a block and a sheep for all we care. The `CommandCause` is simply a set of methods that allow plugins to use the same objects that Sponge selects for the subject of a command, or the message receiver. It's not a guarantee - in fact, it fills two gaps - what we do if there is no `Subject` or `MessageReceiver`.\r\n\r\nWe make no guarantees about anything, because **Sponge commands have no guarantees about how  they are executed**. Now, if someone uses the `/execute` command to build up a source that has a rotation, then we'll add that to our cause. Yes, I will likely add an `Optional<Vector3d>` (even though the rotation is a `Vec2f` in the mojang code) that adds a rotation - again, not something I ever said I wouldn't do. In fact, using `/execute` will likely end up filling the `EventContext` with keys _such as_ `ROTATION`.\r\n\r\nShould `Rotation` be on the `CommandCause`? Yes, considering `Location` is on there it makes sense and it is something I missed. **I never said that I wouldn't do it**, I just haven't had enough time with all my other personal commitments to actually do it. But it seems to me that you've misunderstood what this system really is getting at - if you want something, go get it from the `Cause` because that really has all the information you need.\r\n\r\nOf course, as a quasi-event, I'd be following what https://github.com/SpongePowered/SpongeAPI/issues/1975 does."
    ],
    "commit_messages": [
      "Replace the CommandSource with a CommandCause\n\n* Split out notion of a console to the Game object, which is a MessageReceiver & Subject named SystemSubject\n* Make sure JDs are consistent with causes, remove anything to do with CommandSources\n* Renamed Nameable -> Nameable.Translatable.\n* Most objects now inherit Subject, MessageReceiver and Nameable.\n* Introduce the notion of the CommandCause, which is effectively a wrapper class that provides simple methods to get common entities from the cause. It is also a superinterface of CommandContext.\n* Add ExecuteCommandEvent.\n* Update for the use of factories to remove any unchecked warnings.\n* Update for CheckerFramework."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e743d9087c4d6d37a447",
    "number": 2002,
    "body": "Finished the first stage. Need some comments for the best design possible.\r\n\r\nSigned-off-by: liach <liach@users.noreply.github.com>",
    "head_branch": "api-8-builder-1",
    "is_a_fork": true,
    "comments": [
      "IMO adding the agent type to the goal might be helpful, but adding the other parameters to the goal builder severally  reduces the code readability/usability when using the builders.\r\n\r\n````java\r\ninterface Builder<O extends Agent, A extends LookIdleGoal<O>, B extends Builder<O, A, B>> extends GoalBuilder<O, A, B>\r\n````\r\nI might be wrong but the user would then have to use the following builder definition:\r\n\r\n````java\r\nLookIdleGoal.Builder<Zombie, LookIdleGoal<Zombie>, ???>\r\n````\r\nIs it even possible without generic type parameters or raw types?\r\nTry storing it in a variable.\r\n\r\nIt should be possible to simplify it like this:\r\n\r\n````java\r\ninterface Builder<O extends Agent> extends GoalBuilder<O, LookIdleGoal<O>, Builder<O>>\r\n````\r\nwithout reducing the extensibility much.\r\nIt is very unlikely that these interfaces are extended anyways, so a usage simplification would definitely be worth it.\r\n\r\nThe same also applies to some none goal builders.\r\n\r\n",
      "Nah. @ST-DDT Look at this for the sample usage of these new generic builders. https://github.com/SpongePowered/SpongeAPI/pull/2002/files#diff-e7a8c43871ed676925c231f14465bf8a\r\n\r\nYou declare a generic variable like this in a private method:\r\n```java\r\n    <B extends WatchClosestGoal.Builder<Fox, WatchClosestGoal<Fox>, B>> void handle(B builder) {\r\n        // do stuff with your builder!\r\n    }\r\n```\r\n\r\nWhen we update to java 10, we can also use `var` to have this type inferred correctly as well.",
      "Is java 10 support guaranteed to be available with the new release?\r\nIIRC var is not usable for fields though.\r\nAnd if you create templates, you definitely need to store it somewhere.\r\nLets assume you want to spawn three/n monsters each with the same goals atbdifferent. You'll want to configure each goal builder only once and then just invoke build on them three/n times.\r\n\r\nPlease make the API simple instead of fancy.\r\n",
      "Having a concrete builder and an abstract builder is definitely not fancy and harms interfacing for modded goals as well.",
      "If things do go bad, just use raw types. We always have that backing us up. Moreover, builders aren't meant to be kept for long; they are intended to be consumed and disposed quickly.",
      "> Having a concrete builder and an abstract builder is definitely not fancy and harms interfacing for modded goals as well.\r\n\r\nI don't want abstract builders. i don't want generic builders. I just want plain old builders. The current builders use recursive generics (A and B) to save a tiny amount of work when subclassing them. Also these classes are the leaves of the tree and are unlikely to be extended at all. It doesn't even help with the implementation.\r\n\r\nThe API should be easy to use. Having a fancy API design that make extending the API easy while it complicates the usage the API heavily, is not worth it.\r\n\r\nMaybe we should discuss this in its own issue?\r\n\r\n> If things do go bad, just use raw types. \r\n\r\nThat does not sound like good API design.\r\n\r\n> Moreover, builders aren't meant to be kept for long; they are intended to be consumed and disposed quickly.\r\n\r\nSo you force the users to use the classes in an a single specific way or create their own wrappers for them? Why did we make them resettable, copyable and reusable then?",
      "@ST-DDT If the builders aren't generic, I am fine with overriding each method that return the object itself manually. Persuade zidane or gabizou to remove the self types. It is a shame that java does not support it natively indeed.\r\n\r\n> unlikely to be extended at all\r\n\r\nI promise that you are very wrong here. Many mods have extended vanilla goals (ai tasks), which we cannot represent correctly according to our api 7 model (especially if the base owner type get more specific).\r\n\r\n> That does not sound like good API design.\r\n\r\nLook into `CatalogTypes`. All those catalog types with possible generics are raw types there! You need to blame Java, not me.\r\n\r\n> I just want plain old builders\r\n\r\nIf you really want simple and stupid, I suggest turning all goal builders into data builders backed by json data, or just make them return void on all methods and add a utility like \r\n```java\r\npublic static <T> void setup(T instance, Consumer<T> consumer) {\r\n    consumer.accept(instance);\r\n}\r\n```\r\nAnd do all setup of the builder in that consumer.\r\n\r\nAgain, the usage is not complicated. You just need to understand generics.",
      "@gabizou Make the call on this please.",
      "@liach doesn't appear he will be doing anything more with stuff like this, closing."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e744d9087c4d6d37a448",
    "number": 2001,
    "body": "Signed-off-by: liach <liach@users.noreply.github.com>\r\n\r\nFixes https://github.com/SpongePowered/SpongeAPI/pull/1995#issuecomment-490771299\r\n\r\nSome immutable and threadsafe annotations are dumped; they should be replaced by proper \"nolock\" \"locking\" annotations instead.",
    "head_branch": "api-8-checker",
    "is_a_fork": true,
    "comments": [
      "@Xakep_SDK Requesting a review from you as well.",
      "Looks good for me.\r\nI request removing jsr305 from here too: https://github.com/SpongePowered/plugin-meta\r\np.s. i never used checkerframework",
      "Big :+1: from me.",
      "Mind sharing the reason for this change?\r\nWhat are the benefits from using the checkerframework vs jsr305? Is it because jsr305 is dormant?",
      "1. JSR305 never was standard\r\n2. Doesn't support java 8 features, e.g. you can't do `List<@Nullable String> s`\r\n3. Has compatibility issues with java modules\r\nJSR305 works with modules, but you need to know how to deal with split packages, while checkerframework just works",
      "Reasons for @ST-DDT:\r\n1. jsr305 breaks with Java 9+ module system;\r\n1. checker framework has type use annotations, e.g. `Supplier<@NonNull T>` cannot supply `null` while `Predicate<@Nullable T>` can test `null`.\r\n1. checker framework is more complete: it has annotations for calls to methods in constructors, locking conditions, optional presence, taint/no taint, etc., compared to jetbrains annotations or jsr305.\r\n1. if we want to verify the validity, we can add checker framework's non-qual part to our test dependencies so that we can use checker itself to test the validity of our annotations.",
      "I don't see a specific issue with this in general.\r\n\r\nI'm not familiar with checkerframework so I'll ask, is there a way to use meta-annotations on `NonnullByDefault` to alias `@org.checkerframework.framework.qual.DefaultQualifier(org.checkerframework.checker.nullness.qual.NonNull.class)` like was done with `@NonNull` such the checkerframework can still work with it? I know we're breaking things left right and centre for 8 **but** keeping this annotation, if possible, doesn't really cost anything, is arguably more readable and it does make the diff a lot smaller making it easier to port any changes we _might_ have to make on top. It would also help if we have to make a wholesale change across all packages in the future for whatever reason and we can just change the meta-annotation on our annotation.\r\n\r\nIf not, sure, no problem, but I figured I'd ask.",
      "Nah. I don't think checker framework allows annotations to be an alias for other annotations, hence even if we keep `@NonnullByDefault`, it would no longer be effective.",
      "On a side note, we might consider adding a qualifier annotation set for server thread access, similar to that for gui access check. Opinions? https://checkerframework.org/manual/#guieffect-checker",
      "Manually merged into api-8. Thanks @liach !",
      "thanks zidane!"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e745d9087c4d6d37a449",
    "number": 1999,
    "body": "@gabizou \r\n\r\nI replaced the `Simple` value containers with the recycled `DataManipulator`s. I split it up into 3 interfaces `DataManipulator`, `MutableDataManipulator` and `ImmutableDataManipulator`. Making the mutable and immutable ones inner classes is still an option to be consistent with `Value`s.\r\n\r\nI also cleaned up the `Value` constructed and added `mutableOf` and `immutableOf` factory methods. Due the nature of generics, the appropriate `asMutable` and `asImmutable` method need to be called if you want to cast.\r\n\r\nBounded value keys now provide default min/max values and comparator at construction. So they can use the same factory methods.\r\n\r\nAnd some other misc stuff.",
    "head_branch": "feature/data-improvements",
    "is_a_fork": false,
    "comments": [
      "Manually merged in these changes into a single commit. Thanks for the improvements!"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e746d9087c4d6d37a44a",
    "number": 1998,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/2394) | [SpongeCommon (old)](https://github.com/SpongePowered/SpongeCommon/pull/2211) \r\n\r\nbased on changes in: https://github.com/SpongePowered/SpongeAPI/pull/1959\r\nmore changes in: https://github.com/SpongePowered/SpongeAPI/pull/2050\r\n\r\n#### SlotIndex -> int (already merged to API-8) ####\r\n* Replaced `SlotIndex` with Integers\r\n* renamed `poll`/`peek` with index -> `pollFrom`/`peekAt`\r\n\r\n#### Add MC 1.14 ContainerTypes (grouping may need adjustment) ####\r\n\r\n#### Changes to Inventory operations ####\r\n - `InventoryTransactionResult` is used for `set`/`offer`/`poll` including uses with index/pos  \r\n - added `InventoryTransactionResult#getPolledItems` for poll operations\r\n - operations on absent slot index/pos return `Type.NO_SLOT` result\r\n\r\n#### Other API Changes ####\r\n* removed `peek` with limit. (instead use query and totalQuantity)\r\n* set(stack) moved from Inventory to Slot (set on multiple slots was not clearly defined)\r\n* `size` replaced by `freeCapacity` (inverted meaning: size was non-empty slots)\r\n* `totalItems` renamed to `totalQuantity` (analog to `getQuantity` on `ItemStack`)\r\n* `getMaxStackSize` removed and added back as a `InventoryProperty`\r\n* `setMaxStackSize` removed (not implementable for most Inventory)\r\n* `getPlugin` removed and added back as a `InventoryProperty`\r\n* `ViewableInventory` gets `getViewers`, hasViewers`\r\n* `Container` gets `setCursor` and `getCursor`\r\n",
    "head_branch": "api8/redesign/inventory",
    "is_a_fork": false,
    "comments": [
      "Why remove `containsInventory`? How can you otherwise know if the inventory contains a child? E.g. a container contains the player main grid. Possibly rename it to `containsChild`?",
      "I guess i'll leave it in. But the way its implemented now its not always correct.",
      "`containsInventory` can be removed, since it was replaced by `containsChild`?",
      "no `containsInventory` still checks recursivly `containsChild` only one layer down"
    ],
    "commit_messages": [
      "Merge pull request #1998 from SpongePowered/api8/redesign/inventory\n\nInventory for API8 (part 2)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e747d9087c4d6d37a44b",
    "number": 1997,
    "body": "It is time to finish what I began years ago, starting with fixing the current API as a phase 1 of sorts.\r\n\r\n@liach will be helping with this.",
    "head_branch": "api8/redesign/ai",
    "is_a_fork": false,
    "comments": [
      "@liach I have made the changes you mentioned but am keeping the priority.",
      "@ST-DDT For pathfinder, #1758 will be incorporated here as zidane has said in discord.",
      "Thanks for the comments so far @ST-DDT and @liach . I have a decent local refactor going for another part of the API (I'm jumping all over the place) and will get back to this one very soon.\r\n\r\nIf you want to help me further, you could PR your changes @liach .",
      "Closing as @liach likely does not want to proceed with this. I will redo this to not require a superclass hotswap in the impl in api-8 but it is a remake of this API.",
      "Feel free to ask me if you want me to draft another api or implement it.",
      "@liach I have asked you numerous times in the past regarding updating/continuing this PR. You either never gave me feedback or stated you weren't doing so at the time. I will not accept a PR from you without a complete commitment on the API and implementing it 100%."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e748d9087c4d6d37a44c",
    "number": 1996,
    "body": "This PR is a WIP since the description and API itself needs to be javadoc'ed after all the manipulators were already removed. The description is being worked on as well.\r\n\r\n#### Correcting All the Missteps\r\n\r\nSince the ~dawn of time~ creation of what we know as \"Data API\", there have been several iterations of this system:\r\n\r\n- *Predecessor*: [The initial Item Data API PR](https://github.com/SpongePowered/SpongeAPI/pull/495)\r\n- *The First Version*:  [Data API v1, unifying `DataHolder` and introducing general `DataManipulator`s](https://github.com/SpongePowered/SpongeAPI/pull/542)\r\n- *Adding Values*: [introduction of Value API to Data API, (Data API v2)](https://github.com/SpongePowered/SpongeAPI/pull/685)\r\n- *Refactoring Registrations*: [Data API v2.1](https://github.com/SpongePowered/SpongeAPI/pull/1531) Adding `DataRegistration` and simplifying a majority of how `DataManipulator`s are persisted and registered.\r\n- *Overhauling Values*: [Data API v3](https://github.com/SpongePowered/SpongeAPI/pull/1843) which sought to redo various pitfals with working with `Value`s and `ImmutableValue`s, along with their creation. \r\n\r\nBut, there were several attempts at improving the system and usage:\r\n- [Custom DataManipulator class generation](https://github.com/SpongePowered/SpongeAPI/pull/1198)\r\n- [Allowing usages of `Key`s and `Value`s with various builders](https://github.com/SpongePowered/SpongeAPI/pull/1103)\r\n- [Adding **more** abstract classes for easier overriding](https://github.com/SpongePowered/SpongeAPI/pull/1393)\r\n- [Attempt No. 2 at class generation for easier custom data](https://github.com/SpongePowered/SpongeAPI/pull/1620)\r\n\r\nIt's been a clear given that we're also experiencing several requests at improving the quality of life with *just making simple data to attach a `String` to a `Player`*. So, here's our chance, and our proposal for a newly revamped **Data API v4: The Keep It Simple Stupid Edition**\r\n\r\n### What's the proposal?\r\n\r\nEver heard of `DataManipulator`? If that name sends shivers down your spine, gives you a headache at thinking about implementing one, or simply makes you want to just say \"screw that, i'll just use a `Map`\", you can finally rest as it's going the way of the dodo. The first thing that we've done is *eliminated all accessors of \"data\" through an already simple system: `Key`s. \r\n\r\n### Whoa whoa whoa, wait, how do you do that? What about my custom data?!\r\n\r\nWell, hold on, let me finish explaining the proposal! Geez.... Continuing, the accessors we've already established from Data API 2 was with `ValueContainer`, if you need a refresher, you can view it [here](https://github.com/SpongePowered/SpongeAPI/blob/ee2587f45a9948c19bc7ffa1258989024f285895/src/main/java/org/spongepowered/api/data/value/ValueContainer.java#L44). In short, it gives us the following methods:\r\n```java\r\npublic interface ValueContainer<C extends ValueContainer<C>> {\r\n  <V extends Value<E>, E> Optional<V> getValue(Key<V> key);\r\n  <E> Optional<E> get(Key<? extends Value<E>> key);\r\n}\r\n``` \r\nAnd to mutate, we've had `DataManipulator`, and `CompositeValueStore` previously available to [`offer(Key, E)` values](https://github.com/SpongePowered/SpongeAPI/blob/ee2587f45a9948c19bc7ffa1258989024f285895/src/main/java/org/spongepowered/api/data/value/mutable/CompositeValueStore.java#L191).\r\n\r\nThe nice thing about these accessors is that they've previously been backed by Sponge's implementation to where certain `Key`s would always have a value for a particular `DataHolder`, and mutating/supporting those keys was backed by an implementation I ended up calling `ValueProcessor`s and `DataProcessor`s. As you can imagine, `ValueProcessor` was designed for a single `Key` to `Value` retrieval/offering, whereas `DataProcessor` handled retrieval and offering of `DataManipulator`s. Since we've had intentions of registering `Key`s to `PluginContainer`s or `DataRegistration`s before, it's been an easy step to make to saying \"well, if `DataRegistration` has it's registered `Key`s, what purpose does the `DataManipulator` serve?\" And at that point, there's a few key differences:\r\n- `DataManipulator` served as the *container* of data that was `DataSerializable` and was contractually guaranteed to be serialized/deserialized from `DataHolder`s that would support it\r\n- `Value`s didn't know what or how their held values came from, or how to apply them to a `DataHolder`, they just knew the `Key` to value pairing.\r\n- `Key`s had a flakey system of exposing the `DataQuery` used to access the underlying data value from any `DataView`, but because Sponge added more `Key`s than vanilla supported, it was never implemented properly to get data out of `DataView`s from things like schematics.\r\n- `DataManipulator`s required an equal `ImmutableDataManipulator` with simlar `DataManipulatorBuilder` and `ImmutableDataManipulatorBuilder` implementations registered through `DataRegistration`, but wouldn't be able to determine if any of it's values were `Optional` except at deserialization\r\n- Plugin authors could not take advantage of the `Key` system by proxy to their own storage solutions without doing some hacks for serialization/deserialization.\r\n\r\nLooking over that bulletpoint list, I admitted that it was a convoluded system that had a high bar of entry for plugin developers to do something that should be made simple. So, I nuked what we know as `DataManipulator`s and their registrations, and their builders, and transformed `DataRegistration` into something *far far far cooler*: **A Registration object that plugins can register their `Key`s with appropriate serialization/providers for *persisting* data, while dynamic virtual data that is only retained as a cache requires no registration otherwise**.\r\n\r\n### Huh? Virtual dynamic data? Providers? Caches? Wat?\r\n\r\nOk, yeah, that was a huge mental leap from ~nuking~ removing `DataManipulator`s to dynamic virtual data. I'll explain it this way:\r\n\r\nIf I want to just store some ~data~ values to an `Entity`, and use the handy `getValue()` and `offer()` accessors, I just register my `Key` normally, and that's it. If I `offer(Value<MyCustomObject>)` afterwards, I know my ~data~ value will remain on that `Entity` except after a restart or reload. In other words, it is non-persisting values!\r\n\r\nHOWEVER, if I am a plugin that wants to *associate ~data~ values* to a `Player`, and store that data to the `Player`'s data file, I'd make a `Key`, like normal, and then use a `DataRegistration` to register the key, along with a `DataStore`. A `DataStore` is basically a glorified `DataBuilder` that can serialize and deserialize my custom values to and from a `DataView`. Simple enough, right? Right.\r\n\r\n### But what about this dynamic data and providers?\r\n\r\nAh yes, providers and dynamic data. Let's step back a little and [look at the implementation for how we got `Value`s out of the SpongeAPI provided `Key`s](https://github.com/SpongePowered/SpongeCommon/blob/5f19dd24c9969574b90d36caa1552015a383d94a/src/main/java/org/spongepowered/common/data/processor/value/entity/FallingBlockStateValueProcessor.java#L41), seems simple enough, right? It was designed to support getting values out of any `DataHolder` from the implementation that would support it. It can be read about [here](https://github.com/SpongePowered/SpongeCommon/blob/5f19dd24c9969574b90d36caa1552015a383d94a/src/main/java/org/spongepowered/common/data/ValueProcessor.java#L75). The neat thing about this was that we knew these values would be persisted in some way, but because the plugins were not having to witness that it was being serialized, **it provided a dynamic way to say \"here's a value for this key, but you don't know how it was created\"**. \r\n\r\nThankfully, after discussing with @dualspiral and @Cybermaxke and @Faithcaio a bit, we essentially designed the `DataProvider` to be exposed for plugin authors to be able to always provide their values, regardless whether the values are stored to the `DataHolder` or through a database. So, we had to make it a possibility for `DataProvider` to be exposed in the API.\r\n\r\n",
    "head_branch": "feature/data-stores",
    "is_a_fork": false,
    "comments": [
      "Will the pr be ready for review when data manipulator is removed?",
      "> Will the pr be ready for review when data manipulator is removed?\r\n\r\nIt'll be ready in probably a day or two once documentation is finished. `DataManipulator` as a whole is already nuked to orbit, just the replacement system for what's going to power getting/offering via `Key`s is needing to be drafted and reviewed.",
      "How will migration of existing `DataManipulator`s to the new system work? Or does that still need to be written?",
      "> How will migration of existing `DataManipulator`s to the new system work?\r\n\r\nSince the `DataView`s are already being passed to `DataManipulatorBuilder`s, the simpler explanation is this: Pass the `DataView` of that custom data to the new `DataStore` that is registered with the `DataRegistration` object (by requirement, otherwise, failed data takes over), and because they're deserialized very much the same way, the system still gets the `Value`s back. Alternatively, as @dualspiral was mentioning yesterday, Nucleus would be doing some sort of proxy handiwork where the old data will be removed and he'll be taking advantage of the `DataProvider` that ends up providing those values externally.",
      "In an effort to make things even more straightforward I propose also adding the following to `CompositeValueStore` (method naming I am unsure about):\r\n\r\n`<E> DataTransactionResult add(Key<? extends CollectionValue<E>> key, E value);`\r\n`<E> DataTransactionResult remove(Key<? extends CollectionValue<E>> key, E value);`\r\n`<K, V> DataTransactionResult put(Key<MapValue<K, V>> key, K valueKey, E value);`\r\n`<K> DataTransactionResult removeKey(Key<MapValue<K, ?>> key, K valueKey);`\r\n\r\n#### Example Usecase\r\n\r\nCurrently, in API 7, it is a bit convoluted to add a potion effect to a player:\r\n```\r\nplayer.transform(Keys.POTION_EFFECTS, (effects) -> {\r\n    ArrayList<PotionEffect> effects = new ArrayList<>(effects);\r\n    effects.add(<potion effect>);\r\n    return effects;\r\n});\r\n```\r\nor\r\n```\r\nArrayList<PotionEffect> effects = player.get(Keys.POTION_EFFECTS).orElse(new ArrayList<>());\r\neffects.add(<potion effect>);\r\nplayer.offer(Keys.POTION_EFFECTS, effects);\r\n```\r\n\r\nWith these new methods added it would become as simple as:\r\n```\r\nplayer.add(Keys.POTION_EFFECTS, <potion effect>);\r\n```",
      "@ItsDoot there’s already transform",
      "I understand but it shouldn't take multiple lines to just add a potion effect.\r\nIt's also undefined whether the list or map thats passed into `transform` is mutable or immutable.",
      "Primitive data types to avoid dealing with boxed types would be nice - `BooleanData crouching()` for example",
      "> If I offer(Value<MyCustomObject>) afterwards, I know my data value will remain on that Entity except after a restart or reload. In other words, it is non-persisting values!\r\n\r\nOnly advice I'd offer here is to have explicit subtypes for the keys for Non Persisting Values.\r\n\r\nMain usecase would be when plugins are registering them, to make sure they realize they are registering a Non Persisting value, as opposed to taking a shortcut for registering a persisting value.\r\n\r\nSmall UX thing sure, but there may be other ways of accomplishing the same goal. Just want the 2 registration methods **Crystal Clear** that not having a DataStore doesn't somehow auto magically create one for you using \"Sponge Magic\". e.g. default implementing a data store based off a key name and plugin name for instance, for simple value types.\r\n\r\n**Edit:** I may have mangled some of the terms used. but I hope my point comes across.",
      "> Only advice I'd offer here is to have explicit subtypes for the keys for Non Persisting Values.\r\n> \r\n> Main usecase would be when plugins are registering them, to make sure they realize they are registering a Non Persisting value, as opposed to taking a shortcut for registering a persisting value.\r\n> \r\n> Small UX thing sure, but there may be other ways of accomplishing the same goal. Just want the 2 registration methods **Crystal Clear** that not having a DataStore doesn't somehow auto magically create one for you using \"Sponge Magic\". e.g. default implementing a data store based off a key name and plugin name for instance, for simple value types.\r\n> \r\n> **Edit:** I may have mangled some of the terms used. but I hope my point comes across.\r\n\r\nAll of this will absolutely need to be documented on SpongeDocs (I'm sure @Inscrutable will appreciate the practical deletion of half of the custom data doc pages as it's pretty much simplified to a few liners). And it will be documented on the Javadocs. Nothing else about changing types will be needed.\r\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e74ad9087c4d6d37a44d",
    "number": 1995,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/2519)\r\n\r\nThis is purely for a marker to see what is changing. We're not intending on merging the branches into each other. `stable-7` will be merged in to keep `api-8` up to date with whatever small code effects take place.",
    "head_branch": "api-8",
    "is_a_fork": false,
    "comments": [
      "Comments from https://github.com/SpongePowered/SpongeAPI/commit/3a583919c9a1033fbedca37c4b40a7aa89275ad7 still need to be addressed.",
      "Is it possible to rename `ChannelBuf` to `ChannelBuffer`? \"Buf\" is not even a generally accepted notation, such as \"arg\", for example.",
      "> \r\n> \r\n> Is it possible to rename `ChannelBuf` to `ChannelBuffer`? \"Buf\" is not even a generally accepted notation, such as \"arg\", for example.\r\n\r\nThere is at least some precedent in having it, given Netty has ByteBuf, which ChannelBuf is a wrapper around. Not that I'm against changing it, just noting why it might be named what it is currently.",
      "Can we remove jsr305 for API 8?",
      "1. We can move to this: https://checkerframework.org/\r\n2. Or use `--patch-module` `javac` option to fix split modules",
      "> \r\n> \r\n> Should be a bounded value then\r\n\r\n@gabizou \r\nVanilla doesn't actually enforce it to go to 24000 which is why I didn't bound it.",
      "@Cybermaxke Please consider #1706 for the resource pack refactors.",
      "Boxing. How boxing will be handled in data and property api?",
      "> Boxing. How boxing will be handled in data and property api?\r\n\r\nhttps://github.com/SpongePowered/SpongeAPI/pull/1996#issuecomment-489378650",
      "Hi there! Please excuse my ignorance but is there a way of translating a `BlockState` to a `String` version of that state currently in the API? So if, say, a player is looking at a lever on the floor, and I have the `BlockState` of that lever, I could return `minecraft:lever[face=floor]`? If not, is this something in scope that could be added to API 8? How about the other way around, going from `String` to `BlockState` or `Item`? Thanks!",
      "I believe that should be part of the command argument system, as that's how it is in vanilla.",
      "Sure, a `Parameter` could be made that deserializes a `BlockType` or `Item`\nfrom a string argument, but, what about the other way around? That seems to\nnot really be territory for the command system...\n\nOn Tue, Jun 18, 2019, 1:34 AM liach <notifications@github.com> wrote:\n\n> I believe that should be part of the command argument system, as that's\n> how it is in vanilla.\n>\n> —\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/SpongePowered/SpongeAPI/pull/1995?email_source=notifications&email_token=AAN77BHMAX2GBZHHMC4GVUTP3BXWVA5CNFSM4HJW65QKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODX5HQPA#issuecomment-502954044>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAN77BCX5MJSUN46QXFE6UDP3BXWVANCNFSM4HJW65QA>\n> .\n>\n",
      "Just a side note:\r\nWe should prevent plugins from holding server instances in their plugin instances as servers are not always present on clients (and each time a new instance is created rather than an old server reused)\r\n\r\nIf we add a method to check for dedicated server, we should add one to check for integrated server as well in case some party write a custom server.",
      "> Just a side note:\r\n> We should prevent plugins from holding server instances in their plugin instances as servers are not always present on clients (and each time a new instance is created rather than an old server reused)\r\n\r\nJust like with worlds, plugins are always told not to ever store references of servers, worlds, players, entities, etc. Nothing we can do to stop them from making that mistake.\r\n\r\n> If we add a method to check for dedicated server, we should add one to check for integrated server as well in case some party write a custom server.\r\n\r\nLiterally just means that the `isDedicatedServer()` will return `false` always for the lifetime of the `Game` instance.",
      "Also if possible consider adding a camera view entity to the client api",
      "> \r\n> \r\n> Also if possible consider adding a camera view entity to the client api\r\n\r\nNot at this time. The amount @gabizou has added is honestly the extent we want to go to for the time being.",
      "There is no `package-info.java` files in the subpackages of `org.spongepowered.api.world.gen`."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e74bd9087c4d6d37a44e",
    "number": 1993,
    "body": "",
    "head_branch": "feature/gradle-4.10.3",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update to Gradle 4.10.3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e74cd9087c4d6d37a44f",
    "number": 1991,
    "body": "This fixes two typos in the documentation of the `UseItemStackEvent` event.",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [
      "Well, apparently it's not ok to submit pull requests that are so small.",
      "You could tackle cleaning up the OCD issues existing in the API, usually one of the core devs will perform such a task, but since the API hasn't been in heavy development as of late, I'd permit a contribution of that kind, that way it's a scatter gun PR that fixes all the OCD issues at once, instead of several smaller commits/prs."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e74dd9087c4d6d37a450",
    "number": 1990,
    "body": "**API** | [Common](https://github.com/SpongePowered/SpongeCommon/pull/2238) | [Forge](https://github.com/SpongePowered/SpongeForge/pull/2694) | Vanilla | [KotlinAdapter](https://github.com/Cybermaxke/KotlinAdapter)\r\n\r\nSupports alternate plugin instantiation and injections. Can be used e.g. for kotlin/scala object support, kotlin delegate property injections, custom plugin injections, etc.\r\n\r\nI am going to write a test project to demonstrate how it can be used. SpongeVanilla support will follow once it's successfully tested on SpongeForge.\r\n\r\nKotlin Adapter:\r\nhttps://github.com/Cybermaxke/KotlinAdapter/blob/master/src/main/kotlin/org/lanternpowered/kt/adapter/KotlinAdapter.kt\r\n\r\nKotlin Test Plugin:\r\nhttps://github.com/Cybermaxke/KotlinAdapter/blob/master/src/main/kotlin/org/lanternpowered/kt/plugin/TestPlugin.kt",
    "head_branch": "plugin-adapter",
    "is_a_fork": false,
    "comments": [
      "Can you also add support for guice modules for plugins?\r\nE.g. developer specifies module class in plugin annotation and then impl. installs that module for plugin's injector.",
      "👎 for cluttering up the `@Plugin` class.\r\n\r\nIf we go the route that FML went, the annotation would be specific to the default java loader. The Kotlin loader would have to provide its own loading scheme.\r\n\r\nI would also like to see this done as a [ServiceLoader](https://docs.oracle.com/javase/8/docs/api/java/util/ServiceLoader.html).",
      "I don't think it's cluttering the annotation, it's not like it's required which could clutter the usage. Same goes for the modules. We could always move them to separate annotations if needed.\r\n\r\nGoing down the road of reimplementing the complete loader is going to complicate things, you'll need to reimplement the `PluginContainer`, handle class loading, annotation scanning. And in the end, we'll just end up with yet another `Plugin` annotation. I also don't see how this complete control is going to add any more value than what's already possible by injector transformations.\r\n\r\nThe goal of the plugin adapters isn't to reimplement of what's already there, replacing the complete loading system isn't worth it IMO.\r\n\r\nIf you also look at what forge uses it for in there scala adapter, it's just to provide language specific injections. Which can easily be handled by guice.",
      "We'd need some way of instantiating PluginContainer in a safe way if we had separate annotations. This actually seems like *less* bloat to add another field to Plugin.",
      "Will there be any way to avoid having to interface with Guice so that I can wire up by stuff statically? I don't really see any value in this from a Scala point of view at least if I can't.\r\n\r\nAlso, a bit unsure what you're talking about with the Scala adapter for Forge injecting language specific stuff. It doesn't inject anything. No mod or plugin annotation, or anything like that. You specify the name of the plugin object in the toml file, and go on your way.",
      "You don't have to use guice injections in your scala plugin, sponge uses it to construct the instance. You can register a provider and implement it however you like.\r\n\r\nAs for the scala adapter, I looked at a older version that didn't use any config, when it was still in Forge.\r\n\r\nI also don't feel like exposing the construction of `PluginContainer`s is a good idea, maybe a way to register a alternate annotation and map those to PluginContainer values is better? And optionally registering adapters, etc.\r\nE.g. \r\n```kotlin\r\nannotation class KotlinPlugin(val id: String, val name: String)\r\n\r\n// Find a way to register annotations?\r\nregistry.registerPluginAnnotation(KotlinPlugin::class.java, KotlinPlugin::id).mapName(KotlinPlugin::name).adapter(MyAdapter())\r\n```",
      "Actually it would be nice to not have to use the Plugin annotation, or any annotation at all. This API could then be extended to stuff not even Java-based, such as scripting plugins, so they could register each script set as a plugin.",
      "Are we going to revisit this for API 7, or are we just going to leave this for the [Launcher](https://github.com/SpongePowered/plugin-spi) project in API 8?",
      "I am closing this.\r\n\r\nAs dual linked, plugin-spi is very lightweight and super simple to implement a language loading service for other JVM based languages (or even ones that aren't anchored in the JVM). You can easily add kotlin/scala features to your own service.\r\n\r\nNo plans for api-7 to gain this change."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e74ed9087c4d6d37a451",
    "number": 1987,
    "body": "[Specification](https://github.com/SpongePowered/Schematic-Specification/pull/13) | **SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/2231)\r\n\r\nThis adds API to `7.2` with default method implementations to avoid backwards incompatibilities with any plugins who implement the `Schematic` interface. Likewise, due to the nature of older schematics not having the same data as the new format would support, the older data will be considered `Optional`.\r\n\r\nIt is intended that the `Optional` information (such as `Collection<EntityArchetype>` or `Optional<MutableBiomeVolume>`) will remain optional and we will be offering those options when schematics are being created via builders.\r\n\r\nImplementation is pending currently. Feedback is requested on the API, but Javadocs are not completed.",
    "head_branch": "feature/schematic-v2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Modify API to support Sponge Schematic Format Specification version 2.\n\nSpecifically, this adds non-binary-breaking changes to Schematic and\nArchetypeVolume and their related builders so that previous usages of\nthe API will be able to support the new Schematic format out of the box.\nThe default implementations are only provided for external\nimplementations of the Schematic API, so they do not break when plugin\nauthors use them. By default, new ArchetypeVolumes being created may or\nmay not include EntityArchetypes, but the implementation will support\nthem. Likewise, biome support is provided through Extents when creating\na Schematic, as ArchetypeVolume is not suitable for biome support.\n\nFuture API versions may break this API to add better capabilities with\nArchetypeVolumes and Schematics.\n\nSigned-off-by: Gabriel Harris-Rouquette <gabizou@me.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e74fd9087c4d6d37a452",
    "number": 1980,
    "body": "[SpongeGradle](https://github.com/SpongePowered/SpongeGradle/pull/22) | **SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/2374) | [SpongeVanilla](https://github.com/SpongePowered/SpongeVanilla/pull/419) | [SpongeForge](https://github.com/SpongePowered/SpongeForge/pull/2970)\r\n\r\nThis is a **working** PR with the development lock step with **SpongeGradle**. While this technically is compatible with Gradle 4.10.3, I've elected to use the latest Gradle 5.6.2 (as of current writing) to take advantage of the improved Kotlin-DSL since those versions, and configuration avoidance throughout the build process. \r\n\r\nSome changes:\r\n- Constants are just constants in files\r\n- Things that should've been made properties are now properties and/or functions in SpongeGradle or in the `gradle.properties` of their respective projects\r\n- Updated to use appropriate Gradle ideologies with configuration avoidance (lazy evaluation)\r\n- Reduced the overall build file size and using as much handling with the gradle plugins to configure most things we've otherwise duplicated and/or scripted with other scripts.",
    "head_branch": "build/kotlin-dsl",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Small changes from SpongeGradle.\n\nSigned-off-by: Gabriel Harris-Rouquette <gabizou@me.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e750d9087c4d6d37a453",
    "number": 1977,
    "body": "Replaces #1759\r\nFixes #1526, tweak generation for sponge event factory\r\nSigned-off-by: liach <liach@users.noreply.github.com>",
    "head_branch": "1.13-event-gen-fix",
    "is_a_fork": true,
    "comments": [
      "Note: This PR was automatically closed because the `1.13` branch was deleted. It will need to be reopened to target `api-8` instead.  See https://github.com/SpongePowered/SpongeAPI/pull/1428#issuecomment-539689855.",
      "Ah, too lazy to make another pr"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e751d9087c4d6d37a454",
    "number": 1973,
    "body": "",
    "head_branch": "1.13-better-weather",
    "is_a_fork": false,
    "comments": [
      "Note: This PR was automatically closed because the `1.13` branch was deleted. It will need to be reopened to target `api-8` instead.  See https://github.com/SpongePowered/SpongeAPI/pull/1428#issuecomment-539689855."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e752d9087c4d6d37a455",
    "number": 1972,
    "body": "**API** | [Common\r\n](https://github.com/SpongePowered/SpongeCommon/pull/2197)\r\nAdds a low level API which represents minecraft tags.",
    "head_branch": "1.13-tags",
    "is_a_fork": false,
    "comments": [
      "Moreover, do we want to expose the direct components of each tag (so a method to get direct catalog components and another to get directly referenced tags)",
      "Note: This PR was automatically closed because the `1.13` branch was deleted. It will need to be reopened to target `api-8` instead.  See https://github.com/SpongePowered/SpongeAPI/pull/1428#issuecomment-539689855.",
      "@Cybermaxke Will work on this feature be resumed?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e753d9087c4d6d37a456",
    "number": 1969,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/2191)\r\n\r\nFix https://github.com/SpongePowered/SpongeAPI/issues/1650",
    "head_branch": "keys/used-hand",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add EventContextKeys.USED_HAND (#1969)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e754d9087c4d6d37a457",
    "number": 1968,
    "body": "@Cybermaxke You raised the same point a while back. Did I miss something ?\r\n\r\nFix https://github.com/SpongePowered/SpongeAPI/issues/1721\r\nClose https://github.com/SpongePowered/SpongeAPI/issues/892\r\n\r\n",
    "head_branch": "plugin-containers",
    "is_a_fork": true,
    "comments": [
      "You have already fixed some of them, but I anyway made a complete list.\r\n\r\nSearch by \"**plugin**\" keyword:\r\n\r\n```\r\nAssetManager#getAsset(Object plugin, String name)\r\nChannelRegistrar#createChannel(Object plugin, String channel)\r\nChannelRegistrar#createRawChannel(Object plugin, String channel)\r\nChannelRegistrar#getOrCreate(Object plugin, String channel)\r\nChannelRegistrar#getOrCreateRaw(Object plugin, String channel)\r\nChunkPreGenerate.Builder#owner(Object plugin)\r\nChunkTicketManager#createEntityTicket(Object plugin, World world)\r\nChunkTicketManager#createPlayerEntityTicket(Object plugin, World world, UUID player)\r\nChunkTicketManager#createPlayerTicket(Object plugin, World world, UUID player)\r\nChunkTicketManager#createTicket(Object plugin, World world)\r\nChunkTicketManager#getAvailableTickets(Object plugin, World world)\r\nChunkTicketManager#getMaxTickets(Object plugin)\r\nChunkTicketManager#registerCallback(Object plugin, ChunkTicketManager.Callback callback)\r\nCommandManager#register(Object plugin, CommandCallable callable, List<String> aliases)\r\nCommandManager#register(Object plugin, CommandCallable callable, List<String> aliases, Function<List<String>,List<String>> callback)\r\nCommandManager#register(Object plugin, CommandCallable callable, String... alias)\r\nEventManager#registerListener(Object plugin, Class<T> eventClass, EventListener<? super T> listener)\r\nEventManager#registerListener(Object plugin, Class<T> eventClass, Order order, boolean beforeModifications, EventListener<? super T> listener)\r\nEventManager#registerListener(Object plugin, Class<T> eventClass, Order order, EventListener<? super T> listener)\r\nEventManager#registerListener(Object plugin, TypeToken<T> eventType, EventListener<? super T> listener)\r\nEventManager#registerListener(Object plugin, TypeToken<T> eventType, Order order, boolean beforeModifications, EventListener<? super T> listener)\r\nEventManager#registerListener(Object plugin, TypeToken<T> eventType, Order order, EventListener<? super T> listener)\r\nEventManager#registerListeners(Object plugin, Object obj)\r\nEventManager#unregisterPluginListeners(Object plugin)\r\nGameRegistry#registerAITaskType(Object plugin, String id, String name, Class<? extends AbstractAITask<? extends Agent>> aiClass)\r\nInventory.Builder#build(Object plugin)\r\nMetricsConfigManager#areMetricsEnabled(Object plugin)\r\nPermissionService#newDescriptionBuilder(Object plugin)\r\nScheduler#createAsyncExecutor(Object plugin)\r\nScheduler#createSyncExecutor(Object plugin)\r\nScheduler#getScheduledTasks(Object plugin)\r\nServiceManager#setProvider(Object plugin, Class<T> service, T provider)\r\nShapedCraftingRecipe.Builder.EndStep#build(String id, Object plugin)\r\nShapelessCraftingRecipe.Builder.EndStep#build(String id, Object plugin)\r\nSimpleServiceManager#setProvider(Object plugin, Class<T> service, T provider)\r\nSqlService#getDataSource(Object plugin, String jdbcConnection)\r\nTask.Builder#submit(Object plugin)\r\nTimingsFactory#of(Object plugin, String name, Timing groupHandler)\r\nTimings#of(Object plugin, String name)\r\nTimings#of(Object plugin, String name, Timing groupHandler)\r\nTimings#ofStart(Object plugin, String name)\r\nTimings#ofStart(Object plugin, String name, Timing groupHandler)\r\n```\r\n\r\nSearch by \"**instance**\" keyword:\r\n\r\n```\r\nCommandManager#getOwnedBy(Object instance)\r\nConfigManager#getPluginConfig(Object instance)\r\nConfigManager#getSharedConfig(Object instance)\r\nPluginManager#fromInstance(Object instance)\r\n```",
      "@Lignium \r\n\r\nJust a quick note:\r\n\r\nThis is an API PR, as such I'm focusing on the API.\r\nYou need to be careful, some of those methods are used by mods too (see `ChunkTicketManager`), I can't blindly replace everything.\r\n\r\nThank you for the list. I've missed a few, I will fix it soon.\r\n",
      "Sponge API is used by only plugins, isn't it? Mods can only use Forge API.",
      "> Sponge API is used by only plugins, isn't it? Mods can only use Forge API.\r\n\r\nNo, mods can freely use the SpongeAPI if they so wish. Note that they can [use their `ModContainer` as the `PluginContainer` as we mixin the `PluginContainer` interface into `ModContainer`.](https://github.com/SpongePowered/SpongeForge/blob/stable-7/src/main/java/org/spongepowered/mod/mixin/core/fml/common/MixinModContainer.java#L50-L51)",
      "Sorry, I worded it poorly. \r\nLet me rephrase that: part of the API is implemented in SpongeForge and it's using Forge methods/classes.\r\n\r\nhttps://github.com/SpongePowered/SpongeAPI/blob/6632f971b9a3b04aa839ed28ce4839e02dc32b9b/src/main/java/org/spongepowered/api/world/ChunkTicketManager.java#L57\r\n\r\nhttps://github.com/SpongePowered/SpongeForge/blob/1544c736731f603d7818e5aff1db7090a2085fd9/src/main/java/org/spongepowered/mod/service/world/SpongeChunkTicketManager.java#L62\r\n\r\nIn this case, I can't change the signature to PluginContainer. \r\n\r\nEDIT: dual explained the part about mods being able to use the SpongeAPI",
      "@ImMorpheus But you may well change the implementation of this method, by using a call of `PluginContainer#getInstance()` to convert from container to instance.",
      "There would be no point in changing the argument type to PluginContainer then. Why convert back and forth between PluginContainer and Object ?\r\n\r\nEDIT: nope, dual raised a good point",
      "I'm inclined to agree. The fact that Forge needs the actual plugin instance is an implementation detail really and as @Lignium said, we should make the API accept a `PluginContainer` if we are doing that everywhere else and deal with the conversion in SC/SF.",
      "@ImMorpheus The issue https://github.com/SpongePowered/SpongeAPI/issues/1721 was about the fact that we were requiring the plugin instance/id and id in the `build` method and doing this inconsistently.\r\nThat issue got fixed in https://github.com/SpongePowered/SpongeAPI/commit/d40b52e9a046a02d072af660b52f589d46f87e0c, I just forgot to close it",
      "I hope you will not reject this pull request?",
      "I will not close it, but it's unrelated.\r\n\r\nThese are good changes because you can no longer pass in just any object. But it could be annoying that you always have to pass in the container.",
      "Previously, the majority of these methods required the actual `@Plugin` annotated instance to be passed to them, not the `PluginContainer`, unless I'm mistaken. In that vein, shouldn't the javadocs reflect that we're not passing the plugin instance but, rather, the plugin container? The container is now being referred to as the plugin instance and while it should be obvious given the method signature what's required, it seems inconsistent.\r\n\r\nFeel free to ignore my ramblings if I'm wildly off-base.",
      "The current `Object` can be the `PluginContainer` or the `@Plugin` annotated instance. Both are valid options."
    ],
    "commit_messages": [
      "Move all the plugin object arguments to PluginContainer (#1968)\n\n* Move all the plugin object arguments to PluginContainer\r\n\r\n* I missed these\r\nthanks to Lignium\r\n\r\n* More PluginContainer\r\n\r\n* you too, timings"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e755d9087c4d6d37a458",
    "number": 1967,
    "body": "Should fix https://github.com/SpongePowered/SpongeCommon/issues/1607\r\n\r\n\r\n",
    "head_branch": "fix/nearby-entities",
    "is_a_fork": true,
    "comments": [
      "Shouldn't you be using `distanceSquared` as it was before instead of `distance`, to bypass a square root calculation?"
    ],
    "commit_messages": [
      "Delegate getNearbyEntities to getEntities (#1967)\n\n* Delegate getNearbyEntities to getEntities\r\n\r\n* Bypass a square root calculation by using distanceSquared"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e756d9087c4d6d37a459",
    "number": 1965,
    "body": "In 1.13, SPacketCustomPayload uses ResourceLocations for channels names\n(all vanilla channels use the \"minecraft\" namespace).\n\nThis commit changes our custom channel API to reflect this change,\nrequiring plugins to use a CatalogKey for their channel name",
    "head_branch": "feature/1.13-channel",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Use CatalogKey for custom channel names\n\nIn 1.13, SPacketCustomPayload uses ResourceLocations for channels names\n(all vanilla channels use the \"minecraft\" namespace).\n\nThis commit changes our custom channel API to reflect this change,\nrequiring plugins to use a CatalogKey for their channel name"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e757d9087c4d6d37a45a",
    "number": 1960,
    "body": "This PR fixes `GenericArguments.SequenceCommandElement` so that when any of its elements' usages are empty, it will not append extra spaces to the resulting usage.\r\n\r\n#### Use Case:\r\n\r\nI have a Kotlin annotation-based command system that represents functions' containing classes (needed to be able to call the function with `kotlin-reflect`) as hidden `CommandElement`s (i.e. they aren't part of the command's displayed usage). Currently, whenever the command functions are built with multiple containing classes, there are a bunch of extra spaces appended after the command's name. It would look better if those additional spaces were not there.",
    "head_branch": "stable-7",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Do not append spaces after CommandElements whose usages are empty. (#1960)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e758d9087c4d6d37a45b",
    "number": 1959,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/2211) (outdated)\r\n\r\nRedoing custom Inventory creation.\r\nMore changes based on this branch here: https://github.com/SpongePowered/SpongeAPI/pull/1998\r\n\r\nThe current API is split up into 3 \r\n - basic inventories - these inventories cannot be opened.\r\n - viewable inventories - inventories that can be opened.\r\n - Inventory menus - Wrapper around viewable inventory with various callbacks and utility methods.\r\n\r\nalso InventoryArchetypes are gone.\r\n\r\n#### Basic Inventory ####\r\n`Inventory.Builder`\r\nInventory is build using a sequence of either\r\n - indexed Inventory\r\n - grid Inventory\r\n - existing Inventory\r\n\r\nafter you are done building the inventory structure you can set \r\n - UUID property \r\n - Carrier\r\n\r\nSponge will not allow the resulting inventory to be opened.\r\nFor that you'll need a:\r\n\r\n#### ViewableInventory ####\r\nYou start by choosing one vanilla `ContainerType`.\r\nThen you can build your inventory from various existing Inventories or Dummy Inventories.\r\nIf you define a Slot multiple times only the last time will count. (see example below)\r\nWhen completing the final structure all slots needed for the ContainerType need to be defined.\r\nAfter you are done building the inventory structure you can set \r\n - UUID property \r\n - Carrier\r\n\r\nIf you want to add callbacks to specific Slots you'll need the:\r\n\r\n#### InventoryMenu ####\r\n \r\nAll InventoryMenu are based on one ViewableInventory.\r\nIt keeps track of Containers opened by `InventoryMenu#open`.\r\n\r\nBy default all changes to the \"top\" inventory are cancelled.\r\nYou can change this by using `setReadOnly(false)`.\r\n\r\nSimple callbacks can be registered for \r\n- `click`\r\n- `change` (change won't happen when global readonly)\r\n- `readonly` (for specific slots; no effect when already global readonly)\r\n- `close`\r\nand unregistered at any time.\r\n\r\nYou can change the current Inventory while it is opened by one or more players.\r\nIf the new inventory has a matching `ContainerType` Sponge will swap out the Slots silently.\r\nOtherwise inventory will be reopened and all existing callbacks cleared.\r\n\r\nChanging the Title will also result in the Container opening again.\r\n\r\n\r\nExample Usages below\r\n",
    "head_branch": "feature/viewableinventorybuilder",
    "is_a_fork": false,
    "comments": [
      "#### Example Usage: ####\r\n\r\n```java\r\nInventory inv1 = Inventory.builder().grid(3, 3).completeStructure().build();\r\nInventory inv2 = Inventory.builder().grid(3, 3).completeStructure().build();\r\nInventory inv3 = Inventory.builder().grid(9, 3).completeStructure().build();\r\n\r\nViewableInventory inv = ViewableInventory.builder()\r\n        .type(ContainerTypes.CHEST_3X9)\r\n        .grid(inv1.slots(), new Vector2i(3,3), 0)\r\n        .grid(inv2.slots(), new Vector2i(3,3), new Vector2i(3, 1))\r\n        .grid(inv3.slots() /*TODO query for grid*/, new Vector2i(3, 3), new Vector2i(6, 3))\r\n        .slots(Arrays.asList(inv3.getSlot(SlotIndex.of(0)).get()), 37)\r\n        .dummySlots(1, 16)\r\n        .fillDummy()\r\n        .completeStructure()\r\n        .identity(UUID.randomUUID())\r\n        .build();\r\n```\r\n\r\n\r\n```java\r\nInventory inv = Inventory.builder().grid(3, 3).completeStructure().build();\r\n\r\nItemStackSnapshot disabled = ItemStack.of(ItemTypes.LIGHT_GRAY_STAINED_GLASS_PANE, 1).createSnapshot();\r\nItemStackSnapshot emerald = ItemStack.of(ItemTypes.EMERALD, 1).createSnapshot();\r\n\r\nViewableInventory display = ViewableInventory.builder().type(ContainerTypes.DISPENSER)\r\n        .fillDummy().item(disabled)\r\n        .slots(Arrays.asList(inv.query(GridInventory.class).get().getSlot(1,1).get()), new Vector2i(1, 1))\r\n        .completeStructure().build();\r\ndisplay.query(GridInventory.class).get().set(1,1, ItemStack.of(ItemTypes.DIAMOND, 1));\r\n\r\nViewableInventory display2 = ViewableInventory.builder().type(ContainerTypes.DISPENSER)\r\n        .fillDummy()\r\n        .dummySlots(1, new Vector2i(1,1)).item(emerald)\r\n        .completeStructure().build();\r\ndisplay.query(GridInventory.class).get().set(1,1, ItemStack.of(ItemTypes.DIAMOND, 1));\r\n\r\n\r\nViewableInventory basicChest = ViewableInventory.builder()\r\n        .type(ContainerTypes.CHEST_3X9)\r\n        .completeStructure()\r\n        .build();\r\n\r\n\r\nInventoryMenu menu = InventoryMenu.of(display);\r\nmenu.open(player);\r\nmenu.open(player2);\r\n\r\nmenu.setCurrentInventory(display2); // matching ContainerType so the inventory is silently swapped\r\nmenu.setTitle(Text.of(\"This reopens containers\"));\r\nmenu.registerSlotClick((cause, container, slot, slotIndex, clickType) -> checkClick());\r\n\r\nmenu.setReadOnly(false);\r\nMyHandler handler = new MyHandler();\r\nmenu.registerHandler(handler);\r\nmenu.registerChange((cause, container, slot, slotIndex, oldStack, newStack) -> checkAllChange());\r\n\r\nmenu.setReadOnly(true);\r\nmenu.setCurrentInventory(basicChest);\r\nmenu.unregisterAll(); // already done as changing the ContainerType clears all callbacks\r\n```\r\n\r\n",
      "Not sure about callback registration yet. \r\nFeels a bit clunky if you have smth. grid based (like give me a callback on the center 7x1 slots)\r\nAlso the Interfaces for registration. SlotClickHandler,SlotChangeHandler\r\n",
      "The set method could be overloaded\r\n```\r\nquery(GridInventory.class).get().set(1,1, ItemStack.of(ItemTypes.DIAMOND, 1));\r\nquery(GridInventory.class).get().set(1,1, ItemStack.of(ItemTypes.DIAMOND, 1), (container, slot, slotIndex, clickType) ->click_callback);\r\n```\r\nHow would you create a single ViewableInventory from slots which are not in same type of inventory eg these slots (blue line)\r\n\r\n![inventory_thb](https://user-images.githubusercontent.com/4391346/53289971-0c2ac200-379e-11e9-9c1a-ac0b3166f579.png)\r\n\r\n .source(inv2).grid(1,1).from(1,1).at(1,1)\r\n\r\nI have no idea what this will do.\r\n\r\nCould we have a slots method which would take array of SlotPos\r\n```\r\n .source(inv2).slots({SlotPos.of(1,1), SlotPos.of(1,2), SlotPos.of(1,3)})\r\n```\r\nor maybe an array of integers, representing inventory slot ids\r\n```\r\n .source(inv2).slots(1,2,3)\r\n```",
      "Calling `source(inv)` sets the inventory where the next calls are taking slots from.\r\nLets say you've already got\r\n`EquipmentInventory armor`\r\n`GridInventory mainGrid`\r\n`Slot offhand`\r\n```java\r\n.source(armor).slots(4)\r\n.source(mainGrid).slots(5)\r\n.source(offhand).slot()\r\n```\r\nWould then add all the slots you marked to the viewable Inventory.\r\nOfc. you need to define all slots of the Inventory but you can just fill up the rest with `fillDummy`\r\n\r\n`.source(inv).grid(2, 2).from(1,1).at(2,2)`\r\nThis adds a 2x2 grid from the source inventory starting at x=1 y=1 to the new inventory starting at x=2 y=2\r\nSource Inventory:\r\n![Source](https://i.imgur.com/PaZhAzC.png)\r\nNew Inventory\r\n![NewInv](https://i.imgur.com/pkGqkoS.png)\r\n\r\nSlotPos Array and Int Array is possible.\r\nBut for both your examples i'd argue the current API proposal is better:\r\n`grid(1,3).from(1,1)` 1x3 grid starting from x=1 y=1\r\n`slots(3).from(1)`      3 slots starting from index=1\r\n\r\n",
      ">But for both your examples i'd argue the current API proposal is better:\r\n>`grid(1,3).from(1,1)` 1x3 grid starting from x=1 y=1\r\n>`slots(3).from(1)` 3 slots starting from index=1\r\n\r\nIt depends on your use case i guess, Im letting my users to define inventory section, which is then handled by a different logic. \r\n\r\nUsers have to configure the inventory class name and slot ids. With such a trivial mechanism my plugin can hook easily even into an inventory provided by a mod such as baubles, and that way i dont have to write extra code,\r\nI see writing 6 slot ids much easier option than trying to figure out some kind of bounding box, and its deflection from origin.",
      "If it is dynamic you can just call `slot().from(...)` multiple times."
    ],
    "commit_messages": [
      "InventoryMenu API with simple callbacks instead of event listeners."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e759d9087c4d6d37a45c",
    "number": 1958,
    "body": "Original PRs - [SpongeAPI](https://github.com/SpongePowered/SpongeAPI/pull/1587) | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1400) | [SpongeForge](https://github.com/SpongePowered/SpongeForge/pull/1667)\r\n\r\n---\r\n\r\nReplaces the previous PR. No impl is available yet.\r\n\r\nThis is for 1.13, and the intention is that it will replace our current system. I'll write up more once we have a firmer idea on how this will follow implementation, **this API will change yet to accommodate this**. As such, this is still WIP, and I ask that any comments are on substance and not nitpicks.\r\n\r\nThis will not contain any annotation based command systems, these will occur after this is done and dusted. \r\n\r\nFor original intentions and goals, see #1587 ",
    "head_branch": "1.13-commands",
    "is_a_fork": false,
    "comments": [
      "This looks very promising. Please add an example command definition/implementation once your main refactoring is done. This will be helpful later, when we need to update the docs.",
      "Yup, once we're closer if I haven't opened a Docs branch, please prod me.",
      "Any plans for how custom command implementations can provide 1.13 style suggestions?",
      "As it stands here, my plan would be to provide a way to supply a `Parameter` chain to the system, with custom implementations implementing  and providing a set of `Parameter<>`s. However, I know this is not ideal as it is heavily skewed to the system we have here.\r\n\r\nOnce things solidify a bit more, it would be good to come and have a look at what you need and perhaps see if we can jointly build a solution.\r\n\r\nNote that I am looking at how this all fits together with Brig (and the implementation within Minecraft) in the first place. While my plan has been to consider _not_ using Brig and instead just sending the required packets because there were things that we did that Brig didn't/doesn't that I'd like to keep, discussions away from here made me take a fresh look at this. Our biggest pain point will be flags, but with my musings, we might be able to have some \"poor mans\" solution to this. So I think I might have to rework parameters a little anyway.",
      "I've been spending some time playing with Brigadier (Mojang's system in 1.13) and there are a few features that are missing compared to our current library that I think we would need to address.\r\n\r\nThese are my thoughts and explain my thinking on the way forward to support the needs of the Sponge community while being as unobtrusive as possible in the Minecraft code. _Constructive_ comments are welcome.\r\n\r\n# What I see as shortcomings (things we really want in Sponge but aren't in Brig)\r\n\r\n## Command Flags\r\n\r\nBrigadier does not support command flags at all. However, we could sidestep this by creating elements that mimic the flags (for example, a literal \"-f\" or \"-s <int>\" could become a literal \"-s\" followed by \"<int>\"), but positioning of these elements would be limited.\r\n\r\n## Optional Elements (ish)\r\n\r\nIt turns out that this can be very cumbersome to do. This would effectively end up with duplicated nodes across the tree - while this is a necessary evil no doubt, trees _may_ become messy. Unfortunately, redirects won't help here so much. We could possibly wrap/extend `ArgumentType`s to do it for us in a way, or create our own `OptionalArgumentBuilder`.\r\n\r\n## Overloading Parameters\r\n\r\nSay you have a command `/poke player` that you want to accept a UUID or name. In Sponge, you might do the following:\r\n\r\n`GenericArguments.firstParsing(GenericArguments.player(\"player\"), new UUIDPlayerParser(\"player\"))`\r\n\r\nIn this example, both the `Player` and `UUID` parameters use the key `player`. You can then write your command to check for a player in the \"player\" key of the context. In Brig, I've not found a simple way to do this. We _might_ be able to do something with redirect nodes and their modifiers, but it's far from simple as to what to do here. We could also create our own `RequiredArgumentBuilder` on top of this to support what we want to do.\r\n\r\n## `ArgumentType` parsers are not context aware\r\n\r\n`ArgumentTypes`, which perform the argument parsing, only have information on the string that has been passed to them (via a `StringReader`, which is similar to our `CommandArgs`). A lot of commands, Nucleus' `/home` being one, parse that string based on the invoker of the command, Brig cannot yet do this.\r\n\r\nWe could use our Cause system to determine who is invoking the command and call into argument types that way, but this isn't ideal. I'd much rather not rely on a state object - and it might cause problems when working with threads in the future, if commands go async (though an async cause tracker is also potentially on the cards at this point).\r\n\r\n# What's good about Brig (in Minecraft) - and how we can use this\r\n\r\n## Loads of `ArgumentTypes` we can hook into\r\n\r\nWe can mixin to the `ArgumentType` classes and catalog them, as well as add our own methods to modify the class to fit with how we envisage the system\r\n\r\n## (Almost) everything is extendible\r\n\r\nBoth `StringReader` and `CommandContext` could be extended (or mixed into) by Sponge equivalents that include what we're used to, such as `CommandArgs`.\r\n\r\n## Client Command Completion\r\n\r\nThe obvious reason for considering Brigadier above all else is this - client command completion. We can harness this and send down \"examples\" that tab complete can do right there on the client, no network packets.\r\n\r\nCare would need to be made to ensure the tab complete is always valid.\r\n\r\n## Subcommands can be created at any point in the parameter string\r\n\r\nSomething that a few people have asked for is in Brigadier. This is possible because of the way Brig determines what command to execute. In Sponge, we have a separation between command and argument such that you define a set of arguments for a command. In Brig, you define a command on an argument. This makes commands part of the tree, and is part of why optional arguments can be difficult to integrate. However, we should seek to support this too, which will most likely take the direction of having a special `subcommand()` argument that you attach a `Command` too.\r\n\r\n# What tentative approach we should take\r\n\r\nI don't believe that we should use Brigadier as our replacement API, but there is nothing wrong in using **parts** of it to enable convergence at a later time. Some thoughts on what will happen here:\r\n\r\n* `ValueParameterModifier`s will go away in favour of specific `Parameters`, they are only generally used here to support defaults. Other things that it did can be built into the parameter generator.\r\n* `ValueParameter`s are effectively `ArgumentType`s - the gap between then should shrink\r\n* `ValueCompleter`s are effectively [`SuggestionProviders`](https://github.com/Mojang/brigadier/blob/master/src/main/java/com/mojang/brigadier/suggestion/SuggestionProvider.java)\r\n* We can't seem to alter the examples in the same way\r\n* For impl, consider extending Brig in our own ways to support what we want it to do.\r\n* **PR things back to Mojang that we find useful, in the hope that others can use it too**.\r\n* Consider how we manage commands. Brig has an interesting take on \"merging command trees\". I'm not convinced we want to do that with Sponge commands, and will likely want to namespace things as we do now.",
      "> * **PR things back to Mojang that we find useful, in the hope that others can use it too**.\r\n\r\nYes, 1000x yes. \r\n\r\n> * `ValueParameterModifier`s will go away in favour of specific `Parameters`, they are only generally used here to support defaults. Other things that it did can be built into the parameter generator.\r\n\r\nSimplification is always good.\r\n\r\n> * For impl, consider extending Brig in our own ways to support what we want it to do.\r\n\r\nAlways an option. One thing to consider will be our maintenance overhead as new versions add features, assuming Brig is semver, and version bumps only apply to new versions of Minecraft. I'm not against mixing into Brig to achieve what we want, just a consideration for future maintenance as to *how much* we will be modifying. From your comments though, it doesn't seem like we'll have that much of a burden.\r\n\r\n\r\n\r\n> * Consider how we manage commands. Brig has an interesting take on \"merging command trees\". I'm not convinced we want to do that with Sponge commands, and will likely want to namespace things as we do now.\r\n\r\nIf by merging command trees you mean that Brig will merge different commands of the same root (like `/tp`) to have the tree being extended based on multiple options of who accepts what argument types in order being entered, I'm partial to keeping namespacing in general as conflicts and confusion is best avoided. If two commands register the same arguments with the same root name, is that allowed in Brig? How would tree merging be affected by aliases?",
      "> If by merging command trees you mean that Brig will merge different commands of the same root (like /tp) to have the tree being extended based on multiple options of who accepts what argument types in order being entered\r\n\r\nThat's exactly it.\r\n\r\n> If two commands register the same arguments with the same root name, is that allowed in Brig? \r\n\r\nAs far as I can see, no. It's actually a problem for us, as you might want two arguments at the same level with the same key. I'm playing about with ways to resolve this in a (currently) personal project, https://github.com/dualspiral/General, such that we can wrap multiple parsers on the same node, which we can then put an API on top of.\r\n\r\n(For anyone that goes looking, stuff in there is not final, please don't go nitpicking at the style because it's a personal testing repo)\r\n\r\n> How would tree merging be affected by aliases?\r\n\r\nBrigadier has the concept of a \"redirect node\", so `/tp` and `/teleport` can have exactly the same node chain by putting a redirect at the root of one of the command chains - the redirect can be thought of as a symbolic link. If you set up aliases using redirect nodes, a change to a node will affect them all.\r\n\r\nIt also has the concept of \"forking\" commands, but I don't plan to expose that.\r\n\r\n>  I'm partial to keeping namespacing in general as conflicts and confusion is best avoided\r\n\r\nI agree. My tentative approach is to replace the dispatcher with an extended dispatcher based on Brig to do this, but also try to be somewhat transparent to mods that are using Brig already - we'll see how that goes. Extending the dispatcher looks like it's going to be easy.",
      "My 2&cent;: \r\n\r\n> Our biggest pain point will be flags, but with my musings, we might be able to have some \"poor mans\" solution to this. \r\n\r\nPlease do not. Flags as they currently are are *already* a hassle. The parent PR was originally 'redo commands, and do them right this time'. Patch-job solutions defeat the purpose.",
      "As the creator and maintainer of the most used annotation based framework for bukkit which also supports sponge, can I suggest please leaving annotation based management systems out of sponge-api, and let sponge-api simply provide 'capability' tools.\r\n\r\nhttps://acf.emc.gs\r\n\r\nACF is years in the making with tons of features to come still. I haven't merged it into Paper because it would be a DRASTIC limitation on the ability to improve the framework. It locks the API in that it can't really be changed without the then risk of breaking plugins, where as providing a framework as a library built on top of the platforms foundation allows plugins to independently update and maintain their own version preference of the framework.\r\n\r\nI will work with @bloodmc @kashike and others to ensure we can get ACF updated to this new API as soon as its landed in -stable, and would love if sponge encouraged people to use ACF for annotation based commands instead.\r\n\r\nAnd the plan is to integrate ACF with brigadier, so that would be my desire w/ this command API Expansion is providing the capability for acf-sponge to register brigadier metadata through official API.",
      "I definitely agree with @aikar. This not only increases maintenance cost for API but also brings trouble to implementations.",
      "Can we just dump all causes in params first?",
      "> Can we just dump all causes in params first?\r\n\r\nCan you be clearer on that? I'm reading that as \"remove causes\", but it could mean anything.",
      "right now many methods require a cause object (the event one) for operations, which is no longer the case in the apo",
      "No.\r\n\r\nThink about how a command is going to be used - effectively calling what is currently `CommandManager#process(String entry)`. That takes the cause from the cause stack manager - a cause should not be supplied there. The cause of the command that then gets parsed is fixed **at that point**, before any parsing occurs. That is what the `Cause` object is - and that's what we pass about. The cause of the parsing is the cause of the original invocation. Any commands that get executed at that point should be getting the **exact same cause** - _that_ is why they have `Cause` objects as parameters. If we just let everything get the current cause, the entire command could be executed under a myriad of multiple causes and thus be inconsistent with itself (as well as potential performance hits because we're continuously re-creating the `Cause`).\r\n\r\nTo put it another way - entry points from the game engine should not have a `Cause` parameter. That is the `CommandManager`. `Command`s are invoked by this manager which has already finalised the `Cause` of the command invocation and are not called directly by the game engine - thus an immutable `Cause` is passed through to them.\r\n\r\nFinally, `Command`s are potentially user implementable, as are `ValueParameter`s. By providing such signatures, we're saying \"we suggest you act upon the `Cause` that we supply\", making it clear that we build our command system around causes. It also makes the commands more testable - testers can provide any cause they like without being constrained by the CSM.",
      "First pass is in `api-8` and more work will happen there. This is after reviews by Zidane, but it isn't that different from here. We remain open for discussion in our normal channels."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e75ad9087c4d6d37a45d",
    "number": 1955,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/2177) | [SpongeForge](https://github.com/SpongePowered/SpongeForge/pull/2585)\r\n\r\nhttps://github.com/SpongePowered/SpongeAPI/issues/1822",
    "head_branch": "feature/potiontype",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "adds PotionType and PotionTypeData\nand autosort fields"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e75bd9087c4d6d37a45e",
    "number": 1954,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/2183)\r\n\r\n3 new Events:\r\n\r\n- `EnchantItemEvent.CalculateLevelRequirement`  first event ; calculates the level requirement for each enchant\r\n- `EnchantItemEvent.CalculateEnchantment` second event ; calculates the list of enchantments to apply - fires twice - once for the preview then again when actually enchanting - plugins should return the same list for the same input\r\n- `EnchantItemEvent.Post` the final event ; contains the slot transactions of the enchanted item getting changed and the lapis used.\r\n\r\nFor reference:\r\nhttps://github.com/SpongePowered/SpongeAPI/issues/1303",
    "head_branch": "feature/enchantevents",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "add EnchantItemEvent and random enchantment list builder"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e75cd9087c4d6d37a45f",
    "number": 1953,
    "body": "This PR changes the catch type in `Functional#failableFuture` from `Exception` to `Throwable`. In only catching `Exceptions`, these methods were simply swallowing `Errors` and hanging the server when calls inevitably never completed.\r\n\r\nThe code affected hasn't been modified since 2015, so it should be trivial to merge this into virtually any other branch.",
    "head_branch": "fix/failable-future",
    "is_a_fork": true,
    "comments": [
      "Will this be back-merged into stable branches?",
      "@caseif 6446d6d6f06ae2aa4ff19cc070e96670ad767dcd"
    ],
    "commit_messages": [
      "Merge pull request #1953 from caseif/fix/failable-future\n\nFix failable futures swallowing errors"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e75dd9087c4d6d37a460",
    "number": 1952,
    "body": "**API** | [Common](https://github.com/SpongePowered/SpongeCommon/pull/2174) | [Forge](https://github.com/SpongePowered/SpongeForge/pull/2565)\r\n\r\nUpdates PR https://github.com/SpongePowered/SpongeAPI/pull/1870 for bleeding.",
    "head_branch": "consistent-catalog-builders",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Consistent catalog type builders. Allow recipe registrations through the register event.\n\n- Furnace recipe is now a catalog type.\n- Remove crafting recipe catalog.\n- Improve game registry event and additional catalog registry javadoc."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e75ed9087c4d6d37a461",
    "number": 1951,
    "body": "This updates the channel buf to reflect the latest netty changes, ignoring the netty version that minecraft is using (this can be easily avoided for these changes). I haven't added all the little endian methods yet because I would first like a bit of input.\r\n\r\nChanges:\r\n- Deprecate `ChannelBuf#order` in favor of little endian methods. \r\n- Deprecate marked reader/writer indexes, you can easily get them and reset them afterwards https://github.com/netty/netty/issues/8535",
    "head_branch": "channel-buf-update",
    "is_a_fork": false,
    "comments": [
      "https://github.com/SpongePowered/SpongeAPI/commit/6d3fd94efd8b9d3002eb989a75404fd6c8dea16b"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e75fd9087c4d6d37a462",
    "number": 1950,
    "body": "Updates the API from 1.13 to 1.14",
    "head_branch": "1.14",
    "is_a_fork": false,
    "comments": [
      "Any entity type?",
      "@liach Not yet, this is just auto generated. I haven't looked into those",
      "Ah. I hope we can interface out village and raid data stored in world save.",
      "Just, uh... Closing since this can be alive in `1.14` branch which will get merges between 1.13 etc."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e760d9087c4d6d37a463",
    "number": 1949,
    "body": "Very WIP, I am opening this PR now to start a discussion on what can be reused/needs to be removed. Also designing a system to easily get variants of certain block types. For example getting a slab with the material oak.\r\n\r\nRelated to:\r\nhttps://github.com/SpongePowered/SpongeAPI/pull/1715 - The variant system\r\nhttps://github.com/LanternPowered/LanternServer/pull/48\r\nhttps://github.com/SpongePowered/SpongeAPI/pull/1742\r\n\r\nWe have to decide what to do with the following data types, could it be reused for the variant system or should be deleted. I already removed a few types, feel free to comment if you don't agree with me removing them.\r\n\r\n#### Modify/remove:\r\n\r\nCatalog types and data:\r\n- [x] BrickTypes - _Removed_\r\n- [x] BrickData - _Removed_\r\n- [x] CoalTypes - _Removed_\r\n- [x] CoalData - _Removed_\r\n- [x] CookedFishes - _Removed_\r\n- [x] CookedFishData - _Removed_\r\n- [x] DirtTypes - _Removed_\r\n- [x] DirtData - _Removed_\r\n- [x] DisguisedBlockTypes - _Removed_\r\n- [x] DisguisedBlockData - _Removed_\r\n- [x] DoublePlantTypes - _Removed_\r\n- [x] DoublePlantData - _Removed_\r\n- [x] DyeColors - _Still used by other data types, used in variant system_\r\n- [x] DyeableData - _Still used by other data types_\r\n- [x] Fishes - _Removed_\r\n- [x] FishData - _Removed_\r\n- [x] LogAxes _- Removed, bark got separated from log, log uses now the Axis_\r\n- [x] LogAxisData - _Removed_\r\n- [x] GoldenApples - _Removed_\r\n- [x] GoldenAppleData - _Removed_\r\n- [x] PistonTypes - _Removed_\r\n- [x] PistonData - _Removed_\r\n- [x] PlantTypes - _Removed_\r\n- [x] PlantData - _Removed_\r\n- [x] PrismarineTypes - _Removed_\r\n- [x] PrismarineData - _Removed_\r\n- [x] SandstoneTypes - _Removed_\r\n- [x] SandstoneData - _Removed_\r\n- [x] SandTypes - _Removed_\r\n- [x] SandData - _Removed_\r\n- [x] ShrubTypes - _Removed_\r\n- [x] ShrubData - _Removed_\r\n- [x] SkullTypes - _Removed_\r\n- [x] SkullData - _Removed_\r\n- [x] SlabTypes - _Removed_\r\n- [x] SlabData - _Removed_\r\n- [x] StoneTypes - _Removed_\r\n- [x] StoneData - _Removed_\r\n- [x] TreeTypes - _Will be used in the variant system_\r\n- [x] TreeData - _Removed_\r\n- [x] WallTypes - _Removed_\r\n- [x] WallData - _Removed_\r\n- [x] QuartzTypes - _Removed, separate blocks, pillar variant now uses the Axis._\r\n- [x] QuertzData - _Removed_\r\n- [x] BigMushroomTypes - _Removed, replaced with BigMushroomPoresData_\r\n- [x] BigMushroomData - _Removed, replaced with BigMushroomPoresData_\r\n\r\nOther data (and keys):\r\n- [x] SeamlessData - _Removed_\r\n- [ ] SpawnableData\r\n\r\nTile entities:\r\n- [x] Note - _Removed_\r\n- [x] Skull - _Removed_\r\n- [x] FlowerPot- _Removed_\r\n\r\n#### New/Modified\r\n\r\nData (probably separate PRs):\r\n- [x] LitData - _New_ (furnaces, redstone torch, redstone)\r\n- [x] InstrumentData - _New_ (note block)\r\n- [x] SlabPortionData (and SlabPortion) - _New_\r\n- [x] ChestAttachmentData (and ChestAttachmentType) - _New_\r\n- [x] InvertibleData - _New_ (daylight sensor)\r\n- [x] SurfaceAttachmentData (floor, ceiling, wall) - _New_ (buttons, lever), is this a good name?\r\n- [x] BigMushroomPoresData - _New_ (replaces BigMushroomData)\r\n- [ ] UnstableData - _New_ (TNT)\r\n\r\nTile entities:\r\n- [x] Player head - _New_\r\n\r\nPopulators:\r\n- [x] Merged Shrub and Flower into Plant\r\n\r\nOther:\r\n- [x] Update statistics, moved to https://github.com/SpongePowered/SpongeAPI/pull/1742\r\n- [x] Update block traits\r\n- [x] Update particles\r\n- [x] RecordType -> MusicDisc - In 1.13, the name 'record' is no longer used in any translation keys, item ids, etc. (item names were already Music Discs)\r\n- [ ] ~~Remove extended block states? Everything is now controlled server side.~~ - Forge is still going to use them.",
    "head_branch": "1.13",
    "is_a_fork": false,
    "comments": [
      "Is there any rough eta on when this may be pushed to the breaking branch?",
      "@MattBDev There is no eta, we haven't even started updating the sponge implementations yet.",
      "@Cybermaxke I didn't even think about the implementations. Thanks for the reply though. ",
      "Closing as 1.13 is our in-dev branch, not bleeding for this."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e761d9087c4d6d37a464",
    "number": 1945,
    "body": "Fixes a few inconsistencies and issues with Abstract Data, remaining compatible for API 7. A refactor will be done for API 8.\r\n\r\nFixes issues from #1913 (which are possible without breaking the API)",
    "head_branch": "fix-abstract-data",
    "is_a_fork": false,
    "comments": [
      "Trying to find issues with the data API to include in this PR\r\n\r\nhttps://github.com/SpongePowered/SpongeAPI/issues/1791\r\nhttps://github.com/SpongePowered/SpongeAPI/issues/1388 \r\nhttps://github.com/SpongePowered/SpongeCommon/issues/2137\r\n\r\nPRs (superseded/merged ?):\r\n\r\nhttps://github.com/SpongePowered/SpongeAPI/pull/1807",
      "I am going to focus on the Abstract Data for now, so I already fixed issue #1791. I will merge the PR #1807 separately. The other ones require some more investigation and target mainly the impl (common)."
    ],
    "commit_messages": [
      "Fix abstract data inconsistencies and issues.\n\n- Add some missing hashCode and equals methods.\n- Add fillContainer that should be implemented to serialize data.\nIs already implemented for single data, will only work if a data serializer is registered for the value type, otherwise override to apply your own serialization logic. Fix last createValue issue.\n- Fix flipped value comparison in bounded data. Fixes #1791."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e762d9087c4d6d37a465",
    "number": 1944,
    "body": "When no traits were specified, MatcherBuilder.build() would throw a\r\nNegativeArraySizeException because of flawed logic (size always one too\r\nsmall).\r\n\r\nA size of 0 is specified here, because it's faster than getting the size\r\nand passing it.\r\n\r\nFixes #1835 .\r\n\r\nPS: Created this PR because asking to fix it in IRC didn't seem to help.",
    "head_branch": "fix-block-state-matcher-builder",
    "is_a_fork": true,
    "comments": [
      "Force-push is because the commit message referenced the wrong issue.",
      "~qa"
    ],
    "commit_messages": [
      "Merge pull request #1944 from 14mRh4X0r/fix-block-state-matcher-builder\n\nFix NegativeArraySizeException in BlockState.MatcherBuilder.build()"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e763d9087c4d6d37a466",
    "number": 1942,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/2170)\r\n\r\nBiomes can have different temperatures at different positions - for example, snow only occurs when the ground is higher up. This PR adds a method to get the temperature.",
    "head_branch": "feature/temperature",
    "is_a_fork": true,
    "comments": [
      "The temperature can already be retrieved through properties. A separate method shouldn't be necessary."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e764d9087c4d6d37a467",
    "number": 1939,
    "body": "The google \"checkNotNull\" function can be safety replaced with the java \"requireNonNull\" function.",
    "head_branch": "stable-7",
    "is_a_fork": true,
    "comments": [
      "Yes, we are well aware.\r\n\r\nAt this time we are not going to accept this pull request. If you want to do this, you can submit a pull request across all Sponge repositories changing this in every file.",
      "It can be easily done with the migration ability of intellij idea."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e765d9087c4d6d37a468",
    "number": 1934,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/2176)\r\n\r\nEvents with a primary interaction Slot:\r\n- [x] ClickInventoryEvent.Primary\r\n- [x] ClickInventoryEvent.Middle\r\n- [x] ClickInventoryEvent.Secondary\r\n- [x] ClickInventoryEvent.Creative\r\n- [x] ClickInventoryEvent.Shift(.Primary/.Secondary)\r\n- [x] ClickInventoryEvent.Double\r\n- [x] ClickInventoryEvent.Drop.Single\r\n- [x] ClickInventoryEvent.Drop.Full\r\n- [x] ClickInventoryEvent.NumberPress\r\n- [x] CraftItemEvent.Craft\r\n\r\nEvents without a primary interaction Slot:\r\n- [x] ClickInventoryEvent.Drop.Outside no slot\r\n- [x] ClickInventoryEvent.Recipe no slot\r\n- [x] ClickInventoryEvent.Drag (would require some kind of packet tracking)",
    "head_branch": "feature/clickedslot",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "basic ClickInventoryEvent JavaDocs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e766d9087c4d6d37a469",
    "number": 1933,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/2153)\r\n\r\nhttps://github.com/SpongePowered/SpongeCommon/issues/1879\r\n\r\n",
    "head_branch": "feature/dropitemeventclose",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e767d9087c4d6d37a46a",
    "number": 1930,
    "body": "Noticed the flowpowered site was down and switched the links to their (probably more reliable) GitHub page. Sorry if I'm merging to the wrong branch.",
    "head_branch": "fix/flow-links",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix flowpowered links - site is down (#1930)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e768d9087c4d6d37a46b",
    "number": 1926,
    "body": "",
    "head_branch": "gradle-3.4",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update Gradle wrapper to 3.4"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e769d9087c4d6d37a46c",
    "number": 1925,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/2129) | [SpongeForge](https://github.com/SpongePowered/SpongeForge/pull/2495) | [SpongeVanilla]()\r\n\r\nThis is the API section of series of commits being cherry picked and verified for bleeding branches as several implementation changes have lapsed as far as getting pushed to bleeding.",
    "head_branch": "update/bleeding",
    "is_a_fork": false,
    "comments": [
      "Closing as 1.13 is considered a \"bleeding branch\" now."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e76ad9087c4d6d37a46d",
    "number": 1921,
    "body": "Support for the new login plugin message request/response in 1.13.\r\n\r\n**This PR is based on top of my 1.13 changes, so only check the last diffs.**\r\n\r\nHow we could handle it is as following (inspired by the forge solution):\r\nDuring a login event (`ClientConnectionEvent.Login`?), allow plugins to send login message to the client. The plugins get a `CompletableFuture` in which they can handle the responses and send new login messages (if needed).\r\nThe login event will not be processed until there are no more login messages send which are waiting for a response.\r\n\r\nThoughts?\r\nShould I move this to a separate event instead of `ClientConnectionEvent.Login`? Suggestions for a name?",
    "head_branch": "plugin-client-login-phase",
    "is_a_fork": true,
    "comments": [
      "~wip",
      "Remove all the extra stuff here. Why is that in this PR?",
      "This PR is outdated, I moved my WIP changes to a Sponge branch."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e76bd9087c4d6d37a46e",
    "number": 1920,
    "body": "See https://github.com/SpongePowered/SpongeAPI/issues/1814\r\n\r\nRight now I only added a catalog of `TemporalUnit`s, including minecraft related ones. But we have to keep the conversation going about this. \r\n\r\nWill very likely be held off after the 1.13 update to avoid conflics with changes. The catalog could be merged early, maybe even for API 7.x",
    "head_branch": "ticks-are-a-impl-detail",
    "is_a_fork": true,
    "comments": [
      "~wip",
      "Manually merged in 1.13 for further development."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e76cd9087c4d6d37a46f",
    "number": 1915,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/2107) | [SpongeForge](https://github.com/SpongePowered/SpongeForge/pull/2452)\r\n\r\n`.Post` was impossible to implement for mods.\r\nhttps://github.com/SpongePowered/SpongeForge/issues/2411\r\n\r\nMoves `ChangeInventoryEvent.Transfer` to `TransferInventoryEvent`\r\n`TransferInventoryEvent.Post` cannot be cancelled anymore. It now includes the Source/Target Slot and the ItemStack transferred.",
    "head_branch": "feature/transferevent",
    "is_a_fork": false,
    "comments": [
      "Maybe `Pre` should have source slot?",
      "There is no Slot in Pre because its before any calculations happen."
    ],
    "commit_messages": [
      "redo Inventory Transfer Event"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e76dd9087c4d6d37a470",
    "number": 1911,
    "body": "\r\nSigned-off-by: Steven Downer <grinch@outlook.com>",
    "head_branch": "patch/beetroot_age",
    "is_a_fork": true,
    "comments": [
      "Just a note that this will not be available in implementation versions until implementations have a recommended build."
    ],
    "commit_messages": [
      "Merge pull request #1911 from Grinch/patch/beetroot_age\n\nAdd BEETROOT_AGE integer trait"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e76ed9087c4d6d37a471",
    "number": 1903,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/2087)\r\n\r\nThis PR adds everything I found for Shulkers and its derived products.\r\n\r\nI only have a doubt about `ShulkerBullet#getDirection`, as it may be a DirectionalData.\r\n\r\nReviews are welcome.\r\n\r\n[Test Plugin](https://gist.github.com/RedNesto/6fdd0d1e8ce66a52374432e1544c43ba)\r\n\r\nFixes #1901 ",
    "head_branch": "feature/shulker",
    "is_a_fork": true,
    "comments": [
      "~qa",
      "Links are broken here and in common"
    ],
    "commit_messages": [
      "Add features specific to Shulkers, ShulkerBullets and ShulkerBoxes. (#1903)\n\n* Add features specific to Shulkers, ShulkerBullets and ShulkerBoxes.\r\nAlso added EntityTargetingProjectile to abstract ShulkerBullet targeting.\r\n\r\n* Make Keys#TARGETED_ENTITY a simple Value<> and replace ShulkerBullet#getDirection by a DirectionalData\r\n\r\n* Make the data target an EntitySnapshot\r\n\r\n* Update references to Entity accordingly"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e76fd9087c4d6d37a472",
    "number": 1902,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/2082) | [SpongeForge](https://github.com/SpongePowered/SpongeForge/pull/2417)\r\n\r\nSee common PR for related issue.",
    "head_branch": "expose-isvanilla",
    "is_a_fork": true,
    "comments": [
      "Why?",
      "> Why?\r\n\r\nQuoting from the related issue on the SpongeCommon PR:\r\n\r\n> it would be useful for plugins to have some static methods to detect the environment they're running in before the game has actually started.\r\n> \r\n> They can be used to apply a certain mixin only to either SpongeForge or SpongeVanilla but not both (similar to what we do currently in SpongeVanilla/SpongeForge).\r\n\r\nThis was already implemented. I've moved it from `SpongeImplHooks` (see [SpongeImplHooks](https://github.com/SpongePowered/SpongeCommon/pull/2082/files)) to expose it to plugins.",
      "What should return Lanternpowered server?",
      "I was thinking the same.\r\n\r\nAnd other implementations.\r\n\r\n",
      "> What should return Lanternpowered server?\r\n\r\nTrue.\r\nLantern is a minecraft server.\r\n\r\nisVanilla being false just means this is a Forge Server. \r\nThe issue is [...] **detect whether they're running on Forge or Vanilla** [...], guess I should have linked it here.\r\n",
      "I personally think that it would be useful for the mixin developers (I am not one myself) but I don't think that this is the way.\r\nPersonally I think there needs to be a single function that returns the implementation name even on PreInitialisation.\r\n",
      "@mosemister You should take a look at `Sponge#getPlatform`, you will be able to get the implementation PluginContainer.\r\n\r\nAlso, I think the method needs some documentation to explain when it should return what.",
      "@RedNesto\r\nI already knew that. Due to the fact im not a mixin guy I thought that wasnt available in the PreInitialisation state which is where I believe mixins are required to be initialized. If it is then I dont see the point for exposing this at all",
      "`Sponge.getPlatform().getContainer(Component.IMPLEMENTATION).getId() == \"spongeforge\"` can be easily added to a plugin if really needed.\r\n\r\nThe thing is that vanilla/modded is a blurred line, if you add a plugin to a sponge server, is it still vanilla? And even with lantern isn't even \"vanilla\", because you will never be able to replicate the features exactly. Another example, is forge without mods vanilla? Or is a forge server without client mods vanilla? What about server side mods?\r\n\r\nBasically \"vanilla\" is minecraft without amything else, the moment sponge/forge comes into play it's no longer \"vanilla\". Unless you only use optimizations (and they aren't game changing).",
      "@ImMorpheus but lantern isn't vanilla server. Someone may use `isVanilla` for some NMS hacks.",
      "The SpongeAPI isn't a place for `NMS hacks`, if you want that, depend on `SpongeCommon` instead. You can add the method there if you really need it. This breaks compatibility with any non NMS based impl.",
      "And how you force someone to *not* to do these hacks?",
      "You don't. But we shouldn't encourage them either by exposing them in the API.",
      "@XakepSDK\r\nI think NMS is a little off topic. But one of the underlying principles of Sponge was to make a API that lacked the need for NMS to be done by exposing the NMS features in API. \r\n",
      "I can see the ambiguity with the \"vanilla\" term. \r\n\r\nInput wanted, whether this should be closed (with the related issue) or renamed to something else (\"supportMods\" or smth).\r\n",
      "Ultimately, why should a plugin that purely relies on the Sponge API alone care about this? This is exposing an implementation detail - and checking whether the implementation is a Vanilla one shouldn’t matter when the Sponge system is agnostic to this.\r\n\r\nJust because it exists in Common doesn’t mean it should exist in the API.\r\n\r\nSo, to go back to @kashike’s question - why is this useful? Why should a non-implementation dependent plugin care about this? @Cybermaxke has already talked about the platform, surely that gives you everything you need to know already?\r\n\r\n_edited to make a point clearer, posting from my phone!_",
      "That's what I wanted to hear. \r\n\r\nI'm closing this (and the related issue) as \"invalid\".\r\n\r\n\r\nJust a sligthly unrelated nitpicking:\r\n\r\n> Just because it exists in Common doesn’t mean it should exist in the API.\r\n\r\nI've opened this PR because there was a feature request in common.",
      "> I've opened this PR because there was a feature request in common.\r\n\r\nI think something needs to be clarified here as to what that issue was asking for.\r\n\r\nThe problem is that the [request was in _SpongeCommon_](https://github.com/SpongePowered/SpongeCommon/issues/804) and should be solved in SC because it's an implementation detail. It was open to explore exposing whether the impl was Vanilla to those that use the MCP implementation (that is, ours). Plugin-provided mixins intentionally depend on the implementation, so this doesn't need to be in the API layer. As such, it was never intended to hit the API, I'm sure Minecrell would have opened it in this repo if it was.\r\n\r\nThis PR probably would not have solved that issue because all you're doing is moving a method - if it was that easy, the original issue would not have been created. It might be that the original issue is no longer valid, it probably needs checking in the context it is presented in.",
      "This is needed as per the original ticket.\r\n\r\nIt's needed to be done in it's own class outside the rest of SpongeAPI so that mixins / transformers DO NOT load the rest of SpongeAPI / SpongeCommon too early.\r\n\r\nIt NEEDS to be in the API, otherwise it's impossible for other implementations to implement, and have plugins be potentially compatible with other platform internals / extended API.\r\n\r\nisVanilla() isn't enough in my eyes, and it also needs to be somewhere where it won't chain class load everything else.\r\n\r\nThe other option is just to rely on dependency resolution, but that may be awkward for some situations.",
      "Again, I never said the original issue wasn’t needed. I said this is the wrong place for the solution.\r\n\r\n> mixins / transformers\r\n\r\nThese two words explain exactly why it does NOT go in the API. When you use mixins or transformers, you’re intentionally interacting with the implementation. In particular, this is wanted before the transformation takes place, particularly with Mixins - this makes a determination whether a mixin should be applied **before any mixins are applied**, meaning for the use case in the original issue, this would **always** say the impl was vanilla at the point it would most likely be checked.\r\n\r\n(Aside: this PR would not have worked because of this fact, it relies on a transformation of an API method but the info would be needed before this happened)\r\n\r\nPlugin provided mixins are designed as an MCP impl feature. There is no support for them in the Sponge API, the API and its dependency set makes **no guarantee** that you will be able to use them. I expect that Lantern doesn’t support mixins, why would it want to use them if it has control of the full stack?\r\n\r\nThe API is a runtime object that can already provide this information when needed at runtime, though a plugin generally does not need this information. The problem that needs to be solved is an implementation level, specifically _our_ implementation. Any mixins or transformers need, as you rightly say, to know WAY more information than just if it’s vanilla, and the API will not be ready at the time this info is needed.\r\n\r\nIt doesn’t need to be in the API layer, we should not pollute the layer with implementation specific calls. By making a call rely on a Mixin, we are creating a dependency (even if the dependency doesn’t move to the API) on Mixin. \r\n\r\nThe solution to this needs to be in Common, for our impl. There is nothing stopping there being class or system outside the rest of SC but within the SC jar that does this, no need for the API to contain it. ",
      "I'll move my reply to the API issue, since it's been reopened, but originally I replied to this, since it was relating to it being implemented on the API side. "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e771d9087c4d6d37a473",
    "number": 1900,
    "body": "Should make what is returned by a command a little clearer, just wanted to try to get this in for 7.1 so the updated descriptions fit in the docs.\r\n\r\nNo code changes, but as I tend to be a little flowery with my language at times, a proofread is what I'm looking for.\r\n\r\nFixes #1892",
    "head_branch": "update/jd71",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update Javadocs for commands\n\nShould make what is returned by a command a little clearer.\r\n\r\nFixes #1892"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e772d9087c4d6d37a474",
    "number": 1899,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/2065) | [Original Issue](https://github.com/SpongePowered/SpongeCommon/issues/509)\r\n\r\nAdds `PlainPagedData` for writable books, along with associated key and required `TypeToken`. See the SpongeCommon issue for more details.",
    "head_branch": "feature/plain-pages",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add PlainPagedData"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e773d9087c4d6d37a475",
    "number": 1898,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/2084)\r\n\r\nAdds an event to handle anvil results and costs.\r\n\r\nThe event fires before vanilla is doing its computation but after forge mods had a chance to set the values.\r\n\r\nAs such there is no initial level/material cost and the result is empty by default.\r\nOnly when the result is set by the plugin costs will be applied.\r\n\r\nNo result set => Vanilla Behaviour\r\nResult set => Override Costs and Result\r\nCancel => Empty Result",
    "head_branch": "feature/anvilupdateevent",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "add UpdateAnvilEvent"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e774d9087c4d6d37a476",
    "number": 1896,
    "body": "Heavily work in progress. 100% pending starting 1.13 migration. This is to properly ~smash with a hammer~ refactor Extent with better support for non `World`... extents... Yeah.... \r\n\r\nOur Extent hierarchy is problematic, we associated all `World` related methods to `Extent` including all the hierarchies of what is definitively a `World`, and then made `Chunk` extend `Extent`. Likewise, we decided early on that we would have this abstract `Location` that would be able to accept any `Extent`, along with all of the `DataHolder` methods relegated to the parented `Extent`...\r\n\r\nYou see where this is starting to become a problem, especially when #734 was being designed, new volume types had to be created #1137,  to support #1330... \r\n\r\nI'm intending to royally break the hierarchy and allow for more abstract types that will support the ability to work on more concrete volumes that aren't ~bloated~ swelling with extraneous methods that are more `World` centered. In doing so, this also allows a simultaneous rewrite of the world generation API to use a new world generation pipeline being introduced by Minecraft itself. The awesome thing about this is that the world generation pipeline should allow for some rather interesting uses for sponge plugins.\r\n\r\nI'll do some code examples and usages etc. as the interfaces are more \"implemented\"",
    "head_branch": "refactor/extent",
    "is_a_fork": false,
    "comments": [
      "Posting to draw attention to: https://github.com/SpongePowered/SpongeAPI/issues/1932\r\n\r\nOffline location classes have popped up quite a few times in chat, people loading and unloading many worlds typically run into this problem.\r\n\r\nIn my mind, Location itself (if it is to remain the unit extent, I'm not sure it should any more after learning  more about what that means) shouldn't be directly deserializeable.\r\n\r\nLocations being applicable to other extents would be handy, I've experimented in the past attempting to create them for arena's to have arena relative co-ordinates.\r\n\r\nBut unless registered in a registry of UUID, I don't see how they could be deserialized nicely.\r\n\r\nDesign opinions for a replacement for a Config friendly location.\r\n\r\n1. The 'context' of a location should be up to the plugin responsible for deserialization, they can add their own identifiers easily enough, but we could make this easier.\r\n\r\ne.g.\r\n\r\nA (Generic world location):\r\n  `spawn: {x: 1, y: 1, z: 1,  world: \"1234-2345-2345-456\"}`\r\nB (Generic world location + player rotation:\r\n  `exactSpawn: {x: 1, y: 1,z: 1, yaw:1, pitch:1, world: \"1234-2345-2345-456\"}`\r\nC Generic world location, specified by directory name\r\n  `TNTEventSpawn: {x: 1, y: 1, z: 1,  world: \"world-Copy\"}`\r\nD Generic Arena location, specified by resource location.\r\n  `ballSpawn: {x: 1, y: 1, z: 1,  \"minigameFramework:arena\": \"myMiniGame:Soccer1\"}`\r\nE Nether Fallback Spawn\r\n  `hellSpawn: {x: 1, y: 1, z: 1,  \"dimension\": -1}`\r\nF Target teleport location\r\n  `comeToMe: {\"entity\":1234-2345-2345-456, \"world:\"franksWorld\"}` // defaults to the position of that entity if found.\r\nG Teleport to spawn\r\n  `teleportTarget: {world:\"franksWorld\"}` //defaults to the world spawn point.\r\nH Anonymous Location\r\n  `cachedLocation: {x: 1, y: 1,z: 1, yaw:1, pitch:1}`\r\n\r\n\r\nand Looking at the minecraft teleport command for inspiration, it's possible for there to be even yet more examples that people use on a regular basis.\r\n\r\nWhat's common, is that depending on the usecase and plugin consuming the location, the context can vary wildly, and location resolving is **never** guaranteed to resolve. and that resolving a location may end up with a dynamic position that changes over time.\r\n\r\nThis would show that locations should be resolved as late as possible, and if failing, all data should be made available to the plugin.\r\n\r\nWhat remains is how far should we take this extensibility, before it gets silly.\r\n\r\nHow can we design pre-built locations for most of the (common) use cases, whilst still allowing others?\r\n\r\nHow can we make this compatible between plugins, without too much effort on each plugin relying upon unique properties for each plugin?\r\n\r\nHow do we gracefully fail, and allow plugins to provide fallback locations based on the data provided by the user/config.\r\n\r\n**Basic Usage:**\r\n```\r\nNewLocation loc = config.getLocation();\r\nLocationResult target = Sponge.resolveLocation(targetPlayer, loc); //specify player for anonymous locations, or things that require a world context.\r\nteleportee.setLocation(loc); //Will attempt to resolve, but will throw if failed.\r\nteleportee.setLocation(target); // Will throw if LocationResult failed.\r\nLocation loc = target.get(); //Will throw if LocationResult was a failure\r\n```\r\n\r\n**Safe Usage:**\r\n```\r\ntarget.teleport(teleportee, fallbackLocation); // Will teleport to the target, or the fallback position.\r\n\r\nif(!target.success){\r\n  if(checkUnloaded(target){ // Checks to see if target failed due to an unloaded world, that can be loaded.\r\n    LoadWorld(target.world.orElse(target.entity.world)); // world is optional, as it may not have resolved.\r\n    //or alternately?\r\n    LoadWorld(target.resolve(target.world)\r\n  }\r\n    target.teleport(teleportee, fallbackAction);\r\n}\r\n```\r\n\r\n**Possible Advanced usages:**\r\n```\r\nLocationResult target = Sponge.resolveLocation(targetPlayer, loc, fallbackLocation); //result will still be a failure, but .get() will not throw.\r\n\r\ntarget.teleport(teleportee, Function<LocationResult, LocationContext, Location> failResolver); // Will teleport to the target, or the provided fallback position, unless failAction returns null.\r\n```",
      "Manualy merging in 1.13 to keep it inline with API development since this introduces Fluid handling as well as other important base object changes (like Location).",
      "Since this is closed and being manually merged: I just want to make sure https://github.com/SpongePowered/SpongeAPI/issues/1932 isn't getting lost. This is a breaking change and would fit in here well."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e775d9087c4d6d37a477",
    "number": 1895,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/2060) | [SpongeForge](https://github.com/SpongePowered/SpongeForge/pull/2382) | [SpongeVanilla](https://github.com/SpongePowered/SpongeVanilla/pull/385) | [Original Issue](https://github.com/SpongePowered/SpongeAPI/issues/1862)\r\n\r\nThis adds an API to check to see if a plugin is allowed to collect stats as per the user's config. I opted for only allowing a plugin to check to see if stats collection is allowed for that plugin, it shouldn't need to know about the global entry.\r\n\r\n**This PR is not for discussion of whether stats are bad or not, Sponge's policies, or any general gripe. This is simply the proposed API for discussion. Please leave drama out of this PR, thanks.**\r\n\r\nFixes #1862",
    "head_branch": "feature/stats-service",
    "is_a_fork": false,
    "comments": [
      "I'd call it \"Metrics\" rather than \"Stats\" to avoid confusion with the [Statistics API](https://github.com/SpongePowered/SpongeAPI/tree/stable-7/src/main/java/org/spongepowered/api/statistic)",
      "Reviewed API and implementation. Awesome work! I'll get to merging this this afternoon if someone else doesn't merge it first.",
      "I'd like to bump @simon816's comment:\r\n> I'd call it \"Metrics\" rather than \"Stats\" to avoid confusion with the [Statistics API](https://github.com/SpongePowered/SpongeAPI/tree/stable-7/src/main/java/org/spongepowered/api/statistic)\r\n\r\nMetrics, Snooper, ...",
      "It was discussed at SPAM, I think we ended up sticking with \"Stats\"...\r\n\r\nedit: wait, that was said by Gabi. Never mind...",
      "(Also, I'm not gonna get to doing this myself tonight, so gabi, be my guest to merge it)"
    ],
    "commit_messages": [
      "Merge pull request #1895 from SpongePowered/feature/stats-service\n\nAdd StatsConfigManager API"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e776d9087c4d6d37a478",
    "number": 1888,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/2042)\r\n\r\nFixes https://github.com/SpongePowered/SpongeAPI/issues/1885",
    "head_branch": "feature/active-item-data",
    "is_a_fork": true,
    "comments": [
      "How does this get handled if it's set server side instead of client?",
      "@gabizou I simply return false if they try to set the item stack to anything besides empty. Empty does cancel it, but if they're holding right click it will just become active again.\r\n\r\nhttps://github.com/SpongePowered/SpongeCommon/pull/2042/files#diff-eac4f1c95fc6a64813b25ffe4dde183dR53",
      "The active item feels more like a `Property` to me instead of a `Key` and value.\r\nAnd maybe extend this PR to provide a active hand: `Optional<HandType>`, right know you don't know which hand is being used. With that knowledge, you can get the active item as well.",
      "Hmm currently properties are more things that don't really change once something is created, I think it fits better as data, especially since you can cancel an item being active, such as restarting a player drinking their milk, and other implementions may allow more. \r\n\r\nRelating to the active hand, I'm not really sure how useful that is, because I don't know a situation where it wouldn't be the secondary hand which can be retrieved through the dominant hand property. Then during events it should be part of the context or the event itself. ",
      "https://github.com/SpongePowered/SpongeAPI/commit/859d917605f71aeca934c8a6095c533e1a104d2a"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e777d9087c4d6d37a479",
    "number": 1883,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/2033)\r\n\r\nPrevious PRs: [Original API PR](https://github.com/SpongePowered/SpongeAPI/pull/1270) | [Original Common PR](https://github.com/SpongePowered/SpongeCommon/pull/793) | [Revised API PR](https://github.com/SpongePowered/SpongeAPI/pull/1645) | [Revised Common PR](https://github.com/SpongePowered/SpongeCommon/pull/1519)\r\n\r\nWith thanks to @kenzierocks and @rexbut for their contributions, however, as both of these PRs went stale (sorry!) and I've had no response on https://github.com/SpongePowered/SpongeCommon/pull/1519, I figured it best to open the new PR, get it reviewed and in as there are issues with selectors selecting the wrong things as it stands.\r\n\r\nThis PR is mostly to add the `@s` selector and deprecate the `resolveForce` methods. It also removes nulls from the API level and replaces them with dummy objects. \r\n\r\nThis is a non-breaking change and as such is targeting API 7.x. Once this is sorted, a breaking change PR to bleeding can then follow based on the changes in the previous PRs - please see those for what they are.\r\n\r\nSee the Common PR for more details.",
    "head_branch": "update/selectors",
    "is_a_fork": false,
    "comments": [
      "If this gets merged can you please either write some documentation for it as well or at least give us some examples and usecases to help us writing it ourselves? Ref: https://github.com/SpongePowered/SpongeDocs/issues/238",
      "Of course. I'll try to remember to do it when I have a free moment.",
      "~ready"
    ],
    "commit_messages": [
      "Update API for selector updates.\n\n* Update Javadocs to make it clear that returned entity lists may be an ordered set\n* Add self selector\n* Deprecate resolveForce methods\n* Change null fields to be dummy fields to avoid IDE issues\n\nWith help from @kenzierocks and @rexbut for API changes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e778d9087c4d6d37a47a",
    "number": 1871,
    "body": "**API** | [Common](https://github.com/SpongePowered/SpongeCommon/pull/2106) | [Forge](https://github.com/SpongePowered/SpongeForge/pull/2451)\r\n\r\nThis PR is a overhaul of the `Property` API. This simplifies the implementation of new properties, separate matching behavior from the property itself and move all impl to the impl.\r\n\r\n## Changes\r\n\r\n- All the different property classes are now gone, there is only `Property` which contains a generic parameter representing the return type. Each property object represents a property, this was previously each property subclass. The `getProperty` method now returns the actual property value, not a value wrapped in a property object. All properties are now available in `Properties` or `InventoryProperties`.\r\n- Removed unused property keys. Just create a new property instead.\r\n- Added a `PropertyMatcher` which replaces the matching behavior that was previously included in the property object. This should avoid confusion between matching behavior and the actual property value.\r\n- New properties can easily be constructed through a property builder. Properties are now also catalog types so they need to be registered.\r\n\r\n## Examples\r\n```java\r\nfinal ItemStack itemStack = ...;\r\nfinal Optional<RecordType> optRecord = itemStack.getProperty(Properties.RECORD_TYPE);\r\n// Optional is present if the property is supported\r\n```\r\n```java\r\n// No need to wrap every value in its property wrapper, just pass in the property and the value\r\nfinal Inventory inventory = Inventory.builder().of(InventoryArchetypes.MENU_GRID)    \r\n         .property(InventoryProperties.DIMENSION, new Vector2i(1, 9))\r\n         .property(InventoryProperties.TITLE, Text.of(\"Slime Content\"))\r\n         .property(InventoryProperties.UNIQUE_ID, UUID.randomUUID())\r\n         .property(InventoryProperties.GUI_ID, GuiIds.DISPENSER)\r\n         .build(plugin);\r\n```\r\n```java\r\n// Easy to create new properties\r\nprivate Property<Integer> mySecretProperty;\r\n\r\n@Listener\r\npublic void onRegisterProperties(GameRegistryEvent.Register<Property<?>> event) {\r\n    this.mySecretProperty = Property.builder()\r\n            .valueType(Integer.class)\r\n            .id(\"my_secret_value\")\r\n            .build();\r\n    event.register(this.mySecretProperty);\r\n}\r\n```\r\n",
    "head_branch": "properties-refactor",
    "is_a_fork": true,
    "comments": [
      "~wip",
      "There wouldn't happen to be any implementation for this, would there?",
      "I started to work on it, but it's nowhere being done, doesn't compile yet. Will try to work on it this weekend.",
      "https://github.com/SpongePowered/SpongeAPI/commit/15ef96be0153c0a5457b1645e0717386526af521"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e779d9087c4d6d37a47b",
    "number": 1870,
    "body": "**API** | [Common](https://github.com/SpongePowered/SpongeCommon/pull/2075)\r\n\r\nAdds a common builder interface for catalog types to ensure consistency.All original build methods are deprecated and will be removed in bleeding.\r\n\r\nAlready makes `FurnaceRecipe` a catalog type. For stable, if no id is set, an auto generated one will be used instead.\r\n\r\nPlease let me know if I missed any catalog type builders. And is it worth to also target stable?\r\n\r\nImpl will follow later.",
    "head_branch": "consistent-catalog-builders",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1870 from Cybermaxke/consistent-catalog-builders\n\nMake catalog type builders consistent."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e77ad9087c4d6d37a47c",
    "number": 1869,
    "body": "* Deprecate CommandArgs#get/setState\r\n\r\nFixes #1867",
    "head_branch": "fix/arg-state",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add get/applySnapshot for CommandArgs\n\n* Deprecate CommandArgs#get/setState\n\nFixes #1867"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e77bd9087c4d6d37a47d",
    "number": 1866,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/2000) | [SpongeForge](https://github.com/SpongePowered/SpongeForge/pull/2327)\r\n\r\n* Added `ItemGroup` interface, cataloged by `ItemGroups`\r\n* Added `Optional<ItemGroup> getItemGroup()` to `BlockType` and `ItemType`\r\n\r\nGranted, creative tabs are not super important on the server, but it could be useful, for example, for detecting mod-added tabs.\r\n\r\n<p align=\"right\"><sub>have mercy on me, this is my first sponge pull request</sub></p>",
    "head_branch": "feature/itemgroups",
    "is_a_fork": true,
    "comments": [
      "~wip",
      "~qa",
      "@gbui Can you offer some usecases?\r\n\r\nAt the moment, without any sample usecases, or user stories, I'm not sure whether this API is sufficient or not.\r\n\r\nI like that you have the possibility for an item to be in multiple groups.\r\n\r\n@gabizou I'm not sold on ItemCollection as a name, it adds confusion with Java's Collections to make it seem like it's related to the Collections API / interfaces / classes.",
      "Why just not name it `ItemGroup` -> `CreativeTab`? `ItemGroup` may be confusing with 1.13 item tags.",
      "@ryantheleach A sample usecase could be creating an in-game shopping catalog, organized by item group. This would make it easier for players to navigate the interface (which in this case would be an inventory \"GUI\").\r\n\r\n@XakepSDK I went with `ItemGroup` since I'm just exposing the property of items to belong to an item group. `CreativeTab` is specific to the client side, while `ItemGroup` is a more general term that makes more sense on the server side.",
      "@XakepSDK It's worth noting that we've renamed `CreativeTabs` to `ItemGroup` in MCP.",
      "@gbui That makes sense to me. Thanks."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e77cd9087c4d6d37a47e",
    "number": 1864,
    "body": "This PR contains a couple fixes to the `InputTokenizers` and some cleanup of unused features. Tests have also been updated/added for both.\r\n\r\n### QuotedStringTokenzier\r\n - Instances (lenient and non-lenient) are cached in the class rather than being recreated. This should prevent `CommandSpecs` and other areas with tokenizers from having multiple, identical instances.\r\n - The `handleQuotedStrings` and `trimTrailingSpace` settings have been removed as they were always initialized to the same value. The logic behind them remains the same.\r\n   - Note: `trimTrainigSpace` could actually be detrimental to tab completion, which relies on the existence of an empty argument to know when to continue to the next element.\r\n- Fixed an off-by-one error if the last argument is empty. This would previously return something like [10, 9] (which marks the end index after the start), now it returns [10, 10].\r\n\r\n### SpaceSplitInputTokenizer\r\n - This no longer ignores the last argument. I'm not sure how this happened or how it's been in Sponge for so long like this. Empty strings, space-only strings, and trailing spaces have the same behavior as in `QuotedStringTokenzier`.",
    "head_branch": "fix/tokenizer",
    "is_a_fork": true,
    "comments": [
      "@dualspiral I'm guessing this would be looking ok? I'm not one to mess with the commands api, but seeing as you've had experience with it, mind some input?",
      "The space split one is something that I’ve fixed in another PR of mine, #1844, which I was hoping to merge soon, so I’ll need to reconcile these two. As that has actual API changes, I’m waiting for a go ahead from a lead, I’ll try to get that today.\r\n\r\nI’ll look at this in a bit, a basic look yesterday seemed fine, but I’d like to pull this into my IDE and make sure it doesn’t break the parsing.",
      "I ran the changes for the space split tokenizer in #1844 through the test added in this PR and two of the tests failed, the one for a string with spaces and for trailing spaces. The behavior for those is based on the results for the quoted strings tokenizer.",
      "> I ran the changes for the space split tokenizer in #1844 through the test added in this PR and two of the tests failed\r\n\r\nIt would have been better had you commented on there about the missed cases, rather than redo the work here, though I appreciate that you might not have done the tests without giving it a go. Catch 22, I guess.\r\n\r\nAs I say, I'll look at the changes in the two PRs and reconcile them when I'm a bit more awake.",
      "I wasn't trying to redo work, I didn't even know about your changes until you brought them up here. I tested it out right after you posted that and figured it would be best to continue the conversation here where it started and has the unit test in question.",
      "I hate doing this, but since #1844 was merged, this needs updating/rebasing.",
      "I've had some external issues that I've needed to address, so I'm just getting caught up on things now.\r\n\r\nWith #1844 in this has to be updated - no way getting around that, so don't worry about it. I did attempt this a while ago but I had difficulty setting the workspace up with Git properly - I'll give it another go here shortly, and if I'm unable to get it working I'll reach out.",
      "Closing as the Command Overhaul PR will encapsulate this change for 1.13. Thanks for the work anyways @SimonFlash !"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e77dd9087c4d6d37a47f",
    "number": 1859,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1972)\r\n\r\nThis PR improves the capabilities of `SpongeEventFactory,.mockParam` in order to support the assoicated SpongeCommon PR.",
    "head_branch": "better-data-test",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e77ed9087c4d6d37a480",
    "number": 1850,
    "body": "Fixes #1546 - still WIP for now\r\n\r\nThe contexts system in particular can be difficult for developers new to Sponge (esp. sponge permissions) to understand - the hope is that some better javadocs will help a bit with that.\r\n\r\n\r\nIf anyone has anything they think could be clarified/improved/explained better please say. :)\r\n\r\n",
    "head_branch": "feature/improve-contextualservice",
    "is_a_fork": false,
    "comments": [
      "@lucko Are you planning to make any breaking changes? If not, this looks like like it could target `stable-7`",
      "Not sure yet, there *probably* won't be any, but I thought it made sense to target bleeding for now - can always cherry pick it back.\r\n\r\nThe only thing I've considered so far is changing ContextCalculator's\r\n\r\n```java\r\nvoid accumulateContexts(T target, Set<Context> accumulator)\r\n```\r\n\r\nto \r\n\r\n```java\r\nvoid accumulateContexts(T target, Consumer<Context> accumulator)\r\n```\r\n\r\nreasoning being that calculators shouldn't be relying on the state of the Set, and should only be using `add` and `addAll` - not sure it's worth the break though 🤷‍♂️ ",
      "This is ready now.\r\n\r\n* Mostly changes to javadocs\r\n* No breaking changes, only one new static method added, so this can be backported to stable-7\r\n* Two methods in `Context` were deprecated - reasoning explained in the doc. They can be removed in the next API release.\r\n\r\n\r\n@bloodmc @Aaron1011 or anyone else kind enough to, would you mind giving the doc changes a quick read over to make sure they make sense. I'm finding it quite hard to put a lot of the concepts into words - it's almost too abstract in places to explain. :)",
      "Want to update the PR to target `stable-7` maybe?",
      "Updated (not so successfully, sorry for the review request pings 😢) to target `stable-7`.\r\n\r\nAlso addressed ST-DDT's suggestion. This is ready to be merged now, unless anyone has any final suggestions / comments."
    ],
    "commit_messages": [
      "Improvements to ContextualService (#1850)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e77fd9087c4d6d37a481",
    "number": 1848,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1946) | [SpongeForge](https://github.com/SpongePowered/SpongeForge/pull/2232)\r\n\r\nOverview:\r\n- `Container#getViewed()` added\r\n- `Container#setCursor(ItemStack)` added\r\n- `Container#getCursor:Optional<ItemStack>` added\r\n- `Inventory#slots():List<Slot>` changed to return Slots\r\n- `Inventory#children():List<Inventory>` instead of implementing Iterable\r\n- `OrderedInventory` removed and its methods moved to `Inventory`\r\n- `Interactable` -> `ViewableInventory`\r\n- `Inventory#query(QueryOperations<?>...):Inventory` no ducktyping\r\n- `Inventory#query(Class<T extends Inventory>):Optional<T>` returns none when not exact match\r\n- `Inventory#asViewable():Optional<ViewableInventory>` \r\n- `Slot#transform` -> `Slot#viewedSlot` \r\n- `MainPlayerInventory` is not a Grid anymore `MainPlayerInventory#asGrid():GridInventory`\r\n- `ViewableInventory#getViewers():Set<Players>` moved from `Container`\r\n- `ViewableInventory#hasViewers():boolean` moved from `Container`\r\n- `InventoryTransactionResult` removed unused UNDEFINED and CANCELLED Types\r\n- `InventoryTransactionResult#getSlotTransactions` replaces `replaced` item list.\r\n- `InventoryTransactionResult#revert()` and `InventoryTransactionResult#revertOnFailure()`\r\n- `InventoryTransactionResult` and Builder moved to Impl\r\n- `Inventory#peek` `Inventory#poll` do not return Optional anymore `ItemStack#empty()` instead\r\n    - Variants with SlotIndex still return `Optional#empty` when the Slot does not exist.\r\n- Updated/Simplified javadocs on `peek` `poll` `offer` `set`\r\n- `UserInventory#getEquipment` now also has both main and offhand\r\n- `UserInventory#getArmor()`\r\n- `PrimaryPlayerInventory` renamed from MainPlayerInventory\r\n- `UserInventory#getPrimary:PrimaryPlayerInventory` (previously `getMain`)\r\n- `UserInventory#getStorage:GridInventory` (previously `getMainGrid`)\r\n- `PrimaryPlayerInventory#getStorage:GridInventory` (previously `getMain`)\r\n",
    "head_branch": "fix/inventories",
    "is_a_fork": false,
    "comments": [
      "I was discussing with @parlough about the fact that a `EquipmentInventory` which is located in a `PlayerInventory` doesn't contain the held item slots, in Mumfreys original PR there was spoken about a armor inventory (which are the 4 slots) and the `EquipmentInventory` should contain all the slots (ofc only the supported one).\r\nKnowing that we could expose a `ArmorInventory` in the `PlayerInventory`, and make the `EquipmentInventory` return a inventory view containing the held and armor slots.\r\n\r\n```java\r\ninterface PlayerInventory {\r\n\r\n    ArmorInventory getArmor();\r\n\r\n    EquipmentInventory getEquipment();\r\n\r\n    // ...\r\n}\r\n```",
      "ViewableInventory confuses me.\r\nPlayer can view container, buy how can he view a inventory?\r\nHow can i get container viewers?",
      "Stuff you can look into like Chests are/have `ViewableInventory`\r\nWhen you look into a Chest you open a `Container`.\r\nIf two people look into the same Chest they each have their own Container.\r\n\r\nI'll add a `getViewer:Optional<Player>` to Container",
      "Bump: no method `offer(SlotIndex, ItemStack)`",
      "@XakepSDK commenting on merged PR's has a high chance of being missed. Create a new issue, contact faith to see what they think (since this was their PR), or comment on https://github.com/SpongePowered/SpongeAPI/issues/1000 for eventual cleanup / addition."
    ],
    "commit_messages": [
      "Big Inventory API Update\n\nRemoving Nullable ItemStacks and Empty Optional ItemStacks for empty slots. (Still exists for missing slots)\nAdd indexed access to base Inventory (removed OrderedInventory)\nChanged some Inventory Names\nBetter InventoryTransactionResults\nViewed inventory and cursor is available on Container\nAdjusted Inventory return types (no ducktyping and more specific if possible)\nand some JavaDocs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e780d9087c4d6d37a482",
    "number": 1846,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1920) | SpongeForge TODO\r\n\r\nMoving viewer related methods to Interactable and make Containers not interactable (for now we may be able to implement smth in the future)",
    "head_branch": "fix/interactable",
    "is_a_fork": false,
    "comments": [
      "https://github.com/SpongePowered/SpongeAPI/pull/1848"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e781d9087c4d6d37a483",
    "number": 1844,
    "body": "This is actually more for stable-7, but I'll target bleeding and cherry-pick as and when so that I know I keep them in sync!\r\n\r\nThis is simply to make a couple of bugfixes and quality of life improvements before I focus on the MC 1.13 commands. Wouldn't mind an eye over them first as they do touch the API project, hence the PR. These changes are:\r\n\r\n* Add `CommandContext#getOneUnchecked` for when you know you have that element in the `CommandContext` (avoids creating the `Optional`, similar to `ServiceManager#provideUnchecked`)\r\n* Fix the `SpaceSplitInputTokenizer` (and add tests to verify)\r\n* Add `CommandContext.Snapshot` and get/apply methods\r\n* Fix `GenericArguments#firstParsing` sometimes leaving arguments in the context if an argument sequence fails part way though (and tests to verify)\r\n* Add a case insensitive choices element option, #1192 \r\n* Fix entity element not working with player names and player UUIDs, #1294\r\n\r\nSome of this has been inspired by the previous PR by Cybermaxke, see #1284, and my previous PR, see #1323.",
    "head_branch": "feature/command-updates",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Quality of Life updates for the current command API\n\n* Add CommandContext#requireOne for when you know you have that element in the CommandContext\n* Fix the SpaceSplitInputTokenizer (and add tests to verify)\n* Add CommandContext.Snapshot and get/apply methods\n* Fix firstParsing sometimes leaving arguments in the context if a argument sequence fails part way though (and tests to verify)\n* Add choicesInsensitive for case insensitive choices\n\nSome of this has been inspired by the previous PR by Cybermaxke, see #1284, and my previous PR, see #1323"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e782d9087c4d6d37a484",
    "number": 1843,
    "body": "In consideration of https://github.com/SpongePowered/SpongeAPI/issues/1824, I've elected to take the chance to ~royally break~ refactor the hierarchy of `Value` and the subclasses of such. \r\n\r\nThe design for the new classes so to speak is to have separated the accessors from mutator methods. Accessor methods are available on the base classes (so, you have some list methods available in `ListValue`), but the mutator methods and modifier methods are available depending on whether you have a `Mutable` or `Immutable` subclass of the overall target.\r\n\r\nThe old usage  of values was something like so:\r\n\r\n```java\r\nfinal BlockState state = BlockTypes.STONE.getDefaultState();\r\nfinal Optional<StoneType> stoneType = state.get(Keys.STONE_TYPE);\r\n    // Up until this point, we're fine. This next line will cause a class cast exception\r\nfinal Value<StoneType> value = state.getValue(Keys.STONE_TYPE).orElseThrow(() -> new IllegalStateException(\"Stone should have stone type\")); \r\n// This won't work as the value is already an immutable value instance, throws an exception in the line above.\r\nfinal ImmutableValue<StoneType> stoneTypeImmutableValue = value.asImmutable();\r\n```\r\n\r\nThe biggest problem here is that the returned class type of a BlockState would not be a `Value`, but an `ImmutableValue`. Neither classes are interchangeable, let alone usable in this case because the returned value would still end up being invalid and cause a `ClassCastException`.\r\n\r\nNow, what this refactoring intends to replace that with is:\r\n```java\r\nfinal BlockState state = BlockTypes.STONE.getDefaultState();\r\nfinal Optional<StoneType> stoneType = state.get(Keys.STONE_TYPE);\r\nfinal Value<StoneType> stoneTypeValue = state.getValue(Keys.STONE_TYPE).orElseThrow(() -> new IllegalStateException(\"Stone should have stone type!\"));\r\nfinal Value.Immutable<StoneType> stoneTypeImmutable = stoneTypeValue.asImmutable();\r\nfinal Value.Mutable<StoneType> stoneTypeMutable = stoneTypeValue.asMutable();\r\n```\r\n\r\nThe beauty of the new way is that you don't have to worry about whether it's mutable or not, since you can declare it as such and it will **work** without issue.\r\n\r\nI'm expanding the PR a little to improve some more parts about the Values and how they are used, but this is it for now.",
    "head_branch": "refactor/values",
    "is_a_fork": false,
    "comments": [
      "I'm assuming `Value.Immutable<StoneType>.asMutable()` isn't possible?",
      "It is possible. That’s why there’s the asMutable and asImmutable methods available at the base class, just that the mutable and immutable variants will return themselves respectively. ",
      "https://github.com/SpongePowered/SpongeAPI/commit/69b2f9bfc959f13b114eba09bfcca7e8a738a232"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e783d9087c4d6d37a485",
    "number": 1841,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1935)\r\n\r\n - [x] SlotPos\r\n - [x] SlotSide\r\n - [x] StringProperty\r\n - [x] EquipmentSlotType\r\n - [x] GuiIdProperty\r\n - [x] Identifiable\r\n - [x] InventoryCapacity\r\n - [x] SlotIndex\r\n - [x] InventoryDimension\r\n - [x] InventoryTitle\r\n\r\nRemoved because unused / covered by other property\r\n - [x] ArmorSlotType\r\n - [x] MappedIntProperty\r\n - [x] AcceptsItems\r\n",
    "head_branch": "feature/inventory/property-to-implementation",
    "is_a_fork": false,
    "comments": [
      "Are you also going to move the `Property`s that aren't related to inventories? The builder can then be moved to the basic `Property` class.\r\nhttps://github.com/SpongePowered/SpongeAPI/tree/bleeding/src/main/java/org/spongepowered/api/data/property",
      "I'd rather not in this PR.\r\nI actually never used the other Properties.\r\nI'm only breaking the stuff I know.",
      "Hmm, ok. Can you move the `InventoryProperty.Builder` to `Property.Builder` instead, so we don't have to break the API twice when moving over all the other properties."
    ],
    "commit_messages": [
      "Move inventory properties to implementation\nContainerMinecart is not an inventory but its Carrier\nInventory is now a PropertyHolder"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e784d9087c4d6d37a486",
    "number": 1836,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1926)\r\n\r\nIt's often useful to be able to set an arbitrary signed\r\nskin payload for a Humanoid:\r\n\r\n* Plugins may want to use a skin that is not currently set on any\r\nplayer\r\n* The Mojang skin API has notoriously strict IP-based rate-limiting.\r\nServers, especially those that are part of a larger network, may\r\nwish to implement their own caching system.\r\n\r\nThis commit allows plugins to set use valid skin ProfileProperty\r\nwith SkinData, rather than being constrained to use a skin currently\r\nin use by a specific player.",
    "head_branch": "feature/player-skins",
    "is_a_fork": false,
    "comments": [
      "Does this allow setting it on skull items? If so, hella keen :tada:",
      "Skulls use [RepresentedPlayerData](https://github.com/SpongePowered/SpongeAPI/blob/bleeding/src/main/java/org/spongepowered/api/data/manipulator/mutable/RepresentedPlayerData.java), which takes a full `GameProfile`.",
      "Add ability to modify skin parts visibility.",
      "@XakepSDK: That should go in a different PR.",
      "My corresponding SpongeCommon PR makes `SkinData` applicable to *players*, as well as humans. Both the player themself and other players on the server will see the updated skin.\r\n\r\nThanks to @McLive for showing how this could be done in their [SkinsRestorerX plugin](https://github.com/McLive/SkinsRestorerX)",
      "@gabizou @kashike I've made the javadoc changes you requested.",
      "Pinging @SpongePowered/developers and @XakepSDK for final review.\r\n\r\nIf no one else wants any other changes, I'm planning to merge this in a few days.",
      "Forgive my ignorance but will this change allow for updating skins for a subset of players? There are use cases where it is beneficial or even required where a group of players sees a specific skin for a human whereas a different group sees a different skin.\r\n\r\nAnother example would be where a player sees his/her own skin differently as what other players would see him/her (for example when designating teams via skins).",
      "@initramfs: Unforuntately, no. This will probably need to wait until @kashike's Contextual Data system is ready.",
      "Merged in https://github.com/SpongePowered/SpongeAPI/commit/a3431307f06996321489b69664b16202e8806042."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e785d9087c4d6d37a487",
    "number": 1834,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1919)",
    "head_branch": "feature/recipebookevent",
    "is_a_fork": false,
    "comments": [
      "Sorry, off-by-one error in the issue number :slightly_frowning_face: "
    ],
    "commit_messages": [
      "Event for recipebook interaction"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e786d9087c4d6d37a488",
    "number": 1833,
    "body": "Part of a bugfix for https://github.com/SpongePowered/SpongeCommon/issues/1583, annotating ExpireEntityEvent so that the SpongeEventFactory generates a method for it, allowing it to be fired within SpongeCommon.",
    "head_branch": "bugfix/1583",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1833 from Zerthick/bugfix/1583\n\nAnnotate ExpireEntityEvent to generate a factory method."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e787d9087c4d6d37a489",
    "number": 1832,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1914)\r\n\r\nThis along with the implementation PR should fix https://github.com/SpongePowered/SpongeAPI/issues/1496 and https://github.com/SpongePowered/SpongeAPI/issues/1287\r\n\r\nFireworks is handled with an explosion type and as an `EntityDamageSource` while magma is handled as a `BlockDamageSource`.",
    "head_branch": "fix/missing-damage-sources",
    "is_a_fork": true,
    "comments": [
      "Missing `DamageSource`s:\r\n\r\n    DamageSource IN_FIRE\r\n    DamageSource LIGHTNING_BOLT \r\n    DamageSource LAVA\r\n    DamageSource HOT_FLOOR\r\n    DamageSource IN_WALL \r\n    DamageSource CRAMMING \r\n    DamageSource CACTUS \r\n    DamageSource FLY_INTO_WALL \r\n    DamageSource ANVIL \r\n    DamageSource FALLING_BLOCK\r\n    DamageSource FIREWORKS \r\n\r\nBased on what we are doing here https://github.com/SpongePowered/SpongeCommon/blob/fad041fc062c96fe847acbd54abd28f284a60160/src/main/java/org/spongepowered/common/registry/provider/DamageSourceToTypeProvider.java#L48 we are left with\r\n\r\n    DamageSource HOT_FLOOR\r\n    DamageSource CRAMMING \r\n    DamageSource FIREWORKS \r\n\r\nThey should be handled in the common PR.\r\n\r\n\r\n\r\n"
    ],
    "commit_messages": [
      "Add missing damage sources (#1832)\n\n* Add missing damage sources\r\n\r\n* Add javadoc for DRAGON_BREATH\r\n\r\n* Move WALL_COLLISION to DamageType"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e788d9087c4d6d37a48a",
    "number": 1828,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1909)\r\n\r\nConvenience method for checking clicked slots in inventory events.",
    "head_branch": "feature/containerviewedslot",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "add Container#isViewedSlot"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e789d9087c4d6d37a48b",
    "number": 1827,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1908)\r\n\r\nOpen inventories that support it with a different display name\r\n\r\nhttps://github.com/SpongePowered/SpongeAPI/issues/1443",
    "head_branch": "feature/openinvname",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Open Inventory with different display name"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e78ad9087c4d6d37a48c",
    "number": 1826,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1907)",
    "head_branch": "value-copy",
    "is_a_fork": false,
    "comments": [
      "Originally I was for this, but I decided against it for `Value`s because of the nature of them not knowing the types of elements they contain, so they cannot make a true copy by itself, whereas a `DataManipulator` can because it already knows what element types it contains.",
      "From what I can see through a look through the `Keys` class, pretty much every value is either an immutable object or a collection of immutable elements handled by a custom `Value` sub-interface (e.g. `ListValue`, `SetValue`, `MapValue`).\r\n\r\nAlso, I don't think that this would cause any more problems than just using `value.asImmutable().asMutable()`. This would just be a slightly faster method of doing that.",
      "Just realized the `OptionalValue` fix is already handled by another PR (#1807). I'll remove that from mine.",
      "I'll agree, as we already can't verify the validity of copies in `asMutable()`/`asImmutable()`, `copy()` already makes sense."
    ],
    "commit_messages": [
      "Add Value.copy()."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e78bd9087c4d6d37a48d",
    "number": 1819,
    "body": "**SpongeAPI** | [SpongeCommon](//github.com/SpongePowered/SpongeCommon/pull/1895)\r\n\r\n* `getOriginalItemStack` and `getItemStack` are marked as deprecated.\r\n* a new method named `getTransaction` is added.",
    "head_branch": "bleeding",
    "is_a_fork": true,
    "comments": [
      "@ryantheleach Any reason why you put the bleeding label ? \r\n\r\nThis is a bit old so I'm not sure if it was decided not to be included in stable",
      "Is that PR will be added ? ",
      "https://github.com/SpongePowered/SpongeAPI/commit/23fe45713674be9065257192bdf1d4e6ada7ed2e"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e78cd9087c4d6d37a48e",
    "number": 1818,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1893)\r\n\r\nThis rewrites `ChangeEntityExperienceEvent` to use data to convey both total experience and levels, and deprecates the old integer-based methods and the `ChangeLevelEvent` interface.",
    "head_branch": "xp-events",
    "is_a_fork": false,
    "comments": [
      "...Apparently Mockito does not like pulling data from mock values. It can't tell that `Value<Integer>.get()` returns an `Integer`, so it returns a mock `Object` instance - which cannot be casted to an integer. Any thoughts on how to fix this?",
      "This will need to be targeting bleeding since the event factory methods will change entirely.",
      "@gabizou Done.",
      "The build still seems to be failing though. Not sure how to handle the generic `Value` methods with Mockito.",
      "@JBYoshi @gabizou: I've updated and re-targeted this PR to `stable-7`. Using the changes I've made to `event-impl-gen`, this can be done without breaking backwards compatibility."
    ],
    "commit_messages": [
      "Remove mavenLocal repo"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e78dd9087c4d6d37a48f",
    "number": 1813,
    "body": "**API** | [Common](https://github.com/SpongePowered/SpongeCommon/pull/1888)",
    "head_branch": "move-service-manager-impl",
    "is_a_fork": true,
    "comments": [
      "Manually merged into 1.13 branch"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e78ed9087c4d6d37a490",
    "number": 1811,
    "body": "**API** | [Common](https://github.com/SpongePowered/SpongeCommon/pull/1887)\r\n\r\nMove the BlockState matcher impl to impl and outside of the BlockState interface.",
    "head_branch": "move-block-state-matcher",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Move the BlockState matcher impl to impl and outside of the BlockState interface."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e78fd9087c4d6d37a491",
    "number": 1810,
    "body": "**API** | [Common](https://github.com/SpongePowered/SpongeCommon/pull/1886)",
    "head_branch": "move-void-gen-modifier",
    "is_a_fork": true,
    "comments": [
      "@Meronat why does this target 1.13?",
      "@gabizou This can also be merged."
    ],
    "commit_messages": [
      "Move the VoidWorldGeneratorModifier to the impl."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e790d9087c4d6d37a492",
    "number": 1808,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1882) | [SpongeForge](https://github.com/SpongePowered/SpongeForge/pull/2110)\r\nThis is mostly to bring in compatibility of entity deaths to match Forge's requirements, while this is somewhat of an implementation leak that it's \"possible\", it's just not recommended as the health status of the entity could have adverse effects.",
    "head_branch": "refactor/entity-drop-compatibility",
    "is_a_fork": false,
    "comments": [
      "mmmm...The Rabbit Hole.",
      "@Zidane precisely. Because Forge requires the event to be cancellable, and I remember this discussion where we elected not to cancel the entity death event for health and next tick update reasons.\r\n\r\nI think we would have to perform a check on the entity that the plugin developer that cancelled the event would have to also increase the health in some way, otherwise reset the health to `1`.",
      "Are we going to add the behavior on cancel to the JavaDocs? Or is it expected to be implementation dependent.",
      "Spoke to @Zidane and @kashike and some forge members about the change:\r\n\r\nIt's currently unimplemented in Forge to handle the cancel of the entity death with the following logic: Modders who decide to cancel the entity death should \"undeadify\" the entity dying. It would otherwise not be the fault of the implementation if the entity does indeed die. What this will mean is that if the event is canceled, drops will still not occur, **but** every tick thereafter will still perform the death animation and process. What can happen however, is that the event is then *rethrown* during death ticks, at which point, if those are cancelled, death doesn't happen.\r\n\r\nWhat @kashike and @Zidane did agree on however is that if the event is thrown **3** times for the same entity, and they're cancelled but the entity is not \"undeaded\", the entity will ultimately be allowed to die.\r\n\r\nI'm comfortable with handling the implementation in Common to support these changes, but I'd like to get some more @SpongePowered/developers input on the idea since the API would react a little differently in this case compared to other events."
    ],
    "commit_messages": [
      "Add back the validation check for SpawnEntityEvent.\n\nSigned-off-by: Gabriel Harris-Rouquette <gabizou@me.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e791d9087c4d6d37a493",
    "number": 1807,
    "body": "This complements `ImmutableOptionalValue<E>.asMutable(): OptionalValue<E>`.",
    "head_branch": "bleeding",
    "is_a_fork": true,
    "comments": [
      "Merged in https://github.com/SpongePowered/SpongeAPI/commit/98f623702a511109faf8180edfb6e3599908b688"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e792d9087c4d6d37a494",
    "number": 1805,
    "body": "[**SpongeAPI**](https://github.com/SpongePowered/SpongeAPI/pull/1805) | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1870)\r\n\r\nAlthough the event already contains SlotTransactions with the affected slots it is not clear which one was the previous Slot / new Slot.\r\n\r\nhttps://github.com/SpongePowered/SpongeAPI/issues/1334\r\nhttps://github.com/SpongePowered/SpongeCommon/issues/926",
    "head_branch": "feature/helditemslot",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "add original and final slot info to ChangeInventoryEvent.Held"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e793d9087c4d6d37a495",
    "number": 1804,
    "body": "**API** | [Common](https://github.com/SpongePowered/SpongeCommon/pull/1868) | [Forge](https://github.com/SpongePowered/SpongeForge/pull/2096)",
    "head_branch": "feature/client",
    "is_a_fork": false,
    "comments": [
      "If there will be an API for the client, how can we separate catalog types that are available on the client and on the server? Recipes and advancements are good examples of this, they are synced with the client. Right now there is only one GameRegistry for both, with this PR there should be one for client and server?",
      "This will be targeting API 8 as we're going to fully expose various client related changes come bleeding changes for 1.13 along with structural changes.\r\n\r\n",
      "Manually merged into 1.13"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e794d9087c4d6d37a496",
    "number": 1800,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1852)\r\n\r\npredefined Transformations to order and filter inventories.",
    "head_branch": "feature/invtransform",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Inventory Transformations"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e795d9087c4d6d37a497",
    "number": 1787,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1812)\r\n\r\nfixes https://github.com/SpongePowered/SpongeAPI/issues/1475",
    "head_branch": "feature/offlinelocation",
    "is_a_fork": false,
    "comments": [
      "how about three double versions for setter methods",
      "I think 3 doubles would clutter the API"
    ],
    "commit_messages": [
      "add Location and Rotation support for offline Player #1475"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e796d9087c4d6d37a498",
    "number": 1786,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1811)\r\n\r\nsee https://github.com/SpongePowered/SpongeAPI/issues/1257",
    "head_branch": "impl/itemstackcompare",
    "is_a_fork": false,
    "comments": [
      "This can be merged in `stable-7` since it's not a binary breakage. Since the declared types are only `Comparator` and the inner classes are package private, it isn't exposed to developers for use.",
      "finally :tada:"
    ],
    "commit_messages": [
      "move ItemStackComparators to impl"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e797d9087c4d6d37a499",
    "number": 1785,
    "body": "**SpongeAPI** | [**SpongeCommon**](https://github.com/SpongePowered/SpongeCommon/pull/1810)\r\n\r\nNow, it uses a `Tristate` instance to indicate its keep-spawn-loaded policy instead of an arbitrary boolean or a `@Nullable Boolean`. ",
    "head_branch": "feature/world-archetype-keepspawnloaded",
    "is_a_fork": true,
    "comments": [
      "Hey Liach, can you add some context as to why it's now a Tristate? Thanks ~qa",
      "Deprecating `doesKeepSpawnLoaded` isn't a good idea.\r\n\r\nThe point of the method is that it hides an implementation detail, what the default is. Sure, in MCP, the default is to keep the overworld loaded but not other dimensions. What about Lantern? They should not be constricted by what you put into the documentation or how Mojang does it or how plugins interpret this (I dunno, plugins might use this for something!).\r\n\r\nHaving this true/false method indicates what the server is **going** to do, without referring to the configuration. This gives the impl the freedom to implement sane defaults for them.\r\n\r\nIf you want to expose what the user set as a tristate, that's fine, but it shouldn't replace the current method because what the user set and what the server does are two different things.",
      "@dualspiral Nope. It depends if the server already has a world with a spawn or not. If it does not, then this archetype will be spawn loaded. (e.g. replacing the current overworld)",
      "@ryantheleach it is from a bugfix in common's stable 7 branch.",
      "Oh, archetype, right. Yeah, this is fine then.",
      "Closing as WorldArcheytpe is gone in 1.13.\r\n\r\nThanks anyways @liach .",
      "thanks for the info! will follow the bleeding development more closely."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e798d9087c4d6d37a49a",
    "number": 1779,
    "body": "As the title says, `EventContextKeys#THROWER` will disappear in API 8.\r\nSee #1774 \r\nAn update will be made in #1766 to remove it for API 8.",
    "head_branch": "deprecate-thrower",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Deprecate EventContextKeys#THROWER for removal in API 8 (#1779)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e79ad9087c4d6d37a49b",
    "number": 1777,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1792)",
    "head_branch": "fix/catalogtypes",
    "is_a_fork": true,
    "comments": [
      "Note: This PR was automatically closed because the `1.13` branch was deleted. It will need to be reopened to target `api-8` instead.  See https://github.com/SpongePowered/SpongeAPI/pull/1428#issuecomment-539689855."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e79bd9087c4d6d37a49c",
    "number": 1770,
    "body": "* Moves the `SmeltingRecipe` and `CraftingRecipe` registration to the `GameRegistryEvent.Register` event.\r\n* `CraftingRecipe`s must be reloadable, because they are loaded from json files in resource (data) packs.\r\n* Turn `SmeltingRecipe` (`Recipe`) into a `CatalogType`, it's only a matter of time before smelting recipes are also loaded from json files, better prepare for this. This also makes it consistent with the crafting recipes which are already `CatalogType`s.\r\n",
    "head_branch": "move-recipe-registration",
    "is_a_fork": true,
    "comments": [
      "~wip",
      "Will be covered in https://github.com/SpongePowered/SpongeAPI/pull/1952"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e79cd9087c4d6d37a49d",
    "number": 1769,
    "body": "SpongeAPI | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1776)\r\n\r\nThis PR adds/changes the javadocs of the Arrows projectiles. It also makes the SpectralArrow extend Arrow.\r\nDue to this last point, this may be considered as a breaking change, @Zidane and I would like to know if this can be merged in stable-7 or should be in bleeding.",
    "head_branch": "fix/arrow-usage",
    "is_a_fork": true,
    "comments": [
      "~qa",
      "@gabizou @SpongePowered/developers \r\n\r\nThis brings to mind the issue (as evidenced by the common PR) where we allow any Projectile to be launched or any Entity to be spawned and I also feel that we need a marker interface to solve the issue where you clearly can't launch an Arrow because in the MCP implementation Arrow is an abstract class.\r\n\r\nI'm aware this leaks implementation details but its making for muddy usage as well because the act of allowing a spawnEntity(Entity e) or launch(Projectile p) gives the impression that it is possible to do so for everything.\r\n\r\nThoughts?",
      "If we would use `EntityType`s to spawn entities, this wouldn't be a issue. But then I would also make the `EntityType` class support generics. `EntityType<SpectralArrow>`, then you can use the generics to check if it's a projectile and use it to return the entity as a `SpectralArrow`.",
      "Alternatively you can make the method to spawn an entity duck typed as such:\r\n```java\r\n<E> E createEntity(EntityType type, Vector3i pos);\r\n\r\nfinal Arrow arrow = createEntity(EntityTypes.SPECTRAL_ARROW, pos);\r\n```\r\n\r\nWhile I agree with @Zidane that the overall exposure of the structure of entity classes, this was already done when we had to move away from skeletons and use `WhiteSkeleton`s etc. Likewise with horses. At this point, it's safe to say the exposure is required, but also that we can duck type the method itself to do as above mentioned, and the plugin developer would have to know that they are getting their hands dirty themselves. (The usage of duck typing here eliminates the need for generics on EntityType, and falls in line with the usages in Inventory API).",
      "@gabizou While that may work for creating entities, using a `EntityType` to launch projectiles allows you to pass in any entity, it doesn't even have to be a projectile. That's why the generic parameter for EntityType could be useful:\r\n`<T extends Projectile> T launchProjectile(EntityType<T> projectileType);`",
      "In some cases though, an entity is considered a projectile but isn’t mapped as a projectile in the API. I believe an example could be mod entities from bosses, like wither skulls or the equivalent. ",
      "Why does `SpectralArrow` extend `Arrow` instead of `TippedArrow`? Also, why does `SpectralArrow` even exist if you have `TippedArrow`? And this is definitely a breaking change although I doubt it'll actually break anything since `SpectralArrow` seems like it was unusable before this.",
      "`SpectralArrow` is just an `Arrow` since it can only give one special effect (glowing), unlike `TippedArrow`s which can have (or not) potion effects.",
      "Huh, so you can have a `TippedArrow` with the glowing potion effect and the client will call it an \"Arrow of Glowing\" rather than a \"Spectral Arrow\"?",
      "I believe this PR is good to go in stable-7 since it's not a breaking change, more of a fix. While it wouldn't exist in the major version release, it will be released in the minor version release of the API.\r\n\r\nAs far as spawn methods go, I believe the discussion should continue in a separate issue.",
      "Closed by 7c8f70832ccb956cdb279b826bddf903847760a3 and dc5a4e736a2b2d8110be9f1684a6d8ecce1bc964"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e79dd9087c4d6d37a49e",
    "number": 1768,
    "body": "This PR fixes a couple issues within `GenericArguments` and `CommandFlags`, particularly with tab completion.\r\n\r\n### UserCommandElement\r\n\r\nPreviously, the `UserCommandElement` would delegate it's `returnSource` value to the `PlayerCommandElement` which checked for players. As a result, if the name of an offline user was entered it tried to return the `CommandSource` instead, which resulted in the `UserCommandElement` never attempting to parse a `User` from the given name.\r\n\r\n### SequenceCommandElement\r\n\r\nThe `SequenceCommandElement` could not handle tab completion well for optional-like elements (`OptionalCommandElement`, `UserCommandElement` returning the source, `FlagsElement`, etc.) because any `ArgumentParseException` thrown was caught and handled by that element. Now, if the state of the args is the same before and after parsing an element, the completions for those will be cached in a `Set` to be returned later. If an element is parsed successfully, this cache is cleared.\r\n\r\n### CommandFlags\r\n\r\nMuch of `CommandFlags` has been cleaned up and simplified, placing a large priority on fixing tab completion. I would also like to look into a `tabCompleteUnusedFlags` option that will tab complete for flags that haven't been used yet, although this will take a bit of work doing.\r\n\r\n### Minor Changes\r\n\r\n* `MarkTrueCommandElement` now uses a `Text` instead of a `String` key, and has been made `public`\r\n* `OptionalCommandElement#parseValue` had a reversed `args.hasNext()` check\r\n* The `PlayerCommandElement` key is now `@Nullable`\r\n* Updated `CommandFlags.Builder` functions to remove `@Nullable` and use lambdas\r\n\r\n### Review & Testing\r\n\r\nI have not begun testing these with Sponge yet, but these changes come from those that I have tested within TeslaLibs. I will begin setting up Sponge tests tomorrow, and any help testing would be much appreciated!\r\n",
    "head_branch": "fix/arguments",
    "is_a_fork": true,
    "comments": [
      "I’ve not had much time to look over this, but with all of your minor changes, why? They either indicate a change in behaviour or just do nothing, as far as I can see.\r\n\r\nI’ll investigate other points when I get a little more time.",
      "These changes are being migrated from another projects, but I did try to minimize any external changes that weren't focused on the aspect I was working on. In the case of flags, the primary fix is preventing tab completion from overwriting the inputted flag. I would also like to have some system in place that filters the available flags based on what has been inputted already. This would likely require a new option within the builder because the reuse of a flag is allowed by the specifications.\r\n\r\nIf you want me to revert the unnecessary changes, please confirm that for me.",
      "It's done now but I am wary that by doing so that some behaviour changes may have been introduced that should not have been. Particularly for this, this is in the API project, so **changes** to stable should be **as minimal as possible**, which is ultimately where you'd want this to go.\r\n\r\nCan you please explain what the flag tab completion problems are, why they are caused and how you fixed them? It's hard to make it out because of these diffs.\r\n\r\n~wip",
      "Previously, if you tab complete a flag that has an existing alias (similar to user thing discussed above) it would tab complete the element of the flag *without* attaching the flag to the result, so `--user` would tab complete `Simon_Flash` instead of `--user Simon_Flash` (or `--user=Simon_Flash`).\r\n\r\nThis was fixed in the first PR in [this line](https://github.com/SpongePowered/SpongeAPI/pull/1768/files#diff-bddcca313ee050f07039ec6b24e4653eR226), but I realized this is also incorrect as we're assuming the sender wants to tab complete the value of the flag and not the flag itself (same thing as with the user example above). The proper fix for that is in [this line](https://github.com/SpongePowered/SpongeAPI/pull/1768/files#diff-bddcca313ee050f07039ec6b24e4653eR213), which now also returns the filtered keys if we have a single flag without a value that does not have a next argument.\r\n\r\nHowever, there are three other changes that I would like to make for this:\r\n* Tab completing `\"\"` (empty) should include all flags, not none.\r\n* Tab completing `-` should include all flags, not only short flags.\r\n* When tab completing a flag, only flags that are unused are included. Because the specifications for `CommandFlags` allow a flag to be used multiple times, this would be implemented as an option set within the builder with something like `setFilterUsedFlags`, defaulting to `false`.\r\n\r\nThe gif below demonstrates how these might work (particularly the last one); just note that in it long flags only have a single hyphen instead of two.\r\n\r\n![Filter Used Flags](https://gyazo.com/7e9778f4e3e6b7e88fa26a85639950ba.gif)",
      "I'll need time to review this in depth, but when I quickly skimmed it before dual reviewed, I had the same thoughts about not being able to see the direct changes due to not being a minimal diff, but didn't write it as I wanted to look in more depth and give some positive constructive feedback as well.\r\n\r\nThat said, this looks like a better contribution then the color Orange rabbit hole I led you down, So I'm glad to see you still contributing <3\r\n\r\n\"just note that in it long flags only have a single hyphen instead of two.\"\r\n\r\nWhat do you mean by this? Is the gif representative of this PR (which changes the long flags to single hyphens)? Or is it using your alternate command system(and is just used for demonstration purposes, because you believe this PR will act similarly)?",
      "Yes, some of the changes weren't really needed. I've reverted most of those, but I've kept the changes I made to the parsing of `CommandFlags` because it does make the code more readable (in my opinion) and was necessary for me to verify that it had the correct functionality that I was looking for. Without getting too off-topic, I have no complaints regarding the orange PR except I _still_ don't know what people want me to do with it.\r\n\r\nI have a difficult time explaining thing (especially in text), so I included the gif to try to show what my final goal is. I wrote a flag parsing system into TeslaLibs [here](https://github.com/SimonFlash/TeslaPowered/blob/feature/arguments/TeslaLibs/src/main/java/com.mcsimonflash.sponge.teslalibs/command/arguments/FlagsElement.java) a couple days ago to fix some of the issues I had personally with `CommandFlags`, and this PR adds whatever fixes I can from there into Sponge. That's the system shown in the gif, and was only included to show what I meant by the tab completion pieces. For compatibility reasons, there are no changes made to how long flags work in this PR.",
      "@dualspiral I just discovered an issue with tab completing for `PatternMatchingCommandElement`s, but I'm not sure how to fix it properly. \r\n\r\nWhen we're parsing an element such as a `UserCommandElement`, it attempts to get a value from the `PlayerCommandElement` first. However, unless you've typed the name of a player incorrectly this parsing will always succeed and ends up returning a list of all players on the server that match the argument. As a result, the parsing never fails and thus we don't know to complete the element. Here's a couple examples of this:\r\n\r\n* `\"\"` -> Parses all *players* into the context\r\n* `\"S\"` -> Parses all *players* starting with `S` into the context\r\n* `\"Sin` -> Fails parsing. Tab completion would return any users starting with `Sin`, often resulting in an empty list.\r\n\r\nThis should be fixed as a result of the `!args.hasNext()` check [here](https://github.com/SpongePowered/SpongeAPI/pull/1768/files#diff-325508c3a8ee152cf22a18a16566a37R340) in `SequenceCommandElement`, and I should be doing the same [here](https://github.com/SpongePowered/SpongeAPI/pull/1768/files#diff-bddcca313ee050f07039ec6b24e4653eR223) in `CommandFlags`. However, I'm not sure if this is a proper fix or just a workaround as the parsed values for `UserCommandElement` are incorrect as well.",
      "I think that I solved this in #1660 by adding a completion context and moving the check for this element. Let me look at getting that in tonight (UK time), I should have some time this evening.",
      "@SimonFlash I can't remember the exact reason for that behavior (players first) But I remember it being wanted, since 1. it was more efficient, and 2, people expected to be able to tab complete the online players first, because they were online. If it's failing to parse beyond that, then it's possible I made a mistake, or it's not the Command Element that I remembering editing. The git blame on that should hold a PR, with an issue with additional details if that's the case.",
      "Status update on this:\r\n\r\n* Waiting for #1660 so I can update accordingly. I did make an attempt to merge those changes with mine and do some testing with it, but was unsuccessful.\r\n* Thoughts on converting `GenericArguments#markTrue` to something more like `GenericArguments.constant` that accepts a key and returns a constant value? Has the same functionality when `true` is passed in, but has a bit more uses and justifies making it public.\r\n* Filtering out already defined flags from suggestions (see [this comment](https://github.com/SpongePowered/SpongeAPI/pull/1768#issuecomment-363245170)). This would be a bit of extra work and would require an additional setting to be defined in the builder, but shouldn't be a breaking change.",
      "@dualspiral This has passed all of my tests and is ready for review/merge.",
      "> This has passed all of my tests\r\n\r\nDo you have reduced test cases that we could use to see what exactly you've tested? It would be good for me to be able to look at a before/after. If you have any unit tests, that would be useful too.\r\n\r\nI'm struggling to see what you've functionally changed and what formatting changes you've made so being able to understand what's going on by investigating the test cases would be much easier for me.",
      "https://github.com/SpongePowered/SpongeAPI/pull/1768/files?w=1\r\nignoring whitespace helps a bit",
      "Consider the following `CommandElement`s, which simply represent three arguments that are optional and their suggestions, and the `SequentialElement` created using the old logic compared to the new logic in this PR.\r\n\r\n```java\r\nCommandElement first = optionalWeak(choices(Text.of(\"first\"), ImmutableMap.of(\"arg\", \"arg\", \"arg1\", \"arg1\", \"test1\", \"test1\")));\r\nCommandElement second = optionalWeak(choices(Text.of(\"second\"), ImmutableMap.of(\"arg\", \"arg\", \"arg2\", \"arg2\", \"test2\", \"test2\")));\r\nCommandElement third = optionalWeak(choices(Text.of(\"third\"), ImmutableMap.of(\"arg3\", \"arg3\", \"arg4\", \"arg4\")));\r\n\r\nCommandElement oldSeq = oldSeq(first, second, third);\r\nCommandElement newSeq = newSeq(first, second, third);\r\n```\r\nHere's what happens when you complete these with the following inputs:\r\n\r\n* `\"\"` (empty)\r\n  * OldSeq: `[]`\r\n  * NewSeq: `[arg, arg1, arg2, arg3, arg4, test1, test2]`\r\n* `\"a\"`\r\n  * OldSeq: `[]`\r\n  * NewSeq: `[arg, arg1, arg2, arg3, arg4]`\r\n* `\"arg\"`\r\n  * OldSeq: `[arg3, arg4]`\r\n  * NewSeq: `[arg, arg1]`\r\n\r\nSo, what's happening here? The largest issue that this addresses is that the old `SequenceElement` skips over optional arguments because they are technically parsed successfully. To fix this, I've included a check to see whether the actual state of the arguments changes - if it doesn't, then we can presume that we're dealing with some type of optional element and can add its completions to the return list.\r\n\r\nThe second issue is that the old element makes the assumption that if a completion matches the input, we should jump to the next element. This is **wrong** - as I've discussed above with flags, we should only be completing the active element and require the user to input a space to indicate they're moving to the next one.\r\n\r\nWith the first two examples, none of the arguments are matched and so the `ChoicesElement` throws an exception, which is caught by `OptionalWeak`. As the parse was 'successful', the old sequence element moves on and eventually swallows the remaining elements without actually completing any of them. My changes make this system a bit smarter, and the state check realizes that we're probably dealing with an optional element and completes them.\r\n\r\nIn the last case, this is caused by the weird jumping and resetting. I'm honestly not 100% sure what the old sequence element is doing here, but it seems to parse `arg` twice for the first and second elements before eventually completing the third. The new sequence element, however, sticks with the first element as the parse was successful and returns it's completions. While the most correct response is to also complete the remaining elements, this is a limitation of the current command system because it is impossible to identify an element as being optional if an argument is consumed. As such, there is no way we can return the expected `[arg, arg1, arg2, arg3, arg4]` completions without making changes to the `CommandElement` class to indicate when arguments are optional.\r\n\r\nThough the test case is quite odd, it is actually something that is seen commonly on a smaller scale. With these changes, any arguments such as `[player-or-source] <something>` will both be tab completed properly.\r\n\r\nWith flags, the changes to tab completion is with regards to this second issue. This ensures that tab completing `--fl` will show `[--fl, --flag]` instead of completing the element attached to the `--fl` element (poor example, but that's the gist of things). The focus here is requiring the using the specify when they're moving to the next argument rather than forcing it on them if there's a partial match.\r\n",
      "OK, so I've pulled this into my workspace and written a unit test or two to verify things. It doesn't pass all of my tests (and one of yours). This is what I see:\r\n\r\n* **UserCommandElement**: not there - was fixed in #1660 and later commits so isn't needed as part of this.\r\n* **SequenceCommandElement**: [I wrote this unit test](https://gist.github.com/dualspiral/331f1d1778aa3f9e883a7f16a657b254) to verify that this is the case, includes your tests and some other cases I thought of. Some are failing.\r\n* **CommandFlags**: you're not accounting for optional elements or complete short flags by the looks of it - short flags probably don't need completion on their own to be fair but it's included in the test for sake of completion, happy to ignore that one. Others should be considered for consistency.\r\n\r\nMinor changes:\r\n\r\n* `MarkTrueCommandElement` now uses a `Text` instead of a `String` key, and has been made `public` - OK\r\n* `OptionalCommandElement#parseValue` had a reversed `args.hasNext()` check - not there now.\r\n* The `PlayerCommandElement` key is now `@Nullable` - not there now.\r\n* Updated `CommandFlags.Builder` functions to remove `@Nullable` and use lambdas - OK.\r\n",
      "#### UserCommandElement\r\n\r\nI'm not sure if you're saying there's something I should change here or not, so let me know what you're looking for here. If there's something that needs to be redone or reversed, I'm going to need help as I don't understand Git well enough to do it myself.\r\n\r\n#### SequenceCommandElement\r\n\r\nI added the tests into my workspace and here were the initial results. Notably, the only test cases that fail with my system also fail with the old one anyways.\r\n\r\n- My sequential element failed tests 1, 15, 16, and 17.\r\n- The old sequential element failed tests 1, 2, 3, 6, 9, 10, 12, 13, 15, 16, and 17.\r\n\r\nIn the process of fixing test case 1, I found that tests 5, 7, and 8 are incorrect. Each of these makes the assumption that if the element is parsed successfully using an argument then it should complete the next element, which is not true. The completions of this element should be included through the next non-optional argument - this is the change that resolves test 1.\r\n\r\nI've forked your gist of the tests above and added my edits [here](https://gist.github.com/SimonFlash/3f917303a73fd0712fc44aeea9d42ff6).\r\n\r\n#### CommandFlags\r\n\r\nApplying optional elements to flags is outside the scope of this PR, and as such I didn't worry about tests 15, 16, and 17. I wouldn't expect people to try using optional elements with flags as they're optional by nature anyways (though wrapping it with the new sequential argument could work). There are a number of fringe cases that could be addressed, but I'm not willing to put time into that because the system really needs to be rebuilt anyways. The largest problem with this is that there is no method to detect whether an element is optional or not; we can only make guesses based on whether the state of the arguments changes and that can't account for an optional element that's consumed anyways. I'm more than happy to put time into resolving these problems, but ultimately this is a project for API 8 that requires a redesign to include the necessary information to make this possible.",
      "Tests 5 6 and 7 mirrored what you said in your previous comment, so if you've fixed that, brilliant!\r\n\r\nWhat I meant about the UserCommandElement was that I did it earlier, so it's not needed to be present here. My bad.\r\n\r\n>  I wouldn't expect people to try using optional elements with flags as they're optional by nature anyways\r\n\r\nI get what you're saying, but it is possible because there might be a sensible default associated with a flag where the flag changes the meaning of the command anyway. But I also understand your point about the work it is. However, as API 7 could be around for another year yet (as command changes will be to work with Brigadier for 1.13), it might be worth looking at it. It can be a future PR though.\r\n\r\nTo be honest, let's get this checked and in and worry about that later. I need to test this before making any more comments - I'll do the next time I get a chance to.",
      "I ran the code on my server and found some odd things happening with flag completion. So, I added some more tests and properly tested what was coming back from a completion (not just a count), and there were some errors that occurred:\r\n\r\n[I added the tests here](https://gist.github.com/dualspiral/331f1d1778aa3f9e883a7f16a657b254#file-completiontest-java-L106-L108) along with the one on line 103 (`-f arg4`), which all failed. That latter one is an edge case, but the first three were broken when you rearranged some of the code.\r\n\r\nSpecifically, [you missed the two dashes here](https://github.com/SpongePowered/SpongeAPI/pull/1768/files#diff-bddcca313ee050f07039ec6b24e4653eL264) which [should have also been here](https://github.com/SpongePowered/SpongeAPI/pull/1768/files#diff-bddcca313ee050f07039ec6b24e4653eR226).\r\n\r\nThis is why a minimal diff for fixes and changes are preferred, because everyone missed it right up until the point I was doing final tests!\r\n\r\nAs it's a minor thing and I want to get this all in tonight, I'll make the changes. I've also updated the short flag completion code so that it properly handles elements that are complete and doesn't make them disappear on tab - my diff is here: https://gist.github.com/dualspiral/25fa09995a791972f2deca7f786457c1.",
      "https://github.com/SpongePowered/SpongeAPI/commit/675baab9b722abde24170903d043377d4585462e\r\n\r\nThis is currently only on bleeding, will cherry-pick in a bit."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e79ed9087c4d6d37a49f",
    "number": 1766,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1769)\r\n\r\nThis is a breaking change.\r\n\r\nThis PR removes the TargetProjectileEvent and changes the LaunchProjectileEvent.\r\n\r\nNow, the event is an AffectEntityEvent: the point is to make the event handle several projectiles at the same time, which is possible in mods (like the Thermal Expansion Multishot enchantment).",
    "head_branch": "api8/launch-projectile-event",
    "is_a_fork": true,
    "comments": [
      "Note: This PR was automatically closed because the `bleeding` branch was deleted. It will need to be reopened to target `api-8` instead.  See https://github.com/SpongePowered/SpongeAPI/pull/1428#issuecomment-539689855."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e79fd9087c4d6d37a4a0",
    "number": 1765,
    "body": "fixes #1257 \r\n\r\nFor API 8 it would be great to move the impl of these to Common.",
    "head_branch": "feature/itemcomparators",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1765 from SpongePowered/feature/itemcomparators\n\nAdds some usefull ItemStack Comparators"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7a0d9087c4d6d37a4a1",
    "number": 1764,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1768)",
    "head_branch": "fix/inventorycommandcapture",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1764 from SpongePowered/fix/inventorycommandcapture\n\ngenerate factory method for base ChangeInventoryEvent"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7a1d9087c4d6d37a4a2",
    "number": 1763,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1765)",
    "head_branch": "feature/kt",
    "is_a_fork": false,
    "comments": [
      "Is an empty keybind text valid? Otherwise we should check this and eventually make the parameter required for the builder already (this is how it seems to be for the other text classes).",
      "Maybe there should be a `CatalogType` for the supported keys? There is also a `key.invalid` key that can be used in cases that the key binding is unknown.",
      "What's the status of this PR? With the way that the Text implementation is currently setup, we can't properly handle mods using `TextComponentKeybind`, since we can't represent it as a `Text`.",
      "LGTM as-is (havn't checked it out and tested locally)\r\n\r\nIs there something blocking this from being merged? @gabizou Your complaint earlier about the JD is just, but I don't think it should hold this up from merging.",
      "I think this will be API 8, if expected to be available then as Text has moved to implementation.",
      "@gabizou note, it's needed for stable as well, due to \"What's the status of this PR? With the way that the Text implementation is currently setup, we can't properly handle mods using TextComponentKeybind, since we can't represent it as a Text.\"\r\n\r\nIt caused aaron various issues.",
      "@kashike Is this complete? Or do you plan to work on this anymore?",
      "Closing as we're going in a slightly different direction in api-8 and won't be adding major changes to api-7 at this point."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7a2d9087c4d6d37a4a3",
    "number": 1762,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1761)\r\n\r\nPlugindevs often forget to override `toContainer` this change forces them to implement `fillContainer`.\r\nThis has also the added benefit of always adding the content-version which could have been missed when not calling `super.toContainer()` in the override\r\n\r\nhttps://github.com/SpongePowered/SpongeAPI/issues/1586\r\n",
    "head_branch": "fillcontainer",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "plugins now have to implement fillContainer for AbstractData this also makes sure the content-version is always added"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e7a3d9087c4d6d37a4a4",
    "number": 1760,
    "body": "[SpongeAPI](https://github.com/SpongePowered/SpongeAPI/pull/1760) | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1755)\r\n\r\nadds `ClickInventoryEvent.Drag.Middle`",
    "head_branch": "fix/middledrag",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1760 from SpongePowered/fix/middledrag\n\nAdd missing MiddleDrag event"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7a4d9087c4d6d37a4a5",
    "number": 1759,
    "body": "**SpongeAPI** | [**event-impl-gen**](https://github.com/SpongePowered/event-impl-gen/pull/5)\r\n\r\nFixes #1526\r\nAdded an annotation `org.spongepowered.api.util.annotation.eventgen.FactoryGenerationProof` to prevent abstract-mean event interfaces from getting a generation method.\r\nYou need to bump the dependency on event-impl-gen manually to see the effects, and I currently cannot test that unfortunately because I don't know how to update this dependency.",
    "head_branch": "fix/event-factory",
    "is_a_fork": true,
    "comments": [
      "`FactoryGenerationProof` isn't a good name IMO. something like `NoFactoryGeneration` is more clear to me.",
      "@simon816 How about `AbstractEvent`? These events do not generate because they mean to be abstract.",
      "Updated again for event impl gen changes.",
      "Superseded by #1977."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7a5d9087c4d6d37a4a6",
    "number": 1758,
    "body": "**SpongeAPI** | [**SpongeCommon**](https://github.com/SpongePowered/SpongeCommon/pull/1752)\r\n\r\nThis also adds a following range attribute modifier to the API to help plugins using the navigator.\r\n\r\nTo make things simple, the pull just exposed the most basic operation that is the most likely frequently used. I hope @Cybermaxke may comment on this so that different path finding systems may find an agreement.\r\n\r\nEdit: added link to spongecommon",
    "head_branch": "feature/pathfinder",
    "is_a_fork": true,
    "comments": [
      "Just a self note, that sponge is currently in a cleanup phase; this feature may be left for review in the future time.",
      "Can't the `followRange` be task specific? And isn't it related to attributes?",
      "@Cybermaxke Nope. It is based on attributes so that it cannot be task specific. Since it's based on attributes, I have both a data key and access (in the agent data) to the calcualted result (in navigator) available.",
      "Note: This PR was automatically closed because the `bleeding` branch was deleted. It will need to be reopened to target `api-8` instead.  See https://github.com/SpongePowered/SpongeAPI/pull/1428#issuecomment-539689855.",
      "Should start a new one after api 8 is in shape."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7a6d9087c4d6d37a4a7",
    "number": 1757,
    "body": "SpongeAPI | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1742)",
    "head_branch": "fix/liquid_break-key",
    "is_a_fork": true,
    "comments": [
      "@Zidane Done."
    ],
    "commit_messages": [
      "Merge pull request #1757 from ImMorpheus/fix/liquid_break-key\n\nAdd LIQUID_BREAK ContextKey"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7a7d9087c4d6d37a4a8",
    "number": 1756,
    "body": "Fixes https://github.com/SpongePowered/SpongeCommon/issues/1113",
    "head_branch": "fix/boolean-coercion",
    "is_a_fork": true,
    "comments": [
      "Any specific reason why now?",
      "@gabizou Ah sorry, to fix this issue - https://github.com/SpongePowered/SpongeCommon/issues/1113"
    ],
    "commit_messages": [
      "Merge pull request #1756 from Meronat/fix/boolean-coercion\n\nAdd support for coercing a byte to a boolean"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7a8d9087c4d6d37a4a9",
    "number": 1755,
    "body": "These are very much needed, given the relative underpoweredness of `TextTemplate`s.",
    "head_branch": "feature/text-replace",
    "is_a_fork": true,
    "comments": [
      "@pie-flavor Is this still Work In Progress? if so reply with `~wip` to mark your issue as Work In Progress or reply with `~qa` to mark it as ready for Quality Assurance, if you wish it to be reviewed / tested by contributors / the community.",
      "Is Text not meant to be imutable: Represents an immutable tree-structure of formatted (text) components. Each instance consists of content and a list of children texts appended after the content of this text. The content of the text is available through one of the subclasses.",
      "Sure, but it's a utility function for something that is inherently difficult to do yourself 100% correctly the first time. \r\n\r\nStrings are immutable too, doesn't stop them having replace, but it's not something you would want to (ab)use all the time.\r\n\r\nMy 2c.",
      "I don't see a problem with it as long as the javadocs make it clear (in both the body and the returns statement) that the method returns a copy of the `Text` object with the specified replacements.",
      "@The-Defman I'm confused - where's the issue? The original text never gets modified.\r\n\r\n@dualspiral I'll add that, though originally I never thought it could be an issue - anyone using Text.replace has inevitably used String.replace which behaves the same way.",
      "Can this be added to the next 7.x release or is that against semver?",
      "No API methods get broken, so 7.x should be a valid target.",
      "Needs to be updated since the text was refactored.",
      "@gabizou This targets API 7",
      "@Cybermaxke you need to change the target branch to stable-7 then",
      "Oh good, the git history got clonked. Is this worth pursuing in its current state? Will there be another API 7 release?",
      "@pie-flavor Yes, please update and rebase",
      "Looks all good from here. ",
      "Maybe `replace(Text, Text)`?",
      "Properly searching for a Text would require remembering the effective formatting of the text in addition to the Text's own formatting, and additionally parsing children, greatly complicating the algorithm. And there wouldn't really be a point in a Text argument that's only ever used via toPlain.",
      "You need to add these methods to API 8."
    ],
    "commit_messages": [
      "Add text replacement methods (#1755)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7a9d9087c4d6d37a4aa",
    "number": 1754,
    "body": "Updates some outdated links and cleans up the notice.",
    "head_branch": "fix/update-readme",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update README for our community as it stands today (#1754)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7aad9087c4d6d37a4ab",
    "number": 1750,
    "body": "[SpongeAPI](https://github.com/SpongePowered/SpongeAPI/pull/1750) | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1731)\r\n\r\nadds `setKeepInventory` and `getKeepInventory` to `DestructEntityEvent.Death`\r\n\r\nThis adds the keepinventory gamerule functionality to a single player.\r\n",
    "head_branch": "feature/keepinventory",
    "is_a_fork": false,
    "comments": [
      "Uh so these methods also existed in `HarvestEntityEvent.TargetPlayer`, what is the difference here?\r\n\r\n**Edit:** Ah https://github.com/SpongePowered/SpongeCommon/issues/1735 "
    ],
    "commit_messages": [
      "keep inventory for players on Death event"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7abd9087c4d6d37a4ac",
    "number": 1749,
    "body": "",
    "head_branch": "fix/remaining-minor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix some remaining minor issues - Closes #1389 (#1749)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e7acd9087c4d6d37a4ad",
    "number": 1748,
    "body": "`ImmutableDatAManipulator` -> `ImmutableDataManipulator`",
    "head_branch": "bleeding",
    "is_a_fork": true,
    "comments": [
      "Probably better suited for https://github.com/SpongePowered/SpongeAPI/issues/1000",
      "Morpheus is correct. I will be address this and the other minor issues soon. Thank you for your contribution though, we appreciate it!"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7add9087c4d6d37a4ae",
    "number": 1747,
    "body": "A 7.1 version of my checkstyle PR without the breaking changes and targeting stable-7 instead of bleeding.",
    "head_branch": "fix/checkstyle-stuff-7",
    "is_a_fork": true,
    "comments": [
      "Will clean this up and get it compiling once I get a chance, hopefully later tonight, then I'll get both the PRs in."
    ],
    "commit_messages": [
      "Fix checkstyle warnings, warnings during compilation, and other cleanup for stable-7 (#1747)\n\n* Update checkstyle for some upstream changes\r\n\r\n* Cleanup TypeTokens class and suppress various checkstyle complaints\r\n\r\n* Cleanup CatalogTypes class\r\n\r\n* Cleanup keys classes\r\n\r\n* Outright remove old enchantment reference in CatalogTypes and add it a suppression for star import\r\n\r\n* Cleanup QueryOperationTypes\r\n\r\n* Cleanup some javadocs of core classes\r\n\r\n* Add suppression for line length for queryoperationtypes\r\n\r\n* Remove unused Keys import\r\n\r\n* Cleanup advancements\r\n\r\n* Cleanup config javadocs\r\n\r\n* Cleanup world package\r\n\r\n* Cleanup tests slightly, will do more when we convert to junit5 eventually\r\n\r\n* Various comment and import fixes\r\n\r\n* Cleanup item package\r\n\r\n* Fix weird comment length error\r\n\r\n* Add some Javadocs to RideableHorse\r\n\r\n* Cleanup event package\r\n\r\n* Cleanup data package\r\n\r\n* Cleanup command package a little, no more checkstyle errorsgit add .\r\n\r\n* Other general cleanup, mostly spelling\r\n\r\n* Unify package info format and add missing ones\r\n\r\n* Streamline private constructors\r\n\r\n* Sort fields\r\n\r\n* No more errors on build\r\n\r\n* Fix checkstyle suppression\r\n\r\n* Remove breaking changes\r\n\r\n* Fix most issues"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7aed9087c4d6d37a4af",
    "number": 1745,
    "body": "Follows the style the rest of Sponge uses better while also providing a more flexible system.\r\n\r\nLooking for some input on the set-up I have so far, then I will flesh out the rest of the API and write the implementation.\r\n\r\n@Cybermaxke Any input here?",
    "head_branch": "feature/game-rules",
    "is_a_fork": true,
    "comments": [
      "Locally the file `GameRule.java` has the right name but Git seems to think the name is `Gamerule.java` :/",
      "If you are going to refactor GameRules I'm expecting that you are going to come up with some sort of sharing context? \r\n\r\ne.g. nether and the_end and modded dimenson-worlds by default on sponge delegate to the overworld gamerules?\r\n\r\nWhere as Sponge worlds can share a 'multiverse'/world that contains the gamerules for a group of dimensions?\r\n\r\nNote: My use of multiverse is just to convey concept, I am utterly aware how much of a Pain in the ass it would be to globally have support for true multiverses separating out inventory, stats, recipes. plugins etc on a Mojang based server.\r\n\r\nI just can't help but think that the concept would be valuable, even if it only see's limited use on SpongeForge / SpongeVanilla. There isn't anything really forcing Lantern to having such limitations.",
      "While I know we're breaking commands and text for API 8 without deprecations, here, I'd argue deprecations serve a purpose. Deprecations will emit a warning on compilers that use the code to point them in the right direction - while we'll really hammer the change in commands when API 8 is out, game rules and smaller, easier to deprecate systems might end up falling by the wayside. We should make sure we are in the mindset of deprecating when we can, not just using major API versions as a reason to break with no consequence.\r\n\r\nThat being said, looking at this, I suspect it's possible for both systems to coexist peacefully with no breaking changes. Do you think you could do that in time for 7.1? If so, maybe that's a route forward - a deprecation in 7.1 with the new methods, removal in 8.",
      "@dualspiral I believe this is doable to an extent, the only problem would be for the events. I could introduce an event with a different name or package that supports the new changes while deprecating the old one.\r\n\r\nHow would you feel about that solution?",
      "@dualspiral I disagree with trying to maintain deprecation policy for the bleeding branch. As we're already doing massive refactors left and right (Text has already changed, Value API is about to change, DataRegistration is partially changing due to values changing, Extent API is 100% rewritten at this point, Scheduling tasks will change as soon as we expose the client in the process, CauseStackManager is getting a rename, some major events are being redone, Inventory API changed, commands are going to be changing), I don't feel it necessary to keep something as simple as game rules deprecated for a version and then break it in a little way afterwards.\r\n\r\nNot to mention that documentation alone for the migration from API 7 to API 8 will be somewhat extensive at that point given the PR's that were used to make all these changes, it'll be easy to show the migration via test plugin changes needed between the various pr's.",
      "@gabizou With the extent of changes since, where before, it was impossible to know with clarity how much we would need to change, sure. Deprecations _do_ serve a purpose and we should still pay mind to their use, but given how much we've changed since this was opened, I see the point.\r\n\r\nDo bear in mind I made that comment 7 months ago, just after 7 was released. Things have changed!",
      "> Do bear in mind I made that comment 7 months ago, just after 7 was released. Things have changed!\r\n\r\nOf course, just resuscitating PR's (having went through I think all the open PR's currently) and making sure their either alive, or relegated for future development/management.",
      "The game rule is already refactored in the api-8 branch, comment on the status PR https://github.com/SpongePowered/SpongeAPI/pull/1995 if there's anything missing."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7afd9087c4d6d37a4b0",
    "number": 1744,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1724) | [SpongeForge](https://github.com/SpongePowered/SpongeForge/pull/1971)",
    "head_branch": "bye-bye-text",
    "is_a_fork": false,
    "comments": [
      "Some related PRs:\r\n\r\nhttps://github.com/SpongePowered/SpongeAPI/pull/1477\r\nhttps://github.com/SpongePowered/SpongeAPI/pull/1634\r\n\r\nMaybe for consideration:\r\n\r\nhttps://github.com/SpongePowered/SpongeAPI/pull/1424"
    ],
    "commit_messages": [
      "Moving all the test classes relating to text out and into SpongeCommon due to the nature of how text works now.\n\nSigned-off-by: Gabriel Harris-Rouquette <gabizou@me.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e7b1d9087c4d6d37a4b1",
    "number": 1743,
    "body": "Accomplishes a few things.\r\n\r\n- Updates the Checkstyle version we were using.\r\n- Merges some of the upstream checkstyle file changes from checkstyle/google\r\n- Fixes a lot of spelling errors\r\n- Adds some missing Javadocs\r\n- Consolidates all of the package info files to one format and adds some missing ones\r\n- Fixes the Javadocs errors on build\r\n- Removes unused imports\r\n- Fixes some minor issues here and there, mostly all relating to formatting\r\n\r\nWe are now closer to following our own style guide. Not completely there yet but we'll get there.\r\n\r\nI tested the changes to a basic extent make sure I didn't break something accidentally. Seemed to go fine.\r\n\r\nI split most of the changes into coherent commits, but one or the two commits didn't get commited fully so some of their changes are in the next commit, and other commits just have general fixes.\r\n\r\nEventually I will come back and cleanup remaining Javadocs even more and add some to places where they are quire needed, such as some properties and the listings of some catalog types.",
    "head_branch": "fix/checkstyle-stuff",
    "is_a_fork": true,
    "comments": [
      "Given the sheer size of this PR, I would like to see an automated report on the API signature changes before and after. \r\n\r\nIf it's largely just checkstyle changes, I would expect there to be no or minimal changes.\r\n\r\nMaybe try using : \r\nhttps://github.com/siom79/japicmp\r\nhttp://clirr.sourceforge.net/\r\nhttps://revapi.org/ \r\nhttps://github.com/lvc/japi-compliance-checker\r\n???",
      "Awesome! There still seem to be 3 minor checkstyle warnings: https://travis-ci.org/SpongePowered/SpongeAPI/jobs/331403350#L605-L607, can you fix these too? :)",
      "@Minecrell Done, I just had an uppercase J instead of a lowercase...",
      "For what it's worth, Guava uses JDiff http://google.github.io/guava/releases/23.0/api/diffs/changes/pkg_com.google.common.collect.html\r\n\r\nhttps://sourceforge.net/projects/javadiff/",
      "@ryantheleach Here, I generated this report. There are a few breaking changes, but I do not believe they will affect many if anyone at all. I intend to leave most of these changes in bleeding anyway.\r\n\r\nI used japicmp.\r\n\r\n[output.zip](https://github.com/SpongePowered/SpongeAPI/files/1653866/output.zip)\r\n\r\n**Edit:** Actually here, this one will probably be easier to read. This shows only the changes:\r\n\r\n[output-changes.zip](https://github.com/SpongePowered/SpongeAPI/files/1653924/output-changes.zip)\r\n\r\nThis is actually pretty cool, simple to use, and would be cool to include with our API builds in some fashion. At least for the major releases.",
      "When I do merge this, should I squash the commits or no? If I don't it will be easier to track down changes as well as cherry-pick any changes if that's desired.",
      "I wonder considering the small number of incompatible changes, if it's better off getting the bulk of this into stable, and only having the incompatible changes in bleeding?\r\n\r\nIf I realized you were targeting bleeding from the start, I wouldn't have asked for the report, sorry.",
      "@ryantheleach Thinking about it more. I will branch off from this, creating a branch which targets stable and removes the breaking changes. I will also fix any merge conflicts that arise from the target differences.",
      "You can find the 7.1/stable-7 version of this PR here: https://github.com/SpongePowered/SpongeAPI/pull/1747"
    ],
    "commit_messages": [
      "Fixes check style errors alongside some other minor cleanup for bleeding (#1743)\n\n* Update checkstyle for some upstream changes\r\n\r\n* Cleanup TypeTokens class and suppress various checkstyle complaints\r\n\r\n* Cleanup CatalogTypes class\r\n\r\n* Cleanup keys classes\r\n\r\n* Outright remove old enchantment reference in CatalogTypes and add it a suppression for star import\r\n\r\n* Cleanup QueryOperationTypes\r\n\r\n* Cleanup some javadocs of core classes\r\n\r\n* Add suppression for line length for queryoperationtypes\r\n\r\n* Remove unused Keys import\r\n\r\n* Cleanup advancements\r\n\r\n* Cleanup config javadocs\r\n\r\n* Cleanup world package\r\n\r\n* Cleanup tests slightly, will do more when we convert to junit5 eventually\r\n\r\n* Various comment and import fixes\r\n\r\n* Cleanup item package\r\n\r\n* Fix weird comment length error\r\n\r\n* Add some Javadocs to RideableHorse\r\n\r\n* Cleanup event package\r\n\r\n* Cleanup data package\r\n\r\n* Cleanup command package a little, no more checkstyle errorsgit add .\r\n\r\n* Other general cleanup, mostly spelling\r\n\r\n* Unify package info format and add missing ones\r\n\r\n* Streamline private constructors\r\n\r\n* Sort fields\r\n\r\n* No more errors on build\r\n\r\n* Fix checkstyle suppression"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e7b2d9087c4d6d37a4b2",
    "number": 1742,
    "body": "I separated this from https://github.com/SpongePowered/SpongeAPI/pull/1704 because it's getting quite big and getting a separate conversation going for redesigning the statistics API.\r\n\r\nGoals:\r\n- Update for 1.13 statistic names and categories (previously types)\r\n- Remove statistic methods from the game registry, reworked into `CatalogStatisticCategory`\r\n- Remove `ItemStatistic`, `BlockStatistic` and `EntityStatistic`, which got merged into `CatalogStatistic`\r\n\r\nTODO:\r\n- [ ] I don't like the names `CatalogStatistic` and `CatalogStatisticCategory`, suggestions?\r\n- [ ] Update `Statistics` catalog class with proper names.",
    "head_branch": "1.13-statistics",
    "is_a_fork": true,
    "comments": [
      "@windy1 Was the last one to touch the statistic API and implementation to any large extent. If he has the time/chance would be nice to hear his input.",
      "This is carrying on the old broken division of StatisticTypes.\r\nVanilla has only 4 \"StatisticTypes\": BLOCKS, GENERAL, ITEMS, MOBS.\r\n\r\nNote: in vanilla some Statistics are used for multiple StatisticTypes: DROPPED, CRAFTED, ecc.\r\n\r\nSince this is an API pr, there's not much point in talking about the implementation but here's what I came up so far before Meronat pointed me to this issue.\r\nhttps://github.com/ImMorpheus/SpongeAPI/commit/25634a66471e298d0800453cdd420e50ae3a7bb9\r\nhttps://github.com/ImMorpheus/SpongeCommon/commit/c00518c0591930395e0b01ac8e2b48b42b67bcde\r\n",
      "@ImMorpheus I based the PR on the protocol changes:\r\nhttp://wiki.vg/Pre-release_protocol#Statistics\r\nAnd a category generates statistics based on all the catalog type of specific type, for example within the `mined` category are mined statistics for every block type in the game.\r\nThe custom category is different because it's not attached to catalog types.",
      "Fair enough. I based my comment on mojang code and the entries in the en_us.lang (broken getTranslation() was the reason I started working on statistics).\r\n\r\nI'll wait the implementation and see how this will turn out.",
      "Maybe we can simplify this a little bit by dropping the `CatalogStatisticType` class and just and add an `Optional<T> getReferencedCatalog()` (or `Data`) to Statistic.  That way we won't have issues with conflicting names either.\r\n\r\nThen you could extract the targeted type(class) via the `StaticisticCategory` and the actually targeted entry via the statistic.\r\n\r\nThe only drawback of this is that supporting more specific statistics like \"Killed Dragons with a Stick\" won't be able to present all its data.\r\n\r\nIn addition to that I'm a little reluctant to put the catalog type in a generic category. Especially since there is no real type for `CUSTOM` and `Statistic` is just a placeholder for \"nothing\". At least allow everything including none Catalogs. That way we could just write `Void` (or `Tuple`) in there.",
      "Updated and merged into 1.13"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7b3d9087c4d6d37a4b3",
    "number": 1740,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1710)\r\n\r\nNecessary for https://github.com/SpongePowered/SpongeCommon/issues/1282",
    "head_branch": "fix/issue-SC1282",
    "is_a_fork": true,
    "comments": [
      "Is removing the default on this interface a break that prevents it to be on API 7.1? \r\n\r\nBecause my recommendation would be to remove the default, and remove the implementation from the API. But it might need to be delayed to API 8. ",
      "Going to close this as the API change is rendered unnecessary as the implementation can override the method itself. I'd rather break the API for bleeding to include a difference of `LastPlayed` versus `LastJoined` and being able to differentiate whether a player has played before if the `LastJoined` is the same as `FirstJoined`."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7b4d9087c4d6d37a4b4",
    "number": 1737,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1702)\r\n\r\nAdds a basic elytra data which can be expanded later on as this part of it is a common request.\r\n\r\nWith this API, you can get whether a player is flying elytra style or not. You can also stop them from flying elytra style with `player.offer(Keys.IS_ELYTRA_FLYING, false)` and have them start elytra flying if they are currently falling and have an elytra on with `player.offer(Keys.IS_ELYTRA_FLYING, true)`.\r\n\r\nMore capability will be introduced later down the road, but this is the most common request and was more easily done.\r\n\r\nFixes https://github.com/SpongePowered/SpongeAPI/issues/1618 and various Discord requests\r\n\r\nWorks towards https://github.com/SpongePowered/SpongeAPI/issues/1663",
    "head_branch": "feature/elytra-data",
    "is_a_fork": false,
    "comments": [
      "@Meronat \r\n\r\nSquash this into one commit for me please."
    ],
    "commit_messages": [
      "Merge pull request #1737 from SpongePowered/feature/elytra-data\n\nAdds basic elytra data"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7b5d9087c4d6d37a4b5",
    "number": 1736,
    "body": "This should be handled by `EventContextKeys.DISMOUNT_TYPE` now.",
    "head_branch": "fix/deprecate-dismount-type",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1736 from Meronat/fix/deprecate-dismount-type\n\nDeprecate dismount type for event context keys"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7b6d9087c4d6d37a4b6",
    "number": 1730,
    "body": "[SpongeAPI](https://github.com/SpongePowered/SpongeAPI/pull/1730) | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1690)\r\n\r\nAdds CraftItemEvent Preview and Craft.\r\n\r\n`CraftItemEvent.Preview` is fired every time the recipe is changed in the CraftingGrid.\r\nYou can set another item as the preview which will then later be crafted instead. `event.getPreview().setCustom(item)`\r\nCanceling the Preview Event sets the outputslot to air as if the recipe did not exist.\r\n\r\n`CraftItemEvent.Craft` is fired for every stack taken out of the output slot.\r\n`event.getCrafted()` provides you with the actual crafted item.\r\nCanceling the Craft Event prevents taking items out of the output slot.\r\n\r\nLike with other inventory events you can still modify all slot transactions to your liking.\r\n\r\n\r\n  \r\n  \r\n  ",
    "head_branch": "feature/craftevent",
    "is_a_fork": false,
    "comments": [
      "https://github.com/SpongePowered/SpongeAPI/pull/1730/files/f7926cdbc4a389b8eb8c470106c31d9c6a0ffa70..0e4545da60ea9c411bd91b42da5841d369e2b375 Sorry for wasting your time faith, it would have been cool.",
      "The real question is why you have to mock the slot transaction if it's supposed to be final?",
      "He wasn't, the automated tests for the events was attempting to mock it or something."
    ],
    "commit_messages": [
      "add CraftItemEvents"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7b7d9087c4d6d37a4b7",
    "number": 1729,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1674) \r\n\r\nAdds need cooldown events which I should have added before and modifies the return types to reflect that.",
    "head_branch": "feature/cooldown-events",
    "is_a_fork": true,
    "comments": [
      "@gabizou I would like to get this in before the API 7 close tomorrow due to some of the method signatures changing. "
    ],
    "commit_messages": [
      "Merge pull request #1729 from Meronat/feature/cooldown-events\n\nAdd cooldown events"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7b8d9087c4d6d37a4b8",
    "number": 1728,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1670)\r\nThis is to supersede #1695 in some aspects to make it more functional to allow plugins to isolate specific key event listeners. The implementation of the event is also directing the flow of this being used.",
    "head_branch": "feature/change-value-event",
    "is_a_fork": false,
    "comments": [
      "Could the `ChangeDataHolderEvent` be renamed to just `DataHolderEvent` and get a generic type `H` which represents the holder type of the event. The event can extend `GenericEvent` later when it is implemented, but the generic holder type is still useful because you don't need the generic event when registering the listener in the `Key`."
    ],
    "commit_messages": [
      "Minor cleanup and starting the addition of key based event listener registration for ChangeValueEvent implementation.\n\nSigned-off-by: Gabriel Harris-Rouquette <gabizou@me.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7b9d9087c4d6d37a4b9",
    "number": 1724,
    "body": "Doesn't have any place being implemented in the api, could find a new home in a cookbook plugin.",
    "head_branch": "bye-skylands",
    "is_a_fork": false,
    "comments": [
      "Most likely will remove in API 8 due to the high chance no one is using this. "
    ],
    "commit_messages": [
      "Merge pull request #1724 from SpongePowered/bye-skylands\n\nDeprecate skylands generator"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7bad9087c4d6d37a4ba",
    "number": 1723,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1666)\r\n\r\nSponge uses an interface and a separate implementing class for its `DataManipulator`s, and a few plugin developers have been [trying to use that model](https://forums.spongepowered.org/t/custom-data-not-working/21832?u=jbyoshi). However, `DataRegistration` doesn't allow multiple classes to be registered to it. This PR adds that option. (However, it remains optional for any plugins that don't currently use it, or don't want to use it.)",
    "head_branch": "plugin-datamanipulator-implementation",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Allow plugins to use a separate implementation class for custom data."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7bbd9087c4d6d37a4bb",
    "number": 1722,
    "body": "[SpongeAPI](https://github.com/SpongePowered/SpongeAPI/pull/1722) | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1664)\r\n\r\nAdds an event for swapping inhand - offhand items.",
    "head_branch": "feature/swaphandevent",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "add SwapHand event"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7bcd9087c4d6d37a4bc",
    "number": 1720,
    "body": "Eliminates some implementation detail in `Key`s and how they are used. Allows for some in depth registration to make an indexer for finding keys by plugin as they are registered.",
    "head_branch": "refactor/key-factory",
    "is_a_fork": false,
    "comments": [
      "Will the deprecated `KeyFactory` methods be rewritten to delegate to `Key.Builder`?",
      "I believe the whole class is going to be removed."
    ],
    "commit_messages": [
      "Make a Key builder instead of using a factory. New builder allows registration according to plugin containers.\n\nSigned-off-by: Gabriel Harris-Rouquette <gabizou@me.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7bdd9087c4d6d37a4bd",
    "number": 1718,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1656)\r\n\r\nOne of the long standing issues with the Command API is that subcommands don't give useful feedback if a command fails. The current implementation of the command system is difficult to solve this effectively with - this is a best effort. It isn't breaking, but in order to activate behaviour where a subcommand failing gives meaningful usage requires `childArgumentParseExceptionFallback` on the CommandSpec builder to be set to `false`. It defaults to `true`, the current behaviour.\r\n\r\nI felt it was better to propose this fix for API 7, even though #1587 will completely eclipse this in API 8. It gives devlopers the choice on how to handle their subcommands now. It honestly feels a little hacky, but it works. In theory, there is nothing stopping this going into API 5 and 6 either. Note that any plugin that doesn't use this method in the builder will get the old behaviour, so the change isn't breaking API wise or behaviour wise, plugins will have to update to use this new behaviour - there are some plugins out there, no doubt, that use the fallback as it is now.\r\n\r\nComments are welcome on naming (it's not my strong suit). Test plugin included in Common, some unit tests in API.\r\n\r\nFixes #1165, fixes #1272, fixes #1542, fixes #1647",
    "head_branch": "feature/subcommand-fallback",
    "is_a_fork": false,
    "comments": [
      "I'll merge this tomorrow if there are no late objections or naming suggestions. Would do it tonight, but other things are currently on my plate."
    ],
    "commit_messages": [
      "Modify child command logic to allow for meaningful usage\n\nOne of the long standing issues with the Command API is that subcommands don't give useful feedback if a command fails. The current implementation of the command system is difficult to solve this effectively with - this is a best effort. It isn't breaking, but in order to activate behaviour where a subcommand failing gives meaningful usage requires \"childArgumentParseExceptionFallback\" on the CommandSpec builder to be false. It defaults to true, the current behaviour.\n\nAny plugin that doesn't use this method in the builder will get the old behaviour.\n\nFixes #1165, fixes #1272, fixes #1542, fixes #1647"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7bed9087c4d6d37a4be",
    "number": 1717,
    "body": "**API** | [Common](https://github.com/SpongePowered/SpongeCommon/pull/1648)\r\n\r\n@gabizou ",
    "head_branch": "block-change-flags",
    "is_a_fork": true,
    "comments": [
      "Can we also add some Javadocs to the `BlockChangeFlags` fields? While the names are fairly indicative of what they do, some may benefit from better explanations. ",
      "@gabizou I updated this PR for the changes you made, this now just removes the `orFlag` and `exclusiveOrFlag` methods and added some docs to the cataloged block change flags."
    ],
    "commit_messages": [
      "Improved the BlockChangeFlags. (#1717)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7bfd9087c4d6d37a4bf",
    "number": 1716,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1643)\r\n\r\nThis makes changes to the API for implementing `DamageableData`. \r\n\r\nI need a lot of feedback on this, especially on turning `Living` to `EntitySnapshot`. I believe it does have to be changed but this may not be the best choice, possibly simply `UUID` is better.\r\n\r\nMore review is needed in the implementation though, as I wasn't exactly sure the best way to do everything. For example, I followed the old implemented fashion of `Living#lastDamage` where it would be empty if the `lastAttacker` was empty as well. Also I was not 100% on the various `toContainer` and `fill` methods.\r\n\r\nTo-do:\r\n\r\n- [x] Clean up changes\r\n\r\n- [x] Create a test plugin\r\n\r\n- [x] Test changes thoroughly ",
    "head_branch": "feature/damageable-data",
    "is_a_fork": true,
    "comments": [
      "So Minecraft resets the `revengeTarget` or in our case `LAST_ATTACKER` to null every 100 ticks, so this data is really only present for 5 seconds after it occurs. I have documented this in the API, but am looking for feedback if it should be kept longer ourselves. Since we use `EntitySnapshot` or could use `UUID` instead we could store it ourselves separately so we can keep it longer than 5 seconds(until the next attacker really) if that is the desired functionality. \r\n\r\nIf we went this route, I think adding the `Instant` they were last attacked would be helpful as well.",
      "How does it track the every 100 ticks? just tracks the entity life span and mod 100?\r\n\r\nI think we should only expose the instant if there is an instant recorded, until someone requests it I'm wary of feature creep where someone could (in a theoretical Utopian Sponge that has perfect perf characteristics) listen for the event that's fired when this data changes, and cancel it or modify it how they like.",
      "@ryantheleach \r\n\r\n```java\r\nif (this.revengeTarget != null)\r\n{\r\n    if (!this.revengeTarget.isEntityAlive())\r\n    {\r\n        this.setRevengeTarget((EntityLivingBase)null);\r\n    }\r\n    else if (this.ticksExisted - this.revengeTimer > 100)\r\n    {\r\n    this.setRevengeTarget((EntityLivingBase)null);\r\n    }\r\n}\r\n```",
      "Yeah, I'd expose the revenge timer, as an 'instant'(long) of the world time, as opposed to an Instant that represents real world time.",
      "@ryantheleach Hmm maybe I'm concerned that's very implemention specific though. I'd like to hear some other's opinions as well. \r\n\r\nHow do you feel about idea of storing the entity snapshot so we can expose this information for longer than 5 seconds? That's my main concern. ",
      "I'd be more interested in a UUID or entity reference, I think we can quickly fall into the trap of having too many EntitySnapshots in Sponge, they arn't the most efficient things.",
      "@ryantheleach If we keep it in its current state of returning within only the 5 seconds Minecraft allows living would work fine, since we can just return empty if the entity is dead or removed. "
    ],
    "commit_messages": [
      "Add note for how long data is present"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7c0d9087c4d6d37a4c0",
    "number": 1715,
    "body": "This is a PR as preparation for 1.13, this system allows you to query for specific properties/collections of blocks and items. For example, you can query for all the blocks that are dyed blue. More info will follow.\r\n\r\nRelated to:\r\nhttps://github.com/SpongePowered/SpongeAPI/issues/1667\r\nBlocked by: https://github.com/SpongePowered/SpongeAPI/pull/1871\r\n\r\n### Features?\r\n- Query ItemTypes, BlockTypes, ItemStacks based on specific varieties/variants.\r\n```java\r\n// Get all the wool item types\r\nVariantCollection<ItemType> woolItems = VariantCollections.ITEMS.query(VarietyQuery.builder()\r\n        .variety(Varieties.WOOL)\r\n        .build());\r\n// OR\r\nwoolItems = VariantCollections.ITEMS.query(Varieties.WOOL);\r\n\r\n// Get all the wool items that aren't blue or light blue dyed\r\nVariantCollection<ItemType> nonBlueWoolItems = VariantCollections.ITEMS.query(VarietyQuery.builder()\r\n        .variety(Varieties.WOOL)\r\n        .property(new DyeColorProperty(DyeColors.BLUE, Property.Operator.NOTEQUAL))\r\n        .property(new DyeColorProperty(DyeColors.LIGHT_BLUE, Property.Operator.NOTEQUAL))\r\n        .build());\r\n```\r\n- Transform ItemTypes, BlockTypes based on applicable properties.\r\n```java\r\nItemType someShulkerBox = ItemTypes.WHITE_SHULKER_BOX;\r\n// Want a other color of shulker box, without the need to query?\r\nsomeShulkerBox = someShulkerBox.transformWith(new DyeColorProperty(DyeColors.BLUE)).get();\r\n```\r\n\r\n### Names?\r\nPlease give some input on them, we currently have the following possible options:\r\n\r\nVarieties:\r\n- VarietyCollection\r\n- VarietyCollections\r\n- Variety\r\n- Varieties\r\n- VarietyQueryable\r\n- VarietyQuery\r\n- VarietyQueryEntry \r\n\r\nOR\r\n\r\nVariants:\r\n- VariantCollection\r\n- VariantCollections\r\n- Variant\r\n- Variants\r\n- VariantQueryable\r\n- VariantQuery\r\n- VariantQueryEntry \r\n\r\nOTHER:\r\n\r\nIndependent:\r\n- MatchOperator\r\n\r\nTODO:\r\n- [ ] Add variant matcher\r\n\r\n@gabizou ",
    "head_branch": "feature/varieties",
    "is_a_fork": true,
    "comments": [
      "@Cybermaxke I'd like to see some form of serializable variant matcher.\r\n\r\nAdditionally, does this have anything to do with the 'tags' as added by Mojang in 1.13?",
      "@ryantheleach The tags will be integrated in the implementation. I will add a variant matcher on my todo list.",
      "> Additionally, does this have anything to do with the 'tags' as added by Mojang in 1.13?\r\n\r\n\r\n@ryantheleach It's 100% to match exposing the tag system.",
      "If this is meant to match exposing the tag system, will tags in data packs still be accessible in some form directly?",
      "> If this is meant to match exposing the tag system, will tags in data packs still be accessible in some form directly?\r\n\r\nNot sure how data packs will be supported on the server, there's a few things currently in development for initial 1.13 development, but this is likely pending some changes from forge to verify client support.",
      "I just stumbled over this whole variant issue and thought I might add my 5ct on the latest issue.\r\n\r\nHow about something similar to Forges OreDict entries. (tho I'm not the biggest fan of OreDict).\r\nReason being players will always talk about stairs, ingots, blocks, carpet, ...\r\nFrom my experience with OreDict you'd need 3 properties; Material, Shape and Variant to describe things in Minecraft.\r\ningotIron, woodStairs, treatedWoosSticks to name examples.\r\n\r\nThe problem with OreDict serialization is that some mods use camelcase to concatinate words, e.g. an ingot of star metal might become ingotStarMetal.\r\n\r\nI would also like to have an option to go from an ItemType to material, shape and/or variant, in case you don't care about stuff like color for an Item.",
      "I thought that OreDict was going to be replaced by the Tags system?",
      "Oh, I didn't know that. Last time I played with modding in forge was some time ago.",
      "Will this support the 1.14 addition of entity tags?",
      "Note: This PR was automatically closed because the `bleeding` branch was deleted. It will need to be reopened to target `api-8` instead.  See https://github.com/SpongePowered/SpongeAPI/pull/1428#issuecomment-539689855."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7c1d9087c4d6d37a4c1",
    "number": 1713,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1636)\r\n\r\nAlso makes it less focused on vindicators in-case other mobs add johnny functionality later on or another implementation does.",
    "head_branch": "feature/johnny-data",
    "is_a_fork": true,
    "comments": [
      "![here's johnny](https://i.ytimg.com/vi/d-ABIIZV3vA/maxresdefault.jpg)",
      "Johnny is ready to join bleeding if no one has any feedback on the API or implementation."
    ],
    "commit_messages": [
      "Add JohnnyData (#1713)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7c2d9087c4d6d37a4c2",
    "number": 1712,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1635)\r\nThis used to be an enum, now it isn't. This also eliminates the implementation detail of the various bitwise flags that Minecraft uses.\r\n\r\nWill elaborate further in the morning or something tomorrow.",
    "head_branch": "refactor/block-change-flags",
    "is_a_fork": false,
    "comments": [
      "Can you add an `inverse` for flags?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7c3d9087c4d6d37a4c3",
    "number": 1711,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1630)\r\n\r\nFixes \"criteria\" spelling - #1669 \r\n\r\nThis is a minor spelling cleanup of a package name so it is breaking. So we have to decide if we want to make this change and whether we should make it now or in API 8. Since API 7 is not stable yet, may be best to make the change now to get it over with. ",
    "head_branch": "fix/criteria-spelling",
    "is_a_fork": true,
    "comments": [
      "Maybe this should be change to `criterion` since we are going with singular package names?",
      "Not really, we have a package called `data` which is a plural (the singular form is `datum`)",
      "@Cybermaxke Now, I think this is for sponge leaders to decide.",
      "@Zidane I think this should merge ni API 8, as commands breaking will fall in line with this change.",
      "Will handle this with a direct commit later on."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7c4d9087c4d6d37a4c4",
    "number": 1710,
    "body": "[SpongeAPI](https://github.com/SpongePowered/SpongeAPI/pull/1710) | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1585) | [SpongeForge](https://github.com/SpongePowered/SpongeForge/pull/1833)\r\n\r\n\r\nA crafting inventory is not a grid but contains one.\r\n",
    "head_branch": "refactor/inventory",
    "is_a_fork": false,
    "comments": [
      "@Faithcaio Could you also fix the following issue in this PR, it's related to `Container` methods still using `Cause`s: https://github.com/SpongePowered/SpongeAPI/issues/1665",
      "@Cybermaxke it seems they dont even have an impl yet.\r\nSame for `getViewers hasViewers canInteractWith`",
      "The biggest problem with Inventories in my opinion is that there is no `Slot Inventory.getNthSlot(int n)`.\r\nThe InventoryBuilder returns a SpongeCommon CustomIventory, that has getter and setter for Slots (`getStackInSlot` and `setInventorySlotContents`) , but those are not exposed to the API, so I'm using reflection and a signature scanner to use `setInventorySlotContents` for my menus. @codeHusky seems to be using [the iterator and a counter variable when setting items at a specific slot](https://github.com/codeHusky/HuskyCrates-Sponge/blob/d1538d184af61890dae46efe511d1981145da32a/src/main/java/com/codehusky/huskycrates/crate/views/SpinnerCrateView.java#L94)\r\nFor me it is kinds important to be able to directly access slots in some way, and I think if makes writing menus with toggles (click at slot x, item at slot x e.g. changes color) way easier.\r\n\r\nThinking about it: would it be possible/viable to add something like `Inventory.getSlot(int... position)`? I'm thinking about non-grid-inventories being accessed as kind of grid inventories like this\r\n```Java\r\npublic Inventory Inventory.getInventory(int... position) {\r\n  Inventory target = this;\r\n  int n=0;\r\n  for (int index : position) {\r\n    if (index < 0 || index >= target.capacity())\r\n      throw IllegalArgumentException(\"Index \"+n+\" (\"+index+)\" was out of inventory bounds (max: \"+target.capacity()+\")\");\r\n    if (target.capacity()<=1) //Slot or Empty\r\n      throw IllegalArgumentException(\"Position argument has more depth than this inventory\");\r\n    // go to 'index' sub-inventory:\r\n    Iterator<Inventory> it = iterator(); for (int i=0; i<index; i++) target = it.next();\r\n    n++;\r\n  }\r\n  return target;\r\n}\r\n```\r\nFor example in the MainPlayerInventory this would allow access to a slot in the GridInventory with `gridInventory.getInventory(row, slot)` as convenience method.\r\n\r\n",
      "@Mumfrey ^?\r\n\r\nThats what query is for.\r\nBut `#query(SlotIndex.of(index))` (SlotPos for x/y coordinate) returns ALL slots that are at that SlotIndex including those from rows, columns etc.\r\n\r\nYou can also query for `OrderedInventory.class` or `GridInventory.class`\r\nand then after an instanceof check use the methods on there. `#getSlot(index)` and `#getSlot(x, y)`\r\n\r\nAnyways this would have to be another PR.",
      "Oh, didn't know query accepts a SlotIndex instance as there's now overlaod with SlotIndex and the javadocs for query(Object...) don't mention it either as far as I can see 🤔 ",
      "SlotIndex etc. are InventoryProperties\r\n`#query(InventoryProperty<?, ?>... props)`"
    ],
    "commit_messages": [
      "remove cause from Container open/close"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7c5d9087c4d6d37a4c5",
    "number": 1709,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1629) \r\n\r\nEssentially adds a chorus fruit teleport type, to see if a teleport was caused by a player eating a chorus fruit.\r\n\r\nTested with: \r\n\r\n```Java\r\n@Listener\r\npublic void onTeleport(MoveEntityEvent.Teleport event, @Root Player player) {\r\n    event.getContext().get(EventContextKeys.TELEPORT_TYPE).ifPresent(t -> player.sendMessage(Text.of(TextColors.GOLD, \"TeleportType: \", TextColors.GRAY, t.getId())));\r\n}\r\n```",
    "head_branch": "feature/chorus-fruit-teleport-type",
    "is_a_fork": true,
    "comments": [
      "Would probably be better to name it `ItemTeleport`? That would cover mods that add items that teleport you.",
      "I believe changing it to ItemTeleport would make users expect enderpearls to be covered by it, even if it's not necessarily true (ender pearls are projectiles, and have different semantics). \r\n\r\nIf it turns into a generic itemTeleport, would it be possible to include the snapshot of the enderpearl or something in the cause, noting that this would be a royal pain in the butt, as you would need to attach it as data to the enderpearl projectile.\r\n\r\nBut then what about modded items...",
      "@ryantheleach I have some work locally that supports both but it's a bit iffy and I've found some other issues with teleport cause/context tracking I'm trying to work through. ",
      "Will replace this with a more generic item teleport type when I get a chance."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7c6d9087c4d6d37a4c6",
    "number": 1708,
    "body": "Adds fastutil as a dependency, since it is a library that Minecraft itself includes the full version of, we use it in the implementation, and many plugin developers will probably find use in it as well. Sure they could use it expecting Minecraft to have it, but that causes issues as there is then no guarantee a Sponge implementation includes a complete, compatible version of the library, or even one at all.\r\n\r\nCloses https://github.com/SpongePowered/SpongeAPI/issues/1590",
    "head_branch": "feature/add-fastutil",
    "is_a_fork": true,
    "comments": [
      "is there anything in the api that can be optimized by this for now? boxing type collections, etc...",
      "I'm not keen on having it as a requirement since it would require other implementations to now include a 17 Mb library that otherwise would not have been required to have, thereby increasing the size of downloads often times by at least double (in comparison with sponge forge's jars).",
      "I am siding with @gabizou on this one. Including libraries isn't so cut and dry; the stuff we include currently are mostly \"common sense\" ones in the API (Apache Commons/Guava could be debated but they remain extremely useful). Fastutil does not fall under this \"Its just useful for about anyone\" as it is too specific in it being for faster collections. I very well can't see ALL implementations of Sponge outright using it just-because."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7c7d9087c4d6d37a4c7",
    "number": 1706,
    "body": "I'm assuming the client's resource manager was reused for the server. Likely more edits will come when I have access to deobfuscated code.",
    "head_branch": "feature/packs",
    "is_a_fork": true,
    "comments": [
      "should we merge resource path with catalog key?",
      "If we do, we should settle on a better suited name. It doesn't make sense to get a `Resource` from a `CatalogKey`, and neither does a `CatalogType` with `ResourcePath`\r\n\r\nThough they are slightly different. While both have a namespace and value, the resource path can contain a forward slash `/` and dot `.`. If anything, it should have a common parent-interface indicating it can have a namespace.",
      "Something like `BinomialName` for a parent interface?",
      "I was thinking it would include the word namespace. Something like `NamespacedIdentifier`",
      "`SpacedName`",
      "I don't like that this outright deprecates the Asset API.\r\n\r\nThe goals of the Asset API were to simplify the process for new programmers to extract resources from their jar files, to their plugin directories on disk, usually used for extracting default or example configurations.\r\n\r\nIf this is to happen, I'd like at least a little attention paid to giving those people a clear migration path, and maybe some docs to go along with it to explain exactly what this is and how it works.\r\n  \r\n\r\nI also think the name DataPack is pretty close to the Mojang defined term.\r\n\r\nIf this isn't intended to be directly compatible with that, or interact with that in some way then it's poorly named.\r\n\r\nBut maybe I'm just not following why the name change is needed?",
      "Please keep the `ResourcePath` separate from the `CatalogId`. They represent two different things and shouldn't be merged as one. They also have different contraints.",
      "Can we move datapacks to each world, given that is how they are handled on both client and servers? Current structure won't work for clients.",
      "@liach Nope. Resources are not per-world. There are only 2 instances of `SimpleReloadableResourceManager` in 1.13. They are located in `Minecraft.resourceManager` and `MinecraftServer.resourceManager`",
      "Resources are basically per save file, on the server there is only one. On the client its the one when you load a world (including all dimensions).",
      "@killjoy1221 However, data packs are not loaded as resources; they are never included in the resource manager. They are simply associated with worlds.",
      "I haven't looked too closely on how datapacks work yet, but I'm pretty sure the world will be added as a data pack, which can also be removed. I'm going to have to study the code to figure how how everything works with `PackFinder` and `ResourcePackList`",
      "@killjoy1221 no, data packs can be in integrated servers",
      "@killjoy1221 Can you target 1.14 instead?",
      "@killjoy1221 Can you rebase on top of `api-8`?",
      "InputStream leakage is covered by `Resource#close()` and should be handled by the caller.",
      "@killjoy1221 Need this finished up soon else it won't make it for API 8.0.0",
      "#2135"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7c8d9087c4d6d37a4c8",
    "number": 1705,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1622)\r\n\r\nThis is a breaking change and people likely spawn entities quite a bit, so I would like discussion on whether or not we should make this change during API 7 or API 8 and whether all of this is even necessary. \r\n\r\nI am also looking for heavy review on the implementation changes in SpongeCommon.\r\n\r\nCloses https://github.com/SpongePowered/SpongeAPI/issues/1701\r\n",
    "head_branch": "feature/spawn-entity",
    "is_a_fork": true,
    "comments": [
      "Should we return some sort of action results (true/false, tristate, transactionresult) to indicate for each entity better? \r\n\r\n> From https://github.com/SpongePowered/SpongeAPI/issues/1701#issuecomment-347379496\r\n",
      "@liach I am not sure that is worth it as it simply complicates the result beyond a majority of use cases.",
      "I'll get to merging this after #1554 is merged."
    ],
    "commit_messages": [
      "Merge pull request #1705 from Meronat/feature/spawn-entity\n\nChange entity spawning return types, breaking change - Fixes #1701"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7c9d9087c4d6d37a4c9",
    "number": 1704,
    "body": "Very WIP, I am opening this PR now to start a discussion on what can be reused/needs to be removed. Also designing a system to easily get variants of certain block types. For example getting a slab with the material oak.\r\n\r\nRelated to:\r\nhttps://github.com/SpongePowered/SpongeAPI/pull/1715 - The variant system\r\nhttps://github.com/LanternPowered/LanternServer/pull/48\r\nhttps://github.com/SpongePowered/SpongeAPI/pull/1742\r\n\r\nWe have to decide what to do with the following data types, could it be reused for the variant system or should be deleted. I already removed a few types, feel free to comment if you don't agree with me removing them.\r\n\r\n#### Modify/remove:\r\n\r\nCatalog types and data:\r\n- [x] BrickTypes - _Removed_\r\n- [x] BrickData - _Removed_\r\n- [x] CoalTypes - _Removed_\r\n- [x] CoalData - _Removed_\r\n- [x] CookedFishes - _Removed_\r\n- [x] CookedFishData - _Removed_\r\n- [x] DirtTypes - _Removed_\r\n- [x] DirtData - _Removed_\r\n- [x] DisguisedBlockTypes - _Removed_\r\n- [x] DisguisedBlockData - _Removed_\r\n- [x] DoublePlantTypes - _Removed_\r\n- [x] DoublePlantData - _Removed_\r\n- [x] DyeColors - _Still used by other data types, used in variant system_\r\n- [x] DyeableData - _Still used by other data types_\r\n- [x] Fishes - _Removed_\r\n- [x] FishData - _Removed_\r\n- [x] LogAxes _- Removed, bark got separated from log, log uses now the Axis_\r\n- [x] LogAxisData - _Removed_\r\n- [x] GoldenApples - _Removed_\r\n- [x] GoldenAppleData - _Removed_\r\n- [x] PistonTypes - _Removed_\r\n- [x] PistonData - _Removed_\r\n- [x] PlantTypes - _Removed_\r\n- [x] PlantData - _Removed_\r\n- [x] PrismarineTypes - _Removed_\r\n- [x] PrismarineData - _Removed_\r\n- [x] SandstoneTypes - _Removed_\r\n- [x] SandstoneData - _Removed_\r\n- [x] SandTypes - _Removed_\r\n- [x] SandData - _Removed_\r\n- [x] ShrubTypes - _Removed_\r\n- [x] ShrubData - _Removed_\r\n- [x] SkullTypes - _Removed_\r\n- [x] SkullData - _Removed_\r\n- [x] SlabTypes - _Removed_\r\n- [x] SlabData - _Removed_\r\n- [x] StoneTypes - _Removed_\r\n- [x] StoneData - _Removed_\r\n- [x] TreeTypes - _Will be used in the variant system_\r\n- [x] TreeData - _Removed_\r\n- [x] WallTypes - _Removed_\r\n- [x] WallData - _Removed_\r\n- [x] QuartzTypes - _Removed, separate blocks, pillar variant now uses the Axis._\r\n- [x] QuertzData - _Removed_\r\n- [x] BigMushroomTypes - _Removed, replaced with BigMushroomPoresData_\r\n- [x] BigMushroomData - _Removed, replaced with BigMushroomPoresData_\r\n\r\nOther data (and keys):\r\n- [x] SeamlessData - _Removed_\r\n- [ ] SpawnableData\r\n\r\nTile entities:\r\n- [x] Note - _Removed_\r\n- [x] Skull - _Removed_\r\n- [x] FlowerPot- _Removed_\r\n\r\n#### New/Modified\r\n\r\nData (probably separate PRs):\r\n- [x] LitData - _New_ (furnaces, redstone torch, redstone)\r\n- [x] InstrumentData - _New_ (note block)\r\n- [x] SlabPortionData (and SlabPortion) - _New_\r\n- [x] ChestAttachmentData (and ChestAttachmentType) - _New_\r\n- [x] InvertibleData - _New_ (daylight sensor)\r\n- [x] SurfaceAttachmentData (floor, ceiling, wall) - _New_ (buttons, lever), is this a good name?\r\n- [x] BigMushroomPoresData - _New_ (replaces BigMushroomData)\r\n- [ ] UnstableData - _New_ (TNT)\r\n\r\nTile entities:\r\n- [x] Player head - _New_\r\n\r\nPopulators:\r\n- [x] Merged Shrub and Flower into Plant\r\n\r\nOther:\r\n- [x] Update statistics, moved to https://github.com/SpongePowered/SpongeAPI/pull/1742\r\n- [x] Update block traits\r\n- [x] Update particles\r\n- [x] RecordType -> MusicDisc - In 1.13, the name 'record' is no longer used in any translation keys, item ids, etc. (item names were already Music Discs)\r\n- [ ] ~~Remove extended block states? Everything is now controlled server side.~~ - Forge is still going to use them.",
    "head_branch": "1.13",
    "is_a_fork": true,
    "comments": [
      "Just leaving a quick note that this PR seems to relate to my issue regarding how to get a coloured ShulkerBox from a DyeColor: https://github.com/SpongePowered/SpongeAPI/issues/1667\r\n\r\n**edit:** music disc type, maybe?",
      "I’m of the opinion it’s still nice to have groupings of obvious variants, such as wool colours. Idk how others feel tho ",
      "Before you get too far into this, remember that the Data API is an abstraction over the base game.\r\n\r\nHaving this data available, even if not directly represented in the Mojang block properties was entirely the point of abstracting it in the first place.\r\n\r\nBlockTrait API on the other hand, was supposed to be a closer to metal abstraction, that was implementation dependent.",
      "@ryantheleach That's why I am opening a discussion on this. And lot (block) based data is still tied quite closely to the MC internals, making it not possible to update without breaking changes (or ugly workarounds). Since there are already a lot BlockType changes, I don't see any issues with breaking the data types as well.",
      "@VapidLinus There is a `RecordType` catalog type.",
      "@gabizou I will open a new PR that targets API 7 for the Variety system. I will try to reuse things from the Data API that are already present to replace the VariantQuery, like using properties to query for specific things.\r\n`TreeTypeProperty`, `DyeColorProperty`, etc.\r\nWhich other properties would you think that would be worth adding, based from the data that will be removed, for example:\r\n`GoldenAppleTypeProperty`, `CoalTypeProperty`, etc.",
      "Please rebase against `1.13`.",
      "@gabizou I don't feel like keeping something as half working is a good idea. Maybe it would be better to provide a spongedocs page dedicated to updating from API7 to API8, related to big changes like item types/block types?",
      "@Cybermaxke I think I share the same opinion, keeping it with half functionality will unnecessarily clutter the API and only confuse developers. You are right though we need to document all of the changes well, not only updating outdated docs but a migration guide will probably be highly beneficial. In general we should keep a more detailed changelog of larger changes as well. ",
      "Bump: @Cybermaxke Would you add contents from the aquatic update, aside technical changes?",
      "@liach Yes, I am planning on doing that.",
      "Can you update the PR description as to what is going on? (I believe we opted to support legacy data, on the basis that it was read only, much like the option we took with `HorseVariant`s when horses got split up.",
      "@gabizou I rebased against bleeding but didn't change the target branch, is fixed now.\r\n\r\nI still think that keeping half broken API isn't a good thing, and that it would be better to provide good documentation to transition between API 7 and API 8 (once 1.13 is merged).\r\n\r\nWould love some input on this from some other developers",
      "@Cybermaxke I share your opinion, leaving half functional API would be a pain for maintenance and it will just cause confusion for users. They will have to update and make changes anyway for their plugin to be functional and they can update their removed data retrievals while they're at it. Leaving it will have them expecting API to work that won't work and/or even can't be made to work. \r\n\r\nOur best solution is documenting all the necessary changes quite well, through written documentation, but also through video or stream. I am planning to work on this quite a bit and I know others will be happy to help. ",
      "Moved to https://github.com/SpongePowered/SpongeAPI/pull/1949"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7cad9087c4d6d37a4ca",
    "number": 1702,
    "body": "Fixes SpongePowered/SpongeCommon#1614.\r\n\r\nTest:\r\n1. Run the command `/give <your username> diamond_sword 1 0 {ench:[{id:0,lvl:3},{id:0,lvl:3}]}`\r\n2. Attack any entity with the sword.",
    "head_branch": "modifier-merge",
    "is_a_fork": false,
    "comments": [
      "requesting a backport for this when it gets merged, as this causes a lot of random crashes due to skeleton traps quite often having duplicate enchants",
      "I havn't tested this, but LGTM on the surface.\r\n\r\n1. We need to verify whether sum is appropriate.\r\n2. We need to verify this fixes the crash.\r\n3. Tested with multiple armor protection enchants.\r\n\r\nI trust JB tested 2. given the sword command, and that previously caused the problem without this change?\r\n\r\nSum makes it look like it's impossible to disambiguate the sources, but would fix the issue for what's a pretty clear edgecase, I'm just mildly concerned at how it acts with armor.\r\n\r\nI'm happy as is. Just might want to run it past @Gabizou.",
      "Regarding ryan's comment (plus a few tests):\r\n\r\nFirst, let's use a slightly different sword:\r\n`/give <player> diamond_sword 1 0 {ench:[{id:17,lvl:3},{id:17,lvl:2}]}`\r\n(Smite III + Smite II)\r\n\r\nNow, take this test plugin:\r\n\r\n```\r\n    @Listener\r\n    public void onA(AttackEntityEvent event) {\r\n        System.out.println(\"OriginalDamages\");\r\n        for (Map.Entry<DamageModifier, Double> a : event.getOriginalDamages().entrySet()) {\r\n            a.getKey().getCause().first(Enchantment.class).ifPresent(enchantment -> System.out.println(enchantment.getId() + \" - \" + a.getValue()));\r\n        }\r\n\r\n        System.out.println(\"\\nModifiers\");\r\n        for (DamageFunction ab : event.getModifiers()) {\r\n            ab.getModifier().getCause().first(Enchantment.class).ifPresent(enchantment -> System.out.println(enchantment.getId() + \" - \" + ab.getFunction().applyAsDouble(7)));\r\n        }\r\n\r\n        System.out.println(\"\\nOriginalFunctions\");\r\n        for (ModifierFunction<DamageModifier> ac : event.getOriginalFunctions()) {\r\n            ac.getModifier().getCause().first(Enchantment.class).ifPresent(enchantment -> System.out.println(enchantment.getId() + \" - \" + ac.getFunction().applyAsDouble(7)));\r\n        }\r\n\r\n        System.out.println(\"\\n----------------------------------\\n\");\r\n        System.out.println(\"OriginalDamage: \" + event.getOriginalDamage());\r\n        System.out.println(\"BaseAmountDamage: \" + event.getBaseOutputDamage());\r\n        System.out.println(\"FinalOutputDamage: \" + event.getFinalOutputDamage());\r\n        System.out.println(\"OriginalFinalDamage: \" + event.getOriginalFinalDamage());\r\n        System.out.println(\"__________________________\");\r\n\r\n        DamageModifier test = event.getModifiers().get(1).getModifier(); //ignore this for now\r\n        System.out.println(event.getOriginalModifierDamage(test)); \r\n    }\r\n```\r\nResult:\r\n```\r\n OriginalDamages\r\n minecraft:smite - 12.5\r\n \r\n Modifiers\r\n minecraft:smite - 7.5\r\n minecraft:smite - 5.0\r\n \r\n OriginalFunctions\r\n minecraft:smite - 7.5\r\n minecraft:smite - 5.0\r\n \r\n ----------------------------------\r\n \r\n OriginalDamage: 7.0\r\n BaseAmountDamage: 7.0\r\n FinalOutputDamage: 19.5\r\n OriginalFinalDamage: 19.5\r\n __________________________\r\n 7.5 \r\n```\r\n\r\n> Sum makes it look like it's impossible to disambiguate the sources, but would fix the issue for what's a pretty clear edgecase, I'm just mildly concerned at how it acts with armor.\r\n\r\nNot exactly, since `protected List<Tuple<M, Double>> originalModifiers;` would contain duplicate entries because you've added duplicate modifiers while iterating in that method. \r\nCool, does that fix the issue ? No, It introduces new ones :D \r\n\r\nClasses which extend AbstractModifierEvent like AbstractAttackEntityEvent contain methods which iterate on the assumption that that list does not contain duplicate entries (ex. [getOriginalModifierDamage](https://github.com/SpongePowered/SpongeAPI/blob/bleeding/src/main/java/org/spongepowered/api/event/impl/AbstractAttackEntityEvent.java#L59) )\r\nThis leads to inconsistency like: `System.out.println(event.getOriginalModifierDamage(test)); ` printing 7.5 (should be 12.5).",
      "Seems like the better option would be to not send duplicate enchantments in common then. There's probably plugin code that depends on not having duplicates as well.\r\n\r\nI'm doing some testing right now, and I'll submit a PR for that once I'm done.",
      "I think we have no choice but to send the duplicate enchantments? Can the math be made to work?",
      "https://github.com/SpongePowered/SpongeCommon/pull/1627",
      "IMO it's ok to send duplicate enchantments. Another dirty solution would be to change method that rely on originalModifiers to use originalModifierMap.\r\nFor example, using getOriginalDamages().get(damageModifier); inside getOriginalModifierDamage.\r\n        \r\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7cbd9087c4d6d37a4cb",
    "number": 1700,
    "body": "`BedData` only contains a key for dye colors. We already have that in `DyeableData`.\r\n\r\nRelated: SpongePowered/SpongeCommon#1611",
    "head_branch": "bed-data",
    "is_a_fork": false,
    "comments": [
      "BedData either probably needs to have a data value whether it is occupied / being slept in, or a new DataManipulator found to cover this purpose.",
      "If this will be added in API 8, it will very likely be removed anyway, due the 1.13 blockstate changes. Beds will no longer be tile entities.",
      "@Cybermaxke I think this is targeted for API 7 just BedData will be deprecated instead of removed. "
    ],
    "commit_messages": [
      "Deprecate BedData in favor of DyeableData. (#1700)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7ccd9087c4d6d37a4cc",
    "number": 1699,
    "body": "[SpongeAPI](https://github.com/SpongePowered/SpongeAPI/pull/1699) | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1625)\r\n\r\nFor just ~~one~~ two PR's to Sponge, you too can support orange and show him some love!\r\n\r\n![Orange](https://user-images.githubusercontent.com/25996030/33103191-ebc8e4e2-ceee-11e7-8fec-43e174deff63.png)\r\n\r\n*All puns are 100% oranginal and totally weren't stolen from google. Or Parker.*",
    "head_branch": "feature/orange",
    "is_a_fork": true,
    "comments": [
      "**You are going to be _citrisized_ for all of these puns for sure.** \r\n\r\nColor needs some larger changes that I plan to work on later, but it does make sense for orange to be added for now. ",
      "Where are you pulling this value of Orange from?\r\n\r\nWithout having yet tested or investigated, my suspicion is that there is possibly corresponding PR's that need to be made to SpongeCommon.",
      "Standard orange [web color](https://en.wikipedia.org/wiki/Web_colors).\r\n\r\nThe `Color` class is not a catalog type and constants are not registered. There should be no conflicts or other issues caused by this at all.",
      "Field order!",
      "Apple cider. (note: This was requested by Zidane)",
      "So this is what 🔶 meant...\r\n\r\n<img width=\"498\" alt=\"orange\" src=\"https://user-images.githubusercontent.com/12983479/33108463-d81e3510-cf01-11e7-90b0-be1065b93d0c.png\">\r\n\r\nI'd add to the puns if I could \"concentrate\" enough to think of one 😉",
      "I'm defaulting to rejecting this PR outright, this whole class is a mess.\r\n\r\nI get having our own Color interface could be handy for a few reasons, but having fields inside it that are tightly coupled with any one particular color palette (wool, dyes, sheep, fireworks, text, concrete, armor) seems beyond ridicule. (this isn't your fault it's ours, clearly)\r\n\r\nYou stated that you got it from the standard web color orange which whilst I understand when talking to you on discord is a useful color for your particle effects, doesn't really seem to belong in this class as is.\r\n\r\nI could maybe understand pulling it if the color was related to say, dye colors, but then the dye colors class has that down pat, and you can do DyeColors.ORANGE.getColor which still doesn't match the color you want or need. Nor does `ColorUtil.fromColor(DyeColors.ORANGE.getColor())` translate correctly to the EnumDyeColor in implementation, but that's another story and possibly related to 1.12 world of color update. \r\n\r\nYes this class needs work, but I don't think this is the right way to do it, and I don't think people want to accept this change for one person only to rip it out and break your plugin shortly afterwards.\r\n\r\nI love the fun and puns, and I hope this causes someone to refactor the colors class sooner rather then later.",
      "You're being mean 😢 \r\n\r\nBut in all serious, this is something I've known for a while now. While I've had some fun with this PR (as have some others, it seems), the fact of the matter is that this is overlooking the bigger issues.\r\n\r\n@Meronat and I have discussed the possibility of rebuilding the `Color` class and standardizing the use of colors throughout Sponge. As Ryan and I discovered, common's `ColorUtils` is completely broke and needs one heck of a tune-up.\r\n\r\nI'm glad that this 'simple' PR has brought forth some deeper questions about some of the things in Sponge that we might take for granted - even something as basic as colors is not safe.\r\n\r\nI'm more than willing to proceed with refactoring these classes and trying to update them to a standard, however I'd like to get the approval of a higher-up first as these will undoubtedly be breaking changes for plugins using the `Color` class (or we can keep the mis-matched names, but I'd prefer not).\r\n\r\nIn the end, it appears this has been a fruit-full endeavor after all. 🍊",
      "@SimonFlash If you want to take this on I'm sure everyone would appreciate it. But any breaking changes would either need to be in pretty quick, or delayed until API8.\r\n\r\nIf you need to take longer I'd like to see you try and tackle the potential problems in the color utils first, and confirm whether it's due to the World Of Color update or if they have been broken since before 1.12\r\n\r\nAlso creating a test plugin would be useful, one that runs through the different color palettes, and tests serialization, as well as converting between dyecolors to implementations and back, etc.\r\n\r\nOf course, all of this is idealistic, I'd appreciate any improvement over the current situation.",
      "Here's another way to get `Color` objects that already works with the current API:\r\n\r\n`DyeColors.ORANGE.getColor()`\r\n\r\n**EDIT:** Never mind, already posted above.",
      "This is going to be a lot harder than it might look.\r\n\r\nI started making some changes to the `Color` class and updating the tests and in the process seem to have found some type of bug or weird result with `java.awt.Color`s. White, for example, is `255, 255, 255` in rgb or `0xFFFFFF` in hex code (which is `16777215`). This results in the following expression in the constructor:\r\n\r\n```java\r\n// alpha, red, green, blue\r\nvalue = ((255 & 0xFF) << 24) |\r\n                ((255 & 0xFF) << 16) |\r\n                ((255 & 0xFF) << 8)  |\r\n                ((255 & 0xFF) << 0);\r\n```\r\n\r\nIntelliJ happily points out that this is a numeric overflow, and calling `java.awt.Color.WHITE.getRGB()` returns `-1`. Unless there are some *really* weird things going on behind the scenes that I'm not aware of, this is a huge issues as basically renders any of the `java.awt.Color` colors inaccurate. Please tell me I'm not loosing my sanity... at least from this.\r\n\r\nAnyways, I'd like to get a discussion going about this with some of the core developers as it's not going to be a simple PR and will likely result in some breaking changes - and I haven't even looked at SpongeCommon yet.\r\n\r\nAll this for orange...",
      "-1 seems like a normal result to me, considering that it's a packed int value. FFFFFFFF is how -1 is represented in unsigned hex (e.g. FFFFFFFF is -1 with 2's complement encoding).\r\n\r\nrelated: https://github.com/SpongePowered/SpongeAPI/issues/1236",
      "One of the things I've been wondering about is how do we want to structure the static `Color` fields used throughout the API, and I believe this starts with the colors offered in the `Color` class.\r\n\r\nThe current API has a variety of colors seemingly without rhyme or reason - they match no palette I've found in my research (though similar in names to [dye colors](https://minecraft.gamepedia.com/Dye#Data_values), there's an extra magenta and no orange). I updated these fields to match the 16 [text colors](https://minecraft.gamepedia.com/Formatting_codes#Color_codes), but I think we should standardize how we obtain and store colors for various uses.\r\n\r\nI'd like to propose the following changes:\r\n\r\n* `Color`s for color codes and dyes will be stored in `TextColors` and `DyeColors` through the `#getColor` method. These colors would no longer be stored in the `Color` class.\r\n* `TextColors` should receive a `#getBackgroundColor` for the darker color used behind each text.\r\n* ~~`TextColors` should retrieve their colors from the `net.minecraft.client.gui.FontRenderer#colorCodes` array~~ We don't have access to this class as it's only on the client, so we will need to recreate it somewhere. `DyeColors` already gets the color from Minecraft through [MixinEnumDyeColor](https://github.com/SpongePowered/SpongeCommon/blob/bleeding/src/main/java/org/spongepowered/common/mixin/core/data/types/MixinEnumDyeColor.java#L59-L65), but it might be a good idea to store it as a constant.\r\n* The `Color` class should contain static constants for a palette of standard colors, such as either the [RGB or RYB color wheel](https://www.w3schools.com/colors/colors_wheels.asp) or the [HTML web colors](https://en.wikipedia.org/wiki/Web_colors#HTML_color_names), with [CSS orange](https://en.wikipedia.org/wiki/Web_colors#CSS_colors) of course.\r\n\r\nAdditionally, it might also be worth considering having `Color` cataloged by a `Colors` class which contains all text, dye, and common colors we use. I'm not sure what the implications of this change are, so if someone would like to weight in on that that'd be great.\r\n\r\nFinally, a fair amount of this will be within SpongeCommon and I intended to open up a PR there for these color changes (and provide a well-needed update to our [SheepFactoryColorUtil](https://github.com/SpongePowered/SpongeCommon/blob/8bc321eaeadb16c347fae58426c069e551419be6/src/main/java/org/spongepowered/common/util/ColorUtil.java#L60) class). I'll be hoping to get to this by the end of the week.",
      "With the PR to SpongeCommon finished (which was much faster than I expected as I didn't need to rewrite ColorUtil), this PR is complete pending feedback on the above questions and any other requested changes.\r\n\r\nAdditionally, I'd like to propose a few more notes as food for thought:\r\n\r\n* Might we prefer using `#of` instead of `#ofHex`, `#ofRgb`, or other variants? Alternatively, rename the other `#of` methods to things like `#ofVector3i` for consistency.\r\n* Have `TextColor#getBackgroundColor` be a default method in instead of implementing it in SpongeCommon\r\n* Add a method for merging (dye) colors using the same formula as dying armor, shown [here](https://minecraft.gamepedia.com/Dye#Dyeing_armor).\r\n* Would also like to reiterate the note above about having a `Colors` `CatelogType`.",
      "IMO Color should not be a CatalogType as there are too many of them. I would agree with a named color map though.",
      "I don't think `Color` should be catalogued (it shouldn't be forced upon plugin implementors to catalogue a colour), but there could be a `NamedColor` class that extends `Color` and `CatalogType` to facilitate this. That way, plugins could catalogue their own colours for use in other plugins - if a plugin wants to then provide a specific shade of orange and expose it - they can do using existing Sponge systems, allowing plugins to be weakly dependent even when it comes down to colour.\r\n\r\nWithout commenting on the substance of this PR - and what I've seen from a cursory glance looks reasonable - if we're pushing to remove implementation from the API, we should be doing it here too as much as possible.\r\n\r\nI accept that the result of colour mixing should not really be different across implementations... and let's face it, the colours shouldn't at all (though, one man's orange is another man's slightly darker orange), but all these methods are implementation - different implementations might have better performing algorithms! So I believe that we might as well take this oppotunity to do this properly and put the impl into SC rather than kick the issue down the road for later.\r\n\r\nI'll allow others to decide whether that's what is actually wanted - just my tuppence.",
      "I like the idea of splitting this class into an API interface and Common implementation. I'm not sure how we would set this up, however, as we would need a system to reroute the default `Color#of` methods in the interface to our `SpongeColor` implementation - this is done through `GameRegistry#createBuilder`, but I don't think that would apply in the same way. Is there a system in place for this type of creation, or do we need to come up with something? (this problem is not exclusive to the `Color` class and is present in things like [`ItemEnchantment`](https://github.com/SpongePowered/SpongeAPI/blob/dccaebccc2772ad485b61aec4728235830ff4140/src/main/java/org/spongepowered/api/data/meta/ItemEnchantment.java).\r\n\r\nWith regards to mixing colors, I'm actually considering deprecating those methods - they are not used in SpongeAPI, SpongeCommon, SpongeVanilla, or SpongeForge. It might be worth it to keep a static `mixColors` method, but unless you're trying to mix colors from user input there's really no need from it, and I think that's few and far between. I attached the link in a todo a couple commits back, but I'm also in favor of changing this method to match Minecraft's calculation of [dyeing armor](https://minecraft.gamepedia.com/Dye#Dyeing_armor) instead.\r\n",
      "> as we would need a system to reroute the default Color#of methods in the interface to our SpongeColor implementation \r\n\r\nNot really because we can use deprecations. You'd do this in two stages:\r\n\r\n* API N, Create `NamedColor` (extends `Color` and `CatalogedType`) and `NamedColors` (which contains `NamedColor`s), create `NamedColor` registry.\r\n* API N, Deprecate any static field in `Color`, encourage the use of the `NamedColors` instead.\r\n* API N+1, delete deprecated fields and methods.\r\n* Maybe create a `Color.Builder` that can perform the function of the various utility methods (note that any method names given here are just for illustrative purposes - the idea being that each method will reset that value, hence the word `set`):\r\n\r\n```java\r\nColor.builder().setHex(hex).build();\r\nColor.builder().setRed(red).setBlue(red).setGreen(red).build();\r\n// etc\r\n```\r\n\r\nYou could also potentially create a builder for mixing colours (or even use the same one if you are creative) `Color.mix(colour).with(colour).with(colour).build();` - but I would check to see whether other plugins use this (my guess is it's unlikely) before doing any extra work. We can always re-add it later, we have the commit history already so we can redo this.\r\n\r\nBefore you go ahead and do this, it's wise to seek other's opinions on namings, direction, etc. I just think it's wise to take a step back and do this properly, rather than just rearrange some methods on an API class and add impl to the API when we should be going in the opposite direction,",
      "Oh, just to add:\r\n\r\n> default Color#of methods in the interface to our SpongeColor implementation \r\n\r\nYou'd route them to the relavant builder, that's all, so in the example above, `Color.of(hex)` could be a shortcut for `Color.builder().setHex(hex).build();`",
      "If we decide to go with a `CatelogType` approach, we can definitely use the builder registry to handle the connection from API to Common. That's a huge step to take though (especially for a relatively simple class) and I'm not sure if a builder is the correct design pattern here as each method would basically do it's own thing rather than stacking, which is generally what's expected from a builder. If you and the other developers are fine with going that direction, then I'm all in. While this originally started out as a couple simple changes, it's quickly become apparent that there's some fundamental issues going on here as well.",
      "Whether or not the builder _is_ the right design pattern here, it’s how we separate construction of our API elements from the implementation in a clean, non hacky manner, without resorting to performing either some hacky reflection or ASM to write portions of the class at runtime. Having static methods (such as `of`) that is expected to have construction code within it makes it incredibly difficult to do that. There are other places in the API where a builder isn’t quite right, but used because it’s the tool of choice and we wrap our preferred style for an API around that.\r\n\r\n> each method would do its own thing rather than stacking\r\n\r\n[Another builder that is the same can be found here](https://github.com/SpongePowered/SpongeAPI/blob/4fe3fffd10b2a7762a3b2f7ac00f670282a9301f/src/main/java/org/spongepowered/api/world/gen/populator/Fossil.java#L62). As an aside, Zidane suggested to me in my commands PR that such methods should have a `set` prefix, why I’ve done that up there - though it’s not done elsewhere in the API when perhaps it should have been. However, it is ultimately to aid clean separation.\r\n\r\nThat’s not to say that you _can’t_ have static `of` methods, but they should become convenience methods that call the builder. So, `of(hex)` would call `Sponge.getRegistry().createBuilder(Color.Builder.class).setHex(hex).build()`, it looks clean from an API consumer’s side and it gives us the separation that we need. There is potentially an extra penalty where we need to check the state of the builder on build or when each element is called, but ultimately, I don’t see that as a problem.",
      "I've migrated the majority of the `Color` class to Common and have replaced it with the new `Color` interface and `Color.Builder` builder. There are still no breaking changes caused by this PR with the `Color` interface directly, but there may be from moving the data builder to Common.\r\n\r\nDiscussion about the implementation should be moved to the PR in [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1625).",
      "The class to interface change being breaking at the binary level is news to me, so I withdraw my earlier statemement - this *is* a breaking change.",
      "Small fix in the above commit for a requested change.\r\n\r\nHere are the above potential projects remaining for this PR:\r\n\r\n* Have `Color` be a `CatelogType`? (various options, +1 to `NamedColor` from dual)\r\n* Remove `@Deprecated` methods (recompile to potential refactoring)",
      "As API 7 is nearing a stable release, I'd like to move for this PR to be accepted by the end of the month. There are still two discussion points remaining with regards to API:\r\n\r\n* Should we remove `@Deprecated` methods? While this doesn't provide developers with a lot of time to address any issues, this PR already requires a recompile and the effects of these changes are limited.\r\n* I would also like to update the various `mixColor` methods, especially for dye colors. These methods aren't used in Sponge (and likely aren't used outside of Sponge), as well as being poor/inaccurate implementations.\r\n  * Mixing RGB colors isn't an easy process, and while averaging all their components is generally close enough it isn't ideal and shouldn't be used in any type of environment. I suggest removing this from the API entirely. If someone would like this effect, they can convert the color to a Vector3i and use the methods from there (which is much more efficient for two values anyways).\r\n  * Mixing dye colors has the same flaws as rgb colors (as the use the same method) but is much more obscure. Additionally, the formula used is different from the one used by Minecraft to calculate the result of blending dyes with armor. I suggest either the removal of these methods completely or converting them to be default methods of Color that use the right formula for mixing dyes.\r\n\r\nBeyond that, if anyone has any remaining suggestions now's the time.",
      "The benefit of leaving the deprecated methods, even if a plugin requires a recompile, is that you can attach documentation to them, allowing you to point developers to the new, improved methods. So, leaving them is not a bad thing for that reason.\r\n\r\nI still feel like we should have a named colour catalogue type for the common colours, if only to bring this in line with the rest of the API design, singular class name for the type, plural for the constants.",
      "I'm going to have to pass on having this merged for API 7. API 8 (Minecraft 1.13's compatibility update) is more likely where it will have a more fitting merge. There's more about this PR that I'd develop a bit further, as @dualspiral has mentioned, that I can't anticipate enough time to dedicate before API 7's release date.",
      "So trying to work this down to a resolution, have we decided on making colors a `CatelogType` or is that still up in the air? With regards to the `mixColor` methods as explained above, what are your thoughts on the different options presented?\r\n\r\nAdditionally, what are the other things with this PR that you'd develop further? Adding a `CatelogType` is a bit of a project, but isn't something unique that needs to be developed specifically for this PR. From the sound of it there seems to be something I'm missing, so what other components are there?",
      "I would like to see convergence on a consistent API with the broader Sponge ecosystem. My thoughts are:\r\n\r\n* `Color` as a basic interface probably should _not_ extend `CatalogType`.\r\n* A new `NamedColor` _should_ extend `CatalogType` for our... well, named colours.\r\n* A `NamedColors` or `Colors` (though probably the former) class with static references to all _current_ colours and any others that make sense to have.\r\n* We might not want to allow `NamedColor`s to be registerable. There might be a way to hide the `NamedColor` interface in that case, but it's not something I've looked into.\r\n\r\nI'm not happy with the deprecation of the colours we currently have in order to favour the 16 html colours and orange. Why the 16 standards and orange? I get that this PR was originally about adding the colour orange, but we have significantly expanded the goal here and removing the traditional Minecraft colours that a lot of plugins might still rely on shouldn't be removed. Prime example - our `TextColor`s, the ones that were originally the minecraft colour codes, are backed by some of this colours, and removing the deprecated colours would break that. We should closely match what Minecraft does with colours and _all_ pallets, not just suggest 16+1 colours from an arbitrary standard which do not align with Minecraft.\r\n\r\nOn mixing colours - I don't know if it's used. I don't know why it's in there and who put it in - I'm not going to pass judgment on whether it should be there or not. Note that my comment on the Common PR was on the basis that it would be there.",
      "To start with mixing colors, I completely get what you're going for there. The actual methods aren't used anywhere apart from Sponge, and as a user I don't think I'll even be in the situation where I'll want to mix colors like that as opposed to using my own with the sole exception of mixing dyes for armor (which uses a different formula anyways). This is really a gabizou call on whether to keep this or not, but I don't see any reason why it's necessary.\r\n\r\n***\r\n\r\nThe colors Minecraft uses are very much all over the place, so it's near impossible to find a standard. While dyes themselves have a color, dyed blocks each have their own color schemes so it doesn't make sense to attempt to catalog those (you'd have over 100 colors and they'd have to be named `WOOL_RED` and such). This isn't feasible or helpful to us, so I don't think we should try documenting all colors \r\n\r\nThe only color codes that are reasonably standardized in Minecraft are the chat colors, which are almost identical to the CGA colors. The CGA colors using a particular formula based on a colors number with one exception - color 6, which is brown instead of an olive color. This is also the sole exception in Minecraft, with brown being replaced with orange instead.\r\n\r\nIf we were to use text colors, this wouldn't cover some of the main colors and are slightly off from the standard color codes. Additionally, note that these colors are technically a catalog type through `TextColors` as they have a `getColor` method (and now a `getBackgroundColor` method). \r\n\r\nPrior to this PR, the `Color` class contained a variety of colors that didn't match up with any standard color palette - it was close to a couple, but never exact. The old class had `MAGNETA`, `PURPLE`, and `DARK_MAGENTA` (which matches no set in Minecraft at all) and the color code choices more closely matched the web colors as opposed to Minecrafts (such as `GREY` being `0x808080` instead of `0xAAAAAA` (text grey) or `0x555555` (text dark grey), or `DARK_CYAN` being `0x008B8B` (which is somewhat close to cyan, presumably) over `0x00AAAA` (text cyan) and so on). Simply put, there was no rhyme or reason to the colors present, their names, and their actual color values.\r\n\r\nI wanted to standardize this to common colors that developers might want to use, so I spent a lot of time researching the different possibilities - color wheels, the aforementioned CGA colors, and HTML web colors - before decided on a superset of the web colors and CSS orange. This covers the main colors that a user might want and, while not a 'perfect' selection it is much more complete and orderly than what was existing. I'd also support included some other colors like brown and pink, but at some point we have to draw a line. This is something can isn't too difficult to change, but I felt this was a reasonable selection for our use case.\r\n\r\n***\r\n\r\nI agree that `Color` should not be a `CatalogType` for the same reasons positions are not cataloged to a `World` - though technically finite, it's not what the class represents and would be unfeasible to support.\r\n\r\nAdding in a `NamedColor` class to handle registered colors would work, but I personally see this as a lot of additionally boilerplate for next to no benefits, *especially* if new colors can't be registered (which even if allowed wouldn't have much of a significant benefit - it's not like this is a `Key` or `Item` with a lot of unique properties that needs to be tracked and retrieved frequently and potentially across multiple plugins; it's literally just a color. I see the largest benefits of the registry being the ability to document objects that don't exist within Sponge and aren't available until Minecraft begins and register it's own type and retrieve it - as we're not using either of those, I just see having a `CatelogType` as being unnecessary additional code to have static fields. I would also prefer `NamedColors` over `Colors` if this would be the case, as this matches the Sponge style more and `Colors` implies `Color` is the implementing `CatalogType`.\r\n\r\nAn alternative is to create a `NamedColors` class that simply contains static fields for any colors we'd like to offer. This avoids jumping through hoops with the registry while maintaining the same organization effects. Nothing else in the API is in the same situation as colors, so I don't see a reason to make it structured the same as something it doesn't represent."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7cdd9087c4d6d37a4cd",
    "number": 1697,
    "body": "[SpongeAPI](https://github.com/SpongePowered/SpongeAPI/pull/1697) | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1606)\r\n\r\nAdds API to get the other double chest location.",
    "head_branch": "feature/chestlocation",
    "is_a_fork": false,
    "comments": [
      "Maybe this would be better returning the tile entity instead, if they need the location they can get it from the tile entity. `Chest#getConnectedChest`?",
      "Yeah, 1.13 when it comes allows you to place single chests side by side, and (I believe) removes the possibility of having 3 wide bug chests, but mods could always do something funky.\r\n\r\nLooks good to me."
    ],
    "commit_messages": [
      "getConnectedChests"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7ced9087c4d6d37a4ce",
    "number": 1695,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1605) | [SpongeForge](https://github.com/SpongePowered/SpongeForge/pull/1866)\r\n\r\nThis pull request implements `ChangeDataHolderEvent.ValueChange`, and extends the Data API to better support plugins using the event.\r\n\r\n**Overview**\r\n\r\nThis PR makes three main sets of changes: Improvements to `ChangeDataHolderEvent.ValueChange`, the addition of a new event filter `@GetKey`, and the addition of extra utility methods to the Data API.\r\n\r\n-----\r\n\r\n**ChangeDataHolderEvent.ValueChange**\r\n\r\nFor consistency with other events, this event now follows the `getOriginalXXX`, `getXXX`, `setXXX` format for its methods.\r\n\r\nTo give maximum flexibility to plugins, the previous `DataTransactionResult` is completely replaced when calling `setChanges`. Plugins wishing to preserve existing changes can use `DataTransactionResult$Builder#absorbResult` to combine their desired changes with previous changes.\r\n\r\n-----\r\n\r\n**`@GetKey` event filter**\r\n\r\nAs demonstrated in the attached demonstration plugin, the event can be somewhat cumbersome to use. To make it easier for plugins to listen for data changes, a new event filter `@GetKey` is added. Using the specified key id, this event filter sets the annotated parameter to the value retrieved from either a `ChangeDataHolderEvent.ValueChange`, or a `DataHolder`.\r\n\r\nFor example, this listener:\r\n\r\n```java\r\n@Listener\r\npublic void eventListener(ChangeDataHolderEvent.ValueChange event, @GetKey(\"FOOD_LEVEL\") int foodLevel) {\r\n    System.out.println(\"Food level: \" + foodLevel);\r\n }\r\n```\r\n\r\nwill be called with `foodLevel` set to the value associated with `Keys.FOOD_LEVEL`. If a value for `Keys.FOOD_LEVEL` is not present in the event, the listener will not be called. The parameter can be specified as the underlying value (e.g. `int`), a `Value`, or an `ImmutableValue`.\r\n\r\nAs described in the javadocs for `@GetKey`, this event filter can also be used with a `DataHolder`.\r\n\r\n-----\r\n\r\n**Data API Changes**\r\n\r\nTo support the usage of this event, several changes have been made to the Data API. The most significant of these is `DataHolder#offerWithEvent`. This method is used by the implementation (and optionally by plugins) to fire a `ChangeDataHolderEvent.ValueChange` event. This method retrieves the current value from the `DataHolder`, constructs a `DataTransactionResult` containing the old and new values, and fires the `ChangeDataHolderEvent.ValueChange` event. If the event is not cancelled, the `SUCCESS` values will be actually offered to the `DataHolder`.\r\n\r\nHowever, this method isn't sufficient to make `ChangeDataHolderEvent.ValueChange` easily usable for plugins. To make `DataTransactionResult` easier to use even without the event filter, a new enum `DataCategory` is added. This enum can be used with `@GetKey`, as well as the newly added `get` and `getKey` methods on `DataTransactionResult`, to lookup a value from the sucessful, rejected, or replaced set of values. (It also has the advantage of greatly simplifying the implementation of `@GetKey`)\r\n\r\n*getDefault and getDefaultValue*\r\n\r\nFinally, two methods are added to `ValueContainer` - `getDefault` and `getDefaultValue`. These methods solve the problem of creating a new value wrapper (a subtype of `Value` or `ImmutableValue`) given the underlying object.\r\n\r\nFor example, consider `Keys.FOOD_LEVEL`. Since this is a `MutableBoundedValue`, it has extra information associated with it - a minimum and a maximum value. These pieces of additional information may vary depending on the `DataHolder` the value came from. If a plugin wants to create a new `MutableBoundedValue` for a food level - if it wants to add it to a `ChangeDataHolderEvent.ValueChange`, for instance - it must first get access to an existing value from the proper `DataHolder`. Otherwise, it has no way of knowing the proper minimum and maximum values.\r\n\r\nUnfortunately, the current Data API only allows retrieving a `Value` or `ImmutableValue` when it is already stored in a `DataContainer`. While `FOOD_LEVEL` will always exist on a player, this will not be the case for other values. The new `getDefault` and `getDefaultValues` allow a plugin to create such a value - crucially, with all additional data (e.g. minimum and maximum values) filled in. This ensures that a plugin can always add a proper `ImmutableValue` to a `ChangeDataHolderEvent.ValueChange` event, even if it doesn't yet exist on the target `DataHolder`.\r\n\r\n---\r\n\r\n**TODO**\r\n\r\nThis pull request is not yet complete. There are still many unresolved issues that need to be addressed:\r\n\r\n- [ ] `ChangeDataHolderEvent.ValueChange`, as the name suggests, only deals with values. Does it make sense to have an event for `DataManipulator` changes?\r\n- [ ] When writing the implementation of this PR, I discovered that's there's no simply way to convert a `BaseValue` into either a `Value` or `ImmutableValue`. While these are the only subclasses that currently exist, the API provides no guarantee that this will always be the case. Should we add convenience methods for getting a concrete `Value`/`ImmutableValue` from a `BaseValue`, or do we not want to commit to this in the API?\r\n- [ ] The current implementation of `DataTransactionResult#get` is inefficient, as it iterates over the entire list of values each time. Should we require that there can only be one `ImmutableValue` per key in a given `DataCategory`? Are the any circumstances where this would pose an issue?\r\n- [ ] Each `DataCategory` on `DataTransactionResult` *sort* of behaves like an immutable `ValueContainer`. Would it make sense to implement this interface on a 'view' into a `DataTransactionResult`?\r\n- [ ] `DataTransactionResult#absorbResult` has very little documentation, and (to me) gives unintuitive results. Is this method the right one to use when dealing with a `ChangeDataHolderEvent.ValueChange`? If not, what should be used instead? Under what circumstances would a plugin call this method?\r\n- [ ] Should `DataHolder#offerWithEvent` be:\r\n* Available alongside `offer` through the API?\r\n* Be the only option for plugins, and replace `offer`?\r\n* Be completely inaccessible to plugins, and only be used by the implementation?\r\n\r\n---\r\n\r\n**Demonstration plugin**\r\n\r\nTo demonstrate how these changes will work in practice, I've added support for firing `ChangeDataHolderEvent.ValueChange` for changes to food level (`Keys.FOOD_LEVEL`). This plugin shows how to use the event:\r\n\r\n```java\r\npackage org.spongepowered.test;\r\n\r\nimport static org.spongepowered.api.data.DataTransactionResult.DataCategory.REPLACED;\r\nimport static org.spongepowered.api.data.DataTransactionResult.DataCategory.SUCCESSFUL;\r\n\r\nimport org.spongepowered.api.data.DataTransactionResult;\r\nimport org.spongepowered.api.data.key.Keys;\r\nimport org.spongepowered.api.data.value.immutable.ImmutableValue;\r\nimport org.spongepowered.api.data.value.mutable.MutableBoundedValue;\r\nimport org.spongepowered.api.entity.living.player.Player;\r\nimport org.spongepowered.api.event.Listener;\r\nimport org.spongepowered.api.event.Order;\r\nimport org.spongepowered.api.event.data.ChangeDataHolderEvent;\r\nimport org.spongepowered.api.event.filter.cause.First;\r\nimport org.spongepowered.api.event.filter.data.GetKey;\r\nimport org.spongepowered.api.plugin.Plugin;\r\nimport org.spongepowered.api.text.Text;\r\nimport org.spongepowered.api.text.channel.MessageChannel;\r\n\r\nimport java.util.Optional;\r\n\r\n@Plugin(id = \"food-change-test\", authors = \"Aaron1011\")\r\npublic class FoodChangeTest {\r\n\r\n    @Listener(order = Order.EARLY)\r\n    public void simpleListener(ChangeDataHolderEvent.ValueChange event) {\r\n        Optional<ImmutableValue<?>> oldFood = event.getChanges().get(DataTransactionResult.DataCategory.REPLACED, Keys.FOOD_LEVEL);\r\n        Optional<ImmutableValue<?>> newFood = event.getChanges().get(DataTransactionResult.DataCategory.SUCCESSFUL, Keys.FOOD_LEVEL);\r\n\r\n        if (!oldFood.isPresent() || !newFood.isPresent()) {\r\n            return;\r\n        }\r\n\r\n        MessageChannel.TO_ALL.send(Text.of(String.format(\"Simple listener: %s %s\", oldFood.get().get(), newFood.get().get())));\r\n    }\r\n\r\n    @Listener\r\n    public void getKeyListener(ChangeDataHolderEvent.ValueChange event,\r\n            @GetKey(value = \"FOOD_LEVEL\", from = REPLACED) int oldFood,\r\n            @GetKey(value = \"FOOD_LEVEL\", from = SUCCESSFUL) MutableBoundedValue<Integer> newFood,\r\n            @First(tag = \"a\") Player player,\r\n            @GetKey(value = \"DISPLAY_NAME\", tag = \"a\") Text name) {\r\n\r\n        MessageChannel.TO_ALL.send(Text.of(String.format(\"GetKey listener: %s %s from player \", oldFood, newFood.get())).concat(name));\r\n\r\n        event.setChanges(DataTransactionResult.builder().from(event.getChanges()).absorbResult(DataTransactionResult.successResult(newFood.asImmutable().with(newFood.getMaxValue()))).build());\r\n    }\r\n\r\n}\r\n```",
    "head_branch": "change-value",
    "is_a_fork": false,
    "comments": [
      "Please excuse me if this is a stupid question, but would the `@GetKey` event filter work for `TargetEntityEvent`s as a shortcut to get key values from entities?\r\n\r\nAs an example:\r\n\r\n```java\r\n// Prevent entities that aren't called Fred from being tamed\r\nvoid onEntityTame(TameEntityEvent event, @GetKey(\"DISPLAY_NAME\") Text name) {\r\n    if (!name.toPlain().equals(\"Fred\")) { event.setCancelled(true); }\r\n}\r\n```\r\n\r\nI know you said _\"[the] event filter can also be used with a `DataHolder`\"_, but I'm not sure what that implies.",
      "Going to close this for now due to https://github.com/SpongePowered/SpongeAPI/pull/1728 and https://github.com/SpongePowered/SpongeCommon/pull/1670 which provide a method of implementing and listening to the event. \r\n\r\nIf you'd like to make other changes, open a new PR with those in relation to what is now in the API and implementation."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7cfd9087c4d6d37a4cf",
    "number": 1693,
    "body": "[SpongeAPI](https://github.com/SpongePowered/SpongeAPI/pull/1693) | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1602) | [SpongeForge](https://github.com/SpongePowered/SpongeForge/pull/1863)\r\n\r\nThe current ChangeInventoryEvent.Pickup does not cover what really happens. \r\nIt fires before the inventory change yet pretends to know what changes will happen in the inventory.\r\nrelated issues: https://github.com/SpongePowered/SpongeCommon/issues/1597 |  https://github.com/SpongePowered/SpongeCommon/issues/1402\r\n\r\nI propose splitting it up into a Pre-Event to handle the Item Entity pickup and ItemStacks to be added to the Inventory.\r\nAnd the \"normal\" ChangeInventoryEvent.Pickup which will then contain the actual Slot changes.\r\n\r\nIdeas & Comments are welcome.\r\n",
    "head_branch": "feature/pickupevent",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "split up pickup event"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7d0d9087c4d6d37a4d0",
    "number": 1688,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1595)\r\n\r\nThis adds control of direct invulnerability without timing to `InvulnerabilityData` alongside the ticks(being hurt). This allows entities to be impervious to damage **BESIDES damage from `DamageSources.VOID` and from a creative player.** \r\n\r\n**NEED INPUT:** Relating to the lack of protection of damage from creative players(due to this being used for armor stands I'm assuming?), I could change this check, removing the check if it is from a creative player from entity and moving that to armor stand instead. I'm open to feedback on this and please point out if it is used elsewhere in this manner. ",
    "head_branch": "feature/invulnerability-data",
    "is_a_fork": true,
    "comments": [
      "I forgot to add this(will next commit), but the kill command bypasses it as well. This will remain the same though.",
      "Okay should be good on my end for API and implementation. Looking for feedback and if anyone wants to test, that'd be cool."
    ],
    "commit_messages": [
      "Add a new invulnerability data - works towards #1435"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7d1d9087c4d6d37a4d1",
    "number": 1687,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1593) | [SpongeVanilla](https://github.com/SpongePowered/SpongeVanilla/pull/361) | [SpongeForge](https://github.com/SpongePowered/SpongeForge/pull/1847)\r\n\r\nI will finish what I need to tomorrow, but for now looking for any feedback and also where I undoubtedly made mistakes as I haven't really tested much and some stuff was done automatically through IntelliJ refactoring and I may have missed mistakes.\r\n\r\nCloses https://github.com/SpongePowered/SpongeAPI/issues/1684",
    "head_branch": "feature/enchantment-cleanup",
    "is_a_fork": true,
    "comments": [
      "Could we also use a custom ListValue and extra methods in the enchantment data manipulator to turn in some kind of mapped data? So you don't have to loop through all the enchantments to get the level, this could also be optimized internally.\r\n\r\n```java\r\nimport org.spongepowered.api.data.value.mutable.ListValue;\r\nimport org.spongepowered.api.item.EnchantmentType;\r\nimport org.spongepowered.api.item.Enchantment;\r\n\r\nimport java.util.OptionalInt;\r\n\r\npublic interface EnchantmentListValue extends ListValue<Enchantment> {\r\n\r\n    OptionalInt getLevel(EnchantmentType enchantment);\r\n\r\n    void add(EnchantmentType enchantment, int level);\r\n}\r\n```",
      "No we can not @Cybermaxke :( \r\n\r\nVanilla very occasionally will generate with multiple enchants of the same type on an item.\r\n\r\nhttps://www.youtube.com/watch?v=66zHMfi-bsI",
      "What are people's opinions on the minimum enchantment value? Should we allow it to be 0 or above, or 1 and above to match vanilla's enchantments and to avoid possible issues. ",
      "@Meronat We should probably allow only positive levels, no zero. The glowing effects some items have is from an empty enchantment tag list (so the list can exist and be empty, a different concept) so level 0 enchantments are useless",
      "These 4 PRs should be ready for more testing and review. 🥂 ",
      "@Meronat are we exposing the 'natural maximum' enchantment level of each item anywhere? Is it even plausible?",
      "@ryantheleach I believe this is what you mean? https://github.com/Meronat/SpongeAPI/blob/ae6f6d92a545bdd9ff8fd40b08f77c5b724b87f8/src/main/java/org/spongepowered/api/item/enchantment/EnchantmentType.java#L62",
      "https://gaming.stackexchange.com/questions/262999/what-is-the-highest-effective-enchantment-level/263013#263013 States that some out of band negative values may have some effect. Not sure if we should handle them, or reject them outright. How do other parts of the API behave with out of band values?\r\n\r\nAlso don't know if any mods do anything outrageous.",
      "Any final reviews on API or implementation? Changes work for me."
    ],
    "commit_messages": [
      "Merge pull request #1687 from Meronat/feature/enchantment-cleanup\n\nCleanup of enchantments"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7d2d9087c4d6d37a4d2",
    "number": 1686,
    "body": "I'm surprised we didn't notice this earlier, especially concrete and concrete powder.",
    "head_branch": "feature/missing-item-types",
    "is_a_fork": true,
    "comments": [
      "Can we find an easy way to iterate through all the `GLAZED_TERRACOTTA`s? Mojang's removal of meta data is really silly indeed.",
      "> Can we find an easy way to iterate through all the GLAZED_TERRACOTTAs? Mojang's removal of meta data is really silly indeed.\r\n\r\nI anticipate that 1.13 massive changes in the pipeline are going to affect all of this altogether."
    ],
    "commit_messages": [
      "Merge pull request #1686 from Meronat/feature/missing-item-types\n\nAdd missing ItemTypes and add some clarifying Javadocs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7d3d9087c4d6d37a4d3",
    "number": 1685,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1590)\r\n\r\nReplaces it with the already existing #add method due to them accomplishing the same thing and add matching other parts of the API better. Also moves the more detailed Javadocs to #add from #keyValue. Closes #1523",
    "head_branch": "fix/deprecate-keyValue",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1685 from Meronat/fix/deprecate-keyValue\n\nDeprecates #keyValue in ItemStackBuilder"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7d4d9087c4d6d37a4d4",
    "number": 1683,
    "body": "A simple Javadoc fix that has been sitting around for a while. Specifies the unit for the duration of potion effects to avoid confusion.\r\n\r\nFixes #1269 ",
    "head_branch": "fix/potion-effect-duration-javadocs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1683 from Meronat/fix/potion-effect-duration-javadocs\n\nSpecifies the unit of potion effect duration, fixes #1269"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7d5d9087c4d6d37a4d5",
    "number": 1679,
    "body": "[SpongeAPI](https://github.com/SpongePowered/SpongeAPI/pull/1679) | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1582)\r\n\r\nAdds an Event for when the AITarget of an Agent changes.",
    "head_branch": "feature/targetevent",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "add AITargetEvent"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7d6d9087c4d6d37a4d6",
    "number": 1678,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1795)\r\n\r\nMakes StateMatcher serializable.\r\n\r\nI'm a bit unsure about where to register the builder. Anyone mind pointing that out to me? Closes #1528.",
    "head_branch": "feature/serialize-statematcher",
    "is_a_fork": true,
    "comments": [
      "Fixed.",
      "With the flattening coming in 1.13 I see us needing a matcher that fulfills this role, is human-serializable, but uses legacy block properties or Data Keys/Values instead.\r\n\r\nNearly all cases where the old State Matcher would have been useful, are changed for 1.13 to either just work with Blocks rather then blockstates, or no longer have implementation available to query.\r\n\r\ne.g. there is no color property on wool anymore.",
      "> With the flattening coming in 1.13 I see us needing a matcher that fulfills this role, is human-serializable, but uses legacy block properties or Data Keys/Values instead.\r\n> \r\n> Nearly all cases where the old State Matcher would have been useful, are changed for 1.13 to either just work with Blocks rather then blockstates, or no longer have implementation available to query.\r\n\r\nHence why this should be moved to implementation. So that implementation can support whatever we need to support, and warn appropriately.",
      "This is a good start, but I'd like to see a potential BlockMatcher as well, \r\n\r\nThat can handle \r\n1. (1.13) tags e.g. `#minecraft:anvil`\r\n2. BlockTypes `minecraft:anvil` (This is done I believe)\r\n3. partialStates `minecraft:anvil[damage=0]` (This is done I believe)\r\n4. DataKeys, Maybe interacting with https://github.com/SpongePowered/SpongeAPI/pull/1715\r\n\r\nNo matter what, the serialization format has to be relatively simple, and understandable to people who have dealt with minecraft data previously. e.g. /testblock\r\n\r\n@gabizou can this be merged as is for now, (for 7.1)? (except maybe in impl) and work on a generalized BlockMatcher can come later?",
      "I've finished most of the things I've been working on lately so I think I should be able to get some work on this and other stuff I started today and tomorrow.",
      "This needs updating since `BlockStateMatcher` has moved and is now just an interface. I'll gladly merge once the update has been done, and there's a test plugin added to the implementation. I don't believe this needs 1.13 to be available prior to merging.",
      "Don't think I ever mentioned that I updated this."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7d7d9087c4d6d37a4d7",
    "number": 1677,
    "body": "Edit to suit.\r\n\r\nGoal: To make a the JavaDoc a bit more expressive of the result of getCause.  \r\n\r\n",
    "head_branch": "personal/sibomots/update-javadoc-event-cause",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "updated javadoc for Event.getCause (#1677)\n\n* updated javadoc for Event.getCause\r\n\r\n* Fix comments"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7d8d9087c4d6d37a4d8",
    "number": 1676,
    "body": "**API** | [Common](https://github.com/SpongePowered/SpongeCommon/pull/1576)\r\n\r\nFixes #1527",
    "head_branch": "feature/stop-sounds",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1676 from Cybermaxke/feature/stop-sounds\n\nAdded methods to stop sounds that are already playing."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7d9d9087c4d6d37a4d9",
    "number": 1675,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1575)\r\n\r\nAdds an API for the `CooldownTracker`, allowing you to set a cooldown on the use of items. In vanilla this is used for ender pearls, chorus fruit, and shields. An example you could add with this is putting a cooldown on water buckets so people don't spam water everywhere. \r\n\r\nFixes https://github.com/SpongePowered/SpongeAPI/issues/1307",
    "head_branch": "feature/cooldown-tracker",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add cooldown tracker API - Fixes #1307"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7dad9087c4d6d37a4da",
    "number": 1674,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1573)\r\n\r\nAdds the ability to set and retrieve the exhaustion of a damage source. Also adds some Javadocs while I'm at it. I'm open to changes of the defaults for exhaustion and where I set the exhaustion when building the damage sources(refer to common PR).",
    "head_branch": "feature/damage-source-exhaustion",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Address concerns\n\nClean up Javadocs more, switch to following vanilla behavior for exhaustion setting, but allowing them to override it, and address other issues such as wording"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7dbd9087c4d6d37a4db",
    "number": 1673,
    "body": "_TL;DR: This property is unused and unimplemented, and no one I asked knew what it was supposed to represent, so I am creating this PR to either remove it for now or figure out what it is supposed to be for so I can fix it and actually implement it._\r\n\r\nSo I noticed the `DisplacementProperty` is currently unused and unimplemented. I tried tracking down what it was meant to do, but I could not figure it out and it seems to have either been replaced or it was decided it was not needed. After asking around it seems no one else knew exactly it was supposed to be used for either. \r\n\r\nCurrently the Javadocs aren't useful in distinguishing what it exactly is and it is in the base property package which doesn't really make sense either. For the moment with it not implemented, lacking good Javadocs, and little knowledge of what it is for, it is best to remove it.\r\n\r\nIf someone knows what it is supposed to represent, feel free tell me, and I will look into implementing it, moving it to the proper package,adding more useful Javadocs, and then update this PR for that :)\r\n\r\nIf this helps, it seems to have history as [`HarvestingProperty`](https://jd.spongepowered.org/6.0.0/org/spongepowered/api/data/property/item/HarvestingProperty.html) and that is what its Javadocs were copied from that until someone updated them.\r\n\r\n**Edit:** Changed to deprecate instead of remove, in-case anyone is currently using the property.",
    "head_branch": "fix/displacement-property",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1673 from Meronat/fix/displacement-property\n\nDeprecate unused DisplacementProperty for removal in API 8"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7dcd9087c4d6d37a4dc",
    "number": 1664,
    "body": "Hello,\r\nI am a Graduate Student at Oregon State University, studying the impact of autoboxing. I have written a tool, which analyses the source code to find opportunities to refactor the code to a specialised implementation for primitives, thus eliminating autoboxing. All the changes, have been done manually, and have been verified by me.In this pull request I have specialised two instances of FunctionalInterfaces . I have many more such patches, I will be happy to contribute.",
    "head_branch": "bleeding",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7ddd9087c4d6d37a4dd",
    "number": 1660,
    "body": "For reference, some of the discussion in https://github.com/SpongePowered/SpongeAPI/pull/1514 is relevant, but this will fix a more immediate problem.\r\n\r\nThere are two things that this fixes - and I'm PRing because I haven't tested this yet and don't currently have the setup to do so:\r\n\r\n### Some arguments require escaping for an exact match\r\n\r\nTake the fake player `[Mekanism]`. If this is entered into the `UserCommandElement`, this will not match the fake player `[Mekanism]` because the argument is transformed into the regex `^[Mekanism]`, meaning it'll match any player that starts with any of the letters in `Mekanism`. The `PatternMatchingCommandElement` _does_ try to match a choice with an element, but only _after_ filtering choices with the regex.\r\n\r\nThis PR will fix that by ensuring the exact match test happens _before_ the regex is used to filter the elements. This should fix exactness checks for `BlockState` `CatalogTypes` too, which often use `[]` characters.\r\n\r\n### The UserCommandElement tries to use a PlayerCommandElement first - sometimes erroneously matching a Player before a User\r\n\r\nAssume that there are two players that have joined the server: `dualspiral` and `dualspiral_`. Say `dualspiral_` is online and `dualspiral` is offline. Due to the current setup of the `UserCommandElement`, it wraps a `PlayerCommandElement`, which picks out the online \"dualspiral_\" even if only `dualspiral` (or `dualspira` etc.) is typed - which is clearly not intended.\r\n\r\nThis moves the user exactness check to the beginning of the element parser.",
    "head_branch": "fix/command-user",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Ensure that an argument that is an exact match always takes precedence\n\n* Fix UserCommandElement sometimes returning an unexpected Player\n* Remove PlayerCommandElement wrapping.\n* Add TAB_COMPLETION key for the CommandContext"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e7ded9087c4d6d37a4de",
    "number": 1659,
    "body": "[**SpongeAPI**](https://github.com/SpongePowered/SpongeAPI/pull/1659) | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1557)\r\nadds #1658 ",
    "head_branch": "feature/vd",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Per-world view distance\nadds #1658"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7dfd9087c4d6d37a4df",
    "number": 1655,
    "body": "[**SpongeAPI**](https://github.com/SpongePowered/SpongeAPI/pull/1655) | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1554)\r\n\r\n\r\nList of things needing to be replaced:\r\n- [ ] Move all existing usages of `CatalogType#getId()` to `CatalogType#getKey()`",
    "head_branch": "feature/registry",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Clean up last bit of warnings.\n\nSigned-off-by: Gabriel Harris-Rouquette <gabizou@me.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e7e0d9087c4d6d37a4e0",
    "number": 1649,
    "body": "[**SpongeAPI**](https://github.com/SpongePowered/SpongeAPI/pull/1649) | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1531) | [SpongeForge](https://github.com/SpongePowered/SpongeForge/pull/1772)",
    "head_branch": "feature/frame-helper",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1649 from SpongePowered/feature/frame-helper\n\nAdd helper methods to StackFrame"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7e1d9087c4d6d37a4e1",
    "number": 1648,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1528)\r\n\r\nLong story short: Since the Cause and Context PR merge, this annotation which *replaced* `@Named`, we've been unable to reproduce the feature set due to the language requirements that annotations are utilizing constants at *compile* time and not *runtime*. As such, it's not feasible to use for example:\r\n```java\r\n@Listener\r\npublic void onChange(ChangeBlockEvent.Place event, @ContextValue(EventContextKeys.OWNER.getName()) Player player) {\r\n // foo\r\n}\r\n```\r\nThis will result in a compile time error due to the lack of constants in this case.\r\n\r\nThis adds the constants to be used and some fuzzy string matching on the context to perform the job as expected.",
    "head_branch": "feature/context-value-annotation",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7e2d9087c4d6d37a4e2",
    "number": 1645,
    "body": "SpongeAPI | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1519)\r\n\r\nI am sorry to have recreated a PR but I have no news from @kenzierocks : https://github.com/SpongePowered/SpongeCommon/pull/793\r\n\r\nChanges to accommodate the SpongeCommon PR. See that PR for details.",
    "head_branch": "selectors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7e3d9087c4d6d37a4e3",
    "number": 1644,
    "body": "A simple API addition to fix https://github.com/SpongePowered/SpongeAPI/issues/1348, allowing plugins to set transform safely similarly to how you can with location. ",
    "head_branch": "feature/set-transform-safely",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1644 from Meronat/feature/set-transform-safely\n\nAdds a convenience method for setting the transformation of an entity safely"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7e4d9087c4d6d37a4e4",
    "number": 1642,
    "body": "*SpongeAPI* | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1505)\r\n\r\nFor now the only tranformation is for transforming\r\nContainerSlots into InventorySlots\r\n\r\nso that eventSlot.transform().root() is always the actual inventory clicked",
    "head_branch": "feature/realslot",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1642 from SpongePowered/feature/realslot\n\n SlotTransformation and Root Inventory"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7e6d9087c4d6d37a4e5",
    "number": 1639,
    "body": "**SpongeAPI** | [SpongeVanilla](https://github.com/SpongePowered/SpongeVanilla/pull/343)\r\n\r\nThis pull request adds a method that, when a `UseItemStackEvent` gets fired, gets what hand (out of the main hand and the off-hand) the `ItemStack` that caused the event to be fired was on, as a `HandType` instance. This also fixes some typos in the Javadocs in that class.\r\n\r\nThis pull request fixes #1464.",
    "head_branch": "feature/active-hand",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7e7d9087c4d6d37a4e6",
    "number": 1638,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1495) \r\n\r\nThis makes a small Javadocs change and adds the type tokens needed for the parrot variants.\r\n\r\nFor more information see the SpongeCommon PR.",
    "head_branch": "feature/parrot-data",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Small changes for implementing parrot data"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7e8d9087c4d6d37a4e7",
    "number": 1636,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1492)\r\n\r\nThis PR makes some changes to SizeData as the keys were mutable bounded values but the data manipulator methods were just values. I also modified some documentation about how modifying these can not always work as intended. \r\n\r\nPlease read the common PR for more information and provide as much feedback as possible on documentation and functionality. ",
    "head_branch": "feature/size-data",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7e9d9087c4d6d37a4e8",
    "number": 1634,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1491)\r\n\r\nThis moves the implementation of `Title` to SpongeCommon to follow what has been a continued goal of the API. \r\n\r\nThere shouldn't be any breaking changes outside of the removing the static fields, but every method and static method should have a new version. \r\n\r\nIf you believe there should be any other changes while I'm at it, breaking or not, please mention them. ",
    "head_branch": "fix/move-title-implementation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7ead9087c4d6d37a4e9",
    "number": 1633,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1490)\r\n\r\nAdds the data API interfaces for the TagsData often used by scoreboard related commands.\r\n\r\nSupersedes https://github.com/SpongePowered/SpongeAPI/pull/1374 ",
    "head_branch": "feature/scoreboard-tag-data",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Adds data API for scoreboard tags - Closes #1355 (#1633)\n\n* Adds data api for scoreboard tags - Closes #1355\r\n\r\n* Cleanup TagData\r\n\r\n* Migrate to new format for Key declaration"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e7ebd9087c4d6d37a4ea",
    "number": 1632,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1488)\r\n\r\nThis pull request removes a method from `SleepingData` and moves it into its own `DataManipulator` called `IgnoreSleepingData`. It also adds a `Key` to represent it.",
    "head_branch": "sleeping-data-impl",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Split SleepingData into SleepingData and IgnoreSleepingData (#1632)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7ecd9087c4d6d37a4eb",
    "number": 1630,
    "body": "This is `default`-implemented, and uses an optimized implementation method that only checks entities in relevant chunks. `Entity.getNearbyEntities()` has been updated to use it.\r\n\r\nSupersedes SpongePowered/SpongeCommon#1479.",
    "head_branch": "get-nearby-entities",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1630 from SpongePowered/get-nearby-entities\n\nAdd EntityUniverse.getNearbyEntities()."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7edd9087c4d6d37a4ec",
    "number": 1629,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7eed9087c4d6d37a4ed",
    "number": 1627,
    "body": "Continues on from #1524 (and #1411)\r\n\r\n### Why only an update event?\r\nMore specific update events are hard to (accurately) implement, and I personally don't think they'll get used. The PermissionService API is already pretty confusing to understand (especially to implement) and I think adding events into the mix will make things significantly more difficult.\r\n\r\nAdding more specific stuff like `PermissionSetEvent` raises questions about what to do for bulk changes, changes which are made offline, etc.\r\n\r\nIn my opinion, a simple update event is all that is needed. It allows plugins which use permissions for data storage to update any caches they may have when data is updated.\r\n\r\n#### Should the event be called async?\r\nThe API was recently updated to use CompletableFutures for SubjectData changes, so imo, it makes sense for the event to **always** be called async.\r\n\r\nConsistency is obviously important, it can't be sometimes async and sometimes not. I'm not sure if async events would be a new addition for Sponge, but I assume they're supported? (in other words, is the EventManager thread safe?)\r\n\r\nI think that's about it.",
    "head_branch": "feature/perms-events",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1627 from lucko/feature/perms-events\n\nAdd SubjectDataUpdateEvent for permission changes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e7efd9087c4d6d37a4ee",
    "number": 1624,
    "body": "*SpongeAPI* | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1401)\r\n\r\nAdd support for User Inventories.\r\nAlso some missing parts of equipable.",
    "head_branch": "feature/userinventory",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1624 from SpongePowered/feature/userinventory\n\nOffline User Inventory + Equipable"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7f0d9087c4d6d37a4ef",
    "number": 1622,
    "body": "SpongeAPI | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1475)\r\n\r\nReplaces https://github.com/SpongePowered/SpongeAPI/pull/1539\r\n\r\nAlso cleans up some Javadocs, adds some convenience methods, and organizes the class.\r\n\r\nThere is a breaking change in that the sendTo method that accepts a `MessageChannel` in the builder was removed as it makes it seem like it sends it to the channel as one, but really it just sends it to each member separately. I doubt there is any usage of this method, and they can easily switch to the method which accepts an `Iterable` of `MessageReceiver`s.",
    "head_branch": "feature/specific-page",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1622 from Meronat/feature/specific-page\n\nAllow sending a specific page of a pagination list"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7f1d9087c4d6d37a4f0",
    "number": 1620,
    "body": "**API** | [Common](https://github.com/SpongePowered/SpongeCommon/pull/1772)\r\n\r\nThis is a continuation of the PR #1198, this is still WIP\r\n\r\nThe basic concept is still there, but I redesigned the builder pattern to allow more effective usage of generics. This builder system also supports the generation of `VariantData`, `ListData` and `MappedData` on top of the default `DataManipulator`, altough these only support one `Key`.\r\n\r\nA example plugin:\r\n```java\r\n@Plugin(id = \"data_test\", name = \"Data Test\", description = \"A plugin to custom data.\")\r\npublic class DataTest {\r\n\r\n    public static Key<ListValue<String>> LINES_KEY = DummyObjectProvider.createFor(Key.class, \"LINES_KEY\");\r\n    public static Key<Value<String>> AUTHOR_KEY = DummyObjectProvider.createFor(Key.class, \"AUTHOR_KEY\");\r\n    public static Key<OptionalValue<String>> PUBLISHER_KEY = DummyObjectProvider.createFor(Key.class, \"PUBLISHER_KEY\");\r\n    public static Key<Value<Integer>> REVISIONS_KEY = DummyObjectProvider.createFor(Key.class, \"REVISIONS_KEY\");\r\n    public static Key<Value<Boolean>> MY_BOOLEAN_KEY = DummyObjectProvider.createFor(Key.class, \"MY_BOOLEAN_KEY\");\r\n\r\n    public static DataRegistration<BookData, ImmutableBookData> MY_BOOK_DATA;\r\n    public static DataRegistration<? extends VariantData<Boolean, ?, ?>, ? extends ImmutableVariantData<Boolean, ?, ?>> MY_BOOLEAN_DATA;\r\n\r\n    @Listener\r\n    public void onRegisterKeys(GameRegistryEvent.Register<Key<?>> event) {\r\n        LINES_KEY = Key.builder()\r\n                .type(new TypeToken<ListValue<String>>() {})\r\n                .query(DataQuery.of(\"Lines\"))\r\n                .name(\"Lines\")\r\n                .id(\"lines\")\r\n                .build();\r\n        event.register(LINES_KEY);\r\n        AUTHOR_KEY = Key.builder()\r\n                .type(new TypeToken<Value<String>>() {})\r\n                .query(DataQuery.of(\"Author\"))\r\n                .name(\"Author\")\r\n                .id(\"author\")\r\n                .build();\r\n        event.register(AUTHOR_KEY);\r\n        PUBLISHER_KEY = Key.builder()\r\n                .type(new TypeToken<OptionalValue<String>>() {})\r\n                .query(DataQuery.of(\"Publisher\"))\r\n                .name(\"Publisher\")\r\n                .id(\"publisher\")\r\n                .build();\r\n        event.register(PUBLISHER_KEY);\r\n        REVISIONS_KEY = Key.builder()\r\n                .type(new TypeToken<Value<Integer>>() {})\r\n                .query(DataQuery.of(\"Revisions\"))\r\n                .name(\"Revisions\")\r\n                .id(\"revisions\")\r\n                .build();\r\n        event.register(REVISIONS_KEY);\r\n        MY_BOOLEAN_KEY = Key.builder()\r\n                .type(new TypeToken<Value<Boolean>>() {})\r\n                .query(DataQuery.of(\"MyBoolean\"))\r\n                .name(\"MyBoolean\")\r\n                .id(\"my_boolean\")\r\n                .build();\r\n        event.register(MY_BOOLEAN_KEY);\r\n    }\r\n\r\n    @Listener\r\n    public void onRegisterData(GameRegistryEvent.Register<DataRegistration<?,?>> event) {\r\n        MY_BOOK_DATA = GenericDataGenerator.builder()\r\n                .key(LINES_KEY, new ArrayList<>())\r\n                .key(AUTHOR_KEY, \"Unknown\")\r\n                .key(PUBLISHER_KEY, Optional.empty())\r\n                .key(REVISIONS_KEY, 1)\r\n                .interfaces(BookData.class, ImmutableBookData.class)\r\n                .id(\"book_data\")\r\n                .name(\"Book Data\")\r\n                .build();\r\n        event.register(MY_BOOK_DATA);\r\n\r\n        final BookData bookData = MY_BOOK_DATA.getDataManipulatorBuilder().create();\r\n        System.out.println(\"DEFAULT AUTHOR: \" + bookData.getAuthor());\r\n        System.out.println(\"DEFAULT PUBLISHER: \" + bookData.getPublisher());\r\n        bookData.setAuthor(\"Cybermaxke\");\r\n        bookData.setPublisher(\"Cybermaxke\");\r\n        System.out.println(\"NEW AUTHOR: \" + bookData.getAuthor());\r\n        System.out.println(\"NEW PUBLISHER: \" + bookData.getPublisher());\r\n\r\n        MY_BOOLEAN_DATA = VariantDataGenerator.builder()\r\n                .key(MY_BOOLEAN_KEY)\r\n                .defaultValue(false)\r\n                .id(\"my_boolean_data\")\r\n                .name(\"My Boolean Data\")\r\n                .build();\r\n        event.register(MY_BOOLEAN_DATA);\r\n    }\r\n}\r\n```\r\n```java\r\npublic interface BookData extends DataManipulator<BookData, ImmutableBookData> {\r\n\r\n    @KeyValue(\"lines\")\r\n    List<String> getLines();\r\n\r\n    @KeyValue(\"author\")\r\n    String getAuthor();\r\n\r\n    @KeyValue(\"author\")\r\n    void setAuthor(String author);\r\n\r\n    @KeyValue(\"publisher\")\r\n    Optional<String> getPublisher();\r\n\r\n    @KeyValue(\"publisher\")\r\n    void setPublisher(@Nullable String publisher);\r\n}\r\n```\r\n```java\r\npublic interface ImmutableBookData extends ImmutableDataManipulator<ImmutableBookData, BookData> {\r\n\r\n}\r\n```",
    "head_branch": "feature/data-generation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7f2d9087c4d6d37a4f1",
    "number": 1616,
    "body": "*SpongeAPI* | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1451)\r\n\r\nAdds `intersect` `union` and `containsInventory` to the Inventory API\r\n\r\nIssue: https://github.com/SpongePowered/SpongeAPI/issues/1615\r\n\r\n@Mumfrey ",
    "head_branch": "feature/invsetops",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7f3d9087c4d6d37a4f2",
    "number": 1612,
    "body": "**API** | [Common](https://github.com/SpongePowered/SpongeCommon/pull/1441)\r\n\r\nChanges:\r\n\r\n- Make the `getCount`/`getQuantity` and `getItem`/`getType` method naming consistent between the `ItemStack` and `ItemStackSnapshot`.\r\n- Use `Instant` instead of `Date` in the `GameProfileCache`. Fixes #1336? in case that `TemporalUnit` isn't desired in the Scheduler.`",
    "head_branch": "fix-itemstacksnapshot-inconsistencies",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7f4d9087c4d6d37a4f3",
    "number": 1610,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1440)\r\n\r\nWhen inventories were first added, they had support for querying for sub-inventories based on various attributes about them. One of those attributes was the type of `ItemStack` they contained. However, sometimes, developers want to use the quantity of the `ItemStack`, and sometimes they want to ignore it but keep the data on it. Originally, the way to specify this was through a quantity of `-1`. Then Minecraft dropped support for negative quantities. Sponge left in its wake a `queryAny()` method that ignored the quantity. In a discussion earlier today, Mumfrey decided this system needed to change, and I decided to be the one to write it. This version exposes a `QueryOperation` that tells the query how to treat each argument. It should also be more flexible than the current system in case Minecraft breaks some other behavior in the future.\r\n\r\nCloses https://github.com/SpongePowered/SpongeCommon/issues/1431.",
    "head_branch": "inventory-queries",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Rewrite inventory queries."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7f5d9087c4d6d37a4f4",
    "number": 1609,
    "body": "**API** | [Common](https://github.com/SpongePowered/SpongeCommon/pull/1438)\r\n\r\nFixes #1365\r\n\r\nAdditions:\r\n\r\n- Play/stop a `RecordType` at a block position.\r\n- Retrieve the `RecordType` from a `ItemStack` or `ItemType`.",
    "head_branch": "feature/jukebox",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1609 from Cybermaxke/feature/jukebox\n\nAdded a Record API"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7f6d9087c4d6d37a4f5",
    "number": 1608,
    "body": "**API** | [Common](https://github.com/SpongePowered/SpongeCommon/pull/1437)\r\n\r\nFixes #1595 \r\n\r\nChanges:\r\n\r\n- Added the missing `InstrumentType`s.\r\n- Added `InstrumentProperty`, which can be used to retrieve a `InstrumentType` from a `BlockType`. For example `BlockTypes.BONE_BLOCK` would return `InstrumentTypes.XYLOPHONE`.\r\n- Added DummyObjectProviders for SoundCategories.",
    "head_branch": "feature/instruments",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1608 from Cybermaxke/feature/instruments\n\nExpand the Instrument/Noteblock API."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7f7d9087c4d6d37a4f6",
    "number": 1607,
    "body": "**API** | [Common](https://github.com/SpongePowered/SpongeCommon/pull/1435)\r\n\r\nThis adds a new `InjectionPoint` type that can be injected by Guice, it comes with a fix that is implemented in the Common.\r\n\r\nThe API side of the issue will be on hold for now, once https://github.com/google/guice/issues/1121 is resolved can we safely include this.",
    "head_branch": "fix-guice-injection-points",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7f8d9087c4d6d37a4f7",
    "number": 1605,
    "body": "Somehow I managed to completely ruin the git log on #1438, so I'm starting fresh.\r\nChangelog as requested by @dualspiral:\r\n\r\n* Change `entity` to allow for `Class` or `EntityType` specifier \r\n* Add `entityOrTarget` (which can be specified with `Class` or `EntityType`) [`Entity`]\r\n* Add `url` [`URL`]\r\n* Add `ip` [`InetAddress`]\r\n* Add `ipOrSource` [`InetAddress`]\r\n* Add `bigDecimal` [`BigDecimal`]\r\n* Add `bigInteger` [`BigInteger`]\r\n* Add `dataContainer` [`DataContainer`]\r\n* Add `uuid` [`UUID`]\r\n* Add `text` [`Text`]\r\n* Add `dateTime` [`LocalDateTime`]\r\n* Add `dateTimeOrNow` [`LocalDateTime`]\r\n* Add `duration` [`Duration`]\r\n* Add `withSuggestions` (replaces the existing suggestions with new ones) [dynamic]\r\n* Add `withConstrainedSuggestions` (constrains the existing suggestions) [dynamic]",
    "head_branch": "feature/more-arguments",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add some more arguments to GenericArguments (#1605)\n\n* Add some more arguments to GenericArguments\r\n\r\n* Add newline\r\n\r\n* Add entity() with EntityType and text() with TextSerializer\r\n\r\n* Add entityOrTarget() with EntityType\r\n\r\n* Update some documentation\r\n\r\n* Fix misc stuff\r\n\r\n* Improve entity filter code\r\n\r\n* Account for crazy people\r\n\r\n* Fix import order\r\n\r\n* Fix NPE for entity argument\r\n\r\n* Fix incorrect parse type assumption\r\n\r\n* Fix silly list things\r\n\r\n* Suppress unwanted subclassing behavior"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7f9d9087c4d6d37a4f8",
    "number": 1602,
    "body": "[**SpongeAPI**](https://github.com/SpongePowered/SpongeAPI/pull/1602) | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1426) | [SpongeForge](https://github.com/SpongePowered/SpongeForge/pull/1636) | [SpongeVanilla](https://github.com/SpongePowered/SpongeVanilla/pull/337)\r\nhttps://help.github.com/articles/about-codeowners/",
    "head_branch": "github/codeowners",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add gabizou related codeowners.\n\nSigned-off-by: Gabriel Harris-Rouquette <gabizou@me.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7fad9087c4d6d37a4f9",
    "number": 1598,
    "body": "SpongeAPI | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1416)\r\n\r\nCloses #1596",
    "head_branch": "feature/treasure-enchantments",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge addition of `isTreasure` method to Enchantment (pr #1598 - adds #1596)\n\n* Allow checking if an enchantment is a treasure enchantment or not\r\n\r\n* Fix method name"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7fbd9087c4d6d37a4fa",
    "number": 1591,
    "body": "*SpongeAPI* | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1410) | [SpongeForge](https://github.com/SpongePowered/SpongeForge/pull/1603) | [Issue](https://github.com/SpongePowered/SpongeCommon/issues/1402)\r\n\r\nAdding a PreTransfer event as Hopper are VERY spammy.\r\n\r\n",
    "head_branch": "feature/transferevent",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add Inventory Pre Transfer Event"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7fcd9087c4d6d37a4fb",
    "number": 1587,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1400) | [SpongeForge](https://github.com/SpongePowered/SpongeForge/pull/1667)\r\n\r\nThis is a new API and implementation of a high-level command system to bring the design inline with Sponge's general design and to try to resolve some of the perceived weakness of the system. It was one of the things I said I'd look into when I joined the Sponge team... so here we go!\r\n\r\n## Motivation & Goals\r\n\r\nThe command system is out of place in the current ecosystem and parts of it can be difficult to use. It doesn't have much in the way of abstraction, and this is hindering potential development of it. I've also seen quite a few plugins eschew the argument system, preferring to just split the string and doing the parsing themselves. Consider the following points:\r\n\r\n* It was built early in Sponge's development (API 2, I believe), and hasn't really seen much daylight since (unlike Texts, which is effectively on version three).\r\n* The argument (parameter) building is just a load of wrapped elements, and can be difficult to follow (one example of this is [Nucleus' TP command](https://github.com/NucleusPowered/Nucleus/blob/sponge-api/5/src/main/java/io/github/nucleuspowered/nucleus/modules/teleport/commands/TeleportCommand.java#L72-L105))\r\n* Many many objects can be created for each command, most of them duplicates of one another - we can try to reuse some simpler objects and potentially reduce Sponge's footprint a little bit.\r\n* It's all API implemented, and cannot take advantage of optimisations through Sponge implementation, nor is it easy to make some changes without causing a major breakage (though this may be by design, see the consideration below)\r\n* There are few interfaces, mostly final classes, and this makes it hard to make a slow transition to newer structures, effectively making it more difficult to make positive changes in a none breaking manner.\r\n\r\nSo, as a result, I've been playing about with creating a new high level system to try to make it easier to resolve, if not resolve, some of the issues that currently plague the system.\r\n\r\n**It's not finished, and it certainly doesn't work right now**, but with community help, we can flesh out a system that is hopefully more flexible and more usable than before.\r\n\r\nIt's also possible that this ends up being a very bad idea and/or _more_ complex than before and thus doesn't get merged. A major goal is to make the command system, particularly parameters/arguments a little easier to work with, if we can't do that, this PR will become worthless.\r\n\r\nAnother goal is to modularise the system enough so that we can build other systems around it with ease, for example, some annotation based system could make use of the value parameters independently, and modifiers can be specified independently, without worrying about how the wrapping might otherwise work. However, that's further down the road.\r\n\r\n## Consideration: do we _want_ some of this to be put into Common?\r\n\r\n* The purist point of view is that the Sponge API should not contain significant implementation detail. Little implementation should be in the API, except for things that would be of great use of plugin developers (see the PatternMatchingValueParameter, as an example).\r\n* Having implementation in Common allows us to use the full power of the Sponge system, having wider use of the backend to be able to shortcut some things we might otherwise have had to do in the API.\r\n* <s>Third party implementations, on the other hand, may benefit from API implementation - this would make the command system consistent amongst different _platforms_, and as it doesn't need to rely on Minecraft, it doesn't matter where it goes. However, this means another library to consider.</s>\r\n* <s>A halfway house would be to make the implementation part of the command system an external library shaded in, and only otherwise depends on the API - third party implementations can then depend on our solution, whilst keeping the API clean for developers to work against.</s>\r\n\r\n<s>This is something that needs some careful consideration, but right now, I'm going to keep things split API/Common, because I still think that having the API interfaces and the implementation separate as much as possible is a plus, and this way, it forces me to think about how to keep things separate. It shouldn't be too difficult to move things around if necessary.</s>\r\n\r\nAnswer: yes. This is being split into API and Common. There will be a couple of minor useful classes for developers to use in the API, but the bulk of the implementation will be moved into Common.\r\n\r\n## Heads up! This will break almost every plugin out there.\r\n\r\nIt has been decided that we’re just going to break things. Plugins that use commands will break when this is pulled, no way around that. However, as discussion has shown: it’s the preferred chioce and it makes things much easier on us.\r\n\r\n## This is where the developer community comes in!\r\n\r\nThis PR is in **very early stages**, as such, I'm looking for feedback and suggestions on the direction of travel of the API. Things will change, ideas will come and go. It doesn't quite need a review yet, but feedback on the ideas are more than welcome. I will try to write up specifications of what I'm doing as I go in the comments, ready for (constructive) feedback and ideas.",
    "head_branch": "refactor/commands-to-impl-1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7fdd9087c4d6d37a4fc",
    "number": 1582,
    "body": "*SpongeAPI*|[SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1395)|[SpongeForge](https://github.com/SpongePowered/SpongeForge/pull/1593)\r\n\r\nContinuation of https://github.com/SpongePowered/SpongeAPI/pull/1449 of https://github.com/SpongePowered/SpongeAPI/pull/1098.\r\nUpdated for MC 1.12\r\n___\r\n\r\nRecipeAPI:\r\n\r\n  `Recipe`: Base Recipe only has a basic `getExemplaryResult()`. For most Recipe this is also the actual result but it may vary.\r\n  `CraftingRecipe`: Recipes for a Crafting Window.\r\n  `Ingredient`: Predicate to match in CraftingRecipes.\r\n  `ShapedCraftingRecipe`: Ingredients must be arranged specifically\r\n  `ShaplessCraftingRecipe`: Ingredients can be arranged randomly\r\n  `SmeltingRecipe`: Recipes for Furnaces (uses ITemStacks not Ingredients)\r\n  `RecipeRegistry`: Base Registry for Recipes\r\n  `CraftingRecipeRegistry`: Registration of CraftingRecipes\r\n  `SmeltingRecipeRegistry`: Registration of SmeltingRecipes\r\n  `CraftingResult`: Result of a crafted Recipe \r\n___\r\n\r\nExample Usage\r\n\r\n```java\r\n// Shapeless\r\nSponge.getRegistry().getCraftingRecipeRegistry().register(\r\n                CraftingRecipe.shapelessBuilder()\r\n                        .addIngredient(Ingredient.of(APPLE))\r\n                        .result(ItemStack.of(APPLE, 2))\r\n                        .build(\"moreapples\", plugin));\r\n// Shaped\r\n\r\nSponge.getRegistry().getCraftingRecipeRegistry().register(\r\n        CraftingRecipe.shapedBuilder()\r\n                .aisle(\"aa\", \"as\", \" s\")\r\n                .where('a', Ingredient.of(DIAMOND_AXE))\r\n                .where('s', Ingredient.of(LOG, LOG2))\r\n                .result(ItemStack.of(DIAMOND_AXE, 1))\r\n                .build(\"cheapaxe\", plugin));\r\n```\r\n\r\nOR implement the CraftingRecipe yourself to allow customizing the result based on input:\r\n![img](http://i.imgur.com/YWlnCLZ.png)\r\n___\r\n\r\nTODO and Discuss:  \r\n\r\n* [x] Recipe removal? (RecipeRegistry#remove)\r\n* [x] Expose Recipe Group in API? (Used on the client to decide in what tab a recipe is shown)\r\n* [x] Expose `Ingredient.matchingStacks` in API? (displayedItems) used client side to show the items used in the recipe\r\n* [x] setting matchingstacks in IngredientBuilder?\r\n* [x] add ShapedRecipeBuilder set Ingredients with a Map<String/Char, Ingredient>?\r\n* [x] IngredientBuilder#from cannot always recreate a passed Ingredient. Mention this in builder.\r\n* [x] Chars in aisle without assigned ingredients? Exception except space with is default Ingredient.NONE\r\n* [x] RecipeBuilders convenience method with Predicate for adding ingredients?\r\n* [x] SmeltingRecipes dont use ingredients.\r\n* [x] expose IRecipe.isHidden? or always set to true? otherwise `doLimitedCrafting` gamerule could block all recipes added via API.\r\n* [x] Javadocs everywhere\r\n\r\n___\r\n\r\nIdeas for further enhancement:\r\nsee https://github.com/SpongePowered/SpongeAPI/issues/1585",
    "head_branch": "feature/recipe",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7fed9087c4d6d37a4fd",
    "number": 1578,
    "body": "This adds some methods to the extent factory that allow setting the minimum point of the buffers. Currently you can only create buffers that are based at the origin of the world which makes them more annoying to work with when mirroring some part of the world without applying a transformation at when going between the world and the buffer.",
    "head_branch": "feature/extent-factory-mins",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e7ffd9087c4d6d37a4fe",
    "number": 1577,
    "body": "Fixes #1557.",
    "head_branch": "fix/transform-addtranslation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge Transform rotation and scale preservation fix (#1577)\n\nPreserve the rotation and scale in addTranslation()."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e800d9087c4d6d37a4ff",
    "number": 1572,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1388)\r\n\r\nThis is a response to the feature request #1560, adding a method to Extent to get the y level that precipitation ends.",
    "head_branch": "feature/precipitation-height",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e801d9087c4d6d37a500",
    "number": 1570,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e802d9087c4d6d37a501",
    "number": 1566,
    "body": "Adds https://github.com/SpongePowered/SpongeCommon/issues/1374.",
    "head_branch": "feature/epmc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e803d9087c4d6d37a502",
    "number": 1565,
    "body": "Simple spelling mistake fix.",
    "head_branch": "bleeding",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e804d9087c4d6d37a503",
    "number": 1563,
    "body": "**Sponge API** | [Sponge Common](https://github.com/SpongePowered/SpongeCommon/pull/1362) | [Original Issue](https://github.com/SpongePowered/SpongeCommon/issues/848)\r\n\r\nThis PR opens up parts of the Sponge `TeleportHelper` to plugins and mods that support Sponge, allowing plugins reap the benefits of the TeleportHelper, whilst controlling what they consider to be a safe location for a player to warp to.\r\n\r\nA <s>`TelportHelperKernel`</s> `TeleportHelperFilter` can be provided and registered with Sponge to control the following:\r\n\r\n* Whether a `BlockState` is a suitable floor material.\r\n* Whether a `BlockState` is a safe, passable material, that is, a player can travel through such a material and not get hurt.\r\n* The above checks can be overriden for specific locations, for example, if you want to check to see if a location can see the sky (I use this in the surface only kernel, so an example of this can be seen in the SpongeCommon PR).\r\n* Multiple filters can be specified, _all_ must return a positive result for a location to be accepted as a safe location.\r\n\r\nI've also added two parameters to the `TeleportHelper#getSafeLocation` methods, one that takes an integer that specifies how far below a point the floor can be, and one that accepts the kernel.\r\n\r\nOne thing I haven't worked out yet, and is more one for SpongeCommon, configurable default blacklist for blocks, but as that is configuration and implementation, that does not come into play here.",
    "head_branch": "feature/expand-tp-helper",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add TeleportHelperFilter for TeleportHelper customisation.\n\nSome defaults have been provided, but plugins can additionally register their own TeleportHelperFilters for use with the TeleportHelper. A teleport helper filter has also been added for checking the configuration for blacklisted blocks."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e805d9087c4d6d37a504",
    "number": 1554,
    "body": "**API** | [Common](https://github.com/SpongePowered/SpongeCommon/pull/1645) | [Forge](https://github.com/SpongePowered/SpongeForge/pull/1913) | [Vanilla](https://github.com/SpongePowered/SpongeVanilla/pull/363)\r\n\r\nThis PR adds the advancements API, with additions extra to the features provided in vanilla Minecraft. Implementations will follow when 1.12 is released.\r\n\r\nThe `AdvancementTree` represents a advancement Tab, it can be build with a root advancement. `Advancement`s that are attached to the root advancement will be present in the tree. The layout of the tree can also be customized, which means that you can move the advancements around in the tab though a `AdvancementTreeEvent.GenerateLayout` event.\r\n\r\n`AdvancementCondition`s are the conditions that should be met before an advancement is unlocked. I provided AND and OR operations that can be applied. There is not limit in the complexity like in the json files.\r\n\r\nThere is also `Trigger`s that can be applied to the `AdvancementCondition`, the details of vanilla triggers are not exposed in the API (the configuration). However you can create your own `Trigger`s which will be parsed in the advancement json files.\r\nhttp://minecraft.gamepedia.com/Advancements#Triggers\r\n\r\nAdditionally there is a `ScoreAdvancementCriterion` which requires a specific goal value to be achieved before it gets done, this is also supported by triggers. The trigger will need to trigger the criteria multiple times until the goal is reached, this is also supported in the json files by adding a `trigger_times` property to the trigger.\r\n\r\nExtras:\r\n* Generic Events - Used for the registrations of advancements and trees.\r\n* `ScoreAdvancementCriterion` - Allows you to provide a goal value and when the score reaches its goal the advancement will be unlocked. Also supported in json files.\r\n* Complex AND and OR condition operations\r\n* Custom triggers (configurable) and supported in json\r\n* Customize the advancement tree layout.",
    "head_branch": "feature/advancements",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Moved the arguments out of the build methods to be consistent in the API.\n\nBe consistent with added key builder."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e806d9087c4d6d37a505",
    "number": 1553,
    "body": "No need to update sponge common \r\nhttps://github.com/SpongePowered/SpongeCommon/blob/bleeding/src/main/java/org/spongepowered/common/item/inventory/adapter/impl/slots/SlotAdapter.java\r\n\r\nSlot adapter already has the member, this pr just adds needed method into the Slot interface which allows us to access the ordinal number of a slot.\r\n\r\nIf anyone want to access slot's id, or whatever you call it, now the only possible way is to add spongevanilla/forge into your dependencies and typecast to slotadapter. Which is annoing to do.",
    "head_branch": "feature/exopse-slot-ordinal-via-interface",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e807d9087c4d6d37a506",
    "number": 1552,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1335)\r\n\r\nAt the moment this is still hardcoded in some locations throughout Minecraft and does not seem to be saved with the world anyway, so I feel it is best to just have a method to get it right now and not set it.\r\n\r\nHopefully Mojang will make it more flexible as time goes on so we can add a setter method as well. At that point it would probably move to `WorldArchetype` too. \r\n\r\nThis can be useful for generation logic and more.\r\n\r\nExample plugin:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/18372958/25768792/baac9252-31d0-11e7-9434-92a9f1a5effd.png)\r\n\r\n![image](https://cloud.githubusercontent.com/assets/18372958/25768788/af4078d4-31d0-11e7-91ad-f22bff604d20.png)\r\n\r\nFixes https://github.com/SpongePowered/SpongeAPI/issues/1371",
    "head_branch": "feature/get-sea-level",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add a get method for a world's sea level (#1552)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e808d9087c4d6d37a507",
    "number": 1544,
    "body": "Adds an extended `StringDataFormat` interface for `DataFormat` that allows reading/writing data for text formats like HOCON or JSON much more efficiently directly from/to a string or a reader/writer instead of always going through a binary `InputStream`.\r\n\r\nNot entirely sure about the naming, open for alternative suggestions for the interface and/or the new methods.\r\n\r\nImplementation PR: https://github.com/SpongePowered/SpongeCommon/pull/1318",
    "head_branch": "feature/text-data-format",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add StringDataFormat that allows reading/writing data from text I/O"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e809d9087c4d6d37a508",
    "number": 1541,
    "body": "It's perfectly feasible I missed some out - feel free to mention any others, and I'll add them ;)",
    "head_branch": "pr/func-int",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Mark functional interfaces"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e80ad9087c4d6d37a509",
    "number": 1540,
    "body": "[**SpongeAPI**](#) | [SpongeForge](https://github.com/SpongePowered/SpongeForge/pull/1445)\r\n\r\nI'm going to start with some basic client support right now. Currently there is getting the client world, player, loading a save, joining a world, as well as fetching the integrated server (which can also be done from Game.\r\n",
    "head_branch": "feature/client",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e80bd9087c4d6d37a50a",
    "number": 1539,
    "body": "This exposes a method to send a specific page of a pagination.\r\n\r\n",
    "head_branch": "fix-help",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e80cd9087c4d6d37a50b",
    "number": 1537,
    "body": "[**SpongeAPI**](https://github.com/SpongePowered/SpongeAPI/pull/1537) | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1304)",
    "head_branch": "feature/client",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e80dd9087c4d6d37a50c",
    "number": 1536,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1536) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/1302) | [Forge](https://github.com/SpongePowered/SpongeForge/pull/1435) | [Vanilla](https://github.com/SpongePowered/SpongeVanilla/pull/311)\r\n\r\nTest plugin:\r\n```java\r\nimport org.slf4j.Logger;\r\nimport org.spongepowered.api.asset.Asset;\r\nimport org.spongepowered.api.asset.AssetId;\r\nimport org.spongepowered.api.config.DefaultConfig;\r\nimport org.spongepowered.api.network.ChannelBinding;\r\nimport org.spongepowered.api.network.ChannelId;\r\nimport org.spongepowered.api.plugin.Plugin;\r\n\r\nimport java.nio.file.Path;\r\n\r\nimport javax.inject.Inject;\r\n\r\n// API-1536\r\n// @formatter:off\r\n@Plugin(\r\n    id = \"miserable\"\r\n)\r\n// @formatter:on\r\npublic class MiserableTest {\r\n\r\n    @Inject\r\n    private Logger logger;\r\n    // We can inject a RawDataChannel for the \"BungeeCord\" channel.\r\n    @ChannelId(\"BungeeCord\")\r\n    @Inject\r\n    private ChannelBinding.RawDataChannel bungeeCordChannel;\r\n    // We can inject an asset from our assets directory (assets/miserable).\r\n    @AssetId(\"help.json\")\r\n    @Inject\r\n    private Asset helpAsset;\r\n    // We can inject a private (not shared) configuration file.\r\n    @DefaultConfig(sharedRoot = false)\r\n    @Inject\r\n    private Path privateDefaultConfigPath;\r\n}\r\n```",
    "head_branch": "feature/inject-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Store all global instances on Sponge to simplify initialization"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e80ed9087c4d6d37a50d",
    "number": 1534,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1534) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/1296)\r\nAdds #1533\r\n\r\nTest plugin: https://gist.github.com/kashike/bb89aee16738a68f078a6e0c82432583",
    "head_branch": "feature/bossbar2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add some helper methods for working with ServerBossBars (#1534)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e80fd9087c4d6d37a50e",
    "number": 1532,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1294) | [SpongeVanilla](https://github.com/SpongePowered/SpongeVanilla/pull/310) | [SpongeForge](https://github.com/SpongePowered/SpongeForge/pull/1427)\r\n\r\n**Note:** This write-up is outdated at the moment. I am getting much closer and will update this soon once I get a more stable API and properly working implementation to show it off. We're getting there my friends :)\r\n\r\nSo this is something I have been dabbling around with and it is still **work in progress**, but I would love to get some feedback from you while I continue this process. As a whole, I have looked at other similar APIs from the past and other proposals such as @pie-flavor's [Dialogue API](https://github.com/SpongePowered/SpongeAPI/pull/1295) which I especially found a lot of initial inspiration from as it seemed to match with many of Sponge's conventions and be fairly easy to use.\r\n\r\nSo far I have tested this on SpongeVanilla and it works relatively well so far, outside of a few issues, meeting all of my initial goals and more.\r\n\r\nA `Conversation` is simply a form of back and forth between two or more people. With this API, it allows plugin developers to create one of their own, with any amount of `Conversant`s if they so desire. A common use case is to collect information over a plethora of questions, to create something such as a new world. This can replace a long command with a lot of different arguments and flags. Each argument with a conversation would simply be a new `Question`. \r\n\r\nA `Conversation` is an active conversation or one that has recently ended and is still being manipulated. A `ConversationArchetype` is what these are started from and can easily be built by calling `ConversationArchetype.builder()` with many of the values having a default. \r\n\r\nAs plugins handle answers to questions, they can either store the data they collect themselves or store it with data queries within the `DataContainer` present in the `Conversation`, by using `Conversation#getContext`.\r\n\r\nOne goal of this PR is to allow the use of `GenericArguments` and `CommandElement`s as a whole, as that system is already pretty great and extensive, instead of having a separate idea of different kinds of `Prompt`s. This will also allow me to add support for tab completion easily soon and makes the whole idea of conversations similar to what developers are already used to with commands.\r\n\r\nMuch of it branches off there and the Javadocs should do it justice until I have some more time to add to this PR description, but if you have questions feel free to ask.\r\n\r\nNew Goals -\r\n\r\n- [ ] Allow other types of `Conversant`s, maybe such as `ConsoleSource` and `RconSource`.\r\n\r\n- [x] Possibly keep weak references to `Conversant`s, so if they die or their object is recreated the conversation can remove them. Looking for input on a good solution here.\r\n\r\n- [x] Utilize the ability of the `CommandElement` of the current question to allow for tab completion.\r\n\r\nHere is a small example I threw together quickly:\r\n```java\r\nfinal Question two = Question.builder()\r\n            .id(\"seed\")\r\n            .argument(GenericArguments.longNum(Text.of(\"seed\")))\r\n            .prompt(Text.of(\"Enter desired seed:\"))\r\n            .handler((convo, conversant, quest, context) -> {\r\n                Optional<Long> optionalLong = context.getOne(\"seed\");\r\n\r\n                if (optionalLong.isPresent()) {\r\n                    convo.getContext().set(DataQuery.of(\"seed\"), optionalLong.get());\r\n                    return QuestionResult.end();\r\n                } else {\r\n                    return QuestionResult.repeat();\r\n                }\r\n            }).build();\r\n\r\n        final Question question = Question.builder()\r\n            .id(\"name\")\r\n            .argument(GenericArguments.string(Text.of(\"name\")))\r\n            .prompt(Text.of(\"Type in the desired world name:\"))\r\n            .handler((convo, conversant, quest, context) -> {\r\n                Optional<String> optionalName = context.getOne(\"name\");\r\n\r\n                if (optionalName.isPresent()) {\r\n                    convo.getContext().set(DataQuery.of(\"name\"), optionalName.get());\r\n                    return QuestionResult.nextQuestion(two);\r\n                } else {\r\n                    return QuestionResult.repeat();\r\n                }\r\n            }).build();\r\n\r\n        ConversationArchetype.builder()\r\n            .id(\"world-builder\")\r\n            .title(Text.of(TextColors.GREEN, \"World Creation\"))\r\n            .padding(Text.of(\"-\"))\r\n            .startingMessage(Text.of(\"You will be creating a world within this conversation.\"))\r\n            .allowCommands(false)\r\n            .catchesOutput(true)\r\n            .exitString(\"cancel\")\r\n            .defaultChatHandler(ExternalChatHandlers.sendOnFinish())\r\n            .firstQuestion(question)\r\n            .endingHandler(((conversation, dataContainer, conversationEndType) -> {\r\n                if (conversationEndType.equals(ConversationEndTypes.FINISHED)) {\r\n                    final String name = dataContainer.getString(DataQuery.of(\"name\")).get();\r\n                    final long seed = dataContainer.getLong(DataQuery.of(\"seed\")).get();\r\n\r\n                    conversation.getConversants().forEach(c -> c.sendThroughMessage(Text.of(\r\n                        \"Your world will be called: \" + name + \" and have the seed: \" + seed)));\r\n\r\n                    // In reality you could ask for all of the arguments for this\r\n                    WorldArchetype.builder()\r\n                        .seed(seed)\r\n                        .build(name.toLowerCase(), name);\r\n                }\r\n\r\n                conversation.getConversants().forEach(c -> c.sendThroughMessage(Text.of(\"Thanks for playing!\")));\r\n            })).build().start(this.pluginContainer, player);\r\n```",
    "head_branch": "feature/conversations",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e810d9087c4d6d37a50f",
    "number": 1531,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1287) | [SpongeForge](https://github.com/SpongePowered/SpongeForge/tree/refactor/custom-data)\r\nThis PR intends to do a lot for Data Registration. Ideally the registration transition for developers should be easy, as the object is now a consumable registration object that is registered upon creation.\r\n\r\n#### *Wait, so what's going on now? I thought Data API was solid? What about #1198?*\r\n\r\nWell, to answer that, I have to disclose an implementation detail of how custom data is serialized. We all already know that custom data can be registered with Sponge's Data API, and it's served some plugins well, but the issue with it all was that the registered custom data would serialize in a lazy way, suffering from some of the same issues that [Serializable](http://stackoverflow.com/questions/5305473/how-to-deal-with-a-java-serialized-object-whose-package-changed) suffers: Class and package renaming.\r\n\r\n#### *Huh? Package renaming? I thought it just stored the custom data itself?*\r\n\r\nWell, give me a moment! I said I need to disclose the implementation detail, right? Right. So, the strategy for serializing custom data in a way where it'd use the [class name as an id](https://github.com/SpongePowered/SpongeCommon/blob/6220b444dc665bd159174bb66612735a3a5dbf9b/src/main/java/org/spongepowered/common/data/util/DataUtil.java#L106-L175), resulting in NBT looking something akin to this:\r\n```\r\ncreeper {\r\n  \"Sponge\": {\r\n    \"CustomManipulators\": [\r\n      - {\r\n        \"DataClass\": \"com.gabizou.simpleplugin.data.MyCustomData\"\r\n        \"ManipulatorData\": {\r\n          \"foo\":1\r\n          \"bar\": \"baz\"\r\n        }\r\n      }\r\n    ]\r\n  }\r\n}\r\n\r\n```\r\n\r\n#### *Ok... what's wrong with that? It deserializes fine, doesn't it?*\r\n\r\nWell, yes and no. Remember how I mentioned it uses the class name as an id? If I went and refactored my plugin where `MyCustomData` is now located in package: `com.gabizou.simpleplugin.data.mutable.MyCustomData`, Sponge's system would ultimately fail because the class `com.gabizou.simpleplugin.data.MyCustomData` cannot be found. And currently, the system is designed in such a way that if a class cannot be found, well, the data is dropped from the `DataHolder` and then lost forever.\r\n\r\n#### *Oh.... that does sound bad... But can't you use a string id or something? Why go through and change everything?*\r\n\r\nYou're somewhat on the right track. We will be using a developer provided string id, but, because there's also the monstrosity of [the registration method](https://github.com/SpongePowered/SpongeAPI/blob/09d03bf4d8d40a660273b9712df36978bee60e19/src/main/java/org/spongepowered/api/data/DataManager.java#L130-L145) for custom data, I elected to use a builder immediate registration pattern, as you may have seen in other cases in the API. So, instead of using the following:\r\n```java\r\n\r\n@Listener\r\npublic void onInit(GameInitializationEvent event) {\r\n  Sponge.getDataManager().register(MyCustomData.class, ImmutableCustomData.class, new CustomDataBuilder());\r\n}\r\n```\r\nIt's going to be like so:\r\n```java\r\n@Listener\r\npublic void onInit(GameInitializationEvent event) {\r\n  DataRegistration.<MyCustomData, ImmutableCustomData>builder()\r\n      .setDataClass(MyCustomData.class)\r\n      .setImmutableDataClass(ImmutableCustomData.class)\r\n      .setBuilder(new CustomDataBuilder())\r\n      .setManipulatorId(\"my_custom\")\r\n      .buildAndRegister(this);\r\n}\r\n```\r\n\r\n#### *But that takes more lines! It feels clunkier! I don't like it!*\r\n\r\nWhat about it bothers you? The line additions? It's a builder pattern, so if anything happens where you need to change a specific line, or an exception is thrown for a specific method call, you know which line it is off the bat. The extra casting? Unfortunately, due to the nature of how Java inflects generics, it's not possible to ignore the generic types when calling `builder()`, it is possible if it was in a non-generically typed class. \r\n\r\nThe requirement for the `String` id is that it is now a constant that can be utilized by plugin developers to safely and carefully identify their data.\r\n\r\n#### ***Sigh..** I guess I can deal with it... What else does it change?*\r\n\r\nNothing much else. There's some additions for legacy id's that can be used, such as previously used class names. Likewise, the implementation will automatically detect a plugin using the older methods such that we'll be able to determine and generate a new string id for the custom data and assign it within sponge itself. Of course, this will require developers to upgrade at some point, but until then, there will be warning system in place where the server will emit a warning for plugin developers to update to the new system. It will look something like so:\r\n```\r\n/************************************************************************************/\r\n/*                             Legacy Data Registration                             */\r\n/************************************************************************************/\r\n/* Sponge's Custom Data Registration is changing! Plugin developers are strongly    */\r\n/* advised to update their data registrations!However, because of this, Sponge is   */\r\n/* automatically applying an upgrade policy for their old registrations that will   */\r\n/* persistuntil an unknown future time. Likely for the next few Minecraft versions. */\r\n/************************************************************************************/\r\n/* Plugin registering custom data: demotest                                         */\r\n/* Custom Data Class: DemoTestData                                                  */\r\n/* Generated Manipulator Id: demotest:demo_test                                     */\r\n/* The generated Id is already registered with Sponge, and is likely advisable for  */\r\n/* the plugin developer to utilizethe id for future registrations.                  */\r\n/************************************************************************************/\r\n```\r\nAnd note that this will only print out once per data registration. Likewise, the nice thing about this is that **Sponge even goes as far as suggesting a new registration id for the developer**. So if the developer does take note of this id, some method changes and that's all that has to happen!\r\n\r\n#### *Well, I guess this isn't to bad then, what about custom data generation? Do I still have to make those custom classes?*\r\nFor the mean time, yes. However, this is something that will be easier to change in the very near future, since the data serialization strategy has been updated, it will be easier for plugin developers to update between API 5 and API 6.\r\n\r\n*\"Come to the dark side, we have cookies\"*\r\n*- Unknown*\r\n\r\n",
    "head_branch": "refactor/data-serialization",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Honey, I Shrunk the Keys.\n\nSigned-off-by: Gabriel Harris-Rouquette <gabizou@me.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e812d9087c4d6d37a510",
    "number": 1524,
    "body": "This PR attempts to address some of the issues raised in #1411.\r\n\r\nThere were a number of conversations that took place back in October/November about what could be done to the Permissions API to better reflect what permission plugins were doing.\r\n\r\nIt was a while ago now, but as far as I can recall, the following was brought up & agreed on.\r\n\r\n1.  The API was lacking events. People really wanted to be able to listen for changes to permissions, and react to those changes in their own plugins.\r\n2.  The API didn't properly address the situations where data existed, but wasn't currently loaded in memory.\r\n3. There was no way to retrieve data about how inheritance should be done for a given SubjectCollection, specifically regarding whether transient data was to be given priority.\r\n\r\nThis PR addresses no. 2 above, but depending on the success of this, I may also attempt to address the others over time.\r\n\r\n#### What's the problem?\r\nFor the purposes of explaining, assume the following setup:\r\n* Permissions plugin is storing data in MySQL\r\n* MySQL server is perhaps half way across the world, or hosted on some crappy machine somewhere else. (as most shared hosts tend to.)\r\n* User has a fairly big server, lots of permissions data being stored.\r\n\r\nAny reasonable permissions implementation wouldn't have *all* data loaded at all times. Most just load in group data & info about online players.\r\n\r\nThe issue comes when a plugin comes along, and wants to, for example, add a permission to an offline user.\r\n\r\n* Command gets executed on the main server thread.\r\n* Plugin goes to the PermissionService and requests the Subject for the user, or just uses the `User` instance, assuming everything is loaded and ready.\r\n* The Subject isn't actually loaded, and the PermissionService has to query it's backend for the Subjects data.\r\n* The MySQL query to load the subjects data takes 700ms, and the server thread has to pause for ~15 ticks as the data gets loaded. 👎 \r\n\r\n#### The fix\r\nIt was pretty much agreed that the fix for this was to use `CompletableFuture`s where necessary, and clearly distinguish between calls which should return quickly, and ones which may take a while. \r\n\r\nThe PR makes the following changes:\r\n\r\n* Changes method signature to make the difference between **load** and **get** calls very clear. The former will return a Future, and the latter will return an Optional, depending of if the Subject is cached already.\r\n* Methods in SubjectData which mutate state return futures to indicate when the change has been persisted/applied.\r\n* Calls to get ALL subjects in a collection are removed. It is quite reasonable that over time, servers could accumulate hundreds of thousands of unique player logins, and therefore hundreds and thousands of Subjects in one collection. Loading them all at the same time is a bad idea.\r\n* Methods to apply a change to a number of Subjects is provided, to allow users to still modify or collect data from an entire collection, but allow the implementation do execute the action (possibly) in parallel, and allow the unused instances to be GCed quickly. \r\n* Parent related methods in Subject and SubjectData refer to a `SubjectReference`, and not a complete Subject. This removes the requirement that all \"parents\" of a Subject have to be loaded when the child is.\r\n\r\n\r\nAdditionally, the PR adds two other small things, which were also covered in zmls PR. \r\n* \"Identifier Validity Predicates\", which indicate whether an identifier is allowed for a Subject/SubjectCollection. (think user subjects, only UUIDs should be allowed, etc.)\r\n* \"Friendly Identifiers\" - again, think user subjects, in this case, they would return the username.\r\n\r\n\r\nThat's pretty much it. I'm happy to PR the SpongeCommon side of this when/if it gets the go ahead.",
    "head_branch": "feature/perms-futures",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1524 from lucko/feature/perms-futures\n\nAdd CompletableFutures to PermissionService"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e813d9087c4d6d37a511",
    "number": 1522,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1255)\r\n\r\nThis is a response to the feature request #1382, adding an event that is fired when a player feeds an animal.",
    "head_branch": "feature/feedanimalevent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e814d9087c4d6d37a512",
    "number": 1521,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1260)\r\n\r\nThis pull request allows plugins to create per-player world borders and for them to be notified when a player or world's border changes. This pull request fixes #282.",
    "head_branch": "feature/player-world-borders",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add support for player world borders (#1521)\n\n* Squash commits are below:\r\n\r\nAdd API support for getting per-player WorldBorders\r\n\r\nAdd the event for world border changing\r\n\r\nRemove pointless files\r\n\r\nChange import order\r\n\r\nMake sub-event interfaces non-static\r\n\r\nAdd setter for the player's world border\r\n\r\n* Add a setter for a World's border for consistency with Player's methods\r\n\r\nMove sub-event interfaces to be after the event methods\r\n\r\nRequire event cause when setting borders\r\n\r\nClarify contract for getWorldBorder() and add default-implemented ease of use methods\r\n\r\nModify getWorldBorder() contract slightly\r\n\r\nRemove convenience methods, clarify Javadocs and make added event extend Event\r\n\r\nAdd method for resetting the player's world border\r\n\r\nAllow players to not have a world border set\r\n\r\n* Clarify Javadocs for the case when no border is set\r\n\r\nAdd builder for WorldBorder\r\n\r\nAdd a Javadoc to the builder() method\r\n\r\nRemove full stops from at-clauses in Javadocs\r\n\r\n* Remove unneeded method from Player\r\n\r\nAdd @Nullable annotation to world border setter\r\n\r\nAdd method to WorldBorder that copies properties from another border\r\n\r\n* Remove the equivalent method from World as the name was misleading\r\n\r\nChange name of property-copying method\r\n\r\nExplain when IllegalStateException would be thrown by builder\r\n\r\nFix typo in Javadocs\r\n\r\nAdd Javadocs to subevents\r\n\r\nMake builder no longer throw an exception if no data is given\r\n\r\nFix indentation in @return tag"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e815d9087c4d6d37a513",
    "number": 1517,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1246)\r\n\r\nA small change to allow a plugin to access the newly created type from applying an archetype.",
    "head_branch": "feature/archetype-apply",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Return created type from Archetype#apply, Fixes #1423"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e816d9087c4d6d37a514",
    "number": 1516,
    "body": "Fixes #1398",
    "head_branch": "feature/economy-service-methods",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e817d9087c4d6d37a515",
    "number": 1514,
    "body": "Some input strings can cause PatternSyntaxException's to be thrown when compiling the regex pattern due to them containing certain characters.\r\n\r\nFor example, compiling the user input for a blockstate `minecraft:stone[` fails due to the open bracket: [log snippet](https://gist.github.com/dags-/a6cdb24a4b1605c013d456f33fed154e)\r\n\r\nPattern.quote()'ing the input string resolves this in my tests.",
    "head_branch": "bleeding",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e818d9087c4d6d37a516",
    "number": 1513,
    "body": "See https://github.com/SpongePowered/SpongeCommon/pull/1233#issuecomment-284154794.",
    "head_branch": "warn-private-listeners",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add error message for @Listener methods."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e819d9087c4d6d37a517",
    "number": 1508,
    "body": "This is a fix to https://github.com/SpongePowered/SpongeAPI/issues/1396\r\n\r\nAt the moment, using EnumValueElement#getValue(String) only works when the enum field is all uppercase, this fixes that, making the search case sensitive.",
    "head_branch": "fix/enumValueCase",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge EnumValueElement#getValue case sensitivity fix (#1508)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e81ad9087c4d6d37a518",
    "number": 1505,
    "body": "The goal of this PR is to resolve #1504 with the following additions:\r\n- PrettyPrinter\r\n- `ErrorReportable`\r\n- `ErrorReport`\r\n\r\nNote that the description of how this will be used will be fleshed out as discussion takes place.\r\n\r\nNote Number 2: There will be a presentational difference to how the reports are presented in the console log versus how they will be presented in the report file itself.",
    "head_branch": "feature/pretty-printer",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e81bd9087c4d6d37a519",
    "number": 1502,
    "body": "*API* | [Common](https://github.com/SpongePowered/SpongeCommon/pull/1221)\r\n\r\n- [x] GUIID Property\r\n     - provides the GUI-ID for displaying the inventory(container) to the client",
    "head_branch": "feature/container-property",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1502 from SpongePowered/feature/container-property\n\nGuiIDProperty and ContainerProvider"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e81cd9087c4d6d37a51a",
    "number": 1499,
    "body": "[**SpongeAPI**](https://github.com/SpongePowered/SpongeAPI/pull/1499) | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1185) | [SpongeForge](https://github.com/SpongePowered/SpongeForge/pull/1246) | [SpongeVanilla](https://github.com/SpongePowered/SpongeVanilla/pull/295)\r\n\r\nThis is a set of work-in-progress pull requests to improve Guice injection support within Sponge.",
    "head_branch": "feature/inject",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Mark SimpleServiceManager as @Singleton"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e81dd9087c4d6d37a51b",
    "number": 1494,
    "body": "[SpongeAPI](https://github.com/SpongePowered/SpongeAPI/pull/1494) | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1640)\r\n\r\nAdds Interfaces for Carrier that are Blocks or multiple Blocks\r\nalso adds access for inventories that can be accessed from a particular direction.",
    "head_branch": "feature/blockcarrier",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "add BlockCarriers and MultiBlockCarriers"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e81ed9087c4d6d37a51c",
    "number": 1491,
    "body": "[SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1209/) | [SpongeAPI](https://github.com/SpongePowered/SpongeAPI/pull/1491)",
    "head_branch": "feature/container",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e81fd9087c4d6d37a51d",
    "number": 1490,
    "body": "This is to finish/fix all current check style warnings within the API and potentially all OCD issues towards an API 5.1.0 release.\r\n\r\nComments regarding javadoc enhancements are welcome.",
    "head_branch": "cleanup/checkstyle-warnings",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Last two warnings which aren't AI related"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e820d9087c4d6d37a51e",
    "number": 1487,
    "body": "[SpongeAPI](https://github.com/SpongePowered/SpongeAPI/pull/1487) | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1205)\r\n\r\nAdds an isEmpty Method to ItemStacks",
    "head_branch": "feature/empty-itemstack",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "add isEmpty for ItemStack and Snapshot\nadd static empty Method"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e821d9087c4d6d37a51f",
    "number": 1486,
    "body": "SpongeAPI | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1201) | [event-impl-gen](https://github.com/SpongePowered/event-impl-gen/pull/2)\r\n\r\nTl;dr: Sponge currently generates the same constructor for all dynamically created event implementations - one that takes a `Map` of property names to values However, constantly creating and accessing maps can be a drain on performance when many events are being fired. This PR modifiers the event generator to create proper constructors for every event class.\r\n\r\n**Background**:\r\n\r\nEvent generation in Sponge currently consists of two parts. The user-facing `SpongeEventFactory` class is generated by [event-impl-gen](https://github.com/SpongePowered/event-impl-gen), which generates the proper static methods from the existing event interfaces. `SpongeEventFactory` then uses [ClassGenerator](https://github.com/SpongePowered/SpongeAPI/blob/bleeding/src/main/java/org/spongepowered/api/util/generator/event/factory/ClassGenerator.java) to generate a class implementing the desired event interface. Parameters are passed from the static method in `SpongeEventFactory` to the generated event constructor by storing them in a `Map`. The generated class reads the necessary parameters from this `Map` to populate its fields.\r\n\r\n**The issue**:\r\n\r\nWhile this system is simple, it suffers from a lot of overhead due to the need to construct, populate, and read from a `Map` every time an event is created. On large servers, where events are constantly being fired, this can lead to performance issues.\r\n\r\nTo solve this, I've modified both parts of the event generation to avoid the need for an intermediate `Map`.\r\n\r\nOn the `event-impl-gen` side, I now generate an interface called `SpongeEVentFactoryImpl` (final name TBD). `SpongeEventFactory` now delegates all methods to this interface, by calling `Sponge.getEventFactory`. This prevents the need to use any bytecode modification directly on `SpongeEventFactory` itself, as we can instead dynamically generate a class to implement `SpongeEventFactoryImpl`.\r\n\r\nOn the `ClassGenerator` side, I dynamically generate a class to implement `SpongeEventFactoryImpl`. Each method in this class invokes the actual constructor of the generated event implementation class, with no `Map` indirection neded.\r\n\r\n**Caveats**:\r\n\r\nGenerating the implementation for `SpongeEventFactoryImpl` (done in `FactoryInterfaceGenerator`) relies on the method parameter names being available. Some of the information needed to sort parameters of methods in `SpongeEventFactory/SpongeEventFactoryImpl` into the proper order (`Cause` always comes first, `originalXXX` and `xxx` go together) comes from SpongeAPI's `build.gradle`. In order to avoid copying this information into other parts of SpongeAPI, I use the method parameter names to convert the user-friendly parameter ordering into a simple alphabetical ordering (for use in `ClassGenerator`).\r\n\r\nAccessing method parameter names through reflection requires the user of the `-parameters` javac flag. While it's simple to specify this in Gradle, IDEs might not always use this flag. If you receive an error such as `Parameter <param> for method <method> has no name!`, try enabling this flag in your IDE compiler settings.",
    "head_branch": "event-gen-perf",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e822d9087c4d6d37a520",
    "number": 1484,
    "body": "Supersedes #1483 \r\n\r\n**Goals**\r\n- [x] Every Key in `Keys` contains a reference to the corresponding (mutable) data manipulators value getter \r\n    - [X] and vice versa\r\n- [x] Every Key has a Javadoc describing what data the Key represents and at least hints at caveats and eligible `DataHolder`s\r\n\r\n**Keys to be reviewed**\r\n- [X] `HELD_EXPERIENCE` - duplication of `CONTAINED_EXPERIENCE`, deprecated and marked for removal\r\n- [x] `LEASH_HOLDER` and `LeashData` have inconsistent return types - key deprecated and marked to be changed",
    "head_branch": "key-javadoc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Data API Documentation: Keys\n\n - Javadoc for every key\n - Proper cross-matching of keys and the respective DataManipulators"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e823d9087c4d6d37a521",
    "number": 1483,
    "body": " * Add Javadoc for the Keys mentioned in #1277 \r\n\r\nApparently `HELD_EXPERIENCE` and `CONTAINED_EXPERIENCE` were pointing to the same thing. `HELD_EXPERIENCE` was used in the API only whereas `CONTAINED_EXPERIENCE` [is actually implemented](https://github.com/SpongePowered/SpongeCommon/blob/6eec2f857519660061cd02f5ddd6f593f343fc11/src/main/java/org/spongepowered/common/data/processor/data/entity/ExpOrbDataProcessor.java#L46),\r\n\r\nTherefore this PR removes the `HELD_EXPERIENCE` key and changes ExperienceOrb to use `CONTAINED_EXPERIENCE` instead.",
    "head_branch": "bleeding",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e824d9087c4d6d37a522",
    "number": 1481,
    "body": "This adds the following methods:\r\n- `org.spongepowered.api.data.value.ValueContainer#require`\r\n- `org.spongepowered.api.data.value.mutable.CompositeValueStore#require`\r\n\r\nwhich simply call the associated `get` method and, if the value is not present, throws `NoSuchElementException`.",
    "head_branch": "feature/data-require",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add methods to require data from a CompositeValueStore/ValueContainer"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e825d9087c4d6d37a523",
    "number": 1480,
    "body": "[SpongeAPI](https://github.com/SpongePowered/SpongeAPI/pull/1480) | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1190) | [SpongeForge](https://github.com/SpongePowered/SpongeForge/pull/1252)\r\n\r\nThe SpongeAPI has no means currently to get a world from a LoadingTicket; given that the world is passed to the ticket for storage upon creation and called back when the server starts, it makes sense that you should be able to retrieve it again from a LoadingTicket object.",
    "head_branch": "feature/loadingticket-world",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated LoadingTicket interface to support getting the world"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e826d9087c4d6d37a524",
    "number": 1479,
    "body": "The API currently does not provide a way for the ticket to provide the world from the ticket, despite having provided it during the creation of the ticket. Forge supports this, so this is essentially just adding to the completion of the Forge Chunk Manager wrapper.\r\n\r\nThis is paired with my SpongeForge pull request [#1248](https://github.com/SpongePowered/SpongeForge/pull/1248)",
    "head_branch": "feature/loadingticket-world",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e827d9087c4d6d37a525",
    "number": 1478,
    "body": "[API](https://github.com/SpongePowered/SpongeAPI/pull/1478) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/1187)\r\n\r\nThis allows stopping a playing record, if one is currently playing.",
    "head_branch": "feature/jukebox",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge addition of Jukebox stopRecord method\n\nAdded stopRecord method to Jukebox."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e828d9087c4d6d37a526",
    "number": 1477,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1186)",
    "head_branch": "feature/text",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e829d9087c4d6d37a527",
    "number": 1476,
    "body": "[**SpongeAPI**](https://github.com/SpongePowered/SpongeAPI/pull/1476) | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1182)\r\nAdds #1268 \r\n\r\nTest plugin: https://gist.github.com/kashike/09d174f61c9fbb1c40a24096346a3179",
    "head_branch": "feature/absorption",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Absorption data"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e82ad9087c4d6d37a528",
    "number": 1474,
    "body": "",
    "head_branch": "feature/issue-1447_long_command_flags_tab_complete_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge long command flag tab completion\n\n Fix Long Command Flags not tab completing"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e82bd9087c4d6d37a529",
    "number": 1470,
    "body": "[SpongeAPI ](https://github.com/SpongePowered/SpongeAPI/pull/1470) | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1159)\r\n\r\nThis WIP PR is to add vanilla location-based AI tasks. The intention is to make it easier for plugins to control the movement of entities.\r\n",
    "head_branch": "feature/location-ai",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e82cd9087c4d6d37a52a",
    "number": 1469,
    "body": "Format code and implement `Predicate`",
    "head_branch": "state-matcher-fixup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e82dd9087c4d6d37a52b",
    "number": 1467,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1149)\r\n\r\nThis PR is designed to open up the World PreGeneration code to allow plugins to effectively monitor and manipulate the pregeneration. This PR contains breaking changes that allow this to happen, so should not target anything but bleeding. This is based off my experience with NucleusMixins, and should allow all plugins to control the pre generation more effectively - and I'm offering this after being asked by @bloodmc to do so in https://github.com/NucleusPowered/Nucleus/issues/528\r\n\r\nDiscussion of the internals are discussed on the Common PR.\r\n\r\n**Movement of API**\r\n\r\nPrior to this, the pre-gen builder code was a sub interface to `WorldBorder.ChunkPreGenerate`. This seems to indicate that the pre-generation is related to the world border - it is not. Further, as the builder now returns a custom `ChunkPreGenerate` object, it made sense to move this all to it's own class. This does not affect how to get a builder.\r\n\r\nThe builder is subinterface to the `ChunkPreGenerate` interface, in line with other builders.\r\n\r\n**Introduction of `ChunkPreGenerate`**\r\n\r\nThis interface is the base of the pre-gen system, and contains information about how the pre-generation is going - number of chunks generated, number skipped (that is, not required to be generated), etc. This is now returned from the `ChunkPreGenerate.Builder`, rather than just a `Task` - and plugins should now cancel pre-generation through this interface rather than the `Task`.\r\n\r\n(It might be nice to add cancellation routines to the `Task` system, where code could be run if a task is cancelled, but that's out of the scope of this PR)\r\n\r\n**Events**\r\n\r\nThere are now four events in the lifecycle of pre-generation, all in the `ChunkPreGenerationEvent` interface. They all return the `WorldProperties` and `ChunkPreGenerate` objects for proper progress reporting.\r\n\r\n* **Pre**: fired before a pregeneration step is taken. If cancelled, cancels the entire pre generation. If `setSkipStep` is set to true, then that pre-generation step is skipped, but will try again when it is next scheduled to do so.\r\n* **Post**: fired after a pregeneration step is taken. Contains stats about what has just been generated. If cancelled, cancels the entire pre generation.\r\n* **Cancelled**: fired if the pregeneration is cancelled using `ChunkPreGenerate#cancel`.\r\n* **Complete**: fired if the pregeneration is completed.\r\n\r\n**Builder changes and additions**\r\n\r\n* `Builder#addListener` adds a event listener for `ChunkPreGenerationEvent` to this specific task. This works in broadly the same way as the Custom Inventory listener methods.\r\n* `Builder#logger` now adds the logger by adding a listener that fires on `ChunkPreGenerationEvent.Post` and `ChunkPreGenerationEvent.Complete`\r\n* `from` now accepts a `ChunkPreGenerate` object, rather than a `Task` object.\r\n* `start` returns the `ChunkPreGenerate` object now.\r\n\r\n**Thoughts and notes**\r\n\r\n* The `Pre/Post` events, if cancelled, will cancel the entire generation. Is this right? Should it be limited to `Pre`, and then only skip a step?\r\n* Docmentation might need a few improvements!\r\n* I think I caught everything in the style, but I've probably missed something!\r\n\r\n**Test code & log results**\r\n\r\nI will try to add more later - for now, this tests the listeners work as expected - both single task listeners, and global listeners.\r\n\r\nhttps://gist.github.com/dualspiral/2664950914056f5a3ce005fba78811c8",
    "head_branch": "feature/worldgen",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1467 from dualspiral/feature/worldgen\n\nOverhaul chunk pre-generation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e82ed9087c4d6d37a52c",
    "number": 1449,
    "body": "*SpongeAPI*|[SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1119)|[SpongeForge](https://github.com/SpongePowered/SpongeForge/pull/1188)\r\n\r\nThis is a WIP continuation of [kashike's PR](https://github.com/SpongePowered/SpongeAPI/pull/1098), with his consent.\r\nIt aims to generalize how recipes are registered and handled. Instead of checking the equality of the ingredients, it works by testing ingredient predicates. It also aims to let the user implement the recipe interfaces by themselves, making it, for example, possible to transfer NBT data from the ingredients to the result.\r\nIn this PR, `ItemStackSnapshot`s are used extensively. This is to prevent the user from modifying the original `ItemStack`. I could instead provide an `ItemStack#copy`, but that doesn't make it visually obvious the original item won't change.",
    "head_branch": "feature/recipe-ii",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e82fd9087c4d6d37a52d",
    "number": 1440,
    "body": "**API** | [Common](https://github.com/SpongePowered/SpongeCommon/pull/1092)\r\nSee #1159\r\nEdited for 1.11 and added an adult() method for Ageable",
    "head_branch": "ageabledata",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update AgeableData\n\nEdited by Maxqia for 1.11 and added an adult() method for Ageable"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e830d9087c4d6d37a52e",
    "number": 1439,
    "body": "See #1159",
    "head_branch": "AgeableData",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e831d9087c4d6d37a52f",
    "number": 1438,
    "body": "I figured the things in MoreArguments would be better used in the standard library.\r\n\r\n[Test plugin as requested by](https://github.com/pie-flavor/SpongeTestPlugin/releases/tag/more-arguments%2F1.0.1) @kashike",
    "head_branch": "feature/more-arguments",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e832d9087c4d6d37a530",
    "number": 1437,
    "body": "[API](https://github.com/SpongePowered/SpongeAPI/pull/1437) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/1095)\r\n\r\nWith Minecraft 1.11 it is no longer possible to create -1 sized ItemStacks.\r\nAdditionally the current query method never actually cared about stack sizes.\r\n\r\nThis claryfies the javadocs on the existing query/contains methods\r\nand adds a new one to query for ItemStacks matching any size\r\nand one to check for inventories containing any amount.",
    "head_branch": "feature/inventory-contains",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1437 from SpongePowered/feature/inventory-contains\n\nClarify Inventory#query/contains behaviour + new versions for any amount"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e834d9087c4d6d37a531",
    "number": 1434,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1434) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/1076)\r\n\r\nThis PR modifies the existing Statistics API to comply with my implementation.\r\n\r\n### Notable changes\r\n\r\n#### `StatisticGroup` has been replaced with `StatisticType`\r\nThe old system didn't really make a lot of sense for the implementation and was rather arbitrary. `StatisticType` is for special statistics on blocks, items, and entities. All other statistics have the `BASIC` type.\r\n\r\n----\r\n\r\n#### Builders and API registration has been removed\r\nRegistering a statistic or achievement from the API makes about as much sense as doing so for an `ItemType` or `BlockType` so I decided to remove API registration altogether.\r\n\r\n----\r\n\r\n#### Removed `StatisticFormat`\r\nInstead I just decided to expose the `NumberFormat` the `Statistic` uses.\r\n\r\nSigned-off-by: Walker Crouse <walkercrouse@hotmail.com>",
    "head_branch": "feature/statistics",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Tweak Statistics API for implementation\n\nSigned-off-by: Walker Crouse <walkercrouse@hotmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e835d9087c4d6d37a532",
    "number": 1433,
    "body": "These are all fixes I can make on my spare time on AI stuff. It fixes some logic errors, as well as improving the javadoc of some AI tasks.\r\n\r\nNote: These does not involve implementation changes.",
    "head_branch": "minor/ai",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e836d9087c4d6d37a533",
    "number": 1430,
    "body": "Adds a weight value to Contexts. \r\n\r\nIntended use is that plugins implementing Contextual services can determine which contexts to check for first.\r\n\r\nThe current (afaik) way to determine context weight is to simply look at the number of entries in the `Set<Context>`. This change allows you to determine an overall weight based upon the combined weights of the contained contexts.\r\n\r\nSupposing the following set is passed in a calculator:\r\n`[A, B, C]`\r\n\r\nIf an exact match was not found for those contexts, then the implementation (should) will randomly check either `[A, B]` or `[B, C]`. Ordering is important for some plugins. (cc: @bloodmc )\r\n\r\nWhilst this elimination system isn't a particularly effective way to flatten context sets, it's the easiest way to explain it. :)\r\n\r\nThe hashcode and equals implementations were taken from Guava's AbstractMapEntry. (what was being used in the previous implementation of those methods) ",
    "head_branch": "context-weight",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e837d9087c4d6d37a534",
    "number": 1429,
    "body": "Improves fluency by introducing two handy methods. Just a quality-of-life thing.\r\n```java\r\nItemStack itemStack = ItemStack.of(ItemTypes.STICK, 1);\r\nitemStack.offer(Keys.AGE, 0).ifSuccessful().orElseThrow(() -> new IllegalStateException(\"This shouldn't have happened!\"));\r\n```",
    "head_branch": "feature-result-fluency",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e838d9087c4d6d37a535",
    "number": 1428,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1428) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/1064)\r\n",
    "head_branch": "feature/attributes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e839d9087c4d6d37a536",
    "number": 1424,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/2161)\r\n\r\nAdds `Text#ofCompacted` and `Text#compact` which will try to compact the text when creating it, and when called.\r\n\r\nSee #1312 for discussion.",
    "head_branch": "simplified-append",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e83ad9087c4d6d37a537",
    "number": 1422,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1422) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/1046)\r\nAdds #1395",
    "head_branch": "feature/spectator-camera",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add API methods for controlling the spectator camera Entity\nAdds #1395"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e83bd9087c4d6d37a538",
    "number": 1421,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1421) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/1032)\r\nAdds #1273.",
    "head_branch": "feature/dragon-phases",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "EnderDragon phases (#1421)\n\n* EnderDragon phases\r\n\r\n* Return the new Phase"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e83cd9087c4d6d37a539",
    "number": 1419,
    "body": "**API** | [Common](https://github.com/SpongePowered/SpongeCommon/pull/1027)\r\nTest Code : https://gist.github.com/Maxqia/5579f49f9cfd3f4b08d6912d899d259d",
    "head_branch": "recipe",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e83dd9087c4d6d37a53a",
    "number": 1417,
    "body": "**API** | [Common](https://github.com/SpongePowered/SpongeCommon/pull/1026)\r\nI had this lying around for a month or so..., so here you go!\r\nThere might be some sounds missing and if there are, please tell me where I can find them.",
    "head_branch": "entity-sounds",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e83ed9087c4d6d37a53b",
    "number": 1416,
    "body": "**API** | [Common](https://github.com/SpongePowered/SpongeCommon/pull/1015)\r\nThis replaces #1381 and fixes #1375.",
    "head_branch": "highest-block",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Extent.getHighestBlockAt and getHighestYAt"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e83fd9087c4d6d37a53c",
    "number": 1415,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e840d9087c4d6d37a53d",
    "number": 1414,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e841d9087c4d6d37a53e",
    "number": 1411,
    "body": "Based on discussions with some of the Sponge permissions plugin developers, we found that the current permissions API is inadequate for some of the more complicated features of existing permissions plugins.\r\n\r\nTo fill in some of the gaps, I've put together these changes which:\r\n\r\n- Add a distinction between cached subjects, which are immediately available, and uncached subjects, which are loaded asynchronously.\r\n- Add events for permissions changes\r\n- Add the concept of a subject type definition which allows specifying metadata about a certain subject type.",
    "head_branch": "feature/perms-update",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e842d9087c4d6d37a53f",
    "number": 1410,
    "body": "API | [Common](https://github.com/SpongePowered/SpongeCommon/pull/1021)\r\n\r\nI implement a new method to remove custom gamerule because there are no solution to remove custom gamerule.",
    "head_branch": "gamerule",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add : World#removeGameRule(String)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e843d9087c4d6d37a540",
    "number": 1407,
    "body": "[Common](https://github.com/SpongePowered/SpongeCommon/pull/1007)\r\n\r\nAs requested by Blood and Zidane, this replaces EntitySnapshot in the PASSENGERS key with UUIDs.",
    "head_branch": "feature/clear-passengers",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Replace PASSENGERS data with UUIDs. (#1407)\n\n* Initial pass of switching PASSENGERS key to UUIDs.\r\n\r\n* Removed DataTransactionResult from the passenger methods, and added hasPassenger.\r\n\r\n* Remove redundant imports"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e844d9087c4d6d37a541",
    "number": 1397,
    "body": "API | [Common](https://github.com/SpongePowered/SpongeCommon/pull/996)\n\nAs discussed at https://github.com/SpongePowered/SpongeAPI/issues/1392, a -1 quantity would be useful for ignoring stack size differences with `Inventory#query(ItemStack)`.\n\nIn my implementation I have added `ItemStack.Builder#anySize` which can be used for querying inventories.\n",
    "head_branch": "unsafeItemStackBuilderQuantity",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e845d9087c4d6d37a542",
    "number": 1393,
    "body": "**API** | [Common](https://github.com/SpongePowered/SpongeCommon/pull/988)\n\nI'll put it bluntly - implementing the current data API system is tedious. Say you want to save a string to an entity. You need to implement two `DataManipulator`s with keys, values, register everything, and a `DataManipulatorBuilder` too if you want it persisted.\n\nThat's a tonne of work for just a string, especially for someone new to plugin development or to sponge.\n\nAt the heart of this PR, there is still the bells and whistles of the data API. You use keys to access values, but the rest of the implementation work is done behind the scenes - all you need to do is register and you're good to go.\n\nIt still supports the forwards compatibility with `DataContentUpdater`s too, but that's an optional feature that can be left out if desired - the version will just default to `1`.\n\nWe'll still keep around the current system for those that want more control over their data, or providing a better interface to other plugins. But this will really ease the learning curve for those that don't care for the details (yet).\n\nSo instead of implementing and registering multiple classes to access your string data, you just do this:\n\n``` java\nSimpleCustomData<String> custom = SimpleCustomData.builder()\n            .id(\"my-plugin:my_string\")\n            .name(\"My String\")\n            .build();\n\nmyEntity.offer(custom.getKey(), \"Hello World!\");\n```\n\n**Super simple to register, super simple to use.**\n",
    "head_branch": "feature/simple-data",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e846d9087c4d6d37a543",
    "number": 1391,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1391) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/983)\nFixes #897\n",
    "head_branch": "feature/thread",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e847d9087c4d6d37a544",
    "number": 1387,
    "body": "This PR attempts to clarify some of the ambiguities in PermissionService, as raised in #1383.\n\nAs far as I know, the added javadocs do not conflict with existing intended behaviours, rather just clarifies them. \n\nPossibly relevant: some of the issues were also briefly discussed here: https://forums.spongepowered.org/t/luckperms-an-advanced-permissions-system/14274/118\n",
    "head_branch": "bleeding",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Clarify some parts of the PermissionService. Merges #1387."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e848d9087c4d6d37a545",
    "number": 1385,
    "body": "Description is WIP. The implementation is ready for review.\n# The issue\n\nCurrently there are multiple issues with more than a few existing implementations of `CatalogRegistryModule`s.\n\nCurrently there are 100 implemented `CatalogRegistryModule`s. \nFrom those 33 are not visible in `CatalogTypes` fields.\n\n| Issue | Affected |\n| --- | --- |\n| Exception instead of `Optional#empty()` in `#getById(String)` | 2 |\n| `#getById(String)` returns `Optional#empty()` for registered ids | 31 |\n| `#getById(String)` does not handle case properly | 2 |\n| Inconsistent handling of \"sponge:\" and \"minecraft:\" prefixes in `#getById()` | 30 |\n| Expensive deep copy in `getAll()` | 95 |\n| Duplicates in `getAll()` | 6 |\n| Incomplete/lacking `#registerAdditionalCatalog(CatalogType)` implemenations | 24 / 28 (86%) |\n\nSome of these issues are also mentioned in https://github.com/SpongePowered/SpongeCommon/issues/739.\n# TestPlugin\n- [Plugin](https://dl.dropboxusercontent.com/u/16999313/Sponge/CatalogRegistryModuleTest.jar)\n- [Source](https://dl.dropboxusercontent.com/u/16999313/Sponge/CatalogRegistryModuleTest.zip)\n- [Result](http://pastebin.com/ASr7D8LD)\n# The solution\n\nProvide simple to use implementations that reduce the implementation work to just the default registration and thus reduce the error potential.\n\n(This implementation alone cannot fix the inconsistent prefix handling though)\n# Usage\n\n``` java\n@RegisterCatalog(GoalTypes.class)\npublic final class GoalTypeModule extends MutableCatalogRegistryModule<GoalType> {\n\n    @Override\n    protected Collection<String> aliasIdsForType(GoalType type) {\n        // Also register without prefix\n        if (type.getId().startsWith(\"minecraft:\")) {\n            return Collections.singletonList(type.getId().substring(10));\n        }\n        return Collections.emptyList();\n    }\n\n    @Override\n    public void registerDefaults() {\n        createGoalType(SpongeImpl.getMinecraftPlugin(), \"normal\", \"Normal\");\n        createGoalType(SpongeImpl.getMinecraftPlugin(), \"target\", \"Target\");\n    }\n\n    public GoalType createGoalType(PluginContainer pluginContainer , String id, String name) {\n        String combinedId = pluginContainer.getId().toLowerCase(Locale.ENGLISH) + \":\" + id;\n        GoalType newType = new SpongeGoalType(combinedId, name, EntityAITasks.class);\n        registerAdditionalCatalog(newType);\n        return newType;\n    }\n\n}\n```\n\n---\n\nI also offer my help to rewrite those modules to use these implemenations.\n",
    "head_branch": "CatalogRegistryModule",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e849d9087c4d6d37a546",
    "number": 1381,
    "body": "As per https://github.com/SpongePowered/SpongeAPI/issues/1375, this PR adds a method to retrieve the highest block in a column, using the internal chunk heightmaps. This retrieves the highest opaque block, which is also the lowest block sunlight can reach.\n\nThe method name is up for debate.\n",
    "head_branch": "feature/highest-block",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e84ad9087c4d6d37a547",
    "number": 1380,
    "body": "Needs a thorough review.\n\nSee: https://github.com/SpongePowered/SpongeCommon/pull/967\nSee: https://github.com/SpongePowered/SpongeForge/pull/938\n",
    "head_branch": "refactor/3d-biome",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e84bd9087c4d6d37a548",
    "number": 1379,
    "body": "This adds 2 default methods to check if a vector/location are inside a world border.\n\nI wrote this because I would like to test when things like ender pearls, arrows, and eggs are thrown outside of the world border.\n\nI added a test method which has the same code as the default method (The version of mockito we use doesn't allow for testing default methods).\n\nLet me know if there's anything that needs changing or more testing.\n",
    "head_branch": "bleeding",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e84cd9087c4d6d37a549",
    "number": 1376,
    "body": "**API** | [Common](https://github.com/SpongePowered/SpongeCommon/pull/963)\nOne of Many for #1365\n",
    "head_branch": "blocksounds",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e84dd9087c4d6d37a54a",
    "number": 1374,
    "body": "**API** | [Common](https://github.com/SpongePowered/SpongeCommon/pull/960) | Forge\n\nThis simply adds a Data API interface for entity scoreboard tags added in 1.9.\n\nThis is my first time creating and implementing data, and also my first time working with submodules, so it's possible that I've done something horribly wrong.\n",
    "head_branch": "feature/scoreboard-tags",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e84ed9087c4d6d37a54b",
    "number": 1370,
    "body": "**SpongeApi** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/1208) | [SpongeForge](https://github.com/SpongePowered/SpongeForge/pull/1670) | [SpongeVanilla](https://github.com/SpongePowered/SpongeVanilla/pull/299)\r\n\r\nAny event now has two objects attached to it, a cause and a context. The cause contains\r\nan ordered stack of objects which are the direct cause of the event. The context contains\r\nobjects that are tangentially related to the event being thrown that the thrower of the\r\nevent thinks would be useful for proper handling of the event.\r\n\r\nIn the cause only the order matters, in the context only the names matter. A cause has\r\nno names and a context has no ordering.\r\n\r\nPrevious the values of these two objects were both present in the cause which can cause\r\nsome confusion and misaction. Forexample you could attach a player to an event to which\r\nthere are only slightly related to but if no other player is in the cause before them then\r\ncause.first(Player.class) will still return that player even though there are by no means\r\nthe cause of the event.\r\n\r\nThis PR also removes the cause parameter off all api methods that previously took it, this is now handled external to these methods by the `CauseStackManager` (name still somewhat up in the air).\r\nif you want to provide more context for a set of actions you can now push that information into the cause stack through this class or push contextual information here as well, when your code finishes executing then the `Frame` containing the context information you pushed will be popped off and the previous frame will take hold.",
    "head_branch": "feature/cause-and-context",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add EventContextKeys.USED_ITEM for context to be used by events that are not guaranteed to have an item stack.\n\nSigned-off-by: Gabriel Harris-Rouquette <gabizou@me.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e84fd9087c4d6d37a54c",
    "number": 1364,
    "body": "**API** | [Common](https://github.com/SpongePowered/SpongeCommon/pull/955) | [Forge](https://github.com/SpongePowered/SpongeForge/pull/923)\n\nCurrently if a developer wants to send a custom `SoundType` (such as one from a mod or resource pack) they must implement their own `SoundType`. While small, this changes it to instead be a builder so developers can rely on common to create an instance of `SoundEvent` (the NMS impl) for them.\n",
    "head_branch": "feature/sounds",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add SoundType builder"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e850d9087c4d6d37a54d",
    "number": 1363,
    "body": "**API** | [Common](https://github.com/SpongePowered/SpongeCommon/pull/1299)\r\n",
    "head_branch": "pr/data/json-format",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add JSON DataFormat"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e851d9087c4d6d37a54e",
    "number": 1362,
    "body": "**API** | [Common](https://github.com/SpongePowered/SpongeCommon/pull/946)\n",
    "head_branch": "pr/kick-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e852d9087c4d6d37a54f",
    "number": 1360,
    "body": "In response to: https://github.com/SpongePowered/SpongeAPI/pull/1342\n\nThis adds a `skipFilter` to ignore blocks that match a predicate. The previous filter functionality gets renamed to `stopFilter`.\n\nAlso, based off of feedback from @Deamon5550, I changed the block limit into a distance limit. Since the filter is now built-in it was removed as a stand-alone.\n\nFinally I fixed the `GenericArguments` `#target` functionality not returning the target block, but the air block just before it. \n\nI've fixed Cookbook/Smite and I'll merge those changes if the PR is accepted.\n\n@m0pt0pmatt\n",
    "head_branch": "feature/blockray-filter",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1360 from SpongePowered/feature/blockray-filter\n\nImprove the block ray filters"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e853d9087c4d6d37a550",
    "number": 1359,
    "body": "API | [Common](https://github.com/SpongePowered/SpongeCommon/pull/944)\n\nThe event RideEntityEvent.Dismount doesn't use DismountType\n",
    "head_branch": "dismount-type",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "The DismountType are not used"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e854d9087c4d6d37a551",
    "number": 1357,
    "body": "Using these changes the annotation processor will add a required dependency on SpongeAPI which allows identifying Sponge plugins based on their `mcmod.info` file.\n\nThe dependency version is set to the SpongeAPI version the plugin is compiled against. Without additional restrictions the dependency version will just represent the \"recommended version\" for the dependency.\n\nWhile plugins will continue to load using newer or older API versions, these changes allow the implementation to issue a warning if a plugin was designed for an older or newer API version.\n\nSpongeVanilla implementation: https://github.com/SpongePowered/SpongeVanilla/pull/269\nSpongeForge implementation: https://github.com/SpongePowered/SpongeForge/pull/907\n\n**Note:** This is similar to https://github.com/SpongePowered/SpongeAPI/pull/1214 but is implemented using a recommended API version instead of a required minimum version.\n\nFixes #1212 \n",
    "head_branch": "feature/metadata-api-version",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add required dependency on SpongeAPI for plugins\n\nThe dependency version is set to the SpongeAPI version the plugin is\ncompiled against. Without additional restrictions the dependency\nversion will just represent the \"recommended version\" for the\ndependency.\n\nWhile plugins will continue to load using newer or older API versions,\nthese changes allow the implementation to issue a warning if a plugin\nwas designed for an older or newer API version."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e855d9087c4d6d37a552",
    "number": 1356,
    "body": "@zml2008 @mcmonkey4eva \n\n@mcmonkey4eva mentioned in IRC that remainingJoinedStrings still had some form of processing being applied, @zml2008 said that there was already a raw option exposed.\n\nI looked, saw that it was limited to private visibility, presumably because it was added later and not thought about.\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1356 from ryantheleach/patch-2\n\nExpose RemainingJoinedStrings raw mode."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e856d9087c4d6d37a553",
    "number": 1354,
    "body": "You can now query for existing channels.\nA convenience method `getOrCreate` and `getOrCreateRaw` have also been added\n\nExample use for bungeecord\n\n``` java\nRawDataChannel bungeeChannel = Sponge.getChannelRegistrar().getOrCreateRaw(this, \"BungeeCord\");\n```\n\nSide node: modifications to SpongeForge/SpongeVanilla are trivial so I'll update them if this PR is merged\n",
    "head_branch": "feature/get-network-channel",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1354 from SpongePowered/feature/get-network-channel\n\nAdd methods to ChannelRegistrar for getting existing channels"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e857d9087c4d6d37a554",
    "number": 1352,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/928) | [SpongeForge](https://github.com/SpongePowered/SpongeForge/pull/900)\n\nThis adds support for creating custom biomes which exist only during generation, afterwards they are stored as an existing non-virtual biome. This can be used to support more varied generation easier without creating full blown custom biomes which would require client modifications as well.\n",
    "head_branch": "feature/custom-biomes",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add support for virtual biomes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e858d9087c4d6d37a555",
    "number": 1350,
    "body": "API | [Common](https://github.com/SpongePowered/SpongeCommon/pull/923)\n\nTo fix conflicts, I recreated a new branch.\n",
    "head_branch": "spawn-naturally",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Adding a method to create an entity naturally"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e859d9087c4d6d37a556",
    "number": 1344,
    "body": "The asset manager allows changing the directory where all plugin assets are stored. This was originally added for flexibility, but I can personally not see any usecases to change the asset directory. On the other hand, there are two reasons why it should **not** be changed:\n- Assets in Vanilla Minecraft and Forge are always stored in the `assets/id` directory\n- Changing the asset directory could cause problems with resource packs in future client-side plugins (since that requires assets to be stored in the default directory)\n\nThis PR removes the option to set custom asset directories. Unless someone has a usecase for the option I don't see any reason to keep it, since the default directory is always the best choice.\n",
    "head_branch": "feature/remove-custom-assets-dir",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove custom asset directories"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e85ad9087c4d6d37a557",
    "number": 1342,
    "body": "Currently, BlockRay filters do not filter Block hits, instead when the filter predicate is true, the BlockRay stops. This really doesn't reflect a true \"filter\" and instead reflects more of a stopping predicate.\n\nThis misconception is shared by other plugin developers in the community: https://forums.spongepowered.org/t/how-to-get-the-location-the-player-is-looking-at-from-an-entity-location-and-rotation/8906\n\nThis PR switches filters to filter blocks and continue hitting. The previous functionality has been preserved in a \"stopWhen\" call.\n\nHere is a test plugin with three test commands: https://gist.github.com/m0pt0pmatt/79ce98dbeaf08f692f3425f8ffc12e4b\n1. The first command prints the first block the player is looking at which isn't AIR.\n2. The second command prints the last block between the player and a COAL_BLOCK.\n3. And the last one stops prints the last block between the player and a given Location.\n\nNote that I've tested that the first command works, but haven't put the time to test the other two personally. However, I'm fairly confident in them.\n\nAlso note that, just life the previous filter implementation, the final block is not included when the stopWhen predicates are true. I also believe this is incorrect, but I wanted to wait on input from others.\n",
    "head_branch": "fix-blockray-filters",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e85bd9087c4d6d37a558",
    "number": 1340,
    "body": "[SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/900)\n\nThis PR changes the two vehicle events to subclass, which makes it fit in with the rest of the events.\n\nIt also makes Dismount cancellable, as this is achievable in the implementation.\n",
    "head_branch": "feature/mount-events",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1340 from SpongePowered/feature/mount-events\n\nSubclass DismountEntityEvent and MountEntityEvent in RideEntityEvent"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e85cd9087c4d6d37a559",
    "number": 1333,
    "body": "I needed an event to handle the process of a command before and after that happen in the same tick. So I created this new event to handle that.\n\nWhen some commands are fired by some players, I need to disable some functionalities. /help is one of them.\n\nCurrently there is only one event for when a command is send and it is SendCommandEvent. The commandResult isn't good.\n\nhttps://github.com/SpongePowered/SpongeCommon/blob/bleeding/src/main/java/org/spongepowered/common/command/SpongeCommandManager.java#L258\n\nSpongeCommon: https://github.com/SpongePowered/SpongeCommon/pull/888\n",
    "head_branch": "bleeding",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e85dd9087c4d6d37a55a",
    "number": 1330,
    "body": "Implemented in spongepowered/SpongeCommon#882 Closes #1142, #1137 \n\nThis adds an api for creating `ArchetypeVolume`s which are copies of regions of the world and may be serialized to disk in one of two schematic formats (The MCEdit format here called the legacy format, and an updated format for better mod compatability).\n\nAn example plugin using this can be found [In the cookbook](https://github.com/SpongePowered/Cookbook/blob/schematics/Plugin/CopyPasta/src/main/java/org/spongepowered/cookbook/plugin/CopyPasta.java#L47).\n\nThe sponge schematic format specification draft can be found [here](https://github.com/SpongePowered/Schematic-Specification/blob/master/versions/schematic-1.md). Once this is merged that specification will become version 1.\n\nThe gist of the usage is\n\n``` java\n// copying\nArchetypeVolume volume = player.getWorld().createArchetypeVolume(min, max, player.getLocation().getPosition().toInt());\n\n// pasting\nvolume.apply(player.getLocation(), BlockChangeFlag.ALL, Cause.of(NamedCause.of(\"plugin\", this.plugin), NamedCause.source(player)));\n\n// saving\nSchematic schematic = Schematic.builder().volume(data.getClipboard()).metaValue(Schematic.METADATA_AUTHOR, player.getName()).metaValue(Schematic.METADATA_NAME, name).paletteType(PaletteTypes.LOCAL).build();\nschematicData = DataTranslators.SCHEMATIC.translate(schematic);\nDataFormats.NBT.writeTo(new GZIPOutputStream(new FileOutputStream(outputFile)), schematicData);\n```\n",
    "head_branch": "feature/schematics",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add safety mode to DataView, Finialize schematics api, Merges #1330"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e85ed9087c4d6d37a55b",
    "number": 1329,
    "body": "The summary of the enum is correct though\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e85fd9087c4d6d37a55c",
    "number": 1328,
    "body": "Since we now bundle [Caffeine](https://github.com/ben-manes/caffeine) with SpongeCommon we can also expose it to plugins so they can use it without having to bundle it together with the plugin.\n\nAdditional to Caffeine I've also added the Guava adaptors which may be useful for some plugins that are still using Guava caches right now.\n",
    "head_branch": "feature/caffeine-plugins",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Expose Caffeine to plugins"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e860d9087c4d6d37a55d",
    "number": 1326,
    "body": "This is a simple pull request that adds support for message channels that, when created, combine messages channels in such a way that only members present in every channel are sent messages. This is quite useful for plugins interacting. I couldn't properly import this into my IDE so I had to write this in GitHub, hopefully it works properly. \n",
    "head_branch": "bleeding",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e861d9087c4d6d37a55e",
    "number": 1325,
    "body": "Added a boolean item property, which represents whether an item can be smelted in a furnace.\n\nImplemented by [SpongeCommon #877](https://github.com/SpongePowered/SpongeCommon/pull/877)\n",
    "head_branch": "SmeltableProperty",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e862d9087c4d6d37a55f",
    "number": 1323,
    "body": "Pinging @zml2008 as the commands guru!\n\nWhen using `GenericArguments.firstParsing()` with a sequence of arguments, for example:\n\n``` java\nGenericArguments.firstParsing(\n    GenericArguments.seq(\n        GenericArguments.string(Text.of(\"test1\")),\n        GenericArguments.string(Text.of(\"test2\"))\n    ),\n\n    GenericArguments.string(Text.of(\"test3\"))\n)\n```\n\nif we run the command `/test test`, both variables \"test1\" and \"test3\" will be added to the `CommandContext` as \"test\", which is incorrect. This is because the state of the `CommandArgs` object is saved, but the `CommandContext` is not.\n\nThis PR adds the ability to save the state of the `CommandContext` in the same way that the `CommandArgs` object is saved, so that using the first parsing argument with a sequence of arguments will not have their parsed arguments bleed into each other.\n\nA unit test has been added to verify this behaviour, and the code used to test this behaviour, along with output, is in the included gist.\n\nhttps://gist.github.com/dualspiral/0ac16d62f265e45222c1a22784cc2831\n\nI have targeted master/API 4.2.x as this is a bugfix that does not break any API methods.\n",
    "head_branch": "bugfix/command-context",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e863d9087c4d6d37a560",
    "number": 1318,
    "body": "https://github.com/SpongePowered/SpongeCommon/pull/862\n",
    "head_branch": "feature/aabb-bleeding",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Cleanup AABB and related code"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e864d9087c4d6d37a561",
    "number": 1315,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/851) | [SpongeForge](https://github.com/SpongePowered/SpongeForge/pull/770)\n\nThis is a more focused PR at dealing with several issues at once, but for the sake of having not had a decent PR description in a while, I'll rehash the conversational description that we used to have a while back.\n#### So what's changing?\n\nIn short, if a plugin developer is calling any API method that changes something, an event should be thrown. Traditionally, we used to have the inability to throw events for virtually everything, however, at this point in time, it's well within our means to throw events for all `setBlock`, `createEntity`, `spawnEntity`, etc. \n#### But why force plugin developers to supply a `Cause`? Don't developers know to throw events to check for things before they make a change?\n\nYes and no. It's been useful for developers to throw \"dummy\" events to check for permissions or block modifications before finalizing a change, and for other cases, to throw dummy spawn events before an entity is indeed spawned into the world. The problem with all of this is that it's entirely up to the developer whether to throw the events, or not throw the events, and other plugins are none the wiser. This is especially complicated by the fact that Sponge has a very complex tracking system that performs various actions based on pre-defined expectations. The change resolves a great many event cause tracking determining aspects, such as a synchronous task set up by plugin X to make a tree due to player Y. \n#### Could you explain why this wasn't an issue in API 4.X?\n\nThe issue lies in the API and the implementation. Originally planned, the CauseTracker in 1.8.9 does a very good job at determining what is causing X, Y, and Z happening, when it's _expected_. Plugins that call our methods to spawn entities are bypassing the CauseTracker, but only to a limited extent, there's no `Cause` required or provided, and other plugins have no knowledge of why an entity was being spawned. Or for that matter, the CauseTracker can flip out if a multitude of block changes take place in a synchronized task, but this isn't the fault of the CauseTracker, more so our contracts we set forth in the API. If I had to pinpoint why the change is necessary, it's that the CauseTracker is more of a mechanism to determine causes for which things happen.\n#### So what actually is changing API wise?\n\nIn short, any method that changes a block in a `World` (or `Extent`) will require a `Cause`. Virtually anything that touches changing blocks will now provide a `Cause` to the system, and the system will be able to apply that provided `Cause` to the ensuing `ChangeBlockEvent` (unless this is a populator, which can simply provide a recycled `Cause` as shown in the skylands populators and generators). Data API has gained an overloaded method that will provide a `Cause` for the cases that the `#offer(Key,Object,Cause)` will change a block in a `World`, however, normal offers that simply change data on a `TileEntity` can still use the traditional `#offer(Key,Object)` method. It is understandable at this point as well that the other `DataHolder` implementations may throw Data related events with the provided `Cause`.\n#### What else? What's this `BlockChangeFlag`?\n\nAh, so that is a brainchild of the various `boolean` flags that we used to require plugin developers to provide, namely to show that there are various _options_ to perform a block change. The reasoning for it is that previously, we could only allow developers to _NOT_ notify neighboring blocks on a block change, but we didn't allow it to _NOT_ perform block physics on placement. This caused issues with some `BlockSnapshot#restore`s, since the restore process would always perform block physics due to the nature of the implementation. At this point, instead of adding yet another `boolean` flag and set of overloads, it was simpler to use an object to determine whether neighbor notifications should take place, and if block physics should take place. In the future, more flags may be added as necessary, and this time without breaking the API ;).\n#### With all of the `Cause` usage, why does this look like the implementation is leaking into the API?\n\nIt is and isn't. Due to the nature of our tracking system, this is the best way that we can achieve a proper API contract of \"all your changes throw events\". Likewise, this eliminates the issues of being able to deterministically resolve what is performing changes to the world, without some obscure `Cause` containing a `Task` and or a `PluginContainer`. This also eliminates any sort of tracking required on our part to _determine_ what caused those changes. This ends up with the API being more contractually sound with the end result that plugins no longer have to throw dummy events and the implementation has no requirement to track and determine what is going on throughout different phases.\n\nAny further questions can be asked below.\n",
    "head_branch": "feature/block-change-flag",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Refactor changing blocks in extents. Adds BlockChangeFlags. All block\nchanges require a Cause so as to avoid internal tracking systems from\nmaking assumptions when plugins know perfectly well why they are\nchanging blocks. This also adds some overloads to Data API's offer\nmethods for when location based offers require changing a BlockState\nin a world.\n\nSigned-off-by: Gabriel Harris-Rouquette <gabizou@me.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e865d9087c4d6d37a562",
    "number": 1306,
    "body": "This following example is currently impossible to make, you have to insert the builder interface type in the `AbstractEntityDamageSourceBuilder` generics, but they only allow `AbstractEntityDamageSourceBuilder`s, and the generics of the `CustomEntityDamageSource.Builder` specify that you want a `CustomEntityDamageSource.Builder` as return value. This causes a conflict and breaks the `CustomEntityDamageSourceBuilderImpl`.\nThis is the same case for the `AbstractIndirectEntityDamageSource`.\nAnd exposed some fields to allow some null checks in the build method.\n\n``` java\npublic interface CustomEntityDamageSource extends EntityDamageSource {\n\n    public interface Builder extends EntityDamageSource.EntityDamageSourceBuilder<CustomEntityDamageSource, Builder> {\n\n    }\n}\n```\n\n``` java\npublic class CustomEntityDamageSourceImpl extends AbstractEntityDamageSource implements CustomEntityDamageSource {\n\n    protected CustomEntityDamageSourceImpl(CustomEntityDamageSourceBuilder builder) {\n        super(builder);\n    }\n}\n```\n\n``` java\npublic class CustomEntityDamageSourceBuilderImpl extends AbstractEntityDamageSource.AbstractEntityDamageSourceBuilder<CustomEntityDamageSource, CustomEntityDamageSource.Builder>\n        implements CustomEntityDamageSource.Builder {\n\n    @Override\n    public CustomEntityDamageSource build() throws IllegalStateException {\n        checkState(this.damageType != null, \"The damage type must be set\");\n        checkState(this.source != null, \"The entity must be set\");\n        return new CustomEntityDamageSourceImpl(this);\n    }\n}\n```\n",
    "head_branch": "fix-abstract-entity-damage-source-generics",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix AbstractEntityDamageSource generics."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e866d9087c4d6d37a563",
    "number": 1301,
    "body": "**[API](https://github.com/SpongePowered/SpongeAPI/pull/1301)** | [Common](https://github.com/SpongePowered/SpongeCommon/pull/828)\n\nAdds `GravityData` and removes gravity from `ArmorStandData`. This is due to a change in Minecraft  1.10 that allows all entities, not just armor stands, to be affected by the `NoGravity` tag.\n\nResolves #1300. \n\n``` java\n@Listener\npublic void onPlayerJoin(ClientConnectionEvent.Join event) {\n    Player player = event.getTargetEntity();\n    // Prints the current value\n    System.out.println(player.get(Keys.ENTITY_HAS_GRAVITY).get());\n    // Turns off gravity for the player\n    player.offer(Keys.ENTITY_HAS_GRAVITY, false);\n\n    // Test the DataManipulator\n    Optional<GravityData> optional = player.get(GravityData.class);\n    if(optional.isPresent()) {\n        Value<Boolean> value = optional.get().gravity();\n        // Prints the current value (false)\n        System.out.println(value.get());\n        // Turns gravity back on for the player\n        player.offer(optional.get().set(value.set(true)));\n    }\n}\n```\n",
    "head_branch": "feature/gravitydata",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1301 from Flibio/feature/gravitydata\n\nAdded GravityData and removed gravity from ArmorStandData"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e867d9087c4d6d37a564",
    "number": 1299,
    "body": "This changes VillagerZombieData to a composite DataManipulator.\n\nThe ZombieType specifies the kind of zombie, with Optional<Profession> specifying the profession only if it's a villager zombie.\n\nThis system allows mods to add new types of zombie villagers without requiring a matching zombie type (as is the current vanilla implementation).\n",
    "head_branch": "feature/zombies",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "ZombieData changes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e868d9087c4d6d37a565",
    "number": 1298,
    "body": "…selectors.;\n\nFixes https://github.com/SpongePowered/SpongeAPI/issues/1294\n",
    "head_branch": "FixEntityCommandElement",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e869d9087c4d6d37a566",
    "number": 1295,
    "body": "Nobody was doing this, and it seemed fun. So here is the Sponge Dialogue API, which is Sponge's equivalent of Bukkit's Conversations API. Fixes #432.\n\nFor those who don't know, the purpose of this sort of API is to allow plugins to initialize a back-and-forth communication in the chat. This can be used as a replacement for complicated commands, or for navigating menus.\n\nA `DialogueArchetype` object is constructed, which defines a few rules such as whether user input is swallowed as opposed to put in chat like normal, as well as an initial `Question` to use. It also contains a `DialogueChatHandler` and an arbitrary number of `DialogueConclusionHandler`s.\n\nA `Speaker` is somethiing that can take part in a dialogue. It has a few basic methods regarding current dialogues.\n\nWhere a `DialogueArchetype` represents the structure, a `Dialogue` represents an actual dialogue happening, and can retrieve things such as the list of `Speaker`s and what `Question` they're on.\n\nA `Question` is comprised of text shown to the `Speaker`, as well as an `AnswerProcessor` and an arbitrary number of `AdditionalAnswerProcessor`s. It also contains rules similar to those of the `DialogueArchetype`, and if defined, override them.\n\nAn `AnswerProcessor` is a functional interface for interpreting an `Answer` and returning the next `Question`. `AdditionalAnswerProcessor`s can do the same thing, minus being able to return the next `Question`. The purpose of these is to allow multiple plugins to take part in the same `Dialogue`.\n\nAn `Answer` represents a response to a `Question`. It is mostly a container class. \n\nA `DialogueChatHandler` is a class which determines how to handle chat sent to a `Speaker` in the middle of a `Dialogue`. It can perform handling whenever a message is sent, and decide whether or not to allow the message through, as well as being notified when the `Dialogue` has been concluded. However, a `DialogueConclusionHandler` is only for when the `Dialogue` has been concluded.\n\nEach `Dialogue` also contains a `DataContainer`, which all processors can use. Upon creation of the `Dialogue`, the container is populated from the defaults set by the `DialogueArchetype`, which can also be specified when building it.\n\nInput is greatly appreciated.\n",
    "head_branch": "feature/dialogue",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e86ad9087c4d6d37a567",
    "number": 1293,
    "body": "Fixes #1291\n\nCommon https://github.com/SpongePowered/SpongeCommon/pull/822\n\nForge https://github.com/SpongePowered/SpongeForge/pull/722\n\n@bloodmc \n\nOutput should now be correct:\n\n```\n> acee world.getLocation(0, 0, 0).getBlockRelative(Direction.SOUTHEAST)\n[13:50:15] [Server thread/INFO]: [ACE] Type: org.spongepowered.api.world.Location<CAP#1 extends org.spongepowered.api.world.extent.Extent> Value: Location{(1.0, 0.0, 1.0) in net.minecraft.world.WorldServer@1fafeaa9}\n> acee world.getLocation(0, 0, 0).getRelative(Direction.SOUTHEAST)\n[13:50:33] [Server thread/INFO]: [ACE] Type: org.spongepowered.api.world.Location<CAP#1 extends org.spongepowered.api.world.extent.Extent> Value: Location{(0.7071067811865475, 0.0, 0.7071067811865475) in net.minecraft.world.WorldServer@1fafeaa9}\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1293 from DDoS/master\n\nAdd support for ordinal block offsets in Direction"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e86bd9087c4d6d37a568",
    "number": 1285,
    "body": "API | [Common](https://github.com/SpongePowered/SpongeCommon/pull/818)\n\nIssue : https://github.com/SpongePowered/SpongeAPI/issues/1107\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e86cd9087c4d6d37a569",
    "number": 1284,
    "body": "- Added the ColorCommandElement\n- Added the RelativeVector3dCommandElement\n- Allow Vector3d and Location<World> elements to be completed through targeted blocks\n- Fixed tab completion behaviour of in command optionals and flags that aren't at the end, for example: `/tp [<target>] <destination>|[-world:-w <world>] <coordinates>`\n- Fixed a error caused by the WorldPropertiesElement when there are disabled properties present\n- Completely reset the CommandArgs state after parsing every FirstParsingCommandElement entry\n- Some other small bug fixes\n\nThere is currently a bug that still needs to be fixed.\n",
    "head_branch": "command-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e86dd9087c4d6d37a56a",
    "number": 1283,
    "body": "[API](https://github.com/SpongePowered/SpongeAPI/pull/1283) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/895)\n\nThis PR adds a method to Player, that allows for the simulation of chat.\n\nThe exact reasoning of it can be seen in the corresponding issue, https://github.com/SpongePowered/SpongeAPI/issues/733\n\nThis method returns the event so that the plugin can see what modifications have been made by other plugins, and to see if it has been cancelled.\n\nTest code,\n\n``` java\n    @Listener\n    public void onInteract(InteractBlockEvent.Secondary event, @First Player player) {\n        player.simulateChat(Text.of(\"Hello there\"));\n    }\n\n    @Listener\n    public void onMessage(MessageChannelEvent.Chat chat, @First Player player) {\n        Sponge.getServer().getBroadcastChannel().send(Text.of(\"Hello, \" + player.getName() + '!'));\n    }\n```\n",
    "head_branch": "feature/chat-simulation",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Added an API to simulate Player chat."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e86ed9087c4d6d37a56b",
    "number": 1279,
    "body": "_Continuation of #1121_\n\nSpectral arrows can give an entity glow potion effect temporarily. You can also apply it permanently with `Glowing` NBT tag. This exposes this to SpongeAPI.\n\nI've added a TODO in one of the javadocs - basically a couple entities do not show the glow, will need to do some testing when possible to work out exactly which entities do not do this.\n",
    "head_branch": "feature/glowing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add glowing API"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e86fd9087c4d6d37a56c",
    "number": 1276,
    "body": "Since both our implementations support asynchronous chunk loading now we should allow plugins to use that feature by being able to load chunks asynchronously if they don't need the loaded chunk immediately.\r\n\r\n**Implementation:** [SpongeVanilla](https://github.com/SpongePowered/SpongeVanilla/pull/303) |  [SpongeForge](https://github.com/SpongePowered/SpongeForge/pull/1299)\r\n",
    "head_branch": "feature/async-chunk-loading",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Allow plugins to load chunks asynchronously"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e870d9087c4d6d37a56d",
    "number": 1270,
    "body": "SpongeAPI (You're here!) | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/793)\n\nChanges to accommodate the SpongeCommon PR. See that PR for details.\n",
    "head_branch": "bugfix/selectors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e871d9087c4d6d37a56e",
    "number": 1266,
    "body": "Original PR: #1228 \nThis fixes the data which was derped during gabizou's pull, as well as the defining left/right HandSides\n",
    "head_branch": "feature/dominant-hand",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e872d9087c4d6d37a56f",
    "number": 1260,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/756)\nI heard @gabizou say some time ago that `DataManipulator`s are no longer allowed to store `Entity`s. So instead of implementing `HealingSourceData`, I just moved it into `EnderDragon` and implemented it there.\n",
    "head_branch": "healing-source-data",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1260 from JBYoshi/healing-source-data\n\n[1.9] Replace HealingSourceData with EnderDragon.getHealingCrystal()."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e873d9087c4d6d37a570",
    "number": 1258,
    "body": "[API](https://github.com/SpongePowered/SpongeAPI/pull/1258) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/752)\n\n---\n\n!! Current Code is now in main repository under `feature/custom-inventory` !! so don't bother commenting on code here.\n\nCustom Inventories!\n\nExample showing a _virtual_ chest to a Player:\n\n``` java\n    Inventory inv = Inventory.builder().of(Archetypes.CHEST).build();\n    player.openInventory(inv, Cause.of(NamedCause.source(player)));\n```\n",
    "head_branch": "feature/custominventory",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e874d9087c4d6d37a571",
    "number": 1256,
    "body": "My attempt at fixing https://github.com/SpongePowered/SpongeAPI/issues/1255\n\nAdd Asset::copyToDirectory that copies the asset (using it's filename ignoring path) to the provided directory.\n\nAdd Asset::getFileName to get the filename portion of the url.\n",
    "head_branch": "assetcopy",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Asset::copyToDirectory that copies the asset (using it's filename ignoring path) to the provided directory.\nAdd Asset::getFileName to get the filename portion of the url. (+2 squashed commit)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e875d9087c4d6d37a572",
    "number": 1252,
    "body": "\"OCD\" JDoc fixes. DataHolder already extends DataSerializable.\n",
    "head_branch": "octobyte/ocd",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1252 from octo-byte/octobyte/ocd\n\nFixes JavaDoc issues in #1000; removes implements DataSerializable from ItemStack"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e876d9087c4d6d37a573",
    "number": 1249,
    "body": "This targets bleeding because the existing getPotionEffect() method would return the changed effect, and does not currently.\n",
    "head_branch": "feature/mutable-potion-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix event factory"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e877d9087c4d6d37a574",
    "number": 1248,
    "body": "add child(CommandCallable, Collection<String>):CommandSpec.Builder to CommandSpec.Builder. This is simply a utility method.\n",
    "head_branch": "commandChild",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add child(CommandCallable, Collection<String>):CommandSpec.Builder to CommandSpec.Builder"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e878d9087c4d6d37a575",
    "number": 1247,
    "body": "This should be able to be modified without cancelling the event.\n",
    "head_branch": "feature/mutable-potion-events",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e879d9087c4d6d37a576",
    "number": 1244,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1244) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/720)\n",
    "head_branch": "feature/gpc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add removal and clear methods to GameProfileCache"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e87ad9087c4d6d37a577",
    "number": 1243,
    "body": "userOrSource behaves like playerOrSource\n",
    "head_branch": "feature/userorsource",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add userOrSource to GenericArguments\n\nuserOrSource behaves like playerOrSource"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e87bd9087c4d6d37a578",
    "number": 1242,
    "body": "This adds a userOrSource() method to GenericArguments. Functionally, it behaves like playerOrSource(), but has a User target instead of Player.\n",
    "head_branch": "feature/userorsource",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e87cd9087c4d6d37a579",
    "number": 1239,
    "body": "Fixes #1213 \n",
    "head_branch": "feature/text-rt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Switch CommandCallable methods to return Optional<Text> instead of Optional<? extends Text>. Fixes #1213"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e87dd9087c4d6d37a57a",
    "number": 1237,
    "body": "userOrSource behaves like playerOrSource\n",
    "head_branch": "feature/userorsource",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e87ed9087c4d6d37a57b",
    "number": 1235,
    "body": "Add GenericArguments.userOrSource(Text)\n",
    "head_branch": "bleeding",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e87fd9087c4d6d37a57c",
    "number": 1234,
    "body": "whoops, ignore this\n",
    "head_branch": "bleeding",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e880d9087c4d6d37a57d",
    "number": 1232,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1232) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/716)\n",
    "head_branch": "feature/idle-timeout",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add getter and setter for player idle timeout to Server"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e881d9087c4d6d37a57e",
    "number": 1231,
    "body": "[Forge](https://github.com/SpongePowered/SpongeForge/pull/627) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/715) | Api\n\nThis makes a small change to `Populator#populate` in order to give it an extent view of the area needing population rather than relying on the plugin to offset to the correct location, this also allows much more flexibility for implementations who wish to use a different pattern for population.\n\nA major usecase for this change is the ability to populate a non offset area to allow a single chunk to be regenerated for #574.\n",
    "head_branch": "fix/populatorarea",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Change Populator to take extent and not some chunk with an arbitrarily defined area extending beyond the chunk"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e882d9087c4d6d37a57f",
    "number": 1228,
    "body": "_Continuation of #1121_\nSpongePowered/SpongeCommon#630\n\nThis PR adds the ability for plugins to query the handedness of entities.\n#### Players\n\nPlayers are able to configure handedness through client settings. This is not configurable serverside, as such the implementation can get a player's handedness but will not be able to set it.\n### Entities\n\nMany living entities such as Skeletons or Zombies can have a dominant hand (Ghasts, for example, cannot). This is configurable with the `LeftHanded` NBT tag.\n\nImplementation wise this will likely only be represented by a single boolean, with each value inversely toggling the it.\n",
    "head_branch": "feature/dominant-hand",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Warn that DominantHandData will not work for Players"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e883d9087c4d6d37a580",
    "number": 1227,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1227) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/711)\nFixes #1097 \n",
    "head_branch": "feature/projectiles",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "All living entities are a Projectile source. Fixes #1097"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e884d9087c4d6d37a581",
    "number": 1226,
    "body": "**API** | [Common](https://github.com/SpongePowered/SpongeCommon/pull/710) | [Forge](https://github.com/SpongePowered/SpongeForge/pull/794)\n\nChanges `MobSpawnerData` and `Dungeon` to use `EntityArchetype`s instead of `EntitySnapshot`s.\n\nUpdates `Dungeon` to have option of a table, as explained in the Common branch.\n\nAdds a convenience method to `EntityArchetype` for creating an archetype based solely on an `EntityType`.\n\nAlso adds an immutable/unmodifiable version of `WeightedTable` to allow for wrapping of the default list of entities to use in a Dungeon. Without this, plugins could add/remove from this list potentially causing issues down the line. (if this is desired, maybe need to add better systems for doing so?)\n",
    "head_branch": "data/mob-spawner",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update MobSpawnerData for EntityArchetype, and add an immutable weighted table"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e885d9087c4d6d37a582",
    "number": 1224,
    "body": "**SpongeAPI** | [Common](https://github.com/SpongePowered/SpongeCommon/pull/703) | [Forge](https://github.com/SpongePowered/SpongeForge/pull/625)\r\nSupersedes #1088, #1206\r\n\r\n---\r\n\r\nThis PR adds a translation dictionary API to SpongeAPI.\r\n",
    "head_branch": "feature/translations",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e886d9087c4d6d37a583",
    "number": 1223,
    "body": "**API** // [Common](https://github.com/SpongePowered/SpongeCommon/pull/701)\n\nAdds several new data types to ChannelBuf.\n- UTF strings written in the style of `DataOutputStream`\n- Varints written according to [https://developers.google.com/protocol-buffers/docs/encoding#varints](https://developers.google.com/protocol-buffers/docs/encoding#varints)\n- byte arrays written as a varint with the data\n- raw byte data\n",
    "head_branch": "feature/channelbuf",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e887d9087c4d6d37a584",
    "number": 1222,
    "body": "API | [Common](https://github.com/SpongePowered/SpongeCommon/pull/702)\n\nRefactor of the particles api to simplify the process to create particle because of the different types of particles (colorable, resizable), all the sub classes are removed and replaced by a option system which will also make it easier to share options between different particle types. Additionally added particle effect for 1.9 and renamed the particle fields.\n\nChanges:\n- Removed the particle subclasses (type, builders and effect subclasses)\n- Added a option system for colors, scales, notes\n- Fixed some names like: motion -> velocity, size -> scale\n- Renamed particle types fields to have more readable names\n- Added missing 1.9 particle types\n\nExample plugin:\n\n``` java\n@Plugin(id = \"particletest\")\npublic class ParticleTestPlugin {\n\n    private static final String PERMISSION = \"particletest.command\";\n\n    @Inject\n    private Logger logger;\n\n    @Listener\n    public void onGameInit(GameInitializationEvent event) {\n        this.logger.info(\"Loaded the particle test plugin!\");\n        Sponge.getCommandManager().register(this, CommandSpec.builder()\n                .arguments(\n                        GenericArguments.catalogedElement(Text.of(\"type\"), ParticleType.class),\n                        GenericArguments.vector3d(Text.of(\"position\")),\n                        GenericArguments.optional(GenericArguments.world(Text.of(\"world\"))),\n                        GenericArguments.flags()\n                                .valueFlag(GenericArguments.integer(Text.of(\"amount\")), \"-amount\", \"a\")\n                                .valueFlag(GenericArguments.vector3d(Text.of(\"offset\")), \"-offset\", \"o\")\n                                .valueFlag(GenericArguments.vector3d(Text.of(\"motion\")), \"-motion\", \"m\")\n                                .valueFlag(GenericArguments.vector3d(Text.of(\"color\")), \"-color\", \"c\")\n                                .valueFlag(GenericArguments.doubleNum(Text.of(\"scale\")), \"-scale\", \"s\")\n                                .valueFlag(GenericArguments.catalogedElement(Text.of(\"note\"), NotePitch.class), \"-note\", \"n\")\n                                .valueFlag(GenericArguments.catalogedElement(Text.of(\"block\"), BlockState.class), \"-block\", \"b\")\n                                .valueFlag(GenericArguments.catalogedElement(Text.of(\"item\"), ItemType.class), \"-item\", \"i\")\n                                .buildWith(GenericArguments.none()))\n                .permission(PERMISSION)\n                .executor((src, args) -> {\n                    ParticleType particleType = args.<ParticleType>getOne(\"type\").get();\n                    Vector3d position = args.<Vector3d>getOne(\"position\").get();\n                    World world = args.<WorldProperties>getOne(\"world\")\n                            .map(props -> Sponge.getServer().getWorld(props.getUniqueId()).get())\n                            .orElseGet(((Locatable) src)::getWorld);\n\n                    ParticleEffect.Builder builder = ParticleEffect.builder();\n                    int count = args.<Integer>getOne(\"amount\").orElse(1);\n\n                    builder.type(particleType);\n                    builder.count(count);\n                    args.<Vector3d>getOne(\"offset\").ifPresent(builder::offset);\n                    args.<Vector3d>getOne(\"motion\").ifPresent(builder::velocity);\n                    args.<Vector3d>getOne(\"color\").ifPresent(color ->\n                            builder.option(ParticleOptions.COLOR, Color.of(color.toInt())));\n                    args.<NotePitch>getOne(\"note\").ifPresent(note ->\n                            builder.option(ParticleOptions.NOTE, note));\n                    args.<Double>getOne(\"scale\").ifPresent(scale ->\n                            builder.option(ParticleOptions.SCALE, scale));\n                    args.<BlockState>getOne(\"block\").ifPresent(blockState ->\n                            builder.option(ParticleOptions.BLOCK_STATE, blockState));\n                    args.<ItemType>getOne(\"item\").ifPresent(item ->\n                            builder.option(ParticleOptions.ITEM_STACK_SNAPSHOT, ItemStack.of(item, 1).createSnapshot()));\n\n                    world.spawnParticles(builder.build(), position);\n                    src.sendMessage(t(\"Successfully spawned the particle %s\", particleType.getName()));\n                    return CommandResult.success();\n                })\n                .build(), \"particleeffect\");\n    }\n}\n```\n",
    "head_branch": "refactor/particles",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e888d9087c4d6d37a585",
    "number": 1221,
    "body": "_Rebase of #1122_\n\nSpectral arrows can give an entity glow potion effect temporarily. You can also apply it permanently with `Glowing` NBT tag. This exposes this to SpongeAPI.\n\nI've added a TODO in one of the javadocs - basically a couple entities do not show the glow, will need to do some testing when possible to work out exactly which entities do not do this.\n",
    "head_branch": "feature/glowing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e889d9087c4d6d37a586",
    "number": 1220,
    "body": "This adds the new 1.9 gamerules, and adds a [description](http://minecraft.gamepedia.com/Commands#gamerule) to all gamerules.\nSupersedes #1187\n",
    "head_branch": "feature/gamerules",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add new 1.9 gamerules, and add a description to all gamerules"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e88ad9087c4d6d37a587",
    "number": 1219,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1219) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/694)\nSupersedes #1154\n",
    "head_branch": "feature/scoreboard-collision",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add collision rules to scoreboard API\n\nAlso rename Visibilities enumeration values"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e88bd9087c4d6d37a588",
    "number": 1218,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1218) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/693)\nSupersedes #1193 \nThis adds an API to control an `Arrow`s pickup rule.\n",
    "head_branch": "feature/pickup-rules",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Arrow pickup rules"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e88cd9087c4d6d37a589",
    "number": 1217,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1217) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/692)\r\nSupersedes #1149 \r\nAdds #728 \r\n\r\nExample:\r\n![example](https://i.imgur.com/iCoLRtb.png)\r\n\r\n``` java\r\n    @Listener\r\n    public void join(final ClientConnectionEvent.Join event) {\r\n        Player player = event.getTargetEntity();\r\n        ServerBossBar bossBarA = ServerBossBar.builder()\r\n            .name(Text.of(\r\n                TextColors.DARK_AQUA, \"A\",\r\n                TextColors.DARK_PURPLE, \"l\",\r\n                TextColors.BLUE, \"l\",\r\n                \" \",\r\n                TextColors.DARK_GREEN, \"y\",\r\n                TextColors.AQUA, \"o\",\r\n                TextColors.RED, \"u\",\r\n                TextColors.LIGHT_PURPLE, \"r\",\r\n                \" \",\r\n                TextColors.GOLD, \"c\",\r\n                TextColors.DARK_AQUA, \"o\",\r\n                TextColors.LIGHT_PURPLE, \"l\",\r\n                TextColors.DARK_PURPLE, \"o\",\r\n                TextColors.DARK_GREEN, \"r\",\r\n                TextColors.RED, \"s\",\r\n                \" \",\r\n                TextColors.GOLD, \"s\",\r\n                TextColors.DARK_GREEN, \"t\",\r\n                TextColors.DARK_PURPLE, \"a\",\r\n                TextColors.DARK_AQUA, \"r\",\r\n                TextColors.RED, \"t\",\r\n                \" \",\r\n                TextColors.GOLD, \"t\",\r\n                TextColors.DARK_PURPLE, \"o\",\r\n                \" \",\r\n                TextColors.DARK_PURPLE, \"b\",\r\n                TextColors.RED, \"u\",\r\n                TextColors.DARK_AQUA, \"r\",\r\n                TextColors.DARK_PURPLE, \"n\"\r\n            ))\r\n            .percent(0.3f)\r\n            .color(BossBarColors.PURPLE)\r\n            .overlay(BossBarOverlays.PROGRESS)\r\n            .build();\r\n        ServerBossBar bossBarB = ServerBossBar.builder()\r\n            .name(Text.of(\r\n                TextColors.DARK_PURPLE, \"F\",\r\n                TextColors.BLUE, \"i\",\r\n                TextColors.AQUA, \"n\",\r\n                TextColors.DARK_GREEN, \"a\",\r\n                TextColors.LIGHT_PURPLE, \"l\",\r\n                TextColors.DARK_AQUA, \"l\",\r\n                TextColors.YELLOW, \"y\",\r\n                \" \",\r\n                TextColors.RED, \"I\",\r\n                \" \",\r\n                TextColors.AQUA, \"f\",\r\n                TextColors.DARK_AQUA, \"e\",\r\n                TextColors.DARK_PURPLE, \"e\",\r\n                TextColors.RED, \"l\",\r\n                \" \",\r\n                TextColors.DARK_PURPLE, \"t\",\r\n                TextColors.DARK_AQUA, \"h\",\r\n                TextColors.YELLOW, \"e\",\r\n                \" \",\r\n                TextColors.DARK_PURPLE, \"a\",\r\n                TextColors.AQUA, \"i\",\r\n                TextColors.LIGHT_PURPLE, \"r\",\r\n                \" \",\r\n                TextColors.DARK_PURPLE, \"I\",\r\n                \" \",\r\n                TextColors.DARK_AQUA, \"b\",\r\n                TextColors.YELLOW, \"r\",\r\n                TextColors.GOLD, \"e\",\r\n                TextColors.LIGHT_PURPLE, \"a\",\r\n                TextColors.RED, \"t\",\r\n                TextColors.DARK_PURPLE, \"h\",\r\n                TextColors.DARK_AQUA, \"e\"\r\n            ))\r\n            .percent(0.6f)\r\n            .color(BossBarColors.BLUE)\r\n            .overlay(BossBarOverlays.NOTCHED_12)\r\n            .build();\r\n        bossBarA.addPlayer(player);\r\n        bossBarB.addPlayer(player);\r\n    }\r\n```\r\n",
    "head_branch": "feature/bossbar",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1217 from kashike/feature/bossbar\n\nBoss Bar API"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e88ed9087c4d6d37a58a",
    "number": 1216,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1216) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/691)\nSupersedes #1146\n",
    "head_branch": "feature/blockentities",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add new 1.9 block entities"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e88fd9087c4d6d37a58b",
    "number": 1215,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1215) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/689)\n\n---\n\nThis is a continuation of #793.\n",
    "head_branch": "feature/errorreport",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e890d9087c4d6d37a58c",
    "number": 1214,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/687) | [SpongeForge](https://github.com/SpongePowered/SpongeForge/pull/622) | [SpongeVanilla](https://github.com/SpongePowered/SpongeVanilla/pull/238)\n\nAllows SpongePowered/Ore#95 to be added without giving (most) plugin developers any additional work. This uses a dependency version range, so it will work with any SpongeAPI version that's guaranteed to be compatible.\n",
    "head_branch": "ap-sponge-dependency",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e891d9087c4d6d37a58d",
    "number": 1210,
    "body": "API | [Common](https://github.com/SpongePowered/SpongeCommon/pull/682) | [Forge](https://github.com/SpongePowered/SpongeForge/pull/661) | [LiteMod](https://github.com/Cybermaxke/LiteSpongeClient/releases/)\r\n\r\nThis PR adds a key bindings api that will allow plugin developers to create custom key bindings. The api is always available, on both client and server versions, this is because the server will send packets to register the key bindings on joining the server and cleaned up afterwards, but this is a implementation detail.\r\n\r\nI am not sure if I should have waited for the client-phase-1, but since the client isn't required for players to join and the api impl does not require any client. The impl will only send packets to the client and recieve them back.\r\n\r\nI am also also only going to implement this in the minecraft versions 1.9+, depending on which version should be supported at that time.\r\n\r\nThere is already a small LiteLoader mod I made for the client features, it won't work in combination with  Forge. Most of the keyboard code will be able to be reused for the Forge implementation.\r\n\r\nTest plugin:\r\n\r\n``` java\r\n@Plugin(id = \"keyboardtest\")\r\npublic class TestKeyboardPlugin {\r\n\r\n    @Listener\r\n    public void onGameInit(GameInitializationEvent event) {\r\n        final KeyBinding myTestKey = KeyBinding.builder()\r\n                .displayName(Text.of(\"Test Binding\"))\r\n                .category(KeyCategories.GAMEPLAY)\r\n                .listener(InteractKeyEvent.Press.class, e -> e.getTargetEntity().sendMessage(Text.of(\"Ow, that hurt...\")))\r\n                .build(this, \"test\");\r\n        Sponge.getRegistry().register(KeyBinding.class, myTestKey);\r\n        final KeyCategory testCategory = KeyCategory.builder()\r\n                .title(Text.of(\"My Test Category\"))\r\n                .build(this, \"test_category\");\r\n        Sponge.getRegistry().register(KeyCategory.class, testCategory);\r\n        final KeyBinding myOtherTestKey = KeyBinding.builder()\r\n                .displayName(Text.of(\"Other Test Binding\"))\r\n                .category(testCategory)\r\n                .context(KeyContexts.IN_GAME)\r\n                .listener(InteractKeyEvent.Press.class, e -> e.getTargetEntity().sendMessage(Text.of(\"And... Nothing...\")))\r\n                .listener(InteractKeyEvent.Release.class, e -> e.getTargetEntity().sendMessage(Text.of(\"Nope still nothing...\")))\r\n                .build(this, \"other_test\");\r\n        Sponge.getRegistry().register(KeyBinding.class, myOtherTestKey);\r\n        final KeyBinding contextTestKey = KeyBinding.builder()\r\n                .displayName(Text.of(\"Context Test Binding\"))\r\n                .category(testCategory)\r\n                .context(KeyContexts.INVENTORY)\r\n                .listener(InteractKeyEvent.Press.class, e -> e.getTargetEntity().playSound(\r\n                        SoundTypes.UI_BUTTON_CLICK, e.getTargetEntity().getLocation().getPosition(), 0.5))\r\n                .build(this, \"context_test\");\r\n        Sponge.getRegistry().register(KeyBinding.class, contextTestKey);\r\n    }\r\n\r\n    @Listener\r\n    public void onRegisterKeyBinding(RegisterKeyBindingsEvent event) {\r\n        System.out.println(String.format(\"onRegisterKeyBinding: %s keyBindings, player %s\",\r\n                event.getKeyBindings().size(), event.getTargetEntity().getName()));\r\n    }\r\n\r\n    @Listener(order = Order.EARLY)\r\n    public void onInteractKeyPress(InteractKeyEvent.Press event) {\r\n        System.out.println(String.format(\"onInteractKeyPrePress: %s, player %s\",\r\n                event.getKeyBinding().getId(), event.getTargetEntity().getName()));\r\n    }\r\n}\r\n```\r\n",
    "head_branch": "feature/key-bindings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e892d9087c4d6d37a58e",
    "number": 1209,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1209) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/680)\n\n---\n\nThis is a work-in-progress pull request, and the description will be updated once more progress has been made.\n",
    "head_branch": "feature/settings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e893d9087c4d6d37a58f",
    "number": 1208,
    "body": "This PR adds a key bindings api that will allow plugin developers to create custom key bindings. The api is always available, on both client and server versions, this is because the server will send packets to register the key bindings on joining the server and cleaned up afterwards, but this is a implementation detail.\n\nI am not sure if I should have waited for the client-phase-1, but since the client isn't required for players to join and the api impl does not require any client. The impl will only send packets to the client and recieve them back.\n\nI am also also only going to implement this in the minecraft versions 1.9+, depending on which version should be supported at that time.\n\nThe implementation will follow once the api is mostly finished/reviewed.\n\nExample usage:\n\n``` java\nprivate KeyBinding myTestKey;\n\n@Listener\npublic void onGameInit(GameInitializationEvent event) {\n    this.myTestKey = KeyBinding.builder()\n            .id(\"testPluginId:test\")\n            .category(KeyCategories.GAMEPLAY)\n            .build();\n    Sponge.getRegistry().register(KeyBinding.class, this.myTestKey);\n}\n\n@Listener\npublic void onInteractKey(InteractKeyEvent event) {\n    if (event.getKeyBinding() == this.myTestKey) {\n        event.getTargetEntity().sendMessage(Text.of(\"Ow, that hurt...\"));\n    }\n}\n```\n\nNetworking draft:\nEach key binding will have a internal id which will be used for networking, the default minecraft key bindings will get a inbuild internal id.\n\nOn Join:\n1. Call the RegisterKeyBindingsEvent\n2. Server -> Client: Register the custom key categories, includes string id, internal id and title\n3. Server -> Client: Register the applicable custom key bindings, includes string id, internal id, name, category\n\nWhile playing a player clicks/releases a key:\nClient -> Server: Send state of the key\n\nOn logout:\nRemove all the custom keys and categories.\n",
    "head_branch": "feature/key-bindings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e894d9087c4d6d37a590",
    "number": 1206,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1206) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/677) | [Forge](https://github.com/SpongePowered/SpongeForge/pull/618)\nThis is a continuation of #1088.\n\n---\n\nThis PR adds a localization API to SpongeAPI among some other breaking changes. The `provideFirst(Class)` method has been added to ServiceManager to allow for extensible services and `getServiceManager` has been added to `PluginContainer` for internal services. In the context of localization, this allows plugins to register their own `Dictionary` and have it be received with `plugin.getServiceManager().provideFirst(Dictionary.class);` without the need to know the exact implementing class.\n\n---\n\n**Example usage:**\n\n``` java\n@Listener\npublic void onGameStarted(GameStartedServerEvent event) {\n    DefaultPluginDictionary dict = new DefaultPluginDictionary(this, Locales.DEFAULT, configDir);\n    try {\n        dict.load();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    Sponge.getPluginManager().getServiceManager(this).setProvider(Cause.of(this), Dictionary.class, dict);\n}\n```\n\nThis will create a new dictionary that will first look for the dictionary file in `<configDir>/<pluginId>.dict` and then as a resource at `<pluginId>.dict`. Plugins are of course free to implement their localization through dictionaries however they want.\n\n**Example .dict file:**\n\n```\nen_US {\n    hello=\"Hello\"\n}\nen_GB {\n    hello=\"'Ello govna'\"\n}\n```\n\n``` java\ndictionary.get(\"hello\").get(); // \"Hello\"\ndictionary.get(\"hello\", Locale.UK).get(); // \"'Ello govna'\"\n\n// alternatively\n\nText.get(this, \"hello\").get(); // Text{\"Hello\"}\nText.get(this, \"hello\", Locale.UK).get(); // Text{\"'Ello govna'\"}\n\n// localize for player's client locale\n\nText.get(this, \"hello\", player.getLocale()).get();\n```\n",
    "head_branch": "feature/locale",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e895d9087c4d6d37a591",
    "number": 1202,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1202) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/676)\n",
    "head_branch": "feature/chattype2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "World is a MessageReceiver, add TextTemplate methods to ChatTypeMessageReceiver, and add WorldMessageChannel"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e896d9087c4d6d37a592",
    "number": 1201,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1201) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/675)\nImplements #1171 \n\n---\n\nThis PR adds an annotation-based command API to SpongeAPI.\n\nExample:\n\n``` java\n    @Listener\n    public void starting(final GameStartingServerEvent event) {\n        this.game.getCommandManager().install(this, new AbstractCommandModule() {\n            @Override\n            protected void configure() {\n                // Here I bind any commands registered through this command module who has `Logger` in the signature\n                // to `MiserableTest.this.logger` which, in this case, is the Logger of my test plugin.\n                this.bind(Logger.class).toProvider((args, modifiers) -> MiserableTest.this.logger);\n                // Here I bind any commands registered through this command module who has `World` in the signature\n                // to the first world found using the iterator which, in this case, is the Logger of my test plugin.\n                this.bind(World.class).toProvider((args, modifiers) -> Sponge.getServer().getWorlds().iterator().next());\n                this.register(new ExampleCommands());\n            }\n        });\n    }\n\n    public static class ExampleCommands {\n\n        /*\n         * /kittens actions\n         * /cats actions\n         */\n        // @formatter:off\n        @Parent(\"kittens\")\n        @Parent(\"cats\")\n        @Command(\"actions\")\n        @Permission({\n            \"example.kittens\",\n            \"example.kittens.actions\"\n        })\n        @PlainDescription(\n            description = \"Display a listing of actions\",\n            usage = \"/kittens pet\",\n            help = \"\"\n        )\n        @Default(defaultOnly = true)\n        // @formatter:on\n        public CommandResult actions(CommandSource source) {\n            source.sendMessage(Text.of(\"Actions\"));\n            return CommandResult.success();\n        }\n\n        /*\n         * /kittens actions pet\n         * /cats actions pet\n         */\n        // @formatter:off\n        @Parent({\"kittens\", \"actions\"})\n        @Parent({\"cats\", \"actions\"})\n        @Command(\"pet\")\n        @Permission({\n            \"example.kittens\",\n            \"example.kittens.actions\",\n            \"example.kittens.actions.pet\"\n        })\n        // The description, usage, and help texts are static.\n        @PlainDescription(\n            description = \"Pet the kitty\",\n            usage = \"/kittens pet\",\n            help = \"how2helppet?\"\n        )\n        // @formatter:on\n        public CommandResult pet(Logger logger, CommandSource source) {\n            source.sendMessage(Text.of(\"Success from pet\"));\n            logger.info(\"Meow.\");\n            return CommandResult.success();\n        }\n    }\n```\n\n---\n\nThanks to @jamierocks for his initial work on #1186 \n",
    "head_branch": "feature/annotation-commands",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e897d9087c4d6d37a593",
    "number": 1200,
    "body": "",
    "head_branch": "feature/bump-math",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Bump flow-math to 1.0.2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e898d9087c4d6d37a594",
    "number": 1199,
    "body": "Looking up chunks from the world's global chunk map is a major hotspot in the server. This API provides a means to get chunks relative to one you already have without going through this map. The default implementation still goes through the world but SpongeCommon overrides this to implement a more efficient lookup.\n",
    "head_branch": "chunk-neighbor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1199 from amaranth/chunk-neighbor\n\nAdd Chunk#getNeighbor API for efficiently accessing neighbor chunks"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e899d9087c4d6d37a595",
    "number": 1198,
    "body": "Following up on #1168.\n\nWhile custom data has been supported for many months now, and a few plugin developers have started using it, I've been listening to the qualms with _implementing_ custom data. For the most part, the issues are:\n- Too many methods to write that are somewhat confusing\n- Forgetting to call `registerGettersAndSetters()`\n- Using a mutable variant in the immutable object as a field for reference\n- Writing serialization code that works is hard (not really, just not super obvious)\n- Having to write 3 classes just to store a `String` onto an `Entity` or `ItemStack` is a bit excessive\n\nMore elaborate descriptions will come.\n\nExamples of use for a single/multiple value based `DataManipulator` without the requirement of having hard interfaced classes (mainly where you focus on using `Key`s only):\n\n``` java\n\n\npublic class SimpleStringCustomData {\n\n    // For obvious reasons, we want to be able to use the key for various things. so we generate it!\n    public static final Key<Value<String>> MY_STRING = KeyFactory.makeSingleKey(String.class, Value.class, DataQuery.of(\"MyString\"), \"com.gabizou.my_string\", \"MyStringKey\");\n\n    // We get to use the CustomDataProvider, however, since there are no hard interfaces provided,\n    // we can't use any form of generics. Fortunately for us, we don't really care about generics,\n    // except for using our Key. With that, we still need to provide some information about the\n    // default values of that key.\n    // So, in essence, we still get our DataRegistration object back, which can be private.\n    // The nice thing about this is that the registration, once validated and classes generated,\n    // the classes and builder instance are also validated and registered with the DataManager.\n    // No further registration is required\n    private static final DataRegistration<?, ?> MY_STRING_REGISTRATION = CustomDataProvider.builder()\n            .id(\"CustomStringData\")\n            //.withInt(MY_STRING, 54) // Will not compile due to method requirements :D\n            .withString(MY_STRING, \"DefaultString\")\n            .build(null); // Not actually supposed to be null, but it can be for the sake of demonstration\n\n    // We now have our generated \"super class\" which can be used in any methods accepting manipulator classes\n    public static final Class<? extends DataManipulator<?, ?>> MY_STRING_MANIPULATOR = MY_STRING_REGISTRATION.getSuperManipulator();\n    // We also have our immutable registration\n    public static final Class<? extends ImmutableDataManipulator<?, ?>> MY_STRING_IMMUTABLE_MANIPULATOR = MY_STRING_REGISTRATION.getSuperImmutable();\n    // And of course, our data builder class\n    public static final Class<? extends DataManipulatorBuilder<?, ?>> MY_STRING_BUILDER_CLASS = MY_STRING_REGISTRATION.getBuilderClass();\n    // Oh! And I almost forgot, we can have our own static instance of our manipulator builder since that is generated for us as well!\n    public static final DataManipulatorBuilder<?, ?> MY_STRING_BUILDER = MY_STRING_REGISTRATION.getBuilder();\n\n    // After all this is set and done, the DataRegistration is also able to produce new instances\n    // without having to use the DataManager, since it already has the instance prepared.\n\n\n}\n```\n",
    "head_branch": "feature/data-generation",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e89ad9087c4d6d37a596",
    "number": 1197,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1197) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/667)\n",
    "head_branch": "feature/ipd",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e89bd9087c4d6d37a597",
    "number": 1195,
    "body": "This adds the following helper methods to `CommandResult` to prevent lots of duplication in plugins:\n- `CommandResult.successCount(int)`\n- `CommandResult.affectedBlocks(int)`\n- `CommandResult.affectedEntities(int)`\n- `CommandResult.affectedItems(int)`\n- `CommandResult.queryResult(int)`\n",
    "head_branch": "feature/commandresult",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add helper methods to CommandResult"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e89cd9087c4d6d37a598",
    "number": 1193,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1193) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/662)\n\nThis adds an API to control an `Arrow`s pickup rule.\n",
    "head_branch": "feature/pickup-rules",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e89dd9087c4d6d37a599",
    "number": 1189,
    "body": "[SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/935) | **SpongeAPI**\r\n\r\nThis is a very WIP API. I'm open to suggestions on how the API should be designed.  \r\nIf I have missed and open-able GUIs then let me know.\r\n\r\n",
    "head_branch": "feature/player-gui",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e89ed9087c4d6d37a59a",
    "number": 1187,
    "body": "This adds the new 1.9 gamerules, and adds a [description](http://minecraft.gamepedia.com/Commands#gamerule) to all gamerules.\n",
    "head_branch": "feature/gamerules",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e89fd9087c4d6d37a59b",
    "number": 1186,
    "body": "[Common](https://github.com/SpongePowered/SpongeCommon/pull/656)\n\nExample: \n\n``` java\n    @Command(\n        aliases = {\"actions\"}\n    )\n    @TranslatableDescription(\n        description = \"some.translation.key.description\",\n        usage = \"some.translation.key.usage\",\n        help = \"some.translation.key.help\"\n    )\n    @Group(\"kittens\") // /kittens actions\n    @Group(\"cats\") // /cats actions\n    @Permission({\n        \"some.permission\",\n        \"some.other.permission\"\n    })\n    public CommandResult example() {\n        return CommandResult.empty();\n    }\n\n    @Command(\n        aliases = {\"pet\"}\n    )\n    @PlainDescription(\n        description = \"Pet the kitty\",\n        usage = \"/kittens pet\",\n        help = \"how2helppet?\"\n    )\n    @Group({\"kittens\", \"actions\"}) // /kittens actions pet\n    @Group({\"cats\", \"actions\"}) // /cats actions pet\n    @Permission({\n        \"some.permission\",\n        \"some.other.permission\"\n    })\n    public CommandResult anotherExample() {\n        return CommandResult.empty();\n    }\n```\n",
    "head_branch": "feature/annotcmd",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8a0d9087c4d6d37a59c",
    "number": 1182,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1182) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/649) | [Forge](https://github.com/SpongePowered/SpongeForge/pull/609)\n\nThis adds a new `ClientConnectionEvent.Handshake` event which is fired during a client `HANDSHAKE`. This event allows for more versatile handshaking to occur - the Sponge implementations are limited to BungeeCord-specific handshaking currently.\n\nTo replicate the BungeeCord-style handshaking:\n\n``` java\n    @Listener\n    public void handshake(final ClientConnectionEvent.Handshake event) {\n        String[] split = event.getHandshakeString().split(\"\\00\");\n        if (split.length == 3 || split.length == 4) {\n            event.setServerHostname(split[0]);\n            event.setSocketAddressHostname(split[1]);\n\n            GameProfile profile = GameProfile.of(UUID.fromString(split[2].replaceFirst(\"(\\\\w{8})(\\\\w{4})(\\\\w{4})(\\\\w{4})(\\\\w{12})\", \"$1-$2-$3-$4-$5\")), null);\n\n            if (split.length == 4) {\n                ProfileProperty[] properties = GSON.fromJson(split[3], ProfileProperty[].class);\n                for (ProfileProperty property : properties) {\n                    profile.getPropertyMap().put(property.getName(), property);\n                }\n            }\n\n            event.setGameProfile(profile);\n        } else {\n            event.setFailed(true);\n        }\n    }\n```\n",
    "head_branch": "feature/handshake",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8a1d9087c4d6d37a59d",
    "number": 1176,
    "body": "",
    "head_branch": "1.9-multi-world",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 1.9 into multi-world branch for updates.\n\nSigned-off-by: Gabriel Harris-Rouquette <gabizou@me.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8a2d9087c4d6d37a59e",
    "number": 1173,
    "body": "**SpongeAPI** | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/634)\n\nPlainly, this adds the ability for POJOs to reactively be serialized appropriately without creating `DataContainer`s for the various objects.\n\nThe default implementation in SpongeCommon contains registration for the following:\n- `java.util.UUID`\n- `com.flowpowered.math.vector.Vector2i`\n- `com.flowpowered.math.vector.Vector2l`\n- `com.flowpowered.math.vector.Vector2d`\n- `com.flowpowered.math.vector.Vector2f`\n- `com.flowpowered.math.vector.Vector3i`\n- `com.flowpowered.math.vector.Vector3l`\n- `com.flowpowered.math.vector.Vector3d`\n- `com.flowpowered.math.vector.Vector3f`\n- `com.flowpowered.math.vector.Vector4i`\n- `com.flowpowered.math.vector.Vector4l`\n- `com.flowpowered.math.vector.Vector4d`\n- `com.flowpowered.math.vector.Vector4f`\n- `com.flowpowered.math.imaginary.Complexd`\n- `com.flowpowered.math.imaginary.Complexf`\n- `com.flowpowered.math.imaginary.Quaterniond`\n- `com.flowpowered.math.imaginary.Quaternionf`\n- `java.time.LocalDate`\n- `java.time.LocalTime`\n- `java.time.LocalDateTime`\n- `java.time.ZonedDateTime`\n- `java.time.Instant`\n\nAny additional objects/types that should be considered default serialized? Please reply below! Note that we will not accept serializing abstract classes or interfaces!\n",
    "head_branch": "feature/data-serializers",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add DataSerializer API for java objects that are not natively DataSerializable.\n\nSigned-off-by: Gabriel Harris-Rouquette <gabizou@me.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8a3d9087c4d6d37a59f",
    "number": 1172,
    "body": "See #1142 and the actual specification [here](https://github.com/SpongePowered/Schematic-Specification) (https://github.com/SpongePowered/Schematic-Specification). Big thanks to @Deamon5550 for the actual specification and everyone in the SpongeDev IRC. This is my first PR, so I hope it's not _too_ bad. Input is appreciated--this is a fairly important API because the Structures system would likely be based on it. This is a non-breaking API addition (at the moment).\n",
    "head_branch": "feature/schematicapi",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8a4d9087c4d6d37a5a0",
    "number": 1164,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1164) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/620)\n\n[Test plugin](https://gist.github.com/windy1/adfd334770ef12c13dba9a348f9570dc)\n\nThis PR completes the Explosives API and adds two new events: `ExplosiveEntityEvent.Prime` and `ExplosiveEntityEvent.Detonate`.\n\nSigned-off-by: Walker Crouse walkercrouse@hotmail.com\n",
    "head_branch": "explosions",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Rework Explosives API\n\nSigned-off-by: Walker Crouse <walkercrouse@hotmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8a5d9087c4d6d37a5a1",
    "number": 1162,
    "body": "This is the API from the last PR (https://github.com/SpongePowered/SpongeAPI/pull/531), updated to match current API conventions.\n\nFor the WIP Implementation see: https://github.com/SpongePowered/SpongeCommon/pull/625\n\nRemaining Tasks:\n- [x] Document `SerializationPolicy`'s effect on saving changes to a `MapView`.\n",
    "head_branch": "feature/maps-new",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8a6d9087c4d6d37a5a2",
    "number": 1160,
    "body": "Currently the [`org.spongepowered.api.util.Direction`](https://github.com/SpongePowered/SpongeAPI/blob/751873a73cd4ffa2583361181a8d20879393cc51/src/main/java/org/spongepowered/api/util/Direction.java) class only supports the 4 cardinal directions, the 4 ordinal directions, and the 8 secondary ordinal directions, plus the up&down vertical directions and the \"NONE\" direction. This adds **half, quarter, and three quarters up&down** directions for **each horizontal** direction, minus \"NONE\", totaling 96 new directions. This also add a convenient `DirectionVectors` class to get the vectors these directions use without getting the direction and calling `toVector3d()` on it.\n\nThis is based on bleeding, because I have re-organized the fields, [breaking](http://www.benf.org/other/cfr/switch-on-enum.html) already-compiled code. Breaking could be avoided, but the code would be _messy and unreadable_ with this amount of fields.\n\n**More info** about _why_ we should add these upright directions is found in: #1105\n",
    "head_branch": "feature/diagonal-vertical-directions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8a7d9087c4d6d37a5a3",
    "number": 1159,
    "body": "This PR makes https://github.com/SpongePowered/SpongeCommon/pull/562 possible. \n\n**Changes:**\n- [x] - Added the key for `IS_ADULT`\n- [x] - Removed redundant methods, which were discussed with @gabizou a while back.\n",
    "head_branch": "AgeableData",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8a8d9087c4d6d37a5a4",
    "number": 1155,
    "body": "`TextFormat` is missing methods to create it.\n",
    "head_branch": "feature/textformat",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge de17e561d6c20596999bd7794c7a32b934910388 into dd7e8e25a9779bb0d11756a92e5cc85623e6e1ff"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e8a9d9087c4d6d37a5a5",
    "number": 1154,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1154) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/605)\n",
    "head_branch": "feature/scoreboard-collision",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8aad9087c4d6d37a5a6",
    "number": 1150,
    "body": null,
    "head_branch": "ASM",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8abd9087c4d6d37a5a7",
    "number": 1149,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1149) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/606)\n\nAdds #728 \n",
    "head_branch": "feature/bossbar",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8acd9087c4d6d37a5a8",
    "number": 1148,
    "body": null,
    "head_branch": "GradleUpgrade",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8add9087c4d6d37a5a9",
    "number": 1146,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1146) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/619)\n\nThis is a work-in-progress PR to add 1.9 block entities and related data.\n",
    "head_branch": "feature/blockentities",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8aed9087c4d6d37a5aa",
    "number": 1145,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1145) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/594)\n\nResolves #1052, #1100\n",
    "head_branch": "refactor/armourstands",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8afd9087c4d6d37a5ab",
    "number": 1144,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1144) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/591)\n\nThis adds the ability to send block changes to `Viewer`s without actually having the block change in the world.\n\nResolves https://github.com/SpongePowered/SpongeAPI/issues/619\n",
    "head_branch": "feature/blockchange",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add virtual block change API - ability to send block changes to viewers without actually having the block change in the world"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8b0d9087c4d6d37a5ac",
    "number": 1138,
    "body": "Basically a Quality of Life thing, I guess. I found it annoying that the only way to access the `extendedDescription` for a `CommandSpec` was from the `getHelp` method, and as such worked this up.\n\n(Previously, was adding it to the `CommandCallable` interface, but @kashike redirected me to just implement it for the `CommandSpec` class.)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge CommandSpec#getExtendedDescription addition (#1138)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8b1d9087c4d6d37a5ad",
    "number": 1129,
    "body": "This allows for SendCommandEvent to set the command and arguments.\n\nThe use case is to replace 'variables' in the text with other text, such as CraftBook's variables feature.\n\n[Impl](https://github.com/SpongePowered/SpongeCommon/pull/563)\n",
    "head_branch": "feature/commandpreprocess",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8b2d9087c4d6d37a5ae",
    "number": 1128,
    "body": "All other methods return an empty map or an immutable copy\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8b3d9087c4d6d37a5af",
    "number": 1126,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1126) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/558) | [Forge](https://github.com/SpongePowered/SpongeForge/pull/562) | [Vanilla](https://github.com/SpongePowered/SpongeVanilla/pull/230) | [Gradle](https://github.com/SpongePowered/SpongeGradle/pull/3) | [plugin-meta](https://github.com/Minecrell/plugin-meta/pull/1)\n\nThis PR adds the `AssetManager` class to Sponge. It allows for easy retrieval of plugin resources as well as adds a `assets` plugin meta attribute to allow developers to declare a custom asset directory.\n\nSigned-off-by: Walker Crouse walkercrouse@hotmail.com\n",
    "head_branch": "feature/assets",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8b4d9087c4d6d37a5b0",
    "number": 1122,
    "body": "Spectral arrows can give an entity glow potion effect temporarily. You can also apply it permanently with `Glowing` NBT tag. This exposes this to SpongeAPI.\n\nI've added a TODO in one of the javadocs - basically a couple entities do not show the glow, will need to do some testing when possible to work out exactly which entities do not do this.\n",
    "head_branch": "feature/glowing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8b5d9087c4d6d37a5b1",
    "number": 1121,
    "body": "SpongePowered/SpongeCommon#630\n\nThis PR adds the ability for plugins to query the handedness of entities.\n#### Players\n\nPlayers are able to configure handedness through client settings. This is not configurable serverside, as such the implementation can get a player's handedness but will not be able to set it.\n### Entities\n\nMany living entities such as Skeletons or Zombies can have a dominant hand (Ghasts, for example, cannot). This is configurable with the `LeftHanded` NBT tag.\n\nImplementation wise this will likely only be represented by a single boolean, with each value inversely toggling the it.\n",
    "head_branch": "feature/dominant-hand",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8b6d9087c4d6d37a5b2",
    "number": 1120,
    "body": "#961 on the bleeding edge\n\nChanges `Vector3d` to `Tuple<Vector3d, Boolean>`\nSee #955\n",
    "head_branch": "respawn-forced",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 2f99e6cb0c8e20c4aa9a634319fb960eb5de984b into 5b963664e226a63861288577281ccfd647ed0ec2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e8b7d9087c4d6d37a5b3",
    "number": 1118,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1118) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/548) | [Vanilla](https://github.com/SpongePowered/SpongeVanilla/pull/229) | [Forge](https://github.com/SpongePowered/SpongeForge/pull/559)\n\nThis PR makes some substantial changes to how MessageEvents are handled. Instead of passing around a `Text` object, the event now contains a `MessageFormatter` which can be used to modify the event's message in a more reliable and modular fashion. This will make interactions and compatibility between chat plugins a lot easier. Previous methods like `getOriginalMessage`, `getRawMessage`, `getMessage`, and `setMessage` still behave as expected except instead of Optionals, a non-null Text is always returned. Developers should use `setMessageCancelled` to cancel the sending instead of setting the message to null.\n\n---\n\nSome example uses:\n\nLet's say I would like to insert a \"group\" prefix to the message but I also would like to keep existing prefixes that other plugins may or may not have already applied. I can do something like:\n\n``` java\nclass GroupApplier extends SimpleTextTemplateApplier {\n    public GroupApplier() {\n        super(of('[', arg(\"group\"), \"] \"));\n    }\n}\n```\n\n``` java\n@Listener\nvoid onChat(MessageChannelEvent.Chat event) {\n    GroupApplier applier = new GroupApplier();\n    applier.setParameter(\"group\", Text.builder(\"admin\").color(TextColors.RED));\n    event.getFormatter().getHeader().insert(0, applier);\n}\n```\n\nOn an unaltered message, this will produce something equivalent to:\n\n`[<red>admin</red>] <NAME> MESSAGE`\n\nNow lets say another plugin wants to override that prefix and make it say \"mod\" instead of \"admin\". Well then they can do:\n\n``` java\nevent.getHeader().forEach(GroupApplier.class, applier -> applier.setParameter(\"group\", Text.builder(\"mod\").color(TextColors.AQUA));\n```\n\nThese are only a few of the many uses this PR will provide.\n\n**Note:** This PR depends on https://github.com/SpongePowered/SpongeAPI/pull/1079. https://github.com/SpongePowered/SpongeAPI/pull/1079 should be merged into master _and then into bleeding_ before this PR is merged.\n",
    "head_branch": "feature/messages",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 6b09b2bcd5a57587e2a97ce7b184d7db02aa30a6 into bcf61e1a316cc453f608392385942f1020e6cf5b"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e8b8d9087c4d6d37a5b4",
    "number": 1117,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1117) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/548) | [Vanilla](https://github.com/SpongePowered/SpongeVanilla/pull/229) | [Forge](https://github.com/SpongePowered/SpongeForge/pull/559)\n\nThis PR makes some substantial changes to how MessageEvents are handled. Instead of passing around a `Text` object, the event now contains a `MessageFormatter` which can be used to modify the event's message in a more reliable and modular fashion. This will make interactions and compatibility between chat plugins a lot easier. Previous methods like `getOriginalMessage`, `getRawMessage`, `getMessage`, and `setMessage` still behave as expected except instead of Optionals, a non-null Text is always returned. Developers should use `setMessageCancelled` to cancel the sending instead of setting the message to null.\n\n---\n\nSome example uses:\n\nLet's say I would like to insert a \"group\" prefix to the message but I also would like to keep existing prefixes that other plugins may or may not have already applied. I can do something like:\n\n``` java\nclass GroupApplier extends SimpleTextTemplateApplier {\n    public GroupApplier() {\n        super(of('[', arg(\"group\"), \"] \"));\n    }\n}\n```\n\n``` java\n@Listener\nvoid onChat(MessageChannelEvent.Chat event) {\n    GroupApplier applier = new GroupApplier();\n    applier.setParameter(\"group\", Text.builder(\"admin\").color(TextColors.RED));\n    event.getFormatter().getHeader().insert(0, applier);\n}\n```\n\nOn an unaltered message, this will produce something equivalent to:\n\n`[<red>admin</red>] <NAME> MESSAGE`\n\nNow lets say another plugin wants to override that prefix and make it say \"mod\" instead of \"admin\". Well then they can do:\n\n``` java\nevent.getHeader().forEach(GroupApplier.class, applier -> applier.setParameter(\"group\", Text.builder(\"mod\").color(TextColors.AQUA));\n```\n\nThese are only a few of the many uses this PR will provide.\n\n**Note:** This PR depends on https://github.com/SpongePowered/SpongeAPI/pull/1079. https://github.com/SpongePowered/SpongeAPI/pull/1079 should be merged into master _and then into bleeding_ before this PR is merged.\n",
    "head_branch": "feature/messages",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8b9d9087c4d6d37a5b5",
    "number": 1116,
    "body": "[replacing #784]\n\nThis PR covers a few long-standing issues about command argument format and hopefully command argument handling, as well as refactoring some annoying points of using CommandSpec and CommandElements.\n\nThe ones I want to get are:\n- [x] #604 \n- [x] #583 \n- [x] Adding more tags to the various location-related command arguments\n- [x] #689 -- An event that is called for chat as well as commands (very preprocessey) -- completed, this is covered by #957\n- [x] #780 \n- [x] ~~Only parse escapes for characters that would otherwise have a special function~~\n- [ ] Refactor CommandArgs + CommandContext to be less dumb (see [PEX wip on this](https://github.com/PEXPlugins/PermissionsEx/tree/feature/elementresult) (though what happens from this will be different))\n- [ ] #924 \n- [x] #989 \n\nnotable todos:\n- Implement `#spawn:<world>` on LocationCommandElement\n- Properly handle tabcompletion on LocationCommandElement\n",
    "head_branch": "feature/improvedargs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8bad9087c4d6d37a5b6",
    "number": 1115,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8bbd9087c4d6d37a5b7",
    "number": 1114,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1114) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/548) | [Vanilla](https://github.com/SpongePowered/SpongeVanilla/pull/229) | [Forge](https://github.com/SpongePowered/SpongeForge/pull/559)\n\nThis PR makes some substantial changes to how MessageEvents are handled. Instead of passing around a `Text` object, the event now contains a `MessageFormatter` which can be used to modify the event's message in a more reliable and modular fashion. This will make interactions and compatibility between chat plugins a lot easier. Previous methods like `getOriginalMessage`, `getRawMessage`, `getMessage`, and `setMessage` still behave as expected except instead of Optionals, a non-null Text is always returned. Developers should use `setMessageCancelled` to cancel the sending instead of setting the message to null.\n\n---\n\nSome example uses:\n\nLet's say I would like to insert a \"group\" prefix to the message but I also would like to keep existing prefixes that other plugins may or may not have already applied. I can do something like:\n\n``` java\nclass GroupApplier extends SimpleTextTemplateApplier {\n    public GroupApplier() {\n        super(of('[', arg(\"group\"), \"] \"));\n    }\n}\n```\n\n``` java\n@Listener\nvoid onChat(MessageChannelEvent.Chat event) {\n    GroupApplier applier = new GroupApplier();\n    applier.setParameter(\"group\", Text.builder(\"admin\").color(TextColors.RED));\n    event.getFormatter().getHeader().insert(0, applier);\n}\n```\n\nOn an unaltered message, this will produce something equivalent to:\n\n`[<red>admin</red>] <NAME> MESSAGE`\n\nNow lets say another plugin wants to override that prefix and make it say \"mod\" instead of \"admin\". Well then they can do:\n\n``` java\nevent.getHeader().forEach(GroupApplier.class, applier -> applier.setParameter(\"group\", Text.builder(\"mod\").color(TextColors.AQUA));\n```\n\nThese are only a few of the many uses this PR will provide.\n\n**Note:** This PR depends on https://github.com/SpongePowered/SpongeAPI/pull/1079. https://github.com/SpongePowered/SpongeAPI/pull/1079 should be merged into master _and then into bleeding_ before this PR is merged.\n",
    "head_branch": "feature/messages",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8bcd9087c4d6d37a5b8",
    "number": 1113,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1113) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/549)\n\nThis PR changes all of the Minecart entities to be appended with `Minecart` instead of pre-pended: `HopperMinecart` instead of `MinecartHopper`.\nThis is a difference compared to the rest of the API - for example: `Fireball` & `LargeFireball`, etc\n",
    "head_branch": "feature/minecarts",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8bdd9087c4d6d37a5b9",
    "number": 1112,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1111) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/548) | [Vanilla](https://github.com/SpongePowered/SpongeVanilla/pull/229) | [Forge](https://github.com/SpongePowered/SpongeForge/pull/559)\n\nThis PR makes some substantial changes to how MessageEvents are handled. Instead of passing around a `Text` object, the event now contains a `MessageFormatter` which can be used to modify the event's message in a more reliable and modular fashion. This will make interactions and compatibility between chat plugins a lot easier. Previous methods like `getOriginalMessage`, `getRawMessage`, `getMessage`, and `setMessage` still behave as expected except instead of Optionals, a non-null Text is always returned. Developers should use `setMessageCancelled` to cancel the sending instead of setting the message to null.\n\n---\n\nSome example uses:\n\nLet's say I would like to insert a \"group\" prefix to the message but I also would like to keep existing prefixes that other plugins may or may not have already applied. I can do something like:\n\n``` java\nclass GroupApplier extends SimpleTextTemplateApplier {\n    public GroupApplier() {\n        super(of('[', arg(\"group\"), \"] \"));\n    }\n}\n```\n\n``` java\n@Listener\nvoid onChat(MessageChannelEvent.Chat event) {\n    GroupApplier applier = new GroupApplier();\n    applier.setParameter(\"group\", Text.builder(\"admin\").color(TextColors.RED));\n    event.getFormatter().getHeader().insert(0, applier);\n}\n```\n\nOn an unaltered message, this will produce something equivalent to:\n\n`[<red>admin</red>] <NAME> MESSAGE`\n\nNow lets say another plugin wants to override that prefix and make it say \"mod\" instead of \"admin\". Well then they can do:\n\n``` java\nevent.getHeader().forEach(GroupApplier.class, applier -> applier.setParameter(\"group\", Text.builder(\"mod\").color(TextColors.AQUA));\n```\n\nThese are only a few of the many uses this PR will provide.\n\n**Note:** This PR depends on https://github.com/SpongePowered/SpongeAPI/pull/1079. https://github.com/SpongePowered/SpongeAPI/pull/1079 should be merged into master _and then into bleeding_ before this PR is merged.\n",
    "head_branch": "feature/messages",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8bed9087c4d6d37a5ba",
    "number": 1111,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1111) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/548) | [Vanilla](https://github.com/SpongePowered/SpongeVanilla/pull/229) | [Forge](https://github.com/SpongePowered/SpongeForge/pull/559)\n\nThis PR makes some substantial changes to how MessageEvents are handled. Instead of passing around a `Text` object, the event now contains a `MessageFormatter` which can be used to modify the event's message in a more reliable and modular fashion. This will make interactions and compatibility between chat plugins a lot easier. Previous methods like `getOriginalMessage`, `getRawMessage`, `getMessage`, and `setMessage` still behave as expected.\n\n---\n\nSome example uses:\n\nLet's say I would like to insert a \"group\" prefix to the message but I also would like to keep existing prefixes that other plugins may or may not have already applied. I can do something like:\n\n``` java\nclass GroupApplier extends SimpleTextTemplateApplier {\n    public GroupApplier() {\n        super(of('[', arg(\"group\"), \"] \"));\n    }\n}\n```\n\n``` java\n@Listener\nvoid onChat(MessageChannelEvent.Chat event) {\n    GroupApplier applier = new GroupApplier();\n    applier.setParameter(\"group\", Text.builder(\"admin\").color(TextColors.RED));\n    event.getFormatter().getHeader().insert(0, applier);\n}\n```\n\nOn an unaltered message, this will produce something equivalent to:\n\n`[<red>admin</red>] <NAME> MESSAGE`\n\nNow lets say another plugin wants to override that prefix and make it say \"mod\" instead of \"admin\". Well then they can do:\n\n``` java\nevent.getHeader().forEach(GroupApplier.class, applier -> applier.setParameter(\"group\", Text.builder(\"mod\").color(TextColors.AQUA));\n```\n\nThese are only a few of the many uses this PR will provide.\n\n**Note:** This PR depends on https://github.com/SpongePowered/SpongeAPI/pull/1079. https://github.com/SpongePowered/SpongeAPI/pull/1079 should be merged into master _and then into bleeding_ before this PR is merged.\n",
    "head_branch": "feature/messages",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8bfd9087c4d6d37a5bb",
    "number": 1106,
    "body": "This PR changes `openInventory` and `closeInventory` to require `Cause`. When these methods are implemented, the provided `Cause` will be used when firing `InteractInventoryEvent.<Open/Close>`\n",
    "head_branch": "feature/inventory-cause",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8c0d9087c4d6d37a5bc",
    "number": 1104,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1104) | [Forge](https://github.com/SpongePowered/SpongeForge/pull/553) | [Vanilla](https://github.com/SpongePowered/SpongeVanilla/pull/228)\n\nResolves https://github.com/SpongePowered/SpongeCommon/issues/538\n",
    "head_branch": "feature/channel-string",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8c1d9087c4d6d37a5bd",
    "number": 1103,
    "body": "This PR aims to allow the usage of Key/Value data with DataBuilders, such as BlockState.Builder, etc.\n\nThis fixes #1093.\n",
    "head_branch": "feature/builder-data-keys",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8c2d9087c4d6d37a5be",
    "number": 1102,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1102) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/535)\n\nPretty self-explanatory. This opens up the opportunity for a variety of use cases. For instance, say I want to track a player's eye location over time.\n\n``` java\nLocatable locatable = () -> new Location(player.getWorld(), player.getProperty(EyeLocationProperty.class).get().getValue())\n```\n",
    "head_branch": "cmd-src-heirarchy",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8c4d9087c4d6d37a5bf",
    "number": 1101,
    "body": "[**API**]() | [Common]()\n\nPretty self-explanatory. This opens up the opportunity for a variety of use cases. For instance, say I want to track a player's eye location over time.\n\n``` java\nLocatable locatable = () -> new Location(player.getWorld(), player.getProperty(EyeLocationProperty.class).get().getValue())\n```\n",
    "head_branch": "cmd-src-heirarchy",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8c4d9087c4d6d37a5c0",
    "number": 1100,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1100) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/533)\n\nImplements https://github.com/SpongePowered/SpongeAPI/issues/1052\n",
    "head_branch": "feature/marker",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8c5d9087c4d6d37a5c1",
    "number": 1099,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1099) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/540)\n\nSupersedes https://github.com/SpongePowered/SpongeAPI/pull/986\n\nNotable changes:\n- adds `canSee(Entity)` method to `Entity`\n- renames `PlayerTabInfo` to `TabListEntry`\n- removes `setGameProfile` from `TabListEntry`\n",
    "head_branch": "refactor/tab",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8c6d9087c4d6d37a5c2",
    "number": 1098,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1098) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/532)\r\nAdds #1027\r\nResolves #1028 \r\n\r\n---\r\n\r\nThis PR changes `ShapedCraftingRecipe` (previously `ShapedRecipe`) from using an x and y `int`-based system to an aisle-based system, with `char` being used to get/set ingredients.\r\n\r\nExample usage:\r\n![sugar](https://miserable.ninja/i/Njg0O.png)\r\n\r\n``` java\r\n/*\r\n * 1 x 1\r\n *\r\n * ---------\r\n * | REEDS |\r\n * ---------\r\n */\r\n// Re-create the sugar recipe\r\nShapedCraftingRecipe.builder()\r\n    .aisle(\r\n        \"#\"\r\n    )\r\n    .where('#', ItemStack.builder().itemType(ItemTypes.REEDS).build())\r\n    .result(ItemStack.builder().itemType(ItemTypes.SUGAR).build())\r\n    .build();\r\n```\r\n\n---\r\n\r\n![lever](https://miserable.ninja/i/ZmFmM.png)\r\n\r\n``` java\r\n/*\r\n * 2 x 1\r\n *\r\n * ---------------\r\n * |    STICK    |\r\n * ---------------\r\n * | COBBLESTONE |\r\n * ---------------\r\n */\r\n// Re-create the lever recipe\r\nShapedCraftingRecipe.builder()\r\n    .aisle(\r\n        \"X\",\r\n        \"#\"\r\n    )\r\n    .where('X', ItemStack.builder().itemType(ItemTypes.STICK).build())\r\n    .where('#', ItemStack.builder().itemType(ItemTypes.COBBLESTONE).build())\r\n    .result(ItemStack.builder().itemType(ItemTypes.LEVER).build())\r\n    .build();\r\n```\r\n\n---\r\n\r\n![ladders](https://miserable.ninja/i/ODRmN.png)\r\n\r\n``` java\r\n/*\r\n * 3 x 3\r\n *\r\n * -------------------------\r\n * | STICK |       | STICK |\r\n * -------------------------\r\n * | STICK | STICK | STICK |\r\n * -------------------------\r\n * | STICK |       | STICK |\r\n * -------------------------\r\n */\r\n// Re-create the ladder recipe\r\nShapedCraftingRecipe.builder()\r\n    .aisle(\r\n        \"# #\",\r\n        \"###\",\r\n        \"# #\"\r\n    )\r\n    .where('#', ItemStack.builder().itemType(ItemTypes.STICK).build())\r\n    .result(ItemStack.builder().itemType(ItemTypes.LADDER).quantity(3).build())\r\n    .build();\r\n```\r\n\n---\r\n\r\n![bedrock](https://miserable.ninja/i/Y2FjN.png)\r\n\r\n``` java\r\n/*\r\n * 3 x 3\r\n *\r\n * ---------------------\r\n * | BED |  BED  | BED |\r\n * ---------------------\r\n * | BED | STONE | BED |\r\n * ---------------------\r\n * | BED |  BED  | BED |\r\n * ---------------------\r\n */\r\nShapedCraftingRecipe.builder()\r\n    .aisle(\r\n        \"BBB\",\r\n        \"BRB\",\r\n        \"BBB\"\r\n    )\r\n    .where('B', ItemStack.builder().itemType(ItemTypes.BED).build())\r\n    .where('R', ItemStack.builder().itemType(ItemTypes.STONE).build())\r\n    .result(ItemStack.builder().itemType(ItemTypes.BEDROCK).build())\r\n    .build();\r\n```\r\n",
    "head_branch": "feature/recipe",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8c7d9087c4d6d37a5c3",
    "number": 1095,
    "body": "SpongeAPI | SpongePowered/SpongeCommon#529\nThis pull request adds Dragon Head from 1.9 release to skull types.\n",
    "head_branch": "1.9",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8c8d9087c4d6d37a5c4",
    "number": 1091,
    "body": "Fixed a NullPointerException when requiring permissions for a sequence of arguments and certain others.\nFixed a NullPointerException when requiring certain command elements to have only one value.\nOptimized OptionalCommandElement.\n",
    "head_branch": "hotfix/commandargs-permissioned-sequence",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8c9d9087c4d6d37a5c5",
    "number": 1090,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8cad9087c4d6d37a5c6",
    "number": 1088,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1088) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/525) | [Forge](https://github.com/SpongePowered/SpongeForge/pull/549)\n\nThis PR adds a localization API to SpongeAPI among some other breaking changes. The `provideFirst(Class)` method has been added to ServiceManager to allow for extensible services and `getServiceManager` has been added to `PluginContainer` for internal services. In the context of localization, this allows plugins to register their own `Dictionary` and have it be received with `plugin.getServiceManager().provideFirst(Dictionary.class);` without the need to know the exact implementing class.\n\n---\n\n**Example usage:**\n\n``` java\n@Listener\npublic void onGameStarted(GameStartedServerEvent event) {\n    DefaultPluginDictionary dict = new DefaultPluginDictionary(this, Locales.DEFAULT, configDir);\n    try {\n        dict.load();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    Sponge.getPluginManager().getServiceManager(this).setProvider(Cause.of(this), Dictionary.class, dict);\n}\n```\n\nThis will create a new dictionary that will first look for the dictionary file in `<configDir>/<pluginId>.dict` and then as a resource at `<pluginId>.dict`. Plugins are of course free to implement their localization through dictionaries however they want.\n\n**Example .dict file:**\n\n```\nen_US {\n    hello=\"Hello\"\n}\nen_GB {\n    hello=\"'Ello govna'\"\n}\n```\n\n``` java\ndictionary.get(\"hello\").get(); // \"Hello\"\ndictionary.get(\"hello\", Locale.UK).get(); // \"'Ello govna'\"\n\n// alternatively\n\nText.get(this, \"hello\").get(); // Text{\"Hello\"}\nText.get(this, \"hello\", Locale.UK).get(); // Text{\"'Ello govna'\"}\n\n// localize for player's client locale\n\nText.get(this, \"hello\", player.getLocale()).get();\n```\n",
    "head_branch": "feature/locale",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8cbd9087c4d6d37a5c7",
    "number": 1084,
    "body": "Implemented by https://github.com/SpongePowered/SpongeCommon/pull/519\n\nThis PR adds an event filter for retrieving values from getters on the event type. This annotation annotates a parameter and acts as a source for the parameter value. The annotation specifies a method name which must be a method on the specified event type. The parameter's value is set to the result of calling the specified method on the event. \n\nExample:\n\n``` java\n    @Listener\n    public void onPlayerDamage(EntityDamageEvent event, @Getter(\"getTargetEntity\") Player player) {\n        // do something with player\n    }\n```\n\nHere we have a Player parameter annotated with the `Getter` annotation. The value for the parameter will be the result of calling `event.getTargetEntity()`. You'll notice that the return type of getTargetEntity is `Entity` but our parameter is of type `Player`, in the case that the returned value is not a player (whenever a non-player is damaged) then the filter will silently fail and your event listener will not be called.\n\nIf the return type of the method is an `Optional` then your parameter type can either be Optional, or the type contained within the optional. If you specify your parameter as the type contained within the Optional then your event listener will not be called if the Optional was not present.\n",
    "head_branch": "feature/more-filters",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add boxing helper to ClassGenerator"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8cdd9087c4d6d37a5c8",
    "number": 1081,
    "body": "This pull request extends the `@Plugin` annotation with several new fields for additional plugin metadata and adds an annotation processor for the `@Plugin` annotation which generates a `mcmod.info` file based on the values of the `@Plugin` annotation.\n\n**Additions for plugin metadata:** (for #822)\n- Description\n- URL\n- Plugin authors\n- Simplified dependency syntax\n\nExample for new dependency syntax:\n\n``` java\n@Plugin(id = \"net.minecrell.testplugin\", dependencies = {\n    // Require WorldEdit to be loaded before plugin is constructed\n    @Dependency(id = \"com.sk89q.worldedit\"),\n    // Load updatifier first if it is present\n    @Dependency(id = \"me.flibio.updatifier\", optional = true)\n})\n```\n### File metadata (for #624)\n\nAs discussed in #624, this implements `mcmod.info` as the format for plugin metadata in the JAR file. This is how it works (or is supposed to work) currently: (I would appreciate suggestions or feedback here)\n- File metadata (`mcmod.info`) in the JAR is **optional** for _running_ the plugin (makes testing difficult otherwise), however I would like to make it **required** for submitting plugins on Ore. A warning will be shown in the logs if the server attempts to load a plugin without a `mcmod.info` file. If file metadata is present in the JAR, the annotation will be ignored completely and only used for finding the plugin class.\n- The `@Plugin` annotation processor included in SpongeAPI generates a `mcmod.info` file based on the values specified in the annotation. **With Gradle (and likely also Maven) no additional configuration is required.** When creating the JARs manually (e.g. through Eclipse or something) it can _theoretically_ also run, however annotation processing will need to be enabled manually (I haven't tested this).\n- I've made an additional **optional** Gradle plugin (WIP) which provides additional integration for plugin meta (and maybe also a proper way for simple testing in the IDE in the future). With the plugin, a simple Gradle plugin setup with plugin metadata integration looks like this:\n  \n  ``` gradle\n  plugins {\n      id 'org.spongepowered.plugin' version '0.1'\n  }\n  \n  group = 'net.minecrell'\n  version = '1.0-SNAPSHOT'\n  description = 'This is my test plugin'\n  \n  dependencies {\n      compile 'org.spongepowered:spongeapi:3.1.0-SNAPSHOT'\n  }\n  ```\n  \n  ``` java\n  @Plugin(id = \"net.minecrell.testplugin\", authors = \"Minecrell\")\n  public class TestPlugin {\n  \n  }\n  ```\n  \n  With this setup, the plugin automatically handles the following:\n  - Basic Gradle Java setup\n  - Set `sourceCompatibility` to Java 8 by default\n  - Add Sponge maven repositories\n  - Set up a plugin with the project name in lower case as ID and configures the Gradle project name, description and version to be included in file metadata. (the plugin ID is optionally also manually configurable)\n  - Ensure the annotation processor actually runs (otherwise it will print an error)\n  - Add any metadata specified manually from a `mcmod.info` file in the resources to the resulting file. This allows adding Forge-specific properties (e.g. logo, screenshot) manually which are currently not supported by Sponge's metadata directly.\n  \n  ... and finally, the resulting `mcmod.info` file for the plugin above looks like this:\n  \n  ``` json\n    {\n        \"modid\": \"net.minecrell.testplugin\",\n        \"name\": \"TestPlugin\",\n        \"version\": \"1.0-SNAPSHOT\",\n        \"description\": \"This is my test plugin\",\n        \"authorList\": [\n            \"Minecrell\"\n        ]\n    }\n  ```\n#### Additional repositories\n- `mcmod.info` serializer: https://github.com/Minecrell/plugin-meta (used in the annotation processor (SpongeAPI) and the Gradle plugin)\n- Gradle plugin for Sponge plugins: https://github.com/SpongePowered/SpongeGradle/pull/2\n### Implementation (SpongeForge/SpongeVanilla)\n- **SpongeCommon:** https://github.com/SpongePowered/SpongeCommon/pull/523\n- **SpongeVanilla:** https://github.com/SpongePowered/SpongeVanilla/pull/225\n- **SpongeForge:** https://github.com/SpongePowered/SpongeForge/pull/544\n### TODO\n- ~~Publish plugin-meta and Gradle plugin to Sponge's maven repository.~~ Done!\n",
    "head_branch": "feature/plugin-meta",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 9e66fe1ce6b7fe5acd414fa8ac6ad0a7e945d096 into 9884d96a0871713eda900e44af6a916241d080b9"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e8ced9087c4d6d37a5c9",
    "number": 1080,
    "body": "Instead of only allow _permissions_ to be checked in `CommandSpec`, this will allow plugin developers to supply an _custom_ ~~`Predicate<CommandSource>`~~ `Function<CommandSource, Optional<Text>>` instead. This is a **better idea** than putting the code in the beginning of the `CommandExecutor`, because the access control checking can be kept in a **central location** now, at `testPermission(CommandSource)`. When the returned `Optional`'s `Text` is not present, it means that there is no error message, so no error.\n",
    "head_branch": "feature/access-callback-commandspec",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8cfd9087c4d6d37a5ca",
    "number": 1079,
    "body": "This PR adds re-usable, serializable, text templates to SpongeAPI. This is useful in plugin development when a developer wishes to store a message in a config file with variable elements.\n## Example\n\n``` java\nimport static org.spongepowered.api.text.template.TextTemplate.*;\n\nTextTemplate template = of(\n    TextColors.BLUE, \"Hello, \", arg(\"playerName\").color(TextColors.AQUA).style(TextStyles.BOLD), \"!\"\n);\n\nvoid onPlayerJoin() {\n    player.sendMessage(template, ImmutableMap.of(\"playerName\", Text.of(player.getName()));\n}\n```\n\nA few things to note:\n- Repeated arguments are permitted but must be \"equivalent\", meaning that if argument 1 named 'x' is optional argument 2 named 'x' must also be optional.\n- Elements are appended to the text builder in the order in which they appear.\n- Arguments are required by default. You can change this with `arg(\"name\").optional()`.\n- TextTemplates are immutable.\n- Arguments can have a TextFormat which can be overwritten (or not) by the TextElement supplied to the parameter map.\n- A \"placeholder\" representation of the template can be obtained with `TextTemplate.toText()`\n- TextTemplates are Iterable and `iterator()` returns an unmodifiable Iterator of it's elements.\n- Green is my favorite color.\n## Serialization\n\nTextTemplates are config serializable with @zml2008's Configurate. The above template will produce the following serialized output:\n\n``` hocon\ntemplate {\n    arguments {\n        playerName {\n            optional=false\n        }\n    }\n    content {\n        color=blue\n        extra=[\n            \"Hello, \",\n            {\n                bold=true\n                color=aqua\n                text=\"{playerName}\"\n            },\n            \"!\"\n        ]\n        text=\"\"\n    }\n    options {\n        openArg={\n        closeArg=}\n    }\n}\n```\n\nTemplates are serialized and deserialized like so:\n\n``` java\nnode.getNode(\"template\").setValue(TypeToken.of(TextTemplate.class), template); // serialize\nnode.getNode(\"template\").getValue(TypeToken.of(TextTemplate.class)); // deserialize\n```\n\nThis PR also makes Text objects config serializable:\n\n``` java\nnode.getNode(\"text\").setValue(TypeToken.of(Text.class), text); // serialize\nnode.getNode(\"text\").getValue(TypeToken.of(Text.class)); // deserialize\n```\n\nSigned-off-by: Walker Crouse walkercrouse@hotmail.com\n",
    "head_branch": "feature/text-template",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 348969931f0336ce024b15833fca8e5b8d4f5c12 into 9b5d6c4ccd48b2a90843c9c0d17a0bbf037b4eee"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e8d0d9087c4d6d37a5cb",
    "number": 1076,
    "body": "SpongeAPI | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/504)\n\nThis supersedes https://github.com/SpongePowered/SpongeAPI/pull/1037 \n\nThis PR improves the usability of the Pagination API.\n\nChanges:\n- Added `PaginationList`, an immutable version of `PaginationBuilder`. A `PaginationList` is obtained from a `PaginationBuilder`.\n- Made `PaginationBuilder` a `ResettableBuilder`\n- Changed `PaginationBuilder` to use`MessageReciever`instead of `CommandSource`, and added methods for using `MessageChannel`.\n\nThis resolves https://github.com/SpongePowered/SpongeAPI/issues/1010\n",
    "head_branch": "feature/improve-pagination",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8d0d9087c4d6d37a5cc",
    "number": 1075,
    "body": "**API** | [Common](https://github.com/SpongePowered/SpongeCommon/pull/503)\n\nResolves SpongePowered/SpongeAPI#1073\n",
    "head_branch": "feature/command-result-throwable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8d1d9087c4d6d37a5cd",
    "number": 1071,
    "body": "Common PR: https://github.com/SpongePowered/SpongeCommon/pull/501\n\nThe reason for this change is for clarity in the API. To say that a humanoid \"views\" an inventory or an entity can \"interact\" with a container is misleading: these are properties of a client connection. I am not saying that Humanoids or other entities should not have inventories, I have no qualms about that.\n\nPinging @Mumfrey \n\nSigned-off-by: Walker Crouse walkercrouse@hotmail.com\n",
    "head_branch": "bleeding",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge eb8980750496c98bd45a08f4eeb38ffc96eef1b8 into c3e44e6e99d3a314f4406945213b5864ede1167d"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e8d2d9087c4d6d37a5ce",
    "number": 1068,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1068) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/495)\n\nThis introduces a replaceable `GameProfileCache` that is used (internally) for resolving profiles and profile related data.\n",
    "head_branch": "feature/titanic",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8d3d9087c4d6d37a5cf",
    "number": 1067,
    "body": "This PR cleans up the retrieval and creation of Economy Accounts.\n\nChanges:\n- The `createAccount` methods in `EconomyService` have been removed. The `getAccount` methods will now always create an account, if it does not exist.\n- `hasAccount` methods have been added, to allow checking for an account without creating it.\n\nPinging @Flibio, @Erigitic, and @Sleaker for feedback.\n",
    "head_branch": "feature/account-creation",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8d4d9087c4d6d37a5d0",
    "number": 1066,
    "body": "This PR introduces the concept of a per-account default currency, which defaults to the economy service's default currency.\n\nWith each account now having its own default currency, I'm able to provide default methods for any method taking a `Currency`.  This reduces much of the boilerplate needed to interact with an `Account`.\n\nPinging @Flibio, @Erigitic, and @Sleaker for feedback.\n",
    "head_branch": "feature/economy-usability",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8d5d9087c4d6d37a5d1",
    "number": 1065,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1065) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/485)\nSupersedes #1064\n\nThis changes `TargetedLocation` to use `Vector3d` instead of `Location<World>`.\n",
    "head_branch": "feature/targeted-location",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8d6d9087c4d6d37a5d2",
    "number": 1064,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1064) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/484)\n\nThis changes `TargetedLocation` to use `Vector3d` instead of `Location<World>`.\n",
    "head_branch": "feature/targeted-location",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8d8d9087c4d6d37a5d3",
    "number": 1063,
    "body": "Implemenation: https://github.com/SpongePowered/SpongeCommon/pull/483\n## The issue\n\nCurrently it is not possible to have a default representation for a particular instance.\n\nThis has the following disadvantages:\n- Code duplication (both in different plugins and in the same plugin) to format the instances\n- Dismatching presentation style of the same instance across plugins\n- Ugly fallback to `toString()` if no custom representation is set\n\n``` java\nText myMessage = Text.of(\"I got an \", toText(itemStack));\n\n// [...]\n\npublic static Text toText(ItemStack stack) {\n    final TextBuilder builder;\n    final Optional<DisplayNameData> optName = stack.get(DisplayNameData.class);\n    if (optName.isPresent()) {\n        Value<Text> displayName = optName.get().displayName();\n        if (displayName.exists()) {\n            builder = displayName.get().builder();\n        } else {\n            builder = Texts.builder(stack.getTranslation());\n        }\n    } else {\n        builder = Texts.builder(stack.getTranslation());\n    }\n    builder.onHover(TextActions.showItem(stack));\n    return builder.build();\n}\n```\n## Solutions\n- Level 1: Allow classes to specify their default representation\n- Level 2: Level 1 + Use special format if available\n- Level 3: Level 2 + Use the human readable name if available\n### The minimal solution (level 1)\n\nExpose the `TextRepresentable` interface and allow the server and plugins to implement it where they want so a lot of instances (can) have a default representation and can easily be passed to `Text.of(Object...)`. This solution does not force any implementation to implement anything at all, because it. With this solution you can pass the single instance to `Text.of(Object....)` and can style the resulting instance without knowledge of the original class and its methods (e.g. `getName()` or `getDisplayName()`). IMO everything that has a human readable name (e.g. `getName()` method) should implement this class.\n\n**None breaking.**\n\n``` java\nText myMessage = Text.of(\"I got an \", itemStack);\n```\n### The medium solution (level 2)\n\nExpose the `TextRepresentable` interface and mark some classes (mainly those classes which have a representation in vanilla by default) with this interface, so there is a basic set of classes that are forced to have a special representation. Server and plugins can still implement it how they want and can also implement it in a lot of other classes. With this solution you can easily pass the instances to `Text.of(Object...)` or adjust the `Text` representation to your needs (replace click action or alike) without having to style/write it from scratch.\n- `Achievement`\n- `Entity` and `Player` (maybe `User` as well for consistency reasons)\n- `ItemStack`\n- `Statistic` (has a representation, but not yet tested)\n\n**Minimal implementation changes required**\n- 1x `shadow$getDisplayName()` + 1 line implemenation per class\n\n``` java\n// Optional customization\nObject blueStack = itemStack.toText().toBuilder().color(TextColors.BLUE);\n\nText myMessage = Text.of(\"I got an \", blueStack);\n```\n### The advanced solution (level 3)\n\nExpose the `TextRepresentable` interface and mark all classes with this interface that are used in chat or commands frequently. (All classes that have a `getName()` or a similar method)\n- The classes mentioned in level 2\n- `CatalogType`s are often used in commands and they have a discrepancy\n  between their human readable name and their internal id which requires\n  them to use special representations to be usable in commands.\n- `World`s are often used in chat messages and they have a name so, the name\n  should be displayed.\n\nThere are probably more that will match the criteria for this level.\n\n**Minimal implementation changes required**\n- Same as level 2\n- Most of the other necessary changes can be `default` implemented.\n## Noteworthy\n\nServer and plugins are still able to overwrite the default `Text` representation of the object. They just have to do it before `Text.of(Object...)`. They could also rely on the default representation and just optimize it for their current needs.\n\nI added the required code for all three levels, but we can drop one or two of them if you disagree with them. Although I would like to see them all.\n",
    "head_branch": "TextRepresentable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8d8d9087c4d6d37a5d4",
    "number": 1062,
    "body": "Example usage:\n\n``` java\nworld.playSound(SoundType.NOTE_PIANO, position, 1, Pitch.C1);\n```\n\nwill play a middle C.\n\nSigned-off-by: Walker Crouse walkercrouse@hotmail.com\n",
    "head_branch": "pitchmod",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8d9d9087c4d6d37a5d5",
    "number": 1061,
    "body": "Example usage:\n\n``` java\nCommandSpec foo = CommandSpec.builder()\n    .sourceType(Player.class)\n    .executor(new FooExecutor())\n    .build();\n\nclass FooExecutor extends CommandExecutor<Player> {\n    public CommandResult execute(Player player, CommandContext context) {\n        // blah blah blah\n        return CommandResult.success();\n    }\n}\n```\n\nNote that while `CommandExecutor#execute(T, CommandContext);`'s signature has been changed, this is _not_ a breaking change for old implementations.\n\nSpongeCommon PR: https://github.com/SpongePowered/SpongeCommon/pull/477\nSigned-off-by: Walker Crouse walkercrouse@hotmail.com\n",
    "head_branch": "sender-type",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8dad9087c4d6d37a5d6",
    "number": 1060,
    "body": "Example usage:\n\n``` java\nCommandSpec foo = CommandSpec.builder()\n    .sourceType(Player.class)\n    .executor(new FooExecutor())\n    .build();\n\nclass FooExecutor extends CommandExecutor<Player> {\n    public CommandResult execute(Player player, CommandContext context) {\n        // blah blah blah\n        return CommandResult.success();\n    }\n}\n```\n\nNote that while `CommandExecutor#execute(T, CommandContext);`'s signature has been changed, this is _not_ a breaking change for old implementations.\n\nSpongeCommon PR: https://github.com/SpongePowered/SpongeCommon/pull/475\n\nSigned-off-by: Walker Crouse walkercrouse@hotmail.com\n",
    "head_branch": "sender-type",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8dbd9087c4d6d37a5d7",
    "number": 1058,
    "body": "**SpongeAPI PR | [SpongeCommon PR](https://github.com/SpongePowered/SpongeCommon/pull/473)**\n\nCompletableFuture is the jdk8 equivalent of guava's ListenableFuture\nclass, with similar capabilities but better lambda integration.\n\nThere shouldn't be any reason to prefer guava classes over java classes, but this PR is here in case anyone wants to discuss that.\n",
    "head_branch": "feature/update-futures",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8dcd9087c4d6d37a5d8",
    "number": 1056,
    "body": "Example usage:\n\n``` java\nworld.playSound(SoundType.NOTE_PIANO, position, 1, Pitch.C1);\n```\n\nwill play a middle C.\n\nSigned-off-by: Walker Crouse walkercrouse@hotmail.com\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8ddd9087c4d6d37a5d9",
    "number": 1046,
    "body": "Supersedes https://github.com/SpongePowered/SpongeAPI/pull/945\n[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1046) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/451) | [Forge](https://github.com/SpongePowered/SpongeForge/pull/522)\n\nDepends on:\n- #1043 to be able to properly send messages to the right targets with the correct type\n",
    "head_branch": "feature/context",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8ded9087c4d6d37a5da",
    "number": 1043,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1043) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/445) | [Forge](https://github.com/SpongePowered/SpongeForge/pull/523) | [Vanilla](https://github.com/SpongePowered/SpongeVanilla/pull/221)\n",
    "head_branch": "feature/chattype-channel",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge de388309c4cafab13b2a43f9ecc9617d2c8896a2 into c9e6e26daf5d48d89e06f26038a3acb3f0805489"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e8dfd9087c4d6d37a5db",
    "number": 1042,
    "body": "Implementation PRs coming later today, opening this for comments.\n\nThis PR:\n- changes `MessageChannel` to be an extension of `Channel`, allowing things such as `TitleChannel` as well as custom channels\n- adds `TitleChannel` for sending titles\n",
    "head_branch": "feature/channels",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8e0d9087c4d6d37a5dc",
    "number": 1041,
    "body": "# ConversationAPI\n\nI've seen very little talk about a conversation API and it did not seem that hard to try to port over Bukkit's API to work with Sponge. Now if this isn't the direction you guys wanted for the conversation API then it doesn't have to go through. But i feel like this is a good option because 1. A lot of developers are already used it. 2. it can be improved throughout the beta. & 3. It is a very easy system to use. \n## How it works.\n\nBasically the same as Bukkit's Conversation API\n![untitled drawing](https://cloud.githubusercontent.com/assets/6239624/12381583/7da2e846-bd52-11e5-8a3f-9772c9e169d6.png)\n- All sub prompts extend prompt. So all custom prompts will need to implement these methods.\n\n``` java\n@Override\npublic Text getPromptText(ConversationContext context) {\n    return Text.of(\"Message Here\");\n}\n```\n- And some method to accept a valid input of primitive type.\n## Prompts\n#### String Prompt\n- Accepts any type of string inputted by user.\n#### Message Prompt\n- Does not accept user input. Sends a message to the player.\n#### Validating Prompt - 5 Sub types\n\n*\\* Chooses from a preset type and input **\n- Boolean Prompt\n- Numeric Prompt\n- Regex Prompt\n- PlayerName Prompt\n- FixedSet Prompt\n## How to use\n\nRight now i have been using this inside my execute method for commands, like as such\n\n``` java\nprivate MAIN_CLASSNAME plugin;\nprivate ConversationFactory factory = new ConversationFactory(plugin.getGame());\n\nprivate Conversation conv;\npublic CommandResult execute(CommandSource src, CommandContext args){\n     if(!(src instanceof Player)){\n            src.sendMessage(Text.of(TextColors.RED, \"Only players can run this command!\"));\n            return CommandResult.success();\n       }\n      Player p = (Player)src;\n      conv = factory.withFirstPrompt(new CustomPrompt())).withLocalEcho(false).buildConversation((Conversable) p);\n      conv.begin();\n      return CommandResult.success();\n}\n\nWith CustomPrompt.java looking like\n\npublic class CustomPrompt extends StringPrompt {\n\n@Override\n    public Text getPromptText(ConversationContext context) {\n        return Text.of(\"Say your name\");\n    }\n\n    @Override\n    public Prompt acceptInput(ConversationContext context, String input) {\n        context.getForWhom().sendRawMessage(Text.of(\"Hello \", input));\n        return null;\n    }\n\n}\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8e1d9087c4d6d37a5dd",
    "number": 1040,
    "body": "Switch yaw and pitch in vectors to make more sense\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8e2d9087c4d6d37a5de",
    "number": 1038,
    "body": "This closes https://github.com/SpongePowered/SpongeAPI/issues/930\n",
    "head_branch": "feature/inventory-cause",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8e4d9087c4d6d37a5df",
    "number": 1037,
    "body": "SpongeAPI | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/434)\n\nThis PR improves the usability of the Pagination API.\n\nChanges:\n- Added `PaginationList`, an immutable version of `PaginationBuilder`. A `PaginationList` is obtained from a `PaginationBuilder`.\n- Made `PaginationBuilder` a `ResettableBuilder`\n- Changed `PaginationBuilder` to use`MessageReciever`instead of `CommandSource`, and added methods for using `MessageChannel`.\n\nThis resolves https://github.com/SpongePowered/SpongeAPI/issues/1010\n",
    "head_branch": "feature/improve-pagination",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8e5d9087c4d6d37a5e0",
    "number": 1032,
    "body": "This adds some dynamic \"recipe\" generators that can be used to not only generate `ItemStack`s and `TradeOffer`s. Namely, this adds `TradeOfferGenerator`s to be used and queried for with `Villager` `Career`s.\n\nGranted, there was #662, but I feel that with the various \"chance\" utils introduced from #734 can be of better use and instead of adding new interfaces to populate an `ItemStack.Builder`, when a `BiConsumer` is perfectly acceptable, and not only does it achieve full customizability, but it's base intentions are to make semi-random generation simple. @Deamon5550 mentioned he'd be adding some utility methods to `WeightedTable` so that some cases where the `WeightedTable` does not have to be re-created every single invocation of `BiConsumer.apply` for the various `ItemStackBuilderPopulators` used.\n",
    "head_branch": "feature/item-generation",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge f8f6211767814f82e4fc016482847a8d2f65400b into 06b89d49d7142d99975b44dbc03f0182be3d54e6"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e8e6d9087c4d6d37a5e1",
    "number": 1031,
    "body": "Merging this tonight unless someone objects.\n",
    "head_branch": "event-gen-java8",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8e7d9087c4d6d37a5e2",
    "number": 1030,
    "body": "An API for functional operations on BiomeArea, BlockVolume and their subtypes. Multithreaded support to follow (for thread-safe buffers).\n\nImplemented here: https://github.com/SpongePowered/SpongeCommon/pull/423\n",
    "head_branch": "feature/view-worker",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge e98d1a78143ef7bdb69b14333e6f854e6bdf0a0e into 2f26e93eeb84910211dd01bbeecdbf40fa5036a9"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e8e8d9087c4d6d37a5e3",
    "number": 1024,
    "body": "SpongeAPI | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/410) | [SpongeForge](https://github.com/SpongePowered/SpongeForge/pull/489)\nForge has a Fluid API system that mods use to interact with each other for various purposes, and this exposes that system with the Data API. Plugins will be able to interact and interface with `TileEntity` based `IFluidHandler`s and `IFluidContainerItem`s.\n\nThe API itself was aided with @diesieben07's comments, and likewise the implementation of this will rely on Forge, with SpongeCommon providing some interfacing with vanilla based containers (namely buckets and such).\n",
    "head_branch": "feature/fluids",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge bba4b2fb65f3621efac52e153c1a133b2cf9c880 into e98d1a78143ef7bdb69b14333e6f854e6bdf0a0e"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e8e9d9087c4d6d37a5e4",
    "number": 1020,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1020) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/408)\n\nThis is a new event fired between `ClientConnectionEvent.Login` and `ClientConnectionEvent.Join` that allows setting data on the `Player` before the player is spawned.\n",
    "head_branch": "feature/scm-ces",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8ead9087c4d6d37a5e5",
    "number": 1016,
    "body": "Rebirth of #1012 \nWaiting for more input and review.\n\nTodo:\n- (Waiting for input)\n",
    "head_branch": "feature/more-ais",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8ebd9087c4d6d37a5e6",
    "number": 1013,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1013) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/403)\n\nThis moves the `customNameVisible` method from `DisplayNameData` to the new `CustomNameData`, and renames the associated `Key`.\n",
    "head_branch": "feature/custom-name",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 9bed7ab4f95c33dcb5bf060b99bf12b019d987c6 into eb5b546d0c2f2b8128a52229fce3f6b0e139c943"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e8ecd9087c4d6d37a5e7",
    "number": 1012,
    "body": "- Needs a lot of review\n- Added `RangedAttackingAgent` for special AIs and resolved \"SnowGolem should implement `ProjectileSource`.\" issue.\n- Add `Tick` for `AITaskEvent`, needs further discussion.\n- Javadocs will be added later.\n\nTODO:\n- [ ] Add javadoc\n\nP. S. I am new to Sponge contribution, and I hope that Zidane or Aaron could give me some suggestions. Common and Forge implementations should come later, since only these AIs are already a lot.\n",
    "head_branch": "feature/more-ais",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8edd9087c4d6d37a5e8",
    "number": 1011,
    "body": "Supersedes #1009 \n[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1011) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/453) | [Forge](https://github.com/SpongePowered/SpongeForge/pull/513)\n- Renames the original `ExplosionEvent.Pre` event to `ExplosionEvent.Start`\n- Adds a new `ExplosionEvent.Pre` event\n  - This event is fired **before** an `Explosion` is created, so the `getExplosion` method has been moved to `Start`, `Detonate`, and `Post`\n- Adds `getOriginalExplosion` to `ExplosionEvent.Start`\n- Adds `NamedCause.igniter(Object)` method.\n\nWithout this event, these side effects can happen:\n- block removals\n- playing sounds\n- playing visual effects\n- killing entities\n- damaging items\n\nas well as other ones I'm sure I've forgotten.\nThis event also includes a more complete `Cause`, containing information other explosion events don't.\n",
    "head_branch": "feature/explosions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8eed9087c4d6d37a5e9",
    "number": 1009,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1009) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/401) | [Forge](https://github.com/SpongePowered/SpongeForge/pull/486)\n- Renames the original `ExplosionEvent.Pre` event to `ExplosionEvent.Start`\n- Adds a new `ExplosionEvent.Pre` event\n  - This event is fired **before** an `Explosion` is created, so the `getExplosion` method has been moved to `Start`, `Detonate`, and `Post`\n- Adds `getOriginalExplosion` to `ExplosionEvent.Start`\n- Adds `NamedCause.igniter(Object)` method.\n\nImplementation PRs are coming as soon as they are cleaned and tested.\n",
    "head_branch": "feature/explosions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8efd9087c4d6d37a5ea",
    "number": 1007,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/1007) | [Forge](https://github.com/SpongePowered/SpongeForge/pull/485) | [Vanilla](https://github.com/SpongePowered/SpongeVanilla/pull/200)\n\nThis adds the ability for plugins to provide a certificate fingerprint to verify jar signatures. #923\n",
    "head_branch": "feature/fingerprint",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8f0d9087c4d6d37a5eb",
    "number": 997,
    "body": "",
    "head_branch": "data/invulnerability",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8f1d9087c4d6d37a5ec",
    "number": 996,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/996) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/378)\n\n`SprintData` is applicable to all entities.\n",
    "head_branch": "feature/sprinting",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8f2d9087c4d6d37a5ed",
    "number": 995,
    "body": "This PR adds an Economy API, to be implemented by economy plugins\n\nFeatures:\n- Supports multiple Currencies. Each Currency determines its display name formattig\n- Supports two types of Accounts: User and Virtual\n  - User accounts are bound to a User's GameProfile's UUID\n  - Virtual accounts are bound to a String identifier\n- Accounts support various transactions (set, deposit, withdraw, transfer)\n- The balance of an Account may vary depending on the Context's that are provided\n- EconomyTransactionEvent allows plugins to be notified of processed transactions. The event is fired after they occur, and is not cancellable.\n\nNote that `Context` and related classes have been refactored out of permissions, as they are used by the Economy API as well.\n\nThis supersedes PR https://github.com/SpongePowered/SpongeAPI/pull/675\n",
    "head_branch": "feature/econservice",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8f3d9087c4d6d37a5ee",
    "number": 994,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/994) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/375)\n\nThis adds data to manipulate the amount of stuck arrows in living entities.\n\nAlso fixes the reference in ImmutableAffectsSpawningData to point to Player instead of Human\n",
    "head_branch": "feature/arrows",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8f4d9087c4d6d37a5ef",
    "number": 991,
    "body": "`Server` is something constantly accessed, I see no point in not having this method if we have ones for far less used things.\n",
    "head_branch": "feature/gsm",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8f5d9087c4d6d37a5f0",
    "number": 990,
    "body": "Just renamed perists to persists, per the English language ;)\n",
    "head_branch": "persistancedata",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8f6d9087c4d6d37a5f1",
    "number": 988,
    "body": "This is the draft for the third revision of the Text API open for review in the next few days.\n\n_\"Short\"_ summary of changes:\n- Split Text classes into separate classes and move the builders into these classes:\n  - `Text` -> `Text`, `TextBuilder` -> `Text.Builder`\n  - `Text.Literal` -> `LiteralText`, `TextBuilder.Literal` -> `LiteralText.Builder`\n  - `TitleBuilder` -> `Title.Builder`\n- Remove static utility classes (e.g. `Texts`, `Titles`, `Selectors`), moved into the appropriate class\n- Added locales class with a list of locales in Vanilla Minecraft\n- Refactor `TextRepresentation` -> `TextSerializer`, rename methods\n  - `Texts.toPlain()` -> `TextSerializers.PLAIN.serialize(Text)` or `text.toPlain()`\n  - `Texts.json().to(Text)` -> `TextSerializers.JSON.serialize(Text)` or `text.to(TextSerializers.JSON)`\n  - `Texts.json().from(String)` -> `TextSerializers.JSON.parse(String)`\n  - `Texts.replaceCodes(String, char, char)` -> `TextSerializers.LEGACY.replaceCodes(String, char)`\n- Added new text serializer (`TextSerializers.COLOR_CODE`, **TODO: Naming**) for the usual color codes (using `&`), which is unlike `TextSerializers.LEGACY` not deprecated and safe for use\n- Remove `Text.Placeholder` and `Texts.format(Text)`\n- Much more things I can't remember.\n",
    "head_branch": "feature/text3",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8f7d9087c4d6d37a5f2",
    "number": 986,
    "body": "This is a more in-depth change of the tab list API (minor change was done in https://github.com/SpongePowered/SpongeAPI/pull/979).\n\nThis does the following:\n- renames `PlayerTabInfo` to `TabListEntry`\n- removes `setGameProfile` from `TabListEntry`\n- renames the methods in `TabList` to reference \"entries\" instead of \"players\"\n",
    "head_branch": "refactor/tab",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8f8d9087c4d6d37a5f3",
    "number": 980,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/issues/980) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/349) | [Forge](https://github.com/SpongePowered/SpongeForge/pull/458) | [Vanilla](https://github.com/SpongePowered/SpongeVanilla/pull/195)\n\nThis PR:\n- changes `transformMessage` to return an `Optional<Text` instead of a nullable `Text`, and removes `final` from `sendMessage` to allow for more customisability\n- changes `MessageEvent` to return an `Optional<Text>` for `getMessage`, and marks `setMessage` as nullable\n  - this additionally cleans up the implementation, which is currently checking if an empty text is being sent - this is bad because sending an empty text is valid\n- prevents sending null values to the recipient in `MessageSink`\n",
    "head_branch": "refactor/sinks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8f9d9087c4d6d37a5f4",
    "number": 979,
    "body": "\"latency\"/\"ping\" is what these methods deal with, not \"connection time\"\n",
    "head_branch": "fix/tab-mn",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8fad9087c4d6d37a5f5",
    "number": 978,
    "body": "This adds a new dual (header and footer) setter for the tablist header and footer. Since the header and footer are sent together, it makes sense to allow setting both at once, as well as individually.\n",
    "head_branch": "feature/tab-hf",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8fbd9087c4d6d37a5f6",
    "number": 974,
    "body": "[**API**](https://github.com/SpongePowered/SpongeAPI/pull/974) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/344) | [Forge](https://github.com/SpongePowered/SpongeForge/pull/455) | [Vanilla](https://github.com/SpongePowered/SpongeVanilla/pull/194)\n\nThis adds access to the property map that is associated with `GameProfile`s.\n\nThe property map is represented by a `Multimap` of `String`s to `ProfileProperty`s, although the keys of the multimap are ignored internally. Each `ProfileProperty` contains a name (non-null), value (non-null), and an optional (nullable) signature - if the signature is included, it **must** be a valid signature provided by Mojang which matches the value.\nTextures (skins, capes, etc) are one item that is stored in the property map (used for resolving humanoid skins/capes/etc), although there may be other properties in the map, either from Mojang or other modifications/plugins.\nLike entity AI, profile properties must be constructed through `GameProfileProperty`, either by extending the class or instantiating with your desired values. Attempting to add an extension of `ProfileProperty` will result in an exception being thrown at you.\n\nTest plugin: https://gist.github.com/kashike/32e61d0ba0ecf76a5d04\n",
    "head_branch": "feature/profiles",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8fcd9087c4d6d37a5f7",
    "number": 966,
    "body": "@Minecrell @Aaron1011 Here the fix you requested for [Team prefixes](https://github.com/SpongePowered/SpongeAPI/blob/master/src/main/java/org/spongepowered/api/scoreboard/Team.java#L120).\n## The Issue\n\nThe current `Texts.of(Object...)` method will ignore all trailing formatting codes, which makes the team prefixes hard to use.\n\n``` java\nTexts.of(TextColors.RED) == Texts.of()\nTexts.of(TextColors.RED).toPlain() == \"\"\nTexts.of(TextColors.RED, \"Foo\").toPlain() == \"&4Foo\"\nTexts.of(TextColors.RED, \"Foo\", TextColors.BLUE) == Texts.of(TextColors.RED, \"Foo\")\nTexts.of(TextColors.RED, \"Foo\", TextColors.BLUE).toPlain() == \"&4Foo\"\n```\n## The Fix\n\nThe fixed version will append the formatting using an empty text if it was not applied to previous elements.\n\n``` java\nTexts.of(TextColors.RED) != Texts.of()\nTexts.of(TextColors.RED).toPlain() == \"&4\"\nTexts.of(TextColors.RED, \"Foo\").toPlain() == \"&4Foo\"\nTexts.of(TextColors.RED, \"Foo\", TextColors.BLUE) != Texts.of(TextColors.RED, \"Foo\")\nTexts.of(TextColors.RED, \"Foo\", TextColors.BLUE).toPlain() == \"&4Foo&6\"\n```\n\nIf you have any questions I'll be back in a couple of hours.\n\n---\n\nPS: I haven't tested it with the method in question yet, nor did I test the capabilities of `toPlain()/toLegacy()`.\n",
    "head_branch": "TextsOfPrefixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8fdd9087c4d6d37a5f8",
    "number": 961,
    "body": "Changes `Vector3d` to `Tuple<Vector3d, Boolean>`\nSee #955\n",
    "head_branch": "respawn-forced",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8fed9087c4d6d37a5f9",
    "number": 959,
    "body": "For #882, implemented in https://github.com/SpongePowered/SpongeCommon/pull/328\n\n@bloodmc \n",
    "head_branch": "feature/chunk-pregen",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e8ffd9087c4d6d37a5fa",
    "number": 958,
    "body": "[[API]](https://github.com/SpongePowered/SpongeAPI/pull/958) [[Common]](https://github.com/SpongePowered/SpongeCommon/pull/131)\n\nRequired changes to the builders to be properly implemented in [SpongeCommon#131](https://github.com/SpongePowered/SpongeCommon/pull/131)\n\n---\n\nThere is also another issue with the `AchievementBuilder`\n\nThe [`Achievement`](https://github.com/SpongePowered/SpongeCommon/pull/131/files#diff-d2caa86494b4868deeba86211da08ccbR117) needs a `row` (`displayRow`) and a `column` (`displayColumn`) parameter however I'm not sure whether this is only an implementation detail or whether this is actually relevant to use them. I haven't found a usage of those fields/values, but this might be the case because those values are only needed for the client or the obfuscator trolled me.\n\nShall I add them here too or not?\n",
    "head_branch": "Statistics",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e900d9087c4d6d37a5fb",
    "number": 957,
    "body": "SpongeAPI | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/323)\n\nThis PR improves support for tab completion, both for commands and normal chat completion.\n\nFeatures:\n- `TabCompleteCommandEvent` has been renamed to `TabCompleteEvent`, the latter of which has two subinterfaces: `Command` and `Chat`\n  - The 'original' tab completion are now available in `TabCompleteEvent`. For commands, this is the list of completions returned by the dispatcher, which includes the completions specified for a command (both Vanilla and Sponge). For chat, this is any names that matched the current word. (e.g. 'Aa' -> 'Aaron1011')\n  - The location being looked at by the client is now available in the event, and in the corresponding command methods. This is not computed by the server - it's send by the client along with the current contents of the chat bar.\n",
    "head_branch": "feature/tab-complete",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e901d9087c4d6d37a5fc",
    "number": 956,
    "body": "Added the HideData manipulator, the corresponding keys, and the Immutable version of the manipulator.\n\nAdds https://github.com/SpongePowered/SpongeAPI/issues/905\n",
    "head_branch": "feature/hidedata",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge a238ad3ced8da0250d0c0add65725991542bcdb7 into aa7106d10594864ba805cba9fb90273d25b3412d"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e902d9087c4d6d37a5fd",
    "number": 954,
    "body": "SpongeAPI | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/322)\n\nThis PR improves the Bans API, correcting several issues preventing it from being implemented properly.\n\nNotable changes:\n- The `BanType` enum has been replaced with the standard pseudo-enum classes (`BanType` and `BanTypes`)\n- Bans are now made on `GameProfile`s instead of `User`s. A `User` has associated world data, which is not applicable for `Ban`s.\n- Each `GameProfile` or `InetAddress` can have exactly one ban. The previous concept of multiple bans per user/IP was a significant departure from Vanilla, and had no real use-cases\n- All `BanData` and `WhitelistData` references have been removed. This was a redundant way of accessing the `BanService`, and made it too easy for plugins to overwrite existing bans.\n- `Ban#getStartDate` has been changed to `Ban#getCreatedDate`. While the date is present in Vanilla, it only serves as an informational value. Making it function as a proper start date would break Vanilla compatibility, or introduce a disparity between the internal handling of Bans versus the `BanService`\n- Add `WhitelistService`. This is much simpler than `BanService`, as Vanilla whitelist entries lack the complexity of ban entries (no start/expiration date, source, or `InetAddress` target)\n- `ClientConnectionEvent.Login` is now fired already cancelled, if the player would be unable to join due to a ban/lack of whitelist/server being full.\n\nBoth `BanService` and `WhitelistService` fully support replacement. However, `SimpleServiceManager` still needs to be updated to allow services to be replaced.\n\nTODO:\n- [ ] Determine if we should expose extra information about the disconnect reason in `ClientConnectionEvent.Join`. This could be in the form of a specific `Cause` object (similar to `SpawnCause`), or '`getOriginalXXX, getXXX, setXXX` methods on the event.\n",
    "head_branch": "feature/new-bans",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e903d9087c4d6d37a5fe",
    "number": 951,
    "body": "**SpongeAPI PR** | [SpongeCommon PR](https://github.com/SpongePowered/SpongeCommon/pull/314) | [SpongeForge PR](https://github.com/SpongePowered/SpongeForge/pull/439)\n\nOriginally, `GameDictionary` only provides access to `ItemType`s. This has the problem of false positives when performing comparisons using it, which can lead to **duplication bugs** (see #806). This PR changes it to store `GameDictionaryEntry`s instead. `GameDictionaryEntry`s can come from `ItemType` (which now extends it) or from a method in `ItemStackSnapshot`, and they provide methods to inspect their data and check whether an item stack matches them.\n\nThis change may break plugins.\n\nFixes #806.\n",
    "head_branch": "fix/dictionary",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e904d9087c4d6d37a5ff",
    "number": 950,
    "body": "We need an OptionSubjectCollection when a SubjectCollection needs to be ensured to have OptionSubjects.\n",
    "head_branch": "feature/optionsubjectcollection",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e905d9087c4d6d37a600",
    "number": 947,
    "body": "This adds the much needed useful parsing for non-integer numbers to Sponge.\n\nFor further details, see #937\n",
    "head_branch": "feature/decimalparsing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e906d9087c4d6d37a601",
    "number": 945,
    "body": "Superseded by https://github.com/SpongePowered/SpongeAPI/pull/1046\n[**API**](https://github.com/SpongePowered/SpongeAPI/pull/945) | [Common](https://github.com/SpongePowered/SpongeCommon/pull/304)\n\nDepends on:\n- [x] Profile properties\n  - [x] https://github.com/SpongePowered/SpongeAPI/pull/974\n  - [x] https://github.com/SpongePowered/SpongeCommon/pull/344\n  - [x] https://github.com/SpongePowered/SpongeForge/pull/455\n  - [x] https://github.com/SpongePowered/SpongeVanilla/pull/194\n- [ ] [Fire `ClientConnectionEvent.Prepare`](https://github.com/SpongePowered/SpongeCommon/pull/408)\n- [x] `CustomNameVislbleData`\n  - [x] https://github.com/SpongePowered/SpongeAPI/pull/1013\n  - [x] https://github.com/SpongePowered/SpongeCommon/pull/403\n\nThis pull request is still a WIP - I'm opening it for a place to get feedback while I'm writing it.\n\n`Entity#getDefaultContext()` - gets the default (\"global\") context\n`Entity#getContext(CommandSource)` - gets the context as seen by the `CommandSource`. `CommandSource` is a placeholder for now.\n\nI'd be able to do, for example\n\n``` java\ndeamon5550.getContext(kashike).offer(Keys.DISPLAY_NAME, Texts.of(\"Deamon\"));\n```\n\nto set the name I see you as (\"Deamon\") when querying `deamon5550.getContext(kashike).get(Keys.DISPLAY_NAME);`, but for the default context (and contexts with no data set) I'd see your primary name (\"Deamon5550\") unless changed.\n\nDisplay names are an example, this is a requirement of other things I'm working on.\n",
    "head_branch": "feature/data-context",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e907d9087c4d6d37a602",
    "number": 944,
    "body": "Common: https://github.com/SpongePowered/SpongeCommon/pull/302\n\nIt seems like `TargetPlayerEvent` was accidentally left out.\n",
    "head_branch": "feature/login-player",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e908d9087c4d6d37a603",
    "number": 941,
    "body": "Impl: https://github.com/SpongePowered/SpongeCommon/pull/297\n\nThis adds the ability to prevent humanoids from affecting spawning (activating mob spawners, and allowing mobs to spawn and despawn).\n",
    "head_branch": "feature/affects-spawning",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e909d9087c4d6d37a604",
    "number": 940,
    "body": "With the stability of abstract `DataManipulator` implementation in SpongeCommon, I feel it's safe to now supply these abstractions for plugin usage. Little should change at this point.\n",
    "head_branch": "feature/data",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 4a4168fb4b3f2e4ae7a2ed33a794db76139ad31f into 65aab59c1faeb3c4d9c1bc7920d28c16dad0f1e5"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e90ad9087c4d6d37a605",
    "number": 933,
    "body": "See #786\n",
    "head_branch": "event/change-settings",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 52130e2960650d9dea447aae0a034224d8c41e74 into 98d48ec51a09b9b94a99776fdb6d861918c28c0a"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e90bd9087c4d6d37a606",
    "number": 928,
    "body": "This extends the Platform API by replacing specific methods like `getName()` or `getApiVersion()` with an exposed `PluginContainer` for the API and the implementation, which provides all of these methods and possibly more in the future (as soon we have added more [plugin metadata](https://github.com/SpongePowered/SpongeAPI/issues/822)).\n\nThis also matches the current design in SpongeVanilla and Forge where the components of the implementation (e.g. Minecraft, Forge, SpongeForge) are all represented as separate plugins, even though they aren't standalone plugins.\n\nSpongeCommon PR: https://github.com/SpongePowered/SpongeCommon/pull/277\nSpongeVanilla PR: https://github.com/SpongePowered/SpongeVanilla/pull/187\nSpongeForge PR: https://github.com/SpongePowered/SpongeForge/pull/423\n",
    "head_branch": "feature/platform2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 5a65bf1223036f341054fd74914e31b7e8cf296e into ff668f2b98c007d615003a2c82eea9e8e9b24b91"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e90cd9087c4d6d37a607",
    "number": 927,
    "body": "[Impl](https://github.com/SpongePowered/SpongeCommon/pull/274)\n#### Event Filtering\n\nThis branch adds annotation based event filtering to assist with reducing the amount of boilerplate necessary while writing event listeners.\n##### Event type Filters\n\nThese filters are applied to the method and apply a range of filters based on the event object.\n###### Include\n\nThis annotation allows you to listen to a supertype event (such as EntityEvent) and filter it to only receive a specified subset of the event type's subclasses.\n\n``` java\n    @Listener\n    @Include({ InteractBlockEvent.Secondary.class })\n    public void include(InteractBlockEvent event) {\n        // This listener will only fire if the event is one of the included types\n    }\n```\n###### Exclude\n\nThe opposite of include, this allows you to listen to a supertype event and filter it to not receive a specified subset of the event type's subclasses.\n\n``` java\n    @Listener\n    @Exclude({ InteractBlockEvent.Secondary.class })\n    public void exclude(InteractBlockEvent event) {\n        // This listener will only fire if the event is not one of the excluded types\n    }\n```\n###### IsCancelled\n\nThis will filter the event such that your listener will only be called if the event has been cancelled by a previous event listener. This is essentially the opposite of the `ignoreCancelled` flag on the Listener annotation.\n\n``` java\n    @Listener(order = Order.LATE, ignoreCancelled = false)\n    @IsCancelled\n    public void cancel(InteractBlockEvent.Secondary event) {\n        // This listener will only fire if the event was previously cancelled\n    }\n```\n##### Parameter Sources\n\nThese annotations are applied to additional parameters in the event handler method and specify a source for that parameter. If an object matching the source and type is not found in the cause then your listener is not called.\n###### First\n\nThis gets the first object from the event `Cause` matching the parameter type.\n\nA fairly typical event listener for a player event will go something like the following\n\n``` java\n    @Listener\n    public void onInteract(InteractBlockEvent.Secondary event) {\n        Optional<Player> player = event.getCause().first(Player.class);\n        if(player.isPresent()) {\n            //do something\n        }\n    }\n```\n\nWith the `@First` annotation this can be simplified to the following\n\n``` java\n    @Listener\n    public void first(InteractBlockEvent.Secondary event, @First Player player) {\n        // This listener will fire if the event cause has a player\n        // The player parameter will be the first player in the cause chain\n    }\n```\n###### Last\n\nEquivalent to `First` except it calls `Cause#last(Class)`.\n###### All\n\nThe `All` annotation allows you to receive all cause objects of a certain type. It must be applied to an array type and is equivalent to `Cause#allOf(Class)`\n\n``` java\n    @Listener\n    public void all(InteractBlockEvent.Secondary event, @All Player[] players) {\n        // This listener will fire if the event cause has at least one player\n        // players will contain all players in the cause chain\n    }\n```\n\nBy default your listener will be skipped if the returned array would be empty, this can be disabled however by setting the ignoreEmpty flag to false.\n\n``` java\n    @Listener\n    public void all(InteractBlockEvent.Secondary event, @All(ignoreEmpty = false) BiomeTypes[] players) {\n        // This listener will always fire, as even if there are no BiomeTypes\n        // objects in the cause chain (and there won't be) its set to not ignore\n        // empty and therefore will simply return an empty array\n    }\n```\n##### Parameter Filters\n\nThese filters apply additional conditions to a parameter. These require that the paramter also have a parameter source annotation (see above).\n###### Has\n\nThis takes a data manipulator type and checks that the annotated data holder has a data manipulator of the specified type. If the object is not a `DataHolder` or does not have a matching manipulator then your listener is not called. Equivalent to `DataHolder#has(Class)`.\n###### Supports\n\nSimilar to `Has` except the it is only checked that the DataHolder supports the given data manipulator type. Equivalent to `DataHolder#supports(Class)`.\n\nA full example plugin can be found [here](https://gist.github.com/Deamon5550/6d4e4cdec9361ddace93)\n\nTODO:\n- [x] Add Root cause annotation\n- [x] remove `ignoreCancelled` from Listener\n",
    "head_branch": "feature/event-filter",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge c7a9590f9ff81a4fab37adb33751a7ab6eda1768 into d757f85d347755c2f33791f8b2e3af47a9470f45"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e90dd9087c4d6d37a608",
    "number": 922,
    "body": "",
    "head_branch": "JukeboxData",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e90ed9087c4d6d37a609",
    "number": 921,
    "body": "I'm taking the conversation on https://github.com/SpongePowered/SpongeAPI/commit/d0bc27252b81e2288a2a19681585bac112437a74#commitcomment-13578083 into a PR so we can discuss actual API changes.\n\nHopefully the issues raised so far have been addressed.\n\nOne thing I'm not sure about is how to make `PlayerSimulator` a `Subject` in the implementation since it's not got a real UUID.\nOne thought is that plugins provide the simulator a subject e.g a player.\n",
    "head_branch": "feature/player-sim",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e90fd9087c4d6d37a60a",
    "number": 920,
    "body": "SpongeAPI | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/264) | [SpongeForge](https://github.com/SpongePowered/SpongeForge/pull/414)\n\nIt has been a long time coming but I wanted to be the one to tackle AI.\n\nPhase 1 involves Goals and Tasks. A Goal is simply a collection of Tasks. All Agents in Minecraft have two Goals, NORMAL and TARGET. In each Goal, tasks are arranged by priority (lower = higher priority).\n\nTask is where all the action is. It is the goal of our API to handle tweaking of Vanilla AI, Mod AI, but also adding custom ones (using AbstractAITask).\n",
    "head_branch": "feature/goals",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e910d9087c4d6d37a60b",
    "number": 918,
    "body": "**What is MapItemData API?**\n\nQuite simply, it's an API made for the data contained by Minecraft's filled map items. It's built to give plugin developers an easy way of modifying the data within these maps. \n\n**How it Works.**\n\nI created a class called `MapItem` which gives access to the `colors` of the map, the `scale`, the `center`, the `world` of the map, the `width`, the `height`, as well as the `visible players` on that map. A plugin would then get this value from the `MapItemData`, which returns a `MapItem` that plugin developers can manipulate and offer back to the `ItemStack`.\n\n**Notes**\n- MapData is stored in the world NBT.\n- Maps have methods for getting their MapData, but it requires the world object. (Need a good way of getting that in the processors)\n- MapData has good methods for easily changing and updating values within it.\n",
    "head_branch": "MapItemData",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e911d9087c4d6d37a60c",
    "number": 911,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e912d9087c4d6d37a60d",
    "number": 910,
    "body": "DelayableData for representing the Delay of a RedstoneRepeater\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e913d9087c4d6d37a60e",
    "number": 909,
    "body": "They apply to minecart containers as well.\n",
    "head_branch": "data/lockable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e914d9087c4d6d37a60f",
    "number": 908,
    "body": "InstrumentData isnt possible to implement\nAxisData is only used in quartzBlocks only that is better to handle by just adding the axis to QuartzTypes(which is how minecraft handles EnumQuartzType)\n",
    "head_branch": "blockdata",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e915d9087c4d6d37a610",
    "number": 904,
    "body": "Implementation: SpongePowered/SpongeCommon#246\n\nCurrently there is no way in the API to represent a minecart with a block inside. This fixes that by adding `MinecartBlockData` - which contains a BlockState and offset.\n\nYep, that's about it!\n",
    "head_branch": "data/minecart-block",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e916d9087c4d6d37a611",
    "number": 903,
    "body": "Currently, the API uses `java.awt.Color` due to it's useful capabilities, however, the issue with it is that it's not stable in that it can not be translated to and from various other types of colors that are and will be exposed in the API. This includes `DyeColor` and soon `MapColor`. The benefit of this is that we have a final class `Color` that provides not only some translations between `java.awt.Color`, but also adds some static methods for usability.\n",
    "head_branch": "feature/color",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 2587ac43ed7a1c91d4e5502cdcacc5535470a8cb into 221b0b7b5166aaef1f56cdad2a04e01820afe044"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e917d9087c4d6d37a612",
    "number": 902,
    "body": "Currently FireworkData only applies to the firework rocket item and entity. This is because it references the flight modifier, which is only added once the rocket is fully crafted.\n\nThis PR changes it so that the modifier is an optional value - this way, we can not only use FireworkData for rockets, but for firework stars as well.\n\nThis also updates the API docs to make clear that a star can only have one effect attached to it - the first effect in the list.\n",
    "head_branch": "data/fireworks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e918d9087c4d6d37a613",
    "number": 896,
    "body": "This API functions as a layer on top of slf4j, both providing increased\naccess to logging appenders and filters, as well as allowing the\nlogging of Text messages rather than just plain Strings.\n\nThese changes allow for loggers to have improved integration with\nSponge and for plugins to more easily intercept plugin log messages.\n\nAdditionally, the concept of an action logger is added. This is more\ncomplicated than the existing API changes, and is designed for plugins\nthat perform actions that have a source, one or more targets, and the\nneed to notify some combination of those and the log/console of events\nthat occur.\n\nA lot of this is still pretty WIP -- especially implementations of LogTargets, and most of the ActionLoggger system -- I'm not sure exactly how that will end up working out, but there will have to be some sort of additional configuration -- users should be able to customize the messages sent by the ActionLogger.\n\nImplementationwise, there isn't much yet. It should be possible to integrate this into how Log4j2 works -- the biggest issue is mapping log4j Appenders to sponge LogTargets, second biggest the fact that LogTargets and Appender/Filters work slightly differently -- but should still be workable.\n",
    "head_branch": "feature/logging",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e919d9087c4d6d37a614",
    "number": 895,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e91ad9087c4d6d37a615",
    "number": 894,
    "body": "**SteerEntityEvent will be thrown when a player attempts to move while mounted on an entity.** This can be used in a plethora of fun shenanigans (i'm making a player-controlled tank after this), especially in things like minigames.\n\n![dat click](https://dl.dropboxusercontent.com/u/46408976/publicscrns/i%27m%20a%20screenie%2C%20oooooo.png)\n\n**_What are the use cases?**_\nAside from just being another thing you can play with in Minecraft, this can be used for a bunch of fun things that can come from someone's insane mind or minigames. Controllable vehicles, specifically.\n\n**_Why isn't it cancellable?**_\nSteering is controlled completely on the client-side; the client sends a packet ([C0CPacketInput](http://wiki.vg/Protocol#Steer_Vehicle)) whenever the player attempts to move while mounted on a vehicle. The client doesn't listen as to whether or not the mounted entity is actually controllable, and will send a packet regardless of what entity it sits on.\n\n**_Does this throw when a vehicle mounted by a player moves?**_\nNo, that would be the job of a movement event. If it did, this would be cancellable. Steering movement does not directly control the entity the player is mounted on; instead the movement is sent to the server to consider applying the movement onto the entity being ridden.\n\n**_How is this to be implemented?**_\nI don't exactly know how you guys do your implementation stuffs yet, but the way I've done my testing is by listening for the [C0CPacketInput / Steer Vehicle](http://wiki.vg/Protocol#Steer_Vehicle) packet and retrieving the values stored within.\n\n**_Any extras?**_\nA nice addition to this would be to allow `EntityType`s to identify themselves as controllable by steering or not. Easily not important, though.\n\n_Wanna do some testing yourself? [Here's the code I used!](https://gist.github.com/Xemiru/c0fdb413e0f81a912f01)_\n**NOTE:** The given code used for testing utilizes classes from the forge source code and the netty library. Both dependencies MUST be present within your project to be able to build correctly. Usage instructions and what the testing code does is within the provided gist.\n\nThe code also accesses Minecraft code directly; this means it must either be compiled with ForgeGradle for a plugin jar, or ran in a development environment.\n",
    "head_branch": "steerevent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e91bd9087c4d6d37a616",
    "number": 893,
    "body": "This makes sure that all values containing numbers are represented as BoundedValues, rather than as plain values.\n",
    "head_branch": "data/fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e91cd9087c4d6d37a617",
    "number": 891,
    "body": "SpongePowered/SpongeCommon#233\n\nCurrently there isn't a way for plugins to query the distance that an entity has fallen. This is important, for example, for plugins that want to affect gravity (like [here](https://forums.spongepowered.org/t/how-to-reset-fall-damage/9726/5)), or maybe send a message when a player falls 20 blocks.\n\nWhile this can be discovered by listening for player movement and recording changes in location this is not always accurate, especially when you need to consider other circumstances like flying, mods, etc.\n\nThis PR adds the key, mutable and immutable data to get and alter an entity's fall distance.\n",
    "head_branch": "data/fall-distance",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e91dd9087c4d6d37a618",
    "number": 890,
    "body": "@DDoS \n\nVerifies that the given matrix is a discrete transform matrix before creating a discrete transform. This is because if the sum of the values of a row is an integer for each row in the matrix, then the matrix is a discrete transform.\n\nInformal justification:\n\n![matrix](http://latex2png.com/output//latex_87b18d9a64f54a2911329a7815cc3f71.png)\n\nWe assume that the values in the column vector are arbitrary integers. For the products in the resulting vector to be integers, (a+b) and (c+d) must also be integers. This result can be generalized to 3x3 and 4x4 matrices.\n",
    "head_branch": "arbitrary-discrete-transform",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e91ed9087c4d6d37a619",
    "number": 889,
    "body": "Changing BrewingData to BrewingStandData\n",
    "head_branch": "feature/brewing-stand-data",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e91fd9087c4d6d37a61a",
    "number": 886,
    "body": "This cleans up Fishing events, and allows plugins to set the caught itemstack, even if none was caught initially.\n\nPinging @JBYoshi\n",
    "head_branch": "feature/improve-fishing",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e920d9087c4d6d37a61b",
    "number": 881,
    "body": "See #880 for discussion. This will replace all occurrences of `java.io.File` with `java.nio.file.Path`, dependency injection supports both types.\n\nImplementation PR: TODO\n",
    "head_branch": "feature/nio-path",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge c3c82b74be517d3d52562a54c02e8a2f8b82a8f9 into 65161662c0dee6ded6cbb16050bb1c0f6a1aa924"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e921d9087c4d6d37a61c",
    "number": 879,
    "body": "# The FurnaceData gets a full upgrade\n## Why?\n- The last code was very unstructured, for the same results many different ways was used.\n- The values was picked very unthinkingly\n## But why it would be better than the last version?\n#### \\- Now it has an architecture:\n\nall values correspond to the underlaying values:\n\n| Underlaying Value | Value for Implementation |\n| --- | --- |\n| furnaceBurnTime | passedBurnTime (Thats not the same but it is calculated out of it) |\n| currentItemBurnTime | maxBurnTime |\n| cookTime | passedCookTime |\n| totalCookTime | maxCookTime |\n#### \\- Now im checking the structure and the efficiency before any commit\n",
    "head_branch": "feature/furnace-data",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e922d9087c4d6d37a61d",
    "number": 877,
    "body": "A update for the furnace data\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e923d9087c4d6d37a61e",
    "number": 876,
    "body": "",
    "head_branch": "data/beaconfix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e924d9087c4d6d37a61f",
    "number": 873,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e925d9087c4d6d37a620",
    "number": 871,
    "body": "This PR was previously commited as PR #829 and was merged into the old java8 branch, but it was not included in the final java8 update.\nSo this PR updates that PR so it can be added to the master branch.\n\nSpongeCommon PR: https://github.com/SpongePowered/SpongeCommon/pull/200\n\nThis PR will also satisfy the requirements for #840\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e926d9087c4d6d37a621",
    "number": 869,
    "body": "Updated FurnaceData for <code>MutableBoundedValue</code>s and <code>ImmutableBoundedValue</code> s!\n",
    "head_branch": "feature/furnace-data",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e927d9087c4d6d37a622",
    "number": 865,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e928d9087c4d6d37a623",
    "number": 861,
    "body": "There's various caching issues that gradle isn't picking up for some reason, and I do believe we did decide to bump the snapshot version to 3.0-SNAPSHOT with the Java 8 update.\n",
    "head_branch": "version-bump",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e929d9087c4d6d37a624",
    "number": 860,
    "body": "[SpongeCommon PR](https://github.com/SpongePowered/SpongeCommon/pull/190) | SpongeForge PR (tbd) | SpongeVanilla PR (tbd)\n\nZero Javadoc errors, some javadoc-related checkstyle warnings, there's apparently some varargs pollution, but absolutely everything else is fixed. Yay.\n\n~~Commit 892986f is of uncertain value, that's only a potential issue @ST-DDT noticed in a comment on the OCD tracker.~~ it has been certaintized\n",
    "head_branch": "ocd",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e92ad9087c4d6d37a625",
    "number": 859,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e92bd9087c4d6d37a626",
    "number": 853,
    "body": "",
    "head_branch": "data/fish",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e92cd9087c4d6d37a627",
    "number": 852,
    "body": "changes to make EXPERIENCE_FROM_START_OF_LEVEL immutable see SpongePowered/SpongeCommon#177\n",
    "head_branch": "ExperienceData",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e92dd9087c4d6d37a628",
    "number": 851,
    "body": "Add `SimpleDispatcher.get(String, @Nullable CommandSource)` to `Dispatcher`.\nMake the `CommandSource` in `Disambiguator` `@Nullable`.\n\nImplementation: SpongePowered/SpongeCommon#179\nAddresses SpongePowered/Sponge#320.\n",
    "head_branch": "fix/disambiguator",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e92ed9087c4d6d37a629",
    "number": 850,
    "body": "This PR is required by SpongePowered/SpongeCommon#178\n\nrename `OwnableData` to `RepresentedPlayerData` following the discussion on #857 \n",
    "head_branch": "saladoc/OwnableData",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e930d9087c4d6d37a62a",
    "number": 849,
    "body": "When parsing `byte`s, `short`s, and `long`s, `Coerce` seems to assume that parsing failures via Java's built in primitive classes will return `null`, while they actually throw `NumberFormatException`s.\n\nThe reason only these methods needed to be fixed is that the other methods use Guava methods that return `null` in the case of a parsing failure; however, Guava doesn't provide methods for parsing `byte`s, `short`s, and `long`s.\n",
    "head_branch": "fix/coerce",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e930d9087c4d6d37a62b",
    "number": 847,
    "body": "Molded the suggestion I made to @gabizou in IRC into code.\n\nAlso fixed a NPE I encountered while testing my changes.\n",
    "head_branch": "saladoc/transactionbuilder",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e931d9087c4d6d37a62c",
    "number": 840,
    "body": "_This is a continuation of #836, whose commit logs have been borked for some odd reason_\n\n[Common side](https://github.com/SpongePowered/SpongeCommon/pull/163)\n\nThis PR adds two annotations that can be applied to a SpongeExecutorService field/parameter for quick and easy injections.  These annotations allow for a plugin developer to explicitly define the type of ExecutorService he/she wants injected (sync. vs. async.)\n",
    "head_branch": "feature/execsrv-binding-annots",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e933d9087c4d6d37a62d",
    "number": 837,
    "body": "Implementation: https://github.com/SpongePowered/SpongeCommon/pull/155\n\nPreviously this was contained in https://github.com/SpongePowered/SpongeAPI/pull/808\n\nThis PR adds the missing `Translatable` and `TextRepresentable` interfaces to a couple of types.\nRemoved `Translatable` from `Profession` since there are no translations available.\n- A lot of `CatalogType`s extend `Translatable`\n- `Entity` extends `Translatable` + `TextRepresentable`\n- `User` extends `TextRepresentable`\n\n**[Current API TextRepresentables](https://github.com/SpongePowered/SpongeAPI/blob/master/src/main/java/org/spongepowered/api/text/TextRepresentable.java)**\n- `Achievement`\n- `Entity`\n- `ItemStack`\n- `Player`\n- `User`\n\nIf I have missed something with a special text representation like `ItemStack` or `Achievement` please post a comment.\n",
    "head_branch": "Translatables",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e934d9087c4d6d37a62e",
    "number": 836,
    "body": "[Common Side](https://github.com/SpongePowered/SpongeCommon/pull/154)\n\nContinuing from the idea being discussed in #829, I've created two annotations that can be applied to a SpongeExecutorService parameter/field for easy injections.  These annotations allow the plugin developer to distinguish between a synchronous and an asynchronous executor.\n",
    "head_branch": "execsrv-binding-annots",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e935d9087c4d6d37a62f",
    "number": 835,
    "body": "See https://gist.github.com/gratimax/9aa7ecc33467e0ddfd0b. More info coming soon.\n\nHopefully this example can showcase some of the intended power here:\n\n``` java\nimport static org.spongepowered.api.text.template.TextElements.*;\n\nstatic final TextTemplate playerMessage = TextTemplate.of(\n  TextColors.BLUE, \"Hello, \", TextColors.LIGHT_GRAY,\n  playerDisplayName().pos(0), TextColors.BLUE,\n  \"See your team members: \", \n  TextColors.LIGHT_GRAY, \n    fallback(\n      iterable(playerDisplayName(), Texts.of(\"|\")), \n      Texts.of(\"No players\")).pos(1), \n  TextColors.BLUE, \"!\");\n\nfor (Player player: players) {\n  player.sendMessage(playerMessage.build(\n    TextArgs.of(player, players)));\n}\n```\n",
    "head_branch": "text-templates",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e936d9087c4d6d37a630",
    "number": 834,
    "body": "Api PR | <a href=\"https://github.com/SpongePowered/SpongeCommon/pull/152\">Implementation PR</a>\n\nThis pull request should improve the overall experience from the view of a plugin developer.\nIt should be merged before API Revision 3.0.\n\nIn summary, this pull request contains the tiny improvements that I think are needed to get into API Revision 3.0.\n\nPlease do not close this PR until Revision 3.0 as I may commit a few other changes in the meantime.\n",
    "head_branch": "feature/usage-improvements",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e937d9087c4d6d37a631",
    "number": 829,
    "body": "@zml2008 has asked if I was willing to contribute my implementation of the standard ExecutorService (Original post: [Sponge forums](https://forums.spongepowered.org/t/executorservice-backed-by-sponges-schedulerservice/8352)) to the project, this implementation delegates the execution of its tasks to the existing SchedulerService.\n\nWhile most of the implementation is based on the original version ([https://gist.github.com/Kiskae/5c44ea146857ca173170](https://gist.github.com/Kiskae/5c44ea146857ca173170)), I went through the contract of the ScheduledExecutorService again and changed the implementation to be more compliant:\n- The `schedule(AtFixedRate|WithFixedDelay)` methods would not execute more than once due to the implementation of FutureTask preventing multiple executions, the private class `RepeatableFutureTask` solves this issue\n- The contract of the  `schedule(AtFixedRate|WithFixedDelay)` methods specify that they should stop executing when they encounter an exception. Sponge tasks do not stop when they encounter an exception so the `RepeatableFutureTask` will cancel its parent task if an exception occurs.\n  - ~~_TODO_ the SchedulerService implementation prints to the log when an exception occurs, should this behaviour be replicated in the `RepeatableFutureTask`. Otherwise it can fail completely silently.~~\n- `ScheduledFuture.getDelay(TimeUnit)` specifies that it must return the amount of time UNTIL the next execution, the previous implementation simply returned Sponge's `Task.getDelay()`, which is the original execution delay. The implementation now tries to approximate the delay until the next execution.\n  - ~~_TODO_ Decide whether the following should be implemented: This could be made more accurate (and less hacky) by moving a part of the SpongeFuture implementation to SpongeCommon, where the `timestamp` value is available.~~\n\nOther changes made to better integrate with Sponge:\n- Added `syncExecutor(Object)` and `asyncExecutor(Object)` to the `SchedulerService`, they take a plugin instance and return the ExecutorService\n- Removed the ability to customize the task names, given that it is an abstraction over the SchedulerService, the default naming based on creation order makes the most sense anyway.\n#### What will this PR allow for?\n\nThrough this pull request it is possible to use many of the concurrency frameworks that are available on the JVM, since many use the ExecutorService as basis for the execution of whatever they do.\nKnown frameworks that support execution through an arbitrary executorservice are:\n- [RxJava](http://reactivex.io/RxJava/javadoc/rx/schedulers/Schedulers.html): A custom Scheduler can be used - Schedulers.from(game.getScheduler().syncExecutor(this))\n- [Java 8 CompletableFuture](http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html): All the *Async methods have an overload that accepts an Executor to run on.\n- [Scala Futures](http://www.scala-lang.org/files/archive/nightly/docs/library/index.html#scala.concurrent.Future): All futures take an implicit ExecutionContext - ExecutionContext.fromExecutorService(game.getScheduler().syncExecutor(this))\n\nExample of usage:\n\n``` java\nfinal Server s = game.getServer();\nExecutorService executor = game.getScheduler().syncExecutor(this);\nObserableFuture<UUID> futurePlayerId = someSource();\nfuturePlayerId.thenApplyAsync((playerUUID) -> {\n    //Any actions performed here are thread-safe!\n    final Player p = server.getPlayer(playerUUID).get();\n    //Modify the world at the players location\n    return player;\n}, executor).thenApply((player) -> {\n    //Beware, this also runs on the server thread, use another *Async call to move to another thread\n      player.kick();\n    return player.getName();\n}).thenApplyAsync((playerName) -> {\n    //This is no longer thread-safe, but will not risk blocking the main thread\n    computeNameCoolnessVerySlow(playerName);\n});\n```\n",
    "head_branch": "java8",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e938d9087c4d6d37a632",
    "number": 824,
    "body": "It also matches the spec. in Keys.BANNER_BASE_COLOR\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e939d9087c4d6d37a633",
    "number": 815,
    "body": "",
    "head_branch": "patch-4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e93ad9087c4d6d37a634",
    "number": 808,
    "body": "This PR improves the changes made in #779.\nImplementation: https://github.com/SpongePowered/SpongeCommon/pull/129\n## Additions\n- `Placeholder`s\n  - Placeholders can be used to calculate their replacement using the given context\n- `Text.format(Text, Function<String,?>)`\n  - Allows lazy fetching/calulcation of replacements used in conjunction with `Placeholder`s\n    - Example: Directly fetch player prefixes from a permission plugin without being bound to just `prefix` or similar. `{world}{faction}{foobar}{prefix}{player}: {message}`\n  - Also avaiable as `Text.format(Text, Object...)` uses indexes as keys for the map\n  - Also avaiable as `Text.format(Text, Map<String,?>)` uses the function impl\n- Similarize the behaviour of all `joinX(...)`methods\n- `Text#joinOf(Text separator, Object... objects)`\n- `Text#joinOf(Text separator, Iterable<?> contents)`\n- `Text#formatBuilder()`\n  - Utility method to use the format call with named parameters in one row and without having to explicitly create a `Map` for it.\n- `Functions` (Optional)\n  - Utility class for creating and wrapping `Function`s\n- `BiFunctions` (Optional)\n  - Utility class for creating and wrapping `BiFunction`s\n- `Dictionary` (Optional)\n  -  Utility class for multi language support with fully configurable messages.\n## Changes\n- Better `TextRepresentable` specifications\n- `Text.of(Object...)` \n  - added support for `Iterable`s\n  - added support for arrays\n  - Simplified handling of `TextRepresentable`s\n## Test Plugin\n\n[TextFormat.jar](https://dl.dropboxusercontent.com/u/16999313/Sponge/TextFormat.jar) (Plugin)\n[TextFormat.zip](https://dl.dropboxusercontent.com/u/16999313/Sponge/TextFormat.zip) (Source)\n\nTry the following commands to see the resutls:\n- `/textformat`\n- `/textformat PvPMonster`\n- `/textformat PvPMonster Innocent`\n- `/textformat PvPMonster Innocent &6Stick of Doom`\n- `/textformat <YourUsername> Innocent` // Uses the item in hand\n- `/texttype <CatalogType/*>`\n- `/textjson` - Proves the json (de-)serialization works\n- `/textxml` - Proves the xml(de-)serialization works\n## Usage\n\nConsider the following situation. You would like to show the following message to your arena participants on a regular basis.\n\n```\nCurrent ranking:\n1) MonsterKiller - 42 points (324m away)\n2) MunsterHunter - 21 points (123m away)\n3) PlayerKiller - 5 points (2m away)\n```\n\nWithout this PR you have basically four possibilities:\n### 1) Using the `Text.Builder`\n\n``` java\nfor (Player player : participants) {\n    player.sendMessage(Text.of(\"Current ranking:\"));\n    int index = 1;\n    for (Player ranked : topRanked) {\n        Text.Builder builder = Text.builder();\n        builder.append(Text.of(index))\n                .append(Text.of(\") \"))\n                .append(Text.of(ranked))\n                .append(Text.of(\" - \"))\n                .append(Text.of(arena.getPoints(ranked)))\n                .append(Text.of(\" points (\"))\n                .append(Text.of(calcDistance(player, ranked)))\n                .append(Text.of(\"m away)\"));\n        player.sendMessage(builder.build());\n    }\n}\n```\n\nThis is pretty verbose, lets reduce that a little bit.\n### 2) Using `Text.of(Object...)`\n\n``` java\nfor (Player player : participants) {\n    player.sendMessage(Text.of(\"Current ranking:\"));\n    int index = 1;\n    for (Player ranked : topRanked) {\n        Text text = Text.of(index++, \") \", ranked, \" - \", arena.getPoints(ranked), \" points (\", calcDistance(player, ranked), \"m away)\");\n        player.sendMessage(text);\n    }\n}\n```\n\nThis is shorter and easier to read, but you have to create the same `Text`s over and over again. \nAlso you cannot use different styles for different languages.\n### 3) Using constants\n\n``` java\nText MAIN_MESSAGE = Text.of(\"Current ranking:\");\nText STATIC_PART1 = Text.of(\") \");\nText STATIC_PART2 = Text.of(\" - \");\nText STATIC_PART3 = Text.of(\" points (\");\nText STATIC_PART4 = Text.of(\"m away)\");\nfor (Player player : participants) {\n    player.sendMessage(MAIN_MESSAGE);\n    int index = 1;\n    for (Player ranked : topRanked) {\n        Text text = Text.of(index++, STATIC_PART1, ranked, STATIC_PART2, arena.getPoints(ranked), STATIC_PART3, calcDistance(player, ranked), STATIC_PART4);\n        player.sendMessage(text);\n    }\n}\n```\n\nWell, we don't create the messages over and over again, but this is quite horrible to read and you still cannot use different styles for different languages.\nThere must be something easier.\n### NEW) Using `Text.format(Text, X)` and simple `Placeholder`s\n\n``` java\nText MAIN_MESSAGE = Text.of(\"Current ranking:\");\nText RANKING_MESSAGE = Text.of(Text.placeholder(\"0\"), \") \", Text.placeholder(\"1\"), \" - \", Text.placeholder(\"2\"), \" points (\", Text.placeholder(\"3\"), \"m away)\");\n\nfor (Player player : participants) {\n    player.sendMessage(MAIN_MESSAGE);\n    int index = 1;\n    for (Player ranked : topRanked) {\n        player.sendMessage(Text.format(RANKING_MESSAGE, index++, ranked, arena.getPoints(ranked), calcDistance(player, ranked)));\n    }\n}\n```\n\nHell yeah, that looks pretty awesome. We also have multi language support now. We just have to exchange the `RANKING_MESSAGE`. \nBut wouldn't it be cool if I could just put the `points` and `distance` calculation inside the Text template? We should also replace the numeric placeholders with named onces to improve readability and simplify configuration.\n### NEW + nice) Using `Text.format(Text, X)` and functional `Placeholder`s\n\nOf course we can do that!\n\n``` java\nText MAIN_MESSAGE = Text.of(\"Current ranking:\");\nText RAW_RANKING_MESSAGE = Text.of(Text.placeholder(\"index\"), \") \", Text.placeholder(\"ranked\"), \" - \", Text.placeholder(\"points\"), \" points (\", Text.placeholder(\"distance\"), \"m away)\");\n\n// Prepare once (per arena)\nText RANKING_MESSAGE = Text.formatBuilder()\n        .with(\"points\", Transformers.mappedKey(\"ranked\". currentArena::getPoints))\n        .with(\"distance\", Transformers.joinedKeys(\"target\", \"ranked\", ArenaUtil::calcDistance))\n        .apply(RAW_RANKING_MESSAGE);\n\n// Send to players infinite times\nfor (Player player : participants) {\n    player.sendMessage(MAIN_MESSAGE);\n    FormatBuilder formatter = Text.formatBuilder()\n            .with(\"index\", new CountSupplier(0))\n            .with(\"target\", player);\n    for (Player ranked : topRanked) {\n        player.sendMessage(formatter.with(\"ranked\", ranked).apply(RANKING_MESSAGE));\n    }\n}\n```\n\nYes this looks very straight forward and i probably won't ever have to change the `sendMessage` lines ever again. Only the `Text` message itself and possibly the functions that do the customizations.\n\nMhh, there is the preparation step that requires me to have the arena there, but I would like to store the template as static field, isn't it possible to provide the arena later as well?\n\nSure thats possible:\n\n``` java\n// Prepare once (for all arenas)\nstatic final Text RANKING_MESSAGE = Text.formatBuilder()\n        .with(\"points\", Transformers.joinedKeys(\"arena\", \"ranked\", Arena::getPoints))\n        .with(\"distance\", Transformers.joinedKeys(\"target\", \"ranked\", ArenaUtil::calcDistance))\n        .apply(RAW_RANKING_MESSAGE);\n\n// Send to players infinite times\nfor (Player player : participants) {\n    player.sendMessage(MAIN_MESSAGE);\n    FormatBuilder formatter = Text.formatBuilder()\n            .with(\"index\", new CountSupplier(1))\n            .with(\"arena\", currentArena)\n            .with(\"target\", player);\n    for (Player ranked : topRanked) {\n        player.sendMessage(formatter.with(\"ranked\", ranked).apply(RANKING_MESSAGE));\n    }\n}\n```\n\nAnd I can still replace the `Text` instances if I want to use a different language, but I don't want to create a switch for multiple languages in the code, isn't it possible to push that to the `Placeholder` as well?\n### NEW + FANCY) Using `Text.format(Text, X)` and multilingual `Placeholder`s\n\n**Declaration:**\n\n``` java\n// DictionaryHolder is a plugin private wrapper class statically holding a Dictionary instance\nstatic final Text MAIN_MESSAGE = DictionaryHolder.getWithTarget(\"MAIN_MESSAGE\", \"target\")\n        .asPlaceholder();\n\nstatic final Text RANKING_MESSAGE = DictionaryHolder.prepare(\"RANKING_MESSAGE\")\n        .with(\"points\", Transformers.joinedKeys(\"arena\", \"ranked\", Arena::getPoints))\n        .with(\"distance\", Transformers.joinedKeys(\"target\", \"ranked\", ArenaUtil::calcDistance))\n        .doneWithTarget(\"target\")\n        .asPlaceholder();\n```\n\n**Usage:**\n\n``` java\n// Send to players infinite times\nfor (Player player : participants) {\n    FormatBuilder formatter = Text.formatBuilder()\n            .with(\"index\", new CountSupplier(1))\n            .with(\"arena\", currentArena)\n            .with(\"target\", player);\n    player.sendMessage(formatter.apply(MAIN_MESSAGE));\n    for (Player ranked : topRanked) {\n        player.sendMessage(formatter.with(\"ranked\", ranked).apply(RANKING_MESSAGE));\n    }\n}\n```\n\nSee here for an example [`DictionaryHolder`](https://gist.github.com/ST-DDT/3565623155e1dc64568f) implementation. This is (except from loading the template `Text`s from a file) the only thing plugin developers have to \"implement themselves\" to use full multi language support in their plugins.\n\nWith these easy changes we have FULL multi language support and we can concentrate on developing our plugin's features and only have to maintain the translation/text files. (And since the translation files are just plain texts even none-developers can create and update them.)\n### Configurable prefixes\n\nYou want to allow your plugin users/server owner to configure whether you show the player's prefix in the ranking list? Thats quite easy.\n\n``` java\nDictionaryHolder.prepare(\"X\")\n.with(key -> key.startsWith(\"prefix@\"), key -> {\n    return Transformers.flatMappedKey(key.substring(7), subject -> ((OptionSubject) subject).getOption(\"prefix\"))\n        .orEmptyText()\n        .asPlaceholder();\n})\n[...]\n```\n\nTemplate: `Hi ${prefix@target} ${target}!`\n\nAs you can see this setup is not bound to any instance in particular, so you can reuse it across your entire plugin without changes.\n\nPlease also note that this only affects the declaration section and will work without any changes to our usage section and without changing the API's default Text parser. And yes you still have multi language support and thus you could show the prefix only to `PIRATE_ENGLISH` users for example (and it won't be calculated it if you don't use it).\n\nWell, you aren't sure whether there will be a permission plugin that supports `OptionSubject` and don't trust the server admin to configure your messages properly (or they are configured that way by default). And you don't want a `ClassCastException` to pop up?\n\n``` java\nDictionaryHolder.prepare(\"X\")\n.with(key -> key.startsWith(\"prefix@\"), key -> {\n    return Transformers.flatMappedKey(key.substring(7), Functions.conditional(subject -> subject instanceof OptionSubject,\n        subject -> ((OptionSubject) subject).getOption(\"prefix\"), Functions.constantNull()))\n        .orEmptyText()\n        .asPlaceholder();\n})\n[...]\n```\n\nTemplate: `Hi ${prefix@target} ${target}!`\n\nIf I can support prefixes, why not support everything?\n\n``` java\nDictionaryHolder.prepare(\"X\")\n.with(key -> key.contains(\"@SUBJECT@\"), key -> {\n    String[] split = key.split(\"@SUBJECT@\", 2);\n    return Transformers.flatMappedKey(split[0], Functions.conditional(subject -> subject instanceof OptionSubject,\n        subject -> ((OptionSubject) subject).getOption(split[1]), Functions.constantNull()))\n        .orEmptyText()\n        .asPlaceholder();\n})\n[...]\n```\n\nTemplate: `Hi ${target@SUBJECT@prefix}${target@SUBJECT@title} ${target} ${target@SUBJECT@suffix}!`\n\nThe format is up to you!\n\nPS: I recommend that such functionalities should be centralized by plugin developers (maybe even pushed inside their `DictionaryHolder`).\n\n---\n\n**Any questions left?**\n\n---\n\n**Other Suggestions**\n(Not part of this PR)\n@zml2008 \n[MessageEventSuggestion ](https://gist.github.com/ST-DDT/3b337cfa42b1a621e957)\nor with the latest additions you will probably add a `FormatBuilder` or a context `Function` to the `MessageEvent` or its associated `MessageSink`\n",
    "head_branch": "TextFormatExt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e93bd9087c4d6d37a635",
    "number": 804,
    "body": "This change makes use of placeholders to have an api-exposed method of\ninteroperability for chat messages. The unformatted message is also\nmade mutable so that plugins can change the player's message without\nhaving to be concerned with formatting.\n\nThese changes have been made to make it easier for multiple plugins to\nhave a say in the final message sent by a player.\n\n@mbaxter @mmonkey would love to get your opinion on this\n",
    "head_branch": "feature/chatinterop",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e93cd9087c4d6d37a636",
    "number": 799,
    "body": "See issue #788.\n",
    "head_branch": "feature/generify-loc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 14c4512bb44ae77f76c5c148d182ac81087bae31 into e1e77b90a19bf5404926082bc860fda82301a8f4"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e93dd9087c4d6d37a637",
    "number": 793,
    "body": "This service makes it easier for plugins to generate error reports that provide useful information for plugin developers.\n\n[Example error report](https://gist.github.com/anonymous/ae434617c550c176f219)\n\nThe implementation wraps Minecraft's CrashReport system, with the changes of:\n- Easily allowing sending the error report to a specific player\n- Outputting the error report in Markdown format\n- Posting the error report to an anonymous gist\n- Using Text to allow formatting certain sections\n\nThings to think about:\n- [ ] How to pass through fatal exceptions? I currently use MC's ReportedException in the impl, but the SimpleCommandService wraps these in another layer of error reporting. Ways to deal with this are exposing the ReportedException to the API somehow, allowing custom error handlers to pass them through, moving the SimpleCommandService into the implementation and capturing there, or making the ErrorReportService simply reuse the existing error report while allowing the command service to tack on its additional data\n- [ ] Should each Reportable be provided the entire error report, or its own section? \n- [ ] Additional pastebin services, authentication support? (would be configurable)\n",
    "head_branch": "feature/errorreport",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e93ed9087c4d6d37a638",
    "number": 789,
    "body": "Position, rotation and scale in one easy package with methods to modify these.\n\nImplementation [here](https://github.com/SpongePowered/SpongeCommon/pull/120).\n\n@Zidane\n",
    "head_branch": "feature/discrete/transform",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e93fd9087c4d6d37a639",
    "number": 787,
    "body": "currently the only ways of getting a Chunk in Sponge is to either know the coords of a chunk (X, Z) and have the World already there. \nWorld.getChunk(X, 0, Z);\nWorld.loadChunk(X, 0, Z, gen);\n\nor hope that a location has a Chunk as its Extent instead of a World. But currently 100% of the times i have tried, it has always been a World. \n\nSo what im purposing is to add more methods of getting Chunk. And allow plugin developers to create their own algorithms to get the chunk they need. \n\nWorld.getChunks();\n\nThis would grab all chunks in that world. This would mean plugin developers could create their own algorithms to get the chunk they want.\n\nWorld.getChunk(Location);\n\nThis grabs the chunk that has that block. In this case the Location Extent does not matter, its the World that matters.\n\nEntity.getChunk();\n\nSponge already has Entity.getWorld() so there are 2 ways of getting a world from a entity ((World)Entity.getLocation().getExtent()) so it makes sense to have the ability for Entity to have getChunk(). \n\nThis would fix the following #540 #545 \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e940d9087c4d6d37a63a",
    "number": 785,
    "body": "This is my first pull request so please excuse any issues I have done.\n\nI have been working with Sponge for a while but originally I came from Bukkit. Bukkit has these features embedded into their API however SpongeAPI currently does not. I am currently checking if the player is sprinting by checking the distance between the new location and old location of a PlayerMoveEvent. This is fine until players simulate the speed of sprinting (impact of exploitation).\n\nI believe these events and this data request will suit the need for a SprintAPI in Sponge.   \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e941d9087c4d6d37a63b",
    "number": 784,
    "body": "This PR covers a few long-standing issues about command argument format and hopefully command argument handling.\n\nThe ones I want to get are:\n- [x] #604 \n- [x] #583 \n- [ ] Adding more tags to the various location-related command arguments\n- [x] #689 -- An event that is called for chat as well as commands (very preprocessey) -- completed, this is covered by #957\n- [ ] #780 \n- [x] ~~Only parse escapes for characters that would otherwise have a special function~~\n- [ ] Refactor CommandArgs + CommandContext to be less dumb (see [PEX wip on this](https://github.com/PEXPlugins/PermissionsEx/tree/feature/elementresult) (though what happens from this will be different))\n- [ ] #924 \n- [x] #989 \n\nnotable todos:\n- Implement `#spawn:<world>` on LocationCommandElement\n- Properly handle tabcompletion on LocationCommandElement\n",
    "head_branch": "feature/improvedargs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e942d9087c4d6d37a63c",
    "number": 783,
    "body": "Simply allows for the ability to subtract from a Location because it was requested\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e943d9087c4d6d37a63d",
    "number": 782,
    "body": "This event exists to fill the feature-set of Bukkit's CommandPreProcessEvent and subsequent events. The word Receive has been used instead of PreProcess, because I personally don't like words that would generally be hyphenated to be inside a class name.\n\nThe reasoning for including such an event is not, 'because bukkit did it', but instead to allow plugins such as CraftBook with the variables feature, to replace variables in the command with the values. I had many discussions with Bukkit staff back in the day about making this event 'generic' to all CommandSources, but they declined on the as they did not want to keep the event at all.\n\nI propose that with Sponge, we include this event and allow it to filter any commands from any CommandSources.\n",
    "head_branch": "feature/commandpreprocess",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e944d9087c4d6d37a63e",
    "number": 780,
    "body": "As it stands currently, Sponge commands using `GenericArguments` cannot use selectors without going out of their way. This pull request adds the ability to use selectors in `GenericArguments.player()`. It also adds `GenericArguments.entity()` and `GenericArguments.entityOrSource()`, which are made much easier due to selectors.\n\nRequires SpongePowered/SpongeCommon#110.\n",
    "head_branch": "feature/selectors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e945d9087c4d6d37a63f",
    "number": 779,
    "body": "Adds https://github.com/SpongePowered/SpongeAPI/issues/639\nImplemented in https://github.com/SpongePowered/SpongeCommon/pull/108\n\nCurrently it is quite hard to use message bundles and insert formated `Text`s in there.\nThis PR solves this by adding the following features\n- `Text.Placeholder`\n  - A placeholder with a key, that can be replaced with any other Object wrapped in a `Text`. If it is not replaced it will display a default message.\n- `TextRepresentable`\n  - An interface for all those objects that have a `Text` representation (Ex: `ItemStack`s)\n- `ItemStack` is `Translatable`\n- `Texts.format(Text, Map<String,?>)`\n  - Creates a new `Text` with all possible `Placeholder`s replaced. Uses Strings `player`.\n- `Texts.format(Text, Object...)`\n  - Creates a new `Text` with all possible `Placeholder`s replaced. Uses indexes `0`.\n\n**Tasks**\n- [x] Create Placeholder\n- [x] Implement `Texts.format(...)`\n- [x] Optimize `Texts.of(Object...)`\n  - `TextRepresentable` (`ItemStack`s + `Achievement`s + custom)\n  - Made `TextColor.NONE.toString()` and `TextStyle.NONE.toString()` more readable\n- [x] Create Test-Plugin\n\n**Usage: Create Template**\n\n``` java\n// \"&4Player {killer} have killed {killed} with {weapon=with his bare hands}\"\nTextBuilder builder = Texts.builder();\nbuilder.color(TextColors.DARK_AQUA);\nbuilder.append(Text.of(\"Player \"));\nbuilder.append(Text.placeholderOf(\"killer\"));\nbuilder.append(Text.of(\" have killed \"));\nbuilder.append(Text.placeholderOf(\"killed\"));\nbuilder.append(Text.of(\" with \"));\nbuilder.append(Text.placeholderOf(\"weapon\", \"with his bare hands\")); // with fallback\nText text = builder.build();\n```\n\nThe created `Text` instance is reusable.\n\n**Usage: Key-Value**\n\n``` java\nText someTemplateText = ...;\nplayer.sendMessage(someTemplateText);\n// Displays :\"&4Player {killer} have killed {killed} with his bare hands\"\nMap<String,Object> replacements = Maps.new();\nreplacements.put(\"killer\", killer.getName());\nreplacements.put(\"killed\", Texts.of(TextColors.GRAY, killed));\nItemStack weapon = killer.getItemInHand();\nreplacements.put(\"weapon\", weapon);\nplayer.sendMessage(Texts.format(someTemplateText, replacements)); \n// Displays: \"&4Player PvPMonster have killed &7Innocent&4 with Stick of Doom\"\n```\n\n**Usage: Index**\n\n``` java\nText someTemplateText = ...; // With {0} as placeholder\nplayer.sendMessage(someTemplateText);\n// Displays :\"&4Player {0} have killed {1} with his bare hands\"\nplayer.sendMessage(Texts.format(someTemplateText, killer.getName(), Texts.of(TextColors.GRAY, killed), killer.getItemInHand())); \n// Displays: \"&4Player PvPMonster have killed &7Innocent&4 with Stick of Doom\"\n```\n\n**Test Plugin**\n[TextFormat.jar](https://dl.dropboxusercontent.com/u/16999313/Sponge/TextFormat.jar) (Plugin)\n[TextFormat.zip](https://dl.dropboxusercontent.com/u/16999313/Sponge/TextFormat.zip) (Source)\n(works already)\nTry the following commands to see the resutls:\n- `/textformat`\n- `/textformat PvPMonster`\n- `/textformat PvPMonster Innocent`\n- `/textformat PvPMonster Innocent &6Stick of Doom`\n- `/textformat <YourUsername> Innocent` // Uses the item in hand\n- `/textjson` - Proves the json (de-)serialization works\n- `/textxml` - Proves the xml(de-)serialization works\n\n**Things not part of this PR**\n- `Text#replace(String, Text)`\n  - There are too few possibilities where this method can be effectively be used.\n  - There are too much variants of this method that would be needed\n    - replaceFirst- only the first one\n    - replaceAll - every one\n    - replaceEagerFirst - only the first one although it might be splitted into multiple `Text`s (children)\n    - replaceEagerAll - every one including this which might be splitted into multiple `Text`s (children)\n  - Easy to implement yourself with optimisations based on your needs otherwise it might be slow\n    - Example: Replaces all words in a `Text` with `warp actions` if such a warp exists\n      - API-Provided: O(warps \\* text-instances \\* text-length) - for warp replace all warpname with warp action\n      - Custom impl: O(text-instances \\* text-length) - for each word in the text search for a warp in a map\n- A new enhenced plain-text `TextRepresentation` as suggested by @gratimax in this [comment](https://github.com/SpongePowered/SpongeAPI/issues/639#issuecomment-109789419)\n  - This feature can be implemented nevertheless it just does not fit in the topic of this PR\n",
    "head_branch": "TextFormat",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e946d9087c4d6d37a640",
    "number": 776,
    "body": "Exactly what it says on the tin, not sure what I can add. For those who are not aware of regional difficulty, here is the [minecraftwiki article](http://minecraft.gamepedia.com/Difficulty#Regional_difficulty).\n",
    "head_branch": "feature/regionaldifficulty",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e947d9087c4d6d37a641",
    "number": 775,
    "body": "Solves https://github.com/SpongePowered/SpongeAPI/issues/710\n\nCurrently there is only a very unspecific definition what an `CatalogType` is.\nThis PR try to solves that by adding a very precise definition on what it is and what is connected to that.\n\n**`CatalogType`**\n\n> Represents a type of a catalog that can be used to identify types without using an Enum. \n> \n> Implementing classes must meet the following requirements for all its members including those which are not listed in the classes listed in the `CatalogedBy` annotation: \n> - Every pair (a, b) that matches ... \n>   - `a.equals(b)` must also match `a == b`\n>   - `a.getId().equalsIgnoreCase(b.getId())` must also match `a == b`\n\n**`CatalogedBy`**\n\n> Represents a class that is intended to represent a type of enum, without using Enum. The class marked as CatalogedBy must have a registrar class that can be queried for all types and subtypes of the catalog. \n> \n> All Classes mentioned in the CatalogedBy annotation must meet the following requirements:\n> - The values referenced by catalog classes must remain the same and valid at all times.\n> - The variables in catalog classes may link to null if the given value is no longer valid and no appropriate alternative can be found. If no alternative could be found and if there probably won't be a new one in the future then the field should be marked as deprecated and should be removed after a grace period or with the next big release of minecraft, SpongeAPI or the containing artifact.\n> - It is possible for two or more different variables to link to the same value. This includes both simple \"well known\" aliases and features that been merged together or that were originally very similar and one being removed. \n> - It is also possible that one or more values are not (yet) listed in the catalog classes (Especially plugin provided ones).\n\nThis is a very formal definition so if anybody like to reword/rephrase anything feel free to comment.\nI tried to cover all cases that needed to be covered and have been discussed in #710, but we may have missed something.\n\nThe new definition walks along with the issue exposed in https://github.com/SpongePowered/SpongeAPI/issues/768: \n- `TextColor` shouldn't be a `CatalogType` only `TextColor.Base` should.\n\nIt also seems worth discussing the definition of `GameRegistry.getType(Class, String)` in regards to plugin/mod provided type instances and type classes.\n- IMO plugin/mod provided instances and type classes should be listed/returned there as well. Due to the impact this might have I haven't added this here yet.\n  - `<T extends CatalogType> GameRegistry.registerType(Class<T>, T... type) : void` - \n    Which would be sealed after server startup/init phase\n",
    "head_branch": "CatalogTypeSpecification",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e948d9087c4d6d37a642",
    "number": 772,
    "body": "This PR:\n- ~~Adds `PlayerResourcePackStatusEvent` to the event factory.~~ This was taken care of with the events refactor.\n- Replaces `URL` with `URI`. This allows Minecraft's `level://` resource packs (used for `resources.zip` insode a world) to be represented using Sponge (as `java.net.URL` does not support unknown protocols, e.g. `level://`).\n- Renames `ResourcePackStatus.PACK_FILE_FORMAT_NOT_RECOGNIZED` to `FAILED`.\n- Adds `Server.getDefaultResourcePack()`.\n\nImplemented by SpongePowered/SpongeCommon#100.\n",
    "head_branch": "feature/resourcepacks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e949d9087c4d6d37a643",
    "number": 771,
    "body": "Sneaking! Yay!\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e94ad9087c4d6d37a644",
    "number": 770,
    "body": "I don't think there should be access to the `SchedulerService` directly through `Game`. As it is a service, it should be accessible through the `ServiceManager`, and it only bloats `Game` by making it accessible from there.\n\nSee SpongePowered/SpongeCommon#97 for the implementation update\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e94bd9087c4d6d37a645",
    "number": 766,
    "body": "_enhancement, low priority_\n\nPreviously, when registering an interaction event one must always consider the item in hand, as well as the block the player is targetting. In order for normal gameplay to not be interrupted, a blacklist of objects must be checked to make sure the player isn't intending to do something other than the plugin's function. This usually includes blocks like doors or chests, which do things within the world when you right-click them.\n\nThese two methods will eliminate having to have a blacklist of blocks and items to check with, and replace the former with a simple call checking whether or not the item/block has a reaction to being right-clicked.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e94cd9087c4d6d37a646",
    "number": 762,
    "body": "This adds methods for manipulating BiomeAreas and BlockVolume, as well as Extents. This include changing bounds, transforming views and copying data. More features will be added later (in future PRs) for iteration and filling (with support for multithreaded operations).\n\nImplementation: https://github.com/SpongePowered/SpongeCommon/pull/102\n",
    "head_branch": "feature/views",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e94dd9087c4d6d37a647",
    "number": 761,
    "body": "This should be considered a work in progress.\n\nCreated a Teammate interface that extends identifiable.\n\nAnything identifiable can be added to a scoreboard whether it makes sense or not, entities, entitieLiving, creatures, enemies etc.\n\nI've pointed this out to multiple people in the past, and it resulted in any Text being allowed to be a Score entry, however teams were still restricted to Users only.\n\nThe reasoning was that most of the options that apply to teams are currently ignored by entities, but with the announcement that entities being on a team may influence their targeting at Minecon (Shulkers to be precise) confirming that it wasn't an accident on Mojangs behalf that entities could be on teams.\n\nIt may now be worthwhile allowing plugins to set entities to teams in order to change their targeting behaviour themselves. \n\nShould all entities implement Teammate? Living entities? Arrows?\n",
    "head_branch": "Teammates2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e94ed9087c4d6d37a648",
    "number": 759,
    "body": "I realise this is a short PR, but I am adding a way to get the ChunkManager as currently there is no other way.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e94fd9087c4d6d37a649",
    "number": 757,
    "body": "Adds https://github.com/SpongePowered/SpongeAPI/issues/520\nBukkit had a nice overview with a one sentence description of each package.\n\nIMO this is quite useful for a more general overview.\n\nOverview:\n\n| Package | Description |\n| --- | --- |\n| [...api](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/package-info.java) | Core classes in the API with general purpose. |\n| [...api.attribute](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/attribute/package-info.java) | Classes to manipulate Attributes such as MAX_HEALTH and MOVEMENT_SPEED. |\n| [...api.block](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/block/package-info.java) | Classes used to manipulate block states of block volumes such as worlds. |\n| [...api.block.tileentity](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/block/tileentity/package-info.java) | Classes that represents special data holder blocks. |\n| [...api.block.tileentity.carrier](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/block/tileentity/carrier/package-info.java) | Classes that represents special data holder blocks with inventories. |\n| [...api.data](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/data/package-info.java) | Classes used to store and manipulate data on a wide variety of data holders, replaces the insecure NBT access. |\n| [...api.data.manipulator](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/data/manipulator/package-info.java) | Data classes that can be used to add, alter, copy and delete data from DataHolders. |\n| [...api.data.manipulator.block](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/data/manipulator/block/package-info.java) | Data classes that can be used to add, alter, copy and delete data from blocks. |\n| [...api.data.manipulator.catalog](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/data/manipulator/catalog/package-info.java) | Utility classes listing all data classes applicable to a specific part of the API. |\n| [...api.data.manipulator.entity](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/data/manipulator/entity/package-info.java) | Data classes that can be used to add, alter, copy and delete data from entities. |\n| [...api.data.manipulator.item](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/data/manipulator/item/package-info.java) | Data classes that can be used to add, alter, copy and delete data from item stacks. |\n| [...api.data.manipulator.tileentity](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/data/manipulator/tileentity/package-info.java) | Data classes that can be used to add, alter, copy and delete data from tile entities. |\n| [...api.data.property](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/data/property/package-info.java) | Classes that represent immutable data properties. |\n| [...api.data.type](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/data/type/package-info.java) | Enum like classes used in DataManipulators. |\n| [...api.effect](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/effect/package-info.java) | Classes representing visual or audible effects for viewers. |\n| [...api.effect.particle](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/effect/particle/package-info.java) | Classes representing visual particle effects for viewers. |\n| [...api.effect.sound](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/effect/sound/package-info.java) | Classes representing sound effects for viewers. |\n| [...api.entity](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/entity/package-info.java) | Classes for non-voxel objects that can exist in a world, including all players, monsters, projectiles, etc. |\n| [...api.entity.explosive](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/entity/explosive/package-info.java) | Classes for entities that can explode such as TNT. |\n| [...api.entity.hanging](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/entity/hanging/package-info.java) | Classes for hanging entities such as decorative item frames. |\n| [...api.entity.living](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/entity/living/package-info.java) | Classes for living entities such as players and monsters. |\n| [...api.entity.living.animal](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/entity/living/animal/package-info.java) | Classes for living Animals such as cows and sheeps. |\n| [...api.entity.living.complex](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/entity/living/complex/package-info.java) | Classes for complex entities such as the ender dragon. |\n| [...api.entity.living.golem](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/entity/living/golem/package-info.java) | Classes for golems. |\n| [...api.entity.living.monster](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/entity/living/monster/package-info.java) | Classes for Monsters such as creepers and skeletons. |\n| [...api.entity.player](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/entity/player/package-info.java) | Classes for players. |\n| [...api.entity.player.gamemode](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/entity/player/gamemode/package-info.java) | **Should be moved** |\n| [...api.entity.player.tab](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/entity/player/tab/package-info.java) | Classes for player's tab lists. |\n| [...api.entity.projectile](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/entity/projectile/package-info.java) | Classes for projectiles. |\n| [...api.entity.projectile.explosive](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/entity/projectile/explosive/package-info.java) | Classes for explosive projectiles. |\n| [...api.entity.projectile.explosive.fireball](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/entity/projectile/explosive/fireball/package-info.java) | Classes for fireball projectiles. |\n| [...api.entity.projectile.source](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/entity/projectile/source/package-info.java) | Classes for projectile sources. |\n| [...api.entity.vehicle](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/entity/vehicle/package-info.java) | Classes for vehicles such as boats and Minecarts. |\n| [...api.entity.vehicle.minecart](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/entity/vehicle/minecart/package-info.java) | Classes for minecart. |\n| [...api.entity.weather](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/entity/weather/package-info.java) | Classes for weather related entities. |\n| [...api.event](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/event/package-info.java) | Classes dedicated to handling triggered code executions. |\n| [...api.event.attribute](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/event/attribute/package-info.java) | Events related to attributes. |\n| [...api.event.ban](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/event/ban/package-info.java) | Events related to bans. |\n| [...api.event.block](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/event/block/package-info.java) | Events related to blocks. |\n| [...api.event.block.tileentity](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/event/block/tileentity/package-info.java) | Events related to tile entities. |\n| [...api.event.cause](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/event/cause/package-info.java) | Classes for event causes and reasoning. |\n| [...api.event.cause.reason](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/event/cause/reason/package-info.java) | Classes for event reasoning. |\n| [...api.event.entity](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/event/entity/package-info.java) | Events related to entities. |\n| [...api.event.entity.living](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/event/entity/living/package-info.java) | Events related to living entities. |\n| [...api.event.entity.living.human](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/event/entity/living/human/package-info.java) | Events related to humans including NPCs and players. |\n| [...api.event.entity.living.human.fishing](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/event/entity/living/human/fishing/package-info.java) | Events related to fishing humans. |\n| [...api.event.entity.living.player](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/event/entity/living/player/package-info.java) | **Should be moved** |\n| [...api.event.entity.minecart](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/event/entity/minecart/package-info.java) | Events related to minecarts. |\n| [...api.event.entity.player](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/event/entity/player/package-info.java) | Events related to Players excluding NPCs. |\n| [...api.event.entity.player.fishing](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/event/entity/player/fishing/package-info.java) | Events related to fishing players. |\n| [...api.event.inventory](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/event/inventory/package-info.java) | Events related to inventories. |\n| [...api.event.message](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/event/message/package-info.java) | Events related to messages such as commands and chat. |\n| [...api.event.network](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/event/network/package-info.java) | Events related to network communication. |\n| [...api.event.rcon](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/event/rcon/package-info.java) | Events related to the remote console access. |\n| [...api.event.server](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/event/server/package-info.java) | Events related to the Server. |\n| [...api.event.server.query](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/event/server/query/package-info.java) | Events related to the Server queries. |\n| [...api.event.state](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/event/state/package-info.java) | Events related to the state of the game. |\n| [...api.event.statistic](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/event/statistic/package-info.java) | Events related to in game Statistics. |\n| [...api.event.weather](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/event/weather/package-info.java) | Events related to weather effects. |\n| [...api.event.world](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/event/world/package-info.java) | Events related to the world. |\n| [...api.extra.skylands](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/extra/skylands/package-info.java) | Classes related to the skyland world generation. |\n| [...api.item](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/item/package-info.java) | Classes related to item stacks and inventories. |\n| [...api.item.inventory](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/item/inventory/package-info.java) | Classes related to inventories. |\n| [...api.item.inventory.crafting](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/item/inventory/crafting/package-info.java) | Classes related to crafting inventories. |\n| [...api.item.inventory.custom](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/item/inventory/custom/package-info.java) | Classes related to custom inventories. |\n| [...api.item.inventory.entity](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/item/inventory/entity/package-info.java) | Classes related to inventories for entities. |\n| [...api.item.inventory.equipment](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/item/inventory/equipment/package-info.java) | Classes related to equipment inventories. |\n| [...api.item.inventory.property](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/item/inventory/property/package-info.java) | Property classes related to inventories. |\n| [...api.item.inventory.slot](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/item/inventory/slot/package-info.java) | Classes for different inventory slot types. |\n| [...api.item.inventory.transaction](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/item/inventory/transaction/package-info.java) | Transaction classes related to inventories. |\n| [...api.item.inventory.type](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/item/inventory/type/package-info.java) | Classes for different inventory layouts. |\n| [...api.item.merchant](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/item/merchant/package-info.java) | Classes related to merchants and item trading. |\n| [...api.item.recipe](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/item/recipe/package-info.java) | Classes related to (crafting) recipes. |\n| [...api.network](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/network/package-info.java) | Classes related to network communication. |\n| [...api.plugin](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/plugin/package-info.java) | Classes related to plugins and plugin management. |\n| [...api.potion](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/potion/package-info.java) | Classes related to potion effects. |\n| [...api.resourcepack](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/resourcepack/package-info.java) | Classes related to resource packs. |\n| [...api.scoreboard](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/scoreboard/package-info.java) | Classes related to scorebards. |\n| [...api.scoreboard.critieria](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/scoreboard/critieria/package-info.java) | Classes related to scoreboards defining the update behavior. |\n| [...api.scoreboard.displayslot](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/scoreboard/displayslot/package-info.java) | Classes related to positioning scoreboards. |\n| [...api.scoreboard.objective](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/scoreboard/objective/package-info.java) | Classes related to tracking the actual score value for the entiries in scoreboards. |\n| [...api.scoreboard.objective.displaymode](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/scoreboard/objective/displaymode/package-info.java) | Classes defining the look of the values displayed by scoreboards. |\n| [...api.service](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/service/package-info.java) | Classes related to service management as well as service definitions. |\n| [...api.service.ban](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/service/ban/package-info.java) | Service classes related to ban management. |\n| [...api.service.command](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/service/command/package-info.java) | Service classes related to command management. |\n| [...api.service.config](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/service/config/package-info.java) | Service classes related to config management. |\n| [...api.service.event](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/service/event/package-info.java) | Service classes related to event management. |\n| [...api.service.pagination](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/service/pagination/package-info.java) | Service classes related to pagination handling. |\n| [...api.service.permission](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/service/permission/package-info.java) | Service classes related to permission management. |\n| [...api.service.permission.context](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/service/permission/context/package-info.java) | Classes used to separate different permission contexts. |\n| [...api.service.permission.option](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/service/permission/option/package-info.java) | Permission holder classes more data than just permissions. |\n| [...api.service.persistence](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/service/persistence/package-info.java) | Classes related to managing and persisting data objects. |\n| [...api.service.profile](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/service/profile/package-info.java) | Classes related to fetching game profiles. |\n| [...api.service.rcon](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/service/rcon/package-info.java) | Service classes used to obtain details about the remote console. |\n| [...api.service.scheduler](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/service/scheduler/package-info.java) | Service classes related to timed code executions. |\n| [...api.service.sql](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/service/sql/package-info.java) | Service classes related to sql connection management. |\n| [...api.service.user](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/service/user/package-info.java) | Classes related to fetching user profiles. |\n| [...api.statistic](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/statistic/package-info.java) | Classes related to ingame statistics. |\n| [...api.statistic.achievement](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/statistic/achievement/package-info.java) | Classes related to achievements. |\n| [...api.status](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/status/package-info.java) | Classes related to server status publishing. |\n| [...api.text](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/text/package-info.java) | Classes related to messaging and text displaying and formating. |\n| [...api.text.action](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/text/action/package-info.java) | Classes related to actions bound to text parts. |\n| [...api.text.chat](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/text/chat/package-info.java) | Classes for controlling the type of text being send. |\n| [...api.text.format](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/text/format/package-info.java) | Classes related to Text formating such as colors and style. |\n| [...api.text.selector](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/text/selector/package-info.java) | Classes related to selectors. |\n| [...api.text.sink](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/text/sink/package-info.java) | Classes related to message sinks (message target bundles). |\n| [...api.text.title](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/text/title/package-info.java) | Classes related to title screens. |\n| [...api.text.translation](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/text/translation/package-info.java) | Text classes related to multi language support. |\n| [...api.util](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/util/package-info.java) | Multi and single purpose classes to facilitate various programmatic concepts. |\n| [...api.util.annotation](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/util/annotation/package-info.java) | Utility annotation classes. |\n| [...api.util.ban](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/util/ban/package-info.java) | Utility classes related to player and user bans. |\n| [...api.util.blockray](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/util/blockray/package-info.java) | Block ray tracing utility classes. |\n| [...api.util.command](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/util/command/package-info.java) | Utility classes related to commands. |\n| [...api.util.command.args](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/util/command/args/package-info.java) | Utility classes related to command arguments. |\n| [...api.util.command.args.parsing](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/util/command/args/parsing/package-info.java) | Utility classes related to command argument parsing. |\n| [...api.util.command.dispatcher](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/util/command/dispatcher/package-info.java) | Utility classes related to command dispatching. |\n| [...api.util.command.source](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/util/command/source/package-info.java) | Utility classes related to command sources. |\n| [...api.util.command.spec](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/util/command/spec/package-info.java) | Utility classes related to command specifications. |\n| [...api.util.event.callback](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/util/event/callback/package-info.java) | Utility classes related to event callbacks. |\n| [...api.util.event.factory](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/util/event/factory/package-info.java) | Utility classes related to event instance/class generation. |\n| [...api.util.event.factory.plugin](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/util/event/factory/plugin/package-info.java) | Utility classes related to event instance/class generation extensions. |\n| [...api.util.event.superclasses](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/util/event/superclasses/package-info.java) | Utility class for generated event classes. |\n| [...api.util.reflect](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/util/reflect/package-info.java) | Classes related to java reflections. |\n| [...api.util.rotation](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/util/rotation/package-info.java) | Utility classes related to rotations. |\n| [...api.util.weighted](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/util/weighted/package-info.java) | Classes related to weighted randomization. |\n| [...api.world](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/world/package-info.java) | Classes related to the world and its properties. |\n| [...api.world.biome](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/world/biome/package-info.java) | Classes related to the world's biomes. |\n| [...api.world.difficulty](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/world/difficulty/package-info.java) | Classes related to the worlds difficulty. |\n| [...api.world.extent](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/world/extent/package-info.java) | Classes related to virtually separating worlds into smaller pieces and working with them. |\n| [...api.world.gamerule](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/world/gamerule/package-info.java) | Classes related to the world's game rules. |\n| [...api.world.gen](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/world/gen/package-info.java) | Classes related to world generation. |\n| [...api.world.gen.populator](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/world/gen/populator/package-info.java) | Classes related to the world population (blocks only). |\n| [...api.world.gen.type](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/world/gen/type/package-info.java) | Classes related to type definitions for the world generator. |\n| [...api.world.storage](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/world/storage/package-info.java) | Classes related to world storage access. |\n| [...api.world.weather](https://github.com/ST-DDT/SpongeAPI/blob/JavaDoc/src/main/java/org/spongepowered/api/world/weather/package-info.java) | Classes related to the weather in a world. |\n\nPlease note, that this summary does not contain any links to referenced classes, although the real overview would have them.\n\nIf you have any wishes or suggestions please tell me so i can add them here.\n",
    "head_branch": "JavaDoc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e950d9087c4d6d37a64a",
    "number": 756,
    "body": "(also remove unused java.io,File import)\n",
    "head_branch": "feature/copy",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e951d9087c4d6d37a64b",
    "number": 755,
    "body": "Add methods to delete an unloaded World, as well as a method to retrieve the folder for a World.\n",
    "head_branch": "feature/copy",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e952d9087c4d6d37a64c",
    "number": 751,
    "body": "This pull request introduces an API where worlds that exist can be copied and loaded as a new world with a different name. \n\nThis pretty much needs an API because of the uuid added for Sponge's worlds. Fixing this would require plugins to copy the world, then load up the NBT and change the name, dimension id and UUID in the file manually, which is prone to breaking and also likely impossible, because plugins shouldn't have access to a way to get the next open dimension ID.\n\nSolves https://github.com/SpongePowered/SpongeAPI/issues/750\n\nFeature list:\n- [X] Support the ability to copy an existing world and load it as a duplicate with the same name.\n- [X] ~~Support the ability to get the world directory from the API to allow plugins to store data with the worlds.~~\n- [X]  Add ability to delete existing worlds from the disk (after being unloaded first)\n- [ ] Add the ability to fully rename an existing world, including folder or other stored name.\n\nTodo:\n- [X] Determine if world copying should only be allowed after unloading a world **(It should)**\n",
    "head_branch": "feature/copy",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e953d9087c4d6d37a64d",
    "number": 747,
    "body": "Adds https://github.com/SpongePowered/SpongeAPI/issues/601 (low priority)\nImplemented in https://github.com/SpongePowered/SpongeCommon/pull/84\n\nThis adds `PermissionDescription` to the `PermissionService`.\n\n`PermissionDescription`s should help server owners manage the registered permissions more easyly.\n\nSome facts about `PermissionDescription`s:\n- Registration is optional\n- Registration may not be supported by all impls\n- Registration has **NO** impact on the default value in general\n  - Permission Plugins may offer util commands/options to import the defaults (per plugin)\n  - The `role-templates` can be assigned to groups (manually) to allow changing the defaults\n- Contains of\n  - Owning plugin\n  - PermissionId (`String`)\n    - May include placeholders `myPlugin.command.give.<ItemType>`\n  - Description `Text`\n    - May include a link to a more detailed description page\n  - `Role-emplate` assignment\n    - `User`, `Staff`, `Admin`, custom values\n    - This can be used to group permissions and allow server admins to add them to groups more easily.\n\nThe discussion and a short explanation why i have chosen this properties can be found [here](https://github.com/SpongePowered/SpongeAPI/issues/601#issuecomment-116326563)\n\n**This PR does NOT contain**\n- Annotations to automatically create and register permissions\n  - Just too messy if it should contain useful info/descriptions\n- File specifications for permission data files\n  - I thought about that, but i think this should be done in a more general way.\n    - This should be done similar to json/config->object parsing, which maps to the keys to method names. If you like this i can write some example code. (NOT part of this PR)\n- Commands to get the registered descriptions\n  - This is up to the permission plugins, since the storing of the descriptions has great influence on the possibilities, however a basic (`/sponge` sub-) command could be added nevertheless.\n\n**TBD**\n- Explicit `PermissionReference`s (maybe as `String`)\n  - `CHILD`/ `PARENT` - Basic inheritance\n  - `REFERENCE` - \"See also\"\n  - `BASE`/`SPECIFICATION` - Base permission `myPlugin.command.give.<ItemType>` of `myPlugin.command.give.DIRT` or `myPlugin.command.give.*`\n  - `EXAMPLE` - Opposite of `BASE`/`SPECIFICATION`\n\nAnything i missed?\n",
    "head_branch": "PermissionDescription",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e954d9087c4d6d37a64e",
    "number": 746,
    "body": null,
    "head_branch": "Hotea",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e955d9087c4d6d37a64f",
    "number": 744,
    "body": "This PR adds three new `CommandSource` interfaces:\n- `EntitySource`, for `CommandSource`s bound to an entity\n- `ProxySource`, for /execute\n- `SignSource`, for commands run via a sign\n\nIt also makes a backwards-incompatible change - making `CommandCallable` return `CommandResult` instead of `Optional<CommandResult>`. Returning `Optional.absent()` is replaced by throwing a `CommandNotFoundException`.\n\nFinally, it adds `PaginationBuilder.page(int)`, which is used by my SpongeCommon PR: SpongePowered/SpongeCommon#80.\n",
    "head_branch": "feature/commands",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e956d9087c4d6d37a650",
    "number": 741,
    "body": "A UUID is naturally the preferred value for future retrieval. I'll leave the decision as to whether to the world name needs to remain here to others.\n",
    "head_branch": "fix/loc-container-uuid",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e957d9087c4d6d37a651",
    "number": 740,
    "body": "Currently, the method returns Ban.User rather than User, making the method fairly useless. This corrects the issue, returning the correct User type.\n",
    "head_branch": "ban-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e958d9087c4d6d37a652",
    "number": 739,
    "body": "This adds `Text` methods to `Team` for adding \"fake players\" to a scoreboard team. This is helpful when [using `Text` scores](https://github.com/SpongePowered/SpongeAPI/blob/master/src/main/java/org/spongepowered/api/scoreboard/Scoreboard.java#L109-L124).\n\nSee https://github.com/SpongePowered/SpongeAPI/pull/739#issuecomment-116238966 for a more detailed explanation.\n\n_(...and the worst PR description award goes to...)_\n",
    "head_branch": "feature/scoreboard/team-text",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e959d9087c4d6d37a653",
    "number": 737,
    "body": "Generics strike again.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e95ad9087c4d6d37a654",
    "number": 735,
    "body": "This PR adds the API methods `isSleepingIgnored()Z` and `setSleepingIgnored(Z)V` to the `Player` interface. When this toggle is set, the `Player` will not be considered when determining whether the night should be skipped due to all players being asleep.\n\nThese methods are implemented by [SpongeCommon #74](https://github.com/SpongePowered/SpongeCommon/pull/74).\n",
    "head_branch": "feature/ignore-sleeping",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e95bd9087c4d6d37a655",
    "number": 734,
    "body": "SpongeAPI | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/253) | [SpongeForge](https://github.com/SpongePowered/SpongeForge/pull/405)\nThis contains API changes for the first phase of populators.\n\nCloses #582, #573\n\nChanges:\n- Separation of biome generation parameters out of `BiomeType` and into `BiomeGenerationSettings`\n- Move `BiomeGenerationSettings` to per-generator basis, getting the settings from a generator that does not have then specifically set will construct a set of settings from the defaults\n- Modified populators to make use of new `VariableAmount`, `SeededValue`, and `WeightedTable` utilities to allow greater flexibility\n- Removed JungleBush populator and added it as a tree type\n- Combined RandomFire and RandomLiquids populators into a more generic RandomBlock poppulator\n- Removed the PopulatorObjects utility and re-added it as a RandomObject populator\n- Added `SeededVariableAmount` to allow specifing amounts that vary depending on some seed input (this is used by the GroundCoverLayers to seed the layer depth from the stone noise generators)\n- Added MushroomType to represent the two large mushroom types\n- Added getters to BiomeTreeType and MushroomType to get the PopulatorObject which represents them (this can also be used by plugins to easily place these objects where ever they want)\n- Minor fixes to VariableAmount\n- Expansion of the `WeightedCollection` into the more expansive LootTable/WeightedTable/ChanceTable for use in a variety of APIs including the upcoming loot tables in 1.9\n- Minor changes and usability fixes to most populators\n\nKnown Issues / TODO:\n- [x] Weighted package need hashCode / equals / toString\n- [x] Weighted package need more usability methods\n- [x] Weighted package needs docs\n- [x] Need to examine where more populator objects can be leveraged\n- [x] remove temporary downgrade of configurate (fix for eclipse)\n- [x] ~~Update skylands for generator changes (especially ground cover layers and variable amounts)~~\n",
    "head_branch": "feature/populators-phase1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge c8d638ee28ec79ae1c76bd93832e3ba1d464e3a4 into 2fffccd6404409bafca7d905ac4d01a7bbec70bf"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e95cd9087c4d6d37a656",
    "number": 729,
    "body": "There were a lot of various OCD fixes to make the API build entirely clean again.\n",
    "head_branch": "fix/ocd-fixes",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 5c7d6c38a39d29b8c35f577ee2382c2d2c878f0b into c6f53d71de0cead59af98df5928d9528c4f12fb5"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e95dd9087c4d6d37a657",
    "number": 727,
    "body": "- Change `transform` --> `transformMessage`\n- Change occasional `sink` (array) --> `sinks`\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e95ed9087c4d6d37a658",
    "number": 725,
    "body": "This PR creates a catalogue system for all blockstates in Minecraft.\n",
    "head_branch": "feature/blockstatecatalogue",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e960d9087c4d6d37a659",
    "number": 724,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e961d9087c4d6d37a65a",
    "number": 723,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e962d9087c4d6d37a65b",
    "number": 717,
    "body": "Currently the `GameRegistry` class is a monster, especially implementation wise. All of the different builder instances, factories and despite the class's name, only a few registries are all combined into a massive single class. \n\nThis pull request aims to change that massively convoluted system with a series of modules, called `Provider`s that provide (hence the name) a subset of what `GameRegistry` did. The system isn't meant to be used by plugins, so all Providers are expected to be available upon request.\n\nI've implemented the changes in a branch of SpongeCommon and was able to successfully start up a server after making numerous changes to replace hard-coded registry calls.\n\nI know this is a drastic change, in some ways more drastic than the Data API simply because of what it encompasses, but it's needed to prevent future cruft from the over packed class.\n",
    "head_branch": "feature/providers",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e963d9087c4d6d37a65c",
    "number": 712,
    "body": "So far, [`Cause`](https://github.com/SpongePowered/SpongeAPI/blob/master/src/main/java/org/spongepowered/api/event/cause/Cause.java) as it stands is somewhat confusing with the inclusion of [`Reason`](https://github.com/SpongePowered/SpongeAPI/blob/master/src/main/java/org/spongepowered/api/event/cause/reason/Reason.java) such that it isn't clear as to what should be considered a `Cause` and what should be considered a `Reason`.\n\nThis PR aims to achieve the following:\n- `Cause` becomes a container object of all related objects associated with the cause for a `CauseTracked` event\n- \"Reasons\" or additional causes aiding the direct cause for an event are included in `Cause`, the closer the association to the direct cause, the lower the index that object will be\n- Include `EntityDamageEvent` and `DamageSource`s while keeping in line with the primary `Cause` goal. Any additional associated objects aiding the direct `DamageSource` are included in the `Cause` associated with the `EntityDamageEvent`\n- Introduce `EntityPreDamageEvent` where the damage calculations for modifying the raw damage are included, this is primarily used for modifying the outgoing damage BEFORE the `EntityDamageEvent` is fired, this is equivalent to having an event to modify the damage a `Player` will output when using an `ItemStack` of `ItemTypes.DIAMOND_SWORD` such that all modifiers are included (such as the enchantments on the sword, the potion effects, and any other `AttributeModifier`s or alternative `DamageModifier`s relating to the final raw damage output from the `Player`\n- For many `CauseTrack`ed events, the `Cause` now is always available, but a `Cause.empty()` may be included\n#### So what does this really mean for `CauseTracked` events?\n\nWhat this means is that a vanilla interaction throwing a `CauseTracked` event will have as much information as possible within the `Cause`. With the following addition to `Cause`:\n\n``` java\n<T> Optional<T> getFirst(Class<T>);\n\n<T> Optional<T> getLast(Class<T>);\n```\n\na plugin is easily able to determine whether a `BlockState` was the cause for an event, a `Player`, or if a `TileEntity` was part of the mix. \n\nThe one issue with `Cause` previously was that it was always optional. Passing in a null to the [`SpongeEventFactory`](https://github.com/SpongePowered/SpongeAPI/blob/master/src/main/java/org/spongepowered/api/event/SpongeEventFactory.java#L341) is that the `Cause` is always optional, even when it should not be.  In the PR, I change this to where `Cause` can be \"empty\". Some might think: _Wait! Isn't that making `Cause` just become a similar object to `Optional`?_ To which the answer is yes. The one issue with `Optional` however is that  `Optional` can only hold a single value. There is no way to hold multiple values, except if the `Optional` is declared like so: `Optional<Object[]>`, which eliminates any utility methods provided by `getFirst(Class<T>)` and `getAllOf(Class<T>)` from `Cause`.\n#### Ok, so where does this come into play with actual events? I want to know the cause for a `BlockChangeEvent`!\n\nWell, see, this is where the uniqueness comes into play. Since we always have a `Cause`, we can always call `getFirst(Player.class)` which will return a present `Player` if and only if a `Player` was involved in the `BlockChangeEvent`. How the objects are ordered in the `Cause` is simple: The direct cause of the event comes first, any additional \"helpers\" that aid the _root cause_ are indexed afterwards.\n\nI'll give an example here of how a `BlockChangeEvent` could have the order of objects in the cause, for the case of a `Player` placing a `ItemTypes.SAPPLING`.\n\nFirst, the `Player` is the root cause, because the player is right clicking with the `ItemStack`.\nSecond, the `ItemStack` follows because the `ItemStack` is a part of the \"reason\" why the `BlockChangeEvent` is being called.\n#### Now, what I haven't seen is how this affects something like `EntityDamageEvent`, care to elaborate?\n\nOf course! With an `EntityDamageEvent`, I'll have to pull the same description from #707 \n\n> Skeleton shoots bow launching an arrow hitting a Player.\n> \n> This is pretty plain and simple to understand what happens, but we need to look at it much deeper to fully understand what the final damage comes out to:\n> \n> I'll give an order of how the damage is calculated:\n> 1) Skeleton is shooting the arrow, by default it will apply say 3 damage to the Arrow\n> 2) The bow, if enchanted applies a bonus amount of damage to the arrow, say 1.5 additional damage\n> The final raw damage of the arrow is now 4.5.\n> \n> Now here comes the fun part:\n> The Player is hit with the arrow\n> 1) The damage is modified based on the game difficulty, in this case, it's on `HARD` difficulty, so the damage is multiplied by 1.5 (damage is now 6.75)\n> 2) Armor calculations are factored in, Say that the player has full iron armor, and the iron armor reduces the damage by 2 (damage is now at 4.75)\n> 3) Potion effects add to resistances, so damage is reduced by multiplying damage by 20 and dividing by 25 (damage is now at 3.8)\n> 4) Armor Enchantments reduce the damage by 20% for example (the damage is now at 3.04)\n> 5) The Absorption potion effect is now factored in to find out how much actual health is removed from the entity, say we have an additional 2 health from absorption, (damage is now at 1.04)\n> \n> The end result is a damage value of 1.04 damage dealt directly to the entity, where 4.5 damage originated.\n> \n> The reason why I walked you through all of this is the following: I've been contemplating that we should have a LivingPreAttackEntityEvent of which we can trace the modifiers for the damage being dealt to the entity (in the case of the skeleton shooting, there's the modifier of the bow and the modifier base damage of the skeleton). After that event, we'd need a proper `WeightedCollection` to store the `DamageModifier`s and their `Function`s being applied to the incoming damage for an `EntityDamageEvent`. Considering the limitless possibilities of being able to identify the `DamageModifier`s and the `Cause` for each modifier, I do believe this would make an excellent change with Causes PR in the near future.\n\nWhat HAS been achieved however, is slightly different. Instead of just including the associated `Entity` as a _root_ to the `Cause`, a `DamageSource` is now the _root_ cause. A `DamageSource` is essentially a wrapper around any object with a descriptive `DamageType` with various _attributes_ of the `DamageSource` including whether the damage is _absolute_, _ignores armor_, _magical_, _explosive_, or even _scaled with difficulty_. The included `DamageSource`s in this PR facilitate understanding the _type_ of damage being dealt, and the parties involved in the `DamageSource`.\n#### I'm a little confused about `DamageSource`, can you give me an example?\n\nOf course! Say you have an `EntityPreDamageEvent`:\n\nThe `DamageSource` in this case is actually a `ProjectileDamageSource`, where the `Projectile` is an `Arrow`, and the `ProjectileSource` is a `Skeleton`. Given that the `ProjectileDamageSource` is the _root_ cause to the `EntityPreDamageEvent`, we can then use this information to know that the `Cause` should have a related `ItemStack` used as a _bow_ to shoot the _Arrow_. With the _bow_, we know that it can have no `Enchantment`s or it can have some `Enchantment`s. Of course, with these objects in the `Cause`, it makes it plain and clear to use them:\n\n``` java\n@Subscribe\npublic void cancelAnvils(EntityPreDamageEvent event) {\n    if (event.getCause().isEmpty()) {\n        return;\n    }\n    final Cause cause = event.getCause();\n    final Optional<BlockDamageSource> damageSource = cause.getFirst(BlockDamageSource.class);\n    if (damageSource.isPresent()) {\n        if (damageSource.get().getBlockState().getType() == BlockTypes.ANVIL) {\n            event.setCancelled(true);\n        }\n    }\n}\n\n@Subscribe\npublic void skeletonArrows(EntityPreDamageEvent event) {\n    if (event.getCause().isEmpty()) {\n        return;\n    }\n    final Cause cause = event.getCause();\n    final Optional<ProjectileDamageSource> projectileDamageSource = cause.getFirst(ProjectileDamageSource.class);\n    if (projectileDamageSource.isPresent()) {\n        final ProjectileSource source = projectileDamageSource.get().getShooter();\n        if (source instanceof Skeleton) {\n            final SkeletonType skeletonType = ((Skeleton) source).getData(SkeletonData.class).get().getValue();\n            if (skeletonType == SkeletonTypes.WITHER) {\n                event.setDamageFunction(new MyDamageModifier(Cause.of(source, this)), new Function<Double, Double>() {\n                    @Nullable\n                    @Override\n                    public Double apply(Double input) {\n                        return input * 3 / 2;\n                    }\n                });\n            } else if (skeletonType == SkeletonTypes.NORMAL) {\n                event.setDamageFunction(new MyDamageModifier(Cause.of(source, this)), new Function<Double, Double>() {\n                    @Nullable\n                    @Override\n                    public Double apply(Double input) {\n                        return input * 3 / 4;\n                    }\n                });\n            }\n        }\n    }\n    for (final Tuple<DamageModifier, Function<? super Double, Double>> damageModifier : event.getModifiers()) {\n        if (damageModifier.getFirst().getCause().getFirst(ItemStack.class).isPresent()) {\n            // We know that we have an ItemStack that was used in the DamageModifier cause, we can suspect that\n            // the ItemStack has some sort of enchantments, or not\n            final ItemStack itemStack = damageModifier.getFirst().getCause().getFirst(ItemStack.class).get();\n            final Optional<EnchantmentData> dataOptional = itemStack.getData(EnchantmentData.class);\n            if (dataOptional.isPresent() && dataOptional.get().get(Enchantments.POWER).isPresent()) {\n                event.setDamageFunction(damageModifier.getFirst(), new Function<Double, Double>() {\n                    @Nullable\n                    @Override\n                    public Double apply(@Nullable Double input) {\n                        return input * 1.25 * dataOptional.get().get(Enchantments.POWER).get().doubleValue();\n                    }\n                });\n            }\n        }\n    }\n}\n\npublic final class MyDamageModifier implements DamageModifier {\n    private Cause cause;\n\n    public MyDamageModifier(Cause cause) {\n        this.cause = checkNotNull(cause);\n    }\n\n    @Override\n    public Cause getCause() {\n        return this.cause;\n    }\n\n    @Override\n    public String getId() {\n        return \"com.gabizou.MyDamageModifier\";\n    }\n\n    @Override\n    public String getName() {\n        return \"MyDamageModifier\";\n    }\n}\n```\n#### Holy cow batman! Why so complicated?!\n\nUnfortunately, there is A LOT that goes into an `EntityDamageEvent`, even more so if you want to be able to manipulate the damage _coming in_, essentially the `EntityPreDamageEvent`. To fully unlock the power available with this, the possibilities to associate new `DamageModifier`s with a damage event are nigh limitless. Since we can expose the underlying functions, as they placed in order from vanilla mechanics, we can successfully interpret that an `EntityPreDamageEvent` is augmented not only by the `Skeleton`, but also that the `ItemStack` used by the `Skeleton` affects the total damage applied onto the `Arrow`. With that in mind, we can also assume that we can interpret the following `EntityDamageEvent` with similar processing for `DamageModifier`s when an `Entity` is being _damaged_, dictating the _final_ damage actually being _applied_ to the `Entity`, and not just interpret the _raw_ incoming damage.\n\nOf course, there are so many factors that can go into the `EntityDamageEvent` that I can't possibly explain it all in a simple code snippet, but I can explain in layman terms here.\n\nWith the `EntityDamageEvent` being fired only while the `Entity` is being damaged, we can gather all `DamageModifier`s that would further process the raw incoming damage, such as `ItemStack`s that are considered to be _armor_, `PotionEffect`s that are absorbing damage, heck, we can even apply our own custom `DamageModifier`s if we had a party plugin that had a \"reducing damage\" effect based on the number of players joined in the party! All of this is as extensible as possible.\n#### Ok... well, it's clear that you've given a lot of thought about `EntityDamageEvent`, but what about other `CauseTracked` events?\n\nSimilar to the `EntityDamageEvent` and `EntityPreDamageEvent`, we can safely say that most `CauseTracked` events are going to receive similar treatment with regards to adding additional _sources_/_causes_/_reasons_ whatever you want to call them. So far, I've only been able to seriously work on the damage events, however, my thought process is that with `EntitySpawnEvent`, it is very easy to apply the same idea of having the following:\n\n`EntitySpawnEvent`:\n- `SpawnCause` : An abstract _root cause_ that aids in helping further understand the `Cause` for why an `Entity` is being spawned\n- `SpawnType` : Another `CatalogType` that aims to further simplify the _type_ of `SpawnCause`, more specifically, when an `Entity` is spawned by a `MobSpawner`, the `SpawnCause` would be an instance of a `MobSpawnerSpawnCause` with the associated `MobSpawnerData` that defined the `Entity` to be spawned\n\n`EntityTeleportEvent`:\n- `TeleportType` : Yet again, a helper `CatalogType` that aims to make it understandable why an `Entity` is being teleported\n- `TeleportCause` : Another _root cause_ for the `Entity` to be teleporting, can range from `EntityTeleportCause` (an `Enderman` teleporting due to rain), `TeleporterTeleportCause` (a portal performing the teleport as per vanilla mechanics)\n\nThe list will grow as the PR is worked on and time goes on.\n#### So, will this make it easy for me to know if a `BlockChangeEvent` was caused by a `Player` using some bonemeal on a sapling?\n\nIn a short answer: yes. \nThe long answer: The `Cause` would indeed have a `Player` object, and the secondary `cause` would be the `ItemStack` that \"aided\" in the cause for the `BlockChangeEvent` to take place. What is better is that with the knowledge of the `Player`, the `ItemStack`, and any other objects placed into the `Cause`, it becomes very simple for you to decide on changing the `BlockChangeEvent` for whatever purpose.\n#### How about throwing custom events? I don't really understand what I'm supposed to do here if I want to allow plugins to hook into my custom `EntityTeleportEvent`.\n\nTo be honest, that is why I simplified `Cause` to replicate `Optional`. When you are wanting to teleport an `Entity` with a `Cause`, you can include the _root_ cause, say the `Entity` called a `Command`, and the `Command` was entered through a `Sign`, you now have _two_ objects to include in your `Cause`. However, let's say you wanted to expand and provide some custom `TeleportCause`s, you could extend `TeleportCause` and provide the extended `Cause` to be the `Sign`, and likewise you could include your own custom marker object so that in the event you have a listener for `EntityTeleportEvent`, you can safely ignore the event if your custom marker object is included.\n#### How about X event?\n\nWell, as I said before, the PR is still a work in progress, so I haven't finished designing the `Cause` for every `CauseTracked` event.\n",
    "head_branch": "feature/cause",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e964d9087c4d6d37a65d",
    "number": 708,
    "body": "This PR proposes the integration of @TomyLobo's XML format for chat styling into the Text API through the addition of new methods in Texts to go to and from XML.\n\nThe XML format vastly improves usability of plugins wishing to have user-configurable formatted text by providing a less verbose method for specifying formatting, with similarities to HTML. The tags handled are as follows:\n### HTML-compatible\n- `b`: bold text\n- `i`: italic text\n- `u`: underlined text\n- `<a href=\"url\">`: create a link\n- `<span>`: Does nothing to the text inside, useful to apply text actions though\n### Custom\n- `<o>` or `<obfuscated>`: obfuscated text\n- `<color n=\"red\">` or `<c n=\"red\">` or `<color name=\"red\">`: specify the color of text\n- `<s>` or `<strikethrough>`: Strikethrough\n- `<tr key=\"mc-key\">`: Translation key. Each child element is an argument\n### Text Actions\n\nAny tag can take one of the attributes onClick, onHover, or onShiftClick. Each attribute has a value of the form type('value'), for example `<span onClick=\"run_command('/say hi')\">Greet the server!</span>`\n",
    "head_branch": "feature/xmltext",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e965d9087c4d6d37a65e",
    "number": 705,
    "body": "# Tokens API Proposal\n\nSpongeAPI | [SpongeCommon](https://github.com/SpongePowered/SpongeCommon/pull/54)\n\nOver a month ago, _Data API_ was introduced to SpongeAPI. Initially, people didn't quite understand all of the reasoning behind it, however, now, \npeople are beginning to use it! This is a good thing! Fortunately, the API solved the issue of relying on interface hierarchy to retrieve various \nbits of information with the following example:\n###### Getting health from an entity (previously)\n\n``` java\nif (entity instanceof Living) {\n    final double health = ((Living) entity).getHealth();\n    final double maxHealth = ((Living) entity).getMaxHealth();\n    ((Living) entity).setHealth(maxHealth);\n}\n```\n###### Getting health with Data API (current)\n\n``` java\n\nfinal Optional<HealthData> healthOptional = entity.getData(HealthData.class);\nif (healthOptional.isPresent()) {\n    entity.offer(healthOptional.get().setValue(healthOptional.get().getMaxHealth());\n}\n\n```\n\nWhat we've gained from _Data API_ is the following:\n- `Entity`, `ItemStack`, `Location`, and `TileEntity` all are oblivious as to what possible _data_ they have, all they know is that internally, \n  they store some various `DataManipulator`s, much like an _EntityComponentSystem_ setup would have.\n- We no longer focus on what _interface_ an `Entity` is, we have a simple way of retrieving a _DataManipulator_ which focuses on containing the \n  various values we care about\n- Serializing and deserializing these `DataHolder`s becomes easy since we now have a way to get a `DataContainer` from these `DataHolder`s\n\nOn the other hand, what we've lost is the ability to write the following:\n\n``` java\n\nentity.setHealth(entity.getMaxHealth());\n\n```\n\nWhat if however, we had a way to identify the values we want to set, without worrying whether the `DataHolder` actually contains the \n`DataManipulator` and just blindly set a value without a care in the world?\n\nThat's part of what I'm presenting today: `Token API`\n##### What is _Token API_?\n\nIt's a simple representation of a piece of data that a `DataHolder` may contain, that can be retrieved and replaced with a new value. The `Token` \nis simply a \"key\" of sorts to an underlying \"value\". To put it simply, all `DataHolder`s are realistically \n[`Tuples`](http://docs.oracle.com/javaee/6/api/javax/persistence/Tuple.html), even when the `value` is far more complex, such as `MobSpawnerData`.\n\nThe full changelog of this PR is:\n- **Rename `DataManipulator` to `Component`** : Let's be honest here, `DataManipulator`s were really just `Component`s the entire time, just not \n  called that way to avoid scrutiny.\n- All `Component`s with values have a `Token` to retrieve that particular value from a `DataHolder`\n- `Token`s provide their `DataQuery` of which they will be placed within a `DataContainer` when `Component#toContainer()` is used\n- Simpler methods to manipulate specific values on `DataHolder`s with a `Token`\n- _Marker_ `Component`s that previously would only exist if a \"state\" was true, it was functionally difficult to understand whether that marker \n  `component` was compatible or just not available for the `DataHolder`. These marker `Component`s are now `BooleanComponent`s such that if the \n  boolean value can be set to `true` or `false`, they will always exist if the `DataHolder` supports it\n- `Token`s have a link to their parent `Component` class\n- `DataHolder` has gained a few data manipulation methods using `Token`s:\n  - `DataHolder#get(GetterToken<T>)::Optional<T>` : Retrieves the value if available\n  - `DataHolder#getOrDefault(GetterToken<V>,V)::V` : Retrieves the value, or returns default if not available\n  - `DataHolder#getOrNull(GetterToken<V>)::V` : Retrieves the value, or null if not available\n  - `DataHolder#set(SetterToken<V>,V)::DataHolder` : Sets the given value onto the DataHolder, returns the DataHolder\n  - `DataHolder#transform(Token<V>,Function<V, V>)::DataHolder` : Applies the transformation function on the given value and sets it, returns the\n    DataHolder\n  - `DataHolder#predicateFor(Token<V>)::Optional<Predicate<V>>` : Retrieves the [`Predicate`](http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/Predicate.html)\n    for the given `Token`\n##### So... what's the point?\n\nWell, fortunately, `Token` will simplify performing simple operations that wish to edit and transform a specific value belonging to a `DataHolder` \nwithout meddling with the `Component` that otherwise contains that specific value.\n##### Wait, but isn't this allowing multiple ways to get the same data?\n\nYes and no. When you use a `Token` from a `DataHolder`, you're getting the specific value, nothing more, nothing less. You're not able to apply \nmultiple `Token`s to multiple `DataHolder`s without knowing the type of the `Token`, that functionality resides in the `Component` aspect of the API.\n##### How does the first example look now with _TokenAPI_?\n\nI'm glad you asked, it will now look like this:\n\n``` java\n\nif (entity.supports(Tokens.HEALTH)) {\n    entity.set(Tokens.HEALTH, entity.get(Tokens.MAX_HEALTH).get());\n}\n\n```\n\nTo be honest, that seems about as simple as the normal interface would have us use to perform the same operation. Without the use of the \n`Component`, we simply are not worrying about retrieving the `HealthData` beforehand, we're merely applying a new value directly.\n##### What else does this _TokenAPI_ allow?\n\nInterestingly, when you decouple the notion of a value being manipulated outside of a `Component`, you're able to perform interesting operations, \nsuch as the following:\n\n``` java\n\nentity.transform(Tokens.HEALTH, new Function<Double, Double>() {\n\n    @Override\n    Double apply(Double input) {\n        return entity.get(Tokens.MAX_HEALTH).get() * 0.9;\n    }\n});\n\n```\n##### How does this look like for a plugin?\n\nReally simple!\n\n``` java\n\nimport org.spongepowered.api.data.DataContainer;\nimport org.spongepowered.api.data.component.entity.HealthComponent;\nimport org.spongepowered.api.data.token.TokenFunctions;\nimport org.spongepowered.api.data.token.Tokens;\nimport org.spongepowered.api.entity.player.Player;\nimport org.spongepowered.api.event.Subscribe;\nimport org.spongepowered.api.event.entity.player.PlayerJoinEvent;\nimport org.spongepowered.api.plugin.Plugin;\n\n@Plugin(id = \"tokensTest\", name = \"TokensTest\", version = \"0.1\")\npublic class TokensTest {\n\n    @Subscribe\n    public void onPlayerJoin(PlayerJoinEvent event) {\n        event.getEntity().transform(Tokens.HEALTH, TokenFunctions.add(5D));\n    }\n\n    // This is if you were to want to manipulate or retrieve data from a DataContainer\n    // with some DataQueries from Tokens.\n    public void setHealthOnContainer(Player player) {\n        final DataContainer container = player.toContainer();\n        final double maxHealth = container.getDouble(Tokens.MAX_HEALTH.getQuery()).get();\n        container.set(Tokens.HEALTH.getQuery(), maxHealth);\n    }\n}\n```\n#### But wait, isn't this the same as [Values PR](https://github.com/SpongePowered/SpongeAPI/pull/685)?\n\nShort answer, yes.\nLong answer: The way I see this is as a step towards _Value API_, setting the _Data API_ in a readier state to evolve into _Value API_. While _Data API_ and _Token API_ strive to achieve a lot of functionality, there are some limitations with regards to how they interact with the game, and _Value API_ aims to fully re-engineer _Data API_ into something much more powerful, however, due to time constraints, I've presented _Token API_ as a compromise for the duration that _Value API_ remains in development.\n",
    "head_branch": "feature/token",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e966d9087c4d6d37a65f",
    "number": 697,
    "body": "~~As put by gratimax\n\"rewrote some javadocs to make them less implementation-specific, changed a few types from `Collection<Item>` to `Set<Item>`, and unwrapped a few `Optional` types within `Task`.\"~~\n\nThis does more than cleaning up the scheduler now.\n- Reduce duplication and the amount of text in the javadocs. Some details were implementation specific which is not be mentioned.\n- Change `Collection<Task>` to `Set<Task>` as there should be no duplicate tasks.\n- Removed `Optional`s within `Task`\n- Removes separation of sync and async schedulers. There is now a single scheduler for all tasks\n- Tasks are created using a `TaskBuilder` which follows the builder pattern except you 'submit' the task at the end rather than build. This submits the task to the scheduler to then run according to it's parameters.\n- Ability to schedule synchronous tasks in wall clock time parameters, as well as ticks\n",
    "head_branch": "scheduler-cleanup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e967d9087c4d6d37a660",
    "number": 694,
    "body": "The goal of this PR is to provide a proposal for a system that targets and formats messages sent to the game. This will provide chat channel functionality as well -- plugins will be able to provide custom sink implementations.\n\nThis is an initial sketch of the API. I hope to have richer API for combining message sinks and am considering making MessageSink an abstract class to make it more useful on its own (an actual send() method comes to mind here).\n\nImplementation is upcoming.\n",
    "head_branch": "feature/sinks",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e968d9087c4d6d37a661",
    "number": 692,
    "body": "Adds a `SingleValueData` called `SkinData` that stores the UUID of a human's skin\n",
    "head_branch": "human-skin-data",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e969d9087c4d6d37a662",
    "number": 691,
    "body": "Many event interfaces in the API provide getters which are overridden in subinterfaces, using covariant types. An example of this is `TileEntityChangeEvent`, which has a method `getNewData`, returning a `DataManiuplator`. In `SignChangeEvent`, this is overridden to return `SignData`.\n\nIf corresponding setters are provided in both interfaces, then there's currently no mechanism to verify that a setter is being called with the most specific type. For example:\n\nAgain, look at `TileEntityChangeEvent`, which, in addition to the methods mentioned above, has a `setNewData` method, which takes a `DataManipulator` as a parameter. Should a plugin call this method with some generic `DataManipulator`, it may turn out that the parameter type used is incompatible with the overriden getter method, should the event turn out to be an instance of the subinterface.\n\nIn the above example, if a plugin were to call `setNewData(DataManipulator manipulator)` on an event which is actually a `SignChangeEvent`, no exception would be thrown. However, the next time the overriden getter - `getNewData` in `SignChangeEvent` - was called, a cast exception would be thrown, due to the set `DataManipulator` not being a `SignData`.\n\nThis PR ensures that the generated setter methods check the type of the passed in parameter, and determine whether it's compatible with the actual instance of the event.\n",
    "head_branch": "feature/even-more-event-stuff",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e96ad9087c4d6d37a663",
    "number": 688,
    "body": "Signed-off-by: Steven Downer grinch@outlook.com\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e96bd9087c4d6d37a664",
    "number": 687,
    "body": "This is intended as an alternative to #683.\n\nI thought that while #683 was a good start to a ray tracing utility, I wanted to try to keep as much functionality yet keeping the added surface area as simple as possible.\n\nThis PR adds two new classes:\n- BlockRay, which will eventually contain the ray tracing algorithm\n- BlockRayFilter, which is essentially a predicate that takes a Vector3d, but takes doubles in order to prevent object churn\n\nHere's some example usage:\n\n``` java\nPlayer myPlayer;\n\nBlockRayFilter max30 = BlockRayFilter.ONLY_AIR.and(BlockRayFilter.maxDistance(30));\n\nOptional<Location> end = BlockRay.fromEntityRotation(myPlayer, max30).getEndingLocation();\n```\n\nHere's a visual for showing the difference between intersecting locations and the discretization of a ray.\n\nI've plotted the function `f(t) = <t, 2t, t>`. Here are the intersection locations of this function. This is basically just every block that this function passes through.\n\n![intersection location](http://i.imgur.com/fGuHU37.png)\n\nAnd here is the discretization of this path. One can view this as the lowest y-value for each column the function passes through.\n\n![discretization](http://i.imgur.com/u5tSqS8.png)\n",
    "head_branch": "feature/block-ray",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e96cd9087c4d6d37a665",
    "number": 686,
    "body": "Intended as a fix for #644.\n\nThis PR abstracts away implementation and platform-specific information about the game into a Platform class. It also moves the current Platform enum to Platform.Side. \n\nI know @Minecrell had some additional ideas for keys.\n",
    "head_branch": "feature/platform-info",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 42a5d59a60f61ee0d5707a7832142b3a80c537cb into 235593850e4ad90b53bfe5ce14be10245ecdea92"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e96dd9087c4d6d37a666",
    "number": 685,
    "body": "Values API PR | [Data 2.0 Implementation PR](https://github.com/SpongePowered/SpongeCommon/pull/94)\r\n\r\nHaving heard complaints and grievances over the usage of the original Data API, many changes were made, but for the sake of discussion, here\r\nare a few of the complaints:\r\n- What used to be a single setter method for something so simple is now overly complex with retrieving `DataManipulator`s and offering them back\r\n- Unless I look at implementation, I can't find out what `DataQuery` I need to use to get the _author_ from a `DataContainer` of a serialized `AuthorData`\r\n- I can't simply request a single value from any `DataHolder` without going through the appropriate `DataManipulator`\r\n\r\nAnd these points were all valid, as the first iteration of Data API was simply aimed at migrating everything data access-wise to using `DataManipulator`s and not the previously used hierarchical interfaces declaring specific optional accessor methods.\r\n\r\nSo, without further ado, I present Data API 2.0!\r\n##### What's _new_?\r\n\r\nThe actual **new** things:\r\n- [`BaseValue`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/value/BaseValue.java) object that wraps around an element type, and a [`Key`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/key/Key.java)\r\n- [`Key`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/key/Key.java)s present themselves as identifiable keys to retrieve a particular type of data from any [`ValueContainer`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/value/ValueContainer.java)\r\n- [`ValueContainer`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/value/ValueContainer.java)s are quite literally containers of [`BaseValue`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/value/BaseValue.java)s\r\n- [`CompositeValueStore`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/value/mutable/CompositeValueStore.java#L47) is a mutable version of a [`ValueContainer`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/value/ValueContainer.java) that allows getting and setting [`BaseValue`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/value/BaseValue.java)s while the mutations are all transactional\r\n- [`ImmutableValueStore`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/value/immutable/ImmutableValueStore.java) is an immutable variant of the [`ValueContainer`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/value/ValueContainer.java) \r\n- [`ImmutableDataManipulator`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/manipulator/ImmutableDataManipulator.java) is an immutable variant and self translating of a [`DataManipulator`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/manipulator/DataManipulator.java)\r\n\r\nThe changes:\r\n- [`DataHolder`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/DataHolder.java)s are now extending [`CompositeValueStore`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/value/mutable/CompositeValueStore.java#L47) as they are able to be queried for not only [`DataManipulator`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/manipulator/DataManipulator.java)s but also [`Value`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/value/mutable/Value.java)s\r\n- [`DataManipulator`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/manipulator/DataManipulator.java)s are able to call [`#asImmutable()`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/manipulator/DataManipulator.java#L174) to return an [`ImmutableDataManipulator`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/manipulator/ImmutableDataManipulator.java) variant of itself.\r\n- [`DataManipulator`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/manipulator/DataManipulator.java)s no longer hve accessor methods to the data of which they contain, they have [`Value`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/value/mutable/Value.java) getters and can be mutated with [`#set(Key,Object)`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/manipulator/DataManipulator.java#L117)\r\n- [`Location`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/world/Location.java)s and [`Extent`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/world/extent/Extent.java)s no longer contain property specific accessor methods, delegating to the property system of the Data API\r\n##### Holy smokes batman! That makes no real sense to me as to what ACTUALLY CHANGED!\r\n\r\nWell, you didn't really give me time to explain, but for the sake of discussion, I'll give you an example:\r\n\r\nIn the previous Data API, we would have to do the following to change the health of an entity:\r\n\r\n``` java\r\n\r\nfinal Entity entity;\r\nfinal Optional<HealthData> optional = entity.getData(HealthData.class);\r\nif (optional.isPresent) {\r\n  entity.offer(optional.get().setHealth(10D));\r\n}\r\n// continue doing other things\r\n\r\n\r\n```\r\n\r\nAnd what it looks like you can do now is:\r\n\r\n``` java\r\n\r\nfinal Entity entity;\r\nentity.offer(Keys.HEALTH, 10D);\r\n\r\n\r\n```\r\n\r\nReally simple, right? Right! But what does this actually mean? First, we saw that we have a similar `#offer` method, but what is this `Keys` thing comming from?? Unfortunately, I'm not going to state what `Keys` is before I explain what a [`Key`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/key/Key.java) actually does:\r\n\r\n```\r\nA Key is similiar to a UUID in that it is uniquely identifying a piece of data. The \r\ndifference is that a *key* contains a nice method to retrieve the suggested DataQuery\r\nthat the piece of data should reside when serialized to a DataContainer.\r\n\r\n```\r\n\r\nFrom that description, a [`Key`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/key/Key.java) could have potential for being a `CatalogType`, but we don't want to actually require querying for a `Key` through the `GameRegistry`. Therefor, this is where [`Keys`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/key/Keys.java) comes into play: It is an enumeration of vanilla supported `Key`s that Sponge API knows about!\r\n##### Ok, so what about `Value`?\r\n\r\nOk ok ok... I'm guessing you understood that you could use a `Key` to retrieve a specific value of information, or alternatively set a specific value of information onto a [`DataHolder`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/DataHolder.java). Well, it's nice being able to do that, but what about sharing this information with other people? Say, for an `Event` or simply just a `DataTransactionResult`? This lies in where `Value` really comes from.\r\n\r\nA [`Value`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/value/mutable/Value.java) is a pairing of an actual value of data with a `Key`. Some `Value`s are more complex or require special treatment, such as the [`CollectionValue`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/value/mutable/CollectionValue.java). While it's nice being able to `get` and `set` an entire `Collection`, sometimes it just might be easier to `add` or `remove` from said collection. With this comprisal of simple and complex `Value`s, we can surmise that effectively all information previously handled by `DataManipulator`s can be handled by these [`Value`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/value/mutable/Value.java)s.\r\n##### And what about immutability? I read that somewhere above in the description.\r\n\r\nMan... you really are jumping around, aren't you?\r\n\r\nIn Computer Science, there's a concept of _immutable objects_. To [summarize](https://en.wikipedia.org/wiki/Immutable_object), an immutable object can not be changed/modified after it is created. _Mutable_ objects CAN be modified after they are created. \r\n\r\nIn this PR, we bring the concept of [`ImmutableValue`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/value/immutable/ImmutableValue.java)s and [`ImmutableDataManipulator`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/manipulator/ImmutableDataManipulator.java)s to the API. The point of an `ImmutableValue` is the same as a [`Value`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/value/mutable/Value.java), with the primary exception that an `ImmutableValue` provides no mutators, but rather method calls for retrieving a _new_ `ImmutableValue` with the provided information. The same thing can be said about [`ImmutableDataManipulator`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/manipulator/ImmutableDataManipulator.java)s. However, to improve usability even further, I've added method calls to retrieve an _immutable_ instance from a _mutable_ instance, and vice versa. \r\n\r\nThe difference between retrieving an `ImmutableValue` from a `Value` and retrieving an [`ImmutableDataManipulator`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/manipulator/ImmutableDataManipulator.java) from a [`DataManipulator`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/manipulator/DataManipulator.java) is that the manipulators keep type safety between each other. In other words, they refer to the types of each other.\r\n\r\nThe primary advantage of having the _immutable_ concept is that with `Event`s, it is now possible to simply pass around an `ImmutableDataManipulator` or an `ImmutableValue` without worrying about plugin developers mutating your value/manipulator! \r\nThe other advantage to this is that [`DataTransactionResult`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/DataTransactionResult.java)s now solely work around `ImmutableValue`s. Being able to therefor save, restore, and [undo](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/value/mutable/CompositeValueStore.java#L288) is one of the benefits of the additions through values.\r\n##### Well, what else did you change?\r\n\r\nOverall, I'd have to show you the new methods added to [`CompositeValueStore`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/value/mutable/CompositeValueStore.java#L47) and [`ValueContainer`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/value/ValueContainer.java):\r\n\r\nLet's start with `ValueContainer`\r\n\r\n``` java\r\n\r\npublic interface ValueContainer<C extends ValueContainer<C>> {\r\n\r\n  <E> Optional<E> get(Key<? extends BaseValue<E>> key);\r\n\r\n  <E> E getOrNull(Key<? extends BaseValue<E>> key);\r\n\r\n  <E> E getOrElse(Key<? extends BaseValue<E>> key, E defaultValue);\r\n\r\n  <E, V extends BaseValue<E>> Optional<V> getValue(Key<V> key);\r\n\r\n  boolean supports(Key<?> key);\r\n\r\n  boolean supports(BaseValue<?> baseValue);\r\n\r\n  C copy();\r\n\r\n  ImmutableSet<Key<?>> getKeys();\r\n\r\n  ImmutableSet<ImmutableValue<?>> getValues();\r\n\r\n}\r\n\r\n```\r\n\r\nFor starters, we see the aforementioned `get(Key)` method that allows us to retrieve a familiar [Optional](http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/Optional.html) of the underlying value type based on the `Key`. This is where we can perform\r\n\r\n``` java\r\n\r\nfinal Optional<Double> healthOptional = entity.get(Keys.HEALTH);\r\n```\r\n\r\nAnd we're not only positive about type safety, but we're also positive that if the `Optional#isPresent()` returns `true`, the `Entity` must have _health_!\r\n\r\nBut what about the other two methods? What does `getOrNull(Key)` give us? In short, it allows for a more traditional (read legacy) form of data handling such as the following\r\n\r\n``` java\r\nfinal Text displayName = entity.getOrNull(Keys.DISPLAY_NAME);\r\nif (displayName != null) {\r\n  // do things with display names\r\n}\r\n```\r\n\r\nAnd similarly for `getOrElse(Key)`\r\n\r\n``` java\r\nfinal Text displayName = entity.getOrElse(Keys.DISPLAY_NAME, Texts.of(\"I have no default name!\"));\r\n```\r\n\r\nNow the actually interesting method that _actually_ uses Values is `getValue(Key)`. With `getValue`, we can retrieve the Value prescribed for the `Key`, and not only that, but manipulate the underlying value as needed, without having to ever leave the safety of the `Value` itself. For example:\r\n\r\n``` java\r\nif (entity.supports(Keys.POTION_EFFECTS) {\r\n  final ListValue<PotionEffect> potionValue = entity.getValue(Keys.POTION_EFFECTS).get();\r\n  entity.set(potionValue.removeAll(new Predicate<PotionEffect>() {\r\n    @Override\r\n    public boolean apply(PotionEffect potionEffect) {\r\n      return potionEffect.getType() == PotionEffectTypes.SPEED;\r\n    }\r\n  }).add(myCustomPotionEffect));\r\n}\r\n```\r\n\r\nNote that never once did we have to assign a `List<PotionEffect>` or call any external methods short of those found in [`ListValue`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/value/mutable/ListValue.java), [`CollectionValue`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/value/mutable/CollectionValue.java), and [`Value`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/value/mutable/Value.java). \r\n\r\nNow, let us continue on with [`CompositeValueStore`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/value/mutable/CompositeValueStore.java#L47):\r\n\r\nA `CompositeValueStore` is meant to be a _mutable_ `ValueContainer` with methods declared to modify, add, or replace `Value`s pre-existing on said `CompositeValueStore`. Here, let's take a look at the interafce really quickly:\r\n\r\n``` java\r\npublic interface CompositeValueStore<S extends CompositeValueStore<S, H>, H extends ValueContainer<?>> extends ValueContainer<S> {\r\n  <T extends H> Optional<T> get(Class<T> containerClass);\r\n\r\n  <T extends H> Optional<T> getOrCreate(Class<T> containerClass);\r\n\r\n  boolean supports(Class<? extends H> containerclass);\r\n\r\n  <E> DataTransactionResult transform(Key<? extends BaseValue<E>> key, Function<E, E> transformingFunction);\r\n\r\n  <E> DataTransactionResult offer(Key<? extends BaseValue<E>> key, E value);\r\n\r\n  DataTransactionResult offer(BaseValue<?> value);\r\n\r\n  DataTransactionResult offer(H valueContainer);\r\n\r\n  DataTransactionResult offer(H valueContainer, MergeFunction function);\r\n\r\n  DataTransactionResult offer(Iterable<H> valueContainers);\r\n\r\n  DataTransactionResult offer(Iterable<H> valueContainers, MergeFunction function);\r\n\r\n  DataTransactionResult remove(Class<? extends H> containerclass);\r\n\r\n  DataTransactionResult remove(BaseValue<?> value);\r\n\r\n  DataTransactionResult remove(Key<?> key);\r\n\r\n  DataTransactionResult undo(DataTransactionResult result);\r\n\r\n  DataTransactionResult copyFrom(S that);\r\n\r\n  DataTransactionResult copyFrom(S that, MergeFunction function);\r\n\r\n  Collection<H> getContainers();\r\n```\r\n##### Holy cow! Why so many methods? What is H? Why is CompositeValueStore self referencing?? WHAT IS THIS MAGIC?!\r\n\r\n_Love_...\r\n\r\nNo, seriously though. The methods declared in `CompositeValueStore` are required for achieving full mutability in almost all use cases. The point of the self referencing generic `S extends CompositeValueStore<S>` is so that whatever extends `CompositeValueStore` will return itself when calling [`#copy()`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/value/ValueContainer.java#L126). The second generic, `H extends ValueContainer<?>` is for further defining the _type_ of `ValueContainer` the various getter and setter methods will allow. This is useful for defining [`DataHolder`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/DataHolder.java) to define that it can only accept [`DataManipulator`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/manipulator/DataManipulator.java)s and anything extending it thereof. \r\n\r\nNow, there's something you may have noticed that is new, _there's no more DataPriority_! What replaced it is [`MergeFunction`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/merge/MergeFunction.java).\r\nA `MergeFunction` only handles `ValueContainer`s, and more  specifically, in the case of `offer(Iterable<H>,MergeFunction`, wildcarded `ValueContainer`s. The point of it is that when you have a `DataManipulator` such as `CommandData`, there's **a lot** of data to be replaced, and potentially, data to be merged. The previously mentioned `DataPriority` aimed to simplify merging, but it _over simplified_. What `MergeFunction` aims to do is allow for any, or some specific `DataManipulator`s to be handled in a merge process, such that complex custom merges can take place within the `MergeFunction` itself.\r\n\r\nThe rest of the methods are self explanatory at this point.\r\n##### Ok... so now what? Any more changes?\r\n\r\nMinor changes were made here and there, to summarize them:\r\n- [`LocationCompositeValueStore`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/world/extent/LocationCompositeValueStore.java) is a delegate to all Data API related methods that `Location` proxies back onto\r\n- [`Cycleable`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/util/Cycleable.java) allows for catalogtype cycling of values, so, you can cycle `Direction`s, or `Axis`, etc. This isn't meant for cycling between possible values such as `DyeColor`s\r\n- [`PropertyStore`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/property/PropertyStore.java) is for external retrieval of properties such that they can be dictated by external sources that SpongeAPI implementations do not provide\r\n- And other minor data related changes. \r\n##### Wow... that's some changelog. What precisely do you plan on having in the future for Data API?\r\n\r\nAll I plan on doing with Data API is adding onto the API by introducing new `Key`s, `DataManipulator`s, and a few new `CatalogType`s or so. Until someone finds a problem that can be solved in a much cleaner fashion, I don't predict making any large changes to Data API. \r\n\r\nA final demonstration of a plugin working with the new Data API:\r\n\r\n``` java\r\npackage org.spongepowered.cookbook.plugin;\r\n\r\nimport org.spongepowered.api.data.key.Keys;\r\nimport org.spongepowered.api.data.manipulator.mutable.entity.HealthData;\r\nimport org.spongepowered.api.entity.EntityTypes;\r\nimport org.spongepowered.api.event.Subscribe;\r\nimport org.spongepowered.api.event.entity.EntitySpawnEvent;\r\nimport org.spongepowered.api.event.entity.player.PlayerJoinEvent;\r\nimport org.spongepowered.api.plugin.Plugin;\r\nimport org.spongepowered.api.text.Texts;\r\nimport org.spongepowered.api.text.format.TextColors;\r\n\r\n@Plugin(id = \"DataTest\", name = \"DataTest\", version = \"0.1\")\r\npublic class DataTest {\r\n\r\n    @Subscribe\r\n    public void onJoin(PlayerJoinEvent event) {\r\n        final HealthData healthData = event.getEntity().getHealthData();\r\n        event.getEntity().offer(healthData.set(Keys.MAX_HEALTH, 400D).set(Keys.HEALTH, 300D));\r\n        event.getEntity().sendMessage(event.getEntity().get(Keys.DISPLAY_NAME).get());\r\n    }\r\n\r\n    @Subscribe\r\n    public void onSpawn(EntitySpawnEvent event) {\r\n        if (event.getEntity().getType().equals(EntityTypes.DROPPED_ITEM)) {\r\n            event.getEntity().offer(Keys.DISPLAY_NAME, Texts.of(TextColors.GOLD, \"Sponge\", TextColors.WHITE, \"Powered\"));\r\n            event.getEntity().offer(Keys.SHOWS_DISPLAY_NAME, true);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nAs an added note: If you're STILL wanting to use an NBT API, there are Nbt utilities freely available and you can readily translate them to `DataContainer`s through the provided [`DataTranslator`](https://github.com/SpongePowered/SpongeAPI/blob/feature/value-api/src/main/java/org/spongepowered/api/data/translator/DataTranslator.java) interface (you extend it and implement it however you need to).\r\n",
    "head_branch": "feature/value-api",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e96ed9087c4d6d37a667",
    "number": 683,
    "body": "Some time ago a I read the suggestion of a ray tracing / lineOfSight method for world in this issue: https://github.com/SpongePowered/SpongeAPI/issues/365\n\nThis PR adds very abstract methods to the API, that work almost independently from the rest of the API.\n\nI first tried to implement all 4 methods suggested in that issue, but after a while i dropped that because you can implement all those methods in just a single one using some kind of callback.\n\n**Contents**\n- `RayTracingUtil`\n  - `void trace(Location loc, Vector3d dir, BlockConsumer con)`\n  - `void trace(Extent world, Vector3d loc, Vector3d dir, BlockConsumer con)`\n  - `void trace(Vector3d loc, Vector3d dir, PositionConsumer con)` // Main method\n- `PositionConsumer` (callback)\n  - `boolean apply(double posX, double posY, double posZ, Vector3d rayDirection)` // Stop on false\n- `BlockConsumer` (callback)\n  - `boolean apply(Location location, Direction faceDirection)` // Stop on false\n- `PostionToBlockConsumer`\n  - adapter: `BlockConsumer` -> `PositionConsumer`\n\n**Example**\n\nThe following code shows the first 100 blocks the ray tracing went through\n\n``` java\nRayTracingUtil.trace(randomLocation, randomDirection, new TestPositionConsumer());\n\nclass TestPositionConsumer implements PositionConsumer {\n\n    private static final DecimalFormat df = new DecimalFormat(\"0.000\");\n    private static final int startTtl = 100; \n    // For testing I used startTtl = 1kk with randomized start and direction vectors\n    private int ttl = startTtl;\n\n    @Override\n    public boolean apply(double posX, double posY, double posZ, Vector3d direction) {\n        System.out.println(\"Pos: \" + df.format(posX) + \" , \" + df.format(posY) + \" , \" + df.format(posZ));\n        if (posX % 1 != 0 && posY % 1 != 0 && posZ % 1 != 0 && this.ttl != startTtl) {\n            // Should never happen, no coordinate hits the boundaries of a block\n            throw new IllegalArgumentException(\"Bad Position: \" + df.format(posX) + \" - \" + df.format(posY) + \" - \" + df.format(posZ));\n        }\n        return this.ttl-- > 0; // Abort ray trace if false\n    }\n}\n```\n\nWhich results in\n\n``` text\nPos:  0.214 , -0.359 ,  0.307 // Start location\nPos:  0.000 , -0.041 ,  0.065\nPos: -0.028 ,  0.000 ,  0.033\nPos: -0.057 ,  0.043 ,  0.000\nPos: -0.703 ,  1.000 , -0.731\nPos: -0.941 ,  1.352 , -1.000\nPos: -1.000 ,  1.441 , -1.067\nPos: -1.378 ,  2.000 , -1.495\nPos: -1.824 ,  2.662 , -2.000\nPos: -2.000 ,  2.923 , -2.199\nPos: -2.052 ,  3.000 , -2.258\nPos: -2.708 ,  3.971 , -3.000\n[..]\n```\n\n**TBD**\n\nThere are missing some default abort conditions, I started writing some, but ended up with to much, so i would like to ask which one i should add.\n",
    "head_branch": "rayTrace",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e96fd9087c4d6d37a668",
    "number": 682,
    "body": "This PR adds a method in Player that opens the sign editing dialog on the client. This can be used for simple sign editing plugins (similar to the one for Bukkit), getting input from the client, etc.\n\nI'll implement it in SpongeCommon after this is merged.\n",
    "head_branch": "feature/sign-dialog",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e970d9087c4d6d37a669",
    "number": 681,
    "body": "This PR allows event interfaces to specify that they want the return value of a method transformed (by calling a method on) before it's returned. Both `TileEntityEvent` and `BlockChangeEvent` require this, in order to prevent plugins that modify certain mutable objects (`DataManipulator` and `BlockSnapshot`, respectively) from affecting other plugins.\n\nI'm going to be cleaning this up significantly, as the code is quite messy from the extensive debugging I had to do. However, everything should work, so feel free to test that it works as intended in the meantime.\n\nRegarding the `TransformResult` and `TransformWith` annotations: I'm completely open to suggestions for better names (I chose those mainly because I couldn't think of anything better at the time).\n",
    "head_branch": "feature/new-event",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e971d9087c4d6d37a66a",
    "number": 675,
    "body": "EconomyService work-in-progress posted for public viewing.  This is a work in progress and not necessarily the final API.  Please discuss accordingly.\n\nUnfinished:\nDocumentation\nmin/max account amount checking.\ncleanup\nOther things I probably missed.\n\nBefore this PR is completed all commits will be squashed.\n",
    "head_branch": "feature/econservice",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e972d9087c4d6d37a66b",
    "number": 671,
    "body": "This PR makes a number of (interrelated) improvements to the event generation system:\n- Previously, for methods overridden by other interfaces (think `getEntity`, `getLiving`, `getHuman`, etc), only one accessor and mutator would be generated. Due to the confusing way in which java determines which return type would be used, the method called wouldn't always be implemented. This PR generates accessors and mutators for all overridden methods - using only one field.\n- Instead of having all generated event classes extend from `AbstractEvent`, the base class can be specified using the new `@ImplementedBy` annotation, or the event generator plugin system. This is used to implement methods which don't conform to the accessor/mutator pattern expected by the class generator (`getXXX`, `setXXX`, `isXXX`).\n- The sponge event factory test has been extended to call all of the methods on event class, instead of just generating the classes. This ensures that all events generate as expected.\n\nThe event generator plugin system allows plugins or implementations to customize the resolution of event base classes, through registering an `EventFactoryPlugin`. This allows a different superclass to be chosen on a per-event basis, without introducing the requirement of a bytecode manipulation framework.\n\nSeveral events have had methods modified or annotations added in order to correctly compile into bytecode.\n",
    "head_branch": "feature/event-base-class",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge fd11776c7593f8670e41292d943c53bb796ada50 into 484bf5b55c5505560d94194cfda520906b6a2674"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e973d9087c4d6d37a66c",
    "number": 667,
    "body": "Currently, events which have a method returning `Optional` don't have said method linked to the corresponding mutator.\n\nThis PR ensures that accessors returning Optional are properly linked, and updates the generated setter to call `Optional.fromNullable` before storing the parameter in the generated field.\n",
    "head_branch": "feature/event-optional",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e974d9087c4d6d37a66d",
    "number": 664,
    "body": "Currently, `WeatherChangeEvent` allows setting the duration of the resulting weather, but not getting it. This PR splits the resulting weather duration into a separate getter and setter.\n\nDuration is also required when creating the event through the event factory.\n",
    "head_branch": "feature/weather-duration",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e975d9087c4d6d37a66e",
    "number": 663,
    "body": "Fired before `PlayerJoinEvent`, other players will not know the player attempted to join if the event is cancelled.\n\nNo longer modelling around `FMLNetworkEvent.ServerConnectionFromClientEvent`, `PlayerConnectEvent` will occur before FML initializes it's handshake.\n\nRenamed to `ClientConnectEvent`\n",
    "head_branch": "player-connect-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e976d9087c4d6d37a66f",
    "number": 662,
    "body": "This PR fixes https://github.com/SpongePowered/SpongeAPI/issues/559\nImplemented in: https://github.com/SpongePowered/SpongeCommon/pull/56\n\n**PR Overview**\n- `LivingLevelChangeEvent`\n- `MerchantTradeOfferChangeEvent`\n- `ExperienceLevelData`\n- Modify (default) `TradeOffer` generation for (existing) `Careers`\n\n**Content**\n- `Career` - `TradeOffer` related methods\n- `ExperienceLevelData`\n- `TradeOfferGenerator` (interface)\n  - Simple (in = out)\n  - Random (choose x of y generators on request, optional)\n  - Combine (merges x generators to one on request, optional)\n  - Dynamic (full builder pattern, similar to MC sources, returns single trade offer)\n- `ItemStackGenerator` - Helper class for `DynamicTradeOfferGenerator`\n\n**TestPlugin:**\nModifies the spawn list of `Farmer`s\n[Plugin.jar](https://dl.dropboxusercontent.com/u/16999313/Sponge/TradeOffers.jar)\n[Plugin Sources](https://dl.dropboxusercontent.com/u/16999313/Sponge/TradeOffers.zip)\n\nCommand to spawn farmer:\n`/summon Villager ~ ~ ~ { Profession : 0, Career: 1 }`\n- [x] Verified 2015-08-16 22:20 with https://github.com/SpongePowered/Sponge/commit/e87ff954c8ba1ec54e91b411d04fdc884daeb11a\n\n**Noteworthy**\nA `TradeOfferGenerator` can generate more than one `TradeOffer`, but all default `TradeOfferGenerator`s from vanilla will only return one `TradeOffer`.\n\nOkay, but if it usually returns only one why allow returning multiple at all?\nBecause plugins should be able to generate a merchant with some context without hocking in the upgrade chain manually.\n\nLets start with something simple. We would like to set a trade offer to all villagers of the given career on generation.\n\n``` java\nTradeOffer tradeOffer = tradeOfferBuilder.build();\nTradeOfferGenerator generator = TradeOfferGenerators.wrap(tradeOffer);\ncareer.addTradeOffers(1, generator);\n```\n\nOkay, sure this is quite simple. But usually it is not that simple. Lets try to recreate some minecraft vanilla trade offer.\n\n``` java\nTradeOfferGenerator generator = TradeOfferGenerators.dynamic(registry)\n        .primaryBuyingItem(builder(registry)\n                .add(type(ItemTypes.WHEAT))\n                .add(quantity(randomBetween(18, 22))).build())\n        .sellingItem(singleEmaraldStack)\n        .startUses(5)\n        .maxUses(randomRange(5, 3))\n        .canGrantExperience(true)\n        .build();\ncareer.addTradeOffers(1, generator);\n```\n\nWell this trade offer is for a farmer level 1.  Lets try something that requires high smith skills.\n\n``` java\nTradeOfferGenerator generator = TradeOfferGenerators.dynamic(registry)\n        .primaryBuyingItem(builder(registry)\n                .add(type(ItemTypes.EMERALD))\n                .add(quantity(randomBetween(12, 15)))\n                .build())\n        .sellingItem(builder(registry)\n                .add(type(ItemTypes.DIAMOND_SWORD))\n                .add(quantity(1))\n                .add(enchantments(1, Enchantments.KNOCKBACK)) // one (applicable) enchantment with a random (natural) level\n                // .add(enchantment(Enchantments.KNOCKBACK)) // same as above\n                .add(enchantments(randomRange(0, 3), registry.getAllOf(Enchantment.class)))\n                .build())\n        .startUses(5)\n        .maxUses(randomRange(5, 3))\n        .canGrantExperience(true)\n        .build();\ncareer.addTradeOffers(4, generator);\n```\n\nOkay, thats quite nice, but still very plain.\nLets try something complex.\n\n``` java\nTradeOfferGenerator generator = collector().addAll(\n        collector() // Possibility one\n                .add(dynamic(gameRegistry)\n                        .primaryBuyingItem(builder(gameRegistry)\n                                .baseItem(moneyItemStack) // The base item to simplyfy some things\n                                .add(quantity(randomBetween(8, 15))) // 8 - 15\n                                .build())\n                        .sellingItem(builder(gameRegistry)\n                                .add(types(randomOf(DIAMOND_SWORD, IRON_SWORD)))\n                                .add(quantity(1)) // Exact 1\n                                .add(enchantments(1, enchantments)) // One random applyable enchantment\n                                .add(enchantment(Enchantments.FIRE_ASPECT)) // Fire asprect\n                                .build())\n                        .canGrantExperience(true)\n                        .startUses(1)\n                        .maxUses(5)\n                        .build())\n                .add(dynamic(gameRegistry)\n                        .primaryBuyingItem(builder(gameRegistry)\n                                .baseItem(moneyItemStack)\n                                .add(quantity(randomRange(10, 5))) // 10 - 15\n                                .build())\n                        .sellingItem(builder(gameRegistry)\n                                .baseItem(shield)\n                                .add(enchantment(Enchantments.FIRE_ASPECT))\n                                .add(data(loreData)) // add some fixed data here\n                                .add(data(randomOf(displaynameData1, displaynameData2))) // some possibilities\n                                .build())\n                        .canGrantExperience(true)\n                        .startUses(0)\n                        .maxUses(5)\n                        .build())\n                .combineAll(), // Always generate two trade offers\n        dynamic(gameRegistry) // Possibility two\n                .primaryBuyingItem(builder(gameRegistry)\n                        .add(type(EMERALD))\n                        .add(quantity(randomBetween(8, 12)))\n                        .build())\n                .secondaryBuyingItem(moneyItemStack)\n                .sellingItem(builder(gameRegistry)\n                        .add(types(randomOf(DIAMOND_SHIELD, IRON_SHIELD)))\n                        .add(quantity(1))\n                        .add(enchantments(randomBetween(0, 2), shieldEnchantments)) // up to two random enchantmens (level within allowed bounds)\n                        .add(enchantments(randomBetween(0, 1), Enchantments.BLAST_PROTECTION, Enchantments.THORNS)) // zero or one of both enchantments\n                        .add(enchantment(Enchantments.KNOCKBACK))\n                        .build())\n                .canGrantExperience(true)\n                .startUses(randomBetween(1, 5))\n                .maxUses(randomBetween(3, 7))\n                .build(),\n        collector().addAll( // Possibility three\n                career.getTradeOffers(1))\n                .someOf(2)) // Some (2) troll offers from a level 1 career\n        .oneOf(); // One of the three possibilities\ncareer.addTradeOffers(5, generator);\n```\n\nThis would build a single generator that would return one of the following\n- Fire SWORD and Fire SHIELD\n- Knockback++ SHIELD Trade offers\n- 2 entries of a level 1 career\n",
    "head_branch": "tradeOffers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e977d9087c4d6d37a670",
    "number": 661,
    "body": "This is my first pull request, so I don't have high hopes for this. My would like to propose the addition of extra, but useful methods such as `getRemainingUses()` that would prove useful to coders. I fixed code that was not following the contribution guidelines. \n\nI also worked on categorizing potions into three types, `POSITIVE`, `NEGATIVE`, and `UNUSED`. Lastly, I added UNUSED potions into the list of possible potions. Unused potions (Example: Bland, Gross) were implemented in early beta, and obtainable through commands. \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e978d9087c4d6d37a671",
    "number": 658,
    "body": "The forums have been /flooded/ with so many economy service providers. To allow server owners to use what they choose instead of the one chosen by most developers, an `EconomyService` has been added for plugins to implement. Developers can instead reference to this service to interact with server economy.\n",
    "head_branch": "feature/econservice",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e979d9087c4d6d37a672",
    "number": 650,
    "body": "A lot of the information included in the rcon events is kinda pointless (message id, raw payload), so that was removed.\n\nAlso added a disconnect event so both ends of the lifecycle can be tracked\nAnd special command event has been nixed, because that doesn't fit with the commands system well.\n\nAdditionally, players and rcon senders now both extend RemoteSource, which provides the getConnection() method, since both are sources connecting from a remote host.\n",
    "head_branch": "feature/rcon",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e97ad9087c4d6d37a673",
    "number": 649,
    "body": "This is a proposed fix to #645.\n\nSince `Optional<T>` is invariant (this is Java, after all), we need to specify a wildcard generic type `Optional<? extends T>` for text methods. I don't know of any other solution, but am unsure that this is the only one which is why I am making such a small PR.\n\nThis is probably required for other places, but this is a hotfix for just the scope of the mentioned issue.\n",
    "head_branch": "fix/text-optional-types",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 8cf40d9c571269666e54a0d0e361076c61c746b0 into 70abc721896a2e90d0d535df6b15648854c7537d"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e97bd9087c4d6d37a674",
    "number": 643,
    "body": "Intended as a potential fix for #641. Guaranteed to be breaking but some form of change like this is needed for sanity purposes. Please do give any feedback possible!\n\nA pr has been created to fix the mixins in the current sponge implementation at https://github.com/SpongePowered/Sponge/pull/264\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e97cd9087c4d6d37a675",
    "number": 640,
    "body": "This PR adds a `toString` method to generated event classes.\nThe returned string takes the form of:\n\n`ClassName{field1=value1, field2=value2, ...}`\n",
    "head_branch": "feature/class-tostring",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e97dd9087c4d6d37a676",
    "number": 630,
    "body": "This adds 2 new dependencies to SpongeAPI (primarily for plugin authors to use). The distribution of our both implementations will not be affected by this. Both dependencies are already included in Minecraft so this just exposes them to plugin developers.\n- **GSON:** As a JSON dependency, see #625. While some may prefer another library to work with JSON (e.g. Jackson), GSON is already included in Minecraft and so we don't need to bundle anything additional. Plugin authors can still bundle an alternative library to work with JSON.\n- **commons-lang3:** I'm not completely sure if we should provide this. It contains quite a lot of utilities which make stuff easier to use, and given its size (~600 KB) it would be stupid if plugin developers would need to bundle it (without a dependency in SpongeAPI there is no guarantee it's available in all implementations). It's included in Minecraft already so this would not affect many implementations.\n\nAdditionally updated `slf4j-api` to 1.7.12 and Guice to the 1.4 release. Didn't cause any problems in the implementation.\n",
    "head_branch": "feature/dependencies",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge bd0434ba28c8d24ff4dd31879b95909b6f2d7ccd into 81e6d80a61be3c18f084f48b7740bad35ab27be2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e97ed9087c4d6d37a677",
    "number": 621,
    "body": "Address the issue mentioned in #620.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e97fd9087c4d6d37a678",
    "number": 617,
    "body": "This will make a few changes in the event system to add/fix the following:\n- Allow registering events without annotations (see #615)\n- Fix a few ambiguous Javadocs\n- Add a few minor methods\n",
    "head_branch": "feature/event-system",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e980d9087c4d6d37a679",
    "number": 605,
    "body": "This is a tracker for iterative work done on the data API for the purpose of allowing type-bounded and keyed data manipulation. \n\nI make no guarantees until I deem it \"finished'.\n",
    "head_branch": "feature/bounded-keyed-data",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e981d9087c4d6d37a67a",
    "number": 603,
    "body": "Options are commonly used for things like a user's prefix and suffix, which are attached to a subject but are often useful to have inherited from defined parents.\n\nThese are used as arbitrary metadata for various features, like a prefix, or player-set messages.\n\nOptions are implemented as a subinterface of the existing permissions interfaces. This way, plugins can simply check instance and cast from an existing permissions service provider. However, this means that no plugin can provide only options (imo having two separate inheritance systems available through two services would just be a bad idea & create confusion).\n",
    "head_branch": "feature/options",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e982d9087c4d6d37a67b",
    "number": 602,
    "body": "Will elaborate a better description later.\n\nSimply put, the existing Data API is not the best because it is verbose. I want to decrease verbosity, yet keep type safety.\n\nThis is done with a generic object-property model that mirrors the current entity-component model, except the guarantees are flexible. In the signature of DataObject, the type parameter reflects how restrictive it is, in terms of marker interfaces.\n\nHere's some code from me playing around earlier:\n\n``` java\nBlock myblock;\n\n// Does not compile\nmyblock.set(Props.HEALTH, 5.0);\n\nEntity myentity;\n\nmyentity.get(PositionData.class).set(X_POSITION, 5.0);\n\n// Does not compile\nmyentity.get(PositionData.class).set(HEALTH, 9.0);\n\nmyentity.set(HEALTH, 5.0);\n```\n\nA lot of everything is still stubs. The basic idea is in place, but the values are all missing and I've yet to rework DataManipulators and the like.\n",
    "head_branch": "feature/better-data",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e983d9087c4d6d37a67c",
    "number": 591,
    "body": "Because _some people_ are notoriously lazy. _wink_ _wink_ _nudge_ _nudge_\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e984d9087c4d6d37a67d",
    "number": 590,
    "body": "Anybody think I should use `ircs://` links? My reasoning in not doing so is I know I had to go and download an openssl dll and shove it in some arcane folder to even enable ssl at all in mIRC.\n\nNot sure if anybody cares, or if that has even been patched in some form by now.\n\nFor those saying it's a stupid formatting PR, you're right. Blame @gabizou.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e985d9087c4d6d37a67e",
    "number": 589,
    "body": "This creates the ability to have immutable `DataHolder`s without worrying about leaking mutable data or having to \"defensively clone `DataHolder`s\".\n",
    "head_branch": "feature/immutabledata",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e986d9087c4d6d37a67f",
    "number": 581,
    "body": "Provides information about the chunk coordinate space for better cross-implementation support. The current API assume all implementations use the same chunk layout or leaves it undefined.\n\nSee https://github.com/SpongePowered/Sponge/issues/228\nImplemented in https://github.com/SpongePowered/Sponge/pull/247\n",
    "head_branch": "feature/chunk_layout",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e987d9087c4d6d37a680",
    "number": 580,
    "body": "This PR adds a service interface that can be used to lookup player UUIDs by name and player names by UUIDS. The service contacts the Mojang auth servers if no cached profile was found in the local cache.\nIt also adds a `UserStorage` interface to get, create or delete a `User` object.\n\nThis resolves https://github.com/SpongePowered/SpongeAPI/issues/528\n\nAccess to cached offline user data is important to:\n- complete or validate names of offline players\n- lookup the name of an offline player by an UUID stored by a plugin\n- ban offline players\n\nThings to discuss:\n\n**Access to the [Name Changes API](http://wiki.vg/Mojang_API#UUID_-.3E_Name_history)?** \nMojang provides an API which lists up all names and change dates of a player.\n",
    "head_branch": "feature/usercache",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e988d9087c4d6d37a681",
    "number": 577,
    "body": "Required revamp to make selectors implementable without lots of hacks. Requirement of https://github.com/SpongePowered/SpongeCommon/pull/14.\n#### More details\n\nThere was a problem with having `Vector3` as an `ArgumentType`. Because it was an `ArgumentType`  but it's `x/y/z` parts were also `ArgumentTypes` it was unclear which types would be put into the internal `ArgumentType->Argument` map. This resolves the ambiguity by adding an `ArgumentHolder` interface, which is extended by both `Vector3` and `Limit`. This interface is also extended by `ArgumentType`, as any `ArgumentType` \"holds\" itself. This also allows for `Limit` to have a more strict upper bound on its maximum and minimum to allow a `Limit<Vector3>`.\n\nAdditionally, `ArgumentType` was generic and not a part of the `CatalogType` system. This still holds, so `ArgumentTypes` now allows retrieval of an `ArgumentType` via `valueOf(String)` and the (current) set via `values()`.\n#### Summary\n- `Vector3` and `Limit` are now `ArgumentHolders`\n- `ArgumentType` also is a holder, with itself as the only element.\n- `ArgumentTypes` has `valueOf` and `values`\n- An `ArgumentHolder` can be passed to create a `Set` of arguments (although I think the implementation currently doesn't support using `Limit` as the holder).\n- Scoreboard is in Selectors (closes #516)\n- Probably a few other things\n",
    "head_branch": "feature/better-selectors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e989d9087c4d6d37a682",
    "number": 572,
    "body": "Currently, an `Objective`'s display slot is managed through the `Objective` itself.\n\nSince one objective can be present on multiple scoreboards, display slots should be managed through each `Scoreboard` instance. This allows more fine-grained control over display slots (such as setting the same objective in different display slots on different scoreboards).\n",
    "head_branch": "feature/scoreboard-display-slot",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e98ad9087c4d6d37a683",
    "number": 569,
    "body": "I made some small fixes to the world generator API. See also the implementation [over here](https://github.com/SpongePowered/Sponge/pull/238).\n#### Changes in this PR\n###### GameRegistry changes\n\nNow that the id of a world generator modifiers is supplied by the modifier itself (https://github.com/SpongePowered/SpongeAPI/commit/00bd9cd0ae24a157f73ac7794ee2e5b2961dcb18), the id is no longer needed in the register method.\n\nAlso added some documentation on the requirements to the id returned by WorldGeneratorModifier.\n###### Give world generator modifiers more context\n\nWith the removal of the generator settings from WorldGenerator (this was a last minute change in my last PR), the WorldGeneratorModifier\ninterface was damaged: there was no way to obtain access to the world seed anymore.\n\nThis commit fixes that by replacing the worldname parameter with the newly introduced WorldCreationSettings interface.\n#### Why did we need that modifier system, introduces by your last PR, again? Why not let plugins implement WorldGenerator directly? Why not use an event?\n\nFor readers not familiar with WorldGeneratorModifier: it is just an interface with the method `void modifyWorldGenerator(WorldCreationSettings, DataContainer, WorldGenerator)`. Implementations are expected to make modifications to the WorldGenerator based on the information provided by WorldCreationSettings and the DataContainer. A modifier can make small modifications (add a tree generator) or control every aspect of world generation. A list of modifiers active for a world is stored in the level_sponge.dat.\n\nLet me answer \"why not implement WorldGenerator directly\" first. There are two reasons for this choice:\n- WorldGenerator is a complex interface to implement correctly. You'll need to implement many methods, make sure the lists are mutable, etc. Plugins can easily make an error here. By having the implementation in Sponge, we know for sure that the implementation is consistent.\n- Secondly, you cannot mix two WorldGenerators. However, it's easy to call two WorldGeneratorModifiers after each other. One modifier can add a cave generator, another modifier a tree generator and a third can replace the biome generator.\n\nThen, why I'm not using events? The problem with events is that they are fired for all plugins. By using the modifier system the server admin can select which modifiers are applied to a world (either by a command or by configuration files). The modifier system also allows to get a list of all registered modifiers on the server, so that multiworld plugins can show a nice list of them. In singleplayer, I can imagine the world creation screen having some way to select the modifiers that should be active.\n",
    "head_branch": "feature/custom-world-generators-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e98bd9087c4d6d37a684",
    "number": 565,
    "body": "This PR updates the formatters for eclipse and IntelliJ in order to satisfy the following requirements:\n- Line comments should not be formatted\n- Annotations on fields should be placed on the same line\n- Annotations should not be wrapped\n",
    "head_branch": "fix/formatter",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e98cd9087c4d6d37a685",
    "number": 563,
    "body": "This PR expands the translatable interface to be more friendly to server-side translations. It also lays the groundwork for making every string in SpongeAPI translatable. This API moves the change from untranslated string to translated string from wherever the Text is created to directly before the text is sent to the CommandSource.\n\nMiecraft's resource pack client-side strings are still supported, but not recommended because usage is more complicated.\n",
    "head_branch": "feature/translations",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e98dd9087c4d6d37a686",
    "number": 562,
    "body": "Continuation of #539 for zml's new API. I'll write a description in more detail when it isn't 2 AM...\n",
    "head_branch": "feature/dynamic-commands-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e98ed9087c4d6d37a687",
    "number": 561,
    "body": "This PR pretty much entirely replaces the commands system.\n\nThe new system is a bit more structured -- it contains facilities for argument parsing.\n\nAn example of the version of this system included in PEX is at https://github.com/PEXPlugins/PermissionsEx/blob/master/src/main/java/ninja/leaping/permissionsex/command/ParentCommands.java#L37\n(there are a few differences in this version, mostly relating to how command names are added, the fact that Text is used for stuff rather than PEX's abstracted wrappers, and to add some more flexibility).\n\nI have included #552 on top of my changes since a lot of command argument stuff has changed, to help @boformer in updating their PR.\n## Example usage\n\nThis registers a simple command. It would be put in the plugin's PreInitializationEvent listener.\n\n``` java\n        this.game.getCommandDispatcher().register(this, CommandSpec.builder()\n                .setArguments(seq(string(t(\"item\")), optional(integer(t(\"count\")), 1)))\n                .setExecutor(new CommandExecutor() {\n                    @Override\n                    public CommandResult execute(CommandSource src, CommandContext args) throws CommandException {\n                        final Optional<String> item = args.getOne(\"item\");\n                        final Optional<Integer> count = args.getOne(\"count\");\n                        src.sendMessage(Texts.of(\"You've gotten \", count.get(), \" \", item.get(), count.get() != 1 ? \"s\" : \"\"));\n                        return CommandResult.builder().affectedItems(count.get()).build();\n                    }\n                })\n                .build(), \"testcmd\");\n```\n\nWant to work with all the provided arguments as a list?\n\n``` java\n        this.game.getCommandDispatcher().register(this, CommandSpec.builder()\n                .setArguments(allOf(string(t(\"args\"))))\n                .setExecutor(new CommandExecutor() {\n                    @Override\n                    public CommandResult execute(CommandSource src, CommandContext args) throws CommandException {\n                        final Collection<String> argList = args.getAll(\"args\");\n                        src.sendMessage(Texts.of(\"Arguments provided\", argList.toString()));\n                        return CommandResult.empty();\n                    }\n                }).build(), \"rawargscmd\");\n```\n## Major Components\n\n**CommandSpec:** Immutable object that contains the execution data for the command, including permission, expected arguments, executor, description, and extended description.\n\n**Dispatcher:** Handles the logic of registering, calling, and tabcompleting commands (the logic to CommandSpec's data)\n\n**CommandExecutor:** Single-method interface that takes the sender and parsed arguments and performs the command's action\n\n**CommandElement:** The parent class for any type of command argument. These are often composed to create a complex argument chain. CommandElements are defined in GenericArguments and GameArguments (in o.s.a.util.commands and o.s.a.service.command respectively)\n",
    "head_branch": "feature/commands",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e98fd9087c4d6d37a688",
    "number": 557,
    "body": "We're currently using a quite huge amount of shared code in the Gradle setup of our projects. Because of this, changes always need to be done in each of them. Because SpongeAPI is referenced in the implementations splitting SpongeAPI's Gradle setup into separate (reusable) files simplifies an unified Gradle setup for SpongeAPI, Sponge and Granite.\n\nThe license header changes is only to provide a shared license header across the projects, therefore the project name is included directly from Gradle now instead of having it hard-coded in the header configuration file.\n",
    "head_branch": "feature/unify",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e990d9087c4d6d37a689",
    "number": 552,
    "body": "Continuation of https://github.com/SpongePowered/SpongeAPI/pull/409 and https://github.com/SpongePowered/SpongeAPI/pull/524\n\nThis issue explains what command stats are used for: https://github.com/SpongePowered/SpongeAPI/issues/326. I don't know why it was closed.\n\nThis PR replaces the `boolean` that is returned when a command is called with a `CommandResult` object, which stores the command stats `SuccessCount`, `AffectedBlocks`, `AffectedEntities`, `AffectedItems` and `QueryResult`. I also added a `Map` for custom data.\n\nThe `CommandResult` is passed with the `CommandEvent` after the execution of the command.\n\nThe implementation is based on @AlphaModder's pull request, but uses classes instead of interfaces to make it easier to use the system (similar to the Text API). \n\nThe only thing that changes is that plugin developers now have to use a builder to create a `CommandResult`:\n\n``` java\nMyCommand implements CommandCallable {\n    CommandResult call(CommandSource source, String arguments, List<String> parents) {\n        ...\n        return CommandResults.processed(); \n        // equal to CommandResults.builder().setProcessed(true).build();\n    }\n    ...\n}\n```\n\nI'm not sure if this is the best way of implementing it. I also thought about a system that uses separate classes for each result data type (similar to the Data API proposal):\n\n``` java\nCommandResult {\n    boolean wasProcessed();\n    <T> Optional<T> getData(Class<T extends CommandResultData> clazz);\n}\n```\n",
    "head_branch": "feature/commandresult",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e991d9087c4d6d37a68a",
    "number": 550,
    "body": "Fix returning types\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e992d9087c4d6d37a68b",
    "number": 545,
    "body": "Proposed solution to https://github.com/SpongePowered/SpongeAPI/issues/540\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e994d9087c4d6d37a68c",
    "number": 544,
    "body": "In order to finish fleshing out the WorldGenerator the last piece is per-biome populators. So these would be populators which are registered into individual biomes and run on a per biome basis. Additional to the populators each biome needs a special case of the GeneratorPopulator except that it only handles a single collumn within the BlockBuffer in order to replace the blocks within that column to the correct counterparts for the biome. This has been tentatively named a ColumnPopulator (name suggestions wanted).\n## The order of operations for world generation:\n\nThe generation process for chunks is divided into two phases, generation and population. The generation phase is in charge of creating the base terrain shape and generating large terrain features. All operations during the generation phase act upon a BlockBuffer rather than a live chunk object.\n\nConversely the population phase operates against a live chunk object and has the guarantee that all immediately surrounding chunks have at least passed the generation phase. The population phase is typically used for the placement of small features and objects placed my cross chunk boundaries.\n\n**The generation phase:**\n1. Create the chunk buffer\n2. Call the base GeneratorPopulator to create the base terrain shape\n3. Pass each 1x1 collumn of the chunk to the BiomePopulator\n4. Call each of the GeneratorPopulators registered to the biome\n5. Call each of the GeneratorPopulators registered to the generator\n6. Build the chunk object from the chunk buffer\n\n**The population phase:**\n1. Validate surrounding chunks\n2. Pass the chunk to each of the populators registered to the biome (based off the biome of an arbitrary point in the chunk (16, 0, 16 in vanilla))\n3. Pass the chunk to each of the populators registered to the generator\n## Additionally\n\nThis PR also adds a number of the vanilla `Populator`s, accessible through the `PopulatorFactory` (via the game registry). which may be modified and added to existing worlds or custom world generators in order to gain easy access to the vanilla population procedures.\n",
    "head_branch": "feature/biome-populators",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e995d9087c4d6d37a68d",
    "number": 543,
    "body": "Fixes the issue of requiring a WorldBorder object within the WorldProperties. Since WorldProperties can exist without the associated world being loaded this places the addition requirement on WorldBorder implementations that they can exist without the associated world which is not always correct.\n",
    "head_branch": "fix/world-properties",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e996d9087c4d6d37a68e",
    "number": 542,
    "body": "# Data API Proposal\n\n~~It certainly has been a while since I've last made a rather large API PR~~ It's been three weeks since my last major API PR, however, this is the culmination of some major features being created and designed before this proposal could come to fruition. Without further ado, I present the **Data API**.\n##### What is _DataAPI_?\n\nQuite simply, it's an API centered around anything holding mutable data being a `DataHolder`. The front facing view of `DataHolder` doesn't have any guarantees about the data possibly being held by the holder. \n##### So... what's the point?\n\nWell, to put it bluntly, _Entities_, _TileEntities_, _Blocks_, and _Items_ all become similar `DataHolder`s in that they all are \"basic\" objects that can have extraneous data associated with them. \n##### But you already wrote Items API!\n\nYeah, and? It was a pretty sweet API, wasn't it? As an idea, Items API was simply a stepping stone towards this overall _Data API_ to cover _more_ than just Items. The same structure that Items API had is now applicable to Entities, Blocks, and TileEntities!\n##### Ok but why the change?\n\nSadly, there were several limitations of what could be represented by `ItemData`. First, `ItemData` could not translate anything about an `Entity` or its data. Second, `ItemData` couldn't represent `TileEntityData` without blatantly defining a method such as `TileEntityData<?> getTileEntityData()` which, let's be honest, is almost as useless as saying \"Hey! I'll give you an `Object` but you have to check what type of object it is first!\". Lastly, it was impossible to define various information about an `Entity` within an `ItemStack` without creating some sort of `EntityData`.\n\nBut before you ask more questions or make comments, let's actually review the new structure of Data.\n### New Beginnings for DataHolder\n\n`DataHolder` was a simple interface that has existed for quite some time now, having a single method: `<T> Optional<T> getData(Class<T> dataClass)`. Great! Well, we learned to actually use it in a few places, but it has its own set of limitations. Namely, **we can't modify a `DataHolder`**.  To change this, `DataManipulator` was created with a few simple methods to make it usable:\n- `clear()::void`\n- `from(DataHolder)::DataManipulator`\n- `from(DataContainer)::DataManipulator`\n\nAll is good. But what about overrides? I mean, when we have a `DisplayNameData`, we usually want to be able to do the following\n\n``` java\n\ndisplayName.setName(\"[MySuperPlugin]\" + displayName.from(myItemStack).getName());`\n```\n\nSo, what do we do? **_Add Generics!**_\n\n`DataManipulator` became abstract enough that `DataHolder` could effectively house all getters and setters for data! What used to reside in `ItemStack` now resides in `DataHolder`! And since `DataHolder` is a super interface, well, we have the capability of representing data from almost any `DataHolder` source and sending that data to any compatible `DataHolder`!\n#### Tidying Up\n\nBecause `DataHolder` was a super interface, we gained the ability to make changes to `DataManipulator`s and set them on more than a single type of `DataHolder`. However, we still had the problem of actually representing data that hasn't been represented before, namely, data from `Entity` and data from previously known as `BlockLoc`. \n\nGetting this done required lots of contemplation about every `Entity` interface and the data represented by it and what \"function\" that interface had. In reality, many interfaces were kept mostly for the sake of being able to comply with the underlying structure of entities in Minecraft. \n\nI didn't really like that bit. Especially since something as simple as `OcelotType` is in itself representing some sub type of an `Ocelot` entity. So, what could be done? Well, a compromise:\n\nI came to the conclusion that any `Entity` interfaces that needed to exist for their functionality and mixing compatibility with implementation would stay. Their data accessor methods however, would now reside into categorized `DataManipulator`s such that we now have the following possible:\n\n``` java\n\nEntity randomEntity = randomEntityEvent.getEntity();\nOptional<HorseData> optional = randomEntity.getData(HorseData.class);\nif (optional.isPresent()) {\n    HorseData data = optional.get();\n    data.setVariant(HorseVariants.SKELETON_HORSE);\n    randomEntity.offer(data);\n}\nDisplayNameData data = randomEntity.getOrCreate(DisplayNameData.class).get();\ndata.setDisplayName(Texts.of(TextColors.AQUA, TextStyles.BOLD, \"SKELETOR\"));\nrandomEntity.offer(data);\n\n```\n\nOne thing while writing these various `DataManipulator`s for entities is that there's quite a bit of overlap with some specific `ItemData` and `EntityData`. Namely, the overlaps involved things like `PotionEffect`s, `DisplayName`, `DyeColor`, etc. So, I made sure that these overlaps didn't exist. \n\nFinally, came the final step in this challenge: Representing `BlockState` information with Data API...\n\nIt took a while, but the end result is that `BlockState` can be considered an immutable `DataHolder` where it has an `ImmutableCollection<? extends DataManipulator<?>>` where these manipulators are mutable, but again, the underlying `BlockState` can not be changed. \n\nFinally, with the `BlockState` change, representing various `BlockProperties` was doable! In came the various `DataManipulator`s for block information, like, `RailDirectionData`, and `TreeTypeData`, but something that I further realized is that there is even duplication across almost all `DataManipulator`s that hold a single value and allow the developer to change that single value based on some predetermined bound of either the object type or a primitive type boundary. \n\nWhat ended up being created is an exhaustive list of all types of `DataManipulator`s that now not only represent `Item`s, `Entities`, `Blocks`, and `TileEntities`, but `DataManipulator`s that can be interchanged with other `DataHolder`s! \n\nJust imagine it this way: Remember how I demonstrated that you can set an inventory on a chest, even though the chest is in the form of an `ItemStack`? Apply the same idea to the four big `DataHolder`s: `BlockData` can be retrieved from an `ItemStack`, and an `ItemStack` can set `Entity` data, and an `Entity` can be manipulated by a `TileEntity` just the same! Pretty freaking awesome, isn't it?\n\nWith PR, we've gained the following features:\n- Interchangeable `DataManipulator`s that can be used to manipulate data on any `Item`, `Block`, `Entity`, and `TileEntity`\n- Removed all remnant `getByteData` methods and notions to represent \"magic values\"\n- Provide a step forward for plugin developers to start using data more intelligently\n- Potentially future proof the core Data API for future Minecraft versions to come\n- **Unify Data Manipulation across multiple APIs with minimal maintenance overhead**\n\nBeing that this PR will break several API's when merged, an implementation PR is being prepared for merging such that Sponge Implementation can update with minimal wait time during the API breakage.\n",
    "head_branch": "feature/data",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e997d9087c4d6d37a68f",
    "number": 541,
    "body": "GameRegistry as we know it is bloated with all the `getXX(): Optional<?>` methods when all of our \"types\" aren't conforming to a common standard, some \"types\" have a `getName()` and others have `getId()`. This PR attempts to unify the types and clean up GameRegistry along with it. \n\nAdds a handy `CatalogTypes` for indexing known `CatalogType` classes for easy auto completion in Eclipse.\n",
    "head_branch": "feature/game-registry",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e998d9087c4d6d37a690",
    "number": 539,
    "body": "This PR modifies the default command system so that it allows commands to be dynamically resolved based on their alias. Using this, the \"plugin:command\" notation does not need to be a duplicate of every command registered, as the code can check the prefix when the command is executed and decide which plugin to run from.\n\nThis also opens up the possibility of using minecraft or forge-mod commands \"minecraft:\" or \"mod:\" (at least in the forge implementation), and completely solves the issue of command conflicts, as a single alias could be registered by more than one plugin and each command would still be individually addressable.\n\nFinally, it also allows plugins to take control of this system, and explicitly set the plugin that will be used when a non-prefixed command is used by a certain kind of CommandSource. A way to modify this behavior through a configuration file could be in either Sponge or a sponge plugin. This would be extremely useful for sponge servers with \"Essentials\"-type plugins that still want to play vanilla adventure maps. \n\nThe whole thing is based on [EvilSeph's blog post](http://evilseph.com/post/75608917830/bukkit-supporting-minecraft-commands).\n",
    "head_branch": "feature/dynamic-commands-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e999d9087c4d6d37a691",
    "number": 537,
    "body": "This adds some inventory API to some events where necessary. This also removes the unused `ItemExtractEvent`.\n\nFixes #499 \n",
    "head_branch": "feature/inventory-event-fixes",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e99ad9087c4d6d37a692",
    "number": 536,
    "body": "This PR improves the recently added Scoreboard API. A list of the changes is below:\n- Add `getScoreboard()` method to `Objective` and `Team`\n- Add `getObjective()` method to `Score`\n- Add `getMainScoreboard()` method to the registry\n- Correct method signature of `ScoreboardBuilder#build()`\n",
    "head_branch": "feature/scoreboard",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e99bd9087c4d6d37a693",
    "number": 534,
    "body": "",
    "head_branch": "nullchecks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e99cd9087c4d6d37a694",
    "number": 533,
    "body": "This PR modifies the `testPermission` method of `SimpleDispatcher` to return `true` if the `CommandSource` is permitted to execute at least one of the subcommands.\n\nRight now it returns `false` if the source is not permitted to execute one of the subcommands.\n",
    "head_branch": "dispatcherpermission",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e99dd9087c4d6d37a695",
    "number": 532,
    "body": "This PR adds a simple abstract implementation of `CommandCallable` (like `SimpleDispatcher` implementation for `Dispatcher`).\n\nPlugin developers can extend the class to create simple commands, without implementing all methods of `CommandCallable`:\n\n``` java\npublic class SendCommand extends SimpleCommandBase {\n    public SendCommand() {\n        super(\n                \"simplemail.write\", // permission\n                \"Send a mail\", // description\n                Texts.of(\"Send a server mail to a player.\"), // help\n                \"<player> <msg>\"); // usage\n    }\n\n    @Override\n    public boolean call(CommandSource source, String arguments, List<String> parents) throws CommandException {\n        // command logic...\n    }\n}\n```\n\nI did not name this `Command` or `AbstractCommand` because I want to reserve those names for an annotation based Command API.\n#523\n",
    "head_branch": "abstractcommand",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e99ed9087c4d6d37a696",
    "number": 531,
    "body": "Well I realized recently that I'd be unable to complete this PR in a timely manner so I'll mention the state of this PR.\n\nCurrently it's a feature complete base API for maps. Based on the old non-2.0 data API. Much of the existing code for colors and canvas interaction is correct however the structure is also incomplete and missing major features like cursors/decorations/icons (different named for the same thing). [This gist](https://gist.github.com/modwizcode/12a08d5a9399285853e0) represents my plans for the API that I would've worked on if I had time. \n\nI leave this PR here simply as a reminder of the feature and because it has some of the base structure already completed.\n\nIf anyone has questions regarding map behavior I can be pinged here or in a comment on the gist.\n\nI found time to write the full API. I won't be doing implementation however.\n",
    "head_branch": "feature/maps",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e99fd9087c4d6d37a697",
    "number": 530,
    "body": "This adds the ability to easily and simply get who receives a chat message.\n",
    "head_branch": "feature/chat",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9a0d9087c4d6d37a698",
    "number": 529,
    "body": "This PR will add the following methods:\n\nList<Player> getReceivers()\nvoid setReceivers(List<Player>)\n\nThe reason it should be added is to simplify who/what receives messages.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9a1d9087c4d6d37a699",
    "number": 526,
    "body": "# Proposal for unified isFlowerPot detection\n\nWhilst it is well understood at this point that a well-specified and suitably future-proof API for Minecraft will need to be appropriately decoupled from Minecraft internals to withstand future changes to the underlying platform as effectively as possible, there are some aspects of the underlying platform which are intrinsically immutable and thus safe to propagate up to the API layer.\n\nIn many cases it is fully possible to achieve high levels of abstraction within the API, as demonstrated by the recent additions of the Inventory API and Item Data API. However there are still places where abstraction simply does not provide any measurable benefit to the end user, and adhering more faithfully to the internal architecture of the underlying Minecraft platform has no immediate or developer-facing drawbacks.\n\nWhere we can achieve some tangible improvement however is in homogenising developer-facing interfaces in order to provide a consistent and intuitive aspect-oriented development paradigm, reinforced by rigid adherance to integrated vertical software development disciplines.\n### The Chaos at the Heart of Minecraft\n\nWith Minecraft, what you see is not always what you get. Crowd-sourced names for internal API structures can often fall somewhat short of making any sense whatsoever, but still provide valuable insight for newcomers into Minecraft internals, albeit tainted by occasionally apocryphal or sometimes downright nonsensical assignment of meaning to something that the assignor didn't understand or couldn't be bothered to decipher. Nevertheless, these little curios persist in the deobfuscated Minecraft codebase, and their legacy is one of some entertainment and wry humor when the truth of a particular field or method's origins come to light.\n\nThe typical ways of dealing with these conflicts between the _status quo_ and common sense resolve into two camps:\n- Argue about it pretty much forever\n- Accept the nonsense and move on\n\nAn example of the former is the most hotly contested field of all time `World.isRemote`, sorry I meant `World.isClient` or is that `World.isR...` okay, okay I'll stop. However one of the most notable examples of the latter is the somewhat controversially named `isFlowerPot` method in Minecraft's `Block` class.\n\nThis method and its somewhat peculiar naming was the subject of some discussion until a Mojangsta was nailed down and forced to cough up the original name, which turned out to be something like `handlesOwnClone`, however the charm of the original (kind of quirky and entertaining) `isFlowerPot` was just too strong, and the method maintains its apocryphal nomenclature to this day.\n### ClassLoading and You - a ~~song of ice and fire~~ soliloquy in five parts\n\nEveryone is aware that Sponge is powered by ~~black magic~~ Mixins, however Class Loading in Java is a complex topic and Mixins are unable to adequately solve every problem we might throw at them. Fundamental to the successful application of Mixins is the core idea that a mixin is used to implement some aspect of the defined API.\n\n`isFlowerPot` thus presents a problem. How can we adequately represent whether or not something is a flowerpot or not if we don't adequately encode this crucial information in the developer-facing portions of the API?\n\nThe answer is: define this information explicitly in each interface.\n\nTaking a purely java-based approach to solving this problem alleviates several issues which would otherwise be caused. Whilst we could of course inject the required code at runtime, this rapidly becomes a very expensive operation when we factor in the sheer number of classes involved, and also the potential conflicts it creates with other non-flowerpot-aware code.\n\nThe beauty of this extremely [elegant](https://github.com/SpongePowered/SpongeAPI/commits/hotfix/instance-checks?page=16) and efficient implementation approach is that it provides a unified and 100 percent intuitive way of determining whether literally **any** object is or is not a flowerpot at runtime, without introducing complex transformer logic or polluting existing mixins with unrelated code. This allows mixins to focus on their task of implementing literally everything, whilst `isFlowerPot` logic can be handled in pure Java at a fundamental level within both the API and the Sponge implementation.\n\nImplemented by [Sponge#217](https://github.com/SpongePowered/Sponge/pull/217)\n",
    "head_branch": "hotfix/instance-checks",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9a2d9087c4d6d37a69a",
    "number": 524,
    "body": "This PR Adds the capability of dynamic commands.\n\n A Continuation PR of #409 \n",
    "head_branch": "feature/dynamic-commands",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9a3d9087c4d6d37a69b",
    "number": 522,
    "body": "This is the API part of a custom world generation API. I was asked by @bloodmc to create a PR, so here it is.\n\n_updated on April 2, for latest API changes_\n\nPlugins can now register their own implementations of the WorldGeneratorModifier interface. It is intended that, when the world is set to use that plugin as world generator, the plugin will be passed a WorldGenerator instance to this WorldGeneratorModifier. This WorldGeneratorModifier can then replace (parts of/the whole) world generator with their own implementations.\n\nWhen a plugin wants to modify the terrain generation of an _existing_ world, it can call `world.getWorldGenerator()`, make the desired changes and then call `world.setWorldGenerator()`. A plugin can also ask the world generator to generate something in a custom buffer. This is for example useful if a plugin wants to create a biome map: it just calls `world.getWorldGenerator().getBiomeGenerator()`.\n\nI'm also working on an implementation, see https://github.com/SpongePowered/Sponge/pull/214.\n## Overview of all classes and interfaces\n##### GameRegistry\n\nGameRegistry got a new method to let a plugin register a WorldGeneratorModifier. Also included are some methods to retrieve those registered modfiers.\n##### World\n\nThe get/setSeed methods have been moved to WorldGenerator, as the world seed is purely a world generator property. The JavaDocs of getWorldGenerator have been clarified.\n##### BiomeType\n\nPreviously, there were two methods: getPopulators and insertPopulator. There was no indication whether the iterable returned by getPopulators was mutable. The existance of a insertPopulator method suggests it isn't, and that insertPopulator should be used instead to add populators (but how do you then remove populators?).\n\nI have just made the list mutable, so that people can do `BiomeType.JUNGLE.getPopulators().add(...)`, but also `BiomeType.JUNGLE.getPopulators().clear()`. The insertPopulator method is now redundant, and has been removed.\n\nThe JavaDocs of getPopulators have also been clarified.\n##### BiomeGenerator\n\nLots of parameters have been removed. The size and location of the area to generate can be retrieved from the buffer, so no need to specify it in the method. If the need ever arises to only generate biomes in a part of the buffer, a method can be added to the buffer to view a subset of it, similar to `java.util.List.subList`. I feel that adding the dimensions in extra parameters will only be a source of bugs. It's not hard to imagine a plugin that ignores those parameters and ruins the whole buffer.\n\nThe world parameter is also removed. Many methods on world can cause new chunks to be generated, which would cause calls to the biome generator, which would cause an infinite loop. All useful information of the world has been provided when the plugin was asked to modify the world generator, so the plugin can keep track itself of the world seed, name, settings, etc.\n##### GeneratorPopulator\n\nSame story here as for BiomeGenerator.\n##### Populator\n\nThe world parameter has been removed from the method: people can just call `chunk.getWorld()` to get the world.\n\nA huge wall of text has been added to explain terrain population, hopefully people will now write populators that don't have all kinds of rare bugs.\n##### PopulatorObject\n\nNo changes here, only a bit of extra JavaDocs.\n##### PopulatorObjects\n\nAs per the JavaDocs of Populator, it is not at all easy to write a well-behaving populator. This class helps you to turn a PopulatorObject into a well-behaving Populator. Currently there's only one method, but more can be added in the future.\n##### WorldGenerator\n\nA WorldGenerator represents everything that's needed to generate a world. So it stores the seed and populators alike.\n\nCompared to how the interface looks before this PR, a getter/setter for the base GeneratorPopulator has been added. A method called `getGeneratorPopulators()` has been added. I also made the same changes to getPopulators()/insertPopulator() as I did for BiomeType.\n\nPR #515 renames the WorldGenerator to ChunkGenerator. I have kept the name the same, as I feel that this class should contain everything related to world generation, not just chunks, but also the biome generator, world seed and whether map features are enabled.\n\nIn other words: the design of this class is still in flux, if the class indeed gets renamed to ChunkGenerator some methods will need to be moved.\n\nNow that #515 is merged, I will look into finding a solution to merge both PRs nicely.\n##### WorldGeneratorModifier\n\nA plugin needs to provide an implementation of this interface when it wants to modify world generator. When the server admin (or the player in singleplayer) has selected this WorldGeneratorModifier, its `modifyWorldGenerator` method is called, giving the plugin a chance to modify the world generator before the first chunk is generated.\n\nSure, a plugin can just manually modify the world generator of an existing world using `world.getWorldGenerator` and `world.setWorldGenerator`, but this will cause a mess with each plugin having its own way to (de)activate their modifications to a world. `world.setWorldGenerator` is intended for plugins wanting to modify some aspects of the world (like the seed), not as the main way to provide custom world generators.\n",
    "head_branch": "feature/custom-world-generators",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9a4d9087c4d6d37a69c",
    "number": 519,
    "body": "Updated version of @sk89q 's changes.\n\nThis also merges BlockLoc into Location\n\nSee https://github.com/SpongePowered/SpongeAPI/pull/451\n",
    "head_branch": "feature/block-proxy",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9a5d9087c4d6d37a69d",
    "number": 518,
    "body": "Moved to new web page\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9a6d9087c4d6d37a69e",
    "number": 515,
    "body": "This PR expands the process for creating worlds.\n\nNotable new classes:\n- `WorldBuilder` This is a builder which can produce instances of `WorldCreationSettings` or `World`s directly.\n- `WorldCreationSettings` Holds information which is used to define a new world for creation.\n- `WorldProperties` defines numerous properties about the world (essentially a representation of the data with the `level.dat` file).\n- `GeneratorType` This is a representation of what you may also think of as a world type, it holds a generator and some settings. Examples are flatland or amplified.\n",
    "head_branch": "feature/world-creation",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9a7d9087c4d6d37a69f",
    "number": 511,
    "body": "Me and @Aaron1011 decided that the current attributes operations system was too tied to vanilla, because of it's hardcoded behavior. So now it's not hardcoded, to allow custom operations to how exactly they modify a base. Yeah.\n",
    "head_branch": "feature/operations",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9a8d9087c4d6d37a6a0",
    "number": 509,
    "body": "Fixing a typo (\"vaildate\" --> \"validate\") in ItemStack.java at line 156.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9a9d9087c4d6d37a6a1",
    "number": 507,
    "body": "**Helper PR for:** https://github.com/SpongePowered/SpongeAPI/pull/220\n- Improve `StatisticBuilder`\n- Add `AchievementBuilder`\n\n**The Issue**\n\nCurrently it is not possible to create specific subtypes of `Statistic`.\nThis affects:\n- `BlockStatistic`\n- `EntityStatistic`\n- `ItemStatistic`\n- `TeamStatistic`\n\nIn addition to that it is entirely impossible to create new `Achievement`s.\n\n**PR summary**\n\nThis PR allows specifying the subtypes of the `Statistic` that should be created (including custom ones) along with the data that should be returned.\nIt also allows the creation of new `Achievement`s using a builder that can be obtained from the `GameRegistry`. The custom/created achievement must be granted by plugins, because minecraft does not keep track of that on its own.\nI included some javadoc changes to better match the general javadocs.\n",
    "head_branch": "feature/statsBuilders",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9aad9087c4d6d37a6a2",
    "number": 506,
    "body": "This PR is a collection of improvements i would like add to the Statistics API.\nThis suggestions are open for discussion, so feel free to comment on or criticize them.\n\nHere is a list of changes with an explanation each.\n\n**Change 1**\n- `GameRegistry.getAchievements()`\n\nCurrently there is no way to get all Achievements, so i added this method to provide simple access to all Achievements similar to all other entries in the GameRegistry.\n\n`Achievement` does not have a `getId()` method so we cannot get it with that from the registry.\nShould that method be added to `Achievement` as well?\n\n**Change 2**\n- `Optional<StatisticFormat> Statistic.getStatisticFormat()` \n  - -> `StatisticFormat Statistic.getStatisticFormat()`\n- `StatisticFormat StatisticGroup.getDefaultStatisticFormat()`\n  - -> `Optional<StatisticFormat> StatisticGroup.getStatisticFormat()`\n\nI flipped the placement of `Optional` to allow some more checks and allow using `Statistic`s without the `StatisticGroup`. Please let me explain.\nWhat does the `StatisticGroup.getDefaultStatisticFormat()` tell us about the group?\nIt does not tell us anything (for sure) because every `Statistic` in that group is able to overwrite the group's default.\nThe new `StatisticGroup.getStatisticFormat()` allows the plugins to check whether the group has a fixed format for all elements in it.\nIf there is no fixed format for all elements then the group is a  general group.\n\nIn addition to that the `StatisticGroup` is not present in the minecraft code, so each `Statistic` in our API is never actually bound to a `StatisticGroup`. As a result of this from my point of view it should be possible to display/format the `Statistic`'s value without defaulting to the groups format.\n(In fact each minecraft statistic stores its own reference to the format)\nYou can still check whether the `Statistic` uses its own format or the format of the group.\n\nTo sum it up:\n- Default Statistic Format does not tell us anything, as long as it can be overwritten\n- Fixed Formats for Groups allows distinguishing, between specialized groups and general groups\n- Independent statistics should not be made dependent on a group that only contains elements that does not fit anywhere else\n- All previous possibilities are preserved\n\n**Change 3**\n- `StatisticFormats` javadocs\n\nPlugin authors may want to overwrite the default formatting to make it more readable in a specific context, so they should know the assumed input for the formatter. This is needed for plugin authors  to create their own instances, without looking at any server impl.\n\nIt also should guarantee, that if minecraft ever changes their statistic units (for example from ticks to seconds), that the format does still the same.\nThis is important for own/custom `Statistic`s to format the values properly and allows the plugin author to assign the right formatter to his statistic.\n\n**Change 4**\n- `Statistics` javadocs\n\nDue to the addition of the `GENERAL` group that contains all elements that are not grouped/do not fit in any other group, the old javadocs are no longer true, so i changed them to describe the contents more precisely (I hope).\n\n**Change 5**\n- `StatisticGroups.DISTANCE_MOVED`\n\nThis is a logical group, that contains all statistics measuring the movement of the player, such as `WALK_DISTANCE`. There are quiet a lot elements in this group and all are related to each other so they should be in their own group. Especially if you want to show them together.\n- `StatisticGroups.HIDDEN`\n\nThis is a logical group, that is meant to contain all `Statistic`s that should never be shown to the user, because the are used for internal counting for achievements or are used for plugins to keep track of a secret value, that may be needed for `Scoreboard`s. This is a reference meant for the check whether a statistic (or its group) is hidden.\n\n``` java\nboolean hidden = statistic.getGroup() == HIDDEN; // => Do not show to the user.\n```\n\n**Change 6**\n- `Statistics.DROP` -> `Statistics.ITEMS_DROPPED`\n\nThe old name was misleading so I made the name more expressive.\n- `Statistics.ITEM_ENCHANTED` -> `Statistics.ITEMS_ENCHANTED`\n\nIMO the plural name fits better in there.\n- `Statistics.PLAY_ONE_MINUTE` -> `Statistics.TIME_PLAYED`\n\nThe old name was misleading because that value is not measured in minutes at all.\n(Instead it is currently measured in ticks), so i changed the name to make it less surprising.\n\nThere are probably some other `Statistic`s in there that should be renamed as well. Suggestions?\n\n**Change 7**\n- `List<Achievement> Achievement.getChildren()` -> `Collection<Achievement> Achievement.getChildren()`\n\nThere is no order in the child/dependent achievements so we should not encourage index access to the child achievements (list). \nIn addition to that it is more likely to be a set, because it will never contain duplicates (or at least it should not). But I don't want to limit the server implementations here so i used `Collection` here.\nThis is basically the same reason why we used `Collection` everywhere in the `GameRegistry`\n\n**End of Changes**\n\nI hope this is persuasive enough. If not please leave a comment, with a notice what i should explain some more.\n",
    "head_branch": "feature/statsSuggestions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9abd9087c4d6d37a6a3",
    "number": 505,
    "body": "This creates a JOptionPane for those that are trying to launch the binary jar from desktop.\n",
    "head_branch": "feature/moar-pebkac",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 656223af7645db2bdf19594f88691e5452416221 into aae5733b1a0a0393f8e0210e70e620adbbf34d37"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e9acd9087c4d6d37a6a4",
    "number": 503,
    "body": "Currently, travis cannot build any branches, PR and even master of SpongeAPI due to some odd interaction with their Docker containers killing the build processes. \n\nThis removes the `sudo: false` line enabling container builds, but this allows branches to build again on travis without issue.\n",
    "head_branch": "fix/travis",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9add9087c4d6d37a6a5",
    "number": 501,
    "body": "Many parts of the API don't make use of the Inventory API. Instead, they use the old approach of getting and setting `ItemStack`s directly.\n\nThis PR modifies several interfaces to return an `Inventory` instead of an `ItemStack`. The necessary setter is removed.\n\nIt also removes `EntityEquipEvent`, which is made unnecessary by `EntityEquipmentChangeEvent`.\n",
    "head_branch": "feature/inventory-itemstack",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9aed9087c4d6d37a6a6",
    "number": 500,
    "body": "FIxes #220\n\nThe currently suggested `StatisticGroup` layout has some serious disadvantages.\n\nIn minecraft there are no groups, but they are quite useful if defined properly.\n\nThe old suggestion defines the usage something similar to this:\n\n``` java\nMap<Statistic, Long> stats = player.getStatisticsByGroup(group);\nfor (Entry entry : stats) {\n    Statistic stat = entry.getKey();\n    player.sendMessage(asText(stat) + stat.getFormat().or(group.getDefaultFormat()).format(entry.getValue());\n}\n```\n\nI considers this malicious and error prone.\nSo i want to change this to simplyfy the process:\n\n``` java\nMap<Statistic, Long> stats = player.getStatisticsByGroup(group);\nStatisticFormat formatter = group.getFormat();\nfor (Entry entry : stats) {\n    Statistic stat = entry.getKey();\n    player.sendMessage(asText(stat) + formatter.format(entry.getValue());\n}\n```\n\nSo basically every statistic group defines a fix format all members use. There are no exceptions from that rule. This also allows a more useful displaying because different categories are not merged randomly.\n(First show the general_count, that general_fractional, then the distances, than times spend, or however you want it)\n\nThis PR removes the format from the statistic and splits the general group into smaller pieces to ensure that each group only contains stazs with the same format.\n\nAs an alternative there are 2 other ways that can be used independently from each other.\n- Remove only the Optional from `Statistic.getFormat()`\n  -  Because in minecraft every statistic has its own reference to a formatter\n- Remove the general group\n  - Because the group has nothing in common except that they don't have anything in common\n",
    "head_branch": "feature/statsFix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9afd9087c4d6d37a6a7",
    "number": 496,
    "body": "One of the things I thought could be improved slightly is to remove the need to cast when creating an entity instance.\nGiven this example:\n\n``` java\nOptional<Entity> optional = world.createEntity(EntityTypes.ZOMBIE, somePosition);\n[...]\nZombie zombie = (Zombie) optional.get(); // 'unsafe' cast\n```\n\nI would prefer the entity type to be known automatically (by the IDE)\nSo `optional` becomes `Optional<Zombie> optional  = [...]`\nIt would make it easier to know the corresponding `Entity` class directly from using `createEntity`\nalso, you wouldn't need to know the class, for example it may not be obvious that the `COMPLEX_PART` entity is an `EnderDragonPart`. Using generics this can be known.\n",
    "head_branch": "entitytype-generic",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9b0d9087c4d6d37a6a8",
    "number": 495,
    "body": "Hello again! After a week of designing, rewriting, thinking, and patience, I bring my rather unique Items API!\n## Design Proposal for a usable Items API\n\nItems have always been the goto object for adding extra data for various reasons. And they worked. ItemStack internally is backed by an `NBTTagCompound` with no limitations since the data stored is persisted until the ItemStack no longer exists. Most data on an ItemStack is dependent on the [`ItemType`](https://github.com/SpongePowered/SpongeAPI/blob/master/src/main/java/org/spongepowered/api/item/ItemType.java) to define the behaviors of that ItemStack when interacted with. ItemStacks can even contain [`AttributeModifiers`](http://minecraft.gamepedia.com/Attribute#Modifiers) that are applied upon equipping the item stack.\n\nSo, yes, Items are a huge bag of spiders that very few people really safely understand since bad practices have led to more bad practices that have lead to more bad practices. These bad practices in the past lead to some unmaintainable APIs for some projects, including possibly leaking the entire custom data backed by an `NBTTagCompound`. For those that are familiar with my work with SpongeAPI in the past know that I absolutely hate mediocre API design, let alone API that becomes so obtuse about following an implementation to the letter.\n\nSo, what are we going to have?\n\n**A well thought out Items API**\n### Design Goals\n\nWe want to address the shortcomings of past APIs, they include:\n- Representation of a mutable data structure directly linking to the underlying `NBTTagCompound`. This leaking of mutable data prevents certain behaviors from being monitored and managed. Not to mention, passing around the underlying data has the potential to break the itemstack entirely.\n- Many developers believe that all behaviors with ItemStacks can be customized by granting access to the underlying `NBTTagCompound` without issue, but really, they can't verify that their changes are being stored, let alone valid.\n- Limitations on custom data from mods and plugins are sanitized or unstable for use in previous API's.\n### Let's get Started!\n\nTo begin, we have to start with the basics.\n##### What is an ItemStack?\n\nTraditionally, [`ItemStack`](https://github.com/SpongePowered/SpongeAPI/blob/master/src/main/java/org/spongepowered/api/item/inventory/ItemStack.java)s are an inventory item with some additional data, including some of the following:\n- The amount of the item\n- The type of item\n- The durability of the item if it is damageable\n- And some extra data like enchantments etc.\n##### Ok... So what?\n\nWell, now I have to focus on [`Item`](https://github.com/SpongePowered/SpongeAPI/blob/master/src/main/java/org/spongepowered/api/item/ItemType.java#L32) for a minute. What makes an `ItemType` so special? Does it have any special behaviors? Special data related to what it does? _ABSOLUTELY!_ But, what are we really trying to achieve? I mean, `ItemType.STONE_PICKAXE` and `ItemType.DIAMOND_PICKAXE` are similar in that they're both \"pickaxes\", but what do we know about the type of the item?\n\nLet's break it down even further...\n\nA pickaxe is just an item that has extra information pertaining to breaking certain kinds of blocks. It also has certain information regarding the efficiency of breaking certain blocks, whether it can harvest\nother types of blocks, etc.\n##### So.... represent tools with ToolData?\n\n_Not so faaaaaaast..._ Seriously, remember I said we were going to start from the basics?\n\nOk, we have items that can be considered \"tools\" that have certain.... _properties_. Why _property_? Well, let's see, tools can harvest certain blocks, they are efficient at mining a certain other set of blocks, and, well, they have some defined maximum amount of uses. This is the basis of `ItemProperty`. Something as simple as defining a `ItemType.DIAMOND_PICKAXE` being able to break `BlockType.OBSIDIAN` can not be changed. It's literally a `property` of the item and there's nothing you can do to change it!\n##### What's the point of `ItemProperty`?\n\nHold on, I haven't finished explaining this system yet.\n\nTo really understand `ItemProperty`, let's see a code example of getting one:\n\n``` java\n\n@Subscribe\npublic void onBreak(PlayerBreakBlockEvent event) {\n   Optional<ItemStack> option = event.getPlayer().getItemInHand();\n   if (!option.isPresent() {\n     return;\n   }\n   ItemStack myItemStack = option.get();\n   Optional<HarvestingProperty> harvestOptional = myItemStack.get(HarvestingProperty.class);\n   if (harvestOptional.isPresent()) {\n     // Now we can actually use the itemproperty \n     // since the item stack does have it\n     HarvestingProperty harvest = harvestOptional.get();\n     // And the code goes on doing whatever it was you wanted to \n     // do with that information...\n     if (harvest.getValue().contains(event.getBlock().getType()) {\n       // We want to just make the player exhausted. Because we're mean >:]\n       event.getPlayer().setExhaustion(event.getPlayer().getExhaustion() + 10);\n     }\n```\n\nSo, we've determined that the `ItemStack` has a `HarvestingProperty` and determined that the item could actually harvest the block broken... **All without having to check `ItemType`!**\n\nBut now we have to understand some properties of an `ItemStack`, like the color of dye.\n##### OH! I KNOW THOSE! THEY'RE NUMBERS FROM 0 TO 15!\n\nNOPE! NOPE! NOPE! You're not listening! Again! We are starting at the basics!\n\nJokes aside, how do we really represent _mutable_ data? Your instinct was to think of dyes by \"damage\" values. Sure, we can be lazy and say that a `DyeColor`'s damage value is say, 10. But what does that get us? Some archaic \"_you-have-to-use-this-table-of-damage-values-to-types-table_\"? That's not at all a good way to represent data, especially if we can expect more than the vanilla types of data. \n\nSo, let's really try to avoid going with \"what we know\" and try to think with the same mentality as we used for `ItemProperty`.\n\nData on the ItemStack that can be changed is going to be called `ItemData`.\n\nLet's take a look at a code example to explain the basis.\n\nWith code, we have our `ItemStack` as so:\n\n``` java\nItemStack myItemStack = someMethodToGetItemStack();\n```\n\nWe discovered we can get `ItemData` objects from some method in `ItemStack`, looking something like this:\n\n``` java\npublic interface ItemStack {\n    /*\n     * ....\n     */\n    <T extends ItemData> Optional<T> getItemData(Class<T> itemDataClass);\n\n}\n```\n\nAnd for our particular example, `DyeableItemData` can look like this:\n\n``` java\n\npublic interface DyeableItemData extends ItemData {\n\n    DyeColor getColor();\n\n    void setColor(DyeColor color);\n\n}\n```\n\nAnd now we have our plugin code like so:\n\n``` java\npublic class MyClass {\n\n    public void myMethod(ItemStack itemStack) {\n        Optional<DyeableItemData> dye = itemStack.getItemData(DyeableItemData.class);\n        if (dye.isPresent()) {\n            dye.get().setColor(DyeColors.CYAN);\n        }\n    }\n}\n```\n\nBUT WAIT! THAT'S NOT ALL!\n\nTo avoid leaking references everywhere, `ItemStack` doesn't actually return it's own references of `ItemData`, we have now _set_ the `ItemData` back onto the `ItemStack`!\n\n``` java\npublic class MyClass {\n\n    public void myMethod(ItemStack itemStack) {\n        Optional<DyeableItemData> dye = itemStack.getItemData(DyeableItemData.class);\n        if (dye.isPresent()) {\n            dye.get().setColor(DyeColors.CYAN);\n            itemstack.setItemData(dye);\n        }\n    }\n}\n```\n##### Fine, but how do I create a new `ItemData` for something like _Lore_?\n\nWell, that's actually solved for you! Here, look!\n\n``` java\npublic interface ItemStack extends DataSerializable {\n\n   <T extends ItemData> Optional<T> getOrCreateData(Class<T> clazz);\n\n}\n```\n\nAnd thankfully, we can rely on our handy dandy `LoreItemData` interface:\n\n``` java\npublic interface LoreItemData extends ItemData {\n\n    List<Message> getLines();\n    //... and so on\n}\n```\n\nSo, now, we end up with a UML diagram something like this:\n![Rough Diagram](http://i.imgur.com/ivLVLJJ.png)\nSo? What do you think?\n##### Wait, if you said earlier that you have something for `DyeColor`, what is the point of `ItemStack#getDurability()`?\n\n**_CLAPS**_ Now you're thinking! There isn't one! In fact, this PR removes the method entirely. If we really think about it, the only items that worry about \"durability\" are.... tools, armor, and weapons!\n\nSo, now we somewhat understand the basis of this massive API change is going to have us do.\n\nFortunately, our `ItemStack` interface can be trimmed down a little bit by extending `DataHolder`.\n\nAfter all is said and done, the API itself is pretty extensible.\n##### What's the point of overcomplicating this if you can just create something like `ToolProperty` and `FoodProperty` and `WoolData` or `WrittenBookData`?\n\nI'm actually very happy you asked that! I'll show you something pretty awesome instead of answering directly:\n\n``` java\npublic void givePlayerTreasure(Player player) {\n    ItemStack diamondSword = MyItemBuilder.builder()\n                                        .itemType(ItemTypes.DIAMOND_SWORD)\n                                        .build();\n    // Let's add some enchantments\n    EnchantmentData ench = diamondSword.getData(EnchantmentData.class).get();\n    ench.setUnsafeEnchantment(Enchantments.UNBREAKING, 10);\n    ench.setUnsafeEnchantment(Enchantments.SHARPNESS, 5);\n    diamondSword.setData(ench);\n\n    // Can we name this sword? SURE!\n    DisplayNameData disp = diamondSword.getData(DisplayNameData.class).get();\n    disp.setDisplayName(Messages.of(\"Slayer of Plebians\"));\n    // Ok, you get the point, that's how you access some basic data...\n    diamondSword.setData(disp);\n\n    // But wait! what's this? A chest? pssh can't do anything with that...\n    ItemStack chestItem = MyItemBuilder.builder().itemType(ItemTypes.CHEST).build();\n\n    // Wait what? There's InventoryItemData? Is that like an array of ItemStacks?\n    InventoryItemData invDat = chestItem.getOrCreate(InventoryItemData.class).get();\n        // .........\n    CarriedInventory chestInventory = invDat.getInventory();\n        // ....................................\n    chestInventory.set(diamondSword);\n    chestItem.setData(invDat);\n\n    player.setItemInHand(chestItem);\n}\n```\n##### **_WHAAAAAAAAAT??!?!?!?!**_ **YOU CAN SET INVENTORIES IN ITEMS?!**\n\nI told you this API was going to be impressive! Notice that we didn't even have to check anything! A few assumptions were made of course about the `ItemStack`, such as the fact that the `diamondSword` would allow `EnchantmentData` and `DisplayNameData`, but let's be real here: You can create a fully filled chested inventory in a chest with all sorts of special data assigned to the individual items! AND YOU CAN DO THIS ON AN `ItemStack`!!\n### Wrapping up\n\nWith this Items API, we can:\n- Check for various `ItemProperty` information without having to know the `ItemType`\n- Get mutable `ItemData` objects representing various information of different types of items, again without checking `ItemType`\n- Use the Persistence API for serializing and deserializing `ItemStack`\n- Forget useless key tables of \"magic\" values to various types of items\n- Have a wonderful day\n##### Well wait! I want to access data in the `NBTTagCompound`!\n\n**_Sigh....**_ I thought we just agreed that we didn't care about NBT or things like that...\n\nSeriously, we don't remotely need this direct access to a mutable compound (or [`DataView`](https://github.com/SpongePowered/SpongeAPI/blob/master/src/main/java/org/spongepowered/api/service/persistence/data/DataView.java))\nbecause it doesn't make sense, and it's all based on implementation details.\n\nWhat do we really need for custom data then? Did you want to add something else that isn't covered by the API? Did you just want to use a `DataContainer` to access the data directly? \n\nWell, you have two options now:\n1) You create your own `MyData extends ItemData<MyData>` which handles your custom data (or mod data to provide usability to SpongeAPI plugins wanting to modify custom mod data) and handle serialization and deserialization accordingly\n2) You use the unsavory `toContainer()` which you can modify the existing data of and then `setRawData(DataContainer)` to set that modified data, assuming the data is valid, otherwise an `InvalidDataException` is thrown.\n\nI'll show you how to go about the first option:\n\n``` java\npublic class MyData implements ItemData<MyData> {\n    private int myInt;\n\n    public MyData(int myInt, double myDouble) {\n        this.myInt = myInt;\n    }\n\n    @Override\n    public int compareTo(MyData o) {\n        return this.myInt > o.myInt ? 1 : this.myInt < o.myInt ? -1 : 0;\n    }\n\n    @Override\n    public DataContainer toContainer() {\n        DataContainer container = new MemoryDataContainer();\n        container.set(new DataQuery(\"com.gabizou.myData\"), this.myInt);\n        return container;\n    }\n}\n```\n\nNow, at the moment, you've yet to see how this will be created with `ItemStack#getOrCreate(MyData.class)` because, essentially, as `ItemData` itself is [`DataSerializable`](https://github.com/SpongePowered/SpongeAPI/blob/master/src/main/java/org/spongepowered/api/service/persistence/DataSerializable.java), we essentially know that all `DataSerializable`s must have registered a [`DataSerializableBuilder`](https://github.com/SpongePowered/SpongeAPI/blob/master/src/main/java/org/spongepowered/api/service/persistence/DataSerializableBuilder.java)! So, we can safely then assume that as long as we have our `MyDataBuilder implements DataSerializableBuilder<MyData>` and it is registered with [`SerializationService`](https://github.com/SpongePowered/SpongeAPI/blob/master/src/main/java/org/spongepowered/api/service/persistence/SerializationService.java), we don't have to worry about constructing our data without the serialization service! Pretty ingenious, isn't it?\n\nNow let's stop asking for an NBT API and call it a day.\n",
    "head_branch": "feature/items",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9b1d9087c4d6d37a6a9",
    "number": 493,
    "body": "Right now the Eclipse formatter profile is not usable because it changes almost every javadoc entry like this:\n\nInput:\n\n``` java\n * <p>In older versions of Minecraft, block properties were encoded in\n * a block's metadata.</p>\n```\n\nOutput with the current formatter:\n\n``` java\n * <p>\n * In older versions of Minecraft, block properties were encoded in a block's\n * metadata.\n * </p>\n```\n\nThis PR sets the \"Format HTML in comments\" option to false.\n\nOutput with the changed formatter:\n\n``` java\n * <p>In older versions of Minecraft, block properties were encoded in a block's\n * metadata.</p>\n```\n\nAnother problem is that many javadocs were wrapped although the column width was not reached. When I run the formatter, almost every file changes because of this.\n\nI guess this is related to the rule \"Feel free to wrap when it will help with readability\" in the Contribution Guidelines.\n",
    "head_branch": "eclipse-formatter",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9b2d9087c4d6d37a6aa",
    "number": 492,
    "body": "This PR adds the following events pertaining to hanging entities:\n- `EntityInteractHangingEvent`\n- `LivingInteractHangingEvent`\n- `HumanInteractHangingEvent`\n- `PlayerInteractHangingEvent`\n- `BlockBreakHangingEvent`\n",
    "head_branch": "hanging-events",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9b3d9087c4d6d37a6ab",
    "number": 491,
    "body": "This is a fairly simple PR. It adds support for \"Tile Ticks\", renamed as Scheduled Block Updates. They are documented [here](http://minecraft.gamepedia.com/Chunk_format#Tile_tick_format).\n",
    "head_branch": "feature/tileticks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9b4d9087c4d6d37a6ac",
    "number": 490,
    "body": "This PR creates a main class which throws an exception with some basic information for running sponge. This helps people who unwittingly attempt to run sponge and would otherwise be confused by the `no main manifest attribute, in spongeapi-1.1-SNAPSHOT.jar`.\n\nThe message given is this:\n\n```\nOh dear... You have just attempted to run the SpongeAPI jar file.\n\nPlease Note: This is the binary for the API **ONLY** and running it has absolutely no purpose nor effect.\nIf you wish to use Sponge you will need to locate the correct implementation for the platform you\nwish to run Sponge on.\n\nFor information on the correct process for running sponge please see the documentation:\n\n        Sponge Documentation: https://docs.spongepowered.org/\n\nFor more general information on the Sponge project please see the FAQ:\n\n        Sponge FAQ: https://docs.spongepowered.org/en/faq.html \n```\n",
    "head_branch": "feature/pebkac",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9b5d9087c4d6d37a6ad",
    "number": 489,
    "body": "## Remove `Optional` from `CommandCallable`\n\nI suggest not to use the `Optional` return type in the `CommandCallable` interface.\n\nThe return type is used for the short description and the help message of the command. I think that **every command (and every dispatcher) should have a description and a help message.** Making the messages non-optional encourages the developers to write proper help messages. Help systems can use these messages to create a useful in-game help, which is important for players.\n\nUsually only the Sponge implementation (and third-party help systems) will call the methods of the interface. These systems must check for `null` to prevent NPEs, even when the interface uses `Optional` (plugin developers are lazy, so they use their IDE to generate a \"return null\"-method). \n\nRemoving the `Optional` return type also makes it easier for plugin developers to implement the interface:\n\n``` java\nString getShortDescription() {\n    return \"Displays a message to all players\";\n}\nMessage getHelp() {\n    return Messages.of(\"Displays a message to all players. It has color support!\");\n}\nString getUsage() {\n    return \"<message>\";\n}\n```\n## Formatted help message\n\nThe second change I propose is to use `Message` instead of a string for the longer help message.\nThis allows the use of `\\n` for multiline messages. It also allows developers to embed hyperlinks to the plugin documentation.\n\nThe only flaw I see is that developers can abuse the formatting support (obfuscated, bold, red text).\nI added a few recommendations in the javadoc to stop developers from overusing the formatting features.\n## Add source argument\n\nI also propose to pass a command source to the help methods. This allows the command to return different help messages depending on the permission of the source:\n\n``` java\n//Teleport command /tp [player] <player>\nString getUsage(CommandSource source) {\n    if(source.hasPermission(\"example.tp.other\") \n        return \"[player] <player>\"; //teleport self or other player to target player\n    else if(source.hasPermission(\"example.tp.self\") \n        return \"<player>\"; //only teleport self to target player\n}\n```\n## Add better constructor to `SimpleDispatcher`\n\nThe last change is an optional constructor for `SimpleDispatcher` that sets the help messages of the dispatcher. With this change, plugin developers can setup subcommand structures with detailed help messages without creating a custom dispatcher class.\n",
    "head_branch": "commands-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9b6d9087c4d6d37a6ae",
    "number": 488,
    "body": "This adds a new annotation that can be used for marking various _types_ as _pseudo enumeration types_ such that they have a parent class that contains all registered values of that pseudo enum type.\n\nThis has repercussions of aiding other utility classes such as [`Coerce`](https://github.com/SpongePowered/SpongeAPI/blob/feature/pseudoenums/src/main/java/org/spongepowered/api/util/Coerce.java#L370). \n\nNote: This PR does NOT cover the Text API classes as that is due for changes with #425. \n\nThe primary reason for this change is that since our API has avoided using [Java Enums](http://docs.oracle.com/javase/tutorial/java/javaOO/enum.html) due to their limitation of expandability, we have dozens of interfaces signifying a \"type\" of \"something\". The problem arises when developers wish to find the available \"values\" of that \"type\".\n\nSo, the `CatalogedBy` annotation marks the \"type\" class with a catalog class that contains all default values of that \"type\". Example:\n\n``` java\n@CatalogedBy(Itemtypes.class)\npublic interface ItemType {\n    String getId();\n}\n\npublic final class ItemTypes {\n   public static final ItypeType DIAMOND_SWORD = null;\n   //... and more\n}\n```\n\nWe can therefor do the following:\n\n``` java\npublic <T> T toPseudoEnum(Class<T> annotated, Object random) {\n    Annotation catalog = annotated.getAnnotation(CatalogedBy.class);\n    if (catalog instanceof CatalogedBy) {\n        Class<?> clazz = ((CatalogedBy) catalog).value();\n        // do things with reflection and fields here\n        // eventually finding out if the random is of a type of T\n    }\n```\n",
    "head_branch": "feature/pseudoenums",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9b7d9087c4d6d37a6af",
    "number": 487,
    "body": "This fixes the issue that the `SimpleDispatcher` does not return TAB complete suggestions that were generated by a subcommand.\n",
    "head_branch": "commands",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9b8d9087c4d6d37a6b0",
    "number": 485,
    "body": "Apart from things like `Axis` which aren't Minecraft-specific concepts, any class which would normally be an enum is made into an enum-like class.\n\nThis PR changes `EntityInteractType` to follow this convention, and adds corresponding getter methods to `GameRegistry`.\n",
    "head_branch": "feature/entity-interact",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9b9d9087c4d6d37a6b1",
    "number": 484,
    "body": "- Use BlockState for BlockVolume instead of BlockLoc.\n- Make mutable buffers implement their corresponding access interface (hence the previous change).\n- Use Vector3i instead of Vector3d for block access.\n- Move BlockLoc getters to Extent under the name getFullBlock. Since a BlockLoc requires an Extent, it makes sense that the getters be in Extent instead of BlockVolume (a BlockVolume doesn't necessarily have an Extent).\n\nhttps://github.com/SpongePowered/Sponge/pull/191\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9bad9087c4d6d37a6b2",
    "number": 482,
    "body": "After some thought, I've decided to change `QueryEvent` to a superclass for both `FullQueryEvent`, and the newly created `BasicQueryEvent` (which extend from `QueryEvent` without adding any methods).\n\nThe problem with having `QueryEvent` itself being an event is that any plugin listening for it would also receive any `FullQueryEvent`s. While both basic and full queries have common fields, plugins should be able to treat them as separate events, much like subclasses of `BlockEvent`, for example..\n",
    "head_branch": "feature/improve-query",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9bbd9087c4d6d37a6b3",
    "number": 481,
    "body": "This implements the commonly used [`DataView`](https://github.com/SpongePowered/SpongeAPI/blob/feature/persistence-memory/src/main/java/org/spongepowered/api/service/persistence/data/DataView.java) as a usable data structure that can be used by both implementation and plugins alike. \n\nThis also expands on the Persistence API by creating a usable `SerializationService` that enables the registration of custom serialization for various `DataSerializable`s, this allows for implementations to register `DataSerializableBuilder`s for various things like `ItemStack`s, `Entity`, etc. This can also be used by plugins to enable serialization and deserialization of their own `DataSerializable`s.\n## Design Proposal for a usable Persistence API\n\nMany developers have been eager to use utilities for manipulating Minecraft data with \"NBT API\nUtility Library API Lib Protocol API Minecraft NBT Library\" when in fact, the biggest issue is\nthat none of these \"libraries\" really solved any of the problems of manipulating raw data of\nentities, blocks, etc. and overall, they have many downsides:\n- NBT data is an implementation detail, which involves the developer knowing the (_data format_)\n  and the volatility of the data they're manipulating, which presents the following problems:\n  - Generally, _Minecraft_ has a defined data format for many things that can't be changed due to\n    backwards compatibility\n  - Users of NBT data rely on this as a pseudo _protocol_ but they also depend on this to store\n    their custom data wherever they please as long as it doesn't break the system\n  - Creating custom data involves knowledge of the NBT format and system of how custom data can\n    be stored.\n- NBT itself is an implementation detail. Creating an API based on NBT and the systems using NBT\n  means:\n  - We can't hope to expand the \"customizability\" of the storage systems since any NBT API is\n    entirely at the whim of the _implementation_ of NBT in Minecraft Server.\n### Design Goals\n\nThe aim of Persistence is to address these shortcomings with the following:\n- Design an abstract [data structure](http://en.wikipedia.org/wiki/Data_structure) that\n  facilitates representing any and all data from any source that can be understood by anything\n  using the data structure\n- Add `DataSerializable` as a marker that something _can_ be serialized and deserialized to and\n  from any `DataSource`.\n- Enable utilization of custom `DataSource`s to serialize `DataContainer`s to any storage medium\n  - This allows for world data to be serialized and deserialized to alternative storage mediums\n    like SQL, MongoDB, H2, etc.\n- Create a `SerializationService` that allows dynamic registration of `DataSerializable`s to\n  allow deserialization of `DataContainer` to the instance of `DataSerializable`\n- Facilitate manipulation of `DataSerializable` data with `DataContainer`:\n  - Depending on the `DataSerializable`, the `DataContainer` may be mutable and changes may apply\n    back to the `DataSerializable` instance, other cases may not\n    - Developers can rely on the Persistence API to handle any custom data as necessary\n  - The format of the data stored in a `DataContainer` produced from a `DataSerializable` may\n    change, but that is all _implementation_\n### Let's get Started!\n\nTo begin, we have to entirely forget about NBT and the implementation detail of how Minecraft\npersists data. Got it? Good.\n##### DataSerializable? What's that?\n\nIn traditional Java, there is the [`Serializable`](http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html)\ninterface. `Serializable` basically defines\nthat the implementing object can serialize to any ObjectOutputStream and deserialize from any\nObjectInputStream. This is kinda close to what we want to achieve, but it's not at all the best\nidea since we don't want to have _instances_ of `ItemStack` to deserialize an `ItemStack`.\n\nThis is where `DataSerializable` comes in. It presents itself being able to _serialize_ all of\nits data to a `DataContainer`. The implementation decides the format and content to serialize to\n`DataContainer`, but it is always a usable `DataContainer`.\n##### Ok, but what is a DataContainer?\n\n`DataContainer` is the abstract data structure that is used throughout the Persistence API. It\nallows to storing various data as necessary and can be querried for data with `DataQuery`. The\ncontainer has a default implementation that is backed by a map, but again, that is\n_implementation_ detail.\n##### Fine, but tell me about Serialization!\n\nSo, we've established that we have `DataSerializable`s that serialize their data to\n`DataContainer`s, but how do we use that to store the data to, say, SQL? I present `DataSource`.\n\n`DataSource` is the common man's source for data. It is a representation of a _source_ of data.\nThe implementation of a `DataSource` decides what it can _serialize_ and _deserialize_, since not\n all `DataSource`s are meant to handle all data.\n##### So, I can use a DataSource, but how do I _get_ one?\n\n`DataSourceFactory`. It's also an _implementation_ detail, but it is meant for `DataSource`\nproviders to create, as necessary, `DataSource`s for a particular _source_. Both `DataSource` and\n `DataSourceFactory` are meant to be implemented for any particular cause. It is expected that\n there will be \"Persistence Libraries\" to create various implementations to have\n `MySQLDataSourceFactory` or `AnvilDataSourceFactory`. The `DataSourceFactory` takes in a\n `ConfigurationNode` that defines where the `DataSource` is aimed at.\n##### So now what?\n\nNow, we've established that we can\n- Get a `DataContainer` containing all data from a`DataSerializable`\n- Get a `DataSource` from an implemenation of `DataSourceFactory` to send a `DataContainer` to\n  serialize\n\nBut now we want to **deserialize** a `DataContainer` into a `DataSerializable`.\n##### I present `SerializationService`\n\n`SerializationService` is a \"Service\" registrar for `DataSerializable`s and their respective\n`DataSerializableBuilder`s. In essence, after the game has initialized, various\n`DataSerializable`s should have a `DataSerializableBuilder` registered with the\n`SerializationService`. The service allows for retrieving a `DataSerializableBuilder` that can\ndeserialize a `DataContainer` into an instance of `DataSerializable`. This is integral to the\nPersistence API as it allows for developers to provide their own custom `DataSerializable`\nobjects for serialization and deserialization for any `DataSource` medium.\n##### Is that it?\n\nAs far as Persistence API is concerned, that is the system in a nutshell. Provided that the\nregistration of all `DataSerializable` with its proper `DataSerializableBuilder` is done,\ndevelopers can expect to have minimal issue with creating their own custom `DataSource`s and\ntheir respective `DataSourceFactory`.\n## Usability\n\nThe intended use of Persistence API is not simply to allow modifications being made to the\ninternal data of entities, blocks, etc., it's intended to allow a full API for _persisting_ data.\n\nAs we come to understand, `DataSerializable`s chuck their data into a `DataContainer` for the\ndeveloper to _do anything to their hearts content_.\n\nWhat this API does allow to do is create a `NBTDataSourceFactory` that allows reading and storing\n data backed by Minecraft's NBT format into a still understandable `DataContainer`. The\n `DataContainer` does not always persist to the stored data, but it does allow for manipulating\n raw data presented by the Minecraft persistence service.\n## Features _not_ included in this PR\n\nReading through this description, the following features are intentionally excluded:\n- **NBT API** - As mentioned at the beginning of the description, there is little sense to create\n  an `NBTDataContainer` as NBT itself is just another data structure. The `AnvilChunkLoader` to\n  become an `AnvilDataSource` where it can contain its own methods to read the raw NBT data into a\n  `DataContainer`.\n- Representing custom data belonging to entities, blocks, etc. It isn't within the scope of\n  Persistence to recognize custom data, but it is within the scope of the relative API's to\n  represent custom data. All Persistence aims to achieve is the ability to fetch the raw data as a\n  `DataContainer` from any `DataSerializable`. The format of the data is _implementation_ detail.\n",
    "head_branch": "feature/persistence-memory",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 42ada6eb4380437b19ecce662bc9e59fbf216780 into 10529bfdc559df14b81df5996d72d984730b9836"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e9bcd9087c4d6d37a6b4",
    "number": 480,
    "body": "Better setup for the block and biome buffers\nRename WeatherVolume to WeatherUniverse\nAdd WeatherUniverse to Extent\n\nhttps://github.com/SpongePowered/Sponge/pull/190\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9bdd9087c4d6d37a6b5",
    "number": 478,
    "body": "Continuation of #121 with a few final changes.\n",
    "head_branch": "feature/difficulty",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9bed9087c4d6d37a6b6",
    "number": 475,
    "body": "This PR changes:\n- moving the block.data and event.block.data packages to block.tile\n- renaming TileEntity to Tile?\n- validation methods in Tile\n- `TileVolume` extending from BlockVolume\n- `TileTypes`\n- Missing tiles like `Jukebox`, `FlowerPot`, and `Piston`\n",
    "head_branch": "feature/tile-entities",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge e8caa2707f1c44c7f69081039aec6a13907921cb into 338ab9c53f3cff9c226c212564492a2cc4d01629"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e9bfd9087c4d6d37a6b7",
    "number": 474,
    "body": "This PR creates a new interface, `EntityDisplaceEvent` for `EntityMoveEvent` and `EntityTeleportEvent` to inherit from.\n\nI would also like to add a 'velocity' property to EntityMoveEvent, but that would probably require some input in terms of when the event is fired, and what changing velocity means.\n",
    "head_branch": "feature/entity-displacement",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9c0d9087c4d6d37a6b8",
    "number": 471,
    "body": "See issue https://github.com/SpongePowered/SpongeAPI/issues/439 for a description of the problem.\n\nThis **correctly** breaks the build - many event factories don't specif all the needed parameters to construct an event. The fixes can be added to this PR, or go in a separate one.\n",
    "head_branch": "feature/class-generator-primitive",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9c1d9087c4d6d37a6b9",
    "number": 470,
    "body": "This is an API, based on the Persistence API that allows manipulation of extra data associated with items. (~~And includes a Maps API.~~)\nIt's based on [this](http://minecraft.gamepedia.com/Item_format#Item_structure) and [this](http://minecraft.gamepedia.com/Map_item_format).\n\nWhat needs to be done:\n- Javadocs \n- A good way to create ItemDatas (ItemDataFactory? I don't know.)\n- Figure out what isPublic means on a skull.\n",
    "head_branch": "feature/itemdata",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9c2d9087c4d6d37a6ba",
    "number": 469,
    "body": "Also adds further hierarchy with EntityDisplacementEvent.\n\nThe EntityDisplacementEvent is now considered as an event when an entity can be teleported or moved. The EntityMoveEvent includes information regarding previous velocity and the new velocity.\n",
    "head_branch": "feature/velocity",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9c3d9087c4d6d37a6bb",
    "number": 468,
    "body": "This PR creates a new `ExplosiveProjectile` interface, which represents projectiles such as `WitherSkull`s and `Fireball`s which create an explosion in addition to functioning as `Projectile`s.\n\nFollowing the discussion in issue https://github.com/SpongePowered/SpongeAPI/issues/339, I've decided not to create a separation between block damaging and non block damaging projectiles.\n\nThis resolves https://github.com/SpongePowered/SpongeAPI/issues/339\n",
    "head_branch": "feature/explosive-projectile",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9c4d9087c4d6d37a6bc",
    "number": 467,
    "body": "This PR allows `DamagingProjectile`s to deal variable amounts of damage, depending on the entity hit. An example of this behavior in Vanilla is a blaze taking damage from snowballs, which ordinarily deal no damage.\n\nI've also fixed some minor javadoc issues in `getDamage` and `setDamage`.\n\nThis resolves https://github.com/SpongePowered/SpongeAPI/issues/399\n",
    "head_branch": "feature/projectile-variable-damage",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 7a2fdfcde5b65c7918630d290c33e34459e177e6 into 8e3ddab04f824db1345c18abc4f9c737ba54b873"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e9c5d9087c4d6d37a6bd",
    "number": 466,
    "body": "Achieves the following from the OCD list #221.\n\nFixes #462 \n- [x] `BiomeType` needs a getter for its name\n- [x] `Living` needs a class javadoc\n- [x] `PotionEffect#apply` is questionable and should possibly be moved to Living\n- [x] `EntityBreedEvent` is missing javadoc\n- [x] Missing an `EntityUnleashEvent` to match our `EntityLeashEvent`\n- [x] getFlamable and setFlamable in `ExplosionPrimeEvent` are misspelled\n- [x] Add potion related events\n- [x] `EntityInteractEvent` and children should implement Cancellable\n- [x] `EntityTameEvent` offers no way either to get the tamer\n- [x] EntityTeleportEvent has no velocity methods (for maintaining or changing the velocity of the player after the teleport)\n- [x] `EntityIgniteEvent` getter and setter for fire ticks\n- [x] `EntityEnterPortalEvent` and `EntityLeavePortalEvent`\n- [x] `ExperienceEvent` is missing a javadoc\n",
    "head_branch": "feature/events-enhancement",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 16affdd1746a8b77ca7179cacea7cb32ff9065cf into a5c11a51d28eba667032226946bdc30a708e5b8e"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e9c6d9087c4d6d37a6be",
    "number": 464,
    "body": "I found a few sounds that had been left out the API.\n",
    "head_branch": "sounds",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9c7d9087c4d6d37a6bf",
    "number": 461,
    "body": "This PR proposes changes to reduce the amount of obscurity as to the actual type of primary cause returned from an event by making Cause generic and expanding the Reason system while preserving the functionality of the recursive nature that Causes currently have.\n\nEvents which have had their reasons created for them:\n- `EntityTeleportEvent` -> `TeleportReason`\n- `EntityChangeHealthEvent` -> `HealthChangeReason`\n- `EntityDeathEvent` -> `DamageReason`\n- `PlayerDeathEvent` -> `DamageReason`\n- `EntitySpawnEvent` -> `EntitySpawnReason`\n- `EntityAboutToConstructEvent` -> `EntitySpawnReason`\n\nEvents which have had cause removed:\n- `BlockEvent` -> The cause has been removed from this base event in favor of selectively adding it where applicable to its sub events. (Break/Place events are the ones I'm looking at).\n- `EntityExpireEvent` -> The cause of an entities expiration is just that, expiration.\n- `ProjectileLaunchEvent` -> The cause of a projectile launch is inferred by the included projectile source.\n\nA builder has also been added for the creation of more complex or custom damage reasons.\n\n**Some example reason chains for two of the currently defined reasons:**\n\n`EntitySpawnReason` (currently used in the `EntitySpawnEvent` and `EntityAboutToConstructEvent`)\n- BLOCK_SPAWNING -> `BlockReason`\n- DISPENSE -> `BlockReason`\n- DROPPED_ITEM -> `BlockReason`/`EntityReason`\n- EXPERIENCE -> `BlockReason`/`EntityReason`\n- FALLING_BLOCK -> `BlockReason`\n- MOB_SPAWNER -> `BlockReason`\n- PLACEMENT -> `PlayerReason`\n- PROJECTILE -> `ProjectileSourceReason`\n- SPAWN_EGG -> `BlockReason`/`EntityReason`\n- TNT_IGNITE -> `BlockReason`\n\n`HealthChangeReason` (currently used in the `EntityChangeHealthEvent` and `EntityDeathEvent`)\n- FOOD -> `ItemReason`\n- IN_FIRE -> `BlockReason`\n- LAVA -> `BlockReason`\n- DROWN -> `BlockReason`\n- IN_WALL -> `BlockReason`\n- CACTUS -> `BlockReason`\n- ANVIL -> `EntityReason`\n- FALLING_BLOCK -> `EntityReason`\n",
    "head_branch": "feature/replace-cause",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9c8d9087c4d6d37a6c0",
    "number": 460,
    "body": "This adds [RCon](http://wiki.vg/Rcon) events, as well as an `RConSource`, to the API.\n\nNotable components include:\n- An `RConSource`, which provides the `InetSocketAddress` used by an `RCon` client.\n- Serveral `RCon`-related events:\n  - The base `RConEvent`, which provides the client-supplied ID and payload, as well as the initiating `RConSource`.\n- `RConLoginEvent`, which is fired when an `RCon` client authenticates.\n- `RConCommandEvent`, which is fired when an `RCon` client executes a command. Normally, commands won't be executed unless the client has successfully authenticated. However, an option is provided to override this.\n\nSome additional notes:\n- The request ID is specified with each packet - thus, it is not available from an instance of `RConSource`.\n- Access to the `RCON` password set in `server.properties` is made available through the API. While I feel that this is useful for cases such as allowing multiple correct passwords, @Deamon5550 has raised concerns about malicious plugins taking advantage of this.\n",
    "head_branch": "feature/rcon",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9c9d9087c4d6d37a6c1",
    "number": 458,
    "body": "I have created a new event, `BlockHarvestEvent` see the javadoc. \nThis is the result from a previous PR, #422\n",
    "head_branch": "block-harvest-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9cad9087c4d6d37a6c2",
    "number": 456,
    "body": "Adds two new events to specifically deal with explosives. Fixes #416 \n\n**EntityExplosionEvent**\n\nIs designed for when an explosive entity has detonated and is about to change blocks in the world. \n\n**ExplosionPrimeEvent**\n\nIs designed for when an explosive entity is primed to detonate (pre-explosion).\n",
    "head_branch": "feature/explosion-events",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 3180e3e38e94efcfe790c22c0be61b67c0eaf18a into 3b699788a12f1457d9af8fda3ae1c86beda97c0d"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e9cbd9087c4d6d37a6c3",
    "number": 455,
    "body": "Moving from https://github.com/SpongePowered/SpongeAPI/pull/181 since I'm going to be handling the cleanup. \n\nThis is what I was thinking with the changes I wanted made. @Zidane please take a look at the special case for SimpleCommandService.\n",
    "head_branch": "pr/command-auth-exception",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9ccd9087c4d6d37a6c4",
    "number": 452,
    "body": "Fixes #408 \n\nInstead of using List, use Collection which can return a `Set` or `List` or whatever needed.\n",
    "head_branch": "issues/game-registry",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 64819007bfe14e2e80f1f9b8dea450f3b08aa015 into f78a16a935656e38a720165a095fb4e6c7a6e4b5"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e9ced9087c4d6d37a6c5",
    "number": 451,
    "body": "This change changes BlockLoc to be a delegate like Location. All the methods (set block, get block, etc.) are then implemented on Extent rather than BlockLoc.\n\nThe general consensus the last time that this was discussed (a few months ago) was to implement this change.\n",
    "head_branch": "feature/block-proxy",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9cfd9087c4d6d37a6c6",
    "number": 449,
    "body": "Fixes all current checkstyle warnings in the API and sets it to break the build when violations are found so we can keep the master branch clean from new warnings in the future.\n\nI've also updated the IDE code style configurations to be more exact to the Google style and added a cleanup profile for Eclipse.\n",
    "head_branch": "minor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9d0d9087c4d6d37a6c7",
    "number": 445,
    "body": "This PR just adds a bunch of missing ability to modify Entities, TileEntities, and Players. It still needs some discussion. It also does a large refactor to the Player hierarchy, which is not complete (at the time of posting).\n",
    "head_branch": "feature/game-object-api-completeness",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9d1d9087c4d6d37a6c8",
    "number": 443,
    "body": "This pull request encapsulates a proposal for an Inventory API for Sponge. At the core it is based upon #242 by @gratimax but is revised and expanded to include the proposition outlined below. Please read all of this document before commenting on design specifics within this PR.\n\nThis is my first PR to the API side of things so be gentle.\n## Design Proposal for a Queryable Unified Inventory API\n\nMany of the proposed systems for dealing with inventories in Sponge have been very close to the underlying Minecraft implementation of inventories, there are a number of drawbacks with this model:\n- Inventory topology is bifurcated into \"Inventories\", generally describing an actual container (the _Model_), and \"Containers\" which present a code-facing view of one or more \"Inventories\" (the _ViewModel_). Which has its own problems:\n  - Generally the physical layout of the Inventory and the physical layout of the Container are not contractually linked in any meaningful way.\n  - The terminology when referring to one or other of these constructs gets very wooly very quickly (especially with Containers that have a 1:1 mapping of \"slots\" to underlying Inventory position).\n  \n  The _View_ in this instance (taking MVVM as our template) is a client-only user-facing object responsible for displaying the Container to the user.\n- Working with different types of inventory requires prior knowledge of the inventory's internal layout (interface is coupled invisibly to implementation) because there is no way to obtain _meta_ information about a specific Inventory or Container. This means that:\n  - consumers have to deal with the characteristics of specific inventories, and any code which wants to deal with different types of inventory must do so by handling each inventory type directly\n  - This makes the API extremely brittle and not particularly extensible, since any types of inventory which are not _known about in advance_ cannot be efficiently interacted with\n  - Code which consumes the inventory API is _forced_ to make assumptions which must then be forcibly invalidated (for example by throwing an exception) should the underlying behaviour of a particular inventory change. eg. the same brittleness applies to \"built in\" inventories as to mod-provided inventories over time and there is no way to deal gracefully with this.\n  - In other words, assumptions _have_ to be made, but there is no programmatic way for a consumer to _validate_ those assumptions prior to operation\n- Because of the blurring of the distinction between Inventory and Container, functionality is cross-contaminated between the two concepts, and this lack of separation of concerns tends to (in turn) pollute any API which tries to faithfully replicate it.\n### Design Goals\n\nThe aim of this proposal is to address these shortcomings in the following ways:\n- Devise an API where _describing_ an Inventory is a core aspect of interacting with an Inventory, essentially making Inventories _aspect-oriented_.\n- Provision for extensibility by allowing consumers to _query_ an Inventory for the particular _aspect_ they are interested in, and manipulate the inventory via the results of their queries.\n- Create a clear separation between Inventory and Container concepts but acknowledge their overlaps, by making Container essentially another aspect that an Inventory can have.\n### Starting Assumptions\n\nAs Morpheus famously said to Neo: _\"free your mind\"_.\n\nTo begin talking about a new structure for Inventory interaction, it's necessary to forget everything you currently understand about Inventories. Done that? Okay, let's start with the basic concepts.\n#### Common Inventory Operations\n\nIf we make **no other assumptions** about an inventory, we can essentially begin by declaring that, in many ways an Inventory exhibits the same behaviour as a `Queue` in that we can add items to the Inventory, consume items from the Inventory, and get the underlying capacity of the Inventory.\n\n``` java\ninterface Inventory {\n    /**\n     * Get and remove the first available stack from this\n     * Inventory\n     */\n    public abstract Optional<ItemStack> poll();\n\n    /**\n     * Get without removing the first available stack from this\n     * Inventory\n     */\n    public abstract Optional<ItemStack> peek();\n\n    /**\n     * Try to put an ItemStack into this Inventory. Just like\n     * Queue, this method returns true if the Inventory accepted\n     * the stack and false if not, the size of the supplied\n     * stack is reduced by the number of items successfully\n     * consumed by the Inventory.\n     */\n    public abstract boolean offer(ItemStack stack);\n\n    /**\n     * The number of stacks in the Inventory\n     */\n    public abstract int size();\n\n    /**\n     * The maximum number of stacks the Inventory can hold\n     */\n    public abstract int capacity();\n}\n```\n\nNote that our base implementations of `poll` and `offer` don't provide any position information, this is because we are not making any other assumptions about the structure of the Inventory at this point. While this might seem like an odd baseline, it begins to make sense when we consider that with a query-based Inventory API, we will be returning inventories which fall into one of the following three categories:\n- **Empty Inventory** - to provide for a fluent interface we don't want to return null, the **Empty Inventory** will be our representation of an _empty result set_.\n- **Single-Stack Inventory** - an `Inventory` with a single stack is effectively a `Slot`. By keeping the `Inventory` interface simple enough that a `Slot` can reasonably extend it, we have simple unified way of a query returning anything from an entire Inventory, to a specific set of matching slots, to a single slot containing an Item we're looking for.\n- **Multi-Stack Inventory** - other inventories which can contain more than a single stack.\n#### Basis and Purpose of Queries\n\nBefore we look at how queries can work, let's first take a look at a simple use-case to understand the purpose of queries in the first place.\n\nThe `PlayerInventory` class actually encompasses several groups of inventory slots we may be interested in. These groups are internally (physically) separated into two arrays: the **Main Inventory** and the **Armour Inventory**. The **Main Inventory** comprises both the hotbar area (the 9 inventory slots always displayed on the screen) and the rest of the player's main inventory. Representing this as a basic Venn Diagram we see:\n\n![](http://eq2.co.uk/pr/inv/playerinv.png)\n\nWhen working directly with Minecraft, the two inner inventory arrays are available directly as public members of the `InventoryPlayer` class. However some additional functionality is available which supports both the _ViewModel_-esque contract required by Containers and also some additional convenience functions for working with only the hotbar slots. Some notable drawbacks with this mixing of concerns is that the following become apparent when working with the `PlayerInventory`:\n- Some methods treat the slots within the inventory as a contiguous set, and treat the **Armour Inventory** as indices beyond the **Main Inventory** indices whereas other code does not, this presents an inconsistent external interface.\n- Conversely, some methods only deal with the hotbar slots, and not the rest of the Inventory\n- No distinction is made between any positions in the inventory, thus external code has to \"know\" the meaning of slot indices within the Inventory in advance. _(A problem not confined to the `InventoryPlayer` class)_\n\nIt should be noted that this scenario is far from unique amongst inventories, and only gets worse when dealing with Containers. For example let's take a look at a container which you're likely to be very familiar with, `ContainerPlayer`:\n\n![](http://eq2.co.uk/pr/inv/playercontnr.png)\n\nThis container presents a View of 3 separate Inventories (essentially ViewModels) which in turn represent 4 distinct underlying arrays of slots (essentially the underlying Models).\n\nYou may find yourself asking _\"so what the hell does all this have to do with queries?\"_ and that's a fair question. Ultimately we have 3 ways of dealing with this mess in order to improve it from the point of view of API consumers:\n1. Abstract the hell out of things. Provide \"sensible\" external interfaces and break everything down into small logical units which hide the underlying horribleness.\n   - **Pros:**\n     - easy to work with from a consumer's point of view\n     - hides all the horrible internals\n   - **Cons:**\n     - nasty to maintain (if anything in the implementation changes then the abstraction could get more and more complex)\n     - hard to extend (mod inventories and and kind of custom inventory are hard to work into this model because the abstractions themselves are \"hard coded\")\n     - makes simple operations more complex than they need to be (consumers need to explicitly dig through layers of abstraction to get to what they want)\n     - doesn't actually **add** any value, just hides all the nastiness\n2. Expose the underlying horribleness but provide a metadata system which assigns meaning to the exposed data structures, such as allowing a \"range\" of slots to be described.\n   - **Pros:**\n     - doesn't add much overhead\n     - keeps people who are used to the old system happy\n     - provides added value in terms of some meta information about the meanings of slots\n   - **Cons:**\n     - just as brittle as the underlying impementation\n     - doesn't provide any useful abstraction\n3. _(Using queries)_ Make metadata an intrinsic part of the API and allow consumers to stipulate exactly what part of an inventory they _mean_ by accessing inventory _via the metadata using queries_:\n   - **Pros:**\n     - All the advantages of both option **1.** and **2.** (the underlying representations without metadata are _still accessible_ via casting down - see implementation details below)\n     - Consumers only ask for what they need, they never need to care about what _type_ of Inventory or Container they're dealing with, only the results of a query\n     - Intrinsically extensible - the nature of queries makes it easy for third-party extensibility without removing the ability to do simple `instanceof`-and-cast operations which would have been _required_ before.\n   - **Cons:**\n     - May be difficult for consumers to adjust to the new model (although the nature of the implementation means that stick-in-the-muds can still use the old model if they're foolhardy enough)\n     - Underlying implementation is more complex than other systems _(however it should be noted that all the complex logic will be handled in the initial implementation, and that ongoing **maintenance** of the system will actually be **simpler**)_\n\nPresented with the options it's clear that option 3, using queries has merit.\n#### Goals for a Query-based implementation\n\nFundamental to the concept of querying Inventories is the basic premise that:\n- An **Inventory** is a **View** of **one or more \"sub inventories\"**\n- An **Inventory** and its **sub inventories** exist in a **parent-child** relationship\n- An **Inventory** is thus a **View of Views** with arbitrary depth\n\nIn the `InventoryPlayer` example above, the relationship of the Inventory to its notional sub-inventories is as follows:\n\n![](http://eq2.co.uk/pr/inv/invhierarchy.png)\n\nThe main idea of queries is that given an unknown `Inventory` instance, it should be possible to query for any sub-inventory or combination of matching sub-inventories, with the query returning either all sub-inventories which match the query, or an empty set if no sub-inventories matched the query.\n\nIt's useful to bear in mind that our above definition of `Inventory` essentially means that everything can be represented as an `Inventory` right down to `Slot` (defined as an `Inventory` with only a single position) and thus a more helpful representation when considering what can be returned by a query is the following:\n\n![](http://eq2.co.uk/pr/inv/invhierarchydeep.png)\n\nWe're now in a position to specify what a **query** should actually return:\n- A **Query** should return all **Sub Inventories** of the **Inventory** which match the supplied **criteria**\n- If a **sub inventory** is **included** in the results set, its **parent** will **not be**\n- A query will **never return a null** result, it will return an **Empty Inventory** object.\n- A query will **never return duplicate** entries\n\nWhich produces as a consequence some assumptions for `Inventory` itself:\n- The **result** of a query is always an `Inventory`\n- An `Inventory` is `Iterable<Inventory>` and the returned iterator traverses the child nodes of the Inventory's hierarchy\n- An `Inventory`'s leaf nodes should also be traversable via a method which returns an `Iterator`\n\nTo give some examples, based on the hierarchy above:\n- A query for an imaginary `Hotbar.class` should return the Hotbar inventory\n- A query for `ItemTypes.TNT` should return an Inventory with all of the slots containing TNT\n- A query for the imaginary `InventoryRow.class` should return each row in the Main Inventory and the Hotbar\n\nWhich produces the following assumptions:\n- When performing a query, if an `Inventory` matches the query directly, it should return itself\n- When performing a query, an `Inventory` should perform a depth-first search of its hierarchy. A matching child node will remove its parent from the results set if present.\n- If no children match the query, the query should return an `EmptyInventory`.\n- If all direct children match the query, the query should return the parent _(eg. if all InventoryRow children within an InventoryGrid match the query, then the InventoryGrid is returned)_\n\nWe now have enough information to begin formulating our query interface.\n### Inventory methods for query results\n\nSince the result of a Query will always be an `Inventory`, we add some decoration and methods to our `Inventory` interface. Firstly, we have the `Inventory` extend `Iterable<Inventory>` as planned. Next we add a method for iterating the leaf nodes of our `Inventory` and a convenience function for checking whether the `Inventory` has no slots:\n\n``` java\ninterface Inventory extends Iterable<Inventory> {\n    //\n    // ... code code code (see above) ...\n    //\n\n    /**\n     * Returns an iterable view of all slots, use type specifier to\n     * allow easy pseudo-duck-typing\n     */\n    public abstract <T extends Inventory> Iterable<T> slots();\n\n    /**\n     * Returns true if this Inventory contains no children\n     */\n    public abstract boolean isEmpty();\n}\n```\n\nDepending on requirement, we **may** also wish to add some convenience methods to work with `Inventory`s which are result sets, for example\n\n``` java\n    /**\n     * Return the first child inventory, effectively the same as\n     * Inventory::iterator().next() but more convenient when we are\n     * expecting a result set with only a single entry. Also use type\n     * specifier to allow easy pseudo-duck-typing. If no children, then\n     * returns this.\n     */\n    public abstract <T extends Inventory> T first();\n\n    /**\n     * Return the next sibling inventory, allows traversing the inventory\n     * hierarchy without using an iterator. If no more children, returns\n     * an EmptyInventory.\n     */\n    public abstract <T extends Inventory> T next();\n```\n### Inventory methods for executing queries\n\nIt is anticipated that the full scope and possibilities of queries will only become apparent in time, and also that the initial system should be sufficiently extensible to support quite a wide scope of potential queries. However the basic query types which should be in the initial release are:\n#### Query by type\n\n``` java\npublic abstract <T extends Inventory> T query(Class<?>... types);\n```\n\nQuery for sub-inventories matching the specified interfaces/concrete classes (effictively an `instanceof` check). Multiple classes can be specified and logical `OR` will be applied.\n\n**Example 1:**\n\n``` java\nInventory inv = ...; // An unknown inventory\nPlayerInventory pinv = inv.query(PlayerInventory.class).first();\n```\n\n**Example 2: Logical AND** _(querying the result of a query)_\n\n``` java\nInventory inv = ...; // An unknown inventory\nHotBar hotbar = inv\n    .query(InventoryRow.class)\n    .query(HotBar.class).first();\n```\n#### Query by contents\n\n``` java\npublic abstract <T extends Inventory> T query(ItemTypes... types);\n```\n\nQuery for slots containing `ItemStack`s with items of the specified type. A logical `OR` applied between query operands.\n\n**Example:**\n\n``` java\nInventory inv = ...; // An unknown inventory\nInventory slotsWithTNT = inv.query(ItemTypes.TNT);\nif (!slotsWithTNT.isEmpty()) {\n    // found slots with TNT!\n}\n```\n#### Query by property\n\nAs well as defining a (possibly multi-dimensional) hierarchy of sub-inventories, it is anticipated that some sub-inventory types will tag their members with additional data which can be used to include them in queries. For example, let's assume that we have a `GridInventory` interface:\n\n``` java\n/**\n * MetaInventory(?) stores arbitrary properties for child inventories\n */\ninterface MetaInventory extends Inventory {\n    /**\n     * Get a property defined in THIS inventory for the specified\n     * (immediate) sub-inventory.\n     */\n    public abstract <T extends InventoryProperty> getProperty(Inventory child, Class<T> property);\n}\n\n/**\n * This type of inventory arranges its children in a grid.\n */\ninterface GridInventory extends MetaInventory {\n    /**\n     * Get the number of rows in the grid\n     */\n    public int getRows();\n\n    /**\n     * Get the number of columns in the grid\n     */\n    public int getColumns();\n\n    /**\n     * Get the X/Y position of the specified slot. The InventoryPos\n     * class extends InventoryProperty and thus this method is just a\n     * convenience method which effectively calls:\n     * \n     *    this.getProperty(slot, InventoryPos.class);\n     */ \n    public abstract InventoryPos getSlotPos(Inventory slot);\n}\n```\n\nAssuming that `InventoryPos` extends some ficticious base class `InventoryProperty`, we now have a mechanism for querying by any arbitrary properties we care to define:\n\n``` java\npublic abstract <T extends Inventory> T query(InventoryProperty... props);\n```\n\nQuery for sub-inventories where the specified property is set and `.equals()` the supplied properties. Logical `OR` is applied between operands.\n\n**Example:**\n\n``` java\nInventory inv = ...; // An unknown inventory\nInventory slots = inv.query(new InventoryPos(2, 2)).first();\n```\n#### Query by name\n\nSince in the real world, `Inventory` classes are always nameable, we can use a `String` overload to query by name:\n\n``` java\npublic abstract <T extends Inventory> T query(String... names);\n```\n#### Query by arbitrary operands\n\nTo promote extensibilty, even where completely unknown Inventories are in play, we should also include a general query interface which will allow arbitrary queries to be executed:\n\n``` java\npublic abstract <T extends Inventory> T query(Object... args);\n```\n\nQuery for sub-inventories using an arbitrary check defined by the inventory class in question.\n\n**Example:**\n\n``` java\nInventory inv = ...; // An unknown inventory\nSomeObject someObject = ...; // Something\nInventory result = inv.query(someObject); // ???\n```\n### Multi-Dimensional Query Model\n\nSo far, for simplicity we have outlined a straightforward hierarchical model of the inventory. However it is not the intention that underlying implementations should adopt such a simple model. To facilitate querying by dimensions, we can represent underlying sub-inventories in as many different dimensions as we like, and allow queries to return corresponding views. For example we can expand our simple example above to allow the Inventory to be queried by column:\n\n![](http://eq2.co.uk/pr/inv/invhierarchymulti.png)\n\nIn this example the `InventoryGrid` contains both row and column sub-Inventories. This is by no means the limit of what can be represented by further dimensions. However note that one tree should always be considered the _master_ view (a notional appellation), a traversal of which visits each leaf node in a deterministic order which is the iteration order as experienced by `slots()`.\n\nEssentially every Inventory should have a deterministic _spanning tree_, whose depth-first traversal will be the primary iteration order of the leaf nodes. This order is left to implementors to decide upon. Here is an example for the inventory structure shown above.\n\n**Example Spanning Tree for the Player Inventory**\n![](http://eq2.co.uk/pr/inv/invhierarchyspanning.png)\n\n**Example traversal of the Spanning Tree**\n![](http://eq2.co.uk/pr/inv/invhierarchytraverse.png)\n### Implications for Intended Usage\n\nSo far we have seen how queries can work in general, the main goals of incorporating queries into the API are to change the general way that consumers interact with Inventories. Without queries, a typical interaction with an Inventory might take place as follows:\n1. Consumer obtains an Inventory instance from an API object. The inventory is of a known type - eg. a `PlayerInventory` is obtained from a `Player` because it is advertised by the object.\n2. Knowing the type of inventory, the consumer performs some operations on the inventory: for example moving items from the main inventory to the hotbar, or consuming items from the inventory.\n\nNow if the same code wishes to interact with a different type of Inventory, the code has to be adapted or rewritten, even if the other inventory has substantially the same behaviour or characteristics.\n\nWith a query-based approach, the interaction takes place as follows:\n1. Consumer obtains an Inventory instance from an API object. The inventory is not a specialised type, the return type of the getter is simply `Inventory`.\n2. The consumer queries for the inventory characteristics it requires, for example it queries for all `InventoryRow`s\n3. The consumer interacts with the returned rows, or can simply skip processing if the query returns an empty set.\n\nIf the same code wishes to interact with a different type of Inventory, it can do so as long as the Inventory has `InventoryRow` children.\n\n> **SIDE NOTE**\n> Consider porting of old code. Old code may simply (as a stop-gap) wish to obtain the `PlayerInventory` and manipulate it directly, without any queries. With queries this is still supported as long as `PlayerInventory` is provided as an interface in the API. Consumers wishing to perform legacy interactions can either:\n> 1. Query directly for the `InventoryPlayer` interface _(this works because of assumption 1 of queries - if an inventory matches a query it simply returns itself)_\n> 2. Use an `instanceof` check followed by a type cast\n> \n> This provides a convenient way for legacy code to be ported quickly to the new system, and transition to a full query-based implementation at the convenience of the plugin author.\n\nTaking the intended usage into account, we can deduce some additional characteristics our API should have:\n- Any API object which has an Inventory should simply return `Inventory`, with no requirement to return a particular subinterface\n- Consumers should _always_ obtain `Inventory` subclasses by querying for them (either directly or via `instanceof` check)\n- Specific Inventory subinterfaces should still be provided within the API in order to satisfy queries, however they should not generally be returned and different implementations are therefore at liberty to select whichever interfaces they wish to implement - in other words there is no hard rule that says a `PlayerInventory` must have `InventoryRow`s as children for example, the query model means that this is purely optional and the only negative effect would be that consumers expecting such a structure would not be able to perform their operations.\n  \n  This works in both directions however, and while it is expected that all implementations will likely follow similar conventions (in order that queries can be relied upon across platforms), it's also possible that some implementations will be able to innovate, and extend their capabilities without in any way breaking backward compatibility.\n  \n  The implication of all this is that the shape and design of the underlying Inventories is thus free to follow a logical representation of the underlying game _without_ at any point breaking backward compatibility.\n- This in turn leads us to the conclusion that the number of \"specific\" inventories should be kept to a minimum, and general-purpose Inventory interfaces should be used wherever possible. The general-purpose Inventory interfaces should essentially represent _characteristics_ of inventories, with little regard for specific Inventory types.\n### Relationship with Containers\n\nIt should be clear by now that a query-based model also solves the Container problem. By acknowledging that the line between Inventory and Container can often be blurry, we can treat Containers as Inventories for the most part (since we have essentially turned Inventory into a ViewModel at this point anyway, and all a Container really is is a ViewModel) and simply have them exist as yet another type of SubInventory interface.\n## Features _not_ included within this PR\n\nTaking a longer view, the following features are worthy of consideration\n- **Inventory Transactions** - basically SQL transactions but for Inventories allowing _commit_ and _rollback_ operations\n- **Aggregate Inventory Operations** - basically SQL join for queries, such that a logical union of inventories can be created and subsequently queried and operated upon as if it were a single inventory. _This isn't too hard to do I just don't have sufficient time to flesh it out_.\n- **Atomic Multi-Inventory Operations** - as a poor second choice to full-blown transactional behaviour, having atomic operations (get-stack-from-first-inventory, deposit-in-second) would still be useful.\n- **Cookies** - congratulations, if you read this far you get a cookie _(Not a real cookie, an imaginary one. What? You think I'm made of cookies or something?)_\n",
    "head_branch": "feature/inventory",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9d2d9087c4d6d37a6c9",
    "number": 440,
    "body": "This PR improves the Player and Human interfaces. Most notably, it refactors the food and experience APIs and improves documentation. It also adds methods pertaining to movement mechanics.\n\nIt is implemented by [Sponge-164](https://github.com/SpongePowered/Sponge/pull/164).\n",
    "head_branch": "feature-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9d3d9087c4d6d37a6ca",
    "number": 438,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9d4d9087c4d6d37a6cb",
    "number": 437,
    "body": "This PR adds a `CommandBlockSource` to act as the specific `CommandSource` for CommandBlock tile entities and MinecartCommandBlock entities.\n\nThe related implemenation PR for this is SpongePowered/Sponge#162.\n",
    "head_branch": "feature/commandblocksource",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9d5d9087c4d6d37a6cc",
    "number": 433,
    "body": "This solves #391, and has been discussed there, including implementation.\n",
    "head_branch": "feature/tablist",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9d6d9087c4d6d37a6cd",
    "number": 431,
    "body": "This adds factories for creating subclasses of `PlayerFishEvent`\n",
    "head_branch": "feature/fishing-event-factories",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge e4e4c9dd7240e5c47e98a1208e95a87e8347f26f into a0adddebd8977883825919321243fa377b4e17ad"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e9d7d9087c4d6d37a6ce",
    "number": 430,
    "body": "this PR swaps out the configuration wrapper class with an easier to use library for manipulating hocon configurations.\n",
    "head_branch": "feature/configurate",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9d8d9087c4d6d37a6cf",
    "number": 425,
    "body": "Big thanks to @Minecrell for his work here. I just wanted to get a PR to resolve this ASAP and get it merged.\n\nSome new features:\n- Name of Message/Text has finally been decided on. It will be Text, with Message.Text being Text.Literal\n- The generic getContent method has been removed\n- A lot of the factory methods have been moved to GameRegistry\n- Some more Translatable interfaces\n- Javadocs\n\nThis fixes #287, #263 and #435.\n",
    "head_branch": "feature/text",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9d9d9087c4d6d37a6d0",
    "number": 424,
    "body": "As the title states, several projectiles don't actually deal damage.\n\nFixes #400 \n\nChanges include:\n- [x] Firework is now a `FusedExplosive`\n- [x] Arrow is a `DamagingProjectile`\n- [x] Egg is a `DamagingProjectile`\n- [x] FishHook hooks `Entity` and not `ItemStack` and is a `DamagingProjectile`\n- [x] Fireball is a `DamagingProjectile`\n- [x] Snowball is a `DamagingProjectile`\n- [x] Projectile no longer deals damage\n\nThis also fixes `EyeOfEnder` no longer damaging per say, but still remaining a `Projectile` for the intent of having a shooter.\n",
    "head_branch": "feature/projectile-refactor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9dad9087c4d6d37a6d1",
    "number": 423,
    "body": "Comments addressed from API PR #407, Impl PR SpongePowered/Sponge#151.\nRedo branch because of user error in previous branch.\n",
    "head_branch": "feature/scheduler3",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9dbd9087c4d6d37a6d2",
    "number": 422,
    "body": "If Sponge is going to work with Forge mods, it will need to allow for a location/player sensitive way of testing whether a block can be harvested with silk touch.\nAs @diesieben07 said in #minecraftforge, a mod may only allow a block to be harvested if the player has been playing for a certain amount of time, or it may depend on what tile entity data the block has etc.\n\nThis PR changes the API to be more like vanilla where the method is on the block, not the enchantment. `BlockLoc` is a more appropriate place than `BlockType` in this case.\n",
    "head_branch": "change-silk-touch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9dcd9087c4d6d37a6d3",
    "number": 421,
    "body": "",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9ddd9087c4d6d37a6d4",
    "number": 420,
    "body": "Fixes #256 \n\nThe previous API did not specify whether `ChunkIterator` would be blocking on the main thread and provided little ways to read specific chunk data.\n\nThis adds the ability to get a specific `Chunk`s data via asynchronous [`ListenableFuture`](https://code.google.com/p/guava-libraries/wiki/ListenableFutureExplained) and aids in refining the asynchronous nature of `ChunkDataStream`.\n",
    "head_branch": "feature/chunk-data-stream",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9ded9087c4d6d37a6d5",
    "number": 415,
    "body": "It's a bit weird, due to the notchcode involved in the MC implementation, but it should work. \nA description of a forge implementation: http://pastebin.com/jFJK1JbP \\\n",
    "head_branch": "feature/resourcepacks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9dfd9087c4d6d37a6d6",
    "number": 414,
    "body": "This PR adds `Player` and `Human` versions of the following events (e.g `PlayerRetractFishingLineEvent`):\n- `FishEvent`\n  - `CastFishingLineEvent`\n  - `HookedEntityEvent`\n  - `RetractFishingLineEvent`\n",
    "head_branch": "fishing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9e0d9087c4d6d37a6d7",
    "number": 413,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9e1d9087c4d6d37a6d8",
    "number": 412,
    "body": "This is a continuation of #302, using the current changes that @hedgehog1029 has made.\n",
    "head_branch": "feature/bans",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9e2d9087c4d6d37a6d9",
    "number": 411,
    "body": "In the current API there is no ability to retrieve the world a block resides in. This PR adds this ability which is helpful for plugins that rely on checking blocks and their location.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9e3d9087c4d6d37a6da",
    "number": 410,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9e4d9087c4d6d37a6db",
    "number": 409,
    "body": "Apparently github does not allow you to change the head fork after creating a PR, so i closed it and remade this one.\n\nThis slightly modifies the command interfaces to allow for more variety in command systems, and adds a more featured default command system The features it will introduce to it are:\n- Allows use of /plugin:command in a less hacky way.\n- Allows plugins to register conflicting commands, and resolves those conflicts when the command is sent.\n- Removes the callback feature from command registration as it is no longer neccessary due to the above change.\n- Allows use of /mc or /minecraft:command to run vanilla commands [NYI]\n- Creates an API that may be used to set certain aliases to point to certain plugins in the command system.\n\nIt is based on EvilSeph's old blog post [here](http://evilseph.com/post/75608917830/bukkit-supporting-minecraft-commands).\n\nDue to configuration files not yet having a standard format yet, I will only create an API that allows the command configuration described in the blog post to be implemented, but this PR does not include the actual implementation of the configuration file. \n\nI still need help with: a good way to wrap vanilla/sponge commands into the existing system. maybe some kind of VanillaPluginContainer/SpongePluginContainer as wrappers so the command system can use them? \n",
    "head_branch": "feature/dynamic-commands",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9e5d9087c4d6d37a6dc",
    "number": 407,
    "body": "So spaketh ZIdane: <Zidane> F*($ing gorgeous, scheduler works wonderfully\n",
    "head_branch": "feature/async-scheduler2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9e6d9087c4d6d37a6dd",
    "number": 406,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9e7d9087c4d6d37a6de",
    "number": 405,
    "body": "Selectors need a bit of improvement, as noted by @Minecrell and by me on #355. Still a work in progress, but please comment on the arguments draft as I'm sure it needs improving.\n",
    "head_branch": "feature/improve-selectors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9e8d9087c4d6d37a6df",
    "number": 404,
    "body": "Selectors need a bit of improvement, as noted by @Minecrell and by me on #355. Still a work in progress, but please comment on the arguments draft as I'm sure it needs improving.\n",
    "head_branch": "feature/improve-selectors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9e9d9087c4d6d37a6e0",
    "number": 403,
    "body": "Solves #372. \nI wish I had a more detailed description, but I can't really think of anything to write. [This](http://minecraft.gamepedia.com/Attribute) page describes how attributes work. The only remaining issue right now is that i'm not sure of the best way to remove attributes from entities. Please discuss in the comments.\n",
    "head_branch": "feature/attributes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9ead9087c4d6d37a6e1",
    "number": 401,
    "body": "This PR adds an event which is fired when Vanilla attempts to merge two `Item`s together.\n\nMerging occurs when two `Item`s are within 0.5 blocks in either the X or Z axis.\n\nThis event allows plugins to detect and cancel `Item` merging.\n",
    "head_branch": "item_merge",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9ebd9087c4d6d37a6e2",
    "number": 397,
    "body": "This fixes all currently known OCD issues in #221 as well as fixing a few minor issues in the API related to Chunks, Horses, and Squid.\n",
    "head_branch": "feature/ocd-fixes-1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9ecd9087c4d6d37a6e3",
    "number": 396,
    "body": "Only golems and animals are leashable in vanilla, However other entities are still able to be leashed if forced.\n\nI propose that an entity _other_ then what is leashable in vanilla is an implementation specific detail, and should not be included in the API.\n\nHowever, due to leashable being it's own interface, anyone that wishes to may attempt to cast an not listed as leashable in the API as leashable in order to test whether it happens to be leashable as an implementation detail. This would allow for mods/other server implementations to make anything leashable, whilst leaving room for the sponge mod to refuse to support entities which are currently leashable but not listed as such in the API at any time.\n",
    "head_branch": "leashable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9edd9087c4d6d37a6e4",
    "number": 395,
    "body": "This is pretty self explanatory but just to elaborate.\n\nSitting needs to extend Tameable as Sitting can only be accomplished by a Tameable animal.\nTameable needs to extend Animal.\nSquid only needs Aquatic as it is not an Animal in Minecraft.\n\nThis should fix a few issues that would have arisen if not sorted now.\n",
    "head_branch": "Entities",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9eed9087c4d6d37a6e5",
    "number": 394,
    "body": "The Guava library provides a set of tools in its \"util.concurrent\" package that, I believe, could be of great use to plugin developers.\n\nIn Bukkit, if a developer wanted to, for example, retrieve information from a database asynchronously then do something with it synchronously, he/she would have to jump back-and-forth using something that resembles the following:\n\n```\nrunAsyncTask(new Runnable() {\n    try {\n        final String x = getSomeData();\n        runSyncTask(new Runnable() {\n            void run(){\n                getLogger().info(x);\n            }\n        });\n    } catch (final SomethingTerrible e) {\n        runSyncTask(new Runnable() {\n            void run(){\n                getLogger().info(e.getMessage());\n            }\n        });\n    }\n});\n```\n\nUsing Guava's ListenableFuture, we can instead use...\n\n```\nPluginContainer container = getContainerFromSomewhere();\nAsynchronousScheduler async = game.getAsyncScheduler();\nSynchronousScheduler sync = game.getSyncScheduler();\n\nTask<String> task = async.runTask(container, new Callable<String>() {\n    @Override\n    public String call() throws Throwable {\n        return getSomeData();\n    }\n}).get();\n\nFutures.addCallback(task.getFuture(), new FutureCallback<String>() {\n    @Override\n    public void onSuccess(String result) {\n        getLogger().info(result);\n    }\n\n    @Override\n    public void onFailure(Throwable t) {\n        getLogger().info(t.getMessage());\n    }\n}, sync.getExecutorService(container));\n\n```\n\nWith Bukkit's system, code could become difficult to follow, especially if you needed to jump back-and-forth multiple times.\nWith ListenableFuture, we can simply listen for the completion of the task then do something with the information it returns.\n\nImplementation side will come soon!\n",
    "head_branch": "feature/listening-schedulers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9efd9087c4d6d37a6e6",
    "number": 392,
    "body": "Fixes all issues currently listed in #221 \n\nSome credit goes to the authors of PR's that did one or two fixes.\n\nOn the issue \"Move remaining type getters to `GameRegistry`\", there are some things that may or may not be moved, please suggest whether the getters in the following classes should be in `GameRegistry`:\n- ~~[`LivingMetaFactory`](https://github.com/SpongePowered/SpongeAPI/blob/master/src/main/java/org/spongepowered/api/entity/living/meta/LivingMetaFactory.java)~~ All methods exist in GameRegistry\n- ~~[`VillagerFactory`](https://github.com/SpongePowered/SpongeAPI/blob/master/src/main/java/org/spongepowered/api/entity/living/villager/VillagerFactory.java)~~ All methods exist in GameRegistry\n- ~~[`TextStyles`](https://github.com/SpongePowered/SpongeAPI/blob/master/src/main/java/org/spongepowered/api/text/format/TextStyles.java)~~ Need to decide on factories first\n- ~~[`TextColors`](https://github.com/SpongePowered/SpongeAPI/blob/master/src/main/java/org/spongepowered/api/text/format/TextColors.java)~~ Need to decide on factories first\n- ~~[`ChatTypes`](https://github.com/SpongePowered/SpongeAPI/blob/master/src/main/java/org/spongepowered/api/text/chat/ChatTypes.java)~~ Need to decide on factories first\n- ~~[`TextActions`](https://github.com/SpongePowered/SpongeAPI/blob/master/src/main/java/org/spongepowered/api/text/action/TextActions.java)~~ Need to decide on factories first\n- ~~[`Messages`](https://github.com/SpongePowered/SpongeAPI/blob/master/src/main/java/org/spongepowered/api/text/message/Messages.java)~~ Need to decide on factories first\n- ~~[ `Selectors`](https://github.com/SpongePowered/SpongeAPI/blob/master/src/main/java/org/spongepowered/api/text/selector/Selectors.java)~~ Need to decide on factories first\n- ~~[`SelectorTypes`](https://github.com/SpongePowered/SpongeAPI/blob/master/src/main/java/org/spongepowered/api/text/selector/SelectorTypes.java)~~ Need to decide on factories first\n- ~~[`Titles`](https://github.com/SpongePowered/SpongeAPI/blob/master/src/main/java/org/spongepowered/api/text/title/Titles.java)~~ Need to decide on factories first\n- ~~[`Translations`](https://github.com/SpongePowered/SpongeAPI/blob/master/src/main/java/org/spongepowered/api/text/translation/Translations.java)~~ Need to decide on factories first\n\nThe Javadocs in SpongeEventFactory were mostly write once, replace all occurrences and so please comment if the wording could be improved.\n\n~~There may be some more checkstyle issues not on the minor issues list, I will fix them if requested.~~\nAll fixed\n",
    "head_branch": "minor-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9f0d9087c4d6d37a6e7",
    "number": 389,
    "body": "This slightly modifies the command interfaces to allow for more variety in command systems, and adds a more featured default command system The features it will introduce to it are:\n- Allows use of /plugin:command in a less hacky way.\n- Allows plugins to register conflicting commands, and resolves those conflicts when the command is sent.\n- Removes the callback feature from command registration as it is no longer neccessary due to the above change.\n- Allows use of /mc or /minecraft:command to run vanilla commands [NYI]\n- Creates an API that may be used to set certain aliases to point to certain plugins in the command system.\n\nIt is based on EvilSeph's old blog post [here](http://evilseph.com/post/75608917830/bukkit-supporting-minecraft-commands).\n\nDue to configuration files not yet having a standard format yet, I will only create an API that allows the command configuration described in the blog post to be implemented, but this PR does not include the actual implementation of the configuration file. \n\nI still need help with: a good way to wrap vanilla/sponge commands into the existing system. maybe some kind of VanillaPluginContainer/SpongePluginContainer as wrappers so the command system can use them? \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9f1d9087c4d6d37a6e8",
    "number": 388,
    "body": "This will hopefully avoid duplicated code across plug-ins. It would be cleaner to read plug-in code that uses this method :).\n\nForum post: https://forums.spongepowered.org/t/help-me-understand-configuration/5582/3\n",
    "head_branch": "ParseResource",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9f2d9087c4d6d37a6e9",
    "number": 387,
    "body": "All entities have the option to be invisible or not so I have moved the getter and setter to Entity. Also I have added noGravity to ArmorStand as that was missing when I was implementing.\n\nOnly thing with Entities is that they may have their own setInvisible method so in the implementations the setInvisible will need to be Override so that the correct minecraft method can be ran.\n",
    "head_branch": "ArmorStand",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9f3d9087c4d6d37a6ea",
    "number": 386,
    "body": "Associated Issue: https://github.com/SpongePowered/SpongeAPI/issues/369\n\nThis PR replaces most occurrences of generics with those that are easier to extend in subclasses.\n\nIf there are places that you don't want to add the more generic things, i can remove them there.\n",
    "head_branch": "extendedGenerics",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9f4d9087c4d6d37a6eb",
    "number": 385,
    "body": "I really think that we need an event for this :smile:.\n\nForum Post: https://forums.spongepowered.org/t/player-exp-change-event/5573/2\n",
    "head_branch": "ExperienceEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9f5d9087c4d6d37a6ec",
    "number": 384,
    "body": "Title says all really.\n",
    "head_branch": "Rotations",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9f6d9087c4d6d37a6ed",
    "number": 383,
    "body": "In issue #382 these methods are unimplementable because as explained to me, Agent is effectively Minecrafts EntityLiving and Living is Minecrafts EntityLivingBase.\n\nThey need to be moved as these methods are not possible in EntityLivingBase.\n",
    "head_branch": "issue382",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9f7d9087c4d6d37a6ee",
    "number": 381,
    "body": "This PR adds interfaces for tile entities.\n\nNotably:\n- [x] Banner\n- [x] Beacon\n- [x] BrewingStand\n- [x] Chest\n- [x] CommandBlock\n- [x] Comparator\n- [x] DaylightDetector\n- [x] Dispenser\n- [x] Dropper\n- [x] EnchantmentTable\n- [x] EnderChest\n- [x] EndPortal\n- [x] Furnace\n- [x] MobSpawner\n- [x] Note\n- [x] Sign\n- [x] Skull\n\nThere is also a supertype `Tile`.\n\nAlso adds the following supporting types\n- Inventory (tile entity supertype)\n- Lockable (tile entity supertype)\n- BannerPatternShape\n- SkullType\n- WeightedRandomEntity\n\nI chose not to include interfaces for Pistons (due to their volatile nature), and Flower pots (since they are simply a work around until the world format is updated to support more than 16 metadata values and are fully supported via `BlockState`).\n",
    "head_branch": "feature/tileentities",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9f8d9087c4d6d37a6ef",
    "number": 379,
    "body": "This PR adds two events for handling [Query](http://wiki.vg/Query) responses.\n\nQuery is a built-in feature of the Minecraft server, which allows information about the server to be obtained outside of the context of a Minecraft client.\n\nThere are two types of requests a Query client can make:\n\n**Basic** - Returns basic information about the server, such as current and maximum players, MOTD, and server host/port.\n**Full** - Returns arbitrary key-value pairs, as well as a list of player names. All of the information from a Basic request is included in the key-value map.\n\nCorresponding events exist - `QueryEvent` and `FullQueryEvent`.\n\n A major difference between the Query protocol and the regular Minecraft protocol is that the Query protocol uses _UDP_, instead of _TCP_. Because of this, the Vanilla server sends a maximum of 1460 in its response.\n\nI've considered two possibilities for handling this:\n- Make all setters throw an exception if the provided data would cause the message to become to large. This would require subclassing `Map` in order to check calls to `put`\n- Automatically truncate the message if necessary. This is problematic, because the protocol uses null-terminated strings. There's no easy way to determine which fields to truncate (one field might be too large by itself)\n",
    "head_branch": "query",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9f9d9087c4d6d37a6f0",
    "number": 378,
    "body": "Tasks are just Tasks.\nRepeatingTask is not necessary.\nThe SyncScheduler (Scheduler) keeps track of what a RepeatingTask is.\nKept getName() method.\n",
    "head_branch": "feature/syncscheduler",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9fad9087c4d6d37a6f1",
    "number": 377,
    "body": "The API version is not synced as the currently available API version\nin the implementation. The SpongeAPI submodule is buried.  Hoping to\nlift it up as the current version for subsequent builds.\n",
    "head_branch": "feature/schedulers",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 42337cdcf27643df4b8ccd954af09fc6f92e2614 into e5953f0d163e1b738f68378cbdd66ffe13be2da6"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623e9fbd9087c4d6d37a6f2",
    "number": 376,
    "body": "This PR refactors the `getMaxSpeed()` and `setMaxSpeed()` methods in the `Minecart` interface to `getSwiftness()` and `setSwiftness()`, respectively. The reasoning behind this change is that Minecraft implements a `getSpeed()` method (as per the Forge deobfuscation mapping) which, while similar, is [fundamentally different from its Sponge counterpart](https://github.com/SpongePowered/Sponge/pull/126#discussion_r22542226). This makes implementation difficult if not impossible and would require use of ASM to rewrite vanilla bytecode.\r\n\r\nIt also adds a `getPotentialMaxSpeed()` method to the interface which will return the maximum speed at which the minecart may travel at the instant the method is called, i.e. the return value of Minecraft's `getMaxSpeed()` method.\r\n",
    "head_branch": "feature-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9fcd9087c4d6d37a6f3",
    "number": 374,
    "body": "I haven't tested it out, but Eclipse showed up with no bugs. It's quite basic and I need to work on paths\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9fdd9087c4d6d37a6f4",
    "number": 371,
    "body": "Player api do not have currently a way to get (or set) the gamemode of the player :/\n\nIf someone can add implementation of that ^^\"\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9fed9087c4d6d37a6f5",
    "number": 368,
    "body": "@bloodmc told me to add this.\n",
    "head_branch": "gamemode",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623e9ffd9087c4d6d37a6f6",
    "number": 367,
    "body": "Adds an API for #331 to the SpongeAPI. This implements most things mentioned there except direct access to protocol versions, instead there is a (currently) read-only wrapper around them as `GameVersion`.\n\nI decided to use the newer names from the protocol rewrite in 1.7 instead of the older names from the legacy ping. That's why \"server list ping\" is \"status ping\" and \"MotD\" is \"description\" now. This matches these names to the ones used in the protocol and the Minecraft source, and should also prevent confusion about \"MotD\" in the server list, or \"MotD\" as the message if you join a server (like used by Essentials) in the future.\n",
    "head_branch": "feature/status-ping",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 9a420b74d579c0bed97250f0b158b7384280a772 into b99f9944186a282f52d8f2afded8f97297819f58"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ea00d9087c4d6d37a6f7",
    "number": 366,
    "body": "Changes Sponge sound names to vanilla's to keep constant.\nRemoved the getters for the SoundTypes to the GameRegistry.\n\nI think changing the names to minecrafts would benefit all types of implementations as it makes it a lot easier to register the sounds instead of having to hard code them in.\n",
    "head_branch": "soundtypes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea01d9087c4d6d37a6f8",
    "number": 363,
    "body": "In reference to #357, enhancing the Player connection state with `PlayerConnection` to represent the active connection a client to the game server.\n\nIn regards to `Player#getConnection()`, not all existing Player entities may exist as clients connecting to the server (think Citizen NPCs and possibly Forge mods).\n",
    "head_branch": "feature/player-net",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea02d9087c4d6d37a6f9",
    "number": 362,
    "body": "#346\n",
    "head_branch": "patch-5",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea03d9087c4d6d37a6fa",
    "number": 361,
    "body": "https://github.com/SpongePowered/SpongeAPI/issues/360\n",
    "head_branch": "patch-4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea04d9087c4d6d37a6fb",
    "number": 358,
    "body": "",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea05d9087c4d6d37a6fc",
    "number": 357,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea06d9087c4d6d37a6fd",
    "number": 356,
    "body": "In Minecraft, sounds are plain String IDs. Mirroring that in Sponge would make it compatible with resource packs that add custom sounds.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea07d9087c4d6d37a6fe",
    "number": 354,
    "body": "Since worlds each have their own dimension instance, it makes more sense to register unique dimension types for plugin use. This will essentially work the same as EntityTypes. As an example, if a multiworld plugin wanted to create a world based on a specific Dimension, it would pass the DimensionType to the world creation method to be used. Plugins used to the old \"Environment\" name should now refer to DimensionType.\n",
    "head_branch": "feature/environments",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea08d9087c4d6d37a6ff",
    "number": 350,
    "body": "This has been done as every other Class like this e.g. Blocks, Items, Environments, Biomes do not have getters. The getters for these should be in GameRegistry as they have to be registered like the above examples.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea09d9087c4d6d37a700",
    "number": 349,
    "body": "I've implemented the changes as I described in https://github.com/SpongePowered/SpongeAPI/issues/348\n\nThe ItemDropEvent should be handled by anything that in game sometimes drops items. If there are no items, the collection should just be empty.\n\nSo when InventoryClosedEvent is implemented it should extend the base event too.\n",
    "head_branch": "fix/item-drops",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea0ad9087c4d6d37a701",
    "number": 347,
    "body": "This PRs deals with three problems of the builders.\n1) Getting new builders from the GameRegistry is one method yes, but it is burried along with one hundred other methods, so i renamed them from `getXBuilder` to `newXBuilder`. This way you can easyly check what kind of builders exist in the game registry simply by using the autocomplete functionality. \nWant a constant? -> use get. \nWant a composite thing? -> use a builder -> use new.\n\n2) Some implementations may require/use a subclass of builder for specific types. Example to better deal with Books etc. Currently this not that much represented in the API, but especially `ItemStack` can have lots of NBT attributes, that you probably don't want to edit only using the Persistance API. \n`ItemStack`s are immutable, so you have to use the builders to modify them and then either using builder subclasses or a `ItemData` attribute.\nSo either the builders have to be bound be type specific or the data. So I removed `withType` from the builders. So if you cannot set all properties you also cannot reset them entirely or reuse them after you have used them, thats why i also removed `reset()`. This also applies to other builders than `ItemStackBuilder`. \n(if the ItemStack and other stuff is/will be only accessible via Persistance API, this point is obsolete. I hope that for usability reasons a fully grown API like the Entity API will be available for the other types as well. (Mainly ItemStack)\n\n3) The `fromX` methods are dividing responsibilities and may introcude inconsistencies in the future. The `GameRegistry` should be the only access point to get things or create new builders for things. Especially with the things mentioned in 2) this could cause issues.\n\nThere is a related PR of mine (that has been closed because the Persistance API is not ready yet), which shows the intentions i had in mind with this one. https://github.com/SpongePowered/SpongeAPI/pull/328/files\n@gratimax said i should move the builder stuff to an own PR. Here it is.\nThat PR only deals with `ItemStack`s. There `ItemData` are virtual sub types of `ItemType`s that hold all NBT data related to the item. \nIngame: Everything with the same/equal `ItemData` could be considered stackable. `ItemData` contains the description, book pages, enchantments, the spawn eggs entity and all that.\n",
    "head_branch": "builder",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea0bd9087c4d6d37a702",
    "number": 345,
    "body": "These event types are emitted when you click something in Minecraft. If you click a block, you can get the face that was clicked.\n\nWhat else do I put here?\n",
    "head_branch": "feature/interact-hit-position",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea0cd9087c4d6d37a703",
    "number": 340,
    "body": "This API provides a lot of functionality for permissions providers,\nincluding transient permissions, various contexts, and a basic\ninheritance structure. This API is meant to serve as a flexible base to\nbuild on.\n\nThere may be some utility classes added as I get to implementing this API in PEX and in Sponge (the default MC permissions system), but this PR has the API as I think is good\n",
    "head_branch": "feature/permissions",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea0dd9087c4d6d37a704",
    "number": 338,
    "body": "This PR adds methods for manipulating the pickup delay and despawn time of an Item.\n\nVanilla has a concept of an owner, which can be set through vanilla commands as the `Owner` NBT tag. Only an owner can pick up an item, **except** until 10 seconds before the item despawns. Then, anyone can pick it up.\n\nThe concept of an owner wasn't added, as this can be done through events. However, I'm concerned that this might cause plugins to interact badly with command blocks, which might set an owner. This would be opaque to plugins\n",
    "head_branch": "item",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea0ed9087c4d6d37a705",
    "number": 336,
    "body": "Added setSplash and isSplash as it will be extremely difficult to implement potion effects in to minecraft from the Sponge API.\n\nAdded splash into PotionEffectBuilder as for the same reason above.\n",
    "head_branch": "Potions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea0fd9087c4d6d37a706",
    "number": 335,
    "body": " Added method to start, end, time the world border. \nChanged radius to diameter.\nChanged blockbuffer to buffer as it is not measured in blocks.\n",
    "head_branch": "worldborder",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea10d9087c4d6d37a707",
    "number": 334,
    "body": "Fixes a few inheritance issues with ignitable entities and those that are not.\n",
    "head_branch": "feature/explosives",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 969b406b87aeed4cb7fd33c334b801a31177924c into 8000cfeba1b7a422f64c79bb39eb8246f0bd4419"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ea11d9087c4d6d37a708",
    "number": 333,
    "body": "Removed useless else blocks because of returns.\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea12d9087c4d6d37a709",
    "number": 332,
    "body": "Removed useless else blocks since it's return.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea13d9087c4d6d37a70a",
    "number": 330,
    "body": "Adds the following events:\n- TileEntityEvents\n  - [x] BrewingStandBrewEvent\n  - [x] BrewingStandEvent\n  - [x] FurnaceBurnEvent\n  - [x] FurnaceCookEvent\n  - [x] FurnaceEvent\n  - [x] SignChangeEvent\n  - [x] SignEvent\n  - [x] TileEntityEvent\n- EntityEvents\n  - [x] EntityBreedEvent\n  - [x] EntityEquipmentChangeEvent\n  - [x] EntityExpireEvent\n  - [x] EntityIgniteEvent\n  - [x] EntityItemConsumeEvent\n  - [x] EnttyLeashEvent\n  - [x] ProjectileLaunchEvent\n- LivingEvents\n  - [x] LivingChangeBlockEvent\n  - [x] LivingChangeHealthEvent\n  - [x] LivingDeathEvent\n  - [x] LivingDropItemEvent\n  - [x] LivingEquipmentChangeEvent\n  - [x] LivingEvent\n  - [x] LivingExpirePotionEffectEvent\n  - [x] LivingInteractBlockEvent\n  - [x] LivingInteractEntityEvent\n  - [x] LivingInteractEvent\n  - [x] LivingItemConsumeEvent\n  - [x] LivingMoveEvent\n  - [x] LivingPickUpItemEvent\n  - [x] LivingPlaceBlockEvent\n  - [x] LivingPotionEffectEvent\n  - [x] LivingRemovePotionEffectEvent\n  - [x] LivingUpdateEvent\n- HumanEvents\n  - [x] HumanBreakBlockEvent\n  - [x] HumanChangeBlockEvent\n  - [x] HumanChangeGameModeEvent\n  - [x] HumanChangeHealthEvent\n  - [x] HumanDeathEvent\n  - [x] HumanDropItemEvent\n  - [x] HumanEnterBedEvent\n  - [x] HumanEquipmentChangeEvent\n  - [x] HumanEvent\n  - [x] HumanExpChangeEvent\n  - [x] HumanInteractBlockEvent\n  - [x] HumanInteractEntityEvent\n  - [x] HumanInteractEvent\n  - [x] HumanItemConsumeEvent\n  - [x] HumanLeaveBedEvent\n  - [x] HumanLevelChangeEvent\n  - [x] HumanMoveEvent\n  - [x] HumanPickUpItemEvent\n  - [x] HumanPlaceBlockEvent\n  - [x] HumanSleepEvent\n  - [x] HumanUpdateEvent\n- PlayerEvents\n  - [x] PlayerChangeGameModeEvent\n  - [x] PlayerChangeHealthEvent\n  - [x] PlayerDeathEvent\n  - [x] PlayerEnterBedEvent\n  - [x] PlayerEquipmentChangeEvent\n  - [x] PlayerEvent\n  - [x] PlayerExpChangeEvent\n  - [x] PlayerItemConsumeEvent\n  - [x] PlayerLeaveBedEvent\n  - [x] PlayerLevelChangeEvent\n  - [x] PlayerPickUpItemEvent\n- MinecartEvents\n  - [x] MinecartEvent\n- ItemEvents\n  - [x] ItemEvent\n  - [x] ItemExpireEvent\n  - [x] ItemMergeEvent\n\nModifies the following events:\n- [x] EntityDeathEvent\n- [x] EntityInteractEvent\n- [x] ProjectileLaunchEvent\n\nMore events are to follow as seen fit.\n",
    "head_branch": "feature/player-events",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea14d9087c4d6d37a70b",
    "number": 329,
    "body": "... spawned.\n",
    "head_branch": "feature/explosive-fix",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 8000cfeba1b7a422f64c79bb39eb8246f0bd4419 into df49814d4bced367bf674bbd6875a5c16916e762"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ea15d9087c4d6d37a70c",
    "number": 328,
    "body": "Added `ItemData` to `ItemStack`s similar to Bukkits `ItemMeta`.\nThis is a concept and not a ready to pull PR.\n\n**Added**\n- `ItemData`\n  - `Book` (Written book)\n  - `Colored` (`Color` for leather armor)\n  - `Dyed` (`DyeColor`)\n  - `EnchantmentStorage` (Enchanment book)\n  - `Entitied` (`EntityType` for spawn eggs)\n- `GameRegistry`\n  - `createItemDataBuider(ItemType)`\n  - `createItemStackBuider(ItemType)`\n  - `createItemStackBuider(ItemData)`\n  - `createItemStackBuilder(ItemStack)`\n\n**Additional information**\n- I did not add all types yet\n- Names are just a starting point, suggestions?\n- ItemData are immutable\n\n**TBD**\nShall we use a system similar to this one?\nAdd persitance/persistable (not part of this PR)\nAdd `EntityState`/ `EntitySnapshot` to `Entitied` item data\n",
    "head_branch": "itemData",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea16d9087c4d6d37a70d",
    "number": 327,
    "body": "Alternative implementation of: https://github.com/SpongePowered/SpongeAPI/pull/267\n\nI used @Kobata 's pull request and modified it to match @ryantheleach 's and mine proposal.\n\nThis PR uses smaller `Comparator`s, that can be used more freely as well as merged comparators.\n",
    "head_branch": "itemCompare",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea17d9087c4d6d37a70e",
    "number": 325,
    "body": "Extended Permission API. \nThis is a concept not a ready to pull PR.\n\nThe currently implemented permission API lacks a way to register new permissions with their default values and provide a description attached to them.\n\n**Things added**\n- SubjectData\n  - `getPermissionAuthority(permission)` - returns the subject that has granted/declined the permision\n  - `getPermissionValue(permission, Class)` - for Permissions that can hold other values that true or false, like Chat Prefixes\n  - `getPermissionValueAuthority(permission)`\n- `SubjectGroup` (extends Subject, players can also be a subject group)\n- `SubjectGroups`\n  - `DEFAULT`\n  - `OPERATOR`\n- `MutableSubject` (Allow adding permissions to)\n- `NamedSubject` (For `Subject`s that have a name, useful for groups or player names)\n- PermissionService\n  - `registerPermission(permission, description)`\n  - `getRegisteredPermissions()`\n  - `getDescription(permission)`\n\n**Additional information**\n`Subject`is a permission holder\n- so it can be a collection of permissions like Bukkit used for child permission\n- it can be a player\n- it can be a permission group like those used by most permission plugins\n  There is a global Context that is potentially valid on all worlds it may be ommited by plugins for specific worlds/times.\n  Users are normally valid on more than world so there is a view that can limit the check to a specific world/context (`ContextualizableSubject`) on the other hand groups are sometimes a valid on all worlds and sometimes only valid in a single world (`ContextualSubject`).\n  In same cases you don't want all context available for a short while (example while the user is inside an arena) so it is possible to enforce a single context for the user, so that you can limit the users abilities temporarly without messing with his permissions at all or just blocking his commands. The custom context's subject does also support parent groups and can also add some kind of fallback to the normal permissions outside the custom context.\n\nWhy i decided to add `SubjectGroup`s and especially `DEFAULT`, `OPERATOR`:\nCurrently there are 2-4 permission default values a permission can have: False, True, OP, NO-OP.\nThis assumes that vanilla minecraft itself has only two roles: Player and Owner\nWe all know that this kind of permission system is way to simple to be useful for servers that are used outside of your local network/friend list. So there is a chance that there will be added more roles. In this case the old 2-4 value system can no longer work properly, so i decided to skip it and use those groups to add the permissions to. If you want a permission only available for operators you use\n\n``` java\npermissionService.registerPermission(\"plugin.XYZ.myadminPermission\", someDescription);\nSubjectGroups.DEFAULT.setPermission(\"plugin.XYZ.myadminPermission\", false);\n// SubjectGroups.SUPPORTER.setPermission(\"plugin.XYZ.myadminPermission\", false);\nSubjectGroups.OPERATOR.setPermission(\"plugin.XYZ.myadminPermission\", true);\n```\n\nI register the declined permission just to be sure, because the `SUPPORTER` group may default to true internally.\n\nWhy i decided to add an (optional) value support.\nSome permissions are very hard to encode using boolean permissions like how many homes a player can have or the well know chat prefix.\n\nThe names are not final, so if you have a better one propose it. \nAnother thought i had with the permission values is using the persistance api there, but ii is not yet finished yet so I use this simple alternative for now.\n",
    "head_branch": "feature/permissions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea18d9087c4d6d37a70f",
    "number": 324,
    "body": "Adds a redstone event that extends BlockUpdateEvent.\n",
    "head_branch": "feature/redstone-event",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea19d9087c4d6d37a710",
    "number": 323,
    "body": "This api extends the features of the particles api, which allows us to create colored particles, colored particles, particles with motion vectors and so on. This is possible by changing the amount of particles that are send in the packet to 0, this changes the behavior on the client.\n",
    "head_branch": "feature/particles",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea1bd9087c4d6d37a711",
    "number": 322,
    "body": "This pull request is to make Extent into an object intended to redefine origin relative to a parent Extent up until a root World and make locations represent the local coordinates of the extent it contains.\n\nThis would be useful for any region based system, allowing them to reference local coordinates. An example would be an arena object implementing extent, possibly with sub regions for the arena parenting off of the arena. Creating a copy of this arena layout would be as simple as changing the origin of the new copy.\n\nPersonally I don't expect this to get merged as I know there are some issues with my way of handling it, however I did this to bring attention to the possibility of what can be done with Extent. This is just something I did to show how it could be done.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea1cd9087c4d6d37a712",
    "number": 321,
    "body": "Here are changes resultant of a discussion on IRC relating to the recent commit e93c0919e0bf4.\n\nList of changes:\n- `Server#createWorld` changed to not return an Optional, and additional versions created\n- `BiomeManager` was renamed `BiomeGenerator`, and was functionally modified.\n- `BiomeArea` was created to represent an area of biomes, mutable and immutable versions were also created.\n- `BlockBuffer` was modified to use `BlockState` rather than `BlockType` to support metadata values.\n- `BiomeVolume` was reworked to return a `BiomeType` rather than a `Biome`, and to include a setter for biomes.\n- `Biome` was removed.\n- `Populator` was modified to take a `Chunk` rather than a `MutableBlockBuffer`.\n- `WorldGenerator` was clarified.\n- `World` was modified to remove the `getBiomeManger` method as it was confusing and superfluous.\n",
    "head_branch": "feature/generation-clarity",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea1dd9087c4d6d37a713",
    "number": 320,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea1ed9087c4d6d37a714",
    "number": 318,
    "body": "**Helper PR for:** https://github.com/SpongePowered/SpongeAPI/pull/220\nThere is another PR for getting `Statistic`s and `StatisticType`s: https://github.com/SpongePowered/SpongeAPI/pull/317\n\nAdded Events\n- `GrantAchievementEvent`\n- `StatisticChangeEvent`\n  - `StatisticChange`\n    - `StatisticChangeType` (`ADD`, `SET`, `RESET`)\n\nAdded methods to `Player`\n- get, set, add, reset, getAll, resetAll `Statistic`s\n- has, grant, revoke, revokeAll `Achievement`s\n\nThis PR assumes, that there are only `Statistic`s that use `Long` values.\n\n**TBD**\n- Remove `StatisticChangeType` / call event only for `ADD` and not for plugins.\n- `StatisticChangeEvent` allow `StatisticChange`s to be added by plugins, so that they can be part of the event handling process and are only applied at the end of the event handling process if the event is not cancelled `Iterable`->`Collection`\n- Replace `StatisticChange` by an interface\n- Move methods from `Player` (online) to `User` (offline)\n- More events that extends `StatisticChangeEvent`\n",
    "head_branch": "feature/statsChange",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 665d0914533db09029df7413a8579198132173d0 into 99ae44bc36a7548fc64ed8cb2ed598a540cb3ccd"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ea1fd9087c4d6d37a715",
    "number": 317,
    "body": "**Helper PR for:** https://github.com/SpongePowered/SpongeAPI/pull/220\nThere is another PR for statistic set/change methods including events: https://github.com/SpongePowered/SpongeAPI/pull/318\n\nQuick access methods for specific statistics.\n- `getEntityStatistic(EntityStatisticType, EntityType)`\n- `getItemStatistic(ItemStatisticType, ItemType)`\n- `getTeamStatistic(TeamStatisticType, TextColor)`\n- default getters in the `GameRegistry`\n\n`StatisticType` is some kind of grouping inside statistics like `\"stat.craftItem\"` for `\"stat.craftItem.stone/wood/...\"`\n\n`StatisticUnit` is some kind of unit used to examine and display statistics like `\"Walked xxx cm\"`.\n(as result of `\"Walked \" + unit.format(statsValue)`)\n\nBased on @Aaron1011 suggestions for https://github.com/SpongePowered/SpongeAPI/pull/299\n\n``` java\ngr.createCriteria(gr.getEntityStatistics(EntityStatisticTypes.HASKILLED, EntityTypes.ZOMBIE));\n```\n\n(Hope i could recreate your example properly)\n\n[Minecraft 1.8.2](http://minecraft.gamepedia.com/1.8.2) adds many (20) new stats.\n\n**Create/Register new Statistics**\nCreating a new `Statistic` is pretty simple, although i'm not sure whether I should use a builder pattern here instead.\n\n``` java\n// Create single statistic\nStatistic wordsTyped = gr.registerSimpleStatistic(\"pluginXYZ.wordsTyped\", StatisticUnits.COUNT);\n// Add additional statistic to group\nItemStatistic nukesUsed = (ItemStatistic) gd.registerGroupedStatistic(ItemStatisticType.USE, \"nuke\", Map.of(\"itemType\", ItemTypes.NUKE));\n// Create new grouped statistic\nEntityStatisticType entitiesBreadType = gd.registerStatisticType(\"stat.entitiesBreed\", StatisticUnits.COUNT, EntityStatisticType.class);\nEntityStatistic cowsBread = (EntityStatistic) gd.registerGroupedStatistic(entitiesBreadType, \"cow\", Map.of(\"entityType\", EntityTypes.COW));\n```\n\n**TBD**\n- `SimpleStatistic` as representation of none grouped statistics (not belonging to a `StatisticType`) as opposite of `GroupedStatistic`.\n- Merge existing (simple) `Statistic`s into other/new groups (`StatisticType`s) at runtime.\n  - Such as `Statistics.CAKE_SLICES_EATEN` into a newly created `ItemStatisticTypes.CONSUME`\n- `AggregateStatistic`s that can be used to sum multiple `Statistic`s or get the max etc...\n",
    "head_branch": "feature/stats",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge e7b4d6919ce461cdb10f07a011dffdcf61425148 into 665d0914533db09029df7413a8579198132173d0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ea20d9087c4d6d37a716",
    "number": 316,
    "body": "Ensure API Completeness across the entire API.\n\nThe aim of this PR is to identify where we can expose more to plugin developers where we currently haven't.\n\nOther PR's that achieve further completeness, that are seen as a part of this effort:\n- [X] BlockType.java\n- [X] ItemType.java\n- [ ] Player Networks - #363 \n- [x] Entity.java - #387\n- [x] Item.java - #338 \n\nInput from others is welcome, as well as any criticism about missing API.\n",
    "head_branch": "feature/api-completeness",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea21d9087c4d6d37a717",
    "number": 315,
    "body": "Simple and easy to use AI API for (living) entities.\nThis is a suggestion not a ready to pull PR.\n\n**Added**\n- AIControlled (extends Entity)\n- [AIHandler](https://github.com/ST-DDT/SpongeAPI/blob/entityAI/src/main/java/org/spongepowered/api/entity/ai/AIHandler.java#L34)\n  - GoalBasedAIHandler (vanilla)\n    - AIGoalEntry\n    - AIGoal\n      - [CustomAIGoal](https://github.com/ST-DDT/SpongeAPI/blob/entityAI/src/main/java/org/spongepowered/api/entity/ai/CustomAIGoal.java#L31) (for plugins)\n    - [AIRequirement](https://github.com/ST-DDT/SpongeAPI/blob/entityAI/src/main/java/org/spongepowered/api/entity/ai/AIRequirements.java#L34) (replaces mutex bit mask)\n- [BodyController](https://github.com/ST-DDT/SpongeAPI/blob/entityAI/src/main/java/org/spongepowered/api/entity/ai/BodyController.java#L38) (Move + Look)\n\n**ToDo/TBD**\n- `GoalType` (RandomStroll, DefendTamer....)\n- Class and method names\n- Improve `BodyController`\n  - Flags (OpenDoors, CanSwim, AvoidLight ...)\n  - Move Body parts?\n- More `AIRequirement`s?\n- `PhysicsHelper` (Shoot arrows/projectiles (aiming support) etc)\n- Merge `Agent` and `AIControlled` in either `ai` or `living` package\n\n**Example**\n\n``` java\nGoalBasedAIHandler aiHandler = (GoalBasedAIHandler) entity.getAIHandler();\nList<AIGoalEntry> goalEntries = new ArrayList<AIGoalEntry>();\n// - loot at player\nAIGoal lookAtPlayer = new CustomAIGoal() {\n\n    Set<AIRequirement> aiRequirements = ImmutableSet.of(AIRequirements.LOOK);\n    Player player = null;\n\n    public AIControlled getEntity() {\n        return entity;\n    }\n\n    public Set<AIRequirement> getAIRequirements() {\n        return aiRequirements;\n    }\n\n    public boolean shouldExecute(final boolean isRunning) {\n        player = getClosest();\n        return player != null;\n    }\n\n    public boolean isInterruptible() {\n        return true;\n    }\n\n    public void execute(final boolean isRunning) {\n        entity.getBodyController().lookAt(player, BodyController.DEFAULTROTATIONSPEED);\n    }\n\n    public void abort() {\n        player = null;\n    }\n};\n// - follow Player\nAIGoal followPlayer = new CustomAIGoal() {\n\n    Player player = null;\n\n    public AIControlled getEntity() {\n        return entity;\n    }\n\n    Set<AIRequirement> aiRequirements = ImmutableSet.of(AIRequirements.MOVE);\n\n    public Set<AIRequirement> getAIRequirements() {\n        return aiRequirements;\n    }\n\n    public boolean shouldExecute(final boolean isRunning) {\n        player = getClosest();\n        if (player == null) {\n            return false;\n        } else {\n            return player.getLocation().getPosition().distance(entity.getLocation().getPosition()) < 15;\n        }\n    }\n\n    public boolean isInterruptible() {\n        return true;\n    }\n\n    public void execute(final boolean isRunning) {\n        entity.getBodyController().tryMoveTo(player, BodyController.DEFAULTMOVEMENTSPEED);\n    }\n\n    public void abort() {\n        player = null;\n    }\n};\n// create and set goal entries\nfinal AIGoalEntry lookAtPlayerEntry = new AIGoalEntry(lookAtPlayer, 1);\ngoalEntries.add(lookAtPlayerEntry);\nAIGoalEntry followPlayerEntry = new AIGoalEntry(followPlayer, 1);\ngoalEntries.add(followPlayerEntry);\ngoalEntries.add(new AIGoalEntry(new IdleAIGoal(entity), 2));\naiHandler.setGoalEntries(goalEntries);\n```\n",
    "head_branch": "entityAI",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea22d9087c4d6d37a718",
    "number": 314,
    "body": "**The Issue**\nCurrently there is no way to check which entity class is hidden inside an entity type without spawning the entity. \n\n**PR Breakdown**\nA previous suggestion of mine ( return the entity class like bukkit did) has been rejected because it uncovers to much of the internals. So i reverted the logic of checking the class hierarchy \n\n``` java\nLiving.class.isAssignableForm(entityType.getEntityClass())\n```\n\n to asking the entity type whether the given class is supported.\n\n``` java\nentityType.supportsFeature(Living.class)\n```\n\nI'm fine with both ways, but i need at least some way to do that.\n\nSpawning each `EntityType` and then getting the class is no alternative because they affect the world they are spawned in or may not able to spawn in that particular location or world. For example the ender dragon will destroy blocks or will get lost in an unloaded chunk and `Lightning` needs extra data to be spawned.\n\n**Example usage**\n\n``` java\nif (entityType.supportsFeature(Living.class)) {\n    Living entity = (Living) world.createEntity(entityType, location);\n    living.setMaxHealth(100);\n} else {\n    throw new Exception(\"Please cleanup your config, \" + entityType.getId() + \" is no Living Entity!\");\n}\n```\n\n**How i want to use it**\nMy plugin CrazySpawner, which i want to port to Sponge, has features which uses `EntityProperty`s that are bound to entity classes. On each startup it iterates all `EntityType`s and check whether the entity's class is supported by a given `EntityProperty`. \nAfter that the list of supported features can be used for ingame commands to create customized entities which can be stored in a config file and can be used in `SpawnTask`s. \nI could have hardcoded the supported `EntityType`s, but that way interface changes and new `EntityType`s would not be supported automatically.\n[EntityPropertyHelper](https://github.com/ST-DDT/CrazySpawner/blob/dev/src/main/java/de/st_ddt/crazyspawner/entities/properties/EntityPropertyHelper.java) [EntityProperty](https://github.com/ST-DDT/CrazySpawner/blob/dev/src/main/java/de/st_ddt/crazyspawner/entities/properties/EntityPropertyInterface.java)\nMy plugin can spawn 58 `EntityType`s with 180 (ingame) configurable `EntityProperty`s.\n\nCreate new entity template\n`/cspawner ce CREEPER C123`\nChange template options\n`/cspawner me C123 allowitempickup:true armorhelmet:SLOT1`\n`/cspawner me C123 attributefollowrange:1 health:50 customName:\"Armored Creeper\"`\nSpawn entity based on template\n`/cms C123`\n",
    "head_branch": "entityFeatureCheck",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea23d9087c4d6d37a719",
    "number": 313,
    "body": "The type of a world specified in the server config or at generation. May not needed in the api if forge not supports them.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea24d9087c4d6d37a71a",
    "number": 311,
    "body": "Basically an enum that describes a world is an overworld a nether or an end.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea25d9087c4d6d37a71b",
    "number": 310,
    "body": "- Add \"runTask...\" methods to AsynchronousScheduler that accept Callable as task parameter\n- Make use of ListenableFuture to simplify retrieval of task computation results.\n",
    "head_branch": "feature/schedulers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea26d9087c4d6d37a71c",
    "number": 309,
    "body": "This PR expands the `BlockType` and `ItemType` interfaces to provide additional methods providing information about some fundamental properties of the two types.\n\nThere is an associated PR in Sponge (86) which implements this API change, found here: https://github.com/SpongePowered/Sponge/pull/86\n",
    "head_branch": "feature/block-expansion",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea27d9087c4d6d37a71d",
    "number": 306,
    "body": "As work in progress to phase in schedulers for\nboth asynchronous and synchronous tasks (depending on\nthe time base referenced). \n\nSee source for implementation notes and pending issues.\n\nEdit: In order to investigate the changes, it is straight-forward to write a simple plugin to initiate Tasks\nthrough this Scheduler:\n\nI have a skeleton Plugin that you can kick around and add to. https://github.com/sibomots/JiveMimic.git\n\nI'll elaborate the plugin later with more use-cases, but the bottom line is that for \"Asynchronous\" Tasks, we can do that pretty easily and hopefully with the least amount of CPU overhead (the overall intent).\n\nThe Synchronous Scheduler on the other hand has more work left to do:\n\nSince I assume that it should use the actual clock-tick is coming from the Minecraft server (via Tick) rather than the simple check of wall-clock time-elapsed there's a gap in the implementation of Sponge to capture a Tick event rather than poll the \"runningTicks\" in the Mixin.\n\nI'm not in favor of polling, but rather in favor of waiting for events (like the Tick) to initiate the step() function of the SynchronousScheduler. Anyway, that's next on the agenda.\n",
    "head_branch": "feature/schedulers",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge a74b7c0e89b97d79088c921f65e1347be34b1304 into 2656b93793d334617f2e7be63645672883b83892"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ea28d9087c4d6d37a71e",
    "number": 305,
    "body": "The current contribution guidelines are outdated, for example they still mention the use of `Nullable` instead of `Optional`. There are also still some files with wrong Javadoc formatting, that's why we should enable the Checkstyle rules to warn about that.\n- Replaced contribution guidelines in `CONTRIBUTING.md` by a link to the SpongeDocs.\n- Updated checkstyle and enabled the disabled rules to check for Javadoc formatting and some other smaller things.\n- Rewritten Contribution Guidelines to match with changes like the use of `Optional` instead of `Nullable`, see SpongePowered/SpongeDocs#18.\n",
    "head_branch": "contributing",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea29d9087c4d6d37a71f",
    "number": 304,
    "body": "Added new method to set the startingDiameter, endDiameter and the time it will take [void setDiameter(double startDiameter, double endDiameter, long time);]\nAdded Splash potion option.\nChanged Radius to Diameter.\nChanged get/setBlockBuffer to get/setBuffer and changed the return and parameter to double as it is not measured in whole blocks.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea2ad9087c4d6d37a720",
    "number": 303,
    "body": "- Added BlockPlaceEvent\n- Added BlockInteractEvent\n- Added EntityBreakBlockEvent\n- Added EntityInteractBlockEvent\n- Added EntityInteractEntityEvent\n- Added EntityPlaceBlockEvent\n- Added PlayerPlaceBlockEvent\n- Added PlayerBreakBlockEvent\n- Added PlayerChangeBlockEvent\n- Added PlayerInteractBlockEvent\n- Added PlayerInteractEntityEvent\n",
    "head_branch": "feature/events",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 47712879d386f431a9568da7c0144f0a54af7010 into 79f53392bce2ea11f98b1a338d98fd06ababd9d7"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ea2bd9087c4d6d37a721",
    "number": 301,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea2cd9087c4d6d37a722",
    "number": 299,
    "body": "This PR adds a Scoreboard API, supporting all of the (newer) scoreboard features like statistic criteria and colored sidebar slots.\n\n**TODO**:\n- [x] Implement colored sidebar slots\n- [ ] Implement statistics criteria (waiting on https://github.com/SpongePowered/SpongeAPI/pull/220)\n\nThe relationship between Objectives and Scoreboards still needs to be decided.\n\nFrom IRC:\n\n```\n<gratimax> however, possibly a better way to do this would be each scoreboard is a view of objectives, so multiple scoreboards can view the same objective\n<gratimax> then the data that a player has with regards to a certain objective is stored by the objective, conceptually, not the scoreboard\n<gratimax> this contradicts what objectives look like internally(saved per-scoreboard), but considering that per-player scoreboards are hack I think this is a good direction to go\n```\n",
    "head_branch": "scoreboard",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea2dd9087c4d6d37a723",
    "number": 298,
    "body": "World Generator API introduces the pieces required to represent the various aspects of the world generator. It adds interfaces for:\n- `WorldGenerator`, the chunk provider which contains the actual generation process\n- `BlockBuffer`, this is a representation of an area's block data which is detached from the world and this is lightweight when modifying large amounts of blocks, such as during generation.\n- `Populator`, which is a feature or aspect of the world which is layered on after the initial terrain generation, these perform actions such as replacing biome-specific blocks and placing structures (aka. `PopulatorObjects`, see below).\n- `GeneratorPopulator`, which is similar to the `Populators` but is applied during the actual generation phase rather than the population phase. These apply themselves directly to the `ExtentBuffer`, and thus are suited for high intensity operations.\n- `PopulatorObject`, this represents a specific structure or object used by a `Populator`.\n- `BiomeManager`, this is the generator which decides in what configuration the biomes are laid out into the world.\n\nMethods were also added to `Server` for loading, unloading, and creating worlds, and to `World` for loading, unloading, and generating chunks.\n\nIn addition several events were added:\n- `ChunkPreGenerateEvent`, signals that a chunk is about to enter the generation process.\n- `ChunkPostGenerateEvent`, signals that a chunk has just finished the generation process\n- `ChunkPrePopulateEvent`, signals that a chunk is about to begin the population process, also includes an ordered list of populators which are about to be applied to the chunk.\n- `ChunkPostPopulateEvent`, signals that a chunk has just finished the population process and is now considered complete.\n\nStill todo:\n- [x] Registration mechanism for registering custom generators, biomes, and populators (**Needs Discussion**)\n",
    "head_branch": "feature/generation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea2ed9087c4d6d37a724",
    "number": 297,
    "body": "Selector API. Closes #294.\n- [x] Add full selector interface\n  - [x] `String getVariable()` - ('p', 'a', 'e', 'r' in default selectors)\n  - [x] `Map<String, String> getArguments()` - get arguments\n  - [x] `List<Entity> resolveSelector()` - resolve selector to entities\n  - [x] `String asString()` - turn selector into a string\n  - [x] `SelectorBuilder builder()` - modification builder\n- [x] Change Message.Selector#getContent() to return a Selector\n- [x] Change MessageBuilder.Selector#selector() to take a Selector\n- [x] Add selector generator\n  - [x] Builder for selectors\n  - [x] Other stuff?\n- Possible stuff, need comments:\n  - Add utilities for parsing commands with selectors\n  - Custom selectors by plugins\n",
    "head_branch": "feature/selector-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea2fd9087c4d6d37a725",
    "number": 296,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea30d9087c4d6d37a726",
    "number": 291,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea31d9087c4d6d37a727",
    "number": 290,
    "body": "This PR is my first pass at improving the Entity interface. The following has been done -\n- Removed getPosition, getX, getY, getZ in favor of getLocation\n- Removed getVectorRotation in favor of getRotation\n- Removed EulerDirection in favor of Vector3f\n- Removed interact methods as they are meant for Players\n- Removed eject, dismount in favor of setVehicle\n- Renamed getRiding, getRidden in favor of getVehicle\n- Renamed teleport to setLocation\n- Renamed isDead to isRemoved\n- Updated javadocs\n",
    "head_branch": "feature/entities",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 798f8b730e7fc60864b528011ae6e07bbbbc6acc into 34fcbfdb7747932dc7933ebea117856c7c0107dc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ea32d9087c4d6d37a728",
    "number": 289,
    "body": "This is intended to capture what should be loaded better than cancelling events, and allow server admin control over the number of force-loaded chunks.\n\nA plugin registers a callback to handle restoring when a world is loaded, then creates tickets that can be given chunks to keep loaded.\n",
    "head_branch": "feature/chunk-forced-load",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 769e773522c4efc42ff3324706edb524254f6b16 into 21a0328b8ef3037a6ea78d64548b9e113a5e2351"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ea33d9087c4d6d37a729",
    "number": 288,
    "body": "As per the discussion on IRC with @gratimax\n",
    "head_branch": "stats",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea34d9087c4d6d37a72a",
    "number": 286,
    "body": "Adds an API to deal with Packets.\n",
    "head_branch": "feature/packets",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea35d9087c4d6d37a72b",
    "number": 285,
    "body": "Player/User is missing isOp() method.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea36d9087c4d6d37a72c",
    "number": 283,
    "body": "Adds a lot of methods to the world and chunks as discussed here: https://github.com/SpongePowered/SpongeAPI/issues/256\n\n**Small Overview:**\n- `Server`\n  - `createOrLoadWorld(...)`\n- `Events`\n  - `ChunkPreGenerate/Populate/DecorateEvent`\n  - `ChunkPostGenerate/Populate/DecorateEvent`\n- `StorageContainer`\n- `World`\n  - `getStorage()`\n  - `getExistingRegions()`\n  - `getExistingChunks(...)`\n  - `getChunkData(...)`\n  - `deleteChunk(...)`\n- `Region`\n  - `getStorage()`\n  - `getExistingChunks(...)`\n- `Chunk`\n  - `getWorld()`\n  - `getChunkData()`\n- `ChunkData`\n  - `get...Position(...)`\n  - `getChunkState()`\n- `ChunkState`\n  - `NOTAVAILABLE`, `GENERATED`, `POPULATED`, `DECORATED`, `LOADED`\n- `ChunkGenerator/Populator/Decorator`\n\nRFC\n",
    "head_branch": "extendedWorldAPI",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea37d9087c4d6d37a72d",
    "number": 281,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea38d9087c4d6d37a72e",
    "number": 279,
    "body": "This API allows for adding BlockTypes to the list of randomly ticked blocks, and also listening for when Blocks are randomly ticked.\n\nUse Cases:\n- Creating custom plants, such as ferns growing into double ferns.\n- Randomly selecting blocks with vanilla like behaviour.\n",
    "head_branch": "feature/random-tick",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge e9ea96d2aa6ffa48064e7853722e30bd4cff5060 into 8180f6493dc5aaa08317609b55c58f59ad58d620"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ea39d9087c4d6d37a72f",
    "number": 278,
    "body": "Fixes https://github.com/SpongePowered/SpongeAPI/issues/221.\n",
    "head_branch": "enhancement/ocd",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge f156d3ccfa230f41999ccd43792f331d07d1d65e into f2b26ea280f81cf1966e254756e23c6f4bd4251e"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ea3ad9087c4d6d37a730",
    "number": 277,
    "body": "Currently, ItemStack and TradeOffer both have builders that can be retrieved from the GameRegistry, however, PotionEffect does not. This is for API completeness. \n",
    "head_branch": "feature/potion-builder",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 34fcbfdb7747932dc7933ebea117856c7c0107dc into 6e75ce76f80ca519bf85e6bc2d04bdf85be514e4"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ea3bd9087c4d6d37a731",
    "number": 272,
    "body": "Persistence API introduces the common data structure to represent any possible data produced by the SpongeAPI. \n\nThis adds interfaces for `DataContainer`, `DataView`, and `DataOptions`. \n\nUsing a `DataContainer` is very simple:\n\n``` java\n\n    @Subscribe(order = Order.FIRST, ignoreCancelled = false)\n    public void onPlayerInteract(PlayerInteractBlockEvent event) {\n        Optional<ItemStack> itemOption = event.getPlayer().getItemInHand();\n        if (itemOption.isPresent()) {\n            DataContainer itemContainer = itemOption.toContainer();\n            MyCustomDataManager.logItem(event.getPlayer(), itemContainer);\n            Optional<List<String>> loreOptions = itemContainer.getList(\"lore\");\n            if (loreOptions.isPresent()) {\n                for (String string : loreOptions.get()) {\n                    System.out.println(string);\n                }\n            } \n        }\n    }\n\n```\n\nBeing that these data structures are map based, serialization to various data handlers, such as NBT, flat file, SQL, etc. is possible.\n\nAs well, adding annotations for `SerializableAs` and `DataPath` to mark methods and fields with keys that can easily be referenced for automated serialization (example: Gson).\nExample usage:\n\n``` java\n@SerializableAs(\"Banner\")\npublic interface BannerData extends DataSerializable {\n\n    @DataPath(\"id\") String getId();\n\n    @DataPath(collapse = true) Vec3i getPosition();\n\n    @DataPath(\"base\") DyeColor getBaseColor();\n\n    @DataPath(key = \"patterns\") List<BannerPattern> getPatterns();\n\n\n    @SerializableAs(key = \"pattern\", compoundable = true)\n    interface BannerPattern extends DataSerializable {\n\n        // Since banners use dye to create their colors\n        @DataPath(\"color\") DyeColor getColor();\n\n        @DataPath(\"pattern\") List<String> getPatterns();\n\n    }\n\n\n  void setPosition(Vec3i pos);\n  void setColor(DyeColor color);\n  void setPatterns(List<BannerPattern> patterns);\n  void setPattern(BannerPattern pattern);\n\n}\n\n@SerializableAs(key = \"position\", compoundable = true)\npublic class Vec3i implements DataSerializable {\n\n    @DataPath(\"x\") int x;\n    @DataPath(\"y\") int y;\n    @DataPath(\"z\") int z;\n\n}\n```\n\nFinally, displaying the importance of the viability for `BannerData` as a `DataContainer`, the following would exist:\n\n```\n\"Banner\" // Name of the DataContainer\n    |- \"id\" -> String\n    |- \"x\" -> Integer\n    |- \"y\" -> Integer\n    |- \"z\" -> Integer\n    |- \"base\" -> DyeColor\n    |- \"patterns\" -> List<BannerPattern>\n         |- \"BannerPattern\" -> BannerPattern\n         |    |- \"pattern\" -> String\n         |    |- \"color\" -> DyeColor\n         |- \"BannerPattern\" -> BannerPattern\n         |    |- \"pattern\" -> String\n         |    |- \"color\" -> DyeColor\n         |- \"BannerPattern\" -> BannerPattern\n              |- \"pattern\" -> String\n              |- \"color\" -> DyeColor\n```\n\nAs visible in the example, the map based data structure, `DataContainer#getString(\"id\")` would return the actual string id provided from the `BannerData` and likewise, \n`DyeColor color = BannerData.serialize().getList(\"patterns\").get(0).getSerializable(\"color\", DyeColor.class);`\n\nIn essence, we can now safely use these maps to not only serialize and deserialize SpongeAPI objects, but internally, we can use various implementations to not just translate, but manipulate similar data structures in NBT (like in this case, banner data).\n\nLikewise, all of the `DataContainer` system is designed to allow serializing `EntitySnapshots` for various reasons.\n\nToDo:\n- [x] Abstract data structure to represent and store data\n- [x] Serialization interfaces for Systems that can persist said abstract data structure\n- [x] Offline Chunk Iterators\n",
    "head_branch": "feature/persistence",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea3cd9087c4d6d37a732",
    "number": 271,
    "body": "",
    "head_branch": "feature/biomes",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge ebd46ba6379f7d7756509cfb3e5e4605492b4680 into 618033393c3b2ff4b6be2d85ea87c2dd530ec5ad"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ea3dd9087c4d6d37a733",
    "number": 268,
    "body": "This PR adds a `WorldBorder` interface for controlling per-world border.\n\nThere was an (unresolved) discussion on IRC as to whether or not to support per-**player** world borders.\n",
    "head_branch": "worldborder",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea3ed9087c4d6d37a734",
    "number": 267,
    "body": "There's no simple ordering that is consistent with the likely behavior of ItemStack.equals(), and the most useful orderings can be easily defined via the ItemStack interface.\n",
    "head_branch": "feature/itemstack-compare",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea3fd9087c4d6d37a735",
    "number": 266,
    "body": "It's more consistent to have all these functions unified, and easier on alternate implementations to have them accessed via pure interfaces rather than requiring injection of one-off factory types for each individual thing.\n",
    "head_branch": "feature/registries",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge c1a05ddf4ae0c90d81aadf91f398c83d511a0911 into ecfcf5e37d86273914f3f3e9ec9f5431951ca04d"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ea40d9087c4d6d37a736",
    "number": 265,
    "body": "Fixed most issues from the Ongoing Minor Issues List: #221 \n\nAlso, in EntityEvent the getEntity() javadoc specified the Entity returned as performing an action, but PlayerEvent does not specify the same Entity (In this case a Player) as performing an action, which may be confusing.\n\nFor every Optional, there should be something like \"if available\" in the javadocs.\nShould it say \"if available\" in the method description or in the @ return ?\n",
    "head_branch": "OCD-javadoc-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea41d9087c4d6d37a737",
    "number": 264,
    "body": "After some discussion in #263 we decided to rename `Message` to `Text` as it is used in many more places like player display names, signs or books and is not always used in terms of a \"message\".\n\nWe should also think about easier ways to construct messages, because using the message builder still requires a lot of code even for simple messages.\n\n**TODO**:\n- Fix and improve Javadocs to call it text now instead of message.\n- Implement easier usable ways to construct messages, right now there is a lot of code required for this.\n",
    "head_branch": "feature/text",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge b9e97189f705217f0af7ab9b023477ae69cecac1 into f156d3ccfa230f41999ccd43792f331d07d1d65e"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ea42d9087c4d6d37a738",
    "number": 261,
    "body": "This PR shows the status of a GameRules API.\n",
    "head_branch": "feature/gamerules",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea43d9087c4d6d37a739",
    "number": 260,
    "body": "The subject is self-explaining. There were static methods, which would always return null, so I updated them to do something actually. See https://github.com/SpongePowered/Sponge/pull/81\n",
    "head_branch": "particlefix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea44d9087c4d6d37a73a",
    "number": 259,
    "body": "Added setAngry and isAngry to Wolf Entity.\nIf anything I misunderstood or I have made any mistake, I appreciate you telling me.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea46d9087c4d6d37a73b",
    "number": 258,
    "body": "Currently, `ItemFrame#getItemRotation` returns an `Optional`, as an item isn't always present in the `ItemFrame`. However, the rotation value is still meaningful without an item present.\n\nIn Vanilla, removing an item from an item frame preserves its rotation. When any item is placed back into the item frame, it will have the rotation of the last item.\n\nGiven that this behavior exists in Vanilla, it should be available to plugins through the API.\n",
    "head_branch": "rotation_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea47d9087c4d6d37a73c",
    "number": 257,
    "body": "Added a default vector implementation.\nThis may be usefull to reduce work to implement this APi and also will increase consistency between diferent implementations.\n\nAdditionally this class can be used to create tests for other classes.\n",
    "head_branch": "feature/math_Vector",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea48d9087c4d6d37a73d",
    "number": 255,
    "body": "Changed `getMinAxis()` and `getMaxAxis()` to use the new `Axis` enum.\n",
    "head_branch": "vectorAxis",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea49d9087c4d6d37a73e",
    "number": 254,
    "body": "This PR fixes it.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge df5cee4f6396087b05accb82b967e43b92364de6 into 69678fea8d5932fb7d499a40c4241c1152bafb54"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea4ad9087c4d6d37a73f",
    "number": 253,
    "body": "This is, in large part, a continuation of #49.\n\nCurrently doing some cleanup on the previous commits as well as adding an annotation-based serialization API.\n\nExample usage for annotations:\n\n``` java\npublic interface BannerData extends NbtStored {\n\n    @Nbt String getId();\n\n    // The attributes of this compound tag are collapsed into this NBT data\n    @Nbt(collapse = true) Vec3i getPosition();\n\n    // Could be replaced with a TextColor, I'm not sure\n    // 'Base' is set as the name\n    @Nbt(name = \"base\") String getColor();\n\n    // Nested data as a list\n    @Nbt List<BannerPattern> getPatterns();\n\n    // As an example, simple compound NBT data\n    @Nbt BannerPattern getPattern();\n\n    interface BannerPattern extends NbtStored {\n\n        // Could be replaced with a TextColor, I'm not sure\n        @Nbt String getColor();\n\n        // Almost certain this is a string internally\n        @Nbt String getPattern();\n\n    }\n\n  // force a getter\n  @Nbt(type = NbtType.GETTER) String myprop();\n\n  void setPosition(Vec3i pos);\n  void setColor(String color);\n  void setPatterns(List<BannerPattern> patterns);\n  void setPattern(BannerPattern pattern);\n\n}\n\npublic class Vec3i implements NbtStored {\n\n    @Nbt int x;\n    @Nbt int y;\n    @Nbt int z;\n\n}\n```\n",
    "head_branch": "feature/nbt",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea4bd9087c4d6d37a740",
    "number": 252,
    "body": "This creates a `Rotation` class, containing the rotation values for 1.8\n\nIt also adds `getItemRotation` and `setItemRotation` to `ItemFrame`, to allow getting and setting of the item displayed in the item frame.\n\n**A note about the rotation names**\n\nIt might seem odd that I'm using enum values for degrees, instead of somthing like `setItemRotation(180)`.\n\nThe reason for this is that items frames use a metadata value (an `int` ranging from `0` to `7`) to store rotation.\n\nAllowing any degree value to be set creates the illusion that this is actually support by item frames. The names I've chosen for the enum value reflect what I think makes the most sense for the defined rotation values. I'm open to any suggestions as to improving the naming.\n",
    "head_branch": "rotation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea4cd9087c4d6d37a741",
    "number": 251,
    "body": "EntityType \n- Added `getName()`\n\nEntiyTypes\n- Added some javadocs\n",
    "head_branch": "feature/entities_Types",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea4dd9087c4d6d37a742",
    "number": 250,
    "body": "Just adding private constructors to disable instancing of constant holder classes (`public static final XYZ`). \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea4ed9087c4d6d37a743",
    "number": 249,
    "body": "Added `EnderEye` interface to entities.\n",
    "head_branch": "feature/entities_EnderEye",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea4fd9087c4d6d37a744",
    "number": 248,
    "body": "Pull new commits to my copy.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea50d9087c4d6d37a745",
    "number": 247,
    "body": "Pull new commits to my copy.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea51d9087c4d6d37a746",
    "number": 246,
    "body": "Adds a Potions API.\n",
    "head_branch": "feature/potions",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea52d9087c4d6d37a747",
    "number": 245,
    "body": "Extension of #212 \n",
    "head_branch": "feature/weather",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea53d9087c4d6d37a748",
    "number": 244,
    "body": "Added `ExperienceOrb` interface to entities to represent the exp that are dropped by mobs and exp bottles.\n",
    "head_branch": "feature/entities_ExpOrb",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea54d9087c4d6d37a749",
    "number": 243,
    "body": "Added `EntityType.getName()` method.\nAdded `EntityTypes` utility class.\n\nShould be pulled with: https://github.com/SpongePowered/SpongeAPI/pull/244 (pulled)\n",
    "head_branch": "feature/entities_Types",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea55d9087c4d6d37a74a",
    "number": 242,
    "body": "An official, better Inventory API.\n- [x] Inventory\n  - [x] Block Inventory\n  - [x] Entity Inventory\n  - [x] Equipable Inventory\n  - [x] Merchant Inventory\n  - [x] Inventory factory\n  - [x] Custom inventory\n- [x] Recipes\n  - [x] Recipe general\n  - [x] Shaped recipes\n  - [x] Shapeless recipes\n  - [x] Ore dictionary\n- [x] Javadocs\n\nNote that due to forge mod tinkering we cannot have the nice methods and grids and such that I was proposing and from bukkit. This is on the roadmap though.\n",
    "head_branch": "feature/inventory",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea56d9087c4d6d37a74b",
    "number": 241,
    "body": "Combination of Particle effects and Sounds.\n\nAllows the spawning of particles in a world and sent to a player individually with some extra data as necessary.\n- [x] Spawn Particles\n- [x] Spawn Particles with necessary ItemType information\n- [x] Spawn Particles with vector offsets\n- [x] Spawn Particles with location specification (in radius)\n\nCredited PR:\nhttps://github.com/SpongePowered/SpongeAPI/pull/184\n\nAllows the playing of sounds in a world and by a player.\n- [x] Play sounds\n- [x] Play sounds with pitch modulation\n- [x] Play sounds with volume requirements\n",
    "head_branch": "feature/effects",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 006449e14e130a10a6db6b4c2b2b4b88fe6609c0 into 8c64dc959f5c26945f19e3e4f90628f5b3b52fb9"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ea57d9087c4d6d37a74c",
    "number": 240,
    "body": "Allows the spawning of particles in a world with some extra data as necessary.\n- [x] Spawn Particles\n- [x] Spawn Particles with necessary ItemType information\n- [x] Spawn Particles with vector offsets\n- [x] Spawn Particles with location specification (in radius)\n\nCredited PR:\nhttps://github.com/SpongePowered/SpongeAPI/pull/184\n",
    "head_branch": "feature/particles",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea58d9087c4d6d37a74d",
    "number": 239,
    "body": "### SpongePowered/SpongeAPI now has a Chat Room on Gitter\n\n@gratimax has just created a chat room. You can visit it here: [https://gitter.im/SpongePowered/SpongeAPI](https://gitter.im/SpongePowered/SpongeAPI?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&content=body_link).\n\nThis pull-request adds this badge to your README.md:\n\n[![Gitter](https://badges.gitter.im/Join Chat.svg)](https://gitter.im/SpongePowered/SpongeAPI?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=body_badge)\n\nHappy chatting.\n\nPS: [Click here](https://gitter.im/settings/badger/opt-out) if you would prefer not to receive automatic pull-requests from Gitter in future.\n",
    "head_branch": "gitter-badge",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea59d9087c4d6d37a74e",
    "number": 238,
    "body": "Added Explosive (extends Entity) to Fireball\nAdded FusedExplosive (extends Explosive) to Creeper, MinecartTNT\nAdded TNTPrimed (extends FusedExplosive) (Ignite TNTBlock -> TNTPrimed)\n",
    "head_branch": "feature/entities_Explosive",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea5ad9087c4d6d37a74f",
    "number": 236,
    "body": "One needs a way to access the data stored in tile entities conveniently, without having to dump the TE to NBT, editing the NBT, and then rebuilding the block.\n## The proposal\n\nThis proposal adds the following method to `Block`:\n\n``` java\n/**\n * Get an instance of the given data class for this block.\n *\n * <p>For example, if this block represents a sign,\n * {@code getData(Sign.class)} would yield an instance of\n * {@link Sign} to change the contents of the sign. However, if\n * this block does not represent a sign, then an instance will not\n * be returned.</p>\n *\n * @param dataClass The data class\n * @param <T> The type of data\n * @return An instance of the class\n */\n<T> Optional<T> getData(Class<T> dataClass);\n```\n\nHere are some examples of it in use:\n\n``` java\nblock.getData(Sign.class).get().setLines(newLines);\n```\n\n``` java\nInventory inventory = block.getData(Inventory.class).get();\ninventory.addItem(new ItemStack(...));\n```\n\n``` java\nassert !brickBlock.getData(Inventory.class).isPresent()\n```\n### Advantages\n- Highly reusuable\n- Highly generic\n- Highly extensible\n- Allows wrapper classes to work properly\n## Regarding entities\n\nThis is currently in contrast to how entities handle the problem of accessing their state data. When one gets an instance of `Entity`, it is a subclass of `Entity`, such as a `Player` or `Cow`.\n\nHowever, this proposal could also be applied to entities:\n\n``` java\nchestMinecart.getData(Inventory.class).get().doStuff()\n```\n",
    "head_branch": "feature/block-data",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea5bd9087c4d6d37a750",
    "number": 235,
    "body": "**This branch is primarily for discussion.**\n\nThere was some disagreement as to what `Block` should be called.\n\nThe problem stems from the fact that the MCP and Bukkit diverged on what to name things.\n## Block from Bukkit's PoV\n\n`Block` in Bukkit (and currently in Sponge) is essentially a value type containing `World` (actually `Extent`) + `Vector3i`. _It refers to a specific integer location in a `World` (or `Extent` rather)._\n\n``` java\nclass Block {\n    World world;\n    Vector3i position;\n}\n```\n\n(An `Extent` is a parent type of `World`. An `Extent` contains blocks, entities, biomes, and so on. It _could_ refer to a specific area of a `World`, or it could be a virtual area such as a copy of an area of the world. It is similar to `IBlockAccess` from MCP but contains biomes and entity too.)\n\nHere's some examples of Bukkit's `Block`:\n\n``` java\nBlock block = world.getBlockAt(0, 0, 0);\nblock.setType(Material.GLASS);\n```\n## Block from MCP's PoV\n\n`Block` in MCP is a block type. Here are some examples of `Block` being used:\n\n``` java\nBlock.brick.harvestBlock(world, entity, x, y, z, d);\n```\n\nMC does not have an equivalent of Bukkit's `Block` and instead you access blocks on the world like so:\n\n``` java\nworld.setBlock(x, y, z, block, flag);\n```\n## How it is currently in Sponge\n\nCurrently, `Block` was chosen for consistency reasons. See the tables below.\n### Blocks\n\n| Project | Type | Instance | Snapshot |\n| --- | --- | --- | --- |\n| Sponge | BlockType | Block | BlockSnapshot |\n| Bukkit | Material | Block | BlockState |\n| MCP | Block | :no_entry_sign: | :no_entry_sign: |\n### Entities\n\n| Project | Type | Instance | Snapshot |\n| --- | --- | --- | --- |\n| Sponge | EntityType | Entity | EntitySnapshot |\n| Bukkit | EntityType | Entity | :no_entry_sign: |\n| MCP | Class<Entity> | Entity | :no_entry_sign: |\n## Other considerations\n- The need for a block position object to work with blocks does mean extra work for the GC, but if needed, we can add methods to `Extent` that take x, y, z coordinates, bypassing `Block` entirely.\n- Bukkit developers are more familiar with `Block` from Bukkit.\n- Having `Block` named so confuses the hell out of those more familiar with MCP's convention.\n## Alternatives to `Block`\n- `Voxel`\n- `BlockLocation`\n- `BlockLoc`\n\nWe can also leave `Block` named as `Block`.\n",
    "head_branch": "feature/block-as-voxel",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea5cd9087c4d6d37a751",
    "number": 234,
    "body": "**This branch is primarily for discussion, but the current likelihood that it will be implemented is HIGH (though not necessarily in the form of this branch's commits).**\n\nRight now, events in the API are interfaces. The plan is to convert them all to concrete classes. This comes with some advantages and disadvantages.\n## If we keep them as interfaces\n\nThe advantage:\n- Mapping our events to Forge events is very easy. For example, since our block events are interfaces, we can just have Forge's events implement our interfaces (by rewriting the Forge classes at runtime).\n\nThe disadvantage:\n- Constructing events becomes quite messy because you need factories (`EventFactory.createBlockChangeEvent(...)`). It gets pretty inconsistent especially when all plugin-provided events would likely be concrete classes (`new MyPluginEvent(...)`).\n## What makes this difficult\n\nThe main difficulty is that we want to maintain correct event handler ordering between the Forge events and Sponge events.\n\nThis is what SHOULD happen:\n- Handler for Sponge event handler at FIRST priority\n- Handler for Forge event handler at FIRST priority\n- Handler for Sponge event handler at LOW priority\n- Handler for Forge event handler at LOW priority\n\nThis is what should NOT happen:\n- Handler for Sponge event handler at FIRST priority\n- Handler for Sponge event handler at LOW priority\n- Handler for Forge event handler at FIRST priority\n- Handler for Forge event handler at LOW priority\n\n(or the inverse)\n\nIf someone fires a Forge event, it should trigger the equivalent Sponge event, and vice versa.\n## Fixing the problem\n\nUnfortunately, we do not yet have a sane way to fix the problem.\n\nHere is one crazy proposal:\n- Change FML's event bus to handle paired events (both sponge's block events and Forge's block events fire interweaved). This will make the event bus code extremely messy.\n## Ignoring the problem\n\nOn the other hand, we may choose to ignore the problem for the following reasons:\n- Forge events are not as well developed and are a lot more inconsistent than ours.\n- This is a lot of work to solve a problem that may not really matter in the grand scheme of things.\n- Figuring out a solution may delay the first release.\n- A solution can still be implemented in the future without breaking API.\n## My opinion\n\nI am currently of the opinion that:\n- We should use concrete event classes.\n- We should ignore Forge events for now.\n",
    "head_branch": "feature/concrete-event-types",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea5dd9087c4d6d37a752",
    "number": 233,
    "body": "This is a proposal for `Location` to be `Location<T extends Extent>`.\n\n`Location` is `Extent/World` + `Vector3d`\n\nIt also adds some methods to get/set `Locations`.\n\nExample usage:\n\n``` java\nLocation<Extent> location = entity.getLocation();\nentity.teleport(location.setExtent(otherWorld));\n```\n\nAlternatives:\n- `Location` only handles `Extent` (`Location` is not generic)\n- `Location` only handles `World`\n- We have no `Location`\n",
    "head_branch": "feature/expanded-locations",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea5ed9087c4d6d37a753",
    "number": 232,
    "body": "**This PR is merely for discussion and is not currently being considered for addition.**\n\nThis idea was proposed by Kobata to fix:\n1. The duplication of Result and Cancellable.\n2. The need for plugins to be able to disable vanilla behavior.\n3. The need for plugins to be able to disable behavior added by other plugins.\n4. To tweak properties of added behavior.\n\nThe basic tenants of this idea are:\n- Each event would have a list of \"callbacks\" that would represent behavior.\n- Callbacks could be cancelled individually.\n- Properties on each callback could be changed (i.e. `callback.setYield(x)` for an explosion).\n- Vanilla behavior would be added to the list of callbacks.\n- After the dispatch of an event has completed, the callbacks would be executed, with the last-added callbacks executed first (LIFO).\n- Vanilla would be the first callback added, so it would always run last. It would not be possible to reorder callbacks.\n\nUnfortunately, the current proposal makes it pretty ugly:\n\n``` java\n@Subscribe(order = Order.LAST)\npublic void onCommandEvent(final CommandEvent event) {\n    if (containsAlias(event.getCommand())) {\n        event.getCallbacks().add(new AbstractCallback() {\n            @Override\n            public void run() {\n                try {\n                    call(event.getSource(), event.getCommand() + \" \" + event.getArguments(), Collections.<String>emptyList());\n                } catch (CommandException e) {\n                    log.warn(\"Failed to execute a command\", e);\n                }\n            }\n        });\n\n        event.getCallbacks().cancelBaseGame();\n    }\n}\n```\n\nThough it's extensible. You could cancel behavior added by another plugin.\n",
    "head_branch": "feature/event-callbacks",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea5fd9087c4d6d37a754",
    "number": 231,
    "body": "Renamed Mooshroom to MushroomCow\n",
    "head_branch": "feature/entities_MushroomCow",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea60d9087c4d6d37a755",
    "number": 230,
    "body": "Merge latest changes from master into feature/entities\n",
    "head_branch": "feature/entites_Merge",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea61d9087c4d6d37a756",
    "number": 229,
    "body": "Changed VillagerAPI to match the LivingEntityAPI.\n\n**PR Breakdown:**\n- Added some javadocs \n- `getName()` methods\n- Changed API design to match LivingEntityAPI\n",
    "head_branch": "feature/entities_Villager",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea62d9087c4d6d37a757",
    "number": 228,
    "body": "**The issue**\nCurrently you cannot modify the behaviour of the `FallingBlock` right after the creation. You have to track the falling block and apply your requested behaviour in an event. The predefined behaviour is required in order to create simple environmental behaviour like a vulkano or fountain.\n\n**PR Breakdown:**\nThis PR adds 4 methods to Falling Block:\n- canPlaceAsBlock() : boolean\n- setCanPlaceAsBlock(boolean)\n- canDropAsItem() : boolean\n- setCanDropAsItem(boolean)\n",
    "head_branch": "feature/entities_FallingBlock",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea63d9087c4d6d37a758",
    "number": 227,
    "body": "**The issue**\nCurrently there is a `getName()` method in `Art`, but for a given name you cannot get the   associated `Art`. So i added the `Arts.valueOf()` method along with some javadocs. Silimar to `DyeColors.valueOf(String)`\n\n**PR Breakdown:**\nAdded the `Arts.valueOf()` and `ArtFactory.getFromName(String)` method\nAdded some missing javadocs (`Art___` only).\nMade classes final that cannot be extended. (I can remove that if this is not disired)\n",
    "head_branch": "feature/entities_arts",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea65d9087c4d6d37a759",
    "number": 226,
    "body": "**The issue**\nCurrently there is now way to use the interface to display infos about an entity.\nThis PR adds a `getName()` to the meta interfaces, so you could do things like this.\n\n``` java\nplayer.sendMessage(\"The horse you are looking at is \" + horse.getHorseColor().getName() + \"!\");\n```\n\n**PR Breakdown:**\nAdded a `getName()` method to all entity/living/meta interfaces.\n",
    "head_branch": "feature/entities_getName",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea66d9087c4d6d37a75a",
    "number": 225,
    "body": "When I started looking at chat events, I noticed some important thing were missing or outdated.\n- No PlayerJoin/LeaveEvent\n- MessageEvent returns String, not Message\n",
    "head_branch": "eventfix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea67d9087c4d6d37a75b",
    "number": 224,
    "body": "Seems silly to make a PR for such a small change...\n",
    "head_branch": "typo-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea68d9087c4d6d37a75c",
    "number": 223,
    "body": "This service provides a common method for plugins to access SQL connections. An upcoming Sponge PR will provide the implementation through a connection pool (probably HikariCP) and a config section containing SQL database connection aliases.\n",
    "head_branch": "feature/sql",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea6ad9087c4d6d37a75d",
    "number": 222,
    "body": "This is basic API for custom crafting recipes, which do support ore dictionary. Ore dictionary and recipes are both created as services, and most files are interfaces. For recipe objects, I decided to use classes, as using constructor is really handy in this case.\n\nEdit: I didn't use ServiceProvider or such things, should I have used?\n",
    "head_branch": "recipes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea6bd9087c4d6d37a75e",
    "number": 220,
    "body": "Edit by Deamon:\n\nThis PR should be finalized now.\n\nTo recap on the changes:\n\nAdded `Achievement`s, achievements may be fetched from the `GameRegistry` and then used in any of several methods added to `Player` in order to grant, revoke an achievement to the player. There is also an `AchievementEvent` added for when a player is granted an achievement.\n\nAdded Statistics, each `Statistic` has a `StatisticGroup` and an optional `StatisticFormat` override. Groups have default formats defined which are used for each statistic in the group. Statistics are obtainable from the `Statistics` pseudoenum or from `GameRegistry`, and may then be used in one of the new methods provided by `Player` in order to set, add to, or reset a statistic for that player. There is an event for statistics changing, this is no longer extended by statistics related events such as the `PlayerBreakBlockEvent` but exists on its own in order to be able to represent a single change and not have the requirement of multiples. New/Custom statistics may be constructed via the `StatisticBuilder` which is obtainable via the `GameRegistry`. Some statistics are associated with items, blocks, entities, or teams and may be fetched by giving the associated type and group to the proper method in `GameRegistry` and then used against a player.\n",
    "head_branch": "feature/stats",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea6cd9087c4d6d37a75f",
    "number": 219,
    "body": "This PR represents the progress in adding all entities to Sponge with methods for functionality. Ideally this will mirror MC Source, Forge, and Bukkit API in a general abstract functionality.\n\n**Entities**\n- [ ] setSize(), getXZSize(), getHeight()\n- [ ] getScale(), setScale()\n- [ ] getMaxHealth(), setMaxHealth()\n\n**Merchants**\n- [ ] getCustomer(), setCustomer()\n\n**Tameable**\n- [ ] isTamed(), setTamed()\n- [ ] getOwner(), setOwner()\n\n**Tamer**\n- [ ] getName()\n- [ ] getUniqueId()\n\n**Ageable**\n- [ ] getAge(), setAge()\n- [ ] isBaby(), setBaby()\n- [ ] isAdult(), setAdult()\n- [ ] canBreed(), setBreeding()\n- [ ] setScaleForAge()\n\n**Villager**\n- [ ] getProfession(), setProfession()\n- [ ] isPlaying()\n- [ ] isTrading()\n\n**Bat**\n- [ ] isAwake(), setAwake()\n\n**Skeleton**\n- [ ] getSkeletonType(), setSkeletonType()\n\n**Slime**\n- [ ] getSize(), setSize()\n",
    "head_branch": "feature/entities",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea6dd9087c4d6d37a760",
    "number": 217,
    "body": "This PR represents the progress in adding all entities to Sponge. Ideally the end result should mirror the MC Source, Forge, and the Bukkit API in functionality.\n\n**Players**\n- [x] OfflinePlayer/OnlinePlayer duality (#131)\n- [x] also in (#72)\n- [x] getHealth(), setHealth()\n- [x] getPosition(), setPosition()\n- [x] getMaxHealth(), setMaxHealth()\n- [x] getHunger(), setHunger(), getSaturation(), setSaturation()\n- [x] isUsingCraftingTable()\n- [x] getOpenInventory()\n\n**Other**\n- [x] Non-mob entities (Items, Armour Stands, Paintings) (#94)\n- [x] hostile mobs\n- [x] friendly mobs\n- [x] villager trades?\n- [x] neutral mobs (Zombie Pigmen, Endermen, Wolves)\n- [x] ambient mobs (Bats) (#72)\n- [x] Entity naming (#45)\n\n**Entities**\n- [x] setSize(), getXZSize(), getHeight()\n- [x] getScale(), setScale()\n- [x] getMaxHealth(), setMaxHealth()\n\n**Merchants**\n- [x] getCustomer(), setCustomer()\n- [x] getTradeOffers(), setTradeOffers()\n\n**Tameable**\n- [x] isTamed(), setTamed()\n- [x] getOwner(), setOwner()\n\n**Tamer**\n- [x] getName()\n\n**Ageable**\n- [x] getAge(), setAge()\n- [x] isBaby(), setBaby()\n- [x] isAdult(), setAdult()\n- [x] canBreed(), setBreeding()\n- [x] setScaleForAge()\n\n**Villager**\n- [x] getProfession(), setProfession()\n- [x] isPlaying()\n- [x] isTrading()\n\n**Bat**\n- [x] isAwake(), setAwake()\n\n**Skeleton**\n- [x] getSkeletonType(), setSkeletonType()\n\n**Slime**\n- [x] getSize(), setSize()\n\n**TradeOffer**\n- [x] getFirstBuyingItem()\n- [x] getSecondBuyingItem()\n- [x] getSellingItem()\n- [x] getMaxUses()\n- [x] getUses()\n",
    "head_branch": "feature/entities",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 15f5baca73cd5fdd2aef54fe4770bf6702b13a7b into 48ed9ac33e46732b9e37efd11ee15de84a53dab6"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ea6ed9087c4d6d37a761",
    "number": 216,
    "body": "This PR represents the progress in adding all entities to Sponge.\n\n**Players**\n- [ ] OfflinePlayer/OnlinePlayer duality (#131)\n- [ ] also in (#72)\n- [ ] getHealth(), setHealth()\n- [ ] getPosition(), setPosition()\n- [ ] getMaxHealth(), setMaxHealth()\n- [ ] getHunger(), setHunger(), getSaturation(), setSaturation()\n- [ ] isUsingCraftingTable()\n- [ ] getOpenInventory()\n",
    "head_branch": "feature/Entities",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea6fd9087c4d6d37a762",
    "number": 215,
    "body": "Here is a list of the things we still need to do for the events API.\n- [ ] player events\n  - [x] PlayerJoinEvent and PlayerQuitEvent (#176)\n  - [x] AsyncPlayerChatEvent (#158) (#143) (#151)\n  - [x] PlayerChangedWorldEvent\n  - [x] PlayerInteractEvent\n  - [x] PlayerMoveEvent\n  - [ ] achievement (#220)\n- [ ] Chest events - refer to inventory events?\n- [ ] Inventory Events\n  - [ ] CraftItemEvent\n  - [ ] EnchantItemEvent\n  - [ ] InventoryDropEvent\n  - [ ] InventoryAddEvent\n  - [ ] InventoryPickupEvent\n  - [ ] InventoryClickEvent\n- [x] Entity riders (#94)\n- [x] Game mode change (#82)\n- [x] Entity interaction type (#206)\n- [x] Teleport cause/teleport event\n- [x] Weather Events  (#212)\n- [x] LightningStrikeEvent, WeatherChangedEvent, WeatherEvent (#212)\n- [x] Entity events\n  - [x] EntityDespawnEvent\n  - [x] ProjectileLaunchEvent\n  - [x] EntityBlockModificationEvent\n  - [x] EntityCreatePortalEvent\n  - [x] EntityDeathEvent\n  - [x] EntityChangeHealthEvent\n  - [x] EntityTeleportEvent\n  - [x] EntityTameEvent\n",
    "head_branch": "feature/events",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 533c444dbea445ac66fd36c81dd99eebb97250ef into 02208d3db2206ba18a2f30eb735790a8ffe421b8"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ea70d9087c4d6d37a763",
    "number": 214,
    "body": "@Minecrell and I have been working on designing the text API. Bleeding contributions are at [LapisBlue/SpongeAPI/feature/chat](https://github.com/LapisBlue/SpongeAPI/tree/feature/chat) where we both have push access and I regularly update [SpongePowered/SpongeAPI/feature/chat](https://github.com/LapisBlue/SpongeAPI/tree/feature/chat) with the latest changes.\n\nHere's what we still have to do:\n\n**Javadocs**\n(all start from org.spongepowered.api as root)\n- [x] text.action.TextActions\n- [x] text.action.TextActionFactory\n- [x] text.action.NullTextActionFactory (inherit)\n- [x] text.chat.ChatPositions\n- [x] text.chat.ChatPositionFactory\n- [x] text.chat.NullChatPositionFactory (inherit)\n- [x] text.chat.TextFormatFactory\n- [x] text.chat.NullTextFormatFactory (inherit)\n- [x] text.action.TextFormats/TextStyles (decide name too)\n- [x] text.message.MessageBuilder\n- [x] text.message.MessageFactory\n- [x] text.message.NullMessageFactory\n- [x] text.title.TitleFactory\n- [x] text.title.NullTitleFactory\n- [x] text.translation.TranslationFactory\n- [x] text.translations.NullTranslationFactory\n\n**General**\n- [x] code style everywhere (intellij format)\n- [x] squash commits\n",
    "head_branch": "feature/chat",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge ee9cc405637c3f992fa22fbbef018710fc093005 into 2a0eee32116599525e56dafde1c904358bdb7d11"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ea71d9087c4d6d37a764",
    "number": 213,
    "body": "<h3><i><b>In this pull request I have:</b></i></h3>\n\n<ul>\n    <li>Added a <code><a href=\"https://github.com/lexware/SpongeAPI/blob/458394a2757eb98a72b9013905431e84e105c460/src/main/java/org/spongepowered/api/entity/Player.java#L66\">getAllowFlight()</a></code> method in the <a href=\"https://github.com/lexware/SpongeAPI/blob/master/src/main/java/org/spongepowered/api/entity/Player.java\">Player.java</a> interface.</li>\n    <li>Added a <code><a href=\"https://github.com/lexware/SpongeAPI/blob/458394a2757eb98a72b9013905431e84e105c460/src/main/java/org/spongepowered/api/entity/Player.java#L73\">setAllowFlight(boolean)</a></code> method in the <a href=\"https://github.com/lexware/SpongeAPI/blob/master/src/main/java/org/spongepowered/api/entity/Player.java\">Player.java</a> interface.</li>\n</ul>\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea72d9087c4d6d37a765",
    "number": 212,
    "body": "Added weather listeners. Also I decided to add the api.weather package and the Weather/WeatherType files so that you can easily access the current weather from World with something like getWeather() that would return a Weather object that could be manipulated. This in unlike Bukkit where you had the hasStorm() and isThundering() in the World methods but no direct way to get weather. \n\nAny ideas about this? Would it be nice to have a world.getWeather ability? If so where would that be? Extent? World? etc..?\n",
    "head_branch": "Weather-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea73d9087c4d6d37a766",
    "number": 211,
    "body": "I added some player events from the todo list and also an EntityMoveEvent, PlayerPickUpItemEvent and PlayerDropItemEvent. I am wondering if those last two events should also extend events in entity.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea74d9087c4d6d37a767",
    "number": 210,
    "body": "Added a fairly basic idea of how achievements can work. Supports 1.8 achievements.\nOpen to input.\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea75d9087c4d6d37a768",
    "number": 209,
    "body": "Not sure whether PlayerDeathEvent should be in event.player or event.entity like it was in Bukkit. In Bukkit it extended EntityEvent I believe which allowed for the use of methods related to item/experience drops.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea76d9087c4d6d37a769",
    "number": 208,
    "body": "Adds a basic teleportation cause and the events.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea77d9087c4d6d37a76a",
    "number": 207,
    "body": "Added getOpposite and isOpposite methods, As well as reviewing and fixing the math for the secondary ordinal directions, but I'm still not convinced they should even be in the API.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge a18e7ac30076ebb83fb87bb3b0273fc501a9f2cc into 7cf72eed21dc6d0d92f93a8e1c06b894f6889b8e"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ea78d9087c4d6d37a76b",
    "number": 206,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ecaab537012a2d5363c460915dfba05fdc9551b9 into ab9cf164e3ddfb87b4447dea2cf3cf9373dd9935"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ea79d9087c4d6d37a76c",
    "number": 205,
    "body": "Heavily -> Heavy\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 91546ea2b9210428154adf8221de32a937bbd520 into d62ee25a58409c7a0fe23ea14fa1cfc51a741209"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea7ad9087c4d6d37a76d",
    "number": 204,
    "body": "As the block API got merged recently, I made some basic block events. Even if this PR won't get merged, it would not hurt to discuss about block events.\n\nEdit: There is also issue http://issues.spongepowered.org/youtrack/issue/SPONGE-62\n\nEdit 2: This also contains rewritten cause and reason system at now... I had to include then as I really needed them for certain events.\n",
    "head_branch": "blockevents",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea7bd9087c4d6d37a76e",
    "number": 203,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea7cd9087c4d6d37a76f",
    "number": 202,
    "body": "This method was really useful in Bukkit.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea7dd9087c4d6d37a770",
    "number": 201,
    "body": "There is no way to get a chunk's World. (By using a ChunkEvent).\n",
    "head_branch": "component-system",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea7ed9087c4d6d37a771",
    "number": 200,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea7fd9087c4d6d37a772",
    "number": 199,
    "body": "l\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea80d9087c4d6d37a773",
    "number": 198,
    "body": "The example plugin did not implement cancelled properly, it just said `implements Cancelled` without an implementation - now it has an implementation.\nI assume this is straight-forward enough to not require pre-discussion.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea81d9087c4d6d37a774",
    "number": 197,
    "body": "This is just a basic Inventory API.\n\n---\n\nEdit by handler: \n\n[YouTrack](http://issues.spongepowered.org/youtrack/issue/SPONGE-33)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea82d9087c4d6d37a775",
    "number": 196,
    "body": "As requested by sk89q in https://github.com/SpongePowered/Sponge/pull/29.\n",
    "head_branch": "vectors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea83d9087c4d6d37a776",
    "number": 195,
    "body": "Added the ability to get and remove NBT tags to items.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea84d9087c4d6d37a777",
    "number": 194,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea85d9087c4d6d37a778",
    "number": 193,
    "body": "getGamemodeAsString() and getHealth()\n",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea86d9087c4d6d37a779",
    "number": 192,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea87d9087c4d6d37a77a",
    "number": 191,
    "body": "Included Platform.java by accident.\nIt gets fixed in an earlier PR.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea88d9087c4d6d37a77b",
    "number": 190,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea89d9087c4d6d37a77c",
    "number": 189,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea8ad9087c4d6d37a77d",
    "number": 188,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge cfec65389a460c04de30353b3fc86573021f5382 into b1ac7dbb91f52e0f42550d8f318180eeac04d7ac"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ea8bd9087c4d6d37a77e",
    "number": 187,
    "body": "Sorry for the tiny commit, but it was bugging me ^_^\n",
    "head_branch": "work",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea8cd9087c4d6d37a77f",
    "number": 186,
    "body": "I made some changes to ensure the JavaDocs were mainly compliant with the contribution guidelines.\n\n**Readability:**  \n- When adjusting wrapping of lines, I made sure to leave (at least) 2 words on the next line\n\n**Consistency:**  \n- Added some missing 'periods' (full stops for those among us who hail from the UK)\n- Wrapped some lines if they exceeded 80 characters\n- Correctly spaced some doc tags (`@return`, `@param`, etc.)\n- Also did some spacing in the code where there should be some\n\n**Exceptions:**  \n- I had some trouble with the `Order.java` class. The table formatting admittedly threw me off a tad.\n\nAlso, in `Plugin.java`, I'd like to ask whether lines 62-83 are correct. I tried to space it out a little but it looks a bit weird.\n\n---\n\nIf you want someone to maintain the documentation in the way that I did here, I'd be glad to do it. [I did a major reformat of nearly all the classes in the Bukkit API JavaDocs](https://github.com/Bukkit/Bukkit-JavaDoc/commits?author=aerouk), so I feel I've got the gist of how a role like this works.\n\nCheers!\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea8dd9087c4d6d37a780",
    "number": 185,
    "body": "When you try to make the events cancel in the real implementation you will see that its not working. And the ASM code (that i have ready for it) is way to much work. Wouldn't it be simpler if we take over forge event method names?\n\nresource files:\n-https://github.com/MinecraftForge/FML/blob/master/src/main/java/cpw/mods/fml/common/eventhandler/Event.java#L107\n-https://github.com/SpongePowered/Sponge/blob/master/src/main/java/org/spongepowered/mod/asm/transformers/EventTransformer.java\n",
    "head_branch": "eventname-patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea8ed9087c4d6d37a781",
    "number": 184,
    "body": "This is a basic particles API to allow to easily spawn (once implemented of course) some particles in a world.\nCriticism is welcome.\n\n---\n\nEdit by handler:\n\n[YouTrack](http://issues.spongepowered.org/youtrack/issue/SPONGE-41)\n",
    "head_branch": "particles",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea8fd9087c4d6d37a782",
    "number": 183,
    "body": "Update the current class example and added an interface example, since after all this is an API\n\nShows examples of formatting, @param @return @throws and the usage of paragraphs\n",
    "head_branch": "temp",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 05432300b19a2ef190d5bd06c3fc4fbe7559ef52 into c42fe9b8cb12c62779736c21dc1114807763b2f0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ea90d9087c4d6d37a783",
    "number": 182,
    "body": "Draft for discussion.\n\nComponent based Inventory system:\nhttp://forums.spongepowered.org/t/dev-inventoryapi/2341\nhttp://issues.spongepowered.org/youtrack/issue/SPONGE-33\nhttps://docs.google.com/spreadsheets/d/1ZnUzTnpvGxlIWt2tABnG6DbJX4qsfccRZ7NdTTJ6FIU/edit#gid=2055793859\n- Inventories are GameObjects, here InventoryViews\n- Each View has InventoryComponents (InventoryParts), like CraftingGrid, Hotbar ...\n- InventorySystem manage the GameObjects/InventoryViews\n- Components are data holder \n  - have only delegate methods to the InventorySystem\n- Support mod Inventories (over Modded Component)\n- Abstract SlotType for non index access\n- raw slot index support\n\nnames are not final\n- Slot/SlotType\n- InventoryView/GameObjectInventory/InventoryParent\n- InventoryComponent/InventoryPart\n- nextFreeAirSlot/nextFreeSlot/nextEmptySlot\n\n---\n\nEdit by handler: \n\n[YouTrack](http://issues.spongepowered.org/youtrack/issue/SPONGE-33)\n",
    "head_branch": "inventory-draft",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea91d9087c4d6d37a784",
    "number": 181,
    "body": "The String permissionNode will need to be changed later on depending how the Permissions API is going to structure \"permission nodes\"\n\nDeals with [SPONGE-44](http://issues.spongepowered.org/youtrack/issue/SPONGE-44)\n",
    "head_branch": "command",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea92d9087c4d6d37a785",
    "number": 180,
    "body": "The Override annotation is wrong, and extending Comparable fixes that. The license was also incorrect.\n",
    "head_branch": "euler-direction-extends-comparable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea93d9087c4d6d37a786",
    "number": 179,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea94d9087c4d6d37a787",
    "number": 178,
    "body": "I feel like it's safe to assume that every Entity will have an associated World. (Please correct me if I'm wrong.)\n",
    "head_branch": "entity",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea95d9087c4d6d37a788",
    "number": 176,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea96d9087c4d6d37a789",
    "number": 175,
    "body": "According to issue #174 I renamed SpongeEventHandler to EventHandler.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea97d9087c4d6d37a78a",
    "number": 173,
    "body": "- Made player extend CommandSource.\n- Added sendMessage to CommandSource as most Sources can receive text. \n",
    "head_branch": "command-Patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 79314db4892cc3dd0d66a4eb0a3881085058df20 into 750e0098c30fefa6d97c1cf1e766e8e9afd7b483"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ea98d9087c4d6d37a78b",
    "number": 172,
    "body": "",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge dfa6b863d50b2f728a51ca130ad3181d626ff120 into d4daf50a736db17f719f9069fdbdb78b4f97b4ff"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623ea99d9087c4d6d37a78c",
    "number": 171,
    "body": "Update Issue to new YouTrack link\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea9ad9087c4d6d37a78d",
    "number": 170,
    "body": "Added command sources to the API regarding this issue: http://issues.spongepowered.org/youtrack/issue/SPONGE-45\n\nI can not come up with any command methods that will be shared so no methods were added to the CommandSource interface. I did, however, create 5 CommandSource representing different sources. Some of the sources have a basic implementation added.\n\nAdditions:\n\nCommandBlockSource: Command comes from command block.\nConsoleSource: Command comes from server console.\nPlayerSource: Command comes from a player (some methods implemented).\nRconSource: Command comes from RCON.\nWebSource; Command comes from web client.\n\n---\n\nAdded a basic Potion API. More methods will be added relating to applying potions once there is an entity implementation.\n\nAdditions:\n\nPotionEffect: The effects that potions will apply to entities\nPotionType: A type of potion which contains PotionEffect's \nPotion: Takes use of a PotionType and applies it to an entity.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea9bd9087c4d6d37a78e",
    "number": 169,
    "body": "Added a method as suggested by @sk89q that automatically generates the chunk if it is loaded and does not exist rather than only generating if shouldGenerate is true. If should generate is false the method would normally return null. This method should never return null. The missing Nullable annotations are added in a seperate PR shown here: https://github.com/SpongePowered/SpongeAPI/pull/155. This also fixes a markdown tick\n",
    "head_branch": "LoadChunkFix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea9cd9087c4d6d37a78f",
    "number": 168,
    "body": "I've written too much markdown lately, sorry. Replaced backticks with @code. \n",
    "head_branch": "no-markdown",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea9dd9087c4d6d37a790",
    "number": 167,
    "body": "When setting up a checkstyle plugin, eclipse places a .checkstyle config file in the project directory. This should be ignored when committing.\n",
    "head_branch": "ignore-checkstyle",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea9ed9087c4d6d37a791",
    "number": 166,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ea9fd9087c4d6d37a792",
    "number": 165,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eaa0d9087c4d6d37a793",
    "number": 164,
    "body": "You should be able to get the Voxel of an Entity. Voxel is preferred over Vector3i since you can get the block that the Entity is at without unnecessary function calls. \n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eaa1d9087c4d6d37a794",
    "number": 163,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eaa2d9087c4d6d37a795",
    "number": 162,
    "body": "Timespans or durations are often hard to document and a developer might not always know which unit a method parameter expects (usually it's milliseconds, but in this case we also have Minecraft ticks). \n\nIn order to simplify this, I created a simple Duration class that holds an internal value in the milliseconds unit and converts to Minecraft ticks, seconds, minutes and hours. It can also do addition and subtraction.\n\nCode example:\n\n``` java\nDuration d = Duration.minutes(10).add(Duration.seconds(30));\nSystem.out.println(d.getMillis()); // should print \"630000\"\n```\n",
    "head_branch": "duration",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eaa3d9087c4d6d37a796",
    "number": 161,
    "body": "Removed \"serverity\" property so if checkstyle fails the build does not pass \nModule:\n- NewlineAtEndOfFile\n- JavadocType:\n  - Checks for missing @param \n  - Checks for invalid tags\n- JavadocStyle:\n  - Checks if first sentence is an actual sentence \n  - If sentences contains the regex ([.?!][ \\t\\n\\r\\f<])|([.?!]$) at the end\n- UnusedImports\n",
    "head_branch": "documentation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eaa4d9087c4d6d37a797",
    "number": 160,
    "body": "Methods that can return null need to be annotated as @Nullable in line with the conventions found here: https://github.com/SpongePowered/SpongeAPI/blob/master/CONTRIBUTING.md\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eaa5d9087c4d6d37a798",
    "number": 159,
    "body": "This pull request adds a formatter profile for Eclipse followning the official code conventions for the Sponge Project -> https://docs.google.com/document/d/1afZMMsU9yODX6d6WZAiKnabMbkuDXa_3ulsuDKZcfxg\n\nIt was created by exporting the checkstyle.xml via the Checkstyle Plugin to a Eclipse Formatter profile.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eaa6d9087c4d6d37a799",
    "number": 158,
    "body": "per-player basis, support getting and modifying the recipients and still\nsetting the chat message globally for all recipients, if no specific\nmessage is defined.\n",
    "head_branch": "patch-chat-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eaa7d9087c4d6d37a79a",
    "number": 156,
    "body": "Adds an API for the Titles added in Minecraft 1.8. There is already a pull request in #106, but this one is slightly different:\n- Fluent API, multiple calls can be chained.\n- Added missing ways to clear or reset the titles.\n- Improved and more detailed Javadocs.\n#### Example Usage\n\n``` java\nplayer.sendTitle(game.createTitle()\n    .title(\"Sponge\")\n    .subTitle(\"http://www.spongepowered.org/\")\n    .stay(2400) // Stay for 1 minute\n);\n\n// Reset the previously sent title\nplayer.resetTitle();\n```\n\n---\n\nEdit by handler:\n\n[YouTrack](http://issues.spongepowered.org/youtrack/issue/SPONGE-16)\n",
    "head_branch": "title",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eaa8d9087c4d6d37a79b",
    "number": 155,
    "body": "There were some missing Nullable annotations so I added them with this commit\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eaa9d9087c4d6d37a79c",
    "number": 154,
    "body": "This interface represents the server.properties. Please note, all options are until 1.7.x only.\n",
    "head_branch": "patch-4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eaaad9087c4d6d37a79d",
    "number": 153,
    "body": "We have the Vector2i class already, let's use it.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eaabd9087c4d6d37a79e",
    "number": 152,
    "body": "Some of this may be slightly off but it's better than it was\n\nSee http://bit.ly/spongestyle\n",
    "head_branch": "style-reformat",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eaacd9087c4d6d37a79f",
    "number": 150,
    "body": "See #148 for the rationale.\n",
    "head_branch": "hotfix/issue-148",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eaadd9087c4d6d37a7a0",
    "number": 149,
    "body": "Additions:\n`CommandBlock`: Contains information of a command block.\n`GuiBlock`: An interface for blocks that have a GUI.\n\nEdits:\n`Block`: Added Redstone power level.\n",
    "head_branch": "command-block-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eaaed9087c4d6d37a7a1",
    "number": 147,
    "body": "Adds some missing Nullable annotations and also adds a method so you can obtain plugins by there ID rather than only their name.\n\nHere is the Implementation PR: https://github.com/SpongePowered/Sponge/pull/35\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eaafd9087c4d6d37a7a2",
    "number": 146,
    "body": "This system is easily expandable and\nfeatures such as hover can be added easily, along with any other chat\nfeatures that gets added to the game in the future, I feel that this\nsystem of chat formatting will more organized to use and easier to do\nrepetitive formatted chat messages such as: \n\"You do not have permission to ...\"\n\nBelow shows how to use this system, these examples assume that\n\"player.sendmessage()\" accepts the following arguments: string, string and my “format” type,\nmy “formatted message” type. Once player.sendmessage and any other\nchat broadcasters like it are put in, I will submit a commit to\nimplement that if not already done (this is if this commit is merged)\n\nNow, Code examples:\n\n```\nString message = \"Hi\";\n\n//Plain text saying \"Hi\"\nplayer.sendmessage(message)\n\n//Dark Red Underlined Text saying \"Hi\" (showing 3 ways)\n// #1\nplayer.sendmessage(message, new ChatFormat(MinecraftColor.DARK_RED, ChatFormat.Formatting.Underlined));\n\n// #2\nChatFormat myformat = new ChatFormat(MinecraftColor.DARK_RED, ChatFormat.Formatting.Underlined);\nplayer.sendmessage(message, myformat);\n\n// #3\nFormattedMessage messageformatted = new FormattedMessage(message, myformat);\nplayer.sendmessage(messageformatted);\n\n//Dark Red Underlined and Bold Text saying \"Hi\" (showing 1 way)\n// #1\nChatFormat.Formatting[] myformats = new ChatFormat.Formatting[]{ChatFormat.Formatting.Underlined, ChatFormat.Formatting.Bold}\nplayer.sendmessage(message, new ChatFormat(MinecraftColor.DARK_RED, myformats));\n```\n\nEDIT:\nI feel that my system is better then the other 3 existing PR's revolving around the same concept (no offence to any of the makers or those PR's in anyway what so ever) because in my opinion at least, my system is simpler and easier to use, but yet advanced enough to get a combination of chat formats and colors applied without using over excessive code, this system is easily expandable (within reason) for any future improvements that Mojang decides to add, and on that note I foresee this system withstanding time and updates quite easily. I think that something as simple as sending a chat message should be 3 basic things: Quick, Easy and Painless.\nI believe that this PR covers all of these things, quick because you define 1 format or even 1 formatted message and use it as many times as you want, so less writing the same code over and over. \nEasy because all of the Enums are clear and simple, and their meaning is apparent, I believe that the classes and constructors are named appropriately and therefor easier to remember. \nAnd lastly painless, for plugin developers it's painless because it's quick and easy, but for the SpongeAPI developers and updater's, it's painless because of it's expandability, Minecraft is constantly being updated and improved, and you do not want to be rewriting these classes every few updates, that's why I tried to keep it simple, easy to understand, less ambiguous code to get messed up and easiliy updatable! \n\nAnd that's all I got, thanks for reading if you made it this far ;) please feel free to leave me a comment below, constructive criticism only please :D \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eab0d9087c4d6d37a7a3",
    "number": 145,
    "body": "",
    "head_branch": "command-block-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eab1d9087c4d6d37a7a4",
    "number": 144,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eab2d9087c4d6d37a7a5",
    "number": 143,
    "body": "Change AsyncPlayerChatEvent to add setting/getting the recipients of the message.\n\nThis time, I knew that there were Contribution Guidelines, so it should fit.\n",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eab3d9087c4d6d37a7a6",
    "number": 142,
    "body": "",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eab4d9087c4d6d37a7a7",
    "number": 141,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eab5d9087c4d6d37a7a8",
    "number": 140,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eab6d9087c4d6d37a7a9",
    "number": 139,
    "body": "This adds an interface for future block-related events.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eab7d9087c4d6d37a7aa",
    "number": 138,
    "body": "Add a way to set/get the recipients of a sent message from AsyncPlayerChatEvent.\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eab8d9087c4d6d37a7ab",
    "number": 137,
    "body": "Added interface for Vehicle and minecart.\nVehicle can be used for boats as well, it allows you to apply a velocity to the entity, which is what vehicles use to move, unlike regular entities.\n",
    "head_branch": "minecart-patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eab9d9087c4d6d37a7ac",
    "number": 136,
    "body": "Added BlockFace class\nAdded basic Block methods that will be needed regardless of how the\nrest of the API works\n",
    "head_branch": "block-feature-branch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eabad9087c4d6d37a7ad",
    "number": 135,
    "body": "Component-System:\nOriginally from #132 However discussion these commits have ended, and should be revised to be Pulled.\n",
    "head_branch": "discussion",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eabbd9087c4d6d37a7ae",
    "number": 134,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eabdd9087c4d6d37a7af",
    "number": 133,
    "body": "Needs getters but there needs to be a discussion about how much should events be used (or if some need to be used)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eabed9087c4d6d37a7b0",
    "number": 132,
    "body": "components-system branch: Big thanks to @Zidane for starting components up\nDocumented some values with \"value in {link org.spongepowered.api.math.Vector3i Vector3i}\" due to the fact that new people may not be used to using Vector3i\n",
    "head_branch": "components",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eabfd9087c4d6d37a7b1",
    "number": 131,
    "body": "Check if a player is online or not\nCurrently we don't know if there will be a class for an offlline player, but yes or no its always\nhandy to know if a player instance is online or not\n",
    "head_branch": "patch-7",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eac0d9087c4d6d37a7b2",
    "number": 130,
    "body": "Add a location for entities and just generally to be used. Takes world, x, y, and z.\n\nAdd an AsyncPlayerMoveEvent that can return the location going to and the location going from.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eac1d9087c4d6d37a7b3",
    "number": 129,
    "body": "Actually get pulled this time :P @Zidane \n",
    "head_branch": "components",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eac2d9087c4d6d37a7b4",
    "number": 128,
    "body": "Forums had incorrect spelling: Fourms. With this amazing new top of the line fix, it will have the correct spelling.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eac3d9087c4d6d37a7b5",
    "number": 127,
    "body": "Forums is not a proper noun.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 2329b779f73915f21dea0319f24a34ac1c8d6cb0 into 7da5e8e489270c969cfe435ac028ca1e5dc9bd2a"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eac4d9087c4d6d37a7b6",
    "number": 126,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eac5d9087c4d6d37a7b7",
    "number": 125,
    "body": "It'd be best to merge this after Location is implemented.\n",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eac6d9087c4d6d37a7b8",
    "number": 124,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eac7d9087c4d6d37a7b9",
    "number": 123,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eac8d9087c4d6d37a7ba",
    "number": 122,
    "body": "Helping out in component-system branch. NOTE: This is not a PR to the master branch DO NOT get confused. Meep @Zidane :D\n",
    "head_branch": "components",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 80b0060dc9a65f9c5d86ac0dcee4d39a3714e3fa into 7756f2daabb72974d179a6d2230b12fca5b684c9"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623eac9d9087c4d6d37a7bb",
    "number": 121,
    "body": "The return type can be subject to change depending on how sponge handles difficulty\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eacad9087c4d6d37a7bc",
    "number": 120,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eacbd9087c4d6d37a7bd",
    "number": 119,
    "body": "-Added GameRules to World class.\n-Added GameRule interface\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eaccd9087c4d6d37a7be",
    "number": 118,
    "body": "Simply changed the documentation to be consistent about `Order.BEFORE_POST` and `Order.POST` be cancelable.\n\nThis should address #98.\n",
    "head_branch": "spongeapi-98",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 25447aa63a45b826efbecc8dc163425deb555021 into f36f25617f3d61dd4db0aa1936f197f3c579dda7"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eacdd9087c4d6d37a7bf",
    "number": 117,
    "body": "",
    "head_branch": "patch-11",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eaced9087c4d6d37a7c0",
    "number": 116,
    "body": "",
    "head_branch": "patch-10",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eaced9087c4d6d37a7c1",
    "number": 115,
    "body": "",
    "head_branch": "patch-9",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eacfd9087c4d6d37a7c2",
    "number": 114,
    "body": "",
    "head_branch": "patch-8",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ead0d9087c4d6d37a7c3",
    "number": 113,
    "body": "Added method in VoxelVolume so that a collection of entities can be\naccessed in any given area without having to already have a given\nentity in memory.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ead1d9087c4d6d37a7c4",
    "number": 112,
    "body": "get the authors of a plugin\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ead2d9087c4d6d37a7c5",
    "number": 111,
    "body": "Get the plugin author from the plugin\n",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ead3d9087c4d6d37a7c6",
    "number": 110,
    "body": "Author (singular) should be something useful to identify a plugin\nThink of \"Survivalgames by XX\" or \"Survivalgames by ZZ\"\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ead4d9087c4d6d37a7c7",
    "number": 109,
    "body": "Despite usernames being deprecated players still need a way to get the player by their name.\nPlayers won't type UUID's in commands.\n\nOn implementation this could be done using the mojang API to fetch the most recent UUID based on their username\n\nSponge PR: https://github.com/SpongePowered/Sponge/pull/30\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ead5d9087c4d6d37a7c8",
    "number": 108,
    "body": "I added methods for setting/getting general entities movement speed and invulnerablity. I also added getters/setters for player flying and flight speed.\n",
    "head_branch": "entityabilities",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ead6d9087c4d6d37a7c9",
    "number": 107,
    "body": "This are the very basic potion effects for livingentities.\n\nIt is possible to add own effect types.\nIt is also very versitile, because you can also use it for potions.\n",
    "head_branch": "potioneffect",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ead7d9087c4d6d37a7ca",
    "number": 106,
    "body": "Update from #26.\n\nMC Title 1.8 ingame example:\n\n![MC Title 1.8 ingame example](http://cdn.idigitaltimes.com/sites/idigitaltimes.com/files/styles/large/public/2014/08/28/2014/05/15/18655.jpg?itok=vVwSA5Tl)\n",
    "head_branch": "title",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ead8d9087c4d6d37a7cb",
    "number": 105,
    "body": "Refresh and reload. Sometimes bugs happen and the chunk either doesnt appear on the player either its kindof 'broken'\n",
    "head_branch": "patch-7",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623ead9d9087c4d6d37a7cc",
    "number": 104,
    "body": "",
    "head_branch": "patch-6",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eadad9087c4d6d37a7cd",
    "number": 103,
    "body": "Its living , should have a hunger level.\n",
    "head_branch": "patch-4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eadbd9087c4d6d37a7ce",
    "number": 102,
    "body": "",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eadcd9087c4d6d37a7cf",
    "number": 101,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eaddd9087c4d6d37a7d0",
    "number": 100,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eaded9087c4d6d37a7d1",
    "number": 99,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eadfd9087c4d6d37a7d2",
    "number": 97,
    "body": "This pull request in general fixes up Javadoc for missing params, broken links, returns on voids, and similar things. It also includes Javadoc on some things that did not previously have it. I would have done more, but for some things I wasn't sure about your specific thoughts on how it should work so I left it as is.\n\nI'm rather tired as it's 12:30 right now and I normally go to bed at 10, so let me know if anything needs to be fixed or you want more description of the PR or something, as I may have missed it.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eae0d9087c4d6d37a7d3",
    "number": 96,
    "body": "Add Forum Link\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eae1d9087c4d6d37a7d4",
    "number": 95,
    "body": "Adds Hanging and Projectile entities, along with a `ProjectileSource`, and `Voxel` and `Entity` source children\n",
    "head_branch": "entity-hanging-projectile",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eae2d9087c4d6d37a7d5",
    "number": 94,
    "body": "Add Vehicle entity with core `VehicleEvent`, and enter/leave events.\n",
    "head_branch": "interface-vehicle",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eae3d9087c4d6d37a7d6",
    "number": 93,
    "body": "Easy way for plugins and other systems to set an invulnerable state on a Damageable thing.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eae4d9087c4d6d37a7d7",
    "number": 92,
    "body": "This a general class (perhaps better referred to as an `enum`) that handles formatting and colors. Documentation is convoluted and a bit sparse, but I think it's sufficient for now.\n\nNote: I created a new package `org.spongepowered.api.chat` for it, because I wasn't sure where to put the file.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eae5d9087c4d6d37a7d8",
    "number": 91,
    "body": "Automatically uploads GitHub pages when `githubPages` task is run.\n**Should** fix SpongePowered/SpongeAPI/pull/79\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eae6d9087c4d6d37a7d9",
    "number": 90,
    "body": "It works similarly to gson, yet different.  Gson uses lots of type checks, I use generic types.\n\nHere's a gist of example usage. (Some names may differ)\nhttps://gist.github.com/killjoy1221/0701ad483f334dd20687\n\nI'm open to suggestions on how else to do things.\n\nImplementation: SpongePowered/Sponge#49\n",
    "head_branch": "config",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eae7d9087c4d6d37a7da",
    "number": 89,
    "body": "I have not seen anything about inventories been added yet, so here is this. One notable difference here is we can set the title of the inventory hopefully, unlike you can in Bukkit. (Where you would have to create a new inventory object and change the name) \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eae8d9087c4d6d37a7db",
    "number": 88,
    "body": "Since we have a damage method, we might as well make a method to heal entities too. \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eae9d9087c4d6d37a7dc",
    "number": 86,
    "body": "Added durability support for  Item, added ItemStacks, added Tools(Spade,\nsword, axe, hoe or pickaxe)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eaead9087c4d6d37a7dd",
    "number": 85,
    "body": "- Missing \\* line 77 Game.java\n- Missing ) line 36 World.java\n- Removed extra whitespace  line 63-64 World.java\n",
    "head_branch": "documentation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eaebd9087c4d6d37a7de",
    "number": 84,
    "body": "Simply returns a plugin-specific data folder for structure and ease of use.\n\nSponge PR: https://github.com/SpongePowered/Sponge/pull/31\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b688e94bb9d8482e42545a5153a396961d5f990f into 25447aa63a45b826efbecc8dc163425deb555021"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623eaecd9087c4d6d37a7df",
    "number": 83,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eaedd9087c4d6d37a7e0",
    "number": 82,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eaeed9087c4d6d37a7e1",
    "number": 81,
    "body": "Adds a getLocale method to the player interface. \n\nNMS keeps track of which locale the player has selected in EntityPlayer field 'locale' as a String (default \"en_US\") and updates it when packet 0x15 Client Settings is sent (on connect + when settings are changed). \n\nWill need to store the parsed Locale and update on packet to avoid having to lookup with LocaleUtils on each potential call\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eaefd9087c4d6d37a7e2",
    "number": 80,
    "body": "Adding core event interfaces that extend the underlying `VoxelEvent` and `EntityEvent` interfaces\n",
    "head_branch": "events-block-break-place",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eaf0d9087c4d6d37a7e3",
    "number": 79,
    "body": "Gradle plugin to automatically publish JavaDocs to GitHub pages when `githubPages` goal is run.\n\nSee https://github.com/ajoberstar/gradle-git#travis-ci-authentication-notes for setting the GH_TOKEN variable, I can't do that bit.\n\n@sk89q, I believe you setup the .travis file so it makes sense for you to do that bit I guess.\n\nSpongePowered/Meta#5\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eaf1d9087c4d6d37a7e4",
    "number": 78,
    "body": "This PR adds basic scoreboard support to the API.\nThe scoreboard api is able to handle nearly every scenario possible.\n\nYou can add one Objective to multiple VisibleObjectiveCollections, you can add those to multiple players, or even implement ScoreProvider or SettableScoreProvider and return the score of each entry dynamically.\n",
    "head_branch": "scoreboard",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eaf2d9087c4d6d37a7e5",
    "number": 77,
    "body": "Because of the debate with inventory formats (pr #9), I've moved the `ItemStack`\nto a separate PR so that we can get this merged sooner, and continue\nwith interfaces that depend on this.\n",
    "head_branch": "itemstack",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eaf3d9087c4d6d37a7e6",
    "number": 76,
    "body": "- Shows classname instead of whole package while still referring to the\n  class in that package\n",
    "head_branch": "documentation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eaf4d9087c4d6d37a7e7",
    "number": 75,
    "body": "Vector3i Voxel/Block getters for Chunk and World. I guess they're simply forgotten when Vector3i was added. They'll be definitely needed in my opinion.\n",
    "head_branch": "voxels",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eaf5d9087c4d6d37a7e8",
    "number": 73,
    "body": "- Resolves #71 \n- Created CONTRIBUTING.md\n- Updated README.md\n",
    "head_branch": "documentation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 10c6a05c499587cf85c0f1abf8f6c414d1cda846 into 74766ec3e1d2a6d32a4fb56252f72185b5f69aca"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eaf6d9087c4d6d37a7e9",
    "number": 72,
    "body": "- Updated JavaDocs for classes as well.\n- ItemEntity:\n  - Created class\n- Entity:\n  - Added methods getPosition(), getWorld(), teleport(vector3i, world), teleport(x, y, z, world)\n- OfflinePlayer:\n  - Created class\n  - Added methods getName(), getUniqueID(), hasJoinedBefore(), isBanned(). isWhitelisted()\n- Player:\n  - Added methods hasJoinedBefore(), isBanned(), isWhitelisted()\n",
    "head_branch": "main",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eaf7d9087c4d6d37a7ea",
    "number": 69,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eaf8d9087c4d6d37a7eb",
    "number": 68,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eaf9d9087c4d6d37a7ec",
    "number": 67,
    "body": "Seems more logical for event hooks to ignore events that have already been cancelled. Listening to cancelled events should be an intentional thing.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 61d6839164bdfe5c390b9f6215826a791350acdc into 01087a102cad49ff1a628bd3a636d2907f35c467"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eafad9087c4d6d37a7ed",
    "number": 65,
    "body": "An API to access a block's state. This is based on the new block state system in 1.8 which replaces the concept of metadata. It provides a type safe way of accessing metadata. This pull request supports boolean, int, string and direction for the types a block state can have. \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eafbd9087c4d6d37a7ee",
    "number": 64,
    "body": "Adding a base event interface for both `Entity` and `Player`\n",
    "head_branch": "events-entity",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eafcd9087c4d6d37a7ef",
    "number": 63,
    "body": "Generic class for player events and class for chat events.(sorry for the second PR, I accidentally deleted the original repo)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eafdd9087c4d6d37a7f0",
    "number": 62,
    "body": "Added a method to grab the world the block is in.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eafed9087c4d6d37a7f1",
    "number": 60,
    "body": "Signed-off-by: Steven Downer grinch@outlook.com\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eaffd9087c4d6d37a7f2",
    "number": 59,
    "body": "Updated `BlockEvent` with `Voxel getVoxel()` for block/position. I'm debating\nrenaming the events to `VoxelEvent` but that may be too different from\nwhat devs are accustomed to.\n",
    "head_branch": "box-event-voxel",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb00d9087c4d6d37a7f3",
    "number": 58,
    "body": "Add Damageable class, basic methods, Updated LivingEntity class\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb01d9087c4d6d37a7f4",
    "number": 57,
    "body": "API to get the block state(addition in 1.8 to replace metadata) of a block. \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb02d9087c4d6d37a7f5",
    "number": 56,
    "body": "Generic class for player events and class for chat events.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb03d9087c4d6d37a7f6",
    "number": 55,
    "body": "added enchantments, redeisnged the item framework to make it more familiar to modders, as well as added much needed functionality. Why git decided that ItemBlock was renamed to ItemMetaData is beyond me though. I deleted the first and created the second\n",
    "head_branch": "item_redesign",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb04d9087c4d6d37a7f7",
    "number": 54,
    "body": "Added in some player events as well as some base entity and player event classes as well as a Location class to go with some of the events.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb05d9087c4d6d37a7f8",
    "number": 53,
    "body": "This is a (basic - needs some work) general world-related class that encapsulates the world, x, y, and z coordinates, and the float and yaw of a point. \nI was a bit hesitant to submit this since I notice there was (and I believe still is) some ongoing discussion about vectors, but I'll submit this nonetheless.\nNote: many of the methods still require documentation.\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb06d9087c4d6d37a7f9",
    "number": 52,
    "body": "`BlockEvents` interface may be combined with any other event interface\nrather than limiting child classes to being of one type.\n\nFor convenience, a base abstract class remains, so that simple events\ndon't need to repeat code.\n\nBased on the discussion for 63b4ed2c\n",
    "head_branch": "event-interfaces",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb07d9087c4d6d37a7fa",
    "number": 51,
    "body": "This PR adds a pom.xml, plain and simple. The intention is to hopefully allow SpongeAPI to have a Maven repository later on.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb08d9087c4d6d37a7fb",
    "number": 50,
    "body": "Raw IDs are the old format of IDs before the String ones appeared.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb09d9087c4d6d37a7fc",
    "number": 49,
    "body": "Add interfaces for NBT tags\n\nI'm open to suggestions\n",
    "head_branch": "nbt-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb0ad9087c4d6d37a7fd",
    "number": 48,
    "body": "Addresses #45\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb0bd9087c4d6d37a7fe",
    "number": 47,
    "body": "Suggestion for a text/chat API supporting all features introduced in 1.7 and later:\nhttps://github.com/Bukkit/Bukkit/pull/1111\n\nAdded integration to `Title`API.\nThis API is also meant to be used with other features introduced in 1.8 (signs, books...).\n\nAll authors gave permission to relicence it under MIT.\n\nDue to a lack of matching classes i copy/pasted it just yet.\nAny suggestions for improvements?\n\n**PR Breakdown:**\n\nThis PR adds a builder interface based on a `Message` to which you append `MessagePart`s to build a rich chat message containing (or not):\n- a `TextFormatting` compatible text, a localized text, an `Entity` name, an `ItemStack` name or an `Achievement` name ;\n- an optional `TextHover` text (showing a multi-color multi-line text, an `Achievement` description, an `Entity` description or an `ItemStack` description) ;\n- an optional `TextClickAction` (executing commands / sending chat message, proposing commands / proposing chat message, or opening urls (actually opens the prompt), ...).\n\nThese messages handle colors and formatting using `TextFormatting` just like standard messages.\n\nMany (many) shortcuts have been added to `Message` to make it easier to append specific elements, see `Message` static constructors, append methods and insert methods.\n\n**Authors:**\n- @bendem did a lot of things\n- @Ribesg did a lot of things\n- @ST-DDT did a lot of things\n",
    "head_branch": "chatAPI",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb0cd9087c4d6d37a7ff",
    "number": 46,
    "body": "",
    "head_branch": "gitignore",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7859b3fc50e4d4143bc54ca60a2e21d196b19909 into 2f71f8d8160ae7983027d5db98375054905300e3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb0dd9087c4d6d37a800",
    "number": 44,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb0ed9087c4d6d37a801",
    "number": 43,
    "body": "Added two methods for getting the World and Chunk the player is in to the player interface.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb0fd9087c4d6d37a802",
    "number": 42,
    "body": "PlayerEvent being the base class for all player event.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb10d9087c4d6d37a803",
    "number": 41,
    "body": "This adds a dependency that adds the javax.annotation.Nullable annotation.\nIt also adds the Nullable annotation where applicable.\n\nThis pull request should make the API match the Nullable annotation requirement of the contribution guidelines.\n",
    "head_branch": "feature/null-check",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb11d9087c4d6d37a804",
    "number": 40,
    "body": "Add a method to retrieve a player's UUID (universally unique identifier).\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb12d9087c4d6d37a805",
    "number": 39,
    "body": "As suggested on https://github.com/SpongePowered/SpongeAPI/commit/0088ec468954b8ca74a0e4cebe93a44d39eb94f3#commitcomment-7719363\nNote the document was authored by @sk89q\n",
    "head_branch": "readme-guideline-link",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f0429e4c2c9fcd60e06d021263e4e76e3d6ca07b into 63b4ed2c5070be7efdb85c08342e041cb38f8a9e"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb13d9087c4d6d37a806",
    "number": 38,
    "body": "Adding collection of online players, max number of players, and a getPlayer method to `Game`\n",
    "head_branch": "game-players",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb14d9087c4d6d37a807",
    "number": 37,
    "body": "We somehow missed this in the last PR.\n",
    "head_branch": "human-entity-extends",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b329380751cd1c1f06f65ae1e99cb982f4c7b2d2 into 894da6c9e7d3d4bd432a6d14a4a8bf5851ad465f"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb15d9087c4d6d37a808",
    "number": 36,
    "body": "Adding an abstract base event class for both `Entity` and `Player`\n",
    "head_branch": "events-entity",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb16d9087c4d6d37a809",
    "number": 35,
    "body": "Based on @mikeprimm feedback on c34d11d0, renaming chunk coordinates in method sig to `cx`, etc.\n\nClarifying that `getChunk` returns null if it's not loaded.\n\nAdding a `loadChunk` method, with optional bool to disable generating.\n",
    "head_branch": "chunk-load",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb17d9087c4d6d37a80a",
    "number": 34,
    "body": "Adding a base `BlockEvent` interface.\n",
    "head_branch": "events-block",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1e5a3d2da0326585d1f808a882e4c83f3d0b70c8 into 610dd530f37beaeec2d517ff4e0482e4e27937f7"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623eb18d9087c4d6d37a80b",
    "number": 33,
    "body": "Added some getters and setters to the Item Interface\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb19d9087c4d6d37a80c",
    "number": 32,
    "body": "So I added functions to get items default attack damage and  default name in given language to Item interface. I also created ItemTool interface for tools/weapons/everything which can have durability, so max durability can acquired easily without constructing ItemStacks (which aren't merged at now...)\n\nActually I just ported the methods from my rejected Material idea.\n",
    "head_branch": "items",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb1ad9087c4d6d37a80d",
    "number": 31,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb1bd9087c4d6d37a80e",
    "number": 30,
    "body": "So that adds simple double based Location object. Bukkit had it and I needed it with every my plugin. And if we use this instead of Vector3, we can add our new methods, when it is necessary.\n\nI use doubles because they're needed by entity locations, but we still can round them to ints for blocks. Plugin developer can then easily store all kinds of locations with same object. And its of course serializable.\n",
    "head_branch": "locations",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb1cd9087c4d6d37a80f",
    "number": 29,
    "body": "Adding some interfaces for commands.\n\nI am open to suggestions on this pull request.\n",
    "head_branch": "command-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb1dd9087c4d6d37a810",
    "number": 27,
    "body": "Adding Entity class\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb1ed9087c4d6d37a811",
    "number": 26,
    "body": "",
    "head_branch": "title",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb1fd9087c4d6d37a812",
    "number": 25,
    "body": "I failed a bit on my previous pull request. So here I go again.\n\nExtending Block Class and adding a Entity class framework\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb20d9087c4d6d37a813",
    "number": 24,
    "body": "Provide people with groundwork on the entity system. I derped a bit with creating a branch too late so this includes my changes to the Block class.\n",
    "head_branch": "Entities",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb21d9087c4d6d37a814",
    "number": 23,
    "body": "Simple change that I will need to work on the events.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb22d9087c4d6d37a815",
    "number": 22,
    "body": "If I were you I would do use Double instead of Int, because the most times when you make a plugin and will use the getBlock(); method. You  will love it to add 0.5 to it. Otherwise players will teleport in to the ground (and setting that 1 block higher also doesn't look very nice).\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb23d9087c4d6d37a816",
    "number": 21,
    "body": "Added entity class with most field getters and setters.\nWill support mods as long as the entity type can be modified by the server at any time.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb24d9087c4d6d37a817",
    "number": 20,
    "body": "Adds abstract classes for `World`/`Chunk` load and unload events.\n",
    "head_branch": "events-world",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ea2665a737948c4c40f7cdba9bc56b129c73c706 into f8f7cd04ba8a6b0cff4bfba4e8d17521b83e396b"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623eb25d9087c4d6d37a818",
    "number": 19,
    "body": "Added Entity interface with field getters and setters.\nWill impl when PR accapted\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb26d9087c4d6d37a819",
    "number": 18,
    "body": "Added Entity interface with most getter & setters of all fields.\nWill need some more methods later on and i system for entity type that supports mods.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb27d9087c4d6d37a81a",
    "number": 17,
    "body": "If this API does not use permissions, tell me to close this pull\nrequest.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb28d9087c4d6d37a81b",
    "number": 16,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb29d9087c4d6d37a81c",
    "number": 15,
    "body": "Supports colors, fancy stylings, and click/hover events.\n\nThe sooner we don't need to use legacy chat the better.\n",
    "head_branch": "chat",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb2ad9087c4d6d37a81d",
    "number": 14,
    "body": "Added the licence to Item and ItemBlock so travis CI doesn't fail.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 2cc180f2f966aba9ac72a0b68c8988bb5ee1c7fb into bcca794808492447ed53bfaacd82184a56a86a54"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623eb2bd9087c4d6d37a81e",
    "number": 13,
    "body": "Can either be a single string or an array.  Should use the plugin id.\n",
    "head_branch": "dependency",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb2cd9087c4d6d37a81f",
    "number": 12,
    "body": "Signed-off-by: Steven Downer grinch@outlook.com\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge abdfa2d9942f195dfabe9c816af643d9ca0f40dc into 7204e6798cabb27d2d742e02fc7e340699e5e07a"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623eb2dd9087c4d6d37a820",
    "number": 11,
    "body": "Adds a location interface with getters for co-ordinates, the world, and the block at the location. Also adds getLocation() to the block interface.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb2ed9087c4d6d37a821",
    "number": 10,
    "body": "...nterfaces.\n\nThere are certain design decisions made with this commit that require discussion. For one I am not a fan of the way certain API's treat the add/subtract systems. I feel that when adding two locations together the original object should not be modified and a new object should be returned.  If someone wishes to do `location.add(0, 1, 0)` and use `location` they have to worry about cloning the original `location` before calling the `add(0, 1, 0)` operation on it.\n\nThis interface links the `Chunk` and `World` interfaces laid out already.  No compliments to a `Block` system have been put in for this interface yet, as there might need to be some separate discussion about how to treat the `Block` interface.  Can come back and add in the appropriate methods relating a `Location` to a `Block` later.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb2fd9087c4d6d37a822",
    "number": 9,
    "body": "Adding core inventory interface with essential add/get/clear methods. Includes\nempty `ItemStack` interface - awaiting `Material` interface in pending PRs.\n\n---\n\nEdit by handler: \n\n[YouTrack](http://issues.spongepowered.org/youtrack/issue/SPONGE-33)\n",
    "head_branch": "interface-inventory",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb30d9087c4d6d37a823",
    "number": 8,
    "body": "Needed for the changes I made in the mod!\nhttps://github.com/thomas15v/Sponge/commit/33c75c690f91aa41077aacdcb14b3465e17684dc\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb31d9087c4d6d37a824",
    "number": 7,
    "body": "Adding core world/chunk interface.\n\n_Note_ `World` will need a way to return all loaded chunks, but we'll need some discussion as to which containing object structure should be used.\n",
    "head_branch": "interface-world",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb32d9087c4d6d37a825",
    "number": 6,
    "body": "Adding core server and world interface\n",
    "head_branch": "interface-server",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb33d9087c4d6d37a826",
    "number": 5,
    "body": "First steps in entity/player interfaces - returning the UUID for all, and last\nknown name/display name for the Player.\n",
    "head_branch": "interface-entity",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge e1e0ac5873ae8acc4b62f630c0d44c08ace1617b into 0088ec468954b8ca74a0e4cebe93a44d39eb94f3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623eb34d9087c4d6d37a827",
    "number": 3,
    "body": "This PR adds Material interfaces for items and blocks. Its improved version of my recent pull request (number 2).\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb35d9087c4d6d37a828",
    "number": 2,
    "body": "This Material interface is designed to support modded materials. It contains basic functions to get properties of item/block, which are very likely needed by every plugin developer. I decided to use interface because its already used in SpongeAPI. Its is in different package because I think we can use that package later for all Block-specific API interfaces.\n\nLater, we probably need class which contains final static fields for all vanilla materials to make it more helpful for plugin developers. I'll maybe commit also it, if this PR gets accepted. I don't want to do some hours of work if it appears that you're not accepting PRs.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623eb36d9087c4d6d37a829",
    "number": 1,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 81d028b5769b1306aa44382abda16bcd457b9222 into a48b2c354aa9b3dd870b4ec8700213c14698b514"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  }
]