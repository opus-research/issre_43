[
  {
    "_id": "661f79928dfb6b84f24255bc",
    "number": 3448,
    "body": "As implemented elsewhere:\r\n\r\n- in Sanctuary's [`S.sequence`](https://sanctuary.js.org/#sequence) and `S.traverse` which work on `Object`\r\n- in the [`Map` type](https://mostly-adequate.gitbook.io/mostly-adequate-guide/appendix_b#map) of Prof. Frisby's FP Guide \r\n- in the [`Record` type](https://gcanti.github.io/fp-ts/modules/Record.ts.html#traverse) of [fp-ts](https://gcanti.github.io/fp-ts/)",
    "head_branch": "traversable-object",
    "is_a_fork": true,
    "comments": [
      "<details>\n  <summary>Coverage</summary>\n\n  ```bash\n  \n> ramda@0.29.1 coverage:summary\n> BABEL_ENV=cjs nyc --reporter=text-summary mocha -- --reporter=min --require @babel/register\n\n\u001b[2J\u001b[1;3H\n  1188 passing (894ms)\n\n\n=============================== Coverage summary ===============================\nStatements   : 94.03% ( 2474/2631 )\nBranches     : 85.73% ( 967/1128 )\nFunctions    : 93.24% ( 552/592 )\nLines        : 94.31% ( 2320/2460 )\n================================================================================\n  ```\n\n</details>",
      "<details>\n  <summary>Coverage</summary>\n\n  ```bash\n  \n> ramda@0.29.1 coverage:summary\n> BABEL_ENV=cjs nyc --reporter=text-summary mocha -- --reporter=min --require @babel/register\n\n\u001b[2J\u001b[1;3H\n  1188 passing (861ms)\n\n\n=============================== Coverage summary ===============================\nStatements   : 94.03% ( 2474/2631 )\nBranches     : 85.73% ( 967/1128 )\nFunctions    : 93.24% ( 552/592 )\nLines        : 94.31% ( 2320/2460 )\n================================================================================\n  ```\n\n</details>",
      "https://github.com/ramda/ramda/issues/1067\r\n\r\nI'm in favor of this, but maybe not before 1.0",
      "TLDR: You can shoot yourselves in the foot with JavaScript, why not with Ramda too?\n\nI just found #2580 which dealt basically with the same problem 6 years ago. That is really upsetting.\n\nThat PR got bikeshedded discussing the incompatibility of `R.equals` (which ignores key order) and a possible `R.reduce` for `Object` (which would observe key order and lead to different results unless the reducer function is commutative and associative).\nPretty everyone agreed that key order does not matter in Object, and that its not an issue traversing `Object` but the PR was never merged.\n\nI guess people have moved on, since still today I cannot traverse a dictionary `Object` — which is pretty basic when you work with Maybe, Either and such data types.\n\nSo if PRs don't cut it, perhaps Ramda has hit an implicit barrier in supporting certain FP features?\n\nThe low entry barrier and no hand-holding attitude have been always the strengths of Ramda: You can solve problems quickly using\n- JS-native data structures,\n- suitable ADTs with Fantasyland support or not,\n- even the pesky `Promise`.\n\nout of personal frustration:\nI think the fact, that Ramda will probably never reach `v1.0` just reflects the fact that one can never fulfill all what is promised  in those \"FP using JavaScript\" articles?",
      "I hear you. As I said and as I argued in those earlier threads, I 100% think we should add Traversable for objects. But it does not feel right to me to have it 1.0, and I worry we'll get into another endless bikeshed if we try.\r\n\r\nBut we'll get to 1.0, and I think soon. I like getting `flow` in for it. Whatever else is on main. Do a v0.30. Then do v1.0 shortly after. The work @Harris-Miller is leading on the typescript side is phenomenal and deserves our continued vigilance here.",
      "🤔\r\n\r\nPlain objects are inherently treated as Functors for `map()` and as Filterables for `filter()`. Are they foldable? Represented as an array via `toPairs()` they are. ~~If we were to add inherent support to `reduce` for objects it would essentially be `compose(reduce, toPairs)` since you'd have to represent it as a key/value tuple pair.~~ (Update: Nevermind, that doesn't make sense, you can't use reducer callback interchangeably between object and arrays then. It would just be the value. If you want the key/value tuple, just use `toPairs` first). And given that you could implement both `map()` and `filter()` from that... I would say yes, objects are foldable. Plain objects have an `empty` (`{}`) and `concat` (`Object.assign`). And via inherent support from `ramda`, implement `equals` as well.\r\n\r\nSeems reasonable to give the same support for Traversables, IMO\r\n\r\nAdditionally, [Data.Map](https://hackage.haskell.org/package/containers-0.7/docs/Data-Map-Internal.html#t:Map) implements Traversable and it does exactly what is being asked here"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79938dfb6b84f24255bd",
    "number": 3447,
    "body": "Due to https://github.com/ramda/types/pull/116#issuecomment-2030996327",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "<details>\n  <summary>Coverage</summary>\n\n  ```bash\n  \n> ramda@0.29.1 coverage:summary\n> BABEL_ENV=cjs nyc --reporter=text-summary mocha -- --reporter=min --require @babel/register\n\n\u001b[2J\u001b[1;3H\n  1188 passing (881ms)\n\n\n=============================== Coverage summary ===============================\nStatements   : 94.03% ( 2474/2631 )\nBranches     : 85.73% ( 967/1128 )\nFunctions    : 93.24% ( 552/592 )\nLines        : 94.31% ( 2320/2460 )\n================================================================================\n  ```\n\n</details>",
      "@Harris-Miller , please review",
      "<details>\n  <summary>Coverage</summary>\n\n  ```bash\n  \n> ramda@0.29.1 coverage:summary\n> BABEL_ENV=cjs nyc --reporter=text-summary mocha -- --reporter=min --require @babel/register\n\n\u001b[2J\u001b[1;3H\n  1188 passing (890ms)\n\n\n=============================== Coverage summary ===============================\nStatements   : 94.03% ( 2474/2631 )\nBranches     : 85.73% ( 967/1128 )\nFunctions    : 93.24% ( 552/592 )\nLines        : 94.31% ( 2320/2460 )\n================================================================================\n  ```\n\n</details>",
      "@kedashoe we got the ramda/types MR merged for this already too: https://github.com/ramda/types/pull/116"
    ],
    "commit_messages": [
      "JSDoc: `type()` can return `BigInt` (#3447)\n\nDue to https://github.com/ramda/types/pull/116#issuecomment-2030996327"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79948dfb6b84f24255be",
    "number": 3446,
    "body": "Despite this existing [PR](https://github.com/ramda/ramda/pull/3288), it seems that the merge has not taken place and that the correction is still necessary.",
    "head_branch": "fix-splitWhenever-jsdoc",
    "is_a_fork": true,
    "comments": [
      "<details>\n  <summary>Coverage</summary>\n\n  ```bash\n  \n> ramda@0.29.1 coverage:summary\n> BABEL_ENV=cjs nyc --reporter=text-summary mocha -- --reporter=min --require @babel/register\n\n\u001b[2J\u001b[1;3H\n  1188 passing (887ms)\n\n\n=============================== Coverage summary ===============================\nStatements   : 94.03% ( 2474/2631 )\nBranches     : 85.73% ( 967/1128 )\nFunctions    : 93.24% ( 552/592 )\nLines        : 94.31% ( 2320/2460 )\n================================================================================\n  ```\n\n</details>",
      "ty @Maestro31 "
    ],
    "commit_messages": [
      "fix: splitWhenever jsdoc (#3446)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79958dfb6b84f24255bf",
    "number": 3442,
    "body": "There is no built-in way to do natural sorting on strings, therefore I propose `ascendNatural` and `descendNatural` to add this functionality via `localeCompare`. Use exactly like you would with `ascend` and `descend`. The implementation is also very similar.\r\n\r\n```\r\nconst x = [ '3', '10', 'z', '1', 'a' ]\r\n\r\nsort(ascend(identity), x)\r\n> [\"1\", \"10\", \"3\", \"a\", \"z\"]\r\n\r\nsort(ascendNatural(identity), x)\r\n> [\"1\", \"3\", \"10\", \"a\", \"z\"]\r\n```",
    "head_branch": "add-natural-sort",
    "is_a_fork": true,
    "comments": [
      "<details>\n  <summary>Coverage</summary>\n\n  ```bash\n  \n> ramda@0.29.1 coverage:summary\n> BABEL_ENV=cjs nyc --reporter=text-summary mocha -- --reporter=min --require @babel/register\n\n\u001b[2J\u001b[1;3H\n  1188 passing (907ms)\n\n\n=============================== Coverage summary ===============================\nStatements   : 94.03% ( 2474/2631 )\nBranches     : 85.73% ( 967/1128 )\nFunctions    : 93.24% ( 552/592 )\nLines        : 94.31% ( 2320/2460 )\n================================================================================\n  ```\n\n</details>",
      "<details>\n  <summary>Coverage</summary>\n\n  ```bash\n  \n> ramda@0.29.1 coverage:summary\n> BABEL_ENV=cjs nyc --reporter=text-summary mocha -- --reporter=min --require @babel/register\n\n\u001b[2J\u001b[1;3H\n  1188 passing (902ms)\n\n\n=============================== Coverage summary ===============================\nStatements   : 94.03% ( 2474/2631 )\nBranches     : 85.73% ( 967/1128 )\nFunctions    : 93.24% ( 552/592 )\nLines        : 94.31% ( 2320/2460 )\n================================================================================\n  ```\n\n</details>",
      "This seems a useful and well-written PR.  These sound like useful additions.\r\n\r\nDo others have objections?",
      "Feels a bit niche to me? Considering we can write `R.sortWith([(a, b) => a.localeCompare(b)], xs)`. Also the implementation takes away our ability to call `localeCompare` with our own arguments.. why are we setting `{ numeric: true }` for the options?",
      "Thanks for the feedback. Before implementing I was looking up what natural sort order is supposed to do, and by definition in [Wikipedia](https://en.wikipedia.org/wiki/Natural_sort_order) it is\r\n\r\n> the ordering of strings in alphabetical order, except that multi-digit numbers are treated atomically, i.e., as if they were a single character\r\n\r\nSo for the most intuitive usage (I thought) I had set `{ numeric: true }` with no `locales` option set. If users needed different options, there would be `sortWith` as mentioned. But \"alphabetical order\" has a different meaning based on language. So for more flexibility, should we be able to pass the `locales` and `options` parameters of `localeCompare`?",
      "Just to revive this proposal, I'd like to add my opinion here too.\r\n\r\nAdmittedly it's \"a bit niche\", it fixes sorting text with Ramda. Which is great because `<`, `>` comparisons — as `ascend` and `descent` perform — do not make sense with text.\r\n\r\nIf `localCompare` had been around longer, from the beginning `ascend` and `descent` could have used `String.localCompare` when given `String` items.\r\n\r\nInstead of introducing those two new comparator functions, can you imagine, to change the implementation of `ascend` and `descent` for `String`?\r\n\r\nHowever, the problem is the [customization](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator/Collator#locales). To sort according to the browser or Node.js locale (language) might be not target-oriented in most cases. I'd suggest to allow to pass at least the *language* to `localCompare`.\r\n\r\nSo that in this case \r\n```javascript\r\nconst\r\n  collectionItemComparator = ascendNatural(identity);\r\nsort(collectionItemComparator('de'), x)\r\n```\r\n \r\nOr should the language come as first argument instead? I.e. is it the least changing argument? `sort(ascendNatural('de', identity), x)`?",
      "> Admittedly it's \"a bit niche\", it fixes sorting text with Ramda. Which is great because `<`, `>` comparisons — as `ascend` and `descent` perform — do not make sense with text.\r\n\r\nYa and niche was not the right word, ramda could have a better story for sorting by string.\r\n\r\nI like language first.\r\n\r\nShould this be called `localeAscend` and `localeDescend`? Something that immediately implies we are targeting strings here feels appropriate.\r\n\r\n@sebbayer sorry for the slow review! Could you add `@see` references to these new functions from `ascend` and `descend`?",
      "<details>\n  <summary>Coverage Summary</summary>\n\n  ```bash\n  \n> ramda@0.30.0 coverage:summary\n> BABEL_ENV=cjs nyc --reporter=text-summary mocha -- --reporter=min --require @babel/register\n\n\u001b[2J\u001b[1;3H\n  1190 passing (1s)\n\n\n=============================== Coverage summary ===============================\nStatements   : 94.04% ( 2477/2634 )\nBranches     : 85.73% ( 967/1128 )\nFunctions    : 93.25% ( 553/593 )\nLines        : 94.32% ( 2323/2463 )\n================================================================================\n  ```\n\n</details>",
      "Sorry for the late reply, I am glad there is still interest in the topic.\r\n\r\n@semmel I added the language parameter first as you suggested. I hope I got the function signature right.\r\n@kedashoe references in `ascend` and `descend` to the new functions have been added.\r\n\r\nI updated the functions with better examples and tests have also been updated.\r\n\r\nTo my surprise the locale based sorting result was pretty much the same in English, German and French, but for example Swedish has differences. My use case so far was only numeric string sorting. I left the `{ numeric: true }` in the code because I think that is how you would expect it to work.\r\n\r\nI still like the `ascend` and `descend` prefix to the function names. If you look at the list of functions in the documentation, they would come right after the non-natural sorting functions in the list."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79968dfb6b84f24255c0",
    "number": 3441,
    "body": "I find myself frequently using function pipelines for immediate values `h(g(f(x)))`:\r\n```javascript\r\nconst val = pipe(\r\n  () => x, f, g, h)()\r\n```\r\nIt's tedious to write and the many parentheses are easy to mess up. \r\nAlso I don't want to put the seed `x` in the end `pipe(f, g, h)(x)`, because `x` is far away from `f` and thus your eyes have to jump up and down reading the code.\r\n\r\nTherefore I propose to include `flow` for serial function application, i.e. the same spirit as above\r\n```javascript\r\nconst val = flow(x, g, h)\r\n```\r\nSuch a function is provided elsewhere. E.g. in [fp-ts](https://gcanti.github.io/fp-ts/modules/function.ts.html#pipe) named `pipe`. There was even a [proposal to TC39](https://github.com/tc39/proposal-function-pipe-flow) for including it in JavaScript.\r\n\r\n#### Naming:\r\nRamda's `R.pipe` is mostly named `flow` everywhere else (e.g. lodash), and the proposed `R.flow` is mostly named `pipe`. [See the post about function composition](https://jrsinclair.com/articles/2022/javascript-function-composition-whats-the-big-deal/#flow) by James Sinclair to maximise your confusion.\r\n\r\n#### Details: \r\nFor generality — if omitting all functions — one could provide `flow(x) ≡ x` as fp-ts does. Is that reasonable?",
    "head_branch": "flow",
    "is_a_fork": true,
    "comments": [
      "<details>\n  <summary>Coverage</summary>\n\n  ```bash\n  \n> ramda@0.29.1 coverage:summary\n> BABEL_ENV=cjs nyc --reporter=text-summary mocha -- --reporter=min --require @babel/register\n\n\u001b[2J\u001b[1;3H\n  1188 passing (923ms)\n\n\n=============================== Coverage summary ===============================\nStatements   : 94.03% ( 2474/2631 )\nBranches     : 85.73% ( 967/1128 )\nFunctions    : 93.24% ( 552/592 )\nLines        : 94.31% ( 2320/2460 )\n================================================================================\n  ```\n\n</details>",
      "ty for the PR @semmel. I'm +1 on this, I always add it to projects I use ramda in.\r\n\r\n> For generality — if omitting all functions — one could provide flow(x) ≡ x as fp-ts does. Is that reasonable?\r\n\r\nSure!",
      "<details>\n  <summary>Coverage</summary>\n\n  ```bash\n  \n> ramda@0.29.1 coverage:summary\n> BABEL_ENV=cjs nyc --reporter=text-summary mocha -- --reporter=min --require @babel/register\n\n\u001b[2J\u001b[1;3H\n  1188 passing (908ms)\n\n\n=============================== Coverage summary ===============================\nStatements   : 94.03% ( 2474/2631 )\nBranches     : 85.73% ( 967/1128 )\nFunctions    : 93.24% ( 552/592 )\nLines        : 94.31% ( 2320/2460 )\n================================================================================\n  ```\n\n</details>",
      "@semmel I'm curious what you think about https://github.com/ramda/ramda/wiki/Ramda-Conventions#prefer-non-variadic-functions-over-variadic? I didn't write that, but I do agree and much prefer `flow(x, [f, g])` to `flow(x, f, g)`. We also don't have to worry about the weird flow-with-one-argument case discussed above, it can just use internal curry2.",
      "<details>\n  <summary>Coverage</summary>\n\n  ```bash\n  \n> ramda@0.29.1 coverage:summary\n> BABEL_ENV=cjs nyc --reporter=text-summary mocha -- --reporter=min --require @babel/register\n\n\u001b[2J\u001b[1;3H\n  1188 passing (902ms)\n\n\n=============================== Coverage summary ===============================\nStatements   : 94.03% ( 2474/2631 )\nBranches     : 85.73% ( 967/1128 )\nFunctions    : 93.24% ( 552/592 )\nLines        : 94.31% ( 2320/2460 )\n================================================================================\n  ```\n\n</details>",
      "@kedashoe \r\n> @semmel I'm curious what you think about https://github.com/ramda/ramda/wiki/Ramda-Conventions#prefer-non-variadic-functions-over-variadic? I didn't write that, but I do agree and much prefer `flow(x, [f, g])` to `flow(x, f, g)`. \r\n\r\n*In general*, I prefer non-variadic functions too. (With variadic functions, I run in all sorts of problems using `lift`, `pipe` and others)\r\nHowever, function composition is such a *fundamental* concept — there is even the famous [pipe operator `|>` proposal](https://github.com/tc39/proposal-pipeline-operator) waiting to be accepted for inclusion to the language. I don't see where the benefits for the library user would be, if Ramda would enforce `[]` around the composed functions?\r\nApart from easier TypeScript typings perhaps?\r\n\r\nI've never yet handed `pipe` or `compose` as arguments to higher-order functions (e.g. like `partialRight`) to get back a customised pipelining function. Higher order functions have trouble with variadic functions of course. I am aware of that. Maybe I am missing something.\r\n\r\nI did a little research how others do it:\r\n\r\nLib | left-to-right fn composition | pipelining a value left-to-right\r\n----|------------------------------|---------------------------------\r\n[crocks][cr] | `pipe::((a → b), …, (y → z)) → a → z` | n/a\r\nRamda | `pipe::(((a,…,n) → o), (o → p), …, (y → z)) → ((a,…,n) → z)` | `flow::(a, (a → b), …, (y → z)) → z`, `flow::a → a`[^1]\r\n[Sanctuary][san] | `pipe::[(a → b), …, (y → z)] → a → z` | n/a\r\n[ts_belt][tsb] | `flow::(((a,…,n) → o), (o → p), …, (y → z)) → ((a,…,n) → z)` | `pipe::(a, (a → b), …, (y → z)) → z`\r\n[fp-ts][fpt] | `flow::(((a,…,n) → o), (o → p), …, (y → z)) → ((a,…,n) → z)` | `pipe::(a, (a → b), …, (y → z)) → z`, `pipe::a → a`\r\n[lodash/fp][lof] | `pipe::(((a,…,n)→o),(o→p),…,(y→z)\\|[((a,…,n)→o),(o→p),…,(y→z)])→((a,…,n)→z)` | n/a\r\n[lodash][lo] | `flow::(((a,…,n)→o),(o→p),…,(y→z)\\|[((a,…,n)→o),(o→p),…,(y→z)])→((a,…,n)→z)` | n/a\r\n\r\nExcept Sancturary (and lo-dash optional), *all* offer function composition using only variadic functions. I wonder why that is, if fixed-arity functions are usually easier to handle?\r\nAlso should Ramda be different (e.g. more inviting for newcomers) from Sanctuary, otherwise one could use Sanctuary anyway.\r\n\r\nFor personal reasons, I don't like the extra `[]` syntactic noise. Also I shy away from breaking changes — if we'd go that path `R.compose` and `R.pipe` would need to become fixed-arity too?\r\n\r\n[cr]: https://crocks.dev/docs/functions/helpers.html#pipe\r\n[san]: https://sanctuary.js.org/#pipe\r\n[tsb]: https://mobily.github.io/ts-belt/api/pipe-flow#pipe\r\n[fpt]: https://gcanti.github.io/fp-ts/modules/function.ts.html#flow\r\n[lof]: https://github.com/lodash/lodash/wiki/FP-Guide\r\n[lo]: https://lodash.com/docs/4.17.15#flow\r\n[^1]: proposed\r\n\r\n\r\n> We also don't have to worry about the weird flow-with-one-argument case discussed above, it can just use internal curry2.\r\n\r\nI changed the signature to `flow :: (a, (a → b), …, (y → z)) → z`. I don't understand where currying would be beneficial for `flow`, but I've not thought about that enough…\r\n#### Edit:\r\nIf `flow` was curried, `R.applyTo` already provides that functionality (sort of).\r\n```javascript\r\nflow(-9)(negate, Math.sqrt) // -> 3\r\napplyTo(-9)(pipe(negate, Math.sqrt)) // -> 3\r\n```\r\n",
      "i think ramda should stay data-last, there are many libs that do that flow thingy.",
      "> i think ramda should stay data-last, there are many libs that do that flow thingy.\r\n\r\nOn can consider `flow` a generalisation of `R.applyTo` which is also not data-last.\r\n\r\nOther libs that provide `flow` cover the same ground as Ramda does. I'd dislike to be dependent on two FP libraries with 90% overlapping use cases. ",
      "> For personal reasons, I don't like the extra `[]` syntactic noise.\r\n\r\nI like the noise, it alerts readers (we read code more than write it!) that something is different between first and second args.\r\n\r\n```js\r\nlet x = flow(foo, [\r\n  R.map(blah),\r\n  R.join('-'),\r\n  R.etc(a, b),\r\n  x => ...\r\n]);\r\n```\r\n\r\nvs\r\n\r\n```js\r\nlet x = flow(foo,\r\n  R.map(blah),\r\n  R.join('-'),\r\n  R.etc(a, b),\r\n  x => ...\r\n);\r\n```\r\nI really never write single line `flow(x, f, g)`, but even then I like the delineation [] provides.\r\n\r\nI'm not worried about retrofitting pipe and compose. We could cross that bridge if needed at a later date.\r\n\r\nThe point about currying wasn't that it is useful in any way, just that we don't have to think about it, it would then be like most every other ramda function.",
      "In short `flow(x, f1, f2, ...) === applyTo(x, pipe(f1, f2,...))` \r\n\r\nI agree with @kedashoe , the array sounds better, because of the separation between the different arguments.\r\n",
      "While I'm not involved enough these days to stand in the way, I am not a fan of this.  Ramda is about functional composition.  Combining that in the library with function application confuses its mission.\r\n\r\nThere is also something of a mismatch with our other composition functions, which do not insist that the first-applied function be unary.  That is `compose(inc, multiply(3), add)` is *binary* since `add` is binary.  There doesn't seem to be a good way around that mismatch for the suggested function.  We can only use this with single values and an initial unary function.\r\n\r\n> Ramda's `R.pipe` is mostly named `flow` everywhere else (e.g. lodash), and the proposed `R.flow` is mostly named `pipe`. [See the post about function composition][js] by James Sinclair to maximise your confusion.\r\n\r\nFor that reason, if we do include this, I would stay far away from the name `flow`.  I'm sure we can find something less confusing.\r\n\r\n>  I don't see where the benefits for the library user would be, if Ramda would enforce [] around the composed functions?\r\n\r\nA few years ago, [I wrote][ss]:\r\n\r\n> But the goal is after v1.0 to move pipe and compose to match this, and to stop shipping any variadic functions.\r\n\r\nI still think that would be great.  I don't mind the extra syntactic noise of `[]` to achieve a zero-variadic function library.\r\n\r\n> On can consider `flow` a generalisation of `R.applyTo` which is also not data-last.\r\n\r\nOn the contrary, the whole rationale for `applyTo` is to handle the case where the transformation function *is* the data.\r\n\r\n```js\r\n[add(5), multiply(3), inc, dec].map(applyTo(10)) //=> [15, 30, 11, 9]\r\n```\r\n\r\n>> For personal reasons, I don't like the extra `[]` syntactic noise.\r\n> I like the noise, it alerts readers (we read code more than write it!) that something is different between first and second args.\r\n\r\nAnd we do have prior art at least in `useWith` and `converge`.  And of course `pipeWith`/`composeWith` are written this way.\r\n\r\n----------\r\n\r\nAs I said, I won't stand in the way, if there is a real desire.  But I *will* fight hard to avoid adding new variadic functions.\r\n\r\n  [js]: https://jrsinclair.com/articles/2022/javascript-function-composition-whats-the-big-deal/#flow\r\n  [ss]: https://github.com/ramda/ramda/issues/2789#issuecomment-466720359",
      "Thanks for the good discussion, let me address some points:\r\n>  Ramda is about functional composition. Combining that in the library with function application confuses its mission.\r\n\r\nMy use case is to set up event driven workflows using reactive *lazy* streams, promises, futures, bla bla bla …\r\nThose \"workflows\" are usually functions, which get *executed* elsewhere using something like `fork` or `runEffects` which — of course — are not part of Ramda.\r\n```javascript\r\n// :: Stream Either String\r\nconst loginWorkflow = pipe(\r\n  () => clickEventStream('#loginButton'),\r\n  samples(inputChangeEventStream('#passwordTextField')),\r\n  chain(pwd => fetch(`https://myapi/login?pwd=${pwd}`)),\r\n  map(response => response.ok ? Right(response): Left(new Error())),\r\n  tap(either(paintError, paintSuccess)),\r\n  map(map(prop('accessToken'))\r\n)();\r\nconst uploadWorkflow = pipe(\r\n  () => clickEventStream('#uploadButton'),\r\n  samples(loginWorkflow),\r\n  chain(token => fetch(\"https://myapi/upload?${token}\"),\r\n// …\r\n)();\r\n// Up to now nothing gets executed. The workflows itself are functions …\r\n// This runs both workflows (function execution)\r\nrunEffects(uploadWorkflow)\r\n```\r\n\r\nSo it is really composing functions which disguise as lazy promises or streams. In my understanding I am not *applying* values setting up the pipelines.\r\n\r\nMy motivation for this PR is selfish and of *syntactic* nature: \r\nI really hate writing and reading `pipe(() => …)()` or `applyTo(… , pipe(…))`, when `flow(…)` (or maybe `flow(…, […])`) seems sufficient.\r\n\r\nMaybe I should've mentioned this earlier. This is also the reason I linked to the related [`|>` proposal ](https://github.com/tc39/proposal-pipeline-operator); many think there is a need to improve the language.\r\n\r\n>> For personal reasons, I don't like the extra [] syntactic noise.\r\n\r\n>I like the noise, it alerts readers (we read code more than write it!) that something is different between first and second args.\r\n\r\nI can follow that argument: That array includes only unary functions. Even if I consider the argument weak: Most Ramda functions need different arguments based on their position. \r\n\r\n> A few years ago, [I wrote](https://github.com/ramda/ramda/issues/2789#issuecomment-466720359):\r\n\r\n>>But the goal is after v1.0 to move pipe and compose to match this, and to stop shipping any variadic functions.\r\n>> … \r\n>> But I would like it if all Ramda functions had fixed arities; this to my mind makes it easier to think about them. \r\n\r\n>I still think that would be great\r\n\r\n@CrossEye I still don't and I would not want to lay the basis for that change with `flow(x, [fns])`\r\n\r\n- learning `o(f, g) ≡ f ∙ g` which is fine and fundamental, one concludes that `f ∙ g ∙ h` would be `o(f, g, h)` or `compose(f, g, h)`. In `compose([f, g, h])` the need for an array after 2 arguments comes as a surprise.\r\n- The last function in `compose` and the first in `pipe` may be (n>1)-ary functions. So they don't quite fit.\r\n- this breaks *all* my source files\r\n\r\n> On the contrary, the whole rationale for applyTo is to handle the case where the transformation function is the data.\r\n\r\nI did not get that yet, give me some time to think about your example.\r\n\r\n> I would stay far away from the name flow. I'm sure we can find something less confusing.\r\n\r\nYes, I agree!\r\n\r\nTo align with the status-quo I'd even consider swapping the names. (Has anybody an idea where \"flow\" and \"pipe\" originate?)\r\n\r\n\r\n\r\n\r\n\r\n",
      "> Maybe I should've mentioned this earlier. This is also the reason I linked to the related [`|>` proposal ](https://github.com/tc39/proposal-pipeline-operator); many think there is a need to improve the language.\r\n\r\nAnd that's what I was mostly reacting to.  Pipe proposals have a [long, sad history][ph].  I really preferred the F#-style ones, which have now basically been abandoned, and am much less impressed with the Hack-style ones.  But what I wanted most of all is `compose`/`pipe` *operators*, which doesn't seem to have a real chance.\r\n\r\nI haven't seen your usage before.  Am I understanding correctly that this is designed to do something like what RxJs or Bacon does? \r\n\r\n> Also I don't want to put the seed `x` in the end `pipe(f, g, h)(x)`, because `x` is far away from `f` and thus your eyes have to jump up and down reading the code.\r\n\r\nYes, I always prefer named functions here (`foo = pipe(f, g, h); foo(x)`), but I can understand that's not for everyone.\r\n\r\n\r\n>> On the contrary, the whole rationale for `applyTo` is to handle the case where the transformation function is the data.\r\n\r\n> I did not get that yet, give me some time to think about your example.\r\n\r\nIt didn't help that I mixed Ramda and Array.prototype syntaxes.  That really should have been\r\n\r\n```js\r\nmap(applyTo(10))([add(5), multiply(3), inc, dec]) //=> [15, 30, 11, 9]\r\n```\r\n\r\nor\r\n\r\n```js\r\nmap(applyTo(10), [add(5), multiply(3), inc, dec]) //=> [15, 30, 11, 9]\r\n```\r\n\r\nThe point here is that this is a counterpart to `call`/`apply`.  When used curried, `call` and `apply` treat a transformation function as something that we want to bake in, and then to which we later want to apply some value.  `applyTo` treats some value as what we want to bake in; later we'll apply some function(s) to that value.  I always discourage people from describing Ramda as \"data-last\"; rather, \"the parameters more likely to change come after those less likely.\"  So with `applyTo`, we're thinking of the integer value, `10` as the static thing, not likely to change, while the function varies.\r\n\r\n\r\n> To align with the status-quo I'd even consider swapping the names. (Has anybody an idea where \"flow\" and \"pipe\" originate?)\r\n\r\nI came up with `pipe`, as I thought `pipeline` both too long and noun-y.  I don't recall if I considered `flow`, but I still prefer `pipe`: `flow` feels focused on the data running through, where `pipe` is about how the functions are connected.  But I guess if you read `pipe` as a noun, then it's not very compelling.  I always think of it as a verb.\r\n\r\nLodash saw Ramda as a competitor, and aimed to kill it by duplicating its core features.  (More charitably, lodash saw how awesome some Ramda ideas were.  But I'm not feeling particularly charitable today.)  But for whatever reason, they didn't like the name `pipe` and called it `flow`, which is ok.  They also named their version of `compose` as `flowRight`, which is horrible.\r\n\r\n\r\n\r\n  [ph]: https://github.com/tc39/proposal-pipeline-operator/blob/main/HISTORY.md\r\n",
      "<details>\n  <summary>Coverage</summary>\n\n  ```bash\n  \n> ramda@0.29.1 coverage:summary\n> BABEL_ENV=cjs nyc --reporter=text-summary mocha -- --reporter=min --require @babel/register\n\n\u001b[2J\u001b[1;3H\n  1188 passing (876ms)\n\n\n=============================== Coverage summary ===============================\nStatements   : 94.03% ( 2474/2631 )\nBranches     : 85.73% ( 967/1128 )\nFunctions    : 93.24% ( 552/592 )\nLines        : 94.31% ( 2320/2460 )\n================================================================================\n  ```\n\n</details>",
      "<details>\n  <summary>Coverage</summary>\n\n  ```bash\n  \n> ramda@0.29.1 coverage:summary\n> BABEL_ENV=cjs nyc --reporter=text-summary mocha -- --reporter=min --require @babel/register\n\n\u001b[2J\u001b[1;3H\n  1188 passing (842ms)\n\n\n=============================== Coverage summary ===============================\nStatements   : 94.03% ( 2474/2631 )\nBranches     : 85.73% ( 967/1128 )\nFunctions    : 93.24% ( 552/592 )\nLines        : 94.31% ( 2320/2460 )\n================================================================================\n  ```\n\n</details>",
      "@CrossEye Thanks for your input — that helped me again to think about my motivation with this function \"flow\"!\r\n\r\nI've revised this PR, so that the proposed function has now a fixed arity and is binary-auto-curried. \r\n`flow :: a → [(a → b), …, (y → z)] → z` This should address the greatest concern of avoiding variadic functions.\r\n\r\nI made the description quite wordy, and may need help with the correct formulation.\r\n> `flow` is helps to avoid introducing named functions with named arguments\r\nfor computing the result of a function pipeline which depends on given initial values.\r\nRather than composing a custom pipeline function `p = (_x, _y) => R.pipe(g(_x), h(_y), …)`\r\nwhich is only later needed once `z = p(x, y)`,\r\nthe introduction of `p`, `_x` and `_y` can be avoided: `z = flow(x, [g, h(y),…]`\r\n\r\nI also changed the example to be more suitable.\r\n\r\nWe'd still need to agree on a name other than \"flow\". \r\n\r\nApart from that — are there any other concerns I should address? \r\n\r\n@CrossEye Concerning your last remarks:\r\n> I haven't seen your usage before. Am I understanding correctly that this is designed to do something like what RxJs or Bacon does?\r\n\r\nYes, indeed! Nowadays I prefer [@most/core](https://mostcore.readthedocs.io/en/latest/index.html) which is a little less surprising because there are just lazy streams (except when explicitly stated). That pipelines I construct using \"flow\" are basically just event listeners glued together. \r\n \r\nI agree with you on all other points. Especially that the JS pipe proposal is doomed since it will be not the F# flavour. \r\n\r\nHeck — maybe I will be lucky one day and write [F# for the browser](https://fable.io) 🤞🏻 \r\n\r\n",
      "<details>\n  <summary>Coverage</summary>\n\n  ```bash\n  \n> ramda@0.29.1 coverage:summary\n> BABEL_ENV=cjs nyc --reporter=text-summary mocha -- --reporter=min --require @babel/register\n\n\u001b[2J\u001b[1;3H\n  1188 passing (867ms)\n\n\n=============================== Coverage summary ===============================\nStatements   : 94.03% ( 2474/2631 )\nBranches     : 85.73% ( 967/1128 )\nFunctions    : 93.24% ( 552/592 )\nLines        : 94.31% ( 2320/2460 )\n================================================================================\n  ```\n\n</details>",
      "<details>\n  <summary>Coverage</summary>\n\n  ```bash\n  \n> ramda@0.29.1 coverage:summary\n> BABEL_ENV=cjs nyc --reporter=text-summary mocha -- --reporter=min --require @babel/register\n\n\u001b[2J\u001b[1;3H\n  1188 passing (915ms)\n\n\n=============================== Coverage summary ===============================\nStatements   : 94.03% ( 2474/2631 )\nBranches     : 85.73% ( 967/1128 )\nFunctions    : 93.24% ( 552/592 )\nLines        : 94.31% ( 2320/2460 )\n================================================================================\n  ```\n\n</details>",
      "<details>\n  <summary>Coverage</summary>\n\n  ```bash\n  \n> ramda@0.29.1 coverage:summary\n> BABEL_ENV=cjs nyc --reporter=text-summary mocha -- --reporter=min --require @babel/register\n\n\u001b[2J\u001b[1;3H\n  1188 passing (918ms)\n\n\n=============================== Coverage summary ===============================\nStatements   : 94.03% ( 2474/2631 )\nBranches     : 85.73% ( 967/1128 )\nFunctions    : 93.24% ( 552/592 )\nLines        : 94.31% ( 2320/2460 )\n================================================================================\n  ```\n\n</details>",
      "This looks good to me, I'm happy with the name flow. Can we merge this @CrossEye ?",
      "Regarding the name, I would add that in Ram**b**da(X)  it is named [\"piped\"](https://github.com/selfrefactor/rambdax#piped). Could be, some like \"piped\" better 🤷‍♂️",
      "> Regarding the name, I would add that in Ram**b**da(X) it is named [\"piped\"](https://github.com/selfrefactor/rambdax#piped). Could be, some like \"piped\" better 🤷‍♂️\r\n\r\nI prefer `flow` personally, `pipe` vs `piped` too close. Are you ok with `flow` @semmel ?",
      "\n> I prefer `flow` personally, `pipe` vs `piped` too close. Are you ok with `flow` @semmel ?\n\nYes\n\n",
      "I've had my say.  If I were more active, I'd push back harder.  I don't think this is a particularly good fit for Ramda, and I think the name `flow` is going to be confused with lodash.\r\n\r\nBut these days the choice isn't mine and I'll defer to the wisdom of those currently active.",
      "ty @semmel , will try to get a release out this weekend",
      "> ty @semmel , will try to get a release out this weekend\n\n@kedashoe Great! Thank you very much!\n\nThe prospect that we might soon get to v1.0 is even better, because then I can lobby at work in my new team to adopt Ramda 🤞"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79978dfb6b84f24255c1",
    "number": 3437,
    "body": "Fixes \"should be unwind\" and clarifies the rest..",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "<details>\n  <summary>Coverage</summary>\n\n  ```bash\n  \n> ramda@0.29.1 coverage:summary\n> BABEL_ENV=cjs nyc --reporter=text-summary mocha -- --reporter=min --require @babel/register\n\n\u001b[2J\u001b[1;3H\n  1188 passing (903ms)\n\n\n=============================== Coverage summary ===============================\nStatements   : 94.03% ( 2474/2631 )\nBranches     : 85.73% ( 967/1128 )\nFunctions    : 93.24% ( 552/592 )\nLines        : 94.31% ( 2320/2460 )\n================================================================================\n  ```\n\n</details>",
      "> <details>\n>   <summary>Coverage</summary>\n> \n>   ```bash\n>   \n> > ramda@0.29.1 coverage:summary\n> > BABEL_ENV=cjs nyc --reporter=text-summary mocha -- --reporter=min --require @babel/register\n> \n> \u001b[2J\u001b[1;3H\n>   1188 passing (903ms)\n> \n> \n> =============================== Coverage summary ===============================\n> Statements   : 94.03% ( 2474/2631 )\n> Branches     : 85.73% ( 967/1128 )\n> Functions    : 93.24% ( 552/592 )\n> Lines        : 94.31% ( 2320/2460 )\n> ================================================================================\n>   ```\n> \n> </details>\n\n",
      "> > <details>\n> >   <summary>Coverage</summary>\n> > \n> >   ```bash\n> >   \n> > > ramda@0.29.1 coverage:summary\n> > > BABEL_ENV=cjs nyc --reporter=text-summary mocha -- --reporter=min --require @babel/register\n> > \n> > \u001b[2J\u001b[1;3H\n> >   1188 passing (903ms)\n> > \n> > \n> > =============================== Coverage summary ===============================\n> > Statements   : 94.03% ( 2474/2631 )\n> > Branches     : 85.73% ( 967/1128 )\n> > Functions    : 93.24% ( 552/592 )\n> > Lines        : 94.31% ( 2320/2460 )\n> > ================================================================================\n> >   ```\n> > \n> > </details>\n> \n> \n\n"
    ],
    "commit_messages": [
      "Improve jsdoc grammar in unwind.js (#3437)\n\nFixes \"should be unwind\" and clarifies the rest.."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79988dfb6b84f24255c2",
    "number": 3434,
    "body": "Including details for every file is too much, especially in the email. Will still run details so we have it in actions log.\r\n\r\nThe action only runs in the target branch, so afaik can't actually test these changes :p",
    "head_branch": "less-verbose-coverage-bot",
    "is_a_fork": true,
    "comments": [
      "<details>\n  <summary>Coverage Results</summary>\n\n  ```bash\n  \n> ramda@0.29.1 coverage\n> BABEL_ENV=cjs nyc --reporter=text-summary --reporter=text mocha -- --reporter=min --require @babel/register\n\n\u001b[2J\u001b[1;3H\n  1188 passing (842ms)\n\n\n=============================== Coverage summary ===============================\nStatements   : 94.03% ( 2473/2630 )\nBranches     : 85.76% ( 970/1131 )\nFunctions    : 93.24% ( 552/592 )\nLines        : 94.31% ( 2319/2459 )\n================================================================================\n------------------------------|---------|----------|---------|---------|-------------------\nFile                          | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n------------------------------|---------|----------|---------|---------|-------------------\nAll files                     |   94.03 |    85.76 |   93.24 |   94.31 |                   \n scripts/transpile            |    94.2 |    84.62 |     100 |    94.2 |                   \n  esm-to-cjs.js               |   92.11 |       75 |     100 |   92.11 | 92,97,119         \n  wrap-constructor-pattern.js |   96.77 |    92.86 |     100 |   96.77 | 73                \n source                       |   97.03 |    91.28 |   97.61 |   97.14 |                   \n  F.js                        |     100 |      100 |     100 |     100 |                   \n  T.js                        |     100 |      100 |     100 |     100 |                   \n  __.js                       |     100 |      100 |     100 |     100 |                   \n  add.js                      |     100 |      100 |     100 |     100 |                   \n  addIndex.js                 |     100 |      100 |     100 |     100 |                   \n  addIndexRight.js            |     100 |      100 |     100 |     100 |                   \n  adjust.js                   |     100 |      100 |     100 |     100 |                   \n  all.js                      |     100 |      100 |     100 |     100 |                   \n  allPass.js                  |     100 |      100 |     100 |     100 |                   \n  always.js                   |     100 |      100 |     100 |     100 |                   \n  and.js                      |     100 |      100 |     100 |     100 |                   \n  andThen.js                  |     100 |      100 |     100 |     100 |                   \n  any.js                      |     100 |      100 |     100 |     100 |                   \n  anyPass.js                  |     100 |      100 |     100 |     100 |                   \n  ap.js                       |     100 |      100 |     100 |     100 |                   \n  aperture.js                 |     100 |      100 |     100 |     100 |                   \n  append.js                   |     100 |      100 |     100 |     100 |                   \n  apply.js                    |     100 |      100 |     100 |     100 |                   \n  applySpec.js                |     100 |      100 |     100 |     100 |                   \n  applyTo.js                  |     100 |      100 |     100 |     100 |                   \n  ascend.js                   |     100 |      100 |     100 |     100 |                   \n  assoc.js                    |     100 |      100 |     100 |     100 |                   \n  assocPath.js                |     100 |      100 |     100 |     100 |                   \n  binary.js                   |     100 |      100 |     100 |     100 |                   \n  bind.js                     |     100 |      100 |     100 |     100 |                   \n  both.js                     |     100 |      100 |     100 |     100 |                   \n  call.js                     |     100 |      100 |     100 |     100 |                   \n  chain.js                    |     100 |      100 |     100 |     100 |                   \n  clamp.js                    |      80 |    83.33 |     100 |      80 | 25                \n  clone.js                    |     100 |      100 |     100 |     100 |                   \n  collectBy.js                |     100 |      100 |     100 |     100 |                   \n  comparator.js               |     100 |      100 |     100 |     100 |                   \n  complement.js               |     100 |      100 |     100 |     100 |                   \n  compose.js                  |     100 |      100 |     100 |     100 |                   \n  composeWith.js              |     100 |      100 |     100 |     100 |                   \n  concat.js                   |   86.67 |     87.5 |     100 |   86.67 | 47,50             \n  cond.js                     |     100 |      100 |     100 |     100 |                   \n  construct.js                |     100 |      100 |     100 |     100 |                   \n  constructN.js               |   68.42 |    57.14 |     100 |   66.67 | 53-55,57-59       \n  converge.js                 |     100 |      100 |     100 |     100 |                   \n  count.js                    |     100 |      100 |     100 |     100 |                   \n  countBy.js                  |     100 |      100 |     100 |     100 |                   \n  curry.js                    |     100 |      100 |     100 |     100 |                   \n  curryN.js                   |     100 |      100 |     100 |     100 |                   \n  dec.js                      |     100 |      100 |     100 |     100 |                   \n  defaultTo.js                |     100 |      100 |     100 |     100 |                   \n  descend.js                  |     100 |      100 |     100 |     100 |                   \n  difference.js               |     100 |      100 |     100 |     100 |                   \n  differenceWith.js           |     100 |      100 |     100 |     100 |                   \n  dissoc.js                   |     100 |      100 |     100 |     100 |                   \n  dissocPath.js               |   88.89 |    72.73 |     100 |   88.89 | 19,50             \n  divide.js                   |     100 |      100 |     100 |     100 |                   \n  drop.js                     |     100 |      100 |     100 |     100 |                   \n  dropLast.js                 |     100 |      100 |     100 |     100 |                   \n  dropLastWhile.js            |     100 |      100 |     100 |     100 |                   \n  dropRepeats.js              |     100 |      100 |     100 |     100 |                   \n  dropRepeatsBy.js            |     100 |      100 |     100 |     100 |                   \n  dropRepeatsWith.js          |     100 |      100 |     100 |     100 |                   \n  dropWhile.js                |     100 |      100 |     100 |     100 |                   \n  either.js                   |     100 |      100 |     100 |     100 |                   \n  empty.js                    |     100 |    92.86 |     100 |     100 | 37,39             \n  endsWith.js                 |     100 |      100 |     100 |     100 |                   \n  eqBy.js                     |     100 |      100 |     100 |     100 |                   \n  eqProps.js                  |     100 |      100 |     100 |     100 |                   \n  equals.js                   |     100 |      100 |     100 |     100 |                   \n  evolve.js                   |     100 |      100 |     100 |     100 |                   \n  filter.js                   |     100 |      100 |     100 |     100 |                   \n  find.js                     |     100 |      100 |     100 |     100 |                   \n  findIndex.js                |     100 |      100 |     100 |     100 |                   \n  findLast.js                 |     100 |      100 |     100 |     100 |                   \n  findLastIndex.js            |     100 |      100 |     100 |     100 |                   \n  flatten.js                  |     100 |      100 |     100 |     100 |                   \n  flip.js                     |     100 |      100 |     100 |     100 |                   \n  forEach.js                  |     100 |      100 |     100 |     100 |                   \n  forEachObjIndexed.js        |     100 |      100 |     100 |     100 |                   \n  fromPairs.js                |     100 |      100 |     100 |     100 |                   \n  groupBy.js                  |     100 |      100 |     100 |     100 |                   \n  groupWith.js                |     100 |      100 |     100 |     100 |                   \n  gt.js                       |     100 |      100 |     100 |     100 |                   \n  gte.js                      |     100 |      100 |     100 |     100 |                   \n  has.js                      |     100 |      100 |     100 |     100 |                   \n  hasIn.js                    |     100 |      100 |     100 |     100 |                   \n  hasPath.js                  |     100 |      100 |     100 |     100 |                   \n  head.js                     |     100 |      100 |     100 |     100 |                   \n  identical.js                |      90 |       80 |     100 |      90 | 40                \n  identity.js                 |     100 |      100 |     100 |     100 |                   \n  ifElse.js                   |     100 |      100 |     100 |     100 |                   \n  inc.js                      |     100 |      100 |     100 |     100 |                   \n  includes.js                 |     100 |      100 |     100 |     100 |                   \n  indexBy.js                  |     100 |      100 |     100 |     100 |                   \n  indexOf.js                  |     100 |      100 |     100 |     100 |                   \n  init.js                     |     100 |      100 |     100 |     100 |                   \n  innerJoin.js                |     100 |      100 |     100 |     100 |                   \n  insert.js                   |     100 |      100 |     100 |     100 |                   \n  insertAll.js                |     100 |      100 |     100 |     100 |                   \n  intersection.js             |     100 |      100 |     100 |     100 |                   \n  intersperse.js              |     100 |      100 |     100 |     100 |                   \n  into.js                     |     100 |      100 |     100 |     100 |                   \n  invert.js                   |     100 |      100 |     100 |     100 |                   \n  invertObj.js                |     100 |      100 |     100 |     100 |                   \n  invoker.js                  |     100 |      100 |     100 |     100 |                   \n  is.js                       |     100 |      100 |     100 |     100 |                   \n  isEmpty.js                  |     100 |      100 |     100 |     100 |                   \n  isNil.js                    |     100 |      100 |     100 |     100 |                   \n  isNotEmpty.js               |     100 |      100 |     100 |     100 |                   \n  isNotNil.js                 |     100 |      100 |     100 |     100 |                   \n  join.js                     |     100 |      100 |     100 |     100 |                   \n  juxt.js                     |     100 |      100 |     100 |     100 |                   \n  keys.js                     |      30 |    21.74 |      50 |      30 | 18-25,51-72       \n  keysIn.js                   |     100 |      100 |     100 |     100 |                   \n  last.js                     |     100 |      100 |     100 |     100 |                   \n  lastIndexOf.js              |     100 |      100 |     100 |     100 |                   \n  length.js                   |     100 |      100 |     100 |     100 |                   \n  lens.js                     |     100 |      100 |     100 |     100 |                   \n  lensIndex.js                |     100 |      100 |     100 |     100 |                   \n  lensPath.js                 |     100 |      100 |     100 |     100 |                   \n  lensProp.js                 |     100 |      100 |     100 |     100 |                   \n  lift.js                     |     100 |      100 |     100 |     100 |                   \n  liftN.js                    |     100 |      100 |     100 |     100 |                   \n  lt.js                       |     100 |      100 |     100 |     100 |                   \n  lte.js                      |     100 |      100 |     100 |     100 |                   \n  map.js                      |     100 |      100 |     100 |     100 |                   \n  mapAccum.js                 |     100 |      100 |     100 |     100 |                   \n  mapAccumRight.js            |     100 |      100 |     100 |     100 |                   \n  mapObjIndexed.js            |     100 |      100 |     100 |     100 |                   \n  match.js                    |     100 |      100 |     100 |     100 |                   \n  mathMod.js                  |     100 |      100 |     100 |     100 |                   \n  max.js                      |     100 |      100 |     100 |     100 |                   \n  maxBy.js                    |     100 |      100 |     100 |     100 |                   \n  mean.js                     |     100 |      100 |     100 |     100 |                   \n  median.js                   |     100 |    83.33 |     100 |     100 | 30                \n  memoizeWith.js              |     100 |      100 |     100 |     100 |                   \n  mergeAll.js                 |     100 |      100 |     100 |     100 |                   \n  mergeDeepLeft.js            |     100 |      100 |     100 |     100 |                   \n  mergeDeepRight.js           |     100 |      100 |     100 |     100 |                   \n  mergeDeepWith.js            |     100 |      100 |     100 |     100 |                   \n  mergeDeepWithKey.js         |     100 |      100 |     100 |     100 |                   \n  mergeLeft.js                |     100 |      100 |     100 |     100 |                   \n  mergeRight.js               |     100 |      100 |     100 |     100 |                   \n  mergeWith.js                |     100 |      100 |     100 |     100 |                   \n  mergeWithKey.js             |     100 |      100 |     100 |     100 |                   \n  min.js                      |     100 |      100 |     100 |     100 |                   \n  minBy.js                    |     100 |      100 |     100 |     100 |                   \n  modify.js                   |     100 |      100 |     100 |     100 |                   \n  modifyPath.js               |     100 |      100 |     100 |     100 |                   \n  modulo.js                   |     100 |      100 |     100 |     100 |                   \n  move.js                     |     100 |      100 |     100 |     100 |                   \n  multiply.js                 |     100 |      100 |     100 |     100 |                   \n  nAry.js                     |   65.38 |    66.67 |   58.33 |   73.33 | 40,42,44-45       \n  negate.js                   |     100 |      100 |     100 |     100 |                   \n  none.js                     |     100 |      100 |     100 |     100 |                   \n  not.js                      |     100 |      100 |     100 |     100 |                   \n  nth.js                      |     100 |      100 |     100 |     100 |                   \n  nthArg.js                   |     100 |      100 |     100 |     100 |                   \n  o.js                        |     100 |      100 |     100 |     100 |                   \n  objOf.js                    |     100 |      100 |     100 |     100 |                   \n  of.js                       |     100 |       75 |     100 |     100 | 33                \n  omit.js                     |     100 |      100 |     100 |     100 |                   \n  on.js                       |     100 |      100 |     100 |     100 |                   \n  once.js                     |     100 |      100 |     100 |     100 |                   \n  or.js                       |     100 |      100 |     100 |     100 |                   \n  otherwise.js                |     100 |      100 |     100 |     100 |                   \n  over.js                     |     100 |      100 |     100 |     100 |                   \n  pair.js                     |     100 |      100 |     100 |     100 |                   \n  partial.js                  |     100 |      100 |     100 |     100 |                   \n  partialObject.js            |     100 |      100 |     100 |     100 |                   \n  partialRight.js             |     100 |      100 |     100 |     100 |                   \n  partition.js                |     100 |      100 |     100 |     100 |                   \n  path.js                     |     100 |      100 |     100 |     100 |                   \n  pathEq.js                   |     100 |      100 |     100 |     100 |                   \n  pathOr.js                   |     100 |      100 |     100 |     100 |                   \n  pathSatisfies.js            |     100 |      100 |     100 |     100 |                   \n  paths.js                    |     100 |      100 |     100 |     100 |                   \n  pick.js                     |     100 |      100 |     100 |     100 |                   \n  pickAll.js                  |     100 |      100 |     100 |     100 |                   \n  pickBy.js                   |     100 |      100 |     100 |     100 |                   \n  pipe.js                     |     100 |      100 |     100 |     100 |                   \n  pipeWith.js                 |   88.89 |       50 |     100 |   88.89 | 35                \n  pluck.js                    |     100 |      100 |     100 |     100 |                   \n  prepend.js                  |     100 |      100 |     100 |     100 |                   \n  product.js                  |     100 |      100 |     100 |     100 |                   \n  project.js                  |     100 |      100 |     100 |     100 |                   \n  promap.js                   |     100 |      100 |     100 |     100 |                   \n  prop.js                     |     100 |      100 |     100 |     100 |                   \n  propEq.js                   |     100 |      100 |     100 |     100 |                   \n  propIs.js                   |     100 |      100 |     100 |     100 |                   \n  propOr.js                   |     100 |      100 |     100 |     100 |                   \n  propSatisfies.js            |     100 |      100 |     100 |     100 |                   \n  props.js                    |     100 |      100 |     100 |     100 |                   \n  range.js                    |     100 |     87.5 |     100 |     100 | 26                \n  reduce.js                   |     100 |      100 |     100 |     100 |                   \n  reduceBy.js                 |     100 |      100 |     100 |     100 |                   \n  reduceRight.js              |     100 |      100 |     100 |     100 |                   \n  reduceWhile.js              |     100 |      100 |     100 |     100 |                   \n  reduced.js                  |     100 |      100 |     100 |     100 |                   \n  reject.js                   |     100 |      100 |     100 |     100 |                   \n  remove.js                   |     100 |      100 |     100 |     100 |                   \n  repeat.js                   |     100 |      100 |     100 |     100 |                   \n  replace.js                  |     100 |      100 |     100 |     100 |                   \n  reverse.js                  |     100 |      100 |     100 |     100 |                   \n  scan.js                     |     100 |      100 |     100 |     100 |                   \n  sequence.js                 |     100 |       75 |     100 |     100 | 39,47             \n  set.js                      |     100 |      100 |     100 |     100 |                   \n  slice.js                    |     100 |      100 |     100 |     100 |                   \n  sort.js                     |     100 |      100 |     100 |     100 |                   \n  sortBy.js                   |     100 |       75 |     100 |     100 | 41                \n  sortWith.js                 |     100 |      100 |     100 |     100 |                   \n  split.js                    |     100 |      100 |     100 |     100 |                   \n  splitAt.js                  |     100 |      100 |     100 |     100 |                   \n  splitEvery.js               |     100 |      100 |     100 |     100 |                   \n  splitWhen.js                |     100 |      100 |     100 |     100 |                   \n  splitWhenever.js            |     100 |      100 |     100 |     100 |                   \n  startsWith.js               |     100 |      100 |     100 |     100 |                   \n  subtract.js                 |     100 |      100 |     100 |     100 |                   \n  sum.js                      |     100 |      100 |     100 |     100 |                   \n  swap.js                     |     100 |    95.83 |     100 |     100 | 47                \n  symmetricDifference.js      |     100 |      100 |     100 |     100 |                   \n  symmetricDifferenceWith.js  |     100 |      100 |     100 |     100 |                   \n  tail.js                     |     100 |      100 |     100 |     100 |                   \n  take.js                     |     100 |      100 |     100 |     100 |                   \n  takeLast.js                 |     100 |      100 |     100 |     100 |                   \n  takeLastWhile.js            |     100 |      100 |     100 |     100 |                   \n  takeWhile.js                |     100 |      100 |     100 |     100 |                   \n  tap.js                      |     100 |      100 |     100 |     100 |                   \n  test.js                     |     100 |      100 |     100 |     100 |                   \n  thunkify.js                 |     100 |      100 |     100 |     100 |                   \n  times.js                    |     100 |      100 |     100 |     100 |                   \n  toLower.js                  |     100 |      100 |     100 |     100 |                   \n  toPairs.js                  |     100 |      100 |     100 |     100 |                   \n  toPairsIn.js                |     100 |      100 |     100 |     100 |                   \n  toString.js                 |     100 |      100 |     100 |     100 |                   \n  toUpper.js                  |     100 |      100 |     100 |     100 |                   \n  transduce.js                |     100 |      100 |     100 |     100 |                   \n  transpose.js                |     100 |      100 |     100 |     100 |                   \n  traverse.js                 |     100 |     87.5 |     100 |     100 | 43                \n  trim.js                     |   66.67 |       80 |      50 |   66.67 | 26-28             \n  tryCatch.js                 |     100 |      100 |     100 |     100 |                   \n  type.js                     |     100 |      100 |     100 |     100 |                   \n  unapply.js                  |     100 |      100 |     100 |     100 |                   \n  unary.js                    |     100 |      100 |     100 |     100 |                   \n  uncurryN.js                 |     100 |      100 |     100 |     100 |                   \n  unfold.js                   |     100 |      100 |     100 |     100 |                   \n  union.js                    |     100 |      100 |     100 |     100 |                   \n  unionWith.js                |     100 |      100 |     100 |     100 |                   \n  uniq.js                     |     100 |      100 |     100 |     100 |                   \n  uniqBy.js                   |     100 |      100 |     100 |     100 |                   \n  uniqWith.js                 |     100 |      100 |     100 |     100 |                   \n  unless.js                   |     100 |      100 |     100 |     100 |                   \n  unnest.js                   |     100 |      100 |     100 |     100 |                   \n  until.js                    |     100 |      100 |     100 |     100 |                   \n  unwind.js                   |     100 |      100 |     100 |     100 |                   \n  update.js                   |     100 |      100 |     100 |     100 |                   \n  useWith.js                  |     100 |      100 |     100 |     100 |                   \n  values.js                   |     100 |      100 |     100 |     100 |                   \n  valuesIn.js                 |     100 |      100 |     100 |     100 |                   \n  view.js                     |     100 |      100 |     100 |     100 |                   \n  when.js                     |     100 |      100 |     100 |     100 |                   \n  where.js                    |     100 |      100 |     100 |     100 |                   \n  whereAny.js                 |     100 |      100 |     100 |     100 |                   \n  whereEq.js                  |     100 |      100 |     100 |     100 |                   \n  without.js                  |     100 |      100 |     100 |     100 |                   \n  xor.js                      |     100 |      100 |     100 |     100 |                   \n  xprod.js                    |     100 |      100 |     100 |     100 |                   \n  zip.js                      |     100 |      100 |     100 |     100 |                   \n  zipObj.js                   |     100 |      100 |     100 |     100 |                   \n  zipWith.js                  |     100 |      100 |     100 |     100 |                   \n source/internal              |   89.43 |    80.57 |   86.83 |   90.06 |                   \n  _Set.js                     |      75 |    63.38 |     100 |      75 | 64-76,109-124     \n  _aperture.js                |     100 |      100 |     100 |     100 |                   \n  _arity.js                   |      64 |    58.33 |   66.67 |   64.29 | 10,12-15          \n  _arrayFromIterator.js       |     100 |      100 |     100 |     100 |                   \n  _arrayReduce.js             |     100 |      100 |     100 |     100 |                   \n  _assertPromise.js           |     100 |      100 |     100 |     100 |                   \n  _assoc.js                   |     100 |      100 |     100 |     100 |                   \n  _checkForMethod.js          |   85.71 |    83.33 |     100 |   85.71 | 18                \n  _clone.js                   |   84.21 |    84.62 |     100 |   88.46 | 111-118           \n  _cloneRegExp.js             |     100 |    57.14 |     100 |     100 | 2-7               \n  _complement.js              |     100 |      100 |     100 |     100 |                   \n  _concat.js                  |     100 |       75 |     100 |     100 | 13                \n  _createPartialApplicator.js |     100 |      100 |     100 |     100 |                   \n  _createReduce.js            |   81.25 |    71.43 |     100 |   81.25 | 15,21,27          \n  _curry1.js                  |     100 |      100 |     100 |     100 |                   \n  _curry2.js                  |   88.89 |    84.62 |      80 |   88.89 | 28                \n  _curry3.js                  |   52.94 |    56.76 |   33.33 |   52.94 | 27-29,35-45       \n  _curryN.js                  |     100 |      100 |     100 |     100 |                   \n  _dispatchable.js            |   93.33 |     87.5 |     100 |   93.33 | 23                \n  _dissoc.js                  |      90 |    83.33 |     100 |      90 | 15                \n  _dropLast.js                |     100 |      100 |     100 |     100 |                   \n  _dropLastWhile.js           |     100 |      100 |     100 |     100 |                   \n  _equals.js                  |   98.18 |     98.8 |     100 |   98.18 | 61                \n  _filter.js                  |     100 |      100 |     100 |     100 |                   \n  _flatCat.js                 |     100 |       50 |     100 |     100 | 17-26             \n  _forceReduced.js            |      50 |      100 |       0 |      50 | 2                 \n  _functionName.js            |     100 |       50 |     100 |     100 | 4                 \n  _has.js                     |     100 |      100 |     100 |     100 |                   \n  _identity.js                |     100 |      100 |     100 |     100 |                   \n  _includes.js                |     100 |      100 |     100 |     100 |                   \n  _includesWith.js            |     100 |      100 |     100 |     100 |                   \n  _indexOf.js                 |    96.3 |    91.67 |     100 |    96.3 | 16                \n  _isArguments.js             |   83.33 |       50 |   66.67 |   83.33 | 8                 \n  _isArray.js                 |      50 |       20 |       0 |      50 | 14                \n  _isArrayLike.js             |   86.67 |    85.71 |     100 |     100 | 28-29             \n  _isFunction.js              |     100 |      100 |     100 |     100 |                   \n  _isInteger.js               |      50 |       50 |       0 |      50 | 10                \n  _isNumber.js                |     100 |      100 |     100 |     100 |                   \n  _isObject.js                |     100 |      100 |     100 |     100 |                   \n  _isPlaceholder.js           |     100 |      100 |     100 |     100 |                   \n  _isRegExp.js                |     100 |      100 |     100 |     100 |                   \n  _isString.js                |     100 |      100 |     100 |     100 |                   \n  _isTransformer.js           |     100 |      100 |     100 |     100 |                   \n  _isTypedArray.js            |     100 |      100 |     100 |     100 |                   \n  _makeFlat.js                |     100 |      100 |     100 |     100 |                   \n  _map.js                     |     100 |      100 |     100 |     100 |                   \n  _modify.js                  |     100 |      100 |     100 |     100 |                   \n  _nth.js                     |     100 |      100 |     100 |     100 |                   \n  _objectAssign.js            |   13.33 |     12.5 |       0 |   13.33 | 5-23              \n  _objectIs.js                |      25 |     12.5 |       0 |      25 | 4-9               \n  _path.js                    |     100 |      100 |     100 |     100 |                   \n  _pipe.js                    |     100 |      100 |     100 |     100 |                   \n  _promap.js                  |     100 |      100 |     100 |     100 |                   \n  _quote.js                   |     100 |      100 |     100 |     100 |                   \n  _reduce.js                  |      25 |      100 |       0 |   14.29 | 6-15              \n  _reduced.js                 |     100 |       75 |     100 |     100 | 2                 \n  _stepCat.js                 |   88.24 |       80 |     100 |   88.24 | 34,45             \n  _toISOString.js             |   66.67 |       25 |   33.33 |      80 | 11                \n  _toString.js                |     100 |      100 |     100 |     100 |                   \n  _xArrayReduce.js            |     100 |      100 |     100 |     100 |                   \n  _xReduce.js                 |     100 |      100 |     100 |     100 |                   \n  _xall.js                    |     100 |      100 |     100 |     100 |                   \n  _xany.js                    |     100 |      100 |     100 |     100 |                   \n  _xaperture.js               |     100 |      100 |     100 |     100 |                   \n  _xchain.js                  |     100 |      100 |     100 |     100 |                   \n  _xdrop.js                   |   38.46 |        0 |       0 |   41.67 | 5-6,11-15,19      \n  _xdropLast.js               |      96 |    83.33 |     100 |   95.83 | 6                 \n  _xdropLastWhile.js          |     100 |      100 |     100 |     100 |                   \n  _xdropRepeatsWith.js        |     100 |      100 |     100 |     100 |                   \n  _xdropWhile.js              |     100 |      100 |     100 |     100 |                   \n  _xfBase.js                  |     100 |      100 |     100 |     100 |                   \n  _xfilter.js                 |     100 |      100 |     100 |     100 |                   \n  _xfind.js                   |   94.12 |       75 |     100 |   93.75 | 13                \n  _xfindIndex.js              |   94.74 |       75 |     100 |   94.44 | 14                \n  _xfindLast.js               |     100 |      100 |     100 |     100 |                   \n  _xfindLastIndex.js          |     100 |      100 |     100 |     100 |                   \n  _xmap.js                    |     100 |      100 |     100 |     100 |                   \n  _xpromap.js                 |   45.45 |      100 |       0 |      50 | 6-8,13,17         \n  _xreduceBy.js               |   91.67 |    66.67 |     100 |   91.67 | 20-21             \n  _xscan.js                   |     100 |      100 |     100 |     100 |                   \n  _xtake.js                   |     100 |      100 |     100 |     100 |                   \n  _xtakeWhile.js              |     100 |      100 |     100 |     100 |                   \n  _xtap.js                    |     100 |      100 |     100 |     100 |                   \n  _xuniqBy.js                 |     100 |      100 |     100 |     100 |                   \n  _xuniqWith.js               |     100 |      100 |     100 |     100 |                   \n  _xwrap.js                   |      90 |      100 |      80 |    87.5 | 5                 \n------------------------------|---------|----------|---------|---------|-------------------\n  ```\n\n</details>"
    ],
    "commit_messages": [
      "only include summary in coverage comment on PRs (#3434)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79998dfb6b84f24255c3",
    "number": 3432,
    "body": "We try to refrain from using `const` and `let` in favor of `var`, so I replaced some leftover `let` in _clone.js",
    "head_branch": "clone-var",
    "is_a_fork": true,
    "comments": [
      "Thanks @Berndy . There are a couple `const` in `internal/_clone.js` as well, would you mind replacing those? There is also a `const` [here](https://github.com/ramda/ramda/blob/74cfca7122329f4c6472da1411dc2964e36232f3/source/internal/_path.js#L11).",
      "<details>\n  <summary>Coverage Results</summary>\n\n  ```bash\n  \n> ramda@0.29.1 coverage\n> BABEL_ENV=cjs nyc --reporter=text-summary --reporter=text mocha -- --reporter=min --require @babel/register\n\n\u001b[2J\u001b[1;3H\n  1188 passing (926ms)\n\n\n=============================== Coverage summary ===============================\nStatements   : 94.03% ( 2473/2630 )\nBranches     : 85.76% ( 970/1131 )\nFunctions    : 93.24% ( 552/592 )\nLines        : 94.31% ( 2319/2459 )\n================================================================================\n------------------------------|---------|----------|---------|---------|-------------------\nFile                          | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n------------------------------|---------|----------|---------|---------|-------------------\nAll files                     |   94.03 |    85.76 |   93.24 |   94.31 |                   \n scripts/transpile            |    94.2 |    84.62 |     100 |    94.2 |                   \n  esm-to-cjs.js               |   92.11 |       75 |     100 |   92.11 | 92,97,119         \n  wrap-constructor-pattern.js |   96.77 |    92.86 |     100 |   96.77 | 73                \n source                       |   97.03 |    91.28 |   97.61 |   97.14 |                   \n  F.js                        |     100 |      100 |     100 |     100 |                   \n  T.js                        |     100 |      100 |     100 |     100 |                   \n  __.js                       |     100 |      100 |     100 |     100 |                   \n  add.js                      |     100 |      100 |     100 |     100 |                   \n  addIndex.js                 |     100 |      100 |     100 |     100 |                   \n  addIndexRight.js            |     100 |      100 |     100 |     100 |                   \n  adjust.js                   |     100 |      100 |     100 |     100 |                   \n  all.js                      |     100 |      100 |     100 |     100 |                   \n  allPass.js                  |     100 |      100 |     100 |     100 |                   \n  always.js                   |     100 |      100 |     100 |     100 |                   \n  and.js                      |     100 |      100 |     100 |     100 |                   \n  andThen.js                  |     100 |      100 |     100 |     100 |                   \n  any.js                      |     100 |      100 |     100 |     100 |                   \n  anyPass.js                  |     100 |      100 |     100 |     100 |                   \n  ap.js                       |     100 |      100 |     100 |     100 |                   \n  aperture.js                 |     100 |      100 |     100 |     100 |                   \n  append.js                   |     100 |      100 |     100 |     100 |                   \n  apply.js                    |     100 |      100 |     100 |     100 |                   \n  applySpec.js                |     100 |      100 |     100 |     100 |                   \n  applyTo.js                  |     100 |      100 |     100 |     100 |                   \n  ascend.js                   |     100 |      100 |     100 |     100 |                   \n  assoc.js                    |     100 |      100 |     100 |     100 |                   \n  assocPath.js                |     100 |      100 |     100 |     100 |                   \n  binary.js                   |     100 |      100 |     100 |     100 |                   \n  bind.js                     |     100 |      100 |     100 |     100 |                   \n  both.js                     |     100 |      100 |     100 |     100 |                   \n  call.js                     |     100 |      100 |     100 |     100 |                   \n  chain.js                    |     100 |      100 |     100 |     100 |                   \n  clamp.js                    |      80 |    83.33 |     100 |      80 | 25                \n  clone.js                    |     100 |      100 |     100 |     100 |                   \n  collectBy.js                |     100 |      100 |     100 |     100 |                   \n  comparator.js               |     100 |      100 |     100 |     100 |                   \n  complement.js               |     100 |      100 |     100 |     100 |                   \n  compose.js                  |     100 |      100 |     100 |     100 |                   \n  composeWith.js              |     100 |      100 |     100 |     100 |                   \n  concat.js                   |   86.67 |     87.5 |     100 |   86.67 | 47,50             \n  cond.js                     |     100 |      100 |     100 |     100 |                   \n  construct.js                |     100 |      100 |     100 |     100 |                   \n  constructN.js               |   68.42 |    57.14 |     100 |   66.67 | 53-55,57-59       \n  converge.js                 |     100 |      100 |     100 |     100 |                   \n  count.js                    |     100 |      100 |     100 |     100 |                   \n  countBy.js                  |     100 |      100 |     100 |     100 |                   \n  curry.js                    |     100 |      100 |     100 |     100 |                   \n  curryN.js                   |     100 |      100 |     100 |     100 |                   \n  dec.js                      |     100 |      100 |     100 |     100 |                   \n  defaultTo.js                |     100 |      100 |     100 |     100 |                   \n  descend.js                  |     100 |      100 |     100 |     100 |                   \n  difference.js               |     100 |      100 |     100 |     100 |                   \n  differenceWith.js           |     100 |      100 |     100 |     100 |                   \n  dissoc.js                   |     100 |      100 |     100 |     100 |                   \n  dissocPath.js               |   88.89 |    72.73 |     100 |   88.89 | 19,50             \n  divide.js                   |     100 |      100 |     100 |     100 |                   \n  drop.js                     |     100 |      100 |     100 |     100 |                   \n  dropLast.js                 |     100 |      100 |     100 |     100 |                   \n  dropLastWhile.js            |     100 |      100 |     100 |     100 |                   \n  dropRepeats.js              |     100 |      100 |     100 |     100 |                   \n  dropRepeatsBy.js            |     100 |      100 |     100 |     100 |                   \n  dropRepeatsWith.js          |     100 |      100 |     100 |     100 |                   \n  dropWhile.js                |     100 |      100 |     100 |     100 |                   \n  either.js                   |     100 |      100 |     100 |     100 |                   \n  empty.js                    |     100 |    92.86 |     100 |     100 | 37,39             \n  endsWith.js                 |     100 |      100 |     100 |     100 |                   \n  eqBy.js                     |     100 |      100 |     100 |     100 |                   \n  eqProps.js                  |     100 |      100 |     100 |     100 |                   \n  equals.js                   |     100 |      100 |     100 |     100 |                   \n  evolve.js                   |     100 |      100 |     100 |     100 |                   \n  filter.js                   |     100 |      100 |     100 |     100 |                   \n  find.js                     |     100 |      100 |     100 |     100 |                   \n  findIndex.js                |     100 |      100 |     100 |     100 |                   \n  findLast.js                 |     100 |      100 |     100 |     100 |                   \n  findLastIndex.js            |     100 |      100 |     100 |     100 |                   \n  flatten.js                  |     100 |      100 |     100 |     100 |                   \n  flip.js                     |     100 |      100 |     100 |     100 |                   \n  forEach.js                  |     100 |      100 |     100 |     100 |                   \n  forEachObjIndexed.js        |     100 |      100 |     100 |     100 |                   \n  fromPairs.js                |     100 |      100 |     100 |     100 |                   \n  groupBy.js                  |     100 |      100 |     100 |     100 |                   \n  groupWith.js                |     100 |      100 |     100 |     100 |                   \n  gt.js                       |     100 |      100 |     100 |     100 |                   \n  gte.js                      |     100 |      100 |     100 |     100 |                   \n  has.js                      |     100 |      100 |     100 |     100 |                   \n  hasIn.js                    |     100 |      100 |     100 |     100 |                   \n  hasPath.js                  |     100 |      100 |     100 |     100 |                   \n  head.js                     |     100 |      100 |     100 |     100 |                   \n  identical.js                |      90 |       80 |     100 |      90 | 40                \n  identity.js                 |     100 |      100 |     100 |     100 |                   \n  ifElse.js                   |     100 |      100 |     100 |     100 |                   \n  inc.js                      |     100 |      100 |     100 |     100 |                   \n  includes.js                 |     100 |      100 |     100 |     100 |                   \n  indexBy.js                  |     100 |      100 |     100 |     100 |                   \n  indexOf.js                  |     100 |      100 |     100 |     100 |                   \n  init.js                     |     100 |      100 |     100 |     100 |                   \n  innerJoin.js                |     100 |      100 |     100 |     100 |                   \n  insert.js                   |     100 |      100 |     100 |     100 |                   \n  insertAll.js                |     100 |      100 |     100 |     100 |                   \n  intersection.js             |     100 |      100 |     100 |     100 |                   \n  intersperse.js              |     100 |      100 |     100 |     100 |                   \n  into.js                     |     100 |      100 |     100 |     100 |                   \n  invert.js                   |     100 |      100 |     100 |     100 |                   \n  invertObj.js                |     100 |      100 |     100 |     100 |                   \n  invoker.js                  |     100 |      100 |     100 |     100 |                   \n  is.js                       |     100 |      100 |     100 |     100 |                   \n  isEmpty.js                  |     100 |      100 |     100 |     100 |                   \n  isNil.js                    |     100 |      100 |     100 |     100 |                   \n  isNotEmpty.js               |     100 |      100 |     100 |     100 |                   \n  isNotNil.js                 |     100 |      100 |     100 |     100 |                   \n  join.js                     |     100 |      100 |     100 |     100 |                   \n  juxt.js                     |     100 |      100 |     100 |     100 |                   \n  keys.js                     |      30 |    21.74 |      50 |      30 | 18-25,51-72       \n  keysIn.js                   |     100 |      100 |     100 |     100 |                   \n  last.js                     |     100 |      100 |     100 |     100 |                   \n  lastIndexOf.js              |     100 |      100 |     100 |     100 |                   \n  length.js                   |     100 |      100 |     100 |     100 |                   \n  lens.js                     |     100 |      100 |     100 |     100 |                   \n  lensIndex.js                |     100 |      100 |     100 |     100 |                   \n  lensPath.js                 |     100 |      100 |     100 |     100 |                   \n  lensProp.js                 |     100 |      100 |     100 |     100 |                   \n  lift.js                     |     100 |      100 |     100 |     100 |                   \n  liftN.js                    |     100 |      100 |     100 |     100 |                   \n  lt.js                       |     100 |      100 |     100 |     100 |                   \n  lte.js                      |     100 |      100 |     100 |     100 |                   \n  map.js                      |     100 |      100 |     100 |     100 |                   \n  mapAccum.js                 |     100 |      100 |     100 |     100 |                   \n  mapAccumRight.js            |     100 |      100 |     100 |     100 |                   \n  mapObjIndexed.js            |     100 |      100 |     100 |     100 |                   \n  match.js                    |     100 |      100 |     100 |     100 |                   \n  mathMod.js                  |     100 |      100 |     100 |     100 |                   \n  max.js                      |     100 |      100 |     100 |     100 |                   \n  maxBy.js                    |     100 |      100 |     100 |     100 |                   \n  mean.js                     |     100 |      100 |     100 |     100 |                   \n  median.js                   |     100 |    83.33 |     100 |     100 | 30                \n  memoizeWith.js              |     100 |      100 |     100 |     100 |                   \n  mergeAll.js                 |     100 |      100 |     100 |     100 |                   \n  mergeDeepLeft.js            |     100 |      100 |     100 |     100 |                   \n  mergeDeepRight.js           |     100 |      100 |     100 |     100 |                   \n  mergeDeepWith.js            |     100 |      100 |     100 |     100 |                   \n  mergeDeepWithKey.js         |     100 |      100 |     100 |     100 |                   \n  mergeLeft.js                |     100 |      100 |     100 |     100 |                   \n  mergeRight.js               |     100 |      100 |     100 |     100 |                   \n  mergeWith.js                |     100 |      100 |     100 |     100 |                   \n  mergeWithKey.js             |     100 |      100 |     100 |     100 |                   \n  min.js                      |     100 |      100 |     100 |     100 |                   \n  minBy.js                    |     100 |      100 |     100 |     100 |                   \n  modify.js                   |     100 |      100 |     100 |     100 |                   \n  modifyPath.js               |     100 |      100 |     100 |     100 |                   \n  modulo.js                   |     100 |      100 |     100 |     100 |                   \n  move.js                     |     100 |      100 |     100 |     100 |                   \n  multiply.js                 |     100 |      100 |     100 |     100 |                   \n  nAry.js                     |   65.38 |    66.67 |   58.33 |   73.33 | 40,42,44-45       \n  negate.js                   |     100 |      100 |     100 |     100 |                   \n  none.js                     |     100 |      100 |     100 |     100 |                   \n  not.js                      |     100 |      100 |     100 |     100 |                   \n  nth.js                      |     100 |      100 |     100 |     100 |                   \n  nthArg.js                   |     100 |      100 |     100 |     100 |                   \n  o.js                        |     100 |      100 |     100 |     100 |                   \n  objOf.js                    |     100 |      100 |     100 |     100 |                   \n  of.js                       |     100 |       75 |     100 |     100 | 33                \n  omit.js                     |     100 |      100 |     100 |     100 |                   \n  on.js                       |     100 |      100 |     100 |     100 |                   \n  once.js                     |     100 |      100 |     100 |     100 |                   \n  or.js                       |     100 |      100 |     100 |     100 |                   \n  otherwise.js                |     100 |      100 |     100 |     100 |                   \n  over.js                     |     100 |      100 |     100 |     100 |                   \n  pair.js                     |     100 |      100 |     100 |     100 |                   \n  partial.js                  |     100 |      100 |     100 |     100 |                   \n  partialObject.js            |     100 |      100 |     100 |     100 |                   \n  partialRight.js             |     100 |      100 |     100 |     100 |                   \n  partition.js                |     100 |      100 |     100 |     100 |                   \n  path.js                     |     100 |      100 |     100 |     100 |                   \n  pathEq.js                   |     100 |      100 |     100 |     100 |                   \n  pathOr.js                   |     100 |      100 |     100 |     100 |                   \n  pathSatisfies.js            |     100 |      100 |     100 |     100 |                   \n  paths.js                    |     100 |      100 |     100 |     100 |                   \n  pick.js                     |     100 |      100 |     100 |     100 |                   \n  pickAll.js                  |     100 |      100 |     100 |     100 |                   \n  pickBy.js                   |     100 |      100 |     100 |     100 |                   \n  pipe.js                     |     100 |      100 |     100 |     100 |                   \n  pipeWith.js                 |   88.89 |       50 |     100 |   88.89 | 35                \n  pluck.js                    |     100 |      100 |     100 |     100 |                   \n  prepend.js                  |     100 |      100 |     100 |     100 |                   \n  product.js                  |     100 |      100 |     100 |     100 |                   \n  project.js                  |     100 |      100 |     100 |     100 |                   \n  promap.js                   |     100 |      100 |     100 |     100 |                   \n  prop.js                     |     100 |      100 |     100 |     100 |                   \n  propEq.js                   |     100 |      100 |     100 |     100 |                   \n  propIs.js                   |     100 |      100 |     100 |     100 |                   \n  propOr.js                   |     100 |      100 |     100 |     100 |                   \n  propSatisfies.js            |     100 |      100 |     100 |     100 |                   \n  props.js                    |     100 |      100 |     100 |     100 |                   \n  range.js                    |     100 |     87.5 |     100 |     100 | 26                \n  reduce.js                   |     100 |      100 |     100 |     100 |                   \n  reduceBy.js                 |     100 |      100 |     100 |     100 |                   \n  reduceRight.js              |     100 |      100 |     100 |     100 |                   \n  reduceWhile.js              |     100 |      100 |     100 |     100 |                   \n  reduced.js                  |     100 |      100 |     100 |     100 |                   \n  reject.js                   |     100 |      100 |     100 |     100 |                   \n  remove.js                   |     100 |      100 |     100 |     100 |                   \n  repeat.js                   |     100 |      100 |     100 |     100 |                   \n  replace.js                  |     100 |      100 |     100 |     100 |                   \n  reverse.js                  |     100 |      100 |     100 |     100 |                   \n  scan.js                     |     100 |      100 |     100 |     100 |                   \n  sequence.js                 |     100 |       75 |     100 |     100 | 39,47             \n  set.js                      |     100 |      100 |     100 |     100 |                   \n  slice.js                    |     100 |      100 |     100 |     100 |                   \n  sort.js                     |     100 |      100 |     100 |     100 |                   \n  sortBy.js                   |     100 |       75 |     100 |     100 | 41                \n  sortWith.js                 |     100 |      100 |     100 |     100 |                   \n  split.js                    |     100 |      100 |     100 |     100 |                   \n  splitAt.js                  |     100 |      100 |     100 |     100 |                   \n  splitEvery.js               |     100 |      100 |     100 |     100 |                   \n  splitWhen.js                |     100 |      100 |     100 |     100 |                   \n  splitWhenever.js            |     100 |      100 |     100 |     100 |                   \n  startsWith.js               |     100 |      100 |     100 |     100 |                   \n  subtract.js                 |     100 |      100 |     100 |     100 |                   \n  sum.js                      |     100 |      100 |     100 |     100 |                   \n  swap.js                     |     100 |    95.83 |     100 |     100 | 47                \n  symmetricDifference.js      |     100 |      100 |     100 |     100 |                   \n  symmetricDifferenceWith.js  |     100 |      100 |     100 |     100 |                   \n  tail.js                     |     100 |      100 |     100 |     100 |                   \n  take.js                     |     100 |      100 |     100 |     100 |                   \n  takeLast.js                 |     100 |      100 |     100 |     100 |                   \n  takeLastWhile.js            |     100 |      100 |     100 |     100 |                   \n  takeWhile.js                |     100 |      100 |     100 |     100 |                   \n  tap.js                      |     100 |      100 |     100 |     100 |                   \n  test.js                     |     100 |      100 |     100 |     100 |                   \n  thunkify.js                 |     100 |      100 |     100 |     100 |                   \n  times.js                    |     100 |      100 |     100 |     100 |                   \n  toLower.js                  |     100 |      100 |     100 |     100 |                   \n  toPairs.js                  |     100 |      100 |     100 |     100 |                   \n  toPairsIn.js                |     100 |      100 |     100 |     100 |                   \n  toString.js                 |     100 |      100 |     100 |     100 |                   \n  toUpper.js                  |     100 |      100 |     100 |     100 |                   \n  transduce.js                |     100 |      100 |     100 |     100 |                   \n  transpose.js                |     100 |      100 |     100 |     100 |                   \n  traverse.js                 |     100 |     87.5 |     100 |     100 | 43                \n  trim.js                     |   66.67 |       80 |      50 |   66.67 | 26-28             \n  tryCatch.js                 |     100 |      100 |     100 |     100 |                   \n  type.js                     |     100 |      100 |     100 |     100 |                   \n  unapply.js                  |     100 |      100 |     100 |     100 |                   \n  unary.js                    |     100 |      100 |     100 |     100 |                   \n  uncurryN.js                 |     100 |      100 |     100 |     100 |                   \n  unfold.js                   |     100 |      100 |     100 |     100 |                   \n  union.js                    |     100 |      100 |     100 |     100 |                   \n  unionWith.js                |     100 |      100 |     100 |     100 |                   \n  uniq.js                     |     100 |      100 |     100 |     100 |                   \n  uniqBy.js                   |     100 |      100 |     100 |     100 |                   \n  uniqWith.js                 |     100 |      100 |     100 |     100 |                   \n  unless.js                   |     100 |      100 |     100 |     100 |                   \n  unnest.js                   |     100 |      100 |     100 |     100 |                   \n  until.js                    |     100 |      100 |     100 |     100 |                   \n  unwind.js                   |     100 |      100 |     100 |     100 |                   \n  update.js                   |     100 |      100 |     100 |     100 |                   \n  useWith.js                  |     100 |      100 |     100 |     100 |                   \n  values.js                   |     100 |      100 |     100 |     100 |                   \n  valuesIn.js                 |     100 |      100 |     100 |     100 |                   \n  view.js                     |     100 |      100 |     100 |     100 |                   \n  when.js                     |     100 |      100 |     100 |     100 |                   \n  where.js                    |     100 |      100 |     100 |     100 |                   \n  whereAny.js                 |     100 |      100 |     100 |     100 |                   \n  whereEq.js                  |     100 |      100 |     100 |     100 |                   \n  without.js                  |     100 |      100 |     100 |     100 |                   \n  xor.js                      |     100 |      100 |     100 |     100 |                   \n  xprod.js                    |     100 |      100 |     100 |     100 |                   \n  zip.js                      |     100 |      100 |     100 |     100 |                   \n  zipObj.js                   |     100 |      100 |     100 |     100 |                   \n  zipWith.js                  |     100 |      100 |     100 |     100 |                   \n source/internal              |   89.43 |    80.57 |   86.83 |   90.06 |                   \n  _Set.js                     |      75 |    63.38 |     100 |      75 | 64-76,109-124     \n  _aperture.js                |     100 |      100 |     100 |     100 |                   \n  _arity.js                   |      64 |    58.33 |   66.67 |   64.29 | 10,12-15          \n  _arrayFromIterator.js       |     100 |      100 |     100 |     100 |                   \n  _arrayReduce.js             |     100 |      100 |     100 |     100 |                   \n  _assertPromise.js           |     100 |      100 |     100 |     100 |                   \n  _assoc.js                   |     100 |      100 |     100 |     100 |                   \n  _checkForMethod.js          |   85.71 |    83.33 |     100 |   85.71 | 18                \n  _clone.js                   |   84.21 |    84.62 |     100 |   88.46 | 111-118           \n  _cloneRegExp.js             |     100 |    57.14 |     100 |     100 | 2-7               \n  _complement.js              |     100 |      100 |     100 |     100 |                   \n  _concat.js                  |     100 |       75 |     100 |     100 | 13                \n  _createPartialApplicator.js |     100 |      100 |     100 |     100 |                   \n  _createReduce.js            |   81.25 |    71.43 |     100 |   81.25 | 15,21,27          \n  _curry1.js                  |     100 |      100 |     100 |     100 |                   \n  _curry2.js                  |   88.89 |    84.62 |      80 |   88.89 | 28                \n  _curry3.js                  |   52.94 |    56.76 |   33.33 |   52.94 | 27-29,35-45       \n  _curryN.js                  |     100 |      100 |     100 |     100 |                   \n  _dispatchable.js            |   93.33 |     87.5 |     100 |   93.33 | 23                \n  _dissoc.js                  |      90 |    83.33 |     100 |      90 | 15                \n  _dropLast.js                |     100 |      100 |     100 |     100 |                   \n  _dropLastWhile.js           |     100 |      100 |     100 |     100 |                   \n  _equals.js                  |   98.18 |     98.8 |     100 |   98.18 | 61                \n  _filter.js                  |     100 |      100 |     100 |     100 |                   \n  _flatCat.js                 |     100 |       50 |     100 |     100 | 17-26             \n  _forceReduced.js            |      50 |      100 |       0 |      50 | 2                 \n  _functionName.js            |     100 |       50 |     100 |     100 | 4                 \n  _has.js                     |     100 |      100 |     100 |     100 |                   \n  _identity.js                |     100 |      100 |     100 |     100 |                   \n  _includes.js                |     100 |      100 |     100 |     100 |                   \n  _includesWith.js            |     100 |      100 |     100 |     100 |                   \n  _indexOf.js                 |    96.3 |    91.67 |     100 |    96.3 | 16                \n  _isArguments.js             |   83.33 |       50 |   66.67 |   83.33 | 8                 \n  _isArray.js                 |      50 |       20 |       0 |      50 | 14                \n  _isArrayLike.js             |   86.67 |    85.71 |     100 |     100 | 28-29             \n  _isFunction.js              |     100 |      100 |     100 |     100 |                   \n  _isInteger.js               |      50 |       50 |       0 |      50 | 10                \n  _isNumber.js                |     100 |      100 |     100 |     100 |                   \n  _isObject.js                |     100 |      100 |     100 |     100 |                   \n  _isPlaceholder.js           |     100 |      100 |     100 |     100 |                   \n  _isRegExp.js                |     100 |      100 |     100 |     100 |                   \n  _isString.js                |     100 |      100 |     100 |     100 |                   \n  _isTransformer.js           |     100 |      100 |     100 |     100 |                   \n  _isTypedArray.js            |     100 |      100 |     100 |     100 |                   \n  _makeFlat.js                |     100 |      100 |     100 |     100 |                   \n  _map.js                     |     100 |      100 |     100 |     100 |                   \n  _modify.js                  |     100 |      100 |     100 |     100 |                   \n  _nth.js                     |     100 |      100 |     100 |     100 |                   \n  _objectAssign.js            |   13.33 |     12.5 |       0 |   13.33 | 5-23              \n  _objectIs.js                |      25 |     12.5 |       0 |      25 | 4-9               \n  _path.js                    |     100 |      100 |     100 |     100 |                   \n  _pipe.js                    |     100 |      100 |     100 |     100 |                   \n  _promap.js                  |     100 |      100 |     100 |     100 |                   \n  _quote.js                   |     100 |      100 |     100 |     100 |                   \n  _reduce.js                  |      25 |      100 |       0 |   14.29 | 6-15              \n  _reduced.js                 |     100 |       75 |     100 |     100 | 2                 \n  _stepCat.js                 |   88.24 |       80 |     100 |   88.24 | 34,45             \n  _toISOString.js             |   66.67 |       25 |   33.33 |      80 | 11                \n  _toString.js                |     100 |      100 |     100 |     100 |                   \n  _xArrayReduce.js            |     100 |      100 |     100 |     100 |                   \n  _xReduce.js                 |     100 |      100 |     100 |     100 |                   \n  _xall.js                    |     100 |      100 |     100 |     100 |                   \n  _xany.js                    |     100 |      100 |     100 |     100 |                   \n  _xaperture.js               |     100 |      100 |     100 |     100 |                   \n  _xchain.js                  |     100 |      100 |     100 |     100 |                   \n  _xdrop.js                   |   38.46 |        0 |       0 |   41.67 | 5-6,11-15,19      \n  _xdropLast.js               |      96 |    83.33 |     100 |   95.83 | 6                 \n  _xdropLastWhile.js          |     100 |      100 |     100 |     100 |                   \n  _xdropRepeatsWith.js        |     100 |      100 |     100 |     100 |                   \n  _xdropWhile.js              |     100 |      100 |     100 |     100 |                   \n  _xfBase.js                  |     100 |      100 |     100 |     100 |                   \n  _xfilter.js                 |     100 |      100 |     100 |     100 |                   \n  _xfind.js                   |   94.12 |       75 |     100 |   93.75 | 13                \n  _xfindIndex.js              |   94.74 |       75 |     100 |   94.44 | 14                \n  _xfindLast.js               |     100 |      100 |     100 |     100 |                   \n  _xfindLastIndex.js          |     100 |      100 |     100 |     100 |                   \n  _xmap.js                    |     100 |      100 |     100 |     100 |                   \n  _xpromap.js                 |   45.45 |      100 |       0 |      50 | 6-8,13,17         \n  _xreduceBy.js               |   91.67 |    66.67 |     100 |   91.67 | 20-21             \n  _xscan.js                   |     100 |      100 |     100 |     100 |                   \n  _xtake.js                   |     100 |      100 |     100 |     100 |                   \n  _xtakeWhile.js              |     100 |      100 |     100 |     100 |                   \n  _xtap.js                    |     100 |      100 |     100 |     100 |                   \n  _xuniqBy.js                 |     100 |      100 |     100 |     100 |                   \n  _xuniqWith.js               |     100 |      100 |     100 |     100 |                   \n  _xwrap.js                   |      90 |      100 |      80 |    87.5 | 5                 \n------------------------------|---------|----------|---------|---------|-------------------\n  ```\n\n</details>",
      "Whoops, apparently I did not search properly, all `let` and `const` should be gone now?",
      "> We try to refrain from using `const` and `let` in favor of `var`\r\n\r\nWhat is the reason behind that preference?",
      "> What is the reason behind that preference?\r\n\r\nHistorically out of the box compatibility with es3. I believe the plan is to switch everything over to const/let after 1.0"
    ],
    "commit_messages": [
      "replaced let and const with var in _clone.js for consistency (#3432)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f799a8dfb6b84f24255c4",
    "number": 3431,
    "body": "This PR updates git actions to no longer use code climate. It hasn't been working for over a year at least in any event. For various pull request related actions (open, request review, etc), coverage will run and a comment will be created/updated on the PR.",
    "head_branch": "code-climate-fix",
    "is_a_fork": true,
    "comments": [
      "@hitmands , looks like you helped out with the original PR adding code climate to ramda: https://github.com/ramda/ramda/pull/3033\r\n\r\nDo you have any thoughts on why it is currently failing? \r\n\r\nThe current error on master\r\n\r\n```\r\n/home/runner/work/_actions/paambaati/codeclimate-action/v2.6.0/node_modules/@actions/core/lib/command.js:66\r\n        .replace(/%/g, '%25')\r\n         ^\r\n\r\nTypeError: (s || \"\").replace is not a function\r\n```\r\n\r\nI've updated some dependencies in this PR, and am getting\r\n\r\n```\r\nError: you must supply a CC_TEST_REPORTER_ID ENV variable or pass it via the -r flag\r\n```\r\n\r\nI see code climate also has a github app? https://docs.codeclimate.com/docs/open-source-free. Maybe we can use that directly?",
      "I see code climate also has a github app? https://docs.codeclimate.com/docs/open-source-free. Maybe we can use that directly?\r\n\r\n- cc is now at `V5` https://github.com/marketplace/actions/code-climate-coverage-action\r\n\r\nThen put `lcov` processing back, as it seems like cc is processing json (by looking at the job logs)\r\n\r\n```yaml\r\ncoverageLocations: |\r\n            ${{github.workspace}}/coverage/lcov.info:lcov\r\n```"
    ],
    "commit_messages": [
      "do not depend on code climate for coverage report (#3431)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f799b8dfb6b84f24255c5",
    "number": 3430,
    "body": "This MR adds a new function `isNotEmpty`. It is implemented the same way `isNotNil` is, in how that it just returns `!isNil()`, this just returns `!isEmpty()`.\r\n\r\n`isNotEmpty` is not a particularly useful addition to ramda when it comes to pure vanilla javascript, however, it is extremely useful in typescript\r\n\r\nSpecifically for arrays, the typings for `isNotEmpty` can type narrow a `T[]` to a `NonEmptyArray<T>`. This type behavior can be combined with the usage of functions like `head`, which can be overloaded to know the difference, allowing for a strict return type of `T` instead of `T | undefined`. And that, is invaluable \r\n\r\nHere is a full example in the [Typescript Playground](https://tsplay.dev/NlX7lN)\r\n\r\nI'll eventually have an MR in types-ramda to compliment this one with full typings as demo'd in the playground link",
    "head_branch": "isNotEmpty",
    "is_a_fork": true,
    "comments": [
      "Looks like we might have kept dist and got rid of everything else?\r\n\r\nedit: :+1: btw",
      "@kedashoe Yeah I've been wondering why `dist` is committed. When I `npm run build` on my local it updates `dist` and I have to reset those files before committing (or forget to and make another commit to change it back, like I had to here)",
      "> @kedashoe Yeah I've been wondering why `dist` is committed. When I `npm run build` on my local it updates `dist` and I have to reset those files before committing (or forget to and make another commit to change it back, like I had to here)\r\n\r\nYa we should have the default `npm run build` not include updating dist. I'll put up a PR for that before the next release.",
      "@kedashoe At work today, a dev of mine harmlessly switched an instance of `isEmpty` in our code from being imported from `lodash` to `ramda`\r\n\r\nCaught by a unit test, we found that `lodash.isEmpty` handles `null`/`undefined` differently from `ramda.isEmpty`\r\n* `_.isEmpty(null)` => `true`\r\n* `R.isEmpty(null)` => `false`\r\n\r\nIt makes since to me why `ramda` would want to return `false` there. Because `null`/`undefined` are not \"empty\", they can't be \"empty\" because they don't contain anything to be \"empty\" of\r\n\r\nThat made me realize that this MR has a flaw. In that `isNotEmpty()` is just `!isEmtpy()`, for the case of `null`/`undefined` it is incorrect. `isNotEmpty(null)` should also return `false`\r\n\r\nThe best analogy I have for this is that `isEmpty(null) === false` AND `isNotEmpty(null) === false` in the same way that `5 < 5 === false` AND `5 > 5 === false`\r\n\r\nBefore I trhow up a second MR, was hoping to get some feedback on my assertion",
      ":+1: , I agree with your reasoning",
      "errrr.... thinking about this more, I don't think we should do what I'm suggesting above\r\n\r\nBecause that would also mean that `!isEmpty() !== isNotEmpty()` for all cases. As well as `complement(isEmpty)() !== isNotEmpty()`. Objectively, introducing that discrepancy in behavior is worse than solving for what I suggested above. And is anything. Best to keep it as is. If anything, it would be **Breaking**. I wouldn't want devs to start replacing `!isEmpty()` in their code with `isNotEmpty()` and have them find out them behave differently",
      "Fair enough, really it is a type error for null/undefined, which would mean !isEmpty() == isNotEmpty() again, but not so easy considering plain js vs typescript"
    ],
    "commit_messages": [
      "Add isNotEmpty (#3430)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f799c8dfb6b84f24255c6",
    "number": 3428,
    "body": "### Description\r\n- updates the `R.path` to reuse the prop function.\r\n\r\n### Type of change\r\n- [ ] chore(non-breaking change which adds functionality)\r\n\r\nCloses #3429\r\n\r\n\r\n### How Has This Been Tested?\r\n- Run `npm test` and `npm run browser_test`\r\n\r\n\r\n",
    "head_branch": "chore/update-path-fn",
    "is_a_fork": true,
    "comments": [
      "ty for the PR @ridge-kimani , however I don't see the need to refactor here unless you can prove this version is faster which it seems to me it would not be.",
      "@kedashoe there are some significant improvements in performance. For the test cases, the highest runtime was at 1.6s compared to 1.4s for this case. The obj null check also comes before the loop. ",
      "Running tests isn't meant to be used as a benchmark, too much noise. I built a quick benchmark and the current impl is significantly faster\r\n\r\n```\r\n│ this-pr                │ 3,186,532              │ 0.53%                  │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ current                │ 5,016,350              │ 0.19%                  │\r\n```",
      "I'm a bit late to the party, but I have thought about this as well... I think it makes sense to only have a single definition how we get properties from an object, the same way we use nth everywhere to get a value form an array/string or path to get a nested value.\r\n\r\nThe performance hit here almost certainly comes from calling a curried version of R.prop. We'd have to move an uncurried version to an internal file and replace the usage of the curried version everywhere, similar to how nth and path were refactored in [my earlier PR](https://github.com/ramda/ramda/pull/3417). This would result in some performance gain for all prop related functions, with this refactor being a nice side effect.\r\n\r\nAlso the null check needs to stay in the for loop as we want to escape as soon as we hit any null-ish value.",
      "> I think it makes sense to only have a single definition how we get properties from an object, the same way we use nth everywhere to get a value form an array/string or path to get a nested value.\r\n\r\nFor me the reason using/optimizing `nth` makes sense is that it is doing more stuff (checking for negative indexes, checking if target object is a string). Having a single definition for getting properties might be nice, but as ramda is a library, it is more important for me what our users experience than what we experience writing the library, ie performance is more important than that our code is nice.\r\n\r\nCan we really make `_path` faster by replacing a plain js `val = val[p];` with a call to an internal `_prop` function?\r\n\r\nHaving said that, a PR for an internal _prop function that does not use currying to replace our current calls to `prop` would make sense to me."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f799d8dfb6b84f24255c7",
    "number": 3427,
    "body": "### Description\r\n- updates the prop function to fetch deeply nested attributes. It works the same way as the path.\r\n- it also ensures it runs faster recursively\r\n\r\ncloses #3426\r\n\r\n### Type of change\r\n- [ ] feature(non-breaking change which adds functionality)\r\n\r\n\r\n### How Has This Been Tested?\r\n- Run `npm test` and `npm run browser_test`\r\n\r\n\r\n",
    "head_branch": "feature/prop",
    "is_a_fork": true,
    "comments": [
      "Hi @ridge-kimani , we have [R.path](https://ramdajs.com/docs/#path) for this.",
      "Hello @kedashoe. Yeah sure. I saw the need to add deep nesting to extend R.prop functionality to be similar to R.path. \r\nIs there a major \"choice\" difference between \"Prop\" and \"Path\"? Why would I pick \"Prop\" over \"Path\" if I don't have a nested object?\r\nI felt like having the two functions working similarly wouldn't break a sweat if it comes down to picking either or.\r\nIt also runs faster compared to the path fn. ",
      "As an isolated change, this introduces a great inconsistency in Ramda's API.\r\n\r\nWhere they now accept a property name, *all* the various `*prop*` functions (`eqProps`, `props`, `propSatisfies`, ...)  would have to accept property name arrays as arguments too. All the `has*` functions too – I guess – because they serve a related purpose.\r\n\r\nIn Ramda, the name \"prop\" refers to an established mental image/concept which is of great benefit when reasoning about code.",
      "I have to agree with @kedashoe , this function already exists as R.path. If we really wanted this functionality, I feel like it would make more sense to upgrade R.path to also support props, as it already is the function that does \"more\"? Or just have a new function that decides whether to call prop or path? \r\n\r\nI also ran a quick benchmark of path and this new prop function, and it runs significantly slower when inputting an array. This is likely due to creating a lot of new functions due to using curried and arrow functions, creating some new arrays in reduce and not exiting when possible. \r\n\r\n```\r\n// inputting arrays for nested values\r\npath arr x 5,773,850 ops/sec ±1.52% (20 runs sampled)\r\nprop arr x   158,810 ops/sec ±0.62% (24 runs sampled)\r\n\r\n// inputting string / [string] to get prop\r\npath str x 4,316,608 ops/sec ±0.88% (23 runs sampled)\r\nprop str x 4,556,412 ops/sec ±0.84% (23 runs sampled)\r\n```\r\n\r\n",
      "I've seen it will also have some inconsistencies with other functions like `props` which rely on it. If there's any significant improvement to be done it would make sense to be in the R.path function. \r\n\r\nThanks for the feedback. \r\n\r\nI will close this issue. \r\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f799e8dfb6b84f24255c8",
    "number": 3422,
    "body": "### Description\r\n- updates sanctuary and its functions\r\n\r\ncloses #3423 \r\n\r\n### Type of change\r\n- [ ] Chore(non-breaking change which adds functionality)\r\n\r\n\r\n### How Has This Been Tested?\r\n- update the dependencies via `npm install`\r\n- Run `npm test` and `npm run browser_test`\r\n\r\n\r\n",
    "head_branch": "chore/update-sanctuary",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "chore: update sanctuary (#3422)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f799f8dfb6b84f24255c9",
    "number": 3420,
    "body": "### Description\r\n- updates packages with security issues. \r\n\r\nFixes #3419  \r\n\r\n### Type of change\r\n- [ ] Chore(non-breaking change which adds functionality)\r\n\r\n\r\n### How Has This Been Tested?\r\n- Update the dependencies via `npm install`\r\n- Run all tests to ensure there's no breakage\r\n\r\n\r\n",
    "head_branch": "chore/update-vulnerable-dependencies",
    "is_a_fork": true,
    "comments": [
      "Updating babel also updates the build file",
      "Is anything preventing us from running `npm audit fix` as well? I tried it on this branch and it seems tests pass, build still works and none of the scripts fail. This would reduce the vulnerabilities further to\r\n`14 vulnerabilities (5 moderate, 6 high, 3 critical)`\r\n\r\nAfter that most of the remaining vulnerabilities seem to be caused by `testem` and `browserify`, but that likely breaks some stuff...?  \r\nThe last 2 high vulnerabilities are caused by `rollup-plugin-uglify`, but there is no newer version available.",
      "Good idea @Berndy. I will audit and check whether there are any breaking changes for the other packages. ",
      "I'm still getting an error when trying to run `npm run browser_test`, seemingly related to the sinon dependency. It seems we could revert that to the previous `^7.3.2` without getting any vulnerabilities back, however even then my browser_test still has a timeout issue, not sure if that's just my setup though.\r\n\r\nAlso we can still run `npm audit fix` to cut back on 16 of the remaining 22 vulnerabilities, seemingly without breaking anything further",
      "@Berndy Just updated it. \r\nRN we have `6 vulnerabilities (4 high, 2 critical)`\r\n"
    ],
    "commit_messages": [
      "chore: update vulnerable dependencies (#3420)\n\n* chore: update vulnerable dependencies\r\n\r\n---------\r\n\r\nCo-authored-by: Ridge Kimani <ridgekimani@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79a08dfb6b84f24255ca",
    "number": 3417,
    "body": "My attempt at solving functions like path running slow due to using currying when not necessary and depending on functions that do more work than required.\r\n\r\n## Results\r\n```\r\npath old x 2,060,753 ops/sec ±3.83% (22 runs sampled)\r\npath new x 4,981,880 ops/sec ±0.92% (24 runs sampled)\r\n```\r\n\r\n## Optimization steps\r\n- Own code for path function to avoid curry call and extra array when using paths\r\n- moved nth functionality to internal to have access to an non curried version\r\n- moved path functionality to internal to have access to an non curried version\r\n- replacing calls of nth and path with non curried versions will also improve performance of dependent functions\r\n\r\n## Curry vs no curry\r\nIn the future all functions should probably call an internal non curried version of the functionality. Not creating a new function on the fly and then calling it was a major part of these performance optimizations. Being able to use these non curried versions from the library would be amazing, although this would probably go against ramda's \"everything is curried\" policy.\r\n\r\n```\r\npath curried  x 4,981,880 ops/sec ±0.92% (24 runs sampled)\r\npath internal x 8,866,690 ops/sec ±4.40% (23 runs sampled)\r\n```\r\n\r\nsee [here](https://github.com/Berndy/ramda/blob/benchmark-path/benchmarkPath.md) for my benchmark experiment\r\n\r\n",
    "head_branch": "optimize-path",
    "is_a_fork": true,
    "comments": [
      "Sidenote:\r\nI did some experiments trying to optimize nth, as it's potentially called quite often by path, and encountered some really weird behavior.\r\nI tried to change it from\r\n```\r\nexport function _nth(offset, list) {\r\n  var idx = offset < 0 ? list.length + offset : offset;\r\n  return _isString(list) ? list.charAt(idx) : list[idx];\r\n}\r\n\r\n```\r\n\r\nto this\r\n```\r\nexport function _nth2(offset, list) {\r\n  if (offset < 0) {\r\n    const idx = list.length + offset;\r\n    return _isString(list) ? list.charAt(idx) : list[idx];\r\n  }\r\n\r\n  return _isString(list) ? list.charAt(offset) : list[offset];\r\n}\r\n\r\n```\r\n\r\nHowever while this was a pretty big failure, slowing down nth itself significantly\r\n\r\n```\r\nnth old 0 x 43,213,419 ops/sec ±5.71% (23 runs sampled)\r\nnth new 0 x 26,711,312 ops/sec ±5.35% (20 runs sampled)\r\nnth old 1 x 42,951,693 ops/sec ±6.16% (22 runs sampled)\r\nnth new 1 x 26,652,017 ops/sec ±5.74% (22 runs sampled)\r\nnth old -1 x 40,707,893 ops/sec ±0.56% (21 runs sampled)\r\nnth new -1 x 24,465,761 ops/sec ±3.91% (21 runs sampled)\r\n```\r\n\r\npath seems to have some decent gains in performance with this \"slower\" version of nth\r\n\r\nPath with old Nth function\r\n```\r\npath old      x 2,171,188 ops/sec ±1.04% (24 runs sampled)\r\npath new      x 5,352,858 ops/sec ±2.10% (22 runs sampled)\r\npath internal x 8,065,776 ops/sec ±0.52% (23 runs sampled)\r\n```\r\n\r\npath with new Nth function\r\n```\r\npath old      x 2,179,445 ops/sec ±0.81% (22 runs sampled)\r\npath new      x 6,395,729 ops/sec ±3.69% (23 runs sampled)\r\npath internal x 12,270,453 ops/sec ±2.42% (21 runs sampled)\r\n```\r\n\r\nAny ideas what could cause this?  I am both confused a switch from ternary to if would cause such a big hit in performance and why this would end up gaining performance when called in path...\r\n\r\nsee [here](https://github.com/Berndy/ramda/blob/benchmark-path/benchmarkNth.md)",
      "> Any ideas what could cause this? I am both confused a switch from ternary to if would cause such a big hit in performance and why this would end up gaining performance when called in path...\r\n> \r\n> see [here](https://github.com/Berndy/ramda/blob/benchmark-path/benchmarkNth.md)\r\n\r\nI tried pulling that down and running the benchmarks but something on the branch is breaking the build for me. In any event, if a micro-optimization makes sense and the benchmarks look better, we can ship it. If either of those two conditions aren't met, we can hold off for now.",
      "> I tried pulling that down and running the benchmarks but something on the branch is breaking the build for me. In any event, if a micro-optimization makes sense and the benchmarks look better, we can ship it. If either of those two conditions aren't met, we can hold off for now.\r\n\r\nMy bad, I mostly hacked those benchmarks together, which broke tests (and apparently the build). Exporting anything but default apparently breaks everything, so I moved all alternative versions of code to their own files, so it should work now.\r\n\r\nI added a whole bunch of extra variations to narrow down the cause, and I see those performance gains ONLY when it's this exact code and ONLY when it's called via a function. \r\n\r\nI've switched babel node to see if it's runtime based, and now I get mostly similar results for all variations. So my latest theory is now that this is the result of some bun magic that maybe optimizes very specific function patterns...?\r\n\r\nI guess in this case it doesn't really make sense to add this to the PR.",
      "yep np, ty for looking into it some more, agreed on your conclusion :+1: "
    ],
    "commit_messages": [
      "Optimize R.path and dependents (#3417)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79a18dfb6b84f24255cb",
    "number": 3414,
    "body": "Might have been out of step from an earlier release? Will try to keep a closer eye next time",
    "head_branch": "update-versions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "update readme/package-lock versions (#3414)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79a28dfb6b84f24255cc",
    "number": 3410,
    "body": "[curry-discussions](https://github.com/ramda/ramda/discussions/3409)\r\n\r\n\r\nPrevious code doesn't judge every loop reveiving parameter the length of `combined` has `placeholder`. So i fix it.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Can you add a unit test, to test if the change works as expected?",
      "> Can you add a unit test, to test if the change works as expected?\r\n\r\nI add some casees. \r\n\r\n------\r\n\r\nBut when i attempt fix this quesiton, i had two question\r\n\r\n1. I view lodash internal implement about, it will handle next  loop placeholder as  func, which will not use in next loop.\r\nSo, i don't know my solution is correct or not.\r\n![image](https://github.com/ramda/ramda/assets/54520846/3934c5da-6a4a-4c17-992e-29428dec416a)\r\n\r\n2. I attempt publish test case vertify curry function will return function when it didn't reveive enough argument. How to test value  === function in ramda?",
      "I think there is a fundamental question here we need to answer before we settle on a solution.\r\n\r\nWhat should we do with extra parameters?  Our answer has been to pass them along, but we hadn't considered this case of passing too many with the placeholder displacing them.  Now we have to make a more fundamental decision.  Which of these (at least somewhat reasonable) results should we expect?\"\r\n\r\n```js\r\nconst g = R.curry(function (a, b, c) {return [...arguments]})\r\ng(_, 2, 3, 4)(_, 5, 6)(_, 7, 8, 9)(1, 10)\r\n  //?=> [1, 2, 3]\r\n  //?=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n  //?=> [1, 2, 3, 10]\r\n```\r\n\r\nOr are there other possibilities?  While there is a lot to be said for the first answer, my guess is that would be a breaking change.  The second one seems the most likely extension of how we do things in Ramda, but the third is arguably more correct.",
      "> The second one seems the most likely extension of how we do things in Ramda\r\n\r\nI agree with this, the other cases are not important enough to introduce breaking changes",
      ">Or are there other possibilities? \n\nWhat about `[1,2,3,4]`?\nClearly the author of `g` wants to collect the excess parameters beyond `c`. Ramda's `curry` provides that feature which is fine. \n\nHowever, the position of the parameters in a function is important. (Here a-c). \nShould not have the excess parameters also the right position in the function call: Always following after the `c`?\n\nI mean, your third case seems surprising in that the 10 does not follow the 3 in the function call.\n\nThe second case I like better, but it is still bad programming style to rely on such parameter collecting. Perhaps better not document it.",
      "@kedashoe:\r\n\r\n> The second one seems the most likely extension of how we do things in Ramda\r\n> \r\n> I agree with this, the other cases are not important enough to introduce breaking changes\r\n\r\nThe trouble, of course, is that this is a long-standing bug, probably from when we first separated off the internal `curry2`, `curry3`, ... from the public `curry`, `curryN`.  It's really hard to know how people might have taken advantage of it over the years.  Or maybe that's not even possible.  Hmmm....\r\n\r\n@semmel:\r\n\r\n> What about `[1,2,3,4]`?\r\n\r\nYou're right.  That would be another candidate, and in some sense the inverse of `[1, 2, 3, 10]`.  One says, \"Keep any extra parameters the first time they're collected, and include them in the final call\".  The other says, \"Ignore any extra parameters until you hit the final call, and then include them.  And although several times I'd wished we had done `[1, 2, 3]` -- \"Ignore all extra parameters,\" I do think at this point we're better of with `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]`.  The days of defaulted parameters that don't contribute to the arity seems to make this more reasonable.\r\n\r\nWhen I'm in front a computer rather than my mobile phone, I'll test how this PR's code would handle that scenario.  Or @manyuemeiquqi, feel free to add a test case like this.",
      "> @kedashoe:\r\n> \r\n> > 第二个似乎是我们在 Ramda 中做事方式的最有可能的延伸\r\n> > 我同意这一点，其他情况还不够重要，不足以引入重大更改\r\n> \r\n> 当然，问题在于这是一个长期存在的错误，可能是从我们第一次将内部`curry2`、`curry3`...与公共`curry`、 ...分开时开始的`curryN`。真的很难知道这些年来人们如何利用它。或者也许这根本不可能。嗯……\r\n> \r\n> @semmel:\r\n> \r\n> > 又怎样呢`[1,2,3,4]`？\r\n> \r\n> 你说得对。那将是另一个候选者，并且在某种意义上是 的反面`[1, 2, 3, 10]`。有人说，“在第一次收集任何额外参数时保留它们，并将它们包含在最终调用中”。另一个人说，“忽略任何额外的参数，直到你完成最后的调用，然后将它们包括在内。尽管有好几次我希望我们已经这样做了`[1, 2, 3]`——“忽略所有额外的参数，”我确实认为在这一点上我们是更好的是 with `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]`。默认参数对数量没有贡献的日子似乎使这更合理。\r\n> \r\n> 当我面对电脑而不是手机时，我将测试此 PR 的代码如何处理该场景。或者@manyuemeiquqi，请随意添加这样的测试用例。\r\n\r\nWell, i update pr with the expect of `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]`. The thought of modify code of currN which i update is to satisify all placeholder.",
      "ty @manyuemeiquqi . I'll plan to release 0.29.1 at some point next week"
    ],
    "commit_messages": [
      "fix: _curryN receive enough args (#3410)\n\n* fix: _curryN should not call curried function until all arguments are received and no placeholders are passed in"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79a38dfb6b84f24255cd",
    "number": 3407,
    "body": "I add a function insertUntil, it will be\r\nconst gteTwo = x => x >= 2;\r\nR.insertUntil(gteTwo,2, [1,3,3]); //=> [1, 2, 3, 3]\r\n\r\nI hope this function to implement the bubble sorting",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "@cieldon32 ty for the issue and PR. I would say this is a bit too specific for me and I can't remember this function being requested before. Maybe a better fit (or maybe it already exists) for one of the ramda supplemental libs?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79a48dfb6b84f24255ce",
    "number": 3405,
    "body": "I add a function insertUntil, it will be \r\n const gteTwo = x => x >= 2;\r\nR.insertUntil(gteTwo,2, [1,3,3]); //=> [1, 2, 3, 3]\r\n\r\nI hope this function to implement the bubble sorting",
    "head_branch": "feat-3404",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79a58dfb6b84f24255cf",
    "number": 3402,
    "body": "Closes https://github.com/ramda/ramda/issues/3400\r\n\r\nThis was a strange thing to have in the README in the first place and had become link rot. Can add to the wiki as needed.",
    "head_branch": "readme-bit-remove-broken-link",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "remove broken link to bitsrc in readme (#3402)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79a58dfb6b84f24255d0",
    "number": 3401,
    "body": "Close #3400 \r\n\r\nIn the README, there is a description for \"Bit\" that includes a link to bit.src. However, this link is currently broken and unable to resolve the URL. It should be updated to point to bit.cloud.\r\n\r\n## Related links\r\n- https://twitter.com/bitdev_/status/1504155770362945540",
    "head_branch": "3400__fix-broken-link-in-readme",
    "is_a_fork": true,
    "comments": [
      "I would vote to move this to the wiki or something, seems an odd thing to have in the main README",
      "I would welcome this PR being closed if the maintainers (and the community) decide that would be preferable. 🚀",
      "Thanks again @sudame for bringing this to our attention. Issue closed via https://github.com/ramda/ramda/pull/3402"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79a68dfb6b84f24255d1",
    "number": 3399,
    "body": "Currently tree shaking doesn't work, because es/package.json doesn't have \"sideEffects\" flag in it\r\n\r\nThis PR fixes the problem\r\n\r\n\r\n**Before 👎:**\r\n![image](https://github.com/ramda/ramda/assets/69215292/38d71aea-a3bd-4175-ac1c-fc580a931f70)\r\n\r\n\r\n**After 👍:**\r\n![image](https://github.com/ramda/ramda/assets/69215292/f9e12c83-e080-43bc-9fa0-df79a4711aef)\r\n",
    "head_branch": "fix/es-side-effects",
    "is_a_fork": true,
    "comments": [
      "Oh what a cool fix to finally solve the problems with the bundle",
      "I'm curious why es/package.json needs it as we [already have it](https://github.com/ramda/ramda/blob/165d2ae662e6ce31cb4a56e22bbc8ee06eb32bcf/package.json#L40) in the top level package.json. Could you help me minimally reproduce this? What bundler are you using?",
      "We are using webpack 5.x.x. For some reason it takes into account the `es/package.json` file and adding `\"sideEffects\": false` to it changes webpack's behavior.\r\n\r\nAfter deeper investigation I noticed that it doesn't actually add all ramda function to the bundle. However tree-shaking works wrong when the app consists of multiple chunks, and each chunk imports different ramda functions. Without the `sideEffects` flag webpack creates single chunk with all imported ramda functions, and this chunk is imported in all other chunks. With `sideEffects: false` webpack works correctly (each chunk has ramda functions that are imported inside the chuink)\r\n\r\nHere is a repo where you can reproduce the issue:\r\nhttps://github.com/laboskin/ramda-tree-shaking-test\r\n\r\nBuild it once (`npm run build`), then add `sideEffects: false` to `node_modules/ramda/es/package.json` and build it again. You will see the difference in reports of `WebpackBundleAnalyzer` and in output .js files\r\n\r\nI also committed 2 report files (`report_default.html` and `report_with_sideEffects_false.html`) for convinience.\r\n\r\n![image](https://github.com/ramda/ramda/assets/69215292/19fc9a0e-9522-4798-b2ab-bbaedc8f09d7)\r\n\r\n![image](https://github.com/ramda/ramda/assets/69215292/f6196855-eb4d-4509-9526-254461ec2635)\r\n\r\n\r\n",
      "Brilliant, thank you @laboskin .\r\n\r\nI was able to reproduce locally. It looks to me like we also get the correct bundle if we remove es/package.json altogether, yes? But that probably doesn't matter for now as we still need {\"type\": \"module\"} somewhere.\r\n\r\nPrevious related PRs:\r\n\r\nhttps://github.com/ramda/ramda/pull/2999\r\nhttps://github.com/ramda/ramda/pull/3382\r\n\r\nI will leave open for a bit to let others comment but this looks good to me.\r\n\r\n",
      "@kedashoe I am not sure about removing es/package.json completely. I believe there was a purpose for adding it and if we remove it, it may cause problems for some esm or non-esm dependents. Adding `sideEffects` flag seems like a safer option",
      "> @kedashoe I am not sure about removing es/package.json completely. I believe there was a purpose for adding it and if we remove it, it may cause problems for some esm or non-esm dependents. Adding `sideEffects` flag seems like a safer option\r\n\r\nAgreed"
    ],
    "commit_messages": [
      "fix: add sideEffects flag for es package.json (#3399)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79a78dfb6b84f24255d2",
    "number": 3398,
    "body": "Fixes R.curry doc, as discussed here:\r\nhttps://github.com/ramda/ramda.github.io/issues/282",
    "head_branch": "fix/modify-curry-doc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix: modify curry doc (#3398)\n\n* fix: modify curry doc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79a88dfb6b84f24255d3",
    "number": 3394,
    "body": "fix [issue 3393](https://github.com/ramda/ramda/issues/3393)",
    "head_branch": "fix/swap",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix: make swap work when swapped items are arrays (#3394)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79a98dfb6b84f24255d4",
    "number": 3392,
    "body": "See https://github.com/ramda/ramda/issues/3369#issuecomment-1641098850",
    "head_branch": "revert-prop-and-path-eq",
    "is_a_fork": true,
    "comments": [
      "Anyone can give this a quick look?",
      "@Harris-Miller what are your thoughts on this? Shall we revert?",
      "@kedashoe I'm voting **NO**. See here: https://github.com/ramda/ramda/pull/2938#issuecomment-1676049854",
      "Closing, for previous argument order we can add `eqProp` in the future"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79aa8dfb6b84f24255d5",
    "number": 3391,
    "body": "@Patriksafar [pointed out](https://github.com/ramda/types/issues/57) that `R.type(async () => {})` returns `'AsyncFunction'`. This MR simply adds this as one of the examples in the block comments for `R.type`. An [MR](https://github.com/ramda/types/pull/58) for the function type adding this as a possible return value has also been made",
    "head_branch": "documentation-type-support-asyncfunction",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add AsyncFunction example (#3391)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79ab8dfb6b84f24255d6",
    "number": 3389,
    "body": "Changes made:\r\n1. Renamed `_concat` to `concat` for better clarity.\r\n2. Utilized default function parameters to set `array1` and `array2` to empty arrays by default.\r\n3. Used the spread operator (`...`) to concatenate arrays for a more concise and modern approach.\r\n4. Renamed `_arity` to `arity` for improved clarity.\r\n5. Replaced the `switch` statement with a simple `if` condition to validate the argument `n`.\r\n6. Used rest parameters (`...args`) to capture the arguments in the curried function.\r\n7. Replaced `apply` with `call` for invoking the function to avoid the unnecessary use of `arguments`.",
    "head_branch": "main",
    "is_a_fork": true,
    "comments": [
      "Hi @Lokeshsri11 , thank you for the PR. We are holding off on modernizing ramda until after 1.0, so I will close this for now."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79ac8dfb6b84f24255d7",
    "number": 3388,
    "body": "Ramda optimisation.\r\nThis is the quickest way to determine that an argument is or is not a placeholder.\r\nThere is no faster method.\r\n\r\nPR also solves the very rare problem where someone could have an object in the app with the same key as a placeholder.",
    "head_branch": "optimize",
    "is_a_fork": true,
    "comments": [
      ":+1: this looks good to me. Will leave open for a bit, would like at least one other to weigh in here",
      "Will `===` checking affect cross-window checking? : https://github.com/ramda/ramda/issues/2533",
      "> Will `===` checking affect cross-window checking? : https://github.com/ramda/ramda/issues/2533\n\nLooks like it would finally allow  WindowProxy arguments for all curried Ramda functions.\nIt might actually be the solution I was missing in #2533.\nHave to do some tests though to confirm.",
      "This update should make no difference on the Typescript end of things either. The current definition we have is this\r\n```typescript\r\nimport { A } from 'ts-toolbelt';\r\n\r\nexport type Placeholder = A.x & { '@@functional/placeholder': true };\r\n```\r\n\r\n~~I don't know if the `x: Math.random()` came first and the `A.x` was put in to support that, or the other way around. Regardless, I never understood the point of the `A.x &`, as I could not find any value added to the typings for it.~~\r\n\r\n~~See playground example: https://tsplay.dev/Wyjoxw~~\r\n\r\n@CrossEye 's comment below made me re-visit this comment and I realized I made a mistake. The definition for `Placeholder` above, though has `A.x`, actually has nothing to do with the `{ x: Math.random() }` part that is being removed by this MR, it's just a coincidence.\r\n\r\nThe `A.x` part in the type definition is there to represent an arbitrary unique symbol so that the object literal `{ '@@functional/placeholder': true }` isn't accepted. I don't know what I was thinking before about the `A.x` thing not making a difference. It does, see: https://tsplay.dev/wXgL9W\r\n\r\nEither way, this change still doesn't affect the Typescript definition, so no problem from my end.",
      "Note that that existing behavior is there for a reason.  This doesn't mean it's not time to change it, but we should also understand what it's giving up.  I haven't found the relevant discussions yet, but the below should be pretty close:\r\n\r\nWhen we wanted to add a placeholder for obvious reasons in partial application, we didn't want to go down the route that lodash had, using the library itself as the placeholder.  It was an obvious thing to do with Underscore and lodash, where the library was usually exposed using the name `_`.  But it didn't make sense to pass Ramda itself as the placeholder.  In fact, we wanted to go in the opposite direction.  \r\n\r\nWe created a version that was meant to allow for interoperability with other libraries.  The thought was that if users passed any library's placeholder, it should just work.  To make that possible, we treated the placeholder as a protocol, simply used an obscure property, modeled after one for [transducers][tr] and after the language's [iteration prototcols][ip].\r\n\r\nIt was a good idea, I still believe.  However, AFAIK, no one else ever followed this lead.  So I guess it's time to stop waiting for that, and gain the optimization.  Has anyone actually performed benchmarks to see what's gained?\r\n\r\nSo, from me, a reluctant 👍🏼 .\r\n\r\nLet's not forget -- as demonstrated by the need to change a test case -- that this is a breaking change.\r\n\r\n\r\n\r\n\r\n  [ip]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\r\n  [tr]: https://github.com/cognitect-labs/transducers-js?tab=readme-ov-file#transformer-protocol",
      "Thank you @CrossEye for explaining the design of the Ramda placeholder. I had no idea 😮  \r\n\r\nThe idea to *\"allow for interoperability with other libraries\"* is fundamental to Ramda: E.g. you can use any reasonable monad library with Ramda, as it will discover `map` or `fantasy-land/map` (as specified in the Fantasyland protocol) and treat that thing as functor.\r\n\r\nSupporting \"entities\" via *property protocol* is a nice idea:\r\n- It removes the need to implement that entity (placeholder, algebraic data type) in Ramda itself, and\r\n- gives the user the liberty to use an implementation of his own choice.\r\n\r\nDealing with the messy browser DOM in my daily job, I've always struggled processing [property access limited `WindowProxy`](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy#cross-origin_script_api_access) with Ramda. Since `isPlaceholder()` permeates nearly every Ramda function, I always got an \"access denied\" error.  \r\n\r\nPerhaps there will be a more `WindowProxy`-friendly way to annotate a thing as placeholder. Ramda could then support that  \"protocol\" …",
      "@semmel:\r\n\r\n> Dealing with the messy browser DOM in my daily job, I've always struggled processing [property access limited WindowProxy](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy#cross-origin_script_api_access) with Ramda. Since isPlaceholder() permeates nearly every Ramda function, I always got an \"access denied\" error.\r\n\r\nCould you describe a little more what happens here?  I'd love to see if we can fix that.  We need to move beyond our ES3/ES5 implementation, and when we do, would `Symbol.for`? work better?"
    ],
    "commit_messages": [
      "perf: use === for placeholder test (#3388)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79ad8dfb6b84f24255d8",
    "number": 3382,
    "body": "Fixes `ModuleFederationPlugin` versioning for shared packages, as discussed here:\r\nhttps://github.com/webpack/webpack/issues/17188",
    "head_branch": "version-exports",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "version es dist folder (#3382)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79ae8dfb6b84f24255d9",
    "number": 3376,
    "body": "see [#3340](https://github.com/ramda/ramda/issues/3340)",
    "head_branch": "empty-path-modify-path",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "ramda#3340: support empty path in modifyPath (#3376)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79af8dfb6b84f24255da",
    "number": 3374,
    "body": "Sync with #2938 ",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "ty for the PR @MoyuScript . The typescript effort is now taking place here: https://github.com/ramda/types. Would you mind submitting your PR to that repo?",
      "> ty for the PR @MoyuScript . The typescript effort is now taking place here: https://github.com/ramda/types. Would you mind submitting your PR to that repo?\r\n\r\nok"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79b08dfb6b84f24255db",
    "number": 3373,
    "body": "Some references to R.propEq weren't updated in the 0.29 update",
    "head_branch": "fix-doc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "update docs for propEq (#3373)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79b18dfb6b84f24255dc",
    "number": 3370,
    "body": "As pointed out in https://github.com/ramda/ramda/issues/3364, V8 cares if you instantiate an Array with a known length is far faster to fill than to start with an empty array\r\n\r\nThis MR updates the following areas of `ramda` to do exactly that\r\n\r\n* _clone :: https://jsperf.app/jopaqu - seeing a ~10% gain\r\n* intersperse :: https://jsperf.app/dibehu - ~40%\r\n* mapAccum :: https://jsperf.app/gozalu - 2% (small)\r\n* mapAccumRight, same as ^^\r\n* range :: https://jsperf.app/yaxihu - ~45%\r\n* scan :: https://jsperf.app/tokefo - ~50%\r\n* times :: https://jsperf.app/matoqu - ~50% gain!\r\n* xprod :: https://jsperf.app/cezeko - ~75%\r\n* zip :: https://jsperf.app/foxowi - seeing a ~15% gain\r\n* zipWith :: https://jsperf.app/yasibi - ~ 20%",
    "head_branch": "known-array-lengths",
    "is_a_fork": true,
    "comments": [
      "These seem like some useful improvements, ramda is in dire need of performance. Maybe sync with master and declare it ready for review?",
      "> These seem like some useful improvements, ramda is in dire need of performance. Maybe sync with master and declare it ready for review?\r\n\r\nty for the ping on this one @Berndy , I will try to review #3417 in the next day or two",
      "@kedashoe made the updates you requested",
      "@kedashoe ~~I added an optimization for arrays in `_clone`, but that broke unit tests so I reverted it. Will revisit that in another MR. Need re-approval because of the update~~ Actually, that wasn't it. Has something to do with array length differences because I'm creating partial arrays in some places, will have to track it down",
      "@kedashoe all good again, read for re-approval"
    ],
    "commit_messages": [
      "Perf: Update known array lengths (#3370)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79b28dfb6b84f24255dd",
    "number": 3368,
    "body": "See #3367 for details.",
    "head_branch": "swap-doc-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix for #3367: Documentation errors in R.swap examples (#3368)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79b38dfb6b84f24255de",
    "number": 3366,
    "body": null,
    "head_branch": "update-license-year",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "update license year (#3366)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79b38dfb6b84f24255df",
    "number": 3360,
    "body": "### Motivation\r\n\r\n- make Ramda work better with monad types provided by libraries like [Crocks](https://crocks.dev), [Sanctuary](https://github.com/sanctuary-js/sanctuary) and [fp/ts](https://gcanti.github.io/fp-ts/)\r\n- #3337 , #3021 , #2235\r\n\r\n### Changes to the implementations\r\n\r\nThis changes the way `sequence` and `traverse`'s implementations delegate to the Traversable's `.traverse` (i.e. `[\"fantasy-land/traverse\"]`) if the data type is not `Array` but an Traversable `t`:\r\n- `traverse` expects the Traversable `t` to conform to [Fantasy Land `traverse`](https://github.com/fantasyland/fantasy-land#fantasy-landtraverse-method), thus it no longer works with \"old-style\" Traversables like `ramda/test/shared/Id.js` (**Breaking change**) \r\n- `sequence` dispatches to `f.['fantasy-land/traverse'](F, x => x)` (or `f.traverse(F, x => x)`), thus also no longer works with \"old-style\" Traversables.\r\n\r\n### Changes to the interface\r\n\r\n`traverse` and `sequence` are extended to allow a [Type Representative](https://github.com/fantasyland/fantasy-land/tree/v4.0.1#type-representatives) `F` of the inner data type (the Applicative) as first argument.  Here it can be just a plain object with a single property `\"fantasy-land/of\"`.\r\nThus `traverse` and `sequence` now have the same signature as their [counterparts in Sanctuary](https://github.com/sanctuary-js/sanctuary#traverse--applicativeftraversablet--typerepf---a-fb---ta---ftb) and their [counterparts in Crocks](https://crocks.dev/docs/functions/pointfree-functions.html).",
    "head_branch": "FL-spec-traverse",
    "is_a_fork": true,
    "comments": [
      "@kedashoe Thanks for the kind review! \r\nI tried to address your points with the latest commits.",
      "> @kedashoe Thanks for the kind review! I tried to address your points with the latest commits.\r\n\r\nty, looks good! I'll leave open for another day or two to allow others to comment before merging",
      "Can we release a new version? There are so many changes and bugfixes merged into master since last release. @kedashoe @CrossEye ",
      "> Can we release a new version? There are so many changes and bugfixes merged into master since last release. @kedashoe @CrossEye\r\n\r\nBeen a while since I've done one. I'll give it a try this weekend."
    ],
    "commit_messages": [
      "Make traverse and sequence Fantasy-Land compliant (#3360)\n\n* change the sequence and traverse implementations to operate on FantasyLand-standard applicatives"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79b48dfb6b84f24255e0",
    "number": 3357,
    "body": "Hello and thank you for this excellent package.\r\n\r\nI'm struggling with imports because nodejs don't let me import a source file with the \".js\" extension.\r\n\r\nBut first, it seems that the package.json of version 0.28.0 (on npm) has no exports that allows per-module imports:\r\n```json\r\n \"exports\": {\r\n    \".\": {\r\n      \"require\": \"./src/index.js\",\r\n      \"import\": \"./es/index.js\",\r\n      \"default\": \"./src/index.js\"\r\n    },\r\n    \"./es/\": \"./es/\",\r\n    \"./src/\": \"./src/\",\r\n    \"./dist/\": \"./dist/\"\r\n  },\r\n```\r\n\r\nSo when importing `ramda/src/pipe` it throws an error:\r\n```\r\nError [ERR_PACKAGE_PATH_NOT_EXPORTED]: Package subpath './src/pipe' is not defined by \"exports\" in\r\n```\r\n\r\nOn the other hand, the master branch has differents `exports`, which seems to accept imports like `ramda/src/pipe`:\r\n\r\n```json\r\n  \"exports\": {\r\n    \".\": {\r\n      \"require\": \"./src/index.js\",\r\n      \"import\": \"./es/index.js\",\r\n      \"default\": \"./src/index.js\"\r\n    },\r\n    \"./es/*\": \"./es/*.js\",\r\n    \"./src/*\": \"./src/*.js\",\r\n    \"./dist/*\": \"./dist/*.js\",\r\n    \"./es/\": \"./es/\",\r\n    \"./src/\": \"./src/\",\r\n    \"./dist/\": \"./dist/\"\r\n  },\r\n```\r\nImporting `ramda/src/pipe` works great but it's necessary to install the master branch version of the package.\r\n\r\nBut it don't let me import modules with js extension (ie.  `ramda/src/pipe.js`)\r\nI get an error:\r\n```\r\nError [ERR_PACKAGE_PATH_NOT_EXPORTED]: Package subpath './src/pipe.js' is not defined by \"exports\" in\r\n```\r\n\r\nI need to import es modules in two ways:\r\n- in a browser (via a CDN that looks at `exports` to determine which file to serve)\r\n- in a node server (which refuse to import the modules because there is no match in `exports` for the specifier `ramda/src/pipe.js`  )\r\n\r\nSo I propose this change to let users decide if they import files with or without the `.js` extension:\r\n```json\r\n\"exports\": {\r\n    \".\": {\r\n      \"require\": \"./src/index.js\",\r\n      \"import\": \"./es/index.js\",\r\n      \"default\": \"./src/index.js\"\r\n    },\r\n    \"./es/*\": \"./es/*\",\r\n    \"./src/*\": \"./src/*\",\r\n    \"./dist/*\": \"./dist/*\",\r\n    \"./es/\": \"./es/\",\r\n    \"./src/\": \"./src/\",\r\n    \"./dist/\": \"./dist/\"\r\n  },\r\n```\r\n\r\n",
    "head_branch": "exports-source-files",
    "is_a_fork": true,
    "comments": [
      "Hi @Gastonite , thank you for the PR. I've pulled down your branch to test locally but I'm not sure precisely what you are proposing/expecting. What version of node are you using? And could you provide some code samples of what is and isn't working for you now and what you expect to work/not work after this PR?\r\n\r\nSomething like\r\n```ts\r\nimport { add } from 'ramda/es/add'\r\n```\r\n?\r\n\r\n Please test with the version we just released, v0.29.0 if you could as well.",
      "I wrote a module that I wanted to use from both nodejs (19.7.0) and a browser (using an importmap generated with `@jspm/generator`)\r\n\r\nThis module imports some ramda modules individually so as not to download the whole library when imported from a browser.\r\n\r\n\r\n# With ramda@0.28.0\r\n## Generating an importmap to be used by the browser\r\n\r\n- `@jspm/generator` correctly resolved the `ramda/src/map.js` and `ramda/es/map.js` specifiers but not the `ramda/src/map` and `ramda/es/map` specifiers:\r\n\r\nWhen I was running this script:\r\n```js\r\nimport { Generator } from '@jspm/generator';\r\n\r\nconst generator = new Generator({\r\n  mapUrl: import.meta.url,\r\n  defaultProvider: 'jspm.io',\r\n  env: ['production', 'browser', 'module'],\r\n});\r\n\r\nawait generator.install('ramda@0.28.0/src/map.js')\r\n\r\nconsole.log(JSON.stringify(generator.getMap(), null, 2));\r\n```\r\n\r\nThe `map.js` module is correctly resolved by `@jspm/generator` and the following importmap is produced:\r\n```json\r\n{\r\n  \"imports\": {\r\n    \"ramda/src/map.js\": \"https://ga.jspm.io/npm:ramda@0.28.0/src/map.js\"\r\n  }\r\n}\r\n```\r\n\r\nBut, it didn't work with subpaths like `ramda/src/*` or `ramda/es/*`:\r\n```js\r\nawait generator.install('ramda@0.28.0/es/map');\r\n```\r\nIt throwed an error because it searched in \"exports\" and didn't find any export that match this pattern:\r\n```\r\nJspmError: Module not found: https://ga.jspm.io/npm:ramda@0.28.0/es/map imported from...\r\n```\r\n\r\nSo as I want to share this module between browser and nodejs, my only solution was to use path `ramda/src/map.js`\r\n\r\n\r\n## Using the module from nodejs\r\n\r\nAnd on the other hand, I wanted to use this same module from a nodejs script, but whatever type of subpath I used in my imports (`./src/map`, `./src/map.js` , `./es/map`, or `./es/map.js`), I always got the following error:\r\n```\r\nError [ERR_PACKAGE_PATH_NOT_EXPORTED]: Package subpath './src/map.js' is not defined by \"exports\"...\r\n```\r\n\r\n\r\n\r\n\r\n# With ramda@0.29.0\r\n\r\nEverything seems to be working now =)\r\n\r\nI can now use and generate my importmap for the browser with:\r\n```js\r\nawait generator.install('ramda@0.29.0/es/map');\r\n```\r\nand therefore import the `map` module with the `ramda/es/map` import specifier\r\n\r\nMy imports are also correctly resolved in nodejs, and so my module can now be shared between the 2.\r\n\r\nThank you\r\n",
      "Great! And thank you for the in depth followup"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79b58dfb6b84f24255e1",
    "number": 3338,
    "body": "### What happened？\nThere are 1 security vulnerabilities found in handlebars 4.1.2\n- [CVE-2019-19919](https://www.oscs1024.com/hd/CVE-2019-19919)\n\n\n### What did I do？\nUpgrade handlebars from 4.1.2 to 4.7.7 for vulnerability fix\n\n### What did you expect to happen？\nIdeally, no insecure libs should be used.\n\n### The specification of the pull request\n[PR Specification](https://www.oscs1024.com/docs/pr-specification/) from OSCS",
    "head_branch": "oscs_fix_cdupb40au51qdhegol0g",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79b68dfb6b84f24255e2",
    "number": 3333,
    "body": "This PR accomplishes two tasks related to #3273:\r\n1. Update type test for `and` type\r\n2. Write type tests for the following types:\r\n  - `identity`\r\n  - `inc`\r\n  - `includes`\r\n  - `indexOf`\r\n  - `init`\r\n  - `test`\r\n  - `times`\r\n  - `type`\r\n  - `values`\r\n  - `without`",
    "head_branch": "ts",
    "is_a_fork": true,
    "comments": [
      "Thank you for the work here @jgsheppa , will close this as types have moved here: https://github.com/ramda/types"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79b78dfb6b84f24255e3",
    "number": 3332,
    "body": "The current implementation of the `toString` method can produce some undesirable results if you are wanting to simply ensure that a value is a string. \r\n\r\nTo solve this add `coerceString` method, which coerces a value to a string. In the Nil case, return empty string. \r\n\r\n\r\n[ISSUE REF](https://github.com/ramda/ramda/issues/3331#issue-1431703810)",
    "head_branch": "add-coerce-string",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79b88dfb6b84f24255e4",
    "number": 3328,
    "body": "Added type support for curried function and added tests",
    "head_branch": "ts-apply",
    "is_a_fork": true,
    "comments": [
      "Closing. Will re-apply changes in new types repo as described here: https://github.com/ramda/ramda/discussions/3329"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79b98dfb6b84f24255e5",
    "number": 3327,
    "body": "This one is very straight forward",
    "head_branch": "ts-append",
    "is_a_fork": true,
    "comments": [
      "Closing. Will re-apply changes in new types repo as described here: https://github.com/ramda/ramda/discussions/3329"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79ba8dfb6b84f24255e6",
    "number": 3326,
    "body": "Doing this so there is normalization for all the new `.d.ts` files along with the `.ts` test files via eslint. This MR looks huge, but it's mostly just `eslint --fix` And a few manually changes. Every change in `.d.ts` and `.ts` files are just lint fixes\r\n\r\nThe important details are:\r\n\r\n#### `.editorconfig`\r\n* `[*.js]` => `[*.{js,ts}]`\r\n\r\n#### `package.json`\r\n* bumped `eslint` and `eslint-plugin-import` to latest (needed to add `@typescript-eslint` packages)\r\n* added `@typescript-eslint/eslint-plugin`, `@typescript-eslint/parser`, and `typescript`\r\n* npm script `lint` => added\r\n\r\n#### `.eslintrc`\r\n* added `\"overrides\"` for `.ts` files\r\n* set typescript version of rules already made for js files",
    "head_branch": "ts-eslint",
    "is_a_fork": true,
    "comments": [
      "Closing. Will re-apply changes in new types repo as described here: https://github.com/ramda/ramda/discussions/3329"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79bb8dfb6b84f24255e7",
    "number": 3325,
    "body": "Added missing curry type and handle \"dispatches to any method\" case.\r\n\r\nAdded tests. I kept most of the ones that exist already, specifically the `expectError` cases. Let me know if you want me to make those test cases in my other MRs",
    "head_branch": "ts-any",
    "is_a_fork": true,
    "comments": [
      "Closing. Will re-apply changes in new types repo as described here: https://github.com/ramda/ramda/discussions/3329"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79bc8dfb6b84f24255e8",
    "number": 3324,
    "body": "Added missing curry type and added tests. This one was very simply",
    "head_branch": "ts-andThen",
    "is_a_fork": true,
    "comments": [
      "Closing. Will re-apply changes in new types repo as described here: https://github.com/ramda/ramda/discussions/3329"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79bd8dfb6b84f24255e9",
    "number": 3323,
    "body": "I added typings for `and(__, b)(a)` variety\r\n\r\nAlso redid the tests for it. They were failing. Let me know if you want to be more exhaustive with the tests for this one and I'll add more (probably not needed TBH, the typing for this function is very simple)",
    "head_branch": "ts-add",
    "is_a_fork": true,
    "comments": [
      "Closing. Will re-apply changes in new types repo as described here: https://github.com/ramda/ramda/discussions/3329"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79be8dfb6b84f24255ea",
    "number": 3322,
    "body": "Adding the missing curried type and added tests",
    "head_branch": "ts-aperture",
    "is_a_fork": true,
    "comments": [
      "Closing. Will re-apply changes in new types repo as described here: https://github.com/ramda/ramda/discussions/3329"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79bf8dfb6b84f24255eb",
    "number": 3321,
    "body": "Corrected the typings to handle placeholders and the \"Dispatches to the all method of the second argument, if present.\" case",
    "head_branch": "ts-all",
    "is_a_fork": true,
    "comments": [
      "Closing. Will re-apply changes in new types repo as described here: https://github.com/ramda/ramda/discussions/3329"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79c08dfb6b84f24255ec",
    "number": 3320,
    "body": "Added tests as well",
    "head_branch": "ts-adjust",
    "is_a_fork": true,
    "comments": [
      "Closing. Will re-apply changes in new types repo as described here: https://github.com/ramda/ramda/discussions/3329"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79c18dfb6b84f24255ed",
    "number": 3319,
    "body": "Adding a better typing option when all the keys are known on the object",
    "head_branch": "ts-pickAll",
    "is_a_fork": true,
    "comments": [
      "Closing. Will re-apply changes in new types repo as described here: https://github.com/ramda/ramda/discussions/3329"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79c28dfb6b84f24255ee",
    "number": 3318,
    "body": "Making it like how `lensPath` already is, with some improvements",
    "head_branch": "ts-path",
    "is_a_fork": true,
    "comments": [
      "Working on updating this MR to include all other `path` functions with better overall typings and tests. Will unmark it as `Draft:` when I'm done",
      "Closing. Will re-apply changes in new types repo as described here: https://github.com/ramda/ramda/discussions/3329"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79c38dfb6b84f24255ef",
    "number": 3317,
    "body": "Also added tests",
    "head_branch": "ts-chain",
    "is_a_fork": true,
    "comments": [
      "Closing. Will re-apply changes in new types repo as described here: https://github.com/ramda/ramda/discussions/3329"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79c48dfb6b84f24255f0",
    "number": 3316,
    "body": "Updating types for Assoc for better return types when the type for value is the same for the type of the key on the object\r\n\r\nAlso added tests",
    "head_branch": "ts-assoc",
    "is_a_fork": true,
    "comments": [
      "Closing. Will re-apply changes in new types repo as described here: https://github.com/ramda/ramda/discussions/3329"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79c58dfb6b84f24255f1",
    "number": 3315,
    "body": "Exhaustive types for Modify, including all curried and __ varieties",
    "head_branch": "ts-modify",
    "is_a_fork": true,
    "comments": [
      "Per request from https://github.com/ramda/ramda/issues/3287",
      "Thanks @Harris-Miller , I'll try to look these over asap",
      "Closing. Will re-apply changes in new types repo as described here: https://github.com/ramda/ramda/discussions/3329"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79c68dfb6b84f24255f2",
    "number": 3314,
    "body": "Added some very thorough typings for Modify\r\n\r\nSee [typescript playground](https://www.typescriptlang.org/play?jsx=0#code/JYWwDg9gTgLgBAbzgQQDRwGJwL5wGZQQhwDkMAzgLQwQQA2ARgKZ0wkDcAsAFA9MAekWHBgBPMEzgAFOgEMAxkwAW9ACZMocALwoAdPzgAyRKQACpvAFcAdvJjAI12XQD0YOYpV11UEgC4RKEtJbC5ebnlHcngAfRiAmQVlNQ1tRB44MwsbOwcnV3ckrx9-QOCeUJ4eMQlpCGBreB0kfgDrSxBmKHY4UTaOrpwwnhcXOGA8EXFJCEmwQjA4KCYQWQbyOHJZEEkYJUJLAHMlfGt0ZZhLKGsp2vIVS28llbWbgBU4AAoAdyUNSW+knksmsAEoRmNPvMIGB0HgznAIAwAFag7QAPjgbx46nkcmW+By9kccBAEFUE1EAB43ugANJwAQwJjWVQbADWTFEsyx6KhCwCdLh1gCn1kATeAG06QBdNFaTFS2XoJHIiWgiVhUZfOLClUo+WY-kww1YnFMPGyAlWWzEm5kil4am0uAMpkstlwTncyZvPlxBIeZLeDTC0XirHSuUYyPKxEo9Wi6FgQWmt7DbjaljkJjoADyIGAMBp9MxxgAShboKoqULpOiIV9k3r46iYwWiyXXWW4JXIlAa3WpA3uLj8ZIbbkSQ7KV23fxmayOVyeS7h8aU66w18I0rowrpPq1ViNXAO8WXXSe33q7X0MOtZDdacj6aN6bz3Pr1WB3f6+bLWtIk8lJclZ0vRkFw9ZcfSxe9-XiaQg2KUNTnDCUo1NKQj0TJsBVdD9CwvUsjF7H9B3gx88JhdBn1VN94UIztL2-fsKP-UcLXHQlbRAmcnTnSDF09b1V3gjdBVoxDEk8FIoBwk9RXhdDY33TEpCY4ju1Im9fyHdEqM+Z86INGMN2FNM4BBVQdRiKTXzM5MGLBGNsU4wCJ2A6cwIEiD3SXL0V19cSAyQoo5KkgAmQNwpDeTW1wjBdAAYSuKBqQkrc0J3DDZSwzSvx08i-2HAzG3M0433o1yAO4yc7VAx1qXnYSNmiKAGkOe90GQPlk0k7KxQCZB8oCGkhOgsi2L-Xq+VVdV2yIwqK2K-TDOfRjHIWByDw+azbIsraTTM6rdtqq1PN47ymsE-yRKCuD6yM6TkIiwbd0wmMNICJLUqgdKqUyut5pPRbmJIlbpv0srM0hJyzPhHbFSs1lqLAZyqtMs73Lqrz7R8516QmgLROCp7+oIn6UrSjLlJy1SsIUt4CpYoqofgmHGzwZw6DgBgFHZEQIGeS5rluSQPjwaA4F+FlEWsOhRDgSK4EOFkNGAeQNguzYJHkCZgCYVRyubOATLbA9Pk2g9P1ZyHb3086gKu-Gbr8qCSYev0gakmLZLipnTytkV6b3NNPt29a7LN6PTqNU3reR-bnvs1s33hy3E7NHGdfqviCduj37tg73Qpk4MfCiv2K9QkHmapv6AZ997crUhnXJh7UKqzz44+zsdc7xxrwKJu6YNXPr8LrOmhvb3bMNFOu0yjw7LdNvu9tRlPKqO9GTqxxUncuqdXZH11ieLifnurlD4pnj68tchfMGp-6Mop4GE1B3bO7hhZnKRliFGNl3wIxcpbDeR8eIn2Hr5UeRdx6+knjCVMDcaaA3vq3cOcYl4dwzDwSI1hohwDAAARgSPURoaQWgBEiugPocAADMQwqgRCiPAKApCpAYDzGkfiohPgkH4CQdABgDz8AAFR0JIaQ0EYRCHEM4TEHhfCCbbzEZiSR0iyGgkEcIuRrCFEcJVjofheiRFwA0XAAAyjADq1hDifH4KCdAOj5HsKWJFGIqimrqJjLY+xjjnGuNkeYgxbCiHGK8T4yk5jU46Kcf4uxnUnGgnCUYzxjDvGmLUcZaOCShEWKsQElJzj0keKgJFAALNk2BAi8khN0YU3RxTkkONSeUyJniTF1LiZYpJgSOlQlke4rplTmE5JulIShMB0CFPQO1TqfJmmJIPCU9pwSZGdMUdUmJAlpkNFmaQYRCy2mHGWfo1ZmJ1lBLScM8JBCKmkOiZM2cBzGhzOERcixz4ElWK0dsjhpCsl7OpO8o5hSELxNCfM-p4ipGAqWKQmpoKqTgs+SQKFMdGlhKuZYhFozFFcIwHEXhrz9kzIxd89ATj+idA0KaAF9z2BAA) for how they work",
    "head_branch": "ts",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79c78dfb6b84f24255f3",
    "number": 3305,
    "body": "Adds type support for dates on R.type function\r\n\r\nFixes ramda/types#120 ",
    "head_branch": "ts",
    "is_a_fork": true,
    "comments": [
      "Thank you!"
    ],
    "commit_messages": [
      "Adds type suport for dates on R.type function (#3305)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79c88dfb6b84f24255f4",
    "number": 3302,
    "body": "This PR adds TS tests for the following functions:\r\n- `adjust`\r\n- `all`\r\n- `allPass`\r\n- `always`\r\n- `and`\r\n- `any`\r\n\r\nI also noticed something odd about the return type of the `add` function, in that a `boolean` value is always returned, but the type function returned a union of the two input types, for instance: `and<T, U>(a: T, b: U): T | U;`. Because the return value is always a `boolean`, I thought it made more sense to change the return type: `and<T, U>(a: T, b: U): boolean;`.\r\n\r\nPerhaps I'm misunderstanding the reasoning behind the current type implementation of `add`, but a return type of `boolean` made sense while I was testing the type. I can always change it back to the original type 😃 \r\n\r\nI would like to continue writing more TS tests, and a PR of ~5 tests seemed like a good number, but let me know if a larger PR is preferred. ",
    "head_branch": "ts",
    "is_a_fork": true,
    "comments": [
      "Thanks for the PR @jgsheppa .\r\n\r\nI'm not sure what is going on with those `and` tests but I think the previous type is correct, `T | U`. Ramda's implementation just uses `&&` under the hood.\r\n\r\nI'll try to do a full review at some point this week.",
      "@kedashoe Sounds good! I'll revert the changes to the `and` type and push the changes soon.",
      "Hey @kedashoe, sorry for the delay. I had a crazy week and wasn't able to find some time to revert my changes. Anyhow, should be looking fine now. Let me know if I should update anything!",
      "Thanks @jgsheppa , looks good to me. I'll leave it open for another day or two and then merge."
    ],
    "commit_messages": [
      "Write more TS tests and update type for Add function (#3302)\n\n* write tests for adjust, all, allPass, always, and, any types\r\n\r\nCo-authored-by: jgsheppa <james.sheppard@avisio.ai>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79c98dfb6b84f24255f5",
    "number": 3301,
    "body": "The version 3 of fast-check and more precisely the version 3.1 comes up with something very interesting for libraries such as ramda: it can more likely produce values such as `__proto__` or `toString` which are known sources for CVE.\r\n\r\nOn fast-check side, I'm currently working onto adding an easier tooling making poisoning related issues even simpler to detect with some extra tools being able to say \"hey, it seems that global prototypes changed during the execution of your tests\".",
    "head_branch": "fast-check-3",
    "is_a_fork": true,
    "comments": [
      "Next target will be to leverage fast-check to detect some potential prototype poisoning in the exposed APIs before they turn into CVEs.",
      "@kedashoe I just updated this PR. I believe it can be useful for the project to rely on the latest version of fast-check in order to benefit from all the improvements brought by v3. It includes prototype poisoning related detection which is something that can easily strike projects such as ramda.",
      "<details>\n  <summary>Coverage Summary</summary>\n\n  ```bash\n  \n> ramda@0.30.0 coverage:summary\n> BABEL_ENV=cjs nyc --reporter=text-summary mocha -- --reporter=min --require @babel/register\n\n\u001b[2J\u001b[1;3H\n  1192 passing (911ms)\n\n\n=============================== Coverage summary ===============================\nStatements   : 94.06% ( 2486/2643 )\nBranches     : 85.76% ( 970/1131 )\nFunctions    : 93.28% ( 555/595 )\nLines        : 94.34% ( 2332/2472 )\n================================================================================\n  ```\n\n</details>",
      "NOTE: I'm currently working on a version 4 of fast-check. It should not come with many breaking changes but still always to be closer to the latest release to simplify future bumps.",
      "ty @dubzzz sorry for missing this the first time",
      "No worry, I pinged you back so that it got merged. It was neither critical, nor urgent 😂 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79ca8dfb6b84f24255f6",
    "number": 3294,
    "body": "change \r\n`when returning falsy, keeps the key`\r\nto\r\n`when returning falsy, do not keep the key`",
    "head_branch": "modify-pickBy-test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79cb8dfb6b84f24255f7",
    "number": 3292,
    "body": "Tasks accomplished in this PR:\r\n\r\n1. Created types for `isNotNull` and `dropRepeatsBy` functions.\r\n2. Tested these new types using `tsd` and multiple test cases.",
    "head_branch": "ts",
    "is_a_fork": true,
    "comments": [
      "Merged, thanks @jgsheppa "
    ],
    "commit_messages": [
      "Issue #3287: Create and test types for `isNotNil` and `dropRepeatsBy` functions (#3292)\n\n* create type for isNotNil function\r\n\r\n* create type for dropRepeatsBy function\r\n\r\n* write test cases for dropRepeatsBy type\r\n\r\n* write test cases for and improve isNotNil type\r\n\r\nCo-authored-by: jgsheppa <james.sheppard@avisio.ai>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79cc8dfb6b84f24255f8",
    "number": 3291,
    "body": "Replace two occurrences of \"the the\" with \"the\".",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "@CrossEye I don’t have rights to merge PR so probably you have to do it :)"
    ],
    "commit_messages": [
      "Replace \"the the\" -> \"the\" (#3291)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79cd8dfb6b84f24255f9",
    "number": 3288,
    "body": "The original jsdoc is misleading because splitWhenever was added in 0.28.0 see https://github.com/ramda/ramda/issues/2881",
    "head_branch": "splitWhenever-jsdoc-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79cd8dfb6b84f24255fa",
    "number": 3283,
    "body": "I looked for another test file to add but I think it'd be better to just rewrite tests completely...\r\nI think one test file should be enough to confirm that it works though.\r\nDo note that it's hard to tell whether it works when all tests pass, unfortunately, so if you want to make sure it works you should try adding an incorrect test",
    "head_branch": "feat-typescript-tests",
    "is_a_fork": true,
    "comments": [
      "oh, related to #3273",
      "*maybe* the output could be improved by using the programmatic api but i wouldn't be too hopeful since it seems like what they do for `expectError` is remove diagnostics:\r\nhttps://github.com/SamVerschueren/tsd/blob/106af14cef85530c73b390ddc4a51560c60dfb64/source/lib/compiler.ts#L134-L136",
      "@kedashoe what's this about that last review btw? ([this](https://github.com/ramda/ramda/pull/3283#discussion_r884919659) review)",
      "> @kedashoe what's this about that last review btw? ([this](https://github.com/ramda/ramda/pull/3283#discussion_r884919659) review)\r\n\r\nAre you referring to this comment I made?\r\n\r\n> Ya I'm not sure what to do about this one.. I guess better to cover it even if it is a bit annoying\r\n\r\nI was just saying that I guess I'd prefer to add tests for currying for now (which it looks like you did). But if anyone has a good argument not to I'd be ok with that as well."
    ],
    "commit_messages": [
      "feat: add tsd and one test file (#3283)\n\nfeat: add tsd and one test file"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f79ce8dfb6b84f24255fb",
    "number": 3280,
    "body": "Closes #3274 \r\n\r\nThis PR removes the index.d.ts file, splitting its contents into a type definitions file per source function in a new `/types` directory.\r\n\r\nI've only made two \"changes\":\r\n\r\n- It looks like `ArrayLike` is deprecated? This was only used in the definition of `length`, which I've changed to\r\n\r\n```typescript\r\nexport function length<T extends { length: number }>(list: T): number;\r\n```\r\n\r\n- There was a single random utility type in the main index.d.ts file, `PartialRecord`, which I've moved to the toold.d.ts file.\r\n\r\nI've added a new build script which combines the separate .d.ts files into an index.d.ts file, which is then placed in the /es directory at publish time.",
    "head_branch": "type-file-per-function",
    "is_a_fork": true,
    "comments": [
      "@kedashoe:  It looks like you're putting serious work into this.  Thank you!\r\n\r\nI believe you're the only active committer with the expertise to validate this.  Usually we ask for at least two committers to review changes before we merge them.  But I think here, we may have to depend on you to do them yourself.  (I'm willing to do the merges, but it would likely just be a rubber stamp.)  Do you concur, @customcommander?\r\n\r\nOf course if @hitmands is interested in joining your effort, that would be better still.\r\n\r\n----------\r\n\r\nI've got to admit that as I look at many of those TS types that I still have a hankering to see how far we could get with autogeneration from H-M type signatures.\r\n",
      "@adispring as well. cc @essenmitsosse, @somebody1234.\r\n\r\nBut ya, at this point it doesn't even matter that much. I'm basically just building it locally and verifying 1. my editor can find things, 2. an external compiler can find tings. As the effort continues (and of course before we merge anything back to main) we'll want more confirmation things are working for different setups/idiomatic/etc.\r\n\r\nI'll leave this open for another day or two.",
      "I have no experience with anything related to TypeScript. I'm happy to trust @kedashoe here.",
      "There are some new apis that have no types by now, should we implement their types in this PR, or later?",
      "Thanks for the review @adispring, great stuff! I'll update this PR with the ones that look most obvious to me and make separate issues for the rest.",
      "Ok, PR updated to delete type files for functions that have been removed. Couple other comments addressed.\r\n\r\n I realized that since the final index.d.ts file is not committed, we can't see the output of build-types.js. Here is a sample:\r\n\r\n```typescript\r\n/**\r\n * Applies a function to the value at the given index of an array, returning a\r\n * new copy of the array with the element at the given index replaced with the\r\n * result of the function application.\r\n *\r\n * See also {@link update}\r\n *\r\n * @example\r\n * ```typescript\r\n * R.adjust(1, R.toUpper, ['a', 'b', 'c', 'd']);      //=> ['a', 'B', 'c', 'd']\r\n * R.adjust(-1, R.toUpper, ['a', 'b', 'c', 'd']);     //=> ['a', 'b', 'c', 'D']\r\n * ```\r\n */\r\nexport function adjust<T>(index: number, fn: (a: T) => T, list: readonly T[]): T[];\r\nexport function adjust<T>(index: number, fn: (a: T) => T): (list: readonly T[]) => T[];\r\n\r\n/**\r\n * Returns `true` if all elements of the list match the predicate, `false` if\r\n * there are any that don't.\r\n * \r\n * Dispatches to the `all` method of the second argument, if present.\r\n * \r\n * Acts as a transducer if a transformer is given in list position.\r\n *\r\n * See also {@link any}, {@link none}, {@link transduce}\r\n *\r\n * @example\r\n * ```typescript\r\n * const equals3 = R.equals(3);\r\n * R.all(equals3)([3, 3, 3, 3]); //=> true\r\n * R.all(equals3)([3, 3, 1, 3]); //=> false\r\n * ```\r\n */\r\nexport function all<T>(fn: (a: T) => boolean, list: readonly T[]): boolean;\r\nexport function all<T>(fn: (a: T) => boolean): (list: readonly T[]) => boolean;\r\n```\r\n\r\nSo just getting all the exports from the type files, matching it up with docs from the source files and putting it all together.\r\n\r\nWill leave PR open for another day, if no comments will plan to merge tomorrow night and we can continue on from there.",
      "Right, I forgot @adispring also was working on this.  Thanks for chipping in.\r\n\r\nI'm not following all this very closely, but I will try to keep looking in.  Thanks, folks!"
    ],
    "commit_messages": [
      "split types into separate files (#3280)\n\n* split types into separate files"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f79d08dfb6b84f24255fc",
    "number": 3279,
    "body": "Simple addition a Note.",
    "head_branch": "doc-note",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79d18dfb6b84f24255fd",
    "number": 3277,
    "body": "closes #3275 ",
    "head_branch": "dt-ramda-latest",
    "is_a_fork": true,
    "comments": [
      "closing due to #3278 , will open new PR with latest work from DT"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79d28dfb6b84f24255fe",
    "number": 3276,
    "body": "I found there are many places using the same code like below.\r\n\r\n```js\r\nfunction Just(x) { this.value = x; }\r\nJust.prototype.equals = function(x) {\r\n  return x instanceof Just && R.equals(x.value, this.value);\r\n};\r\n```\r\n\r\nI think we can extract the common part and create a Just | Nothing in shared folder just like `Maybe`.\r\n\r\nTell me your opinion.\r\nThanks!",
    "head_branch": "extract-Just",
    "is_a_fork": true,
    "comments": [
      "> It's definitely worth cleaning up this repetition.\r\n> \r\n> But I wonder if it can be done more simply, using the existing `Maybe` implementation. I haven't tested (and won't be able to for some hours) but couldn't we just (ahem) do\r\n> \r\n> ```js\r\n> var {Just} = require('./shared/Maybe.js');\r\n> ```\r\n> \r\n> ? `Just` is already a property of (and subtype of) `Maybe`. Ideally we should simply be able to use it directly. And if it doesn't work, can we fix `Maybe` so that it does?\r\n\r\n@CrossEye Yes you are right!\r\nI can simply use Maybe.Just and Maybe.Nothing.\r\n\r\nChanged codes.",
      "This looks great and is definitely worth doing.\r\n\r\nMy only question is whether we want \r\n\r\n```js\r\nvar Maybe = require('./shared/Maybe.js');\r\n// ...\r\n    eq(R.difference([new Maybe.Just([42])], [new Maybe.Just([42])]).length, 0);\r\n```\r\n\r\nor \r\n\r\n```js\r\nvar {Just, Nothing} = require('./shared/Maybe.js');\r\n// ...\r\n    eq(R.difference([new Just([42])], [new Just([42])]).length, 0);\r\n```",
      "> This looks great and is definitely worth doing.\r\n> \r\n> My only question is whether we want\r\n> \r\n> ```js\r\n> var Maybe = require('./shared/Maybe.js');\r\n> // ...\r\n>     eq(R.difference([new Maybe.Just([42])], [new Maybe.Just([42])]).length, 0);\r\n> ```\r\n> \r\n> or\r\n> \r\n> ```js\r\n> var {Just, Nothing} = require('./shared/Maybe.js');\r\n> // ...\r\n>     eq(R.difference([new Just([42])], [new Just([42])]).length, 0);\r\n> ```\r\n\r\n@CrossEye \r\nI am okay with both.\r\n\r\nBut if we use \r\n```js\r\nvar {Just, Nothing} = require('./shared/Maybe.js');\r\n```\r\n\r\nwe need to change all \r\n```js\r\nvar Maybe = require('./shared/Maybe.js');\r\n// To\r\nvar {Maybe} = require('./shared/Maybe.js');\r\n```\r\n\r\nIf that is okay, I will do the change.",
      "I don't think that would be necessary.  If I remember correctly, `Maybe` is a constructor function but also a namespace for `Just`, `Nothing`, `of`, etc.  \r\n\r\nBut let's leave it as is for now.  There is some benefit to `Maybe.Just` as it makes the relationship a little clearer.",
      "Any other comments, @ramda/core ?",
      "Nope. Looks fine by me.\n\nOn Wed, 27 Apr 2022 at 13:30, Scott Sauyet ***@***.***> wrote:\n\n> Any other comments, @ramda/core <https://github.com/orgs/ramda/teams/core>\n> ?\n>\n> —\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ramda/ramda/pull/3276#issuecomment-1110942646>, or\n> unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAFGP5Z27SD73CKZMQP7XCLVHEXMZANCNFSM5UINOBEQ>\n> .\n> You are receiving this because you are on a team that was mentioned.Message\n> ID: ***@***.***>\n>\n\n\n-- \n*Julien Gonzalez*\n",
      "Sorry you are right, I will do the commit",
      "I made the changes, happy to see it looks clean now."
    ],
    "commit_messages": [
      "extract Just related duplicated code (#3276)\n\n* Use Maybe.Just and Maybe.Nothing instead\r\n\r\n* import Just, Nothing directly from Maybe.js"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79d28dfb6b84f24255ff",
    "number": 3272,
    "body": "This change addresses the issue of `of` not being able to\r\nwork with Applicatives.\r\n\r\nFixes #3267\r\n\r\nBREAKING CHANGE: `of` is now a binary function with a constructor as its first argument.\r\n\r\n**Acknowledgement**\r\n\r\nThis PR is almost an 100% copy/paste of #2687.\r\n\r\nNotable differences:\r\n\r\n1. Fix parameter name in JSDoc annotations\r\n2. Update description\r\n3. Update example\r\n4. Ignore one set of changes in tests as other changes were committed since then",
    "head_branch": "of-something",
    "is_a_fork": true,
    "comments": [
      "@CrossEye Any objection to merging this now? We could create a draft v1 release notes now if you fear we would miss out on important breaking changes such as this one.",
      "Merged.  We usually hope that two active maintainers (besides the author, when appropriate) will approve, and then anyone can merge.  "
    ],
    "commit_messages": [
      "refactor: `of` now works with Applicatives (#3272)\n\nThis change addresses the issue of `of` not being able to\r\nwork with Applicatives.\r\n\r\nFixes #3267\r\n\r\nBREAKING CHANGE: `of` is now a binary function with a constructor as its first argument."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79d38dfb6b84f2425600",
    "number": 3270,
    "body": "- npm test passes using node 17 as well as node 10\r\n- no error thrown on importing files using node 17\r\n\r\nFixes (#3236)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "@CrossEye when this will be released ? Our test cases are failing due to this.  Refer - https://github.com/lo1tuma/eslint-plugin-mocha/issues/322",
      "We're working toward a `1.0` release by trying to close almost all open issues.  While we haven't set an actual date, I'm hoping we're done with it by the end of May.  🤞🏼 ",
      "I'm using `eslint-plugin-mocha` in my npm modules and this is blocking adding node 18 to the ci matrix, would definitely appreciate a `0.28.2` release!",
      "Any update on when this is going to be released? test cases are failing in latest jest upgrade and this PR fixes that.",
      "Same issue on our end so it will be great to release at least a patch version.",
      "We've slowed down again.  It looks like we may have to do another point release.  I'll look into it soon.",
      "Please release this fix.",
      "just chiming in here to find out if this release is still on the radar.  Happy to assist in anyway we can.",
      "Would be great if a fix for this could be released"
    ],
    "commit_messages": [
      "update package.json exports section to support node version 10 to 17 (#3270)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79d48dfb6b84f2425601",
    "number": 3269,
    "body": "A really small change.\r\n\r\nSince we are testing `intoArray`, so we should add that in description just like the others.",
    "head_branch": "change-any-test-method-name",
    "is_a_fork": true,
    "comments": [
      "Now that I see the full extent of this, I'm less certain that we don't want such tests.  I think I'd like to see a single test for each of these functions that demonstrates that it can act as a transducer.  The transducer-related code can have many more, but we wouldn't expect it to know about every function that is a transducer.\r\n\r\nI'd love to hear if there are counterarguments, but as I look at them again, I'm not thrilled with removing these tests.  I would like to clean them up, and only do one single-assertion test for either.  We're not testing transduction, but we're also not retesting the basic behavior of the function, only proving that the function can act as a transducer when required.",
      "> Now that I see the full extent of this, I'm less certain that we don't want such tests. I think I'd like to see a single test for each of these functions that demonstrates that it can act as a transducer. The transducer-related code can have many more, but we wouldn't expect it to know about every function that is a transducer.\r\n> \r\n> I'd love to hear if there are counterarguments, but as I look at them again, I'm not thrilled with removing these tests. I would like to clean them up, and only do one single-assertion test for either. We're not testing transduction, but we're also not retesting the basic behavior of the function, only proving that the function can act as a transducer when required.\r\n\r\n@CrossEye \r\nThanks!\r\nThat sounds reasonable.\r\nSo I plan to move [the new code added in `into`](https://github.com/ramda/ramda/pull/3269/files#diff-75721e8042ac6c565411b677173c9bdc99d9a3298f7f134bcf0c726c78ea5fa7R18-R25),\r\nback to each function, but with just one single test for proving they can act as a transducer.\r\nIs that undertanding correct?\r\n\r\n(but how do we treat tests in `into`? should we still keep them?",
      "@CrossEye: from what I can see these tests simply moved to the tests for `into`. \r\n\r\nThis only indirectly tests the transducer nature of `any`:\r\n\r\n```javascript\r\ninto([], any(isEven), [1,2,3]);\r\n//> [true]\r\n```\r\n\r\nBecause I suspect that `into` composes its stepper function with the function returned by `any(isEven)`. \r\n\r\n> Acts as a transducer if a transformer is given in list position.\r\n\r\nIf we wanted to emphasise the transducer nature in tests then I'd do something like that: (actually composing with other known transformers)\r\n\r\n```javascript\r\ninto([], compose(any(isEven), map(String)), [1,2,3])\r\n//=> [\"true\"]\r\n```\r\n\r\nWhat if `map`, `filter`, etc. only focused on their own things and have a separate single test file that would make sure all transformers work well together? I think this PR is a step towards that but only needs to start composing some of them.",
      "@zydmayday:\r\n\r\n> So I plan to move [the new code added in into](https://github.com/ramda/ramda/pull/3269/files#diff-75721e8042ac6c565411b677173c9bdc99d9a3298f7f134bcf0c726c78ea5fa7R18-R25),\r\n back to each function, but with just one single test for proving they can act as a transducer.\r\n> Is that undertanding correct?\r\n\r\nThat's what I was thinking.  But it looks like @customcommander disagrees.\r\n\r\nIt would probably be better to use `transduce` directly rather than `into` for these tests, as it makes for a more obvious assertion.  But that's taking this PR far beyond, \"Fix test method name...\"\r\n\r\n@customcommander:\r\n\r\nI was thinking of this as an automated test for what we document as \"Acts as a transducer if a transformer is given in list position.\"  We don't need to care here precisely how it acts, only that it interacts properly in the transducer environment.  It's not quite as simple as \"doesn't throw an error when...\" but it isn't far off.\r\n\r\nThis also makes me notice that the H-M signatures for `transduce` and `into` are woefully inadequate.\r\n\r\nI'd suggest that we go back to the simpler version of this PR, and raise the usefulness of these transducer tests as a separate issue/PR.\r\n\r\nAnyone object?",
      "@CrossEye @customcommander \r\n> I'd suggest that we go back to the simpler version of this PR, and raise the usefulness of these transducer tests as a separate issue/PR.\r\n\r\nYes I agree. Since that(complex fix) is not the original purpose of this PR.\r\n\r\nAnd, I checked document again and search the keyword \"Acts as a transducer if a transformer is given in list position.\",\r\nactually there are 25 methods can act as a transducer.\r\n\r\nIn my personal opinion,\r\nI like to test separately in each \"act as a transducer\" method, but not collect them together as a big one in `into` or `transducer`.\r\n\r\n```js\r\n// for example\r\n// in test/without.js\r\n// test both into and transduce to show without can act as a transducer\r\nit('can act as a transducer', function() {\r\n  eq(R.into([], R.without([1]), [1]), []);\r\n  eq(R.transduce(R.without([1]), R.flip(R.append), [], [1]), []);\r\n});\r\n```\r\n\r\nPS. I did not expect this PR makes such a lot discussion, really happy to have such talk.\r\n\r\nAfter I checked again,\r\nI found there are some tests with description(can act as a transducer),\r\nsuch as:\r\n- https://github.com/ramda/ramda/blob/master/test/reduceBy.js#L63-L71\r\n- https://github.com/ramda/ramda/blob/master/test/tap.js#L25-L34\r\n- etc.",
      "Ok works for me.",
      "Hi, @CrossEye @customcommander \r\nI rebased and commit again. Kindly have a check.\r\n\r\n**only `chain` I did not add any method**",
      "@zydmayday: Thank you very much for persevering as your little change grew into a much bigger deal!\r\n\r\n:herb:"
    ],
    "commit_messages": [
      "add/modify tests which can act as a transducer (#3269)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79d58dfb6b84f2425602",
    "number": 3268,
    "body": "Duplicated with Line 12-22.",
    "head_branch": "remove-duplicated-tests-in-reject",
    "is_a_fork": true,
    "comments": [
      "@customcommander  Thanks, no problem.",
      ":herb:  Thank @zydmayday!"
    ],
    "commit_messages": [
      "remove-duplicated-tests-in-reject"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79d68dfb6b84f2425603",
    "number": 3266,
    "body": "<img src='https://i.imgur.com/uIzkC3G.jpeg' width=500/>",
    "head_branch": "refactoring",
    "is_a_fork": true,
    "comments": [
      "thank u for ur time, i made a couple of changes..."
    ],
    "commit_messages": [
      "revert(times): **replacing while loop with for loop**"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79d78dfb6b84f2425604",
    "number": 3263,
    "body": "`collectBy` already links to `groupBy`. I thought it would make sense the opposite way too.",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [
      "Thank you @ycmjason!"
    ],
    "commit_messages": [
      "link collectBy and groupBy (#3263)\n\n`collectBy` already links to `groupBy`. I thought it would make sense the opposite way too."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79d88dfb6b84f2425605",
    "number": 3262,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Hello and thank you for your contribution. Not sure if you've seen [this comment](https://github.com/ramda/ramda/pull/2715#discussion_r436256490) but it may be worth reading it if you (or other reviewers) didn't. I personally don't have an issue with this refactor as long as it doesn't incur a performance penalty.",
      "I didn't see that comment. Thanks for linking. I am not sure about the performance cost of this refactor. Feel free to close this if it is not something desirable. 😄 ",
      "Let's wait for some more comments on this :)",
      "Let's leave this for the 2.0 refactor.  At that point we'll be rewriting all the functions anyway using modern JS features, and we will probably have to do regular perf testing.\r\n\r\nIt's not that I think this is a bad idea, just that the timing is not right for it.  When we do go to more modern JS, we can look at where the simplicity of function layering outweighs a minor perf loss.",
      "@ycmjason \r\n\r\nWe'll defer the merge after our `v1.0` release (which we'll eventually happen in 2022). At which point we'll start working on our `v2.0` which will include a modern rewrite and be the best opportunity for this kind of refactor."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79d98dfb6b84f2425606",
    "number": 3261,
    "body": "Fixes: https://github.com/ramda/ramda/issues/3258\r\n\r\n----\r\ncc: @CrossEye @customcommander @denishowew @semmel ",
    "head_branch": "handle-objects-with-no-prototype-in-clone",
    "is_a_fork": true,
    "comments": [
      "Came across this issue recently and am glad to see that it's fixed. Do we know when this going to get released and be a part of the latest Ramda package on npm?"
    ],
    "commit_messages": [
      "fix(3258): handle no prototype objects in R.clone (#3261)\n\n* fix(3258): handle no prototype objects in R.clone\r\n\r\nFixes: https://github.com/ramda/ramda/issues/3258\r\n\r\n* simplify hasOwnProperty, toString, and test for clone"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79da8dfb6b84f2425607",
    "number": 3254,
    "body": null,
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Thanks @briandavidclark . I'm leaving this open for 24h just to give other maintainers and contributors a chance to say something but I don't think anybody will object to this anyway ;) Will merge tomorrow if somebody doesn't do it sooner."
    ],
    "commit_messages": [
      "Update on.js"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79db8dfb6b84f2425608",
    "number": 3250,
    "body": "Add a relation function `(propIncludes)` that can be used to determine whether an object has a property which is found in a list.\r\n\r\nThis is the `includes` version of [propEq](https://ramdajs.com/docs/#propEq)\r\n\r\n```\r\n// Before\r\npipe(filter(  (product) => includes(product?.id, productIds))  )\r\n\r\n\r\n\r\n// After\r\npipe(filter(  propIncludes(\"id\", productIds ))  )\r\n```",
    "head_branch": "feat/prop-includes",
    "is_a_fork": true,
    "comments": [
      "This really is a well-written PR and I particularly like the efforts that went into the test cases but I have to say that I share @CrossEye observation:\r\n\r\n```\r\nfilter (propSatisfies (includes (__, ['a', 'd']), 'category')) (xs)\r\n```\r\n\r\nSeems like what you're after. I think this should be an addition to the cookbook instead.",
      "Thanks for the review, guys.\r\n\r\nI'll go ahead and close this PR",
      "@jaxtisapia:\r\n\r\nAgain, thank you for participating, and please do add this function to [the Cookbook][cb]\r\n\r\n\r\n  [cb]: https://github.com/ramda/ramda/wiki/Cookbook"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79dc8dfb6b84f2425609",
    "number": 3248,
    "body": "Following the approach about what I said in #3247, I also extracted _arrayReduce and _xArrayReduce to be used in places where function are only working with array lists. In this way, we are not executing additional type checks in cases are not needed.\r\n",
    "head_branch": "refactor-3247",
    "is_a_fork": true,
    "comments": [
      "Notice that this PR doesn't colide with #2767. #2767 is a behavior change. This PR is just a refactor.\r\n\r\nIf we merge this PR and we want to apply the behavior of #2767 we just need to remove the lines:\r\n\r\n``` javascript\r\nif (typeof list['fantasy-land/reduce'] === 'function') {\r\n  return list['fantasy-land/reduce'](fn, acc);\r\n}\r\n```\r\nin `_createReduce.js`\r\n\r\nand adding in `_reduce.js`:\r\n``` javascript\r\nvar _baseReduce = _createReduce(_arrayReduce, _methodReduce, _iterableReduce);\r\nexport default function _reduce(reducer, acc, list) {\r\n  if (typeof list['fantasy-land/reduce'] === 'function') {\r\n    return list['fantasy-land/reduce'](fn, acc);\r\n  }\r\n  return _baseReduce(reducer, acc, list);\r\n}\r\n```",
      "Hi! Some benchmarks adding benchs for objects in map.bench.js\r\n\r\n``` javascript\r\nvar obj = {a: 1, b: 2};\r\n...\r\n    'map(sq, obj)': function() {\r\n      map(sq, obj);\r\n    },\r\n```\r\nOriginal:\r\n```\r\n┌────────────────────────┬────────────────────────┬────────────────────────┐\r\n│ map                    │ Hertz                  │ Margin of Error        │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ map(sq, obj)           │ 956,837                │ 4.81%                  │\r\n└────────────────────────┴────────────────────────┴────────────────────────┘\r\n```\r\nAfter change:\r\n```\r\n┌────────────────────────┬────────────────────────┬────────────────────────┐\r\n│ map                    │ Hertz                  │ Margin of Error        │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ map(sq, obj)           │ 2,099,464              │ 6.11%                  │\r\n└────────────────────────┴────────────────────────┴────────────────────────┘\r\n```\r\n\r\nUsing more keys implies less difference in gain of performance:\r\n```\r\nvar nums = [8, 2, 85, 2, 34, 3, 23, 247, 57, 8, 0, 6, 5, 46, 54, 643];\r\nvar obj = {...nums};\r\n...\r\n    'map(sq, obj)': function() {\r\n      map(sq, obj);\r\n    },\r\n```\r\nOriginal:\r\n```\r\n┌────────────────────────┬────────────────────────┬────────────────────────┐\r\n│ map                    │ Hertz                  │ Margin of Error        │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ map(sq, obj)           │ 571,880                │ 0.41%                  │\r\n└────────────────────────┴────────────────────────┴────────────────────────┘\r\n```\r\nAfter change:\r\n```\r\n┌────────────────────────┬────────────────────────┬────────────────────────┐\r\n│ map                    │ Hertz                  │ Margin of Error        │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ map(sq, obj)           │ 778,917                │ 0.42%                  │\r\n└────────────────────────┴────────────────────────┴────────────────────────┘\r\n```",
      "internal `_reduce` implementation changed and now only works with standard reducers. The new internal `_xReduce` function only works with transformers. Then, some `_reduce` usages are hidden and difficult to review because the files didn't change but the implempementation of `_reduce` did. I'm gonna list the usages of _reduce:\r\n\r\n- [ap.js](https://github.com/xgbuils/ramda/blob/refactor-3247/source/ap.js#L41)\r\n- [collectBy.js](https://github.com/xgbuils/ramda/blob/refactor-3247/source/collectBy.js#L36)\r\n- [count.js](https://github.com/xgbuils/ramda/blob/refactor-3247/source/count.js)\r\n- [pipeWith.js](https://github.com/xgbuils/ramda/blob/refactor-3247/source/pipeWith.js#L42)\r\n"
    ],
    "commit_messages": [
      "refactor(3247): split _reduce to _xReduce(for transformers) & _reduce(for reducers) (#3248)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79dd8dfb6b84f242560a",
    "number": 3246,
    "body": "It fixes #3245 ",
    "head_branch": "fix-3245",
    "is_a_fork": true,
    "comments": [
      "I really hate supporting negative indices in general, but we should be consistent in it.\r\n\r\n:herb:"
    ],
    "commit_messages": [
      "fix(3245): fix R.dropLasr with negative and zero param when used as transducer (#3246)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79de8dfb6b84f242560b",
    "number": 3244,
    "body": null,
    "head_branch": "docs-curry-default-params",
    "is_a_fork": true,
    "comments": [
      "We can add this link: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length, to explain how curry/curryN calculate fn's length.",
      "> We can add this link: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length, to explain how curry/curryN calculate fn's length.\r\n\r\nProbably a good idea! Done."
    ],
    "commit_messages": [
      "docs: curry: add warning about default parameters. close #3121"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79df8dfb6b84f242560c",
    "number": 3242,
    "body": null,
    "head_branch": "remove-coverage-badge",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "docs: remove broken coverage badge. close #3229 (#3242)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79e08dfb6b84f242560d",
    "number": 3239,
    "body": "see discussion [here](https://github.com/ramda/ramda/issues/3041)",
    "head_branch": "feature/dropRepeatsBy",
    "is_a_fork": true,
    "comments": [
      "> Except for a minor nit in the tests, I have no issues with how this is written.\r\n\r\n**EDIT:** Requested changes have been addressed.\r\n\r\n> But I'm still not convinced of the need for it. Is there any good argument for including it besides the (important, but never crucial) consistency of a parallel for `dropRepeatsWith`.\r\n> \r\n> Have you had common needs for such a function?\r\n\r\nThere certainly are real-world scenarios for this function. Last year, when I created #3041, my use case was the following: given a pageview history page, I needed to filter out duplicate visits from the same user, displaying only the latest one. IMHO this would be the simplest form:\r\n\r\n```js\r\nconst visits = [\r\n  {\r\n    date: '2021-12-02',\r\n    userId: 1\r\n  },\r\n  {\r\n    date: '2021-12-01',\r\n    userId: 1\r\n  },\r\n  {\r\n    date: '2021-11-27',\r\n    userId: 2\r\n  },\r\n  {\r\n    date: '2021-11-25',\r\n    userId: 1\r\n  }\r\n]\r\n\r\nconst uniqueVisits = R.dropRepeatsBy(R.prop('userId'), visits)\r\nconsole.log(uniqueVisits)\r\n\r\n/*\r\nOutput:\r\n\r\n[\r\n  {\r\n    date: '2021-12-02',\r\n    userId: 1\r\n  },\r\n  {\r\n    date: '2021-11-27',\r\n    userId: 2\r\n  },\r\n  {\r\n    date: '2021-11-25',\r\n    userId: 1\r\n  }\r\n]\r\n*/\r\n```\r\n\r\nTL;DR: Use case is similar to `R.uniqBy`, but only applies to contiguous equalities, just like `R.uniq` vs `R.dropRepeats`.",
      "Thank you Ivan for your contribution, and for your patience!",
      "I hit \"Close\" rather than \"Merge\".  Oops!  Fixed now.",
      "I've seen it LOL\r\n\r\nThanks for merging. I'm sure it'll be useful for the community."
    ],
    "commit_messages": [
      "Implement dropRepeatsBy (#3041) (#3239)\n\n* Implement dropRepeatsBy (#3041)\r\n\r\n* Improve tests for dropRepeatsBy\r\n\r\n* Remove arrow function from dropRepeatsBy for compatibility purposes\r\n\r\n* Improve test isolation for dropRepeatsBy and dropRepeatsWith"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79e18dfb6b84f242560e",
    "number": 3235,
    "body": null,
    "head_branch": "chore/type",
    "is_a_fork": true,
    "comments": [
      "@adispring: I'm happy for you to merge if you're confident with this change. LGTM but I don't have a strong expertise in that area. Happy to defer to your judgment ;)"
    ],
    "commit_messages": [
      "chore: optimize R.type's type (#3235)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79e28dfb6b84f242560f",
    "number": 3234,
    "body": "It fixes #3232 \r\n",
    "head_branch": "fix-3232",
    "is_a_fork": true,
    "comments": [
      "Sorry, I didn't see [jaawerth](https://github.com/jaawerth) fix in #3233 . I'm gonna close it.",
      "While I did submit  quick-and-dirty fix, I think yours might actually be better - I think the problem is that transducers are inherently stateful (especially in the step function), they just happen to hide the state under the hood (this being a huge optimization in clojure, or in JS using `ImmutableJS`, since you can use transient mutable versions of your immutable structures to save the overhead while still looking stateless to the outside observer:\r\n\r\n\r\nI don't know this codebase super well, but if I had to guess, I think your fix could end up solving similar issues if there are other \"also usable as a transducer\" reductions that aren't being tested in transducer form.\r\n. \r\nThe `step` function in particular is often some kind of state mutation, just bookended betwen the `init` and `result` functions, though in JS this is a bit made up as we go (and tbh ends up being way more complicated to make sense of all the internal indirection you end up with) since clojure gets immutability for free and outright names the mutable versions of its structures \"transients\".\r\n\r\nOther JS implementations of transduce, I usually see this handled by the final transform created by e.g. `into`, where `into([], ...)` \"clones\" the array when it's empty, but if a populated plain object/array is passed in, they just mutate it when plain or else leave it up to a `@@transducer/init` function to take care of things. I don't know what'd be best for ramda, just figured it'd be worth mentioning.",
      "Ok, I'm gonna open the PR because my solution seems more consistent with the no-transducers implementation.\r\n\r\nAfter reading what you say, @jaawerth, I don't like to much the _clone approach we have in functions like `into` and maybe delegating in `@@transducer/init` function is better. But I think it's something that I have to review more deeply. Having the same solution than the default implementation can reduce the number of unexpected behaviours for now.",
      "I am having a busy week so worse case scenario I'm going to look at this over the weekend. But thank you both for coordinating your efforts. It's great to see 🙇‍♂️",
      "Sorry for introduce the bug, I wll see what happen here,",
      "I spend some time to see the source code of `groupBy`, `reduceBy` and `_xreduceBy` , find out that this fix is more robust.\r\n\r\nWhen using `reduce` and `reduceBy`, People should not mutate the acc in place in general. But `groupBy` has break this rule for performance, and use one hack method to let itself behave normally, as follows:\r\n\r\n```js\r\nvar groupBy = _curry2(_checkForMethod('groupBy', reduceBy(function(acc, item) {\r\n  if (acc == null) {\r\n    acc = [];\r\n  }\r\n  acc.push(item);\r\n  return acc;\r\n}, null)));\r\n```\r\n\r\nwhen `groupBy` act as a transducer, if `acc` is `null`, this means it's a new subgroup iteration, then `groupBy` make a new empty array `[]` to subgroup, then each subgroup has its own acc.",
      "When I change the source code to:\r\n\r\n```js\r\nvar groupBy = _curry2(_checkForMethod('groupBy', reduceBy(function(acc, item) {\r\n  acc.push(item);\r\n  return acc;\r\n}, [])));\r\n```\r\n\r\n`groupBy` behaves normally when process data directly, but will break as a transducer.\r\n\r\n Because when process data directly, it will `clone(valueAcc, false)`; and when used as a transducer, it does not clone `valueAcc`, all subgroups share the same `valueAcc`.",
      "All other Ramda apis base on `reduceBy` (`countBy`, `indexBy`) don't have this problem, because they do not mutate `acc` in place.\r\n\r\n```js\r\nvar countBy = reduceBy(function(acc, elem) { return acc + 1; }, 0);\r\n\r\nvar indexBy = reduceBy(function(acc, elem) { return elem; }, null);\r\n```",
      "Sorry again for introducing this bug. Both this pr and @jaawerth 's pr will fix the bug, and this pr will be better in my opinion, because it unifies the direct data procedure and transducer behavior."
    ],
    "commit_messages": [
      "fix(3232): fix R.groupBy when used as transducer (#3234)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79e38dfb6b84f2425610",
    "number": 3233,
    "body": "Fixes #3232\r\nReverts code change in https://github.com/ramda/ramda/commit/9b5d8925f23f0f44a2e656bfd0cf23ff30031794\r\n\r\nSetting an absent absent/nullish accumulator, rather than passing an empty on to `reduceBy,` appears to correct the cached copy behavior causing pollution in the accumulators on subsequent invocations, as well as the \"passthrough\" behavior dumping every value in every group; I believe this is due due the cached shallow-copying combined with the currying of `reduceBy`.\r\n\r\nIt may be more desirable to correct the copy caching to prevent the error while still deterministically setting the accumulator, but for what it's worth, it's at least in line with traditional transducer behavior to get the initial value from the transformer, albeit not *quite* this way!",
    "head_branch": "bugfix/groupby-transducer-state",
    "is_a_fork": true,
    "comments": [
      "Hi @jaawerth\r\n\r\nI've seen the fallback function of [reduceBy](https://github.com/ramda/ramda/blob/d27c944b4aa974d42b68899270311fb10419ad79/source/reduceBy.js#L58) is using `_clone`. Then maybe could be done as same way is done in `_xReduceBy`. Let's see what the mantainers say.\r\n\r\nThanks!",
      "Yep - this is a quick fix but it probably doesn't address similar problems in other transducers. I think the PR you closed may be on track of a better solution ;)."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79e48dfb6b84f2425611",
    "number": 3231,
    "body": "From issue #3230 \r\n\r\nNotice that now transducer creator functions just depend on  themselves after removing curryX functions. This could facilitate ramda modularity because now it's easier to create a library that works just with transducers without rely in other parts of the library.",
    "head_branch": "refactor-3230",
    "is_a_fork": true,
    "comments": [
      "> I think this is perfectly sensible but I need to get my head around `_dispatchable` as this function seems key in order to conduct a review (at least for me).\r\n\r\nI'm thinking deeply about it and I can say that technically it doesn't depends on `_dispatchable` it's more about how transducers work. Transducer implementations requires:\r\n* transducer creators: functions that return transducers\r\n* transducers: functions that receive a transformer and returns a transformer. They are the functions that can be composed applying a performant way of transformation over  arrays, iterables and so on.\r\n* transformers: objects that implement `@@transducer/init`, `@@transducer/step` and `@@transducer/result` methods.\r\n\r\nBecause of composition of transducers we won't need another way of partial application over transducer creators. Then, it seems we will never need to wrap internal transducer creators with curryX functions.\r\n\r\n> Do you have an idea of how much we gain performance wise?\r\n\r\nI'm not sure how to check it. I've seen tables with benchmarks in #3048 but I don't know how they were created. Is there a standard way to create benchmarks in this project?\r\n\r\nThanks\r\n\r\n",
      "> I'm thinking deeply about it and I can say that technically it doesn't depends on `_dispatchable` it's more about how transducers work. Transducer implementations requires:\r\n\r\nYep you're right. I mentioned `_dispatchable` because it deals with creating transducers too which is the codepath that most of your changes will exercise I think. \r\n\r\nWe recently had this issue reported #3232 which seems to be a regression in `0.28` and I know we touched that part of the code recently. Any chance your changes improve anything there? (Don't think so but I thought I'd ask anyway)\r\n\r\nI'd like another review from a maintainer if that's ok.",
      "> We recently had this issue reported #3232 which seems to be a regression in `0.28` and I know we touched that part of the code recently. Any chance your changes improve anything there? (Don't think so but I thought I'd ask anyway)\r\n\r\nOK, I have a solution for this issue. I can send a PR there. It's working too with this change.\r\n",
      "> Do you have an idea of how much we gain performance wise?\r\n\r\nI've added these bench tests:\r\n``` javascipt\r\n    //  filter.bench.js\r\n    'into([], filter(isEven), nums)': function() {\r\n      into([], filter(isEven), nums);\r\n    },\r\n    'into([], filterEven, nums)': function() {\r\n      into([], filterEven, nums);\r\n    },\r\n```\r\n``` javascipt\r\n    //  map.bench.js\r\n    'into([], map(sq), nums)': function() {\r\n      into([], map(sq), nums);\r\n    },\r\n    'into([], mapSq, nums)': function() {\r\n      into([], mapSq, nums);\r\n    },\r\n```\r\n\r\nOriginal benchmarks:\r\n```\r\n┌────────────────────────┬────────────────────────┬────────────────────────┐\r\n│ filter                 │ Hertz                  │ Margin of Error        │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ filter(isEven, nums)   │ 7,627,059              │ 0.77%                  │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ filter(isEven)(nums)   │ 1,889,646              │ 2.87%                  │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ filterEven(nums)       │ 2,230,079              │ 2.80%                  │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ into([], filter(isEve… │ 350,420                │ 0.57%                  │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ into([], filterEven, … │ 362,084                │ 0.69%                  │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ native filter          │ 9,576,447              │ 0.14%                  │\r\n└────────────────────────┴────────────────────────┴────────────────────────┘\r\n┌────────────────────────┬────────────────────────┬────────────────────────┐\r\n│ map                    │ Hertz                  │ Margin of Error        │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ map(sq, nums)          │ 9,675,896              │ 2.79%                  │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ map(sq)(nums)          │ 2,090,064              │ 0.42%                  │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ mapSq(nums)            │ 2,561,379              │ 0.41%                  │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ into([], map(sq), num… │ 358,597                │ 0.34%                  │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ into([], mapSq, nums)  │ 359,507                │ 0.78%                  │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ native map             │ 10,826,670             │ 0.37%                  │\r\n└────────────────────────┴────────────────────────┴────────────────────────┘\r\n```\r\n\r\nWith the change:\r\n```\r\n┌────────────────────────┬────────────────────────┬────────────────────────┐\r\n│ filter                 │ Hertz                  │ Margin of Error        │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ filter(isEven, nums)   │ 8,391,643              │ 0.60%                  │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ filter(isEven)(nums)   │ 1,902,025              │ 0.28%                  │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ filterEven(nums)       │ 2,227,084              │ 1.13%                  │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ into([], filter(isEve… │ 389,342                │ 0.38%                  │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ into([], filterEven, … │ 402,658                │ 0.87%                  │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ native filter          │ 10,478,337             │ 0.20%                  │\r\n└────────────────────────┴────────────────────────┴────────────────────────┘\r\n┌────────────────────────┬────────────────────────┬────────────────────────┐\r\n│ map                    │ Hertz                  │ Margin of Error        │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ map(sq, nums)          │ 10,496,247             │ 0.61%                  │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ map(sq)(nums)          │ 1,748,662              │ 6.52%                  │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ mapSq(nums)            │ 2,351,095              │ 0.23%                  │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ into([], map(sq), num… │ 383,266                │ 0.27%                  │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ into([], mapSq, nums)  │ 387,048                │ 0.73%                  │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ native map             │ 9,842,714              │ 0.61%                  │\r\n└────────────────────────┴────────────────────────┴────────────────────────┘\r\n```\r\n\r\nDo you think it could be interesting to add in the PR for testing transducer approach performance?\r\n"
    ],
    "commit_messages": [
      "refactor(3230): remove curryX dependency for internal transducer creator functions (#3231)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79e58dfb6b84f2425612",
    "number": 3228,
    "body": "Couple of quick wins (I hope) to help clear a few documentation-related issues. See issues referenced in the commit messages for context.",
    "head_branch": "documentation-updates",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Documentation updates (#3228)\n\n* docs: memoizeWith: rewrite documentation and example. close #2314\r\n\r\n* docs: composeWith: clarify how functions are passed. close #2789\r\n\r\n* docs: ifElse: add note about its arity. close #2654\r\n\r\n* docs: filter: add category Object. close #2572"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79e68dfb6b84f2425613",
    "number": 3227,
    "body": null,
    "head_branch": "chore/intersection-consistent-order",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79e68dfb6b84f2425614",
    "number": 3225,
    "body": "`innerJoin` is a sql command, `R.innerJoin` only has `inner` but no `join`, so rename it to `intersectionWith` may be more accurate?",
    "head_branch": "chore/rename-innerJoin-to-intersectionWith",
    "is_a_fork": true,
    "comments": [
      "@customcommander , Yes, thanks for remind.",
      "@CrossEye Any objection?",
      "I agree with the change.\r\n\r\nI guess ,,we need to decide whether `1.0` or `0.29` is next.  When we rename a function, we usually keep the old name around as an alias for a minor version.  If we're building `0.29` I would do so, but I think if we're headed right for `1.0`, then we need to skip it this time.",
      "@CrossEye: I wouldn't bother with `0.29` at this point and would rather keep the momentum for `1.0.0` and ship as many breaking changes in that one."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79e88dfb6b84f2425615",
    "number": 3224,
    "body": "Fix remaining linter errors following #3223 and update ESLint configuration to have the parser understanding 2018 ECMA features. Also the `swap` function claims to work with Map instances however looking at the implementation I'm not sure how this could work so I have removed the failing test.",
    "head_branch": "fix-lint-test-errors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "build: eslint: use one config file with overrides for specific paths"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79e98dfb6b84f2425616",
    "number": 3223,
    "body": "During PR #3217, I noticed lint failing after install `eslint-plugin-import` to its latest version, so here comes the fixes mostly by adding extensions under `test/*` and `lib/*` folders.\r\n\r\nPlease help to verify it doesn't broken any other hidden process along the way.",
    "head_branch": "eslint-import",
    "is_a_fork": true,
    "comments": [
      "Thanks, @imcotton!"
    ],
    "commit_messages": [
      "Upgrade and fixing up eslint-plugin-import (#3223)\n\n* Update eslint-plugin-import to ^2.25.4\r\n\r\n* Lint extensions fixing under lib/* and test/*"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79ea8dfb6b84f2425617",
    "number": 3222,
    "body": "Question: Is there a great reason to write even more tests for the `mergeDeep*` functions?  I feel this is already testing overkill, and the same fix should apply to them.\r\n\r\nFixes #2586",
    "head_branch": "i2586-mergeWith",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix merge with nil objects (#3222)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79ea8dfb6b84f2425618",
    "number": 3221,
    "body": "**Before**\r\n\r\nJSDoc cannot infer the name of the function and so default to `module.exports`\r\n\r\n```javascript\r\nexport default () => 42\r\n```\r\n\r\n**After**\r\n\r\nJSDoc can infer the name of the function as it has been assigned to the `answer` variable.\r\n\r\n```javascript\r\nvar answer  = () => 42;\r\nexport default answer;\r\n```\r\n\r\n",
    "head_branch": "partialobject-doc-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "refactor: assign partialObject function to var so that JSDoc can infer its name (#3221)\n\nfix ramda/ramda.github.io#261"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79eb8dfb6b84f2425619",
    "number": 3220,
    "body": "Fixes #3200",
    "head_branch": "reduce-doc-enhancement",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Reduce doc enhancement (#3220)\n\n* docs: Warn about mutating accumulators` -m \"\r\n\r\nFixes #3200\r\n\r\n* docs: Warn about mutating accumulators\r\n\r\nFixes #3200\r\n\r\n* Remove trailing spaces"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79ec8dfb6b84f242561a",
    "number": 3217,
    "body": "Finish up #3214.",
    "head_branch": "pkg-lock",
    "is_a_fork": true,
    "comments": [
      "I would feel more comfortable if we could review our dependencies management first.\r\n\r\nWith millions of weekly downloads we have definitely become a target and so we ought to take all reasonable steps to make sure that our development infrastructure isn't hijacked by compromised third-party dependencies.\r\n\r\nI think a lock file has its role to play. I know it's not perfect but we shouldn't discard it either. We could think about pinning our dependencies. We could also think about disabling pre/post install scripts. Any dependencies can trigger those scripts and install malwares on privileged machines and attempt to publish a compromised version of `ramda`.\r\n\r\nI would therefore suggest we do not merge this for now until we had that discussion first. If any member of @ramda/core strongly disagrees and would prefer to merge this pr I will not object of course.\r\n\r\n",
      "@customcommander Agree to have discussion around first, I've made this PR into draft for now.",
      "`npm audit` result on before and after removing the lockfile:\r\n\r\n```diff\r\n- 50 vulnerabilities (       23 moderate, 18 high, 9 critical)\r\n+ 28 vulnerabilities (2 low, 18 moderate,  6 high, 2 critical)\r\n```",
      "This reinforces my feeling about the lock file; it has its role to play (it has effectively pinned down the dependencies) but it alone is not enough. The maintainers have to review the dependencies and update them after they have been approved. The latest events in the NPM world show how easy it is to compromise a project supply chain. Due diligence is required IMHO.",
      "Hi @imcotton , thanks for the pr! 💪 !\r\n\r\nI'd love if you could add some context, description, to your pr.\r\nWhat would the benefits of removing lock files be?",
      "https://github.com/ramda/ramda/pull/3214#issuecomment-1018994917: \r\n\r\n> I have quite mixed feelings about lockfiles in general.  I love the idea, but the npm implementation has often been a thorn in my side.  And while I don't necessarily agree with David's suggestion that libraries do not need them, there is one factor that convinces me that Ramda doesn't need to commit one:\r\n> \r\n> https://github.com/ramda/ramda/blob/7f37e8a4243de2b6c39d0490ef282873e405f9ad/package.json#L89\r\n> \r\n> Yes, there are plenty of `devDependencies`, and it's possible that a corrupted dev dependency does something terrible to a built version of Ramda, but *it's not transitive*.   Any such problems can be fixed solely by changing Ramda versions; you won't need to worry about what version of `deeply/nested/library/that/someone/has/corrupted` might be.",
      "What should a proper lockfile benefits from having one?\r\n\r\n- updated - npm/cli#4223\r\n- ethics - https://snyk.io/blog/why-npm-lockfiles-can-be-a-security-blindspot-for-injecting-malicious-modules/\r\n- auditing - https://overreacted.io/npm-audit-broken-by-design/\r\n\r\nOtherwise it wasting the effort.\r\n\r\nedit (appending):\r\n\r\n- npm/cli#2701\r\n\r\n  > It is sort of ridiculous that a Priority 1 bug has been opened for almost a year now... [[1][q1]]\r\n\r\n- npm/cli#2846\r\n  > We've talked about this internally, and I think the consensus is that we really should not be tracking integrity for any dependency that gets built on the client, especially git dependencies that already benefit from git's comprehensive content hashing. [[2][q2]]\r\n\r\n  https://github.com/ramda/ramda/blob/7f37e8a4243de2b6c39d0490ef282873e405f9ad/package-lock.json#L3931-L3933\r\n\r\n[q1]: https://github.com/npm/cli/issues/2701#issuecomment-1010527299\r\n[q2]: https://github.com/npm/cli/issues/2846#issuecomment-947060398",
      "> Yes, there are plenty of devDependencies, and it's possible that a corrupted dev dependency does something terrible to a built version of Ramda, but it's not transitive. Any such problems can be fixed solely by changing Ramda versions; you won't need to worry about what version of deeply/nested/library/that/someone/has/corrupted might be.\r\n\r\nI am not following the reasoning here.\r\n\r\nCompromised libraries can either be direct dependencies or _transitive_ dependencies. Coupled with pre/post install scripts they can install malwares as soon as ramda is installed on a computer. That we only need to change the ramda version is in my opinion irrelevant as the damage is done already.\r\n\r\nI think we should try our best to prevent issues in the first place not react to them afterwards.\r\n\r\nI'm not saying that a lock file is the only solution but I think it still has its role to play.\r\n\r\nI am personally not in favour to merge this as it is now.\r\n\r\n",
      "Using exact version in package.json may have the same effect as what the lock file do?\r\n\r\nWe can first remove all the `~` and `^` version symbol in package.json?\r\n\r\nHere is a blog describe how to config and install exact version of npm: https://www.dalejefferson.com/articles/2018-02-04-how-to-save-exact-npm-package-versions/",
      "@customcommander: But Ramda has *no* dependencies.\r\n\r\n```shell\r\n> mkdir 2022-01-22c\r\n> cd 2022-01-22c\r\n> npm init\r\n> npm install --save ramda\r\n> echo -e \"const {map} = require ('ramda')\\n\\nconsole .log (map (n => n * n) ([1, 2, 3,4, 5]))\" >index.js\r\n> node index\r\n[ 1, 4, 9, 16, 25 ]\r\n> cat node_modules/.package-lock.json \r\n{\r\n    \"name\": \"2022-01-22c\",\r\n    \"version\": \"1.0.0\",\r\n    \"lockfileVersion\": 2,\r\n    \"requires\": true,\r\n    \"packages\": {\r\n        \"node_modules/ramda\": {\r\n            \"version\": \"0.28.0\",\r\n            \"resolved\": \"https://registry.npmjs.org/ramda/-/ramda-0.28.0.tgz\",\r\n            \"integrity\": \"sha512-9QnLuG/kPVgWvMQ4aODhsBUFKOUmnbUnsSXACv+NCQZcHbeb+v8Lodp8OVxtRULN1/xOyYLLaL6npE6dMq5QTA==\",\r\n            \"funding\": {\r\n                \"type\": \"opencollective\",\r\n                \"url\": \"https://opencollective.com/ramda\"\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nNote that the only thing there is Ramda.\r\n\r\n \r\nSo this is first of all only a concern for those doing `git clone`/`npm install`, who will get our `devDependencies`.  For that, I think I prefer @adispring's idea: Let's simply lock down the versions of all our dev dependencies, and remove this megabyte file.\r\n",
      "This is only an issue for maintainers and contributors; those who will clone the repo and bootstrap the project with `npm i` but in my view this is still an issue. Some malicious actors will target maintainers of popular packages to steal their tokens and publish compromised versions of popular package.\r\n\r\nIn order to move forward I can live without a lock file but then this pull request has to pin down the dependencies now as otherwise it just removes _some_ protection for nothing in return IMHO.\r\n\r\nNote that I am not asking for the dependencies to be updated just locked.",
      "> In order to move forward I can live without a lock file but then this pull request has to pin down the dependencies now as otherwise it just removes some protection for nothing in return IMHO.\r\n\r\nI like this.  Anyone have an objection?",
      "> ## But Ramda has _no_ dependencies\r\n\r\nExactly! However I have mixed feeling about this, let's assume that **Ramda** have had dependencies, then I would have made a better argument to NOT have a lockfile because this very file only lives inside the source repo and impacts that repo only, it doesn't represent how end-user consuming its dependencies, thus outdated lockfile could diverge the experience between its lib repo and real-world situation.\r\n\r\n- > Lockfiles for apps, but not for packages. Lockfiles are great for apps where you want a controlled reproducible environment, but for packages this doesn't make much sense. The package-lock.json files in dependencies are ignored, so the lockfile only applies when users run npm install in the package repo. If you use a lockfile for packages, your local dependency tree will not match the dependency tree of users having your package as a dependency. This can potentially cause problems if one of your package dependencies breaks your package in a patch release. The lockfile will prevent you from seeing the problem locally, but it will affect your users. [^1]\r\n\r\n\r\n\r\n\r\n\r\n\r\n> ## Using exact version in package.json may have the same effect as what the lock file do?\r\n\r\nYes and no:\r\n\r\n- > The whole \"grab the latest semver compatible version\" was designed for a reason, and just pinning to a specific version would bring us to a world where very different articles need to be written. Specifically, when there's a vulnerability in any dependency (a thing that happens much more often than a rogue OSS dev) the upgrade process would be a nightmare for everyone involved.\r\n  > You have to choose one of the two evils; automatic bug/vulnerability fixes, or protection against rogue OSS devs you depend on. I'd say the former is an order of magnitude more common and important, and so the npm/JS world works this way. [^2]\r\n\r\n\r\n\r\n\r\n\r\n\r\n> ## Some malicious actors will target maintainers of popular packages to steal their tokens and publish compromised versions of popular package.\r\n\r\nIt matters to your threat model, in the NPM's security history I bet in 95% of the incidents they were using lockfiles, and what if they were pinned to a bad version and never / delays updated since?\r\n\r\nI'm sorry for pulling the leg here, just two days ago I've had PR #3223 submitted, does anyone occur to review the actual diff inside `package-lock.json` and verify its legitimacy? (disclaimer: nothing malicious)\r\n\r\n\r\n\r\n\r\n\r\n[^1]: https://github.com/sindresorhus/ama/issues/479#issuecomment-310661514\r\n[^2]: https://news.ycombinator.com/item?id=29884183",
      "> I'm sorry for pulling the leg here, just two days ago I've had PR #3223 submitted, does anyone occur to review the actual diff inside package-lock.json and verify its legitimacy? (disclaimer: nothing malicious)\r\n\r\nI actually reviewed the lock file :) and made sure all packages were pull from the default registry and also looked for the latest compromised packages that I had to deal with in the last few months.",
      "You're not wrong that pinning dependencies or using a lock file makes it less trivial to keep dependencies up to date. That's totally fair but for me that's a win (just my personal opinion here). I'm not of fan of pulling the latest version of everything every single time. It's literally a blank cheque to install whatever on your machines. Effective security in my opinion is about preventing not reacting to threats.\r\n\r\nSome companies actually have that model, all dependencies are carefully vetted before consumed. In the meantime people just stick with pre-approved packages. It may seem inflexible but if the update process is quick, reliable and frequent, this model becomes a very useful barrier against totally preventable security incidents.\r\n\r\nI won't object to removing the lock file. Actually assuming that humans will always review a machine-generated file is a security issue in itself so in a sense you're helping us (and thank you for your contribution) but I would really love to see the dependencies pinned down as a result.\r\n\r\nI am not asking for the dependencies to be updated though. Just for the `package.json` file to be updated to remove `^` and `~` symbols. I think that's an ok compromise don't you think?\r\n\r\nOf course any other maintainers is free to disagree and merge this as it is.\r\n\r\n",
      "<img width=\"796\" alt=\"dep-dates\" src=\"https://user-images.githubusercontent.com/149541/150848958-6a6a3bd2-b691-423b-b8e1-81036cc28dbc.png\">\r\n\r\nBy removing the version prefix you're going to have to maintain a repo with all those outdated external modules, to me in any way it is not a secure measure. Keep in mind by dropping `package-lock` today you still going to fetch semver compatible versions, not the latest ones, without a major bump they're still outdated heavily.\r\n\r\nCheck again these giants:\r\n\r\n- babel\r\n- rollup\r\n- eslint\r\n- mocha\r\n- js-yaml\r\n- etc...\r\n\r\nif someone or some companies have the secrecy to effectively verify (e.g. `dist/index.min.js`) each upgrades then I'm all ears. And if some how they were compromised by a single version bump, **Ramda** repo is the last place I'd worried about.",
      "I think we should simply agree to disagree here.\r\n\r\nI voiced my concerns and if other maintainers do not share them they are more than welcome to merge your pull request. In any case thank your for your time and contributions, they are well appreciated.",
      "I concur.\r\n\r\n_btw: branch rebased_",
      "Sorry, I want to last time emphasize the security concern on pinning to the exact version.\r\n\r\nAssuming module `foobar` has the following versions:\r\n\r\n- 1.5.0  -- vulnerable resolved\r\n- 1.3.0\r\n- 1.2.0  -- vulnerable introduced\r\n\r\nIn the `package.json` you have:\r\n\r\n```json\r\n{\r\n  \"foobar\": \"^1.3.0\"\r\n}\r\n```\r\n\r\nOn a fresh install, you'd fetch the `1.5.0` (semver compatible).\r\n\r\nHowever, by pin to the exact version:\r\n\r\n```diff\r\n- \"foobar\": \"^1.3.0\"\r\n+ \"foobar\": \"1.3.0\"\r\n```\r\n\r\nOn another install, you'd get the version `1.3.0` instead (vulnerable included).\r\n\r\nThis is hardly new knowledge, please be awarded.\r\n",
      "How's this for a process?\r\n\r\n  - Before a major release, we strip out all the dev dependencies, and reinstall them with the latest (non-prerelease) versions,\r\n \r\n    ```shell\r\n    npm install --save-dev --save-exact @babel/cli  @babel/core ... xyz\r\n    ```\r\n    (I'm bothered though about needing another place to track these dependencies, so perhaps we simply pull them first from the current `package.json`.)\r\n\r\n  - Obviously we then run tests and the full build/publish cycle.\r\n\r\n  - Between major versions, when we find the need to change dependency versions, we simply update `package.json` with the latest.  We can release this change on its own in a patch version and/or with other code in a minor version.",
      "I don't know how to proceed that flow in practice, at this point, I believe that ramda team knows best in this regard, closing."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79ed8dfb6b84f242561b",
    "number": 3214,
    "body": "It does not make sense for a library to use a lockfile.\r\n",
    "head_branch": "davidchambers/no-lockfile",
    "is_a_fork": false,
    "comments": [
      "@davidchambers Would you like to merge this PR?",
      "Due to recent colors npm event: https://github.com/Marak/colors.js/issues/285, I think it's better not remove package lock file. The devDependencies maybe be injected with malware.\r\n\r\nWe can trust package lock file, but not package.json.",
      "The package lock file isn't published. It should be consumed by CI to always install an exact working copy.",
      "Currently this repo have a one year old (Jan 26, 2021) lock file with `50 vulnerabilities (23 moderate, 18 high, 9 critical)`[^1] during `npm ci`, I would choose to have no lock file in exchange with up to dated mitigation.\r\n\r\n[^1]: https://github.com/ramda/ramda/runs/4748752673?check_suite_focus=true#step:3:91",
      "And no, the **Dependabot** automation have no difference with no lock file, it only produces spamming commits and bulky objects.",
      "> Currently this repo have a one year old (Jan 26, 2021) lock file with `50 vulnerabilities (23 moderate, 18 high, 9 critical)`[1](#user-content-fn-1-163c5e569d8199af19bcd68603f327c2) during `npm ci`, I would choose to have no lock file in exchange with up to dated mitigation.\r\n> \r\n> ## Footnotes\r\n> 1. https://github.com/ramda/ramda/runs/4748752673?check_suite_focus=true#step:3:91 [↩](#user-content-fnref-1-163c5e569d8199af19bcd68603f327c2)\r\n\r\nThe solution should be to remake the lockfile not delete it entirely.",
      "With thousands of indirect dependencies from `node_modules`, what's the best strategy off to remake & commit lockfile effectively?\r\n\r\n---\r\n- https://snyk.io/blog/why-npm-lockfiles-can-be-a-security-blindspot-for-injecting-malicious-modules/\r\n- https://snyk.io/blog/what-is-package-lock-json/",
      "I have quite mixed feelings about lockfiles in general.  I love the idea, but the npm implementation has often been a thorn in my side.  And while I don't necessarily agree with David's suggestion that libraries do not need them, there is one factor that convinces me that Ramda doesn't need to commit one:\r\n\r\nhttps://github.com/ramda/ramda/blob/7f37e8a4243de2b6c39d0490ef282873e405f9ad/package.json#L89\r\n\r\nYes, there are plenty of `devDependencies`, and it's possible that a corrupted dev dependency does something terrible to a built version of Ramda, but *it's not transitive*.   Any such problems can be fixed solely by changing Ramda versions; you won't need to worry about what version of `deeply/nested/library/that/someone/has/corrupted` might be.\r\n\r\nSo :+1: from me.\r\n\r\n:herb:"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79ee8dfb6b84f242561c",
    "number": 3213,
    "body": "⚠️⚠️⚠️ **DO NOT MERGE!** ⚠️⚠️⚠️\r\n\r\n--- \r\n\r\nThis partially reverts commit 3366df607287bf5cf3b9f870ad5b463198f334e5.\r\n\r\nThis commit temporarily restores the functions removed\r\nafter the initial v0.27 release so as to avoid causing\r\nbreaking changes in the next minor release v0.28.0\r\n\r\nThis commit also temporarily restore a dependency to `jsverify`\r\nneeded for the tests that have also been restored as a\r\nresult of reverting the commit.\r\n\r\n---\r\n\r\n**Warning**\r\n\r\nThe destination branch should probably be set to `v0.28` and not `master`.\r\n\r\n**Summary**\r\n\r\n1. Source and tests files are exactly as they were in commit 3366df607287bf5cf3b9f870ad5b463198f334e5. The only difference is that I had to add the `.js` extension in the import statements as otherwise the linter fails.\r\n2. I didn't want to rewrite the tests so I had to restore the dependency to `jsverify`\r\n3. Some tests were refactored to not use any of the deprecated functions. These tests have not been reverted!\r\n4. The `index.js` file looks a bit messy but I've only restored the deleted functions and sorted the lines alphabetically.",
    "head_branch": "v0.28",
    "is_a_fork": true,
    "comments": [
      "We have not worried too much about breaking changes in the pre-1.0 (I know, I know!) releases.  After 0.28, I think we should be ready to go to 1.0, and talk about the future of Ramda from there.  But at that point, we should pay strict attention to semver rules."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79ef8dfb6b84f242561d",
    "number": 3212,
    "body": "This is second step outlined in this [comment][1] by @customcommander (the first step was the creation of the `v0.27` branch).\r\n\r\nI don't know why pushing to GitHub does not trigger automated tests. :shrug:\r\n\r\n\r\n[1]: https://github.com/orgs/ramda/teams/core/discussions/2?from_comment=8#discussion-2-comment-8\r\n",
    "head_branch": "davidchambers/trim",
    "is_a_fork": false,
    "comments": [
      "> I don't know why pushing to GitHub does not trigger automated tests. 🤷\r\n\r\nI think that's probably because the GH workflow simply doesn't exist. The workflow as introduced by @hitmands was introduced _after_ the initial `v0.27` release IIRC so your branch doesn't have it :-)\r\n\r\nIf Travis was supposed to run then I have no idea. Perhaps it was disabled when GH workflow was introduced?",
      "It used to run in Travis.  Although it would be interesting to know why it stopped, that's pretty low priority at the moment."
    ],
    "commit_messages": [
      "Merge pull request #3212 from ramda/davidchambers/trim\n\nbackport security fix"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79f08dfb6b84f242561e",
    "number": 3210,
    "body": "This fixes #2533, where calling `identical` with cross-origin browser window objects throws a DOMException.\r\n\r\nThe reason for the exception is the checking for the placeholder property in the `curry*` functions.\r\n\r\nSince placeholder support makes no sense for commutative functions it can be removed from `identical`. This is done here by wrapping `isObject` with a `curry2` wrapper without placeholder property checks.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "~~@semmel The link to the issue looks wrong. Did you mean https://github.com/ramda/ramda/issues/2533 ?~~ (Fixed)",
      "> @semmel The link to the issue looks wrong. Did you mean https://github.com/ramda/ramda/issues/2533 ?\n\nYes indeed!",
      "Got a couple of comments (all minors; feel free to ignore) but these changes make sense to me. Thanks.",
      "@semmel Could you have a look at the \"Checks\" tab please? There are lots of linting errors that's failing the build atm.",
      "@customcommander Thanks for running the actions and looking into the results!\r\n\r\n`test/invariants.js` checks for the `length` property (arity?) in all `R.*` functions after applying to stuff.\r\n\r\nThe second test where the functions are applied to `R.__` fails because it expects `R.identical(R.__).length` to be 2.\r\n\r\nShould I patch `test/invariants.js` to exclude `R.identical` from the placeholder check ?",
      "> @semmel Could you have a look at the \"Checks\" tab please? There are lots of linting errors that's failing the build atm.\r\n\r\ndone",
      "@semmel This looks good to me but I really would like another review from @ramda/core ",
      "Perhaps we can wait until v0.28.0 is released?",
      "> Perhaps we can wait until v0.28.0 is released?\r\n\r\nMore approval would be fine. We can wait so long. \r\n\r\nWith the holiday season gone however, my focus will wander off. ⛰️ ",
      "I'd like the next version after 0.28.0 to be 1.0, and it might be a quick release now that @customcommander has so diligently been cleaning up issues.  After that, we can remove the longstanding restriction on ES6+ code in Ramda's codebase.  I would actually love for v2.0 to be rewritten in modern JS.  But I don't think we can include this fix in the next release.\r\n\r\nThis is not code to love, but it looks like a reasonable way around the problem.",
      "> After that, we can remove the longstanding restriction on ES6+ code in Ramda's codebase... But I don't think we can include this fix in the next release.\n\n@CrossEye Is that because of the use of `Proxy` in the test file?",
      "@semmel:\r\n\r\nWell, not just the `Proxy`, but also `Object.defineProperty`.  I was hurrying through trying to play catch-up with all the work @customcommander has been putting in, saw that code, and failed to notice that it was in the test file.  I'm much less concerned with test files and whether they are es3/es5/es6/esnext compatible.\r\n\r\nSo I withdraw my objection and will try to give this a closer look tomorrow.",
      "@CrossEye Do you think this is ready to go?"
    ],
    "commit_messages": [
      "Remove placeholder check from `identical` (#3210)\n\n* Remove placeholder check from identical\r\n\r\nThis fixes [#2533](https://github.com/ramda/ramda/issues/2533), were using identical with cross-origin browser window objects throws a DOMException.\r\n\r\nThe reason for the exception is the checking for the placeholder property in the `curry*` functions.\r\n\r\nSince placeholder support makes no sense for commutative functions it can be removed from identical. This is done here by rewriting `identical` as `isObject` in a self-written `curry2` wrapper.\r\n\r\n* test: identical: check properly curried function and placeholder property access\r\n\r\n* fix: support more than 2 arguments to identical\r\n\r\n* test(identical): mock cross-origin window, doc: added comment to source file why cannot use _curry2 as before\r\n\r\n* test: excempt identical from placeholder check, doc: note about missing placeholder support\r\n\r\n* linting"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79f18dfb6b84f242561f",
    "number": 3208,
    "body": null,
    "head_branch": "define-funding",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "chore: publicise funding options. close #3016 (#3208)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79f28dfb6b84f2425620",
    "number": 3207,
    "body": "As of time of writing the service https://david-dm.org/ seems to be down\r\nand/or unreliable. As Ramda is a no-dependency library I'm not seeing\r\nmuch value in this badge.\r\n\r\n![Screenshot 2021-12-26 at 18 29 23](https://user-images.githubusercontent.com/681975/147417021-ff42a5e2-da41-41ea-a6cb-40b0c2a2b666.png)\r\n\r\n---\r\n\r\nI know we have _way_ more important things to do but the broken link didn't look great and this is a very quick fix. If you prefer to keep the dependencies status here's a shields.io alternative:\r\n\r\n![Libraries.io dependency status for latest release](https://img.shields.io/librariesio/release/npm/ramda)\r\n\r\n\r\n",
    "head_branch": "remove-dependencies-badge",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "chore: remove dependencies badge (#3207)\n\nAs of time of writing the service https://david-dm.org/ seems to be down\r\nand/or unreliable. As Ramda is a no-dependency library I'm not seeing\r\nmuch value in this badge."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79f38dfb6b84f2425621",
    "number": 3206,
    "body": "Summary:\r\n\r\n1. Allow CI pipeline on pull requests too (regardless of the destination; might be useful for long-lived branches e.g. next major versions)\r\n2. In a previous PR the whitespace list was amended but not the test\r\n3. In a previous PR linting errors were introduced but never fixed\r\n\r\n@ramda/core Any thoughts?",
    "head_branch": "fix-failing-build-dec2021",
    "is_a_fork": true,
    "comments": [
      "Thanks, everyone.  I've been having hardware problems, which won't be addressed for a few more weeks.  It's great to see others taking up the helm!"
    ],
    "commit_messages": [
      "Fix for failing builds (#3206)\n\n* build: fix linting errors\r\n\r\n* test: remove u180E from test string as it was no longer considered as whitespace\r\n\r\n* build: run ci pipeline on pull request too"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79f48dfb6b84f2425622",
    "number": 3205,
    "body": null,
    "head_branch": "chore/lift-can-wrap-1-arity-fn",
    "is_a_fork": true,
    "comments": [
      "When I run Ramda's unit test on my computer, `R.trim` fails in its unit test, as follows: \r\n\r\n```js\r\n1109 passing (4s)\r\n  1 failing\r\n\r\n  1) trim\r\n       trims all ES5 whitespace:\r\n\r\n      AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\r\n+ actual - expected\r\n\r\n+ '\"᠎             　  Hello, World!\\\\t\\\\n\\\\v\\\\f\\\\r   ᠎\"'\r\n- '\"Hello, World!\"'\r\n      + expected - actual\r\n\r\n      -\"᠎             　  Hello, World!\\t\\n\\v\\f\\r   ᠎\"\r\n      +\"Hello, World!\"\r\n      \r\n      at strictEqual (test/shared/eq.js:8:10)\r\n      at Context.eq (test/trim.js:13:5)\r\n      at processImmediate (internal/timers.js:456:21)\r\n```",
      "I think Ramda should add a CI/CD procedure,  so that only those Pull Requests passed CI/CD's unit test can be merged.",
      "I found Ramda have a setting file: .github/workflows/build.yaml, but it seems not working now.",
      "Agreed.  I would like to get 0.28 out the door in the next week and then 1.0 within two months.  Then I want to revisit all the infrastructure, build, test, etc.\r\n",
      "> Agreed. I would like to get 0.28 out the door in the next week and then 1.0 within two months. Then I want to revisit all the infrastructure, build, test, etc.\r\n\r\nGreat. If there is anything I can do, let me know. I'll do my best to help.",
      "Your build is failing because of linting errors which have been fixed in #3206. If you rebase your branch against `master` it should be fixed.",
      "> Your build is failing because of linting errors which have been fixed in #3206. If you rebase your branch against `master` it should be fixed.\r\n\r\nDone.",
      "@adispring I think you only reverted the change to the GH workflow so this should be good to go as all other changes were previously approved already I believe. I'm happy for this to be merged."
    ],
    "commit_messages": [
      "chore: lift can wrap 1-arity function (#3205)\n\n* chore: lift can wrap 1-arity function\r\n\r\n* fix: try to fix github ci/cd workflows"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79f58dfb6b84f2425623",
    "number": 3201,
    "body": "As the title implies, this PR adds transducer support for uniq/uniqBy/uniqWith.\r\nUnit test is updated to cover this change.\r\n\r\nRelated issue #1683",
    "head_branch": "louietan/uniq-transducer",
    "is_a_fork": true,
    "comments": [
      "@louietan Thank you for such a well written pull request and for addressing the comments so quickly. I'm happy for this to be merged but would prefer another approval first."
    ],
    "commit_messages": [
      "feat: add transducer support for uniqBy/uniqWith (#3201)\n\nCo-authored-by: louie <louietan@hotmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79f68dfb6b84f2425624",
    "number": 3199,
    "body": "There's no need to restrict `whenTrueFn`'s return type to be consistent to `R.when`'s input type.",
    "head_branch": "chore/optimize-when-unless-signature",
    "is_a_fork": true,
    "comments": [
      "@adispring LGTM but you should get another approval from someone better than me at HM notations ;) Your reasoning did make sense to me though.",
      "@customcommander Ok, Thank you for your review. ",
      "I think I disagree.  Our signatures are aspirational.  They don't try to capture the ugliness of JS functions.  I'd rather we capture the expectation of how the function should be used rather than the result if you use it incorrectly.\r\n\r\nThe few places where we have `a | b` types already feel dirty to me; I'd rather not add another.\r\n\r\nI'd prefer to go in the other direction, and switch `ifElse` from\r\n\r\n```js\r\n// ifElse :: (*… → Boolean) → (*… → *) → (*… → *) → (*… → *)\r\n```\r\nto\r\n\r\n```js\r\n// ifElse :: (*… → Boolean) → (*… → a) → (*… → a) → (*… → a)\r\n```\r\n\r\nor even to move the ellipsis out of the functions and add it after some specific examples:\r\n\r\n```js\r\n// ifElse :: (a → Boolean) → (a -> b) → (a -> b) → (a -> b)\r\n//           (a → b → Boolean) → (a → b → c) -> (a → b → c) → (a → b → c)\r\n//           (a → b → c → Boolean) → (a → b → c → d) -> (a → b → c → d) → (a → b → c → d)\r\n//           ...\r\n```\r\n ",
      "@CrossEye In practical, If `R.when(pred, onTrueFn)`'s output type is consistent to input type, this will make it less usefull. In Ramda's documentation, `R.unless`'s example is as follows:\r\n\r\n```js\r\nlet safeInc = R.unless(R.isNil, R.inc);\r\nsafeInc(null); //=> null\r\nsafeInc(1); //=> 2\r\n```\r\n\r\nwhat's the type of `safeInc`?\r\n\r\n```js\r\nnumber -> number\r\n\r\n// or\r\nnull -> null\r\n\r\n// or\r\nnull | number -> null | number\r\n\r\n// or\r\nanything -> anything\r\n```\r\n\r\nAnd in the unit test of `R.when` and `R.unless`, the return type is also not consistent to the input type:\r\n\r\nhttps://github.com/ramda/ramda/blob/master/test/when.js\r\nhttps://github.com/ramda/ramda/blob/master/test/unless.js",
      "@adispring From a *technical* point of view you are right that *in principle* the return type is `a|b`. But in that case I find `when` and `unless` not suitable for function composition. They *can* but *should not* be used in that way.",
      "@semmel: Between my deciding that this was a correct change and hitting merge, your comment came through.\r\n\r\nI still think that this is not a particularly useful feature, but as we've documented it that way already, it's probably best if the signatures match. "
    ],
    "commit_messages": [
      "feat: There's no need to restrict whenTrue and whenFalse's return type (#3199)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79f78dfb6b84f2425625",
    "number": 3198,
    "body": "This is another try at my initial 3196 pull request but without the problems I encountered removing version control from the `dist` directory. ",
    "head_branch": "bugfix-is-3196",
    "is_a_fork": true,
    "comments": [
      "Looks perfect.  Thank you @wiowou!"
    ],
    "commit_messages": [
      "Bugfix is 3196 (#3198)\n\n* Object.create(null) should be considered an object\r\n\r\n* removing parens in for val in docs\r\n\r\n* fixing docs\r\n\r\nCo-authored-by: Behram Kapadia <behram.kapadia@me.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79f88dfb6b84f2425626",
    "number": 3197,
    "body": "Currently the `min`, `max`, `minBy` and `maxBy` use a simple comparison to check which is the greater/smaller value, and returns the value accordingly.\r\n\r\nHowever, in cases where a comparison is not possible (eg comparing `undefined` or an alphabetic character with a number), it simply returns the second value, since the expression evaluates to false.\r\n\r\nThis means that the following executed functions return different results:\r\n```\r\nmin(1, 'a')\r\nmin('a', 1)\r\n```\r\n\r\nThis PR checks whether at least one comparison result is true before returning a value, and throws an error if not.\r\n\r\nAdditionally, although it could be argued that there is no 'min'/'max' when the function is supplied with two of the same value, since one is not greater/less than the other, practically I believe one would expect a returned value rather than an error in this scenario. Therefore the latter of the two (equal) values is returned.\r\n\r\nNote: I notice the `trim` test failing locally, although this is happening on master too so shouldn't be caused by this PR.",
    "head_branch": "min-max-bugfix",
    "is_a_fork": true,
    "comments": [
      "Thank you very much for your well-written and well-considered PR.\r\n\r\nWhile I need a little more time to consider this, I do have some serious objections.\r\n\r\nFirst, Ramda is extremely wary of throwing exceptions.  Functions that throw exceptions do not compose well, and improving functional composition is one of the main themes of the library.  Ramda has mostly subscribed to the Garbage In/Garbage Out philosophy.  If you supply what the function is designed to take, then we'll do what's expected.  If you don't, anything might happen.  \r\n\r\nSecond, I'm not happy with introducing `equals` here.  These are so far a very efficient function, and they operate on the JS notion of comparison.  But with `equals`, we're adding a fairly heavy-weight function and we are sometimes precluding the JS comparison.  Moreover, doing this, is a surprising breaking change, and not only for those supplying incompatible types.  [For instance][rr]:\r\n\r\n```js\r\nconst max2 = (a, b) => {\r\n  if (equals (a, b)) { return a; }\r\n  if (a > b || b > a) { return b > a ? b : a; }\r\n  throw new TypeError('cannot compare ' + toString(a) + ' with ' + toString(b));\r\n}\r\n\r\nconst foo = (id, val) => ({  // or a class or constructor function\r\n  id, \r\n  val, \r\n  equals: (that) => that.id == id, \r\n  valueOf: () => val\r\n})\r\n\r\nconst first = foo ('a', 5)\r\nconst second = foo ('a', 7)\r\n\r\nconsole .log (max (first, second))   //=> {id: \"a\", val: 7}\r\nconsole .log (max2 (first, second))  //=> {id: \"a\", val: 5}\r\n```\r\n\r\n(This has to do with the fact that Ramda's `equals` [delegates to][eq] an `equals` method on the objects if they have one.)\r\n\r\nSo I'm not really happy with this implementation.  But I agree that there is probably something to fix if we can't guarantee that, for instance,  `max (a, b) === max (b, a)`.  So I think *something* should be done.  I haven't yet tried to think about what that is, though.\r\n\r\n \r\n [eq]:https://github.com/ramda/ramda/blob/a1a90ddd34c66d8738598beccbb0d50c3ed9ad99/source/internal/_equals.js#L45-L53\r\n  [rr]: https://tinyurl.com/yglssxtg\r\n\r\n",
      "@CrossEye thanks for the reply - both points make a lot of sense.\r\n\r\nI think based on the Garbage In/Garbage Out philosophy, we could probably simplify the scope of the PR, and just check whether both arguments are defined before making the comparison. This was my original use case, where the function being passed `undefined` was causing some unpredictable results.\r\n\r\nI see it less likely that people will try to compare `'a'` to `1`, vs `1` to `undefined`, for example.\r\n\r\nThat would allow us to remove the `equals` function, and only throw an error where we really need to - or possibly even treat `undefined` in the same way as JS treats `null`, which is to treat it like `0` in terms of the comparison operator.\r\n(Not sure about this one, but could be done if we really don't want to throw an error).",
      "@abrwn:  What if we use the four-part logic resulting from `a < b` and `a > b`?  If these differ, return the appropriate value.  If they're both true or both false, then we make a consistent, but arbitrary choice, perhaps the one with the alphabetically earlier \"typeof\" result, and if that fails, the one with the alphabetically earlier result from `R.toString`, and only if that fails, choosing the the first one for `min` and the last one for `max`.  (This last might involve a minor backward incompatibility, but I think it would help if we wanted to use these in any stable sorting algorithm.)\r\n\r\nI thought we might need two `isNaN` checks in there as well, but for NaN, it simply doesn't matter which value we return.\r\n\r\nThis would let us avoid ever throwing, and would defer the heavyweight `toString` call until all other options have been exhausted.\r\n\r\n",
      "Hi, thanks for contributing, I love seeing this much engagement :)\r\n\r\nI don't have strong opinions here, \r\nmy 2 cents are that I would not want this (or any other function in this) library to oversee too much how it's used...\r\n\r\nThere are many functions here that if called the wrong way may lead to unexpected behaviours.\r\n\r\nWe should simply not call `min` (etc.) with something that isn't either a `number` or something that cannot be lexicographically compared (e.g. dates and strings).\r\n\r\ne.g.:\r\n\r\n```ts\r\nR.min(10, 20); // 10\r\n\r\nR.min('a', 'b') // 'a'\r\n\r\nR.min(new Date(2021, 10, 10), new Date(1986, 6, 16)) // May 16, 1986\r\n\r\nR.min(undefined, null); // invalid function call\r\nR.min({}, []); // invalid function call\r\n```\r\n\r\nfor instance, `R.map(R.toUpper, null)` just leads to a js error... and that is fine imho",
      "@hitmands: \r\n> I would not want this (or any other function in this) library to oversee too much how it's used...\r\n\r\nYes, that's generally been Ramda's philosophy.  I don't really want to change that.  But we do avoid throwing errors as much as possible.\r\n\r\nAnd even when we say all bets are off when a function is misused, when we can give guarantees about certain features, it would be nice to do so.\r\n\r\nThus, although we've never really stated them, there are laws that I would expect, say, `min` to uphold, even with bad data:\r\n\r\n```\r\nfor all a, b, c  \r\n    min (a, b) = a  or  min (a, b) = b          (closed)\r\n    min (a, b) = min (b, a)                     (commutative)\r\n    min (a, min (b, c)) = min (min (a, b), c)   (transitive)\r\n```\r\n\r\nThis PR demonstrates that we're violating commutativity (transitivity as well.)  I think we could reasonably fix these functions to avoid that without too much effort.  It cannot be perfect -- it's JS after all -- but it can become at least more consistent.",
      "@CrossEye @hitmands @customcommander thanks all for input.\r\n\r\nSo would @CrossEye 's suggested approach, where we choose a `max` or `min` based on a set criteria be acceptable, as a balance between making these functions more predictable, and avoiding introducing heavyweight functions and/or throwing errors?\r\n\r\nhttps://github.com/ramda/ramda/pull/3197#issuecomment-964522880\r\n\r\nHappy to apply this if so.\r\n\r\n@CrossEye by the way, AFAIK `a < b` and `b < a` will never both be `true`, but they can both be `false` if the expression can't be evaluated. Which may simplify the logic slightly.",
      "@abrwn:\r\n\r\n> By the way, AFAIK a < b and b < a will never both be true, but they can both be false if the expression can't be evaluated. Which may simplify the logic slightly.\r\n\r\nD'oh!   😉 \r\n\r\nYes, although I might still implement it with `if ((a < b) == (b < a))`.  But any implementation that captured the three cases would work.\r\n\r\nI think this would be a good compromise between what we really want and what JS will allow us.\r\n\r\n  -- Scott",
      "@abrwn:\r\n\r\nAre you interested in updating this PR in the manner discussed?  If not, do you mind if we close this and open another PR for that?\r\n\r\n",
      "@CrossEye I would be interested- sorry for the silence. I'll make some changes this week and update the PR. ",
      "No problem at all.  We've never been quick around here.  But we are trying to speed up.",
      "@CrossEye I've pushed a new commit based on the above discussion, using the string-based comparisons mentioned.\r\nReady for re-review.",
      "@abrwn I'm going give it a re-review this weekend with the intention to merge next week at the latest if all is good.",
      "> One minor nit. Otherwise this looks great.\r\n\r\n@CrossEye \r\nThanks - updated.\r\nAlso realised I was using `const` instead of `var` so updated that."
    ],
    "commit_messages": [
      "Improve min and max logic (#3197)\n\n* Improve min and max logic\r\n\r\n* Fix import and update tests\r\n\r\n* PR comments\r\n\r\n* Change const to var, calculate toString once\r\n\r\nCo-authored-by: Alex Browne <alex.browne@touchsurgery.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79f88dfb6b84f2425627",
    "number": 3196,
    "body": "I think the expectation when using R.is(Object) is that an instance of Object.create(null) should qualify as an object. This was not the case before.",
    "head_branch": "bugfix-is",
    "is_a_fork": true,
    "comments": [
      "I understand, please do mull it over. I would greatly appreciate if you could share your final thoughts either way. ",
      "I do agree that we want this.  My hesitation had to do with imagining scenarios where a user type shadowed the Object constructor (perhaps a `SentenceDiagram` tool with functions like `Subject` and `Object`) and we now are using a constructor with the name `'Object'` for something different.  I actually started trying to write up an example when I realized that these would *already* be objects, and the new code wouldn't change anything.  D'Oh!\r\n\r\nI would like to fix the code layout.  It was already hard to read and adding new clauses like this makes it harder still.  And while we're at it, we can reduce the duplication.  Perhaps [this version][rr] would do:\r\n\r\n```js\r\nconst is = function is(Ctor, val) {\r\n  return val instanceof Ctor ||\r\n         val != null && (\r\n            val.constructor === Ctor || \r\n            (Ctor.name === 'Object' && typeof val === 'object')\r\n         )\r\n}\r\n```\r\n\r\n(with the currying restored, of course.)\r\n\r\nWe still need to address the documentation.  Do you want to take a swing at that or should I?  I think an extra sentence explaining an additional `true` result would probably be enough.\r\n\r\n\r\n  [rr]: https://tinyurl.com/yhcmlaea",
      "Thank you, that is certainly clearer and better! I have taken a first go at the docs. It took me a second to realize that the docs were directly in `is.js`. I have created a new branch `bugfix-is-3196` that includes these changes and fixes the problem with `dist/` though the changes to `is.js` are also represented in this branch.",
      "This looks good to me.  Any objections to this, @ramda/core?",
      "Please look to PR 3198. I had problems removing the `dist` directory from version control and found it easier to simply create another branch."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79f98dfb6b84f2425628",
    "number": 3194,
    "body": null,
    "head_branch": "mohit/typo-fix",
    "is_a_fork": true,
    "comments": [
      "Looks like an easy PR to merge? @ramda/core "
    ],
    "commit_messages": [
      "Merge pull request #3194 from mohit61/mohit/typo-fix\n\nfixed typo in test"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79fa8dfb6b84f2425629",
    "number": 3192,
    "body": "**NOTE** from the project maintainer: **Security Professionals**: Please read the whole thread before accepting this at face value.  This is not a real vulnerability!  We're just trying to get the CVE folks to understand that (or even to respond to us.  ☹️) \r\n\r\n----------\r\n\r\nAdded protection from prototype poisoning to mapObjIndexed().\r\nFor Proof of Concept exploit of the vulnerability visit https://jsfiddle.net/3pomzw5g/2/ ",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "I also wonder whether this would apply to other things? I'm thinking perhaps prop & path functions or lenses? I don't know I haven't checked yet.",
      "I think \"prototype poisoning\" is about altering the prototype of core js elements such as `Object`.  The idea is not that you could merge a prototype into a newly created object, but that by altering, say, `Object .prototype`, you can change the behavior of existing objects.\r\n\r\nThe canonical example seems to [look like this][r1]:\r\n\r\n```js\r\nconst naiveMerge = (a, b) => {\r\n  // Just to illustrate the problem.  But could happen with a real recursive merge\r\n  Object .entries (b) .forEach (([k, v]) => \r\n    Object .keys (v) .forEach (inner => a[k][inner] = v[inner])\r\n  )\r\n  return a                      \r\n}\r\n\r\n// This user has no `isAdmin` field\r\nconst user = {name: 'fred'}\r\nconsole.log(`Before: ${user.isAdmin}`); //=> undefined\r\n\r\n// We get this from some perhaps-untrustworthy source\r\nconst maliciousUserInput = '{\"__proto__\": {\"isAdmin\": true}}'\r\n// but we're smart enough to sanitize it with\r\nconst ourObject = naiveMerge ({}, JSON.parse(maliciousUserInput)) \r\n// However, naiveMerge adds `isAdmin` to `Object.prototype`, with value `true`\r\n\r\n// And now that same user has `isAdmin` set\r\nconsole.log(`After: ${user.isAdmin}`); //=> true !!!\r\n\r\n// if we call naiveMerge again we get an error.\r\n// But a less naive version might go undetected.\r\n```\r\n\r\nBoth jQuery and lodash were caught by this.  I don't think it's true for Ramda because of our immutable design.  It [doesn't happen][r2] if we use `R.merge` (or `R.mapObjIndexed`).  But I'm far from certain that it could never happen.  I think this suggests a cleanup where we make sure any place we add properties to a blank object starts with `Object .create (null)` rather than `{}`.\r\n\r\nBut I don't think we need this change just yet.\r\n\r\n  [r1]: https://tinyurl.com/yf6mvbq3\r\n  [r2]: https://tinyurl.com/yhluqjyw",
      "@CrossEye What about this though?\r\n\r\n```javascript\r\nconst isAdmin = o => o.admin == true;\r\nconst check = compose(isAdmin, mapObjIndexed(identity));\r\n\r\ncheck(JSON.parse('{\"__proto__\":{\"admin\":true}}'));\r\n//=> true\r\n```\r\n\r\nI think the concern is that with `__proto__` an attacker could try to sneak in some extra properties.",
      "@customcommander:\r\n\r\nBut that's a very different attack surface.  If you are creating your user account by JSON-parsing something from an untrustworthy source, then they could just as well pass you `'{\"admin\": true}'`.  That they sneak it into the prototype is not a big deal.  But if your sprawling web app uses some third-party API for a trivial bit of fluff and that API is compromised, a true prototype poisoning would mean that your previously secure user object (in JS: ha!) now suddenly can get admin privileges.\r\n\r\nThe problem is not with what happens with this object, but with what it allows on all other objects.\r\n\r\nIt's these sorts of things that I think people are worried about:\r\n\r\n  - https://nvd.nist.gov/vuln/detail/cve-2018-3721\r\n  - https://nvd.nist.gov/vuln/detail/cve-2019-10744\r\n  - https://nvd.nist.gov/vuln/detail/cve-2019-11358\r\n\r\nThat's a real worry, and I'm far from certain Ramda doesn't have any such issues.  I think we need to go through it to check.\r\n\r\nBut I'm less worried about `isAdmin` slipping into the object we're actually creating.",
      "@CrossEye  To continue the `isAdmin` example, the application developer could be using a check for prohibited properties, thus preventing direct injection of `isAdmin: true`. Since the initial object (`hasOwn` in the JSFiddle) doesn't in fact have that property, it would be able to bypass such checks.\r\n\r\nConsidering including \"prototype\" in the check - it is a common practice to account for all 3 properties, as they are known to be exploited in similar scenarios. I agree that in this case it is unnecessary, however I would suggest to keep it in case something changes in the implementation (e.g. recursive version of property assignment).",
      "@Marynk:\r\n\r\nDo you have examples of CVEs for this problem, or prior art of prohibiting those properties?\r\n\r\nWhat I'm worried about is suddenly having magical property names we can no longer support.   Users might have legitimate needs for `prototype` or `constructor`.  I am much less worried about `__proto__`.  Someone who claims that name as a business requirement is probably not being honest.\r\n\r\nI don't want to diminish the issue here.  It's worth discussing.  But now that you've brought up prototype poisoning, I think it's much more important to test whether this can happen in Ramda.\r\n\r\n\r\n\r\n",
      "@CrossEye :\r\n\r\nWe are a consumer of ramda, and got a VULN ticket to fix this `Prototype Pollution vulnerability found in ramda`. Just want to know if there are any tests set up to confirm if this issue can happen in Ramda? or if we can adopt the changes in this PR to fix this issue?",
      "@yanruzhang: I know nothing about such VULN tickets.  I don't have any sources for this.  I would hope that whatever gave you such a ticket would be able to give you information as well.  (And I hope you would share that with us!)\r\n\r\nThe code here is for a specific function and IMHO the test case does not actual demonstrate that vulnerability.  But that does not mean there is not one around, in this or another function.  But I'd like to see evidence of the problem before worrying about solutions.",
      "The VULN ticket is a kind of ticket we use to fix vulnerability issues. There's one about  Ramda, and more specifically, _curry2 function 👇 , which this PR seems want to address.  \r\n\r\n![image](https://user-images.githubusercontent.com/40888060/140859591-9ebf5705-1919-41ea-9c02-139c95a81fc7.png)\r\n\r\nDo you mean this _curry2 function doesn't actually have `Prototype Pollution` vulnerability?",
      "@yanruzhang: This PR is not about `_curry2`; it's about `mapObjIndexed`.  \r\n\r\nBut can you tell me the source of that report?  I haven't seen any reports of Prototype Pollution in Ramda, except for this issue, which I think is invalid, and I've been looking around for references to it in various  sources, but I don't know much about them.  What generates that report for you?  Does it have an online reference to the vulnerability?\r\n\r\n`_curry2` almost certainly does not have such a vulnerability, but it's commonly used to wrap other functions, and if there is a vulnerability, it's conceivable that the system simply wasn't sophisticated enough to find the true source of it.  But without knowing where it's from, it's very hard to tell.",
      "@CrossEye \r\nThis is the source of the report: https://sca.analysiscenter.veracode.com/vulnerability-database/security/prototype-pollution/javascript/sid-32467",
      "@yanruzhang: I did find that one in further research, but I can't find anywhere it gives a demo of the supposed vulnerability.  I'll keep looking, but that site seems pretty damned opaque.  Do you know anything about it?\r\n\r\n",
      "@CrossEye \r\nSometime they don’t tell how to reproduce the vulnerability issue. Thanks for further looking into it, and we'd appreciate if you could let us know when you confirm if this can actually happen to `ramda`: \r\n`An attacker can inject properties into existing construct prototypes via the `_curry2` function and modify attributes such as `__proto__`, `constructor`, and prototype`",
      "@yanruzhang:\r\n\r\nIf that's all the information we can get, then I'm pretty sure I can simply say no, that cannot happen.\r\n\r\n`_curry2` depends on `_isPlaceholder` and `_curry1`.  `curry1` depends on `isPlaceholder`.  Outside the calls to these internal functions, `curry1` and `curry2` only call the function supplied as a parameter.  And `isPlaceholder` checks the `typeof` of the supplied object and tests whether a specific string property of that object is `true`.  None of this can change the prototype of any object.\r\n\r\nIf you want to dig through every Ramda function to see if there's some possible prototype pollution, feel free.  Otherwise, I feel it's incumbent upon the reporter to demonstrate the existence of a problem.  But I can find no more information from veracode.  I've reached out to them but not heard back.\r\n\r\nThe simplest thing I can think of to check is the sort of [canonical prototype pollution][r1]; the [Ramda equivalent][r2] does not share the issue.  So my first thought is that no, this is not a real issue.\r\n\r\nThe code supplied in this PR also does not demonstrate prototype pollution either.\r\n\r\nWithout an actual demonstration, I'm not sure where to go.   I don't want to close this.  What I really want is to find out what veracode says in an actual problem.  But I don't have any idea how to pursue it.  Any ideas?\r\n\r\n\r\n  [r1]: https://tinyurl.com/yf6mvbq3\r\n  [r2]: https://tinyurl.com/ygms9hth",
      "I've posted a question in StackOverflow about this: https://stackoverflow.com/q/69936667.\r\n\r\nPerhaps someone there will have some information.",
      "So I've heard back from Veracode, and their source for the issue is this PR.\r\n\r\nI will need to spend some time to thoroughly write up my objection.  But it's pretty clear to me that this does not do what's described as prototype pollution.  That you can create an object with a prototype is not prototype pollution.  Or if it is, then libraries are irrelevant, as [a simple tweak][f2] to the [original Fiddle][f1] shows that the same thing is true for `Object.assign`. \r\n\r\nThe [snyk lodash report][sn] has a good test case for prototype pollution:\r\n\r\n```js\r\nconst mergeFn = require('lodash').defaultsDeep;\r\nconst payload = '{\"constructor\": {\"prototype\": {\"a0\": true}}}'\r\n\r\nfunction check() {\r\n    mergeFn({}, JSON.parse(payload));\r\n    if (({})[`a0`] === true) {\r\n        console.log(`Vulnerable to Prototype Pollution via ${payload}`);\r\n    }\r\n  }\r\n\r\ncheck();\r\n```\r\n\r\nThe closest Ramda equivalent is `mergeDeepRight`, and [that does not share][r1] this problem.  [Nor does `mapObjIndexed`][r2]; I will try to write up a full explanation to share with the Veracode team, although that might be time-consuming. \r\n\r\n\r\n  [f1]: https://jsfiddle.net/3pomzw5g/2/\r\n  [f2]: https://jsfiddle.net/CrossEye/tm2bvopx/1/\r\n  [r1]: https://tinyurl.com/ygdw4fbv\r\n  [r2]: https://tinyurl.com/yjr5cv7l\r\n  [sn]: https://security.snyk.io/vuln/SNYK-JS-LODASH-450202",
      "Below is a response I've drafted to send to Veracode.  Does anyone have any suggested improvements?\r\n\r\n@ramda/core \r\n\r\n> Overview\r\n> --------\r\n> \r\n> There seems to be an [erroneous vulnerability report][vr] in Veracode, saying that Ramda is subject to prototype pollution.\r\n> \r\n> While we certainly have not definitively demonstrated that nothing in Ramda has this vulnerability, the examples so far are *not* examples of prototype pollution, only of the ability to create objects that the user didn't know would contain custom prototypes.\r\n> \r\n> It seems like this report should be withdrawn.\r\n> \r\n> \r\n> Prototype Pollution\r\n> -------------------\r\n> \r\n> Prototype pollution is the ability for crafted input supplied to a generic function to the alter the prototype of built-in JavaScript constructs, such as `Object`.\r\n> \r\n> One example, from a [WhiteSource blog][ws], is: \r\n> \r\n> ```js\r\n> const getObject = require('getobject');\r\n> var obj = {}; \r\n> var obj2 = 1; \r\n> console.log(\"Before Polluting : \" + obj2.Check);  //~> 'Before Polluting : undefined'\r\n> getObject.set(obj, \"__proto__.Check\", \"polluted\");\r\n> console.log(\"After Polluting: \" + obj2.Check);  //~> 'After Polluting: polluted'\r\n> ```\r\n> \r\n> Another one, closer to the case in question, from a [snyk vulnerability report][sr], looks like this:\r\n> \r\n> ```js\r\n> const mergeFn = require('lodash').defaultsDeep;\r\n> const payload = '{\"constructor\": {\"prototype\": {\"a0\": true}}}'\r\n> \r\n> function check() {\r\n>     mergeFn({}, JSON.parse(payload));\r\n>     if (({})[`a0`] === true) {\r\n>         console.log(`Vulnerable to Prototype Pollution via ${payload}`);\r\n>     }\r\n>   }\r\n> \r\n> check(); //~> 'Vulnerable to Prototype Pollution via {\"constructor\": {\"prototype\": {\"a0\": true}}}'\r\n> ```\r\n> \r\n> What these have in common is that calling `getObject.set` or `lodash.defaultsDeep` modifies the prototype of the built-in `Object`, and thus they affect the behavior not just of the resulting object they return but also of any existing JavaScript objects and any newly created ones.  This would allow a malicious user to perform denial-of-service attacks and even perform actions without proper permissions, such as modifying or deleting data in a Node.js application.\r\n> \r\n> \r\n> History\r\n> -------\r\n> \r\n> [A Veracode vulnerability report][vr] said:\r\n> \r\n> > ramda is vulnerable to prototype pollution. An attacker can inject properties into existing construct prototypes via the `_curry2` function and modify attributes such as `__proto__`, `constructor`, and `prototype`.\r\n> \r\n> It has recently been updated to say this instead:\r\n> \r\n> > ramda is vulnerable to prototype pollution. An attacker is able to inject and modify attributes of an object through the `mapObjIndexed` function via the `__proto__` property.\r\n> \r\n> (It seems that this update was only in the last day or so, but that's not entirely clear.)\r\n> \r\n> This was brought to our attention by a [comment][c1] on an [open issue][oi] in Ramda.  That issue, as discussed below, does not demonstrate prototype pollution, although it's an understandable mistake.  The commenter was able to point us to that report, but there was no other information available.\r\n> \r\n> I am one of the founder of Ramda and currently its chief maintainer.  I reached out through Veracode's contact form online asking for more details.  When I didn't hear back in a few days, I dug a bit deeper and found contact emails online as well.  I emailed them, and a few days later got a response from a salesperson who thought I was in the market to buy their product.  I explained the problem and was told that this would be forwarded to someone who might know more.  Today, I heard back from someone else, a sales manager who had spoken to the technical team, who explained\r\n> \r\n> > We have based this artifact from the information available in https://github.com/ramda/ramda/pull/3192. In the Pull Request, there is a POC (https://jsfiddle.net/3pomzw5g/2/) clearly demonstrating the prototype pollution vulnerability in the mapObjIndexed function. In the demo, the user object is modified via the `__proto__` property and is considered a violation to the Integrity of the CIA triad. This has been reflected in our CVSS scoring for this vulnerability in our vuln db.\r\n> > \r\n> > There is also an unmerged fix for the vulnerability which has also been included in our artifact ( https://github.com/ramda/ramda/pull/3192/commits/774f767a10f37d1f844168cb7e6412ea6660112d )\r\n> \r\n> In other words, the issue that was used to comment on Veracode's vulnerability report was earlier the issue which triggered the report.  Oh my aching head!  😄\r\n> \r\n> That response continued:\r\n> \r\n> > Please let me know if there is a dispute against the POC, and we can look further into this.\r\n> \r\n> This document is my attempt to explain the issue and thoroughly explore the reported vulnerability.\r\n> \r\n> \r\n> Reported Vulnerability\r\n> ----------------------\r\n> \r\n> The reported issue was demonstrated with the [code on a Fiddle][f1].  It looks like this:\r\n> \r\n> ```js\r\n> const hasOwn = JSON.parse('{\"__proto__\": {\"isAdmin\": true}}');\r\n> console.log(hasOwn.isAdmin); //~> undefined\r\n> const mapped = R.mapObjIndexed((val) => val, hasOwn);\r\n> console.log(mapped.isAdmin); //~> true\r\n> ```\r\n> \r\n> Note that `hasOwn` does not have `isAdmin` in its prototype, but `mapped` does have it.\r\n> \r\n> The suggestion is that because of this Ramda's `mapObjIndexed` can cause prototype pollution.\r\n> \r\n> \r\n> Dispute\r\n> -------\r\n> \r\n> All the top answers on a [search for \"prototype pollution\"][dd] have variants of [the description on codeburst][cb]:\r\n> \r\n> > Prototype Pollution, as the name suggests, is about polluting the prototype of a base object which can sometimes lead to arbitrary code execution.\r\n> \r\n> The above code does not do so.  It does not pollute the base objects.  It simply offers a surprising way to adjust the prototype of one specific object.  And this behavior has little to do with Ramda; it's part of the base language as well.  If we replaced the call to Ramda's `mapObjIndexed` with one to JavaScript's `Object.assign`, we get [the exact same behavior][f2].  As far as I can tell, there is no report out against `Object.assign` for prototype pollution.\r\n> \r\n> Another way to look at it is to view some slight variants of the `snyk` demonstration above for `mergeDeepRight` and `mapObjIndexed`.  [In each][r1] of [these cases][r2], the vulnerability is not found.\r\n> \r\n> There's a reason these exploits are usually mentioned in combination of path-setting or deep merging and that they usually involve `JSON.parse`:  The usage of `JSON.parse` allows the code to create the `__proto__` node without actually updating the prototype directly.  And then many deep-merge and path-setting functions work by mutating their input parameter with the values supplied.  In combination, that means that these tools will eventually do a deep set of `someObject .__proto__ .isAdmin`, and since a plain object supplied, `someObject .__proto__` will be `Object .prototype`, which is then mutated to include `isAdmin`.\r\n> \r\n> Ramda's design is different.  One of its guarantees is that it never mutates input data.  Ramda's equivalent of a deep set, [`assocPath`][ap], does not add properties to your object.  Instead it returns a new object, with all properties copied over from the old one and with your new property added or altered on this clone.  The various `merge` functions operate similarly.\r\n> \r\n> That means there is a wall between the data you're trying to insert and the underlying Object prototype.  It's not clear if this wall is unbreachable, but it's more difficult than in the jQuery or lodash cases, where immutability is not the default.  While avoiding such an exploit was not a reason for Ramda's immutable design, it is a good demonstration of the advantages it offers.\r\n> \r\n> So this vulnerability report was based on an invalid GitHub issue.  The Ramda team will close that issue soon.  In fact, it was only because of this report that it's been left open.\r\n> \r\n> Can the Veracode team remove this entry from its database?\r\n> \r\n> \r\n> Follow-up\r\n> ---------\r\n> \r\n> The history above was a dry recital of the order of events, but it has been a very frustrating process.  Would it be possible for Veracode's [online reports][vr] to either directly include or offer a link to supporting evidence?  Here if the report linked back to [the GitHub issue][oi] or supplied a proof-of-concept of the vulnerability, the Ramda team could have responded to this much more effectively.  Or, if that's not appropriate because they are reported before the team has a chance to work on the issue, could the report offer a \"Challenge this finding\" link with a way for tool maintainers to do what I've done?\r\n\r\n\r\n\r\n  [ap]: https://ramdajs.com/docs/#assocPath\r\n  [cb]: https://codeburst.io/what-is-prototype-pollution-49482fc4b638\r\n  [c1]: https://github.com/ramda/ramda/pull/3192#issuecomment-963678528\r\n  [dd]: https://duckduckgo.com/?q=prototype+pollution\r\n  [f1]: https://jsfiddle.net/3pomzw5g/2/\r\n  [f2]: https://jsfiddle.net/CrossEye/tm2bvopx/2/\r\n  [oi]: https://github.com/ramda/ramda/pull/3192\r\n  [r1]: https://tinyurl.com/y3bxw552\r\n  [r2]: https://tinyurl.com/yxugnb64\r\n  [sr]: https://security.snyk.io/vuln/SNYK-JS-LODASH-450202\r\n  [vr]: https://sca.analysiscenter.veracode.com/vulnerability-database/security/prototype-pollution/javascript/sid-32467/\r\n  [ws]: https://www.whitesourcesoftware.com/resources/blog/prototype-pollution-vulnerabilities/",
      "@CrossEye So the GH issue was opened to fix an alleged vulnerability which VeraCode illustrated with my own example which wasn't even close to describing an actual prototype pollution? Bit confused right now.\r\n\r\nThanks for looking into this! LGTM\r\n\r\n",
      "I've had no response yet, but now they've changed the description to:\r\n\r\n> ramda allows object prototype manipulation. An attacker is able to inject and modify attributes of an object through the `mapObjIndexed` function via the `__proto__` property. However, due to ramda's design where object immutability is the default, the impact of this vulnerability is limited to the scope of the object instead of the underlying object prototype. Nonetheless, the possibility of object prototype manipulation as demonstrated in the proof-of-concept under References can potentially cause unexpected behaviors in the application. There are currently no known exploits.\r\n\r\n(Of course `References` is not a link, and appears nowhere else on that page.) \r\n\r\nI'm trying to decide if I want to get snarky and ask if they've filed the same issue against `Object .assign`.  Probably not at least until they respond.\r\n\r\nFor now, though, the only response seems to be that I've been added to their marketing email list.  😦",
      "Hey Scott, really appreciate you looking into this. Longtime fan and user of Ramda here!\r\n\r\nThrough my enterprise employer's account with VeraCode itself I was able to see the `References` tab/section, \r\nhere's what's in it:\r\n\r\n![image](https://user-images.githubusercontent.com/373565/143274868-e633e980-6117-49a5-971e-05f45cad74ff.png)\r\n\r\nThus, their proof-of-concept is: https://jsfiddle.net/3pomzw5g/2/\r\n(added below for completeness):\r\n\r\n```\r\n// when objects are parsed, all properties are created as own (the objects can come from outside sources \r\n// (http requests/ file))\r\nconst hasOwn = JSON.parse('{\"__proto__\": {\"isAdmin\": true}}');\r\n\r\n// does not have the property,  because it's inside object's own \"__proto__\"\r\nconsole.log(hasOwn.isAdmin);\r\n\r\nconst mapped = R.mapObjIndexed((val) => val, hasOwn);\r\n\r\n// after the method executes, hasOwn.__proto__ value (isAdmin: true) replaces the prototype of \r\n// the newly created object, leading to potential exploits.\r\nconsole.log(mapped.isAdmin);\r\n```\r\n\r\nThe other links merely reference this PR and the [mitigation commit](https://github.com/ramda/ramda/commit/774f767a10f37d1f844168cb7e6412ea6660112d).\r\n\r\nAnd yes, quite wacky that one has to be logged in to be able to see a public `vuln`.. Hope this helps!",
      "@Dr1Ku:\r\n\r\nThank you very much.  That helps a lot.  It confirms what I suspected from their email.\r\n\r\nI feel as though they've changed only their description in response to my dispute.  But at least I believe it's progress.\r\n\r\nAlso, \"wacky\" is a much more polite word than most of the ones I had in mind!  😄 ",
      "Hey Scott, sure no worries. Yes I think they reacted to your email at least :D And apparently it's a been classified as a \"SourceClear Premium (No CVE)\" 'disclosure' (more like 'opinion piece'!) which renders the details and -worst of it all- the PoC viewable for logged-in customers only.. what a way to treat FOSS! Within my sphere of influence (read: project) we're going to go for bandaids like using more `ramda-adjunct` and temporarily ousting `ramda` just to jump through some compliance hoops, oh well.",
      "After no response for a week, I've sent the following to Veracode:\r\n\r\n> Hi Folks,\r\n> \r\n> I'm wondering if there is any response to this.\r\n> \r\n> I see that the vulnerability report has been updated but not removed.  I still dispute the altered version of it.  If this behavior is a true vulnerability, could you point me to the equivalent report on JavaScript's `Object.assign`, which, as demonstrated earlier, has the exact same issue as the function in question.\r\n> \r\n> My immediate goal is to see this report retracted.  But I also want to point out the pain involved in this process, pain that I think Veracode could fix:\r\n> \r\n> I am not a customer, but your customers are coming to me as Ramda's maintainer to fix a problem you've reported.  That report really should have enough information in it to allow me to confirm the vulnerability reported.  I've learned that such information is available to a logged-in customer.  That doesn't help me or others in my position to find the information.  Resorting to email and filtering it through your sales department, is a pretty horrible process.  Could you alter your public reports to contain or point to a proof of concept of the vulnerability?  And could you further offer in the report some hint at a dispute process?\r\n> \r\n> Thank you,\r\n> \r\n>   -- Scott\r\n\r\nI've got to say this is extremely frustrating.",
      "I heard back from Veracode today.  The sales manager, who has been a very helpful go-between for me with the engineering staff, said:\r\n\r\n> I wanted to provide an update, my engineering team got back to me with the following:\r\n> \r\n> “updating our DB to remove the report is the final outcome”\r\n> \r\n> I have also asked for them to let me know about your question regarding the ability to contend findings and will relay that back once feedback is received.\r\n> \r\n>  Otherwise, I hope this satisfies your request and please let me know if any further action is needed from us at this time.\r\n\r\nThis is very good news.  I'm still going to follow up with them on issues of an easier and transparent dispute process, and will report the results when I have them.\r\n\r\n----------\r\n\r\n@Dr1Ku: would you be willing to check if this issue seems to have been cleared up?  [The page][vr] at the center of this is gone (or no longer shows the content it had before.)  Their [ramda page][rp] still lists one vulnerability.  But without logging in, I still can't check to see if this is the same prototype pollution one or something else.  It's quite possible this is about another issue which is fixed in master but not yet deployed.  But I simply cannot tell.\r\n\r\n\r\n  [rp]: https://sca.analysiscenter.veracode.com/vulnerability-database/libraries/ramda/javascript/bower/lid-657852/summary\r\n  [vr]: https://sca.analysiscenter.veracode.com/vulnerability-database/security/prototype-pollution/javascript/sid-32467/",
      "Hey Scott, their page for the prototype-pollution issue (SID-32467) is indeed not showing anything at the moment:\r\n\r\n![image](https://user-images.githubusercontent.com/373565/144565791-ee7aa947-2781-4272-847a-0f71f4790057.png)\r\n\r\nSo that's removed. \r\n\r\nAs far as the generic page for `ramda` 'vulns' (SourceClear Premium™️..stuff..) goes:\r\n\r\n![image](https://user-images.githubusercontent.com/373565/144566622-2932dbe2-6803-419d-9e40-4909b6776751.png)\r\n\r\nIt's just showing the remaining issue, [Regular Expression Denial of Service (ReDoS)](https://github.com/ramda/ramda/issues/3195), which is fixed from what I understood:\r\n\r\n![image](https://user-images.githubusercontent.com/373565/144566643-0ca1dd51-2a98-4a9d-9e68-d039ac531123.png)\r\n\r\nThere are no further details other than links to the `commit` with the fix and the PR.\r\n\r\n![image](https://user-images.githubusercontent.com/373565/144566653-c1712db8-0786-46af-91f4-5e514d29027f.png)\r\n\r\nLet me know how I can further help!",
      "@Dr1Ku:\r\n\r\nThank you very much for your help.   This is the news I was hoping for.  If I can either resurrect my linux box or somehow build on my Windows thingie, I will get that remaining issue behind us too!\r\n\r\nCheers!",
      "I added [an answer][so] to the StackOverflow question, summing up the experience with this issue and Veracode.\r\n\r\n\r\n  [so]: https://stackoverflow.com/a/70239612",
      "@CrossEye @customcommander hey folks, seems like someone assigned CVE-2021-42581 for this? assuming it should be disputed?",
      "@assaf-benjosef:  Oh no, it's back!!  I have several evenings free this week and I'll try to take a look.  Do you know anything about the dispute resolution procedure.  I'm hoping it's easier than my [Veracode experience][ve].\r\n\r\n\r\n  [ve]: https://stackoverflow.com/a/70239612\r\n",
      "@CrossEye I believe this form would be the best bet: https://cveform.mitre.org/\r\nShould make a rejection change request there, they usually respond back in a couple days :) ",
      "@assaf-benjosef:\r\n\r\nThank you.  I made this request:\r\n\r\n> I would like to see this vulnerability rejected.\r\n> \r\n> The behavior mentioned in the original GitHub Pull Request that started this process is not prototype pollution.  While it can be used to create and alter the prototype of a specific object, it can not modify preexisting objects' prototypes.\r\n> \r\n> The github link supplied is where this started.  The requested change was rejected, because this was not prototype pollution.  Veracode, though, reported it as an error to their users, and the stackoverflow link explains the arduous process it took to get them to reject this vulnerability.\r\n> \r\n> The other two links are to the Ramda REPL.  One shows an example of how a library might be subject to prototype pollution.  The second shows the equivalent Ramda code, which does not exhibit the same behavior.\r\n> \r\n> Feel free to email me with follow-up questions: scott@sauyet.com.\r\n> \r\n> \r\n> https://github.com/ramda/ramda/pull/3192\r\n> https://stackoverflow.com/a/70239612\r\n> http://link.fourwindssoft.com/52\r\n> http://link.fourwindssoft.com/53\r\n\r\nWe'll see what happens now.",
      "Interestingly Snyk.io has also added [CVE-2021-42581 to their database](https://security.snyk.io/vuln/?search=CVE-2021-42581), but only for Grafana packages, which I suppose depend on this library.",
      "Well this appears to be a \"malicious CVE\"... the description mentions [0.27.0 as affected version](https://github.com/CVEProject/cvelist/blob/master/2021/42xxx/CVE-2021-42581.json#L37), even when 0.27.1 was already released. That kind of implies that 0.27.1 was released as a fix for the reported vulnerability, increasing its credibility.\r\n\r\n@CrossEye MITRE is the CNA who issues. I'm curious if they can tell you who asked them to submit this 10 days ago. @Marynk Was that you?",
      "> Interestingly Snyk.io has also added [CVE-2021-42581 to their database](https://security.snyk.io/vuln/?search=CVE-2021-42581), but only for Grafana packages, which I suppose depend on this library.\r\n\r\nahh seems like it was automatically created as a linux vulnerability due to a few distros adding this to their advisory database. It will be automatically revoked from snyk.io once the CVE is revoked. What we had control over was the decision of publishing an advisory against the independent ramda NPM package, which we did not do.\r\n\r\nDid MITRE not reply to your request yet @CrossEye ?",
      "@assaf-benjosef:  \r\n\r\nNothing from MITRE.  This is starting to feel like Veracode all over again.\r\n\r\n@dbolkensteyn:\r\n\r\nI won't have time this evening, but will try to get more out of MITRE tomorrow.  After the dead silence on my previous message, I'm not really hopeful, however.",
      "Just sent another request to Mitre.  The first one was never even acknowledged.  Trying a different email address just in case.\r\n\r\n> I would like to see this vulnerability rejected.  This is the second time I submit this.  I heard nothing, not even an automated reply, the first time: 2022-05-10.  I've supplied a different email address in case that was the issue.  \r\n> \r\n> The behavior mentioned in the original GitHub Pull Request that started this process is not prototype pollution. While it can be used to create and alter the prototype of a specific object, it can not modify preexisting objects' prototypes, and especially cannot modify built-in prototypes such as `Object.prototype`.\r\n> \r\n> The github link supplied is where this started. The requested change was rejected, because this was not prototype pollution. Veracode, though, reported it as an error to their users, and the stackoverflow link explains the arduous process it took to get them to reject this vulnerability.\r\n> \r\n> The other two links are to the Ramda REPL. One shows an example of how a library might be subject to prototype pollution. The second shows the equivalent Ramda code, which does not exhibit the same behavior.\r\n> \r\n> Feel free to email me with follow-up questions: scott.sauyet@gmail.com (originally I used scott@sauyet.com, and either is fine.)\r\n\r\n> https://github.com/ramda/ramda/pull/3192\r\n> https://stackoverflow.com/a/70239612\r\n> http://link.fourwindssoft.com/52\r\n> http://link.fourwindssoft.com/53\r\n\r\nLet's see if we have any better luck this time.",
      "Dug up a direct email for Mitre, meant for reporting vulnerabilities, hoping they can at least route this to the appropriate group.  Something has to work, eventually.",
      "I got a response from my email to Mitre,  which told me that they had already updated the CVE database.  It now lists the claim as \"disputed\", which is progress.  I really don't know the resolution process from there.\r\n\r\nBut I have confirmed that this is updated at https://www.cve.org/CVERecord?id=CVE-2021-42581 and at https://nvd.nist.gov/vuln/detail/CVE-2021-42581, which I think are the key central sites.",
      "👍 https://github.com/CVEProject/cvelist/blame/master/2021/42xxx/CVE-2021-42581.json#L37",
      "So, at long last, an update.  This whole business had chased me from doing OSS for the past year.  I was just too frustrated.  While I'm hoping I'm back.  But we'll have to find out.\r\n\r\nYou see, the answer is not good.\r\n\r\nI had opened an email thread with Mitre, but they stopped responding, and didn't respond to pings, until today, fifteen months after I first started speaking with them.  I had pinged again this morning, and this afternoon, I got this reply:\r\n\r\n> I just spoke with our team and we are going to keep the record in the PUBLISHED state and note that it is disputed. It is very rare that we reject published records. We keep records that are in dispute in the PUBLISHED state so that CVE consumers can reach their own conclusions about whether the CVE Record has any value.\r\n> \r\n> Should you choose, you can appeal the MITRE Top-Level Root’s decision. The program dispute policy is located here: [https://www.cve.org/Resources/General/Policies/CVE-Record-Dispute-Policy.pdf](https://urldefense.com/v3/__https:/www.cve.org/Resources/General/Policies/CVE-Record-Dispute-Policy.pdf__;!!NT4GcUJTZV9haA!oHUq3l5ZmLb0oH7VUBQbVS9xuUEp403wbwcTB3rhVsc45hvKeXItAGLhzfKDNvoEycQJVF31Szf21ZA$) \r\n>  \r\n> Regards\r\n>  \r\n> C\r\n\r\n\r\nAs far as I can tell, this means that Mitre takes no responsibility for fixing the problem they've caused.  The reason I ended up pinging them was that a coworker who was facing an issue from BlackDuck for another false vulnerability knew that I had been through this before and asked for advice.  (And if I become the go-to guy at my company for dealing with this, it will be a hard choice between retirement and suicide!)  He was right; it was a false report.  And I checked in with a third false report I knew about and found none of them had any response from Mitre.  So this does not seem to be an isolated incident.\r\n\r\nHere's my response, sent at the local end of the work-week.  I hope I do hear back soon.\r\n\r\n> Chris,\r\n> \r\n> Thank you for letting me know.\r\n> \r\n> This has been extremely frustrating.  I feel that there's something wrong at Mitre that it has taken this long to resolve.\r\n> \r\n> But I feel even more strongly that there's something broken in the whole process.  There are companies offering bounties for reporting  vulnerabilities, which gives an incentive  to report them without due diligence.\r\n> \r\n> And yet there is no reasonable process for challenging these reports.   As I read your message, there is little chance of a CVE being withdrawn, so it is now my job as an unpaid open-source maintainer to try to convince the various security-related vendors to remove the CVE from their own databases.  I doubt there is a comprehensive list.  Can you suggest who else I need to get in touch with?  Here's a small start:\r\n> \r\n>   * Aikido\r\n>   * Blackduck\r\n>   * Checkmarx\r\n>   * Contrast Scan\r\n>   * Coverity\r\n>   * Fortify\r\n>   * GitHub\r\n>   * GitLab\r\n>   * HCL AppScan\r\n>   * Invicti\r\n>   * JFrog\r\n>   * Mend.io\r\n>   * Kiuwan\r\n>   * Klocwork\r\n>   * Snyck\r\n>   * SonarQube\r\n>   * SonarSource\r\n>   * Sonatype\r\n>   * Synopsys\r\n>   * Veracode\r\n> \r\n> Is this really the process?  It already has driven me from performing open-source work for a year.  After an extremely frustrating experience with Veracode (described at https://stackoverflow.com/q/69936667/), when this started again, I mostly gave up in exasperation.\r\n> \r\n> Or is there some mechanism I don't know about that would make this easier?\r\n> \r\n> Thanks,\r\n> \r\n>   -- Scott Sauyet\r\n\r\nWe'll see what next week brings.\r\n\r\n----------\r\n\r\nOne thing I'm not sure I ever mentioned above, Veracode, to their credit, did eventually write [a blog post][vc] demonstrating my point.  (Not that they told me about it, but someone posted a link on the [StackOverflow answer][co].)  So one security company down, one zillion left to go.\r\n\r\n----------\r\n\r\nI've got to say, there is a real temptation to find a way to post bounties for people reporting vulnerabilities within Mitre itself!  I'd love to see how well they enjoy the process.\r\n\r\n  [co]: https://stackoverflow.com/q/69936667/#comment129300572_70239612\r\n  [vc]: https://www.veracode.com/blog/secure-development/yet-another-perspective-prototype-pollution\r\n",
      "BTW, two issues I'm tracking with similar Mitre issues:\r\n  \r\n  * https://github.com/Jermolene/TiddlyWiki5/issues/7384\r\n  * https://github.com/mde/ejs/issues/720",
      "Shockingly, Mitre responded in just 67 minutes!  I assume this guy has been instructed to mollify me after Mitre  ignored me for well over a year.\r\n\r\n> I’m sorry that your experience has been frustrating. \r\n> \r\n> This was resolved from our perspective when we published the CVE record and indicated that it was disputed. This is the process for records that we publish. I apologize for our lack of timely communication regarding this outcome. We deal with many hundreds of requests and inquiries on a weekly basis so sometimes it takes us longer to reply then we like. \r\n> \r\n> The quality and accuracy of vulnerability reporting is a known problem that is decades old and is not unique to the CVE program. Ecosystem-wide solutions for bad vulnerability reporting have proven elusive at scale. \r\n> \r\n> I have no way of knowing what the outcome of the dispute and escalation process would be should you choose to engage it. MITRE does not control that process if the dispute is related to one of our records.  If the result indicated that the record was invalid we would reject the record at the direction of the Root organizations that would decide the matter. \r\n> \r\n> Chris\r\n\r\nPolitely phrased, but it seems to be \"Yeah, good luck, buddy!\"\r\n\r\nI'm polite in my response too:\r\n\r\n>Again thank you for the reply.\r\n> \r\n> This was the first project on which I had such an issue.  A few months ago a second on arose on another project.  Today there was a third.  I had seen important vulnerabilities exposed through CVEs, but today's was the third false vulnerability that I was dealing with.  It was what made me try again to see what you could do.\r\n> \r\n> As to the decades-old problem, it sounds like it's time to find as way of addressing it.  I don't know who sponsors bounties for finding vulnerabilities, but shutting those down sounds like a good start.  Or at least modifying them so that there has to be substantive confirmation and chance for rebuttal before a bounty is awarded.\r\n> \r\n> I  might actually try the escalation procedure.  We'll see if I can stomach it.\r\n> \r\n> Thank you for your timely response (this time 😄).\r\n> \r\n>   -- Scott \r\n\r\nOkay, so maybe a little zing in the last line.  Who can blame me?",
      "I had another exchange just before my bedtime last night:\r\n\r\n> If you have a way to do this at scale, I’m willing to listen. \r\n> \r\n> We have to do this at scale. It’s a highly imperfect process. \r\n> \r\n> I’m willing to talk though. If there is a better way, I’ll follow it. \r\n\r\nto which I responded:\r\n\r\n> I'm going to have to give this some serious thought.  I don't really understand the CVE process; I've only paid attention insofar as it's affected me personally.\r\n> \r\n> It may be that it's a fantastic process with only a small glitch.  But from where I stand, it looks like a gaping hole.  As a developer of open-source software, I want to be able to report that my software is secure.  But when a (possibly bad faith) actor comes along and reports a spurious vulnerability, even after I've demonstrated that this is false, there seems little recourse for me to repair the damage.\r\n> \r\n> As a user of open-source software, I want to be secure in the knowledge that my security tools are properly reporting vulnerabilities, with extremely few false negative or false positives sneaking through; if we have to rework some code to remove reported vulnerabilities, then I need to know that this work is actually justified by real problems, and not pure nonsense\r\n.\r\n> \r\n> Those two requirements should not be in conflict.  But it feels like they are at the moment.\r\n\r\n(And then a follow-up from me apologizing for typos; I really shouldn't type anything larger than a text message on my phone!)\r\n\r\nIt sounds like they might actually be willing to discuss fixes to this issue.  As I said, though, this is going to take some real thinking.",
      "Hey @CrossEye,\r\n \r\nI work as a security analyst at BlackDuck by Synopsys. I have been made aware of this issue and have looked into the \"vulnerability\". After playing about with the fiddlejs PoC we can confirm that we too believe you are correct and this is not a security vulnerability in the ramda library and is in fact the normal behaviour of JavaScript. The PoC can be recreated using just Object.assign .  Additional Objects created do not inherit polluted properties as is the dangers of Prototype Pollution. \r\n\r\nIssues such as false positive vulnerability reports cause issues for all parties involved and especially OSS maintainers. The BlackDuck Security Advisory associated with the CVE will be updated to state that this is not a vulnerability.\r\n\r\nSince I have no control over the CVE listing, I can only update our advisory to state that this is not a security issue. By updating it hopefully it will deflect from the claims that this is a security vulnerability. \r\n\r\nHopefully Mitre will follow suit and remove the CVE as it is digested by so many security tools.\r\n\r\nTLDR: ramda is not vulnerable to Prototype Pollution as claimed in CVE-2021-42581.\r\nmapObjIndexed is copying content from __proto__ to a new object (same as assign) it is not setting global Object.prototype. \r\n \r\n Also, heres a modified jsfiddle of the \"PoC\" that shows no global prototypes are manipulated. \r\n https://jsfiddle.net/pd04r7j8/",
      "@RustyButtons: Thank you.  That is fantastic news!  I'm booked pretty solid for the next two days, but I will write a note detailed response as soon as I can.",
      "@RustyButtons:\r\n\r\nAgain, thank you.  If you've actually read this whole thread, you will know that dealing with these issues has been enough of a headache that it's mostly chased me from doing open source for more than a year.  After [fighting it out with Veracode][vc] for weeks, a few months later, we got the same problems with Mitre, who were even less responsive.  Basically crickets for over a year, until ten weeks ago, when I got a \"sorry, but that's just the way it is\" answer.\r\n\r\nI'm really glad to hear that Black Duck will be addressing this.  Doubly so as BD is the tool used at my day job.\r\n\r\nIf you have a little time, I would love advice on how on how Ramda might proceed.  When Veracode did recognize that this wasn't a real issue and pulled their report, they were kind enough to write a [blog post](https://stackoverflow.com/questions/69936667) debunking the CVE.  While I can point people to that post, I don't know *who* to point to it.  Any insights you can offer would be much appreciated.  (And if you don't want to do it in a public forum, you can reach me at scott.sauyet@gmail.com.)\r\n\r\nAgain, thank you very much.  This is so refreshing!\r\n\r\n  [bp]: https://www.veracode.com/blog/secure-development/yet-another-perspective-prototype-pollution\r\n  [co]: https://github.com/ramda/ramda/pull/3192#issuecomment-1741495660\r\n  [vc]: https://stackoverflow.com/questions/69936667 \r\n\r\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79fb8dfb6b84f242562a",
    "number": 3190,
    "body": "## Proposed\r\n```js\r\nconst ar = ['apple', '1A', 'math'];\r\n\r\nR.nthEq(2, 'math', ar); //=> true\r\nR.nthEq(-1, 'math', ar); //=> true\r\n```\r\n- All indexing semantics would be the same as `R.nth`\r\n- All equals semantics would be the same as `R.equals`\r\n## Reasoning\r\nSometimes users of `ramda` maybe have their data shaped in unusual ways due to constraints out of their control. They may then need to check if the `nth` item in a list equals a given value. Currently, this can be achieved using `R.propEq(idx, val, list)`. However, this is less legible than `R.nthEq`. In addition, by the pure presence of `R.nth` when `R.prop` can handle indices and offsets (i.e. numbers) then `R.nthEq` should also be present.\r\n\r\nFinally, offset semantics are weirdly inconsistent in `R.propEq` when compared to `R.prop`. For example:\r\n```js\r\nconst ar = ['apple', '1A', 'math'];\r\n\r\nR.propEq(2, 'math', ar); //=> true\r\nR.propEq(-1, 'math', ar); //=> false\r\n\r\nR.prop(2, ar); //=> math\r\nR.prop(-1, ar); //=> math\r\n```\r\n",
    "head_branch": "add-ntheq",
    "is_a_fork": true,
    "comments": [
      "Thank you for a well-written, well-reasoned PR.\r\n\r\nI absolutely think we should unify index handling in `prop` and `propEq` (and presumably also `propIs`, `propOr`, and `propSatisfies` as well.)  I honestly wish we had never supported negative indices anywhere, although I do recognize how useful they can be; they have made keeping various functions in sync a minor nightmare.  But nonetheless, we should fix those functions to match `prop`.\r\n\r\nI'm of two minds regarding adding more `nth*` functions.  \r\n\r\n`nth` was an early function in Ramda.  I'm quite sure we would not add it today, as the job is well covered by `prop`.  It seems unnecessary, and I would rather deprecate it altogether.   In the very early days, we had `map` and a separate `mapObject` because our focus on simplicity meant that one function shouldn't do two things, including accepting different types.  At some point we were convinced that Objects and Arrays shared a common abstraction of being Functors, and `map` should simply apply to all functors.  I think there is something similar here, although there's no common name for them, perhaps `Indexed` would do.  That is a real argument against `nth*` functions.\r\n\r\nBut on the other side, we have the handling of negative indices.  It makes no sense for `prop`.  In fact, we can't do this in any reasonable manner for both arrays and objects unless we type-check both the object and the key, and I'd rather not do that.  Imagine an object whose keys were positive and negative integers representing relative positions on a timeline and whose values were, say names of events related to a person's life, with year 0 being the year of birth.  Suddenly the key `-1` might reasonably mean something other than \"one element before the end\":\r\n\r\n```js\r\nconst lifeline = {\r\n  '-3': 'parents met',\r\n  '-1': 'parents married',\r\n  0: 'birth',\r\n  18: 'graduated high school',\r\n  21: 'met future spouse',\r\n  22: 'graduated college',\r\n  24: 'married',\r\n  27: 'published first novel',\r\n  length: 28\r\n}\r\n\r\nprop (-1, lifeline) //=> '\"published first novel\", but expected \"parents married\"\r\n```\r\nAnd this argues for keeping `nth` and possibly expanding it.\r\n\r\nSo I am torn.  I would like to think about it and to hear arguments for and against.\r\n\r\nWhat do you think, @femioladipo ?  And @ramda/core ?",
      "First off thanks I’m happy to contribute. \r\n\r\nNext, you raised some good points, and I agree with most. However, I've got a few suggestions. Give me to this afternoon to write something up.",
      "It is possible I haven't fully grasped the specifics of this proposal but as far as I can tell we could do something similar with `pathEq`:\r\n\r\n```javascript\r\npathEq([2], 'math', ['apple', '1A', 'math']);\r\n//=> true\r\n\r\npathEq([-1], 'math', ['apple', '1A', 'math']);\r\n//=> true\r\n```",
      "@customcommander:\r\n\r\n> as far as I can tell we could do something similar with `pathEq`:\r\n\r\nBut that's still a problem, as I'm concerned, all the `prop*` functions should have similar behavior to their `path*` equivalents.  Ideally `propFoo (name, ...rest)` should behave identically to `pathFoo([name], ...rest)`.\r\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79fc8dfb6b84f242562b",
    "number": 3188,
    "body": "For reference:\r\nhttps://github.com/codespell-project/codespell",
    "head_branch": "typos",
    "is_a_fork": true,
    "comments": [
      "Thank you @tmatth!"
    ],
    "commit_messages": [
      "Fix typos detected by codespell (#3188)\n\n* equals: fix spelling\r\n\r\n* test: fix spelling\r\n\r\n* test: collectBy: fix spelling"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79fd8dfb6b84f242562c",
    "number": 3183,
    "body": "The typing for memoizeWith requires the identity function to return a string.  This updates the example with the correct method",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "I don't mind, I just didn't want to touch the API/code directly.  Though personally I would rather Ramda be automatically typed no `@types/ramda` ideally.",
      "> I would rather Ramda be automatically typed no `@types/ramda` ideally.\r\n\r\nIf you're volunteering to help, we'd love it!  :smile:\r\n\r\nThe core team has little TypeScript expertise, and although we've tried to bring the typing in-house, we've made little progress.  Any help or advise you can give on this would be gratefully received!",
      "@trajano: Are you interested in pursuing this?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79fe8dfb6b84f242562d",
    "number": 3181,
    "body": "an aux function for recursive function. See code comments, and the test file for details.",
    "head_branch": "fold",
    "is_a_fork": true,
    "comments": [
      "Please, when making PRs here, include some relevant explanation in simple text.\r\n\r\nYes, we will look at the code.  But that mostly tells us *how* it works.  We also need to know *why* it's wanted.",
      "I'm curious if [this API][rr] would satisfy your needs:\r\n\r\n```js\r\nconst None = Symbol ()\r\n\r\nconst fold = (fn, init, [x = None, ...xs]) =>\r\n  x == None\r\n    ? init\r\n    : fn (init, x, (y) => fold (fn, y, xs), (y) => y)\r\n\r\n// Works like a standard fold\r\nfold ((a, b, next/*, done*/) => next (a + b), 0, [2, 3, 4, 5, 6]) //=> 20 (2 + 3 + 4 + 5 + 6)\r\n\r\nconst loop = (acc, x, next, done) => \r\n  acc + x > 10 ? done (acc) : next (acc + x)\r\n\r\n// Offers an early escape',\r\nfold (loop, 0, [2, 3, 4, 5, 6]) //=> 9 (2 + 3 + 4)\r\n```\r\n\r\nI think it's quite a bit simpler to use.  And I really wish Ramda's `unfold` was written in a similar way.  I would of course curry the function before including it in Ramda and change other bits of implementation to match Ramda standards.\r\n\r\nIt is strictly less powerful than yours as yours offers the user the ability to control the seed values, where this one simply iterates them.  But it is closer to `reduce`, adding just the ability to end early.\r\n\r\n  [rr]: https://tinyurl.com/ygjh9fzk",
      "your implementation seem to use recursive function instead of loop. it maybe stack overflow in action.  because tail call still in progressing. using loop to avoid stack overflow is functional lib's one of target.\r\n\r\nSeeds can include more than arrays, and any other data type is likely to can be included. for example,  number, string, Tree among others. so construct a `[None]` as terminate condition will limit seed as to Array. and you introduce and expose another complexity `Symbol`.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "Yes, my function is using a recursive implementation.  We should be able to easily change that to an iterative one.  It might require some sort of trampoline.\r\n\r\nThe question is about the API, though.  Does this meet your needs?\r\n\r\nBut again, I really would like some sort of real-world example of your expected usage.",
      "this api limit seed as `Array`. not very genenic.",
      "So, can you show a real-world example with a different seed type?",
      "100/3=?\r\n```js\r\nlet y = fold((x,y) => {\r\n    let diff = y - 3\r\n    return diff > 0 ? [x+1, diff] : [x]\r\n} , 0, 100)\r\n```",
      "Thanks for the example.  It's coming clearer to me now.  I like the idea of this function, but I don't think I like the return-a-pair-or-null.  I'd prefer a variant of what I suggested above. Here is [a version][rr] of the same idea, but leaving the accumulator changes to the user.  It is still using a recursive implementation which would have be changed to make it even reasonably performant and resilient to large data, but I'm still wondering if this API seems reasonable:\r\n\r\n```js\r\n// fold :: ((b, a, ((a, b) -> a), (a -> a)) -> a) -> a -> b -> a\r\n// or this?\r\n// fold :: (b -> a -> (a -> b -> a) -> (a -> a) -> a) -> a -> b -> a\r\nconst fold = (fn, init, seed) =>\r\n   fn (seed, init, (x, s) => fold (fn, x, s), (x) => x)\r\n\r\nconsole .clear ()\r\n\r\n// Works somewhat like a standard fold\r\nfold (\r\n  ([a, ...as], x, next, done) => a == undefined ? done (x) : next (a + x, as), \r\n  0, \r\n  [2, 3, 4, 5, 6]\r\n) //=> 20 (2 + 3 + 4 + 5 + 6)\r\n\r\n\r\n// Offers an early escape\r\nconst loop = ([a, ...as], x, next, done) => \r\n  a == undefined ? x : a + x > 10 ? done (x) : next (a + x, as)\r\n\r\nfold (loop, 0, [2, 3, 4, 5, 6])  //=> 9 (2 + 3 + 4)\r\n\r\n// Folds objects besides arrays\r\nfold ((a, x, next, done) => a - 3 > 0 ? next (x + 1, a - 3) : done (x), 0, 100) //=> 33\r\n```\r\n\r\nAnd if that style of accumulator handling for arrays bothers you, it could also look like this:\r\n\r\n```js\r\n  fold (\r\n    (as, x, next, done) => as .length ?  next (as [0] + x, as .slice (1)) : done (x), \r\n    0, \r\n    [2, 3, 4, 5, 6]\r\n  ) \r\n```\r\n\r\nI'm not certain of the signature for this yet, but it strikes me as simpler in the end than `((a,b) -> [a,b] | null) -> a -> b -> a` where we have a promiscuous callback function, and a sentinel value of `null`, both things we try hard to avoid in Ramda.\r\n\r\n  [rr]: https://tinyurl.com/yem8e63f",
      "BTW, here's an [iterative implementation][rr] of the same API:\r\n\r\n```js\r\n// fold :: ((b, a, ((a, b) -> a), (a -> a)) -> a) -> a -> b -> a\r\nconst fold = (fn, init, seed) => {\r\n  let done = false, acc = seed, curr = init, result\r\n  while (!done) {\r\n    fn (\r\n      acc, \r\n      curr, \r\n      (val, seed) => {curr = val; acc = seed}, \r\n      (x) => {done = true, result = x}\r\n    )\r\n  }\r\n  return result\r\n}\r\n```\r\n\r\nWhile it's not nearly as elegant as the recursive version, it's not as bad as I feared.\r\n\r\n\r\n  [rr]:https://tinyurl.com/yzp3qwmk",
      "Using function parameters as placeholders is the first time I've seen them. It's really interesting. It should be feasible and more semantic than tuples. \r\n\r\nIt is simply recommended that the function first and the data last. immutable first, variable last.",
      "> Using function parameters as placeholders is the first time I've seen them. It's really interesting. It should be feasible and more semantic than tuples.\r\n\r\nI first saw this technique in a [StackOverflow answer][so] (by a user who has many great informative answers, and is well worth following.)  I've used it occasionally since and it can simplify a lot of nasty control flow issues.\r\n\r\n\r\n> It is simply recommended that the function first and the data last. immutable first, variable last.\r\n\r\nI believe that's what I've done in the signature of the function; the signature of the callback is perhaps more questionable, but it's not clear to me what would be an improvement upon it.\r\n\r\n  [so]: https://stackoverflow.com/a/49543489/1243641",
      "It is recommended that you modify the signature of `fn`:\r\n```js\r\nconst fold = (fn, init, seed) => {\r\n  let done = false, acc = seed, curr = init, result\r\n  while (!done) {\r\n    fn (\r\n      (val, seed) => {curr = val; acc = seed}, \r\n      (x) => {done = true, result = x}\r\n      acc, \r\n      curr, \r\n    )\r\n  }\r\n  return result\r\n}\r\n```",
      "I don't have a strong feeling for or against that change.  I usually try to configure a function with the parameters less likely to change coming before those more likely to change.  But that's mostly to support currying/partial application.  Here there is no reasonable possibility of currying.\r\n\r\nI guess my original order feels slightly more idiomatic in JS than your reformulation -- it looks *a bit* more like `Array.prototype.reduce`.  But it's a minor issue, and I don't have strong feelings either way.",
      "@xp44mm: Are you interested in pursuing this?",
      "What should I do?",
      "Review the discussion above.  If you still would like to include this function, either update the implementation to take into account the comments made or close this one and create a new one on that model.  There are no guarantees it would be included, but it will get a fair hearing.  Or if you're not interested, you could just close the issue."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f79ff8dfb6b84f242562e",
    "number": 3179,
    "body": "Attach an argument to the transformer function to pass the result value of the predicate. \r\n```js\r\ntransformer(...arguments, predicate(...arguments))\r\n```\r\n\r\nprovide a special case:\r\n```js\r\ntransformer = (..., predicateResult) => predicateResult\r\n```\r\nso the pair `[predicate,transformer]` array reduce to `predicate` function.",
    "head_branch": "cond",
    "is_a_fork": true,
    "comments": [
      "I've passed the existing tests, added tests for new features, and passed them.",
      "I think we need much more of an explanation of *why*.  I can read the code and see what it does.  But I can't get into your head to understand your rationale.\r\n\r\nCan you add to the discussion here, explaining what these changes are for, and why in some real world example we would want this and want to expand `cond` to cover it?  ",
      "The branch of cond is the predicate first, and the tranformer is performed if the predicate is true. \r\n\r\nMoreover, We also often encounter when part of the tranformer execution has even come to fruition to know if the action should be performed. That is, predicate and transformer cannot be separated from each other. Predicate and transformer must be merged into a single function.\r\n\r\nThe latter's signature is similar to: `input -> Some result | None`. Common functions includes: `parseInt`, `parseFloat`, `tryXXX`.",
      "I would suggest that if you are looking for the behavior of returning the first non-nil result when applying our arguments to a list of functions, then you should probably suggest a new function.  Ramda strives for API simplicity and would never be apt to deal with such different signatures for the same function.\r\n\r\nAlthough this implementation would not be suitable for current Ramda, the idea would be something like this:\r\n\r\n```js\r\nconst firstTruthy = (fns) => (...args) => {\r\n  for (let fn of fns) {\r\n    const res = fn (...args)\r\n    if (res) {return res}\r\n  }\r\n}\r\n\r\nconst myFn = firstTruthy ([\r\n  x => x > 20 && x * x,\r\n  x => x % 2 && (x - 1) / 2,\r\n  x => 10 * x\r\n])\r\n\r\nmyFn (25) //=> 25 * 25 ==> 625\r\nmyFn (15) //=> (7 - 1) / 2 ==> 3\r\nmyFn (14) //=> 10 * 14 ==> 140\r\n```\r\n\r\nWe would still need to see some realistic reasoning for this.  I'm not yet convinced of the usefulness of it, but I'm willing to be convinced if you have a compelling argument.",
      "The `firstTruthy` may have missed a situation:\r\n```js\r\n    let fmt = cond([\r\n      [trim, (_, res) => ({ res })],\r\n    ]);\r\n```\r\nthe transformer will accept the returned value of the predicate as appended last argument.",
      "and this code will terminate at the first branch, skip the second branch:\r\n```js\r\n    let fmt = cond([\r\n      [T, always(false)],\r\n      [T, always('never')],\r\n    ]);\r\n``` \r\n\r\nThe `firstTruthy` will need a wrap `[false]` to terminate itself. this put complex to caller.",
      "`firstTruthy` was entirely off the cuff.  I'm still trying to understand what your function is *for*.  I simply don't have a real sense of how you'd want to use this.  I'm quite sure that it's not likely a match for `cond`, which has a fairly simple signature and fairly understandable use.  But it's possible that it's something worth considering for Ramda under a different name.  But we seem to be having communication issues.\r\n\r\nDo you have a real-world problem that you could simplify for an example?\r\n\r\n",
      "The extended `cond` function is similar to pattern matching in F#, instead of `if..else` string. It is still compatible with the latter. However, it provides features similar to active pattern in F#. Here's the pseudocode:\r\n\r\n```F#\r\n\r\nmatch inp with\r\n| _ when predicate(inp) as res -> transformer(inp,res)\r\n| TryFloat (floatResult) -> floatResult\r\n\r\n// where\r\n\r\nlet (TryFloat|_) = if .. then Some floatResult else None\r\n```\r\n\r\n`tryFloat` is a function when sucess return a `{ token: number }` object or failed return `null`. transpile to js:\r\n\r\n```js\r\ncond([\r\n    [predicate, transformer],\r\n    tryFloat,\r\n])(inp)\r\n```",
      "None of this looks anything like a real-world example.  Can you describe a use in something like a web application or a data transformation one.  The business domain is not important, just something concrete that shows *why* you want this.",
      "@CrossEye Shall we close this one for now?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a008dfb6b84f242562f",
    "number": 3178,
    "body": "`allPass` and `anyPass` return the result of the final expression. action same like to `both` and `either`",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Thank you for the contribution.\r\n\r\nI'd like to see your argument in favor of this.\r\n\r\nObviously these functions can be thought of as generalizations of `both` and `either`, but that's not how we thought of them when creating them, and it's certainly not how we documented them:\r\n\r\n> Takes a list of predicates and returns a predicate that returns true for a given list of arguments if every one of the provided predicates is satisfied by those arguments.\r\n> \r\n> ```\r\n> @sig [(*... -> Boolean)] -> (*... -> Boolean)\r\n> \r\n\r\nSo we certainly can't change the implementation without also addressing the signature and description.  But is there a good reason to change these at all?\r\n\r\nAnother way to think about it is that these should be pretty close equivalences:\r\n\r\n```js\r\nand (x, y) //~=> x && y\r\nboth (f, g) //~=> (...args) => f (...args) && g (...args)\r\nall (fn) //~=> (xs) => xs .every (x => fn (xs))\r\nallPass ([fns]) //~=> (...args) => fns .every (f => f (...args))\r\n```\r\nThe [`&&`][la] ones, `and` and `both` act like the JS operator, and return booleans if supplied booleans but otherwise return one of their operands.\r\n\r\nThe [`every`][ev] ones, `all` and `allPass` act like the JS Array prototype function, and always return booleans.\r\n\r\nSo I think we'd need a strong argument for this.  Do you have one?\r\n\r\n  [ev]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every\r\n  [la]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND\r\n",
      "A javascript function should return as much useful information as possible. The truthy set contains true, and the falsy set contains false. So they is compatible with original functions and has greater use.",
      "This PR is temporarily closed due to branch management issues.",
      "> A javascript function should return as much useful information as possible. The truthy set contains true, and the falsy set contains false. So they is compatible with original functions and has greater use.\r\n\r\nThis also has to be balanced against simplicity.\r\n\r\n> Q: What does the function `allPass` return?\r\n>\r\n> A (current): `true` or `false`\r\n>\r\n> A (suggested): Any value, really.  It would be the first `0`, `false`, `''`, `NaN`, `null` or `undefined` returned by one of the functions supplied or value returned by the final function, which could be any value whatsoever.\r\n\r\nRamda always strives to strike a balance between being as simple as possible and being as familiar to JS Developers as possible.  The functions `and` and `both` have real tensions between simplicity and familiarity.  But here, thinking of this function as a variant of `Array.prototype.every`, both simplicity and familiarity suggest the current behavior.\r\n\r\nSo I'm certainly willing to entertain further discussion, but my initial impression is negative."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a018dfb6b84f2425630",
    "number": 3177,
    "body": "Security fix for ReDoS vulnerability.\r\n\r\nhttps://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim\r\n\r\nReported in https://www.huntr.dev/bounties/51dfe927-1bf1-4b36-91ca-2197337e663a/\r\n\r\nBefore fix: Result\r\n`time_cost: 2639`\r\nAfter fix: Result\r\n`time_cost: 4`",
    "head_branch": "ready-research-patch-ReDoS",
    "is_a_fork": true,
    "comments": [
      "@semmel Thanks for the review.\r\n\r\n- The regular expression suggested by you is taking too long time as 1900-2000 ms. So can we try this? which will take 3ms\r\n\r\n```\r\nstr.replace(new RegExp(String.raw`^\\ws+|\\ws+$`, \"g\"), '')\r\n```\r\n- Once you confirm this I will change parentheses also in line 24.\r\n",
      "Sorry `\\w` is just a word character in RegExp. `\\ws` has got nothing todo with the `ws` variable defined in the beginning  which contains some nice space characters. It matches just any letter followed by an `s`. That's why\r\n\r\n```\r\n\"asabcbs\".replace(new RegExp(String.raw`^\\ws+|\\ws+$`, \"g\"), '')\r\n// -> \"abc\"\r\n```\r\n\r\nIn which runtime (JavaScript engine) do you execute your test to measure the execution times?\r\n\r\nIn principle I'd more prefer an implementation like\r\n\r\n```\r\nfunction trim(str){\r\n   return str.trim();\r\n}\r\n```\r\nBut that change would need confirmation by the Ramda mainainers and user community.",
      "Can we use this\r\n`return str.trim ? str.trim() : str.replace(/^\\s+|\\s+$/g, '');`",
      "@ready-research \r\n\r\n> Can we use this\r\n> `return str.trim ? str.trim() : str.replace(/^\\s+|\\s+$/g, '');`\r\n\r\nShould include some line-feed or carriage-return characters, `\\s` is not general enough. \r\nE.g. [this polyfill](https://github.com/FabioVergani/js_String.prototype.trim/blob/master/String.prototype.trim.js) uses a very similar RegExp. I guess `var ws = ...` already includes all sorts of those. \r\n\r\nI am still curious in which browser, or Node.js runtime you measure your execution times.",
      "This seems to miss all those other white-space characters checked by the original.\r\n\r\nhttps://tinyurl.com/ygwxncp6\r\n\r\nDo you have a version that captures those?",
      "@semmel @CrossEye Can you please check this? Using this regular expression it's taking 3-4 ms only to trim. \r\n\r\n```\r\nws = \"[\" + ws + \"]\";\r\n  var beginRx = new RegExp(\"^\" + ws + ws + \"*\");\r\n  var endRx  = new RegExp(ws + ws + \"*$\");\r\n  return String(this).replace(beginRx, \"\").replace(endRx, \"\");\r\n```\r\n\r\n@semmel Thank you for your suggetion, I have reported this in [huntr](https://www.huntr.dev/bounties/51dfe927-1bf1-4b36-91ca-2197337e663a/) you can check the POC file there(Or if you provide me a mail ID I will forward it). I am running this in VS Code with NODEJS 14.17.3\r\n\r\n@CrossEye Thank you for spending time to validate in huntr and providing feedback.",
      "I'm afraid this is still broken.  What is `this` doing in here?  In refactoring a function, the first thing you need to do is ensure it still works.\r\n\r\nhttps://tinyurl.com/ygh54e6k\r\n\r\nCan you set up a test that others can run to confirm your performance fix once it's working functionally?",
      "@CrossEye Thanks for the test case, it helped me to understand and test. I am not familiar with coding that much. Anyway, the following test case working fine with white-space characters and as well as performance. Please check this \r\n\r\nhttps://tinyurl.com/yzu7dkpy",
      "I'm curious what you're doing creating pull requests for an open source project if you are \"not familiar with coding that much.\"  Are there some sort of bounties offered to fix such issues?  I know the Ramda team does not offer them itself, but perhaps some other interested party does?\r\n\r\nAs to the performance benefits, I would appreciate it if you could demonstrate it somehow.  Your assertion is not enough evidence.  Do you have a test case we can run in Node or in a browser to see the benefits of this new version over Ramda's, which defaults to `String.prototype.trim` in most environments.\r\n\r\n",
      "@CrossEye I am a security enthusiast(eager to learn to code for security stuff), I think open source will be a better platform to do so. Yeah, [huntr](https://www.huntr.dev/bounties/51dfe927-1bf1-4b36-91ca-2197337e663a/) offers bounties for security issues and fixes.\r\n\r\nYou can test the following using node\r\nCreate the following poc.js\r\n```\r\n// PoC.js\r\nvar {trim} = require(\"ramda\");\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_blank(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\r\nExecute the following command in another terminal:\r\n```\r\nnpm i ramda\r\nnode poc.js\r\n```\r\nCheck the Output:\r\n```\r\ntime_cost: 2639\r\n```\r\n\r\nIdeally, trim functionality should give the output in 3-10 milliseconds, but it's taking 2000-3000 milliseconds.\r\n\r\nThe patch provided above will give us in 4-6 milliseconds.",
      "Well, there is definitely something wrong in Ramda -- when I repeat the implementation locally, it works fine:\r\n\r\nHere is one version of your test case showing Ramda alongside your implementation and what looks like it should be the same as Ramda's implementation.  Ramda is horribly slow.  The other two are fine.\r\n\r\nhttps://runkit.com/crosseye/ramda-issue-3177\r\n\r\nAnd that, by the way, is one good way to share test cases.  RunKit and a slew of other sites let you set up some scripts with imports for your libraries and run them on a server.\r\n\r\nI will try to look carefully in the next few days to see why Ramda's export is slow while the others are fine.  If you have any ideas, please let me know.",
      "The culprit is the `ws.trim()` in line 24. It evaluates to a string of length 1 `\\x180e` in V8, the Safari browser and Firefox JS engine. Thus Ramda resorts *always* to the first implementation with the chained RegEx replacements which is horribly slow. \r\n\r\nI don't know in what language `\\x180E` is a whitespace character to justify its inclusion in the `ws` string, but all JS engine vendors seem to think differently.\r\n\r\nRemoving that character from `ws` in line 4 out fixes the performance problem. Except of course for InternetExplorer 8 or Node.js < v0.1 - R.I.P. And except for an exotic language where `\\x180E` is a thing.\r\n\r\n### Edit:\r\nFound it: `\\u180E` is the \"Mongolian Vowel Separator\"\r\n",
      "@semmel: Thanks.  I got online to look at a few Ramda issues.  I don't need to do this one now!\r\n\r\nWould you simply suggest removing that character, or should we do something more radical?  Once again I'm finding a little time for Ramda, and am looking at how to get to and past v1.0.  After 1.0, this should just be a pointer to `String.prototype.trim`, so anything we do should be seen as a temporary patch.",
      "@ready-research Could you check that simply removing `\\u180E` from line 4 *in the original source* solves the problem?\r\n\r\n```javascript\r\nvar ws = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u2000\\u2001\\u2002\\u2003' +\r\n         '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028' +\r\n         '\\u2029\\uFEFF';\r\n```\r\n\r\nAs @CrossEye suggested it's just a preliminary fix, so no need to invent new regular expressions here or any other niceties as removing parentheses etc.\r\n\r\nOtherwise I'd scrap together a PR, however I'd see it should include a test for the vulnerability which may require more of the time available to me. Who gets the bounty then? \r\n\r\nAnyway we should get rid quickly of that nasty bug without breaking anything.",
      "@semmel Yes! Simply removing `\\u180E` from line 4 in the original source solving this problem. Feel free to edit this PR if you have permissions or you can raise a new PR.\r\n\r\nYou can submit a patch in huntr and the maintainer have to select your patch as fixing this issue. So you will get the bounty.",
      "@ready-research:\r\n\r\nWould you be willing to update the PR with that change? ",
      "lgtm 👍🏻 ",
      "Thank you @ready-research.  This has been committed, and I believe [hunter.dev][hd] should award the bounty.\r\n\r\n\r\n  [hd]: https://www.huntr.dev/bounties/51dfe927-1bf1-4b36-91ca-2197337e663a/",
      "Will there be a new version published with this fix ? ",
      "We're long overdue for a release.  I'll try to get one out soon.",
      "Hello this fix is not released. When can we expect a release?",
      "@tjjosep:\r\n\r\nSee the comment above yours.",
      "Hi! Please clarify, do you have at least approximately ETA for release with this fix? Thanks in advance!",
      "Hi, I would also really appreciate creating a new version with this fix, thanks @CrossEye ",
      "I will try to do so this coming weekend.",
      "When can we expect a new version to be released with the fix. Much Appreciated.",
      "> We're long overdue for a release. I'll try to get one out soon.\r\n\r\nWhen is 'soon?' Thanks!",
      "@aw3218:\r\n\r\n> When is 'soon?'\r\n\r\nI'm trying to work through another reported vulnerability, #3192, which is much more elusive than this one.  As soon as that is figured out, I'll try to get all the accumulated changes into a new release.\r\n\r\n",
      "@CrossEye , Hi!\r\nAs issue #3192 is closed, could you release the new version?",
      "Some news about a new release after this vulnerability fix ?",
      "@simon-tannai See https://github.com/ramda/ramda/issues/3195#issuecomment-998018529",
      "Released in `v0.27.2`. See #3216 \r\n\r\n@CrossEye I ran this [RunKit](https://runkit.com/crosseye/ramda-issue-3177) of yours against `v0.27.2` and the numbers for Ramda look more sensible now :)\r\n\r\n![Screenshot 2022-01-11 at 15 10 36](https://user-images.githubusercontent.com/681975/148969123-dfe749fc-35b8-4e41-9390-48da67217cab.png)\r\n",
      "Very nice!",
      "Prisma detects \r\n\r\nImpacted versions: *\r\nDiscovered: less than an hour ago         \r\nPublished: more than 6 months ago                  \r\nramda package from all  versions is vulnerable to Regular Expression Denial of Service (ReDoS).  Crafted input to the trim function may cause an application to consume  an excessive amount of CPU\r\n\r\n\r\n",
      "@opravil-jan:\r\n\r\nThis was fixed as of version `0.27.2`.",
      "No. Our vulnerability management Prisma started report it this week again. We are using ramda 0.28. \r\n![Screenshot from 2022-05-31 16-38-49](https://user-images.githubusercontent.com/2157542/171200580-d7223731-33fb-4dc2-b8c3-52f39053c61e.png)\r\n",
      "Can you share a link, an actual CVE, or something we can investigate.  An image doesn't help much, since I don't have a Prisma Cloud account.\r\n\r\nSnyk reports this as resolved: https://security.snyk.io/vuln/SNYK-JS-RAMDA-1582370\r\n\r\nBut there was some strangeness involve in 0.27.2 and 0.28.0, so maybe something weird is happening."
    ],
    "commit_messages": [
      "Security fix for ReDoS (#3177)\n\n* Security fix for ReDoS\r\n\r\nSecurity fix for ReDoS vulnerability.\r\n\r\n* Update trim.js\r\n\r\n* Update trim.js\r\n\r\n* Update trim.js"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a028dfb6b84f2425631",
    "number": 3174,
    "body": "Closes  #3173 .",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "> I'm hoping for more feedback before documenting this. @Andarist, you're my go-to person on these issues. Does this seem correct?\r\n\r\nIt looks OK - but it exposes a somewhat internal directory to the consumer (which could already be done elsewhere in Ramda's case). Given how the package is configured it might be already correctly resolved without this - when using certain tools. For example if you try to load Ramda using this URL: https://unpkg.com/ramda?module then it will redirect correctly to that internal `es/index.js`. This depends though on how exactly you plan to load the files, using what tools, intermediaries etc",
      "Thanks, @Andarist!",
      "Thank you, @bunglegrind!"
    ],
    "commit_messages": [
      "Update README.md (#3174)\n\n* Update README.md\r\n\r\nCloses  3173\r\n\r\n* Update README.md"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a038dfb6b84f2425632",
    "number": 3170,
    "body": "The current description is quite confusing, I think it's better to use the comment from the `@return` section as a header because it's clear and complete.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      ">we might add something like, \"This function serves as the boolean `and` statement if both inputs are booleans.\"\r\n\r\nI guess it's a good idea, I'll make this amendment a bit later\r\n\r\n>Also, would you be willing to include a similar fix to the or function?\r\n\r\nYes. Should I do this in this branch / PR or in a separate one?",
      "I'd say they belong together in a single PR, but if it's easier for you to keep them separate, that's fine.\r\n\r\nJust so you know, if it doesn't happen in the next few days, you're not being ignored, and I will look at this when I return from a two-week vacation at the beginning of August.",
      "@CrossEye any updates?",
      "Sorry for the delay.  Merged."
    ],
    "commit_messages": [
      "Move detailed spec to description section (#3170)\n\n* Move detailed spec to description section\r\n\r\n* Supplement description for `and`\r\n\r\n* Use detailed description for `or`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a048dfb6b84f2425633",
    "number": 3169,
    "body": "I don't think Ramda currently has a function equivalent to that mergeBy I implemented, so I'd like others' opinions on whether this is relevant to everyone else and if it is implemented efficiently.\r\n\r\nIf the community deem this feature worth it, I'll add some tests.\r\n\r\nThank you, any comments are appreciated.",
    "head_branch": "mergeby-feature",
    "is_a_fork": true,
    "comments": [
      "I'd love to see some more real-world justification of this before we proceed to consider tests.  Do you use a function like this often?  Can you show an live-ish example of the need for this function?\r\n\r\nI'm mostly bothered by the notion of uniqueness here.  What would you expect from your example, if passed these?:\r\n\r\n```js\r\n[{ key: 'a', value: 1 }, { key: 'b', value: 2 }, { key: 'a', value: 42 }],\r\n[{ key: 'b', value: 3 }, { key: 'c', value: 4 }, { key: 'b', value: 101 }]\r\n```\r\n\r\nI also have some concern about output order.  If we're returning an array, does the order simply match the order of the first appearance of each \"key\" in the concatenation of the two inputs?  Is that sufficient?  Or would we need to start considering left- and right-versions of this?\r\n\r\nAnd still one other question: should there be a way to *skip* output values for which there is no match?  It feels as though we might want that.  While the merge function can simply return `undefined` and a follow-up `filter(Boolean)` would cover that case, it feels dirty.  One possibility would be for that function to return an *array* of values to include in the output.  It has a slightly clumsier developer experience but offers quite a bit more flexibility.\r\n\r\nWe would also need to modify the implementation a bit, as Ramda is, at least until we get past version 1.0, expected to run on older JS engines.  It might still run on ES3 engines, and should definitely run on ES5 ones.  So we couldn't use the null operators `?.` and `??`.  But that's a fairly minor detail.",
      "One example where I needed it was something like this:\r\n\r\n```\r\nconst currentAssets = [{\r\n    otherProps: '',\r\n    hash: '1',\r\n    contractID: '1234',\r\n    createdAt: new Date()\r\n}]; // retrieved from database\r\nconst newAssets = [{\r\n    otherProps: '',\r\n    hash: '1'\r\n}]; // received from request\r\n\r\nconst assets = mergeBy(\r\n    R.prop('hash'),\r\n    (currentAsset, newAsset) => ({\r\n        ...(currentAsset ?? {}),\r\n        ...(newAsset ?? {}),\r\n        contractID: currentAsset?.contractID ?? uuid(),\r\n        active: !R.isNil(newAsset),\r\n        createdAt: newAsset ? new Date() : currentAsset.createdAt\r\n    }),\r\n    currentAssets,\r\n    newAssets\r\n);\r\n```\r\n\r\nSo the scenario is:\r\n- you have same assets in the database\r\n- the user is sending new assets that might create or update existing assets\r\n- the match between current and new assets is based on the `hash` key\r\n- the merged `assets` is what I'd save somewhere replacing the existing assets\r\n- when merging, I get all properties from current and new asset (the new overriding the current)\r\n- the `contractID` must either be the existing one or a new generated one\r\n- `active` is set to `true` if there is a new asset, meaning if the user didn't send any asset for that hash, the current one must be inactivated\r\n- the `createdAt` is updated if there is a new asset, if not, it remains the same",
      "I would not expect to receive this:\r\n\r\n```\r\n[{ key: 'a', value: 1 }, { key: 'b', value: 2 }, { key: 'a', value: 42 }],\r\n[{ key: 'b', value: 3 }, { key: 'c', value: 4 }, { key: 'b', value: 101 }]\r\n```\r\n\r\nWe can figure out what would make more sense, maybe throw an exception, or just use the first match or send an array instead of a single object to the merge function.\r\nEither way, that was not a scenario where I'd use `mergeBy`.",
      "As for \"I also have some concern about output order. If we're returning an array, does the order simply match the order of the first appearance of each \"key\" in the concatenation of the two inputs? Is that sufficient? Or would we need to start considering left- and right-versions of this?\":\r\n\r\nI would order them getting all keys from the left list, in the order they are generated from the items, then the same from the right list. But in all honesty, I accept suggestions if you have better ones.",
      "I'm not sure I understood this: \"And still one other question: should there be a way to skip output values for which there is no match? It feels as though we might want that. While the merge function can simply return undefined and a follow-up filter(Boolean) would cover that case, it feels dirty. One possibility would be for that function to return an array of values to include in the output. It has a slightly clumsier developer experience but offers quite a bit more flexibility.\"\r\n\r\nThere is not need for a match from the two lists, that's exactly the point.\r\nIf one list doesn't contain a corresponding match for a generated key, its corresponding item will just be `undefined`.\r\nIn other words, there will always be at least one item (`leftItem` or `rightItem`) in the merge function. There might be both if both lists contains the corresponding key, but there will always be at least one, because the generated key was generated from one of the items from one of the two lists.",
      "The initial idea was something like this:\r\n- imagine a Venn diagram of 2 circles\r\n- the definition of the intersection is based on the merge criteria\r\n- I want as a result the entire content of both circles\r\n- for each of the 3 parts (left circle out of the intersection, the intersection and right circle out of the intersection) I want to decide how to build the return object\r\n- so if it is only in left circle I want logic A, if it is in both, logic B, and if it is only in the right circle, logic C",
      "@rodrigoruiz:\r\n\r\nFirst a caveat: Note that it's a big part of my role here to think not only of the requester's needs, but of anyone else's who might use a similar feature.  And of course I also have to consider the size of the library; the longer Ramda is around, the harder it becomes for new functions to make it in.  This is as it should be, but sometimes it's hard to explain why.  So I'm not trying to be argumentative.  I'm trying to come to an understanding of what you're suggesting, how it might be made useful to the widest possible audience, and whether the size of that audience -- or the difficulty of creating the function one one's own -- justifies including it inside Ramda.\r\n\r\n\r\n> One example where I needed it was something like this: [...]\r\n\r\nThank you.  That's helpful\r\n\r\n\r\n> I would not expect to receive this: [ ... ] Either way, that was not a scenario where I'd use `mergeBy`.\r\n\r\nBut remember, in a generic library like Ramda, we have to consider how users might use the tools we supply.  Ramda is pretty allergic to throwing exceptions, as they kill composability.  Taking first or last matches is certainly possible.  So is sending arrays, but then the user experience is degraded for what might be the most common case: zero or one items from the left, zero or one from the right, and always at least one of them.\r\n\r\n\r\n> I would order them getting all keys from the left list, in the order they are generated from the items, then the same from the right list.\r\n\r\nWhile that's likely the most logical choice, the problem is that we're returning an ordered collection that has no clear intrinsic order.  When we `map` an array, for instance, the order of the result is obvious, the nth element of the output is the result of applying our transformation to the nth element of the input.  We might not keep some interesting properties of the input in the output (`map (square, [-3, -2, -1, 0, 1, 2, 3])` converts an ordered array into one that is not ordered) but we still understand the order.  While we can make the call for ourselves on the output order of `mergeBy`, it feels distressingly arbitrary.  Ramda still does not deal much with `Set`s, especially as it's still ES5-compatible, but would a `Set` be a more logical result, or even a `Map`, keyed off the result of your `mergeCriteria`?\r\n\r\n\r\n> There is not need for a match from the two lists, that's exactly the point.\r\n\r\nBut imagine if we include this function, other users who want to only include the result when there are matches.  While they could return `null`/`undefined`, the resulting `[undefined,  { key: 'b', leftValue: 2, rightValue: 3 }, undefined]` could be awkward and unintuitive.  It would be nice if for their case it returned just `[{ key: 'b', leftValue: 2, rightValue: 3 }]`.  I was considering ways to implement this, and one would be if the `mergeFunction` returned an *array* of results.  In your case, we would return a single-element array.  In theirs, they would return single-element arrays when there's a match and empty arrays otherwise, but we could also imagine cases where they return modified versions of *both* inputs, or return both inputs *plus* a combined one.\r\n \r\n\r\n> so if it is only in left circle I want logic A, if it is in both, logic B, and if it is only in the right circle, logic C\r\n\r\nThis makes me think of another possible implementation which might be cleaner... except that it would require six parameters.  Ramda has [only one function][ra] that takes four parameters and none that take more.  Six seems monstrous.  But I can easily see it being cleaner to separate out the logic for the three categories, and not put it into a single function:\r\n\r\n```js\r\nmergeBy (\r\n  prop ('key'),\r\n  (({key, value}) => ({key, leftValue: value, rightValue: 6}),   // left only\r\n  (({key, value: leftValue}, {value: rightValue) => ({key, leftValue, rightValue}), // both left and right\r\n  (({key, value}) => ({key, leftValue: 5: value, rightValue: value}), // right only\r\n  [{ key: 'a', value: 1 }, { key: 'b', value: 2 }],\r\n  [{ key: 'b', value: 3 }, { key: 'c', value: 4 }]\r\n)\r\n```\r\n\r\nOne other possible extension would be to replace a unary key-generating function with a binary predicate.  Rather than creating a key that we can compare with `===`, we could require the user to specifically say when a left and a right element are identical.  This has some really nice upsides, and one major downside.  One upside is that we no longer have to generate a string or numeric value when we want to compare on three fields.  I have seen such requirements as \"If they both have the same `foo` value, the same `bar` value (irrespective of case), and their `timestamps` are within 100 ms of one another\", then they are the same.\"  A second upside is that we no longer have to treat the two sides symmetrically here.  we might write `(left, right) => left._id == right.guid`.  The downside is performance.  It would replace an algorithm that operates in `O (n + m)` time on the size of the two arrays with one that operates in `O (n * m)`.  This could be a huge issue.  But the benefits are real too.\r\n\r\nFinally, we need to consider how universal this need is and how difficult it is to write on one's own if Ramda doesn't supply it.  A function expected to be widely used is more likely to make it into the library than one that is specialized.  But one that is difficult to get correct on one's own is also more likely to make it in than one which is trivial.  I think we can see that this is non-trivial to implement, regardless of the possible variation under discussion.  But that's not enough if the audience is too small.  So do you have an argument to show that this has fairly wide application?\r\n\r\n\r\n  [ra]: https://tinyurl.com/yfbn6pko",
      "As for the first part of your reply (all but the last paragraph), I agree, we have many options as to how to implement `mergeBy` and I'm willing to discuss further which ones make more sense.\r\n\r\nAs for the last part, your question, no, I do not know if other people would use this, it just seemed generic enough to be a common use case, or at least something that wouldn't hurt Ramda in general and might bring benefit to those who use it.\r\nFor example, I don't understand why Ramda doesn't have the `isNotNil` function, seems common enough for it to exist.\r\nI understand your argument of \"how simple it is to implement on its own\", but I don't see how another separate function (as in a separate file on Ramda) could hurt it, so I'd add it just for the convenience.\r\n\r\nHow would you go about it?\r\nThat's the first time I try contributing to an open source project, so I don't really know the proper steps.\r\nShould I make a poll or something similar to ask more developers about this functionality?",
      "@rodrigoruiz:\r\n\r\nFirst of all:\r\n\r\n> That's the first time I try contributing to an open source project, so I don't really know the proper steps.\r\n\r\nWelcome, and you're doing great!\r\n\r\nEvery community is different.  Here, most commonly, potential new functions are first raised as an issue and then if there's interest, a pull request is made.  But probably at least a quarter of them come in directly as pull requests.  And that's fine.  The advantage of issue-first is that there's less commitment involved in writing an implementation that might not be accepted or might need to be rewritten if discussion such as ours above make changes to the API.\r\n\r\nAlso, in some places, contributions are accepted or rejected almost at once.  Here it's always a slower process.  What started as a project in self-education for the two founders has turned into a million-download-per-day behemoth.  We did not set out to maintain a popular library and are often stunned by its success.  This shows in our haphazard processes and our slow deliberations regarding changes.\r\n\r\n\r\n\r\n> Should I make a poll or something similar to ask more developers about this functionality?\r\n\r\nHere, I'm just going to ask @ramda/core if any of them have feedback.  But often the best way to show how useful a function might be is to cite a number of uses that you've seen or that you can easily imagine.\r\n\r\n\r\n> For example, I don't understand why Ramda doesn't have the `isNotNil` function, seems common enough for it to exist.\r\nI understand your argument of \"how simple it is to implement on its own\", but I don't see how another separate function (as in a separate file on Ramda) could hurt it, so I'd add it just for the convenience.\r\n\r\nThat actually should make it in the next release.  https://github.com/ramda/ramda/pull/2818\r\n\r\nBut it's much easier to agree that `isNotNil` is a common need, and when it is suggested, it needs much less discussion to approve of the idea, simply because it's so obviously  useful.  That it's easy to  implement as `complement (isNil)` doesn't outweigh the obvious utility.  `mergeBy` is trickier.  But note that if we do decide that it doesn't belong in Ramda itself, it can always go in the [Cookbook][cb].  And even better, [ramda-adjunct][ra] has long served as a home for most useful well-written functions that don't quite make it into Ramda core.  @char0n is very obliging.  So if we decide it doesn't belong in Ramda itself, it could well still find a useful home.\r\n\r\n\r\n> I agree, we have many options as to how to implement `mergeBy` and I'm willing to discuss further which ones make more sense.\r\n\r\nWell good.  That's how things tend to go here.  Long discussions, sometimes involving long pauses.  But we do get somewhere eventually!\r\n\r\n\r\n\r\n  [cb]: https://github.com/ramda/rama/wiki/Cookbook\r\n  [ra]: https://github.com/char0n/ramda-adjunct\r\n\r\n",
      "@rodrigoruiz:\r\n\r\nAre you still interested in pursuing this?  If so, we need to decide if some of the discussion should make it into the implementation.  We would also need to add tests.",
      "My apologies for the delay @CrossEye , I lost access to my GitHub account.\r\nI'm sorry, but I currently don't have the time to pursue this, but thank you for your time."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a048dfb6b84f2425634",
    "number": 3168,
    "body": "I don't think Ramda currently has a function equivalent to that `mergeBy` I implemented, so I'd like others' opinions on whether this is relevant to everyone else and if it is implemented efficiently.\r\n\r\nThank you, any comments are appreciated.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a058dfb6b84f2425635",
    "number": 3165,
    "body": "use Promise.all after ap, raise error [#3157](https://github.com/ramda/ramda/issues/3157)\r\nadd allThen function, simplify `Promise.all.bind(Promise)`.\r\n",
    "head_branch": "allThen",
    "is_a_fork": true,
    "comments": [
      "@HoKangInfo:\r\n\r\nDo you want to argue in favor of this?  Or can we just go ahead and close it?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a068dfb6b84f2425636",
    "number": 3161,
    "body": "",
    "head_branch": "chore/link-toPairs-keys-values",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "chore: link toPairs, keys and values (#3161)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a078dfb6b84f2425637",
    "number": 3160,
    "body": "In the [current `paths` implementation](https://github.com/ramda/ramda/blob/v0.27.0/source/paths.js#L29), current iterating path of `paths` will always return `undefined` if the intermediate path value is nil (`val == null`) . Return the actual nil value may be more precise?",
    "head_branch": "chore/optimize-paths-nil-value",
    "is_a_fork": true,
    "comments": [
      "I can't decide if this makes sense or not.\r\n\r\nIs it better to consistently return `undefined` if the path is not found or is it better to always return the specific nilary value supplied or found somewhere on the path.  The big argument against it to my mind is that the function, by design, does not give you information about where along the path we found a nil value.  So I'm not sure it makes sense to say, \"Well, either `foo` is `null` or `foo` is non-`null` but `foo.bar` is `null`, or `foo` and `foo.bar` are non-`null`, but `foo.bar.baz` is `null`.  But we can tell you for sure that one of those values was `null` and not `undefined`.\"\r\n\r\nIt feels odd.\r\n\r\nBut I usually like that general idea, of making sure the specifics of an oddball case are passed along to the caller.  So I'm a little torn.\r\n\r\nOne concern is that such a change could conceivably cause a regression for people who test specifically for `undefined`.\r\n\r\nDo you have a strong selling point for this?",
      "I check the `path` 's implementation again, return `undefined` is the right behavior if the intermediate path is nil. There's no need to worry if the endpoint value of the path is `null` or `undefined`, `path` will return the right value in this situation."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a088dfb6b84f2425638",
    "number": 3158,
    "body": "",
    "head_branch": "dotAll-flag",
    "is_a_fork": true,
    "comments": [
      "> This looks good, would it be possible to add a test for the flags?\r\n\r\nI can not add test case, because ESlint raise `Invalid regular expression flag`.\r\n",
      "> > This looks good, would it be possible to add a test for the flags?\r\n> \r\n> I can not add test case, because ESlint raise `Invalid regular expression flag`.\r\n.eslintrc\r\n```\r\n    \"parserOptions\": {\r\n        \"ecmaVersion\": 8, // 8,  9 or 10\r\n     }\r\n```       \r\n\r\ntest/tets.js\r\n```\r\n   it('returns true if string matches dotAll pattern', function() {\r\n     eq(R.test(/x.*z/s, 'x.\\nyz'), true);\r\n   });\r\n\r\n```\r\n\r\n \r\n",
      "@HoKangInfo You can specify eslint environments using a comment inside of a JavaScript file, [as follows](https://eslint.org/docs/user-guide/configuring/language-options#using-configuration-comments): \r\n\r\n```js\r\n/* eslint-env es2018 */\r\n```",
      "Ramda is compatible with es5, but dotAll flag is an es2018 feature.\r\nWill this cause some trouble when people using dotAll without polyfill？",
      "@adispring:\r\n\r\n> dotAll flag is an es2018 feature.\r\n> Will this cause some trouble when people using dotAll without polyfill？\r\n\r\nYes, but it's not trouble caused by Ramda.  If they are going to use features from a later version of the language, we don't interfere.  Heck, Ramda is almost compatible with ES3, but I never use it these days with anything less than ES6/2015.\r\n\r\n",
      "> Ramda is compatible with es5, but dotAll flag is an es2018 feature.\r\n> Will this cause some trouble when people using dotAll without polyfill？\r\n\r\nI think OK, because only exist `pattern.dotAll`, 's' is appended."
    ],
    "commit_messages": [
      "fix, add use first flags property, and support dotAll flag (#3158)\n\n* fix, add use first flags property, and support dotAll flag\r\n\r\n* add dotAll flag test case\r\n\r\n* move eslint-env comment to top\r\n\r\n* remove eslint-env comment"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a098dfb6b84f2425639",
    "number": 3155,
    "body": "To retry a function until it returns true or reaches the maximum tries",
    "head_branch": "retry",
    "is_a_fork": true,
    "comments": [
      "@hungdt8796:\r\n\r\nPlease update to explain the rationale for your function and the reason you think it belongs in Ramda.",
      "This function is not very suitable for this library. Promise is not clean.",
      "@hungdt8796: Any follow up or should I just close this?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a0a8dfb6b84f242563a",
    "number": 3152,
    "body": "",
    "head_branch": "ram_retry",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a0b8dfb6b84f242563b",
    "number": 3151,
    "body": "",
    "head_branch": "link-findIndex-indexOf",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "chore: link findIndex and indexOf, and their 'last' version (#3151)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a0c8dfb6b84f242563c",
    "number": 3149,
    "body": "",
    "head_branch": "retry",
    "is_a_fork": true,
    "comments": [
      "@ngocviet: \r\n\r\nPlease add some description.  What does your function do?  Why does the world need it?  How well does it fit with other Ramda functions?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a0d8dfb6b84f242563d",
    "number": 3144,
    "body": "`(a -> Boolean) -> [a] -> Number`\r\n\r\ncounts items in a list that match a predicate.\r\n\r\n#3143 ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Ramda already have a function called `countBy`, but `count` may be more convenient in some cases."
    ],
    "commit_messages": [
      "Add `count` function (#3144)\n\n* feat: add `count` function\r\n\r\n* addressed comments re:tests\r\n\r\n* refactor(count): inline lambda\r\n\r\n* refactor: use internal _reduce"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a0e8dfb6b84f242563e",
    "number": 3140,
    "body": "Negative integer may also be odd number, and negative integer moduloed by 2 returns -1.\r\n\r\nSo the correct way to check whether an integer is odd or even, is as follows:\r\n\r\n```js\r\nconst isOdd = n => n % 2 !== 0;\r\nconst isEven = n => n % 2 === 0;\r\n```",
    "head_branch": "fix/optimize-isOdd",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix: isOdd: n % 2 may be 1 and -1. (#3140)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a0f8dfb6b84f242563f",
    "number": 3139,
    "body": "Inspired by [a StackOverflow question][so] and a [number of similar ones][ss] asked before.\r\n\r\nMore documentation is no guarantee that users will read it, but at least it's available to them.\r\n\r\n\r\n  [so]: https://stackoverflow.com/q/66764922/1243641\r\n  [ss]: https://stackoverflow.com/search?tab=newest&q=%5bramda.js%5d%20cond",
    "head_branch": "fix-cond-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Adding note to cond documentation (#3139)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a108dfb6b84f2425640",
    "number": 3136,
    "body": "",
    "head_branch": "feat/optimize-groupBy",
    "is_a_fork": true,
    "comments": [
      "I was curious, so I looked into the history, and you're off the hook, @CrossEye  :)\r\n\r\nhttps://github.com/ramda/ramda/pull/1704#discussion_r58328270\r\n\r\ndavidchambers:\r\n\r\n> I haven't been following this pull request closely, so this may already have been discussed, but why must we use `null` as the initial value rather than `[]`?\r\n\r\nasaf-romano:\r\n\r\n> Because the array instance is shared otherwise. That's what you get for mutability. Another option is to special case the empty array case, but I think passing null is cleaner, as far as \"clean\" can get in this case.\r\n\r\nThat being said, I still feel like this change is an improvement.",
      "Everytime `reduceBy` generates a new subgroup, it will deep clone the initial accumulator value passed to `reduceBy` as ths subgroup's initial value, as following:\r\n\r\nhttps://github.com/ramda/ramda/blob/84af16091e8c19518f189a8cf087d1318ff57d60/source/reduceBy.js#L58\r\n\r\nThough `acc.push(item)` will make acc mutable, `acc` is not shared between subgroups.\r\n\r\nSo, I think it is ok to replace `null` with `[]`."
    ],
    "commit_messages": [
      "chore: There is no need to check if acc is empty every time. (#3136)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a118dfb6b84f2425641",
    "number": 3135,
    "body": "When cloning a typed array, the value is a reference to the original value.\r\nThis can be fixed by cloning the array using `.slice()`\r\n\r\n\r\nAn example to see how clone is currently behaving\r\n```js\r\nimport * as R from \"ramda\";\r\n\r\nconst a = new Int8Array([1]);\r\nconst b = R.clone(a);\r\n\r\nb[0] = 100;\r\n\r\nconsole.log(a[0]); // 100\r\nconsole.log(b[0]); // 100\r\n```",
    "head_branch": "typed-array-cloning",
    "is_a_fork": true,
    "comments": [
      "Nice catch!\r\n\r\nLooks like you have `Uint16Array` tests twice and are missing BigInt?"
    ],
    "commit_messages": [
      "fix: clone typed arrays (#3135)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a128dfb6b84f2425642",
    "number": 3134,
    "body": "Takes care of positive and negative indices, getting rid of the start logic; adding array length as a variable as it was being reused often.\r\n\r\nadjust test cases pass too.",
    "head_branch": "kanineadjust",
    "is_a_fork": true,
    "comments": [
      "Merged.  Thank you very much 9kartik!"
    ],
    "commit_messages": [
      "adjust code refactoring : using modulo to cycle through indices positive and negative; adding array length as a pavariable as it was being reused often (#3134)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a138dfb6b84f2425643",
    "number": 3129,
    "body": "#3125 ",
    "head_branch": "feature",
    "is_a_fork": true,
    "comments": [
      "I'm trying to decide how necessary this seems.  We just added `unwind` mostly on speculation.  It looks like a useful function, but should we simply leave this wrapper for users to define if they need it?  It wouldn't be hard, perhaps something like:\r\n\r\n```js\r\nconst unwindAll = (keys) => (obj) => \r\n  keys .reduce ((os, k) => os .flatMap (unwind (k)), [obj])\r\n```\r\n\r\nCan you offer a strong argument for including it?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a138dfb6b84f2425644",
    "number": 3126,
    "body": "",
    "head_branch": "feat/optimize-xtake",
    "is_a_fork": true,
    "comments": [
      "Could you add an explanation, for those of us who never worked closely with the transducer implementation?\r\n\r\nWhat is the advantage of the change?  Is there a failing edge case, or a larger failure altogether?  Or do you believe this is simply cleaner code?\r\n\r\nAlso if I read this correctly:, \r\n\r\n```js\r\n  var ret = this.n === 0 ? _reduced(result) : this.xf['@@transducer/step'](result, input);\r\n  return this.n >= 0 && this.i >= this.n ? _reduced(ret) : ret;\r\n```\r\n\r\nwe could end up returning `_reduced (_reduced (result))`.  Is that a problem?\r\n",
      "```js\r\n  var ret = this.n === 0 ? _reduced(result) : this.xf['@@transducer/step'](result, input);\r\n  return this.n >= 0 && this.i >= this.n ? _reduced(ret) : ret;\r\n```\r\n\r\nThough there's no problem to do `_reduced(_reduced(result)`, there's also no need to wrap `result` early.\r\n\r\n`_reduced` will only wrap the real value once:\r\n\r\n```js\r\nexport default function _reduced(x) {\r\n  return x && x['@@transducer/reduced'] ? x :\r\n    {\r\n      '@@transducer/value': x,\r\n      '@@transducer/reduced': true\r\n    };\r\n}\r\n```\r\n\r\nI thought it will iterate more than 1 time when `n` is 0, but I'm wrong, it will exit after the first iteration, as follows:\r\n\r\n```js\r\nreturn this.n >= 0 && this.i >= this.n ? _reduced(ret) : ret;\r\n```\r\n\r\n`n` equals 0, and `i` is 0 too, so the `ret` will be wrapped with `_reduced` in the first iteration, and exit immediately."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a148dfb6b84f2425645",
    "number": 3125,
    "body": "#3078",
    "head_branch": "feature",
    "is_a_fork": true,
    "comments": [
      "**Update**: This was the behavior discussed and agreed to in #3078 (and I'm the one who proposed it!  :wink:!).  So I withdraw any objection!\r\n\r\n<del>Besides the review above about the implementation, there is one API decision we need to consider.</del>\r\n\r\n<del>This implementation assumes that if there is no property at the given key, or if there is one but its not iterable, then we should return an array containing just the original object.</del>\r\n\r\n<del>That might be the best decision, but we shouldn't ignore that obvious alternative of returning an empty array in these cases.  I will reread the long thread in #3078 in a little while; perhaps we already discussed this.  It is a reasonable alternative, and shouldn't be overlooked, especially as it would match with the results of having an empty iterable:</del>\r\n\r\n<pre><code lang=\"javascript\">\r\n<del>const object = { \r\n  name: 'alice',\r\n  hobbies: [],\r\n  colors: ['red', 'green'],\r\n};</del>\r\n\r\n<del>unwind ('hobbies') (object) //=> []</del>\r\n</code></pre>",
      "We can either inline example as in https://ramdajs.com/docs/#ascend. Or remove `=>` from the example and make it consistent as in https://ramdajs.com/docs/#groupBy. What do you suggest?",
      "> We can either inline example as in https://ramdajs.com/docs/#ascend. Or remove `=>` from the example and make it consistent as in https://ramdajs.com/docs/#groupBy. What do you suggest?\r\n\r\nYes, I've considered that, but I felt that your example was too long to fit comfortably on one line (I don't think it should be made shorter).\r\nSo now, there's the example of `groupBy` which does stand out...\r\nSo yeah, we can do it like `groupBy` oooooor:\r\n\r\n```js\r\n//=>\r\n// [\r\n//   { name: 'alice', hobbies: 'Golf', colors: ['red', 'green'] },\r\n//   { name: 'alice', hobbies: 'Hacking', colors: ['red', 'green'] }\r\n// ]\r\n```",
      "@Bradcomp: Anything to add before I merge this?",
      ">  @Bradcomp: Anything to add before I merge this?\r\n\r\nNope! We're good to go.",
      "Thank you @DevBaweja and the whole team!  This is a great addition to Ramda.",
      "Looking forward to learning and contribute our best. We appreciate your help."
    ],
    "commit_messages": [
      "Added unwind function with unwind test files (#3125)\n\n* Added unwind function with unwind test files\r\n\r\n* Corrected source and test file for unwind function\r\n\r\n* Removed unnecessary test for negative number in unwind\r\n\r\n* Removed extra spaces\r\n\r\n* Fixed documentation indentation for unwind\r\n\r\n* Fixed documentation indentation for unwind"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a158dfb6b84f2425646",
    "number": 3123,
    "body": "I've republished Ramda on Deno/x and Nest; this PR is to reflect the changes on the README.",
    "head_branch": "fix/readme-deno",
    "is_a_fork": true,
    "comments": [
      "What can I do to get this merged in?",
      "Probably just ping us again as a reminder!\r\n\r\nThanks.  Merged.",
      "> Probably just ping us again as a reminder!\r\n> \r\n> Thanks. Merged.\r\n\r\n😅 thank you",
      "> Probably just ping us again as a reminder!\r\n> \r\n> Thanks. Merged.\r\n\r\nBy the way, I brain is mush lately; there wasn't a tone to my question, I was sincerely asking if there's something more I can do.\r\nAt any rate, I wish you all an Happy New Year - Thank you for everything you guys do.",
      "> there wasn't a tone to my question\r\n\r\nNothing to worry about.  We are fairly slow to move around here.  The founders of this library set out to create a little educational repo for ourselves.  When it took off to become a popular library, we were never ready for it.  We still don't really know how to keep up with it.  So things are always falling through cracks.  Reminders are very good!"
    ],
    "commit_messages": [
      "Update the README to reflect changes to Deno and Nest packages (#3123)\n\n(cherry picked from commit a59507a0688c81b24fef5a77a0755e6885a246d9)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a168dfb6b84f2425647",
    "number": 3122,
    "body": "#3078 Feature Request: unwind",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Two things:\r\n\r\n  - Are you part of the group that presented this idea in the first place, part of the team with @DevBaweja and @Jayesh-30?\r\n\r\n  - Please see our [Contributing.md][co] guide.  Every new function needs to be added to index.js and needs a corresponding test file.\r\n\r\nI will look it over once there is a test file included.  \r\n \r\n\r\n  [co]: https://github.com/ramda/ramda/blob/c8f0b7fb74da5af1d8538d4cae402f2a59597766/CONTRIBUTING.md",
      "Yes, we are part of the same team.\r\nAlso, we have created the rest of the functions, i.e., unwindAll and wind with their respective test files.\r\nI'll modify files w.r.t. point 2 and will get back to you in few hours."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a178dfb6b84f2425648",
    "number": 3119,
    "body": "As a newbie to Ramda, I find it clearer this way",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "> I have no problem merging this. I'm curious why you find this clearer. Is it because of the abundance of `2`s in the example, including `multiply2`, `[2]`, and `double`?\r\n\r\nThanks!\r\nYes exactly!",
      "@carlosmori: Thank you very much for your contribution!\r\n\r\n:herb:"
    ],
    "commit_messages": [
      "Update partial.js docs (#3119)\n\nAs a newbie to Ramda, I find it clearer this way"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a188dfb6b84f2425649",
    "number": 3116,
    "body": "This PR removes support of negative indices in functions: lensIndex, prop, path, paths, pathEq, pathOr, propEq, propIs, propOr.\r\n\r\nThe first PR in which this logic was added: https://github.com/ramda/ramda/pull/2670\r\n\r\nAPI inconsistency that was reported as an bug: https://github.com/ramda/ramda/issues/2974\r\n\r\nAn example that shows why this logic is not compatible with the rest of the functions in Ramda (and JS itself):\r\n```javascript\r\nconst ar = ['a', 'b']\r\nconst idxOfC = findIndex(equals('c'))(ar)\r\nconsole.log( prop(idxOfC, ar) ) // => 'b'\r\n```\r\n\r\nInterest: @2beaucoup @CrossEye @Bradcomp @Andrey-Bazhanov",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "I'm wondering about `slice` too.  While I'd hate to lose that -- I use the vanilla equivalent all the time -- it might be time to simply gain this consistency across the board.  There may be others too; I'll try to look this evening.",
      "@CrossEye I don't understand. R.slice is basically the same as Array.slice...\r\n```\r\nvar slice = _curry3(_checkForMethod('slice', function slice(fromIndex, toIndex, list) {\r\n  return Array.prototype.slice.call(list, fromIndex, toIndex);\r\n}));\r\n```\r\nSo in this case, removing the negative indices handler will be additional logic...\r\n\r\nAnother question: Is there a plan/calendar for release Ramda 1.0?",
      "@ku8ar:\r\n> So in this case, removing the negative indices handler will be additional logic...\r\n\r\nYes it would.  But it might be nice to be able to answer the question, \"Which Ramda functions allow for negative indices?\" with \"None of them.\"\r\n\r\n> Another question: Is there a plan/calendar for release Ramda 1.0?\r\n\r\nIt's always, *some day*.  But we never seem to get to it.  If you are interested in chipping in to make that happen, please let us know."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a198dfb6b84f242564a",
    "number": 3111,
    "body": "According to [MDN document](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols), `iterable` an `iterator ` are two different thing:\r\n\r\n* `iterable` is an object that can create an `iterator` by `@@iterator` method;\r\n* `iterator` is  an object that implements a `next()` method, which can produce a sequence of values;\r\n\r\nSo in the `_reduce`'s implementation,  `_iterableReduce` processes `iterator` instead of `iterable` actually. I think it's better to be called as `_iteratorReduce`.",
    "head_branch": "chore/iterator_reduce",
    "is_a_fork": true,
    "comments": [
      "I think this raises a much broader point.\r\n\r\n*Should* we be accepting iterators?  That strikes me very much against the spirit of Ramda.  Accepting iterables keeps the mutation inside our function.  But accepting iterators seems to lead to potential problems with referential transparency.  Iterators are inherently stateful, and I really don't like this:\r\n\r\n```\r\nconst arr= [1, 2, 3]\r\nconst foo = arr [Symbol.iterator] ()\r\n\r\nreduce (add, 0, foo) //=> 6\r\nreduce (add, 0, foo) //=> 0  // Whoa!!!\r\n```\r\n\r\nWith iterables, this just makes sense:\r\n\r\n```\r\nconst bar = {\r\n  [Symbol.iterator]: (i = 0) => ({\r\n    next: () => i < 3 ? {done: false, value: ++i} : {done: true}      \r\n  })\r\n}\r\n\r\nreduce (add, 0, bar) //=> 6\r\nreduce (add, 0, bar) //=> 6\r\n```\r\n\r\nI believe we need to think this through pretty carefully.",
      "Yes, iterator will change itself's state when calling `next()`. So, let's remove iterator from `reduce`?",
      "@adispring:\r\n\r\n> Yes, iterator will change itself's state when calling `next()`. So, let's remove iterator from `reduce`?\r\n\r\nThat's my current thought.  But I believe this needs significantly more deliberation.\r\n\r\nAnyone from @ramda/core want to chime in?  How about @buzzdecafe or @kevinbeaty or @kedashoe?\r\n\r\n",
      "ping @ramda/core:  Any thoughts on this?",
      "My preference is to accept/work with iterables only.",
      "I support removing iterator support  (i.e. only support iterables).\r\n\r\nI don't really remember why we supported iterators, but I think it might have been to support existing libraries that added iterators before iterables were well defined. Similar to \"thenables\" vs `Promise`.",
      "Ok, then I think we have a plan.  @cusomcommander: Do you think the change belongs in `1.0` or some post-`1.0` release?",
      "I think v1.0 is likely to contain some breaking changes so I'd prefer we have as many as possible in v1.0. So yeah I'd suggest this is part of the v1.0 release. Perhaps we could also record that decision (iterators vs iterables) somewhere? I'm a big fan of ADRs.",
      "@customcommander: I haven't used ADR's in a GitHub project.  Do you know of a good built-in mechanism that supports them?  Obviously we can just record them in the wiki or some such, if no common method exists."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a1a8dfb6b84f242564b",
    "number": 3109,
    "body": "Follow up to [this comment](https://stackoverflow.com/questions/54178228/can-you-give-me-an-example-of-how-to-use-ramda-lift#comment95192463_54178228) of yours @CrossEye ",
    "head_branch": "lift-example",
    "is_a_fork": true,
    "comments": [
      "Yes, we should have done this ages ago.  Thanks, @customcommander!"
    ],
    "commit_messages": [
      "doc: better lift examples (#3109)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a1b8dfb6b84f242564c",
    "number": 3107,
    "body": "Referencing to issue #3106.\r\n\r\nThese changes introduce two new functions: `modify` and `modifyPath`. These functions change a value of a property (or path) of an object by applying a function to it. It modifies the prop (or path) in the original array immutably (returning a shallow copy), but copies all other keys by reference. If the given property (or path) does not exist on the object, then it returns the original object.\r\n\r\nThese functions are similar to `evolve`, however this function does not validate whether the second parameter is a function, it simply fails on call. Functionally it is mostly equivalent to `over(lensProp)` or `over(lensPath)`, however based on my benchmarks (Linux, Node v15 with [benchmark.js](https://gist.github.com/daniel7grant/b5a9410d1a260f8ece3912cccb7a99ea)) it is much faster than either `evolve` and lenses, being up to two times faster for long paths. For multiple path parts, `modifyPath` is even faster than using `assocPath`.\r\n\r\nIf you have any questions or suggestions, feel free to take them, this is my first contribution, I hope I'm doing everything correctly.",
    "head_branch": "pr/modify",
    "is_a_fork": true,
    "comments": [
      "Since `assoc` and `assocPath` since #2787  operate on array, how about `modify`/`modifyPath` support array in the same way too?",
      "> Since `assoc` and `assocPath` since #2787 operate on array, how about `modify`/`modifyPath` support array in the same way too?\r\n\r\nUnder the hood `modifyPath` uses the same internal function as `assocPath` (`_assoc`), and its changed version for functions (`_modify`). Both of these handle the array case separately, so these functions should work for array indices in any point in the path.",
      "@hitmands: This [is failing][cc] a CodeClimate check, one which I don't think is relevant to us.  I don't really understand the tool.  Obviously I can force-merge this to ignore the issue, but does CodeClimate have some mechanism to say \"No, this time it's ok.\"?\r\n\r\n  [cc]: https://codeclimate.com/github/ramda/ramda/pull/3107",
      "> @hitmands: This [is failing](https://codeclimate.com/github/ramda/ramda/pull/3107) a CodeClimate check, one which I don't think is relevant to us. I don't really understand the tool. Obviously I can force-merge this to ignore the issue, but does CodeClimate have some mechanism to say \"No, this time it's ok.\"?\r\n\r\n\r\nHey @CrossEye yes, you have a couple of options:\r\n\r\n1. Mark the issue as `not an issue`\r\n2. Approve the PR\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/5674833/98984029-8aeb0400-2519-11eb-90df-c57fdf7f6f11.png)\r\n![abc](https://user-images.githubusercontent.com/5674833/98984157-ba017580-2519-11eb-8328-6c214db4c018.gif)\r\n",
      "@hitmands:\r\n\r\nThat's what I was expecting.\r\n\r\nI wonder if I don't have edit authority on codeclimate.  That \"New\" dropdown you were seeing just looked like a tag label, and didn't seem like I could perform an action there.  Not too worried about it at the moment.  Next time I'll try harder.",
      "@daniel7grant: do you want to make those minor tweaks?  I'm ready to merge this when those are done.  It seems both useful and well done.",
      "@CrossEye let me check",
      "@hitmands: Thanks.  If there's a way to give authority to a team, I'd go with all of @ramda/core.",
      "@CrossEye let's take this on a separate thread, however you should have admin access on cc too... \n\nCan u see the settings tab in cc?\n\n![image](https://user-images.githubusercontent.com/5674833/99002596-926bd680-2534-11eb-9642-5c8c16814f84.jpeg)\n",
      "> @daniel7grant: do you want to make those minor tweaks? I'm ready to merge this when those are done. It seems both useful and well done.\r\n\r\nThanks @CrossEye, I finished fixing the minor issues. All green across the board (including adding one semicolon to the partialBuild script). I'm glad I could contribute, really enjoying the library.",
      "Thanks @daniel7grant -- this looks like a very worthy addition.  Hopefully we'll push a build soon.",
      "@hitmands: This is my view:\r\n\r\n![Main CC page](https://user-images.githubusercontent.com/151263/99016346-ee2e6380-2524-11eb-8d3f-05cd663f4155.png)\r\n\r\nAnd the user profile page:\r\n\r\n![Profile CC page](https://user-images.githubusercontent.com/151263/99016366-f8506200-2524-11eb-8d64-f250655164e5.png)\r\n\r\n(The other tabs don't seem to have anything useful either.)"
    ],
    "commit_messages": [
      "new functions: modify and modifyPath (#3107)\n\n* Add modify and modifyPath functions\r\n\r\n* Update parameter validations, add documentation\r\n\r\n* Fix tests for modification in function param validation\r\n\r\n* Refactor modifyPath to fail first\r\n\r\n* Fix minor issues with order, parentheses and linting"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a1c8dfb6b84f242564d",
    "number": 3100,
    "body": "[npm-run-all](https://github.com/mysticatea/npm-run-all/blob/HEAD/docs/npm-run-all.md) can run scripts parallel(or sequential), which can save some time.",
    "head_branch": "npm-run-all",
    "is_a_fork": true,
    "comments": [
      "@adispring: Do you have time to look into the build problems?  (I manually resolved the `package-lock.json` differences and may have caused something here.)",
      "This is a eslint problem: https://github.com/ramda/ramda/pull/2368#discussion_r790201868",
      "This PR(https://github.com/ramda/ramda/pull/3158) introduce `s` regex symbol which is an es2018 feature, eslint will not parse `/***/s` by default.",
      "> This PR(#3158) introduce `s` regex symbol which is an es2018 feature, eslint will not parse `/***/s` by default.\r\n\r\nThis has been fixed in commit https://github.com/ramda/ramda/commit/56a36ecaa42a0f89132aaef575ac8c785ade033d since then. @adispring I took the liberty to rebase your branch against ramda/master to fix that and a merge conflict with the lock file. Hope that's ok.",
      "@CrossEye: no changes since your last review other than the lock file needed to be regenerated. The rebase allowed to get the changes that fixed the linter errors."
    ],
    "commit_messages": [
      "feat: using npm-run-all -p to run scripts parallel (#3100)\n\n* feat: using npm-run-all -p to run scripts parallel\r\n\r\n* feat: run spec and lint parallelly too.\r\n\r\n* chore: there's no need to use npm-run-all --sequential."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a1d8dfb6b84f242564e",
    "number": 3096,
    "body": "It seems like partial builds broke with the recent rollup update,  output is now formatted as chunks.\r\n```\r\nevents.js:187\r\n      throw er; // Unhandled 'error' event\r\n      ^\r\n\r\nTypeError [ERR_INVALID_ARG_TYPE]: The \"chunk\" argument must be one of type string or Buffer. Received type undefined\r\n    at validChunk (_stream_writable.js:268:10)\r\n    at SyncWriteStream.Writable.write (_stream_writable.js:303:21)\r\n    at ramda/scripts/partialBuild.js:15:18\r\nEmitted 'error' event on SyncWriteStream instance at:\r\n    at emitErrorNT (internal/streams/destroy.js:92:8)\r\n    at emitErrorAndCloseNT (internal/streams/destroy.js:60:3)\r\n    at processTicksAndRejections (internal/process/task_queues.js:80:21) {\r\n  code: 'ERR_INVALID_ARG_TYPE'\r\n}\r\n```",
    "head_branch": "partial-build-fix",
    "is_a_fork": true,
    "comments": [
      "Thank you, @cviejo!  :herb:"
    ],
    "commit_messages": [
      "fix: partial build (#3096)\n\n* fixed partial build output\r\n\r\n* write multiple chunks"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a1e8dfb6b84f242564f",
    "number": 3095,
    "body": "As seen in issue #1540, I am opening this Pull Request in order to:\r\n- migrate ramda to fast-check instead of jsverify - _indeed a year ago jsverify owner announced that he stopped the maintenance of the library and the most recent commit was done the 6th of September 2019_\r\n- add some others for `symmetricDifference`, `identical` and `reverse`",
    "head_branch": "pbt-fast-check",
    "is_a_fork": true,
    "comments": [
      "I'll have to look through this in more detail soon, but I've very happy to see these changes.  Thanks, @dubzzz !",
      "> :bowtie: I really appreciate this, seems like a gain all around. I may even try writing some tests once this gets merged in.\r\n\r\n@Bradcomp Thanks a lot for the approval, I'll also try to add some others too",
      "> I'll also try to add some others too\r\n\r\nThis is fine as it is, but if you're interested here is the one I was thinking about:\r\n\r\nhttps://github.com/ramda/ramda/pull/2962#issuecomment-579000410",
      "@Bradcomp I am going to have a look to #2962. Do you want me to do it in this PR or to open another one?",
      "@Bradcomp I finally took some time to implement some PBT tests for https://github.com/ramda/ramda/pull/2962#issuecomment-579000410. I also refreshed the PR to includes the latest version of fast-check",
      "Thank you @dubzzz!",
      "Thanks for the reviews 👍 "
    ],
    "commit_messages": [
      "Move existing PBT tests to fast-check and add some more (#3095)\n\n* Migrate property based tests to fast-check\r\n\r\n* Add some more property based testing tests\r\n\r\n* Add missing semicolon\r\n\r\n* Move test from uniq to equals\r\n\r\n* Use R.uniq\r\n\r\n* Bump to latest version of fast-check\r\n\r\n* Bump fast-check\r\n\r\n* Add tests for prop"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a1f8dfb6b84f2425650",
    "number": 3094,
    "body": "I created a new function `R.swap` based on the specs listed in #3079.\r\n\r\nI based the changes heavily on the implementations of the existing `R.move` function. I also adjusted the parameter ordering from the main issue to align the currying up with what is suggested later in the thread.",
    "head_branch": "function-swap",
    "is_a_fork": true,
    "comments": [
      "I like this function quite a bit.  I'm curious though, why you chose not to implement the remaining idea of \r\n\r\n```js\r\nswapArrayByIndex(object, keyA, keyB)\r\nswapArrayByIndex({ a: 1, b: 2}, 'a', 'b')\r\n=> { a:2, b:1 }\r\n```",
      "I thought that this was a good boundary for a contribution. I'd be happy to adjust this to include the ability to use objects. Alternately I could also contribute to implement objects for both `R.move` and `R.swap`. Let me know!",
      "My take is that this is reasonable for `swap`, and if we're going to add the function, it makes sense to do so in the same PR.  But it's much less of a clear API for `move`.\r\n\r\nI think we need to decide what sort of type we are thinking of this `swap` working on.  Essentially it's an indexed structure of some sort, something broad enough to encompass both Arrays and Objects.  But I don't have a good name for it.",
      "I can update my request to contain the ability to `swap` an array or an object, and we can defer the `move` implementation.\r\n\r\nAs for determining the type: is there a concept for a union? ",
      "I have no problem with an *ad hoc* union in the type signature.  I'm just wondering if there is an abstract type we should have in the background, in our thoughts here.  For instance, should this work?:\r\n\r\n```js\r\nswap (0, 2) ('foo') //=> 'oof'\r\n```\r\n\r\nor this?:\r\n\r\n```js\r\nswap (obj1, obj2) (new Map ([[obj1, 1] [obj2, 2]])) //=> new Map ([[obj1, 2], [obj2, 1]])\r\n```\r\n\r\nIs there a general abstraction here that various types might match and expect this to work.\r\n\r\nBut I don't want this to slow down the PR.  If we do find one, we can expand the idea later.  I'm mostly just musing here.",
      "We already have an `Index` type we use for functions like `path`. It's an ad-hoc union but at least it's an existing ad-hoc union. I think it makes sense for this function to work on indexable things (currently Array and Object), and would make it more useful.  An issue with the type signature that isn't present in path is that for this function, both of the two indexes should be the same type. \r\n\r\nBut do they? Technically an Array can have string indexed members, and an Object will coerce `obj[1]` to `obj['1']`. Do we want to care about that? After typing this out my thought is that it's fine to take two arbitrary Index values, but I also have a fairly high tolerance for the looseness of JS in the context of my typical Ramda use case.",
      "I'm not sure enough of my HM annotation syntax to get this right, but I think there's something like this possible:\r\n\r\n```hs\r\nswap :: Idx a, Indexed a b => a -> a -> b -> b\r\nIdx = String | Int\r\nIndexed a b = ???\r\n```\r\n\r\nand this would enforce that the indices are the same type.  Since our types are aspirational rather than enforced, I would say that yes, we would say that the indices should be the same type.",
      "I made some more adjustments based on some of the feedback above to account for swapping more types. I also made some minor adjustments to the documentation, but I am sure that at least `@sig` will need some attention.\r\n\r\nLet me know what you think, and I can make more changes.",
      "I have a strong negative reaction to this addition. Parametric polymorphism is unquestionably wonderful, but ad hoc polymorphism is a source of complexity. Disciples of Rich Hickey appreciate that strands hanging apart are simpler than strands intertwined (although amusingly many core Clojure functions are “complected” by ad hoc polymorphism).\r\n\r\nMy second objection is that the proposed function uses indices. Indices are a source of complexity and bugs.\r\n\r\nI'm sorry to be negative, @joncloud. The pull request is of high quality; I just question the objective.\r\n",
      "No worries @davidchambers. I appreciate the feedback both on the concept, as well as the pull request.",
      "@davidchambers: Would your objections to ad hoc polymorphism be satisfied if we did formally name the shared type and noted some laws that it must follow?  I'd given some thought to that, but hadn't yet reached any conclusions.  Clearly it has something to do with keyed data structures, but I haven't worked it out yet.\r\n\r\nAs to indices, that is built into a number of Ramda functions.  JS doesn't treat arrays as only head-tail pairs -- actually that's fairly unusual, although I like it -- but also as directly addressable vectors.  I personally don't have any trouble with the fact that this function, for arrays, deals with indices.  To me that's no different than the fact that for objects, it deals with String keys. ",
      "> Would your objections to ad hoc polymorphism be satisfied if we did formally name the shared type and noted some laws that it must follow?\r\n\r\nYes. At that point the function would have one type signature rather than several.\r\n\r\n> As to indices, that is built into a number of Ramda functions.\r\n\r\nTrue. Sanctuary has no such functions. ;)\r\n"
    ],
    "commit_messages": [
      "feat: add swap function (#3094)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a208dfb6b84f2425651",
    "number": 3088,
    "body": "When I looked into some source code of ramda related to transducer, and some other articles about transducer, I found out that `xf` in `_dispatchable` is not a transducer, but a transducer constructor.\r\n\r\nSo in order to make the description more clear, I rename `xf` to `transducerCreator`.",
    "head_branch": "chore/optimize-transducer-description",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "chore: rename xf to transducerCreator (#3088)\n\n* chore: rename xf to transducerCreator\r\n\r\n* chore: changes constructor to factory\r\n\r\nCo-authored-by: adispring <wangzengdi@bytedance.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a218dfb6b84f2425652",
    "number": 3087,
    "body": "Resolve memoizeWith in memory sensetive situation.\r\n\r\n## Before\r\nwill be bring memory leak.\r\n\r\n```javascript\r\nfunction aBigObject() {\r\n  return {}; \r\n}\r\n\r\nvar fn = memoizeWith(R.identity, aBigObject);\r\n\r\nfn(1);\r\nfn(2);\r\n...\r\n```\r\n\r\n## After\r\n\r\nalways hold 100 items in memory.\r\n```javascript\r\nfunction aBigObject() {\r\n  return {}; \r\n}\r\n\r\nvar fn = memoizeLRUWith(100, R.identity, aBigObject);\r\n\r\nfn(1);\r\nfn(2);\r\n...\r\n```\r\n\r\n\r\n",
    "head_branch": "memoizeLRUWith",
    "is_a_fork": true,
    "comments": [
      "Or using inject cache strategy `memoizeBy(new LRU(100), identity, fn)` maybe better ?",
      "At a first read-through, this looks like very well-written, easily maintainable code.  Kudos.  If we decide to go this way, we can investigate further the decision about using an injectible caching strategy.\r\n\r\nBut I'm not particularly convinced that this is a good fit for Ramda.  I teeter even on `memoizeWith`.  Ramda generally avoids maintaining any internal state; memoization inherently involves state.  Granted the state is not observable, except perhaps by timing calls to the cache.  But it's still state, and that feels off to me.  If we didn't have it from our early days, we probably wouldn't add it now.  This PR adds even more state management.  That bothers me.\r\n\r\nOn the other hand, this is an undeniably useful function and it's non-trivial to write oneself -- two factors that help us decide whether to include something in Ramda.\r\n\r\nI'd love to hear more from you, @Qquanwei about why you think this is a good idea.\r\n\r\nAnd I'd love to hear thoughts from @kudorori, @Izhaki, @meszaros-lajos-gyorgy, who participated in #2509 and of course from others interested, especially @ramda/core.  Is this something we want to add to Ramda.  Also @char0n: if this isn't something Ramda wants to take on, do you think ramda-adjunct might be interested?  ",
      "In practice, pure functions tend to work well with memory functions, so a memory function with state is essential for Ramda.I often use the memoizeWith function in some optimization scenarios, but it can cause problems due to memory leaks. #2509 is a good solution but it lacks sufficient intelligence, so I would like to provide a convenient caching strategy so we have more options for performance optimization.This PR was not a deliberate choice, I would prefer a lodash like Memoize function that allows for cache policy injection.",
      "> Also @char0n: if this isn't something Ramda wants to take on, do you think ramda-adjunct might be interested?\r\n\r\n@CrossEye, @Qquanwei although in [ramda-adjunct](https://github.com/char0n/ramda-adjunct) we adhere to same general principles as ramda, our bar is lower and function like `memoize` would be acceptable. But it would need to be as flexible as the one provided by lodash with resolver, full cache controll and policy injection. ",
      "So I had never looked at the lodash `memoize` function.  This is the current description.  \r\n\r\n> `_.memoize(func, [resolver])`\r\n> \r\n> Creates a function that memoizes the result of `func`. If `resolver` is provided, it determines the cache key for storing the result based on the arguments provided to the memoized function. By default, the first argument provided to the memoized function is used as the map cache key. The `func` is invoked with the `this` binding of the memoized function.\r\n> \r\n> **Note**: The `cache` is exposed as the cache property on the memoized function. Its creation may be customized by replacing the `_.memoize.Cache` constructor with one whose instances implement the [Map][ma] method interface of `clear`, `delete`, `get`, `has`, and `set`.\r\n\r\nThere is definitely something in there to like.  If Ramda was to take this on, I think hanging the `cache` property off the generated function would make sense for us, and probably reusing the `Map` interface would also make sense.  (I wouldn't use a constructor but a plain function; but that's minor.)   I would keep with our explicit equivalent of `resolver`, and I would make the cache strategy a required parameter; certainly I wouldn't add the global state of `_memoize.Cache` used in lodash.  We could retain backward compatibility in `memoizeWith` as the partial application of the current strategy to a new `memoize` function.\r\n\r\nThis is still not to say that I'm sure we want to do so.\r\n\r\nBut if we do, I can see writing it this way, keeping our current `memoizeWith` for backward compatibility, but simply implementing it as `const memoizeWith = memoize(_currentNaiveCacheStrategy)`, so that now `memoizeWith.cache` has the `Map` instance interface.  (Not that `clear` or `delete` would do anything in the current strategy.)\r\n\r\nI'm still slightly queasy about the notion, though.  Perhaps it's no big deal, as it's not Ramda offering a stateful tool, only allowing users to bring their own along.  But it's still an odd direction for Ramda.\r\n\r\nI'd still really like to hear from others.  @buzzdecafe?  @Bradcomp? @davidchambers? \r\n\r\n  [ma]: http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object",
      "One option is to suggest that people use [lodash.memoize][1].\r\n\r\n\r\n[1]: https://www.npmjs.com/package/lodash.memoize\r\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a228dfb6b84f2425653",
    "number": 3085,
    "body": "fixes: #3084 \r\n\r\nThe documentation for [propOr](https://ramdajs.com/docs/#propOr) says\r\n\r\n> If the given, non-null object **has an own property with the specified name**, returns the value of that property. Otherwise returns the provided default value.\r\n\r\nEmphasis mine. However #2394 changed this behavior to align with [pathOr](https://ramdajs.com/docs/#pathOr) and return the default if the value is falsey. \r\n\r\nThe documentation is now inconsistent with this behavior because there are now cases where the object has an own property but the default is returned. E.g.\r\n\r\n```\r\nR.propOr('Ramda', 'favoriteLibrary')({favoriteLibrary: null})\r\n```\r\n\r\nThe new behavior is more likely what people are expecting, but contradicts the documentation.\r\n\r\n\r\nThis updates the documentation to align with the documentation of `prop` and\r\n`defaultTo` which is what is used in the implementation so should be an\r\naccurate description of the behavior.",
    "head_branch": "3084/fix-propOr-documentation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #3085 from orthanc/3084/fix-propOr-documentation\n\nUpdate documentation of propOr to describe defaulting beahviour."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a238dfb6b84f2425654",
    "number": 3083,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Thank you very much @rafpaf!\r\n\r\n:herb:"
    ],
    "commit_messages": [
      "Fixed typo (#3083)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a238dfb6b84f2425655",
    "number": 3082,
    "body": "",
    "head_branch": "fix/readme_release_version",
    "is_a_fork": true,
    "comments": [
      "This looks like a very good idea.  I'd actually like to entirely remove `make` from our build dependencies, and just used node/npm scripts.  It certainly makes it easier to build cross-environments.\r\n\r\nBut I don't have time to test this today.  I'll try to get to it in the next few days."
    ],
    "commit_messages": [
      "fix: update readme.md ramda version before publish (#3082)\n\n* fix: update readme.md ramda version before publish\r\n\r\n* chore: update LICENSE.txt copyright date if needed."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a248dfb6b84f2425656",
    "number": 3081,
    "body": "If the input is a primitive value, `evolve` will always return an empty object -- `{}`. \r\n\r\nSo if the input is a primitive value, it's better to return itself than return an empty object?",
    "head_branch": "optimize-evolve",
    "is_a_fork": true,
    "comments": [
      "Agreed.  This makes sense. :herb:"
    ],
    "commit_messages": [
      "evolve: ignores transformations if the input value is not Array and Object (#3081)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a258dfb6b84f2425657",
    "number": 3080,
    "body": "I was looking at our docs and noticed we don't have links between these two very similar functions. In fact `indexBy` didn't have any `@see` annotations at all.",
    "head_branch": "link-indexBy",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "added links between groupBy and indexBy (#3080)\n\nCo-authored-by: Brad Compton <bcompton@skyslope.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a268dfb6b84f2425658",
    "number": 3073,
    "body": "Updated the Copyright year as 2013-2020 in License.txt",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update Copyright year (#3073)\n\nUpdated the Copyright year as 2013-2020 in License.txt"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a278dfb6b84f2425659",
    "number": 3072,
    "body": "This will solve this issue #3070, I also add if the user added non-enumerable properties in array, [this line](https://github.com/ramda/ramda/commit/2f8e135902115f9110b12027c20360ce436b2d83#diff-3e22b8fb0b7b9c9e80982d8493e966efR35)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Thanks for the PR @felipe-gustavo!\r\n\r\nCan you add in a test for this?",
      "done, man!"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a288dfb6b84f242565a",
    "number": 3069,
    "body": "I noticed that running `npm test` doesn't do linting, and that our CONTRIBUTING.md file doesn't specify linting as a separate step. As a result a contributor following our process could introduce linting errors. This has happened recently.\r\n\r\nI'd like to avoid issues like this in the future.\r\n\r\nI updated our CONTRIBUTING.md to be more true to life, and I updated our package.json to run the linting on `npm test`. \r\n\r\nIs there a preferred alternative to these changes? \r\nShould we update CI so it doesn't run linting twice?",
    "head_branch": "lint-on-test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "update CONTRIBUTING and package.json to prevent linting errors (#3069)\n\nCo-authored-by: Brad Compton <bcompton@skyslope.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a298dfb6b84f242565b",
    "number": 3067,
    "body": "To fix the issue mention in #3066 .\r\n\r\n1. Check the property key with `hasOwnProperty` when copy to avoid copying the prototype from the original value.\r\n2. Make the new value's prototype point to the origin value's prototype.",
    "head_branch": "fix/clone-own-properties",
    "is_a_fork": true,
    "comments": [
      "@andykao1213 could you please add unit tests for this issue?",
      "@Cameri @Bradcomp \r\nThank you for your reply!\r\nI've added unit tests in 7e02905\r\nAnd I also fix the issue using deprecate `__proto__` in eaa0ac9c327db0c002dc0fd7703c3bd222f56b91\r\nPlease check if theese make sense to you.\r\nThank you!",
      "@andykao1213 Looking good, just one linter issue to fix!",
      "@Cameri Linter issue fixed!"
    ],
    "commit_messages": [
      "Fix Clone Function Copy Prototype Issue (#3067)\n\n* Fix Clone Function Copy Prototype Issue\r\n\r\n1. Check hasOwnProperty when copy to avoid copying prototype\r\n2. Make the new value's prototype point to the origin value's prototype\r\n\r\n* Replace deprecate __proto__ with buid-in method in Object\r\n\r\n* Add test for the issue deep copying prototype properties\r\n\r\n* Shorten the num of line"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a2a8dfb6b84f242565c",
    "number": 3060,
    "body": "Calling the method of the object does not deal with \"this\", which is very dangerous, in fact, it does cause infinite recursion.\r\n`R.transduce(R.dropLastWhile(R.gt(3)),R.add,0,[1,2,3,4,5])`",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Somehow this got skipped and I never saw it.  Transducers have always confused me.  Can you explain what's going on and how your fix changes it?",
      "\r\nThe problem is this, when I saw this code at the time, I felt that there might be a problem with it, because it references a method of an object, but does not bind this (the most important thing is that this method uses to this). There is bound to be a bug caused by this pointing. I tried it, and sure enough, infinite recursion appeared. Take this example as an illustration `R.transduce(R.dropLastWhile(R.gt(3)), R.add,0,[1,2,3,4,5])`.\r\n\r\nFirst, when `R.transduce(...)` is executed, `R.add` is wrapped by `XWrap`.\r\n\r\n```javascript\r\nvar transduce = curryN(4, function transduce(xf, fn, acc, list) {\r\n  return _reduce(xf(typeof fn === 'function' ? _xwrap(fn) : fn)//first wrapped\r\n  , acc, list);\r\n});\r\n```\r\n\r\nAnd when `R.dropLastWhile(...)` is executed, `XWrap(R.add)` is wrapped by `XWrap` again in the `_reduce()` logic.\r\n\r\n```javascript\r\nXDropLastWhile.prototype.flush = function(result, input) {\r\n  result = _reduce(//Here _reduce is wrapped twice\r\n    this.xf['@@transducer/step'],\r\n    result,\r\n    this.retained\r\n  );\r\n  this.retained = [];\r\n  return this.xf['@@transducer/step'](result, input);\r\n};\r\nfunction _reduce(fn, acc, list) {\r\n  if (typeof fn === 'function') {\r\n    fn = _xwrap(fn);//where secondary wrapping happens\r\n  }\r\n  //....\r\n```\r\n\r\nThe situation can be simplified to：\r\n\r\n```javascript\r\nfunction Wrap(fn) {\r\n  this.f = fn;\r\n}\r\nWrap.prototype[\"step\"] = function (acc, val) {\r\n  return this.f(acc, val);\r\n};\r\nlet fn = new Wrap(new Wrap(R.add).step);\r\nfn.f(1, 2);\r\n```\r\nEssentially, the above code ends up forming a structure like this：\r\n```javascript\r\nthis.f = function (acc,val) {\r\n  return this.f(acc.val)\r\n}\r\n```\r\nObviously, the error mainly occurs. Two this, which should point to different objects, point to the same object, which is the cause of infinite recursion.\r\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a2b8dfb6b84f242565d",
    "number": 3059,
    "body": "Calling a method without binding \"this\" is a very dangerous behavior. In fact, it also causes some unexpected infinite recursion.\r\n`R.transduce(R.dropLastWhile(R.gt(3)),R.add,0,[1,2,3,4,5])`",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a2c8dfb6b84f242565e",
    "number": 3054,
    "body": "",
    "head_branch": "feature/nest",
    "is_a_fork": true,
    "comments": [
      "Hey guys, first I would like to know what is the next step here? This thread has been dead for a while.\r\nAlso, I'm hijacking the PR to ask if it would be possible to add a webhook to deno.land? https://deno.land/x#add",
      "@sebastienfilion I'm here to help too. Let me know what steps I can take to help ramda with nest.land integration."
    ],
    "commit_messages": [
      "Add support for Nest.land - a package manager for Deno (#3054)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a2d8dfb6b84f242565f",
    "number": 3053,
    "body": "",
    "head_branch": "fix/documentation",
    "is_a_fork": true,
    "comments": [
      "relates to: \r\n - https://github.com/ramda/ramda/pull/3054\r\n - https://github.com/ramda/ramda/pull/3042",
      "Hi @sebastienfilion, \r\nPr looks straightforward to mee.\r\n\r\nI'd only ask to provide further description to help readers understand the context and use cases.",
      "> I'd only ask to provide further description to help readers understand the context and use cases.\r\n\r\nWhat kind of information do you think is pertinent? Like a link to Deno? I didn’t want to make this part of the document look too heavy.",
      "Yes, maybe just if the word \"Deno\" is a link to the Deno page, then anyone who doesn't know what it is can follow it to there."
    ],
    "commit_messages": [
      "Update documentation for Deno import (#3053)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a2e8dfb6b84f2425660",
    "number": 3052,
    "body": "It is necessary for Ramda to be a valid ESM project to have proper extensions -- Deno and the browsers will throw errors.\r\n\r\nNote: There is a lint rule to make sure that the extension is added to the import path.",
    "head_branch": "fix/extensions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #3052 from sebastienfilion/fix/extensions\n\nAdd extension to dissoc and assoc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a2f8dfb6b84f2425661",
    "number": 3050,
    "body": "Brings ~1.5 years of updates, lower build times (12.5s -> 10s on my machine), and cuts out 2 transitive dependencies.\r\n\r\nThe non-minified build output is only subtly different, with some internal variable names having characters appended to them. The minified output does come out differently (I'm not diving into that 😅) but is the same number of bytes.",
    "head_branch": "update-rollup",
    "is_a_fork": true,
    "comments": [
      "This looks fine to my untutored eyes.\r\n\r\nIs there someone in @ramda/core with some more Babel experience who can look this over?",
      "Would it be possible to get this wrapped up? I have no problem with closing it if there's not much interest or it's not felt that it's worth it.",
      "This must have just fallen by the wayside. I think it's fine to merge...",
      ":tada: Thanks!"
    ],
    "commit_messages": [
      "Merge pull request #3050 from benbryant0/update-rollup\n\nUpdate rollup, plugins, and config"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a2f8dfb6b84f2425662",
    "number": 3048,
    "body": "I think this will be insignificant for the vast majority of use cases, but it seemed nice to do anyway 🤷.\r\n\r\nWhen running the benchmarks I noticed that `map` seemed unreasonably slow for the simplest case. I narrowed it down to the `_dispatchable` function and noticed that in the case of directly calling the function it wraps, we copy the arguments array even though we don't use it. This PR just moves that copying to the return statements where the copied array was used.\r\n\r\nOriginal `map` benchmarks:\r\n```\r\n┌────────────────────────┬────────────────────────┬────────────────────────┐\r\n│ map                    │ Hertz                  │ Margin of Error        │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ map(sq, nums)          │ 7,759,834              │ 3.96%                  │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ map(sq)(nums)          │ 2,444,420              │ 3.41%                  │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ mapSq(nums)            │ 3,025,428              │ 3.54%                  │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ native map             │ 17,078,257             │ 5.00%                  │\r\n└────────────────────────┴────────────────────────┴────────────────────────┘\r\n```\r\n\r\nWith this change:\r\n```\r\n┌────────────────────────┬────────────────────────┬────────────────────────┐\r\n│ map                    │ Hertz                  │ Margin of Error        │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ map(sq, nums)          │ 15,731,745             │ 2.94%                  │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ map(sq)(nums)          │ 3,321,226              │ 3.10%                  │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ mapSq(nums)            │ 4,358,381              │ 1.92%                  │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ native map             │ 17,926,157             │ 4.43%                  │\r\n└────────────────────────┴────────────────────────┴────────────────────────┘\r\n```\r\n\r\nOriginal `findIndex` benchmarks:\r\n```\r\n┌────────────────────────┬────────────────────────┬────────────────────────┐\r\n│ findIndex              │ Hertz                  │ Margin of Error        │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ findIndex(isZero, num… │ 4,229,101              │ 5.12%                  │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ findIndex(isZero)(num… │ 1,924,030              │ 3.77%                  │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ findIndexZero(nums)    │ 2,156,670              │ 3.81%                  │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ native findIndex       │ 61,190,816             │ 6.02%                  │\r\n└────────────────────────┴────────────────────────┴────────────────────────┘\r\n```\r\n\r\nWith this change:\r\n```\r\n┌────────────────────────┬────────────────────────┬────────────────────────┐\r\n│ findIndex              │ Hertz                  │ Margin of Error        │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ findIndex(isZero, num… │ 5,926,183              │ 6.50%                  │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ findIndex(isZero)(num… │ 2,488,570              │ 3.75%                  │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ findIndexZero(nums)    │ 2,789,492              │ 4.19%                  │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ native findIndex       │ 55,793,304             │ 7.24%                  │\r\n└────────────────────────┴────────────────────────┴────────────────────────┘\r\n```",
    "head_branch": "dispatchable-perf",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #3048 from benbryant0/dispatchable-perf\n\nMinor performance improvement for _dispatchable in simplest cases"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a308dfb6b84f2425663",
    "number": 3047,
    "body": "I know it wasn't ever a sure thing this would be considered, but I thought I'd submit a PR to add a new function called namedCurryN, which would be a curryN fn, but with named parameters (as per this thread: https://github.com/ramda/ramda/issues/1258). It supports everything that curryN supports, and parameter order doesn't matter (I remember that being a concern in the thread).\r\n\r\nI added a bunch of tests as well, drawing inspiration from the curry and curryN tests.\r\n\r\nIt was a slightly easier implementation than just a plain named curry where i'd have to infer the arguments in the object, but thought that could come later if this seemed useful. \r\n\r\nTotally understand if it doesn't make sense for Ramda, but I've found it useful with React components and other scenarios. Plus it was fun to make. Thanks for an awesome lib!",
    "head_branch": "feat/named-curry",
    "is_a_fork": true,
    "comments": [
      "It's interesting. I think you have a good point, and I've definitely thought about this. There's a few approaches I've looked into to match args, which all work with this implementation with small changes, but are less than ideal:\r\n1. Passing argument names as an array to the function (let's call it the angular inject-y road, which is fraught with peril when it comes to minification and feels hacky).\r\n2. Parse a function with a regex to get the params (feels un-ramda to me, though I could be wrong, and also fraught with peril).\r\n3. Divide a function into multiple phases, or have multiple functions that handle accepting of which arguments to take (which in the thread also seemed to not be the ideal option).\r\n\r\nSo I thought counting could be an interesting approach. I know it could still lead to breaking, but is it the functions responsibility with `namedCurryN` to make sure that the user provides the arguments it needs by name, or is the responsibility of the user? I would say if it was a `curry` then it maybe should, but with `curryN` it seems to be doing what it's expected to do—once you pass it 4 \"arguments\", it executes the function. If you don't pass the function the arguments it requires, then, the provided function might break and the developer should probably guard for that as there's clearly a chance that within 4 provided arguments, the required arguments for the function may not be provided. I would think that follows a similar path as this example for `curryN` in sentiment:\r\n```\r\nvar f = curryN(4, function(a, b, c, d, e, f) {\r\n    return `${JSON.stringify({a, b, c, d, e, f})} => ${(a + b * c) / d + e}`;\r\n}); \r\nconsole.log(f(12,3,6,2,4,2)) //=> 19\r\n\r\nvar g = f(12,3);\r\nconsole.log(g(6,2,4,2)) //=> 19 // good\r\n\r\nconsole.log(g(6, 2)) //=> NaN\r\n```\r\nHere, `curryN` could _know_ that the function has an arity of 6, but lets the user proceed with just 4 as it's not the responsibility of `curryN`  to know that the function will break when all args aren't provided. I know it's not 1:1 with a named `curryN` approach, but I would say that `namedCurryN` provides benefit, while a (harder to implement!) `namedCurry` would perhaps be better suited to matching?",
      "> 1. Passing argument names as an array to the function (let's call it the angular inject-y road, which is fraught with peril when it comes to minification and feels hacky).\r\n\r\nI think this would be less fraught, since we're dealing with named object properties, which presumably will not be minified, rather than parameter names, which often will.  (My code samples below choose this route, in two different ways.)\r\n\r\nI agree that your other two possibilities are non-starters.\r\n\r\n> So I thought counting could be an interesting approach. I know it could still lead to breaking, but is it the functions responsibility with `namedCurryN` to make sure that the user provides the arguments it needs by name, or is the responsibility of the user?\r\n\r\nI think there is a huge difference, though.  With Ramda's normal currying, we are depending on a cleanly-ordered set: the parameters to the base function.  With named properties, there is no useful intrinsic ordering.  And counting is really problematic for cases where a derived function wants to supply some new values as well as overrides for previously-chosen values or simple optional values.\r\n\r\nBut I think, if we're really interested in them, we can do named parameters in a not-too horrible way.  Scott Christopher mentioned one possibility in that earlier thread.  (https://github.com/ramda/ramda/issues/1258#issuecomment-120190987).  That only works for root-level required fields.  I have two different possibilities for deeper values.   The first one is configured with a list of required paths:\r\n\r\n```js\r\nconst namedCurry = (reqs, fn) =>  {\r\n  const foo = (obj) => reqs .every (\r\n    p => is (Object, path (init (p), obj)) && has (last (p), path (init (p), obj)) \r\n  ) ? fn (obj)\r\n    : (obj2) => foo (mergeDeepRight (obj, obj2))\r\n  return foo\r\n}\r\n\r\nconst f = ({foo, bar, baz: {qux: {grault, corge = 42}}}) => \r\n  [foo, bar, grault, corge]\r\n\r\nconst g = namedCurry ([\r\n  ['foo'], \r\n  ['bar'], \r\n  ['baz', 'qux', 'grault']\r\n], f)\r\n\r\ng ({foo: 1, baz: {qux: {corge: 10}}})   // returns function\r\n  ({bar: 2})                            // returns function\r\n  ({baz: {qux: {grault: 99}}})          //=> [1, 2, 99, 10]\r\n```\r\n\r\n(You can see this [in the REPL][re1].)\r\n\r\nThe second one uses a configuration object with a Symbol representing the required values:\r\n\r\n```js\r\nfunction * getPaths(o, p = []) {\r\n  if (Object(o) !== o || Object .keys (o) .length == 0) yield p \r\n  if (Object(o) === o)\r\n    for (let k of Object .keys (o))\r\n      yield * getPaths (o[k], [...p, Number.isInteger (Number (k)) ? Number (k) : k])\r\n}\r\n\r\nconst namedCurry = Object .assign ((sample, fn) =>  {\r\n  const [reqs, bases] = partition (p => path (p, sample) == namedCurry .REQUIRED ) ([...getPaths (sample)])\r\n  const base = reduce((o, p) => assocPath(p, path(p, sample), o), {}, bases)\r\n  const foo = (obj) => reqs .every (\r\n    p => is (Object, path (init (p), obj)) && has (last (p), path (init (p), obj)) \r\n  ) ? fn (obj)\r\n    : (obj2) => foo (mergeDeepRight(mergeDeepRight(base, obj), obj2))\r\n  return foo\r\n}, {REQUIRED: Symbol ()})\r\n\r\nconst f = ({foo, bar, baz: {qux: {grault, corge = 42}}}) => \r\n  [foo, bar, grault, corge]\r\n\r\nconst REQUIRED = namedCurry.REQUIRED\r\n\r\nconst g = namedCurry ({\r\n  foo: REQUIRED, \r\n  bar: REQUIRED, \r\n  baz: {qux: {grault: REQUIRED, corge: 101}}\r\n}, f)\r\n\r\n\r\ng ({foo: 1})                          // returns function\r\n  ({bar: 2})                          // returns function\r\n  ({baz: {qux: {grault: 99}}})        //=> [1, 2, 99, 10]\r\n \r\n\r\nconst h = namedCurry ({\r\n  foo: REQUIRED, \r\n  bar: 25, \r\n  baz: {qux: {grault: REQUIRED, corge: 101}}\r\n}, f)\r\n\r\nh ({foo: 1})                          // returns function\r\n  ({baz: {qux: {grault: 99}}})        //=> [1, 25, 99, 10]\r\n \r\nh ({foo: 1})                          // returns function\r\n  ({bar: 2})                          // returns function\r\n  ({baz: {qux: {grault: 99}}})        //=> [1, 2, 99, 10]\r\n```\r\n(This is also available [in the REPL][re2].)\r\n\r\nThere might well be some cleaner way to pass around the `REQUIRED` value, as well.  I haven't really thought that through.\r\n\r\nPlease don't take either one as actual example code, only as proofs-of-concept for two different APIs.  Both would likely need some real clean-up.  If nothing else, naming is hard, and I didn't bother, naming an intermediate function only `foo`; that would definitely need to change.  But more importantly, these really are thrown together.  There are probably better implementations of either.\r\n\r\n------------\r\n\r\nI still don't have strong feelings either way about whether this is a good fit for Ramda.  But it does seem something we *could* do if we were interested.\r\n\r\n\r\n  [re1]: https://ramdajs.com/repl/?v=0.27.0#?console%20.clear%20%28%29%0A%0Aconst%20namedCurry%20%3D%20%28reqs%2C%20fn%29%20%3D%3E%20%20%7B%0A%20%20const%20foo%20%3D%20%28obj%29%20%3D%3E%20reqs%20.every%20%28%0A%20%20%20%20p%20%3D%3E%20is%20%28Object%2C%20path%20%28init%20%28p%29%2C%20obj%29%29%20%26%26%20has%20%28last%20%28p%29%2C%20path%20%28init%20%28p%29%2C%20obj%29%29%20%0A%20%20%29%20%3F%20fn%20%28obj%29%0A%20%20%20%20%3A%20%28obj2%29%20%3D%3E%20foo%20%28mergeDeepRight%20%28obj%2C%20obj2%29%29%0A%20%20return%20foo%0A%7D%0A%0Aconst%20f%20%3D%20%28%7Bfoo%2C%20bar%2C%20baz%3A%20%7Bqux%3A%20%7Bgrault%2C%20corge%20%3D%2042%7D%7D%7D%29%20%3D%3E%20%0A%20%20%5Bfoo%2C%20bar%2C%20grault%2C%20corge%5D%0A%0Aconsole.log%28%0A%20%20f%20%28%7Bfoo%3A%201%2C%20bar%3A%202%2C%20baz%3A%20%7Bqux%3A%20%7Bgrault%3A%203%7D%7D%7D%29%0A%29%20%2F%2F~%3E%20%5B1%2C%202%2C%203%2C%204%5D%0A%0Aconst%20g%20%3D%20namedCurry%20%28%5B%0A%20%20%5B%27foo%27%5D%2C%20%0A%20%20%5B%27bar%27%5D%2C%20%0A%20%20%5B%27baz%27%2C%20%27qux%27%2C%20%27grault%27%5D%0A%5D%2C%20f%29%0A%0Aconsole%20.log%20%28%0A%20%20g%20%28%7Bfoo%3A%201%2C%20baz%3A%20%7Bqux%3A%20%7Bcorge%3A%2010%7D%7D%7D%29%20%20%20%2F%2F%20returns%20function%0A%20%20%20%20%28%7Bbar%3A%202%7D%29%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20returns%20function%0A%20%20%20%20%28%7Bbaz%3A%20%7Bqux%3A%20%7Bgrault%3A%2099%7D%7D%7D%29%20%20%20%20%20%20%20%20%20%20%2F%2F~%3E%20%5B1%2C%202%2C%2099%2C%2010%5D%0A%29\r\n  [re2]: https://ramdajs.com/repl/?v=0.27.0#?console%20.clear%20%28%29%0A%0Afunction%20%2A%20getPaths%28o%2C%20p%20%3D%20%5B%5D%29%20%7B%0A%20%20if%20%28Object%28o%29%20%21%3D%3D%20o%20%7C%7C%20Object%20.keys%20%28o%29%20.length%20%3D%3D%200%29%20yield%20p%20%0A%20%20if%20%28Object%28o%29%20%3D%3D%3D%20o%29%0A%20%20%20%20for%20%28let%20k%20of%20Object%20.keys%20%28o%29%29%0A%20%20%20%20%20%20yield%20%2A%20getPaths%20%28o%5Bk%5D%2C%20%5B...p%2C%20Number.isInteger%20%28Number%20%28k%29%29%20%3F%20Number%20%28k%29%20%3A%20k%5D%29%0A%7D%0A%0Aconst%20namedCurry%20%3D%20Object%20.assign%20%28%28sample%2C%20fn%29%20%3D%3E%20%20%7B%0A%20%20const%20%5Breqs%2C%20bases%5D%20%3D%20partition%20%28p%20%3D%3E%20path%20%28p%2C%20sample%29%20%3D%3D%20namedCurry%20.REQUIRED%20%29%20%28%5B...getPaths%20%28sample%29%5D%29%0A%20%20const%20base%20%3D%20reduce%28%28o%2C%20p%29%20%3D%3E%20assocPath%28p%2C%20path%28p%2C%20sample%29%2C%20o%29%2C%20%7B%7D%2C%20bases%29%0A%20%20const%20foo%20%3D%20%28obj%29%20%3D%3E%20reqs%20.every%20%28%0A%20%20%20%20p%20%3D%3E%20is%20%28Object%2C%20path%20%28init%20%28p%29%2C%20obj%29%29%20%26%26%20has%20%28last%20%28p%29%2C%20path%20%28init%20%28p%29%2C%20obj%29%29%20%0A%20%20%29%20%3F%20fn%20%28obj%29%0A%20%20%20%20%3A%20%28obj2%29%20%3D%3E%20foo%20%28mergeDeepRight%28mergeDeepRight%28base%2C%20obj%29%2C%20obj2%29%29%0A%20%20return%20foo%0A%7D%2C%20%7BREQUIRED%3A%20Symbol%20%28%29%7D%29%0A%0Aconst%20f%20%3D%20%28%7Bfoo%2C%20bar%2C%20baz%3A%20%7Bqux%3A%20%7Bgrault%2C%20corge%20%3D%2042%7D%7D%7D%29%20%3D%3E%20%0A%20%20%5Bfoo%2C%20bar%2C%20grault%2C%20corge%5D%0A%0Aconsole.log%28%0A%20%20f%20%28%7Bfoo%3A%201%2C%20bar%3A%202%2C%20baz%3A%20%7Bqux%3A%20%7Bgrault%3A%203%7D%7D%7D%29%0A%29%20%2F%2F~%3E%20%5B1%2C%202%2C%203%2C%2042%5D%0A%0Aconst%20REQUIRED%20%3D%20namedCurry.REQUIRED%0A%0Aconst%20g%20%3D%20namedCurry%20%28%7B%0A%20%20foo%3A%20REQUIRED%2C%20%0A%20%20bar%3A%20REQUIRED%2C%20%0A%20%20baz%3A%20%7Bqux%3A%20%7Bgrault%3A%20REQUIRED%2C%20corge%3A%20101%7D%7D%0A%7D%2C%20f%29%0A%0Aconsole.log%28%0A%20%20g%20%28%7Bfoo%3A%201%7D%29%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20returns%20function%0A%20%20%20%20%28%7Bbar%3A%202%7D%29%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20returns%20function%0A%20%20%20%20%28%7Bbaz%3A%20%7Bqux%3A%20%7Bgrault%3A%2099%7D%7D%7D%29%20%20%20%20%20%20%20%20%2F%2F~%3E%20%5B1%2C%202%2C%2099%2C%2010%5D%0A%29%20%0A%0Aconst%20h%20%3D%20namedCurry%20%28%7B%0A%20%20foo%3A%20REQUIRED%2C%20%0A%20%20bar%3A%2025%2C%20%0A%20%20baz%3A%20%7Bqux%3A%20%7Bgrault%3A%20REQUIRED%2C%20corge%3A%20101%7D%7D%0A%7D%2C%20f%29%0A%0Aconsole.log%28%0A%20%20h%20%28%7Bfoo%3A%201%7D%29%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20returns%20function%0A%20%20%20%20%28%7Bbaz%3A%20%7Bqux%3A%20%7Bgrault%3A%2099%7D%7D%7D%29%20%20%20%20%20%20%20%20%2F%2F~%3E%20%5B1%2C%2025%2C%2099%2C%2010%5D%0A%29%20%20%0A%0Aconsole.log%28%0A%20%20h%20%28%7Bfoo%3A%201%7D%29%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20returns%20function%0A%20%20%20%20%28%7Bbar%3A%202%7D%29%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20returns%20function%0A%20%20%20%20%28%7Bbaz%3A%20%7Bqux%3A%20%7Bgrault%3A%2099%7D%7D%7D%29%20%20%20%20%20%20%20%20%2F%2F~%3E%20%5B1%2C%202%2C%2099%2C%2010%5D%0A%29%20",
      "> With named properties, there is no useful intrinsic ordering. And counting is really problematic for cases where a derived function wants to supply some new values as well as overrides for previously-chosen values or simple optional values.\r\n\r\nGreat point.\r\n\r\n> I think this would be less fraught, since we're dealing with named object properties, which presumably will not be minified, rather than parameter names, which often will.\r\n\r\nOf course, didn't think that through 🤦 I also didn't consider deeper values when I was previously passing an array of parameters.\r\n\r\nI'll keep playing around with this, those POCs you have there are interesting. I had considered the second approach with Symbols but didn't get around to testing it out. I dig your use of `partition`.\r\n\r\n> I still don't have strong feelings either way about whether this is a good fit for Ramda. But it does seem something we could do if we were interested.\r\n\r\nwell, even if it's not right for Ramda in the end, I'll be happy to have it for my own usage. so no worries.",
      "One more variant of that second approach will keep `REQUIRED` out higher-level scopes, at the cost of requiring a function for the configuration parameter:\r\n\r\n```js\r\nconst namedCurry = (makeSample, fn) =>  {\r\n  const REQUIRED = Symbol()\r\n  const sample = makeSample(REQUIRED)\r\n  const [reqs, bases] = partition (p => path (p, sample) == REQUIRED ) ([...getPaths (sample)])\r\n  const base = reduce((o, p) => assocPath(p, path(p, sample), o), {}, bases)\r\n  const foo = (obj) => reqs .every (\r\n    p => is (Object, path (init (p), obj)) && has (last (p), path (init (p), obj)) \r\n  ) ? fn (obj)\r\n    : (obj2) => foo (mergeDeepRight(mergeDeepRight(base, obj), obj2))\r\n  return foo\r\n}\r\n\r\nconst f = ({foo, bar, baz: {qux: {grault, corge = 42}}}) => \r\n  [foo, bar, grault, corge]\r\n\r\nconst g = namedCurry (\r\n  (REQUIRED) => ({foo: REQUIRED, bar: REQUIRED, baz: {qux: {grault: REQUIRED, corge: 101}}}),\r\n  f\r\n)\r\n```\r\n([REPL][re])\r\n\r\nI have no thoughts yet on which variant I prefer.  But I like having such alternatives.\r\n\r\n  [re]: https://ramdajs.com/repl/?v=0.27.0#?console%20.clear%20%28%29%0A%0Afunction%20%2A%20getPaths%28o%2C%20p%20%3D%20%5B%5D%29%20%7B%0A%20%20if%20%28Object%28o%29%20%21%3D%3D%20o%20%7C%7C%20Object%20.keys%20%28o%29%20.length%20%3D%3D%200%29%20yield%20p%20%0A%20%20if%20%28Object%28o%29%20%3D%3D%3D%20o%29%0A%20%20%20%20for%20%28let%20k%20of%20Object%20.keys%20%28o%29%29%0A%20%20%20%20%20%20yield%20%2A%20getPaths%20%28o%5Bk%5D%2C%20%5B...p%2C%20Number.isInteger%20%28Number%20%28k%29%29%20%3F%20Number%20%28k%29%20%3A%20k%5D%29%0A%7D%0A%0Aconst%20namedCurry%20%3D%20%28makeSample%2C%20fn%29%20%3D%3E%20%20%7B%0A%20%20const%20REQUIRED%20%3D%20Symbol%28%29%0A%20%20const%20sample%20%3D%20makeSample%28REQUIRED%29%0A%20%20const%20%5Breqs%2C%20bases%5D%20%3D%20partition%20%28p%20%3D%3E%20path%20%28p%2C%20sample%29%20%3D%3D%20REQUIRED%20%29%20%28%5B...getPaths%20%28sample%29%5D%29%0A%20%20const%20base%20%3D%20reduce%28%28o%2C%20p%29%20%3D%3E%20assocPath%28p%2C%20path%28p%2C%20sample%29%2C%20o%29%2C%20%7B%7D%2C%20bases%29%0A%20%20const%20foo%20%3D%20%28obj%29%20%3D%3E%20reqs%20.every%20%28%0A%20%20%20%20p%20%3D%3E%20is%20%28Object%2C%20path%20%28init%20%28p%29%2C%20obj%29%29%20%26%26%20has%20%28last%20%28p%29%2C%20path%20%28init%20%28p%29%2C%20obj%29%29%20%0A%20%20%29%20%3F%20fn%20%28obj%29%0A%20%20%20%20%3A%20%28obj2%29%20%3D%3E%20foo%20%28mergeDeepRight%28mergeDeepRight%28base%2C%20obj%29%2C%20obj2%29%29%0A%20%20return%20foo%0A%7D%0A%0Aconst%20f%20%3D%20%28%7Bfoo%2C%20bar%2C%20baz%3A%20%7Bqux%3A%20%7Bgrault%2C%20corge%20%3D%2042%7D%7D%7D%29%20%3D%3E%20%0A%20%20%5Bfoo%2C%20bar%2C%20grault%2C%20corge%5D%0A%0Aconsole.log%28%0A%20%20f%20%28%7Bfoo%3A%201%2C%20bar%3A%202%2C%20baz%3A%20%7Bqux%3A%20%7Bgrault%3A%203%7D%7D%7D%29%0A%29%20%2F%2F~%3E%20%5B1%2C%202%2C%203%2C%2042%5D%0A%0A%0Aconst%20g%20%3D%20namedCurry%20%28%0A%20%20%28REQUIRED%29%20%3D%3E%20%28%7Bfoo%3A%20REQUIRED%2C%20bar%3A%20REQUIRED%2C%20baz%3A%20%7Bqux%3A%20%7Bgrault%3A%20REQUIRED%2C%20corge%3A%20101%7D%7D%7D%29%2C%0A%20%20f%0A%29%0A%0Aconsole.log%28%0A%20%20g%20%28%7Bfoo%3A%201%7D%29%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20returns%20function%0A%20%20%20%20%28%7Bbar%3A%202%7D%29%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20returns%20function%0A%20%20%20%20%28%7Bbaz%3A%20%7Bqux%3A%20%7Bgrault%3A%2099%7D%7D%7D%29%20%20%20%20%20%20%20%20%2F%2F~%3E%20%5B1%2C%202%2C%2099%2C%2010%5D%0A%29%20%0A%0Aconst%20h%20%3D%20namedCurry%20%28%0A%20%20REQUIRED%20%3D%3E%20%28%7Bfoo%3A%20REQUIRED%2C%20bar%3A%2025%2C%20baz%3A%20%7Bqux%3A%20%7Bgrault%3A%20REQUIRED%2C%20corge%3A%20101%7D%7D%7D%29%2C%0A%20%20f%0A%29%0A%0Aconsole.log%28%0A%20%20h%20%28%7Bfoo%3A%201%7D%29%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20returns%20function%0A%20%20%20%20%28%7Bbaz%3A%20%7Bqux%3A%20%7Bgrault%3A%2099%7D%7D%7D%29%20%20%20%20%20%20%20%20%2F%2F~%3E%20%5B1%2C%2025%2C%2099%2C%2010%5D%0A%29%20%20%0A%0Aconsole.log%28%0A%20%20h%20%28%7Bfoo%3A%201%7D%29%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20returns%20function%0A%20%20%20%20%28%7Bbar%3A%202%7D%29%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20returns%20function%0A%20%20%20%20%28%7Bbaz%3A%20%7Bqux%3A%20%7Bgrault%3A%2099%7D%7D%7D%29%20%20%20%20%20%20%20%20%2F%2F~%3E%20%5B1%2C%202%2C%2099%2C%2010%5D%0A%29%20",
      "I didn't get to spend time this week on this due to personal events, but got some time today and just updated with a new approach. There may be technical issues, so I'll fix those (and need to add some more testing scenarios for nesting), but wanted to see what you thought. I liked your suggested signature approach of a straightforward `namedCurry` with the first argument being the paths—it matches by name, and handles deep paths as well. I think this code is actually simpler to reason about than the previous as well. It also works with placeholders and will allow you to curry till all paths have been met. If you add extra params, those will be forwarded as well.",
      "Yeah, I need to add tests for this—currently the tests are copied over from `curry` and `curryN` just to quickly make sure I was covering curry base cases, but I will need to adjust them (to test paths for instance) and will remove unnecessary ones.\r\n\r\n> If we go this route, and use properties rather than full paths, how likely do you think it is that users will come back and ask for it to be applied to paths?\r\n\r\nHmm...if I understand you correctly, it should already work with paths? Right now both will work:\r\n\r\n```\r\nconst g = namedCurry ([\r\n  'foo', \r\n  'bar', \r\n  'baz'\r\n], f)\r\n```\r\n```\r\nconst g = namedCurry ([\r\n  ['foo'], \r\n  ['bar'], \r\n  ['baz', 'qux', 'grault']\r\n], f)\r\n```\r\nIt will continue to curry until you match all paths specified. If resolving the path returns a placeholder, it will continue to curry until you match the placeholder. That might not be the correct usage of placeholder, I can remove it. I didn't want to presume people's use cases.\r\n",
      "I adjusted the tests, removing the ones you pointed out seemed irrelevant and added a more relevant test for paths. Happy to add more if there's additional scenarios :) I also removed `curry` entirely, as I was just using it for convenience. The only public functions I'm using are `paths` and `hasPaths`, which I know is not ideal and am open to suggestion; I'm sure I could write an internal function if we'd like, I didn't feel like re-inventing the wheel and didn't see any existing internal functions I could leverage instead...perhaps there's an alternative approach to what I'm doing to check paths, but this seemed the most straightforward.\r\n\r\nThanks for the continuous feedback and helpful suggestions, by the way.",
      "> Hmm...if I understand you correctly, it should already work with paths?\r\n\r\nRight.  I did misread a bit.  However...\r\n\r\n> Right now both will work:\r\n\r\nDid you test this?  Because it shouldn't work.  I would expect this:\r\n\r\n```js\r\nconst f = ({foo, bar, baz}) => [foo, bar, baz]\r\n\r\nconst g = namedCurry ([\r\n  'foo', \r\n  'bar', \r\n  'baz'\r\n], f)\r\n\r\ng ({foo: 'this'}) ({bar: `doesn't`}) ({baz: 'work'}) \r\n//=> function still looking for correct arguments\r\n```\r\n\r\nAnd this:\r\n\r\n\r\n```js\r\nconst f = ({foo, bar, baz}) => [foo, bar, baz]\r\n\r\nconst g = namedCurry ([\r\n  ['foo'], \r\n  ['bar'], \r\n  ['baz']\r\n], f)\r\n\r\ng ({foo: 'but'}) ({bar: `this`}) ({baz: 'does'}) \r\n//=> [\"but\", \"this\", \"does\"]\r\n```\r\n\r\nThat's because `hasPath` is not being used properly.  It doesn't fail, just doesn't do what you'd expect when you pass it a string.  That's array-like enough that `hasPath` treats one like an array:\r\n\r\n```js\r\nhasPath('foo', {foo: 1, bar: 2})            //=> false\r\nhasPath('foo', {f: {o: {o: 42}, bar: 101}}) //=> true\r\n```\r\n\r\nIf any of your tests used property names of more than one character, this would have become obvious.\r\n\r\nSo for this to work, a user would have to supply an array of arrays of Strings.  (Or Numbers or Symbols, I guess.)  That's not a wonderful API, but I can't think of anything better, except possibly the `REQUIRED` examples I gave above.",
      "> The only public functions I'm using are `paths` and `hasPaths`, which I know is not ideal and am open to suggestion\r\n\r\nIf we decide we want to do this, then we can create internal versions of each of these and make the public functions things like\r\n\r\n```js\r\nexport default hasPath = _curry2(_hasPath)\r\n```\r\n\r\nor some such.  But let's not bother with that until we make a decision about whether this function should be included in the first place, and if so, what exact API it will have.",
      "> Did you test this? Because it shouldn't work.\r\n\r\nAh yes, my response to your comment was before I pushed up the change to use `hasPath` (instead of using `path` only), so yeah it would need to be an array of array of strings. I also realize I didn't update the old tests to reflect that (though the new one added is written correctly). I personally think an array of arrays of strings as paths is intuitive but open to opinions.\r\n\r\nI'll fix the tests and push it up.",
      "Everything is pushed up, if you noticed anything else",
      "> So the question -- and I want to address this to all of @ramda/core and others who are interested -- is whether this API feels like a good match for Ramda. It clearly has its utility, and it's clearly something that is complex enough to make a library implementation useful. But does it match Ramda.\r\n\r\nI have some comments I want to make on the PR itself, but I wanted to first answer this question. \r\n\r\nTLDR: I don't see any issue with adding this - it's close enough to our philosophy, but would really only be helpful for codebases that like currying to be able to interface with libraries of differing philosophies.\r\n\r\nI probably won't use this function. I can see its usefulness though. I typically think Ramda style currying (and thus the code I write when using Ramda) works best when functions have a static arity with well ordered parameters. This guides a lot of the work I do when I am designing function APIs - what order makes sense for the parameters? What parameters do I actually need? How is this going to be called? Etc.\r\n\r\nUsing Objects to simulate named parameters is a good idea, but I typically don't use them that way. When I have Objects that represent more than a single parameter  (as opposed to passing in a record or a map) it is generally because either the data comes to me that way or it's an optional config variable where none of the properties are required (if they are required I will put them in a positional parameter).\r\n\r\nThere are functions in the world and in other libraries that use named parameters. In those cases I think this would be useful to convert those into something that would be more in line with how the rest of a codebase does things. Even then, would it be useful to do it this way, or to take a function with named parameters and convert it into a curried one that takes positional parameters?\r\n\r\nAll that being said, I can see how this could work and how it could be used to make people's lives easier, and I don't think it really goes against anything in our philosophy so I think it's good. \r\n\r\nI have no insight on a name, but I will let it kick around in my head for a bit.",
      "Alright, I _think_ I got everything mentioned above fixed in the latest push—thanks for feedback. I also added two property tests, similar to the curry examples, that test argument order irrelevance and multiple values (though perhaps the one for multiple values is redundant as it's very similar to the order test).\r\n\r\nI can see the points around how this could use a different name, so open to suggestions. And if you spot anything else, just let me know.",
      "I'm still stuck for a good name.  While not absolutely opposed to using \"curry\" in the name, my preference, as discussed above, would be to do something different.",
      "I created [a Stack Overflow question][so] regarding the function name.\r\n\r\n\r\n  [so]: https://stackoverflow.com/q/62882449",
      "One alternative brought up on StackOverflow is not to treat this like `curry`, but more like `partial`, something akin to\r\n\r\n```js\r\nconst partialObject = (fn, obj) => (o) =>\r\n  fn ({...obj, ...o}) // really a deep merge, but this should explain the idea.\r\n\r\nconst f = ({a, b, c, d}) => (a + b * c) / d\r\n\r\npartialObject \r\n  (f, {a: 12, b: 3}) //=> new function\r\n  ({c: 6, d: 2})     //=> 15\r\n```\r\n\r\nThis of course doesn't let us specify the required structure of the output object, which seemed one of the main reasons for this PR.  But that is also its problem.  Having a function that is curried generally makes it clear what the signatures of the subsequent partially applied functions are.  Here it seems quite fuzzy.  But with partial application, the library is no longer trying to pretend to offer you that, only to make it easier to create a version of the function which bakes in an incomplete object so you no longer have to specify those properties..",
      "Yeah, you know what, that makes a lot of sense to me–I'll give it a tinker tonight, it's a solid suggestion.",
      "This is interesting. Do you think it would be worthwhile to provide an optional merge function as a third argument for added control with a default of `mergeDeepRight`? Or does that feel outside the scope of the function?\r\n\r\nSomething like `(f, o, mergeFn) => (props) => f.call(this, (mergeFn && mergeFn(o, props) || mergeDeepRight(o, props)))`? I think it could be an interesting way to provide extra control over data structures and transformations without having to provide paths...",
      "> Do you think it would be worthwhile to provide an optional merge function as a third argument for added control with a default of `mergeDeepRight`? \r\n\r\nWell, even if Ramda didn't have a hard stance against optional arguments, this would not feel right to me.  It loses too much of its simplicity.  If there is a strong argument for this, we could consider offering multiple functions, one that accepts such an initial merge argument, one that curries in `mergeDeepRight` for that and possibly one that curries in `mergeDeepLeft`.\r\n\r\nBut I wouldn't do that yet; we can always refactor to that.  I don't see much call for `mergeDeepLeft` or other merge capabilities.  Yes, it would offer an API that lets you progressively fix parameters that can no longer be overridden.  But since the initial function is still presumably available, that control seems superfluous, simply an unnecessary complication.",
      "I see—makes sense. I just pushed up a `partialObject` implementation, curious about what you all think of it. It does seem a lot cleaner than specifying a path, and (at least for the use cases I have in mind) it would be very useful.\r\n\r\nI carried over a test from the `partial` function, and created two more (one to test order, one to test deep merge). Finally, I know it's probably not great, but I imported the public `mergeDeepRight` as I didn't see an internal implementation.\r\n\r\nAlso, I know it's called `partialObject` now, but do we think it should be `partialObjectDeep`? I wonder if there would be a use case for `partialObject` on its own where it doesn't merge deep.",
      "Sounds great! Yes I agree, the simplicity of it ended up being quite nice I think :) I cleaned up and labelled the test better, so hopefully it's in a good spot.\r\n\r\nI also realized in my PR that there were a bunch of changes to the package-lock which was odd...so those are gone from the PR now too.",
      "Renamed the PR to be more accurate—if there's anything else anyone notices, please let me know!",
      "@Bradcomp typo fixed! Any chance of getting that thumbs up one more time?",
      "@hejhi: Thank you for persevering with this.  I know it was a slow process.  But I think it turned out a function both useful and well-written.  A very nice addition!\r\n\r\n:herb:",
      "My pleasure—happy to contribute to an excellent lib. Thanks for all the feedback!"
    ],
    "commit_messages": [
      "feat: add partialObject (#3047)\n\n* feat: add curryN with named param support\r\n\r\n* fix: fix linting issues\r\n\r\n* fix: switch arg signature and logic\r\n\r\n* fix: switch destructure to Object assign\r\n\r\n* fix: adjust tests, use hasPaths instead of falsey\r\n\r\n* fix: remove trailing space\r\n\r\n* fix: adjust tests to work with hasPath\r\n\r\n* fix: cleanup/add property tests, wrap in curry2, drop placeholders\r\n\r\n* remove unused import\r\n\r\n* switch to partialObject and add tests\r\n\r\n* clean up test\r\n\r\n* restore package-lock from develop\r\n\r\n* fix typo\r\n\r\nCo-authored-by: Gitea <gitea@fake.local>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a318dfb6b84f2425664",
    "number": 3046,
    "body": "Fix pipeline",
    "head_branch": "3043/fix-pkglock",
    "is_a_fork": false,
    "comments": [
      "@CrossEye we added eslint plugin import in https://github.com/ramda/ramda/pull/3042, however, we forgot to update lockfiles and caused the build to fail."
    ],
    "commit_messages": [
      "Merge pull request #3046 from ramda/3043/fix-pkglock\n\nfix(deps): update lockfile"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a328dfb6b84f2425665",
    "number": 3044,
    "body": "Fix workflow's failure due to eslint rules violation\r\n\r\n#3043",
    "head_branch": "3043/fix-linting",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #3044 from ramda/3043/fix-linting\n\nfix(style): eslint quotes and unused vars"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a348dfb6b84f2425666",
    "number": 3042,
    "body": "Omitting the file extension when importing a module is a quirk of the NodeJS' require importing method and should be discouraged -- As standard ES module is getting ground (Browser import, Deno import).\r\n\r\nResolve: https://github.com/ramda/ramda/issues/3028",
    "head_branch": "es-module",
    "is_a_fork": true,
    "comments": [
      "Should I commit the rebuilt distribution file?",
      "You don't need to commit the dist file https://github.com/ramda/ramda/blob/master/CONTRIBUTING.md",
      "@Bradcomp I added a plugin to enforce file extension on import, but Codeclimate is complaining although I tested it locally -- Is it possible that they don't support ESLint plugins? If that's the case, what's your preferred way to handle this?",
      "pinging @hitmands: Do you have any experience with this?  I'm still very new to Code Climate.\r\n\r\n",
      "It seems that (unless differently specified) [`eslint-3` is used by default](https://docs.codeclimate.com/docs/eslint), while this repo is using [`esling@5`](https://github.com/ramda/ramda/blob/master/package.json#L100).\r\n\r\nI'd suggest to set `channel-5` [here](https://github.com/ramda/ramda/blob/master/.codeclimate.yml#L19), \r\n![image](https://user-images.githubusercontent.com/5674833/84873243-dd171e80-b07a-11ea-805c-085e8c31158e.png)\r\n\r\n\r\n- https://docs.codeclimate.com/docs/eslint\r\n\r\n______\r\n\r\nMy initial thoughts are that the version of `plugins/import` available for `eslint@3` didn't have any `ignorePackages` option.\r\n\r\n![image](https://user-images.githubusercontent.com/5674833/84872699-1f8c2b80-b07a-11ea-9b8a-5b8c4da5aee5.png)\r\n\r\n> Is it possible that they don't support ESLint plugins?\r\n\r\n@sebastienfilion it seems that the plugin is supported, \r\nbut the specific config `ignorePackages` isn't.\r\n\r\n- https://codeclimate.com/github/ramda/ramda/pull/3042",
      "Thanks for all the help; I've switched the setting from `ignorePackages` to `always` -- it works for my purpose because the source files are self-dependent. Let me know what you think.",
      "If you are all okay with this, I'm gonna prepare a PR on the Deno \"database\" to add Ramda as an official third-party!?",
      "@sebastienfilion I have no problem with that, however typescript compatibility isn't a priority for the library, and there is at least one function we have that is a syntax error (`R.type`). ",
      "@sebastienfilion: Absolutely.  Go for it!",
      "@Bradcomp i will mention it on the PR; but I don’t think that FP users care much about typed-languages. We’ll see what Ryan says.\r\n\r\n[EDIT] Actually, as far as my tests goes, it doesn't affect TypeScript, at least on Deno, as this runs:\r\n\r\n```ts\r\nimport { type } from \"../ramda/source/index.js\";\r\n\r\nconst l: number = 0;\r\n\r\nconsole.log(type, l);\r\n```"
    ],
    "commit_messages": [
      "Merge pull request #3042 from sebastienfilion/es-module\n\nAdd `.js` extension to source files"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a348dfb6b84f2425667",
    "number": 3039,
    "body": "Follow up to #2715 and this [conversation](https://github.com/ramda/ramda/pull/2715#discussion_r436256330).\r\n\r\nThere was an existing `Idx` type (i.e. `Idx = String | Int`) which I extended to include `Symbol` (i.e. `Idx = String | Int | Symbol`).\r\n\r\n@CrossEye I didn't use the name `Index`  as I assumed that `Idx` was already what you meant (and also to make the review easier to the eyes) _and_ I also assumed that all indexes can be either a string, a number or a symbol. (I can't see why not but happy to be corrected here.)\r\n\r\n**What's in the PR?**\r\n\r\n1. Update existing `Idx` type\r\n2. Reuse `Idx` in function signature (e.g. in `@sig Idx a => (b -> a)`)\r\n3. Instead of \"String-returning function\" to describe functions that return a key, I used \"key-returning function\" as this how these functions are referred to in [`indexBy`](https://ramdajs.com/docs/#indexBy) for example.\r\n4. Updated `@sig` examples to distinguish the Idx type from the \"other\" type. (Even though they could be the same type, it's better to clear here IMHO)\r\n",
    "head_branch": "key-returning-functions-doc-update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #3039 from customcommander/key-returning-functions-doc-update\n\ndoc: update Idx union type with Symbol and use it to describe key-returning functions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a358dfb6b84f2425668",
    "number": 3037,
    "body": "Adds fantasy-land compliant [`promap()`](https://github.com/fantasyland/fantasy-land#fantasy-landpromap-method). `promap()` provides an interface for wrapping a process with a pre- and post-process, which has famously found application in the development of optics. It also could be useful for building and composing SerDes.\r\n\r\nI took some inspiration from Tom Harding's [Fantas, Eel, and Specification 18: Bifunctor and Profunctor](http://www.tomharding.me/2017/06/26/fantas-eel-and-specification-18/) for the `profunctor.promap()` test case.",
    "head_branch": "promap",
    "is_a_fork": true,
    "comments": [
      "@CrossEye requested changes have been pushed!\r\n\r\nre: functions not using `_dispatchable` - I actually found quite a few! I searched in `/source` for _fantasy-land_ and found the following functions directly dispatching a method on the final argument (excluding internal functions): `ap`, `concat`, `empty`, `sequence`, `traverse`",
      "@forrest-akin \r\n> re: functions not using `_dispatchable` - I actually found quite a few! I searched in `/source` for _fantasy-land_ and found the following functions directly dispatching a method on the final argument (excluding internal functions): `ap`, `concat`, `empty`, `sequence`, `traverse`\r\n\r\nI think they simply never got converted.  But I may be forgetting something.  I'll try to investigate soon.\r\n",
      "Thank you @forrest-akin!  This looks like a great addition.  Any more FantasyLand functions you feel like adding?  :smile:",
      "I'll look into knocking out `contramap` and `bimap`, then we'll be map-complete!",
      "@CrossEye I noticed at the last minute that the `_xpromap` transformer doesn't dispatch to `.promap()` for non-function inputs - lmk if you think that's important and I'll submit a patch"
    ],
    "commit_messages": [
      "add promap (#3037)\n\nCo-authored-by: Julien Gonzalez <hello@spinjs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a368dfb6b84f2425669",
    "number": 3033,
    "body": "Issue: https://github.com/ramda/ramda/issues/3030\r\n\r\nThis pull request aims to bring the CI inside the github repo via github actions.",
    "head_branch": "3030/github-actions",
    "is_a_fork": false,
    "comments": [
      "@CrossEye we could use `code-climate` to host code coverage, \r\nI could set this up in this pull request.\r\n\r\n**would that be of interest?**",
      "This looks great to me.  I'm all for moving this into the platform, especially as Travis has become a little flaky lately.\r\n\r\n:herb:\r\n\r\n:+1: also on code coverage.  I would want a report from it, though, not a failing build."
    ],
    "commit_messages": [
      "chore(ci): add github workflows and code climate"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a378dfb6b84f242566a",
    "number": 3031,
    "body": "This makes R.traverse dispatch to `traverse` if it's available and `fantasy-land/traverse` is not, as noted in issue #3026.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "I added some tests to ensure the dispatch methods get used when appropriate.",
      "I believe we can update this function to use the _dispatchable decorator:\r\nhttps://github.com/ramda/ramda/blob/9aa12b4db06855e6bd55a498479d666dd973e31a/source/internal/_dispatchable.js\r\n",
      "Sure, that seems reasonable. I'll need a little guidance, though: how am I to handle the transducer case? The docs do not suggest to me that `traverse` can be used as a transducer, so what should it do in that case?",
      "@Bradcomp, I've given your suggestion a go, and with some thought, I think I've changed my mind about using `_dispatch` here. I would argue that using `_dispatch` is, at best, out of the scope of this particular PR.\r\n\r\nThere aren't any instances I could find of [`_dispatchable` being used](https://github.com/ramda/ramda/search?p=3&q=_dispatchable&unscoped_q=_dispatchable) to implement functions that cannot be used as transducers. So no established convention exists that I can follow. In fact, to use `_dispatchable` for a function that has no documented use as a transducer is contrary to the existing conventions of this library.\r\n\r\nGiven this, if I were to refactor to using `_dispatchable`, I would have to figure out what the \"right\" value to use for the transducer argument of `_dispatchable` is. Should it be a function? Or `undefined`? Or `null`? Or something else? If it should be a function, what should the function do? Should it be a runtime error? If so, should the error be thrown, or should it be returned? What should the error message be? If it should not be an explicit error, should it return `undefined`? Or `null`? Or the passed in transformer, unaltered? Something else?\r\n\r\nThis PR was opened because there was a missing dispatch case in `traverse`. Not because `traverse` needed a refactor. Perhaps it does need a refactor. But this is supposed to be a bug fix, not a refactor, is it not? I'm not trying to be snarky, I mean this sincerely, and I apologize if I'm coming across that way.\r\n\r\nFurthermore, I'm not convinced there is a substantive advantage to using `_dispatchable`, anyway. It is added complexity: now a potential contributor has to figure out what the function does, and they have to be careful about the transducer argument even though `traverse` isn't one. Which seems like a potential footgun `_dispatchable` also seems to add to the call stack at runtime, since it [appears to not get optimized away in the build](https://github.com/ramda/ramda/blob/v0.27.0/dist/ramda.js)? The benefit seems to be that it unifies the codebase toward one cleaner, more consistent style, but given there are more functions that *don't* use `_dispatchable` than do, I'm not sure if this PR really achieves that.\r\n\r\nIt's been a month since this PR was passing all checks, including test cases I provided that addressed the missing functionality that prompted me to open this issue and #3026. As far as I know, @Bradcomp, your suggestion does not change the functionality, isn't that correct? It proposes a refactor, which, on its face, seems perfectly reasonable. But once you dig a little deeper, it turns out to be a meaningfully more involved undertaking. No precedent exists for what you are describing, so a new convention has to be established, albeit a small one.\r\n\r\nAs such, in my opinion, I think it would be more appropriate for this PR to comply with the existing convention of only using `_dispatchable` with transducers. If the maintainers decide it would be better to do an overhaul and use `_dispatchable` for everything, transducer or not, that's fine. But that's out of scope here. I just wanted to fix a small, niggling issue that was bothering me and maybe others, and has not yet been fixed for reasons unrelated to the extensional functionality of the proposed fix.\r\n\r\nSo with due respect to @Bradcomp who suggested it, and @CrossEye who :+1: it, I do not think it makes sense to refactor `traverse` to use `_dispatchable` in this PR. I appreciate the suggestion, and would happily comply if it made sense in the context of the existing conventions of the codebase. However, I have not seen evidence to support that. You are welcome to convince me otherwise. But until such time as you have done so, I respectfully decline, and request that this PR be merged in its current form, if there are no other concerns to address.",
      "Oh man, I did not mean to close this. I was rebasing onto the latest changes in Ramda's master branch.",
      "Great! Thanks, guys!"
    ],
    "commit_messages": [
      "Fix dispatching to `traverse` method (#3031) (#3031)\n\nBefore this change, R.traverse dispatched only to `fantasy-land/traverse`, and ignored the `traverse` method of the third argument, even if one was available. This makes R.traverse dispatch to `traverse` if it is available and `fantasy-land/traverse` is unavailable.\r\n\r\nThis fixes issue #3026."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a388dfb6b84f242566b",
    "number": 3029,
    "body": "Current _clone implementation is recursive and implements O(nˆ2) solution for reference counting (to deal with objects with circular dependencies). The time complexity for refs counting makes performance on large object graphs poor. In the case of very deep nested objects (new test case for _clone) _clone does not work at all because of maximum call stack size exceeded error. \r\n\r\nThis PR fixes these two issues.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Yes, as soon as we get v1.0 out the door, and are no longer supporting pre-ES6 environments, I think this is a great idea!",
      "To be revived after 1.0"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a398dfb6b84f242566c",
    "number": 3025,
    "body": "Modified description to make clear which values will be in the returned object. This was likely pretty obvious to those already well versed in Ramda but seems a good add for those less so.\r\n\r\nsee: #3024 ",
    "head_branch": "update-mergeall-desc",
    "is_a_fork": true,
    "comments": [
      ":fireworks: \r\n\r\nThank you @klequis!\r\n"
    ],
    "commit_messages": [
      "updated mergeAll description per issue #3024 (#3025)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a3a8dfb6b84f242566d",
    "number": 3022,
    "body": "According to #2966 \r\nI agree with the author of the issue. It is a bit confusing to have a number, for example, as a return value of propSatisfies(). ",
    "head_branch": "prop-satisfies-and-path-satisfies-wrong-return-type",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a3b8dfb6b84f242566e",
    "number": 3018,
    "body": "https://github.com/ramda/ramda/blob/998f798d9ac6297bb9f5b45136e3ff06a56df09a/source/constructN.js#L48-L49\r\n\r\n`arguments.length` will always be the same as `n`, so there's no need to dynamically calculate arguments' length. And `switch(n)` may be more clear to source code readers?",
    "head_branch": "optimize-constructN-Fn-length",
    "is_a_fork": true,
    "comments": [
      "I *think* you're right, because of the currying, but I would like to think it over a bit more to make sure there are no corner cases.",
      "`nAry` but not `curry`, guarantees that `n` equals to `arguments.length`. \r\n`nAry` can limit number of parameters and arguments more strictly than `_arity` and `curryN`.",
      "I was wondering about the case where someone used this with a consructor that has optional parameters, ones that are baked in by `constructN`.  When called with fewer than `n` arguments, I had been thinking, there might be some difference in behavior because `arguments.length` is less than `n`.  But because of the currying, that would just return a function expecting the remaining ones.\r\n\r\nIt was because I considered this, even though I quickly saw that it didn't matter, that I want to spend a little time ensuring that there are no additional such cases that actually matter.  I'd hate to break something for what can only be a minor performance gain."
    ],
    "commit_messages": [
      "arguments.length will always be the same as n (#3018)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a3c8dfb6b84f242566f",
    "number": 3014,
    "body": "There is a small typo in dist/ramda.js, source/internal/_checkForMethod.js.\n\nShould read `implementation` rather than `implemtation`.\n\n",
    "head_branch": "bugfix_typo_implementation",
    "is_a_fork": true,
    "comments": [
      "Thank you for your sharp eyes.\r\n\r\nCan you remove the generated `ramda.js` from your commit?",
      "There is something weird happening with this PR. It removes a bunch of files that were removed almost a year ago. Can you see if merging the most recent master into your branch fixes it?",
      "Thanks @Bradcomp and @CrossEye - done"
    ],
    "commit_messages": [
      "Merge pull request #3014 from timgates42/bugfix_typo_implementation\n\ndocs: Fix simple typo, implemtation -> implementation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a3d8dfb6b84f2425670",
    "number": 3013,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Yes, thank you.  That is definitely better!"
    ],
    "commit_messages": [
      "Update includes.js (#3013)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a3e8dfb6b84f2425671",
    "number": 3011,
    "body": "I accidentally noticed a typo in `@returns` message. Here's a quick fix for it.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Thanks @priestine !"
    ],
    "commit_messages": [
      "Fix typo in the @return message (#3011)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a3f8dfb6b84f2425672",
    "number": 3010,
    "body": "Addresses discussion and suggestions in #3007 to clarify documentation of `path`.\r\n\r\nI'm not sure if any of these doc edits would be welcome, but I thought I'd at least offer them. Feel free to tweak or reject if it doesn't match the style.",
    "head_branch": "add-path-docs",
    "is_a_fork": true,
    "comments": [
      "Such suggestions are always welcome!\r\n\r\nIn this case, I disagree on the details.  I'll try to think of some more comprehensive text this weekend.",
      "👍  Let me know if there's more I can do to help.",
      "Yeah, sorry.  I dropped this entirely.  I will look again.",
      "@CrossEye I rebased against the master branch and added your suggestions.",
      "Oops I totally forgot about this, thanks for carrying it across the finish line, @customcommander!"
    ],
    "commit_messages": [
      "Add docs to `path`. (#3010)\n\n* Add docs to `path`.\r\n\r\n* docs: update path doc, signatures and related functions. address Scott comments in #3010\r\n\r\nCo-authored-by: customcommander <hello@spinjs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a408dfb6b84f2425673",
    "number": 3005,
    "body": "",
    "head_branch": "optimize-binary-signature",
    "is_a_fork": true,
    "comments": [
      "Nevermind\r\n------------\r\n\r\n<del>While the current signature is awful, I'm not sure that's much of an improvement.</del>\r\n\r\n<del>Maybe</del>\r\n\r\n```hs\r\n:: (a -> b -> c -> ... -> z) -> (b -> a -> c -> ... -> z)\r\n```\r\n\r\n<del>At some point, I'd really rather switch over to multiple signatures that show the possible patterns, with no internal ellipsis, although possibly one between or after signatures.</del>\r\n\r\n<del>So that might be</del>\r\n\r\n```hs\r\n:: (a -> b -> c) -> (b -> a -> c)\r\n:: (a -> b -> c -> d) -> (b -> a -> c -> d)\r\n:: (a -> b -> c -> d -> e) ->  (b -> a -> c -> d -> e)\r\n:: ...\r\n``` \r\n",
      "@CrossEye This is `binary`, not `flip`?",
      "Oh damn, I'm brain-dead!  Yes, this is an improvement, and's Brad's is a bit better.",
      "Maybe `nAry`'s signature should also be rewritten, but I can not figure out how to rewrite that.",
      ":bowtie: Thanks @adispring !!!"
    ],
    "commit_messages": [
      "Merge pull request #3005 from adispring/optimize-binary-signature\n\noptimize binary signature"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a418dfb6b84f2425674",
    "number": 3002,
    "body": "it is the fix for of https://github.com/ramda/ramda/issues/3001",
    "head_branch": "filter-fix",
    "is_a_fork": true,
    "comments": [
      "Looks great!  thank you very much!\r\n\r\n:herb:\r\n"
    ],
    "commit_messages": [
      "Filter fix (#3002)\n\n* fixes filter in Maybe\r\n\r\n* adds fantasy-land/filter test\r\n\r\n* fix fantasy-land implementation in filter"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a428dfb6b84f2425675",
    "number": 2999,
    "body": "closes #2988\r\n\r\nThis all is quite new in general. node has added support for ESM just recently so keep in mind that I can't guarantee that this covers everything ideally, but I've done the research and some testing and I'm positive about this working correctly. If any problems arise from this - just ping me and I will prepare appropriate fixes (hopefully this won't be necessary though).",
    "head_branch": "add-node-esm-support",
    "is_a_fork": true,
    "comments": [
      "This looks really good to me. \r\n\r\nI have one concern, and that is that the changes are fairly inscrutable without your fantastic comments. Somebody who isn't already well versed in `package.json` files wouldn't know why things are set up the way they are.\r\n\r\nIs this an issue? Should we look at [hacking in some comments](https://stackoverflow.com/questions/14221579/how-do-i-add-comments-to-package-json-for-npm-install)?",
      "> Is this an issue? Should we look at hacking in some comments?\r\n\r\nSure, I can write this down somewhere. Not sure though if package.json itself is the right place to do so 😅 If you want to keep it there I'm OK with that - just let me know where should I put it.",
      "I honestly don't know where we should put it `¯\\_(ツ)_/¯`\r\n\r\nEdit: on second thought, I suppose we can always just point to this PR in the release notes for the next version and it's all explained 😄 \r\n",
      "Anyone understand why GitHub is saying that some checks are incomplete, but that Travis is saying they are complete?\r\n\r\nOne had failed before for what looked like spurious reasons.  I restarted, and it looks fine on Travis, but GitHub is saying otherwise.  Any ideas?\r\n\r\nOther than that, this looks great to me.  I think I would rather point to this pull than try to hack comments into `package.json`, although I really do wish that commenting JSON were easier to do.\r\n\r\n:herb:\r\n\r\nAnd thank your once again @Andarist for coming to our rescue.  I really should learn more about this material.",
      "@CrossEye Can we just merge anyway since we can still visually verify the CI completed successfully?\r\n",
      "@Bradcomp: I was planning on giving it two days in case someone who understood what happened with Travis pointed out some flaw I didn't understand.  But yes, I think we can merge soon.",
      "If this causes any problem (hopefully not) then please just ping me and i will try to find a fix for it"
    ],
    "commit_messages": [
      "Fix for importing Ramda in ESM-compatible nodes (#2999)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a438dfb6b84f2425676",
    "number": 2997,
    "body": "fix this bug: https://github.com/ramda/ramda/issues/2991\r\n\r\nI also get sometimes this bug in project.\r\nAll in all, it came to the situation that we started  in the team writing `defaultTo` before each `reduce`:\r\n\r\n```js\r\nconst getRating = pipe(\r\n defaultTo([]),\r\n reduce(add, 0)\r\n)\r\n```\r\nAfter fix we can just write:\r\n\r\n```js\r\nconst getRating = reduce(add, 0)\r\n```\r\n\r\nWe use Ramda to select values from API, so null/undefined sometimes can happen...\r\n\r\n@CrossEye fix is very efficient. In the case of happy path, it doesn't matter.\r\nBefore comparing to null, the `reduce` function uses type checking in `_isArrayLike`, so V8 already knows the type (hidden class)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "This looks good to me.\r\n\r\nAnyone else?  @ramda/core?\r\n\r\nMy test for whether we can go beyond our regular no-hands-holding approach is whether we have enough information to give a reasonable answer.  Here, as with `propOr`, I think we do.  The accumulator is what we should always return when we have no data.",
      "I do think this is reasonable, but I am hesitant. My concern is less of a hands holding one and more of an 'avoid magic' one. \r\n\r\nAny time we make an assumption about what our user means based on what they don't tell us, we are hiding a potential error that could result in a bug. \r\n\r\nIn most cases, if `reduce` is called with `undefined` as the foldable, it means the developer has made a mistake. It could very well mean that they will always get undefined there instead of whatever they are expecting to get. Is it helpful to hide this from the user?",
      "@Bradcomp The question of how Ramda is used. For frontend/mobile this library is practical because some functions are null safety.\r\nIn addition (as @CrossEye mentioned), `reduce` differs from `map`/`filter` in that it has the initial state (accumulator) given.\r\n\r\nOf course, you can take the second approach, in which Ramda is the equivalent of the Haskell lens.\r\nBut in this case, why the types are checked anywhere? Why `prop(null, {})` doesn't return an error?\r\nIn this approach, we should also not show \"fantasy ground issue\" errors (this is very magical error for some developers), but something more usefull, e.g \"list is null\" ;)\r\n\r\n\r\n",
      "> In this approach, we should also not show \"fantasy ground issue\" errors (this is very magical error for some developers), but something more usefull, e.g \"list is null\" ;)\r\n\r\nThis is absolutely the correct approach, in my view. :)\r\n",
      "@Bradcomp:\r\n\r\nMy feeling is that we generally keep the Garbage In - Garbage Out mantra.  If you supply types of data not supported by Ramda's contracts, then you should not count on the behavior whatsoever.  But as developers and users of the library, we should also want to prevent unexpected exceptions as best we can.  When we can't, I feel fine letting it fail in whatever way it happens to fail -- throwing an exception, launching the missiles, insulting your children.  But when we can, I think it's best that we do. \r\n\r\nI edited my previous comment, because I mentioned `defaultTo`, when I should have been speaking of `propOr`.  In `propOr` we know exactly what result the user wants if the property is nil.  We could throw an exception in the case the object is nil, and that would certainly fit best with our let-it-fail philosophy.  But that seems to ignore what the user told us: that if the property isn't there, we should return the default.  It seems to cause almost no harm to return the default.  It will serve as a failsafe for those who want it.  And for those who don't, we already supply no guarantees of behavior when they supply bad data; so we haven't hurt them.  If they wanted a specific error in this case, then they would need to generate it on their own.\r\n\r\nAnd that's how I feel about this one too.  By supplying the initial accumulator, the user has already told us what to return if there's no data.  We hurt no one and help some by returning this on a nil `list`.\r\n\r\nI guess I don't think of it as magic so much as giving the best answer we can to the question asked.  The data is simply not bad enough that we have to throw our hands up.\r\n\r\n@ku8ar, @davidchambers:\r\n\r\nWhile I would certainly not object to having better error messages, I'm quite loathe to spend the effort on the code required to implement them or to take the performance hit of all the checks necessary to report them.  Do you have suggestions that might ease my fears?\r\n\r\n",
      "> Do you have suggestions that might ease my fears?\r\n\r\nRamda *could* depend on [sanctuary-def][1]. This would add complexity, though, as type checking would need to be configurable.\r\n\r\n\r\n[1]: https://github.com/sanctuary-js/sanctuary-def\r\n",
      "@davidchambers:\r\n\r\n> Ramda *could* depend on [sanctuary-def][sd]. This would add complexity, though, as type checking would need to be configurable.\r\n\r\nAnd it would add five dependencies (`sanctuary-def` itself as well as the recursive dependencies of `sanctuary-either`, `sanctuary-show`, `sanctuary-type-classes`, and `sanctuary-type-identifiers`) to a library that now has *no* run-time dependencies.  So far, I'm still unwilling to go that route.\r\n\r\n[sd]: https://github.com/sanctuary-js/sanctuary-def",
      "Please see the discussion in #2998.",
      "> But in this case, why the types are checked anywhere? Why prop(null, {}) doesn't return an error?\r\n\r\nI believe I have asked the exact same question before. I think that is a mistake, but others disagree. Part of why it's a mistake is because it leads to these sorts of questions of how far to go and what principles do we bring to bear?\r\n\r\n> And for those who don't, we already supply no guarantees of behavior when they supply bad data; so we haven't hurt them.\r\n\r\nI take a little issue with this. We are removing a helpful error on a function with a clear signature and long history. I think depending on one's view of safety this definitely makes `reduce`, which is super widely used and understood, more dangerous.\r\n\r\nThis isn't GIGO. GIGO is to let it fail. This is to prevent it from failing in the case that it should.\r\n\r\nThe principal we want to look at here is probably this one: https://en.wikipedia.org/wiki/Robustness_principle\r\n\r\nI think there could be an argument made either way here. I think that having predictable functions that do what you expect is a benefit, at least in how I tend to write code. \r\n\r\n```\r\nconst getRating = pipe(\r\n defaultTo([]),\r\n reduce(add, 0)\r\n)\r\n```\r\n \r\nPersonally, for me, this code is way clearer than `reduce(add, 0)` for the given use case because it breaks up the piece that handles invalid input from the piece that actually performs the calculation.",
      "> My feeling is that we generally keep the Garbage In - Garbage Out mantra.\r\n\r\n@CrossEye perfect!\r\n\r\n> I believe I have asked the exact same question before. I think that is a mistake, but others disagree.\r\n\r\n@Bradcomp but I don't agree with that either...\r\nI mean, I agree, but only partially.\r\n\r\nIn a perfect world, I would expect the perfect code. But currently Ramda is used in projects that are created quickly, by a business that expects results as soon as possible.\r\nErrors in such projects will happen often.\r\nAnd now we have a choice:\r\n- return \"null\" for incorrect data\r\n- call exception in runtime\r\n\r\nFor frontend/mobile, the \"garbage in - garbage out\" approach is a much better option. We do not harm. And developers have another reason to use `R.map` instead of `Array.map`.\r\n\r\nAnd in my personal opinion, every exception is a violation of the principle of functional programming. \"throw\" is like a linear jump. The functional code should handle garbage as follow: \"you gave me a null to which there is no logical answer, so please, here is your null\""
    ],
    "commit_messages": [
      "reduce - null safety (#2997)\n\n* hasIn: added protection against undefined object\r\n\r\n* null safety reduce"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a448dfb6b84f2425677",
    "number": 2995,
    "body": "Follow up to #2888 \r\nReverts change to propOr that caused issue in test suite ",
    "head_branch": "Standardize-propOr-and-pathOr-functionality-to-match-documentation",
    "is_a_fork": true,
    "comments": [
      "It all goes the wrong way. Adding `nth` support to `prop`/`path` causes unnecessary complexity. And it's very inefficient...",
      "@ku8ar:\r\n\r\nDo you have suggestions?  I think the main constraints are that things like `path(foo)` and `path([foo])` should always have the same behavior, and that all of these, but especially the simplest ones like `path` should be as performant as possible. ",
      "@CrossEye Yes of course. I added a suggestion here: https://github.com/ramda/ramda/issues/2974#issuecomment-602273378\r\nThat suggestion will simplify this code. In short: remove `nth` from `prop` and `path`. But this is a hard decision, considering that there is already version 0.27 with this feature...",
      "I have absolutely no problem changing the behavior back in the next version if it turns our we made a mistake.  I don't have much time now to investigate *why* this was added, and we need to do that before deciding whether it's worth the costs it adds."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a458dfb6b84f2425678",
    "number": 2994,
    "body": "Reverts ramda/ramda#2888 Breaks tests",
    "head_branch": "revert-2888-Standardize-propOr-and-pathOr-functionality-to-match-documentation",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2994 from ramda/revert-2888-Standardize-propOr-and-pathOr-functionality-to-match-documentation\n\nRevert \"Replace defaultTo with undefined check in pathOr\""
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a468dfb6b84f2425679",
    "number": 2993,
    "body": "Hey there, I was recently bitten by this -- I had a function composition that I thought looked like:\r\n\r\n```js\r\npipe(\r\n  curriedTernaryFunction(a, b),\r\n  someOtherFn,\r\n  anotherFn\r\n)('blah')\r\n```\r\n\r\nBut the function that I thought was ternary was actually binary, so instead of being a function it was the result of calling that function inside the pipe. This results in an error `TypeError: g.call is not a function.` -- as I was several levels above this it took a while to chase this down.\r\n\r\nI'd love if this or something similar could land in `ramda` as it is a core library for me, also happy to make any changes.\r\n\r\n\r\n\r\n",
    "head_branch": "pipe-should-yell-about-non-functions",
    "is_a_fork": true,
    "comments": [
      "Also, there is a `propOr` test on this branch which is failing but on some code I have not touched.",
      "Hi @brekk Thanks for the PR! I've reverted the failing test on master. Can you rebase this? It should pass CI now.",
      "@Bradcomp Thanks for the feedback, I hope the newest stuff is to your liking.\r\n\r\nI dug around in the codebase, and there's an established precedent for the more verbose `Array.prototype.slice.call` in a few places -- `liftN` / `call` / `useWith` / `invoker` to name a few. I'd be happy to make my code `[].slice.call` consistent with that if preferred.\r\n\r\nOn the formatting of the error, I used your suggestion mainly, but added a prefix of `pipe:` to the error string (which has a precedent in `_internal/reduce.js`) as the error.stack downstream is often-manipulated but the error message rarely is.",
      "> I dug around in the codebase, and there's an established precedent for the more verbose Array.prototype.slice.call in a few places -- liftN / call / useWith / invoker to name a few. I'd be happy to make my code [].slice.call consistent with that if preferred.\r\n\r\nThis would definitely help, but isn't quite what I was getting at. Typically with `arguments` we are just passing them along to another function using apply or call. That happens in a really large number of our functions, and how we do that should definitely be consistent. But here we are iterating through them and performing [generic] validation for each argument. The iteration and validation is the piece I'd like to discuss, because to my knowledge (unless we find something) that isn't done in our codebase.",
      "@Bradcomp  Ah ok; I see the distinction you're making — in my mind composition is a very specific operation on functions and this PR is just a way of ensuring that `pipe` is operating on functions — it's not generic validation so much as basic type safety; would there be a better way of approaching this problem which would ameliorate your concerns?",
      "I'm sorry.  I somehow didn't pay much attention to this as it moved along.\r\n\r\nAnd I'm less than certain that it's a good idea.  Ramda has generally not added type-checking unless we can do something more useful with the results than throwing an exception.  Perhaps it's time to revisit our let-it-fail philosophy, but I think we would need to have such a discussion before merging this.",
      "@CrossEye I'm fine with literally any solution that doesn't leave me asking what `g.call is not a function` is referring to (thrown from `internal/_pipe`). When you're several levels above the piped function, it's not especially clear what `g.call` refers to. And I understand where y'all are at w/r/t let-it-fail, but this isn't very usable as is -- it's not type-checking in my mind so much as the basic requirements for composition: the composition of a function and a non-function is unresolvable garbage.\r\n\r\nIf you're not into this PR, I'm happy to publish it as a standalone library, but at that point I'll just fork all of `ramda` rather than use two different libraries for the same purpose (which I am loathe to do, as `ramda` solves nearly all problems out of the box).",
      "@brekk: Please see the discussion in #2998.",
      "Has some discussion about enable some basic type checking, like when create sanctuary env? Ex.\r\n\r\nfile to expose ramda configuration:\r\n```javascript\r\nlet R = require(\"ramda\");\r\nconst basicCheck = require(\"ramda-basic-check\"); // example lib\r\n\r\n// Add basic assertion\r\nIf (process.env.NODE_ENV === \"development\") {\r\n  // based of \"ramda-debug\" configuration\r\n  R = basicCheck.wrap(R);\r\n  // or made this something internal, I don't know.\r\n}\r\n\r\nmodule.exports = R;\r\n```\r\n",
      "@danielbom:  Please see the discussion in #2998.",
      "@CrossEye Close for now until #2998 is resolved?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a468dfb6b84f242567a",
    "number": 2990,
    "body": "translation to Spanish",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      ":clap:\r\n\r\nThank you very much!\r\n\r\n:herb:"
    ],
    "commit_messages": [
      "update README.md (#2990)\n\ntranslation to Spanish"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a478dfb6b84f242567b",
    "number": 2989,
    "body": "`R.view` and `R.set` are Lens's getter and setter functions. Add @see to each other may bring some convenience for people to read.",
    "head_branch": "add-see-set-view",
    "is_a_fork": true,
    "comments": [
      "Thanks @adispring! I think it might be worthwhile to remove `R.prop` from the `@see` list too, as they don't really fit here. Thoughts?",
      "Yes on the change, yes to @Bradcomp's extension, but there's one thing missing.  We should also include `over` among these.  `view`, `set`, and `over` form a useful trio.",
      "@Bradcomp @CrossEye \r\nOk, I have removed `R.prop` from their @see lists, and add two more apis:  `R.lens` and `R.lensPath`.",
      ":herb:\r\n\r\nLooks great to me!"
    ],
    "commit_messages": [
      "Merge pull request #2989 from adispring/add-see-set-view\n\nadd @see: R.view and R.set"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a488dfb6b84f242567c",
    "number": 2987,
    "body": "This is in reference to #2980. It supports a particular class of function: A unary function that if returns a function, is also unary with this same rule. ",
    "head_branch": "new-function-recall",
    "is_a_fork": true,
    "comments": [
      "Thank your for the PR.  I'm afraid I forgot to do the research into why `uncurryN` doesn't already handle this.  I will try to do so soon.\r\n\r\nDid you look into updating `uncurryN` to also handle this case?  Because if there's not some compelling reason not to do so, it seems that would be a much better solution.",
      "@CrossEye No problem. I gave a cursory look into `uncurryN`. It seemed fine. I didn't notice anything glaring and figured I'd need to dig further and see how currying was being handled. I'll need to make some time for that."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a498dfb6b84f242567d",
    "number": 2986,
    "body": "sometimes people write code like this:\r\n```\r\nlet obj = null\r\nhasIn('test', obj) && prop('test', obj)\r\n```",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Yes.  We're slowly allowing data-verification to slip into the library.  But this passes my smell test: *if we think of the function as answering a question, can we reasonably answer it given this bad data?*  Yes, we know that `hasIn(foo, null)` should be `false`.  So I\"m all for this."
    ],
    "commit_messages": [
      "hasIn: added protection against undefined object (#2986)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a4a8dfb6b84f242567e",
    "number": 2985,
    "body": "Changed _clone to use a Map to cache and retrieve the cloned objects.\r\nthis is NOT a breaking change and in my tests reduce the time to clone this [object](https://paste.ee/p/LNvsR) from 93.2ms to 6.8ms on average after 100 iterations.",
    "head_branch": "clone",
    "is_a_fork": true,
    "comments": [
      "How about implementing an internal `_Map` that uses the global Map if available but falls back to the existing implementation for older runtimes?",
      "@newyankeecodeshop:\r\n\r\nThat might work.  There is a real tension, though, between trying to make an internal _Map that might gain some of this speedup and one which would work as expected in Ramda (that is, one focused on value equality rather than reference equality.)",
      "@CrossEye:\r\n\r\nAfter thinking about the options I implemented the _ObjectMap which is a private hashmap that uses the object values as a hash, using this class is not as fast as Map but still we get a significant improvement in performance.\r\n\r\nthis are the values that i get using the clone function now:\r\nmax/min/avg time in ms after 100 runs\r\nramda: new clone              max: 71.066 min: 23.946 avg: 30.496\r\nramda: old clone              max: 440.424 min: 411.802 avg: 421.692\r\nlodash cloneDeep():           max: 26.248 min: 9.779 avg: 11.207\r\nJSON.parse(JSON.stringify()): max: 16.261 min: 9.313 avg: 10.276",
      "Because _ObjectMap is very specific for this problem (for reasons that I explain above) I don't think this should be separated into its own file. If there is a need for a _Map we should create an \"abstract class\" where the user could extend and override specific pieces of code (like the equality function and the hash function) to suit specific needs kind of how the Map works in java.",
      "> Because _ObjectMap is very specific for this problem \r\n\r\nThat worries me.  We have an internal _Set, written to solve one problem, but available to be used in other functions, and arguably something worth making public.  Why would we not want to do the same here?  If it's too tuned to `clone`, is it also perhaps too tuned to a specific sort of data?\r\n\r\n> If there is a need for a _Map we should create an \"abstract class\" where the user could extend and override specific pieces of code (like the equality function and the hash function)\r\n\r\nThe only reason I can think of for exposing these would be that they are useful alternatives, for those who like Ramda's value equality model, to the built in `Set` and `Map` types.  I would not expect to offer users ways to tweak their behavior.",
      "\r\n>  Why would we not want to do the same here? If it's too tuned to `clone`, is it also perhaps too tuned to a specific sort of data?\r\n\r\nI wouldn't say it is too tuned for specific data but for this specific problem, _ObjectMap is focused on reference equality which is ideal for this problem, but I think it won't be as useful to have as a separate file in ramda because the framework has a focus on value equality.\r\n\r\n>  I would not expect to offer users ways to tweak their behavior.\r\n\r\nWhen I said user I meant the person that would use the code, not the framework user. What I'm proposing is to create an \"abstract class\" lest say a _HashTable.js and then create two classes that will inherit from _hashTable one focused on value equality and the other focused on reference equality.",
      "Closes #2607.",
      "Any movements here? What's the hold up? Can I help in any way?",
      "@nfantone: We are way overdue for a release.  And we should get this into it, if it's ready.  I will try to take a look soon.\r\n",
      "> @nfantone: We are way overdue for a release. And we should get this into it, if it's ready. I will try to take a look soon.\r\n\r\nWe should publish a new release, the last release (v0.27.1) is 10 months ago: https://www.npmjs.com/package/ramda .",
      "@CrossEye @adispring Would be happy to contribute in any way I can to help make that happen.",
      "When Ramda went through a period of little attention, this was inadvertently dropped.  @danillosl: Are you interested in resolving the conflicts so that we can get this in before `v1.0`?",
      "@CrossEye Rebased and fixed the conflicts. However I'd prefer if you could review this again thoroughly as I'm not quite sure I got everything right. Some other pull requests merged after this one touched the same files and I wanted to preserve them too.\r\n\r\nWaiting for #3224 to be merged.",
      "@CrossEye Merge, lint and tests error fixed. Ready for re-review.",
      "I'm going to merge this, but tag it for follow-up, as I think we still need to think about exposing `_Set` and it would make sense to have a version of `_Map` to go with it."
    ],
    "commit_messages": [
      "improve clone performance (#2985)\n\n* improved _clone function\r\n\r\n* adding _ObjectMap"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a4b8dfb6b84f242567f",
    "number": 2984,
    "body": "https://github.com/ramda/ramda/pull/2962/files#r377375414",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      ":herb:\r\n\r\nLGTM.  Anyone else?"
    ],
    "commit_messages": [
      "Merge pull request #2984 from ku8ar/master\n\nadd number property tests to prop* and fix propIs (when property is negative number)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a4c8dfb6b84f2425680",
    "number": 2983,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Thank you very much for the PR.\r\n\r\nNote that it is broken.  You can see the results [on Travis][tr].\r\n\r\nI'm not much interested in renaming this.  `head`/`tail` has a long history.  While adding some symmetry with `last`, it would remove the symmetry with `tail`; and to my mind, `head` and `tail` are the much more important functions than `init`/`last`.\r\n\r\n\r\n  [tr]: https://travis-ci.org/ramda/ramda/jobs/650081948",
      "First I want to thank you for the effort, I'm a big fan of the project.\r\nI usually work with Clojure and I was confused that there was a last but not a first. In case there is no equivalent... delete last or create an alias for first?\r\nThanks",
      "@tanrax: Ramda has taken a stand against any aliases.  We do have *See Also* links in the documentation for `last` to `init`, `head`, and `tail`."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a4d8dfb6b84f2425681",
    "number": 2981,
    "body": "",
    "head_branch": "typo-fix-composeWith",
    "is_a_fork": true,
    "comments": [
      "Nice fix, as always!"
    ],
    "commit_messages": [
      "Merge pull request #2981 from adispring/typo-fix-composeWith\n\noptimize pipeWith and composeWith's description and @param"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a4e8dfb6b84f2425682",
    "number": 2979,
    "body": "",
    "head_branch": "typo-fix-composeWith",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2979 from adispring/typo-fix-composeWith\n\nfix comment typo: compose -> composeWith"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a4f8dfb6b84f2425683",
    "number": 2968,
    "body": "#2957 - quick docs fix to change catched to caught.",
    "head_branch": "try-catch-docs",
    "is_a_fork": true,
    "comments": [
      "Thank you very much @ryanbas21!  :herb:"
    ],
    "commit_messages": [
      "Merge pull request #2968 from ryanbas21/try-catch-docs\n\nupdate try catch docs to use caught instead of catched"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a508dfb6b84f2425684",
    "number": 2963,
    "body": "",
    "head_branch": "optimize-andThen-otherwise-example",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2963 from adispring/optimize-andThen-otherwise-example\n\noptimize andThen and otherwise's example"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a518dfb6b84f2425685",
    "number": 2962,
    "body": "In the current version of the code, \"prop\" uses \"paths\" underneath. This is only done so as not to duplicate **one** line of logic.\r\nI copied the logic choosing property directly to \"prop\".\r\nThe overhead on \"prop\" was so great that this function started to work **10x faster**!\r\n\r\nWhy is this optimization so important? Most programmers use \"prop\" as a substitute for the null safety \"**?.**\" syntax. This PR will drastically accelerate all React projects where Ramda is used during every rerender (e.g. in selectors).\r\n\r\nhttps://jsperf.com/ramda-optimized-prop\r\n\r\n<img width=\"964\" alt=\"Zrzut ekranu 2020-01-25 o 16 53 23\" src=\"https://user-images.githubusercontent.com/16975059/73123875-1d271900-3f95-11ea-89e4-d616ec73f73c.png\">\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "For desktop apps, this optimization is not important. But currently most of JS code is executed on smartphones.\r\n\r\nSuppose we have such React component:\r\n```\r\nconst fields = ['name', 'surname', 'nickname', 'age', 'status', 'active']\r\nconst Item = ({item}) => (\r\n<View>{map(field =>  <Text>{prop(field, item)}</Text>, fields)}</View>\r\n)\r\n```\r\nOf course, this code is maximally simplified. Usually Ramda is directly in selectors.\r\nAnd we display this component 50 times (item list).\r\n\r\nFinally, 300 calls come out for each single application rendering.\r\n\r\nAnd now please look how efficient the prop() function is on Android:\r\n![83171325_853379038455037_7202341597667655680_n](https://user-images.githubusercontent.com/16975059/73125031-98db9280-3fa2-11ea-8b1f-7decd1538239.png)\r\n\r\nIt gives us: (1 / 282169) * (6 * 50) * 1000 = 1 ms\r\nAnd with optimization it gives us: (1 / 19790334) * (6 * 50) * 1000 = 0,01 ms\r\n\r\nFinally, we waste 1ms on simply retrieving value from object, which could be done using: `field && field.value`\r\n\r\nHow many such rerenders will the app have? Will there be only one list called at time? Is it worth adding this code to save 1ms? I do not know.\r\n\r\nThinking about such micro-optimization begins to be difficult when we understand that in addition to displaying, such a list of items could also be used for something else. E.g. a hook that does something:\r\n```\r\nuseEffect(() => {\r\n  track('active items showed', pipe(filter(prop('active'), map(prop('id'))))(items))\r\n}, [])\r\n```\r\nOr when it turns out that there are 1000 elements in store, and we only have to show 50:\r\n```\r\n<Items items={filter(prop('isBelongToMe'), allItems)} />\r\n```\r\n\r\nAnd suddenly it turns out that it only took 15 ms to get properties from objects during first rendering. And that's 1 FPS lost...\r\n\r\nOf course, someone can say in a moment: why don't you optimize this app? Or why keep up 1000 items in a redux store?\r\nBut that is not the point. The prop() function is the base. This function is used to create another functions, so it's performance overhead should be minimal...",
      "As I said, I think these numbers are compelling.  Do you have any thoughts on how to write some regression tests to ensure that the API keeps in sync with `path`?\r\n\r\nAlso, we could probably optimize `path` quite a bit by not depending on (in my impression the rarely used) `paths`.  We could easily write the dependency the other way by mapping.  I wonder how much of the lost performance we would gain by doing so.\r\n\r\nI rarely use `prop` or `path` unless the code-base is already heavily using Ramda; they are so easy to write as custom functions.  But we do want both to make them efficient and to make them work the same as much as feasible.  It would be great to be able to do the latter automatically, but it's probably not worth it with this much performance degradation on the line.",
      ">  Do you have any thoughts on how to write some regression tests to ensure that the API keeps in sync with path?\r\n\r\nI'll fall back on my old standard suggestion here and recommend property based tests.\r\n\r\nFor any given object and property, `prop(p, o) === path([p], o)`.",
      "I added tests :)",
      "`props` is still using `path` in its implementation. As discussed here, I think it should use `prop` for both readability and performance."
    ],
    "commit_messages": [
      "Merge pull request #2962 from ku8ar/master\n\n\"prop\" optimization (10x faster)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a528dfb6b84f2425686",
    "number": 2959,
    "body": "`call` actually uses `_curry1` in `curry`'s implementation, so it can use `_curry1` directly.",
    "head_branch": "optimize-call-curry-wrapper",
    "is_a_fork": true,
    "comments": [
      "Thanks once again!  :herb:\r\n"
    ],
    "commit_messages": [
      "Merge pull request #2959 from adispring/optimize-call-curry-wrapper\n\nwrap R.call with _curry1 instead of curry"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a538dfb6b84f2425687",
    "number": 2958,
    "body": "",
    "head_branch": "optimize-call-signature",
    "is_a_fork": true,
    "comments": [
      "As always, thank  you very much, @adispring !  :herb:"
    ],
    "commit_messages": [
      "Merge pull request #2958 from adispring/optimize-call-signature\n\noptimize call signature & its example's indent"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a548dfb6b84f2425688",
    "number": 2956,
    "body": "This is a rather small change so I understand if it isn't worth adding given that there's already the note, but for someone rather new to functional programming like myself, seeing the consequence of the fact that `compose` and `pipe` do not auto-curry is helpful. ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "This is absolutely not too small.  It looks to me an excellent additional form of documentation.\r\n\r\nThanks!\r\n\r\n:herb:"
    ],
    "commit_messages": [
      "Merge pull request #2956 from josh-byster/master\n\nAdd clarification example to compose not auto-currying"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a558dfb6b84f2425689",
    "number": 2955,
    "body": "`tap` run the side-effect with input first, and return the input. \r\n\r\n`@symb R.tap(f, a) = (f(a), a)` describes what `R.tap` do more clearly.",
    "head_branch": "optimise-tap-symb",
    "is_a_fork": true,
    "comments": [
      "@ramda/ramda-docs Good to go?"
    ],
    "commit_messages": [
      "make tap's symb description more clearly (#2955)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a568dfb6b84f242568a",
    "number": 2946,
    "body": "add ``lensEq`` and ``lensSatisfies``.\r\n```js\r\nconst obj = { a: 1, b: 2, c: { d: 3 } };\r\nconst dLens = R.lensPath(['c', 'd']);\r\n\r\nR.lensEq(dLens, 3, obj);  //=> true\r\nR.lensSatisfies(n => n <= 3, dLens, obj);  //=> true\r\n```\r\n``lens`` is very useful. we should strengthen its capabilities.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "With partial.lens in existence for those who want to go all in, and a solid but basic base for people who are interested in using lenses to try them out, I don't know if we should be adding more lens functions. \r\n\r\nI can see the potential in replacing (reviving?) [Ramda Lens](https://github.com/ramda/ramda-lens) which is currently way out of date. We could then remove the core lenses from Ramda and put them in there, and there would be a clearer case for adding these functions. \r\n\r\nWith that being said, I'd want to know what our library would have to offer in terms of philosophy or functionality that we can't get from the Calmm library.\r\n\r\nI have found lenses useful on a rare occasion but they've never been a huge piece of my toolkit. If there are others that use Ramda's lenses on a regular basis or prefer them to partial.lens I would be interested in hearing from them.",
      "@CrossEye @GingerPlusPlus @Bradcomp \r\nThanks for all your reply. I've learned a lot from the discussions above. 😊"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a578dfb6b84f242568b",
    "number": 2945,
    "body": "Run npm test and lint before git push.",
    "head_branch": "husky-guard-ramda",
    "is_a_fork": true,
    "comments": [
      "That's probably a good idea.  I do it in all my work projects these days.\r\n\r\nAny objections, @ramda/core?",
      "I dislike commit hooks, but I have not committed to this project for a long time so don't mind me.\r\n\r\nOn an unrelated note, why do we include __package-lock.json__ in the repository? I've never seen a reason for libraries to include such files.\r\n",
      "It's pre-push, not pre-commit.\r\n\r\n👎 from me &ndash; this checks working directory, instead of commits that are about to be pushed.\r\n\r\nAbout lockfile: https://github.com/ramda/ramda/pull/2625#issuecomment-412553820.",
      "> 👎 from me – this checks working directory, instead of commits that are about to be pushed.\r\n\r\nUsing `lint-staged` , we can lint only changed files at commit stage, and only run unit test at push stage.\r\n\r\n\r\n",
      "I wouldn't oppose `lint-staged`, even tho I'm not sure if it [properly](https://gist.github.com/luuuis/e41fd71134ce88ac5e9359cbdbfb6273) handles partial stages.\r\n\r\nNaive `npm test` in `pre-push` disallows untracked files in `source/` and makes no sense when using `git push <remote> <branch>`. I don't know how to do this properly, I don't think this is the right place.\r\n\r\nCI already lints and runs tests, correctly.",
      "> Naive `npm test` in `pre-push` disallows untracked files in `source/` and makes no sense when using `git push <remote> <branch>`. I don't know how to do this properly, I don't think this is the right place.\r\n> \r\nYou can stash the untracked files before push. \r\n\r\nRun lint and unit test locally can find some obvious errors earlier, maybe this can save some time than remote CI. Local operation is only a supplement to remote CI.\r\n\r\n",
      "Hooks are supposed to enhance or ensure valid workflows, not break them."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a578dfb6b84f242568c",
    "number": 2944,
    "body": "make `unionWith`'s description more clear, use first element from first list if duplicate, for example:\r\n\r\n```js\r\nconst l1 = [{a: 1, b: 1}, {a: 1, b: 2}, {a: 2}];\r\nconst l2 = [{a: 1}, {a: 4}];\r\nR.unionWith(R.eqProps('a'), l1, l2); \r\n//=> [{a: 1, b: 1}, {a: 2}, {a: 4}]\r\n```\r\n\r\n",
    "head_branch": "optimize-unionWith-description",
    "is_a_fork": true,
    "comments": [
      "Thank you!\r\n\r\n:herb:"
    ],
    "commit_messages": [
      "Merge pull request #2944 from adispring/optimize-unionWith-description\n\nmake unionWith's description more clear: use first element from first list if duplicate"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a588dfb6b84f242568d",
    "number": 2943,
    "body": "",
    "head_branch": "eqProps-handle-null-undefined",
    "is_a_fork": true,
    "comments": [
      "This looks great to me.  I see no downside.\r\n\r\nAny one else, @ramda/core?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a598dfb6b84f242568e",
    "number": 2941,
    "body": "@CrossEye  Optimize partial and partialRight as you suggested.\r\n\r\nrelated to #2940\r\n\r\n",
    "head_branch": "optimize-partial-partialRight",
    "is_a_fork": true,
    "comments": [
      "This looks good to me.  Others?  @ramda/core?\r\n",
      "@adispring: Another issue that's been dropped.  This should go in.  Could you resolve the conflicts with the current HEAD?",
      "Ok, I will resolve the conflict soon.",
      "The conflict has been resolved."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a5a8dfb6b84f242568f",
    "number": 2940,
    "body": "If I have a function created by `partialRight`, and passing in wrong count of arguments, this will lead to wrong behavior of original function. For example:\r\n\r\n```js\r\nconst greet = (salutation, title, firstName, lastName) =>\r\n  salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\r\n\r\nconst greetMsJaneJones = R.partialRight(greet, ['Ms.', 'Jane', 'Jones']);\r\n\r\ngreetMsJaneJones('Hello', 'Mr.' 'Green'); //=> 'Hello, Mr. Green Jones!'\r\n```\r\n\r\nSo  function created by `partialRight`, should be restricted to the right count of parameters?",
    "head_branch": "optimize-_createPartialApplicator",
    "is_a_fork": true,
    "comments": [
      "This is definitely a problem.  But I don't think it's the right fix.  I think the behavior should be something like this:\r\n\r\n```js\r\nconst foo = (a, b, c, d, ...rest) => ({a, b, c, d, rest})\r\n\r\nfoo (1, 2, 3, 4, 5, 6)\r\n//=> {a: 1, b: 2, c: 3, d: 4, rest: [5, 6]}\r\n\r\npartialRight(foo, [100, 200])(1, 2, 3, 4)\r\n//=> {a: 1, b: 2, c: 100, d: 200, rest: [3, 4]}\r\n```\r\n\r\nRight now that would return `{a: 1, b: 2, c: 3, d: 4, rest: [100, 200]}`.  I'm guessing the easiest way would be to simply abandon that helper, which isn't doing much anyway, and rewrite it in some ES5 version of \r\n\r\n```js\r\nconst partialRight = (fn, origArgs) => (...args) => \r\n  fn (...insertAll (fn.length - origArgs.length, origArgs, args))\r\n```",
      "closing in favor of #2941"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a5b8dfb6b84f2425690",
    "number": 2939,
    "body": "related to #2921 ",
    "head_branch": "add-note-to-uncurryN",
    "is_a_fork": true,
    "comments": [
      "Thank  you very much!"
    ],
    "commit_messages": [
      "add note: uncurryN actually return a ramda style curried function. (#2939)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a5c8dfb6b84f2425691",
    "number": 2938,
    "body": "Make `propEq/pathEq` parameters order be consistent to `propSatisfies/pathSatisfies` parameters order.\r\n\r\nrelated to #2937 ",
    "head_branch": "change-propEq-parameters-order",
    "is_a_fork": true,
    "comments": [
      "Thank you very much.  I think this is a very positive change, but I'd like to leave it open for a bit to hear back from others.  Any objections, @ramda/core?",
      "This is a big breaking change. I think it's good but I think it's not fair to make this without bumping to 1.0.",
      "@CrossEye What do you think about using this one as an impetus to get to 1.0?\r\n\r\nIt's a positive change, and we can look at the other path stuff, clean it up, then clear this out and 💥 ",
      "@Bradcomp: That sounds like a very good idea.",
      "Any news on this? I just spent 15 minutes debugging why this didn't work: \r\n\r\n```javascript\r\nR.propSatisfies(\"name\", R.test(queryRegex))\r\n```",
      "This is one of the few open issues that I think might be worth a breaking change in `v1.0` -- or possibly a short-lived `v0.29`.",
      "> This is one of the few open issues that I think might be worth a breaking change in `v1.0` -- or possibly a short-lived `v0.29`.\r\n\r\nMy personal preference would be to stop releasing breaking changes in minor v0 releases especially if we're committed to release v1.0 as soon as possible. As much as I prefer having a non-breaking v1.0, I think these changes bring some consistency and v1.0 is probably the best time to introduce such breaking change.\r\n\r\nI'm in favour of this change but would prefer to release it as part of v1.0",
      "@adispring I took the liberty to update your branch:\r\n\r\n1. Rebased against origin/master to fix a conflict\r\n2. Fixed a failing test (somehow one test for `propEq` wasn't updated to reflect the change of parameter position)\r\n\r\n@CrossEye I think this change was welcomed by pretty much everybody in the team. Could we merge this now and ship it in v1.0? I already added that milestone :)",
      "Is it more natural to keep current `propEq`/`pathEq`'s parameter order? And instead, we can change `propSatisfies` and `pathSatisfies`'s parameter order.",
      "> Is it more natural to keep current `propEq`/`pathEq`'s parameter order? And instead, we can change `propSatisfies` and `pathSatisfies`'s parameter order.\r\n\r\nI think your change makes more sense as it focus on the value first as opposed to where the value is:\r\n\r\n```javascript\r\nvar isJohn = propEq('john');\r\n\r\nisJohn('name', {name: 'john'});\r\nisJohn('first_name', {first_name: 'john'});\r\n```\r\n\r\nWith the current parameters order you would have to flip the function first.",
      "> I think your change makes more sense as it focus on the value first as opposed to where the value is:\r\n\r\nOK.",
      "@customcommander wrote\r\n> I think your change makes more sense as it focus on the value first as opposed to where the value is...\r\n\r\nHow to order the arguments is not so clear cut as your comment suggests. Is not \r\n> put the least changing arguments first\r\n\r\nthe principle of Ramda? \r\n\r\nWith that principle, the \"focus\" should sharpen with the position of the argument – so the most general would be first. \r\n\r\nIn the test example `propEq('brown', 'hair');` one could also argue that the subject \"hair\" is more general than the particular color \"brown\".\r\n\r\nWhat the least-changing or most general is, may depend on the particular context. E.g. I use more often the flipped version of `contains` to determine that a value is contained in a known set (enumeration). In that case the enumeration is clearly the least-changing argument and should come first. However, it would be perhaps unpractical for Ramda to introduce it's functions in all permutations. For that there is `flip` and `__`.\r\n \r\nIf this change comes through, we may eliminate the inconsistency with `propSatisfies`, but how many other will be introduced?\r\nE.g. `assoc`, `adjust` and `update` are authored in the way that least-changing is *where* the value is.",
      "I don't think this is necessarily going against the philosophy of putting data last. We simply have different opinions about what the least-changing parameters are. \r\n\r\nFor me `propEq(42)` is the same as `propSatisfies(equals(42))` as I consider `42` as a form of predicate. So in my view the parameters order should be consistent.\r\n\r\nYou make reasonable observations (as always) but we don't need to put everything into the same bag either. I don't see `propEq` and the like as related to functions such as `assoc` (just my opinion here).\r\n\r\nThis PR has been opened for more than two years now so we ought to make a decision at some point. Do you feel strongly against this change?",
      "> This PR has been opened for more than two years now so we ought to make a decision at some point. Do you feel strongly against this change?\r\n\r\nNo, I have anticipated (feared) this breaking change might come eventually and moved away from `propEq`. The trivial task it solves is not worth introducing potential bugs. Instead I write `({key}) =>  key === value`.\r\n\r\nI was just asking if someone else had a consistent conception about the order of parameters in Object-accepting functions of Ramda. This PR might be the right place to ask I thought.",
      "> I was just asking if someone else had a consistent conception about the order of parameters in Object-accepting functions of Ramda. This PR might be the right place to ask I thought.\r\n\r\nI don't think there is any universal answer to these questions.  For the majority of Ramda functions the order feels immediate, and obviously correct.  But some, like `includes` and `propEq` seem to have equal weight, and no wonderful answer.  Here's where I really miss Haskell's left- and right-sections.",
      "Hi, this is a change in the API of a popular function in Ramda, shouldn't it call for an update to the major version?",
      "I think this change was a huge misstake and a horrible breaking change.\r\n\r\n**But the misstake was made long ago!**\r\n\r\nTo explain, I'm thinking of the process of adding functions to an API.\r\n_After a function need (\"step 0\") is identified_:\r\n\r\n**Step 1. Signature**\r\nHere, the often repeated \"put the least changing / most general arguments first\", also called the \"data-last principle\", is to be used. Worth noting is that a function would never be considered \"data\".\r\n\r\n**Step 2. Naming**\r\nHere comes the hard part.\r\n- If the function is a general & commonly understood concept, like \"map\", \"filter\", \"reduce\", use that name. Or perhaps another general and \"fluffy\" word would fit (ex: \"converge\", \"scan\"), great -- one should rely on the documentation.\r\n- If the name is to be invented and **will somehow include or reference any of the arguments, the references must come in the opposite order as the signature**. This is because of currying and readability (and consistency with the absolute majority of the ramda library). (Ex: `R.minBy(square)`, `R.mergeWith(R.concat)`, `R.has(\"name\")`)\r\n\r\n---\r\n\r\n**Example 1: A function that checks a predicate for an object prop**\r\nStep 1: \r\n(a → Boolean) → String → {String: a} → Boolean\r\nNote, as mentioned above, a function is to be considered highly general and \"far away\" from being \"data\". Therefor the predicate is best put first.\r\n\r\nStep 2:\r\nThere is no commonly known concept to apply here as a name, but `propSatisfies` would be great because the last word references the first argument, and the first word references the second! **So the meaning of the \"sentence\" _points_ to the beginning of the argument list.**\r\n\r\n**Example 2: A function that checks an object prop aganst a value**\r\nStep 1: \r\nString → a → Object → Boolean\r\n`a` is a value closer to being \"data\" than the name of the prop, therefor it should come later in the argument list.\r\n\r\nStep 2:\r\nThis is an equality check, and it references a prop in an object. But if our name is to include argument references, the order is important. `valueAtProp` has the right order of arg references so it's a great candidate (but perhaps is missing the word \"equals\"/\"eq\")? `eqAtProp` or even `eqProp` then? `propEq` is **not** a good candidate however, because it implies that the first argument should be the equality check somehow. \r\n\r\n---\r\n\r\nIf the current `propEq` should have been named correctly, there would be no inconsistency with `propSatisfies`. The signature being the most logical and user friendly should come before the naming. The issue here was therefor the name and not the (great) signature of `propEq`. **The question is: What is a good name for the needed signature?**\r\n\r\nThis has been pointed out before, mainly by \"TheLudd\", \"helios1138\" and \"Bradcomp\" [here](https://github.com/ramda/ramda/issues/2428), and I also read there that (2018) **\"The order of propEq was actually changed in one release and then changed back because of many complaints.\"**. Perhaps a repeat on that one ;P.\r\n\r\nIs it time to correct this the right way, for version 1.0? :)\r\n\r\nEDIT: Well, so I should clarify that the change was maybe actually good, but then we need a better function with a great signature (and a fitting name).\r\n",
      "@whitelizard Thanks for working out the concept of naming functions. It is easy to remember and brings consistency to the vast API surface. \r\n\r\nYour Steps 1 and 2 should \r\n- Go prominently in the Readme. It they were, it could have reduced the many times I had to visit the documentation to look up a function signature,\r\n- Become the criterion for adding new functions\r\n\r\nI also agree that naming `propEq`  badly in the first place, brought us into this mess here.\r\n\r\nI briefly checked the list of Ramda functions, if they comply with your Steps 1 and 2. I came up with *just a few* mismatches!\r\n\r\n|existing fn| signature | consistent name |\r\n|-----------|-----------|------------|\r\n| allPass   | `[(*… → Boolean)] → *… → Boolean` | passesAll   |\r\n| anyPass  | `[(*… → Boolean)] → *… → Boolean` | passesAny   |\r\n| append | `a -> [a] -> [a]` | appendValue |\r\n| [appendFlipped][ra-afl] | `[a] -> a -> [a]`  | appendTo | \r\n| nthArg   | `Number → *… → *` | argNth |\r\n|          | `[Idx] → a → {a} → Boolean`  | eqPath |\r\n|          | `Idx → a → {a} → Boolean`  | eqProp |\r\n|[included][ra-incld] | `[a] → a → Boolean` | includedIn |\r\n\r\n##### (last updated 21 July 2023)\r\n\r\n[ra-afl]: https://char0n.github.io/ramda-adjunct/4.0.0/RA.html#.appendFlipped\r\n[ra-incld]: https://char0n.github.io/ramda-adjunct/4.0.0/RA.html#.included",
      "This was quite the unexpected breaking change for a minor version.\r\n\r\nWhile I understand the benefit, unlike with removed or renamed functions the change from e.g. `R.propEq('id', '123')` to `R.propEq('123', 'id')` will cause many hard to find bugs in non-typescript codebases.\r\n\r\nIt would be fun if people would comment here the amount of time they spent tracking the bug before finding the culprit and the amount of time they spent refactoring their codebases. :)",
      "> This was quite the unexpected breaking change for a minor version.\r\n> \r\n> While I understand the benefit, unlike with removed or renamed functions the change from e.g. `R.propEq('id', '123')` to `R.propEq('123', 'id')` will cause many hard to find bugs in non-typescript codebases.\r\n> \r\n> It would be fun if people would comment here the amount of time they spent tracking the bug before finding the culprit and the amount of time they spent refactoring their codebases. :)\r\n\r\ni spend 3 hours to find this change in my test case today morning, and will spend 4 hours afternoon to refactor my code. 😭",
      "@yuercl Don't forget that `R.of` has also changed.\n\nA full text search 'n replace over all my code seems inevitable. That's why, I am staying on v0.28 where I can.",
      "I often want to \r\n```javascript \r\nconst idEq = propEq('id')\r\n```\r\n\r\nI [never](https://github.com/ramda/ramda/issues/1279#issue-94733214) want to \r\n```javascript \r\nconst somePropEqualsOne = propEq(1)\r\n```\r\n\r\nI thus want to \r\n[revert](https://github.com/ramda/ramda/pull/1286)",
      "@crshmk Is there a workaround for this?",
      "> @crshmk Is there a workaround for this?\r\n\r\n@Lambdaphile to [recreate](https://ramdajs.com/repl/?v=0.29.0#?const%20thing%20%3D%20%7B%20id%3A%2042%20%7D%0A%0Aconst%20idEq%20%3D%20propEq%28__%2C%20%27id%27%29%0A%0AidEq%2842%2C%20thing%29%0A) the `idEq` above you can use a [placeholder](https://ramdajs.com/docs/#__) to reorder the props. \r\n\r\n```javascript\r\nimport { __, propEq } from 'ramda'\r\n\r\nconst idEq = propEq(__, 'id')\r\n``` \r\n\r\nIf you have a lot of broken `propEq`s and you don't want to update them all, the easiest solution is to use version `0.28`\r\n```json\r\n\"dependencies\": {\r\n  \"ramda\": \"=0.28.0\"\r\n}\r\n```\r\n\r\n\r\n\r\nHowever, if you use ramda in many different apps, managing two different incompatible versions across them is unwieldy at best and impossible if they share code. This is actually the larger issue. To use `=0.28.0` and `>=0.29.0` across shared code, I suggest creating your own `propEq` locally.\r\n\r\n\r\n```javascript \r\n// propEq.js, kept in local utils\r\nimport { curry, equals, prop } from 'ramda'\r\n\r\nexport const propEq = curry((name, val, obj) => \r\n  equals(val, prop(name, obj)))\r\n\r\n```\r\n\r\n\r\n```javascript \r\n// app.js\r\nimport { filter } from 'ramda'\r\nimport { propEq } from './utils'\r\n```\r\n\r\nI have my own everyday ramda [utils](https://github.com/crshmk/utils) I've built over the years, so I just [added](https://github.com/crshmk/utils/commit/7a9aca0e7e1b9c8f5db0cf487afc7cc08163acba) it to those. In this way, all my apps can use version `0.28` or `0.29` of ramda as long as they grab the current version of my utils and import `propEq` from there (as above). \r\n\r\nFinally, respectfully, the best solution would be to admit that we already [litigated](https://github.com/ramda/ramda/pull/1286) this and to revert, preferably quickly. ",
      "It was not a good idea to reverse parameters of that function IMO =(\r\n\r\nbecause :\r\n1. It's way more easier to read `propEq('hair', 'brown')` than `propEq('brown', 'hair')`\r\n2. a function `propEq('hair')` is more useful than `propEq('brown')`\r\n3. It creates hard to find bugs\r\n4. It's **just** a cosmetic change that has no other real motivations\r\n5. It introduces a big breaking change in a minor release and does not comply with [semver](https://semver.org/): \"MAJOR version when you make incompatible API changes\"\r\n\r\nSometime it's better to simply rename a function instead of changing its signature\r\n\r\n(I spent 2h to find the origin of bugs in my app)",
      "I got bit by this.\r\n\r\nWhile I agree with this change, these kinds of subtle breaking changes is what will prevent large adoption of this library. I wish this project to immediately release 1.0 and follow strict semver. Breaking changes are fine. Just make a new major release. That is what that is for!",
      "> While I agree with this change, these kinds of subtle breaking changes is what will prevent large adoption of this library. I wish this project to immediately release 1.0 and follow strict semver. Breaking changes are fine. Just make a new major release. That is what that is for!\r\n\r\nI agree. Every lib should actually always start with v1.0.0, from the very beginning, for the npm semver system to work well. I recommend to read e.g. this article on this subject: https://medium.com/javascript-scene/software-versions-are-broken-3d2dc0da0783\r\n",
      "First, as a reminder for everyone, per the rules of semver, for **major version zero**, minor bumps should be considered breaking. Ref: https://semver.org/#spec-item-4\r\n\r\nThat being said, IMHO `ramda` should have reached `1.0.0` long ago. Regardless of function names and signatures, what `ramda` offers as an API and how each function works are very stable. I personally don't see a reason to keep it as `0.x`. That would have alleviated the main issue of the \"breaking\" expectation\r\n\r\nTo address the argument order of `propEq`, I agree with the signature change made in this MR. With that change, the following functions all share the same argument order:\r\n* pathEq\r\n* pathOr\r\n* pathSatisfies\r\n* propEq\r\n* propIs\r\n* propOr\r\n* propSatisfies\r\n\r\nI'm going to argue that this consistency is the most important part here. What the argument order _should_ be is completely subjective.\r\n\r\nAs for function naming, we have a pretty decent convention going already, for the aforementioned functions, the convention is `subject -> prop/path -> object -> boolean`. In contrast, we have these functions\r\n* assoc\r\n* assocPath\r\n* dissoc\r\n* dissocPath\r\n* adjust\r\n* update\r\n\r\nIf we fully qualify the names, we get this:\r\n* assocProp\r\n* assocPath\r\n* dissocProp\r\n* dissocPath\r\n* adjustIndex\r\n* updateIndex\r\n\r\nAnd the convention for these are `prop/path -> subject -> object -> object`.\r\n\r\nTo summarize, when prop/path comes first in the function name, prop/path is the second argument, and when prop/path comes second in the function name, prop/path is the first argument\r\n\r\nNow, that convention could also apply to the fact that prop/path second is \"mutate\" and prop/path first is \"evaluate against\". We could keep that naming convention for that purpose and have them all share the same general signature of `prop/path -> subject -> object -> result` (this is what I meant about the argument order being subjective).\r\n\r\nIn the end, I think consistency is the most important part here. Therefore I vote _not_ to revert this MR.\r\n\r\nIf it is decided that the argument order should be changed, then I would propose that, as part of a long overdue `1.0.0` release, change **ALL** of their signatures to be `prop/Path -> subject -> object -> boolean` **TOGETHER** as part of a single release.",
      "Every function should stand on its own and not be dependent on or ruled by other functions and their most logical & convenient names and signatures (arg order). I don't think that arg order is always subjective, but the name should reflect the order, that is most important.\r\nYou could probably find many different groupings among all ramda functions, but if a grouping is based on names, and we adjust signatures based on the group of names, then we are working backwards! Signature comes first, then a name that correctly reflects what the function does AND (almost more importantly) the argument order -- regardless of other functions in the library.\r\n(See my previous post)",
      "> regardless of other functions in the library.\r\n\r\nGood APIs have consistent and predictable behavior. And that includes function signatures and argument order. My point is that they should be consistent. I'm not particular about which of the 2 orders here is correct, `subject -> prop/path -> object -> boolean` or `prop/Path -> subject -> object -> boolean`.\r\n\r\n>  I don't think that arg order is always subjective\r\n\r\nWhat I mean to say is the reasoning behind why the arguments should be in the order they are is subjective. Using your own example here\r\n> **Example 1: A function that checks a predicate for an object prop**\r\nStep 1:\r\n(a → Boolean) → String → {String: a} → Boolean\r\nNote, as mentioned above, a function is to be considered highly general and \"far away\" from being \"data\". Therefor the predicate is best put first.\r\n\r\nand\r\n\r\n> **Example 2: A function that checks an object prop aganst a value**\r\nStep 1:\r\nString → a → Object → Boolean\r\na is a value closer to being \"data\" than the name of the prop, therefor it should come later in the argument list.\r\n\r\nLet's rewrite these 2 signatures generically.\r\n* Example 1: `X -> Key -> Object -> Boolean`\r\n* Example 2: `Key -> X -> Object -> Boolean`\r\n\r\nThe idea that a \"function\" is further away from \"data\" than \"value\", so `Key` should come second in one case and second in the other is _subjective_. I could argue that the `Key` is closer to the `Object` in both cases.\r\n\r\nBesides, `propEq = (value, key, obj) => propSatisfies(x => x === value, key, obj)`\r\n\r\nWhatever the order is, just have it be consistent. `propEq` was inconsistent before, and now it is.\r\n\r\nI don't disagree with you that `propEq` should be `String -> a -> Object -> Boolean`, all I'm saying is that if we choose to do that, we should for `propSatisfies`, `propIs`, etc, as well.",
      "For any future argument changes, I think the community would benefit greatly from codemods that `ramda` could supply as part of it's release process. Similar to what react supplies: https://github.com/reactjs/react-codemod",
      "@Harris-Miller I feel that you don't get my point. \r\n\r\nThe **naming** is wrong, not the signature. \r\n\r\nAs I wrote earlier: e.g. \"valueAtProp\" would be the better name if the prop name (key) comes first in the argument list (`Key -> X -> Object -> Boolean`). \r\n\r\nIt is not the start of the function name that refers to the first argument, it is the last part of the function name that should refer to the first function argument. This is because of currying.\r\n\r\n```js\r\nconst ageIs = R.valueAtProp('age');\r\nconst isPerson20yearsOld = ageIs(20);\r\nconst celebratePerson = isPerson20yearsOld(person);\r\n```\r\n\r\nDo you agree that the intention of ramda functions is to be able to use currying in the way like above? And that the names should read well with the argument that follows, like above?\r\n\r\nIf the rules that I wrote in my first long post is followed, then the API would be entirely consistent.",
      "> Do you agree that the intention of ramda functions is to be able to use currying in the way like above? And that the names should read well with the argument that follows, like above?\r\n\r\n@whitelizard Yes I do agree. My arguments for why `propEq` should have been changed as described in this MR from the start is solely for that and that alone. That does not mean that I disagree with you on the fact that the names _should_ be different to better represent their signatures, or that the signatures _should_ be different to better match the current names.\r\n\r\nMy goal is for consistency in behavior and expectation in the API.\r\n\r\n> If the rules that I wrote in my first long post are followed, then the API would be entirely consistent.\r\n\r\nAlso agree, as it aligns with my stated goal",
      "So, the solution could be simple. \r\n\r\n**`propEq` is not really a useful function**, as @crshmk has pointed out multiple times above. It could stay in the library, with arg order changed as by this MR, but the library should have the **more useful** function `valAtProp` (or whatever would be the best name). Also change the other inconsistent functions (their names!) according to @semmel.\r\n\r\nRelease 1.0.0.\r\n\r\nAgain, the order of designing any API function should be: \r\n\r\n**Need -> Signature -> Name**\r\n\r\nNever change the signature of a function to match the faulty name it unfortunately got. The signature was designed out of **greatest utility**. The name should change if it got a bad one. Changing the name is not initially a breaking change, it could start with a minor release of **adding** the new name to the API and flagging the old as \"will be removed in the next major\". Ramda could have this as part of its _change strategy_.",
      "100% agree with @whitelizard\r\nAnd I would add that I think it's preferable to consider the users of the library and their (often large) code base when planning such a huge change. By this I mean the difficulty of the migration needed when inverting the parameters order of a curried function, which could be used in several ways, compared to the simplicity of the migration if we just changed its name.\r\n\r\nI also agree with having consistent functions in a library is a good thing, but maybe it would be a good thing also to add another function (temporary or not) to replace with when migrating.",
      "@whitelizard just to be clear, to extend on [this table](https://github.com/ramda/ramda/pull/2938#issuecomment-1528863527)\r\n\r\nexisting fn | signature | consistent name\r\n-- | -- | --\r\nallPass | [(*… → Boolean)] → *… → Boolean | passesAll\r\nanyPass | [(*… → Boolean)] → *… → Boolean | passesAny\r\nappend | a -> [a] -> [a] | appendValue\r\nappendFlipped | [a] -> a -> [a] | appendTo\r\nnthArg | Number → *… → * | argNth\r\n  | [Idx] → a → {a} → Boolean | eqPath\r\n  | Idx → a → {a} → Boolean | eqProp\r\nincluded | [a] → a → Boolean | includedIn\r\npathEq | a → [Idx] → {a} → Boolean | valAtPath\r\npropEq | a → Idx → {a} → Boolean | valAtProp\r\n\r\nWhile obviously incomplete, the table just represents the idea of deprecating existing fn columns, adding their replacements in the consistent name column, as well as adding new functions that don't currently exist\r\n\r\nFor the sake of typescript I personally like having complementary functions `eqProp`/`valAtProp`, `append`/`appendValue`, etc. There is currently no good way to type `flip` for functions of arity 3+. Having both varieties of all these functions would help a lot in that regard.\r\n\r\nCC: @kedashoe ",
      "> For the sake of typescript I personally like having complementary functions eqProp/valAtProp, append/appendValue, etc. There is currently no good way to type flip for functions of arity 3+. Having both varieties of all these functions would help a lot in that regard.\r\n\r\nYes, and I would extend that to a few *binary* functions too. They have crept up in [Ramda-adjunct](https://char0n.github.io/ramda-adjunct/4.0.0/index.html) eg. `R.includes ≡ flip(RA.included)`, `R.append ≡ flip(RA.appendFlipped)`, but in Ramda too e.g. `R.difference ≅ flip(R.without)`. \r\n\r\nThis is always when *\"…the reasoning behind why the arguments should be in the order they are is subjective\"*.\r\n\r\nAnother example which comes to my mind is `concat`. Written in a function pipeline `pipe(() =>a, concat(b))()` I always need to imagine the binary form `concat(x, y) = [...x, ...y]` to find out, that the pipeline kind of *appends* all of `a` to `b` and not the other way round. That reasoning is ok. Is is not too hard to figure out and consistent in Ramda (`difference`, `subtract`).\r\n\r\nOn the other hand, while you @Harris-Miller mention it, `flip` for functions of arity 3+ gives my headaches — and not because of TypeScript. I think its an anti-pattern. (Just as a side-note)",
      "I know this has been beat to death, but I'd just like to add my two cents. I really hate this change. I just propEq and pathEq way more than propSatisfies. Plus, the naming, as other has suggested, practically tells you how to use it: prop, then equals. I've always had to look up the docs when needing propSatisfies simply because of the naming inconsistency. But even still, I think it would have made more sense to change propSatisfies to match the other two. /shrug",
      "would it be possible to mention this change in the `propEq` documentation at least?  it's extremely confusing for anyone using 0.28.0 that hasn't read this thread.  i just wasted several hours trying to figure out why my code was working in the doc page but not in my code.\r\n\r\nthanks.",
      "Ouch. It seems pretty onerous have to change any and all calls to propEq/pathEq for such a flimsy and subjective reason. I get that the library will probably not change back to its historical API at this point, but this seems hostile to longtime users, and it certainly makes me consider the wisdom of moving away from a dependency on Ramda.",
      "> @whitelizard just to be clear, to extend on [this table](https://github.com/ramda/ramda/pull/2938#issuecomment-1528863527)\r\n> \r\n> existing fn\tsignature\tconsistent name\r\n> allPass\t[(*… → Boolean)] → *… → Boolean\tpassesAll\r\n> anyPass\t[(*… → Boolean)] → *… → Boolean\tpassesAny\r\n> append\ta -> [a] -> [a]\tappendValue\r\n> appendFlipped\t[a] -> a -> [a]\tappendTo\r\n> nthArg\tNumber → *… → *\targNth\r\n>  \t[Idx] → a → {a} → Boolean\teqPath\r\n>  \tIdx → a → {a} → Boolean\teqProp\r\n> included\t[a] → a → Boolean\tincludedIn\r\n> pathEq\ta → [Idx] → {a} → Boolean\tvalAtPath\r\n> propEq\ta → Idx → {a} → Boolean\tvalAtProp\r\n> While obviously incomplete, the table just represents the idea of deprecating existing fn columns, adding their replacements in the consistent name column, as well as adding new functions that don't currently exist\r\n> \r\n> For the sake of typescript I personally like having complementary functions `eqProp`/`valAtProp`, `append`/`appendValue`, etc. There is currently no good way to type `flip` for functions of arity 3+. Having both varieties of all these functions would help a lot in that regard.\r\n> \r\n> CC: @kedashoe\r\n\r\nI believe all number comparison functions are also the wrong order: `lt`, `gt`, `lte`, `gte`.\r\n\r\nAgain, partial application and readability:\r\n```js\r\nconst below20 = R.lt(20); // is read \"less than 20\"\r\nconst isYoung = below20(age);\r\n```",
      "> I believe all number comparison functions are also the wrong order\r\n\r\nhttps://github.com/ramda/ramda/issues/1497",
      "It may be fine to change the signature of the functions so they \"read correctly\", but please make a 1.0 release with the current signature, and then make breaking changes in a future major version. Stability and reliability are very important for a library like ramda."
    ],
    "commit_messages": [
      "change propEq/pathEq parameters order (#2938)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a5d8dfb6b84f2425692",
    "number": 2935,
    "body": "",
    "head_branch": "repl-outside",
    "is_a_fork": true,
    "comments": [
      "Nice!"
    ],
    "commit_messages": [
      "Allow to run repl from outisde directory (#2935)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a5e8dfb6b84f2425693",
    "number": 2932,
    "body": "updating comments to make the function correctly documented.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Thank you, @mudit56!"
    ],
    "commit_messages": [
      "Updating comments for splitWhenever.js (#2932)\n\n* Updating comments \r\n\r\nupdating comments to make the function correctly documented.\r\n\r\n* Update splitWhenever.js"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a5f8dfb6b84f2425694",
    "number": 2928,
    "body": "1.0 ain't happening (#2337), so maybe this will push Ramda to adapt to newer environments.\r\n\r\nThis allowed to `npm run build:umd:min` #2585 without tripping uglify (#2724).",
    "head_branch": "transpile-umd",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Transpile UMD for IE11 (#2928)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a608dfb6b84f2425695",
    "number": 2927,
    "body": "https://github.com/ramda/ramda/issues/2906",
    "head_branch": "bugfix/isVowel-is-not-defined-in-groupsWith",
    "is_a_fork": true,
    "comments": [
      "Thank you very much @vasinkevych!"
    ],
    "commit_messages": [
      "isVowel is not defined in groupsWith (#2927)\n\n* is Vowel is not defined\r\n\r\n* typo"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a618dfb6b84f2425696",
    "number": 2925,
    "body": "### Implements\r\n- #2923 \r\n\r\n### TS Declarations\r\n-  https://github.com/types/npm-ramda/pull/443\r\n\r\n### Tasks\r\n- [ ] TS Declarations",
    "head_branch": "feature/2923__implement-where-any",
    "is_a_fork": true,
    "comments": [
      "@Bradcomp @CrossEye \r\n\r\nA quick follow up, \r\nare we ready to merge this?",
      "I made one tiny comment, but other than that I am :bowtie: ",
      "@CrossEye @Bradcomp going to merge this in **two days** if no further comments.\r\n\r\nNext follow up on Wed 10 Dec 2019",
      ":herb:!  Thanks, @hitmands!",
      "```typescript\r\nconst gentleReminder = R.unless(\r\n  furtherActivity, \r\n  mergeBy(endOfToday),\r\n);\r\n\r\nawait publish(gentleReminder);\r\n```",
      "Thanks @hitmands! :bowtie: "
    ],
    "commit_messages": [
      "Merge pull request #2925 from hitmands/feature/2923__implement-where-any\n\nFeature/2923  implement whereAny"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a628dfb6b84f2425697",
    "number": 2924,
    "body": "- implements: #2923\r\n\r\nTasks:\r\n- [ ] Provide TS Declarations",
    "head_branch": "feature/2923__implement-where-any",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a638dfb6b84f2425698",
    "number": 2922,
    "body": "",
    "head_branch": "see-project-pluck",
    "is_a_fork": true,
    "comments": [
      "I think better than this would be if these four would refer either all to one another or at least all refer to their horizontal and vertical neighbors (so that, for instance,, `pluck` might refer to `prop` and `project` but possibly not to `props`):\r\n\r\n|                         | single object | multiple objects |\r\n|-------------------------|---------------|------------------|\r\n| **single property**     | prop          | pluck            |\r\n| **multiple properties** | props         | project          |\r\n\r\nThey're not entirely parallel, since they have different return types, but they make sense as a group that would all make reference to one another.\r\n\r\nI don't think that `map` belongs in this group.  It does something else, even if it can be used to implement, say `pluck` in terms of `prop`.\r\n\r\n",
      "Modified see links by your suggestion, @CrossEye ",
      ":herb:\r\n\r\nThank you very much!"
    ],
    "commit_messages": [
      "add @see: pluck, project and map (#2922)\n\n* add @see: pluck, project and map\r\n\r\n* Link pluck, project, prop and props to each other."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a648dfb6b84f2425699",
    "number": 2920,
    "body": "Switch Typescript types to DefinitelyTyped (npm @types/ramda)\r\n\r\nfixes #2918 ",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      ":herb:\r\n\r\nLGTM. \r\n\r\nAnyone have comments?  @ramda/core?",
      ":bowtie: ",
      "Thank you very much, @estaub !"
    ],
    "commit_messages": [
      "Switch Typescript types to DefinitelyTyped. (#2920)\n\nSwitch Typescript types to DefinitelyTyped (npm @types/ramda)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a658dfb6b84f242569a",
    "number": 2919,
    "body": "Currently R.both uses R.and for \"see also\" but R.and accepts two booleans and both two functions. I propose to **change the @see from R.and to R.either**.\r\n\r\nAnd the same goes for R.either:  **change the @see from R.or to R.both**.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "`or` and `both` are each related to `and` in different ways.  I think better would be if `and`, `both`, `or`, and `either` all pointed both horizontally and vertically in this table:\r\n\r\n|                 | scalar | function |\r\n|-----------------|--------|----------|\r\n| **conjunction** | and    | both     |\r\n| **disjunction** | or     | either   |\r\n\r\nSo in `and.js`:\r\n\r\n```js\r\n * @see R.both, R.or\r\n```\r\n\r\nEtc.",
      "Thank you very much.  This is definitely an improvement.",
      "No problem! I'm very happy I'm able to contribute a little bit to this wonderful library!"
    ],
    "commit_messages": [
      "change see of 'either' and 'both' to match type signature (#2919)\n\n* change see of 'either' and 'both' to match type signature\r\n\r\n* added 'see also' references to 'and', 'or', 'both' and 'either'"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a668dfb6b84f242569b",
    "number": 2917,
    "body": "",
    "head_branch": "sort-link-to-xxscend",
    "is_a_fork": true,
    "comments": [
      ":bowtie: This seems like a good addition.",
      "Absolutely.  As always, thank you for your contribution!"
    ],
    "commit_messages": [
      "add \"@see: R.ascend, R.descend\" to sort & sortWith (#2917)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a678dfb6b84f242569c",
    "number": 2916,
    "body": "By using different orders of magnitude, lift's combinatorial nature is a bit more clear",
    "head_branch": "improve-lift-doc",
    "is_a_fork": true,
    "comments": [
      "Funny, I thought we'd done this long ago.\r\n\r\nIt's definitely worth doing.\r\n\r\nThank you. "
    ],
    "commit_messages": [
      "Improve lift documentation to be more intuitive (#2916)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a688dfb6b84f242569d",
    "number": 2915,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Hi @rahulpansari \r\nCan you provide some background on this PR? It is failing our CI, and also it's not making any visible modifications to the library, as the bench folder is just for performance testing.",
      " I am really sorry for that it is same as my first pull request"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a698dfb6b84f242569e",
    "number": 2914,
    "body": "",
    "head_branch": "optimize-addIndex-signature",
    "is_a_fork": true,
    "comments": [
      "Sure.  That's an improvement.  At some point I want to go through these variadic signatures and replace the ellipses with multiple versions, showing an ellipsis only between signatures.  But `addIndex` may be a particularly nasty one regardless.\r\n"
    ],
    "commit_messages": [
      "make addIndex signature more clear (#2914)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a6a8dfb6b84f242569f",
    "number": 2909,
    "body": "This PR updates the `ramda.js` and `ramda.min.js` bundled in the `dist`.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Missed this at that time, but newer releases have changed the need for it."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a6b8dfb6b84f24256a0",
    "number": 2908,
    "body": "Fixes #2619.\r\n\r\nI wrote it with a `reduce` to allow other iterables to also work,\r\nbut it can be written to use the Iterable protocol.\r\n\r\nLet me know if there is something to improve on this PR.\r\n",
    "head_branch": "feature/generalize-split-function",
    "is_a_fork": true,
    "comments": [
      "~~If this is going works with other iterables, the signature would be something like `a -> f a -> [f a]`. (?)~~\r\nBetter let this work with arrays and strings, for now. It would require some work to generalize.",
      "Just getting back to Ramda after some time away...\r\n\r\nCould you provide some more context on *why* you want this?  Is it just that it seems a natural extension or did you have a real-world problem that would have been solved if only `split` also handled arrays?  How do you propose to handle the oddity that this would then accept a regex separator for strings, but not for arrays?",
      "It's natural when we consider strings a list of chars, than it would be nice to allow it to work on any kind of list. \r\n\r\nOne problem with this implementation is the idea that we need to check before execute the correct implementation (the regex case included). Maybe, it would be better to let `split` unchanged, since it's more connected to the String interface and make a new function to work with array.",
      "I agree with separating this functionality from split, it would avoid confusion."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a6c8dfb6b84f24256a1",
    "number": 2905,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Hi @dvd035,\r\nWhat is the purpose of this update?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a6d8dfb6b84f24256a2",
    "number": 2902,
    "body": "If accepted this PR will add a new function to ramda to allow a user to check if a value is `undefined`\r\n\r\ncloses #2890 ",
    "head_branch": "ramda#2890",
    "is_a_fork": true,
    "comments": [
      "Hi @TheHandsomeCoder, thanks for the PR. As mentioned in the issue bringing this up, I think this might be a bit too specific for Ramda, though I would be open to hearing your thoughts if you feel otherwise.\r\n\r\nFor reference, this function does exist in [Ramda Adjunct](https://char0n.github.io/ramda-adjunct/2.21.0/RA.html#.isUndefined), so it's there if there is an immediate need.",
      "Closing due to lack of interest.",
      "Reopening because the discussion has reactivated.\r\n\r\nI'm with @Bradcomp.  My first impression is that this is not widespread enough, and it's easy to write on your own.",
      "I guess for me the question is why to add this function in particular? Is it better to add this than `isDefined` instead? If we add `isUndefined` should we add `isNull` as well?",
      "@Bradcomp @CrossEye  My two (unrequested) cents:\r\n\r\n`isUndefined` would just be `equals(undefined)` and doesn't look, in my opinion, like it would add much more value than saving 6 characters.\r\n\r\n> Is it better to add this than `isDefined` instead? \r\n\r\n`isDefined` sounds kind of vague. Something being \"defined\" might be tied to its semantic context. `isUndefined` is much more clear in its intent and has a direct JS correlation.\r\n\r\n> If we add `isUndefined` should we add `isNull` as well?\r\n\r\nYes. If you don't, it'd be like an inside itch that you can't scratch.\r\n\r\n",
      "@nfantone: \r\n\r\n> My two (unrequested) cents\r\n\r\nUnrequested, perhaps, but very welcome!  I agree on all points."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a6d8dfb6b84f24256a3",
    "number": 2900,
    "body": "",
    "head_branch": "bugfix",
    "is_a_fork": true,
    "comments": [
      "I'm a newbie to functional programming and recently I notice something weird to me when looking into Ramda source code. Some methods of Ramda seem not favour pointfree style, like gt, substract and concat. The argument order of concat I expected is concat(what, data), but Ramda's implementation is more likely to be translated as \"a concat b\". When using Ramda's concat in partially application or function pipeline, we write code like:\r\n```javascript\r\nconst concatRamda = flip(concat('ramda'))\r\ncompose(toUpperCase, concatRamda)('enter ') //=> 'ENTER RAMDA'\r\n```\r\nIn my opinion concat(what, data) is more nature and intutive. We does not need to introduce extra flip and it's more consistent with the remaining codebase. Does Ramda design these methods for a reason? \r\n",
      "I can't tell whether you think these tests should be removed because you think the API should change or if you see real duplication in the tests as your issue title implies.  If the latter, what do you see duplicated?\r\n\r\nAs to this:\r\n\r\n> Does Ramda design these methods for a reason?\r\n\r\nI'm just going to repost part of my answer from https://github.com/ramda/ramda/issues/2895#issuecomment-536237789:\r\n\r\n>> BTW it's strange to see that R.gt and R.lt using first argument as value.\r\n\r\n> You're asking about things that have a long history of controversy in Ramda.  I'm afraid I don't have the strength to look up the references, as I will start re-reading all our old arguments and tedious discussions about them.  But if you search for \"operator\", you will find at least a dozen issues related to this.\r\n> \r\n> Briefly, there is a serious tension between, for instance,\r\n> \r\n> ```\r\n> R.subtract(10, 3) //=> clearly should be 7\r\n> ```\r\n> \r\n> and \r\n> \r\n> ```\r\n> const less3 = R.subtract(3)\r\n> \r\n> less3(10) //=> we want this to be 7, but it's -7.\r\n> ```\r\n> \r\n> This is true for `gt` as well, and for any binary operator where `op(a, b) !== op(b, a)`.  We have never really found a solution we liked for this.\r\n",
      "Sorry I didn't provide enough imformation about this PR. There is real duplication in the test:\r\n```javascript\r\n  it('adds combines the elements of the two lists', function() {\r\n    eq(R.concat(['a', 'b'], ['c', 'd']), ['a', 'b', 'c', 'd']);\r\n    eq(R.concat([], ['c', 'd']), ['c', 'd']);\r\n  });\r\n\r\n  var z1 = {\r\n    x: 'z1',\r\n    concat: function(that) { return this.x + ' ' + that.x; }\r\n  };\r\n  var z2 = {\r\n    x: 'z2'\r\n  };\r\n\r\n  it('adds combines the elements of the two lists', function() {\r\n    eq(R.concat(['a', 'b'], ['c', 'd']), ['a', 'b', 'c', 'd']);\r\n    eq(R.concat([], ['c', 'd']), ['c', 'd']);\r\n  });\r\n```\r\nNow it's obvious I supposed.",
      "Weird, I swear I looked at the file and didn't see it.  I must have looked at the one from your commit...\r\n\r\nThank you.  This is clearly needed."
    ],
    "commit_messages": [
      "Remove duplicate test cases (#2900)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a6e8dfb6b84f24256a4",
    "number": 2899,
    "body": "Update copyright year",
    "head_branch": "update_copyright_year",
    "is_a_fork": true,
    "comments": [
      "Thank you!"
    ],
    "commit_messages": [
      "Merge pull request #2899 from prog1dev/update_copyright_year\n\nUpdate copyright year"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a6f8dfb6b84f24256a5",
    "number": 2898,
    "body": "It makes no sense to test for `R.keys` in `R.values` testfile. `R.keys` accidently passed the test clause, but it needs to fix for sure.",
    "head_branch": "bugfix",
    "is_a_fork": true,
    "comments": [
      "You're right that this needs to be fixed.  But I wonder if it would be clearer altogether to skip the list and call each one explicitly:\r\n\r\n```js\r\n  it('returns an empty object for primitives', function() {\r\n    eq(R.values(null), [])\r\n    eq(R.values(undefined), [])\r\n    eq(R.values(55), [])\r\n    eq(R.values('foo'), [])\r\n    eq(R.values(true), [])\r\n    eq(R.values(false), [])\r\n    eq(R.values(NaN), [])\r\n    eq(R.values(Infinity, [])\r\n    eq(R.values([]), [])\r\n  });\r\n```",
      "I agree with you it's more easy to read when writing in this way. If we want to update this, it's better to update `R.keys` counterpart simultaneously.",
      "Perfect.  Thank you very much!"
    ],
    "commit_messages": [
      "Fix a bug in `R.values` test file (#2898)\n\n* Fix a bug in `R.values` testfile\r\n\r\nIt makes no sense to test for `R.keys` in `R.values` testfile.\r\n\r\n* Refactor some tests for  and"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a708dfb6b84f24256a6",
    "number": 2897,
    "body": "The documentation of `complement` leaves `isNil` in the example without a clear definition, and the REPL is picking out `isNil` from the scope of `R` (so it does work...). However, that seems unclear to someone reading the example without running the REPL as this var seems to come out of nowhere.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Absolutely.  Thank you very much!"
    ],
    "commit_messages": [
      "Fix documentation for complement (#2897)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a718dfb6b84f24256a7",
    "number": 2893,
    "body": "…tter illuminate the behaviour of the function through the documentation",
    "head_branch": "update-difference-with-docs",
    "is_a_fork": true,
    "comments": [
      "This looks good to me once @CrossEye's changes are made. A few things I considered were whether this behavior is tested for (it is) and whether we need to consider this for other set operations. I don't think we do because all other operations are symmetrical.\r\n\r\n:bowtie: ",
      "Not to bikeshed, but I wonder whether a different set of examples would be more helpful. The problem with these examples is that they use `R.equals`, which may not make it clear to the reader that the predicate is being used to dedupe the result array.\r\n\r\nHere's another suggestion, worked into the existing docs:\r\n```\r\n *      const cmp = (x, y) => x.a === y.a;\r\n *      const l1 = [{a: 1}, {a: 2}, {a: 3}];\r\n *      const l2 = [{a: 3}, {a: 4}];\r\n *      R.differenceWith(cmp, l1, l2); //=> [{a: 1}, {a: 2}]\r\n *\r\n *      const l3 = [{a: 2}, {a: 2}, {a: 3}];\r\n *      R.differenceWith(cmp, l3, l2); //=> [{a: 2}]\r\n *      R.differenceWith(cmp, l3, []); //=> [{a: 2}, {a: 3}]\r\n```",
      "@kurtmilam: Not to bikeshed your bikeshed :smile:, but I have a difficult time distinguishing between \r\n\r\n```js\r\n *      R.differenceWith(cmp, l3, l2); //=> [{a: 2}]\r\n```\r\n\r\nand\r\n\r\n```js\r\n *      R.differenceWith(cmp, 13, 12); //=> [{a: 2}]\r\n```\r\n\r\n(\"ell-3\" versus \"thirteen\")\r\n\r\nI like this example, but perhaps with different variable names.",
      "I completely agree about the variable names. I just kept the `l1` and `l2` currently in the docs and extended it to `l3`, and I can report that it was a little confusing to keep them straight.\r\n\r\nHow about swapping 'l' for 'a' (for 'array'):\r\n```\r\n *      const cmp = (x, y) => x.a === y.a;\r\n *      const a1 = [{a: 1}, {a: 2}, {a: 3}];\r\n *      const a2 = [{a: 3}, {a: 4}];\r\n *      R.differenceWith(cmp, a1, a2); //=> [{a: 1}, {a: 2}]\r\n *\r\n *      const a3 = [{a: 2}, {a: 2}, {a: 3}];\r\n *      R.differenceWith(cmp, a3, a2); //=> [{a: 2}]\r\n *      R.differenceWith(cmp, a3, []); //=> [{a: 2}, {a: 3}]\r\n```\r\n\r\nOr maybe `list123`, `list34` and `list223`:\r\n```\r\n *      const cmp = (x, y) => x.a === y.a;\r\n *      const list123 = [{a: 1}, {a: 2}, {a: 3}];\r\n *      const list34 = [{a: 3}, {a: 4}];\r\n *      R.differenceWith(cmp, list123, list34); //=> [{a: 1}, {a: 2}]\r\n *\r\n *      const list223 = [{a: 2}, {a: 2}, {a: 3}];\r\n *      R.differenceWith(cmp, list223, list34); //=> [{a: 2}]\r\n *      R.differenceWith(cmp, list223, []); //=> [{a: 2}, {a: 3}]\r\n```\r\n\r\nAnd here's a tiny bit more bikeshedding, since these new examples may still not make it completely clear that the predicate is used to dedup the output:\r\n```\r\n *      const cmp = (x, y) => x.a === y.a;\r\n *      const list123 = [{a: 1}, {a: 2}, {a: 3}];\r\n *      const list34 = [{a: 3}, {a: 4}];\r\n *      R.differenceWith(cmp, list123, list34); //=> [{a: 1}, {a: 2}]\r\n *\r\n *      const list223 = [{a: 2, b: 1}, {a: 2, b: 2}, {a: 3, b: 1}];\r\n *      R.differenceWith(cmp, list223, list34); //=> [{a: 2, b: 1}]\r\n *      R.differenceWith(cmp, list223, []); //=> [{a: 2, b: 1}, {a: 3, b: 1}]\r\n```\r\n\r\nDunno, might be too much to digest in the docs, but the last one illustrates what's really going on best, I think.",
      "@kurtmilam: Sorry, I hadn't remembered that we had `l1`/`l2` anywhere in the docs.\r\n\r\nI really like your last examples.  I think those show it off better than anything else we've tried.\r\n\r\nYou are probably right that this behavior was intended.  When I sit down to think of what I'd want, I can't come up with anything better.  I really don't remember the history of this function, but I think there's no reason to change it unless someone can do better."
    ],
    "commit_messages": [
      "chore(differenceWith): updated code example for difference with to better illuminate the behaviour of the function through the documentation (#2893)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a728dfb6b84f24256a8",
    "number": 2888,
    "body": "",
    "head_branch": "Standardize-propOr-and-pathOr-functionality-to-match-documentation",
    "is_a_fork": true,
    "comments": [
      "I think what we have documented is what we probably want to support, even if that breaks backward compatibility: `[prop|path]Or` should return whatever value is there at the property -- even if it's a nil value -- so long as there is such a named property, and the default value otherwise.\r\n\r\nThat this is different from `defaultTo` doesn't bother me at all; that one is explicitly about handling nil values.",
      "It's been awhile but I believe that this has fixed all of the stated issues. If not let me know.",
      "Yes, it does.  Sorry this got dropped.  Thanks for the contribution!  :herb:",
      "@Tworley96 @CrossEye  I've reverted this merge because it breaks our test suite. Can we get an update so we can add this to the codebase?",
      "I've updated the code so that the test suite passes in #2995. The code that was reverted will undo some of the optimizations in #2962. Personally, I think some of these changes might not be the best and there might be some more discussion to be had about how these functions handle null vs undefined.",
      "> I've reverted this merge because it breaks our test suite.\r\n\r\nWeird, how did I miss that!?"
    ],
    "commit_messages": [
      "Replace defaultTo with undefined check in pathOr (#2888)\n\n* Replace defaultTo with undefined check in pathOr\r\n\r\n* Add errors to handle different undefined cases"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a738dfb6b84f24256a9",
    "number": 2885,
    "body": "Added support for TypedArrays for R.empty which also allowed TypedArrays to work for R.isEmpty.\r\n\r\n#2799",
    "head_branch": "typedarray-empty-isEmpty",
    "is_a_fork": true,
    "comments": [
      "Thank you very much @canytra!"
    ],
    "commit_messages": [
      "Add support for typed arrays for empty and isEmpty (#2885)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a748dfb6b84f24256aa",
    "number": 2884,
    "body": "Hi, this is in regards to issue #2881 , I have raised the PR as suggested. please have a look. \r\nI have tried to follow the contribution, however do suggest if some changes are required. \r\n\r\n * @sig a -> [a] -> [[a]]\r\n * @sig a -> [a] -> Boolean -> [[a]]\r\n\r\nR.splitWhenever(2, [1, 2, 3 ,2, 4, 5, 2, 6, 7]); //=> [[1],[3],[4,5],[6,7]]\r\nR.splitWhenever(2, [1, 2, 3 ,2, 4, 5, 2, 6, 7],true); //=> [[1],[2,3],[2,4,5],[2,6,7]]\r\n\r\nSupports whether to include or exclude the delimiter. \r\n \r\n\r\n@CrossEye ",
    "head_branch": "splitwhenever",
    "is_a_fork": true,
    "comments": [
      "https://ramdajs.com/docs/#splitWhen\r\n\r\nis more general",
      "@buzzdecafe:\r\n\r\n`splitWhen`  is more general in one sense, taking a predicate rather than a value.  But it breaks the list only on the first match.  The idea is to break multiple times.  I think we need a combination of the above with `splitWhen`.",
      "Sure, we can remove the inclusive option, It won't be of much use if I think about it. \r\nThat will resolve two questions here, the one with optional parameter and also the position of delimiter. \r\n\r\nSo Now, if I understand it correctly, we need to implement predicate instead of value, right? if that so I will update the PR.",
      "> So Now, if I understand it correctly, we need to implement predicate instead of value, right? if that so I will update the PR.\r\n\r\nYes, that would be much more in keeping with Ramda's design.\r\n\r\n(I may have more to discuss after you do so.  I really haven't looked at your implementation yet, only the tests.)",
      "Requested changes has been done. it now supports predicates instead of values.",
      " **Predicate examples:** \r\n```javascript\r\neq(R.splitWhenever(R.equals(2), [1, 2, 3, 2, 4, 5, 2, 6, 7]), [[1], [3], [4,5], [6,7]]);\r\neq(R.splitWhenever((e) => e % 2 === 0 ? true : false, [1, 2, 3, 2, 4, 5, 2, 6, 7]),[[1], [3], [5], [7]]);\r\n```\r\n",
      "Fixed the if statements and the spaces",
      "I'm good with this.  I personally keep reinventing this function, so I see a need.\r\n\r\nWhat do others think, @ramda/core ?",
      "Done with the requested changes. \r\n\r\nAlso for the new tests.\r\n\r\n- In case of empty array, returns an empty array \r\n```javascript\r\n eq(R.splitWhenever(R.equals(3), []), []);\r\n```\r\n- When first or last element matches the predicate, returns one slice of all the other elements\r\n```javascript\r\n eq(R.splitWhenever(R.equals(1), [1, 2, 3]), [[2, 3]]);\r\n```\r\n- When no element matches the predicate, returns one slice of the original array (doesn't return the original array to be consistent with the design)\r\n```javascript\r\n eq(R.splitWhenever(R.equals(4), [1, 2, 3]), [[1, 2, 3]]);\r\n```",
      "Thank you very much @mudit56 !",
      "@CrossEye @Bradcomp - Thanks Guys, Glad to be able to contribute. "
    ],
    "commit_messages": [
      "Splitwhenever fixes#2881 (#2884)\n\nadding splitWhenever, a variant of `split` that uses a predicate on the items to punctuate a list\r\n\r\n* added initial func\r\n\r\n* function created and tested\r\n\r\n* lint fixes\r\n\r\n* predicate support\r\n\r\n* fixes\r\n\r\n* replaced truthy with ifs\r\n\r\n* cleanup and testing fixes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a758dfb6b84f24256ab",
    "number": 2882,
    "body": "```js\r\nvar len = refFrom.length;\r\nvar idx = 0;\r\nwhile (idx < len) {\r\n  if (value === refFrom[idx]) {\r\n    return refTo[idx];\r\n  }\r\n  idx += 1;\r\n}\r\nrefFrom[idx + 1] = value;\r\nrefTo[idx + 1] = copiedValue;\r\n```\r\n\r\nidx is already equal to refFrom.length.\r\n\r\n```js\r\nrefFrom[refFrom.length + 1] = value;\r\nrefTo[refFrom.length + 1] = copiedValue;\r\n```\r\nObviously, is wrong\r\n",
    "head_branch": "_clone",
    "is_a_fork": true,
    "comments": [
      "> Obviously, is wrong\r\n\r\nHi @nishino-tsukasa, thanks for the PR!\r\n\r\nCan you help me understand what is wrong about it. Is there a test that can expose what the bug is? This PR doesn't seem to change any of the existing tests, and it isn't based on a bug report, so I am struggling to understand what this fixes.",
      "> > Obviously, is wrong\r\n> \r\n> Hi @nishino-tsukasa, thanks for the PR!\r\n> \r\n> Can you help me understand what is wrong about it. Is there a test that can expose what the bug is? This PR doesn't seem to change any of the existing tests, and it isn't based on a bug report, so I am struggling to understand what this fixes.\r\n\r\n@Bradcomp \r\nFrom a functional point of view, it's not a bug, because test cases can pass. I think this is a \"semantic\" bug. These two arrays should not be sparse arrays.\r\n\r\neg.\r\n```js\r\n// test case: clones deep object\r\nit('clones deep object', function() {\r\n  var obj = {a: {b: {c: 'ramda'}}};\r\n  var clone = R.clone(obj);\r\n  obj.a.b.c = null;\r\n  eq(clone, {a: {b: {c: 'ramda'}}});\r\n});\r\n// print refFrom\r\n[\r\n  empty item,\r\n  { a: { b: {c: 'ramda'} } },\r\n  empty item,\r\n  { b: { c: 'ramda' } },\r\n  empty item,\r\n  { c: 'ramda' } \r\n]\r\n```\r\nIt's confusing.\r\n",
      "Nice catch.  Thank you!"
    ],
    "commit_messages": [
      "fix(_clone): refFrom and refTo assignment wrong (#2882)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a768dfb6b84f24256ac",
    "number": 2878,
    "body": "Ruby-like range, which includes the last element of range.\r\n\r\nhttps://ruby-doc.org/core-2.6.1/Range.html",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a778dfb6b84f24256ad",
    "number": 2871,
    "body": "Makes more pedagogical sense that the examples have the same order as the supplied functions.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Agreed.  this is definitely a better order.  Thanks!"
    ],
    "commit_messages": [
      "Change order of examples (#2871)\n\nMakes more pedagogical sense that the examples have the same order as the supplied functions."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a788dfb6b84f24256ae",
    "number": 2863,
    "body": "This PR is a follow up to https://github.com/ramda/ramda/pull/2675, on the [suggestion](https://github.com/ramda/ramda/pull/2675#issuecomment-501063184) by @CrossEye, attempting to implement the [concept](https://github.com/ramda/ramda/pull/2675/files#r249646227) described by @scott-christopher.\r\n\r\n@GingerPlusPlus may be interested in this too!\r\n\r\nI've deliberately left out handling `[object AsyncGeneratorFunction]`s ([MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of)), as strictly speaking it's still in the draft for [ECMAScript 2020](https://tc39.es/ecma262/#sec-for-in-and-for-of-statements), and Ramda's test framework couldn't parse the syntax anyway and I didn't want to change too much.\r\n\r\nI've left in the handling of `[object AsyncGeneratorFunction]` in https://github.com/ramda/ramda/pull/2675 because we can handle it in a future-compatible way (because it's pretty likely to stay as '[object AsyncGeneratorFunction]', as supported in many browsers + node). If this does turn out to be an issue though, I can remove it from that PR.\r\n\r\nI'm not 100% happy with the descriptions/tests - the descriptions could probably do with being a bit clearer and I thought it was worth checking the arity/ability to curry is preserved. Would appreciate some comments on this.\r\n\r\n---\r\n\r\nThis PR naturally raises the question of mapping over Promises or Generators directly?\r\nWe already have `andThen` for map/flatMapping over Promises, so you can get away with just doing:\r\n`map(andThen(x => x + 1), async x => x * 2)(42) // Promise(85)`\r\n\r\nA Generator (object) can only be iterated over once:\r\n```\r\nconst foo = function*(){ yield 1; yield 2; yield 3 }\r\nconst generatorFoo = foo()\r\ngeneratorFoo.next()\r\n// {value: 1, done: false}\r\nfor (val of generatorFoo){ console.log(val) }\r\n// 2\r\n// 3\r\nfor (val of generatorFoo){ console.log(val) }\r\n// (nothing logged!)\r\ngeneratorFoo.next()\r\n{value: undefined, done: true}\r\n```\r\nGenerator objects are naturally stateful so to my knowledge they can't be copied, so presumably a `R.map` that works with Generator objects (as opposed to Generator Functions) should create a new generator that internally invokes the original (potentially already used) generator.\r\n(this is admittedly possible to do yourself with `mapGenerator` manually e.g. `mapGenerator(x => x + 1, function*() { yield* someOtherGeneratorObject })` and it carries all the same ambiguities of a side effect)\r\n\r\nUnlike `mapAsync`, which at least implies some relationship to AsyncFunctions, not Promises, Generators are their own object that GeneratorFunctions create. \r\nIf this ability to map over Generator objects was added to `map`, I wonder if `mapGenerator` would be a misleading name for anyone unaware of the dichotomy. On the other hand, `mapGeneratorFunctionAsGeneratorFunctor` is not very good either.\r\n\r\n---\r\n\r\nI experimented with having `mapAsync` return an async function, and `mapGenerator` return a generator function, but aside from being difficult to get right and likely complicating the currying/arity-related internal functions, it also is inconsistent with the way Ramda handles (auto)currying.\r\n\r\ne.g.\r\n```\r\nconst foo = mapAsync(x => x + 1, (a, b, c) => a + b + c)(10) // AsyncFunction\r\nconst bar = foo(20) // Promise of an AsyncFunction?\r\n```\r\nIf `foo` is now an AsyncFunction, then we can't continue to invoke it with\r\nthe extra arguments like (20, 30) as we'll get a Promise of a (Async)Function, not a Function.\r\n```\r\nconst foo = mapAsync(x => x + 1, (a, b, c) => a + b + c)(10) // Function\r\nconst bar = foo(20) // AsyncFunction\r\nconst baz = bar() // Promise of an AsyncFunction?\r\n```\r\nIf `foo` is now a Function, we CAN continue to apply it into `bar`, which is now an AsyncFunction, then this breaks in the same way as the previous example - `bar` should always return a Promise, but if we apply it with no arguments (or with `(_)`), then Ramda's autocurrying rules require it to return the same function as before, but AsyncFunctions always return Promises.\r\n\r\nSo as far as I can see it doesn't really work to mapAsync/Generator async/generator functions into other async/generator functions, because Ramda's rules require autocurried functions to be able to always return a value or the function again.\r\n\r\nThe alternative would be to not use any autocurrying at all, but that would mean `mapAsync` and `mapGenerator` would now have different behaviour to `map` in the kind of function they return. Maybe this is desirable, I'm not sure. It would look something like this:\r\n```\r\nvar mapAsync = _curry2(function mapAsync(fn, asyncFunction) {\r\n  return async function() {\r\n    return fn.call(this, await asyncFunction.apply(this, arguments));\r\n  };\r\n});\r\n```\r\n\r\nAs mentioned in https://github.com/ramda/ramda/pull/2675#discussion_r249797293\r\n> probably only for v1.0+\r\n\r\nI don't expect this PR to be merged in the short term as it would mean requiring runtime support for AsyncFunctions and GeneratorFunctions- this PR is hopefully a way to unblock/provide clarity for https://github.com/ramda/ramda/pull/2675 !\r\n\r\nWhat do you think?",
    "head_branch": "feature/special-case-mapping-functors",
    "is_a_fork": true,
    "comments": [
      "Postponing until after 1.0.  There are some really good ideas here, and in #2675"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a798dfb6b84f24256af",
    "number": 2862,
    "body": "Updates the clone description to match the way the function behaves (preserving structural isomorphism with the source object). (fixes #2850)",
    "head_branch": "clone-doc-change",
    "is_a_fork": true,
    "comments": [
      "@DanielRX: Thank you very much!"
    ],
    "commit_messages": [
      "clone: Update description (#2862)\n\n* Update Clone Description\r\n\r\n* Fix Clone column width\r\nAdded note about references"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a7a8dfb6b84f24256b0",
    "number": 2856,
    "body": "I found this implementation to be a bit faster.",
    "head_branch": "curryNfn",
    "is_a_fork": true,
    "comments": [
      "I'm perfectly fine with changing this function if it improves performance, but if we're doing so, do you have some benchmarks we can see?  Or could you create one to demonstrate?\r\n\r\nNote that this is [failing linting][li] for a few reasons:\r\n\r\n```\r\n/home/travis/build/ramda/ramda/source/internal/_curryN.js\r\n  22:5   error  Combine this with the previous 'var' statement with uninitialized variables \\\r\n                                                                                  one-var\r\n  25:38  error  Unary operator '++' used                                          no-plusplus\r\n  26:7   error  Expected { after 'if' condition                                   curly\r\n  26:40  error  Unary operator '++' used                                          no-plusplus\r\n  28:34  error  Unary operator '++' used                                          no-plusplus\r\n  29:7   error  Expected { after 'if' condition                                   curly\r\n  29:41  error  Unary operator '++' used                                          no-plusplus\r\n  37:12  error  Unary operator '++' used                                          no-plusplus\r\n  40:23  error  Unary operator '++' used                                          no-plusplus\r\n  45:16  error  Unary operator '++' used                                          no-plusplus\r\n  45:35  error  Unary operator '++' used                                          no-plusplus\r\n```\r\nBut there is one more stylistic change that I would request.  House style uses `while` loops, not `for` loops.  One of the founders of Ramda has made it a personal goal to never write another explicit `for` loop, and it has made it into our codebase.  It would better to keep this consistency.\r\n\r\n\r\n  [li]: https://travis-ci.org/ramda/ramda/jobs/552330172",
      "@CrossEye I didn't know the origin of that convention! That founder's goal is close to my heart as well.",
      "@Bradcomp: I agree with @buzzdecafe about it too, although I'm perhaps less adamant about it.  I think I was the one who wrote the original pass where we used `while` loops, but that had to do as much with ancient lore about the relative performance of `while` and `for` as with this distaste for `for`.  But I like not seeing any ugly C-style `for` loops in our code-base.\r\n\r\nThat's a more minor objection, but it's real.  The syntax of the `for(init; test; step) {body}` is pretty horrible.  Just watching the order control flow moves between `init`, `test`, `step`, and `body` helps explain why many find computer programming arcane.  Even using the same semicolon used otherwise as a statement terminator as an internal separator is odd.  I have much less problem with `for-of` statements.\r\n\r\nBut of course the main objection is that unless it's for side effects, pretty well every `for` loop I see can be more clearly and explicitly expressed as a `filter`, `find`, `map`, `some`, `every`, or `reduce`.   The objection is simply one of code clarity.  And if it's for side-effects, `forEach` has cleaner syntax.",
      "Yes for loops apart from having that eccentric structure are really hard to read, they are kind of the essence of imperative code I guess.\r\n\r\nI apologize for not having linted the code with the settings of the project, and and I appreciate your patience about that.\r\n\r\nI have been doing some tests and I noticed that my implementation is not as fast as it seemed according to the first tests. That is because although been faster in V8, in SpiderMonkey it is a bit slower.\r\n\r\nAt https://jsperf.com/curry-fn-comparison/27 you can see the test. I also, added an option that detects if there is a placeholder to handle, or if you can just concatenate the arguments. Interestingly, this option is not always faster than the one that deals indiscriminately with each call.\r\n\r\nPersonally I think that optimizations should be framed in the most common use cases.\r\n\r\nIn my first test the numbers doubled the performance of the function which made me think that it was worth to make the pull request. ",
      "@Jorge-Gonzalez:\r\n\r\nI want to thank you for your effort on this.  It's always worth investigating whether we can improve performance of core functions.  But looking at the results of that test, I don't think this is a clear winner, and as it adds to the code-base, I don't see any real reason to proceed.\r\n\r\n@ramda/ramda-core: Do others agree?\r\n\r\nI won't close this right now.  If you feel strongly about it, feel free to continue arguing for it.",
      "With pleasure, thanks to you for the time and effort dedicated to this excellent library.\r\nI Agree with you, and do not see results that support this change."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a7b8dfb6b84f24256b1",
    "number": 2855,
    "body": "I saw the [introduction of new changes in `applySpec`](https://github.com/ramda/ramda/commit/f3023ea9fc16b2665be890e73d80746cdf2f4112) and was happy to find out that one of the two things that always bugged me about `applySpec` was fixed: support for spec functions in arrays (thanks @bensbigolbeard!). This PR is for the other one I wish made the cut: support for literal values.\r\n\r\nThe current behaviour is kinda odd and unexpected:\r\n\r\n```js\r\n> applySpec({ foo: 'bar', bar: {}, baz: 42, meh: [42] })(2)\r\n{ foo: {}, bar: {}, baz: {}, meh: { '0': {} } }\r\n```\r\n\r\nYes, I'm aware of the whole \"crap-in-crap-out\" philosophy - but this is just silly, IMHO. Forcing `always` wrappers everywhere seems unnecessary.\r\n\r\nAfter changes in this PR, the above would become:\r\n\r\n```js\r\n> applySpec({ foo: 'bar', bar: {}, baz: 42, meh: [42] })(2)\r\n{ foo: 'bar', bar: {}, baz: 42, meh: [ 42 ] }\r\n```",
    "head_branch": "feat/apply-spec-literals",
    "is_a_fork": true,
    "comments": [
      "One of the important tenets of functional programming is that functions are first class - you can treat them the same way you treat every other value. Much of Ramda is based on this concept, utilizing functions as parameters and return values all the time, passing them around, etc.\r\n\r\nI worry about any change that would treat a special type of data differently 'under the hood'. What if a  user wants to add a method to an object using `applySpec`? They would have to know that if you want a _function_ to be added they have to wrap it in `always`, but values get passed through. \r\n\r\nIf we were to make this change, we would also need to alter the type signature to match the new functionality, but I suspect that type signature would be complicated.\r\n\r\nI am 👎  on this unless those issues can be resolved.",
      "@Bradcomp Hi 👋. Thanks for replying. I understand the general point you're raising, but I'm not sure I fall on the same side.\r\n\r\n> One of the important tenets of functional programming is that functions are first class - you can treat them the same way you treat every other value.\r\n\r\nI see where you're coming from, but how would this PR change the fact that functions are treated as first class citizens in `ramda`, exactly? I sense only a superfluos connection here.\r\n\r\n> I worry about any change that would treat a special type of data differently 'under the hood'. \r\n\r\nUnderstandable. But `applySpec` [already does that](https://github.com/ramda/ramda/blob/03817fe578048652b9532ae71fd1f1705da4de60/source/applySpec.js#L50) by explicitly checking the `typeof` of its input - so, in this case, the counter argument feel stronger to me.\r\n\r\n> What if a user wants to add a method to an object using applySpec?\r\n\r\nThis is a valid objection. It honestly didn't occur to me and have never felt the need to do that - but I do see the discrepancy in the API. The only reply I can think of is that, even with the current approach, adding a function to an object doesn't necessarily require using `always`. This PR adds support for \"literal\" values. Since the API for `applySpec` applies _functions_, the only way to set a function as a spec is to have a function returning function: `() => () => ...` (a.k.a.: `always(() => ...)` - which is the exact same thing you would do if this PR gets merged. Nothing would change.\r\n",
      "> I see where you're coming from, but how would this PR change the fact that functions are treated as first class citizens in ramda, exactly? I sense only a superfluos connection here.\r\n\r\nCurrently, `applySpec` has a type signature that restricts the leaves of the spec to be functions. After this change, the leaves could be anything. Once that happens, we will be special casing the leaves that are functions and not treating them the same as the other value leaves.\r\n\r\n> But applySpec already does that by explicitly checking the typeof of its input - so, in this case, the counter argument feel stronger to me.\r\n\r\nSee above. The input is a tree. it has branches and leaves that are treated differently. This is a separate concern from treating the values of leaves differently based on their type. \r\n\r\nThe code assumes that there will only be functions as leaves, which is what leads to the odd behavior of your original example. While it might be better to throw if it gets something that's a leaf but not a function, I think GIGO is a reasonable alternative.\r\n\r\n> Nothing would change.\r\n\r\nA change in the type signature requires rethinking what the reasonable behavior is. Currently (and this would need to be changed too), the first line of the description is this:\r\n\r\n> Given a spec object recursively mapping properties to functions\r\n\r\nThis is no longer true, as we are now accepting a spec recursively mapping properties to anything. but then we aren't treating that anything consistently, instead giving it a special meaning depending on what it is.\r\n\r\nThe question in modifying the behavior of a function (as opposed to fixing a bug) shouldn't be what changes there are from previous, but what is the ideal behavior, and how can we get that. In this case, I think the tradeoffs aren't really worth it.",
      "I agree with all your premises - just not on the conclusion. My opinion, although obviously personal and small, is that you're leaning a bit too much towards academic formality vs. practicality.\r\n\r\n> Currently, applySpec has a type signature that restricts the leaves of the spec to be functions. After this change, the leaves could be anything. Once that happens, we will be special casing the leaves that are functions and not treating them the same as the other value leaves.\r\n\r\nYes. I don't see an issue there. APIs evolve. Again, `applySpec` already treats non-function arguments as if they were something special. And still, that doesn't mean functions are less than first class citizens because of that.\r\n\r\n> The question in modifying the behavior of a function (as opposed to fixing a bug) shouldn't be what changes there are from previous, but what is the ideal behavior, and how can we get that. \r\n\r\nI honestly fail to see how inexplicably transforming a boolean value to `{}` can be \"ideal behavior\".\r\n\r\n```js\r\napplySpec({ b: true })(42); // { b: {} } 🤔 \r\n```\r\n\r\nYes, it's bad input. Yes, it's not complying with the function signature. Is it **ideal**? I'd argue it's far from it. Is the solution proposed in this PR _ideal_? I don't know, probably not! - I'm opening the debate. But, in my view, it's a lot closer to being reasonable.\r\n\r\nI'd rather have a function signature rethought and modified accordingly than trying to debug an API endpoint that started returning things like `{ '0': {} }` for no obvious reason after a sneaky bug in some release.\r\n\r\nMy main concern here is that in order to pursue a purist form, we are relegating use cases and situations that actually _happen_ on a daily basis and have a real impact. \r\n\r\nLet's think for a moment on that hypothetical scenario I started describing above: how many software engineers/developers, when confronted with that kind of bug, do you think are going to come forward and say something like: _\"Oh, I got this! This must be the output of `applySpec`, which uses a special, internal `mapValues` function that calls `keys` to iterate on keys as if all non-function inputs where objects! That's where the `'0': {}` comes from!\"_. \r\n\r\nThe fact that you _need_ to know the internal workings of `ramda` to even be able to diagnose many of the problems is, to me, one of the major pain points of this library (which I ❤️ and use every single day 🙏). I believe we should focus on ironing those and aiding users, rather than punishing when a signature wasn't appropriately followed.",
      "> The fact that you *need* to know the internal workings of `ramda` to even be able to diagnose many of the problems is, to me, one of the major pain points of this library (which I :heart: and use every single day :pray:). \r\n\r\nFixing issues that cause such pain points is fine.  Specific fixes need to be balanced against the the Ramda GIGO philosophy, though.  It's always been a no-hand-holding library, and we tend to err toward the side of \"let the chips fall where they may\" if the user supplies bad input.  But in many cases, when there is a clear way to return something useful in such cases, we will ignore the above and do some sort of type-checking or other ugly code branching.\r\n\r\n\r\n> I believe we should focus on ironing those and aiding users, rather than punishing when a signature wasn't appropriately followed.\r\n\r\nIt's not a matter of punishing users, only of focusing chiefly on those who use Ramda's functions as designed and documented.\r\n\r\n----------\r\n\r\nBut much more central to Ramda's philosophy is to keep things *simple*.  A function should do one thing and one thing only.\r\n\r\nOften a Ramda function will operate on multiple types, but only if there is a common abstraction that they share.  Thus `map` works on arrays, objects, functions, and other types exactly because they all share the common type of `Functor`.\r\n\r\n`applySpec` is pretty clear now.  It accepts an object representing a tree whose leaf nodes are functions, using this structure to create an object of the same structure by applying those functions to our input values.  The suggested changes add complexity, not only to the implementation, but more importantly, to the API.\r\n\r\nThe concerns from @Bradcomp are real; there would be legitimate fall-out from such a change.  But to me the fundamental issue is one of corrupting a simple function by adding unnecessary complexity.\r\n\r\nMy feeling is that this sort of usage of `applySpec` is just barely ok:\r\n\r\n```js\r\nconst minimum = apply (Math.min), maximum = apply (Math.max)\r\n\r\nconst transform = applySpec ({\r\n  title: always ('Calc Results'),\r\n  type: always ('Statistical'),\r\n  values: identity,\r\n  statistics: {length, sum, mean, maximum, minimum},\r\n})\r\n\r\ntransform ([8, 6, 7, 5, 3, 0, 9]) //=> \r\n// {\r\n//     title: \"Calc Results\",\r\n//     type: \"Statistical\",\r\n//     values: [8, 6, 7, 5, 3, 0, 9],\r\n//     statistics: {\r\n//         length: 7,\r\n//         maximum: 9,\r\n//         mean: 5.428571428571429,\r\n//         minimum: 0,\r\n//         sum: 38\r\n//     }\r\n// }\r\n```\r\n\r\nI think this would be cleaner and clearer:\r\n\r\n```js\r\nconst transform = pipe (\r\n  applySpec ({\r\n    values: identity,\r\n    statistics: {length, sum, mean, maximum, minimum},\r\n  }),\r\n  mergeRight ({title: 'Calc Results', type: 'Statistical'})\r\n)\r\n```\r\n\r\nBut that this would be merely confusing:\r\n\r\n```js\r\nconst transform = alternateApplySpec ({\r\n  title: 'Calc Results',\r\n  type: 'Statistical',\r\n  values: identity,\r\n  statistics: {length, sum, mean, maximum, minimum},\r\n})\r\n```\r\n\r\nReading that code, I have no idea what sort of value `mean` or `identity` is.\r\n\r\nSo I'm afraid I'm definitely :-1: on this.",
      "It's been a while, I am gonna close this. Feel free to reopen if you feel it warrants more discussion."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a7c8dfb6b84f24256b2",
    "number": 2852,
    "body": "closes #2851",
    "head_branch": "R.on",
    "is_a_fork": true,
    "comments": [
      "Passing, but still needs work.\r\nDocs could be improved, and I don't think my usage of `curry` matches the rest of the codebase.",
      "I think this should be better? Despite Travis failing for it's own weird reasons.. tests pass on my end anyway.\r\n\r\n* Edit: Oops I see the extra space now",
      ":herb: This looks great to me.  @Bradcomp?"
    ],
    "commit_messages": [
      "Merge pull request #2852 from DanielFGray/R.on\n\nadd P combinator"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a7d8dfb6b84f24256b3",
    "number": 2849,
    "body": "Finding converge a little challenging to use I've become fond of a different pattern...\r\n\r\n```\r\npipe(\r\n  diverge([add(1), subtract(2)]),\r\n  apply(multiply)\r\n);\r\n```\r\nrather than\r\n```\r\nconverge(multiply, [add, subtract])(1, 2);\r\n```\r\nThis is a suggestion to enshrine that breakdown as an available function.\r\n\r\nI also wonder if `fork` or `branch` might be better names, but diverge appears to describe the relation to converge more clearly.\r\n\r\nPlease forgive my first attempt at a PR for this project.",
    "head_branch": "diverge",
    "is_a_fork": true,
    "comments": [
      "Does [`just`][ju] already do what you want?\r\n\r\nAlso, when #2795 is published, `applySpec` may again do what you would like here.\r\n\r\n  [ju]: https://ramdajs.com/docs/#juxt",
      "I think `juxt` is in fact sufficient, this was more a matter of name/examples and my failure to understand what it can do.\r\n\r\nThank you for the correction.",
      "> Please forgive my first attempt at a PR for this project.\r\n\r\nI forgot to say this yesterday: that's nothing to forgive, but something to celebrate!  Thank you!"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a7e8dfb6b84f24256b4",
    "number": 2848,
    "body": "this code is unnecessary",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      ":herb:\r\n\r\nAnyone else, @ramda/core?",
      ":bowtie: "
    ],
    "commit_messages": [
      "Merge pull request #2848 from lilywang711/master\n\nRemove _equals.js redundant code"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a7f8dfb6b84f24256b5",
    "number": 2845,
    "body": "",
    "head_branch": "chore/update-ramda",
    "is_a_fork": true,
    "comments": [
      "I am :bowtie:  on this, but I'd like at least one other person to weigh in on using `latest`. ",
      "Comes from discussion here: https://github.com/ramda/ramda/pull/2832",
      ">  I'm pretty sure that we can just replace it with @-latest. \r\n\r\nSounds good enough for me! However, I just did a quick repo search and I am not sure that dependency is being used at all. It's possible we could remove it entirely.\r\n\r\n@CrossEye Do you know where we are using it?",
      "I can't find it, nor do I remember where we were using it before.  Perhaps it had to do with the docs before they were separated.  I think it can be safely removed.",
      "@kibertoad Can you try removing the dependency completely and see if that effects anything?",
      "@Bradcomp Done! Looks like it's still green.",
      "Thank you @kibertoad!",
      "@CrossEye np! Btw, any timeline on next Ramda release?"
    ],
    "commit_messages": [
      "Remove Ramda devDependency (#2845)\n\n* Update Ramda devDependency\r\n\r\n* Remove ramda from devDependencies\r\n\r\n* Update package-lock"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a7f8dfb6b84f24256b6",
    "number": 2841,
    "body": "Closes #2839",
    "head_branch": "has-path-empty-path",
    "is_a_fork": true,
    "comments": [
      "Because this PR breaks existing behavior, I think we should discuss it a little bit.\r\n\r\nWhat _should_ happen in the following case: `R.hasPath([], null)`?\r\n\r\nMy intuitions conflict here, and lead me to wonder whether we should be explicitly testing and accounting for a non-object second parameter (I know this has been litigated before, but the situation has changed with this PR.)\r\n\r\nI am a lot more comfortable saying the empty path should always return true than I am saying a non object testee should always return false. \r\n\r\nThis is because an empty array is still a valid input (Array Idx), and thus we should have a principled return value in that case. In the case of passing a non-object testee, that's a type error per our aspirational signature. It seems like a reasonable case for GIGO, or else throwing. While returning false might make sense as a default, it obviously creates a contradiction with a more reasonable assumption. \r\n\r\nOn the other hand, I realize that the new behavior is probably preferred, and that removing the tests would be breaking a contract with the user, which is in essence another breaking change, so we are in a little bit of a pickle. I think we thus need to consider the best behavior regardless of the history and move forward with that. My vote is for returning true for the empty path and removing the checks for a non-object, thus most likely leading to an error being thrown. ",
      "@Bradcomp You're absolutely right. I added checks for situations with an empty path and non-object values.",
      "@Bradcomp: I'm really loathe to throw errors if we don't have to.  I like the idea of this change, but hadn't considered the `hasPath([], null)` scenario.\r\n\r\nIn mathematics there are sometimes such contradictions between two different expectations that end up having to be decided in a somewhat arbitrary way.  Raising zero to any power always returns zero.  And raising any value to the zeroth power always returns one.  So what then is zero raised to the zeroth power?  It's answered by making the definitions match the more useful of these expectations.  (Zero to the zeroth power is one)  I think we can do the same here.  If that breaks backward compatibility, we won't release it in a point release.  I would rather get it right than maintain backward compat.\r\n\r\nMy feeling is that `hasPath([], val) //=> true` is more fundamental than `hasPath(nodes, null) //=> false`, but I am certainly open to discussion on it. ",
      "@Bradcomp @CrossEye:\r\n\r\nI think we should consider all functions which working with the path and they should work consistently. After a quick review, I found one more interesting behavior: \r\n\r\n```\r\nconst R = require('ramda');\r\n\r\nconsole.log(R.assocPath([], 42, null)); // 42\r\nconsole.log(R.assocPath([], 42, { key: 13 })); // 42\r\n```",
      "@zouxuoz:  Are you suggesting that this behavior is not correct?  It makes sense to me.  If the path has three nodes, `assocPath` sets the value three layers deep (`{foo: {bar: {baz: 42}}}` )  If it has two nodes, `assocPath` sets it two layers deep (`{foo: {bar: 42}}`.).  If it has one node , `assocPath` sets the value one layer deep (`{foo: 42}`.).  So if the path has no nodes at all, I would expect it so set the value no layers deep, i.e. at the top (`42`.)  Is there some other behavior that makes more sense to you? ",
      "> My feeling is that hasPath([], val) //=> true is more fundamental than hasPath(nodes, null) //=> false, but I am certainly open to discussion on it.\r\n\r\nI agree 100% with this assessment.\r\n\r\n> I'm really loathe to throw errors if we don't have to.\r\n\r\nI get that, and I know this used to throw before somebody opened a PR to change it.  One subtlety which may be irrelevant is that I am not actually suggesting we throw, I am saying GIGO.\r\n\r\nIf a person passes a non-object in to `hasPath` I think they are either intentionally relying on ambiguous behavior, or else they have made a coding mistake. Do we want to swallow that?\r\n\r\nThat being said, I am not gonna die on this hill. I _can_ see how people would argue for returning false and that seems OK to me too. If that's the way we want to go I am :bowtie:  :+1: on this one.",
      "I still want to think about this for a day or two.",
      "@CrossEye have you given this one any more thought?",
      "@Bradcomp: No, I dropped the ball.  Will try to look this evening.",
      "I haven't forgotten, just gotten busy again.  I will get to it this weekend, though.",
      "A breaking change, so punting until after `v1.0`."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a808dfb6b84f24256b7",
    "number": 2837,
    "body": "As we talk about in the issue， I think we shoud remove the redundant code。\r\n[Questions about Internal functions _isArrayLike](https://github.com/ramda/ramda/issues/2836)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      ":herb:\r\n\r\nDiscussion in #2836.\r\n\r\nAnyone else, @ramda/core?  Or can anyone think of a case that was covered with this line but not without it?\r\n",
      ":bowtie: This looks good. Thanks @itboos ❗️ "
    ],
    "commit_messages": [
      "remove _isArrayLike.js redundant code (#2837)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a818dfb6b84f24256b8",
    "number": 2835,
    "body": "Removing the function :floppy_disk: deprecated in v0.26.0:\r\n\r\n- #2365 :floppy_disk: `merge` - in favor of new `mergeRight`\r\n- #2452 :floppy_disk: `contains` - renaming to `includes`\r\n- #2630 :floppy_disk: `composeP` - in favor of `composeWith(then)`\r\n- #2630 :floppy_disk: `pipeP` - in favor of `pipeWith(then)`\r\n- #2630 :floppy_disk: `composeK` - in favor of `composeWith(chain)`\r\n- #2630 :floppy_disk: `pipeK` - in favor of `pipeWith(chain)`",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Could we add a short note in the documentation about what the deprecated functions are replaced with?",
      "Just getting back to Ramda after some time away...\r\n\r\n@anka-213:  Do you have something in mind, something beyond what we put in our update guides?",
      "@CrossEye if you could just add each of the above \"in favor of\" and \"renamed to\" to the docs next to each function it'd be sufficient. Bonus points for a link to the discussion that lead to the decision to deprecate.\r\n\r\ne.g. the current docs for [pipeP](https://ramdajs.com/docs/#pipeP) just say that it's depracated and don't suggest an equivalent replacement."
    ],
    "commit_messages": [
      "removing files deprecated in previous release (#2835)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a828dfb6b84f24256b9",
    "number": 2832,
    "body": "",
    "head_branch": "chore/update-dependencies-2",
    "is_a_fork": true,
    "comments": [
      "Not to derail, but one of our dev dependencies is an old version of Ramda... That seems troublesome. I think we should look into that.",
      "@Bradcomp:\r\n\r\nYes we should.  I'm pretty sure that we can just replace it with @-latest.  We use Ramda in the build.  If our build can't use a recent version of our library, either the library or the build should get some serious attention.\r\n\r\nBut as you said, that doesn't need to derail this PR.  It looks good to me.  If you agree, then I think we can go ahead and merge it.",
      ":bowtie: "
    ],
    "commit_messages": [
      "Merge pull request #2832 from kibertoad/chore/update-dependencies-2\n\nUpdate dependencies"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a838dfb6b84f24256ba",
    "number": 2829,
    "body": "",
    "head_branch": "chore/update-babel",
    "is_a_fork": true,
    "comments": [
      "This looks good to me.  Anyone else?  @ramda/core ",
      ":bowtie: ",
      "Thanks, @kibertoad!"
    ],
    "commit_messages": [
      "Update Babel to v7 (#2829)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a848dfb6b84f24256bb",
    "number": 2828,
    "body": "",
    "head_branch": "chore/node-12-in-ci",
    "is_a_fork": true,
    "comments": [
      ":herb:  LGTM.\r\n\r\nAnyone else?  @ramda/core",
      ":bowtie:",
      "Thank you @kibertoad!"
    ],
    "commit_messages": [
      "Execute tests on Node 12 (#2828)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a858dfb6b84f24256bc",
    "number": 2827,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "I'm afraid that I'm :-1: on this.  I know some recent `path` changes have not yet been released.  I'm not sure if they would fix the error that led you to this PR, but I'll see what I can do about getting them out soon.\r\n\r\nBut what I really don't like about this is that it might suppress an error in the user's `pred` function.  We really don't want to swallow an error that we didn't create."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a868dfb6b84f24256bd",
    "number": 2825,
    "body": "Used to throw an Error for non-object children tests\r\nAdded test for object checking if val is an object when testing a path\r\nAdded tests testing false is returned for non-objects children tests\r\nRelated to GitHub issue #2771\r\nFixed based on the discussion in ticket",
    "head_branch": "fix-has-path-to-handle-non-object-path",
    "is_a_fork": true,
    "comments": [
      "Hi @LorneCurrie! Thanks for the PR! Are you sure this wasn't fixed [here](https://github.com/ramda/ramda/commit/4cd4e4bb85ab9d7a532fbb45e5e70009cdbc2098)? Does the test you wrote fail on master before your changes are applied?\r\n\r\nIf this still needs to happen, can you please fix the linting errors? You should be able to run the tests and linting locally before you push up.\r\n\r\nThanks again!\r\n",
      "Yea, I just looked at it again, and the fix you mentioned worked.  I have removed my change to the hasPath function but left my test cases in as I feel they are valid cases that would happen ",
      "I agree.  These look good."
    ],
    "commit_messages": [
      "hasPath return false for non-object checks (#2825)\n\n* hasPath return false for non-object checks\r\n\r\nUsed to throw an Error for non-object children tests\r\nAdded test for object checking if val is an object when testing a path\r\nAdded tests testing false is returned for non-objects children tests\r\nRelated to github issue #2771\r\n\r\n* Linting the file\r\n\r\n* Removed change as added to tests"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a878dfb6b84f24256be",
    "number": 2821,
    "body": "#2819 \r\n\r\nA suggestion: maybe the documentation should make it clear that only the target object's methods can be invoked, and not any function.\r\n\r\nReplace this: @param {String} method Name of the method to call.\r\n\r\nWith this: @param {String} method Name of any of the target object's methods to call. ",
    "head_branch": "update-invoker-documentation",
    "is_a_fork": true,
    "comments": [
      "Thank you!\r\n\r\n:herb:"
    ],
    "commit_messages": [
      "updated invoker.js documentation (#2821)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a888dfb6b84f24256bf",
    "number": 2818,
    "body": "I feel like writing complement(isNil) a lot to do null/undefned checking.\r\n\r\nI haven't found an appropriate alternative, so I think it might be a good addition to the library to add\r\na function named \r\n\r\nisDefined: Object -> Bool \r\n\r\nwhich does the null/undefined checking.\r\n\r\nWhat do you think of this addition?\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "This sounds like a good idea.  We probably should have done this long ago.  I'm not certain of the name.  `isNotNil` seems more likely to me.\r\n",
      "> This sounds like a good idea. We probably should have done this long ago. I'm not certain of the name. `isNotNil` seems more likely to me.\r\n\r\n```js\r\nif notNil(person) { /* ... */ };\r\nif isNotNil(person) { /* ... */ };\r\nif defined(person) { /* ... */ };\r\nif isDefined(person) { /* ... */ };\r\nif exists(person) { /* ... */ };\r\n```\r\n\r\nI don't mind being a bit more expressive instead of using `not`.",
      "In function names, I like to prevent \"not\", because in my opinion it is an unnecessary mental overhead and in the past often created unnecessary confusions for me.\r\nThat's why I consider not in names an antipattern and try to name things in a \"positive\" way.\r\n\r\nAlso I think isNotNil  exposes an implementation detail. It could also be specified e.g. that \"\" is \"!isDefined\" as well (which then probably would be \"isTurthy\" or smth).\r\n\r\nI'd really like to choose a \"postive\" name instead of doing double negation using words. (not isNot is yes)\r\nI will be adding the test and incorporating your changes soon when I'm back home again.\r\n\r\nGreetings\r\n\r\n\r\n",
      "* Testcase Added: Please review if the specification matches your thoughts\r\n* Removed dist/ commit from history\r\n* Removed dependecy on comeplemt\r\n\r\n",
      "I don't share your objections to using 'not' in the name; `nil` to me means simply having one of the two nil types in JS, `null` or `undefined`.  But that was just a quick suggestion; `isNotNil` is not a name I care about.  But `isDefined` does not resonate for me.  I didn't guess what it did from the name.  When I saw the title, I thought that maybe you were simply looking for [`R.has`][ha].\r\n\r\nSo does anyone have a another candidate for a name for this function?  @ramda/core?\r\n\r\n\r\n\r\n  [ha]: https://ramdajs.com/docs/#has",
      "I changed the function name to isNotNil. \r\nIf everything is fine for you l'd squash the WIP commits.\r\n",
      "Why not use ramda adjunct?\r\nhttps://char0n.github.io/ramda-adjunct/2.18.0/RA.html#.isNotNil\r\n\r\nI know that it adds a lot o functions.. but it has most of the functions that i find myself repeating across projects using ramda\r\n\r\nBtw: I thought that ramda was meant to have only \"base\" functional tools, that's why i think that we still don't have the \"isNot*\" functions. If I'm wrong, would be nice to have `isNotEmpty` in the lib too.",
      "And also there is a https://ramda-extension.firebaseapp.com/docs/#isNotNil",
      "I'm not sure about this one, I did use to use something similar when first starting out with Ramda but then found it to be unnecessary:\r\n\r\n```js\r\nconst guardFn = when(isDefined);\r\n// same as:\r\nconst guardFn = unless(isNil);\r\n```\r\n\r\nAnd:\r\n\r\n```js\r\nconst byDefined = filter(isDefined);\r\n// same as:\r\nconst byDefined = reject(isNil);\r\n```\r\n\r\nI'd say 99% of the time I would want to do a null check, I'd use one of these two patterns.",
      "@LarsKoelpin @CrossEye This pull request could not be merged because of a merge conflict with `source/index.js` and linter issues as it was predating the decision to add `.js` extensions to our import statements. That's the only thing I changed in this pull request, everything else is exactly as it was when you approved it @CrossEye.\r\n\r\nIf we still want this, this should now be ready to go."
    ],
    "commit_messages": [
      "Add isNotNil (#2818)\n\n* Add isNotNil\r\n\r\nIn javascript projects it is often necessary to to someething if\r\nsomething is not nil. This commits adds a function \"isNotNil\" and its corresponding test\r\n which does the null and undefined checking.\r\n\r\n* chore: isNotNil: add missing extensions in import statements\r\n\r\nCo-authored-by: customcommander <hello@spinjs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a898dfb6b84f24256c0",
    "number": 2817,
    "body": "It fixes #2816 ",
    "head_branch": "fix-2816",
    "is_a_fork": true,
    "comments": [
      ":herb:\r\n\r\nI'm happy with this (as much as I am with anything extending our transducers.)\r\n\r\nAnyone else?  @ramda/core?",
      "Cool, @CrossEye ! \r\n\r\nAfter self-reviewing my PR I'm going to remove `['scan']` in dispatchable because I think it's out of the scope of this PR.",
      "As with many things around this time, this PR was inadvertently dropped.  This makes sense, and I wonder, @xgbuils, if you want to resolve the conflicts so that we can merge?  ",
      "No problem. My pleasure. I have to review documentation about transducers again (I had to review my PR accurately to understand what I did 2 years ago). I think that there are other functions that work with lists that can be adapted to work with transducers and I could review them in the future.",
      "Hmm, just coming back to this to see there are conflicts.  Going to bed now, but I hope to look at these soon."
    ],
    "commit_messages": [
      "enabling R.scan to be used as transducer. (#2817)\n\n* Add R.scan transducer tests\r\n\r\n* R.scan transducer enabler: R.into should always call the @@transducer/init method\r\n\r\n* enable R.scan as transducer\r\n\r\n* pull upstream & resolve conflicts\r\n\r\n* add docs about R.scan can act as a transducer"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a8a8dfb6b84f24256c1",
    "number": 2813,
    "body": "In my opinion, there is a problem with the existing `omit` method:\r\n1. The `names` parameter is expected to be an array but there is no type checking inside.\r\n2. When only one attribute needs to be omitted, the `names` parameter must be written in the array or an unexpected usage will occur.\r\n\r\nSo make it more safety, I made some change below:\r\n1. Add a new internal function `_ArrayWrapper` that use to check whether an object is an array and wrapped, it returns an array.\r\n2. First, preprocess the `names` parameter of the `omit` method as: `names =  _ArrayWrapper(names)` to compatible with the original usage, and can pass a single `String` property directly\r\n3. Add some new unit test to make sure the method behavior is supposed to.",
    "head_branch": "feature/omit",
    "is_a_fork": true,
    "comments": [
      "Thank you for the contribution, but I'm afraid that I'm :-1: on this.\r\n\r\n> 1. The names parameter is expected to be an array but there is no type checking inside.\r\n\r\nRamda has always preferred to be a no hand-holding library.  We do little type-checking for the user, assuming she knows what she's doing.  \r\n\r\n> 2. When only one attribute needs to be omitted, the names parameter must be written in the array or an unexpected usage will occur.\r\n\r\nRamda strives for simplicity, especially in its public API.  If you haven't seen the classic Rich Hickey talk, *[Simple Made Easy][rh]*, I would highly recommend it.  He describes *complex* as intertwined, and *simple* as the opposite.  Right now, `omit` has the signature `omit :: [String] -> Object -> Object`.  What you're proposing is that it also work as `omit :: String -> Object -> Object`.  One function doing two things means that those concerns are intertwined, and thus the function would be more complex than we prefer.\r\n\r\nThat, for instance, `map` works on Arrays, Objects, and Functions as well as delegating to the `map` methods on types that have one does not contradict this goal of simplicity.  `map` works on the more abstract type of [`Functor`][fu] -- Ramda merely supplies implementations for Arrays, Objects, and Functions.  Note that it doesn't work on Strings because Strings are not Functors.  (An accident of implementation means that it does in fact return a slightly reasonable value, but it doesn't return a String, as `map` should; this again speaks to our no-hand-holding philosophy: *garbage in, garbage out*.)  But there is no obvious type that encompasses both Strings and Arrays of Strings.\r\n\r\n\r\n  [fu]: https://github.com/fantasyland/fantasy-land#functor\r\n  [rh]: http://www.infoq.com/presentations/Simple-Made-Easy",
      "> When only one attribute needs to be omitted, the names parameter must be written in the array or an unexpected usage will occur.\r\n\r\nThere is another function in the library, `R.dissoc`, for this purpose. While it might seem odd to have two functions that are so similar, there are a couple reasons for it.\r\n\r\nFirst is the simplicity @CrossEye mentioned above.\r\n\r\nSecondly it allows for some nice symmetry between sets of functions that allows for writing more semantically correct code, and helps discoverability.\r\n\r\n`dissoc` has the opposite function `assoc`, for adding and removing an entry from an object.\r\n`omit` has the opposite function `pick`, for whitelisting and blacklisting object properties."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a8b8dfb6b84f24256c2",
    "number": 2810,
    "body": "These changes attempt to fix the jsdoc type annotations for the internal `_Set` class and its associated methods.\r\n\r\n<img width=\"373\" alt=\"Screen Shot 2019-04-25 at 12 25 29 AM\" src=\"https://user-images.githubusercontent.com/29342769/56709712-a81a7080-66f0-11e9-9962-a0c686eac336.png\">\r\n",
    "head_branch": "jsdoc-fixes-internal-set",
    "is_a_fork": true,
    "comments": [
      "Very sorry @pdeona.  A number issues from this period were entirely ignored.  We're back and trying to get caught up.  I'm curious about this one.  I don't even know why that object has JSDoc tags, as it's not part of the public API.  Do they get exposed through some JSDoc magic I don't know about?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a8b8dfb6b84f24256c3",
    "number": 2806,
    "body": "Update the tryCatch examples to include an item which shows the way to catch the error message. ",
    "head_branch": "fix-try-catch-doc",
    "is_a_fork": true,
    "comments": [
      "Thank you!"
    ],
    "commit_messages": [
      "add an example which covers error and value (#2806)\n\n* add an example which covers error and value\r\n\r\n* fix singlequote"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a8c8dfb6b84f24256c4",
    "number": 2805,
    "body": "Hi there,\r\n\r\nI noticed a typo in the 'and' function's description while reading the docs, so here's a quick fix!\r\n\r\nCheers.",
    "head_branch": "fix-and-description",
    "is_a_fork": true,
    "comments": [
      "Actually, that's not a typo.  The type of `and(a, b)` is the type of `a` if `a` is truth-y OR the type of `b` if it is not.\r\n\r\nBut thank you very much for bringing this up."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a8d8dfb6b84f24256c5",
    "number": 2802,
    "body": "",
    "head_branch": "browsers-ci",
    "is_a_fork": true,
    "comments": [
      "This looks good to me.  Other thoughts, @ramda/core?",
      "> Add browser tests and lint job to CI\r\n\r\nIt looks as though CI already does linting.\r\n",
      "Yes, but has no separate tasks; if lint fails, tests don't run, and you need to read the output to distinguish failed lint from failed test."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a8e8dfb6b84f24256c6",
    "number": 2797,
    "body": "Since `traverse = sequence of (map f traversable)`, and `sequence :: (x -> f x) -> t (f x) -> f (t x)`, `f :: a -> f b` and `traversable :: t a`, the type of `(map f traversable)` is `t (f b)`.\r\n\r\nTherefore the type parameter `x` in `sequence` is `b`, and the type of the `of` parameter needs to be `b -> f b`.",
    "head_branch": "fix-traverse-documentation-typesignature",
    "is_a_fork": true,
    "comments": [
      "Somehow, a whole lot of issues/prs were dropped around this time.  I don't know if anyone had looked at this one.  Thanks, @googol!",
      "I had already forgot about this :D I'm glad it's in now, thanks!"
    ],
    "commit_messages": [
      "Fix traverse type signature in documentation comment (#2797)\n\nSince `traverse = sequence of (map f traversable)`, and\r\n`sequence :: (x -> f x) -> t (f x) -> f (t x)`,\r\n`f :: a -> f b` and `traversable :: t a`, the type of `(map f traversable)`\r\nis `t (f b)`. Therefore the type parameter `x` in `sequence` is `b`,\r\nand the type of the `of` parameter needs to be `b -> f b`."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a8f8dfb6b84f24256c7",
    "number": 2795,
    "body": "Addresses #2784\r\n\r\nPrior to 0.26.x, this was a valid structure, where an array could be passed at an arbitrary depth and could contain other values/functions to be traversed:\r\n```javascript\r\n// Ex. 1\r\nR.applySpec([ R.sum ])(1,2) // [ 3 ]\r\n\r\n// Ex. 2\r\nR.applySpec({ nested: [{ sum: R.sum }])(1,2) // { nested: [{ sum: 3 }]}\r\n```\r\nAfter the PR to address #2681, the output changed to:\r\n```javascript\r\n// Ex. 1\r\n{ \"0\": [ 3 ]}\r\n\r\n// Ex. 2\r\n{ nested: { \"0\": { sum: 3 }}}\r\n```\r\n\r\nThese changes add a condition to `applySpec`'s private function, `mapValues`, to just add a check if the current `obj` is an array before branching to `.map()` or `.keys().reduce()` operations based on the result.",
    "head_branch": "applySpecNestedArry",
    "is_a_fork": true,
    "comments": [
      ":herb:\r\n\r\nThank you.  This looks good to me.  Anyone else, @ramda/core?"
    ],
    "commit_messages": [
      "fix(applySpec): reintroduce support for arrays of nested specs or functions (#2795)\n\nAddresses #2784\r\n\r\nPrior to 0.26.x, this was a valid structure, where an array could be passed at an arbitrary depth and could contain other values/functions to be traversed:\r\n```javascript\r\n// Ex. 1\r\nR.applySpec([ R.sum ])(1,2) // [ 3 ]\r\n\r\n// Ex. 2\r\nR.applySpec({ nested: [{ sum: R.sum }])(1,2) // { nested: [{ sum: 3 }]}\r\n```\r\nAfter the PR to address #2681, the output changed to:\r\n```javascript\r\n// Ex. 1\r\n{ \"0\": [ 3 ]}\r\n\r\n// Ex. 2\r\n{ nested: { \"0\": { sum: 3 }}}\r\n```\r\n\r\nThese changes add a condition to `applySpec`'s private function, `mapValues`, to just add a check if the current `obj` is an array before branching to `.map()` or `.keys().reduce()` operations based on the result."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a908dfb6b84f24256c8",
    "number": 2793,
    "body": "Hello,\r\n\r\nReally not a big deal but some `@since` are missing for some functions introduced in `v0.26.0`, which makes it hard to know when they were introduced in the docs. This should fix it :)\r\n\r\nSee the screenshot below:\r\n![image](https://user-images.githubusercontent.com/7644970/53689159-97ccc180-3d4f-11e9-8e2c-a0879e62a3cb.png)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Hmm, that should have been added by the build script.  I'll have to investigate why it wasn't, but for the moment, this LGTM.  :herb:\r\n\r\nAnyone else?",
      "@CrossEye Yes, I suspected it wasn't added manually but was clueless about where to look :/ In the meantime, I think it will avoid simple mistakes like this one: in my team, we have a lot of projects using ramda (😍), some of them use v0.25 & others v0.26.1. I was writing some new code, and needed to merge things, I remembered something about `merge` being deprecated, so I went to the docs and saw `mergeRight/Left`. Because I didn't see the \"Added in vXXX\" mention, I did not think twice about it, assumed they were here since the beginning, & used them. Turns out I was working on one the projects using Ramda v0.25 😆 ",
      ":bowtie:  LGTM!"
    ],
    "commit_messages": [
      "docs: Add @since where it is missing (#2793)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a918dfb6b84f24256c9",
    "number": 2792,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Thank you!"
    ],
    "commit_messages": [
      "Fix typo in split docs (#2792)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a928dfb6b84f24256ca",
    "number": 2791,
    "body": "Let `R.path` handle everything about how `pathSatisfies` deals with the `path` argument by removing the check for empty arrays. This implements #2788.",
    "head_branch": "feature/path-satisfies-empty-path",
    "is_a_fork": true,
    "comments": [
      "Thanks for reviewing @CrossEye and @Bradcomp!\r\n\r\n@CrossEye I made updates based on your feedback- this is ready for review again.",
      ":herb:\r\n\r\nLooks good to me.  Anyone else?  @ramda/core?\r\n",
      "Thank you @rjhilgefort!",
      "Sure thing! Thanks for reviewing and merging. This closes #2788 "
    ],
    "commit_messages": [
      "Update `pathSatisfies` to handles empty `path` arguments (#2791)\n\n* Update `pathSatisfies` to handles empty `path` arguments\r\n\r\n* Add negative test for `pathSatisfies` with empty `path`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a938dfb6b84f24256cb",
    "number": 2787,
    "body": "Related https://github.com/ramda/ramda/issues/773#issuecomment-462097072\r\n\r\nI noticed `dissocPath` has code:\r\n\r\nhttps://github.com/ramda/ramda/blob/efd899ba81cc5290330f5ca0833746a7ecbe165c/source/dissocPath.js#L38-L39\r\n\r\nSo\r\n\r\n```js\r\n;(a => R.dissocPath([3], a) === a)([0, 1])\r\n;(a => R.dissocPath(['b'], a) === a)({a: 1})\r\n// and\r\n;(a => R.dissoc(3, a) !== a)([0, 1])\r\n;(a => R.dissoc('b', a) !== a)({a: 1})\r\n```\r\n\r\nShould their behavior be consistent in this scenario?\r\n\r\nAnother question, the previous version `dissocPath` use `R.update` to update array input:\r\n\r\nhttps://github.com/ramda/ramda/blob/efd899ba81cc5290330f5ca0833746a7ecbe165c/source/dissocPath.js#L38-L44\r\n\r\nIn my version, I use 'R.assoc` uniformly:\r\n\r\nhttps://github.com/ramda/ramda/blob/528df9777200a31c754117cdfd2e64871985f4d3/source/dissocPath.js#L33-L37\r\n\r\nThe behavior of `R.update` is different from `R.assoc` in some scenarios:\r\n\r\n```js\r\nR.update(2, 'a', []) // => []\r\nR.assoc(2, 'a', []) // => [undefined, undefined, 'a']\r\n```\r\n\r\nShould I keep current version or rollback?",
    "head_branch": "assoc-dissoc-support-array-index",
    "is_a_fork": true,
    "comments": [
      "> Should their behavior be consistent in this scenario?\r\n\r\nI think they should compare correctly with `equals`.  I'm not worried about reference equality.\r\n\r\n> In my version, I use 'R.assoc` uniformly:\r\n\r\nI think that's fine.  `dissocPath` was written when `assoc` did not handle arrays and their integer keys, only plain objects with their string keys.  Now that it does both, this is a useful simplification.\r\n\r\n> The behavior of `R.update` is different from `R.assoc` in some scenarios:\r\n\r\nAgain, I'm not worried.  Perhaps now that `assoc` does handle arrays, it's time to get rid of `update`.  But the fact that they don't act the same is not an issue.\r\n ",
      "@CrossEye Thanks for your reply!\r\n\r\n> As we've done elsewhere with `foo` and `fooPath`, I would like to have `foo` be a simple call to `fooPath`.\r\n\r\nDo you mean that I can add a file like `internal/_assoc.js`, then `assocPath.js` depend on `_assoc.js`, and `assoc.js` implemented as `assocPath([prop], val, obj)`?\r\n\r\n> I think they should compare correctly with `equals`. I'm not worried about reference equality.\r\n\r\nAs far as my selfishness is concerned, I hope they can be strict equal, because deep comparison requires more resources",
      "> Do you mean that I can add a file like `internal/_assoc.js`, then `assocPath.js` depend on `_assoc.js`, and `assoc.js` implemented as `assocPath([prop], val, obj)`?\r\n\r\nYes; I had been thinking of a more disruptive rewrite.  That would be a simpler solution.  And if we do something like this also with `dissoc[Path]`, it should address the question of those behavior differences, too.\r\n\r\n",
      "Hi @CrossEye, I have completed the changes\r\n\r\n> I think they should compare correctly with `equals`. I'm not worried about reference equality.\r\n\r\nI added the code to check if the attribute exists 😁\r\n\r\nhttps://github.com/ramda/ramda/blob/f424de89dbd1afe031b123cc0b71042ac8a64cb1/source/internal/_dissoc.js#L13-L18",
      "Hi @CrossEye, how do you feel about this PR now?",
      "@bolasblack:\r\n\r\nSorry I missed the earlier ping.  I'm wondering if it's my fuzzy brain or if this is not yet addressed: https://github.com/ramda/ramda/pull/2787#discussion_r257751043.\r\n\r\nOther than that, it looks good to me.",
      "Hi @CrossEye, I think maybe I have resolved the problem: https://github.com/ramda/ramda/pull/2787/files#diff-6787d2bc79f3b7d8d865c601133bd002R10\r\n\r\nAnd do you noticed this [change (_shallowCloneObject)](https://github.com/ramda/ramda/pull/2787/files#diff-229ca62287d81f3b117695acff8e6d5fR62)? Is it acceptable?",
      "Hi @CrossEye, I really need your reply 🤣",
      "Sorry, I have taken an unexpected break from Ramda.  I should be back to it soon.  I'll look at this in a few days.",
      "@CrossEye 👌 ",
      "Hi @CrossEye, are you interested in seeing this PR again?",
      "This PR needs some love 😏",
      "@bolasblack: yes, that happens far too often around here.  I'll try to look soon.",
      "Hi CrossEye, sorry for my last comment, I'm not trying to blame you, I am very grateful and respect for your work on ramda, it's really useful and helped me a lot, I just want to make sure this PR is still remembered",
      "@bolasblack: Not at all.  I seem by default to be in charge of this project, but I never intended to sign up for that responsibility and it gets whatever time I can spare from work, family, relaxation, home improvement, the horse farm I co-own, and numerous other programming projects that occupy my hours.  So things often fall by the wayside.  It's good when someone reminds me of them!  In fact, if things are to happen around here, it might be imperative.",
      "Thank you for persevering @bolasblack!",
      "> @bolasblack: Not at all. I seem by default to be in charge of this project, but I never intended to sign up for that responsibility and it gets whatever time I can spare from work, family, relaxation, home improvement, the horse farm I co-own, and numerous other programming projects that occupy my hours. So things often fall by the wayside. It's good when someone reminds me of them! In fact, if things are to happen around here, it might be imperative.\r\n\r\n@CrossEye Haha, I like your attitude towards the project (although I feel a little anxious when I am the creator of PR 🤪)",
      "> :bowtie:\r\n> This looks like an improvement, thanks!\r\n\r\n@Bradcomp Thank you very much also 😆"
    ],
    "commit_messages": [
      "assoc/dissoc support operate array (#2787)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a948dfb6b84f24256cc",
    "number": 2786,
    "body": "Added a link to all Ramda functions as individual functions.\r\n\r\nI'm both a maintainer of bit (teambit/bit) and a member of its open source community.\r\n\r\nI'm one of many people in this community who's been looking for Ramda functions. So, I've shared Ramda as individual functions, which can now be discovered, played-with and installed via npm/yarn.\r\n\r\nCurrently, these functions will continue to update automatically on every new tag in this repo. If you prefer, I can hand over ownership and help implement the updates (guysaq@gmail.com).\r\n\r\nThanks",
    "head_branch": "patch-4",
    "is_a_fork": true,
    "comments": [
      "I got in touch with the `Bit` team over Gitter a few months ago, and have been meaning to look into it more thoroughly.  In the meantime, this looks all right to me, although we might want to emphasize that this is not the only way to get individual functions -- you can require or  import them directly from the repository, and tree shaking should work reasonably well.\r\n\r\nWhat do others in @ramda/core think?",
      "Hey, we just recently discovered that tree-shaking doesn't work at all if we basically reexport ramda from another package. I am not sure if it's an issue of `create-react-app` configuration, but we started looking for other solutions.\r\n\r\nThe Bit seems like an interesting way to go, but if I am not mistaken, TypeScript will be an issue here since types are for `ramda` as a whole module. It would be necessary for each individual function in Bit to export its own types.\r\n\r\nTypeScript is really important for us because it's easy to make a typo in some string and having nothing to scream at you right away is a big loss.\r\n\r\n---\r\n\r\nFor comparison, the material-ui indeed does have types for each individual component, but it's way easier for them because they have each component [typed individually in source code](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/Tab).\r\n\r\nhttps://bit.dev/mui-org/material-ui/tab/~console",
      "@FredyC: The Ramda team has not been involved in the Typescript typings.  Perhaps one day one of us will be curious enough to investigate, but for now we leave that to those who know what they are doing.\r\n\r\nIf you understand those typings, we're always looking for volunteers!",
      "@CrossEye Well, this isn't really about understanding, it's a simple fact that these Bit exports cannot work with it because it's not part of the package. I am not aware of \"easy\" way how to tackle this, unfortunately, but I will try to ask in Bit community.",
      "@FredyC: I know little enough about Typescript (even though I sometimes have to use it) that I don't know what it would mean for it to be \"part of the package\".  I know TS is quite popular, but I've never felt the need.",
      "As I have shown in the case of material-ui, there is an `index.d.ts` with each exported component. I believe the Ramda would have to do the same. I am not sure if there is some better way, I like to use TS, but never got into figuring how it works.\r\n\r\nTS is a great win with Ramda, because it can guard for you eg. `R.prop(\"missing\")` will cause a TS error if that prop actually do not exist on the object. It's a great way to prevent typos and you don't have to rely on thorough tests and/or manual testing."
    ],
    "commit_messages": [
      "Update README.md / Install specific functions (#2786)\n\nAdded a link to all Ramda functions as individual packages via Bit.\r\nEach function can now be played-with in a live playground and individually installed as a package with npm/yarn."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a958dfb6b84f24256cd",
    "number": 2782,
    "body": "> Addresses #1678 (now closed) partially and #2780.\r\n\r\n```sh\r\n❯ node repl\r\n\r\n> curry(function foo(x, y) { return x + y; });\r\n[Function: foo]\r\n> curry(function foo(x, y) { return x + y; })(1)\r\n[Function: foo]\r\n\r\n> curryN(2, function foo(x, y) { return x + y; })\r\n[Function: foo]\r\n> curryN(2, function foo(x, y) { return x + y; })(1)\r\n[Function: foo]\r\n\r\n> nAry(3, function foo(x, y) { return x + y; })\r\n[Function: foo]\r\n```\r\n",
    "head_branch": "feat/curry-retain-name",
    "is_a_fork": true,
    "comments": [
      "This PR conflicts with #2705,  #2611, #2605.",
      "@GingerPlusPlus I wasn't aware of those. And they look like excellent additions (specially the removal of the placeholder)! However, while they do overlap with this in some areas, it appears to me that backporting your changes here wouldn't be difficult at all. In fact, including #2605 here would be a good opportunity since it seems like the general stance on `Object.defineProperty` has changed.",
      "Worth considering, alongside #2605 and many others, post `v1.0`."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a968dfb6b84f24256ce",
    "number": 2776,
    "body": "I made so `assoc` starts not from `{}` as accumulator, but with `Object.create(obj.__proto__)`, when `obj` isn't `null` or `undefined`.\r\n\r\nThis makes `R.set`/`R.over` not lose the prototype of object being changed.\r\n\r\nFixes issue #2775 .\r\n\r\nI added tests for `assoc` and `set`/`over`.",
    "head_branch": "fix-over-and-set-losing-prototype",
    "is_a_fork": true,
    "comments": [
      "Thank you for your contribution.  You can see my response to the idea in #2775.\r\n\r\nBut note that if we do decide to do this, there is more that needs to be changed.  Obviously `dissoc` as well, but also possibly the array ones (`insert`, `update`, `adjust`, and `remove`) if we want to cover custom extensions to `Array.prototype`.  There are probably other places as well.  But I don't think we want to go this route at all, for reasons described in https://github.com/ramda/ramda/issues/2775#issuecomment-458190103."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a978dfb6b84f24256cf",
    "number": 2772,
    "body": "BREAKING CHANGE\r\n\r\nThe addition of R.then in Ramda 0.26 made the R object\r\na Promise-like object, and meant that Promise.resolve() will attempt\r\nto resolve it by calling the then() method. R is not a Promise, and\r\nto reassure JavaScript of this fact, R.then is renamed to R.andThen.\r\n\r\nFixes #2751 ",
    "head_branch": "andthen",
    "is_a_fork": true,
    "comments": [
      ":herb:\r\n\r\nI'm all for this.  I would like to be able to keep the minimal `Promise` support we recently added, and leave them alone thereafter.  This bug was just a distraction... and one more reason to hate Promises!",
      "I am :expressionless: on this one. I think it’s good to get it fixed right away though, and this is a good way to do that. Thanks @tmcw!",
      "Was this intended to be released in 0.26.1, or will it be available in a future release?\r\n\r\nIt looks like it was intended to be part of 0.26.1, but didn’t quite make it. There are two tags in the [releases](https://github.com/ramda/ramda/releases): [0.26.1](https://github.com/ramda/ramda/releases/tag/0.26.1) which includes this change, and [v0.26.1](https://github.com/ramda/ramda/releases/tag/v0.26.1) which does not, and it looks like it was the latter that was published to npm:\r\n\r\nhttps://unpkg.com/ramda@0.26.1/src/then.js",
      "Something went weird with publishing, and I tried to rectify it and just made a bigger mess.  0.26.1 was released without this.  The GitHub releases are a mess.  I will try to get another point release out this weekend with the few changes made since then.\r\n",
      "Thanks, @CrossEye!",
      "@CrossEye You're still not fixing it. Could you please update it? Thanks."
    ],
    "commit_messages": [
      "fix: rename then to andThen (#2772)\n\nBREAKING CHANGE\r\n\r\nThe addition of R.then in Ramda 0.26 made the R object\r\na Promise-like object, and meant that Promise.resolve() will attempt\r\nto resolve it by calling the then() method. R is not a Promise, and\r\nto reassure JavaScript of this fact, R.then is renamed to R.andThen."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a988dfb6b84f24256d0",
    "number": 2768,
    "body": "Just a quick fix for the link in the readme discussing setup for `babel-plugin-ramda` + webpack.",
    "head_branch": "fix-broken-link-in-readme",
    "is_a_fork": true,
    "comments": [
      "Thank you!"
    ],
    "commit_messages": [
      "Fix broken link in readme (#2768)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a998dfb6b84f24256d1",
    "number": 2767,
    "body": "`_reduce` no longer tries to dispatch transformers to `fantasy-land/reduce`, because `reduced` support is forbidden by [the spec](https://github.com/fantasyland/fantasy-land#reduce-method):\r\n\r\n   >  iii. `f` must return a value of the same type as `x`.\r\n   >  iv.  No parts of `f`'s return value should be checked.\r\n\r\n<hr />\r\n\r\nExtracted from #2762, discussing it over there could be messy.\r\n\r\nThis solution avoids unnecessary `_xwrap`. An [alternative solution](https://github.com/ramda/ramda/pull/2762/files#diff-5861836cf1fab2e7793d633617b63889R51) avoids nesting.",
    "head_branch": "fl-reduce",
    "is_a_fork": true,
    "comments": [
      ":herb:\r\n\r\nI can't see a reason not to do this, and it's certainly a simpler fix than the alternative.  Any other thoughts, @ramda/core ?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a9a8dfb6b84f24256d2",
    "number": 2765,
    "body": "This was breaking the repl with:\r\n`R.tryCatch(...)(...) is not a function`",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "remove erroneous quotes in tryCatch documentation (#2765)\n\nThis was breaking the repl with:\r\n`R.tryCatch(...)(...) is not a function`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a9b8dfb6b84f24256d3",
    "number": 2764,
    "body": "`includes` is only available since 0.26.0, need to set correct version in docs",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Thank you!"
    ],
    "commit_messages": [
      "fix `@since` in `includes` (#2764)\n\n`includes` is only available since 0.26.0, need to set correct version in docs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a9c8dfb6b84f24256d4",
    "number": 2763,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Can you explain *why* you want to do this?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a9c8dfb6b84f24256d5",
    "number": 2762,
    "body": "Changed `_reduce` to allow `reduced` to be returned only by transformers, not functions.\r\n\r\nThis is a breaking change, but it speeds up `reduce` by a factor of 3.9 to 7.2.\r\n\r\n<details>\r\n<summary>Benchmark</summary>\r\nBefore:\r\n<pre>\r\n┌────────────────────────┬────────────────────────┬────────────────────────┐\r\n│ reduce                 │ Hertz                  │ Margin of Error        │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ reduce(add, 0, nums)   │ 411,807                │ 2.37%                  │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ reduce(add, 0)(nums)   │ 400,479                │ 1.69%                  │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ reduceAdd(nums)        │ 508,636                │ 1.19%                  │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ native reduce          │ 4,752,316              │ 0.26%                  │\r\n└────────────────────────┴────────────────────────┴────────────────────────┘\r\n</pre>\r\nAfter:\r\n<pre>\r\n┌────────────────────────┬────────────────────────┬────────────────────────┐\r\n│ reduce                 │ Hertz                  │ Margin of Error        │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ reduce(add, 0, nums)   │ 2,911,028              │ 1.25%                  │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ reduce(add, 0)(nums)   │ 1,520,781              │ 0.55%                  │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ reduceAdd(nums)        │ 2,138,148              │ 0.16%                  │\r\n├────────────────────────┼────────────────────────┼────────────────────────┤\r\n│ native reduce          │ 4,843,689              │ 0.28%                  │\r\n└────────────────────────┴────────────────────────┴────────────────────────┘\r\n</pre>\r\n</details>\r\n\r\nAnalysis of possible `_reduced` optimizations: https://github.com/ramda/ramda/pull/2613#issuecomment-453164165.\r\n\r\n<hr />\r\n\r\nAlso, `_reduce` no longer tries to dispatch transformers to `fantasy-land/reduce`, because `reduced` support is forbidden by [the spec](https://github.com/fantasyland/fantasy-land#reduce-method):\r\n\r\n   >  iii. `f` must return a value of the same type as `x`.\r\n   >  iv.  No parts of `f`'s return value should be checked.\r\n",
    "head_branch": "reduced",
    "is_a_fork": true,
    "comments": [
      "\r\n> we have wrappers for handling dispatching, but `reduce` doesn't use them. This might be due to the necessity of handling stuff like `reduced`\r\n\r\nThat's not it. Unlike `_reduce`, dispatching is the first thing that wrappers try to do.\r\n\r\n> `reduced` is becoming less useful\r\n\r\nNo it isn't. You can get the old behavior by wrapping the function in a transformer.\r\n\r\nAgree with your last 2 paragraphs.\r\n\r\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a9d8dfb6b84f24256d6",
    "number": 2759,
    "body": "Closes #2758.",
    "head_branch": "prebench",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add prebench script (#2759)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a9e8dfb6b84f24256d7",
    "number": 2758,
    "body": "",
    "head_branch": "bench-source",
    "is_a_fork": true,
    "comments": [
      "Thanks for this @GingerPlusPlus. The changes look good and I really appreciate the PRs you've been opening to improve the codebase.\r\n\r\nIsn't it good to run the benches against the final build for accuracy? What benefit do we get from running it against the source?",
      "> What benefit do we get from running it against the source?\r\n\r\nMainly being unable to forget to build (happened at #2613), but also faster iteration time &mdash; I can change the source and immediately bench it.\r\n\r\nAn alternative would be to build in `prebench`.",
      ":+1: for `prebench`."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7a9f8dfb6b84f24256d8",
    "number": 2757,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Looks great.  Thank you very much!"
    ],
    "commit_messages": [
      "prod: reduceBy splits into mutation-free groups (#2757)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7aa08dfb6b84f24256d9",
    "number": 2756,
    "body": "Transducers are useful for transforming a sequence into another sequence.\r\n\r\nThese are not that. These are about reducing a sequence to a single value.\r\n\r\nThey break `anyFunction(anyArray) === into([], anyFunction, anyArray)`, which causes [confusion](https://github.com/ramda/ramda/pull/2689#issuecomment-435619988) and [special casing](https://github.com/ramda/ramda/pull/2585/commits/cda6f0b356a6150cf680447292a0e3ee94b7e057).\r\n\r\nWhat are they useful for, anyway?\r\n\r\nThe only use-case I can think about is using them with something like [Highland](https://highlandjs.org/#transduce), in which indexes don't make sense. It also defines its own [`find`](https://highlandjs.org/#find) that Ramda can dispatch to.",
    "head_branch": "no-x",
    "is_a_fork": true,
    "comments": [
      "This is another one that escaped initial detection.  At a quick glance, it looks like a good idea.  But we're trying to make no breaking changes, so I'm going to put it on hold until after `v1.0`."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7aa18dfb6b84f24256da",
    "number": 2752,
    "body": "Adds the function `omitArgs` which wraps a function of any arity into a (left) padded function with `n` parameters that are ignored before the original parameters.\r\n\r\nThe code is not very readable due to backwards compatibility and array length property but the following does the same in more idiomatic JS: \r\n\r\n```javascript\r\nconst omitArgs = (num, fn) => (...args) => fn.apply(null, args.slice(num))\r\n```\r\n\r\nI've previously found the function useful for example when writing callbacks for asynchronous functions that pass the callback some data it doesn't need. `omitArgs` enables omitting unnecessary parameters from the callback signature.\r\n\r\nI'd be happy to hear if there are any suggestions for a more intuitive name for the function.",
    "head_branch": "omitArgs",
    "is_a_fork": true,
    "comments": [
      "I'd be curious to see what others in @ramda/core think.\r\n\r\nWhile I can see the use of this function, I don't find it particularly compelling.  It's possible I'd like it better with a different name, but I don't have a suggestion.\r\n\r\n@juusaw: Do you have any argument to convince me that this is important to Ramda users?",
      "I believe the function complements `nAry` nicely and by having both, it is possible to wrap a function so that arguments in the beginning and end can be omitted. The rationale for including the function is somewhat the same as for `nAry`.\r\n\r\nFor a real world example of usage, `passport.js` authentication middleware's OAuth2 strategies require a verify callback that receives the user and session information. The function signature is `(accessToken, refreshToken, profile, cb) => void`. In many cases only the profile and cb are used. We can define a verify callback like `const verify = (profile, cb) => cb(null, profile)` and provide it to the middleware as `R.omitArgs(2, verify)`. This helps in keeping the verify function signature clean improves readability and reusability.\r\n\r\nAs for the naming ideas, some alternatives include skipArgs (suggested by a colleague), dropArgs and padArgs.\r\n",
      "I'm not part of ramda/core and don't have a compelling use case, but wanted to comment on the name. `omitArgs(2, verify)` feels like `nAry(0, verify)` to me. It feels like I'm ignoring the two params to verify, not adding two ignored params. I think `padArgs(2, verify)` makes the most sense there. \r\n\r\nI was trying to come up with a way to get `nAryLeft(4, verify)` to work because that makes sense to me and could be extended to `nAryLeft(1, verify)`, but then what would that mean? Pass `undefined` as the first param to `verify`?",
      "I don't think I'd personally use make use of this over standard ES6 functionality (e.g. `(_, _, ...args) => fn(...args)`), but if this were to be introduced I think a name such as `dropArgs` might provide some more insight into which arguments were being omitted, following the behaviour of `R.drop`.",
      "We're finally working to clean up old issues and push toward `v1.0`.  \r\n\r\n@juusaw: If you're interested in still pursuing this, could you rename to `dropArgs` and clean up the conflicts?  If not, feel free to close it."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7aa28dfb6b84f24256db",
    "number": 2750,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Isn't this equivalent to `curry(compose(then, ifElse))`?",
      "@GingerPlusPlus: \r\n> Isn't this equivalent to `curry(compose(then, ifElse))`?\r\n\r\nNo, I don't think so.  I don't think yours would quite work as is, but it looks like an attempt to use Promise-returning consequent and alternative functions.  The original was for a test function that returns a Promise for a boolean with scalar consequent and alternative ones.\r\n\r\n",
      "@sebyul2:\r\n\r\nThis is likely a non-starter for Ramda.  The team is mostly unimpressed with Promises, preferring more lawful types such as Futures or Tasks from repos such as Fluture and Folktale.\r\n\r\nOne of the reasons we were glad to introduce `then` and `otherwise` in #2565 was that this meant we no longer had to support any other Promise-related functions.  In #2630 we were able to deprecate `pipeP` and `composeP`; when those go, we'll be down to `then` and `otherwise`, and we can declare a win.\r\n\r\nI don't have a trivial replacement for you, but this isn't too bad:\r\n\r\n```js\r\nconst ifElseP = (f, g, h) => (a) => then(b => (b ? g : h)(a), f(a))\r\n```\r\n\r\n(possibly with a `curry` wrapped around it if you like, and possibly with `...args` replacing the `a`'s.)\r\n\r\n\r\n",
      "> yours [...] looks like an attempt to use Promise-returning consequent and alternative functions. The original was for a test function that returns a Promise for a boolean with scalar consequent and alternative ones.\r\n\r\nAren't they the same thing, due to auto-flattening, aka `then` being both `chain` and `map`?",
      "@GingerPlusPlus:\r\n\r\nPerhaps.  Maybe I misread what you were suggesting.  I believe that @sebyul2  was looking for this:\r\n\r\n```js\r\n// delay :: (a -> b) -> a -> Promise b\r\nconst delay = (fn) => (a) => new Promise((res => setTimeout(() => res(fn(a)), 1000)))\r\n\r\n// ifElseP :: (a -> Promise Bool) -> (b -> c) -> (b -> c) -> a -> Promise c\r\nconst ifElseP = (f, g, h) => (a) => then(b => (b ? g : h)(a), f(a))\r\n\r\nconst fn = ifElseP(\r\n  delay(a => a > 10),\r\n  Math.sqrt,\r\n  identity\r\n)\r\n\r\nfn(25).then(console.log) //~> Promise(5)\r\nfn(9).then(console.log)  //~> Promise(9)\r\n```\r\nAnd I thought you were suggesting something like this:\r\n\r\n```js\r\n// ifElseP :: (a -> Bool) -> (b -> Promise c) -> (b -> Promise c) -> a -> Promise c\r\nconst ifElseP = (f, g, h) => (a) => f(a) ? g(a) : h(a)\r\n\r\nconst fn = ifElseP(\r\n  a => a > 10,\r\n  delay(Math.sqrt),\r\n  delay(identity)\r\n)\r\n```\r\n\r\nBut perhaps you meant something like this:\r\n\r\n```js\r\n// ifElseP :: (a -> Promise Bool) -> (b -> Promise c)  -> (b -> Promise c) -> a -> Promise c\r\nconst ifElseP = (f, g, h) => (a) => then(b => b ? g(a) : h(a), f(a))\r\n\r\nconst fn = ifElseP(\r\n  delay(a => a > 10),\r\n  delay(Math.sqrt),\r\n  delay(identity)\r\n)\r\n```\r\n\r\nIn any case, none of these seems to match `curry(compose(then, ifElse))`.  Am I missing something?",
      "Thank you for your many comments.\r\n\r\n@CrossEye It worked exactly for me. I have studied. Thank you.",
      "Please close this PR then.\r\n\r\nIn general, @CrossEye, please close PRs that have been \"verbally rejected\" by a core member and have received no activity since, they are just cluttering the list of open PRs.\r\n\r\nIf you're not feeling like it, I volunteer &mdash; during the holidays I'll sift through all the PRs, close the ones that without a doubt should be closed, and attempt to properly label the rest. I'd need a (temporary) write access to the repo. I promise to not use it for anything else.\r\n\r\n<hr />\r\n\r\nBack to the topic of `curry(compose(then, ifElse))`, @CrossEye, your 2nd snippet is subset of `ifElse`.\r\nI assume this is the signature of `ifElseP2` you meant to write (`onTrue` and `onFalse` take the same type as the predicate):\r\n\r\n```\r\nifElseP2 :: (a -> Bool) -> (a -> Promise c) -> (a -> Promise c) -> a -> Promise c\r\n```\r\nIf we restrict the signature of `ifElse` to unary functions\r\n\r\n```\r\nifElse :: (a -> Bool) -> (a -> b) -> (a -> b) -> a -> b\r\n```\r\n\r\nSubstitute `b = Promise c`, and you get the signature of `ifElseP2`.\r\n\r\n<hr />\r\n\r\n3rd one... uh, I think you meant `b => b(a) ? g(a) : h(a)`, not `b => b ? g(a) : h(a)`.\r\n\r\n<hr />\r\n\r\n> In any case, none of these seems to match `curry(compose(then, ifElse))`. Am I missing something?\r\n\r\nMy point is that you can use `then` to lift any unary function to take and return a promise:\r\n\r\n```js\r\n// p, f :: a -> Promise b | b\r\n// foo :: a -> Promise b | b\r\nconst foo = ifElse(p, t, f);\r\n\r\n// then :: (a -> Promise b | b) -> Promise a -> Promise b\r\n\r\n// fooP :: Promise a -> Promise b\r\nconst fooP = then(foo)\r\n```\r\n\r\nAnd the `curry(compose` just... composes `then` with `ifElse`, duh.",
      "@GingerPlusPlus: Thank you.  I'm going through the issues and will close a great number of them soon, and open up a discussion about which of the others we want to include in 1.0, and how we want to proceed from there.  I may call for help in a few days if it's not going well.  But I should have some time, as I finish my current job tomorrow and don't start my new one until the new year.\r\n\r\n----------\r\n\r\nAs to the code under discussion, you are right about the signatures -- I stopped part-way through a transformation from a more specific case to something generic.  I really should have noticed.  And I also hadn't noticed that the second one was in fact just a version of `ifElse`.  :smile:\r\n\r\nAs to the third one, no, I'm pretty sure that what I had is right.  An equivalent with `Promise.prototype.then` rather than `R.then` would be\r\n\r\n```js\r\nconst ifElseP = (f, g, h) => (a) => f(a).then(b => b ? g(a) : h(a))\r\n```\r\n\r\nFor those following along at home:\r\n\r\n  - **[Version 1][v1]**:\r\n\r\n      ```js\r\n      // ifElseP :: (a -> Promise Bool) -> (a -> b) -> (a -> b) -> a -> Promise b\r\n      const ifElseP = (f, g, h) => (a) => then(b => (b ? g : h)(a), f(a))\r\n      ```\r\n  - **[Version 2][v2]**:\r\n\r\n      ```js\r\n      // ifElseP :: (a -> Bool) -> (a -> Promise b) -> (a -> Promise b) -> a -> Promise b\r\n      const ifElseP = (f, g, h) => (a) => f(a) ? g(a) : h(a)\r\n      ```\r\n\r\n  - **[Version 3][v3]**:\r\n\r\n      ```js\r\n      // ifElseP :: (a -> Promise Bool) -> (a -> Promise b)  -> (a -> Promise b) -> a -> Promise b\r\n      const ifElseP = (f, g, h) => (a) => then(b => b ? g(a) : h(a), f(a))\r\n      ```\r\n\r\nAnd what you're suggesting, I guess, is\r\n\r\n  - **[Version 4][v4]**:\r\n      ```js\r\n      // ifElseP :: (a -> Bool) -> (a -> Promise b)  -> (a -> Promise b) -> Promise a -> Promise b\r\n      const ifElseP = curry(compose(then, ifElse))\r\n      ```\r\n\r\nwhich is used a bit differently from the others, in that the function returned from `ifElseP` accepts a `Promise a`, not just an `a`.  While that might be an interesting function on it's own, I don't think it has much to do with the original request, which seems to be something like [version 1][v1].\r\n\r\n  [v1]: https://goo.gl/gRjgcD\r\n  [v2]: https://goo.gl/aXZjAt\r\n  [v3]: https://goo.gl/x9e9Nr\r\n  [v4]: https://goo.gl/ULxYPL\r\n\r\n",
      "Ok, I understand the third one now, and it's the same as the first one, due to `g(a) : h(a), f(a) === (b ? g : h)(a)`, signature: `(a -> Promise Bool) -> (a -> Promise b | b)  -> (a -> Promise b | b) -> a -> Promise b`.\r\n\r\nI also see how 4th differs from them -- predicate function is `a -> Bool`, not `a -> Promise Bool`.\r\n\r\nAnd while the original implementation is messy, due to concerning itself with variadic functions, perhaps the 1st or 3rd deserves to be put in the cookbook.\r\n\r\nAnd while providing more support to just promises is not what the Ramda team wants, perhaps there is a occasional need for `ifElseWith`, similar to `pipeWith`.",
      "Yes, a cookbook implementation makes sense.\r\n\r\nSince this is the very first request I've seen for something like this, I'm not inclined to spend any effort on `ifElseWith`, but if someone created a PR, we could certainly give a look.\r\n\r\nIt's funny after all those versions that I still hadn't noticed that 1 and 3 were the same.  It's that damn `chain`/`map` combination.  If `then` were more sensible, a specialization of version 1 where `b` is `Promise c`  would yield `Promise Promise c`."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7aa38dfb6b84f24256dc",
    "number": 2749,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7aa48dfb6b84f24256dd",
    "number": 2748,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7aa58dfb6b84f24256de",
    "number": 2745,
    "body": "https://github.com/ramda/ramda/pull/2513#issuecomment-447673498\r\n\r\nCloses #2513.\r\nCloses #2675.",
    "head_branch": "is-function",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7aa68dfb6b84f24256df",
    "number": 2744,
    "body": "I just changed while-loop to for-loop of transpose.js beause I thinks it looks a little bit more readable. :)\r\n* Change while-loop to for-loop of transpose.js\r\n* Change var variables to const and let variables",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7aa68dfb6b84f24256e0",
    "number": 2742,
    "body": "Link for proposal discussion - https://github.com/ramda/ramda/issues/2740",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "feature: adding paths operator - #2740 (#2742)\n\n* feature: adding paths operator - #2740\r\n\r\n* refactor: making path a derivative of paths\r\n\r\n* refactor: making props a derivative of path"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7aa78dfb6b84f24256e1",
    "number": 2741,
    "body": "",
    "head_branch": "dont-curry-transducers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7aa88dfb6b84f24256e2",
    "number": 2739,
    "body": "The function now doesn't throw Errors anymore when supplied with non-object.\r\nAlso fixes R.has.\r\n\r\nCloses #2738\r\n\r\nSigned-off-by: Vladimir Gorej <vladimir.gorej@gmail.com>",
    "head_branch": "char0n/has-hasPath-bugfix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix(hasPath): forces hasPath to be safe (#2739)\n\n* fix(hasPath): forces hasPath to be safe\r\n\r\nThe function now doesn't throw Errors anymore when supplied with non-object.\r\nAlso fixes R.has.\r\n\r\nCloses #2738\r\n\r\nSigned-off-by: Vladimir Gorej <vladimir.gorej@gmail.com>\r\n\r\n* test: address CR comments for has/hasPath\r\n\r\nRef #2738"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7aa98dfb6b84f24256e3",
    "number": 2737,
    "body": "make _curryN clearer",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7aaa8dfb6b84f24256e4",
    "number": 2735,
    "body": "",
    "head_branch": "lukeaus-patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7aab8dfb6b84f24256e5",
    "number": 2734,
    "body": "See #2733",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update the comment about pipeWith and composeWith (#2734)\n\n* Update the comment\r\n\r\n* Update the comment for composeWith\r\n\r\n* Update comment to replace 'leftmost' and 'rightmost' with 'first' and 'last'\r\n\r\n* Update comment to replace 'leftmost' and 'rightmost' with 'first' and 'last'"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7aac8dfb6b84f24256e6",
    "number": 2730,
    "body": "Closes #2729.\r\n\r\nI don't remember if we have an automated technique for managing these.",
    "head_branch": "CrossEye-patch-1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2730 from ramda/CrossEye-patch-1\n\nMinor miss in publication"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7aad8dfb6b84f24256e7",
    "number": 2728,
    "body": "I've missed this when upgrading rollup in https://github.com/ramda/ramda/pull/2724",
    "head_branch": "fix/rollup-banner",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2728 from Andarist/fix/rollup-banner\n\nFixed passing banner option to rollup"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7aae8dfb6b84f24256e8",
    "number": 2725,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7aaf8dfb6b84f24256e9",
    "number": 2724,
    "body": "…pping es2015+ code",
    "head_branch": "es5-smoke-test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2724 from Andarist/es5-smoke-test\n\nUse uglify instead of terser - this can act as smoke test against shi…"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ab08dfb6b84f24256ea",
    "number": 2722,
    "body": "",
    "head_branch": "v0.26.1-tweaks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2722 from CrossEye/v0.26.1-tweaks\n\nV0.26.1 tweaks"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ab18dfb6b84f24256eb",
    "number": 2720,
    "body": "Because `const` will break on older browsers like in iOS 9.3",
    "head_branch": "const",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2720 from screendriver/const\n\nChange const to var"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ab28dfb6b84f24256ec",
    "number": 2718,
    "body": "Regarding to https://github.com/ramda/ramda/issues/2706#issuecomment-441712047",
    "head_branch": "ramda-conventions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Reference to Ramda Conventions wiki page (#2718)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ab38dfb6b84f24256ed",
    "number": 2717,
    "body": "The documentation for memoizeWith was not updated when memoize was removed.\r\n\r\nThis PR simply removes the reference to memoize.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2717 from peoplenarthax/patch-1\n\nUpdate docs for memoizeWith"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ab38dfb6b84f24256ee",
    "number": 2715,
    "body": "Follow up to #2706 \r\n\r\nI wanted to keep the implementation to a bare (perhaps naive) minimum and get some early feedback. I'm not too sure about a few things:\r\n\r\n1. Compatibility with transducers.\r\n2. Compatibility with any relevant fantasy land specs.\r\n3. I'm not too familiar with the Hindley-Milner notation.\r\n4. Is it something that the collective would consider a nice addition to the library? :) \r\n\r\nThank you\r\n\r\n",
    "head_branch": "collect-by",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Implement R.collectBy (#2715)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ab48dfb6b84f24256ef",
    "number": 2711,
    "body": "",
    "head_branch": "no-describe-only",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2711 from GingerPlusPlus/no-describe-only\n\nDisallow tests to use describe.only"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ab58dfb6b84f24256f0",
    "number": 2710,
    "body": "",
    "head_branch": "fix-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2710 from GingerPlusPlus/fix-tests\n\nFix tests"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ab68dfb6b84f24256f1",
    "number": 2709,
    "body": "",
    "head_branch": "bugfix/otherwise-demo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2709 from adispring/bugfix/otherwise-demo\n\nfix: recoverFromFailure throw error"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ab78dfb6b84f24256f2",
    "number": 2708,
    "body": "",
    "head_branch": "bugfix/composeWith-typo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2708 from adispring/bugfix/composeWith-typo\n\nfix composeWith second demo result: null -> undefined"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ab88dfb6b84f24256f3",
    "number": 2705,
    "body": "Closes #2629, I think I tried to do too much in single PR.",
    "head_branch": "no-placeholder",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ab98dfb6b84f24256f4",
    "number": 2704,
    "body": "In MR #2394 the behaviour of `propOr` was changed to not only consider own properties\r\nand to work with `null` and `undefined`.\r\n\r\nI've also expanded the examples. Let me know if this is too verbose or you'd like something changed.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7aba8dfb6b84f24256f5",
    "number": 2703,
    "body": "",
    "head_branch": "test-source",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2703 from GingerPlusPlus/test-source\n\nDisallow tests to depend on build"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7abb8dfb6b84f24256f6",
    "number": 2701,
    "body": "",
    "head_branch": "deprecating-compose-pipe-KP",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2701 from CrossEye/deprecating-compose-pipe-KP\n\nDeprecating {compose|pipe}{P|K}"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7abc8dfb6b84f24256f7",
    "number": 2700,
    "body": "This PR was originally designed to remove `memoize`, but got sidetracked with a pickier version of ESLint.  So it does ESLint cleanup. \r\n\r\nBut most importantly, it removes `memoize` for reasons documented in #2125 and #1384.\r\n",
    "head_branch": "lint-cleanup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2700 from CrossEye/lint-cleanup\n\nLint cleanup"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7abd8dfb6b84f24256f8",
    "number": 2699,
    "body": "This has long been deprecated.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7abe8dfb6b84f24256f9",
    "number": 2696,
    "body": "",
    "head_branch": "addRus",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2696 from Guck111/addRus\n\nAdd rus translate"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7abf8dfb6b84f24256fa",
    "number": 2694,
    "body": "As discussed here: https://github.com/ramda/ramda/issues/2692",
    "head_branch": "add-move-function",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2694 from MadDeveloper/add-move-function\n\nfeat(List): add move function"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ac08dfb6b84f24256fb",
    "number": 2691,
    "body": "Cleaning up security vulnerability",
    "head_branch": "CrossEye-patch-1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2691 from ramda/CrossEye-patch-1\n\nSecurity vulnerability in Handlebars"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ac18dfb6b84f24256fc",
    "number": 2689,
    "body": "Addressing comments from https://github.com/ramda/ramda/issues/2671",
    "head_branch": "any",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ac28dfb6b84f24256fd",
    "number": 2688,
    "body": "Finishing work started in https://github.com/ramda/ramda/pull/2620",
    "head_branch": "splitWith",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ac38dfb6b84f24256fe",
    "number": 2687,
    "body": "",
    "head_branch": "2502-list-of",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ac48dfb6b84f24256ff",
    "number": 2686,
    "body": "Following discussion in https://github.com/ramda/ramda/pull/2685 simplifying the implementation of `R.T` and `R.F` to be self contained function definitions and removing link to always",
    "head_branch": "truefalse",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2686 from jamesmarlowe/truefalse\n\nsimplify T and F"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ac58dfb6b84f2425700",
    "number": 2685,
    "body": "",
    "head_branch": "always",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ac68dfb6b84f2425701",
    "number": 2683,
    "body": "This example could be improved",
    "head_branch": "intersperse",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2683 from jamesmarlowe/intersperse\n\nImprove intersperse example"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ac78dfb6b84f2425702",
    "number": 2682,
    "body": "## Summary\r\nThis PR addresses the issue described at https://github.com/ramda/ramda/issues/2681. `applySpec` was using ramda's `map` function, which calls out to a functions `.map` method if it is present. When a spec object with a `map` key was defined, it would think the value was a function it needed to call out to, producing undefined behavior. \r\n\r\n## Test Plan\r\nTDD - Added a failing unit test. Wrote some code. Unit test passes.",
    "head_branch": "fix/issue-2681",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2682 from Maushundb/fix/issue-2681\n\nFix err with applySpec \"map\" keys"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ac88dfb6b84f2425703",
    "number": 2678,
    "body": "This pull request fixes the problem when using native modules from node (`--experimental-modules`) or `esm` module loader together with `.mjs` extensions.\r\n```js\r\n// a sample script `01.mjs`\r\nimport {length} from 'ramda'\r\nconsole.log(length(\"hello world\"))\r\n```\r\n\r\nHere are some examples of what didn't work before this pull request:\r\n\r\n### Using esm module loader\r\n```console\r\n$ node -r esm 01.mjs\r\nSyntaxError: Missing export name 'length' in ES module:\r\n    file:///.../node_modules/ramda/src/index.js\r\n```\r\n\r\n### Using node --experimental-modules \r\n```console\r\n$ node --experimental-modules 01.mjs\r\n(node:18860) ExperimentalWarning: The ESM module loader is experimental.\r\nSyntaxError: The requested module does not provide an export named 'length'\r\n    at ModuleJob._instantiate (internal/loader/ModuleJob.js:85:17)\r\n    at <anonymous>\r\n```\r\n\r\nAfter this fix, the following works:\r\n```console\r\n$ node --experimental-modules 01.mjs\r\n(node:19885) ExperimentalWarning: The ESM module loader is experimental.\r\n11\r\n```\r\n```console\r\n$ node -r esm 01.mjs\r\n11\r\n```",
    "head_branch": "mjs-support",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2678 from vsimko/mjs-support\n\nsupport native modules in node when using `.mjs` extension"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ac88dfb6b84f2425704",
    "number": 2677,
    "body": "In the file `source/pipeWith.js`, somebody forgot to remove the explicit .js extensions from the imports.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2677 from vsimko/master\n\nremove mentions of .js extension from imports"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ac98dfb6b84f2425705",
    "number": 2676,
    "body": "Hi, Ramda Team. \r\nI'm often facing issues when I need to create, a new object from other object or any other data.\r\nAnd I thought that that would be nice to have something like evolve but for new objects using the transformations map approach from evolve func.\r\n\r\nI would be happy if you would like this function and add it to the library. I have some more ideas on evolving function. Let me know if you are interested in further developing in this direction.\r\n\r\nPlease let me know if there are needed some improvements from my side. \r\n\r\nBest regards, Alex.\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7aca8dfb6b84f2425706",
    "number": 2675,
    "body": "This is intended as an addendum to https://github.com/ramda/ramda/pull/2513, but the previous PR is consistent without these changes and can be merged before this one.\r\n\r\nThe main change I've made is to `map`, which can take a function as a functor.\r\nI've included the same fix @rjhilgefort did here: https://github.com/ramda/ramda/commit/b5a3cb6563d22d29b5798bfeca02938ab94c2761\r\nwith some tests to show what it would look like.\r\n\r\nThe only other changes are superficial - adding documentation and tests to prove the behaviour of `type`: https://github.com/ramda/ramda/commit/92b96c72f179c452d4894b7bc9642c1a17cabb87\r\nwhich unfortunately requires making a change to eslint to parse async functions:\r\nhttps://github.com/ramda/ramda/commit/764b105dba86ed3b256e1bb46a4057e187157ddc\r\nI'd appreciate any feedback on whether this is OK or if there are any reasons to hold back on changing eslint settings.\r\n\r\nIs `(async (->) r)` the right signature for an async function?\r\n\r\nI've kept the `type` docs/tests and eslintrc changes separate so the `map` changes can be easily merged without them.\r\n\r\nPlease let me know if anything else needs changing!",
    "head_branch": "feature/is-function-async-extra",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7acb8dfb6b84f2425707",
    "number": 2673,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2673 from guysaar223/patch-1\n\nis not valid json"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7acc8dfb6b84f2425708",
    "number": 2670,
    "body": "see #2667",
    "head_branch": "align-lensPath-lensIndex",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2670 from 2beaucoup/align-lensPath-lensIndex\n\nalign lensPath with lensIndex by supporting negative indeces"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7acd8dfb6b84f2425709",
    "number": 2669,
    "body": "Hi!\r\n\r\nPR related to #2668 \r\n",
    "head_branch": "into-object-map-filter",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ace8dfb6b84f242570a",
    "number": 2666,
    "body": "Grammatical clarification.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2666 from lexjacobs/patch-1\n\nUpdate any.js"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7acf8dfb6b84f242570b",
    "number": 2663,
    "body": "#2662",
    "head_branch": "additional-reduced-support",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add reduced support to reduceBy and reduceRight (#2663)\n\n* Add reduced support to reduceBy\r\n\r\n* Add reduced support to reduceRight\r\n\r\n* Update reduced and associated docs for newly supporting functions\r\n\r\n* Rename shortcut -> short circuit"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ad08dfb6b84f242570c",
    "number": 2660,
    "body": "",
    "head_branch": "test-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2660 from bidhan-a/test-fixes\n\nFix messages in test cases for gt, gte, and lte"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ad18dfb6b84f242570d",
    "number": 2656,
    "body": "resolves #1766",
    "head_branch": "add-supported-functions-to-reduced-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2656 from morgsmccauley/add-supported-functions-to-reduced-docs\n\nAdd list of supported functions in reduced docs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ad28dfb6b84f242570e",
    "number": 2655,
    "body": "- Add a note about R.replace() delegating to String.prototype.replace()\r\n- Change the signature to match actual behavior\r\n\r\n(ref #2653)",
    "head_branch": "contrib/replace-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2655 from foxbunny/contrib/replace-docs\n\nImprove R.replace() documentation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ad38dfb6b84f242570f",
    "number": 2650,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2650 from surmind/patch-1\n\nmissing a '(' in sig of addIndex"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ad38dfb6b84f2425710",
    "number": 2649,
    "body": "incorrect check `require.resolve !== 'function'` in test/index.js",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2649 from objectisundefined/master\n\nFix test of `API surface`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ad48dfb6b84f2425711",
    "number": 2646,
    "body": "_Exclusive OR_, or _exclusive disjunction_ is a logical operation that returns `true` if only one the arguments is `true` and the other is `false`. \r\n\r\nIt can be easily implemented with other logical operations like `and`, `or` and `not`, but I guess it would be nice to have it in Ramda to improve the code readability.\r\n\r\nSince it's my first pull request here, please let me know if I'm missing something.\r\n\r\nKind regards",
    "head_branch": "feat/xor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add R.xor (Exclusive OR) (#2646)\n\n* Add xor module with respective test\r\n\r\n* Update see docs. Change implementation of xor to return boolean type\r\n\r\n* Added test for xor to check coercion to boolean and currying\r\n\r\n* Update return expression on xor to make it simpler"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ad58dfb6b84f2425712",
    "number": 2645,
    "body": "hoping to fix the docs for objOf since it confused me for a short time.  ",
    "head_branch": "fix_objOf_doc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ad68dfb6b84f2425713",
    "number": 2641,
    "body": "",
    "head_branch": "uniqBy-using-filter",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ad78dfb6b84f2425714",
    "number": 2637,
    "body": "Expand documentation of `memoize` and `memoizeWith` to clarify their limitations and help users find `memoizeWith(toString)` in lieu of choosing a deprecated function.\r\n\r\nI'm assuming for now that the documentation supports multiple @example stanzas per docblock, as the examples added are separate and do not in my opinion stand well as the sole example.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2637 from evan-king/master\n\nExpand documentation of `memoize` and `memoizeWith`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ad88dfb6b84f2425715",
    "number": 2635,
    "body": "consistent with docs & I think this is right\r\n`((x, acc) -> (y, acc)) -> acc -> [x] -> ([y], acc)`",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ad98dfb6b84f2425716",
    "number": 2630,
    "body": "Squashed commits from #2515.",
    "head_branch": "thread-with-sq",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2630 from skallet/thread-with-sq\n\nAdded pipeWith/composeWith functions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ada8dfb6b84f2425717",
    "number": 2629,
    "body": "Resolves #2073! 😄",
    "head_branch": "fn-name",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7adb8dfb6b84f2425718",
    "number": 2627,
    "body": "### Pros:\r\n\r\n+ Simplifies `flip`'s implementation (no implicit currying).\r\n+ Makes `flip` work as right section (#2177).\r\n`applyTo` can be used as left section (and as `infix`, if redefined as `flip(call)`), so resolves #2177.\r\n\r\n### Cons:\r\n\r\n- Doesn't preserve function's arity.\r\n\r\n### Alternative approaches:\r\n\r\n* Add `f_` and `_f`, deprecate `flip` and `applyTo`.\r\n* `uncurryN(2)` `flip`?\r\n\r\n### What's next?\r\n\r\n+ Deprecate placeholder.\r\n+ Remove `mergeLeft` = `flip(merge)`, `mergeRight` = `merge`.\r\n`merge` can stay deprecated, I added support for objects to `concat` at #2622.",
    "head_branch": "ternary-flip",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7adc8dfb6b84f2425719",
    "number": 2626,
    "body": "",
    "head_branch": "simplify-concat",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7add8dfb6b84f242571a",
    "number": 2625,
    "body": "Just so they don't show up in git, and don't get committed accidentally (https://github.com/ramda/ramda/pull/2186#issuecomment-304993652, https://github.com/ramda/ramda/pull/2506#pullrequestreview-111300673).\r\n\r\nIncompatible with #2071, closes #2071.",
    "head_branch": "ignore-locks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ade8dfb6b84f242571b",
    "number": 2624,
    "body": "#1055",
    "head_branch": "map-set-to-string",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Map and Set support to toString (#2624)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7adf8dfb6b84f242571c",
    "number": 2622,
    "body": "`filter` has 3 specializations: for arrays, objects and transformers (ie. transducer version).\r\n\r\nSpecialization for arrays can be easily expressed in terms of transducers.\r\n\r\nThe same transducers can't be reused for objects, tho &mdash; `R.into({})` expects `'@@transducer/step'` to have signature `(acc, [key, value]) => newAcc`, which is inherently incompatible with `(acc, value) => newAcc`.\r\n\r\n## Proposal\r\n\r\nI suggest to change signature of `step` function of object-compatible (\"keyed\") transducers to \r\n`(acc, value, key?) => newAcc`.\r\n\r\nThis allows to reuse transducers to transform objects.\r\n\r\nBecause `key` is optional, keyed transducers remain compatible with non-keyed.\r\n\r\n## To do\r\n\r\n1. [x] In transformations<sup>1</sup>, when dispatching, use transducers when Map, array or object is passed as input.\r\n2. [x] Get rid of redundant array and object specializations.\r\n3. [ ] Ensure that `reduceBy` (and derived functions) works with keyed transducers.\r\n4. [ ] Get rid of legacy `(result, [key, value]) => result` signature from [`_stepCatObject`'s `step`](https://github.com/ramda/ramda/pull/2622/files#diff-c78dd3dc852a1f37454e6a9c243cf6fcR33).\r\n4. [ ] Update `R.into`'s docs.\r\n5. [ ] After merging #2585, consider moving functionality from `_dispatchKeyed` into `_dispatchable`.\r\n\r\n<sup>1</sup>By \"transformation\", I mean function which takes a collection and returns a collection of the same type.\r\n\r\nI'll <ins>try to</ins> wait with working on those until the idea is approved.\r\n\r\n## Other issues\r\n\r\nObviously, in order to transduce an object, I needed to add object support to `_reduce`; resolves #2046.\r\n\r\nAlso, I added `Map` support (#1055).\r\n\r\nNote how all the switching on types happens in `_reduce` and `_stepCat` (https://github.com/ramda/ramda/issues/1055#issuecomment-371014572).\r\n\r\n## After merging\r\n\r\n- Reimplement `object -> object` methods in terms of keyed transducers to add Map support to them without adding type-switching.\r\n- Merge `update` and `assoc` into 1 function, supporting objects, Maps and arrays.\r\n- Add Map and object support to `concat`, deprecate `merge`\r\n(in progress, test fails because `_clone` doesn't support Map).\r\n- Consider reviving #2626.\r\n- Try to write universal, performant `concatAll` (working on strings, arrays, objects, Maps, iteratbles).",
    "head_branch": "keyed-transducers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ae08dfb6b84f242571d",
    "number": 2621,
    "body": "Just including br translation, i'm already doing it and until the weekend i'll finish.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Including BR translation. (#2621)\n\nJust including br translation, i'm already doing it and until the weekend i'll finish."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ae18dfb6b84f242571e",
    "number": 2620,
    "body": "Takes a list and a predicate and returns a list of lists split\r\nby (and including) matches.",
    "head_branch": "split-when",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ae28dfb6b84f242571f",
    "number": 2618,
    "body": "Alternative to #2342; closes #2342.",
    "head_branch": "xslice",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ae28dfb6b84f2425720",
    "number": 2616,
    "body": "",
    "head_branch": "repl",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2616 from GingerPlusPlus/repl\n\nAdd repl script"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ae38dfb6b84f2425721",
    "number": 2614,
    "body": "",
    "head_branch": "xtake-last",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ae48dfb6b84f2425722",
    "number": 2613,
    "body": "",
    "head_branch": "no-array-reduce",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ae58dfb6b84f2425723",
    "number": 2612,
    "body": "https://github.com/ramda/ramda/pull/2602#issuecomment-407504807",
    "head_branch": "drop-bower",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ae68dfb6b84f2425724",
    "number": 2611,
    "body": "",
    "head_branch": "simplify-constructN",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ae78dfb6b84f2425725",
    "number": 2610,
    "body": "https://github.com/ramda/ramda/pull/2602#issuecomment-406889696",
    "head_branch": "fix-umd-min",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2610 from GingerPlusPlus/fix-umd-min\n\nFix build:umd:min"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ae88dfb6b84f2425726",
    "number": 2607,
    "body": null,
    "head_branch": "map-in-clone",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ae98dfb6b84f2425727",
    "number": 2606,
    "body": "I don't know if this is a good idea. I did this because I could.",
    "head_branch": "clone-function",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7aea8dfb6b84f2425728",
    "number": 2605,
    "body": "Fixes #2459.\r\nAlternative to #2460, closes #2460.\r\n\r\n`fn` is always a function created by Ramda that is not reused for anything else, so it should be safe to mutate it.",
    "head_branch": "arity-define-property",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7aeb8dfb6b84f2425729",
    "number": 2604,
    "body": "",
    "head_branch": "prepare-script",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2604 from GingerPlusPlus/prepare-script\n\nAdd prepare npm script"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7aec8dfb6b84f242572a",
    "number": 2603,
    "body": "I am using the internal `_Set` in both functions to drop the time complexity from O(n²) to O(n).\r\nThat's the same way the `R.difference` is improved in #2581.\r\n\r\nBefore/after (in milliseconds):\r\n```\r\n-- R.without\r\nBefore:\r\n  10k [size 10] arrays: 65.593378\r\n  10k [size 100] arrays: 437.021462\r\n  1k [size 1000] arrays: 1186.243514\r\n  100 [size 10000] arrays: 9127.722465\r\nAfter:\r\n  10k [size 10] arrays: 37.329974\r\n  10k [size 100] arrays: 102.189432\r\n  1k [size 1000] arrays: 93.958924\r\n  100 [size 10000] arrays: 114.788804\r\n\r\n-- R.intersection\r\nBefore:\r\n  10k [size 10] arrays: 86.015134\r\n  10k [size 100] arrays: 502.037411\r\n  1k [size 1000] arrays: 1212.673359\r\n  100 [size 10000] arrays: 9114.332054\r\nAfter:\r\n  10k [size 10] arrays: 45.109575\r\n  10k [size 100] arrays: 175.27189\r\n  1k [size 1000] arrays: 165.56708\r\n  100 [size 10000] arrays: 199.455852\r\n```",
    "head_branch": "improve-without-and-intersection",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Improve R.without and R.intersection time complexity (#2603)\n\n* Improve R.intersection time complexity\r\n\r\n* Improve R.without time complexity\r\n\r\n* Remove previous intersection optimization\r\n\r\n* Add test cases for R.intersection"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7aed8dfb6b84f242572b",
    "number": 2602,
    "body": "IMO, it should only be published to npm, on each release.\r\nWhy was it committed in the first place?",
    "head_branch": "no-dist",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7aee8dfb6b84f242572c",
    "number": 2601,
    "body": "minor typos",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7aef8dfb6b84f242572d",
    "number": 2600,
    "body": "UMD contains additional code to work as AMD, CommonJS and in browsers. Therefore, I don't see any value in having Node-only CommonJS build when there is UMD build.\r\n\r\nThis PR decreases size of the package (one less build to include), simplifies build process, and enables slightly faster loading in Node (because it needs to resolve and read one file instead of 325).\r\n\r\n~~Alternative solution: replace UMD build with smaller, browser-optimized IIFE build.~~ CommonJS build doesn't provide AMD compatibility.\r\n\r\nCloses #2035.\r\nIncompatible with #1959, closes #1959.\r\n\r\nNote to self: after merging, consider using rollup to create es build, and maybe test bundle.\r\n",
    "head_branch": "umd-in-node",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7af08dfb6b84f242572e",
    "number": 2599,
    "body": "Uses babel as a plugin to avoid  having to create commonjs build on disk before running tests.\r\n\r\nAlso, fixes browser tests (https://github.com/ramda/ramda/pull/2589#issuecomment-405263241), so closes #2597.\r\n\r\n",
    "head_branch": "simplify-testing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2599 from GingerPlusPlus/simplify-testing\n\nFix and simplify testing"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7af08dfb6b84f242572f",
    "number": 2597,
    "body": "",
    "head_branch": "fix-browser-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7af18dfb6b84f2425730",
    "number": 2595,
    "body": "Per CrossEye's comment to this stackoverflow answer: https://stackoverflow.com/a/44306719:\r\n\r\n> The example from the docs is terrible for understanding. One like this would probably help: madd3([100, 200], [30, 40, 50], [6, 7]); //=> [136, 137, 146, 147, 156, 157, 236, 237, 246, 247, 256, 257]. (And a PR to fix the documentation would be welcome.) – Scott Sauyet Jun 4 '17 at 1:07\r\n\r\nThis really helped me understand how lift() behaves for arrays.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7af28dfb6b84f2425731",
    "number": 2594,
    "body": "This addresses #2583\r\n\r\nIt makes sense that `R.prop*` functions would be as safe as `R.prop` so I changed the implementation to build upon them using `prop`.",
    "head_branch": "safe-prop-assertions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make R.propEq and R.propSatisfies safe for null/undefined arguments (#2594)\n\n* make R.propEq return false on null or undefined arguments\r\n\r\n* make R.propSatisfies return false for null or undefined arguments\r\n\r\n* update for ESLint"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7af38dfb6b84f2425732",
    "number": 2593,
    "body": "I think making it useful is better than removing it (https://github.com/ramda/ramda/pull/2450#issuecomment-361073664).\r\n\r\nI'd like to know why the heck `Set` and `Map` use `.size` instead of `.length` in the first place.\r\n\r\nRelated to #1055.",
    "head_branch": "set-length",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7af48dfb6b84f2425733",
    "number": 2591,
    "body": "Fixes #2587.\r\n\r\nUnlike #2588, it doesn't introduce conflicts with pending pull requests (which use no extension in imports and named exports).",
    "head_branch": "js-extension",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2591 from GingerPlusPlus/js-extension\n\nAdd js extrension to imports and named re-exports in es build"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7af58dfb6b84f2425734",
    "number": 2590,
    "body": "",
    "head_branch": "fix-none-transducer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2590 from GingerPlusPlus/fix-none-transducer\n\nFix and test R.none's support for transducers"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7af68dfb6b84f2425735",
    "number": 2589,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2589 from GingerPlusPlus/patch-1\n\n[CI] Drop support for Node older than 8.x"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7af78dfb6b84f2425736",
    "number": 2588,
    "body": "This enables a developer to load Ramda via import statements directly in the\r\nbrowser without bundling/transpilation.\r\n\r\nBefore, imports in the Ramda source only included the file name without\r\nextension, eg. `import curryN from './curryN'`. Most bundlers will\r\nassume a default extension and find the file regardless. In the browser,\r\nthe exact file path that was specified in the import statement will be\r\nrequested, and the file can usually only be served by the webserver or\r\nlocated on the file system if the file path matches exactly. Thus, the\r\ncomplete file path must be used in import statements to be able to load\r\nRamda via import statements without some kind of bundling/transpilation\r\nprocess.\r\n\r\nFixes #2587.\r\n\r\n### Method\r\n\r\nApplied [this codemod](https://astexplorer.net/#/gist/1c3fe56c12f839a5d5eca10084b39fc1/073cf55c223810f36d098fc7d5e50c8a70e68abf) with [jscodeshift](https://github.com/facebook/jscodeshift) on all files in `source/` because I don't know how to use `sed`.\r\n\r\nI was able to load the `ramda/es/index.js` as described in the original issue without problems.",
    "head_branch": "add-file-extensions-to-imports",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7af88dfb6b84f2425737",
    "number": 2585,
    "body": "A small addition to `_dispatchable` is all it takes to use transducers to support iterables.\r\n\r\n<details>\r\n<summary>Checklist</summary>\r\n\r\n1. [x] **Naming** -- https://youtu.be/4KqUvG8HPYo?t=2437\r\n5. [x] **Tests**\r\n6. [x] **Docs**\r\n7. [x] Don't accept / return **iterators**.\r\n8. [x] **Dispatch** to `transduce` method of `obj`, if present.\r\n</details>\r\n\r\n<details>\r\n<summary>Ideas out of scope of this PR</summary>\r\n\r\n- Consider special-casing `chain` for iterables to avoid temporary arrays.\r\n- Clean up `_dispatchable`.\r\n- Expose [`_educe`](https://github.com/ramda/ramda/pull/2585/files#diff-b8b5391d75ceb98ebeeb01ec5f1ab3e0) as `R.educe`.\r\n- Consider returning lazy iterable from `range`, `repeat`, `unfold`.\r\n</details>\r\n\r\nRelated: #2525, #2508, #695, possibly other, closed issues.",
    "head_branch": "transduce-iterable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7af98dfb6b84f2425738",
    "number": 2584,
    "body": "The docs on lensIndex didn't specify that you can use negative indexes to start from the end of the array.",
    "head_branch": "lensIndex-negative-index-doc-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7afa8dfb6b84f2425739",
    "number": 2582,
    "body": null,
    "head_branch": "improve-difference",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7afb8dfb6b84f242573a",
    "number": 2581,
    "body": "Before this change, the time complexity for this function was something like O(M x N), being those values the first and the second array lengths.\r\n\r\nThis can get pretty slow with larger arrays, we learned it the painful way in one of our services :sweat_smile:\r\n\r\nThis change uses the internal `_Set`, which is O(1)-ish to lookup and insert values. So this function becomes an O(n), which solves our problem.\r\n\r\n`differenceWith` remains untouched",
    "head_branch": "improve-difference",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2581 from cuchi/improve-difference\n\nImproving the time complexity for the difference function"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7afc8dfb6b84f242573b",
    "number": 2580,
    "body": "This introduces a new function which can then be used to dispatch `Object` types for `R.traverse` and `R.sequence`.\r\n```\r\nR.traverseWithKey :: Applicative f => (a -> f a) -> ((k, a) -> f b) -> {a} -> f {b}\r\n```\r\n\r\nThis effectively maps over the object's set of keys and values with the provided function, producing `Applicative` values for each. The object is then rebuilt within the context of the `Applicative`.\r\n\r\n```js\r\nconst allValid = (k, v) => k.length >= 3 && v > 0 ? Just(v) : Nothing();\r\n\r\nR.traverseWithKey(Maybe.of, allValid, { a: 1, b: 2, c: 3 }); //=> Nothing\r\nR.traverseWithKey(Maybe.of, allValid, { foo: 0, bar: 1, baz: 2 }); //=> Nothing\r\nR.traverseWithKey(Maybe.of, allValid, { foo: 1, bar: 2, baz: 3 }); //=> Just({ foo: 1, bar: 2, baz: 3 })\r\n```\r\n\r\n```js\r\nR.sequence(Maybe.of, { a: Just(1), b: Just(2), c: Just(3) });   //=> Just({a: 1, b: 2, c: 3})\r\nR.sequence(Maybe.of, { a: Just(1), b: Just(2), c: Nothing() }); //=> Nothing()\r\n```\r\n\r\n```js\r\nconst safeDiv = n => d => d === 0 ? Maybe.Nothing() : Maybe.Just(n / d)\r\n\r\nR.traverse(Maybe.of, safeDiv(10), {a: 2, b: 4, c: 5}); //=> Maybe.Just({a: 5, b: 2.5, c: 2})\r\nR.traverse(Maybe.of, safeDiv(10), {a: 2, b: 0, c: 5}); //=> Maybe.Nothing\r\n```",
    "head_branch": "traversable-object",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7afd8dfb6b84f242573c",
    "number": 2577,
    "body": "Currently function doesn't return Boolean - it returns result of predicate-function. Ideally, predicate shouldn't return anything except Boolean, but it's easy to introduce a bug like this.\r\n```javascript\r\nR.propSatisfies(\r\n    prop => prop && prop.a && prop.a.b > 3,\r\n    'property'\r\n);\r\n```",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7afe8dfb6b84f242573d",
    "number": 2569,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2569 from matthewdaniel/master\n\nadding similar omit/pick to see also on dissoc/assoc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7aff8dfb6b84f242573e",
    "number": 2567,
    "body": "Based on the `evolve` function. This recursively transforms the keys of the object. \r\n\r\n```js\r\nconst tomato = {firstName: 'John', lastName: 'Smith', emailAddress: 'foo@BAR.com'};\r\nconst transformations = {\r\n     firstName: R.toUpper,\r\n     lastName: R.toLower\r\n};\r\nR.evolveKeys(transformations, tomato);\r\n//=> {FIRSTNAME: 'John', lastname: 'Smith', emailAddress: 'foo@BAR.com'}\r\n```",
    "head_branch": "EvolveKeys",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b008dfb6b84f242573f",
    "number": 2565,
    "body": "New and improved `then` PR open for discussion. I tried to incorporate the comments from the previous PR while changing as little as possible otherwise. \r\n\r\nPlease review the type signatures, examples, and wording on the `_assertPromise` errors.\r\n\r\nFor reference, https://github.com/ramda/ramda/pull/1906 is the prior discussion.",
    "head_branch": "then",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2565 from Bradcomp/then\n\nAdded functions then and otherwise"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b018dfb6b84f2425740",
    "number": 2562,
    "body": "I opened issue #2560 to update the ascend documentation. The comparator and descend functions use a similar example so I updated their documenation as well.",
    "head_branch": "doc-example-updates",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2562 from crashspringfield/doc-example-updates\n\nupdate ascend, comparator, descend docs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b028dfb6b84f2425741",
    "number": 2558,
    "body": "The original is pretty hard to follow.",
    "head_branch": "docs-for-reduceby",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2558 from CrossEye/docs-for-reduceby\n\nCleaner example for reduceBy"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b028dfb6b84f2425742",
    "number": 2556,
    "body": "The idea is to make it easier to use the 'path' method. The method can take not only an array as 1st parameter but and a  string which describes a path. The separator for paths' steps is dot `.` \r\nE.g.\r\n`'a.b.c'` instead `['a', 'b', 'c']`.   \r\n`R.path('a.b', {a: {b: 2}});` instead `R.path(['a', 'b'], {a: {b: 2}});`",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b038dfb6b84f2425743",
    "number": 2554,
    "body": "I've run across a case in which it would be convenient to be able to easily \"toggle\" a value, which is to return the \"opposite\" of a value when given two possible values. Basically, if your two possible values are `[true, false]`, this toggle function does the equivalent of `value = !value`.\r\n\r\nExample:\r\n\r\n`R.toggle(\"on\", [\"on\", \"off\"]); //=> \"off\"`\r\n\r\nThis can be convenient when you would like to toggle a property for an array of objects like so:\r\n\r\n`R.map(R.evolve({ status: toggle([\"active\", \"inactive\"]) }), users)`",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b048dfb6b84f2425744",
    "number": 2553,
    "body": "Many, many thanks to everyone who has worked on Ramda 🙇 \r\n\r\nI have a hard time remembering `R.without`. I always think \"remove item from list\" and end up searching for `R.remove`, which isn't really what I was looking for.\r\n\r\nThis PR adds a `\"See also without\"` to the `remove` section.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2553 from chriddyp/patch-1\n\nreference R.without in the R.remove docs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b058dfb6b84f2425745",
    "number": 2551,
    "body": "This PR adds a new, simple `thunkify` function. It takes an `fn` function and returns a new function that asks for arguments before returning a third function that, when called, invokes `fn` with the provided arguments.\r\n\r\n```js\r\nconst thunkify = fn => (...args) => () => fn(...args);\r\n```\r\n\r\nOriginal PR idea came from @CrossEye at a [Stackoverflow answer](https://stackoverflow.com/questions/50495874/how-to-create-a-function-that-delays-call-to-given-function?noredirect=1#comment88255490_50495874).\r\n\r\n### Motivation\r\n- While very simple, wrapping functions to delay their invocations is a really common pattern.\r\n- Ramda itself does not provide any out-of-the-box tool to help with this in a straight forward manner.\r\n- It is specially useful when arguments to the _thunkified_ function are **not known until a later execution stage**.\r\n- It helps with creating composable functions that get arguments from composed chains.\r\n- The `fn` function could be variadic and can be called by the thunk with any number of arguments.\r\n\r\n### Example\r\n\r\nThis has been adapted from a real world application I'm currently working on.\r\n\r\n```js\r\nfunction throwErrorWith(message, data) {\r\n  throw Object.assign(new Error(message), data);\r\n}\r\n\r\nconst thenThrowErrorWith = R.thunkify(throwErrorWith);\r\n\r\n// ...later\r\n\r\nconst throwIfBadFormat = unless(\r\n  validFormat,\r\n  thenThrowErrorWith(\r\n    'Invalid response format: expected one of <result></result> or <error></error>'\r\n  )\r\n);\r\n```\r\n\r\n---\r\n\r\nSome considerations:\r\n\r\n- Not very keen on the `thunkify` name, to be honest.\r\n- This is my first PR on the project. My knowledge of the internal functions is rather limited, so I'm far from sure if this is the current \"Ramda\" approach to writing the solution. \r\n- There might be better ways and/or other internals I should be using. Looking forward to your input!\r\n- I'm not very familiar with Haskell-like signatures so wasn't quite sure how to describe `thunkify`. Help appreciated.\r\n\r\n\r\n\r\n",
    "head_branch": "feature/thunkify",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2551 from nfantone/feature/thunkify\n\nAdd thunkify function"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b068dfb6b84f2425746",
    "number": 2549,
    "body": "call me crazy if you want, haha.  Thanks guys!",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2549 from dimitropoulos/patch-2\n\ntypo: extraneous space"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b078dfb6b84f2425747",
    "number": 2545,
    "body": "This change unifies behavior of `dissocPath` and `dissoc`. I only add tests and behavior by  https://github.com/ramda/ramda/blob/master/test/dissoc.js#L26",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2545 from MilanLempera/master\n\nfix dissocPath for non-string types in path #2543"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b088dfb6b84f2425748",
    "number": 2541,
    "body": "Fix a couple of http references since #2527 has been solved.\r\n\r\nThe reference on the Ramda GitHub homepage also needs to be changed by a maintainer.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2541 from LoganElliott/master\n\nChange http references to https"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b098dfb6b84f2425749",
    "number": 2538,
    "body": "See previous PR: https://github.com/ramda/ramda/pull/2535",
    "head_branch": "add-fantasy-land-field",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2538 from Undistraction/add-fantasy-land-field\n\nadd ‘fantasy-land’ to package.json keywords"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b0a8dfb6b84f242574a",
    "number": 2535,
    "body": "Ramda's `package.json` is missing a `keywords` field. This PR adds this field with a selection of keywords to help discoverability. \r\n\r\n- Please let me know if you would like to add or remove any keywords and I'll amend as needed. \r\n- Github keywords for this repo should probably be updated to echo the keywords used in the`package.json`.\r\n\r\nCloses #2531",
    "head_branch": "add-keywords-field",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2535 from Undistraction/add-keywords-field\n\nAdd keywords field to package.json"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b0b8dfb6b84f242574b",
    "number": 2524,
    "body": "fixes #2523 ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "make assocPath overwrite primitive values with keys in path (#2524)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b0c8dfb6b84f242574c",
    "number": 2520,
    "body": "In regards #2519. \r\n\r\nHowever I can see that the it was fixed on the source with another example \r\n`R.tryCatch(JSON.parse, R.F)({});      //=> false`\r\n\r\n But hasn't been built to reflect it on the documentation",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2520 from edjroz/master\n\nfix documentation on tryCatch method"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b0d8dfb6b84f242574d",
    "number": 2516,
    "body": "I've seen several new developers on my project use currying unnecessarily with `R.pluck` due to the documentation. ",
    "head_branch": "Kiran-Rao-patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove unnecessary currying from pluck example documentation (#2516)\n\n* Remove unnecessary currying in example\r\n\r\n* Include curried example"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b0e8dfb6b84f242574e",
    "number": 2515,
    "body": "Implemented pipeWith and composeWith function for better-controlled threadings. See #2512.",
    "head_branch": "thread-with",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b0f8dfb6b84f242574f",
    "number": 2514,
    "body": "From the example it looks like match always returns a (possibly empty) array of strings - no undefined values. \r\n\r\nHave updated the signature to reflect this after I saw a flowtype error.",
    "head_branch": "update_match_description",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b108dfb6b84f2425750",
    "number": 2513,
    "body": "👋 Hello! First time contributor here so let me know what idiomatic Ramda repo things I'm missing from these changes and I'll be more than happy to make updates ASAP.\r\n\r\nI was using `R.invoker` on a `node@8.11.1` project and discovered that it was incorrectly throwing when I would try to invoke an `async` function on an object. Here's a basic example of what I was doing:\r\n\r\n```js\r\nconst person = {\r\n  speak: async () => 'Hi!'\r\n};\r\nconst speak = R.invoker(0, 'speak');\r\nspeak(person).then(R.identity) //=> 'Hi!'\r\n```\r\n\r\nThis [works fine in the Ramda Repl](https://goo.gl/g7WxPS) because `Object.prototype.toString` seems to always give back `'[object Function]'`. In `node@8.11.1` however, `toString` gives back different strings for different types of functions and this was producing false negatives when I tried to use `R.invoker` on my `async` methods.\r\n\r\nThis PR adds support for `AsyncFunction`, as well as `GeneratorFunction` ~and `Proxy`~ functions. I took a page out of `lodash`'s [`isFunction` implementation](https://github.com/lodash/lodash/blob/4.17.5/lodash.js#L11638).\r\n\r\nI didn't add any tests because I didn't see any specific tests for the internal `_isFunction` helper, nor could I easily add tests for `R.invoker` that handles `async` functions because of the `ESLint@2.11.0` dev dependency. I see in the `travis.yml` file that you're targeting `node@8.x.x` so I think the changes are valid given that support.",
    "head_branch": "feature/is-function-async",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2513 from rjhilgefort/feature/is-function-async\n\nEnhance `_isFunction` To Handle `AsyncFunction` (+ more)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b118dfb6b84f2425751",
    "number": 2512,
    "body": "I've added pipeSome and composeSome function which works similarly like threading functions in Clojure some->>. This is good when you use some expensive operation in composition and you don't want to compute for invalid values. You can, of course, wrap those functions inside `when` function, but I think this approach is much more readable.",
    "head_branch": "pipeSome",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b128dfb6b84f2425752",
    "number": 2511,
    "body": "update evolve functions to support evolving with an array of transformations.\r\n\r\nAn example of use case:\r\n\r\n```\r\nvar transf   = [R.add(1), R.add(-1)];\r\nvar object   = [100, 1400];\r\nvar expected = [101, 1399];\r\neq(R.evolve(transf, object), expected);\r\n```\r\n\r\nreference issue\r\nhttps://github.com/ramda/ramda/issues/2289",
    "head_branch": "feature/evolve-with-array-of-transformations",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2511 from bobwei/feature/evolve-with-array-of-transformations\n\nBe able to evolve with an array of transformations"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b138dfb6b84f2425753",
    "number": 2506,
    "body": "This diff adds size snapshot plugin for rollup which on every build\r\nwrites snapshot of umd with actual, minified and gzipped sizes. This\r\nallows to track changes in size on every commit.\r\n\r\nAlso this diff combines development and production rollup configs in one\r\nmulticonfig to run node with rollup only once.",
    "head_branch": "rollup-size-snapshot",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b148dfb6b84f2425754",
    "number": 2505,
    "body": "I initially thought [R.flip](http://ramdajs.com/docs/#flip) flipped _all_ arguments. Does that use case warrant official support?",
    "head_branch": "add-flipAll",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b158dfb6b84f2425755",
    "number": 2501,
    "body": "As discussed in #2499 here is a proposal for `hasPath` function. \r\n\r\nNotes:\r\n1. only own properties are checked\r\n2. imho `hasPathIn` should not be implemented right now (until somebody will come with the request)\r\n",
    "head_branch": "has-path",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2501 from vitalets/has-path\n\nadd hasPath"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b158dfb6b84f2425756",
    "number": 2500,
    "body": "This PR is to add an additional example when partially applying `prop`.\r\n\r\nI use this form the most often and thought the docs could benefit from the addition.",
    "head_branch": "add-prop-curried-example",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2500 from craigayre/add-prop-curried-example\n\nAdd additional example to prop.js"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b168dfb6b84f2425757",
    "number": 2498,
    "body": "See more https://en.wikipedia.org/wiki/Addition#Successor",
    "head_branch": "test/math-add-succ",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b178dfb6b84f2425758",
    "number": 2497,
    "body": "Shortcut to find if number is within a range of numbers.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b188dfb6b84f2425759",
    "number": 2496,
    "body": "Created `mergeSpec()` function to handle cases where you may want `applySpec()` to merge with the original object.\r\n\r\nAn example of its proposed use:\r\n\r\n```\r\nconst formatUser = mergeSpec({\r\n  fullName: R.compose(R.join(' '), R.values, R.pick(['firstName', 'lastName'])),\r\n  address: R.pipe(\r\n    R.prop('address'),\r\n    R.evolve({\r\n      street: R.trim,\r\n      city: compose(str => str.replace(/(?:^|\\s)\\S/g, R.toUpper), R.trim),\r\n      state: R.toUpper,\r\n      zip: compose(R.trim, R.when(R.is(Number), R.toString))\r\n    })\r\n  )\r\n});\r\n\r\nformatUser({\r\n  firstName: 'Montgomery',\r\n  lastName: 'Burns',\r\n  address: {\r\n    street: '1000 Mammon Lane, ',\r\n    city: 'springfield',\r\n    state: 'or',\r\n    zip: 97403\r\n  }\r\n}); // => { firsName: 'Montgomery', lastName: 'Burns', fullName: 'Montgomery Burns', address: { street: '1000 Mammon Lane,', city: 'Springfield', state: 'OR', zip: '97403' } }\r\n```\r\n\r\nI've tried to observe the coding style for the Ramda code-base, however I may not quite be up to its standards. I'll welcome any critiques or requests for more unit tests.\r\n\r\nThanks",
    "head_branch": "feature/MergeSpec",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b198dfb6b84f242575a",
    "number": 2489,
    "body": "This clarifies the doc descriptions for `and` and `or`. Since these use logical operators, they will return one of the operands, not necessarily a boolean. I also added tests so that this behavior is covered.",
    "head_branch": "doc-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b1a8dfb6b84f242575b",
    "number": 2486,
    "body": "",
    "head_branch": "fix-typo-in-range-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2486 from bouzlibop/fix-typo-in-range-docs\n\nFix typo in `range` docs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b1b8dfb6b84f242575c",
    "number": 2484,
    "body": "It was discussed in https://github.com/ramda/ramda/issues/2480#issuecomment-368917060.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2484 from vitalets/patch-1\n\nAdd docs for `chain` about function as second argument"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b1c8dfb6b84f242575d",
    "number": 2475,
    "body": "Why?\r\n\r\n1. `null` and `undefined` are the only things that throw on property access and cause the functions to throw.\r\n\r\n2.  Better composition with `pathSatisifes` (example from [my real code](https://github.com/GingerPlusPlus/Rextester-bot-v3/blob/ca3d993b26e6e1429643b53db929da35604ecca7/utils/telegram.js#L5-L8)): \r\n\r\n    ```js\r\n    const isCommand = R.pathSatisfies(\r\n        R.whereEq({ offset: 0, type: 'bot_command' }),\r\n        [ 'entities', 0 ]\r\n    );\r\n\r\n    isCommand({ entities: [] })\r\n    // Before: throws TypeError: Cannot read property 'offset' of undefined\r\n    // After: returns false\r\n    ```\r\n\r\n3. `where` within `where`: https://github.com/ramda/ramda/pull/2288#issuecomment-329931297",
    "head_branch": "where-null",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b1d8dfb6b84f242575e",
    "number": 2473,
    "body": "I'd suggest since node 8 is becoming the new default lts version, it should be added to the travis build.",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2473 from andys8/patch-2\n\nTravis using node in version 8"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b1e8dfb6b84f242575f",
    "number": 2472,
    "body": "This PR changes all examples used in the documentation to use `const` instead of `var`. I used a regex to replace all occurrences in the sources. I guess the updated version and the deployment will happen with the next release.\r\n\r\nFixes #2470 ",
    "head_branch": "docs-replace-var-with-const",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2472 from andys8/docs-replace-var-with-const\n\nChanged var to const in examples"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b1f8dfb6b84f2425760",
    "number": 2471,
    "body": "The readme explains that a default import is not existing anymore. The usage example was not adapted and shouldn't be working. I changed it.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2471 from andys8/patch-1\n\nReadme: Import changed in v0.25"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b208dfb6b84f2425761",
    "number": 2467,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b218dfb6b84f2425762",
    "number": 2466,
    "body": "As discussed in #2461 .",
    "head_branch": "doc-converge-arity",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2466 from chrokh/doc-converge-arity\n\nClarify the arity of the function returned by converge."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b228dfb6b84f2425763",
    "number": 2465,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2465 from leo19920823/master\n\nadd @see for startsWith and endsWith"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b238dfb6b84f2425764",
    "number": 2463,
    "body": "Adds a badge showing the number of people helping this repo on CodeTriage.\n\n[![Open Source Helpers](https://www.codetriage.com/ramda/ramda/badges/users.svg)](https://www.codetriage.com/ramda/ramda)\n\n\n## What is CodeTriage?\n\nCodeTriage is an Open Source app that is designed to make contributing to Open Source projects easier. It works by sending subscribers a few open issues in their inbox. If subscribers get busy, there is an algorithm that backs off issue load so they do not get overwhelmed\n\n[Read more about the CodeTriage project](https://www.codetriage.com/what).\n\n## Why am I getting this PR?\n\nYour project was picked by the human, @schneems. They selected it from the projects submitted to https://www.codetriage.com and hand edited the PR. How did your project get added to [CodeTriage](https://www.codetriage.com/what)? Roughly 5 months ago, [@chrislaughlin](https://github.com/chrislaughlin) added this project to CodeTriage in order to start contributing. Since then, 3 people have subscribed to help this repo.\n\n## What does adding a badge accomplish?\n\nAdding a badge invites people to help contribute to your project. It also lets developers know that others are invested in the longterm success and maintainability of the project.\n\nYou can see an example of a CodeTriage badge on these popular OSS READMEs:\n\n- [![](https://www.codetriage.com/rails/rails/badges/users.svg)](https://www.codetriage.com/rails/rails) https://github.com/rails/rails\n- [![](https://www.codetriage.com/crystal-lang/crystal/badges/users.svg)](https://www.codetriage.com/crystal-lang/crystal) https://github.com/crystal-lang/crystal\n\n## Have a question or comment?\n\nWhile I am a bot, this PR was manually reviewed and monitored by a human - @schneems. My job is writing commit messages and handling PR logistics.\n\nIf you have any questions, you can reply back to this PR and they will be answered by @schneems. If you do not want a badge right now, no worries, close the PR, you will not hear from me again.\n\nThanks for making your project Open Source! Any feedback is greatly appreciated.",
    "head_branch": "codetriage-badge",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b248dfb6b84f2425765",
    "number": 2462,
    "body": "The two independent examples of `sortBy` seems to be accidentally \"overlapped\".\r\n\r\nRemoves overlapping and adds blank line between the two independent examples.",
    "head_branch": "sortBy-example-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2462 from chrokh/sortBy-example-fix\n\nFix order of examples for sortBy."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b258dfb6b84f2425766",
    "number": 2460,
    "body": "PR for the issue #2459 \r\nI tried to revert `07ecdac`, but it was also removed by dead-code elimination.\r\nSo the best solution I found is to use `Object.defineProperty` as @CrossEye suggested. And It works fine. (I kept property attributes same as the specs.)\r\n\r\nI discovered that the mocha will not run tests in subdirectories, so the internal tests were not loaded. I've added `--recursive` flag to the runner. Then there was an old test `test.examplesRunner.js` with outdated functions, so I just skip it.\r\n\r\ncloses #2459 ",
    "head_branch": "arity_length_explicitly_defined",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b268dfb6b84f2425767",
    "number": 2454,
    "body": "I'm assuming R.mergeDeep was deprecated leaving some dead links in the docs.",
    "head_branch": "remove-deprecated-function-references",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2454 from Xorhail/remove-deprecated-function-references\n\nRemoved references to deprecated function in docs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b278dfb6b84f2425768",
    "number": 2452,
    "body": "Rename `R.contains` to `R.includes` and deprecate `R.contains`.\r\n\r\nThe internal `_containsWith` is also renamed for consistency.\r\n\r\nCloses #2447.",
    "head_branch": "rename-contains-to-includes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2452 from paldepind/rename-contains-to-includes\n\nRename contains to includes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b288dfb6b84f2425769",
    "number": 2451,
    "body": "This is to clarify that some falsey values are allowed through.  I realize that the reader can deduce that, but this simple example might be a flag to the uninitiated that this isn't a falsey check.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2451 from dimitropoulos/patch-1\n\nadd example to defaultTo"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b298dfb6b84f242576a",
    "number": 2450,
    "body": "`R.length` can accept a function as a parameter and provide a meaningful result: the number of arguments expected for the function.\r\n\r\n[Demo](http://ramdajs.com/repl/#?const%20foo%20%3D%20%28a%2C%20b%2C%20c%29%20%3D%3E%20%7B%7D%0A%0AR.length%28foo%29)",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b2a8dfb6b84f242576b",
    "number": 2446,
    "body": "Related to #2441, this PR provides an example config file for usage of `babel-plugin-ramda` and improves language to read a bit more easily.",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2446 from AndrewSouthpaw/patch-2\n\nProvide babel-plugin-ramda example, clarify docs."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b2a8dfb6b84f242576c",
    "number": 2441,
    "body": "Based on discussion in several threads, including:\r\n\r\n- #2355 \r\n- #1505 \r\n- this [repo](https://github.com/scabbiaza/ramda-webpack-tree-shaking-examples) comparing tree shaking\r\n\r\nI figured it'd be a good idea to actually add some of this collective knowledge to the docs, since most people probably don't realize their bundle size may be bigger than they'd expect.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2441 from AndrewSouthpaw/patch-1\n\nAdd docs on reducing bundle size for Ramda."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b2b8dfb6b84f242576d",
    "number": 2438,
    "body": "Related to issue [#2380 ](https://github.com/ramda/ramda/issues/2380)\r\nwhere if only one function is passed to `composeK`, `composeK` will try to pass an empty array to `compose` which will throw as it requires at least one argument.",
    "head_branch": "safeComposeK",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b2c8dfb6b84f242576e",
    "number": 2436,
    "body": "",
    "head_branch": "contains-using-string",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2436 from pito-svk/contains-using-string\n\nR.contains using string"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b2d8dfb6b84f242576f",
    "number": 2433,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b2e8dfb6b84f2425770",
    "number": 2432,
    "body": "Change prompted by conversation on issue https://github.com/ramda/ramda/issues/2430",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2432 from JasonSooter/patch-1\n\nUpdate documentation for R.o"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b2f8dfb6b84f2425771",
    "number": 2424,
    "body": "Update copyright years to include 2018",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2424 from JustinTRoss/patch-1\n\nUpdate Copyright Years"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b308dfb6b84f2425772",
    "number": 2422,
    "body": "I haven't changed `@param` and `@returns` in JSDoc.\r\n\r\n#2418.",
    "head_branch": "prepend-append-string",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b318dfb6b84f2425773",
    "number": 2417,
    "body": "The content of this PR makes the behaviour of `R.pipeP` and `R.composeP` more consistent by allowing value-returning functions, even for the first function. It works by wraping in a promise the return value of the first fonction in `R.pipeP`. \r\n\r\nRight now, this kind of composition does not work :\r\n```js\r\nR.pipeP(R.inc, R.inc)(1); // Uncaught TypeError: f.apply(...).then is not a function\r\n```\r\nhowever, since the implementation uses `.then`, it works if the first function returns a Promise : \r\n```js\r\nR.pipeP(Promise.resolve.bind(Promise), R.inc, R.inc)(1); // Promise {<resolved>: 3}\r\n```\r\n\r\nWith this change the first example would work, and swapping functions around in the second example wouldn't break it.\r\n\r\nshortcomings : \r\n- it requires the global `Promise` object since it uses `Promise.resolve`, so in its current form it is probably not mergeable\r\n- it doesn't stick to the documentation\r\n\r\nIs it something that can be considered? Maybe in a new function?",
    "head_branch": "pipep-allow-value-returning-functions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b328dfb6b84f2425774",
    "number": 2412,
    "body": "- Fix the signatures\r\n- Rewrite the docstring - hopefully to make it a bit clearer, and to mention that they works for strings too.",
    "head_branch": "fix_docs_for_startsWith_and_endsWith",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2412 from plumdog/fix_docs_for_startsWith_and_endsWith\n\nFix docs for startsWith and endsWith"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b338dfb6b84f2425775",
    "number": 2409,
    "body": "Added note for developers using ramda version > 0.25\r\n\r\nRamda versions > 0.25 don't have a default export.\r\nSo instead of `import R from 'ramda';`, one has to use `import * as R from 'ramda';`\r\nOr better yet, import only the required functions via `import { functionName } from 'ramda';`\r\n",
    "head_branch": "documentation-related-to-v0.25",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2409 from chiraggshah/documentation-related-to-v0.25\n\nAdded documentation related to changes in default export"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b348dfb6b84f2425776",
    "number": 2408,
    "body": "",
    "head_branch": "fix-traverse-example",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2408 from arizonatribe/fix-traverse-example\n\nSimple fix to the traverse example so that it works in the REPL"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b358dfb6b84f2425777",
    "number": 2403,
    "body": "Add a new `pairwise` function to Ramda, based on F#'s [Seq.pairwise](https://msdn.microsoft.com/en-us/visualfsharpdocs/conceptual/seq.pairwise%5B't%5D-function-%5Bfsharp%5D) function.\r\n\r\nExample usage:\r\n\r\n    R.pairwise([1, 2, 3, 4]);\r\n    > [[1,2], [2,3], [3,4]]",
    "head_branch": "feature/add-pairwise",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b368dfb6b84f2425778",
    "number": 2401,
    "body": "#2396",
    "head_branch": "applySpecIssue2396",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b378dfb6b84f2425779",
    "number": 2398,
    "body": "Notice the docs added must be enhanced since my english is not good.",
    "head_branch": "drive",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b388dfb6b84f242577a",
    "number": 2394,
    "body": "We've done this elsewhere recently, implementing the `prop` version in terms of the `path` one for consistency.\r\n\r\nThis meant removing a test; but I don't think that test was really testing the API we *meant* to expose, only our implementation.  If you disagree, let me know, and we can solve this inconsistency in another manner.",
    "head_branch": "fix-pathOr-propOr-inconsistency",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2394 from CrossEye/fix-pathOr-propOr-inconsistency\n\nreimplementing propOr atop pathOr, fixes #2391"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b398dfb6b84f242577b",
    "number": 2390,
    "body": "The order of arguments expected by mapAccumRight's accumulator function\r\nwas reversed in #1975 (c0292498fa798118b70c8d6298f40c74211e1225), to be\r\nconsistent with reduceRight. There was a bug in the implementation and\r\nit was decided to undo the change and let the argument order be\r\nconsistent with Haskell's mapAccumR in #2386.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Undo change to mapAccumRight accumulator argument order (#2390)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b3a8dfb6b84f242577c",
    "number": 2387,
    "body": "See \"open in repl\" here:\r\nhttp://ramdajs.com/docs/#mapObjIndexed\r\n",
    "head_branch": "mi-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2387 from buzzdecafe/mi-fix\n\nfix for  Duplicate declaration 'values' example error in repl"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b3b8dfb6b84f242577d",
    "number": 2385,
    "body": "Fixes #2383 \r\n\r\nThis change adds an internal function `_cloneWithDescriptors` which creates a shallow object clone, preserving any existing property descriptors. It is used in `assoc` and `dissoc` so that property getters and setters are copied to the returned object.\r\n\r\nSomething that @CrossEye mentioned is that there may be a performance concern. I tested this in a JSPerf [here](https://jsperf.com/ramda-assoc-perf), and found that this performs ~10x worse than before (~1M ops/sec as opposed to ~10M), which could be a reason to reject this change.\r\n\r\nAlso... I changed the test script to run tests in `test/internal` 😄 ",
    "head_branch": "preserve-descriptors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b3c8dfb6b84f242577e",
    "number": 2379,
    "body": "Before the docs showed\r\n\r\n```js\r\nR.tryCatch(R.prop('x'), R.F)(null);      //=> false\r\n```\r\n\r\nwhich actually evaluates as\r\n```js\r\nR.tryCatch(R.prop('x'), R.F)(null);      //=> undefined\r\n```\r\n\r\nUpdated to use JSON.parse as it actually throws exceptions\r\n```js\r\nR.tryCatch(JSON.parse, R.F)({});      //=> false\r\n```\r\n",
    "head_branch": "update-tryCatch-example",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2379 from lolcookie/update-tryCatch-example\n\nUpdate tryCatch example to show correct behaviour"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b3d8dfb6b84f242577f",
    "number": 2376,
    "body": "",
    "head_branch": "add-translation-for-r-dissoc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b3e8dfb6b84f2425780",
    "number": 2373,
    "body": "Hello! Thanks a lot for such a cool library! I really like it!\r\n\r\nHere is a fix for https://github.com/ramda/ramda/issues/2244",
    "head_branch": "issue_2244",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Misleading documentation of \"either\" and \"both\" methods fix (#2373)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b3f8dfb6b84f2425781",
    "number": 2371,
    "body": "",
    "head_branch": "optimize-ap-description",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2371 from adispring/optimize-ap-description\n\nLet R.ap function's signature more formal as an Applicative Functor"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b408dfb6b84f2425782",
    "number": 2369,
    "body": "beta of webpack@4 renamed this key, and its available only there for now, so it is not a breaking change ",
    "head_branch": "rename/side-effects",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2369 from Andarist/rename/side-effects\n\nRename side-effects entry in package.json to sideEffects"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b408dfb6b84f2425783",
    "number": 2368,
    "body": "",
    "head_branch": "optimze-both-either-description",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "link between both, alllPass, either, anyPass (#2368)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b418dfb6b84f2425784",
    "number": 2365,
    "body": "This adds `mergeLeft` and `mergeRight` methods, consistent with the existing `mergeDeepLeft` and `mergeDeepRight` methods. Closes #2225.\r\n\r\nIf `merge` is going to remain as an alias of `mergeRight` then we should probably also introduce a `mergeDeep` alias of `mergeDeepRight` to be consistent. Alternatively we should deprecate `merge`.",
    "head_branch": "mergeLeft-mergeRight",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2365 from hrldcpr/mergeLeft-mergeRight\n\nadd mergeLeft and mergeRight"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b428dfb6b84f2425785",
    "number": 2363,
    "body": "Reverts ramda/ramda#2362",
    "head_branch": "revert-2362-optimze-both-either-description",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2363 from ramda/revert-2362-optimze-both-either-description\n\nRevert \"optimize both & either description\""
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b438dfb6b84f2425786",
    "number": 2362,
    "body": "",
    "head_branch": "optimze-both-either-description",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2362 from adispring/optimze-both-either-description\n\noptimize both & either description"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b448dfb6b84f2425787",
    "number": 2361,
    "body": "",
    "head_branch": "optimize-and-or-comment",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b458dfb6b84f2425788",
    "number": 2360,
    "body": "",
    "head_branch": "link-curry-partial",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2360 from adispring/link-curry-partial\n\nadd link to curry and partial"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b468dfb6b84f2425789",
    "number": 2359,
    "body": "",
    "head_branch": "link-scan-mapAccum",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2359 from adispring/link-scan-mapAccum\n\nlink scan & mapAccum"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b478dfb6b84f242578a",
    "number": 2358,
    "body": "",
    "head_branch": "link-reduceBy-to-groupBy",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2358 from adispring/link-reduceBy-to-groupBy\n\nlink reduceBy to groupBy"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b488dfb6b84f242578b",
    "number": 2357,
    "body": "",
    "head_branch": "add-into-see",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2357 from adispring/add-into-see\n\nadd @see to into"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b498dfb6b84f242578c",
    "number": 2354,
    "body": "Not much to it, tried not to do anything fancy.\r\n\r\nImplementations are in `source/instances/{type}_{method}.js`, dispatching done in `source/dispatch/{class}_{method}.js`. I believe the latter could be created quite easily with code gen if we wanted to.\r\n\r\nSee https://github.com/ramda/ramda/pull/2347",
    "head_branch": "fl-dispatch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b4a8dfb6b84f242578d",
    "number": 2353,
    "body": "This PR changes the argument order of `adjust` as discussed in #1716. As to why that is beneficial, I think @iofjuupasli expressed it very well in the original PR:\r\n\r\n> `update` and `adjust` is very similar method. I frequently change between them in code. But it seems inconsistent that `adjust` have index as second argument, but `update` have index as first argument. This often leads to errors.\r\n\r\nI recently stumbled across this myself when I was implementing `adjust` and `update` for [list](https://github.com/funkia/list).\r\n\r\nThis is a breaking change. But everybody in the original discussion seemed to be in favor of changing it. Letting `adjust` take the index first not only makes it consistent with `update`, it also makes it more consistent with `assoc`, `dissoc`, `objOf`, `set`, and possibly other functions that all take a \"path\" before its associated value.\r\n\r\nWhile at it I also removed a curry test from `adjust` in the spirit of @davidchamber's 5e234c9.\r\n\r\nThis PR closes #1716.",
    "head_branch": "adjust-index-first",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2353 from paldepind/adjust-index-first\n\nChange argument order of adjust"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b4b8dfb6b84f242578e",
    "number": 2352,
    "body": "Closes #1909\r\n\r\nI made two commits in case for some reason we decide to keep the placeholder tests. If the pull request is approved I'll combine the commits before merging.\r\n",
    "head_branch": "curry-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2352 from davidchambers/curry-tests\n\ntest: remove redundant currying and placeholder tests"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b4c8dfb6b84f242578f",
    "number": 2350,
    "body": "~Question: Do you prefer one PR per fn or should I batch them all into a single PR?~\r\n\r\nNote: I'm not completely familiar with the transformer logic, so I have modeled the tests on other existing tests. Please take a look and let me know if I'm testing incorrectly.\r\n\r\nEdit: Upon closer inspection, I realized that there are already transducer-related tests for these functions. With that in mind, I have edited the pull request title to reflect the new scope of this PR.\r\n\r\nFirst mentioned here: https://github.com/ramda/ramda/issues/2346",
    "head_branch": "add-findLastIndex-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2350 from kurtmilam/add-findLastIndex-tests\n\nAdd 'dispatches to transfomer objects' tests for find* functions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b4d8dfb6b84f2425790",
    "number": 2349,
    "body": "",
    "head_branch": "doc-transducer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2349 from kedashoe/doc-transducer\n\nfunctions missing transducer documentation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b4e8dfb6b84f2425791",
    "number": 2348,
    "body": "We need to invoke the anonymous function to receive `_isArguments`.\r\n",
    "head_branch": "is-arguments",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2348 from davidchambers/is-arguments\n\nfix _isArguments"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b4f8dfb6b84f2425792",
    "number": 2347,
    "body": "Supersedes #1938 (exactly one year later).\r\n\r\nUnfortunately the Ramda codebase is littered with special cases, many of which are covered by the test suite. This makes it impossible to adopt principled support for Fantasy Land without making breaking changes. I've used my judgement, but it's possible this pull request should introduce fewer or even more breaking changes. @CrossEye, we *really* need you to tell us how you want dispatching to work. My vote is to remove dispatching from the codebase entirely (removing support for transducers and ad hoc polymorphism), leaving us with only indirect dispatching to `fantasy-land/`-prefixed methods (provided by sanctuary-type-classes).\r\n",
    "head_branch": "sanctuary-type-classes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b508dfb6b84f2425793",
    "number": 2344,
    "body": "_IsTransformer was naively checking for an object property on an\r\nargument without first ensuring that the argument was neither null nor\r\nundefined.\r\n\r\nExample:\r\n```js\r\ntap( console.log, null ) //-> Cannot read property '@@transducer/step' of null\r\ntap( console.log, undefined ) //-> Cannot read property '@@transducer/step' of undefined\r\n```\r\n\r\n[REPL](https://goo.gl/JT7LE2)",
    "head_branch": "check-undefined-isTransformer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2344 from kurtmilam/check-undefined-isTransformer\n\nGuard null and undefined before accessing prop in _IsTransformer"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b508dfb6b84f2425794",
    "number": 2343,
    "body": "Added Increasing and Decreasing capabilities.\r\nAdded Inclusive `to` parameter.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b518dfb6b84f2425795",
    "number": 2342,
    "body": "Refers to #2264.\r\nAdded posibility to use transucers with slice. \r\nTest made from issue scenario.",
    "head_branch": "r.slice-transducers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b528dfb6b84f2425796",
    "number": 2341,
    "body": "",
    "head_branch": "link-cond-unless-when-ifElse",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add link to cond, ifElse, unless and when. (#2341)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b538dfb6b84f2425797",
    "number": 2338,
    "body": "Object.is is identical to R.identical. Similar to what we did with\nObject.assign few versions ago, this PR sets R.identical to\n~~curry(Object.is) when possible, and polyfills it otherwise.\n\nAlso in this PR:\n1. Simply “polyfilling” conventions (which I am to blame for, btw)\n2) In R.equals use _objectIs rather than identical, which is what we\nshould do at least until curry performance issues are addressed. This\ncode path is simply evaluated too much for any abstraction to survive.",
    "head_branch": "object-is-identical",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2338 from asaf-romano/object-is-identical\n\nUse Object.is as the implementation of R.identical if available"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b548dfb6b84f2425798",
    "number": 2334,
    "body": "This is related to https://github.com/ramda/ramda/issues/2328.\r\n\r\nReason behind this is that, some internal functions used the contains and toString namespaces, so that rollup can only add $1 to the real functions' names.\r\n\r\nBelow is the doc which I used this fix to generate:\r\n\r\n![contains](https://user-images.githubusercontent.com/4587603/31501046-e90ef7fe-afb4-11e7-8bdc-6f67ee19d29e.png)\r\n![tostring](https://user-images.githubusercontent.com/4587603/31501056-eff07ab6-afb4-11e7-93fe-da51cf7cd667.png)\r\n\r\n",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b558dfb6b84f2425799",
    "number": 2332,
    "body": "Fixes #2328\r\n\r\nWith this PR and ramda/ramda.github.io#200 merged in, new documentation builds should be ok.",
    "head_branch": "fix/jsdocs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixed JSDocs for __ (#2332)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b568dfb6b84f242579a",
    "number": 2329,
    "body": "",
    "head_branch": "optimize-propEq-see",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2329 from adispring/optimize-propEq-see\n\noptimize propEq see from where to whereEq"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b578dfb6b84f242579b",
    "number": 2327,
    "body": "In current 0.25.0 document, there are extra _ applied to [trim](http://ramdajs.com/docs/#_trim) and [keys](http://ramdajs.com/docs/#_keys).\r\n\r\nThis is caused by the variable name which jsdocs used to generate.\r\n\r\n![keysandtrim](https://user-images.githubusercontent.com/4587603/31439834-699fd276-aed9-11e7-9b6d-7b1a173074d0.png)\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix trim and keys which cause isses when generating document (#2327)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b588dfb6b84f242579c",
    "number": 2326,
    "body": "I don't know if this was made on purpose to break the code in half, but looks like GitHub handles such a long line without a problem.\r\n\r\nI've also seen it was fixed in the past in #2221.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2326 from feimosi/patch-1\n\nPut the whole bookmarklet code inside markdown snippet"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b598dfb6b84f242579d",
    "number": 2325,
    "body": "A fix for https://github.com/ramda/ramda/issues/2242 \r\n\r\nIf you want any more edits here, I'm happy to put them in!",
    "head_branch": "if-else-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2325 from pauloliver/if-else-docs\n\nFix ifElse docs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b5a8dfb6b84f242579e",
    "number": 2324,
    "body": "",
    "head_branch": "docs/applyTo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "docs(applyTo): fix jsdoc alignment (#2324)\n\n:+1:"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b5b8dfb6b84f242579f",
    "number": 2323,
    "body": "",
    "head_branch": "prepub-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix version updates missed by prepublish and patch prepublish script (#2323)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b5c8dfb6b84f24257a0",
    "number": 2321,
    "body": "It was not clear that this functionality was supported until I looked at the tests.",
    "head_branch": "adjust-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2321 from codeclown/adjust-docs\n\nAdd examples of negative indexes to R.update and R.adjust"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b5d8dfb6b84f24257a1",
    "number": 2320,
    "body": "Seems like instructions in `CONTRIBUTING.md` referred to wrong folder.",
    "head_branch": "contributing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update contributing.md (#2320)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b5e8dfb6b84f24257a2",
    "number": 2318,
    "body": "",
    "head_branch": "prepub-src",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "use new source directory in prepublish script (#2318)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b5f8dfb6b84f24257a3",
    "number": 2313,
    "body": "#1868 ",
    "head_branch": "remove-insersectionWith",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2313 from kedashoe/remove-insersectionWith\n\nremove intersectionWith"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b5f8dfb6b84f24257a4",
    "number": 2311,
    "body": "Closes #1714 ",
    "head_branch": "flip-arity",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2311 from kedashoe/flip-arity\n\nfix flip to return function with the same arity as the original"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b608dfb6b84f24257a5",
    "number": 2310,
    "body": "Closes #1384 ",
    "head_branch": "dep-memoize",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2310 from kedashoe/dep-memoize\n\ndeprecate memoize"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b618dfb6b84f24257a6",
    "number": 2309,
    "body": "Closes #1846, #1847",
    "head_branch": "apply-to",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2309 from kedashoe/apply-to\n\nadd thrush combinator as applyTo"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b628dfb6b84f24257a7",
    "number": 2306,
    "body": "@donnut is not answering, so I decided to try myself\r\n\r\nI have tried to use [dtslint](https://github.com/Microsoft/dtslint) instead of tslint, but ran into number of errors\r\nBecause `tests.ts` still doesn't use `$ExpectType` feature of dtslint, I've decided to do without it\r\n\r\nIn future I want to integrate number of [open pr's from DefenitelyTyped](https://github.com/DefinitelyTyped/DefinitelyTyped/pulls?utf8=%E2%9C%93&q=is%3Apr%20is%3Aopen%20ramda) and add missing types",
    "head_branch": "feature/integrate_ts_typings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b638dfb6b84f24257a8",
    "number": 2305,
    "body": "As discussed in #2059 we are unsatisfied that `prop` and `path` have\r\ndifferent behaviour when passing `undefined` as the object.\r\n\r\nWe could not yet agree which behaviour we want to have but at least\r\nwe want to have the same behaviour. To achieve that, we now\r\nreimplement `prop` with `path`.\r\n\r\nSo if we ever define the behaviour of `path` then `prop`\r\nautomatically also has the same behaviour.\r\n\r\nThis also closes #1941.",
    "head_branch": "reimplement_prop_via_path",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2305 from datenreisender/reimplement_prop_via_path\n\nReimplement prop via path"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b648dfb6b84f24257a9",
    "number": 2300,
    "body": "Fix the first transduce example that had an incorrect result on it",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b658dfb6b84f24257aa",
    "number": 2299,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b668dfb6b84f24257ab",
    "number": 2298,
    "body": "The `precoverage` script just called `pretest`, however `pretest` was removed in PR #1928.\r\n\r\nSo, because of `precoverage` failing, we've been unable to run `coverage` since.",
    "head_branch": "fix-coverage",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2298 from mattgrande/fix-coverage\n\nRemove precoverage script"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b678dfb6b84f24257ac",
    "number": 2297,
    "body": "",
    "head_branch": "feature/mergeAllProps",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b688dfb6b84f24257ad",
    "number": 2294,
    "body": "Spell correction in tests R.last",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2294 from myrubapa/master\n\nSpell correction in tests R.last"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b698dfb6b84f24257ae",
    "number": 2293,
    "body": "It would be great to be able to use ramda directly through https://unpkg.com/ramda",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2293 from porsager/patch-1\n\nAdd unpkg and jsdelivr field to package.json"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b6a8dfb6b84f24257af",
    "number": 2292,
    "body": "Add R.first function",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b6b8dfb6b84f24257b0",
    "number": 2288,
    "body": "Add recursive predicating to R.where. If this pr can be accepted, I'll add recursive predicating to R.whereEq.",
    "head_branch": "recursive-where",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b6c8dfb6b84f24257b1",
    "number": 2287,
    "body": "",
    "head_branch": "fix/typo-in-readme",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b6d8dfb6b84f24257b2",
    "number": 2286,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2286 from char0n/master\n\ndocs(concat): add note about Semigroup fantasy-land spec"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b6e8dfb6b84f24257b3",
    "number": 2284,
    "body": "",
    "head_branch": "zipObjDoc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix #2279: zipObj doc (#2284)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b6f8dfb6b84f24257b4",
    "number": 2280,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2280 from char0n/master\n\ndocs(empty): add note about fantasy-land Monoid spec"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b708dfb6b84f24257b5",
    "number": 2277,
    "body": "See #2273 discussion.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2277 from CrossEye/master\n\nAdding link to Cookbook"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b718dfb6b84f24257b6",
    "number": 2276,
    "body": "Used `repeat` instead of `times(always)`",
    "head_branch": "update-call-comment",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2276 from zehua/update-call-comment\n\nUpdated example for call"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b728dfb6b84f24257b7",
    "number": 2275,
    "body": "Change cdnjs link form `cdn.jsdelivr.net/ramda/0.24.1/ramda.min.js` to [//cdn.jsdelivr.net/npm/ramda@0.24.1/dist/ramda.min.j](//cdn.jsdelivr.net/npm/ramda@0.24.1/dist/ramda.min.j)",
    "head_branch": "changeReadme-pr",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2275 from woaiwodib107/changeReadme-pr\n\nchange Readme: cdnjs link"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b738dfb6b84f24257b8",
    "number": 2267,
    "body": "- While `path` allows you to navigate an object\r\n- `chainPath` allows you to navigate through a `List` of\r\ndeeply nested objects and flattens the result\r\n- Filters out undefined values in the resulting array\r\n- See tests for examples",
    "head_branch": "feat/chainPath",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b738dfb6b84f24257b9",
    "number": 2261,
    "body": "`R.identity` is a great placeholder or default function. I use it a lot when a function may not exist.\r\n\r\nBut because of the nature of how `R.identity` is used, increased brevity would be great.\r\n\r\n```\r\n// this is annoying\r\nif (someFunction) {\r\n  someFunction();\r\n}\r\n\r\n// this is better\r\n(someFunction || R.identity)();\r\n\r\n// this would be even better\r\n(someFunction || R.I)();\r\n```\r\n\r\nI think `R.I` would be a perfect alias. `I` is not just the first letter of \"identity\", it is also commonly used to denote the identity matrix in mathematics.\r\n\r\nI don't know how the maintainers feel about aliases, but I think this would be cool.",
    "head_branch": "feat/alias-for-identity",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b748dfb6b84f24257ba",
    "number": 2258,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add links to typing repos to readme (#2258)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b758dfb6b84f24257bb",
    "number": 2256,
    "body": "",
    "head_branch": "whileXXXWithString",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2256 from adispring/whileXXXWithString\n\nadd String Type to drop/takeWhile API"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b778dfb6b84f24257bc",
    "number": 2254,
    "body": "…putting commonjs files, using rollup to make UMD builds\r\n\r\nfixes #1968\r\n\r\nI'm a little hot headed and prepared a refactor based on [this request](https://github.com/ramda/ramda/pull/1977#issuecomment-322070124).\r\n\r\nThis is a breaking change for cjs users, so migration/transition paths need to be established.\r\n\r\ncc @jonaskello @kedashoe ",
    "head_branch": "refactor/es6-modules",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Refactored to es6 modules"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b788dfb6b84f24257bd",
    "number": 2253,
    "body": "…itialization time\r\n\r\nI might be wrong, but I have not found in my head any reason why those (and many others) are wrapped in IIFEs. If this PR makes sense for you, I'll amend it later with the same change for all of the other modules.",
    "head_branch": "refactor/uniife-modules",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b788dfb6b84f24257be",
    "number": 2250,
    "body": "fixed incorrect wrapping parens causing the last parameter to not get called in R.map",
    "head_branch": "constructN",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b798dfb6b84f24257bf",
    "number": 2248,
    "body": "This PR fixes the broken type constraint of `R.sequence`.\r\n\r\n**Currently Broken**\r\nR.sequence lists the type constraint `(Applicative f, Traversable t)` in it's type signature, but this breaks for custom data types.\r\n\r\n*Example*\r\nAssuming that `Id` implements `Traversable`, the following *is not true*\r\n`R.sequence(R.of, Id([1, 2, 3])) === [Id(1), Id(2), Id(3)]`\r\n\r\nThis is because `R.sequence` only checks for `sequence` before deferring to `reduceRight` as shown [here](https://github.com/ramda/ramda/blob/master/src/sequence.js#L35).\r\n\r\n**The Fix**\r\nPerform an additional check for `fantasy-land/traverse` *after* checking for `sequence`. If the type *does implement fantasy-land/traverse*, sequence will defer to it.\r\n\r\n\r\nTo write the tests for this, I had to implement `Traversable` on something. I chose `Maybe` since it is what is used in the original issue that inspired me to create this PR, and `Id` already has `sequence`, so I wouldn't have been able to write *failing tests first*. To implement Traversable, I also added Foldable, but only for \"correctness\" since `reduce` isn't used in any tests.\r\n\r\nThis would fix the bug in #2243 ",
    "head_branch": "fix/sequence-traversable-constraint",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b7a8dfb6b84f24257c0",
    "number": 2241,
    "body": "From the docs:\r\n\r\n> R.pipeK(f, g, h) is equivalent to R.pipe(R.chain(f), R.chain(g), R.chain(h))\r\n\r\n> R.composeK(h, g, f) is equivalent to R.compose(R.chain(h), R.chain(g), R.chain(f))\r\n\r\nThat's not actually true, as the first function to be applied (`f`) is not `chain`'ed (see [composeK.js:42](https://github.com/ramda/ramda/blob/v0.24.1/src/composeK.js#L42)). The docs should rather state:\r\n\r\n> R.pipeK(f, g, h) is equivalent to R.pipe(f, R.chain(g), R.chain(h))\r\n\r\n> R.composeK(h, g, f) is equivalent to R.compose(R.chain(h), R.chain(g), f)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2241 from gmunguia/master\n\nFix composeK, pipeK descriptions."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b7b8dfb6b84f24257c1",
    "number": 2237,
    "body": "`R.type` provides same functionality",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b7c8dfb6b84f24257c2",
    "number": 2236,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix traverse doc (#2236)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b7d8dfb6b84f24257c3",
    "number": 2233,
    "body": "I've updated the type signatures so as not to imply that certain functions take curried functions when they don't. I've also tried to normalize the spacing and paren placement on functions with 2+ arity functions parameters.",
    "head_branch": "uncurry-type-sigs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2233 from Bradcomp/uncurry-type-sigs\n\nupdated type sigs for function parameters"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b7e8dfb6b84f24257c4",
    "number": 2232,
    "body": "I do not know how to implement it properly in ramda-way - I'm unsure about this `stackA, stackB` thing.\r\n\r\nBut it works, and I'm ready to re-write if you can provide any good advice about how to do it better.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix Set and Map equality"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b7f8dfb6b84f24257c5",
    "number": 2230,
    "body": "",
    "head_branch": "fix-none-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2230 from lazebny/fix-none-docs\n\nFixed typo in none function docs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b808dfb6b84f24257c6",
    "number": 2229,
    "body": "Tap will act as tranducer if given a transformer in the second parameter",
    "head_branch": "transducer-for-tap",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2229 from wennergr/transducer-for-tap\n\nAdd transduce support for tap"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b818dfb6b84f24257c7",
    "number": 2224,
    "body": "…where",
    "head_branch": "propXToWhereLink",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2224 from adispring/propXToWhereLink\n\nadd links between propEq and whereEq, also between propSatisfies and …"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b828dfb6b84f24257c8",
    "number": 2221,
    "body": "view git preview: https://github.com/aretecode/ramda/blob/475395ef292fd04d3c52bb027d20e16720fc04cc/BOOKMARKLET.md",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2221 from aretecode/patch-1\n\nfix bookmarklet code block + raw"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b838dfb6b84f24257c9",
    "number": 2216,
    "body": "For the moment docs example for the constructN function \r\n```\r\n// Variadic Constructor function\r\nfunction Salad() {\r\n  this.ingredients = arguments;\r\n};\r\nSalad.prototype.recipe = function() {\r\n  var instructions = R.map((ingredient) => (\r\n    'Add a whollop of ' + ingredient, this.ingredients)\r\n  )\r\n  return R.join('\\n', instructions)\r\n}\r\n\r\nvar ThreeLayerSalad = R.constructN(3, Salad)\r\n\r\n// Notice we no longer need the 'new' keyword, and the constructor is curried for 3 arguments.\r\nvar salad = ThreeLayerSalad('Mayonnaise')('Potato Chips')('Ketchup')\r\nconsole.log(salad.recipe());\r\n// Add a whollop of Mayonnaise\r\n// Add a whollop of Potato Chips\r\n// Add a whollop of Potato Ketchup\r\n```\r\nproduces following result in [REPL](http://ramdajs.com/repl/?v=0.24.1#;%2F%2F%20Variadic%20Constructor%20function%0Afunction%20Salad%28%29%20%7B%0A%20%20this.ingredients%20%3D%20arguments%3B%0A%7D%3B%0ASalad.prototype.recipe%20%3D%20function%28%29%20%7B%0A%20%20var%20instructions%20%3D%20R.map%28%28ingredient%29%20%3D%3E%20%28%0A%20%20%20%20%27Add%20a%20whollop%20of%20%27%20%2B%20ingredient%2C%20this.ingredients%29%0A%20%20%29%0A%20%20return%20R.join%28%27%5Cn%27%2C%20instructions%29%0A%7D%0A%0Avar%20ThreeLayerSalad%20%3D%20R.constructN%283%2C%20Salad%29%0A%0A%2F%2F%20Notice%20we%20no%20longer%20need%20the%20%27new%27%20keyword%2C%20and%20the%20constructor%20is%20curried%20for%203%20arguments.%0Avar%20salad%20%3D%20ThreeLayerSalad%28%27Mayonnaise%27%29%28%27Potato%20Chips%27%29%28%27Ketchup%27%29%0Aconsole.log%28salad.recipe%28%29%29%3B%0A%2F%2F%20Add%20a%20whollop%20of%20Mayonnaise%0A%2F%2F%20Add%20a%20whollop%20of%20Potato%20Chips%0A%2F%2F%20Add%20a%20whollop%20of%20Potato%20Ketchup)\r\n> function n(r){return NaN|b(r)?n:t.apply(this,arguments)} does not have a method named \"join\"\r\n\r\nThis PR fixes wrong parenthesis placement for R.map call",
    "head_branch": "constructN-fix-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2216 from alnero/constructN-fix-docs\n\nFix to constructN docs example"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b848dfb6b84f24257ca",
    "number": 2212,
    "body": "I find myself looking at the source for this one (e.g. \"is `undefined` an \"Object\" or \"Null\" or something else?\"). Perhaps controversial since we never really do assignments of `undefined`",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2212 from chriddyp/patch-1\n\nAdd example of how R.type treats `undefined`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b858dfb6b84f24257cb",
    "number": 2211,
    "body": "I'm really sorry about didn't think about markup from very beginnig...\r\n\r\nNow markup is like this:\r\n![image](https://user-images.githubusercontent.com/8372070/27158818-ab110178-5171-11e7-9904-26077db65b1e.png)\r\n\r\nBut I should to deal it like this:\r\n![image](https://user-images.githubusercontent.com/8372070/27158830-b762e428-5171-11e7-89bd-f46bdd2006ad.png)\r\n\r\nI think the last variant is slightly better...\r\nSorry for disturbing :disappointed: ",
    "head_branch": "translations-markup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2211 from ivanzusko/translations-markup\n\nchore(fix): translations markup in README.md"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b868dfb6b84f24257cc",
    "number": 2209,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2209 from rtivital/master\n\nFix applySpec docs indentation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b878dfb6b84f24257cd",
    "number": 2208,
    "body": "The same situation with [https://github.com/ramda/ramda/pull/2203](https://github.com/ramda/ramda/pull/2203)\r\n\r\n![image](https://user-images.githubusercontent.com/8372070/27130266-4ae95e52-510e-11e7-8f7d-73961d0cff5a.png)\r\n\r\nI'm suggesting to add extra `//` to display example in the REPL without crashing:\r\n![image](https://user-images.githubusercontent.com/8372070/27130310-74f96584-510e-11e7-85a2-dfbe101d612f.png)\r\n\r\nLink to working [REPL](http://ramdajs.com/repl/?v=0.24.1#?R.reduceRight%28R.subtract
    "head_branch": "reduceright-method-example",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add additional '//' for REPL demo (#2208)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b888dfb6b84f24257ce",
    "number": 2205,
    "body": "I think i corrected the issue. There was a break cutting off half of the code because of a newline somewhere in the middle of the snippet. I deleted the newline and adjusted the ``` at the end. I still can't get your bookmarklet to work correctly however... That'll be another issue for another time however.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b888dfb6b84f24257cf",
    "number": 2203,
    "body": "While opening REPL from the documentation page we are getting this:\r\n\r\n![image](https://user-images.githubusercontent.com/8372070/27039013-57c34e32-4f95-11e7-83ed-93afe5523a0c.png)\r\n\r\nI offer to add extra `//` on each line of the explanation so that will not break REPL example:\r\n\r\n![image](https://user-images.githubusercontent.com/8372070/27039073-86a7a144-4f95-11e7-9a57-4e7707cf86ed.png)\r\n",
    "head_branch": "reduce-method-example",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Reduce method example (#2203)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b898dfb6b84f24257d0",
    "number": 2202,
    "body": "updated package jsverify from 0.7.3 to 0.8.2\r\n Npm link :  https://www.npmjs.com/package/jsverify\r\n Repository link : https://github.com/jsverify/jsverify/releases",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b8a8dfb6b84f24257d1",
    "number": 2201,
    "body": "Hello, everyone!\r\nI've started translating into the Ukrainian language. Hope you will accept it.\r\n\r\nCheers",
    "head_branch": "ukrainian-translation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "link to the Ukrainian translation (#2201)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b8b8dfb6b84f24257d2",
    "number": 2200,
    "body": "Instead of creating copy function on each _clone call, create it once.\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b8c8dfb6b84f24257d3",
    "number": 2198,
    "body": "`addDefault` is used to add one default returned value to function. If function's result is `null`, `undefined` or `NaN`, the given default value will be returned.\r\n\r\nDiscuss link: https://github.com/ramda/ramda/issues/2111",
    "head_branch": "addDefault",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b8d8dfb6b84f24257d4",
    "number": 2197,
    "body": "",
    "head_branch": "bugfix/o-example-typo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2197 from adispring/bugfix/o-example-typo\n\nfix: o.js example lastName -> name.last"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b8e8dfb6b84f24257d5",
    "number": 2195,
    "body": "Rather than iterating the names to omit for every single property name,\r\nwhich is potentially O(n*m) complexity, create a map prior to iterating\r\nthe source object, which we can then look up in O(1) time for each\r\nproperty name.\r\n\r\nThis makes the omit function O(n+m) rather than O(n*m).\r\n\r\n---\r\n\r\nResubmitted from #2192",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2195 from tomhicks/master\n\nImprove performance of omit"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b8f8dfb6b84f24257d6",
    "number": 2194,
    "body": "",
    "head_branch": "optimize-innerJoin",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b908dfb6b84f24257d7",
    "number": 2193,
    "body": "Hello! This PR similar with #2188.\r\n\r\nWhen I read the documentation I have found another one mistake in `scan` method.",
    "head_branch": "fix-scan-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2193 from owanturist/fix-scan-docs\n\nScan doc was fixed"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b918dfb6b84f24257d8",
    "number": 2192,
    "body": "Rather than iterating the names to omit for every single property name,\r\nwhich is potentially O(n*m) complexity, create a map prior to iterating\r\nthe source object, which we can then look up in O(1) time for each\r\nproperty name.\r\n\r\nThis makes the omit function O(n+m) rather than O(n*m).\r\n\r\n---\r\n\r\nMaybe consider documenting the time complexity of functions like this, because anything over a couple of items in the names list, and it can get really slow.\r\n\r\nThe previous implementation is generally OK if you have hardcoded a bunch of things to omit (e.g. `omit(['id'], obj)`) but if you use this for something like excluding items from a set by id (e.g. `omit(dynamicListOfIds, fetchedData)` it can get really, really slow. Like blocking execution for seconds at a time slow.\r\n\r\n---\r\n\r\nOh, and I also fixed the usage of omit in the `indexyBy` tests. It was passing the thing to omit as a string not an array, which according to the docs is not supported. It was working in the tests for whatever reason, so this might be considered a breaking change, even though it wasn't supposed to work that way in the past.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b928dfb6b84f24257d9",
    "number": 2191,
    "body": "",
    "head_branch": "optimize-mergeDeepWith-comment",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b938dfb6b84f24257da",
    "number": 2190,
    "body": "* Use samples better reflect the calculation of Cartesian product\r\n\r\nThis PR comes from a suggestion from Scott Sauyet in [one discussion on StackOverflow](https://stackoverflow.com/questions/36558598/cant-wrap-my-head-around-lift-in-ramda-js/44306719?noredirect=1#comment75702132_44306719).",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b948dfb6b84f24257db",
    "number": 2189,
    "body": "As required for #2093.",
    "head_branch": "array-indices-assoc-path",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b958dfb6b84f24257dc",
    "number": 2188,
    "body": "Hello! Thanks for great library.\r\n\r\nWhen I read the documentation I have found one mistake which confused me. It relative with a transducer signature. Documentation says that signature of the [transducer](http://ramdajs.com/docs/#transduce) looks like `(c → c) → (a,b → a) → a → [b] → a` but below the doc says\r\n> The iteration is performed with R.reduce after initializing the transducer.\r\n\r\nI think that signature of the transducer should be looks like `(c → c) → ((a, b) → a) → a → [b] → a`.",
    "head_branch": "fix-transducer-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2188 from owanturist/fix-transducer-docs\n\nTransducer doc was fixed"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b968dfb6b84f24257dd",
    "number": 2187,
    "body": "After 0.24.0 calling memoize with 2 or more arguments stopped working.\r\n\r\nissue: #2183\r\n\r\nTo fix it, we call **toString** with **arguments**:\r\n\r\nBefore:\r\n```js\r\nmemoizeWith(toString);\r\n```\r\n\r\nAfter:\r\n```js\r\nmemoizeWith(function() {\r\n  return toString(arguments);\r\n});\r\n```",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix memoize with more than 1 argument"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b978dfb6b84f24257de",
    "number": 2186,
    "body": "After 0.24.0 calling memoize with 2 or more arguments stoped working.\r\n\r\nissue: #2183\r\n\r\nTo fix it, we call **toString** with **arguments**.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b988dfb6b84f24257df",
    "number": 2185,
    "body": "After version 0.24.0 memoize with more than 1 argument stoped working.\r\n\r\nissue: https://github.com/ramda/ramda/issues/2183\r\n\r\nTo fix it, I created toStringN() examples:\r\n```js\r\n\tR.toStringN(0, -0); // '0,-0'\r\n\tR.toStringN(true, false); // 'true,false'\r\n```",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b998dfb6b84f24257e0",
    "number": 2184,
    "body": "https://github.com/ramda/ramda.github.io/pull/179",
    "head_branch": "_isArrayLike-jsdoc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2184 from kedashoe/_isArrayLike-jsdoc\n\nfix _isArrayLike jsdoc now that it is internal"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b9a8dfb6b84f24257e1",
    "number": 2182,
    "body": "https://github.com/ramda/ramda/pull/1877\r\n\r\nThis turned out to be a bit more involved than expected. If someone could take a quick glance would be appreciated!",
    "head_branch": "remove-deprecated",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2182 from kedashoe/remove-deprecated\n\nmove deprecated isArrayLike to internal"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b9b8dfb6b84f24257e2",
    "number": 2181,
    "body": "This PR is assuming that fantasy-land's `ap` is supposed to be like Haskell's `(<**>) :: Applicative f => f a -> f (a -> b) -> f b`, and not like `flip (<*>) :: Applicative f => f a -> f (a -> b) -> f b` (which is how Ramda currently treats it).\r\n\r\nMy test case attempts to show the difference by using `Either`.  The important case is the first one:\r\n\r\n```javascript\r\neq(R.ap(leftFn, leftVal).simple(), leftFn.simple());\r\n\r\n// i.e: forall e x. R.ap(Left(e), x) = Left(e)\r\n```",
    "head_branch": "fix/ap",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b9c8dfb6b84f24257e3",
    "number": 2179,
    "body": "transducer is made for lazy evaluation. This is a power feature. I'd like to highlight it in the document. \r\n\r\nIn order to do lazy evaluation with `R.transcue`, we could compose with functions that return `R.reduced` in the transducer for termination, such as `R.take`. But what's important is that the execution order of the composed functions is from left to right, which is the opposite order when calling the transducer directly. \r\n\r\nFor instance\r\n```\r\nvar numbers = [1, 2, 3, 4];\r\nvar transducer = R.compose(R.map(R.add(1)), R.take(2));\r\n```\r\nIf I call the `transducer` directly like this `transducer(numbers)`, then `R.take(2)` will be executed first, then `R.map(R.add(1))` , which is \"right to left\" order\r\nIf I call the `transducer` with `R.transduce` like this:\r\n```\r\nR.transduce(transducer, R.flip(R.append), [], numbers); //=> [2, 3]\r\n```\r\nthen `R.map(R.add(1))` will be executed first, `R.take(2)` next, which is \"left to right\" order.\r\n\r\nHowever since `map f . take x == take x . map f`, regardless \"left to right\" or \"right to left\" order, they both yield to the same result. \r\n\r\nThe current document uses this as the example, I think it's not clear enough for reader to notice the execution order of the composed transducers, as well as the lazy evaluation feature.\r\n\r\nIn this PR, I'm trying to make it more clear by adding one more example so that the reader will see transducers are exeucted from left to right. That is, `R.filter(isOdd)` will be executed first, then `R.take(1)` will terminate before traversing to the end of the array. The other way round won't make sense.\r\n\r\nPlease review. Thanks!",
    "head_branch": "add-example-for-transduce",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2179 from zhangchiqing/add-example-for-transduce\n\nAdd lazy evaluation example for R.transduce"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b9d8dfb6b84f24257e4",
    "number": 2178,
    "body": "Fixes the issue at https://github.com/ramda/ramda.github.io/issues/177.\r\n\r\nMake `__` => `R.__`.",
    "head_branch": "fix-where-inline-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2178 from scriptype/fix-where-inline-docs\n\nFix confusing usage of R.__ in the docs of .where"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b9e8dfb6b84f24257e5",
    "number": 2176,
    "body": "Hello.\r\n\r\nQuite often while reading the online docs I feel frustrated because in function descriptions, sometimes function names are clickable, and sometimes they are not.\r\nTo ease the navigation and discoverability of related functions, I added the missing links between functions, following what had already been done for a few of them.\r\n\r\nSo, in this PR:\r\n- no wordings was changed, just added links\r\n- I built the docs on my local machine to try to click on each of them and trap eventual typos.\r\n\r\nPotential fixes for a future PR: light inconsistency between Ramda's function starting with a `R.`prefix  and sometimes not.",
    "head_branch": "links",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2176 from Delapouite/links\n\ndocs: add missing intra links between Ramda's functions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7b9f8dfb6b84f24257e6",
    "number": 2175,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "added test for fantasy-land/map test (#2175)\n\nadded test for fantasy-land/map"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ba08dfb6b84f24257e7",
    "number": 2174,
    "body": "#1916 Redo since I lost access to original repo. Not sure if you want signatures just let me know which one of these to use\r\n\r\n```\r\nap :: Function x (a -> b) -> Function x a -> Function x b\r\n```\r\n```\r\nap :: (x -> a -> b) -> (x -> a) -> (x -> b)\r\n```\r\n```\r\nap :: (a -> b -> c) -> (a -> b) -> (a -> c)\r\n```",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2174 from MikaAK/patch-1\n\nDocument R.ap as S Combinator"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ba18dfb6b84f24257e8",
    "number": 2173,
    "body": "",
    "head_branch": "or_test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2173 from pepewritescode/or_test\n\nChange && to || in test case for or"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ba28dfb6b84f24257e9",
    "number": 2171,
    "body": "Hi. These two functions offer similar abilities.",
    "head_branch": "ascend",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2171 from Delapouite/ascend\n\nAdd @see tags between ascend and descend"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ba38dfb6b84f24257ea",
    "number": 2170,
    "body": "Hi, this PR adds a few more links between arity functions.",
    "head_branch": "ary",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2170 from Delapouite/ary\n\nAdd @see tags linking binary, nAry and unary"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ba38dfb6b84f24257eb",
    "number": 2168,
    "body": "According the documentation of `reduce`:\r\n\r\n    The iterator function receives two values: *(acc, value)*. It may use \r\n   `R.reduced` to shortcut the iteration.\r\n\r\nand\r\n\r\n    Dispatches to the `reduce` method of the third argument, if present.\r\n\r\nThis pull request fixes the situation where an object with a `reduce` method is passed in list position and a transducer which uses `reduced` (such as `take`) is used as the reducing fn.",
    "head_branch": "fixes/reduced-values-when-dispatching-to-reduce",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2168 from ognen/fixes/reduced-values-when-dispatching-to-reduce\n\nFix reduced value handling when dispatching to objects implementing the iterable/iterator protocols"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ba48dfb6b84f24257ec",
    "number": 2164,
    "body": "Hi, I have refactored the function values",
    "head_branch": "refactor-values",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ba58dfb6b84f24257ed",
    "number": 2163,
    "body": "Hi, I have refactored the function values.",
    "head_branch": "refactor-values",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ba68dfb6b84f24257ee",
    "number": 2158,
    "body": "Obvious ;)",
    "head_branch": "test-annotations",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2158 from dmitriz/test-annotations\n\nCorrect test label"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ba78dfb6b84f24257ef",
    "number": 2156,
    "body": "Pluck is probably one of our more well used Ramda functions. If we see `map(prop(...))` during code review we'll typically change it to a `pluck`. I recently wrote some code that was using `map(prop())` to pull some values off a nested object, and of course it was pointed out that `pluck` could be used there as well.\r\n\r\nWhile obvious in retrospect, it isn't obvious from the documentation that `pluck` can be used on things that aren't arrays. To me, this behavior seems useful, and isn't ad-hoc due to the `Functor` instance for objects. \r\n\r\nI understand the desire for the docs to be easily understandable, and I know that `Functor` is less well known in the JS community than `Array` is. I don't want to remove the idea that this function operates on lists, simply add in the idea that it will work with other Functors as well.\r\n\r\nI wasn't really sure what to do with the jsdoc annotations.  Looking at `map` it still has Array as the type for the second parameter and return value, so I left that here as well.",
    "head_branch": "pluck-signature",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2156 from Bradcomp/pluck-signature\n\nUpdated type for pluck"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ba88dfb6b84f24257f0",
    "number": 2147,
    "body": "We've just finished Chinese translation of ramda, and build a website: http://ramda.cn/.\r\n\r\nThe work is done by five of us(4 other colleagues). we then checked the translation twice carefully to assure quality.\r\n\r\nWe currently replace the English comment with Chinese in-place on the api file, in the forked [repo](https://github.com/ramdacn/ramda). I'm writing some scripts to move the translation to a single directory, which will make the future translation more easily: \r\n\r\n1. update the forked ramda repo with original repo;\r\n2. show the change parts;\r\n3. only translate the change apis;\r\n4. update the forked ramda.github.io with new translation;\r\n5. update Chinese website.\r\n\r\nShould the translations separate from original ramda(only add a link), or be part of it?",
    "head_branch": "chinese-translation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2147 from adispring/chinese-translation\n\nadd Chinese translation link to README.md (home page)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ba98dfb6b84f24257f1",
    "number": 2146,
    "body": "Added a `repeatWith` function that behaves like `replicateM` in Haskell.\r\n\r\nThe function takes a nullary function `f` and creates a list of `n` containing the return values of `f` for `n` consecutive calls.\r\n\r\nExample:\r\n```\r\nR.repeatWith(Math.random, 3) \r\n//=> [ 0.44077919192880755, 0.09582463920980899, 0.13967090898447432 ]\r\n```\r\n\r\nThe side effects produced by `f` will occur in the order from \"left to right\":\r\n```\r\nvar i = 0;\r\nR.repeatWith(() => i = i+1, 5) //=> [1,2,3,4,5]\r\n```\r\n\r\nCloses #2145 ",
    "head_branch": "repeatWith",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7baa8dfb6b84f24257f2",
    "number": 2144,
    "body": "This fixes example for `transpose` failing in REPL because of invalid comment.\r\nhttp://ramdajs.com/docs/#transpose",
    "head_branch": "fix/example-transpose",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2144 from simplysh/fix/example-transpose\n\nFix example for transpose documentation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bab8dfb6b84f24257f3",
    "number": 2143,
    "body": "Add `boundProp` function to return the specified property from an object, and bind it to that object.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bac8dfb6b84f24257f4",
    "number": 2142,
    "body": "Rephrased description for 'all' to make it clearer that it should return 'true' for an empty list",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bad8dfb6b84f24257f5",
    "number": 2141,
    "body": "Allow for dictionary creation from two lists, the first list being a list of keys, and the second list being the list of values.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bae8dfb6b84f24257f6",
    "number": 2140,
    "body": "Implemented addIndexRight from #1898.",
    "head_branch": "feature/addIndexRight",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Implemented addIndexRight (#2140)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7baf8dfb6b84f24257f7",
    "number": 2139,
    "body": "Or more precisely, with Array (Pairs a b)\r\n\r\nFixes: #2138\r\n\r\nReview wanted :)",
    "head_branch": "feature/unfold-maybePairs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bb08dfb6b84f24257f8",
    "number": 2133,
    "body": "Returns a single item by running a depth-first iteration through a given multi-dimensional iterable (list, object, nested objects and arrays or cyclic object), successively calling the iterator function and passing it an accumulator value, the current value from the iterable, the key where the current value is stored in the iterable, a list with the keys of the parent iterables of the current position, and then passing the result to the next call.\r\n\r\nThe iterator function receives four values: *(acc, value, key, parentsKeys)*.  It's expected that the iterator returns it's results wrapped in an array, of which only the first position is considered. If the iterator returns an empty array, depthReduce immediately stops, returning the last non-empty result.\r\n\r\nSee: https://github.com/ramda/ramda/issues/2128#issuecomment-287766254\r\n\r\nPlease review 🙏🙇",
    "head_branch": "feature/depthFold",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bb18dfb6b84f24257f9",
    "number": 2131,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add example of using a function with `type` (#2131)\n\nAdd example of using a function with `type`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bb28dfb6b84f24257fa",
    "number": 2130,
    "body": "Closes #2125. This isn't as straightforward as being able to do `R.memoizeWith(R.prop('a'))` because we have to support multiple arity functions. This means that the customising function is applied to `arguments` so the correct way to use the function is `R.memoizeWith(R.compose(R.prop('a'), R.head))`. I think the examples in the documentation  I've provided aren't good enough and I was hoping people had some better suggestions.",
    "head_branch": "memoizeWith",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add memoizeWith (#2130)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bb38dfb6b84f24257fb",
    "number": 2127,
    "body": "anyone interested in a stricter `compose` function?",
    "head_branch": "o",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "binary, curried composition (#2127)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bb48dfb6b84f24257fc",
    "number": 2126,
    "body": "Out of curiosity I looked at the biggest node modules I'm using and to my surprise ramda popped up at the top! By ignoring the `tmp-test-bundle.js` files the npm package goes down in size from 2.1MB to 0.7MB.\r\n\r\nReproducible by running `npm pack`, extracting and looking at the directory size.",
    "head_branch": "include-files-specifically",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2126 from Siilwyn/include-files-specifically\n\nIgnore tmp-test-bundle.js to decrease package size"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bb48dfb6b84f24257fd",
    "number": 2120,
    "body": "Add `R.startsWith` and `R.endsWith` as suggested in #1842 and (to a lesser extent) #1874.",
    "head_branch": "add-starts-with-and-ends-with",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add startsWith and endsWith functions (#2120)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bb58dfb6b84f24257fe",
    "number": 2119,
    "body": "I noticed that the behaviour of `take` was inconsistent when used normally vs as a transducer. Specifically, `take(-1)` would return a transducer that would only process 1 element. I was expecting it to process every element, effectively doing nothing.\r\n\r\nI'm happy for this to be closed if this is the intended behaviour :)",
    "head_branch": "take-transducer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2119 from davidnormo/take-transducer\n\nFixed `xtake` where n < 0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bb68dfb6b84f24257ff",
    "number": 2117,
    "body": "Create a debounced that delays a pass in function util wait milliseconds. It is a helpful util when we need to create an event handler which handles a big rate of executions.\r\n\r\nSee: https://css-tricks.com/debouncing-throttling-explained-examples/",
    "head_branch": "feature/debounce",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bb78dfb6b84f2425800",
    "number": 2116,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make the invoker documentation a little more understandable to newbies like myself (#2116)\n\n* Make the invoker documentation a little more understandable to newbies like myself\r\n\r\n* Clarifications from @buzzdecafe\r\n\r\n* Making more copy changes\r\n\r\n* docs: address buzzdecafe comment. 'invoker()' -> 'invoker'\r\n\r\n* docs: use const instead of var in example for invoker\r\n\r\nCo-authored-by: Kurtis Rainbolt-Greene <me@kurtisrainboltgreene.name>\r\nCo-authored-by: customcommander <hello@spinjs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bb88dfb6b84f2425801",
    "number": 2112,
    "body": "This function takes a list of getter functions and an object. It returns\r\nthe first non-nil value from the list of getters. It returns null if\r\nnothing is found.",
    "head_branch": "feature/through",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bb98dfb6b84f2425802",
    "number": 2106,
    "body": "",
    "head_branch": "add-difference-without-see",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add difference.js without.js @see (#2106)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bba8dfb6b84f2425803",
    "number": 2105,
    "body": "",
    "head_branch": "optimize-unless-type",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bbb8dfb6b84f2425804",
    "number": 2104,
    "body": "",
    "head_branch": "reduceRight-typo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix reduceRight typo (#2104)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bbc8dfb6b84f2425805",
    "number": 2101,
    "body": "",
    "head_branch": "insert-typo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "optimize insertAll.js comment (#2101)\n\n* fix insert.js typo\r\n\r\n* optimize insert.js comment\r\n\r\n* optimize insertAll.js comment"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bbd8dfb6b84f2425806",
    "number": 2100,
    "body": "",
    "head_branch": "insert-typo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix insert.js typo (#2100)\n\n* fix insert.js typo\r\n\r\n* optimize insert.js comment"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bbe8dfb6b84f2425807",
    "number": 2098,
    "body": "tests WIP",
    "head_branch": "addKey",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bbf8dfb6b84f2425808",
    "number": 2094,
    "body": "As suggested in #2089; Code modified from the [cookbook](https://github.com/ramda/ramda/wiki/Cookbook#rename-keys-of-an-object).\r\n\r\n**Edit:** I missed that there was a linter (should've checked, my apologies). Consider adding that step to `CONTRIBUTING.md`?",
    "head_branch": "add-rename",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bc08dfb6b84f2425809",
    "number": 2088,
    "body": "Clarifies that functions can be composed and treated as chains.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bc18dfb6b84f242580a",
    "number": 2086,
    "body": "Hi,\r\n\r\nAs per my recent conversation(promise based reduceWhile #2081), I wrote a snippet of code that would work as a chain-of-responsibility functionality. I was thinking for a long time how to name it, it's not like reduce as you can't collect data on the way (it would make it more complex but it could be useful to add it as well - the same flow but passing starting value). The only thing it's similar to is `anyPass` but that's not perfect either. `T` suffix is a guess - big time.\r\n\r\nI know that implementation is probably not utilising half of the methods that you are using in your files but tried my best and made it browser friend (apply instead of spread etc) - I need to start somewhere.\r\n\r\nI'm keen to get your opinion.\r\n\r\nPS. 5 starts for contributors guide - just easy to do it!",
    "head_branch": "feature/anyPassT",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bc28dfb6b84f242580b",
    "number": 2082,
    "body": "This attempts to provide a solution to the situation described in https://github.com/ramda/ramda/issues/2083.\r\n\r\nThe idea is to have a ramda-core in which each function provides a core set of features that can be imported and composed to build additional features from there. This way, there can be how many different flavors of ramda-like libraries you would want.\r\n\r\nThe current PR takes the map function as an example. Like so, each function takes a (dispatcher, config, dispatchable, however you want to call it) which takes the core features which the core function provides and builds from there. The new map core function showed would only map over native arrays and objects. Then there are two different dispatchers: one adds all the rest of the features that the current ramda/map has and the other one does not (it does not support transducers, currying with placeholders or function composition via map) while providing additional functionality (dispatches to fantasy-land first and then to the map method).\r\n\r\nThis way you would import (from npm or repo) all the functions in ramda-core, partially apply them with the functionality you want and publish it. In the example provided I would publish a \"ramda-fantasy-light\" package or something like that. You could publish a flavor which only dispatches to fantasy-land methods (call it \"ramda-dictatorship\") or another one that dispatches to the method as is (call it \"ramda-anarchy\"). You could, as well, take the opportunity provide maybe/either wrapped functions and/or add some monads implementations or whatnot for a comprehensive fp toolbox.\r\nAlso, it would make more sense to publish individual lightweight functions a la lodash (eg: \"ramda.filter\").\r\n\r\nAll in all, I hope, would make ramda more focused, flexible, faster and shareable.\r\n\r\nPS:\r\n1) Although I've not read all of the source code to guarantee that all the transducer and default currying can be decoupled without major issues, I'm optimistic.\r\n2) Some test of external functions may fail probably because I hardcoded (temporarily as a proof of concept) a piece of transducer dispatch (commented in code).\r\n\r\n",
    "head_branch": "config-decoupling",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bc38dfb6b84f242580c",
    "number": 2080,
    "body": "Adding reference into documentation of R.repeat to R.times, because they do somewhat similar things and R.repeat is based on R.times\r\n\r\nsee also: #2077",
    "head_branch": "repeat-add-seealso",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2080 from notarseniy/repeat-add-seealso\n\nR.repeat: Add to jsdoc @see R.times"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bc48dfb6b84f242580d",
    "number": 2075,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bc58dfb6b84f242580e",
    "number": 2071,
    "body": "gotta go fast\r\n![image](https://cloud.githubusercontent.com/assets/7863230/22495574/e7924d62-e828-11e6-9127-7d9a402ea3bb.png)\r\n\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bc68dfb6b84f242580f",
    "number": 2068,
    "body": null,
    "head_branch": "construct_invoker",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add see links between construct and invoker (#2068)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bc78dfb6b84f2425810",
    "number": 2064,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update README.md (#2064)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bc88dfb6b84f2425811",
    "number": 2062,
    "body": "",
    "head_branch": "chenxueyong",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bc88dfb6b84f2425812",
    "number": 2061,
    "body": "The file `test/index.html` to run the tests directly was removed long\r\nago in 0d67155f8aa1dce51c3f78853d767526c0b855e1.",
    "head_branch": "correct-browser-test-instructions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove obsolete test instructions (#2061)\n\nThe file `test/index.html` to run the tests directly was removed long\r\nago in 0d67155f8aa1dce51c3f78853d767526c0b855e1."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bc98dfb6b84f2425813",
    "number": 2060,
    "body": "",
    "head_branch": "csqian",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bca8dfb6b84f2425814",
    "number": 2059,
    "body": "This closes #1941. As described there the handling of `undefined` as the object currently differs between `path` and `prop`: The former returns `undefined`, the latter used to throw an exception.\r\n\r\nThis pull request harmonises this by returning `undefined` for both. ",
    "head_branch": "harmonise-undefined-in-path-and-prop",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bcb8dfb6b84f2425815",
    "number": 2058,
    "body": "",
    "head_branch": "missingComment",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bcc8dfb6b84f2425816",
    "number": 2057,
    "body": "",
    "head_branch": "zhangcongjie",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bcd8dfb6b84f2425817",
    "number": 2055,
    "body": "",
    "head_branch": "differenceTypo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2055 from adispring/differenceTypo\n\nfix difference.js duplicate typo"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bce8dfb6b84f2425818",
    "number": 2054,
    "body": "The functions ``indexOf`` and ``lastIndexOf`` can work on objects with the prototype ``indexOf`` and ``lastIndexOf``. If the objects are ``undefined`` the following hard crash can occur. I have added the corresponding test cases and fixes.\r\n\r\n```\r\n        if (typeof xs.lastIndexOf === 'function' && !_isArray(xs)) {\r\n                     ^\r\n\r\nTypeError: Cannot read property 'lastIndexOf' of undefined\r\n    at lastIndexOf (/path/ramda.js:6069:22)\r\n    at Object.f2 [as lastIndexOf] (/path/ramda.js:442:22)\r\n```\r\n",
    "head_branch": "indexOf",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bcf8dfb6b84f2425819",
    "number": 2053,
    "body": "",
    "head_branch": "callComment",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "optimize R.call comment (#2053)\n\n* optimize R.call comment"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bd08dfb6b84f242581a",
    "number": 2052,
    "body": "",
    "head_branch": "defaultToComma",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add \",\" before otherwise (#2052)\n\n* add \";\" before otherwise"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bd18dfb6b84f242581b",
    "number": 2049,
    "body": "",
    "head_branch": "appertureComma",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2049 from adispring/appertureComma\n\naperture.js comment lost a comma"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bd28dfb6b84f242581c",
    "number": 2047,
    "body": "`R.reduce(R.subtract, 0, null)` throws `Cannot read property 'reduce' of null` which is misleading. This commit checks for null or undefined and throws a more helpful message.",
    "head_branch": "feature/throw-error-reduce-on-undefined",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bd38dfb6b84f242581d",
    "number": 2045,
    "body": "Just noticed the example result for both `sortWith` and `sortBy` is incorrect. This PR fixes that",
    "head_branch": "correct-sortwith-sortby-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bd48dfb6b84f242581e",
    "number": 2044,
    "body": "",
    "head_branch": "patch-7",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2044 from jethrolarson/patch-7\n\nFix typo in `reduced` example"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bd58dfb6b84f242581f",
    "number": 2043,
    "body": "",
    "head_branch": "patch-6",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Simplified `reduced` example (#2043)\n\n* Added reduced example output\r\n\r\n* changed variable name in `reduced` example"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bd68dfb6b84f2425820",
    "number": 2041,
    "body": "Minor fix for issue raised in #2040",
    "head_branch": "fix-assocPath",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixing minor regression in assocPath (#2041)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bd68dfb6b84f2425821",
    "number": 2039,
    "body": "The argument `acc` passed to the function `reduceRight` was mutated by the function.\r\nThis change avoids mutation and makes the function pure.",
    "head_branch": "avoid-mutation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bd78dfb6b84f2425822",
    "number": 2036,
    "body": "This change addresses that `R.dissocPath` was missed when support for integer path segments was added to the other path functions.",
    "head_branch": "dissocPath-integers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2036 from scott-christopher/dissocPath-integers\n\nAdds integer path support to dissocPath"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bd88dfb6b84f2425823",
    "number": 2031,
    "body": "The [a] format was causing the jsdoc binary to choke when building the website docs",
    "head_branch": "jsdoc-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bd98dfb6b84f2425824",
    "number": 2030,
    "body": "jsdoc was choking on these",
    "head_branch": "jsdoc-param-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2030 from kedashoe/jsdoc-param-fixes\n\nfix jsdoc tags for drop to match take"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bda8dfb6b84f2425825",
    "number": 2027,
    "body": "",
    "head_branch": "patch-4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Explain filterable (#2027)\n\n* Explain filterable\r\n\r\n* Update filter.js\r\n\r\n* Update filter.js\r\n\r\n* Add simple definition of filterable\r\n\r\n* Added simple definition of Filterable"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bdb8dfb6b84f2425826",
    "number": 2026,
    "body": "search script has been added that will search all .js files for finding list of ramda functions used and make them into custom build using partial build script.\r\n**example**\r\n`node search -f C:\\Users\\human\\Desktop\\projectDir > custombuild.js`",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bdc8dfb6b84f2425827",
    "number": 2024,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bdd8dfb6b84f2425828",
    "number": 2023,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bde8dfb6b84f2425829",
    "number": 2022,
    "body": "Testing",
    "head_branch": "testBranch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bdf8dfb6b84f242582a",
    "number": 2021,
    "body": "2 tests left to fix",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7be08dfb6b84f242582b",
    "number": 2020,
    "body": "Pull request for #2019.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix tail function length (#2020)\n\n* Fix tail function length.\r\n\r\n* Fix comments outdated by removed hasMethod."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7be18dfb6b84f242582c",
    "number": 2016,
    "body": "Very minimal fix to the src code. Added docs and tests.\r\n\r\nFixes #2012 ",
    "head_branch": "streaking-groupWith",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixed groupWith to pass adjacent elements to testing fn (#2016)\n\nVery minimal fix to the src code. Added docs and tests."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7be28dfb6b84f242582d",
    "number": 2013,
    "body": "I am trying to split a string into groups and I found the ``groupWith`` function helpful. However, my string is not always available. I am getting a TypeError in such case.\r\n\r\n```\r\nTypeError: Cannot read property 'length' of undefined\r\n    at /path/ramda.js:1910:23\r\n    at /path/ramda.js:466:28\r\n    at f1 (/ramda.js:446:27)\r\n```\r\n\r\nHere is a simple test case to reproduce that. The function ``readStr`` first reads a string and sends it to ``groupWith``. If the string is not available, it returns ``undefined``. If ``undefined`` is passed to ``groupWith``, I am getting the above error.\r\n\r\n```js\r\nvar str = readStr(params); // return undefined if the string is not available\r\nconsole.log(R.groupWith(R.equals)(str));\r\n```\r\n\r\nI think if there is a default value of zero for ``len`` on [line 1910](https://github.com/ramda/ramda/blob/master/dist/ramda.js#L1910) then I can still get the empty array from ``res`` on [line 1908](https://github.com/ramda/ramda/blob/master/dist/ramda.js#L1908) without crashing.\r\n",
    "head_branch": "groupWith",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7be38dfb6b84f242582e",
    "number": 2015,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7be48dfb6b84f242582f",
    "number": 2011,
    "body": "Similar to `assoc` and `assocPath`. These functions are used to apply a\r\nfunction to a value at a given property/path. If there is no previous\r\nvalue, then the function will be given `undefined` as its argument.\r\n\r\nreferences #1998 ",
    "head_branch": "feature/addAssocWithFunctions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7be58dfb6b84f2425830",
    "number": 2010,
    "body": "References #1998 \r\n\r\nSimilar to `assoc` and `assocPath`. These functions are used to apply a\r\nfunction to a value at a given property/path. If there is no previous\r\nvalue, then the function will be given `undefined` as its argument.",
    "head_branch": "feature/assocWith",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7be68dfb6b84f2425831",
    "number": 2009,
    "body": "chain test - 'interprets ((->) r) as a monad' is failing\r\n\r\nchanging from  \r\n\r\n`var bound = R.chain(f, h);`\r\n\r\nto \r\n\r\n`var bound = R.chain(h, f);`",
    "head_branch": "#2008",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7be78dfb6b84f2425832",
    "number": 2007,
    "body": "Quick PoC. Addresses #2006. The idea is to be totally backwards compatible, functions that this is a fit for can be called as they always could, but can now also be invoked all in one go.\r\n\r\nBefore:\r\n\r\n```js\r\nallPass([gt(5), odd]); => Int -> Bool\r\nallPass([gt(5), odd], 4); => Int -> Bool\r\nallPass([gt(5), odd])(4); => false\r\n```\r\nAfter\r\n```js\r\nallPass([gt(5), odd]); => Int -> Bool\r\nallPass([gt(5), odd], 4); => false\r\nallPass([gt(5), odd])(4); => false\r\n```\r\n\r\nSome candidates: allPass anyPass bind cond constructN invoker liftN memoize nthArg once tryCatch\r\n\r\n\"curryX\" could also be an internal function, I'm not sure it needs exporting?",
    "head_branch": "curry-func-return-func",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7be88dfb6b84f2425833",
    "number": 2004,
    "body": "[Fix for issue #2002](https://github.com/ramda/ramda/issues/2002) - ap function dispatches to wrong argument.\r\n\r\nFrom @ davidchambers:\r\n> Ramda currently targets v0.3.0 of the Fantasy Land specification, which explains why the argument order does not match that of the current version of the specification. #1900 will update Ramda to a more recent version of the specification, if merged.",
    "head_branch": "update_ap_description",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updating ap's description (#2004)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7be98dfb6b84f2425834",
    "number": 2003,
    "body": "1. Allows checking for not null or not undefined , so that we do not need to always negate isNil .",
    "head_branch": "ADDING_isNotNil_FUNCTION",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bea8dfb6b84f2425835",
    "number": 2001,
    "body": "I think this one got missed in the bunch.",
    "head_branch": "drop-repeats-with-base",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use _xfBase for XDropRepeatsWith (#2001)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7beb8dfb6b84f2425836",
    "number": 1999,
    "body": null,
    "head_branch": "issue-1617-integrate-TS-defs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bec8dfb6b84f2425837",
    "number": 1997,
    "body": "Hi, I've tried to do this function recursively and found out that the performances were better (unless for deep cases, like 5 or 6-deep keys in a object) using benchmark.js (https://github.com/bestiejs/benchmark.js/), is there any reason you guys did it iteratively instead?\r\nAlso I know it adds a new 'i' parameter which makes it less practical but I was just wondering... \r\nThanks!",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bec8dfb6b84f2425838",
    "number": 1994,
    "body": "The intention here is a mash up of `R.find` and `R.lens`.\r\n\r\nQuestions I asked myself before submitting this:\r\n\r\n* Is the same effect straightforward by composing existing functions? _Not really_.\r\n* Has someone already proposed a function like this? _Not that I can see_. However, I found out after fact that [this S.O. question](http://stackoverflow.com/questions/35538351/ramda-js-lens-for-deeply-nested-objects-with-nested-arrays-of-objects/35544228#35544228) is answered with a great lens written by [Scott Christopher](https://github.com/scott-christopher), which only tells me:\r\n    - a). Other people probably need to do this sort of thing.\r\n    - b). Scott already wrote a `lensMatching` function. Did he or someone else already consider adding it? Maybe I can close this and he can propose it? :)",
    "head_branch": "add-lensFind",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bed8dfb6b84f2425839",
    "number": 1993,
    "body": "The intention here is a mash up of `R.find` and `R.lens`.\r\n\r\nQuestions I asked myself before submitting this:\r\n\r\n* Is the same effect straightforward by composing existing functions? _Not really_.\r\n* Has someone already proposed a function like this? _Not that I can see_. However, I found out after fact that [this S.O. question](http://stackoverflow.com/questions/35538351/ramda-js-lens-for-deeply-nested-objects-with-nested-arrays-of-objects/35544228#35544228) is answered with a great lens written by [Scott Christopher](https://github.com/scott-christopher), which only tells me:\r\n    - a). Other people probably need to do this sort of thing.\r\n    - b). Scott already wrote a `lensMatching` function. Did he or someone else already consider adding it? Maybe I can close this and he can propose it? :)",
    "head_branch": "add-lensFind",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bee8dfb6b84f242583a",
    "number": 1992,
    "body": "Closes #1987",
    "head_branch": "set-functions-equality",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1992 from asaf-romano/set-functions-equality\n\nFix _Set regression in functions handling"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bef8dfb6b84f242583b",
    "number": 1991,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add @see R.converge in useWith.js, and vice versa (#1991)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bf08dfb6b84f242583c",
    "number": 1990,
    "body": "",
    "head_branch": "useWith_converge",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bf18dfb6b84f242583d",
    "number": 1986,
    "body": "This changes the functions generated by `pipeK` and `composeK` to now expect an unlifted value rather than a lifted value as its argument, as per composition of arrows in the Kleisli category.\r\n\r\ne.g.\r\n```diff\r\n- pipeK :: Monad m => ((a -> m b), (b -> m c), ..., (y -> m z)) -> (m a -> m z)\r\n+ pipeK :: Monad m => ((a -> m b), (b -> m c), ..., (y -> m z)) ->   (a -> m z)\r\n```\r\n\r\nThis follows the Haskell definition of [`>=>`](https://hackage.haskell.org/package/base/docs/Control-Monad.html#v:-62--61--62-):\r\n```hs\r\n(>=>) :: Monad m => (a -> m b) -> (b -> m c) -> a -> m c\r\n```\r\n\r\n(related: #1781)",
    "head_branch": "kleisli-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1986 from scott-christopher/kleisli-fix\n\npipeK/composeK generated fns now expect unlifted values"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bf28dfb6b84f242583e",
    "number": 1977,
    "body": "This is a proof of concept for a re-write to es6 modules.\r\n\r\nThe files in `src` folder can now use es6 syntax for import/export. By then running `npm run babel` the files in the `src`folder will be compiled into the `cjs` folder but the only transform that will be applied is that es6 style import/export will be rewritten to commonjs style. By adding more options to `.babelrc` more transforms could be added. For example the files in the `src` folder could use es6 syntax if the appropriate options are added.\r\n\r\nThe main index.js file has been rewritten so it exports from the `cjs` folder. This makes running `npm test` work without modifing the tests.",
    "head_branch": "es6-modules",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bf38dfb6b84f242583f",
    "number": 1975,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "flip reduceRight reducer arguments order (#1975)\n\n* flip reduceRight reducer arguments order\r\n\r\n* modify comment of reduceRight and add an unit test\r\n\r\n* change mapAccumRight reducing function arguments order\r\n\r\n* fix mapAccumRight comment\r\n\r\n* modify reduceRight and reduce schematic diagram\r\n\r\n* remove duplicate reduce and reduceRight comments"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bf48dfb6b84f2425840",
    "number": 1971,
    "body": "The existing documentation is confusing, as it seems to imply that params and return values are of Boolean type.\r\n\r\nThis is not the case, as both functions work in the same way that their operator counterparts do.",
    "head_branch": "update_logical_docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update logical function documentation. (#1971)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bf58dfb6b84f2425841",
    "number": 1961,
    "body": "Before:\r\n\r\n```purescript\r\nlift :: (*... -> *) -> ([*]... -> [*])\r\nliftN :: Number -> (*... -> *) -> ([*]... -> [*])\r\n```\r\n\r\nAfter:\r\n\r\n```javascript\r\nlift :: Functor f => (a -> b) -> f a -> f b\r\nlift2 :: Apply f => (a -> b -> c) -> f a -> f b -> f c\r\nlift3 :: Apply f => (a -> b -> c -> d) -> f a -> f b -> f c -> f d\r\n```\r\n\r\nThe fixed-arity functions handle at least 99.99% of use cases and have meaningful type signatures! If someone happens to need `lift4` she can trivially define it in terms of `map` and `ap`.\r\n\r\n@buzzdecafe expressed enthusiasm for this change in https://github.com/ramda/ramda/pull/1938#issuecomment-257418698.\r\n",
    "head_branch": "lift",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bf68dfb6b84f2425842",
    "number": 1959,
    "body": "Motivation: fix #1505 .\n\nThe proposal is to simply copy the `src` folder into root when publishing to npm. The assumptions are:\n1. Individual functions will not need UMD––the target is only CommonJS,\n2. …so there is no need for building,\n3. …and since the individual modules will be CommonJS, it makes sense to do this only for npm.\n\nThe scripts are set up so that any files created locally when building will be removed by the postpublish hook, but of course if you build in CI this is unnecessary.\n\nDoes it make sense?\n",
    "head_branch": "add-pre-and-post-publish-scripts",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bf78dfb6b84f2425843",
    "number": 1957,
    "body": "",
    "head_branch": "fix-build",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix build from many late commits (#1957)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bf88dfb6b84f2425844",
    "number": 1956,
    "body": "Node version 0.10 is EOL at the end of the month per the [LTS Schedule](https://github.com/nodejs/LTS#lts-schedule).\n\nDoing this means no longer having to use an external dependency for testing promise handling functions.\n",
    "head_branch": "reomve-node-0.10-support",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1956 from Bradcomp/reomve-node-0.10-support\n\nRemoved node v0.10 support and Q devDependency"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bf98dfb6b84f2425845",
    "number": 1955,
    "body": "`omitIf` omits properties of an object if they fulfill a test too.\n\n```\nvar obj = {a: 1, b: 2, c: 3, d: 4, e: 5};\n\nit('copies an object omitting the listed properties fulfilling a test', function() {\n    eq(R.omitIf(R.lt(2), ['a', 'c', 'e'], obj), {a: 1, b: 2, d: 4});\n});\n```\n",
    "head_branch": "omitIf",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bfa8dfb6b84f2425846",
    "number": 1954,
    "body": "you don't need to curry functions that you pass to `liftN`, it works just the same, so the example is clearer without the currying\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "removed curry from the example for liftN (#1954)\n\n* removed curry from the example for liftN\r\n\r\nyou don't need to curry functions that you pass to `liftN`, it works just the same, so the example is clearer without the currying\r\n\r\n* Update liftN.js"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bfb8dfb6b84f2425847",
    "number": 1952,
    "body": "Remove unnecessary use of `R.curry` from `R.lift` examples; the function passed to `lift` doesn't need to be curried, so the example is clearer without it.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1952 from kwijibo/patch-1\n\n`R.curry` unneeded by `R.lift`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bfc8dfb6b84f2425848",
    "number": 1950,
    "body": "This is an alternative to #1900 and #1949.\r\n\r\n(**Edit**: I don't know why I originally used the words \"delegation\" and \"dispatching\" indiscriminately.  Fixed.) \r\n\r\nIt seems to me that if we are going to get out of the business of dispatching, then we should do it wholeheartedly.  That means we should stop doing any dispatching whatsoever.\r\n## What is the proposal?\r\n\r\nRemove all dispatching.  The only types Ramda functions should operate upon are the ones it handles internally: lists, functions, objects, strings.  This means removing silly dispatching like `dropRepeatsWhile` that was only dispatching because of implementation details of our transducers, removing more useful dispatching like `filter`, which could easily work with user types such as trees as well as the built-in types, and removing quite common dispatching such as `map` that is part of the [FantasyLand Functor](https://github.com/fantasyland/fantasy-land#functor) specification.\r\n## Does this make Ramda less powerful?\r\n\r\nNo, Ramda will still operate directly on the same types it always has, especially lists, often functions or plain objects, sometimes strings.  And a user [can still use Ramda](https://goo.gl/9ZglGJ) to call her custom type:\r\n\r\n``` js\r\nconst fmap = R.invoker(1, 'map');\r\nfmap(square, Just(5)); //=> Just(25)\r\nfmap(square, Nothing()); //=> Nothing()\r\n```\r\n## Does this make Ramda less ergonomic?\r\n\r\nIt does, to an extent that depends on how much the user likes points-free style.  Perhaps a simple example is the change in the test for `composeK`:\r\n\r\n**before**\r\n\r\n``` js\r\nR.compose(chain(h), chain(g), chain(f))\r\n```\r\n\r\n**after**\r\n\r\n``` js\r\nR.compose(x => x.chain(h), x => x.chain(g), x => x.chain(f))\r\n```\r\n\r\nWhile this is not horrible, it does make using Ramda less pleasant.\r\n## Are you serious?\r\n\r\nPartly.  It seems to me that we're headed very much in the wrong direction by removing dispatching.  (This is not exactly a reaction to #1949; some of the things we dispatch make little sense.)  I believe dispatching is one of the very good parts of Ramda.  But if we're going to remove it, I don't see any good reason to make an exception for the FantasyLand types.\r\n\r\nMy preference is still to stick with our dispatching.  But I'm not interested in a half-measure of removing the dispatching of everything but those functions currently supported by some other team.  I don't want our API to be subject to the whims of another project.\r\n\r\nI'm sure this PR is incomplete.  I pulled it together in an hour, so it may be fairly low quality.  And since I last was online, other code has been merged that means that I'd have to rebase before we could even try to merge it.  That's ok.  I want to see where the conversation goes anyway.\r\n",
    "head_branch": "remove-delegation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bfd8dfb6b84f2425849",
    "number": 1949,
    "body": "To quote https://github.com/ramda/ramda/pull/1938#issuecomment-254425093:\n\n> It's now apparent to me that there's a significant problem with our current approach to dispatching: it complects transducer support and method dispatching. As a result, we can't have functions which support transducers but do _not_ dispatch, leading to silliness such as `R.dropRepeatsWith` dispatching to `dropRepeatsWith`. It's thus unclear whether we actually _intend_ a certain function to dispatch.\n\nThe solution to this problem is to take an array of method names rather than a string. This will give us the freedom to have a function work with transducers without also dispatching. It will also give us the option of dispatching to one of _several_ possible methods (e.g. `fantasy-land/map` or `map`).\n\nAt this stage the pull request does not actually remove dispatching. What I will do is comment on each of the functions in question and request that you vote :thumbsup: if you believe the function should continue to dispatch; :thumbsdown: otherwise. As we decide which functions should no longer dispatch I will update the pull request.\n",
    "head_branch": "dispatching",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "remove unwanted dispatching (#1949)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bfe8dfb6b84f242584a",
    "number": 1948,
    "body": "I'm not sure why this isn't in the eslint config already. It is the standard for this project - so it makes sense to enforce it with the linter. \n\nAfter adding the rule - I found 4 examples of missing semicolons which are also fixed in this PR.\n",
    "head_branch": "semicolons",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add eslint semicolon rule (#1948)\n\n* Add eslint rule to enforce semicolons\r\n\r\nThis is the coding standard for this project so it should\r\nbe enforced by eslint. This will be particular useful for\r\nnew contributors and will save time for reviewers.\r\n\r\n* Add missing semicolons"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7bff8dfb6b84f242584b",
    "number": 1947,
    "body": "",
    "head_branch": "odd-even",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c008dfb6b84f242584c",
    "number": 1946,
    "body": "See discussion in issue #994.\n- `sortWith` sorts a list by an arbitrary number of comparators\n- `ascend` and `descend` are helpful utility methods to create such comparators.\n",
    "head_branch": "sortWith",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "sortWith, ascend and descend methods (#1946)\n\n* Add `ascend`, `descend` and `sortWith` methods\r\n\r\nSee discussion in issue #994.\r\n`sortWith` sorts a list by an arbitrary number of comparators\r\n`ascend` and `descend` are helpful utility methods to create\r\nsuch comparators.\r\n\r\n* Add `ascend`, `descend` and `sortWith` to the public api\r\n\r\n* Remove reference to `_slice`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c018dfb6b84f242584d",
    "number": 1944,
    "body": "Supersedes #1943\n",
    "head_branch": "slice",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1944 from davidchambers/slice\n\nremove _slice"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c018dfb6b84f242584e",
    "number": 1943,
    "body": "I'd like to go a step further and use `Array.prototype.slice` directly at each call site. If that change would be accepted I'll close this pull request and open another.\n",
    "head_branch": "slice",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c028dfb6b84f242584f",
    "number": 1938,
    "body": "This pull request provides an idea of how [sanctuary-type-classes](https://github.com/sanctuary-js/sanctuary-type-classes) could be used in Ramda. It would allow us to share the implementations of `toString`, `equals`, `map`, `ap`, `chain`, etc.\n\nRamda's Fantasy Land integration is currently outdated (`fantasy-land@1.x.x` is not yet supported), incomplete (some methods do not have corresponding `R` functions), and patchy (implementations for built-in types have been added ad hoc). I believe a central repository of FL implementations for built-in types is good for the JavaScript FP community. There's no reason for these functions to be defined in multiple libraries.\n\nI'm opening this pull request for discussion. A lot of work will be required to get it ready to merge. I'll wait to learn what others think of the idea before spending more time on this patch.\n\nBefore:\n\n``` javascript\nvar _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _map = require('./internal/_map');\nvar _reduce = require('./internal/_reduce');\nvar _xmap = require('./internal/_xmap');\nvar curryN = require('./curryN');\nvar keys = require('./keys');\n\nmodule.exports = _curry2(_dispatchable('map', _xmap, function map(fn, functor) {\n  switch (Object.prototype.toString.call(functor)) {\n    case '[object Function]':\n      return curryN(functor.length, function() {\n        return fn.call(this, functor.apply(this, arguments));\n      });\n    case '[object Object]':\n      return _reduce(function(acc, key) {\n        acc[key] = fn(functor[key]);\n        return acc;\n      }, {}, keys(functor));\n    default:\n      return _map(fn, functor);\n  }\n}));\n```\n\nAfter:\n\n``` javascript\nvar Z = require('sanctuary-type-classes');\n\nvar _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _xmap = require('./internal/_xmap');\n\nmodule.exports = _curry2(_dispatchable(_xmap, Z.map));\n```\n",
    "head_branch": "sanctuary-type-classes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c038dfb6b84f2425850",
    "number": 1937,
    "body": "See #1936\n\n/cc @benperez\n",
    "head_branch": "chain",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix implementation of Function#chain (#1937)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c048dfb6b84f2425851",
    "number": 1936,
    "body": "",
    "head_branch": "chaindoc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c058dfb6b84f2425852",
    "number": 1929,
    "body": "- Added benchmarks for either (addresses #1913)\n- Removed isSet benchmarks as isSet has been removed from ramda\n- Changed indexOf to includes in the contains benchmark as includes is\n  semantically closer to contains than indexOf\n",
    "head_branch": "benchmarks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add native functions to benchmarks where they exist (#1929)\n\n* Add native functions to benchmarks where they exist\r\n\r\n - Added benchmarks for either (addresses #1913)\r\n - Removed isSet benchmarks as isSet has been removed from ramda\r\n - Changed indexOf to includes in the contains benchmark as includes is\r\nsemantically closer to contains than indexOf\r\n\r\n* Remove mixed native/ramda and invalid either benchmarks. Rename native contains"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c068dfb6b84f2425853",
    "number": 1928,
    "body": "i discussed it in gitter and got green light to try out this approach.\n\nSo basically there is no need to bundle all the files into one for nodejs environment, so we can export natively supported one entry point which requires all internal files.\n\nOne instant benefit is clearer stack traces:\n\n```\n➜  projects node\n> const old = require('./ramda-old');\nundefined\n> const R = require('./ramda');\nundefined\n> old.pipe()\nError: pipe requires at least one argument\n    at Object.pipe (/Users/vlasta/projects/ramda-old/dist/ramda.js:7421:19)\n    at …\n> R.pipe()\nError: pipe requires at least one argument\n    at Object.pipe (/Users/vlasta/projects/ramda/src/pipe.js:32:11)\n    at …\n> \n```\n\nI didnt touch anything else: neither testing, nor building processes.\n\nThis pr has aslo benefit of possible smaller builds for smart bundlers (without hacks relying on frozen file system structure).\n\nPros:\n- clear stacktraces\n- smaller builds\n- room for improvements in developer experience (faster tests, simpler build, windows friendly setup, etc)\n\nNo cons.\n",
    "head_branch": "feat/commonjs-for-node",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add commonjs entrypoint for nodejs environment (#1928)\n\n* add commonjs entrypoint for nodejs environment\r\n\r\n* add section about removing/adding to contributing guide\r\n\r\n* add test for consistent api surface\r\n\r\n* update contributing guide\r\n\r\n* update test for api surface\r\n\r\n* test: sort both api arrays before asserting them\r\n\r\n* tweak build script to use package's entrypoint to build files for distribution\r\n\r\n* rewrite APIs test, add note about used convention and explanation\r\n\r\n* fix eslint issues\r\n\r\n* remove \"npm pretest\", because you dont need to build ramda before tests anymore\r\n\r\n* keep eslint check, but in CI now"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c078dfb6b84f2425854",
    "number": 1926,
    "body": "This is an alternative proposal to #1924 for supporting integer path segments in `assocPath` (and `lensPath` by its current implementation).\n",
    "head_branch": "assocPath",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add support for integer path segments in assocPath (#1926)\n\n* Add explicit support for integer indices in path* functions\r\n\r\n* Add support for integer path segments in assocPath"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c088dfb6b84f2425855",
    "number": 1924,
    "body": "This change adds support for using integer values as segments in the path given to `lensPath`. The previous version of this was coercing arrays back into objects when numeric keys were used due to the implementation of `assocPath`.\n\nAn alternative solution to this would be to add support numeric keys in `assocPath` and leave the current implementation for `lensPath` as it is.\n\nAddresses #1922 \n",
    "head_branch": "lensPath",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c098dfb6b84f2425856",
    "number": 1921,
    "body": "Arrow functions are not constructable.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Replace documentation Widget arrow with Constructor Function (#1921)\n\n* Replace documentation Widget arrow with Constructor Function\r\n\r\n* Replace example arrow function with regular function."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c0a8dfb6b84f2425857",
    "number": 1917,
    "body": "Discussion here: #1893 \n",
    "head_branch": "iterobj",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add R.forEachObjIndexed to iterate over an object (#1917)\n\n* add R.forEachObjIndexed to iterate over an object\r\n\r\n* no dispatches to the `forEachObjIndexed` method\r\n\r\n* update signature of  method and remove unnecessary test"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c0b8dfb6b84f2425858",
    "number": 1916,
    "body": "Ramda `ap` function can be used as S Combinator but I found no reference to it anywhere\n\n``` javascript\nR.ap(R.add, R.inc)(100) === R.add(100, R.inc(100))\n```\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c0c8dfb6b84f2425859",
    "number": 1912,
    "body": "From discussion in #1910 it seems there's at least some interest in using [sanctuary-def](https://github.com/sanctuary-js/sanctuary-def) in Ramda. I'm opening this pull request simply to provide a couple of concrete examples of how this would look.\n\nIf we decide to pursue this we'll need to provide a way for users to opt in to (or opt out of) type checking. Presumably this would work as in [Sanctuary](https://sanctuary.js.org/#type-checking), though we'd likely disable type checking by default.\n\nThis could continue to work exactly as it does now:\n\n``` javascript\nconst R = require('ramda');\n```\n\nThis would enable type checking to be turned on and off:\n\n``` javascript\nconst {create, env} = require('ramda');\n\nconst R = create({checkTypes: true, env: env});\n```\n",
    "head_branch": "optional-type-checking",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c0d8dfb6b84f242585a",
    "number": 1911,
    "body": "The correct spelling of JavaScript is to capitalize both **J** and **S** letters. More info [here](https://www.quora.com/Should-the-s-in-JavaScript-be-capitalized).\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix spelling of JavaScript (#1911)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c0e8dfb6b84f242585b",
    "number": 1908,
    "body": "Implementation adopted from [sanctuary-type-classes/pull/2](https://github.com/sanctuary-js/sanctuary-type-classes/pull/2)\n\nFixes: #1902 \nBlocker: #1900\n",
    "head_branch": "chainRec",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c0f8dfb6b84f242585c",
    "number": 1906,
    "body": "Per the discussion here: https://github.com/ramda/ramda/pull/1869#issuecomment-247388811\n\nHopefully this serves as a good com`promise`.  \n",
    "head_branch": "then",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c108dfb6b84f242585d",
    "number": 1905,
    "body": "If you are interested, I've made a ng-ramda package that provides Ramda as an injectable Angular service.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c118dfb6b84f242585e",
    "number": 1900,
    "body": "There are several breaking changes on the cards for `fantasy-land@1.0.0`:\n- [x] fantasyland/fantasy-land#146: prefix method names\n- [x] fantasyland/fantasy-land#145: flip `ap` argument order\n- [x] fantasyland/fantasy-land#135: define Traversable in terms of `traverse` rather than `sequence`\n- [ ] <del>fantasyland/fantasy-land#162: remove support for `.constructor.empty`</del>\n\nI'll keep this pull request up to date as pull requests are merged into the FL repository.\n",
    "head_branch": "fantasy-land",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1900 from davidchambers/fantasy-land\n\nfantasy-land@1.0.x"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c128dfb6b84f242585f",
    "number": 1895,
    "body": "- Fixes #1876\n",
    "head_branch": "feature-pickWithDefault",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c138dfb6b84f2425860",
    "number": 1894,
    "body": "Round three, here we go.\n",
    "head_branch": "clarify-docs-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Clarify docs for concat -> dropRepeatsWith (#1894)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c148dfb6b84f2425861",
    "number": 1892,
    "body": "See https://github.com/ramda/ramda/pull/1891,\nDoing a run over examples clarifying things,\n\nOf note in this batch is that the type signatures for some of the compose functions didn't always show that the first function could take multiple arguments. Quick question on that, is composeK supposed to allow multiple arguments for the first function? I couldn't find it mentioned anywhere.\n\nAlso I noticed that the multiple argument functionality of `compose` doesn't seem to be tested 😢 \nAs usual, I'll squash this down when it's ready to merge.\n",
    "head_branch": "clarify-docs-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Clarify docs for 'call' -> 'composeP' (#1892)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c158dfb6b84f2425862",
    "number": 1891,
    "body": "Hey folks, I've been getting more familiar with the lib lately and I think that the docs are one of Ramda's most valuable assets. For the most part they're very clear, but at parts they get a bit technical (which is fine, but the technical points should accompany simpler explanations).\n\nIn particular I've found several examples which would be much clearer if they used slightly different input. There are also several examples that require knowledge of advanced concepts which shouldn't be a requirement to learn that particular function.\n\nTo remedy some of this, I've been going through the docs one at a time and have been trying to clarify the docs wherever possible. As I go I'm also adding parameter annotations where they're missing and have been standardizing a few things like capitalization, etc.\n\nEach example is open for debate, I've done each doc as a separate commit for easy editing/exclusion, but once I've finished I'll squash it down. I'm still adding on (I'm going through alphabetically) but feel free to comment along the way.\n",
    "head_branch": "clarify-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Clarify docs for '__' -> 'both' (#1891)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c168dfb6b84f2425863",
    "number": 1889,
    "body": "I've added some property tests for `add`, `always`, `curry`, and `flip`.  \n",
    "head_branch": "property-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Property tests (#1889)\n\n* added property test for R.flip\r\n\r\n* Property test for R.curry\r\n\r\n* property test for R.always\r\n\r\n* property tests for R.add"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c178dfb6b84f2425864",
    "number": 1888,
    "body": "I used Ramda extensively in Functional Programming in JavaScript, published this year. I think it's also a good reference for developers wanting to learn more about it. \n\nThanks!\n",
    "head_branch": "adding-new-resource-introductions-readme",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c188dfb6b84f2425865",
    "number": 1884,
    "body": "The change in https://github.com/jsverify/jsverify/pull/182 should hopefully resolve the current failing tests in Travis.\n",
    "head_branch": "jsverify-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Bump version of jsverify (#1884)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c198dfb6b84f2425866",
    "number": 1883,
    "body": "e.g. numbers, null, undefined, NaN, etc.\n\nCurrently ramda behaves like this:\n\n``` javascript\nconst a = {}\nconst b = R.assoc(42, 'value', a)  // {\"42\": \"value\"}\nconst c = R.dissoc(42, b)  // {\"42\": \"value\"}\nR.equals(a, c) // false\n```\n\nThe reason is that values passed to assoc are coerced into string keys (as per the javascript spec),\nbut dissoc doesn't do a similar conversion.\n\nBy principle of least astonishment I'd expect assoc and dissoc to reverse the other's actions 😁\n\nI mostly care about numbers being coerced, but I can see a use-case for undefined or null as well.\n\nI also came across this PR which was merged to solve a very similar problem: https://github.com/ramda/ramda/pull/1122/files\n\nI ran into this exact situation on a side project of mine and it took a while to track down.\n\nLet me know if there's anything else that needs doing, cheers!\n",
    "head_branch": "dissoc-support-prop-types",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow dissoc to remove non-string keys (#1883)\n\ne.g. numbers, null, undefined, NaN, etc."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c1a8dfb6b84f2425867",
    "number": 1882,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1882 from aonghusonia/patch-2\n\nFix duplicate declaration errors in partial example in REPL"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c1b8dfb6b84f2425868",
    "number": 1881,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix duplicate declaration errors in anyPass example in REPL (#1881)\n\n* Fix duplicate declaration errors in anyPass example in REPL\r\n\r\n* Update anyPass.js\r\n\r\n* Update anyPass.js"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c1c8dfb6b84f2425869",
    "number": 1878,
    "body": "When you run the converge example in the ramda REPL you get a duplicate declaration error for the add, subtract & multiply functions\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      " Fix duplicate declaration errors in converge example in REPL (#1878)\n\n*  Fix duplicate declaration errors in converge example in REPL\r\n\r\nWhen you run the converge example in the ramda REPL you get a duplicate declaration error for the add, subtract & multiply functions\r\n\r\n* changed example"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c1d8dfb6b84f242586a",
    "number": 1877,
    "body": "Let's deprecate this function. If a glance at the implementation is not sufficient to persuade you that this function should be removed, I'll spend some time writing a case for the deprecation.\n",
    "head_branch": "is-array-like",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "deprecate R.isArrayLike (#1877)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c1e8dfb6b84f242586b",
    "number": 1871,
    "body": "Starting small on property based testing.  Adds a couple property tests for compose based on recent conversations in the gitter.  One just ensures that it's actually performing function, while the other tests for the associative property.\n\nHopefully this can serve as a starting point for additional property tests in the future.\n",
    "head_branch": "compose-properties",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added property tests for R.compose (#1871)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c1f8dfb6b84f242586c",
    "number": 1870,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Removed semvar lock on travis ci node versinos (#1870)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c208dfb6b84f242586d",
    "number": 1869,
    "body": "We often advise Ramda users against using promises, yet we provide functions for working with promises. Moreover, such functions are not necessary when working with tasks/futures, which support the regular `compose`/`pipe`/`map`/`chain` operations.\n\n@CrossEye indicated in https://github.com/ramda/ramda/issues/1528#issuecomment-239966677 that he's on board with deprecating `composeP` and `pipeP`. Others have also shown support for the move.\n",
    "head_branch": "no-promises",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c218dfb6b84f242586e",
    "number": 1868,
    "body": "#1597 introduced a regression. Prior to that change, the _actual_ type of the function was:\n\n``` haskell\nintersectionWith :: ((a, b) -> Boolean) -> [a] -> [b] -> [a]\n```\n\nPost optimization, the order in which arguments are provided to predicate is determined by the lengths of the input lists rather than the order in which the lists are provided to `intersectionWith`. This means that the function only behaves _reliably_ when treated as:\n\n``` haskell\nintersectionWith :: ((a, a) -> Boolean) -> [a] -> [a] -> [a]\n```\n\nThis makes the function much less useful: if `a` has sensible equality semantics we can simply use `intersection`. The example in the [documentation](http://ramdajs.com/docs/#intersectionWith) is better expressed in terms of `intersection`. :stuck_out_tongue_winking_eye:\n\nLet's set aside the question of the usefulness of the old behaviour, though. There's a more important matter to discuss, which is our process for handling regressions. Our current process seems to be:\n1.  Regression.\n2.  Discuss the merits of the regression.\n3.  Fix the regression, perhaps.\n\nThis is not right. All else being equal we rightly favour a function's existing behaviour. The onus is therefore on the contributor proposing a change in behaviour to clearly demonstrate the benefits. Our current process means that when we unintentionally change the behaviour of a function the new behaviour becomes the incumbent and one must make a case for reinstating the old behaviour.\n\nI'd like us to follow this process instead:\n1.  Regression.\n2.  Fix the regression.\n3.  Discuss the merits of the regression, if applicable.\n\nAfter discussing the merits of a regression, we may decide we actually stumbled upon a better function. We can then make a pull request to formalize the change, making any necessary documentation changes. This will also make it clear to others and to our future selves that the change was intentional, and provide a document to which the upgrade guide can link.\n",
    "head_branch": "intersection-with",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add R.innerJoin and deprecate R.intersectionWith (#1868)\n\n* add R.innerJoin and deprecate R.intersectionWith\r\n\r\n* removing assertion about ordering"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c228dfb6b84f242586f",
    "number": 1867,
    "body": "Continuing on from #1088, this change introduces deep (recursive) merge equivalents for the existing `merge`, `mergeWith` and `mergeWithKey` functions.\n",
    "head_branch": "deep-merge",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add mergeDeep, mergeDeepWith & mergeDeepWithKey (#1867)\n\n* Add mergeDeep{Left,Right,With,WithKey}\r\n\r\n* Fix docs for mergeWith & mergeWithKey\r\nThe originally planned behaviour of removing keys when the provided function\r\nreturns `undefined` never made it in, but the docs suggested otherwise"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c238dfb6b84f2425870",
    "number": 1866,
    "body": "- Remove unnecessary examples that add no value other than show curry'ness\n- Change ')(' -> ', ' where the parentheses are unnecessary.  It causes confusion because\n  there are examples where the parentheses are necessary (e.g. invoker)\n",
    "head_branch": "docs_remove-unnecessary-curries",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c248dfb6b84f2425871",
    "number": 1864,
    "body": "davidchambers/xyz#22\n",
    "head_branch": "xyz",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "xyz@1.0.x (#1864)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c258dfb6b84f2425872",
    "number": 1862,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "where.js docs: prefix with \"R.\" where needed (#1862)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c268dfb6b84f2425873",
    "number": 1861,
    "body": "This started with `differenceWith`, I noticed that things like\n\n```\nR.differenceWith(a => b => ..., xs, ys);\n```\n\ndon't work as expected.\n\nI tried to propagate the signature changes to all functions that use `internal/_containsWith`.\n\nIf updating the signatures is not the right solution, let me know, I'll work on something better (e.g. allowing predicates to be curried).\n",
    "head_branch": "diffWith-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update binary predicate signatures as they're not curried. (#1861)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c278dfb6b84f2425874",
    "number": 1858,
    "body": ":warning: This may be controversial.\n\nI posit that `R.unary(f)` is equally well expressed `x => f(x)`, and that `R.binary(g)` is equally well expressed `(x, y) => g(x, y)`.\n\nRamda contains several functions for \"fixing\" inconvenient or poorly designed functions. In most cases a humble wrapper function does the job equally well. When more than one \"adjustment\" is necessary, a wrapper function is much clearer. Imagine, for example, that we have a function `f` which takes three arguments, the last of which is optional. We'd like to derive from `f` a function, `g`, which takes two arguments and returns the result of applying `f` to these arguments _in reverse order_. Which of the following is clearer?\n\n``` javascript\nconst g = R.flip(R.binary(f));\n```\n\n``` javascript\nconst g = (x, y) => f(y, x);\n```\n\nThe `g` defined in the second case is not curried, of course, but this could be achieved by applying `R.curry` to the wrapper function if desired. Still, I find the second case easier to parse.\n",
    "head_branch": "arg-truncators",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c288dfb6b84f2425875",
    "number": 1857,
    "body": "`R.wrap` was deprecated in #1818 after discussion in #1387.\n",
    "head_branch": "deprecated",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "remove functions deprecated in v0.22.0 (#1857)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c288dfb6b84f2425876",
    "number": 1855,
    "body": "",
    "head_branch": "fix-set-doc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "'fix' internal jsdoc comments that were choking the docs build (#1855)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c298dfb6b84f2425877",
    "number": 1852,
    "body": "original issue: https://github.com/ramda/ramda/issues/1776\n\nAlso, here is a single file with all symbols together for easier viewing/editing: https://github.com/thurt/ramda-analysis/blob/master/symbols.js\n\nThere will be a second pull request to ramda.github.io repo in order to display these to the web documentation. I will reference it when I make that PR. \n\nThis PR is totally flexible so add suggestions for the changes you would like to see!\n",
    "head_branch": "adds-symbols",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "adds-symbols - initial commit (#1852)\n\n* adds-symbols - initial commit\r\n\r\n* fix lint error: trailing spaces in mapAccum.js and mapAccumRight.js"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c2a8dfb6b84f2425878",
    "number": 1847,
    "body": "from #1846,\nR.thrush is the T combinator.\nexamples : http://goo.gl/8tp3jI\nwith lenses : http://goo.gl/RgLubh\n",
    "head_branch": "thrush-combinator",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c2b8dfb6b84f2425879",
    "number": 1844,
    "body": "",
    "head_branch": "typecurry",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c2c8dfb6b84f242587a",
    "number": 1843,
    "body": "Closes #1363. WIP.\n- placeholder support in `partial`\n- no more curry1 :emoji:\n- don't need [test/internal](https://github.com/ramda/ramda/tree/master/test/internal) anymore, only files in there were curry{2,3}.js and they were only testing R.__ support\n- curry about 10% faster according to benchRunner\n- added `rearg`. Simple enough function I think, don't really have a strong opinion one way or the other if it should be included.\n\ntodo:\n- clean up the rest of the tests using `R.__`\n- check doc examples for `R.__`\n- `partialRight`\n- other?\n\nLet me know how it's looking so far.. son is waking up from nap, gotta run! bbl\n",
    "head_branch": "move-placeholder-to-partial",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c2d8dfb6b84f242587b",
    "number": 1841,
    "body": "Fix #1838\n",
    "head_branch": "log_format",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Change console.log comment style (#1841)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c2e8dfb6b84f242587c",
    "number": 1840,
    "body": "",
    "head_branch": "ntharg",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1840 from buzzdecafe/ntharg\n\nnthArg should return a curried function"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c2f8dfb6b84f242587d",
    "number": 1836,
    "body": null,
    "head_branch": "bind_example",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add bind example (#1836)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c308dfb6b84f242587e",
    "number": 1834,
    "body": "Fixes #1501\n",
    "head_branch": "bookmarklet",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1834 from davidchambers/bookmarklet\n\nreadme: use absolute bookmarklet URL"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c318dfb6b84f242587f",
    "number": 1833,
    "body": "Addresses issue #1832 .\n",
    "head_branch": "issue-1832",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Issue 1832 (#1833)\n\n* Add tests for corner cases in R.evolve.\r\n\r\nR.evolve correctly ignores primitive values, but doesn't ignore null.\r\n\r\n* Address issue #1832.\r\n\r\nCheck `transformation` is not null in addition to checking if it's\r\nof type 'object'. This is because `typeof null === 'object'`."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c328dfb6b84f2425880",
    "number": 1829,
    "body": "Based on feedback in #1824.\n",
    "head_branch": "applyspec_converge",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add converge to see doc in applySpec (#1829)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c338dfb6b84f2425881",
    "number": 1828,
    "body": "",
    "head_branch": "thinkingInRamda",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add link to Thinking in Ramda (#1828)\n\n* Add link to thinking in ramda closes #1827\r\n\r\n* Squash all introductions in one section"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c348dfb6b84f2425882",
    "number": 1822,
    "body": "Cross-references `R.path` and `R.prop`.  Replaces #1821.\n",
    "head_branch": "cross-reference-path",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Cross-references R.prop with R.path and vice-versa (#1822)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c358dfb6b84f2425883",
    "number": 1821,
    "body": "I've added a new function, `propPath`, which returns a function that returns the value at the supplied path.  It is meant to complement `prop` as `assocPath` does `assoc`.\n",
    "head_branch": "propPath",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c368dfb6b84f2425884",
    "number": 1820,
    "body": "Seems like `evolveWhere` could be relevant too -- perhaps even the same function. If I used R.map rather than list.map then it should work. I just don't know what we'd call it.\n",
    "head_branch": "adjustWhere",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c378dfb6b84f2425885",
    "number": 1819,
    "body": "`R.allUniq` was deprecated in #1626 after discussion in #1622.\n",
    "head_branch": "deprecated",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "remove functions deprecated in v0.20.0 (#1819)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c388dfb6b84f2425886",
    "number": 1818,
    "body": "I've wanted to deprecate this function for a long time, as I've yet to see an example not better expressed _without_ `wrap`. Consider the examples in the documentation:\n\n``` javascript\nvar greet = name => 'Hello ' + name;\n\n//  Option 1: R.wrap\nvar shoutedGreet1 = R.wrap(greet, (gr, name) => gr(name).toUpperCase());\n\n//  Option 2: R.compose\nvar shoutedGreet2 = R.compose(R.toUpper, greet);\n\n//  Option 3: lambda\nvar shoutedGreet3 = name => greet(name).toUpperCase();\n\n//  Option 1: R.wrap\nvar shortenedGreet1 = R.wrap(greet, function(gr, name) {\n  return gr(name.substring(0, 3));\n});\n\n//  Option 2: R.compose\nvar shortenedGreet2 = R.compose(greet, R.take(3));\n\n//  Option 3: lambda\nvar shortenedGreet3 = name => greet(name.substring(0, 3));\n```\n\n`wrap` introduces indirection in these cases and gains us nothing. Note that we're providing `greet` as an argument to `wrap` only for `wrap` to then provide it to us as an argument (which we name `gr`). Why not simply reference `greet` directly? :stuck_out_tongue_winking_eye:\n",
    "head_branch": "wrap",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "deprecate R.wrap (#1818)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c398dfb6b84f2425887",
    "number": 1814,
    "body": "Was updating our company docs for our legal purposes and noticed Ramda was a little out of date.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update LICENSE.txt (#1814)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c3a8dfb6b84f2425888",
    "number": 1813,
    "body": "Fix image link (broken on npm and tonic).\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update README.md (#1813)\n\nFix image link (broken on npm and tonic)."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c3a8dfb6b84f2425889",
    "number": 1811,
    "body": "See ramda/ramda.github.io#87\n",
    "head_branch": "prepublish",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "prepublish: support old versions of GNU bash (#1811)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c3b8dfb6b84f242588a",
    "number": 1807,
    "body": "Close ramda/ramda#1806 — Add links between the docs for `R.difference` and related methods.\n\nAdds links between the documentation of the following methods:\n- `R.difference`\n- `R.differenceWith`\n- `R.symmetricDifference`\n- `R.symmetricDifferenceWith`\n\nRelated to https://github.com/ramda/ramda.github.io/issues/72, as the docs might need to be rebuilt.\n",
    "head_branch": "docs-difference-links",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix error in R.modulo docstring (#1803) (#1807)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c3c8dfb6b84f242588b",
    "number": 1803,
    "body": "Close #1802 — Error in `R.modulo` docstring.\n",
    "head_branch": "fix-modulo-docstring",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix error in R.modulo docstring (#1803)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c3d8dfb6b84f242588c",
    "number": 1794,
    "body": "Fixes a bug in the \"try this function\" feature.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Currently trying where is broken due to _ (#1794)\n\nFixes a bug in the \"try this function\" feature."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c3e8dfb6b84f242588d",
    "number": 1793,
    "body": "Fixes #1792 \n- Reintroduce #923 fix that was reverted by #1245 \n- Add test case\n",
    "head_branch": "fix-take",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix R.take extra step (#1793)\n\n* add sinon to devDependencies\r\n\r\n* fix R.take extra step"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c3f8dfb6b84f242588e",
    "number": 1788,
    "body": "",
    "head_branch": "tryCatch_doc_typo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixed typo in tryCatch example (#1788)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c408dfb6b84f242588f",
    "number": 1786,
    "body": "ok here it is. i think there are still some gaps.\n1. it is not possible to invoke `Just.Nothing()` because the placeholder-tail is wagging the ramda-dog. In order to present a consistent API, i have to `_curry1(Nothing)`, effectivekly making `Nothing` a unary function instead of a nullary one. That just doesn't feel right. If I don't do this, then it fails an invariant test. \n\n~~2. I don't think the tests are correct. It is passing the \"foldable\" test although `reduce` is not on `Maybe` (yet). So some investigation is required there.~~\n",
    "head_branch": "justnothing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c418dfb6b84f2425890",
    "number": 1784,
    "body": "I am not sure if the eslint config is meant to be targeting v2.0 yet so this may not be a desired update. I found the warning about the \"space-after-keywords\" being replaced in v2.0 and replaced it with its up to date rule \"keyword-spacing\".\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated eslint to v2  (#1784)\n\n* Updated eslint rule \"space-after-keywords\" to \"keyword-spacing\" for eslint v2.0\r\n\r\n* Upgrade to eslint v2.0. Set eslint env to es6"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c428dfb6b84f2425891",
    "number": 1782,
    "body": "This looks like it would only be a problem if the ramda functions are not namespaced under `R.` etc. For the Ramda REPL, the original code example does produce an error\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "changes juxt code example to prevent name conflict with range (#1782)\n\nThis looks like it would only be a problem if the ramda functions are not namespaced under `R.` etc. For the Ramda REPL, the original code example does produce an error"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c438dfb6b84f2425892",
    "number": 1781,
    "body": "This looks wrong. From haskell's [Kleisli composition](http://hackage.haskell.org/package/base-4.9.0.0/docs/Control-Monad.html#v:-62--61--62-):\n\n``` haskell\n(>=>) :: Monad m => (a -> m b) -> (b -> m c) -> a -> m c\n```\n\nThis supposed to produce a function which takes as input a normal type and returns a monad. There was also an incorrect function in the example\n",
    "head_branch": "bp-fix-composeK",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c448dfb6b84f2425893",
    "number": 1780,
    "body": "This was brought up in https://github.com/ramda/ramda/issues/1776\n",
    "head_branch": "bp-fix-ap-signature",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix ap signature (#1780)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c458dfb6b84f2425894",
    "number": 1779,
    "body": "Thanks for drawing attention to these type errors, @mLuby!\n",
    "head_branch": "lens-path",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix type errors in tests for R.lensPath (#1779)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c468dfb6b84f2425895",
    "number": 1777,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix Duplicate declaration \"add\" error in example in REPL (#1777)\n\n* fix Duplicate declaration \"add\" error in example in REPL\r\n\r\n* Update reduce.js\r\n\r\n* Update reduce.js\r\n\r\n* Update reduce.js"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c478dfb6b84f2425896",
    "number": 1775,
    "body": "Closes #1773\n",
    "head_branch": "accumObj",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c488dfb6b84f2425897",
    "number": 1771,
    "body": "The REPL is broken without this fix.\n",
    "head_branch": "not",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix: add correct comments escaping for R.not example (#1771)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c498dfb6b84f2425898",
    "number": 1768,
    "body": "Node 6 is going to be the new LTS version of Node so probably best to start running the tests against it.\n",
    "head_branch": "node-6",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "run tests on node 6 (#1768)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c4a8dfb6b84f2425899",
    "number": 1767,
    "body": "In the discussion that flowed from sanctuary-js/sanctuary#214 we toyed with the idea of testing the fallback for when `Object.keys` is not present. In the end we decided ES3 support was more hassle than it's worth but if Ramda wants to support such ancient browsers then there really ought to be tests for these fallbacks. \n",
    "head_branch": "keys-es3-test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c4b8dfb6b84f242589a",
    "number": 1765,
    "body": "So don't create a new object when the prop isn't found in it.\n",
    "head_branch": "fix/mutateWhenNecessary",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c4c8dfb6b84f242589b",
    "number": 1764,
    "body": "See #1756 for prior discussion.\n",
    "head_branch": "no-instanceof",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c4d8dfb6b84f242589c",
    "number": 1763,
    "body": "In Ramda's early days we were guilty of Underscore-like special cases. ;)\n",
    "head_branch": "from-pairs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1763 from davidchambers/from-pairs\n\ndo not filter out invalid values in R.fromPairs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c4e8dfb6b84f242589d",
    "number": 1762,
    "body": "Closes #1753\n",
    "head_branch": "from-pairs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1762 from davidchambers/from-pairs\n\ntest and document the handling of duplicate keys in R.fromPairs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c4f8dfb6b84f242589e",
    "number": 1759,
    "body": "In [1709](https://github.com/ramda/ramda/issues/1709#issuecomment-205089684) it was mentioned that recently several internal dependencies have crept into the Ramda code base. Looking at the [recent pull request](https://github.com/ramda/ramda/pull/1757) for `R.concat`, I noticed the dependency on `invoker`. While I can appreciate the better error message I can't help but think that a function as fundamental as `concat` should be implemented in its own terms. Also, not that important but on my machine it seems like this version is around 20-30 per cent quicker on arrays with 1000 or less elements:\n\nhttp://goo.gl/SgU42T\n",
    "head_branch": "concat-simplify",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "remove dependency on R.invoker in R.concat (#1759)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c508dfb6b84f242589f",
    "number": 1758,
    "body": "I have added a partial equals method.\nIt's useful for filters and such.\n\n```\nR.subequals({ id: 4, name: 'fred' }, { id: 4, name: 'fred', surname: 'basset' }) => true\n```\n\nWhat additional items are required for this to be accepted?\nI will write tests and documentation for this method if that is likely to result in the change request being accepted. Perhaps it should be named differently?\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c518dfb6b84f24258a0",
    "number": 1757,
    "body": "Fix for https://github.com/ramda/ramda/issues/1755\n",
    "head_branch": "concatbugfix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "concat now throws when concatenating array with non-array\n\n* concat now throws when concatenating array with non-array\r\n\r\n* Added missing toString import\r\n\r\n* Added note on differing semantics with Array.prototype.concat\r\n\r\n* Fixed trailing spaces"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c528dfb6b84f24258a1",
    "number": 1756,
    "body": "Fixes #1670\n\nI'd like to \"fix\" `R.is` and `R.propIs` as well, but that can wait for another day.\n\nSee sanctuary-js/sanctuary#100 for context.\n",
    "head_branch": "no-instanceof",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1756 from davidchambers/no-instanceof\n\navoid instanceof checks"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c538dfb6b84f24258a2",
    "number": 1749,
    "body": "this is a strawman proposal to generate some discussion about bringing a Maybe type into the core lib, but without forcing it down users' throats\n",
    "head_branch": "toMaybe",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c548dfb6b84f24258a3",
    "number": 1748,
    "body": "I think defining `propEq` and `propIs` in terms of `propSatisfies` is elegant, but having had problems using these functions on large lists I feel performance is probably more important.\n\nI added a benchmark for `propEq` and had these results running locally:\n\n```\n# original definition\npropEq(\"value\", [1, 2… │ 368,588Hz │ 2.06% error margin\n\n# new definition\npropEq(\"value\", [1, 2… │ 438,435Hz │ 1.79% error margin\n```\n\nCould add a benchmark for `propIs` too but I expect the results would be quite similar.\n\nLet me know what you think\n",
    "head_branch": "perf-propEq-propIs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "improve perf of propEq and propIs (#1748)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c558dfb6b84f24258a4",
    "number": 1743,
    "body": "Fixes #1742\n",
    "head_branch": "uniq-neg-zero-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1743 from scott-christopher/uniq-neg-zero-fix\n\nFixes equality of neg-zero in _Set"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c568dfb6b84f24258a5",
    "number": 1741,
    "body": "When using [`S.lift2`](http://sanctuary.js.org/#lift2), which is defined in terms of `R.map` and `R.ap`, I expected this to work:\n\n``` javascript\nlift2(map,\n      assoc('name'),\n      get(Object, _, newDeps))\n```\n\nI was forced to write this instead:\n\n``` javascript\nlift2(map,\n      x => assoc('name', x),\n      get(Object, _, newDeps))\n```\n\nI'm fairly sure the current definition of `R.ap` is unsound.\n\nHaskell:\n\n``` haskell\nPrelude Control.Applicative> (<*>) (+) (* 2) 10\n30\n```\n\nRamda (before):\n\n``` javascript\n> R.ap(R.add)(R.multiply(2))(10)\n«Function»\n```\n\nRamda (after):\n\n``` javascript\n> R.ap(R.add)(R.multiply(2))(10)\n30\n```\n\nAs a bonus, the new definition is much clearer.\n\nPlease review this change, @benperez.\n",
    "head_branch": "ap",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1741 from davidchambers/ap\n\nfix handling of function applicatives in R.ap"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c578dfb6b84f24258a6",
    "number": 1739,
    "body": "Closes #1737\n",
    "head_branch": "reduceWhile",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1739 from buzzdecafe/reduceWhile\n\nreduceWhile fixes #1737"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c588dfb6b84f24258a7",
    "number": 1738,
    "body": "Clarified documentation for dropLastWhile and dropWhile as discussed on issue#1730\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Issue#1730 Documentation somewhat unclear for dropLastWhile (#1738)\n\n* Issue#1730 Documentation somewhat unclear for dropLastWhile\r\n\r\n* Issue#1730 Documentation somewhat unclear for dropLastWhile - review changes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c598dfb6b84f24258a8",
    "number": 1736,
    "body": "reduceBy, indexBy, countBy can now act as transducers; Bonus: groupBy no longer clones each step of the way in transducer-mode\n",
    "head_branch": "_xreduceBy",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1736 from asaf-romano/_xreduceBy\n\nGeneralize _xgroupBy to _xreduceBy"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c5a8dfb6b84f24258a9",
    "number": 1735,
    "body": "Related with issue #1734 \n",
    "head_branch": "R.all_empty_array",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c5b8dfb6b84f24258aa",
    "number": 1733,
    "body": "closes https://github.com/ramda/ramda/issues/1732\n",
    "head_branch": "bp-chain-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1733 from benperez/bp-chain-docs\n\nupdate chain docs to mention FL"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c5b8dfb6b84f24258ab",
    "number": 1729,
    "body": "Fixes #1728.\n",
    "head_branch": "groupWith-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1729 from svozza/groupWith-docs\n\nFix groupWith docs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c5c8dfb6b84f24258ac",
    "number": 1727,
    "body": "Looks like CDN links were broken since [0.20.1](https://github.com/ramda/ramda/commit/dbc17cc71467daaff0a91ab64599761c80804e65#diff-04c6e90faac2675aa89e2176d2eec7d8). Maybe a bug in `prepublish` script?\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1727 from cust0dian/patch-1\n\nFix CDN links"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c5d8dfb6b84f24258ad",
    "number": 1723,
    "body": "Fixes #1717\n",
    "head_branch": "fixpre",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1723 from buzzdecafe/fixpre\n\nMake prepublish script work on GNU"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c5e8dfb6b84f24258ae",
    "number": 1721,
    "body": "Fix arguments order in doc of R.nth\n",
    "head_branch": "fix-nth-doc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1721 from fobos/fix-nth-doc\n\nFix R.nth doc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c5f8dfb6b84f24258af",
    "number": 1713,
    "body": "",
    "head_branch": "reduceBy-usages",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1713 from asaf-romano/reduceBy-usages\n\nDefine indexBy and countBy in terms of reduceBy"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c608dfb6b84f24258b0",
    "number": 1711,
    "body": "so that `function(a, b) { return a + 1; }` is allowed.\n",
    "head_branch": "eslint-unused",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1711 from asaf-romano/eslint-unused\n\neslint config: allow unused args"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c618dfb6b84f24258b1",
    "number": 1710,
    "body": "This snuck through in #1621.\n",
    "head_branch": "lift",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1710 from davidchambers/lift\n\nremove circular reference in R.lift docstring"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c628dfb6b84f24258b2",
    "number": 1707,
    "body": "Closes #1706\n",
    "head_branch": "reduceBy-signature",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1707 from asaf-romano/reduceBy-signature\n\nChange reduceBy to take the value function and the accumulator value first"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c638dfb6b84f24258b3",
    "number": 1704,
    "body": "Using `R.groupBy` on large arrays can get pretty slow.\n\nSimply using `arr.push()` instead of `R.append` improves performance significantly. Since the accumulator in the reducer is internal, this mutation shouldn't be a problem.\n\nSee [this perf test](http://jsperf.com/ramda-groupby-slow-for-large-arrays/2)\n\nAll credit to @davidgtonge\n\nAlso, I noticed `_xgroupBy.js`. Should this be updated too as part of this PR? I couldn't immediately see if it was safe to mutate instead of using `append` in that case.\n",
    "head_branch": "optimise-groupBy",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1704 from ThomWright/optimise-groupBy\n\nOptimize groupBy to use mutation in reducer"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c648dfb6b84f24258b4",
    "number": 1703,
    "body": "The category in R.clamp was misspelled to 'Relaction'\n",
    "head_branch": "clamp-typo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1703 from pauloliver/clamp-typo\n\nFixed category typo in R.clamp documentation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c658dfb6b84f24258b5",
    "number": 1702,
    "body": "Closes https://github.com/ramda/ramda/issues/1688\n",
    "head_branch": "bp-add-groupWith",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1702 from benperez/bp-add-groupWith\n\nadd R.groupWith"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c668dfb6b84f24258b6",
    "number": 1701,
    "body": "",
    "head_branch": "applySpec-juxt-see-also",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1701 from asaf-romano/applySpec-juxt-see-also\n\nCross-reference juxt and applySpec"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c678dfb6b84f24258b7",
    "number": 1700,
    "body": "My fault. It turns out that the polyfill isn’t nearly as fast as the native implementation (at least in Firefox).\n",
    "head_branch": "native-object-assign",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1700 from asaf-romano/native-object-assign\n\nUse native Object.assign if available"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c688dfb6b84f24258b8",
    "number": 1699,
    "body": "… the new object. Fixes #1697 \n\nImplemented a version of assoc the does not flatten prototype properties.\n\nIt runs 2-3x slower than the original one however it's still pretty fast. \n\nThere's some measuring [here](https://jsfiddle.net/wuqq57mk/2/)\n",
    "head_branch": "enhancement/assoc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c698dfb6b84f24258b9",
    "number": 1693,
    "body": "as indicated in https://github.com/ramda/ramda.github.io/pull/70\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c6a8dfb6b84f24258ba",
    "number": 1692,
    "body": "fixes #1690\n\nEnglish is not my native, and so I'm not sure what is clear description for this function.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1692 from iofjuupasli/master\n\nuntil"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c6b8dfb6b84f24258bb",
    "number": 1689,
    "body": "i think it's very helpful if we pass the index\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c6c8dfb6b84f24258bc",
    "number": 1672,
    "body": "This is PR is just an experiment at this point. But I really think it would be useful -- or maybe there's a better way of dealing with my issues. [This discussion](https://github.com/ramda/ramda/issues/1481) didnt get too far, so let me rephrase some things.\n\nIn the big picture, I want to find some way of [optimizing a \"listOf\" higher-order component **in a pure functional way**.](https://github.com/ccorcos/elmish/blob/master/src/ui/listOf.js)  (it may make more sense if you just [browse through these](https://github.com/ccorcos/elmish/tree/master/tutorial)). This consists of (1) being able to lazily build, difference, and evaluate trees in an idiomatic fashion and (2) being able to compare bound functions as if they're referentially transparent to satisfy the first point.\n\nLets start with the second point. Here's a simple example using React:\n\n``` js\nconst Counter = React.createClass({\n  render() {\n    const inc = () => this.props.update(this.props.value + 1)\n    return (\n      <div>\n        <span>{this.props.value}</span>\n        <button onClick={inc}>inc</button>\n      </div>\n    )\n  }\n})\n\nconst ListOfCounters = React.createClass({\n  getInitialState() {\n    return {numbers: [1,2,3,4,5,6,7,8,9,10]}\n  },\n  update(i, value) {\n    this.setState(R.evolve({\n      numbers: R.update(i, value)\n    }, this.state))\n  },\n  render() {\n    const update = (i) => (value) => this.update(i, value)\n    const counter = (value, i) => <Counter value={value} update={update(i)}/>\n    return (\n      <div>\n        {this.state.numbers.map(counter)}\n      </div>\n    )\n  }\n})\n```\n\nThe issue here is that whenever a single counter changes, all counters need to re-render. Thats because the `update` prop to each counter has a new reference. One solution is to make a custom `shouldComponentUpdate` that ignores the comparison of the `update` prop. But there are more complicated scenarios where this isn't a good thing to do, for example, if the list could add and remove counters so the indexes change. What would be amazing though, is if you could use `R.equals` to compare new props and `R.equals` can compare functions _as if they're referentially transparent_. And the only change that would need to be made to the logic (other than changing `shuoldCompnentUpdate` to use `R.equals`) above is:\n\n``` js\nconst update = R.curry(this.update)\n```\n\nThats because we're able to keep track of the original function and any bound arguments thus far. \n\nNow, `R.curry` isn't the only place you'd want this kind of functionality. Maybe you just want a thunk to call a function with some arguments. For example:\n\n``` js\nconst ListOfCounters = React.createClass({\n  getInitialState() {\n    return {numbers: [1,2,3,4,5,6,7,8,9,10]}\n  },\n  update(i) {\n    this.setState(R.evolve({\n      numbers: R.adjust(i, R.inc)\n    }, this.state))\n  },\n  render() {\n    const counter = (value, i) => {\n      const inc = () => this.update(i)\n      return (\n        <div>\n          <span>{value}</span>\n          <button onClick={inc}>inc</button>\n        </div>\n      )\n    }\n    return (\n      <div>\n        {this.state.numbers.map(counter)}\n      </div>\n    )\n  }\n})\n```\n\nIn this case, you don't exactly want to curry, but you want to return a `thunk`. So perhaps we could have a function called `R.thunk` or maybe we could just use `R.partial`. But the point is that we have a function that is bound to an argument. And so long as we're using pure functional programming patterns, then there should be no harm in partially applied functions being referentially transparent. That is:\n\n``` js\nR.equals(R.partial(f, 1), R.partial(f, 1))\n```\n\nObviously they won't truely be referentially transparent in JavaScript, but that's why we have Ramda, right?\n\nThis leads me back to the first point... React lazily evaluates the virtual dom tree because when you create a component like `<Counter value={value} update={update}/>`, the JSX compiles into `React.createElement(Counter, {value, update})` which in turn returns some sort of object like `{type: Counter, props: {value, update}}`. When React is evaluating the vdom to see if there are any updates, it first sees if we want to render the same component (Counter), and then compares the props to see if a re-render is needed. The thing that bugs me about this is that this format is so specific to React. Sure, we could copy it, but I think theres a much more idiomatic way of accomplishing all of this.\n\nSuppose our components are \"stateless components\" as React would call it, or just functions. What we really want here is a thunk like we talked about before.\n\n```\nconst thunk = R.partial(render, props)\n```\n\nIf we call `thunk()` we'll get back the vdom tree thats returned from render. But if we want to lazily evaluate the vdom tree, we can simply use `R.equals` to compare thunks to determine if anything has changed. \n\nWhat I really like about this approach is its more generic feeling--its just a function with bound arguments. In an academic, functional, pure world, there's no reason bound functions shouldnt be referentially transparent. As I've been getting more and more familiar with functional programming, this has always been the limiting factor as far as complexity/performance in javascript, esp in my [elmish](https://github.com/ccorcos/elmish) project where I'm building similar lazy trees for things like http requests and side-effects other than just the vdom.\n\nMaybe I'm just too far down the rabbit hole, but I hope that all makes sense. I'm very interested to hear some of your thoughts.\n\nCheers\n",
    "head_branch": "curried-function-equality",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c6d8dfb6b84f24258bd",
    "number": 1671,
    "body": "Fixes #1633 - broken link in README.md to \"Introducing Ramda\" by Buzz de Cafe\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c6e8dfb6b84f24258be",
    "number": 1669,
    "body": "Resolves https://github.com/ramda/ramda/issues/1667\n",
    "head_branch": "fix/zipObj",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 352f6c6ab8af0682e0c0a72a7a11dd295a7a9a4a into 6bea343865bcafa948694a6527db8016350519e0"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7c6f8dfb6b84f24258bf",
    "number": 1668,
    "body": "Addresses #1666\n",
    "head_branch": "traverse-example",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c6f8dfb6b84f24258c0",
    "number": 1664,
    "body": "Reverts ramda/ramda#1649\n\nSee discussion [here](https://github.com/ramda/ramda/issues/1447)\n",
    "head_branch": "revert-1649-bp-deprecate-converge",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c708dfb6b84f24258c1",
    "number": 1660,
    "body": "",
    "head_branch": "merge-optimizations",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c718dfb6b84f24258c2",
    "number": 1657,
    "body": "Closes #1656\n",
    "head_branch": "_stepCat",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c728dfb6b84f24258c3",
    "number": 1655,
    "body": "Closes #1651\n",
    "head_branch": "partition-obj",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 22c4d208091c70c689c168b118aab7de7a367793 into 0e6748fed234bc0e765d3408f562c1e72de7bb50"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7c738dfb6b84f24258c4",
    "number": 1649,
    "body": "Closes https://github.com/ramda/ramda/issues/1447\n",
    "head_branch": "bp-deprecate-converge",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c748dfb6b84f24258c5",
    "number": 1648,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c758dfb6b84f24258c6",
    "number": 1639,
    "body": "This change moves the logic for handling the equality semantics from within `R.uniqBy` into a separate `internal/_Set` type, cleaning up the internals of `R.uniqBy` while making something of a reusable Set type that honours `R.equals` semantics and can also be used in environments where a native `Set` doesn't exist.\n\nPerformance gets a nice little boost on earlier versions on Node too :wink:\n\n```\n> process.version\n'v0.10.36'\n> a = R.range(0, 1e6);\n> c.time(''); _.uniq(a); c.timeEnd('');\n: 156ms\n> c.time(''); R.uniq(a); c.timeEnd('');\n: 235ms\n\n> process.version\n'v5.5.0'\n> a = R.range(0, 1e6);\n> c.time(''); _.uniq(a); c.timeEnd('');\n: 315.964ms\n> c.time(''); R.uniq(a); c.timeEnd('');\n: 250.782ms\n```\n",
    "head_branch": "custom-set",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c768dfb6b84f24258c7",
    "number": 1636,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c778dfb6b84f24258c8",
    "number": 1632,
    "body": "It seems that it is a typo, but I am not sure :-)\n",
    "head_branch": "chore-typo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c788dfb6b84f24258c9",
    "number": 1626,
    "body": "See #1622\n",
    "head_branch": "all-uniq",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c798dfb6b84f24258ca",
    "number": 1625,
    "body": "",
    "head_branch": "deprecated",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c7a8dfb6b84f24258cb",
    "number": 1623,
    "body": "Dunno if there's interest in this, but I went ahead and added istanbul integration for getting a more concrete idea of existing test coverage via `npm run coverage`, which gives nearly identical output as the existing `npm test`, but with a console summary of overall coverage, as well as some reports to `coverage/`.\n\nFeedback welcome!\n\n![image](https://cloud.githubusercontent.com/assets/413269/12783864/cf10c958-ca51-11e5-9be1-8f314d7739d1.png)\n",
    "head_branch": "add-coverage-script",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c7b8dfb6b84f24258cc",
    "number": 1621,
    "body": "Amended docs for lift and liftN to indicate support for functions-as-applicatives via R.ap\nsee https://github.com/ramda/ramda/issues/1447\n\nI have also changed  _list_ to _Array_ in the `liftN` docs; this is consistent with the `lift` docs.\n",
    "head_branch": "liftdocs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c7c8dfb6b84f24258cd",
    "number": 1619,
    "body": "Fixes #1616\n",
    "head_branch": "equals",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c7d8dfb6b84f24258ce",
    "number": 1618,
    "body": "",
    "head_branch": "recursive-where",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c7e8dfb6b84f24258cf",
    "number": 1609,
    "body": "This was discussed in #1554 and seemed to have a reasonable bit of support. I'm happy to do some of the other suggestions made in that issue, like a consistent way to represent dictionaries - as `{a}` - but that seemed to get a more lukewarm reception.\n",
    "head_branch": "any-type-for-docs-1554",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c7f8dfb6b84f24258d0",
    "number": 1608,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c808dfb6b84f24258d1",
    "number": 1607,
    "body": "Fixes #1606 .\n",
    "head_branch": "createMapEntry-doc-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c818dfb6b84f24258d2",
    "number": 1605,
    "body": "Fixes #1604\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c828dfb6b84f24258d3",
    "number": 1603,
    "body": "``` js\nR.isBetween(1, 3, 2);     //=> true\nR.isBetween(1, 3, 4);     //=> false\n```\n",
    "head_branch": "isBetween",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c828dfb6b84f24258d4",
    "number": 1601,
    "body": "Now that simple JS objects are treated as functors, `map` and `filter` works over it, `reduce` should also work over objects.\n",
    "head_branch": "object_reduce",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c838dfb6b84f24258d5",
    "number": 1600,
    "body": "As discussed in #1599 these functions are not curried by default and it's helpful to explain this in the documentation .\n",
    "head_branch": "no-curry-compose-doc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c848dfb6b84f24258d6",
    "number": 1598,
    "body": "### Motivation\n\nI very often need to group elements of a list and immediately apply some transformation to the grouped sub-lists or their elements. It’s usually quite ineffective to do it in two steps (requires another loop with nested loop and intermediate arrays).\n\nI’m quite sure that it’s very common need so there _must be_ some “standard” name for such function. I’ve tried to find something in Haskell, but without success. Eventually I found a function named `reduceBy` which does what I need in these two libs:\n- [itertoolz.reduceby](http://toolz.readthedocs.org/en/latest/api.html#toolz.itertoolz.reduceby) (Python), \n- [CloudFlow.reduceBy](https://github.com/mbraceproject/MBrace.Core/blob/7de07474e7ed32adc90a66c93c6e8fa279577a14/src/MBrace.Flow/Combinators.fs#L646-L666) (F#).\n#### Example 1\n\n``` js\nconst students = [\n  { name: 'Lucy', score: 92 },\n  { name: 'Drew', score: 85 },\n  // ...\n  { name: 'Bart' score: 62 },\n]\nconst grade = (n) => (n < 65) ? 'F' : (n < 70) ? 'D' : (n < 80) ? 'C' : (n < 90) ? 'B' : 'A'\nconst byGrade = R.pipe(R.prop('score'), grade)\n\n// A. Using R.groupBy and nested pair of R.map:\nconst namesByGrade = R.pipe(\n  R.groupBy(byGrade),\n  R.map(R.map(R.prop('name')))\n)\n\n// B. Using new R.reduceBy:\nconst namesByGrade = R.reduceBy(byGrade, (acc, stud) => acc.concat(stud.name), [])\n\nnamesByGrade(students)\n// {\n//   'A': ['Lucy'],\n//   'B': ['Drew'],\n//   // ...\n//   'F': ['Bart'],\n// }\n```\n#### Example 2\n\n``` js\nconst tweets = [\n  { author: '@drboolean', text: 'Lorem ipsum', favs: 60 },\n  { author: '@dan_abramov', text: 'dolor sit amet', favs: 80 },\n  { author: '@drboolean', tex: 'consectetur', favs: 40 },\n  // ...\n]\n\n// A. Using R.groupBy, R.map and nested R.reduce:\nconst sumFavsByUser = R.pipe(\n  R.groupBy(R.prop('author')),\n  R.map(R.reduce((acc, tw) => acc + tw.favs))\n)\n\n// B. Using new R.reduceBy:\nconst sumFavsByUser = R.reduceBy(R.prop('author'), (acc, tw) => acc + tw.favs, 0)\n\nsumFavsByUser(tweets)\n// {\n//    '@drboolean': 100,\n//    '@dan_abramov': 80,\n// }\n```\n### Transducer?\n\nI’ve implemented also `_xreduceBy` transducer, but I’m not sure how to use it (and so how to test it). How can be `groupBy` used with `R.transduce` or `R.into`?\n\n<a name=\"poll\" />\n### Poll\n\n| Name | Vote |\n| --- | --- |\n| @davidchambers | [:+1:](https://github.com/ramda/ramda/pull/1598#issuecomment-173035182) |\n| @buzzdecafe | [:open_hands:](https://github.com/ramda/ramda/pull/1598#issuecomment-175007799) (neutral) |\n| @CrossEye | [:+1:](https://github.com/ramda/ramda/pull/1598#issuecomment-177531934) |\n| @scott-christopher | [:+1:](https://github.com/ramda/ramda/pull/1598#issuecomment-178314222) |\n| @raine | :question: |\n",
    "head_branch": "reduceBy",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c858dfb6b84f24258d7",
    "number": 1597,
    "body": "Closes #1595\n\n`intersection` performs much much better. `intersectionWith` is almost unchanged (and wasn't as affected to begin with) because most of the time is spent on the predicate execution, apparently.\n",
    "head_branch": "intersection-optimization",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c868dfb6b84f24258d8",
    "number": 1592,
    "body": "Closes #1591\n",
    "head_branch": "applySpec",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c878dfb6b84f24258d9",
    "number": 1588,
    "body": "In response to #1585, this change adds some more descriptive argument names along with some code comments around the various lens functions.\n",
    "head_branch": "lens-doc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c888dfb6b84f24258da",
    "number": 1587,
    "body": "As suggested in #1571\n",
    "head_branch": "converge",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c898dfb6b84f24258db",
    "number": 1581,
    "body": "see #1579\n",
    "head_branch": "tryWith",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c8a8dfb6b84f24258dc",
    "number": 1580,
    "body": "See #1579\n",
    "head_branch": "add-subtract",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c8b8dfb6b84f24258dd",
    "number": 1579,
    "body": "Current behaviour:\n\n``` javascript\nR.multiply(1, 'XXX');\n// => NaN\n\nR.divide(1, 'XXX');\n// => NaN\n```\n\nNew behaviour:\n\n``` javascript\nR.multiply(1, 'XXX');\n// ! TypeError: ‘multiply’ expected a value of type Number as its second argument; received \"XXX\"\n\nR.divide(1, 'XXX');\n// ! TypeError: ‘divide’ expected a value of type Number as its second argument; received \"XXX\"\n```\n",
    "head_branch": "multiply-divide",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c8c8dfb6b84f24258de",
    "number": 1577,
    "body": "I forgot the `v` in #1557.\n",
    "head_branch": "prepublish",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c8d8dfb6b84f24258df",
    "number": 1576,
    "body": "See plaid/sanctuary-def#11\n\n/cc @svozza\n",
    "head_branch": "to-string",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c8e8dfb6b84f24258e0",
    "number": 1575,
    "body": "If we'd prefer to stick with the GitHub URL, I insist we remove the subdomain. :stuck_out_tongue_winking_eye:\n",
    "head_branch": "homepage",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c8f8dfb6b84f24258e1",
    "number": 1574,
    "body": "We removed **scripts/testfiles** in #1517, but forgot to delete this reference.\n\n/cc @scott-christopher\n",
    "head_branch": "testfiles",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c908dfb6b84f24258e2",
    "number": 1573,
    "body": "See https://github.com/ramda/ramda/issues/1560#issuecomment-168455854\n\nCurrent behaviour:\n\n``` javascript\nR.add(1, 'XXX');\n// => '1XXX'\n\nR.subtract(1, 'XXX');\n// => NaN\n\nR.inc('XXX');\n// => '1XXX'\n\nR.dec('XXX');\n// => '-1XXX'\n```\n\nNew behaviour:\n\n``` javascript\nR.add(1, 'XXX');\n// ! TypeError: ‘add’ expected a value of type Number as its second argument; received \"XXX\"\n\nR.subtract(1, 'XXX');\n// ! TypeError: ‘subtract’ expected a value of type Number as its second argument; received \"XXX\"\n\nR.inc('XXX');\n// ! TypeError: ‘add’ expected a value of type Number as its second argument; received \"XXX\"\n\nR.dec('XXX');\n// ! TypeError: ‘add’ expected a value of type Number as its second argument; received \"XXX\"\n```\n\nI far prefer the new behaviour. I'd like `R.inc` and `R.dec` to throw more appropriate errors, but that change could easily be made in a subsequent pull request.\n",
    "head_branch": "add-subtract",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c918dfb6b84f24258e3",
    "number": 1572,
    "body": "Closes #1570\n",
    "head_branch": "cond-arity",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge da1d4ade6cf2c4b173dce1c9a086508a9b7b4f1b into b9bd110aa5d353b7a60ffdc87848762bf71203d9"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7c928dfb6b84f24258e4",
    "number": 1571,
    "body": "Closes #1569\n",
    "head_branch": "juxt-converge",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c938dfb6b84f24258e5",
    "number": 1568,
    "body": "``` js\nR.range(5, 1);    //=> [5, 4, 3, 2]\n```\n\nClojure's [range](http://clojuredocs.org/clojure.core/range) works similar.\n",
    "head_branch": "range",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c948dfb6b84f24258e6",
    "number": 1567,
    "body": "See #1565\n",
    "head_branch": "none",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c958dfb6b84f24258e7",
    "number": 1566,
    "body": "Discussion [here](https://github.com/ramda/ramda/pull/1475). Now `both`/`either` short circuit for functions _and_ respect applicative functors.\n",
    "head_branch": "bp-lifted",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c968dfb6b84f24258e8",
    "number": 1565,
    "body": "The examples for `R.none` are still using `R.isNaN` which was removed in #1112. I’ve replace the examples with actual use-cases from the tests.\n",
    "head_branch": "remove-R.isNaN-leftover",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c968dfb6b84f24258e9",
    "number": 1564,
    "body": "https://github.com/ramda/ramda/issues/1563\n\n``` js\nR.clamp(1, 10, -1) // => 1\nR.clamp(1, 10, 11) // => 10\nR.clamp(1, 10, 4)  // => 4\n```\n",
    "head_branch": "clamp",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c978dfb6b84f24258ea",
    "number": 1559,
    "body": "Remove config files and jshint switches in\nthe sources.\n",
    "head_branch": "remove-lint-leftovers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove jshint/jscsrc leftovers (#1559)\n\nRemove config files and jshint switches in\r\nthe sources."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c988dfb6b84f24258eb",
    "number": 1557,
    "body": "This is a fragment of the script I wrote for #1434. Adding it to the prepublish script means that each time we run `make release-[major|minor|patch]` we'll add the appropriate `@since` annotation for each function which lacks one.\n",
    "head_branch": "prepublish",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c998dfb6b84f24258ec",
    "number": 1553,
    "body": "Both 'falsy' and 'falsey' were used, so I changed it to just 'falsy'.\n",
    "head_branch": "fix-test-typos",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c9a8dfb6b84f24258ed",
    "number": 1552,
    "body": "Fixes #1550.\n",
    "head_branch": "1550",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c9b8dfb6b84f24258ee",
    "number": 1551,
    "body": "…j function\n",
    "head_branch": "mapObj-documentation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c9c8dfb6b84f24258ef",
    "number": 1549,
    "body": "Addresses #1548\n",
    "head_branch": "contributing-since",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c9d8dfb6b84f24258f0",
    "number": 1547,
    "body": "The node 4.2.\\* branch is LTS. Should be important that Ramda supports these releases. \n",
    "head_branch": "test/ci-node-4.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c9e8dfb6b84f24258f1",
    "number": 1546,
    "body": "Resolves #1545\n\nThis adds a new `indexBy` function. Given a property name to index-by and a list of objects returns an object indexing the objects by the given property. Highly inspired by this [cookbook example](https://github.com/ramda/ramda/wiki/Cookbook#index-objects-by-property-name). \n",
    "head_branch": "function/index-by",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7c9f8dfb6b84f24258f2",
    "number": 1544,
    "body": "This addresses the issue raised by @Xananax in https://github.com/ramda/ramda/pull/1426#issuecomment-164299098.\n\n`R.mapObj` will be removed in the next release, so there's no point updating its docstring as part of this pull request.\n",
    "head_branch": "map",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ca08dfb6b84f24258f3",
    "number": 1541,
    "body": "This fixes linting errors in lensPath introduced through the new eslint rules.\n",
    "head_branch": "fix-linting-errors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ca18dfb6b84f24258f4",
    "number": 1540,
    "body": "As mentioned on gitter I would like to look into providing property tests using jsverify (https://github.com/jsverify/jsverify) \n\nFor now this PR only contains a tiny example which tests `R.add` for \n- commutativity\n- associativity \n- neutral element \n\nWriting the tests will in many cases probably not be too hard. I am having more difficulties designating the properties that should hold. I would thus like to ask for some input : What are some functions that you would like to see some properties tested for and which are they. I am happy to implement and then we can see if the outcome is something that can be considered a useful addition to Ramda or not.\n",
    "head_branch": "add-jsverify-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ca28dfb6b84f24258f5",
    "number": 1539,
    "body": "Implemented `isLt`, `isLte`, `isGt`, `isGte`.\n\n``` js\nR.map(R.isLte(3), [1, 2, 3, 4]); // [true, true, true, false]\nR.map(R.isLt(3), [1, 2, 3, 4]); // [true, true, false, false]\nR.map(R.isGt(3), [1, 2, 3, 4]); // [false, false, false, true]\nR.map(R.isGte(3), [1, 2, 3, 4]); // [false, false, true, true]\n```\n",
    "head_branch": "issue1497",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ca38dfb6b84f24258f6",
    "number": 1538,
    "body": "Fixes #1522\n\nSet the query string to **?w=** when viewing the diff to ignore the indentation change.\n",
    "head_branch": "path",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ca48dfb6b84f24258f7",
    "number": 1537,
    "body": "Fixes issue #1536.\n",
    "head_branch": "path-undefined-null",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ca58dfb6b84f24258f8",
    "number": 1534,
    "body": "Useful to differentiate from the functionality of filter.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ca58dfb6b84f24258f9",
    "number": 1533,
    "body": "Fixes half of #1179\n",
    "head_branch": "xscan",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ca68dfb6b84f24258fa",
    "number": 1530,
    "body": "Addresses #1508\n\nWhile the use of `Set` in `_contains` provided a nice boost in performance, after further thought I have come to realise that it could be replaced with a simpler `Array.prototype.indexOf` for the instances where `Set` was being utilised (though `NaN` needs to now be handled explicitly), removing the extra insertion cost and memory allocation to create the `Set`. This should remove some extra GC thrashing when used in a tight loop too, such as those often in benchmark code.\n\nI've included a new benchmark file for `R.contains` and run it against the previous implementations, resulting in the following:\n\n| Implementation | Hz | Margin of Error |\n| --- | --- | --- |\n| v0.8 | 73,693 | ±1.31% |\n| Set | 341,266 | ±0.66% |\n| indexOf (this PR) | 11,372,373 | ±0.84% |\n| nativeIndexOf | 13,820,992 | ±0.63% |\n",
    "head_branch": "perf-contains",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ca78dfb6b84f24258fb",
    "number": 1529,
    "body": "### what\n\nAs mentioned on gitter I would like to replace `jshint` and `jscs` with `eslint`. \n### why\n\neslint is flexible and powerful enough to replace the functionality of both tools. Even if rules beyond current capabilities might be required at some point there is a nice plugin architecture which would allow for custom rules. Apart from that jshint is somewhat archaic.\n### status\n\nI created a `.eslintrc` based on the existing linting configurations. The configuration was extended with rules such as http://eslint.org/docs/rules/wrap-iife and http://eslint.org/docs/rules/one-var plus a various rules for catching obvious mistakes such as dangling commas or duplicate function arguments. Obviously all sources were fixed to adhere to the rules and `npm run lint` reports no errors.\n",
    "head_branch": "use-eslint",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ca88dfb6b84f24258fc",
    "number": 1527,
    "body": "R.assocPath([], 0, {a:1}) should return 0 not {a:1}\n\nAs discussed in #1510 the previous behavior of returning the full object does not quite match the desired logic that would also be required for lensPath. From a lens point of view the focus is on the empty path and thus on the whole object, meaning the whole object is being overwritten and not \"nothing is being ovewritten\"\n",
    "head_branch": "change-assocPath-behavior",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ca98dfb6b84f24258fd",
    "number": 1526,
    "body": "As mentioned in #81 \n",
    "head_branch": "feature/unzip",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d3c5f35cf96db9a83f987d8b2a80cbcfc0744a54 into 0af21d5ddb97ed8116d8feea234dfdc84d5f63f9"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7caa8dfb6b84f24258fe",
    "number": 1525,
    "body": "Inspired by Haskell's `break`:\nhttp://hackage.haskell.org/package/base-4.8.1.0/docs/Prelude.html#v:break\n\n`R.splitWhen(R.equals(2), [1, 2, 3]);   //=> [[1], [2, 3]]`\n",
    "head_branch": "feature/splitBy",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cab8dfb6b84f24258ff",
    "number": 1524,
    "body": "Fixes #1179\nImplementation now matches R.reduce and should be compatible with other\ntypes that implement `type.scan(reducer, accumulator)` like flyd.\n",
    "head_branch": "xscan",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cac8dfb6b84f2425900",
    "number": 1521,
    "body": "Hi according to discussion [#1509](https://github.com/ramda/ramda/issues/1509) I made a lensIndes dedicated test file.\n",
    "head_branch": "SplitLensIndexTestFromLenses",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cad8dfb6b84f2425901",
    "number": 1520,
    "body": "Closes #1519\n",
    "head_branch": "memoize-once-arity",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cae8dfb6b84f2425902",
    "number": 1517,
    "body": "- Removes redundant build scripts\n- Generates test bundle for browser using browserify\n- Refactor `clone` implementation to use `valueOf` for `Date` objects to address issue in Firefox (~version 35)\n- Refactor `_equals` for `Error` instances to no longer compare properties other than `name` and `message`\n  - Safari's `Error` has `line` and `column` properties which will rarely be equal unless they're identical\n- ~~Enable strict mode in `isEmpty(arguments)` test to workaround bug in Safari~~\n- Refactor `keys` to workaround Safari bug with enumerable `length` prop on `arguments` objects\n",
    "head_branch": "browser-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7caf8dfb6b84f2425903",
    "number": 1516,
    "body": "Current behaviour:\n\n``` javascript\n> R.toString({toString: function() { return 'x'; }})\n'{\"toString\": function () { return \\'x\\'; }}'\n```\n\nNew behaviour:\n\n``` javascript\n> R.toString({toString: function() { return 'x'; }})\n'x'\n```\n",
    "head_branch": "to-string",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cb08dfb6b84f2425904",
    "number": 1514,
    "body": "R.flip uses `ap` method of object  instead of just `map` so we need to update documentation\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cb18dfb6b84f2425905",
    "number": 1513,
    "body": "JSDoc needs unused parameter for function declaration and documentation string when functions use the arguments object.\n\nSee more: http://usejsdoc.org/tags-param.html#multiple-types-and-repeatable-parameters\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cb28dfb6b84f2425906",
    "number": 1512,
    "body": "Addresses #1449, #1500, #1503 & #1508 regarding performance concerns with `uniq` and `contains`.\n\nThe main changes include:\n- Refactoring the various internal currying functions to ensure the args are `Object`s before checking for the placeholder property, preventing unnecessary boxing/unboxing of primitives.\n- Some tweaks to the conditional layout of the internal currying functions to reduce redundant conditional tests.\n- `_contains` and `uniqBy` now make use of a native `Set` where possible – given the history of this, I'd appreciate people paying close attention here to ensure the existing semantics of `equals` are upheld.\n\nI have also included a simple benchmark script for `uniq`, which produced the following results:\n\nCurrent HEAD of master:\n\n```\n┌────────────────────────┬────────────────────────┬────────────────────────┐\n│ uniq                   │ Hertz                  │ Margin of Error        │\n├────────────────────────┼────────────────────────┼────────────────────────┤\n│ uniqBy(id, arr1)       │ 21.52                  │ 0.60%                  │\n├────────────────────────┼────────────────────────┼────────────────────────┤\n│ uniqWith(equals, arr1) │ 21.81                  │ 0.68%                  │\n├────────────────────────┼────────────────────────┼────────────────────────┤\n│ uniq(arr1)             │ 21.66                  │ 0.81%                  │\n├────────────────────────┼────────────────────────┼────────────────────────┤\n│ uniqBy(id, arr2)       │ 8.73                   │ 0.72%                  │\n├────────────────────────┼────────────────────────┼────────────────────────┤\n│ uniqWith(equals, arr2) │ 8.72                   │ 0.58%                  │\n├────────────────────────┼────────────────────────┼────────────────────────┤\n│ uniq(arr2)             │ 8.67                   │ 0.83%                  │\n├────────────────────────┼────────────────────────┼────────────────────────┤\n│ uniqBy(id, arr3)       │ 692                    │ 0.55%                  │\n├────────────────────────┼────────────────────────┼────────────────────────┤\n│ uniqWith(equals, arr3) │ 695                    │ 0.60%                  │\n├────────────────────────┼────────────────────────┼────────────────────────┤\n│ uniq(arr3)             │ 686                    │ 0.72%                  │\n└────────────────────────┴────────────────────────┴────────────────────────┘\n```\n\nThis branch:\n\n```\n┌────────────────────────┬────────────────────────┬────────────────────────┐\n│ uniq                   │ Hertz                  │ Margin of Error        │\n├────────────────────────┼────────────────────────┼────────────────────────┤\n│ uniqBy(id, arr1)       │ 94.13                  │ 0.57%                  │\n├────────────────────────┼────────────────────────┼────────────────────────┤\n│ uniqWith(equals, arr1) │ 40.21                  │ 0.55%                  │\n├────────────────────────┼────────────────────────┼────────────────────────┤\n│ uniq(arr1)             │ 87.88                  │ 0.62%                  │\n├────────────────────────┼────────────────────────┼────────────────────────┤\n│ uniqBy(id, arr2)       │ 21,299                 │ 0.45%                  │\n├────────────────────────┼────────────────────────┼────────────────────────┤\n│ uniqWith(equals, arr2) │ 25.60                  │ 0.46%                  │\n├────────────────────────┼────────────────────────┼────────────────────────┤\n│ uniq(arr2)             │ 18,967                 │ 0.65%                  │\n├────────────────────────┼────────────────────────┼────────────────────────┤\n│ uniqBy(id, arr3)       │ 787                    │ 0.51%                  │\n├────────────────────────┼────────────────────────┼────────────────────────┤\n│ uniqWith(equals, arr3) │ 808                    │ 0.53%                  │\n├────────────────────────┼────────────────────────┼────────────────────────┤\n│ uniq(arr3)             │ 783                    │ 0.61%                  │\n└────────────────────────┴────────────────────────┴────────────────────────┘\n```\n",
    "head_branch": "perf-improv",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cb38dfb6b84f2425907",
    "number": 1511,
    "body": "- in order to use arguments as expected we need to use normal function: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#Lexical_arguments\n- use R.sum for simplicity\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cb48dfb6b84f2425908",
    "number": 1510,
    "body": "This fixes #1509 replacing the combined `lenses.js` test with separate tests for `lensProp` and `lensIndex` each testing the correct behavior for \n- `R.view`\n- `R.set`\n- `R.over`\n- composability\n- lens laws\n",
    "head_branch": "split-lens-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cb58dfb6b84f2425909",
    "number": 1506,
    "body": "This adds a lens focusing on an object property specified by a path. This addition would make the `prop` and `path` set of functions fully \"analogous\":\n- `R.prop` - `R.path` \n- `R.propSatisfies` - `R.pathSatisfies` \n- `R.lensProp` - `R.lensPath`.\n",
    "head_branch": "add-lensPath",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cb68dfb6b84f242590a",
    "number": 1504,
    "body": "I know this is beyond low-priority, but I caught it while digging through the source and figured it wouldn't hurt.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cb78dfb6b84f242590b",
    "number": 1499,
    "body": "Added @see doc tag referencing R.addIndex function to 12 identified List\nfunctions whose callback function might reasonably take extra args\nspecifying the current index and the whole list.  #1487\n",
    "head_branch": "addIndex-doc-references",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cb88dfb6b84f242590c",
    "number": 1498,
    "body": "Hi\n\nAs this function offers both filtered and rejected elements at the same time,  I think it makes sense to mention them in the doc.\n",
    "head_branch": "partition",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cb98dfb6b84f242590d",
    "number": 1495,
    "body": "Adding a `juxt` function as discussed in issue #986. This supports passing variadic functions in by passing in the right number of arguments in an array as the second parameter:\n\n```\njuxt([noArityFunc], [6])\njuxt([arity1Func], [6])\njuxt([arity2Func], [6, 7])\njuxt([arity3Func], [6, 7, 8])\n```\n",
    "head_branch": "juxt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cb98dfb6b84f242590e",
    "number": 1494,
    "body": "",
    "head_branch": "test-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cba8dfb6b84f242590f",
    "number": 1493,
    "body": "",
    "head_branch": "doc-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cbb8dfb6b84f2425910",
    "number": 1492,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cbc8dfb6b84f2425911",
    "number": 1482,
    "body": "I've modified a few list based functions to work with ES6 Generators as a PoC. \nThis enables _lazy_ evaluation of list. Also, this makes possible to work with \n_infinite_ list similar to other functional languages.\n\nNew API to create a generator:\n\n``` js\nxrange:: Number -> Number -> Number -> Generator\nxrange(step, start, stop) -> Generator\n```\n\nA Infinite list can be created by passing `stop = Infinity`. Example:\n\n``` js\nconst natural = R.xrange(1, 1, Infinity);\n```\n\nPlain JS array can be extracted from a generator based list using `R.take`. Example:\n\n``` js\nR.take(10, natural); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n```\n\nComposition also works.\n\n``` js\n// List first 10 even squares\nR.take(10, R.filter(x => x % 2 === 0, R.map(x => x * x, natural)));\n```\n\n`R.zip` can be used to zip 2 infinite list or (1 infinite with 1 finite list):\n\n``` js\nconst even = R.xrange(2, 2, Infinity);\nconst natural = R.xrange(1, 1, Infinity);\n\nR.take(3, R.zip(natural, even)); // [[1, 2], [2, 4], [3, 6]]\nR.zip(natural, ['a', 'b', 'c']); // [[1, 'a'], [2, 'b'], [3, 'c']]\n```\n\n`R.repeat` can be used to create infinitely repeating values:\n\n``` js\nR.take(5, R.repeat(1, Infinity)); // [1, 1, 1, 1, 1]\n```\n\n`R.times` can be used to create an infinite list. Example, an infinite stream\nof random values:\n\n``` js\nR.take(5, R.times(Math.random, Infinity));\n```\n\nThe following functions have been modified to work with generators:\n- head, nth\n- tail, slice\n- uniq, uniqWith\n- reduce\n- reverse\n- length\n- splitEvery\n- forEach\n- filter\n- map\n- zip\n- take\n\nWill work on other functions if people see value in this PR.\n",
    "head_branch": "generators",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cbd8dfb6b84f2425912",
    "number": 1475,
    "body": "Closes #1466\n",
    "head_branch": "both-either-short-circuit",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cbe8dfb6b84f2425913",
    "number": 1474,
    "body": "Closes #1466. The tests were fun.\n",
    "head_branch": "both-either-short-circuit",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cbf8dfb6b84f2425914",
    "number": 1473,
    "body": "'Map' word was removed to keep it in the same style as in `ap` docs\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cc08dfb6b84f2425915",
    "number": 1471,
    "body": "",
    "head_branch": "times",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cc18dfb6b84f2425916",
    "number": 1470,
    "body": "",
    "head_branch": "fix-head",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cc28dfb6b84f2425917",
    "number": 1468,
    "body": "",
    "head_branch": "invoker",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cc38dfb6b84f2425918",
    "number": 1467,
    "body": "This pull request deprecates `R.commute` and `R.commuteMap` in favour of `R.sequence` and `R.traverse` respectively.\n\nReasons to rename the functions:\n- My understanding is that `sequence` and `traverse` are the most common names for these functions. I read and reread [Understanding traverse and sequence](http://fsharpforfunandprofit.com/posts/elevated-world-4/) in order to come to terms with this concept, so I may be biased by the names used there. Is `commute` the name used anywhere but in Ramda?\n- Fantasy Land defines [Traversable](https://github.com/fantasyland/fantasy-land#traversable), which requires that a Traversable provide a `sequence` method. It also shows that `traverse` can be derived from `map` and `sequence`.\n- Currently each Ramda functions which dispatches has the same name as the method to which it dispatches. Having `R.commute` dispatch to `sequence` would break this convention.\n\nChanges:\n- `R.sequence` dispatches; `R.commute` does not.\n- `R.traverse` takes `(of, f, traversable)` rather than `(f, of, traversable)`. It's more likely one would apply several different `f` transformations to a single :twisted_rightwards_arrows: type inversion than apply the same transformation to several different type inversions. I also like having `of` off to the side as it conveys type information that would be unnecessary in the presence of type inference.\n\nI'm particularly interested in hearing from @scott-christopher, who has a better grasp of this than I do. We have discussed these changes (though Scott is happy to keep the names) but I'm not sure that I've done everything correctly.\n\nI'm about to :airplane: from Auckland to San Francisco, so I'll be offline for the next 12 hours or so.\n",
    "head_branch": "traversable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cc48dfb6b84f2425919",
    "number": 1465,
    "body": "",
    "head_branch": "fix-path-params",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cc58dfb6b84f242591a",
    "number": 1464,
    "body": "Closes #1445\n",
    "head_branch": "reduce-sig",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cc68dfb6b84f242591b",
    "number": 1463,
    "body": "Sorting the output of `keys` and related calls.\n\nThis is certain to be controversial.  I'm not going to go over all the rationale for again; we've discussed it a few times, most recently in #1067, especially starting with my long comment, https://github.com/ramda/ramda/issues/1067#issuecomment-135923353.  This at least gives us something concrete to discuss.\n\nThere is a perhaps peculiar design decision here.  I'll understand if there are objections; I'm certainly not wedded to it.  Namely, `keys` is simply a reference to `internal/_sortedKeys`.  It adds nothing whatsoever.  The reason for this is that I want to have the `sortedKeys` name used very explicitly.  I want it to be quite clear when we are using that rather than the unsorted version.  But we still want the public API to be `keys`.  There was also one other concern that turned out not to be relevant, but which I always keep in the back of my head.  I really prefer not to have internal modules depend upon the public ones.  I want the dependencies to always run in one direction, the way one might think about layering an application.  It turned out not to be an issue here, as there was no internals that depended on `keys`.  (And of course this same decision applies to `keysIn` / `sortedKeysIn`.) \n",
    "head_branch": "sort-keys",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cc78dfb6b84f242591c",
    "number": 1462,
    "body": "",
    "head_branch": "deprecated",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5b15789a288e492cda4f2d57ade554d722d0bd9b into cffff75259a5b251811bc5197ea6ec41b33731e2"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7cc88dfb6b84f242591d",
    "number": 1461,
    "body": "The spirit of this pull request is to add additional code-style consistencies to help make project style preferences that aren't (currently) automated a little more self-discoverable.\n\nAdmittedly, I do feel a little silly opening this PR, but I do honestly think it will help somewhat with new contribution. Lemme know if any/all of these commits are unwanted and I can nix them.\n",
    "head_branch": "code-style-consistencies",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cc88dfb6b84f242591e",
    "number": 1460,
    "body": "",
    "head_branch": "dropLast-imports",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cc98dfb6b84f242591f",
    "number": 1459,
    "body": "I know this is not very functional, but i find the method pretty handy. \nIt's easy to get lost when you compose or pipe a lot. R.log just logs the current value and returns it.\nWhen you're new in the FP world (as i am), it can help a lot.\n\nIt also affects the output of the tests (i don't know what to do about it):\n<img width=\"575\" alt=\"screenshot 2015-10-21 21 41 03\" src=\"https://cloud.githubusercontent.com/assets/147684/10648047/7ffdebfa-783c-11e5-8c88-bb259550ab35.png\">\n\nIf you don't like it, just close the pull request, no bad feelings ;)\n",
    "head_branch": "log",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cca8dfb6b84f2425920",
    "number": 1458,
    "body": "See ramda/ramda.github.io#37\n",
    "head_branch": "see",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ccb8dfb6b84f2425921",
    "number": 1456,
    "body": "Addresses #1135.\n",
    "head_branch": "stableSort",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ccc8dfb6b84f2425922",
    "number": 1455,
    "body": "Address issue #1393 \n",
    "head_branch": "issue1393",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ccd8dfb6b84f2425923",
    "number": 1454,
    "body": "simple refactor to reduce complexity\n",
    "head_branch": "useWithRefactor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cce8dfb6b84f2425924",
    "number": 1453,
    "body": "pathSatisfies works analogous to propSatisfies but applies\nthe predicator on a path instead of a property name.\n",
    "head_branch": "add-pathSatisfies",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 0d846cc69d3a2cb43dc12eb2802c26971029faf6 into ea5e76d73d4fc46c7664a9ba093b3ea52169d53b"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7ccf8dfb6b84f2425925",
    "number": 1452,
    "body": "Adds `R.zipAll` for using `zip` on N number of lists.\n\nAddresses #1069\n",
    "head_branch": "zipAll",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cd08dfb6b84f2425926",
    "number": 1450,
    "body": "Fixes:\n- [`R.clone()`](http://ramdajs.com/docs/#clone) has a different codestyle for the 'dispatches to...' docstring\n- [`R.equals()`](http://ramdajs.com/docs/#equals) has a duplicate sentence\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cd18dfb6b84f2425927",
    "number": 1448,
    "body": "Add `R.symmetricDifference` and `R.symmetricDifferenceWith` for finding the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference) between two lists.\n\nAddresses #1301\n\nIf interested, perf results for 3 different implementations:\n- http://jsperf.com/ramda-r-symmetricdifference-candidates/2\n",
    "head_branch": "symmetric-difference",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cd28dfb6b84f2425928",
    "number": 1443,
    "body": "Given the recent discussions again in gitter about merging objects, I thought it might help to throw this up as a concrete example to discuss, if nothing else.\n\nTwo new public functions are introduced to allow a custom merging strategy to be provided for merging objects with intersecting keys:\n\n```\n// provided with values of each object only\nmergeWith :: (a -> a -> a) -> {a} -> {a}\n// provided with the key along with the values of each object\nmergeWithKey :: (String -> a -> a -> a) -> {a} -> {a} -> {a}\n```\n\nThe main points of potential contention with this implementation:\n- ~~`internal/_mergeWith` provides the non-intersecting keys as objects to the provided `fnL` and `fnR` functions (e.g. `fnL :: {a} -> {a}`) to allow filtering of the resulting object – should these instead operate on individual key/pairs like `fn` (e.g. `(String, a) -> a`)? Doing so would prevent reuse for potential hypothetical functions like `mergeIntersection`.~~\n- ~~to support filtering, the implementation currently excludes keys from the resulting object whose values are `undefined` – this feels like it overloads the behaviour of `mergeWith`/`mergeWithKeys` a little.~~\n\n_edit_: I've since removed `internal/_mergeWith`, moving the implementation into `mergeWithKeys` and I've also removed the behaviour of filtering `undefined` values.\n",
    "head_branch": "merge-with",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cd38dfb6b84f2425929",
    "number": 1442,
    "body": "`R.equals` will never be _done_. :stuck_out_tongue_closed_eyes:\n",
    "head_branch": "equals",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cd48dfb6b84f242592a",
    "number": 1439,
    "body": "Added two tests for asserting that functions are compared using R.identical. Test names may need editing? Perhaps the adjustments to docs might need tweaking. \n",
    "head_branch": "identity",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cd58dfb6b84f242592b",
    "number": 1438,
    "body": "Adding component.json to allow, most immediately,\nthe use of the Duo package manager.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cd68dfb6b84f242592c",
    "number": 1437,
    "body": "Implemented `splitAt`.\n\nWorks on `Array` and `String`.\n\nExample:\n\n``` js\nR.splitAt(1, [1, 2, 3]);          //=> [[1], [2, 3]]\nR.splitAt(5, 'hello world');      //=> ['hello', ' world']\n```\n",
    "head_branch": "splitAt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cd78dfb6b84f242592d",
    "number": 1435,
    "body": "[`@typedef`](http://usejsdoc.org/tags-typedef.html) is a real thing. We should use a different name to avoid confusing JSDoc.\n",
    "head_branch": "typedefn",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cd88dfb6b84f242592e",
    "number": 1434,
    "body": "Closes #1381\n\nMany thanks to @branneman and @kedashoe for their contributions to this pull request.\n\nThis is the script I used to add these annotations:\n\n```\n#!/usr/bin/env bash\nset -e\n\nnext_version=v0.18.0\nn=$'\\n'\n\ntags() {\n  git tag --list --sort=version:refname\n}\n\nview() {\n  git show \"refs/tags/$1:$2\"\n}\n\nfor tag in $(tags) ; do\n  view \"$tag\" \"$(node -p \"($(view \"$tag\" package.json)).main\")\" >\"ramda-$tag.js\"\ndone\n\nfor name in $(node -p \"Object.keys(require('./ramda-$(tags | tail -n 1)')).sort().join('\\n')\") ; do\n  for tag in $(tags) ; do\n    if [[ \"$(node -p \"Object.prototype.hasOwnProperty.call(require('./ramda-$tag'), '$name')\")\" == true ]] ; then\n      echo \"R.$name was added in $tag\"\n      if [[ -e \"src/$name.js\" ]] ; then\n        sed -i \"\" \"s/@memberOf R/@memberOf R\\\\$n * @since $tag/\" \"src/$name.js\"\n      fi\n      break\n    fi\n  done\ndone\n\nfor filename in $(find src -depth 1 -name \"*.js\" | xargs grep --files-without-match \"@since v\") ; do\n  echo \"R.$(basename -s .js \"$filename\") will be added in $next_version\"\n  sed -i \"\" \"s/@memberOf R/@memberOf R\\\\$n * @since $next_version/\" \"$filename\"\ndone\n\nrm ramda-*.js\n```\n\nDo you think it's okay to state `@since v0.1.0` for `R.and`, for example, even though the meaning of `R.and` changed at some point between then and now?\n",
    "head_branch": "since",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5bcd702fbfd61daf25aef1cb721d17f2e36ff07f into 7057e3ef830de203f50da7227189d5d449f23ae7"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cd98dfb6b84f242592f",
    "number": 1433,
    "body": "Let's say goodbye to two more variadic functions.\n",
    "head_branch": "partial",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cda8dfb6b84f2425930",
    "number": 1432,
    "body": "Follow-up for #1417 and #1428. It turns out there are even more functions that dispatch, which didn't have that behaviour specified in their docstrings. I didn't notice them in my previous PR, so here's another one.\n\nI've also fixed some minor codestyle discrepancies; some missing newlines and an incorrect docstring. They're all non-functional changes.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cda8dfb6b84f2425931",
    "number": 1429,
    "body": "This change is warranted by many of the arguments made in #1426.\n\nWe have the elegant `R.map`, which applies the given function to exactly one argument, and the inelegant `R.mapObjIndexed` which applies the given function to `(value, key, object)`. [`R.pickBy`](http://ramdajs.com/0.17/docs/#pickBy) falls between these two stools, applying the given function to _two_ arguments.\n\nThis pull request:\n- <del>deprecates `R.pickBy`;</del>\n- defines `R.filter` for Object<del>; and</del>\n- <del>adds `R.filterObjIndexed`, which mirrors `R.mapObjIndexed`, to replace `R.pickBy` in contexts in which the key is relevant.</del>\n\nI first suggested this change in https://github.com/ramda/ramda/pull/1265#issuecomment-120538941:\n\n> I think `R.pickBy` and `R.omitBy` should only pass the value to the predicate.\n> \n> I would then go a step further and support objects in `R.filter` (and by extension `R.reject`). We could then deprecate `R.pickBy` and `R.omitBy`.\n\nThe time is now right. :)\n",
    "head_branch": "filter",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cdb8dfb6b84f2425932",
    "number": 1428,
    "body": "See #1417\n\nRight now it is undocumented behaviour for some functions that they actually dispatch to a method. This PR adds a sentence to the docstrings that this dispatching is happening.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cdc8dfb6b84f2425933",
    "number": 1427,
    "body": "Closes #1393\n",
    "head_branch": "to-string",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cdd8dfb6b84f2425934",
    "number": 1426,
    "body": "This one's for you, @paldepind! :smile:\n\nBefore anyone freaks out, thinking that Ramda is now making functions do all the things à la Underscore, let me remind you that it's possible to arrive at the same conclusion for two very different reasons. This is not reckless overloading: it makes sense, as I hope to demonstrate.\n- In the early days very few Ramda functions were polymorphic. I imagine this was a reaction to the many useful but unprincipled polymorphic functions in Underscore.\n- Over time various Ramda functions have been granted the ability to dispatch to appropriately named methods, allowing Ramda's list functions to be applied to values which are not necessarily array-like.\n- In recent times Haskell and Fantasy Land have influenced the way certain Ramda contributors view polymorphic functions. Rather than view polymorphic functions as complected, this contingent sees them as useful higher-level abstractions over _groups_ of types (_type classes_ in Haskell terminology), provided they are principled (i.e. satisfy laws).\n- Thinking in terms of groups of types encouraged us to define `R.empty` for Object and String in #1236, and then to define `R.isEmpty` in terms of `R.empty` in #1242.\n- This same thought process led to define `R.map` for Function in #1408.\n\n`R.map` is no longer a function which operates only on array-like objects. It should operate on any functor. User-defined types such as Maybe can simply provide a `map` method, but Ramda must provide the `map` definition for each built-in type which is a functor: Array, Function, and Object.\n",
    "head_branch": "fmap",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cde8dfb6b84f2425935",
    "number": 1424,
    "body": "Discussed in #1366\n\nWhat is the correct signature? The current one is same as `R.partial`'s.\n",
    "head_branch": "thunk",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cdf8dfb6b84f2425936",
    "number": 1423,
    "body": "As I proposed on gitter,\n\n``` js\nwithout :: a -> [a] -> [a]\n```\n",
    "head_branch": "without",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ce08dfb6b84f2425937",
    "number": 1422,
    "body": "- Updates signature (docs only) of `commuteMap` to remove the `Functor` constraint of the list elements\n\n```\nfrom: Functor f => (f a -> f b) -> (x -> f x) -> [f a] -> f [b]\nto:   Functor f =>   (a -> f b) -> (x -> f x) ->   [a] -> f [b]\n```\n- Switches from `_reduce` and `lift(concat)` to `reduceRight` and `prepend` to fold over the list.\n",
    "head_branch": "commuteMap-sig",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ce18dfb6b84f2425938",
    "number": 1420,
    "body": "Closes #1401\n",
    "head_branch": "converge",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ce28dfb6b84f2425939",
    "number": 1419,
    "body": "Closes #1413\n",
    "head_branch": "test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ce38dfb6b84f242593a",
    "number": 1416,
    "body": "[Migrating from legacy to container-based infrastructure](http://docs.travis-ci.com/user/migrating-from-legacy/)\n",
    "head_branch": "travis",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ce48dfb6b84f242593b",
    "number": 1415,
    "body": "https://github.com/ramda/ramda/pull/1409#discussion_r40562734:\n\n> `assert.deepEqual` is horribly broken: `[]` and `{}` are considered equal, as are `[1, 2, 3]` and `['1', '2', '3']`. It's no good for comparing values of ADTs, either, since `Left(42)` and `Right(42)` may have the same internals. In such cases one is forced to use `R.equals` with `assert.strictEqual`, but then in the case of failure one sees\n> \n> ```\n> AssertionError: false === true\n> ```\n> \n> rather than a descriptive message such as\n> \n> ```\n> AssertionError: 'Left(42)' === 'Right(42)'\n> ```\n\nThe implementation is straightforward:\n\n``` javascript\nmodule.exports = function(actual, expected) {\n  assert.strictEqual(arguments.length, 2);\n  assert.strictEqual(R.toString(actual), R.toString(expected));\n};\n```\n",
    "head_branch": "eq",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ce58dfb6b84f242593c",
    "number": 1414,
    "body": "Closes https://github.com/ramda/ramda/issues/1372\n",
    "head_branch": "bp-usewith-context",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ce68dfb6b84f242593d",
    "number": 1412,
    "body": "",
    "head_branch": "use-with-example",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ce78dfb6b84f242593e",
    "number": 1411,
    "body": "Not 'ramda' as previous.\n\n![image](https://cloud.githubusercontent.com/assets/9342866/10134757/18cf61e8-65e0-11e5-9e95-0ed8414e43ce.png)\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ce88dfb6b84f242593f",
    "number": 1410,
    "body": "functions → function\n",
    "head_branch": "modulo-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ce98dfb6b84f2425940",
    "number": 1409,
    "body": "Before:\n\n``` javascript\n> R.commute(S.Either.of, [S.Left('XXX'), S.Left('YYY'), S.Left('ZZZ')])\nLeft(\"ZZZ\")\n```\n\nAfter:\n\n``` javascript\n> R.commute(S.Either.of, [S.Left('XXX'), S.Left('YYY'), S.Left('ZZZ')])\nLeft(\"XXX\")\n```\n\nIt seems to me the leftmost failure should be returned, as is the case with Haskell's [`sequence`](http://hackage.haskell.org/package/base-4.8.1.0/docs/Prelude.html#v:sequence):\n\n``` haskell\n> sequence [Right 1, Right 2]\nRight [1,2]\n> sequence [Right 1, Left \"XXX\"]\nLeft \"XXX\"\n> sequence [Left \"XXX\", Right 1]\nLeft \"XXX\"\n> sequence [Left \"XXX\", Left \"YYY\"]\nLeft \"XXX\"\n```\n",
    "head_branch": "commute-map",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cea8dfb6b84f2425941",
    "number": 1408,
    "body": "This change was motivated by some [discussion](https://github.com/plaid/sanctuary/issues/102) around porting some higher order Ramda functions into Sanctuary. The common theme among many of these functions is that they are essentially gluing together the results of different functions in different ways. If we implement Functor and Applicative for functions then we get this behavior for free.\n\n``` haskell\ninstance Functor ((->) r) where\n    fmap = (.)\n\ninstance Applicative ((->) a) where\n    pure = const\n    (<*>) f g x = f x (g x)\n```\n\nThe following simplifications become possible\n- `R.both` -> `R.lift(R.and)`\n- `R.either` -> `R.lift(R.or)`\n- `R.negate` -> `R.lift(R.not)`\n- `R.converge` -> `R.lift`\n\nThere are 2 issues that I ran into\n\nWhat to do about converging functions that take multiple arguments, for example: \n\n``` javascript\nconst f = R.converge((a, b) => a + b, a => a, (a, b) => a);\nf.length; // 2\n```\n\nRight now `ap` just assumes there will only be one argument supplied to a function (but I could easily change it to apply the function to the entire arguments object). `R.converge` takes the max length of all of the functions but it can only do this because it knows the length of both input functions at the same time. If you were to perform the equivalent operation with `R.lift` you'd supply the input functions 1 at a time (although both at once is possible as well):\n\n``` javascript\nconst g = R.lift((a, b) => a + b); \n// g :: (Applicative f, Num c) => f c -> f c -> f c\nconst h = g(a => a); // should the function returned have length 1 now? How do you keep track of that? \n// h :: (Applicative f, Num c) => f c -> f c\nconst i = h((a, b) => a); // should the function returned have length 2 now?\n```\n\nI think the simplest solution is just to make `R.both`, `R.either`, etc. just take unary functions as arguments and call it a day.\n\nThe second problem is around preserving context but it seems like that has already been figured out for converge, I'm just not sure how to add it in to `R.map` and `R.ap`.\n",
    "head_branch": "bp-function-functor-applicative",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ceb8dfb6b84f2425942",
    "number": 1407,
    "body": "R.invertObj has some cases that developers might need  to consider when choosing this function.\nSee issue for more details: #1402\n",
    "head_branch": "invertObj-add-to-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cec8dfb6b84f2425943",
    "number": 1406,
    "body": "Implement R.pathOr as per the invitation for PR in #1054.\n",
    "head_branch": "path-or",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ced8dfb6b84f2425944",
    "number": 1405,
    "body": "two more list functions that can act as transducers\n",
    "head_branch": "dropLastTransducer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge cac3a8ddd62fce85a3f2721bd8983839a41b7eb0 into 48b824b3c21acb47b940595fedc302694b0f6df6"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7cee8dfb6b84f2425945",
    "number": 1400,
    "body": "Closes #1399\n\n`_hasMethod` does more than its name suggests: `_hasMethodAndIsNotAnArray` would be a more accurate name. It's currently used in places where arrays needn't be treated specially, such as in `R.clone` (see https://github.com/ramda/ramda/pull/1295#issuecomment-123403131).\n\nThis pull request replaces all occurrences of `_hasMethod` with the logic we actually mean to express. In every case this reduces the number of checks we perform: in some cases the null check is unnecessary; in some cases the `_isArray` check is inappropriate.\n",
    "head_branch": "has-method",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cee8dfb6b84f2425946",
    "number": 1398,
    "body": "Have used arrow functions wherever possible for int the jsdocs.\n\n//cc @CrossEye @davidchambers \n",
    "head_branch": "arrow-fuctions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cef8dfb6b84f2425947",
    "number": 1397,
    "body": "Closes #1104 \n\nThe examples given for this function are quite verbose. Would you be interested in having me simplify these for you? A one line example function would make grasping it's purpose much easier. \n",
    "head_branch": "useWith",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cf08dfb6b84f2425948",
    "number": 1396,
    "body": null,
    "head_branch": "evolve-docs-typo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cf18dfb6b84f2425949",
    "number": 1394,
    "body": "I noticed this regression while rebasing #1242.\n",
    "head_branch": "equals",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cf28dfb6b84f242594a",
    "number": 1391,
    "body": "This pull request partially reverts #1260. It means a pipeline may begin with a function with optional arguments, in which case the resulting function will itself have optional arguments. As a result, `R.compose`, `R.pipe`, `R.composeP`, and `R.pipeP` no longer return curried functions.\n\nVarious more significant changes have been discussed in #1318, but we've yet to reach consensus and our indecision is blocking the release of v0.18.0. My hope is that this pull request will unblock us.\n\nAs stated in https://github.com/ramda/ramda/issues/1318#issuecomment-132005376, I prefer simpler definitions of `compose` and `pipe`. I've opened plaid/sanctuary#94 to add these, along with `meld`, to Sanctuary. @CrossEye has expressed interest in `meld`; I'll open a Ramda pull request for a variadic `meld` if and when this pull request is merged.\n",
    "head_branch": "composition",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1f2e6706480b37790bdfc5d4c40124ea4302e7a1 into 8eeaff203c90fc09b816207b87bbe00516c11e3e"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7cf38dfb6b84f242594b",
    "number": 1388,
    "body": "Before:\n\n``` javascript\nR.allPass([R.gte, R.lte])(5, 5);  // => true\nR.allPass([R.gte, R.lte])(5)(5);  // TypeError: boolean is not a function\nR.allPass([R.gte, R.lte], 5)(5);  // TypeError: boolean is not a function\nR.allPass([R.gte, R.lte], 5, 5);  // => true\n```\n\nAfter:\n\n``` javascript\nR.allPass([R.gte, R.lte])(5, 5);  // => true\nR.allPass([R.gte, R.lte])(5)(5);  // => true\nR.allPass([R.gte, R.lte], 5)(5);  // => unary function (extra arg ignored)\nR.allPass([R.gte, R.lte], 5, 5);  // => binary function (extra args ignored)\n```\n",
    "head_branch": "any-all",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cf48dfb6b84f242594c",
    "number": 1382,
    "body": "These are taken straight from the Prelude: [`words`](http://hackage.haskell.org/package/base-4.8.1.0/docs/Prelude.html#v:words); [`unwords`](http://hackage.haskell.org/package/base-4.8.1.0/docs/Prelude.html#v:unwords).\n",
    "head_branch": "words-unwords",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cf58dfb6b84f242594d",
    "number": 1379,
    "body": "Fixes #1372\n",
    "head_branch": "this-for-useWith",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cf68dfb6b84f242594e",
    "number": 1378,
    "body": "In #1275 we discussed the possibility of supporting strings in list functions such as `R.map`, `R.filter`, and `R.all`. It now appears that `R.reverse` may be the last of the list functions which can sensibly support strings. Since `_asChars` is currently used in just one place and is unlikely to be used elsewhere in future, we should simplify the implementation of `R.reverse`. This should please @paldepind. :)\n",
    "head_branch": "as-chars",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cf78dfb6b84f242594f",
    "number": 1377,
    "body": "See #1353\n",
    "head_branch": "contains-with",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cf88dfb6b84f2425950",
    "number": 1374,
    "body": "this two maps should be considered the same:\n\n```\n\nnew Map([[[1, 2, 3], [4, 5, 6]],    [[7, 8, 9], [10, 11, 12]]]),\nnew Map([[[7, 8, 9], [10, 11, 12]], [[1, 2, 3], [4, 5, 6]]])\n```\n\non the way of solving it, I made `map` and `find` compatible with iterables.\nIf this looks like the way to go, I will make `all`compatible with iterables, so there's no need to use map and simplify the implementation.\n",
    "head_branch": "equals",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cf98dfb6b84f2425951",
    "number": 1373,
    "body": null,
    "head_branch": "once-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4737549a4c66e52b0371735006055ccd5c92afc9 into 3b699ec17daa5ee0fc9d683ca939dbb6e1d62fd7"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7cfa8dfb6b84f2425952",
    "number": 1371,
    "body": "I suppose that sometime in the future, almost every list functions will be able to act like transducers. This is one step in that direction.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cfb8dfb6b84f2425953",
    "number": 1369,
    "body": "Fixes #1368\n\nIt's unusual for dispatching to take place in a private function, but it's necessary in this case.\n",
    "head_branch": "equals",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cfc8dfb6b84f2425954",
    "number": 1364,
    "body": "Thank you for bringing this to my attention, @jdalton!\n",
    "head_branch": "equals",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cfd8dfb6b84f2425955",
    "number": 1359,
    "body": "As suggested by @donnut in donnut/typescript-ramda#26\n",
    "head_branch": "split",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cfe8dfb6b84f2425956",
    "number": 1358,
    "body": "Hi there,\n\nJust spotted this minor fix in the docs. Great library!\n",
    "head_branch": "PR",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cff8dfb6b84f2425957",
    "number": 1357,
    "body": "The current signature of `mapAccum` and `mapAccumRight` are a bit confusing IMO. They use a form of tuple syntax that does not really have a meaning in JavaScript. This PR changes the tuple signature to use arrays which I think better indicates that the function actually returns an array.\n\nThere might be a bit of ambiguity between `[a]` which is an array of `a`s and `[a, b]` which is an array where the first element is an `a` and the second a `b`.\n",
    "head_branch": "map-accum-signature",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7cff8dfb6b84f2425958",
    "number": 1356,
    "body": "As briefly discussed in #1275, this implements:\n\n```\naround :: (a -> b) -> (c -> d) -> (b -> c) -> a -> d\n```\n\nFrom the docs:\n\n> Accepts three functions, `fore`, `hind` and `fn`, and a single value. `R.around` effectively wraps `fn` with `fore` and `hind` by first passing the given value to `fore`, which returns a value that is then passed to `fn`, whose return value is finally passed to `hind`. The return value of `R.around` is the result of this call to `hind`.\n> \n> This can be useful for converting some type `a` to be compatible with some function `(b -> b)` and back again, where an isomorphism exists between `a` and `b`: `R.around(aToB, bToA, bFn)`.\n\nPotential controversy: there isn't a whole lot of difference between this and `compose` or `pipe`, except the difference in parameter order making it nicer to work with under certain scenarios.\n",
    "head_branch": "around",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d008dfb6b84f2425959",
    "number": 1354,
    "body": "See this https://github.com/ramda/ramda/pull/1353#issuecomment-134520154\n",
    "head_branch": "see-any",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d018dfb6b84f242595a",
    "number": 1353,
    "body": "See #1349\n\n[`R.containsWith`](http://ramdajs.com/docs/#containsWith) is usually used in conjunction with a function such as `(a, b) => a.x === b.x` or `(a, b) => f(a) === f(b)` ([occurrences on GitHub](https://github.com/search?p=8&q=ramda+containsWith+language%3Ajavascript&type=Code)). `R.containsBy` would be more convenient in such cases.\n\nIn the rare cases where the symmetry of `R.containsBy` is undesirable, one can always use [`R.any`](http://ramdajs.com/docs/#any). It's thus unnecessary to retain `R.containsWith`.\n",
    "head_branch": "contains-by",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d028dfb6b84f242595b",
    "number": 1352,
    "body": "Closes #1348\n\nThis pull request also removes several defunct files and generally gives the various test directories a spring clean.\n\nI removed **test/shared/Maybe.js** because internal dependencies among the test files add complexity to what is already a complex combination of assertion libraries, testing frameworks, and shims. (I actually _prefer_ to define algebraic data types in the test suite wherever necessary, but this was not my reason for removing the shared Maybe definition.)\n\nI updated **.travis.yml** as suggested by @scott-christopher, so Travis should run the test suite in (various?) browsers for future pull requests.\n",
    "head_branch": "testem",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d038dfb6b84f242595c",
    "number": 1351,
    "body": "I've written `a.x === b.x` and `f(a) === f(b)` many times. Ramda should provide a function for more succinctly expressing such relationships.\n",
    "head_branch": "eq-by",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d048dfb6b84f242595d",
    "number": 1350,
    "body": "These functions are oddly specific: _given an object, give me the names of each of its properties whose value is a function_. Why do we provide this for Function but not for RegExp or Date?\n\nThis could instead live in the [cookbook](https://github.com/ramda/ramda/wiki/Cookbook):\n\n``` javascript\nconst functions = R.compose(R.keys, R.pickBy(R.is(Function)));\n\nfunctions({abs: Math.abs, negate: R.negate, x: 0, y: 0}); //=> ['abs', 'negate']\n```\n",
    "head_branch": "functions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 02d9114a35ec5f8670b81fae14bfa89c720b5a48 into 19613c1f91daadb8c77a4ca7e76af425570dd62f"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d058dfb6b84f242595e",
    "number": 1349,
    "body": "The current examples were fine at the time they were written, but now that we have [value-based equality](https://github.com/ramda/ramda/pull/1096) they could be more simply expressed in terms of [`R.contains`](http://ramdajs.com/docs/#contains).\n",
    "head_branch": "contains-with",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d068dfb6b84f242595f",
    "number": 1347,
    "body": "Closes #1278\n",
    "head_branch": "allUniq-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d078dfb6b84f2425960",
    "number": 1346,
    "body": "As discussed in #1345.\n",
    "head_branch": "see-props",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d088dfb6b84f2425961",
    "number": 1345,
    "body": "works like pick, but returns the values as an Array\n\npickValues is similar to compose(values, pick([...])\nbut ensures that values are returned in the correct order on all platforms.\n\nI have used the function quite alot.\nE.g Google charts expect data as a set of touples: [x, y].\npickValues makes this very easy:\n\n```\n// data [ {time: '2015-01-01', revenue: 5, ...}, ... ]\nvar prepareDataForChart = R.map(R.pickValues(['time', 'revenue']))\n\nprepareDataForChart(data);\n// => [ ['2015-01-10', 5], ... ]\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d098dfb6b84f2425962",
    "number": 1344,
    "body": "These changes are motivated by https://github.com/ramda/ramda/pull/1328#issuecomment-133120377. I'm keen to hear from @epeli, @scott-christopher, and others.\n",
    "head_branch": "lenses",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d0a8dfb6b84f2425963",
    "number": 1340,
    "body": "- ramda/master:\n  Add missing R variable in defaultTo method doc\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d0b8dfb6b84f2425964",
    "number": 1339,
    "body": "This adds the K-combinator which is similar to the existing `always` but\nhas a few different properties:\n- If provided with two arguments it returns the constant value\n  immediately\n- It can be flipped and will then return the second value\n- It is a known concept from computer sience and maths\n\nThe somewhat hacky implementation was made to pass all standard tests.\n",
    "head_branch": "k-combinator",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d0c8dfb6b84f2425965",
    "number": 1337,
    "body": "The current description was copied from **set.js** but not altered, meaning that `R.over` and `R.set` have the same description.\n\n/cc @soroushjp\n",
    "head_branch": "over",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d0d8dfb6b84f2425966",
    "number": 1336,
    "body": "",
    "head_branch": "PR",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d0e8dfb6b84f2425967",
    "number": 1335,
    "body": "This is a second attempt at simplifying Ramdas logical functions. The first attempt is #1218.\n\nThis PR makes the following changes:\n- `and` and `or` does not dispatch. This didn't receive any resistance in the first PR so I want repeat the arguments.\n- `and` and `or` are now documented as if they only worked on booleans. We no longer advertise that you can pass non-logical values to these logical functions. They are both documented with a truth table which is how these functions are [often defined in math](https://en.wikipedia.org/wiki/Logical_conjunction#Truth_table).\n- `defaultTo` now returns it first argument if it's last argument is `NaN`.\n\nThese changes are made to achieve the following advantages:\n- `and` and `or` are now semantically significantly simpler since they don't reference the quite complex and arbitrary concepts \"truthy\" and \"falsy\". The denotation (the meaning) of these functions are now equal to their counterparts in math. I believe simple denotation is a fundamental to functional programming (some people even prefer the term denotational programming to functional programming).\n- `and` and `or` are now _single purpose_ functions. This makes code clearer and more explicit. This is not enforced in code, only in documentation.\n- `defaultTo` now handles `NaN` this makes it more useful in many cases (for instance with `parseInt`) and removes the need to misuse `or` to achieve the same. Using `defaultTo` is also safer. Consider code like this `R.or(parseInt(student.score), 40)`. This would result in an unexpected behavior if the result of `parseInt(student.score)` returned `0`. `defaultTo` does not suffer from this problem.\n\nI would also like to point out that the current behavior of `defaultTo` appears to [surprise people](https://gitter.im/ramda/ramda?at=55b8f72e4c04f0cc22e73104).\n\nThis PR would make it possible to replace code like this (an example by @CrossEye in the previous PR)\n\n``` js\nR.map(student => R.assoc('grade', R.or(parseInt(student.score), 0), student), students);\n```\n\nWith this code that better expresses the intent and doesn't rely on a multi-purpose `or`.\n\n``` js\nR.map(student => R.assoc('grade', R.defaultTo(0, parseInt(student.score)), student), students);\n```\n",
    "head_branch": "simplify-logical-operators",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d0f8dfb6b84f2425968",
    "number": 1333,
    "body": "Introducing `isTruthy` and `isFalsy`\n\nThese are simple helper functions which will come in handy to test if\nthe given value is Truthy or Falsy.\n",
    "head_branch": "truthy-falsy",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d0f8dfb6b84f2425969",
    "number": 1331,
    "body": "`R.toString('\\n')` should evaluate to `'\"\\\\n\"'` rather than `'\"\\n\"'` in order to uphold the invariant:\n\n``` javascript\nR.equals(x, eval(R.toString(x))) === true  // for *most* values of x\n```\n\nOtherwise, we're essentially doing\n\n``` javascript\neval('\"\n\"')\n```\n\nwhich is syntactically invalid.\n\nBefore:\n\n``` javascript\n> R.map(R.converge(R.equals, R.identity, R.compose(eval, R.toString)),\n...     ['\\b', '\\f', '\\n', '\\r', '\\t', '\\v', '\\0', '\\\\', '\"', \"'\"])\nSyntaxError: Unexpected token ILLEGAL\n```\n\nAfter:\n\n``` javascript\n> R.map(R.converge(R.equals, R.identity, R.compose(eval, R.toString)),\n...     ['\\b', '\\f', '\\n', '\\r', '\\t', '\\v', '\\0', '\\\\', '\"', \"'\"])\n[ true, true, true, true, true, true, true, true, true, true ]\n```\n\nOne practical benefit of this change is better REPL output. Rather than the [current output](http://ramdajs.com/repl/?v=0.17.1#'foo%5Cnbar%5Cn')\n\n``` javascript\n\"foo\nbar\n\"\n```\n\nwe'll get\n\n``` javascript\n\"foo\\nbar\\n\"\n```\n\nwhich matches the behaviour of the Node REPL.\n\n@mathiasbynens's [JavaScript character escape sequences](https://mathiasbynens.be/notes/javascript-escapes) proved to be an invaluable reference while working on this patch.\n",
    "head_branch": "to-string",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d108dfb6b84f242596a",
    "number": 1329,
    "body": "Please review these changes, @scott-christopher. :)\n",
    "head_branch": "ramda",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d118dfb6b84f242596b",
    "number": 1328,
    "body": "First stab at #1281\n\nNot quite sure this is right name for the function because plain `adjust` deals with arrays – not objects – but neither did the original proposal of `updatePath` feel any better since `update` is also for arrays and is used for setting values...\n",
    "head_branch": "adjustpath",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d128dfb6b84f242596c",
    "number": 1326,
    "body": null,
    "head_branch": "fix-uncurry-example",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d138dfb6b84f242596d",
    "number": 1325,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d148dfb6b84f242596e",
    "number": 1324,
    "body": "",
    "head_branch": "deprecated",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d158dfb6b84f242596f",
    "number": 1323,
    "body": "Just an idea. `singleton` is quite a bit shorter than `createMapEntry`, though slightly less descriptive.\n",
    "head_branch": "singleton",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d168dfb6b84f2425970",
    "number": 1322,
    "body": "The result for the second case was incorrect.\n",
    "head_branch": "takeLast-doc-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d178dfb6b84f2425971",
    "number": 1321,
    "body": "Missing an 'R.' before 'prop(' in the first line\n",
    "head_branch": "sortBy-doc-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d188dfb6b84f2425972",
    "number": 1320,
    "body": "`true` and `false` are values, not types.\n",
    "head_branch": "boolean",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d198dfb6b84f2425973",
    "number": 1319,
    "body": "The example should stop dropping at 4.\n\nSee http://ramdajs.com/repl/?v=0.17.1#var%20lteThree%20%3D%20function(x)%20%7B%0A%20%20return%20x%20%3C%3D%203%3B%0A%7D%3B%0A%0AR.dropLastWhile(lteThree%2C%20%5B1%2C%202%2C%203%2C%204%2C%203%2C%202%2C%201%5D)%3B\n",
    "head_branch": "dropLastWhile-doc-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d1a8dfb6b84f2425974",
    "number": 1316,
    "body": "As suggested by @jon49 in https://github.com/ramda/ramda/pull/1231#issuecomment-121691615\n",
    "head_branch": "max-by-min-by",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d1b8dfb6b84f2425975",
    "number": 1315,
    "body": "Not sure how welcome this will be, but in the trend of suggesting sugar for common patterns, I am continually finding myself writing `R.ifElse(pred, doSomething, R.identity)`, or `R.ifElse(pred, R.identity, doSomethingElse)`.\n\nThis change introduces `R.when` and `R.unless` as sugar for the above.\n",
    "head_branch": "when-unless",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d1c8dfb6b84f2425976",
    "number": 1313,
    "body": "Closes #1310\n",
    "head_branch": "pair",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d1d8dfb6b84f2425977",
    "number": 1303,
    "body": "If we're to provide sugar for `R.chain(R.identity)` it should work for any [Chain](https://github.com/fantasyland/fantasy-land#chain), not just Array-like ones.\n\nThis change enables nested maybes to be unnested:\n\n``` javascript\n> R.unnest(Just(Just(42)))\nJust(42)\n```\n",
    "head_branch": "unnest",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d1e8dfb6b84f2425978",
    "number": 1302,
    "body": "This addresses a niggle I noticed when reviewing #1299.\n",
    "head_branch": "predicate-wrap",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d1f8dfb6b84f2425979",
    "number": 1299,
    "body": "Math.max on an empty array returns -Infinity, causing things to go wrong. Instead, I reduce the list of lengths with `max` as iterator function and 0 as default value.\n\nI'd love to hear back from you. If there is anything I can improve, let me know.\n\nFixes #1298\n",
    "head_branch": "allPass-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d208dfb6b84f242597a",
    "number": 1296,
    "body": "Fixes: #1294\n",
    "head_branch": "npm-install-in-pretest-stage",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d218dfb6b84f242597b",
    "number": 1295,
    "body": "Fixes: #1292 \n",
    "head_branch": "Rclone-dispatches-to-clone",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d228dfb6b84f242597c",
    "number": 1293,
    "body": "Problem: if someone evil will change resulting default array then everybody will suffer because of shared default array pointer. Example:\n\n``` js\nR.match(/a/, '')[1] = 'fail';\nR.match(/a/, ''); // [, 'fail']\n```\n\n---\n\nImperative style looks better and cleaner here IMHO.\nFunctional approach may look like this:\n\n``` js\nvar defaultToEmptyArray = ifElse(isNil, constructN(0, Array), identity);\nR.match = compose(defaultToEmptyArray, invoker(1, 'match'));\n```\n",
    "head_branch": "fix-default-array",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d238dfb6b84f242597d",
    "number": 1289,
    "body": "Qualify calls to `compose` and `prop`\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d238dfb6b84f242597e",
    "number": 1287,
    "body": "Closes #1278\n",
    "head_branch": "allUniq",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d248dfb6b84f242597f",
    "number": 1286,
    "body": "Closes #1279\n",
    "head_branch": "prop-eq",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d258dfb6b84f2425980",
    "number": 1280,
    "body": "Reverts #1243; closes #1279\n\nIf we merge this we should publish v0.17.0.\n",
    "head_branch": "revert-1243",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d268dfb6b84f2425981",
    "number": 1276,
    "body": "Closes #1222\n",
    "head_branch": "range",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d278dfb6b84f2425982",
    "number": 1275,
    "body": "I hope this is not controversial. :)\n",
    "head_branch": "reverse",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d288dfb6b84f2425983",
    "number": 1274,
    "body": "Closes #1038\n",
    "head_branch": "constant",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d298dfb6b84f2425984",
    "number": 1273,
    "body": "Closes #1119\n",
    "head_branch": "inverses",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d2a8dfb6b84f2425985",
    "number": 1272,
    "body": "Supersedes #1248\n",
    "head_branch": "concat",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d2b8dfb6b84f2425986",
    "number": 1271,
    "body": "Supersedes #1257\n",
    "head_branch": "uniq-by",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d2c8dfb6b84f2425987",
    "number": 1270,
    "body": "There are currently a small number of functions defined in **src/internal** but never used. This pull request removes the unused files.\n\nThere are currently several cases where **src/internal/_foo.js** exists only for **src/foo.js** to be defined as `curry(_foo)`. This pull request coalesces each such pair of files.\n\nThis pull request takes additional reasonable measures to reduce the number of files in **src/internal**.\n",
    "head_branch": "internal",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d2d8dfb6b84f2425988",
    "number": 1268,
    "body": "This is the shell script I used to find these:\n\n``` bash\n#!/usr/bin/env bash\nset -e\n\nfor filename in $(find src -name '*.js') ; do\n  printf \"%s\\t%s\\n\" \"$(basename $filename .js)\" \"$(grep 'module[.]exports =' $filename)\" \\\n  | sed -e '/;/d' \\\n        -e '/module[.]exports = (function() [{]/d' \\\n        -e $'/^\\([^\\t]*\\)\\tmodule[.]exports.*function \\\\1(/d'\ndone\n```\n",
    "head_branch": "function-names",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d2e8dfb6b84f2425989",
    "number": 1267,
    "body": "Closes #1200\n",
    "head_branch": "takedrop-last",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d2f8dfb6b84f242598a",
    "number": 1265,
    "body": "",
    "head_branch": "bjp-omitBy",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d308dfb6b84f242598b",
    "number": 1264,
    "body": "Closes #1250\n\nAs discussed in #1251, `R.times(f, n)` is sugar for `R.map(f, R.range(0, n))`. In my view this sugar is not warranted.\n\nAs an aside, several of my colleagues have complained about the number of functions in the library. Although my position is that no one is being forced to use _all_ the functions, we should remain on the lookout for functions which no longer pull their weight.\n",
    "head_branch": "times",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d318dfb6b84f242598c",
    "number": 1263,
    "body": "Small PR adds missing `data` key and shows a key that does not get transformed.\n",
    "head_branch": "evolve",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d338dfb6b84f242598d",
    "number": 1262,
    "body": "Closes #1199\n\nChanges:\n- :scroll: `R.nth`: reword description; add doctests; update behaviour\n- :scroll: `R.head`: reword description; add doctests\n- :scroll: `R.last`: reword description; add doctests\n- :scroll: `R.slice`: reword description\n- :scroll: `R.tail`: reword description; add doctests; update behaviour\n- :scroll: `R.init`: reword description; add doctests\n- :scroll: `R.take`: reword description\n- :scroll: `R.drop`: reword description\n- :floppy_disk: `R.nthChar`: deprecate, since `R.nth` is now polymorphic\n- :floppy_disk: `R.nthCharCode`: deprecate, since it has a niche role already served by `R.invoker`\n",
    "head_branch": "strings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d348dfb6b84f242598e",
    "number": 1260,
    "body": "Changes:\n- :warning: `R.composeP` and `R.pipeP` no longer perform magic to determine whether a function is a Promise-returning function. Such magic is antithetical to Ramda's philosophy, and prevented `R.composeP` and `R.pipeP` from having consistent return types.\n- :new: `R.compose`, `R.pipe`, `R.composeP`, and `R.pipeP` now return curried functions (`R.composeK` and `R.pipeK` are for unary functions only, so the resulting function needn't be curried).\n- <del>:new: <code>R.compose</code>, <code>R.pipe</code>, <code>R.composeP</code>, and <code>R.pipeP</code> now accept functions of arbitrary arities.</del>\n- `R.composeK`, and `R.pipeK` are now defined as folds with `R.identity` as the identity element. As a result, `R.pipeK()` is no longer an error.\n- Internal functions `_createComposer` and `_isThenable` are no longer required.\n",
    "head_branch": "composition",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f68a9881b58e128d9dd55d829042d3e89070a80f into 7df1f560c35b6e094b9ef0bec8c8981e92e31c65"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7d348dfb6b84f242598f",
    "number": 1257,
    "body": "I was converting some code using `lodash` into using `ramda` instead and I wasn't able to find a straight alternative to `_.uniqBy`. \n\nI was able to compose a comparator in a point-free way, but my best attempt was just an unwieldy composition using `uniqWith`, `converge`, `equals`, `nthArg`, and `compose`:\n\n``` javascript\n_.uniqBy(_.property(\"id\")); // lodash\n\nR.uniqWith(R.converge(R.equals, R.compose(R.prop(\"id\"), R.nthArg(0))), R.compose(R.prop(\"id\"), R.nthArg(1)))\n```\n\nI'm totally not discounting the possibility that there is a way to do this more concisely in a point-free manner, as I'm rather new to functional paradigms. If it turns out that there _is_ a more concise way, I would love to take a look at it as it will be a good study for me.\n\nHowever I figured I just implement `R.uniqBy` in case its something that actually adds value to `ramda`:\n\nA simple example:\n\n``` javascript\nR.uniqBy(Math.abs)([1, -2, 3, 5, 2, -3, 5]); // [1, -2, 3, 5] \n```\n",
    "head_branch": "uniqBy",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d358dfb6b84f2425990",
    "number": 1256,
    "body": "I knew ramda had `last` but wasn't sure what the complement was called. Figured nice to have links to the whole family\n",
    "head_branch": "head-tail-last-init-fam",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d368dfb6b84f2425991",
    "number": 1255,
    "body": "per https://gamealchemist.wordpress.com/2013/05/01/lets-get-those-javascript-arrays-to-work-fast/ `6. pre-allocate your arrays whenever you can.`. This is also done in lodash's code, for performance reasons. https://github.com/lodash/lodash/blob/master/lodash.src.js#L1553\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d378dfb6b84f2425992",
    "number": 1253,
    "body": "`get` has been renamed to `prop`.\n",
    "head_branch": "props-doc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d388dfb6b84f2425993",
    "number": 1252,
    "body": "This is my suggestion on how to improve `isEmpty`. \n\nThe code examples now only show cases that match up with the description\nof the function. This has been reflected in the tests as well.\nImplementation is left unchanged.\n\nNote: I left examples with strings because it has been argued that _a string is just a list of characters_. I am willing to accept this but then I also think that we should make sure that all list functions support strings.\n",
    "head_branch": "is-empty-redux",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d398dfb6b84f2425994",
    "number": 1251,
    "body": "Closes #1250\n\nAnother note: I had no idea the function passed to `times` (possibly soon to be `repeatWith`) is [passed the index](https://github.com/ramda/ramda/blob/master/src/times.js#L27) of the loop used to generate the resulting array. Do we actually want that? Basically mapping over a range from 0 to n, but quite unexpected to me, and easily enough done with `map(fn, range(0, n))`. `repeat` for example is built on `times`/`repeatWith` and uses `always` which ignores this argument.\n",
    "head_branch": "repeat-with",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d3a8dfb6b84f2425995",
    "number": 1248,
    "body": "Fixes #1246\n",
    "head_branch": "concat-throw",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d3b8dfb6b84f2425996",
    "number": 1245,
    "body": "Fixes #1224\n\nI was able to reduce the failure case: `R.into([], R.take(0), [1, 2, 3])` currently evaluates to `[1, 2, 3]` rather than `[]`. The fix is straightforward.\n",
    "head_branch": "take",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d3c8dfb6b84f2425997",
    "number": 1244,
    "body": "Closes #1091\n\n``` javascript\nvar a = ['x'];\nvar b = /x/.exec('xyz');\n```\n\n`a` and `b` really are different values, so should have different string representations (`[\"x\"]` and `'[\"x\", \"index\": 0, \"input\": \"xyz\"]'` respectively).\n\n`eval(R.toString(b))` throws a SyntaxError, but the executable representation is awful:\n\n``` javascript\n'(function() { var list = [\"x\"]; list.index = 0; list.input = \"xyz\"; return list; }())'\n```\n",
    "head_branch": "to-string",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge aa59958821475cf18bf590283b345fa2146b841f into 2c68cd467b7204fc09bc0e46e651ba8b8e9f573f"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d3d8dfb6b84f2425998",
    "number": 1243,
    "body": "In #1241, @bySabi defined this function:\n\n``` javascript\nR.compose(R.is(String), R.prop('type'))\n```\n\nIn JavaScript it's (sadly) quite common to need to check a property's type. I suggest it's at least as common as checking a property's value. `R.propEq` gives us a convenient way to check a property's value. `R.propIs` would give us a convenient way to check a property's type. The code above could then be rewritten as:\n\n``` javascript\nR.propIs('type', String)\n```\n\n`R.propIs(a, b, c)` will throw a TypeError if `c` is null/undefined, as we'll attempt `c[a]`. This may or may not be optimal, but it matches the current behaviour of `R.propEq`.\n\n---\n\n**2015-07-08 update**\n\nI've added `R.propSatisfies` and changed the signatures of `R.propEq` and `R.propIs`.\n\n``` haskell\nR.propEq        :: a -> String -> Object -> Boolean\nR.propIs        :: Type -> String -> Object -> Boolean\nR.propSatisfies :: (a -> Boolean) -> String -> {String: a} -> Boolean\n```\n\nThe change to `R.propEq` is breaking so will warrant a `:warning:` in the 0.16.0 upgrade guide.\n",
    "head_branch": "prop-is",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge c7adcf770fd6a9df436f35da148b8b7124494e48 into 046d2898995981f2b2ed0556837de00c87b8479c"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7d3e8dfb6b84f2425999",
    "number": 1242,
    "body": "This pull request changes the meaning of `R.isEmpty(x)` from\n\n> `x.length` is zero\n\nto\n\n> `x` is the empty value of its type\n\nas discussed in #1236.\n\nThis pull request also updates `R.empty` to support Arguments.\n",
    "head_branch": "is-empty",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d3f8dfb6b84f242599a",
    "number": 1239,
    "body": "This is a breaking change which will return an empty array for the\n`match` function when there are no matches. The old behavior had the\nfunction return `null` in that case.\n\nThis deviates from the standard API but is IMHO an improvement. The deviation is also documented.\n",
    "head_branch": "no-match",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d408dfb6b84f242599b",
    "number": 1238,
    "body": "",
    "head_branch": "invoker",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d418dfb6b84f242599c",
    "number": 1237,
    "body": "This pull request is based on suggestions by @scott-christopher and @buzzdecafe in #1229. It gives `R.converge` a dramatically simpler signature:\n\n```\nR.converge :: ((b, c) -> d) -> (a -> b) -> (a -> c) -> a -> d\n```\n\nThe implementation is now trivial:\n\n``` javascript\nmodule.exports = curry(function converge(combine, f, g, x) {\n  return combine(f(x), g(x));\n});\n```\n\nI looked at a project with 34 occurrences of `R.converge`. The vast majority of these are compatible with the simpler signature. The few which are not are likely better expressed via lambdas. ;)\n",
    "head_branch": "converge-strict",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d428dfb6b84f242599d",
    "number": 1236,
    "body": "As suggested by @scott-christopher and @paldepind in #1228\n",
    "head_branch": "empty",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5e88dcdaa31cd5475a239ff5e98f97e51bdf1ba1 into 38e8eb1db7f1ed5b3a7a354574a36d92af2606a6"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7d428dfb6b84f242599e",
    "number": 1235,
    "body": "Set the query string to `?w=` when viewing this pull request to hide the indentation changes.\n",
    "head_branch": "equals",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d438dfb6b84f242599f",
    "number": 1234,
    "body": "",
    "head_branch": "index-of",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d448dfb6b84f24259a0",
    "number": 1233,
    "body": "Since `f` is a `Functor`, the identity law provides that `map(identity) = identity`.\nSo we needn't actually map over the value.\n\nSee https://github.com/fantasyland/fantasy-land#functor for more information.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d458dfb6b84f24259a1",
    "number": 1232,
    "body": "The missing type breaks our script for generating the HTML documentation.\n",
    "head_branch": "add-index",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d468dfb6b84f24259a2",
    "number": 1231,
    "body": "Closes #1230\n\nThis pull request also makes these functions work for any ordered type.\n\nThe fact that we're able to remove `_createMaxMin` and `_createMaxMinBy` is a nice bonus. `R.reduce` is a useful function!\n",
    "head_branch": "min-max",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d478dfb6b84f24259a3",
    "number": 1229,
    "body": "Variadic functions with one or more \"special\" positions should be avoided. `R.converge` is currently in this category: the first argument is special, but the structure of `R.converge(f, g, h)` provides no indication of this. `R.converge(f, [g, h])` indicates that `g` and `h` are more closely related than `f` and `g`.\n",
    "head_branch": "converge",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d488dfb6b84f24259a4",
    "number": 1227,
    "body": "Shall we remove this test as well?\n\n``` javascript\nit('dispatches to `slice` method', function() {\n  var obj = {slice: function() { return 42; }};\n  assert.strictEqual(R.slice(1, 4, obj), 42);\n});\n```\n",
    "head_branch": "slice-dispatch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f7924c16e8a8c9934dea28eb8b199547e6f1e77e into 5fb69bb19c1065399d189e5e3537569bab2d91d0"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d498dfb6b84f24259a5",
    "number": 1226,
    "body": "",
    "head_branch": "modulo-by",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d4a8dfb6b84f24259a6",
    "number": 1225,
    "body": "/cc @davidchambers for sanity check\n",
    "head_branch": "release-dist",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d4b8dfb6b84f24259a7",
    "number": 1223,
    "body": "",
    "head_branch": "currycomp",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d4c8dfb6b84f24259a8",
    "number": 1218,
    "body": "After the last wonderful change to `equals` it appears that we are no longer fixed on implementing the flaws of JavaScript's operators in our equivalent functions.\n\nThis PR implements `and` and `or` functions with simple sensible semantics and without type coercion.\n\nWe _might_ consider throwing if non-boolean arguments are received since JavaScript programmers are somewhat used to the crazy semantics of `&&` and `||`.\n\nI also took out dispatching. This case is actually a perfect example of how harmful dispatching is! Dispatching was originally added in #1015 since @davidchambers wanted to use it with Sanctuary. The reasoning was that it would make it possible to write code like this:\n\n``` javascript\nvar a = S.Just(true);\nvar b = S.Nothing();\nR.or(a, b);  // => S.Just(true);\n```\n\nBut that is the wrong way to achieve the goal. The correct way is this:\n\n``` javascript\nvar a = S.Just(true);\nvar b = S.Nothing();\nR.lift(R.or)(a, b);\n```\n\nAt first the difference might not look like much – but it is _huge_. The first code relies on a magic correspondence between dispatching in `R.or` and a method named `or` on `a` and `b`. It forces users into _thinking_ and _knowing_ about dispatching at a low level.\n\nIn the second code however the only thing that matters is that `a` and `b` are applicatives. We could swap out `a` and `b` with _any_ applicative and the code would still work!\n\nIn other words the first code is an example of brittle code that relies on implementation details and only pretends to be general but really isn't. The second code however is an example of actually general code where one only works on abstract types specified by well defined interfaces.\n\nOnce again dispatching deceives us away from proper abstractions.\n\nRemoving the dispatching also means that we and only us decides the semantics of `or` and `and`. Third party libraries can no longer overload it with additional meaning and complexity.\n",
    "head_branch": "sensible-and-or",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d4d8dfb6b84f24259a9",
    "number": 1217,
    "body": "Just a tweak.\n",
    "head_branch": "fix-isthenable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d4e8dfb6b84f24259aa",
    "number": 1216,
    "body": "Makes the implementation of `pipeK` more or less identical to the impl of `pipe`\n",
    "head_branch": "composeK",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d4f8dfb6b84f24259ab",
    "number": 1215,
    "body": "As far as I can tell grunt is no longer used\n",
    "head_branch": "grunt-less",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d508dfb6b84f24259ac",
    "number": 1214,
    "body": "`slice`-based derivations have met resistance, so we need to include String-specific functions if we want to officially support strings:\n\n``` haskell\nR.strSlice :: Number -> Number -> String -> String\nR.strTake  :: Number -> String -> String\nR.strDrop  :: Number -> String -> String\nR.strInit  :: String -> String\nR.strTail  :: String -> String\n```\n\nI'd prefer to _specify_ that the fallback definitions of `R.take`, `R.drop`, `R.init`, and `R.tail` dispatch to `slice`, which removes the need for String-specific functions. But if we don't want to formalize this, we must choose one of the following options:\n- support strings in `R.take` and friends as an _undocumented feature_ which could be removed at any time;\n- add String-specific slice functions; or\n- suggest that users use `R.slice(1, Infinity)` rather than `R.tail` when dealing with strings, `R.slice(0, 3)` rather than `R.take(3)`, etc.\n",
    "head_branch": "string-functions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d518dfb6b84f24259ad",
    "number": 1212,
    "body": "Closes #1197\n",
    "head_branch": "kleisli-composition",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 89b2bd4f5188b6dee33a343d6f6657966c55c06a into 9ce4200d39e08fdb6d5236abcbb5e782da6bb766"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7d528dfb6b84f24259ae",
    "number": 1211,
    "body": "Supersedes #1050\n\nThis pull request differs from #1050 in several ways:\n- the implementation is significantly simpler;\n- this version of `splitEvery` throws if given a non-positive slice length; and\n- this version of `splitEvery` is defined in terms of `slice` so is defined for String as well as Array<sup>†</sup>.\n\n---\n\n† I'm picking up on a theme here: provide `slice`, get lots of things free.\n",
    "head_branch": "split-every",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d538dfb6b84f24259af",
    "number": 1210,
    "body": "",
    "head_branch": "deprecated",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d538dfb6b84f24259b0",
    "number": 1209,
    "body": "to improve readability,\n\n![screen shot 2015-06-21 at 13 32 32](https://cloud.githubusercontent.com/assets/11027/8271342/6e1742e2-181a-11e5-8831-4468de194688.png)\n",
    "head_branch": "update-merge-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d548dfb6b84f24259b1",
    "number": 1206,
    "body": "As promised in https://github.com/ramda/ramda/pull/1159#issuecomment-109552450\n",
    "head_branch": "slice-dispatch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d558dfb6b84f24259b2",
    "number": 1205,
    "body": "#### API changes\n\n```\nBefore:                                     After:\n\n- lens                                      - lens\n- lensProp                                  - lensProp\n- lensIndex                                 - lensIndex\n- lensOn                                    - view\n- composeL                                  - set\n- pipeL                                     - over\n```\n#### Creating lenses\n\n``` javascript\nvar nameLens =                              var nameLens =\nR.lens(R.prop('name'), R.assoc('name'));    R.lens(R.prop('name'), R.assoc('name'));\n```\n\n`R.lens` takes the same arguments as before, but returns a different value. In the new API one never interacts directly with the return value, one simply provides it as an argument to `R.view`, `R.set`, or `R.over`.\n\nThe helper functions `R.lensProp` and `R.lensIndex` remain unchanged:\n\n``` javascript\nvar addressLens = R.lensProp('address');    var addressLens = R.lensProp('address');\nvar headLens = R.lensIndex(0);              var headLens = R.lensIndex(0);\n```\n\nLenses are now just functions, so `R.composeL` and `R.pipeL` are no longer necessary:\n\n``` javascript\nvar streetLens =                            var streetLens =\nR.composeL(headLens, addressLens);          R.compose(addressLens, headLens);\n```\n\nNote that `R.compose` reads left-to-right here. It's way too late for me to reason about this. :)\n\nThe following examples will use this data structure:\n\n``` javascript\nvar alice = {\n  name: 'Alice Jones',\n  address: ['22 Walnut St', 'San Francisco', 'CA']\n};\n```\n#### `view`\n\n``` javascript\nnameLens(alice);                            R.view(nameLens, alice);\n// => 'Alice Jones'                         // => 'Alice Jones'\n\nstreetLens(alice);                          R.view(streetLens, alice);\n// => '22 Walnut St'                        // => '22 Walnut St'\n```\n#### `set`\n\n``` javascript\nnameLens.set('Alice Smith', alice);         R.set(nameLens, 'Alice Smith', alice);\n// => { name: 'Alice Smith'                 // => { name: 'Alice Smith'\n//    , address: [ '22 Walnut St'           //    , address: [ '22 Walnut St'\n//               , 'San Francisco'          //               , 'San Francisco'\n//               , 'CA' ] }                 //               , 'CA' ] }\n```\n#### `over`\n\n``` javascript\nstreetLens.map(R.toUpper, alice);           R.over(streetLens, R.toUpper, alice);\n// => { name: 'Alice Jones'                 // => { name: 'Alice Jones'\n//    , address: [ '22 WALNUT ST'           //    , address: [ '22 WALNUT ST'\n//               , 'San Francisco'          //               , 'San Francisco'\n//               , 'CA' ] }                 //               , 'CA' ] }\n```\n\nThis API feels more in keeping with the rest of the library (returning a function with two functions attached is rather odd). Also, removing the need for special composition functions is very nice indeed.\n\nI'm opening this pull request for discussion. If we decide we like this change I'll spend some time writing documentation and figuring out the type signatures!\n\nMany thanks to @tel for walking me through the various approaches to creating lenses. The existence of this pull request suggests I absorbed at least some of the information. ;)\n\n/cc @joneshf, Master of Lenses\n",
    "head_branch": "composable-lenses",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d568dfb6b84f24259b3",
    "number": 1204,
    "body": "Closes #1194\n",
    "head_branch": "is-empty",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d578dfb6b84f24259b4",
    "number": 1203,
    "body": "I believe we want to tell those reading about [`R.commute`](http://ramdajs.com/docs/#commute) to look at [`R.commuteMap`](http://ramdajs.com/docs/#commuteMap) if they're dealing with functors other than Array. Currently _both_ functions claim to be more useful for this purpose. ;)\n",
    "head_branch": "dc-commute",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d588dfb6b84f24259b5",
    "number": 1196,
    "body": "Did this get missed or am I crazy?\n",
    "head_branch": "dropduce",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d598dfb6b84f24259b6",
    "number": 1195,
    "body": "",
    "head_branch": "dedash",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d5a8dfb6b84f24259b7",
    "number": 1192,
    "body": "As discussed reverts ramda/ramda#1167\n\n---\n\nProbably justifies a patch release (0.15.1)\n",
    "head_branch": "revert-1167-remove-length-caching",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 128c2ccabc4c71da003b7ceae00f619d8dd84080 into b6dab4a7d7206a168c5560f66368f398e3e0b2ff"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d5b8dfb6b84f24259b8",
    "number": 1190,
    "body": "See comments by @TheLudd in #1186.\n\nThis commit deprecates `eq` and `eqDeep`. `eqDeep` is implemented as an alias to `equals`.\n",
    "head_branch": "deprecate-eq",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d5c8dfb6b84f24259b9",
    "number": 1189,
    "body": "Fixes #1188\n",
    "head_branch": "uniq",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d5d8dfb6b84f24259ba",
    "number": 1187,
    "body": "As per @jethrolarson's suggestion here: https://github.com/ramda/ramda/pull/971#issuecomment-111279241, `lensIndex` now uses `update` for its setter function, providing a nice symmetry with `lensProp`:\n\n``` js\nfunction lensProp(k) {\n  return lens(prop(k), assoc(k));\n}\n```\n\n``` js\nfunction lensIndex(n) {\n  return lens(nth(n), update(n));\n}\n```\n",
    "head_branch": "lens-index-impl",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d5e8dfb6b84f24259bb",
    "number": 1185,
    "body": "I also used [PEP 8 import grouping](https://www.python.org/dev/peps/pep-0008/#imports) to make it clear which are third-party package imports.\n",
    "head_branch": "bookmarklet",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d5f8dfb6b84f24259bc",
    "number": 1184,
    "body": "`R.slice` dispatches to `slice`, so `R.substring` should be deprecated just as `R.substringTo` and `R.substringFrom` were in #1159.\n",
    "head_branch": "substring",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d608dfb6b84f24259bd",
    "number": 1183,
    "body": "",
    "head_branch": "see-adjust",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d618dfb6b84f24259be",
    "number": 1182,
    "body": "My assumption is that `allConfigs` should actually be an array, since that would be a more plausible object to map over.\n",
    "head_branch": "fix-construct-examples",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d628dfb6b84f24259bf",
    "number": 1181,
    "body": "`R.set` was added in #1088; `R.merge` was deprecated in #1105. This pull request reverts these two changes, for three reasons:\n- @nthtran drew attention to the surprising behaviour of `R.set({})` in https://github.com/ramda/ramda/pull/1088#issuecomment-110279037. @paldepind opened #1170 to address this, but we've yet to reach consensus on the desired behaviour.\n- We failed to consider [`R.mergeAll`](http://ramdajs.com/docs/#mergeAll) when we decided to deprecate `R.merge`. It's inconsistent to have the former without the latter. Determining the correct course of action will require thought.\n- I'd like to release v0.15.0, which is currently blocked while we decide how `R.set` should handle `{}`. Reverting these changes will allow us to release v0.15.0, then devote time to the above concerns.\n",
    "head_branch": "remove-set",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d638dfb6b84f24259c0",
    "number": 1180,
    "body": "It would be nice if GitHub indicated in a pull request whether the tests will pass if the pull request is merged, to catch this sorts of thing.\n",
    "head_branch": "plusplus",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d648dfb6b84f24259c1",
    "number": 1176,
    "body": "This adds undefined as a possible return value in the docs for functions\nthat might return undefined. Examples has also been added showing how\nthe functions might return undefined.\n\nThis was previously done for `find` and `findLast` but the docs were not\nconsistent.\n",
    "head_branch": "undefined-doc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d648dfb6b84f24259c2",
    "number": 1175,
    "body": "I realized while working on plaid/sanctuary#50 that `Array.prototype.shift` obviates the need for the awkward `currentArgsIdx` variable.\n\n> Showing **1 changed file** with **13 additions** and **35 deletions**.\n\n:smile:\n\nI realize that compactness is not the end goal, but in this case the difference is significant: the function was 50 lines and is now 20 lines, making it significantly more approachable. I have MacVim configured to display 35 lines of code, so the function now easily fits on my screen.\n\nI'll switch to `while` loops upon request. I first wanted to show just how compact this code can be.\n",
    "head_branch": "curry-n",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d658dfb6b84f24259c3",
    "number": 1174,
    "body": "As proposed in [#1050](https://github.com/ramda/ramda/pull/1050/files#r32039355)\n",
    "head_branch": "unban-push",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d668dfb6b84f24259c4",
    "number": 1173,
    "body": "See https://github.com/ramda/ramda/issues/1151#issuecomment-108713420\n\nThis is the signature of Haskell's equivalent function, [`sortWith`](http://hackage.haskell.org/package/base-4.8.0.0/docs/GHC-Exts.html#v:sortWith).\n",
    "head_branch": "sort-by",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d678dfb6b84f24259c5",
    "number": 1172,
    "body": "Per bower/bower.json-spec@a325da3\n\nAlso their maintainer says they probably won't ever use it: http://stackoverflow.com/questions/24844901/bowers-bower-json-file-version-property\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d688dfb6b84f24259c6",
    "number": 1170,
    "body": "[See this comment](https://github.com/ramda/ramda/pull/1088#issuecomment-110279037).\n",
    "head_branch": "fix-set",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d698dfb6b84f24259c7",
    "number": 1169,
    "body": "All those `voids` are there to make JSHint happy. This PR just makes it relax a little while inside `arity`.\n",
    "head_branch": "no-void",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d6a8dfb6b84f24259c8",
    "number": 1167,
    "body": "Closes #1165\n",
    "head_branch": "remove-length-caching",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 0375975ed27658ca18adcef75a22bebbc79015aa into 88f97b79bed11bdbd325866920f72cedb7aaf229"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d6b8dfb6b84f24259c9",
    "number": 1164,
    "body": "I believe these operators should be avoided.\n\nThe existence of both prefix and postfix operators is a source of confusion. One might write `x++` when one means `++x`, or vice versa. Understanding code which uses both prefix and postfix forms requires more mental effort than understanding code which uses just one form.\n\nPostfix `++` and postfix `--` are particularly tricky: they have side effects but are only useful in \"expressions\", since in \"statements\" the prefix forms may be used instead. Avoiding the postfix forms makes side effects more apparent.\n\nPrefix `++` and prefix `--` are sugar for `+= 1` and `-= 1`, but promote unnecessarily tricky code (such as initializing a loop variable to `-1` rather than `0`). Banning these operators means there is only one way to increment a variable and only one way to decrement a variable.\n",
    "head_branch": "plusplus",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d6c8dfb6b84f24259ca",
    "number": 1163,
    "body": "This change adds logging messages for some of the various error scenarios in the build script that were previously handled with `assert`s.\n\nSome examples:\n\n```\n>>> ERROR: Dependency declared with different variable name: `equal` & `./equals` in /Users/Scott/build/ramda/src/uniq.js\n```\n\n```\n>>> ERROR: Dependencies not declared in alphabetical order in /Users/Scott/build/ramda/src/uniq.js\n```\n\n```\n>>> ERROR: module.exports not positioned last in /Users/Scott/build/ramda/src/uniq.js\n```\n\n```\n>>> WARNING: Top-level declaration `foo` ignored in /Users/Scott/build/ramda/src/uniq.js:23\n```\n\nThe logic of the build script itself should not have changed.\n\n```\n> git checkout build-logging && scripts/build --complete > build-logging.js\n> git checkout master && scripts/build --complete > master.js\n> diff master.js build-logging.js | wc -l\n0\n```\n",
    "head_branch": "build-logging",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d6d8dfb6b84f24259cb",
    "number": 1162,
    "body": "",
    "head_branch": "keys",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d6e8dfb6b84f24259cc",
    "number": 1161,
    "body": "We can improve the performance of `curryN`/`curry` with `_curry1`. Let's look at the performance.\n\nBefore:\n\n| curry | Count | Hertz |\n| --- | --- | --- |\n| _x4(100) | 592421 | 9868550.23950353 |\n| mult4(100) | 152955 | 2609371.9307046887 |\n| manual(100) | 4406550 | 76401537.32172365 |\n\nAfter:\n\n| curry | Count | Hertz |\n| --- | --- | --- |\n| _x4(100) | 628122 | 11911507.368938653 |\n| mult4(100) | 226094 | 4277420.856223587 |\n| manual(100) | 4400142 | 82213774.10192372 |\n\nAlso, I try to use `_curry2` and `_curry3` to improve the performance. But I found that we have to modify `_curry2` and `curry3` in order to pass test case, and those modifications will slow down `_curry2` and `_curry3` a lot.\n",
    "head_branch": "curryN-perf",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d6f8dfb6b84f24259cd",
    "number": 1160,
    "body": "Related to #1159\n",
    "head_branch": "derive-contains",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d708dfb6b84f24259ce",
    "number": 1159,
    "body": "Closes #1158\n\nThe simplicity of the implementation reinforces my belief that this is an entirely reasonable change. :)\n",
    "head_branch": "derive-take-drop",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4bea801c5192044a02040aaef244b21eca33613d into 8cc013d46cfa272a6a52718e551010afabd1c408"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7d718dfb6b84f24259cf",
    "number": 1157,
    "body": "",
    "head_branch": "pretest",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d728dfb6b84f24259d0",
    "number": 1156,
    "body": "Closes #1052\n\nThe `'@@functional/placeholder'` property name was proposed by @paldepind in https://github.com/ramda/ramda/issues/1052#issuecomment-97822071.\n\n---\n\nIf we decide to merge this pull request, I wonder how likely it is that the Underscore contributors would agree to add this property to the `_` object.\n",
    "head_branch": "placeholder",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d738dfb6b84f24259d1",
    "number": 1155,
    "body": "I've always felt that there was something off with `R.curryN` but my last stab at it resulted in only minor modifications.\n\nThis PR introduces an internal `_curryN` as a base for the external `curryN`. The internal function has a slightly different signature. The new internal function is half the size of the old `curryN` and completely avoids using `_slice`.\n\nI've also used `for` loops just to provocate. I think the idea of always using `while` loops is silly. It's like always using `reduce` and forbidding `map`. And the kind of \"consistency\" that is achieved by doing so is just as harmful. Code becomes less expressive and harder to read and understand because you're using a more general construct when a more specific one would capture the desired control flow better. \n\nHere is the new `_curryN` written with while loops:\n\n``` javascript\nmodule.exports = function _curryN(length, recieved, fn) {\n  return function() {\n    var combined = [];\n    var combinedIdx = -1; // What! Minus one? But that's not really where we begin indexing\n    var argsIdx = 0;\n    var left = length;\n    while (++combinedIdx < recieved.length) { // Stuffing increment and condition check into one statement :( :( :(\n      var val = recieved[combinedIdx];\n      combined[combinedIdx] = val === __ && argsIdx < arguments.length ? arguments[argsIdx++] : val;\n      if (combined[combinedIdx] !== __) { --left; }\n    }\n    while (argsIdx < arguments.length) {\n      combined[combinedIdx] = arguments[argsIdx];\n      if (combined[combinedIdx] !== __) { --left; }\n      combinedIdx++; argsIdx++; // Huh!? For-loops have a well defined location for such increments\n    }\n    return left <= 0 ? fn.apply(this, combined) : arity(left, _curryN(length, combined, fn));\n  };\n});\n```\n\nI will change this PR to use `while` loops if requested to do so :)\n",
    "head_branch": "simplify-curryn",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d738dfb6b84f24259d2",
    "number": 1153,
    "body": "`R.update` is just `R.adjust` with an `R.always` on the first parameter. It seems quite unnecessary and [confusing](https://github.com/ramda/ramda/issues/1133#issuecomment-106910074).\n\nI originally found `update` and didn't think there'd be another function this similar to it so I wrongly assumed only the more limited `update` existed. Probably because it seems to me like Ramda generally does not supply functions that are just an `always` away.\n",
    "head_branch": "deprecate-update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d748dfb6b84f24259d3",
    "number": 1149,
    "body": "",
    "head_branch": "propOr-default-on-nil",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d758dfb6b84f24259d4",
    "number": 1147,
    "body": "This makes `R.invoker` invariant. Which simplifies the implementation and makes the signature comprehensive/correct.\n\nThis is a breaking change. But the feature was only half documented before and the upgrade path is straight forward: `R.invoker(2, 'slice', 6)` to `R.invoker(2, 'slice')(6)`.\n\nI think the current behavior has it's benefits. But in the end I think it does more harm than good.\n",
    "head_branch": "invariadic-invoker",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d768dfb6b84f24259d5",
    "number": 1146,
    "body": "Supersedes #1144\n",
    "head_branch": "invoke",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d778dfb6b84f24259d6",
    "number": 1144,
    "body": "We needn't provide both [`R.invoke`](http://ramdajs.com/docs/#invoke) and [`R.invoker`](http://ramdajs.com/docs/#invoker): these functions have similar roles (despite having very different types).\n",
    "head_branch": "invoker",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d788dfb6b84f24259d7",
    "number": 1143,
    "body": "In fresh master `mocha` throwed, `R.addIndex` was missing because **dist/ramda.js** was outdated. So i was searching for info on updating the build and only could find it here: https://github.com/ramda/ramda/pull/899\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d798dfb6b84f24259d8",
    "number": 1142,
    "body": "Implementation for https://github.com/ramda/ramda/issues/1077\n\nBelow is a simple benchmark (take with a grain of salt) of the time taken to run `R.uniq` 100 times, comparing master branch with the branch of this PR.\n\nWhen called with `R.flatten(R.repeat([{}, 0, new Just(5)], size))` (many dupes):\n\n| branch | time (ms) for 1000 items | time (ms) for 10000 items |\n| --- | --- | --- |\n| master | 700 | 7000 |\n| uniq-set | 600 | 5900 |\n\nWhen called with `R.map(function (x) { return x(); }, R.repeat(function () { return {}; }, size))` (no dupes):\n\n| branch | time (ms) for 10000 items | time (ms) for 100000 items |\n| --- | --- | --- |\n| master | 750 | 7500 |\n| uniq-set | 75 | 1700 |\n\nping @asaf-romano\n",
    "head_branch": "uniq-set",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d7a8dfb6b84f24259d9",
    "number": 1141,
    "body": "This PR makes `R.evolve` recurse into nested objects if one is present in both the object to evolve and the object of transformation functions.\n\nShort example:\n\n``` javascript\nR.evolve({nested: {object: R.add(1)}}, {nested: {object: 1}}); //=> {nested: {object: 2}}\n```\n\nThis PR also changes the behavior of `R.evolve` when a transformation function exists for a property that does not exist on the object to evolve. Currently the transformation function is invoked with `undefined` and a new key is created on the returned object. New behavior is simply to not invoke the transformation function. I've decided to do that for the following reasons:\n1. `evolve` is a function for modifying properties. To me it seems unexpected that it in some cases will also add new properties. I.e. not only modify existing properties but also change the shape of the object.\n2. Passing `undefined` to a function otherwise used to update an existing property will rarely result in something desirable. Most often it will give broken data or runtime errors.\n   `R.evolve({amount: R.add(1)}, {}); //=> {amount: NaN}`\n   `R.evolve({name: R.toUpper}, {}); //=> Throws \"TypeError: n is undefined\"`\n   The transformation function would pretty much have to special case on `undefined`.\n3. It makes `evolve` much more useful when dealing with objects of different shapes. I can do stuff like `R.map(R.evolve({name: R.toUpper}), list)` even if some items in `list` does not have a `name` property.\n4. Ramda has other functions if one wants to add new properties to an object (`R.set` can be used for things like supplying defaults).\n5. As an added benefit it makes the implementation simpler and more efficient since we'll only have to loop over the object to transform and not over the object of functions.\n\nThis is a breaking change. But I'd say it's a very low risk one. The old behavior was undocumented and quite odd. I doubt that many people depends on it. This PR documents the new behavior both in the description of `evolve` and in the provided example. The recursiveness is of course documented as well.\n",
    "head_branch": "deep-evolve",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 6c854463d5873ad58ae3aad4914436aafef5b906 into 2ec502509381c7819bbf0488f691b4a35c0f7606"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7d7b8dfb6b84f24259da",
    "number": 1139,
    "body": "As suggested in https://github.com/ramda/ramda/issues/1107#issuecomment-106011338\n\nShould we deprecate `R.curryN` rather than removing it? It would be confusing to have both `R.curryN` and `R.curryMinMax` for one release, but perhaps it would make upgrades smoother for some users.\n\nIf we decide to merge this pull request, we should consider renaming `R.uncurryN`. `R.uncurry` may be a better name.\n",
    "head_branch": "curry-min-max",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d7c8dfb6b84f24259db",
    "number": 1138,
    "body": "Closes #1134\n",
    "head_branch": "dispatch-forEach",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d7d8dfb6b84f24259dc",
    "number": 1137,
    "body": "Closes #1124 \n",
    "head_branch": "objFromKeys",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d7e8dfb6b84f24259dd",
    "number": 1129,
    "body": "Closes #1124 \n",
    "head_branch": "mapKeys",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d7f8dfb6b84f24259de",
    "number": 1126,
    "body": "",
    "head_branch": "dropWhile-example",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d808dfb6b84f24259df",
    "number": 1122,
    "body": "Closes #1121.\n",
    "head_branch": "pick-by-numbers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d818dfb6b84f24259e0",
    "number": 1118,
    "body": "Simple first approach to #1109, taking a stab at various questions along the way.\n",
    "head_branch": "expose-reduced",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d6784d5b43b183cf645f7aee0d15b0a2b39974f9 into 512826be9b4c8d88bcf50788414a522d643f5254"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7d828dfb6b84f24259e1",
    "number": 1117,
    "body": null,
    "head_branch": "fix-see-also",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d828dfb6b84f24259e2",
    "number": 1116,
    "body": "",
    "head_branch": "rebench",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 99508d15632f8cefca13d2440027fc4de432c7ef into 73b8a5e1463c6908e713c68dcb23b892d4592b19"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d838dfb6b84f24259e3",
    "number": 1114,
    "body": "See #1111\n\nThis pull request should not be merged until v0.15.0 has been published.\n",
    "head_branch": "arity",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d848dfb6b84f24259e4",
    "number": 1113,
    "body": "This pull request was prompted by plaid/sanctuary#38. It'll be nice to remove `R.strIndexOf` and `R.strLastIndexOf`, which have always felt awkward to me. :)\n",
    "head_branch": "index-of",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d858dfb6b84f24259e5",
    "number": 1112,
    "body": "I'm sad to see `R.isNaN` go. :cry:\n",
    "head_branch": "deprecated",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1266cd3e0d362b15d715d0aa51df8e1184a005ca into 0bbce74684c3a17fd2ee2cf055ff0bd002159ed4"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7d868dfb6b84f24259e6",
    "number": 1111,
    "body": "Closes #1107\n",
    "head_branch": "arity",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d878dfb6b84f24259e7",
    "number": 1108,
    "body": "When `curryN` recieves placeholders it has to merge a list of arguments containing placeholders (named `initialArgs`) with a list of arguments without placeholders (named `currentArgs`). To do that it creates a new array named `combinedArgs`.\n\nIn the process it currently does two nasty things:\n\n1/ Instead of simply looping over `currentArgs` it `shift`s over it.\n2/ Instead of merging everything into `combinedArgs` it uses `Array.prototype.concat` to merge `combinedArgs` with the part of `currentArgs` that does not fill a placeholder in `initialArgs`. Thus both `combinedArgs and`initialArgs` is left for garbage collection and a brand new array is allocated and returned instead.\n\nThis PR solves both of these issues. My guesstimate is that this should improve performance.\n",
    "head_branch": "curryn-no-concat",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d888dfb6b84f24259e8",
    "number": 1105,
    "body": "As per the discussion in #1088.\n",
    "head_branch": "deprecate-merge",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d898dfb6b84f24259e9",
    "number": 1102,
    "body": "",
    "head_branch": "dep-addidx",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d8a8dfb6b84f24259ea",
    "number": 1101,
    "body": "h/t to @kevinbeaty for his help pushing this over the finish line\n",
    "head_branch": "stepchain",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d8b8dfb6b84f24259eb",
    "number": 1100,
    "body": "I've made the same change to the MDN [polyfill](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is#Polyfill).\n",
    "head_branch": "eq",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d8c8dfb6b84f24259ec",
    "number": 1099,
    "body": "Currently `R.eq(0, new Number(0))` evaluates true, which is incorrect.\n",
    "head_branch": "eq",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 46ab6720f6158b6ee2dcfd74166ba379640213f8 into 6afa94e5ffd3525bd56e9c1a87564cd36a6cc67e"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d8d8dfb6b84f24259ed",
    "number": 1098,
    "body": "",
    "head_branch": "lint",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d8e8dfb6b84f24259ee",
    "number": 1097,
    "body": "I miss `find`. :)\n",
    "head_branch": "lint",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d8f8dfb6b84f24259ef",
    "number": 1096,
    "body": "Closes #1094\n\nThis pull request:\n- changes the name of `R.eq` to `R.identical`;\n- removes `R.eqDeep`;\n- adds `R.equals`, an equivalence function which offers dynamic dispatch; and\n- replaces internal references to `R.eq` with references to `R.equals`.\n\nAll Ramda functions (with the obvious exception of `R.identical`) will use value-based equality. So `R.uniq([[42], [42]])`, for example, will give `[[42]]` rather than `[[42], [42]]`.\n",
    "head_branch": "equality",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 49ef33583066902901b95eda8b4a705c1a9feac6 into 6abb149674828a7f99a64f8ba718034f3b3852e3"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7d908dfb6b84f24259f0",
    "number": 1095,
    "body": "",
    "head_branch": "emptydoc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d918dfb6b84f24259f1",
    "number": 1093,
    "body": null,
    "head_branch": "fix-pluck-signature",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d928dfb6b84f24259f2",
    "number": 1088,
    "body": "This pull request adds a function that recursively combines two supplied objects into one. This has previously been discussed at #1073. This PR uses the name `set` as a non-final placeholder.\n\nThis implementation follows the rules I outlined in the above mentioned thread with a few changes based on the discussion. These rules leads to a very simple implementation and behavior that is IMO easy to understand:\n\n1/ The function recurses into ~~arrays and~~ non-atomic objects. Non-atomic objects are objects that have keys in the eyes of `Object.keys` (i.e. they have own enumerable properties). It will for instance recurse into an object literal but not into a date object.\n2/ Values from objects are always copied into a new plain object.\n3/ ~~Value from arrays are copied into a new array. Sparse arrays are not handled.~~ Arrays are always copied by reference.\n\n**Use cases**\n\nAs I've [mentioned](https://gitter.im/ramda/ramda?at=555229f11817239c37e4e6c4) I think the most interesting way to think about such a function is as [a way to set properties](https://gitter.im/ramda/ramda?at=5552359df853e7f14c2b84c5) on objects.\n\nThis way of thinking has changed my opinions on the implementation in two ways:\n1. The overriding object should be first instead of last to be consistent with `assoc` and `assocPath`. `R.assoc('c', 3, {a: 1, b: 2})` matches `R.set({c: 3}, {a: 1, b: 2})`.\n2. I now think of the returned object as \"`b` with these changes from `a`\" instead of \"a brand new thing made up of `a` and `b`.\" With the first view I'd expect as little deep copying as possible but with the second view I'd expect everything to be deep copied. This PR implements the former.\n\nI see this function as a more powerful and useful version of `assoc` and `deepAssoc`.\n\n``` javascript\n// Compare this\nvar o = {a: {b: 1, c: 2, d: 3}};\nvar o2 = R.set({a: {b: 4, c: 5}}, 0);\n// To this\nvar o3 = R.compose(\n  R.assocPath(['a', 'b'], 4)\n  R.assocPath(['a', 'c'], 5)\n)(o);\n```\n\nI think this is a very welcome addition to Ramda. Currently Ramda has a lot of great functions for working with arrays without mutating them but it feels a bit weaker with regards to objects.\n\n**About arrays**\n\n@ivan-kleshnin had some [great reasons](https://github.com/ramda/ramda/issues/1073#issuecomment-100600208) why we should not (unlike Lodash) attempt to merge arrays.\n\nWhile being able to do something like this is neat:\n\n``` javascript\nvar users = {\n  'data': [{ 'user': 'barney' }, { 'user': 'fred' }]\n};\nvar ages = {\n  'data': [{ 'age': 36 }, { 'age': 40 }]\n};\n_.merge(users, ages);\n// → { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }\n```\n\nBut the same behavior can also be a disaster:\n\n``` javascript\nvar users = {\n  'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }]\n};\nvar anotherUser = {\n  'data': [{ 'user': 'kim', 'age': 42 }] // new user, not an update\n};\n_.merge(users, anotherUser);\n// → { 'data': [{ 'user': 'kim', 'age': 42 }, { 'user': 'fred', 'age': 40 }] }\n// Barney disappeared :(\n```\n\n**About naming**\n\nI really don't know what to call this thing. In my head the name `merge` implies merging two conceptually equal objects. Not applying a few changes to an existing object. On the other hand @joneshf seemed to have been thinking about `merge` like this all along. I really don't know.\n\nBut I definitely think that having both this function _and_ `merge` would be too much. I choose `set` as the name in this PR just because I had to call it something (and `set` might not be a bad name).\n\n**Symmetry with `R.evolve`**\n\nWhen/if this gets merged I think `R.evolve` should be made recursive in the same way as well. I think these two functions together provides a very solid experience for updating object without mutations.\n\nHandling the before mentioned Lodash example is very easy and, importantly, free from bad surprises (the example below can be implemented with todays `evolve` and `merge` but this power does not extend to nested objects).\n\n``` javascript\nvar users = {\n  'data': [{ 'user': 'barney' }, { 'user': 'fred' }]\n};\nvar ages = {\n  'data': [{ 'age': 36 }, { 'age': 40 }]\n};\nR.evolve({data: R.zipWith(R.set, ages.data)}, users);\n// { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }\n\nvar anotherUser = {\n  'data': [{ 'user': 'kim', 'age': 42 }] // new user, not an update\n};\nR.evolve({data: R.concat(anotherUser.data)}, users);\n// { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }, { 'user': 'kim', 'age': 42 }] }\n// Barney did not disappear :)\n```\n\n**Cycles**\n\nThis implementation does not detect cycles. I agrees with @ivan-kleshnin's [opinion on this](https://github.com/ramda/ramda/issues/1073#issuecomment-100601526). Also as far as I can think the only way to create data with cycles it with mutations (I could be wrong)? So not supporting them should be a minor issue. If there was a very simple way to detect cycles that would not be too inefficient I think adding it would be great though. But I can't think of one.\n\nConsider this PR to be nothing but my current suggestion for an implementation. Everything is up for discussion :)\n",
    "head_branch": "object-updater",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4efcc00292c61ae6c547452dc6ae9eb7b023f790 into 7c4386e71bd2b6f917e08a24274bedd92bf53f2e"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7d938dfb6b84f24259f3",
    "number": 1085,
    "body": "Because of https://github.com/ramda/ramda.github.io/pull/2 we are able to eliminate our dependency on Grunt. So let's do that.\n\n`Makefile`: you're next. Sorry @davidchambers \n",
    "head_branch": "degrunt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d948dfb6b84f24259f4",
    "number": 1084,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d958dfb6b84f24259f5",
    "number": 1083,
    "body": "See plaid/sanctuary#31\n",
    "head_branch": "lint",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d968dfb6b84f24259f6",
    "number": 1079,
    "body": "This change _inlines_ ramda into the bookmarklet.  This is to say bookmarklet contains entire ramda script rather than trying to load remote `ramda.js`, which doesn't work in most places because of #1078 \n\nI created a new `BOOKMARKLET.md`, which is built based on the latest `dist/ramda.js`. `npm run bookmarklet` does the following:\n1. load `dist/ramda.js` into bookmarklet wrapper script (purpose of the latter being simply to show an \"it worked\" modal, possibly superfluous but I left it in)\n2. load full bookmarklet script into `BOOKMARKLET.tmpl.md`\n3. write that to `BOOKMARKLET.md`\n\nI made put the bookmarklet its own MD file to avoid trashing up `README.md` history every time a build happens.\n\n:point_right: [See it here](https://github.com/Sequoia/ramda/blob/bookmarklet/BOOKMARKLET.md) :point_left: \n# TODO\n\nThe build is a bit confusing, what with `make`, `npm` scripts, and `grunt`. I wasn't sure what your canonical \"build\" step is so I just added an npm script which can be included wherever.  `CONTRIBUTING.md` does not explain what the `build` step is either (unless \"Run `make test lint`, (or `grunt test`) and address any errors.\" is the build step). **Please advise**, or just add the script in wherever your build is.\n",
    "head_branch": "bookmarklet",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d978dfb6b84f24259f7",
    "number": 1076,
    "body": "Reverts ramda/ramda#998\n\nsee discussion in https://github.com/ramda/ramda/issues/1025\n",
    "head_branch": "revert-998-adjust-strict-eq",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d988dfb6b84f24259f8",
    "number": 1075,
    "body": "",
    "head_branch": "maxminBy-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d998dfb6b84f24259f9",
    "number": 1072,
    "body": null,
    "head_branch": "is-array-like-signature",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d998dfb6b84f24259fa",
    "number": 1066,
    "body": "Not sure if there is any interest for inclusion of this, or whether transducers should be promoted to cover this use case instead. (I'm not familiar enough with transducers yet to say one way or another)\n\nThis introduces `R.reduceRightLazy`, which is a slight variation of `R.reduceRight` whereby the accumulated value is evaluated lazily, allowing for short-circuiting to prevent iterating over the entire list.\n\ne.g.\n\n``` js\nfunction exists(p, list) {\n  return R.reduceRightLazy(function(acc, a) {\n    return p(a) || acc();\n  }, false, list);\n}\n```\n",
    "head_branch": "reduce-right-lazy",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d9a8dfb6b84f24259fb",
    "number": 1063,
    "body": "",
    "head_branch": "d1059",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d9b8dfb6b84f24259fc",
    "number": 1062,
    "body": "",
    "head_branch": "dep-lift",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d9c8dfb6b84f24259fd",
    "number": 1061,
    "body": "This has been a long time coming.  It addresses only list function, not object ones.\n",
    "head_branch": "addIndex",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d9d8dfb6b84f24259fe",
    "number": 1058,
    "body": "while `lift` is certainly interesting, it is better suited to ramda-fantasy. In the context of ramda and lists, its most common uses are redundant:\n- `liftN(1)` is `map`\n- `liftN(2)` is `zipWith`\n\nSo `lift` doesn't start to contribute something new until `liftN(3)`, which might be better done in ramda as `zipAllWith` or some such. \n\ncf. https://github.com/ramda/ramda-fantasy/pull/31\n",
    "head_branch": "rm-lift",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d9e8dfb6b84f24259ff",
    "number": 1057,
    "body": "begins addressing #1011\n",
    "head_branch": "de-grunt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7d9f8dfb6b84f2425a00",
    "number": 1056,
    "body": "As proposed in #1055. I'm opening this pull request for discussion. I've implemented a handful of \"object\" functions for Map. The remaining \"object\" functions could be implemented fairly easily, I imagine.\n",
    "head_branch": "map",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7da08dfb6b84f2425a01",
    "number": 1051,
    "body": "I've been using ramda in a good amount of projects. Most of them, it's only a build of some functions, since I usually don't need the lib as a whole. However, it's been problematic to use the version from github, instead of the one I usually grab from npm, to make this build. Then, I've made this PR in order to add the build script as a bin, so everybody would be able to make their own build right away from the npm version.\nI know this PR may not be welcomed and may not be a good fit to your current workflow, but I'd like to give it a try. :smile: \n\nAnd thanks for your amazing work in this lib.\nCheers.\n",
    "head_branch": "patch-bin-build",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7da18dfb6b84f2425a02",
    "number": 1050,
    "body": "adding chunk function which given an n and a list will split the list into n equal parts.\n",
    "head_branch": "chunk",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7da28dfb6b84f2425a03",
    "number": 1047,
    "body": "@CrossEye suggested this change in https://github.com/ramda/ramda/pull/1042#discussion_r28837462.\n",
    "head_branch": "slice",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7da38dfb6b84f2425a04",
    "number": 1045,
    "body": "Category error. mapObjIndexed should be in the same category as mapObj.\n",
    "head_branch": "mapObjIndexed-category",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7da48dfb6b84f2425a05",
    "number": 1043,
    "body": "",
    "head_branch": "intersperse-hl",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 3f61a395be5646c05fe69b3ac25b579419825029 into addf46107f58107d544fd0ef5a7579a5f0811410"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7da58dfb6b84f2425a06",
    "number": 1042,
    "body": "",
    "head_branch": "batch-hl",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7da68dfb6b84f2425a07",
    "number": 1039,
    "body": "As mentioned in https://github.com/ramda/ramda/pull/924#issuecomment-88779624, using `R.toString` to generate cache keys makes `R.memoize` _much_ more useful as it now works correctly for objects (!) and for dissimilar arrays which have the same string representation according to `Array.prototype.toString` (e.g. `[0]` and `['0']`).\n\nThe implementation is simpler as `repr` and `serialize` are no longer necessary.\n",
    "head_branch": "dc-memoize",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7da78dfb6b84f2425a08",
    "number": 1036,
    "body": "Closes #1032\n\nThis is the alternative to #1034. If we decide we want _both_ functions we need to decide what to name them. :)\n",
    "head_branch": "where-pred",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7da88dfb6b84f2425a09",
    "number": 1034,
    "body": "In #1032 I proposed going in the other direction: requiring that every value in the spec be a predicate. I'm now of the opinion that since `R.where` is just sugar, it's more useful to support the common case nicely.\n\nIt's possible that we should have both versions. If so, perhaps this version should be named `R.whereEq` and the function version `R.where`.\n",
    "head_branch": "where",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7da88dfb6b84f2425a0a",
    "number": 1031,
    "body": "",
    "head_branch": "fix-lensOn-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7da98dfb6b84f2425a0b",
    "number": 1029,
    "body": "i feel this filtering logic serves the majority of use cases better\n\nbefore:\n\n![screenshot 2015-04-16 21 07 55](https://cloud.githubusercontent.com/assets/11027/7187999/47981c2a-e47d-11e4-80e1-bf9f76fdad28.png)\n\nafter:\n\n![screenshot 2015-04-16 21 07 31](https://cloud.githubusercontent.com/assets/11027/7188005/4bc8d438-e47d-11e4-841d-5d490e353af2.png)\n",
    "head_branch": "improve-docs-filter",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7daa8dfb6b84f2425a0c",
    "number": 1026,
    "body": "Removes repetition.\n\nWith equivalent benefits this could easily be done for other functions with `*With` equivalents as well.\n",
    "head_branch": "uniq-based-on-uniqwith",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dab8dfb6b84f2425a0d",
    "number": 1024,
    "body": "before 0.12 `not` used to have behavior similar to `complement`\n",
    "head_branch": "not-see-also-complement",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dac8dfb6b84f2425a0e",
    "number": 1023,
    "body": "Noticed this while playing around with the tests. Interesting that these tests only passed because `['value'].toString() === 'value'`, which means `({value: NaN})[['value']] === NaN`\n",
    "head_branch": "pathEq-test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dad8dfb6b84f2425a0f",
    "number": 1022,
    "body": "As per the discussion in #1020.\n\nI don't think I've missed anything :)\n",
    "head_branch": "xf-helper",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dae8dfb6b84f2425a10",
    "number": 1019,
    "body": "Is seems like [this commit](https://github.com/ramda/ramda/commit/fd3c99b8ac0d07a16019e902663a6e1d27f8cfa6) missed this `init` function in `_xfind`.\n",
    "head_branch": "xf-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7daf8dfb6b84f2425a11",
    "number": 1018,
    "body": "See #1002\n\nBefore:\n\n``` javascript\nR.drop(-2, [1, 2, 3, 4, 5]);  // => [, , 1, 2, 3, 4, 5]\n```\n\nAfter:\n\n``` javascript\nR.drop(-2, [1, 2, 3, 4, 5]);  // => [1, 2, 3, 4, 5]\n```\n",
    "head_branch": "drop",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7db08dfb6b84f2425a12",
    "number": 1017,
    "body": "Closes #1015\n",
    "head_branch": "and-or",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7db18dfb6b84f2425a13",
    "number": 1014,
    "body": "#848\n",
    "head_branch": "propOr-default-on-nil",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7db28dfb6b84f2425a14",
    "number": 1013,
    "body": "",
    "head_branch": "pluck-xf",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7db38dfb6b84f2425a15",
    "number": 1010,
    "body": "See, for example, https://travis-ci.org/ramda/ramda/jobs/57303350.\n",
    "head_branch": "travis",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7db48dfb6b84f2425a16",
    "number": 1009,
    "body": "Sort currently makes a clone (deep copy) of the list to sort. That is unnecessary and undocumented.\n\nThis PR changes `clone` to a `_slice` which is consistent with the rest of the code ([sortBy for instance](https://github.com/ramda/ramda/blob/master/src/sortBy.js#L37)).\n",
    "head_branch": "sortDontClone",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7db58dfb6b84f2425a17",
    "number": 1008,
    "body": "`reject` is implemented on top of `filter` so it works as a transducer as well.\n",
    "head_branch": "docRejectTransducer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7db68dfb6b84f2425a18",
    "number": 1007,
    "body": "This closes #1005.\n\nI've tried to conform to the existing code patterns, but there a few things to note:\n- I've added a test for the transducer version by using `R.into`. I could hardly find any tests for the existing transducer compatible functions. Maybe I've missed something.\n- The non-transducer implementation is not based on the transducer implementation. This seems to be in line with the existing transducer compatible functions.\n- The non-transducer implementation is meant to be performant and I've used `Array#push`. There is however no other Ramda function that uses push. Is there a reason for that? It is a fast way to build an array and it is supported by all browsers.\n- The non-`With` version is simply based on the `With`-version. I couldn't find any other functions implemented on top of their `With` companion in this way but it seems logical so I did it anyway.\n\nWhat do you think?\n",
    "head_branch": "dropRepeats",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7db78dfb6b84f2425a19",
    "number": 1006,
    "body": "ping @kevinbeaty \n\nplease review! thanks\n",
    "head_branch": "xf-update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7db88dfb6b84f2425a1a",
    "number": 1004,
    "body": "A proposal for filtering objects.\n",
    "head_branch": "filter_objects",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7db88dfb6b84f2425a1b",
    "number": 998,
    "body": "This prevents an unnecessary clone of the array and allows users to perform strict equality checks of the resulting array to easily determine whether the values of the array have changed.\n",
    "head_branch": "adjust-strict-eq",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7db98dfb6b84f2425a1c",
    "number": 991,
    "body": "Add example indicating behaviour with values set to 'undefined'\n",
    "head_branch": "ImproveMergeDocumentation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dba8dfb6b84f2425a1d",
    "number": 989,
    "body": "The current implementation of `allPass` and `anyPass` seems a bit odd to me. They support predicates taking a variable amount of arguments.\n\nThere is a test case where the predicates are all of different arity? I don't see this making sense since all the predicates are passed the same arguments.\n\nI can't think of any use case where a list of predicates would all take more than one argument, all be of the same arity and all make sense to the same set of arguments?\n\nFurthermore `allPass` and `anyPass` are variadic. So even though their arity is 1 I can do stuff like this: `R.allPass([gt10, even], 11);`. As far as I can see this is undocumented.\n\nThis commit does the following: Change `allPass` and `anyPass` into functions taking two arguments that behaves exactly like `allPass` and `anyPass` does today when the predicates takes one argument. But, they don't support anything else.\n\nThis has the advantage that support for `R.allPass([gt10, even], 11)` can be supported without relying on variadic behavior. The implementation is also vastly simplified.\n\nI realize that I should have opened an issue before creating this pull request in case there actually is a realistic use case for the removed functionality.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dbb8dfb6b84f2425a1e",
    "number": 988,
    "body": "in favor of `R.eq(NaN)`\n",
    "head_branch": "dep-isNaN",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 64ec0ce8171eae5b622224b3881686d3f5b153f9 into 421297290fa03f04590f23f9c72bf64ee2cf9c4d"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dbc8dfb6b84f2425a1f",
    "number": 987,
    "body": "",
    "head_branch": "diff-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dbd8dfb6b84f2425a20",
    "number": 985,
    "body": "",
    "head_branch": "converge",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dbe8dfb6b84f2425a21",
    "number": 982,
    "body": "The previous behaviour placed items one after the other.  The newer version created a sparse array with items placed at their original locations.\n",
    "head_branch": "andyleggett-patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f5966efd8b5d6dcac8def7fa1aa9ddb1f2ea7876 into 8f38c9b259f066ca22cf0b824b16f2cb158d9e5b"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dbf8dfb6b84f2425a22",
    "number": 981,
    "body": "One of the test cases will fail until #980 is merged.\n",
    "head_branch": "modes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dc08dfb6b84f2425a23",
    "number": 980,
    "body": "",
    "head_branch": "equality",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge e90dcd98400f7865b6cb90d77b939d584bb813f4 into 68ee6cd0e9a832e359ff2eb2439ab5c33e8c5b23"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7dc18dfb6b84f2425a24",
    "number": 979,
    "body": "Today `_.path([], someObj)` returns `undefined`. This seems inconsistent to me. If you take zero steps down, you're still at the top.\n\nThis modifies the internal `_path` function so that `_.path([], obj)` returns the passed in object and so that `_.pathEq([], obj, obj) === true`.\n\nThis PR simply removes a special case in the code. This, I think, goes to show that the current behavior is inconsistent, i.e. it is not how a user would guess the function would be working.\n\nIf the current behavior was implemented with a good reason I'm sorry for this PR :)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dc28dfb6b84f2425a25",
    "number": 978,
    "body": "Closes #977\n",
    "head_branch": "rename-isNaN",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dc38dfb6b84f2425a26",
    "number": 975,
    "body": "",
    "head_branch": "alexnormand-patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dc48dfb6b84f2425a27",
    "number": 974,
    "body": "I'd also like to add a [mode](http://en.wikipedia.org/wiki/Mode_%28statistics%29) function, but since it should work with values other than numbers it's more of a cousin than a sibling of `R.mean` and `R.median`. I'll open a separate pull request for that function if and when this pull request is merged.\n",
    "head_branch": "mean-median",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dc58dfb6b84f2425a28",
    "number": 973,
    "body": "**This is a proposal / stawman for #773**\n\nThis change introduces 2 new list functions `adjust` and `update`, providing the ability to modify values at a given index of a list. `adjust` applies a given function to replace the value, while `update` is the specialised form, updating the array with a new explicit value.\n\n``` js\nR.adjust(R.add(10))(1)([0, 1, 2]);  //=> [0, 11, 2]\nR.update(1)(11)([0, 1, 2]);         //=> [0, 11, 2]\n```\n",
    "head_branch": "list-update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dc68dfb6b84f2425a29",
    "number": 972,
    "body": "closes #970\n",
    "head_branch": "uncurry",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dc78dfb6b84f2425a2a",
    "number": 971,
    "body": "This change introduces 2 new helpers for generating lenses,\n`lensIndex` and `lensProp`, where `lensIndex` is used to\ncreate a new lens with a focus on an array index, while\n`lensProp` is used to create a new lens with a focus on an\nobject property.\n\n``` js\nvar phraseLens = R.lensProp('phrase');\nvar obj1 = { phrase: 'Absolute filth . . . and I LOVED it!'};\nphraseLens(obj1); // => 'Absolute filth . . . and I LOVED it!'\nphraseLens.set('Ooh Betty', obj1); //=> { phrase: 'Ooh Betty'}\n\nvar headLens = R.lensIndex(0);\nheadLens([10, 20, 30, 40]); //=> 10\nheadLens.set('mu', [10, 20, 30, 40]); //=> ['mu', 20, 30, 40]\n```\n\nThis change also introduces `composeL` and `pipeL` which\nare used to compose lenses together, resulting in a new lens\nwhich can be used to access and update nested properties\nof a target object.\n\n``` js\nvar headLens = R.lensIndex(0);\nvar secondLens = R.lensIndex(1);\nvar xLens = R.lensProp('x');\nvar secondOfXOfHeadLens = R.composeL(secondLens, xLens, headLens);\n\nvar source = [{x: [0, 1], y: [2, 3]}, {x: [4, 5], y: [6, 7]}];\nsecondOfXOfHeadLens(source); //=> 1\nsecondOfXOfHeadLens.set(123, source); //=> [{x: [0, 123], y: [2, 3]}, {x: [4, 5], y: [6, 7]}]\n```\n",
    "head_branch": "lens-compose",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dc88dfb6b84f2425a2b",
    "number": 969,
    "body": "See #951\n",
    "head_branch": "indentation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dc98dfb6b84f2425a2c",
    "number": 968,
    "body": "Closes #967\n",
    "head_branch": "not",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dca8dfb6b84f2425a2d",
    "number": 966,
    "body": "#953, #965\n",
    "head_branch": "ramda",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dcb8dfb6b84f2425a2e",
    "number": 964,
    "body": "",
    "head_branch": "descriptions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dcc8dfb6b84f2425a2f",
    "number": 963,
    "body": "Useful given the questionable semantics of [`isNaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN).\n",
    "head_branch": "is-nan",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dcd8dfb6b84f2425a30",
    "number": 962,
    "body": "See https://github.com/ramda/ramda/pull/919#issuecomment-84508012\n",
    "head_branch": "invoke",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dce8dfb6b84f2425a31",
    "number": 961,
    "body": "See #919\n",
    "head_branch": "cond",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dcf8dfb6b84f2425a32",
    "number": 960,
    "body": "",
    "head_branch": "style",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dd08dfb6b84f2425a33",
    "number": 958,
    "body": "See #955\n",
    "head_branch": "map-obj",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dd18dfb6b84f2425a34",
    "number": 957,
    "body": "This should be merged before <del>v0.13.0</del> <ins>v0.14.0</ins> is published.\n",
    "head_branch": "deprecated",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dd28dfb6b84f2425a35",
    "number": 956,
    "body": "`assert` and its :alien: `assert.ok` are problematic for two reasons:\n- They're imprecise. Consider this buggy `isOdd` function:\n  \n  ``` javascript\n  var isOdd = function(n) { return n % 2; };\n  \n  assert(isOdd(7));\n  assert.strictEqual(isOdd(7), true);  // AssertionError: 1 === true\n  ```\n- They don't provide useful feedback in case of failure:\n  \n  ``` javascript\n  assert(2 + 2, 5);  // AssertionError: false == true\n  assert.strictEqual(2 + 2, 5);  // AssertionError: 4 === 5\n  ```\n",
    "head_branch": "assert",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dd28dfb6b84f2425a36",
    "number": 955,
    "body": "",
    "head_branch": "partition",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dd38dfb6b84f2425a37",
    "number": 954,
    "body": "See #952\n",
    "head_branch": "indentation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dd58dfb6b84f2425a38",
    "number": 952,
    "body": "",
    "head_branch": "indentation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dd68dfb6b84f2425a39",
    "number": 951,
    "body": "Closes #715\n\n5 is a magic number for the amount of indent ramda has in its examples\n\n```\n @example\n\n      R.F(); //=> false\n └─5─┘\n```\n\n[before](https://cloud.githubusercontent.com/assets/11027/6765625/86039db8-cff1-11e4-8e9d-db2fa36030b6.png)\n[after](https://cloud.githubusercontent.com/assets/11027/6765624/8421d6ae-cff1-11e4-8f38-93654c4e0fe6.png)\n",
    "head_branch": "fix-docs-indent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dd78dfb6b84f2425a3a",
    "number": 949,
    "body": "We're making a family: `R.nth`, `R.nthArg`, `R.nthChar`, `R.nthCharCode`.\n",
    "head_branch": "nth-char",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dd88dfb6b84f2425a3b",
    "number": 948,
    "body": "It's slightly embarrassing that despite the existence of three substring functions, taking the last N characters of a string currently requires `R.slice` (which does not officially support strings). This pull request rectifies the situation by making `R.substring` an :alien: for `R.slice`.\n",
    "head_branch": "substring",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dd98dfb6b84f2425a3c",
    "number": 947,
    "body": "",
    "head_branch": "plusplus",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5016110984a7fe1751ea08efdbe69bad5fdcdcba into 9331c86981bc7e5698781e86f74a63f6e99da5fd"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dda8dfb6b84f2425a3d",
    "number": 946,
    "body": "Should have done this ages ago.\n\nI think that when we add any further core members, we'll have to change the phrasing.\n",
    "head_branch": "giving-credit",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ddb8dfb6b84f2425a3e",
    "number": 944,
    "body": "",
    "head_branch": "iov",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ddb8dfb6b84f2425a3f",
    "number": 943,
    "body": "",
    "head_branch": "ifelsefix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ddd8dfb6b84f2425a40",
    "number": 942,
    "body": "Closes #929\n",
    "head_branch": "complement",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ddd8dfb6b84f2425a41",
    "number": 940,
    "body": "`groupBy` returns an object where the values are arrays, the type signature in the docs should then be \n\n```\n(a -> s) -> [a] -> {s: [a]}`\n```\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 067d6821f3568de03017c71ad6634b369c025945 into 13bc25e282c7c74a4077dc371bd626df47bce61a"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dde8dfb6b84f2425a42",
    "number": 937,
    "body": "These files `require('ramda')` as in the dev dependency `ramda@0.11.0` specified in **package.json**. They were mistakenly updated in #902.\n",
    "head_branch": "not",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ddf8dfb6b84f2425a43",
    "number": 936,
    "body": "- focus filter input automatically\n- go to the first entry on Enter\n",
    "head_branch": "docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7de08dfb6b84f2425a44",
    "number": 935,
    "body": "Addressing #835.\n\nOne question I had - would it be worthwhile to remove the mostly identical sections within the docs for `R.curry` and `R.curryN`?\n\nAlso slightly unsure about the `@constant` tag.\n",
    "head_branch": "placeholder-doc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7de18dfb6b84f2425a45",
    "number": 934,
    "body": "",
    "head_branch": "editreadme",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7de28dfb6b84f2425a46",
    "number": 932,
    "body": "I don't if this was intentional, but mapObj is in the List category. I think it belongs in the Object category. If there is strong opposition, then feel free to close the request. \n\nI apologize if I didn't build some auxiliary files. `make` told me `'dist/ramda.js' is up to date.`\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7de38dfb6b84f2425a47",
    "number": 927,
    "body": "Added documentation example for take.\n",
    "head_branch": "exampleForTake",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7de48dfb6b84f2425a48",
    "number": 925,
    "body": "It says\n\n> Note: R.bind does not provide the additional argument-binding capabilities of Function.prototype.bind.\n\nbut doesn't tell you where to go.\n",
    "head_branch": "refer-partial-in-bind-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7de58dfb6b84f2425a49",
    "number": 924,
    "body": "Closes #875\n\nI'm very excited about this function! I've written similar functions several times but never with such a clear goal in mind:\n\n> `eval`'ing the output should result in a value equivalent to the input value.\n\nWithout this it wouldn't have been clear what to return for `-0`, `new Boolean(true)`, and many other values.\n\nThe implementation is straightforward, which also pleases me. :)\n",
    "head_branch": "show",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 00fb8f18054ed4fbccbfba559836f8728d60af82 into 873aa7fe92e2dcbefe36c6ee5988006cad5e325a"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7de68dfb6b84f2425a4a",
    "number": 923,
    "body": "Fixes #921\n\nWe need to decide how to include tests involving ES6 features such as generators. Suggestions as to other ways to write a regression test for #921 much appreciated.\n",
    "head_branch": "take",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7de78dfb6b84f2425a4b",
    "number": 922,
    "body": "sauce labs is running after each platform build and if it errors -- not _fails_ -- on any one, the whole build gets marked as errored. I propose running sauce either pre-publish or at regular intervals. \n",
    "head_branch": "simplebuild",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5f9c6ea3f07e7f4277b6a1dd8bc8aaff934cf92c into de5e373c4cd8de81088475fff887698029c333a8"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7de88dfb6b84f2425a4c",
    "number": 920,
    "body": "Iterates over own property `[key, value]` pairs if not array, method\nor iterable. Used as last option instead of throwing error. Dual to\n`_stepCat` merging of pairs with transducers.\n",
    "head_branch": "reduce-object",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7de98dfb6b84f2425a4d",
    "number": 919,
    "body": "I take exception to this expression:\n\n``` javascript\nR.invoke('substring', 'Ramda', 1, 4)\n```\n\nWe're providing three things: a method name, an object, and zero or more arguments (two in this case). Though we're providing three things, we're providing _four_ arguments to `R.invoke`. The expression would be clearer if the arguments we wish to provide to `'Ramda'.substring` were grouped:\n\n``` javascript\nR.invoke('substring', 'Ramda', [1, 4])\n```\n\nThis would make the function easier to describe:\n\n<p><del>Returns the result of invoking <code>obj[methodName]</code> with the zero or more positional arguments following <code>methodName</code> and <code>obj</code>.</del></p>\n\n\n<p><ins>Returns the result of applying <code>obj[methodName]</code> to <code>args</code>.</ins></p>\n\n\nIt would also simplify the function's `@sig`. Perhaps most significantly, it would mean we could partially apply any combination of arguments. For example:\n\n``` javascript\n//  toBinary :: Number -> String\nvar toBinary = R.invoke('toString', R.__, [2])\n\ntoBinary(42);  // => '101010'\ntoBinary(63);  // => '111111'\n```\n\nI can also imagine contexts in which partially applying the first and second arguments is useful.\n\nThis is not a breaking change since `R.invoke` was added in #906 and we have not published since that pull request was merged.\n",
    "head_branch": "invoke",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dea8dfb6b84f2425a4e",
    "number": 918,
    "body": "`into` and `transduce` also allow dispatch on `reduce`. This\nbehavior is similar to Clojure with `IReduceInit` dispatching\nand allows chaining applications of transducers with `eduction`.\nAlso allows using `into` and `transduce` with any object that\nhas a `reduce` method.\n",
    "head_branch": "reduce-dispatch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7deb8dfb6b84f2425a4f",
    "number": 917,
    "body": "",
    "head_branch": "nwise",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dec8dfb6b84f2425a50",
    "number": 916,
    "body": "`R.pathEq` now accepts a list rather than a period delimited string.\n",
    "head_branch": "mk-pathEq-docs-typo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ded8dfb6b84f2425a51",
    "number": 915,
    "body": "Merges _arrayReduce, _iterableReduce, _isIterable, _symIterator into\n_reduce.\n",
    "head_branch": "reduce-reduce",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dee8dfb6b84f2425a52",
    "number": 914,
    "body": "This was discussed in #881. These tests assert left-to-right enumeration order, but nothing in the definitions of these functions requires a particular enumeration order. Rather than _test_ for a specific implementation, let's consider short-circuiting part of the _specification_ for each of these functions.\n",
    "head_branch": "short-circuiting",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dee8dfb6b84f2425a53",
    "number": 912,
    "body": "Prompted by cognitect-labs/transducers-js#20 from @tgriesser, removing\nthe internal transformer symbol until issues are worked out. This symbol\nis currently only supported in jlongster/transducers.js and\ninteroperability is questionable as (Symbol('transformer') !==\nSymbol('transformer')).\n\nThis feature was not documented, nor do the tests depend on it, and\nonly effects an undocumented feature of into. Better to remove it now\nuntil details are worked out.  If an \"official spec\" is agreed upon,\nI will open a new PR.\n",
    "head_branch": "remove-transformer-symbol",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7def8dfb6b84f2425a54",
    "number": 911,
    "body": "I'm now of the opinion that deedpoll needn't be part of the linting process, though I imagine I'll continue to use it from time to time to keep this project's identifiers consistent.\n",
    "head_branch": "deedpoll",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7df08dfb6b84f2425a55",
    "number": 910,
    "body": "See #859\n",
    "head_branch": "identity",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7df18dfb6b84f2425a56",
    "number": 909,
    "body": "I noticed that the body of `_stepCatObject.step` can be written as an expression if we use `_createMapEntry`. :)\n",
    "head_branch": "step-cat",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7df28dfb6b84f2425a57",
    "number": 908,
    "body": "",
    "head_branch": "style",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7df38dfb6b84f2425a58",
    "number": 907,
    "body": "For discussion before this goes any further\n\nCurrently the obvious 15 tests fail.\n\nThis implements all the internal methods that rely on the `arity` of a function through metadata. It also tracks the source function and name of a function.\n\nAn obvious extension of this is to do native unwrapping (for example doing currying and partial and other decorators in a single method as lodash does [big benefit!])\n\nThe main motivation of this is (for me) is a) a big perf benefit by avoiding arity and b) enables us to later implement `restParams` which will be a substantial improvement in several places in the code base (it didn't make sense to implement this through arity). Overall this enables a couple follow up optimizations\n\nPoints of interest:\n- Should it be added to an object publicly   or use a symbol\n- What should be included\n- Should repl stuff be added\n\nBenchmarks to follow (in case its not obvious the benefit): http://jsperf.com/ramda-currying-cost/4\n",
    "head_branch": "meta",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7df48dfb6b84f2425a59",
    "number": 906,
    "body": "Closes #905\n\nI did not make `R.func` an :alien: for `R.invoke` as I'd like to propose a change to `R.invoke` in a subsequent pull request and we'll want to preserve the current `R.func` behaviour until we remove that function.\n",
    "head_branch": "invoke",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7df58dfb6b84f2425a5a",
    "number": 904,
    "body": "As suggested in #901\n",
    "head_branch": "clone",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7df68dfb6b84f2425a5b",
    "number": 903,
    "body": "`always` doesn't internally clone non-primitives like objects so this might\nbe good to note.\n\nDiscussion in gitter:\n\nhttps://gitter.im/ramda/ramda?at=55001e958233c93368d0a1e8\n",
    "head_branch": "clarify-always-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 9e59c792dc0750b11ee7f246bb92c2c6c954cbc6 into b5a9772af51b1681e36eb7a20f9f9ac8d6ec6667"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7df78dfb6b84f2425a5c",
    "number": 902,
    "body": "Fixes #843\nDecided to skip ! for now.\n",
    "head_branch": "andOr",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7df88dfb6b84f2425a5d",
    "number": 901,
    "body": "I find myself defining this function quite frequently. It's a nice companion to `R.match`.\n\nNote that `RegExp.prototype.test` is not referentially transparent:\n\n``` javascript\n> var pattern = /x/g\nundefined\n> pattern.lastIndex\n0\n> pattern.test('xyz')\ntrue\n> pattern.lastIndex\n1\n> pattern.test('xyz')\nfalse\n```\n\nIt's thus necessary to invoke the method on a clone of `pattern`.\n\nThe implementation of `_cloneRegExp` comes from purescript/purescript-strings#6.\n\nWe should also use `_cloneRegExp` in `clone`, but I've leave that for a separate pull request.\n",
    "head_branch": "test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7df98dfb6b84f2425a5e",
    "number": 899,
    "body": "Closes #849\n\nWe could add **dist/ramda.js** to **.gitignore** but this would add complexity to the prepublish script.\n",
    "head_branch": "build",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dfa8dfb6b84f2425a5f",
    "number": 898,
    "body": "Not sure about single-quotes around console output\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dfb8dfb6b84f2425a60",
    "number": 897,
    "body": "Supersedes #815\n",
    "head_branch": "changelog",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dfc8dfb6b84f2425a61",
    "number": 896,
    "body": "",
    "head_branch": "fixpages",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dfd8dfb6b84f2425a62",
    "number": 893,
    "body": "#892\n",
    "head_branch": "ramda",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dfe8dfb6b84f2425a63",
    "number": 891,
    "body": "Closes #890\n\nThis pull request:\n- reverts #887;\n- replaces the handful of uses of `Array.prototype.push` which predated #887; and\n- adds a note to a new \"Conventions\" section of **CONTRIBUTING.md**.\n\nBefore:\n\n```\n~/github.com/ramda/ramda (master)\n$ grunt bench\nRunning \"benchmark:all\" (benchmark) task\n\nRunning suite concat [lib/bench/concat.bench.js]...\n>> _(s1).concat(s2) x 1,368,969 ops/sec ±3.22% (95 runs sampled)\n>> concat(s1, s2) x 403,106 ops/sec ±7.09% (90 runs sampled)\n>> concat(s1)(s2) x 426,277 ops/sec ±1.84% (94 runs sampled)\n>> concatS1(s2) x 453,114 ops/sec ±0.48% (97 runs sampled)\nFastest test is _(s1).concat(s2) at 3.0x faster than concatS1(s2)\n\nRunning suite curry [lib/bench/curry.bench.js]...\n>> _x4(100) x 13,037,423 ops/sec ±1.59% (95 runs sampled)\n>> mult4(100) x 1,241,952 ops/sec ±1.48% (94 runs sampled)\n>> manual(100) x 61,685,048 ops/sec ±1.60% (91 runs sampled)\nFastest test is manual(100) at 4.7x faster than _x4(100)\n\nRunning suite forEach [lib/bench/each.bench.js]...\n>> _.each(nums, x2) x 415,982 ops/sec ±0.61% (99 runs sampled)\n>> forEach(x2, nums) x 423,948 ops/sec ±0.71% (98 runs sampled)\n>> forEach(x2)(nums) x 414,706 ops/sec ±0.57% (97 runs sampled)\nFastest test is forEach(x2, nums) at 1.02x faster than forEach(x2)(nums) and _.each(nums, x2)\n\nRunning suite filter where [lib/bench/filter-where.bench.js]...\n>> _.filter(objs, {x: []}) x 115,878 ops/sec ±1.68% (98 runs sampled)\n>> filter(where({x: isEmpty}), objs) x 77,985 ops/sec ±2.07% (94 runs sampled)\n>> filter(where({x: isEmpty}))(objs) x 66,790 ops/sec ±6.04% (88 runs sampled)\n>> filterEmptyX(objs) x 69,758 ops/sec ±2.92% (89 runs sampled)\n>> _.filter(objs, {y: false}) x 920,353 ops/sec ±2.36% (91 runs sampled)\n>> filter(where({y: false}), objs) x 69,271 ops/sec ±0.53% (98 runs sampled)\n>> filter(where({y: false}))(objs) x 56,283 ops/sec ±3.37% (82 runs sampled)\n>> filterFalseY(objs) x 81,667 ops/sec ±2.71% (95 runs sampled)\nFastest test is _.filter(objs, {y: false}) at 7.9x faster than _.filter(objs, {x: []})\n\nRunning suite filter [lib/bench/filter.bench.js]...\n>> _.filter(nums, isEven) x 2,613,794 ops/sec ±0.47% (98 runs sampled)\n>> filter(isEven, nums) x 564,926 ops/sec ±2.36% (85 runs sampled)\n>> filter(isEven)(nums) x 457,530 ops/sec ±10.90% (77 runs sampled)\n>> filterEven(nums) x 606,480 ops/sec ±2.32% (93 runs sampled)\nFastest test is _.filter(nums, isEven) at 4.3x faster than filterEven(nums)\n\nRunning suite find where [lib/bench/find-where.bench.js]...\n>> _.find(objs, {x: []}) x 625,614 ops/sec ±1.79% (95 runs sampled)\n>> find(where({x: isEmpty}), objs) x 202,359 ops/sec ±3.36% (86 runs sampled)\n>> find(where({x: isEmpty}))(objs) x 246,246 ops/sec ±0.75% (91 runs sampled)\n>> findEmptyX(objs) x 274,585 ops/sec ±0.55% (101 runs sampled)\n>> _.find(objs, {y: false}) x 1,232,320 ops/sec ±2.66% (90 runs sampled)\n>> find(where({y: false}), objs) x 227,554 ops/sec ±0.78% (92 runs sampled)\n>> find(where({y: false}))(objs) x 202,823 ops/sec ±4.57% (87 runs sampled)\n>> findFalseY(objs) x 195,202 ops/sec ±5.49% (76 runs sampled)\nFastest test is _.find(objs, {y: false}) at 1.97x faster than _.find(objs, {x: []})\n\nRunning suite find [lib/bench/find.bench.js]...\n>> _.find(nums, isZero) x 5,952,412 ops/sec ±2.32% (88 runs sampled)\n>> find(isZero, nums) x 9,722,953 ops/sec ±2.37% (89 runs sampled)\n>> find(isZero)(nums) x 5,128,579 ops/sec ±7.35% (73 runs sampled)\n>> findZero(nums) x 10,596,381 ops/sec ±3.06% (90 runs sampled)\nFastest test is findZero(nums) at 1.09x faster than find(isZero, nums)\n\nRunning suite findIndex where [lib/bench/findIndex-where.bench.js]...\n>> _.findIndex(objs, {x: []}) x 549,893 ops/sec ±5.52% (83 runs sampled)\n>> findIndex(where({x: isEmpty}), objs) x 229,476 ops/sec ±3.21% (89 runs sampled)\n>> findIndex(where({x: isEmpty}))(objs) x 196,259 ops/sec ±4.86% (78 runs sampled)\n>> findIndexEmptyX(objs) x 189,437 ops/sec ±12.95% (68 runs sampled)\n>> _.findIndex(objs, {y: false}) x 1,145,725 ops/sec ±5.89% (84 runs sampled)\n>> findIndex(where({y: false}), objs) x 196,104 ops/sec ±6.59% (83 runs sampled)\n>> findIndex(where({y: false}))(objs) x 215,852 ops/sec ±4.13% (90 runs sampled)\n>> findIndexFalseY(objs) x 243,758 ops/sec ±0.53% (97 runs sampled)\nFastest test is _.findIndex(objs, {y: false}) at 2.1x faster than _.findIndex(objs, {x: []})\n\nRunning suite findIndex [lib/bench/findIndex.bench.js]...\n>> _.findIndex(nums, isZero) x 6,575,388 ops/sec ±0.46% (98 runs sampled)\n>> findIndex(isZero, nums) x 11,027,587 ops/sec ±1.10% (97 runs sampled)\n>> findIndex(isZero)(nums) x 6,063,651 ops/sec ±2.68% (92 runs sampled)\n>> findIndexZero(nums) x 11,222,322 ops/sec ±2.21% (91 runs sampled)\nFastest test is findIndexZero(nums) at 1.02x faster than findIndex(isZero, nums)\n\nRunning suite indexOf [lib/bench/indexof.bench.js]...\n>> _.indexOf x 19,635,066 ops/sec ±6.54% (74 runs sampled)\n>> indexOf(sq, nums) x 14,489,096 ops/sec ±7.96% (77 runs sampled)\n>> indexOf(sq)(nums) x 7,415,894 ops/sec ±3.14% (83 runs sampled)\n>> idxOf23(nums) x 20,006,247 ops/sec ±1.38% (94 runs sampled)\nFastest test is idxOf23(nums) at 1.02x faster than _.indexOf\n\nRunning suite isSet [lib/bench/isset.bench.js]...\n>> isSet(unsortedBag) x 17,000,501 ops/sec ±2.13% (91 runs sampled)\n>> isSet(unsortedSet) x 5,283,432 ops/sec ±2.04% (95 runs sampled)\n>> isSet(sortedBag) x 16,638,628 ops/sec ±1.83% (89 runs sampled)\n>> isSet(sortedSet) x 5,271,099 ops/sec ±1.22% (95 runs sampled)\nFastest test is isSet(unsortedBag) at 1.02x faster than isSet(sortedBag)\n\nRunning suite map [lib/bench/map.bench.js]...\n>> _.map x 4,084,769 ops/sec ±1.86% (93 runs sampled)\n>> map(sq, nums) x 377,451 ops/sec ±2.18% (91 runs sampled)\n>> map(sq)(nums) x 391,288 ops/sec ±1.17% (93 runs sampled)\n>> mapSq(nums) x 402,405 ops/sec ±1.37% (95 runs sampled)\nFastest test is _.map at 10.2x faster than mapSq(nums)\n\nRunning suite maxBy [lib/bench/maxWith.bench.js]...\n>> _.max x 117,517 ops/sec ±2.05% (91 runs sampled)\n>> maxBy(computer, nums) x 262,155 ops/sec ±1.57% (96 runs sampled)\n>> maxBy(computer)(vals) x 264,003 ops/sec ±0.81% (98 runs sampled)\n>> maxVal(vals) x 274,450 ops/sec ±0.41% (101 runs sampled)\nFastest test is maxVal(vals) at 1.05x faster than maxBy(computer, nums) and maxBy(computer)(vals)\n\nRunning suite reduce [lib/bench/reduce.bench.js]...\n>> _.reduce(nums, add, 0) x 3,767,838 ops/sec ±5.60% (88 runs sampled)\n>> reduce(add, 0, nums) x 6,703,083 ops/sec ±1.90% (92 runs sampled)\n>> reduce(add, 0)(nums) x 4,315,366 ops/sec ±4.64% (79 runs sampled)\n>> reduceAdd(nums) x 7,777,166 ops/sec ±1.92% (93 runs sampled)\nFastest test is reduceAdd(nums) at 1.16x faster than reduce(add, 0, nums)\n```\n\nAfter:\n\n```\n11:27 ~/github.com/ramda/ramda (push)\n$ grunt bench\nRunning \"benchmark:all\" (benchmark) task\n\nRunning suite concat [lib/bench/concat.bench.js]...\n>> _(s1).concat(s2) x 1,386,591 ops/sec ±1.80% (94 runs sampled)\n>> concat(s1, s2) x 3,448,162 ops/sec ±1.23% (94 runs sampled)\n>> concat(s1)(s2) x 2,671,543 ops/sec ±2.38% (89 runs sampled)\n>> concatS1(s2) x 3,107,912 ops/sec ±3.64% (85 runs sampled)\nFastest test is concat(s1, s2) at 1.11x faster than concatS1(s2)\n\nRunning suite curry [lib/bench/curry.bench.js]...\n>> _x4(100) x 11,149,670 ops/sec ±4.63% (87 runs sampled)\n>> mult4(100) x 1,800,595 ops/sec ±5.01% (85 runs sampled)\n>> manual(100) x 52,777,090 ops/sec ±2.21% (84 runs sampled)\nFastest test is manual(100) at 4.7x faster than _x4(100)\n\nRunning suite forEach [lib/bench/each.bench.js]...\n>> _.each(nums, x2) x 402,820 ops/sec ±0.80% (95 runs sampled)\n>> forEach(x2, nums) x 350,622 ops/sec ±4.57% (84 runs sampled)\n>> forEach(x2)(nums) x 383,634 ops/sec ±2.77% (92 runs sampled)\nFastest test is _.each(nums, x2) at 1.15x faster than forEach(x2, nums) and forEach(x2)(nums)\n\nRunning suite filter where [lib/bench/filter-where.bench.js]...\n>> _.filter(objs, {x: []}) x 90,490 ops/sec ±6.53% (80 runs sampled)\n>> filter(where({x: isEmpty}), objs) x 85,409 ops/sec ±4.21% (85 runs sampled)\n>> filter(where({x: isEmpty}))(objs) x 86,835 ops/sec ±5.87% (94 runs sampled)\n>> filterEmptyX(objs) x 79,729 ops/sec ±3.95% (78 runs sampled)\n>> _.filter(objs, {y: false}) x 768,583 ops/sec ±9.11% (76 runs sampled)\n>> filter(where({y: false}), objs) x 55,069 ops/sec ±15.28% (71 runs sampled)\n>> filter(where({y: false}))(objs) x 68,521 ops/sec ±4.07% (85 runs sampled)\n>> filterFalseY(objs) x 81,487 ops/sec ±2.22% (95 runs sampled)\nFastest test is _.filter(objs, {y: false}) at 8.5x faster than _.filter(objs, {x: []})\n\nRunning suite filter [lib/bench/filter.bench.js]...\n>> _.filter(nums, isEven) x 2,640,032 ops/sec ±1.37% (96 runs sampled)\n>> filter(isEven, nums) x 2,533,728 ops/sec ±0.71% (98 runs sampled)\n>> filter(isEven)(nums) x 1,795,904 ops/sec ±3.16% (86 runs sampled)\n>> filterEven(nums) x 2,299,163 ops/sec ±3.05% (87 runs sampled)\nFastest test is _.filter(nums, isEven) at 1.04x faster than filter(isEven, nums)\n\nRunning suite find where [lib/bench/find-where.bench.js]...\n>> _.find(objs, {x: []}) x 619,718 ops/sec ±1.85% (89 runs sampled)\n>> find(where({x: isEmpty}), objs) x 292,321 ops/sec ±0.95% (93 runs sampled)\n>> find(where({x: isEmpty}))(objs) x 268,966 ops/sec ±1.88% (93 runs sampled)\n>> findEmptyX(objs) x 324,765 ops/sec ±0.91% (95 runs sampled)\n>> _.find(objs, {y: false}) x 1,312,225 ops/sec ±0.51% (98 runs sampled)\n>> find(where({y: false}), objs) x 253,730 ops/sec ±1.16% (94 runs sampled)\n>> find(where({y: false}))(objs) x 241,227 ops/sec ±0.90% (93 runs sampled)\n>> findFalseY(objs) x 262,049 ops/sec ±0.83% (96 runs sampled)\nFastest test is _.find(objs, {y: false}) at 2.1x faster than _.find(objs, {x: []})\n\nRunning suite find [lib/bench/find.bench.js]...\n>> _.find(nums, isZero) x 5,681,946 ops/sec ±1.76% (87 runs sampled)\n>> find(isZero, nums) x 9,029,246 ops/sec ±3.81% (90 runs sampled)\n>> find(isZero)(nums) x 6,025,048 ops/sec ±1.33% (91 runs sampled)\n>> findZero(nums) x 11,267,172 ops/sec ±1.27% (94 runs sampled)\nFastest test is findZero(nums) at 1.25x faster than find(isZero, nums)\n\nRunning suite findIndex where [lib/bench/findIndex-where.bench.js]...\n>> _.findIndex(objs, {x: []}) x 421,490 ops/sec ±9.78% (67 runs sampled)\n>> findIndex(where({x: isEmpty}), objs) x 260,069 ops/sec ±9.11% (92 runs sampled)\n>> findIndex(where({x: isEmpty}))(objs) x 274,760 ops/sec ±1.27% (94 runs sampled)\n>> findIndexEmptyX(objs) x 310,609 ops/sec ±1.50% (92 runs sampled)\n>> _.findIndex(objs, {y: false}) x 1,081,033 ops/sec ±6.49% (81 runs sampled)\n>> findIndex(where({y: false}), objs) x 235,401 ops/sec ±6.55% (90 runs sampled)\n>> findIndex(where({y: false}))(objs) x 206,008 ops/sec ±5.96% (83 runs sampled)\n>> findIndexFalseY(objs) x 231,775 ops/sec ±4.05% (86 runs sampled)\nFastest test is _.findIndex(objs, {y: false}) at 2.6x faster than _.findIndex(objs, {x: []})\n\nRunning suite findIndex [lib/bench/findIndex.bench.js]...\n>> _.findIndex(nums, isZero) x 6,454,087 ops/sec ±0.64% (96 runs sampled)\n>> findIndex(isZero, nums) x 10,386,156 ops/sec ±1.29% (93 runs sampled)\n>> findIndex(isZero)(nums) x 6,086,126 ops/sec ±2.25% (93 runs sampled)\n>> findIndexZero(nums) x 11,608,603 ops/sec ±1.06% (94 runs sampled)\nFastest test is findIndexZero(nums) at 1.12x faster than findIndex(isZero, nums)\n\nRunning suite indexOf [lib/bench/indexof.bench.js]...\n>> _.indexOf x 25,862,557 ops/sec ±0.95% (93 runs sampled)\n>> indexOf(sq, nums) x 19,114,500 ops/sec ±0.98% (98 runs sampled)\n>> indexOf(sq)(nums) x 7,476,330 ops/sec ±2.51% (76 runs sampled)\n>> idxOf23(nums) x 21,108,074 ops/sec ±0.45% (96 runs sampled)\nFastest test is _.indexOf at 1.23x faster than idxOf23(nums)\n\nRunning suite isSet [lib/bench/isset.bench.js]...\n>> isSet(unsortedBag) x 17,319,852 ops/sec ±1.17% (94 runs sampled)\n>> isSet(unsortedSet) x 5,414,832 ops/sec ±0.97% (93 runs sampled)\ncommit 52f32cf8f2e8aee6a6ae3202290d8848822d92d4\n>> isSet(sortedBag) x 18,292,157 ops/sec ±0.67% (98 runs sampled)\n>> isSet(sortedSet) x 5,401,572 ops/sec ±1.10% (94 runs sampled)\nFastest test is isSet(sortedBag) at 1.06x faster than isSet(unsortedBag)\n\nRunning suite map [lib/bench/map.bench.js]...\n>> _.map x 4,261,501 ops/sec ±1.00% (96 runs sampled)\n>> map(sq, nums) x 2,439,993 ops/sec ±1.27% (97 runs sampled)\n>> map(sq)(nums) x 1,841,576 ops/sec ±1.88% (92 runs sampled)\n>> mapSq(nums) x 2,440,210 ops/sec ±1.19% (95 runs sampled)\ncommit 52f32cf8f2e8aee6a6ae3202290d8848822d92d4\nFastest test is _.map at 1.75x faster than map(sq, nums) and mapSq(nums)\n\nRunning suite maxBy [lib/bench/maxWith.bench.js]...\n>> _.max x 145,845 ops/sec ±0.88% (97 runs sampled)\n>> maxBy(computer, nums) x 267,226 ops/sec ±1.16% (99 runs sampled)\n>> maxBy(computer)(vals) x 266,891 ops/sec ±1.14% (95 runs sampled)\n>> maxVal(vals) x 280,475 ops/sec ±0.95% (98 runs sampled)\nFastest test is maxVal(vals) at 1.05x faster than maxBy(computer)(vals) and maxBy(computer, nums)\n\nRunning suite reduce [lib/bench/reduce.bench.js]...\n>> _.reduce(nums, add, 0) x 4,372,079 ops/sec ±0.40% (100 runs sampled)\n>> reduce(add, 0, nums) x 7,233,313 ops/sec ±0.65% (99 runs sampled)\n>> reduce(add, 0)(nums) x 4,847,441 ops/sec ±0.65% (88 runs sampled)\n>> reduceAdd(nums) x 8,287,915 ops/sec ±0.68% (96 runs sampled)\nFastest test is reduceAdd(nums) at 1.15x faster than reduce(add, 0, nums)\n```\n\nThe fact that `map'` is capable of six times as many operations per second as `map` is surprising.\n",
    "head_branch": "push",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b7a8f67b7237d10f09caf1a4c899668c7458f96d into d5dc62b72072d1a42cb0e968c14013eff7c6da8c"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dfe8dfb6b84f2425a64",
    "number": 889,
    "body": "",
    "head_branch": "has",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7dff8dfb6b84f2425a65",
    "number": 888,
    "body": "Closes #886\n",
    "head_branch": "plusplus",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e008dfb6b84f2425a66",
    "number": 887,
    "body": "We're currently mixing the two approaches. Let's stick with the more commonly seen `xs.push(x)`.\n",
    "head_branch": "push",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e018dfb6b84f2425a67",
    "number": 885,
    "body": "",
    "head_branch": "jscs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e028dfb6b84f2425a68",
    "number": 884,
    "body": "",
    "head_branch": "pick-all",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e038dfb6b84f2425a69",
    "number": 883,
    "body": "",
    "head_branch": "pair-with",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e048dfb6b84f2425a6a",
    "number": 882,
    "body": "See #879\n",
    "head_branch": "pick",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e058dfb6b84f2425a6b",
    "number": 881,
    "body": "I keep missing a function named `R.none`, which would be the counterpart of [`R.all`](http://ramdajs.com/docs/#all). It's easy to accomplish the same thing by doing `R.all(R.not(fn))` but that's not very readable.\n\nIn some occasions I've found myself doing things like:\n\n```\nvar foo = R.map(parseInt, ['1', '2', 'sfa']);\nvar noneAreNaN = R.all(R.not(isNaN));\nif (noneAreNaN(foo)) {\n  // Do something\n}\n```\n\nAnd I would like to be able to do this:\n\n```\nvar foo = R.map(parseInt, ['1', '2', 'sfa']);\nif (R.none(isNaN)(foo)) {\n  // Do something\n}\n```\n",
    "head_branch": "feat-add-none-function",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 0af66e926e3929ca3f3fb19d80f5c017fcfeabb2 into 70c1fac21a2ea86d08769d446c7e7aa7e67df899"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7e068dfb6b84f2425a6c",
    "number": 880,
    "body": "As discussed in #859. We were 2–1 in favour of `R.identity`; this pull request deprecates `R.I`. Those who'll miss `R.I` can console themselves by defining an :alien:: `var I = R.identity;`.\n",
    "head_branch": "identity",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e078dfb6b84f2425a6d",
    "number": 879,
    "body": "This implementation is simpler in the terms of the number of direct and indirect internal dependencies. If we're to promote the use case outlined in #829 we should avoid defining functions in terms of other functions where practical. I realize this is the antithesis of functional programming!\n",
    "head_branch": "omit",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d27dc2028ebbda8ba9f5b7b8b71feb5f5be68f78 into 0bd54cc00bc741101c52cebbcee155ec82f680fc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7e088dfb6b84f2425a6e",
    "number": 878,
    "body": "- Squashed from buzzedecafe:transduce\n- Rebased to master\n- Discussed in ramduce\n- Credits to @buzzdecafe and @kedashoe\n\nSquashed Commits:\n- we have a map transducer\n- Apply all arguments to transducer as function.\n- Use switch case dispatch for transducer function\n- port @kedashoe and @kevinbeaty changes\n- Fix build and tests.\n- _appendXf as single expression and fix require order for bulid\n- foldl uses _xwrap for use with functions\n- _dispatchable accepts function for use in _groupBy\n- _isIterable uses _symIterator\n- Fix filter/map to use _dispatchable appropriately\n- Curry _xany, _xfilter, _xmap for use with _dispatchable\n- Fix idx lint warning in _arrayReduce\n- Remove no longer supported transformer dispatch test\n- Transducers for take, takeWhile, drop, dropWhile\n- get tests working again\n- transduce tests\n- improve map test coverage\n- Add into\n- all and any working\n- Add find, findLast, findIndex and findLastIndex transducers\n- Step default value in any/all\n- stepLast no longer requires initial value since transducers always step single value\n- Allow null/undefined accumulators when checking reduced\n- groupBy transducer\n",
    "head_branch": "transducers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e098dfb6b84f2425a6f",
    "number": 876,
    "body": "Closes #637\n\nThis pull request introduces four new internal functions: `_assoc`, `_assocPath`, `_dissoc`, and `_dissocPath`. These are defined with as few dependencies as possible. `_assoc`, for example, has no dependencies whereas the existing `assoc` implementation depends on `_extend`, `_map`, `createMapEntry`, `fromPairs`, and `keysIn`!\n\nMost significantly, this pull request changes the type of the `path` parameter from (dot-separated) `String` to `[String]`, and updates the test suite accordingly.\n",
    "head_branch": "assoc-path",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e0a8dfb6b84f2425a70",
    "number": 874,
    "body": "makes PR branch `doc_mapaccum` obsolete\n",
    "head_branch": "mapaccum",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e0b8dfb6b84f2425a71",
    "number": 873,
    "body": "I propose a more explicit description of the expected return value of the iterator function. \n",
    "head_branch": "doc_mapaccum",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e0c8dfb6b84f2425a72",
    "number": 872,
    "body": "Currently this commit increases code duplication:\n- Unittests have been copied and modified from \"all\" since the unittests from \"all\" should also apply to allIndexed.\n",
    "head_branch": "allIndexed",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e0d8dfb6b84f2425a73",
    "number": 871,
    "body": "Related to #867\n",
    "head_branch": "deprecate-get",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e0e8dfb6b84f2425a74",
    "number": 870,
    "body": "Related to #834\n",
    "head_branch": "deprecate-install-to",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e0f8dfb6b84f2425a75",
    "number": 869,
    "body": "Related to #831\n",
    "head_branch": "deprecate-prop-of",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e108dfb6b84f2425a76",
    "number": 868,
    "body": "Related to #830\n",
    "head_branch": "deprecate-append-to",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4c8379bb764b06c34a2113cedefda1b4f4ba46d2 into 64337779303cf0421f8a0a787ded597a8acb011a"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7e118dfb6b84f2425a77",
    "number": 867,
    "body": "See #859\n",
    "head_branch": "get",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e128dfb6b84f2425a78",
    "number": 866,
    "body": "Closes #861\n",
    "head_branch": "zip-obj",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e138dfb6b84f2425a79",
    "number": 865,
    "body": "Well, I'll start very briefly with some good bits:\n- Everyone gets to write the same awesome Ramda code they've always been writing, only difference is now behind the scenes you'll find transducers for some operations.\n- We can get rid of `mapObj`, `mapObjIndexed` (all transducer callbacks will get `value`, `key` and `collection`), `filterIndexed`, etc.\n- It is very easy to add support for anything that follows the iterator protocol (Immutable.js already supported, need to have a discussion about how to generalize), streams, etc. (#695, #860, etc)\n- Transducer speed scales very well to large data structures.\n\nThe bad (one of the? the worst?) part: the code I think is quite difficult to follow. I _really_ wanted to find a way to properly visualize the code paths before submitting this PR, but I haven't come up with a great solution. However, I believe things are more or less working so that the core contributors can get an idea of what is going on, decide if you'd like to move in this direction, another direction with transducers, or somewhere else.\n\nYou can see some basic usage in `test/transduce.js`. I have simply been running\n\n`make && ./node_modules/.bin/mocha test/transduce.js`\n\nduring development. I've also included in `dist/` some examples that follow a couple different code paths (obviouly these would be deleted if any of this is ever merged). I've added a `debugger;` line so if you open up the html examples in a browser and have your console open it should break before it starts doing anything important and you can step through to get a better idea of what's happening. I've started building some UML-ish diagrams as well which I think will be pretty nice when they are done, but not sure when that will be.\n### Some notes in no particular order\n\nAs http://clojure.org/transducers tells us,\n\n> Composition of the transformer runs right-to-left but builds a transformation stack that runs left-to-right\n\nNow, if you've got pipes and compositions and some of their constituent functions are transducers and some are not, things could get really weird really fast. So all transducers in a **composition** are **piped** left-to-right so that they run right-to-left as you would expect in a composition (actually I've only implemented pipe as that is what I used in my work, we can just deprecate `compose`, right? Jokes! :stuck_out_tongue_winking_eye:  I just did not take the time to implement `compose` as it is simply the mirror of pipe). Let's look at a quick example here. Say you build a pipe\n\n`pipe(a, b, c, d, e, f)`\n\nwhere a-f are functions. If b, c and d are transducers, they will be composed when the pipe is built, so that when the pipe is actually run you still get a -> (b -> c -> d transducer stack) -> e -> f.\n\nI haven't used this PR to re-implement everything that might possibly be a transducer yet, just \n- `map` and `filter` cause everyone loves mapping and filtering\n- `take` to test terminating transduction\n- `partitionBy` and `mapcat` because we use those in our implementation\n\nNeed to implement curry anywhere since we are \"manually\" currying.\n\nThis also causes problems with `checkForMethod` as currently used (`filter` tests for this and fails), I've just removed that call while the PR is under review.\n\nI took out stream stuff as the default output collection (a write stream?) deserves some discussion.\n\nThere are some nice helper functions that are easy to implement like `into` (convert anything to anything else), `toList` (convert anything to a list), `toMap` (you get the idea) which I've not included.\n\nAlright, it's getting late, I'm sure I'm forgetting plenty and regardless there are more todos and questions, but I figured it's best to just get this up and let you guys take the lead from here.\n",
    "head_branch": "xf",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e148dfb6b84f2425a7a",
    "number": 864,
    "body": "Implement `dissocPath` function. I used the implementation of `assocPath` as a starting point and this is quite similar to it. `dissocPath` was mentioned in https://github.com/ramda/ramda/pull/781 and I decided to implement it because I needed it for my own project.\n",
    "head_branch": "dissoc-path",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 6c262b2c4d2b768c3eaf8ca0aa22d3153e9549e9 into baa6780ed43e6b08a9a97b5dac36024dbe5d4859"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7e158dfb6b84f2425a7b",
    "number": 862,
    "body": "Thanks to #836 we needn't test this for each function individually.\n",
    "head_branch": "test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e168dfb6b84f2425a7c",
    "number": 858,
    "body": "Closes #810\n",
    "head_branch": "github-link",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e178dfb6b84f2425a7d",
    "number": 857,
    "body": "These extensions are neglected and have never been fleshed out. If any of these are to live on in some form I suggest separate repositories. This seems to be working well for [ramda-fantasy](https://github.com/ramda/ramda-fantasy).\n",
    "head_branch": "extensions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e188dfb6b84f2425a7e",
    "number": 856,
    "body": "As discussed in #836\n",
    "head_branch": "invariants",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e198dfb6b84f2425a7f",
    "number": 855,
    "body": "This allows you to bind a lens to a particular object. Should the object come first? or last?\n",
    "head_branch": "lensOn",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e1a8dfb6b84f2425a80",
    "number": 853,
    "body": "As proposed in #844\n",
    "head_branch": "feature-deprecated",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e1b8dfb6b84f2425a81",
    "number": 852,
    "body": "For some reason, jsDelivr uses `.com` TLD for the actual website.\n",
    "head_branch": "jsdelivr-web-link",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e1c8dfb6b84f2425a82",
    "number": 851,
    "body": "",
    "head_branch": "style",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge e906f579e2e233583e6945964bf8f3dfc93aaa18 into edc589020324732c82db6b083fc942b35714814e"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e1c8dfb6b84f2425a83",
    "number": 850,
    "body": "Closes #847\n",
    "head_branch": "prop-or",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e1d8dfb6b84f2425a84",
    "number": 846,
    "body": "Looking at the example code, I couldn’t figure out how the result array came out:\n\n``` javascript\nR.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]\n```\n\n(I’ve read the guidelines for contributing, but I’m not creating a branch because the change is too small.)\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e1e8dfb6b84f2425a85",
    "number": 842,
    "body": "Fixes #841\n",
    "head_branch": "nth",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge fd286664fc027bb26ea1e321af224cbb4f335dc3 into 1b29fc5a0a89160ac31f087247d43f9f78150eda"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e1f8dfb6b84f2425a86",
    "number": 840,
    "body": "Fixes #839\n",
    "head_branch": "slice",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge bc7928dc6aa004c8533e4cf48df9927751de4b5c into e15def527769c37cd539eb33bb05c18436f69e30"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7e208dfb6b84f2425a87",
    "number": 838,
    "body": "",
    "head_branch": "add-repl",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5d5a68a42039a71dd701ffa5cc37443171f57ec7 into 59bf8fbbfd1dd8fa13966cc43911d898b26d1cf3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e218dfb6b84f2425a88",
    "number": 837,
    "body": "Was just reading the source and noticed this small glitch.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e228dfb6b84f2425a89",
    "number": 836,
    "body": "I set out to :curry: the few functions not yet curried and found myself tackling a larger issue.\n\nI'd like to guarantee consistent handling of arguments to Ramda functions. This pull request defines three invariants:\n1.  For every function `f` where `f.length > 0`, applying `f` to no arguments results in a TypeError being thrown. (For the record, I don't like this behaviour. I'd prefer to return a function equivalent to `f`.)\n2.  For every function `f` where `f.length > 0`, applying `f` to `R.__` gives a function equivalent to `f`.\n3.  For every function `f` where `f.length > 1`, applying `f` to any value other than `R.__` gives a function `g` with length `f.length - 1`. All three invariants hold for `g` and all \"descendants\" of `g`.\n",
    "head_branch": "invariants",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e238dfb6b84f2425a8a",
    "number": 834,
    "body": "I've never liked this function, as it promotes what I believe to be a bad practice, but I haven't felt compelled to remove it until now. #829 makes a good case for allowing modules to be required individually; #833 revealed that `R.installTo` does not (and perhaps cannot) work when used this way.\n\nLet's remove the one function in the library which breaks referential transparency.\n",
    "head_branch": "install-to",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e248dfb6b84f2425a8b",
    "number": 833,
    "body": "The build script goes to [great lengths](https://github.com/ramda/ramda/blob/v0.10.0/scripts/build#L76-L95) to ensure that the various modules can be safely concatenated to produce **dist/ramda.js**. It ensures for each `require('...')` that the variable name matches the last path component. It does not, however, ensure that the path component is valid. As a result, one could write…\n\n``` javascript\nvar _has = require('./does/not/exist/_has');\n```\n\nand the build script would not complain. **dist/ramda.js** would be valid, but requiring the module above would lead to an import error.\n\nThe solution to this problem is to run the test suite twice: once against **dist/ramda.js** and once against **index.js**, a temporary file which simply requires and exports each of the individual modules.\n",
    "head_branch": "require-paths",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 2ac762c50e49ca9338d97cd36bff17fdbc1a3bd4 into 817f861cef8d71e6bcb9801d6fb86f6eec8cb28c"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7e258dfb6b84f2425a8c",
    "number": 832,
    "body": "Surprisingly the `list` parameter to `R.head` and friends was once optional. This pull request updates each function's `@param` to match current behaviour.\n",
    "head_branch": "param",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 18db1532911c48f3fe4f54d6b916481da3b08a2c into 84f5d3da716de28a498ab9763c26e66200ffa393"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e268dfb6b84f2425a8d",
    "number": 831,
    "body": "This function is no longer necessary thanks to #819.\n\n``` javascript\n// before           // after\nR.propOf(obj)       R.prop(R.__, obj)\n```\n",
    "head_branch": "prop-of",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e278dfb6b84f2425a8e",
    "number": 830,
    "body": "These functions were added in #500 but are no longer necessary thanks to #819.\n\n``` javascript\n// before           // after\nR.appendTo(xs)      R.append(R.__, xs)\nR.prependTo(xs)     R.prepend(R.__, xs)\n```\n",
    "head_branch": "append-to",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e288dfb6b84f2425a8f",
    "number": 828,
    "body": "Sorry, should've realized you were building home page of website from README.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e298dfb6b84f2425a90",
    "number": 827,
    "body": "I discovered this bug while using `R.bind` to assert that `R.curry` and `R.curryN` preserve context.\n",
    "head_branch": "bind",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 384abb54bb9f8f751298876a2c92e4f45daee278 into 13e6a8d4da48a6620361ded598bef00f1477b43d"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7e2a8dfb6b84f2425a91",
    "number": 825,
    "body": "Hi,\nI've just seen in the docs that `zip` is typed as `a -> b -> [[a,b]]` while it should be `[a] -> [b] -> [[a,b]]`.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e2b8dfb6b84f2425a92",
    "number": 824,
    "body": "Different platforms sort `A.js B.js a.js b.js` differently.\n\nThis change has another benefit, which is ensuring that…\n\n```\n$ scripts/build -- src/{foo,bar}.js\n```\n\nand…\n\n```\n$ scripts/build -- src/{bar,foo}.js\n```\n\nproduce the same output.\n",
    "head_branch": "build",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e2c8dfb6b84f2425a93",
    "number": 823,
    "body": "See #816\n",
    "head_branch": "build",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 0129d5b85ebf29906c833af628b7271551820eec into 0e2941ea2ae79796529bedfca92e4711144c0c19"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e2d8dfb6b84f2425a94",
    "number": 822,
    "body": "It was noted over in [Gitter chat](https://gitter.im/ramda/ramda?at=54ded6531443703854e6b70d) that `commute` was broken.  The problem was that `ap` was not dispatching correctly.\n\n(Also included is an update to the latest `Maybe` from [ramda-fantasy](https://github.com/ramda/ramda-fantasy/blob/master/src/Maybe.js).  Having something other than lists to demonstrate those functions that should work with algebraic data types is very helpful.)\n",
    "head_branch": "fix-commute",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e2e8dfb6b84f2425a95",
    "number": 820,
    "body": "Hi there,\n\nI want to propose to add this badge to the README to show off inline-documentation: [![Inline docs](http://inch-ci.org/github/ramda/ramda.svg)](http://inch-ci.org/github/ramda/ramda)\n\nThe badge links to [Inch CI](http://inch-ci.org) and shows an evaluation by [InchJS](http://trivelop.de/inchjs), a project that tries to raise the visibility of inline-docs. Besides testing and other coverage, documenting your code is often neglected although it is a very engaging part of Open Source.\n\nSo far over 500 **Ruby** projects are sporting these badges to raise awareness for the importance of inline-docs and to show potential contributors that they can expect a certain level of code documentation when they dive into your project's code and motivate them to eventually document their own. I would really like to do the same for the **JavaScript** community and roll out support for JS over the coming weeks (early adopters are [forever](https://github.com/foreverjs/forever), [node-sass](https://github.com/sass/node-sass) and [when](https://github.com/cujojs/when)).\n\nAlthough this is \"only\" a passion project, I really would like to hear your thoughts, critique and suggestions. Your status page is http://inch-ci.org/github/ramda/ramda\n\nWhat do you think?\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e2f8dfb6b84f2425a96",
    "number": 819,
    "body": "See #817\n\nChanges:\n- add internal `_curryN` function, similar to `op` but capable of currying functions of arbitrary arity;\n- define `curryN` as `_curryN(2, _curryN)`;\n- update `_checkForMethod` to return a function with the appropriate arity;\n- replace occurrences of `_curry2`, `_curry3`, and `op` with `curry`; and\n- remove `_curry2`, `_curry3`, and `op`.\n\nReasons to like these changes:\n- it will put an end to ad hoc pull requests adding \"op-style\" currying to one or two functions at a time;\n- it improves consistency✝;\n- partial application is not _only_ useful for binary functions;\n- it removes the distinction between \"operator\" functions and other functions, simplifying Ramda's mental model and making `R.__` easier to explain; and\n- it further promotes partial application, Ramda's key feature.\n\nReasons to dislike these changes:\n- it's a breaking change✝✝; and\n- it increases the amount of work required to apply a curried function.\n\n✝ Currently commutative functions do not support `R.__`, as it's not useful. For consistency, though, they should. One could then say that `R.curry(f)(R.__, b)(a)` is equivalent to `f(a, b)` for any binary function `f`, in the same way one can currently say that `R.curry(f)(a)(b)` is equivalent to `f(a, b)` for any binary function `f`. (All the discussion in Fantasy Land seems to have got me thinking in terms of laws and whatnot.)\n\n✝✝ Currently `R.divide(R.__)` is equivalent to `R.flip(R.divide)`, which has always seemed to me like too much magic. I doubt anyone is using this form, as the `R.flip` version is much clearer.\n",
    "head_branch": "placeholder",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e308dfb6b84f2425a97",
    "number": 816,
    "body": "",
    "head_branch": "cleandir",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 0cdfebc0a22a60de86d708ab170ddc1bd8e6827a into e5f3ebd6d27f84f7225cf862b5e0df35f79e82cd"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e318dfb6b84f2425a98",
    "number": 815,
    "body": "Proposal: though it’s a slight pain in a fast-moving project, it would be nice to see at least breaking changes at a glance.\n\nThis first draft includes changes from 0.9.1 to 0.10.0.\n",
    "head_branch": "changelog",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e318dfb6b84f2425a99",
    "number": 814,
    "body": "This pull request updates Ramda's Ramda dependency. :)\n",
    "head_branch": "ramda",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 666ae4ac000e0e8a1eb2c3a2b129d01bd0ead623 into a9535ea85f1d7aafe6d8eb03d64ca2a7728bd749"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e328dfb6b84f2425a9a",
    "number": 813,
    "body": "",
    "head_branch": "has",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e338dfb6b84f2425a9b",
    "number": 811,
    "body": "I think **/src/** should be excluded as well. We needn't provide the source files in addition to the combined file.\n",
    "head_branch": "publish",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 40c6a0ed45af45747d3d0833feb0bfb226f4c7ea into 2588c4de97fd594d27d44fcaad8d73d2f936414b"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e348dfb6b84f2425a9c",
    "number": 809,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge edb093c8c60c3cf67b5c1d635696f1fe9ec18a2e into 473fa879b6d88dde502e23a27f57ed025b736cb4"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e358dfb6b84f2425a9d",
    "number": 808,
    "body": "corrected bower.json  main path so that build tool auto-injectors (wiredep, main-bower-files, etc.) can find and include ramda.js\n",
    "head_branch": "config/bower",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4a034a7dc9a73fa414c3cdd907c6ec9f03fdcd1b into b9b5b54dd0f20e779334cd2d692a696cda6e0da8"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e368dfb6b84f2425a9e",
    "number": 807,
    "body": "Adds a description of how to make a partial build of Ramda, closes https://github.com/ramda/ramda/issues/806\n\nI will create a separate PR for the docs repo as it's in a different repo. Note I've also included the /docs fix here.\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e378dfb6b84f2425a9f",
    "number": 805,
    "body": "The API docs link pointed to the site and not the docs directly. Figured I'd try to save future visitors the extra click :)\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e388dfb6b84f2425aa0",
    "number": 804,
    "body": "`make clean; make` doesn't rebuild ramda.min.js so `git status` marks\nit as deleted.\n\n@davidchambers says ramda.min.js is only updated when a new version is\npublished, so let's not remove it on clean.\n",
    "head_branch": "nicolasv/make-clean-min",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 3913a8c874074c2f1bb07ab9c7cf4ade39e4f1ff into c330e91821be447e0c2e8aa848f785649378b607"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e398dfb6b84f2425aa1",
    "number": 799,
    "body": "This is nice sugar. Assume I have a value `m` of type `Maybe String`, and I wish to perform the following transformation:\n\n```\nNothing -> Nothing\nJust '' -> Nothing\nJust a  -> Just a\n```\n\nWith Ramda I could write:\n\n``` javascript\nR.filter(R.not(R.isEmpty), m)\n```\n\nWhat I'd really like to write, though, is:\n\n``` javascript\nR.reject(R.isEmpty, m)\n```\n\nThis change will enable me (and everyone else) to do so. :)\n",
    "head_branch": "dc-reject",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e3a8dfb6b84f2425aa2",
    "number": 796,
    "body": "Closes #727\n",
    "head_branch": "replace",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e3b8dfb6b84f2425aa3",
    "number": 795,
    "body": "I also made some minor formatting changes in **invert.js** and **invertObj.js**.\n",
    "head_branch": "invert",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge bfe7566399292cf96812e0b5bfef94c48896602c into 0243083026f2f487ddda744db0971893c2020de2"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7e3c8dfb6b84f2425aa4",
    "number": 794,
    "body": "See https://github.com/ramda/ramda/pull/785#issuecomment-73547764 and https://github.com/ramda/ramda/pull/787#issuecomment-73789964\n",
    "head_branch": "memoize",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e3d8dfb6b84f2425aa5",
    "number": 790,
    "body": "As discovered in #780, `R.invert(1)` and friends all evaluate to `{}`. Inexplicably `assert.throws({})` is not a type error, so these tests test nothing. Were these tests correctly written they would fail as these expressions do _not_ throw when evaluated. A comedy of errors. :)\n",
    "head_branch": "invert",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e3e8dfb6b84f2425aa6",
    "number": 789,
    "body": "/cc @charleswli\n",
    "head_branch": "sort-by",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e3f8dfb6b84f2425aa7",
    "number": 788,
    "body": "A function that takes two arguments and returns the first argument if\nthe second one is null/undefined. Otherwize the second one is returned.\n\nBasically a functional version of\n\n```\nvar list = someVariable || [];\n```\n",
    "head_branch": "default-value",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e408dfb6b84f2425aa8",
    "number": 787,
    "body": "Fixes #791\n\nWe _could_ add extra logic to handle caching of nullary functions, but this doesn't seem useful enough to justify the increase in code complexity.\n",
    "head_branch": "memoize",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e418dfb6b84f2425aa9",
    "number": 786,
    "body": "The _depricationWarning function provides an easy way to show a\ndeprication message around a function that has been renamed. By default\nit prints the name of the old function and what it has been renamed to.\nIt also provides the possibility to add an additional message.\n\n_depricationWarning makes sure that it only prints the error message\nonce per depricated function.\n",
    "head_branch": "deprication-warning",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e428dfb6b84f2425aaa",
    "number": 785,
    "body": "Supersedes #776\n",
    "head_branch": "memoize",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge a8ee5c2b11e19c5deb6c41ce1a35282aec194d08 into 0670286db78a592fcdcd31b5213598605ae2e9da"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7e438dfb6b84f2425aab",
    "number": 784,
    "body": "@buzzdecafe and I discussed this change and decided it's a good idea for two reasons:\n- it's one of the few (or perhaps the only) Ramda function with an optional argument; and\n- it's unnecessary, since `R.of(42, Id)` can be written as `Id.of(42)`.\n",
    "head_branch": "of",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e448dfb6b84f2425aac",
    "number": 783,
    "body": "See https://github.com/ramda/ramda/pull/778#issuecomment-73318422\n",
    "head_branch": "merge",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5c038ff5a0317322e513c451848d0801ab910153 into 5a64ff51d46aff5544d8bc1f0805cebfaa983707"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e458dfb6b84f2425aad",
    "number": 782,
    "body": "Somewhere along the way, `lift` got broken.  This is just a quick fix and the addition of some regression tests.\n\nTo do this, though, I added the `Maybe` type from ramda-fantasy to `test/shared`.\n\nObviously my git-fu is still a bit lacking as the commit messages are a bit screwed up.\n",
    "head_branch": "lift-update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge c67eccdfb69f6208a842bbea88b5263d73640a39 into 5a64ff51d46aff5544d8bc1f0805cebfaa983707"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7e468dfb6b84f2425aae",
    "number": 781,
    "body": "The inverse of `R.assoc`; very similar to `R.omit`. See [`clojure.core/dissoc`](http://clojuredocs.org/clojure.core/dissoc).\n",
    "head_branch": "dissoc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 9f144ba961ea58feb562583b194c44c5d0177c2d into 68e35583022c6beabffcea6741d9a9b7e03fc7cd"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7e478dfb6b84f2425aaf",
    "number": 780,
    "body": "Do we want to support io.js? A few tests are failing.\n",
    "head_branch": "feature-iojs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 2221bb68bac620da558b2273bdc9e4928297263b into 3c9d2e587992af23003cb06b426773489e9bf846"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e488dfb6b84f2425ab0",
    "number": 779,
    "body": "",
    "head_branch": "feature-travis-ci-matrix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e498dfb6b84f2425ab1",
    "number": 778,
    "body": "Fixes https://github.com/ramda/ramda/issues/777\n",
    "head_branch": "bp-add-blend",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 147a924d0a2aacb99ba87521de1f0ecff6231586 into ab40b6548c8529faac4dc6597652a648b8c2be55"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7e4a8dfb6b84f2425ab2",
    "number": 776,
    "body": "Falsy values (e.g. null, 0, empty string) were not being memoized by memoize().\nAdditionally, there was an unnecessary conversion of arguments to an array.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e4a8dfb6b84f2425ab3",
    "number": 775,
    "body": "Currently the project mixes three styles:\n- lower-case prefix (e.g. `R.pPipe`)\n- lower-case suffix (e.g. `R.foldl`)\n- upper-case suffix (e.g. `R.liftN`)\n",
    "head_branch": "suffixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e4b8dfb6b84f2425ab4",
    "number": 771,
    "body": "supersedes #766 \n",
    "head_branch": "currycurry",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e4c8dfb6b84f2425ab5",
    "number": 769,
    "body": "",
    "head_branch": "reduce-redux",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e4d8dfb6b84f2425ab6",
    "number": 768,
    "body": "This allows to filter documentation by category, either by clicking on the category label or typing in the name of a category.\n\nMy JS beautifier sets tabs to 2 spaces for JS, which is generally the convention I see now.\n",
    "head_branch": "docs_filter_categories",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge cf04239d1de5636ac284f0d14d7279dd660952a0 into 9762a7264cc8fc1f8e07b0e10d757c36ed98f748"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e4e8dfb6b84f2425ab7",
    "number": 766,
    "body": "",
    "head_branch": "curry0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e4f8dfb6b84f2425ab8",
    "number": 764,
    "body": "",
    "head_branch": "forkme",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e508dfb6b84f2425ab9",
    "number": 763,
    "body": "Adds tasks for grunt to enable easier editing of documentation. 'grunt serve' starts local server, opens browser, and watches/reloads on file changes. Previous PR had formatting and Travis issues.\n",
    "head_branch": "grunt_tasks_documentation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 08d014ed394cf403098521b660a8fe8b3b9e54ae into 94e75ed9da353a1ec25aced0af358fa2b3806255"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e518dfb6b84f2425aba",
    "number": 762,
    "body": "Since the documentation changed, it has been harder to find what I'm looking for in Ramda. I was thinking about updating the documentation, but noticed that the Gruntfile is missing watch and expess/connect. It's saves a lot of time to have the browser reloading automatically as changes are made to the html templates and js files. \n\n'grunt serve' now builds the documentation (github pages), then watches for changes. If it sees changes, the server reloads the page automatically. Standard web-dev stuff. Hope it helps!\n",
    "head_branch": "serve_and_watch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e528dfb6b84f2425abb",
    "number": 761,
    "body": "",
    "head_branch": "construct",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e538dfb6b84f2425abc",
    "number": 760,
    "body": "",
    "head_branch": "prop",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e548dfb6b84f2425abd",
    "number": 759,
    "body": "Supersedes #758\n\nI simplified the implementation while I was at it. :)\n",
    "head_branch": "count-by",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 565452c1e1bfdbc821b0fcc1658a9c3e2c79118b into a3a28dccca4464977ef484081a6a85f84d134024"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7e558dfb6b84f2425abe",
    "number": 758,
    "body": "Current implementation doesn't handle reserved words in prototype\n\n> c(function (e) { return e; }, ['abc', 'toString'])\n> { abc: 1, toString: 'function toString() { [native code] }1' }\n\nProposed change can handle that\nc(function (e) { return e; }, ['abc', 'toString'])\n{ abc: 1, toString: 1 }\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e568dfb6b84f2425abf",
    "number": 755,
    "body": "This should prevent @buzzdecafe from pulling his hair out. :)\n",
    "head_branch": "build",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 788329367960e68ca018fb431eb0eb39255b435f into 7601a82c01f64c07b2faea23dbda52ba967da62f"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e578dfb6b84f2425ac0",
    "number": 752,
    "body": "I noticed after publishing 0.9.0 that the header of **ramda.js** still mentions v0.8.0. The reason for this is that none of the file's dependencies had changed since the file was last built, so Make did not rebuild the file.\n",
    "head_branch": "prepublish",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e588dfb6b84f2425ac1",
    "number": 751,
    "body": "Supersedes #744\n",
    "head_branch": "ifelse",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge c13134c195475bec917c36c1040b8b1a212c491c into 9ccfdc6c20bf931d82b7eadc17589cdceddb1578"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e598dfb6b84f2425ac2",
    "number": 750,
    "body": "This is the alternative to #746. I see no reason to provide `R.__` if its value is and will always be `undefined`. `R.__` will be `undefined` even _after_ this change. ;)\n",
    "head_branch": "undefined",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e598dfb6b84f2425ac3",
    "number": 749,
    "body": "Like #698.  Works in `grunt jshint`.  Does this fail in `make`?\n",
    "head_branch": "clean-arity",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e5a8dfb6b84f2425ac4",
    "number": 748,
    "body": "This clarifies the documentation to indicate that `R.or` and `R.and` operate just like Javascript `||` and `&&`.\n",
    "head_branch": "update-or-and-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e5b8dfb6b84f2425ac5",
    "number": 746,
    "body": "I've never been comfortable with the value of `R.__` being `undefined`. Why \"define\" it at all, in this case? I like defining a true sentinel and requiring users to reference it directly or define a convenient :alien::\n\n``` javascript\nvar _ = R.__;\nvar lessThanTen = R.lt(_, 10);\n```\n",
    "head_branch": "placeholder",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e5c8dfb6b84f2425ac6",
    "number": 745,
    "body": "Fixes #743.\n",
    "head_branch": "feature-mixin-op-currying",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e5d8dfb6b84f2425ac7",
    "number": 744,
    "body": "Docs were misusing the word \"predicate\". I've updated them for clarity.\n",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e5e8dfb6b84f2425ac8",
    "number": 741,
    "body": "Fixes #725.\n\n(Let's see if it works this time!)\n",
    "head_branch": "curry-wrap",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 61c4f7d0da9191cd6f07f62408749b1dba6c784f into 875c201f014883d18408c89808330a56ec386634"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7e5f8dfb6b84f2425ac9",
    "number": 740,
    "body": "Fixes #725.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e608dfb6b84f2425aca",
    "number": 739,
    "body": "",
    "head_branch": "jscs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b00a6dbaefb9974a81b1d0b014e1f7f18177e8fd into fdc2c97d2e838cc6c78490e1711be993b17fd079"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e618dfb6b84f2425acb",
    "number": 737,
    "body": "I'm new to Ramda but this should solve #736.\n",
    "head_branch": "compose-should-curry",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e628dfb6b84f2425acc",
    "number": 735,
    "body": "This pull request replaces our custom doctest runner with a dependency on [doctest](https://github.com/davidchambers/doctest), and tweaks the formatting of the doctests accordingly.\n\nBefore:\n\n```\n2 * 3 * 7  //=> 42\n```\n\nAfter:\n\n```\n> 2 * 3 * 7\n42\n```\n",
    "head_branch": "doctest",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e638dfb6b84f2425acd",
    "number": 734,
    "body": "I noticed this while integrating [doctest](https://github.com/davidchambers/doctest).\n",
    "head_branch": "comments",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 9ba4bfcd873c1a623e99176b2f8867f26c353cde into 6bab0aaf021f13b9bef7e7a365931c1635c2b268"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7e648dfb6b84f2425ace",
    "number": 733,
    "body": "As suggested by @aaditmshah in https://github.com/ramda/ramda/issues/732#issuecomment-70383334\n",
    "head_branch": "always",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e658dfb6b84f2425acf",
    "number": 730,
    "body": "Related to #724, almost a direct copy of https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is#Polyfill\n",
    "head_branch": "eqToIs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 92ce75bba24cf4ad6b1b8f2a6563bc846c55fc1f into 06ae1bf1e2a43ca3d5109850f3a272d0c9bc15b6"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7e668dfb6b84f2425ad0",
    "number": 726,
    "body": "reason: We want to warn about typed array usage since not all browsers we support have typed arrays implemented.\n",
    "head_branch": "revert-723-jshint_typed",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 2f4a877f68ef86df350ac4b4f1de8dbe718c398e into e6d914874b702e5cefc258a0e3eac8954d00385f"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e678dfb6b84f2425ad1",
    "number": 723,
    "body": "I was trying to write some tests using typed arrays but jshint was complaining that it didn't recognize the typed array constructors.\n\nSee http://jshint.com/docs/options/#typed for the 'typed' option documentation\n",
    "head_branch": "jshint_typed",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 332a780c402ace682d1a9596df5bc05b04dcfeec into 82df51c8640bbe11799356221e2fc4c13b4a7019"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e688dfb6b84f2425ad2",
    "number": 721,
    "body": "Closes #676\n\nSee also #627/#633\n",
    "head_branch": "build",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e698dfb6b84f2425ad3",
    "number": 720,
    "body": "I worked out why Vim was using spaces for indentation in the makefile!\n",
    "head_branch": "editorconfig",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge aaedce47319d231b102904d77e125cda0b18a200 into ccbda04858a375be3b1ab8b5ab7ef5f51b18e927"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e6a8dfb6b84f2425ad4",
    "number": 719,
    "body": "",
    "head_branch": "readme-tweaks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 85c3667fb72f1eca4f429ce3841c22c41bfec724 into 604d967194f398727888226eaf01ffd4406bd929"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e6b8dfb6b84f2425ad5",
    "number": 718,
    "body": "Discussion at (#699)\n",
    "head_branch": "eqDeep",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e6c8dfb6b84f2425ad6",
    "number": 717,
    "body": "Curries attached lens `map` and `set` functions.\n",
    "head_branch": "lens-curry-map",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ea8a765981624441594d3270af521f254f077818 into b8fdbe53cd86712d31b2d175fde13d2e07b876ae"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e6c8dfb6b84f2425ad7",
    "number": 716,
    "body": "Squashed into single commit\n\nRewritten ramda introduction\nAdded What's Different section\nRenamed project ramda to ramda\nThrew out eweda section\nThrew out structure section\nMonospace for function names\nfixed Lo-Dash spelling\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7e11bb601f5e62501f33e3e100b78c6ab9d68615 into e0cc6cbbc46f52894e2e43d1e798e8703f5d80ed"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e6d8dfb6b84f2425ad8",
    "number": 712,
    "body": "I tried to write an introduction that should be understandable by average javascript programmers, without functional programming knowledge. See issue #711. The \"Philosophy\" section is still intact for the advanced mind :smile: \nI explicitly like to compare LoDash and Underscore directly, since they are what most folks know. Remember that LoDash compared itself vs Underscore and that helped tremendously to understand it's Raison d'être.\n\nWhile\n`A practical functional library for Javascript programmers.` is a good explanation, it doesn't explain the difference of Ramda vs LoDash or Underscore in one sentence.\n\nFeel free to edit as pleased :+1: \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e6e8dfb6b84f2425ad9",
    "number": 709,
    "body": "### Questions\n- How should categories work?\n### Todo\n- Add favicon\n- Squash garbage commits\n- Better mobile view\n- Stop stripping leading whitespace from code examples\n  - This means we need to clean up the `@examples` in JSDoc comments\n",
    "head_branch": "new-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 552251ff162a08ae816c27908f781ddfacefdaf0 into 231d069c23122d50763707163e0aa06b1c1884b1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7e6f8dfb6b84f2425ada",
    "number": 706,
    "body": "Includes code from PR #705 \n",
    "head_branch": "issues/704",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 319a2c373bc954b616dec01e4d312d6c8bfa7447 into 3776bfd95c634cf266a09cd9f395ead2c80f6d2e"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e708dfb6b84f2425adb",
    "number": 705,
    "body": "",
    "head_branch": "issues/703",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e718dfb6b84f2425adc",
    "number": 698,
    "body": "A couple of people have asked why we use `void` here. Let's avoid `void` to avoid confusion.\n",
    "head_branch": "lint",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e728dfb6b84f2425add",
    "number": 696,
    "body": "",
    "head_branch": "propOr-doc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 82ce86f7a597d7501d3e845c242379207186fb24 into 750a6a7b2b080e9c1cb138fca0b4a3aeb50317c6"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7e738dfb6b84f2425ade",
    "number": 694,
    "body": "modulus is [well defined for negative integers](http://en.wikipedia.org/wiki/Modulo_operation#Remainder_calculation_for_the_modulo_operation). This handles it as specced. /cc https://github.com/kchapelier/node-mathp/issues/2\n\nSee http://research.microsoft.com/en-us/um/people/daan/download/papers/divmodnote.pdf for proof and implementation details\n\nThe examples have to be updated, let me know if this is going through and I'll do so\n",
    "head_branch": "mmod",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e748dfb6b84f2425adf",
    "number": 692,
    "body": "",
    "head_branch": "lint",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5781cd90bf2a5eea307869ed1f5ba42f8b06780d into 0f9a5ac66a22776bb306f7f94fa2d7932322f7e9"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e758dfb6b84f2425ae0",
    "number": 691,
    "body": "",
    "head_branch": "more-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ba856ee02410ee991ebd07ace80cb7fe859d9791 into baaa57790e496419ee8b70fe77616feb5ca74d58"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e768dfb6b84f2425ae1",
    "number": 689,
    "body": "",
    "head_branch": "docfixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e778dfb6b84f2425ae2",
    "number": 688,
    "body": "The PNG is blurry on Retina displays.\n",
    "head_branch": "badge",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e788dfb6b84f2425ae3",
    "number": 687,
    "body": "",
    "head_branch": "more-ops",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge de84c21a4dbcaa01fb520b7a07edd95077ded260 into 8bbf7bb408c633b13db4e1eeed8ae530647a012e"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7e798dfb6b84f2425ae4",
    "number": 679,
    "body": "The \"N\" is unnecessary now that we have just one invoker function.\n",
    "head_branch": "invoker",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 72be3fc1ddd27c1e1915285f5260ebe0731eb554 into de7d4c60fc468e1a631929219dde2d1b180dd0ca"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7e7a8dfb6b84f2425ae5",
    "number": 678,
    "body": "1. Changed reference from foldr to foldl in foldr.js's comments.\n2. Added an explanation of internal to CONTRIBUTE.md\n   .\n\nReviewed by @tolmasky.\n",
    "head_branch": "docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e7b8dfb6b84f2425ae6",
    "number": 675,
    "body": "Reviewed by @tolmasky.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f48b43106c3f7b9d65f5b11ab59d2926bf02c744 into 8df55dc8bd33ce2d935e4033fc8a2ac55dbe702c"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7e7c8dfb6b84f2425ae7",
    "number": 674,
    "body": "1.0 is probably six months away. Between now and then we must agree on the name and type of each existing function. After 1.0 we're free to change implementations, and to add new functions in minor releases, but renaming functions will be off the table until 2.0. Thus, I'm keen to continue initiating naming discussions.\n\nI consider this is a slight improvement. Shortening these names does not introduce ambiguity, and all else being equal I prefer shorter names.\n",
    "head_branch": "upper-lower",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7f913221232101a0d8cf36ae428d11aec377e8d3 into 4a112706a20bbd74501f6ef0e91ccdd6602fa2e5"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e7d8dfb6b84f2425ae8",
    "number": 673,
    "body": "Currently we have three clone functions which do slightly different things. `R.cloneDeep` is strictly more capable than `R.clone`, so `R.clone` can be removed. The only reason to keep `R.cloneObj` is to support shallow cloning. In my experience this is rarely desirable.\n\nThis pull request:\n1.  removes `R.clone` and accompanying tests;\n2.  removes `R.cloneObj` and accompanying tests; and\n3.  renames `R.cloneDeep` `R.clone`.\n\nDo you agree one clone function is sufficient?\n",
    "head_branch": "clone",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e7e8dfb6b84f2425ae9",
    "number": 672,
    "body": "I set out to rename a couple of functions and ended up spending a long time on Wikipedia, GitHub, and elsewhere wrapping my head around these surprisingly tricky functions/operators.\n#### mod\n\n**Clojure:**\n\n```\nuser=> (mod 42 5)\n2\nuser=> (mod -42 5)\n3\nuser=> (mod 42 -5)\n-3\nuser=> (mod -42 -5)\n-2\n```\n\n**Haskell:**\n\n```\nPrelude> 42 `mod` 5\n2\nPrelude> (-42) `mod` 5\n3\nPrelude> 42 `mod` (-5)\n-3\nPrelude> (-42) `mod` (-5)\n-2\n```\n\n**Ramda:**\n\n```\n> R.mod(42, 5)\n2\n> R.mod(-42, 5)\n3\n> R.mod(42, -5)\n-3\n> R.mod(-42, -5)\n-2\n```\n#### rem\n\n**Clojure:**\n\n```\nuser=> (rem 42 5)\n2\nuser=> (rem -42 5)\n-2\nuser=> (rem 42 -5)\n2\nuser=> (rem -42 -5)\n-2\n```\n\n**Haskell:**\n\n```\nPrelude> 42 `rem` 5\n2\nPrelude> (-42) `rem` 5\n-2\nPrelude> 42 `rem` (-5)\n2\nPrelude> (-42) `rem` (-5)\n-2\n```\n\n**Ramda:**\n\n```\n> R.rem(42, 5)\n2\n> R.rem(-42, 5)\n-2\n> R.rem(42, -5)\n2\n> R.rem(-42, -5)\n-2\n```\n",
    "head_branch": "math",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e7f8dfb6b84f2425aea",
    "number": 670,
    "body": "This function is named `complement` in Clojure. Renaming this function will allow its current name to be given to the logical negation function:\n\n``` javascript\nR.not = function not(x) { return !x; };\n```\n",
    "head_branch": "complement",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e808dfb6b84f2425aeb",
    "number": 669,
    "body": "",
    "head_branch": "rm-types",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 063f118b16d7e2f1cbd124e7eaf0f37ff41ee27f into 31e9262eded561ac2b507f0018bfe08fdc7a7a9f"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7e808dfb6b84f2425aec",
    "number": 668,
    "body": "Other possible names: `R.invert` ([taken](https://github.com/ramda/ramda/pull/562)), `R.inverseOf`.\n",
    "head_branch": "negate",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 42b52743670957bba71da3314526f07c67ffd518 into ee40efb0f9899ecaff02c6039d3d9d49bb512cb5"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7e818dfb6b84f2425aed",
    "number": 667,
    "body": "Simple, but useful.\n",
    "head_branch": "inc-dec",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 6d86e6d7592779de66fcc1185adcd61486f4b4c0 into 08d5530d87683822aa959b29b8c32a1544d3810e"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7e828dfb6b84f2425aee",
    "number": 666,
    "body": "",
    "head_branch": "nil",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e838dfb6b84f2425aef",
    "number": 665,
    "body": "# evolve :: { k: (v → v) } → { k: v } → { k: v }\n\nFor the proposal, see: ramda/ramda#648\n",
    "head_branch": "evolve",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge da58f9c3124b877ade7ca84566366fd5fb5cb59e into de27584ade56c863a7fdefab6198773c43f1ee78"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7e848dfb6b84f2425af0",
    "number": 664,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge e290bcab3c532332e777d415eb3dc9078f04b29c into a02fac2e3873eca55ba6d3417d2cfc45261081ce"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e858dfb6b84f2425af1",
    "number": 663,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 02c384cf5273817c63e40be1d7ee1f7f5926b9e0 into fa65eab98805adda42dfbed8559151a498645a9f"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e868dfb6b84f2425af2",
    "number": 660,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge a3e6a4d18cf66a022bbeba3dc6d9f07659eed793 into dda83a61e578aba355139ca2d965c5808d0a3eb1"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e878dfb6b84f2425af3",
    "number": 659,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e888dfb6b84f2425af4",
    "number": 658,
    "body": "Closes #641\n\n@buzzdecafe, committing **bundle.js** is going to add a lot of noise to every pull request. This would be a four-line change without the changes to that file. :\\\n",
    "head_branch": "prop-or",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e898dfb6b84f2425af5",
    "number": 657,
    "body": "See #647\n",
    "head_branch": "build",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1fffdf4c59829c53ed261efa86d8f56c9af8ae2a into e809ce307506c0afbf1c8c8bfb6f8398534c725b"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e8a8dfb6b84f2425af6",
    "number": 656,
    "body": "see #625 \n",
    "head_branch": "foldObj2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e8b8dfb6b84f2425af7",
    "number": 655,
    "body": "still fails for IE < 9 :scream:\n",
    "head_branch": "gentest",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e8c8dfb6b84f2425af8",
    "number": 654,
    "body": "",
    "head_branch": "n-ary",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 8042acb371630c21022b643a6a92e7ac3773c943 into 3c56e3e92224a2f7c387756e7fcab8411d55455e"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e8d8dfb6b84f2425af9",
    "number": 652,
    "body": "",
    "head_branch": "arity",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge e1f41d538e982ad5d6ccd379a3eae66ff36630bf into 2ffaac5b9c0bbba5969a3e0c8c4a2a2096749194"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e8e8dfb6b84f2425afa",
    "number": 649,
    "body": "I would like to discuss these TODOs. They fall into the following categories:\n- things we once wanted to do but no longer want to do (remove these);\n- things we once wanted to do and still want to do (create issues for these); and\n- questions (discuss these).\n",
    "head_branch": "todo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e8f8dfb6b84f2425afb",
    "number": 647,
    "body": "Just a path-separator tweak\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge e95155e8c7e974e0f6d401be50bccc2e67028343 into 20a0de448afb40c1d450edb37b15ce8354e295f9"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e908dfb6b84f2425afc",
    "number": 646,
    "body": "Resubmitting after #618\n\nOnly real thing of note I think is that `dox` can no longer determine function names from the comments/source code, as they are no longer there. Easy to get around by using file names. And actually as I'm writing this comment it occurred to me `scripts/build` must do something similar and I see\n\n```\nvar filenameToIdentifier =\n    R.pipe(R.split('/'),\n           R.last,\n           R.split('.'),\n           R.head);\n```\n\n. My version was\n\n`path.match(/(\\w+)\\.js$/)[1]`\n\nha! I still have a long way to go to get used to this functional stuff :) I was thinking it might make sense to add the function name to all the `@func` tags we have, but if the build script uses the filenames maybe this is not necessary. Also should we add `scripts/common` or what have you for shared functionality like this?\n",
    "head_branch": "doc-parser",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e918dfb6b84f2425afd",
    "number": 645,
    "body": "Suggested soundtrack for reviewing this pull request: Radiohead's _Everything in Its Right Place_.\n",
    "head_branch": "test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 01bc5a8b5a42d1a4b5febee0e1f1061b595b3315 into 2a9fc02be8260a64192cfdf04845ca1a82b6c1ee"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e928dfb6b84f2425afe",
    "number": 644,
    "body": "Also added Test for curried curryN.\n",
    "head_branch": "curry2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 395ef11d878b40eb9033745257d93f29cfaccd20 into e316fcf24be728fe6a49a77f2e9cc16dd20dc472"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7e938dfb6b84f2425aff",
    "number": 643,
    "body": "Solves ramda/ramda#642\n",
    "head_branch": "currycurry",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e948dfb6b84f2425b00",
    "number": 639,
    "body": "**I'd like to remove these functions.** If others agree, I'll close this pull request and open a new one which does exactly that.\n\nIf we're to keep these functions I'd like to stop treating them specially. Renaming them will simplify the build script in #618.\n",
    "head_branch": "idx",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e958dfb6b84f2425b01",
    "number": 638,
    "body": "`R.nthArg` is a much better name for this function. I've also implemented the function in terms of `nth` to support negative offsets.\n",
    "head_branch": "nth-arg",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e968dfb6b84f2425b02",
    "number": 636,
    "body": "With the exception of the `.idx` functions, this is the last remaining \"namespaced\" function. I see no reason for it to be a second-class citizen.\n",
    "head_branch": "insert-all",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 0098a97d57a98950c9703d272fcba01e38bdd675 into b3b4fa9194c6cd8912a90484a08da21810eb660f"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e978dfb6b84f2425b03",
    "number": 635,
    "body": "I imagine these functions were added because [`Array.prototype.indexOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf) takes an optional second argument. I haven't used either function, and even when they're useful they're not necessary (though they avoid array cloning).\n\nIf we decide to _keep_ these functions, let's make them top-level functions.\n",
    "head_branch": "index-of-from",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 8088d754c31454fc494ab523f78ad815cae8c0aa into 16a7f7fd3a6b70f64a547e6751acb3506c5029c9"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7e988dfb6b84f2425b04",
    "number": 634,
    "body": "This makes our names more internally consistent:\n\n```\nR.any   R.anyPass\nR.all   R.allPass\n```\n\nLet's merge this so I can incorporate these changes into #618. :)\n",
    "head_branch": "any-all",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge a8c0d8588b2b37b9773fe0e59cc71e0e44f8af52 into 6d1390c65e36d54661958e40a2a239ed1f7f8138"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7e988dfb6b84f2425b05",
    "number": 633,
    "body": "https://github.com/ramda/ramda/pull/627#issuecomment-65405343\nUsing web GitHub ATM.\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 17d740ef4ce2ca0efa2c7cd81300f235bc406af5 into c71b658539a2a402421827fe24359d3258fb22b5"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e998dfb6b84f2425b06",
    "number": 630,
    "body": "",
    "head_branch": "drop",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge bbec9a538a3c23bb48c5eef4a20e7d89ef90a1c4 into 56a5d4f02eec145b68e1b152be2548d7e9b81980"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7e9b8dfb6b84f2425b07",
    "number": 629,
    "body": "As discussed in #626\n",
    "head_branch": "repeat",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e9b8dfb6b84f2425b08",
    "number": 627,
    "body": "Good you add a comment already, [some like to see copyright & license](https://github.com/tomByrer/web-engeneering-notes/blob/master/banner-tips.md#reasoning)\nUp to you!\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e9c8dfb6b84f2425b09",
    "number": 626,
    "body": "Every other xxxN function takes the N as the first argument:\n\n``` console\n$ grep 'R[.].*N =' ramda.js\n    var curryN = R.curryN = function curryN(length, fn) {\n    var invokerN = R.invokerN = function invokerN(arity, method) {\n    R.argN = function argN(n) {\n    R.repeatN = _curry2(function repeatN(n, value) {\n    var constructN = R.constructN = _curry2(function constructN(n, Fn) {\n    var liftN = R.liftN = _curry2(function liftN(arity, fn) {\n```\n\nI can't imagine partially applying `R.repeatN` very often. (Please correct me if I'm wrong!) This being the case, we should switch the argument order so all the xxxN functions take the N as the first argument.\n",
    "head_branch": "repeat-n",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d67dfe64780629ad7139bf6128c3e65ff9c336b4 into 77077738c622a94f57dbd7f6da07b8e25d2589b7"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e9d8dfb6b84f2425b0a",
    "number": 625,
    "body": "",
    "head_branch": "foldObj",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e9e8dfb6b84f2425b0b",
    "number": 623,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7e9f8dfb6b84f2425b0c",
    "number": 622,
    "body": "The first and second arguments are arrays and should be represented in the signature.\n",
    "head_branch": "xprod-doc-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 93e760c662029461176530d0410ff2014784df49 into f8b7009620bdaabebffd99b228759c80a9c11255"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ea08dfb6b84f2425b0d",
    "number": 620,
    "body": "The remaining uses of `_checkForMethod` are to support the lazy-list extension or to conform to the [Fantasy Land Specification](https://github.com/fantasyland/fantasy-land):\n\n``` console\n$ ack '=.*checkForMethod' | sed \"s:.*'\\(.*\\)'.*:\\1:\" | sort\nchain\nfilter\nmap\nskip\ntail\ntake\ntakeWhile\n```\n",
    "head_branch": "check-for-method",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 28aeb6d5a14b8f65ba3fa89f2133fd43002c7787 into f3e9def9adb97f6af191e2bf9c8147a6cf4618f2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7ea18dfb6b84f2425b0e",
    "number": 619,
    "body": "Many found this [parable](https://github.com/ramda/ramda/pull/574#issuecomment-64124850) persuasive. There's support for removing the remaining :alien:s.\n\nI set to work on a patch to _remove_ `R.foldl` and `R.foldr`, but as I worked my way through the various files I became convinced that it's `R.reduce` and `R.reduceRight` that must go. Here are my reasons:\n- `foldl` and `foldr` are well liked. Several people have these in their shortlists of aliases to keep.\n- `foldl` and `foldr` are more consistent with our ad hoc naming scheme. We have `lPartial` and `rPartial`, for example, rather than `partial` and `partialRight`.\n- We have a function named `unfoldr`. It's inconsistent to have `reduceRight` and `unfoldr`, and `unreduceRight` doesn't exactly roll off the tongue.\n\nI'd love to merge this change and rebase #618 on top of it. The intersection of two ugly things (:alien:s and `.idx` functions) is particularly confusing when every function lives in its own file.\n",
    "head_branch": "reduce",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 90b8720565a152afcb83ed63cfee178dc136124b into 05ff1bfbcd15b47b3472eee4ced46cca0b5ffd90"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7ea28dfb6b84f2425b0f",
    "number": 618,
    "body": "Compare the output of the following commands:\n\n``` command\n$ ./scripts/build -- lib/head.js\n```\n\n``` command\n$ ./scripts/build -- lib/head.js lib/tail.js\n```\n\n``` command\n$ ./scripts/build --complete\n```\n\n**ramda.js** is built by running the last of these commands. If the `VERSION` environment variable is set (by xyz, for example) its value is used in the version string in the header (see #617).\n\nModular builds have been discussed in #577 and elsewhere. This pull request gives us the ability to create extremely granular custom builds. Only the requested functions are exported, and functions not required by any of the requested functions or any of their dependencies are not included at all.\n\nThere is a reason, though, that I didn't entitle this pull request \"support custom builds\". We don't expect users to create custom builds by specifying hundreds of filenames. We'd like to support something like this:\n\n``` console\n$ ./scripts/build --category logic --category math\n```\n\nThat change should be fairly easy to implement, but I'd like it to be reviewed and discussed in a separate pull request once this has been merged. This pull request is already large enough!\n\nI'll add further comments in situ.\n",
    "head_branch": "build",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ea38dfb6b84f2425b10",
    "number": 617,
    "body": "Reasons to keep `R.version`:\n- Being able to type `R.version` into a REPL is occasionally useful.\n\nReasons to remove `R.version`:\n- It provides an additional and nonstandard way to access the version of the npm package: `require('x/package.json').version` works for every `x`.\n- It adds complexity to the release process (though this is largely mitigated by our automated release process).\n- In the near future we'll have custom builds, at which point a version string alone is not terribly useful. At that point I'd like to include the version string in the header along with the build options:\n  \n  ``` javascript\n  //     Ramda v0.9.0 custom build: +logic +math\n  ```\n",
    "head_branch": "version",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ea48dfb6b84f2425b11",
    "number": 616,
    "body": "Thanks for telling me where to fix it!\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 6e7763c9b7d9fd1d4eaab3cfec64fae8686ed7ac into b94a0daedf4d14f77a539235189db0d97b2c183a"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ea58dfb6b84f2425b12",
    "number": 615,
    "body": "",
    "head_branch": "tagmap",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ea68dfb6b84f2425b13",
    "number": 614,
    "body": "This seems more elegant to me. :)\n",
    "head_branch": "once",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ea78dfb6b84f2425b14",
    "number": 613,
    "body": "I just got bitten by this when passing the result of a call to `R.pipe` to `R.memoize`. >.<\n",
    "head_branch": "memoize",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 6a56c4854ab0566e4f45a77ca73dff256a0728ef into a50d672160428ec26434d534f5e946c51041ba99"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ea88dfb6b84f2425b15",
    "number": 612,
    "body": "This is (almost) equivalent to `R.skip`, is it not? Let's remove the clumsy one.\n",
    "head_branch": "slice-from",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 724efd720312bc080db0a1fbff5732d9685f65ca into e10152111617d65d12eedaa02def98e2f0e086ef"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7ea98dfb6b84f2425b16",
    "number": 611,
    "body": "This is a particularly harmful :alien: as it shares the name of a built-in _mutator_ method.\n",
    "head_branch": "push",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7eaa8dfb6b84f2425b17",
    "number": 609,
    "body": "I've split out the document parsing from running the example tests. I put `doc-parser.js` in `scripts`, is that a good place for it?\n\nNow from anywhere you can do\n\n`var ramdaDocs = require('path/to/doc-parser');`\n\nand you get an array back of objects representing the docs for a given function. Objects are of the form\n\n```\n{\n    name: 'countBy',\n    func: '',\n    memberOf: 'R',\n    category: [ 'relation' ],\n    sig: '(a -> String) -> [a] -> {*}',\n    param: [ [ 'Function' ], [ 'Array' ] ],\n    return: [ 'Object' ],\n    example: '\\n     var numbers = [1.0, 1.1, 1.2, 2.0, 3.0, 2.2];\\n     var letters = R.split(\\'\\', \\'abcABCaaaBBc\\');\\n     R.countBy(Math.floor)(numbers);    //=> {\\'1\\': 3, \\'2\\': 2, \\'3\\': 1}\\n     R.countBy(R.toLowerCase)(letters);   //=> {\\'a\\': 5, \\'b\\': 4, \\'c\\': 3}',\n    description: '<p>Counts the elements of a list according to how many match each value<br />of a key generated by the supplied function. Returns an object<br />mapping the keys produced by <code>fn</code> to the number of occurrences in<br />the list. Note that all keys are coerced to strings because of how<br />JavaScript objects work.</p>',\n    isPrivate: false,\n    isConstructor: false,\n    isEvent: false,\n    ignore: false,\n    line: 6092,\n    codeStart: 6113\n}\n```\n\nThis is slight re-organization of what you get back from `dox`. Might be more useful to index by function name? Anyway more stuff could be done here, but hopefully this is a decent start and something useful.\n",
    "head_branch": "doc-parser",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7eaa8dfb6b84f2425b18",
    "number": 608,
    "body": "Testem failed when it couldn't find the assert.equal function, so I changed it to deepEqual.\n\nBTW this is my first pull request ever on github, so I fully expect it to be rejected :)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7eab8dfb6b84f2425b19",
    "number": 604,
    "body": "### ramda/ramda now has a Chat Room on Gitter\n\n@buzzdecafe has just created a chat room. You can visit it here: [https://gitter.im/ramda/ramda](https://gitter.im/ramda/ramda?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&content=body_link).\n\nThis pull-request adds this badge to your README.md:\n\n[![Gitter](https://badges.gitter.im/Join Chat.svg)](https://gitter.im/ramda/ramda?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=body_badge)\n\nHappy chatting.\n\nPS: [Click here](https://gitter.im/settings/badger/opt-out) if you would prefer not to receive automatic pull-requests from Gitter in future.\n",
    "head_branch": "gitter-badge",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7eac8dfb6b84f2425b1a",
    "number": 603,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 40b7079bce9bb5f3e9904e2ee6a179ad075ebc69 into ee0bb91a92d055691777c6e2c9010dbeb4470e1b"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ead8dfb6b84f2425b1b",
    "number": 601,
    "body": "Updated all testcases to use strictEqual\n",
    "head_branch": "strictAssert",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7eae8dfb6b84f2425b1c",
    "number": 599,
    "body": "The usual clean up task -  had some inconsistencies in the order in which some assertions were being made.\n\nAs we are using NPM assert, the order should be:\n\n```\nactual, expected, [message])\n```\n\nPlease see [assert](https://www.npmjs.org/package/assert) for more info.\n",
    "head_branch": "testcase_fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f84f60ed53912747806e9b3b29208279ccc14118 into f6ea6ead2975ca239eef5a589b9546c3dee2ce1c"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7eaf8dfb6b84f2425b1d",
    "number": 597,
    "body": "Please refer to #596 for details. This is an API renaming only:\n\n`anyPredicates` -> `anyPass`\n`allPredicates` -> `allPass`\n",
    "head_branch": "predicatesToPass",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7eb08dfb6b84f2425b1e",
    "number": 595,
    "body": "Now that we have a Scheme-like `cond`, it'd be nice to have a shorter name for `R.alwaysTrue` as this function is useful to match every value not satisfied be one of the preceding predicates.\n",
    "head_branch": "always-true",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7eb18dfb6b84f2425b1f",
    "number": 594,
    "body": "This :alien: is actually shorter than its equivalent:\n\n``` javascript\nR.alwaysZero\nR.always(0)\n```\n\nAdmittedly, these aren't equivalent in terms of memory usage, but idiomatic Ramda code doesn't define functions in loops so that's not a significant factor.\n",
    "head_branch": "always-zero",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ddc7b98cc9fb986d44d81c9928a1597dc938e6e8 into fcfa008cff3d4750b4180ef029f02ec47f20d898"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7eb28dfb6b84f2425b20",
    "number": 593,
    "body": "See https://github.com/blog/1184-contributing-guidelines\n",
    "head_branch": "contributing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4624c902ccb764d2fb6ea42a62fdce1ea1b6bc1e into e8e0bccbd9cf5e35d93201144dd16192d4efe17e"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7eb38dfb6b84f2425b21",
    "number": 592,
    "body": "[assumes ramda wants micro-opts]\n\nApproximately 30% speed gain on filter benchmarks.  Slight modification to the tests (not included in PR) required to see proposed changes against existing code side-by-side.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7ebaff9fb22e85b29991aa3dbaa84d2a69561da2 into 618fb14975e503a7708d95a8b6d11832518b14d0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7eb48dfb6b84f2425b22",
    "number": 591,
    "body": "[assumes ramda wants micro-opts]\n\nApproximately 30% speed gain on filter benchmarks.  Slight modification to the tests (not included in PR) required to see proposed changes against existing code side-by-side.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7eb58dfb6b84f2425b23",
    "number": 590,
    "body": "I've nothing against this code, but it doesn't belong in Ramda. It should be a standalone package in its own repository. Do others agree?\n",
    "head_branch": "random",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7eb68dfb6b84f2425b24",
    "number": 589,
    "body": "This is rather fitting, given the strange behaviour was highlighted by a remark in a thread celebrating 1000 stars:\n\n<img alt=\"1000 passing\" src=\"https://cloud.githubusercontent.com/assets/210406/5174016/77adf184-73e2-11e4-8e79-8080c0eacfe0.png\" width=\"224\" height=\"56\">\n",
    "head_branch": "times",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 16114e770fac5fe2d580b3b8ff096a234a0636b4 into e05ec3cfb6a51e0394c85764a586e8d179134c4e"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7eb78dfb6b84f2425b25",
    "number": 588,
    "body": "closes #584\n",
    "head_branch": "useWithDoc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7eb88dfb6b84f2425b26",
    "number": 587,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7eb98dfb6b84f2425b27",
    "number": 584,
    "body": "closes #567  - the documentation note about arity and R.identity is already included.\n",
    "head_branch": "useWithDoc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 2891b86992184990187e23e682e8d0f1744a43d1 into 705d42420b48046c234c0f5d472363ae947bbb3c"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7eba8dfb6b84f2425b28",
    "number": 583,
    "body": "",
    "head_branch": "noif",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ebb8dfb6b84f2425b29",
    "number": 582,
    "body": "Closes #579\n",
    "head_branch": "taildoc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 6f4ffc65a945ff9ff509eed3af433cc4321b04ba into c773cbcbd1c4f34ab7f8f6f3e2aafa36f79e35be"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ebc8dfb6b84f2425b2a",
    "number": 581,
    "body": "Please see #567.\n\nNote, i don't yet know how to rebuild the docs, so have applied this fix without testing how the output docs look.\n",
    "head_branch": "useWithExample",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ebd8dfb6b84f2425b2b",
    "number": 580,
    "body": "Find it very handy just being able to run jshint and unit tests as NPM commands. This addition just caters for developers with a similar workflow. Granted, using grunt off the command line achieves the same thing but hoping there is no compelling reason not to include this mechanism too.\n",
    "head_branch": "jshintnpm",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ffac9d55fadc81c1d0440b353ea8fe8463256d72 into 079c8a9fba61e96c9a7315c7dbac9a8b2a12c46c"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ebd8dfb6b84f2425b2c",
    "number": 578,
    "body": "Had a real world situation where I wanted all elements of a list except the last one.\n\nIn Haskell, the four usual suspects are `head`, `tail`, `init`, and `last`.\n\nCould find `head`, `tail`, and `last` but no init implementation? It is possible it comes under a different name but I couldn't find it.  Also, lodash does have an initial function which is sort of haskell `init` on steroids.\n\nSo I am tentatively raising this PR without any expectations, but hopes such a function already exists if declined. Would rather not have to compose this one all the time. :)\n\nMy only concern over the proposed implementation was what to do about the case where an empty array is passed in. Am assuming here that returning an empty array is ok. This seems consistent with `tail` etc.\n",
    "head_branch": "init",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ebe8dfb6b84f2425b2d",
    "number": 576,
    "body": "As proposed in https://github.com/ramda/ramda/pull/574#issuecomment-64126035\n",
    "head_branch": "lisp-aliases",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ebf8dfb6b84f2425b2e",
    "number": 575,
    "body": "This is not a particularly useful function but it has well-defined semantics and an obvious name. :)\n",
    "head_branch": "call",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ec08dfb6b84f2425b2f",
    "number": 574,
    "body": "",
    "head_branch": "handy-aliases",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ec18dfb6b84f2425b30",
    "number": 573,
    "body": "As defined in https://promisesaplus.com/\n",
    "head_branch": "fix-thenable-spelling",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f8e64f371af93bee9f45dd8ca11e68cbe543d9ef into 837ef9f77269474b0ec38d6375db68c8e961d2b2"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7ec28dfb6b84f2425b31",
    "number": 572,
    "body": "Replacing this.returnExports with this.<name-of-type> in ext/types to make them work correctly in browser-like environments.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ec38dfb6b84f2425b32",
    "number": 570,
    "body": "Tiny update to package.json to remove unused grunt plugin. Please see #569\n",
    "head_branch": "packagejson",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ec48dfb6b84f2425b33",
    "number": 569,
    "body": "Tiny update in the bench tests area of the code.\n",
    "head_branch": "bench",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 88ffe56dc26d714ecfcccff7c2a2672448ecf53b into 6750d8171e8856193b4d5233c49e9df172fb19e7"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ec58dfb6b84f2425b34",
    "number": 568,
    "body": "Documentation fix to reference the correct function.\n",
    "head_branch": "reduceRight",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ec68dfb6b84f2425b35",
    "number": 566,
    "body": "Please see Open Issue #565\n",
    "head_branch": "pipe",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4012b3678a7dfe7b88762bf40b9833158490350e into 2ca2c6e863c2fb9dacee7dff2830a384c1d5ce35"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ec78dfb6b84f2425b36",
    "number": 563,
    "body": "I just want it to be a bit shorter! : )\n\n![](http://media.giphy.com/media/8yxZpH7bSOkoM/giphy.gif)\n",
    "head_branch": "feature/compose",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ec88dfb6b84f2425b37",
    "number": 562,
    "body": "I just converted a project of mine from lodash to ramda and couldn't find this function in the docs. If this is already in there, please let me know and I can close this out.\n\nAnyhow, I figured I'd whip something up quickly and see if you guys like it. If you do, I'll write some tests to make it more official. In the mean time I scanned your code and did my best to stick to your coding style — assuming I didn't miss something similar to R.invert — let me know if you'd prefer any code changes.\n",
    "head_branch": "develop",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ec98dfb6b84f2425b38",
    "number": 561,
    "body": "see #558\n\nSome stats\n\nCount by category\n{ Internal: 10,\n  Type: 3,\n  List: 75,\n  Function: 37,\n  Object: 37,\n  Logic: 8,\n  Relation: 14,\n  Math: 18,\n  String: 13 }\n\nCount by number of categories\n{ '1': 209, '2': 3 }\n\nIt looks to me like every external function has a category. Some internal ones still do not.\n\nQuestion: can we remove the TODOs or move them to the jsdocs? Some of them cause problems with the `dox` parser\n",
    "head_branch": "category-doc-updates",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7eca8dfb6b84f2425b39",
    "number": 558,
    "body": "This raises another minor stylistic question: should the category name be capitalized?\n",
    "head_branch": "if",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ad54940e46a01b0eee5decb53eb1f53f4fbbdf07 into 44e28030e3776ce6492e0ae49b2239144aa3b9c4"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ecb8dfb6b84f2425b3a",
    "number": 557,
    "body": "Noticed a couple `@returns` instead of `@return` when I was working on something.. did some general spacing and punctuation cleanup while I was at it\n",
    "head_branch": "doc-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f52d9d34c5d6112c2e6f6f080f362bf6c037eb08 into 9e2af0a466fa7ce5cab4c837c65d54db93d662c6"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7ecb8dfb6b84f2425b3b",
    "number": 556,
    "body": "Just minor documentation update. Some people like myself are familiar with strips, others do trim.\nShould be easier to find now in the docs.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ecc8dfb6b84f2425b3c",
    "number": 555,
    "body": "Updated the doc of `R.trim` to hint it's a stripper. If one searches one shall find.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ecd8dfb6b84f2425b3d",
    "number": 551,
    "body": "Thanks to davidchambers/xyz#17 xyz now runs `npm prune` and `npm test` before publishing.\n",
    "head_branch": "xyz",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b053c65c507bcc0441dd3c37213140847c5fa063 into b543d76f6557b07c7d8c51daecdeca402fafbc74"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ece8dfb6b84f2425b3e",
    "number": 549,
    "body": "This clarifies the behavour of R.max and R.min where garbage input has been provided.\n\nSee #548\n",
    "head_branch": "maxmin",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ecf8dfb6b84f2425b3f",
    "number": 547,
    "body": "Closes #509\n",
    "head_branch": "rename",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 98f1b76eaff5fa322b34915637f63ac136bc2a82 into 9febcef4ff2276e88505686c4dc3a8a03e784870"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7ed08dfb6b84f2425b40",
    "number": 545,
    "body": "Tidies up a documentation inaccuracy for eqProps.\n\nPlease see issue [544](https://github.com/ramda/ramda/issues/544)\n",
    "head_branch": "eqprops",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ea2db3e46bbf52bd53d3abee9d60a48c0ae43e54 into 4516a386ea3d131d159e0f2e5c2299cf9060eba6"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7ed18dfb6b84f2425b41",
    "number": 543,
    "body": "Who needs JSON.stringify when we have type coercion? ;)\n",
    "head_branch": "no-json",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ed28dfb6b84f2425b42",
    "number": 542,
    "body": "",
    "head_branch": "reverse",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ed38dfb6b84f2425b43",
    "number": 541,
    "body": "I suggest we remove this function: `R.prop('length')` is short and wonderfully explicit.\n\nIf we decide to keep this function it should be named `R.length` rather than `R.size`. I'd expect `R.size({})` to return 1 rather than undefined. `R.length` is clearer. `R.prop('length')` is best of all. ;)\n\nFor consistency with `R.isEmpty` we should handle a null/undefined argument.\n",
    "head_branch": "length",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ed48dfb6b84f2425b44",
    "number": 540,
    "body": "As discussed in #539\n",
    "head_branch": "is-empty",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ed58dfb6b84f2425b45",
    "number": 539,
    "body": "Closes #538\n\n[Underscore](https://github.com/jashkenas/underscore/blob/1.7.0/underscore.js#L1068-L1075):\n\n``` javascript\n// Is a given array, string, or object empty?\n// An \"empty\" object has no enumerable own-properties.\n_.isEmpty = function(obj) {\n  if (obj == null) return true;\n  if (_.isArray(obj) || _.isString(obj) || _.isArguments(obj)) return obj.length === 0;\n  for (var key in obj) if (_.has(obj, key)) return false;\n  return true;\n};\n```\n",
    "head_branch": "is-empty",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ed68dfb6b84f2425b46",
    "number": 537,
    "body": "R.converge also works with 2 functions, fixed the doc.\n\n``` js\nvar split = R.converge(R.split('.'), R.I)\nlog(\n    split('H.e.l.l.l.o') // => [\"H\", \"e\", \"l\", \"l\", \"l\", \"o\"]\n)\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ed78dfb6b84f2425b47",
    "number": 535,
    "body": "",
    "head_branch": "loops",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ed88dfb6b84f2425b48",
    "number": 534,
    "body": "We should determine the performance cost before merging this change. I imagine it'll be fairly small.\n",
    "head_branch": "partial",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ed98dfb6b84f2425b49",
    "number": 533,
    "body": "The current semantics offend me: it's nonsensical to ask whether a number is empty, so short of throwing a TypeError the only sensible response to such a question is “no”. Only _collections_ can be empty/nonempty, strictly speaking. Since `{}` is an empty collection, I argue `R.isEmpty({})` should return true. If others agree I will open a separate pull request for that change. I'd like this PR to remain focused on `0`, `-0`, and `NaN`.\n",
    "head_branch": "is-empty",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7eda8dfb6b84f2425b4a",
    "number": 532,
    "body": "",
    "head_branch": "contains",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge a0ec03518f526cb25b45961e132e59a429c16115 into 511f2d850c6ec914a1d71ba541bf0c143832ed55"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7eda8dfb6b84f2425b4b",
    "number": 531,
    "body": "As discussed in #527, converge as a multi arg function would enhance composition capabilities, while staying backwards compatible.\n\n``` js\n// R.I2 = R.argN(1)\n// R.I3 = R.argN(2)\nredSquare = R.converge(Rectangle, R.I, R.I2, R.I3, R.I3, R.always(0xFF0000));\nredSquare(0,0, 100);  // paints red square at \n                      //    x=0\n                      //    y=0\n                      //    width = 100\n                      //    height set to equal width=100 by converge (width and height receive R.I3 !)\n```\n\nI'm not sure the new signature is correct.\nAll old converge tests **pass**, however i would need to add tests that also make use of the new variadic capabilities of R.converge. If you guys are cool with this extension in general, i will write some tests that cover multi args.\n",
    "head_branch": "multiarg_converge",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7edb8dfb6b84f2425b4c",
    "number": 530,
    "body": "Re https://github.com/ramda/ramda/pull/524#issuecomment-63263691\n\nSolution from:\n\nhttp://stackoverflow.com/questions/17581830/load-node-js-module-from-string-in-memory\n",
    "head_branch": "allow-examples-to-import",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 0d9cb04b99c4fb9340f47b0b8708c8bfcf616afa into 887f843f1e9646bb91da626ffb3a4de8cd119a7d"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7edc8dfb6b84f2425b4d",
    "number": 529,
    "body": "Closes #528\n",
    "head_branch": "jsdoc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7a146c0098fe4aaa8e8f8a29114411a138fb9ef9 into 81981821019d82c4be9e336a549d86ca9f04a386"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7edd8dfb6b84f2425b4e",
    "number": 526,
    "body": "Been thinking this over for a while (see #441). The utility of `commute` in Array-of-Array scenarios is not obvious--but `commute` shines in situations where you want to convert a list of Functors (Maybe, Either, even Promise?, etc.) to a Functor of a list. \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ede8dfb6b84f2425b4f",
    "number": 525,
    "body": "micro optimization\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7edf8dfb6b84f2425b50",
    "number": 524,
    "body": "Compose would now handle promises returned by any of the composed functions. The resulting function\nwill evaluate to a promise if any one of the composed functions returns a promise. If all of the composed functions return something other than a promise, then the behaviour of compose() is the same as it was before. In this sense the change is fully backwards compatible.\n\nI added one new test and modified two tests to test promises. I added Q to dev dependencies to test promise support. However, Q is not necessary at run time, and this implementation should work with any promise implementation.\n\nSee https://github.com/ramda/ramda/issues/512 for discussion.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ee08dfb6b84f2425b51",
    "number": 522,
    "body": "I'm not sure wether it's better to make contrib stuff by composition or iterative implementation.\nAlso haven't made tests yet since this is a first draft.\n\nR.align may not be strictly \"functional\" style, but at least it doesn't mutate the arrays :smile: \n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ee18dfb6b84f2425b52",
    "number": 520,
    "body": "This relates to issue (#514)[https://github.com/ramda/ramda/issues/514#issuecomment-62955964]  Have updated the wrap function only in the unminified ramda.js file, as well as added a single testcase.\n",
    "head_branch": "wrap",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ee28dfb6b84f2425b53",
    "number": 519,
    "body": "As discussed in #516\n",
    "head_branch": "arg-n",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge bfb6fcefbe1b0ab7dc66fc5af90a3888ecf43876 into 59937fbf24596f69212567392e4b38f0a04d3310"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ee38dfb6b84f2425b54",
    "number": 518,
    "body": "This is a function from the Lisp world I would very much like to use in my Ramda code. It can be used similarly to `R.type` to switch based on type:\n\n``` javascript\nvar sumNested = R.cond(\n  [R.is(Number), R.identity],\n  [R.is(Array), function(xs) { return R.sum(R.map(sumNested, xs)); }],\n  [R.alwaysTrue, R.alwaysZero]\n);\n\nsumNested([1, [2, [3, [4, 'foo'], true, 5]]]);  // => 15\n```\n\nIt's more general than `R.type`, though, so I'm sure we'll find plenty of other uses. :)\n",
    "head_branch": "cond",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 2e372f02d593af379ba3b5c385be5f466d81a613 into 4a3c071c767c7206ddbeee4f314b671f7e42bb4c"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7ee48dfb6b84f2425b55",
    "number": 516,
    "body": "This function can be used to define the identity functions discussed in #511.\n",
    "head_branch": "identity-n",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ee58dfb6b84f2425b56",
    "number": 515,
    "body": "I've wanted this confusing function several times in the last month or so. It stewed in the back of my mind while I thought of possible names. Today I decided the placeholder name, `unapply`, is in fact the right name, given the `f`/`unapply(apply(f))` equivalence.\n\nThis function _could_ be used to define the identity functions discussed in #511:\n\n``` javascript\nvar identity1 = R.compose(R.nth(1), R.unapply(R.identity));\nvar identity2 = R.compose(R.nth(2), R.unapply(R.identity));\n\nidentity1('a', 'b', 'c');  // => 'b'\nidentity2('a', 'b', 'c');  // => 'c'\n```\n\n`R.unapply` is useful for the same reason these identity functions are useful: one can reference specific elements of the arguments object, facilitating composition. `R.unapply` is more general, though, so I'm confident other uses will emerge. Even having a function for creating arrays is useful at times:\n\n``` javascript\nR.unapply(R.identity)(1, 2, 3, 4, 5);  // => [1, 2, 3, 4, 5]\n```\n",
    "head_branch": "unapply",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge e0e28fec02a0866dc7fe444928cacb42eb04f076 into 09028bec8e04947b8000eeeab380fb23b006106e"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7ee68dfb6b84f2425b57",
    "number": 510,
    "body": "- Implements `invokerN` as discussed in #489.\n- Changes and adds tests.\n- Removes `invoker`.\n- Updates all internal usage of `invoker` and `invokerN`.\n- Updates documentation according to the changes.\n- Adds an example to the documentation demonstrating the slightly more sophisticated currying supported by `invokerN`.\n\nA few things to note:\n- All the internal functions that relies on `invokerN` (these are all string methods) could now in theory be used on other objects implementing the string methods. This is somewhat neat but probably doesn't matter in practice.\n- This implementation doesn't support currying like this: `R.invokerN(2)('slice', 6, 8)`. I.e. the first two parameters needs to be supplied. The reason being that the old `invokerN` didn't support it either and that I think partially applying with only an arity isn't something one would want to do/should do. This `invokerN` is already better at currying. However, if others disagree I am open adding it in.\n\nCritique of the implementation etc. is welcome :) This is obviously a breaking change but besides that everything should be fine (all tests pass).\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ee78dfb6b84f2425b58",
    "number": 507,
    "body": "I hereby revoke our `&&` licence. ;)\n",
    "head_branch": "is-array",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ee88dfb6b84f2425b59",
    "number": 506,
    "body": "Commit message:\n\n> 1.  Top-level helper functions are defined via function statements:\n>    \n>    ```\n>     function _add(a, b) { return a + b; }\n>    ```\n> 2.  Names of top-level helper functions are underscore-prefixed.\n> 3.  Exported functions are referenced by alias when used internally:\n>    \n>    ```\n>    R.project = useWith(_map, pickAll, identity);\n>    ```\n>    \n>    In this example `pickAll` and `identity` are aliases for `R.pickAll` and `R.identity` respectively.\n> 4.  Aliases for exported functions match property names of the `R` object. Aliases are not underscore-prefixed.\n> 5.  Function expressions should be named rather than anonymous. These names should not be underscore-prefixed.\n",
    "head_branch": "consistency",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b5dfb38cc511344949044369d5ed2894cc1e0850 into 436563325f86d762d46f6a5f760163275fe45c98"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7ee98dfb6b84f2425b5a",
    "number": 505,
    "body": "Current behaviour:\n\n``` javascript\nR.concat('', 'x');\n// => TypeError: can't concat string\n```\n",
    "head_branch": "concat-empty-string",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 601bc2339f443251f829c818c8d5d4e918f36534 into 97a2ddc54e6a719daef90cba4148752ed6417a41"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7eea8dfb6b84f2425b5b",
    "number": 504,
    "body": "[envvar](https://github.com/plaid/envvar) is a tiny package for dealing with environment variables in a more rigorous manner.\n\nThere's so much imprecision in an expression such as the following:\n\n``` javascript\nprocess.env.CI_BUILD_NUMBER || 0\n```\n\nThe result of the expression will be a string or a number depending on whether `CI_BUILD_NUMBER` is set and, if so, whether its value is `''`. There's no validation, so the result may be `'XXX'`.\n\nI realize this imprecision is _usually_ okay in practice, so I won't be offended if you decide not to merge this pull request. :)\n",
    "head_branch": "envvar",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7eeb8dfb6b84f2425b5c",
    "number": 503,
    "body": "I see no reason to treat these files as second-class citizens. :)\n",
    "head_branch": "lint",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1750d05522547ebba8f4edcf27254f80b7a1f68b into e4937800d3489a890468e713bef30b7c7ac6ae1e"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7eec8dfb6b84f2425b5d",
    "number": 502,
    "body": "As discussed in #305\n",
    "head_branch": "global",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7eec8dfb6b84f2425b5e",
    "number": 501,
    "body": "Closes #499.\n",
    "head_branch": "props",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ce024685e1137c373c82fdda39067a40e7dd3aa8 into 46431585af119692ad1cd1a5d6e604ac7535096e"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7eed8dfb6b84f2425b5f",
    "number": 500,
    "body": "These functions are certainly useful: I use `R.append` and `R.prepend` in conjunction with `R.flip` or `R.rPartial` quite often. They're also easy to name. These two facts make them a straightforward addition.\n\nFor consistency, perhaps we should add `R.concatTo` as well? I find myself flipping `R.concat` from time to time as well.\n",
    "head_branch": "append-to",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 2deb4bc06bba354485a29acb16c007a197ff1fda into edb3829656337e0aac209c9df6b5d49e95c8bbd7"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7eee8dfb6b84f2425b60",
    "number": 496,
    "body": "Ideally one knows the types of one's values. When this is not the case, one can apply `Object` to the value in question. For example:\n\n``` javascript\nvar x = null;\n\nR.head(x);\n// => TypeError: Cannot read property '0' of null\nR.head(Object(x));\n// => undefined\n```\n\nI very much like the explicitness this change enforces. It is a breaking change, of course, but we're pre-1.0. ;)\n",
    "head_branch": "strict",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7eef8dfb6b84f2425b61",
    "number": 493,
    "body": "Closes #492\n",
    "head_branch": "nth",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge a25d6c63ae7c4bd4b93e18acf94d366cc9c42bae into 143fc56002925ddd4b790268d0041f29f0025557"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7ef08dfb6b84f2425b62",
    "number": 490,
    "body": "Ping #470 \n",
    "head_branch": "type",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ef18dfb6b84f2425b63",
    "number": 488,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7b79d27cbc5aee5ad0c88cc91b70d268373ae579 into 63f26908fa74d6456c57e5f2dd75406331e4c61c"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ef28dfb6b84f2425b64",
    "number": 487,
    "body": "...lists.\n",
    "head_branch": "jsdoclazy",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f68ea0f49aff510e8e826ed7dba6f4aef6fca0f2 into 05a4461b95662ac998b49906dfb352b3e7316d98"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7ef38dfb6b84f2425b65",
    "number": 485,
    "body": "``` javascript\nvar f = R.pipe(R.concat, Number);\nf.length;     // => 2\nf('4', '2');  // => 42\nf('4')('2');  // => Uncaught TypeError: number is not a function\n```\n\nMy intuition suggested the last two expressions are equivalent.\n",
    "head_branch": "compose-curried",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ef48dfb6b84f2425b66",
    "number": 483,
    "body": "As discussed in #460\n",
    "head_branch": "remove-xprod-with",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1659e05f40ce584c6a6e4679a03fa11a726be6dc into 698e8fb766b5af6e9067dc62512fafdc459f7464"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7ef58dfb6b84f2425b67",
    "number": 480,
    "body": "`R.string.indexOf` is much nicer than `R.strIndexOf`. :)\n\nI expect others will suggest using `R.str` as the namespace. If so, what would we use for other namespaces in future? `R.string` sets a clear precedent for Number, RegExp, etc.: `R[ctor.name.toLowerCase()]`.\n",
    "head_branch": "namespace",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ef68dfb6b84f2425b68",
    "number": 476,
    "body": "Aliases are, by definition, unnecessary. This one is also inconsistent as we don't provide `R.getEq` or `R.getOr`. Let's remove it.\n",
    "head_branch": "remove-prop-alias",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ef78dfb6b84f2425b69",
    "number": 475,
    "body": "See https://github.com/ramda/ramda/pull/471#discussion_r19223870\n",
    "head_branch": "dc-test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ef88dfb6b84f2425b6a",
    "number": 474,
    "body": "#468\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ef98dfb6b84f2425b6b",
    "number": 471,
    "body": "Found myself wanting this functionality recently. It's nice for building up a collection of intermediate values while reducing. Here's an example of where one could be applying an increasingly stringent set of filters to an ElasticSearch or MongoDB style query:\n\n``` javascript\n> var location = {state: 'CA', city: 'San Francisco', zip: 94108};\n> R.scanl(R.mixin, {}, [{state: trans.state}, {city: trans.city}, {zip: trans.zip}]);\n<\n[\n  {},                                                     // no filter\n  {\"state\": \"CA\"},                                        // just state\n  {\"state\": \"CA\", \"city\": \"San Francisco\"},               // state and city\n  {\"state\": \"CA\", \"city\": \"San Francisco\", \"zip\": 94108}  // state, city and zip\n]\n\n```\n\nInspired by Haskell [scanl](http://en.wikibooks.org/wiki/Haskell/List_processing#Scans)\n",
    "head_branch": "bp-add-scanl",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7efa8dfb6b84f2425b6c",
    "number": 469,
    "body": "Resolve jscs failure on windows by enforcing `LF` at commit time, regardless of the developers test editor or git config settings\n\n #468 \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7efb8dfb6b84f2425b6d",
    "number": 467,
    "body": "This adds R.replace witch replaces parts of a string with a replacement\nstring. All it really does is to call the replace method on the string\nobject.\n\nThe order of the arguments is:\n1. RegExp or substring to match what is to be replaced\n2. The replacement string\n3. The string to do the replacement in.\n   It could perhaps be argued that the order of the first two arguments\n   should be reversed. With the current implementation it is possible to\n   construct functions like these:\n   \n   var replaceSemicolon = R.replace(';');\n   var removeSemicolon = replaceSemicolon('');\n\nIf the arguments were reversed, this would be possible:\n\n  var clearStringOf = R.replace('');\n  var removeSemicolon = clearStringOf(';');\n\nI choose this way since it is the order that the underlying\nstring.replace() method accepts them.\n\nIt could also be argued that ramda should not have a function that can\naccept _either_ a string or a RegExp as one of its arguments, but if the\nfunction was split in two, it would still just call the same underlying\nmethod.\n",
    "head_branch": "replace",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7efc8dfb6b84f2425b6e",
    "number": 466,
    "body": "R.path and R.pathOn were categorized as string functions but does really\noperate on objects since their purpose is to find nested properties of\nobjects. Their categories were changed so that the documentation will\nreflect this.\n",
    "head_branch": "path-doc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d29fad66f9984486855d06a66cd277dd4b449c93 into c1f510b91420e75c54343466bb96cca88e2162f3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7efd8dfb6b84f2425b6f",
    "number": 465,
    "body": "I'm surprised this function isn't yet defined. It's similar to [clojure.core/apply](http://clojuredocs.org/clojure.core/apply), the difference being that Clojure's apply is variadic whereas Ramda's is a curried binary function.\n",
    "head_branch": "apply",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7efe8dfb6b84f2425b70",
    "number": 464,
    "body": "R.tap took its arguments value first, function second but it was\ngenerally agreed that the function is more extensible if the arguments\nwere reversed.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7eff8dfb6b84f2425b71",
    "number": 462,
    "body": "see #455 \n",
    "head_branch": "cloneDeep",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7eff8dfb6b84f2425b72",
    "number": 461,
    "body": "There was some discussion of automating the release process in #339. This pull request is my proposed solution.\n\nThis pull request adds three release targets to the makefile. If merged, publishing a new release will involve nothing more than running `make release-$LEVEL`.\n\nBelow is a walkthrough of what happens when one runs `make release-minor` (to choose a concrete example). I'll keep this up to date as the pull request matures in response to feedback.\n1.  `$(XYZ) --increment $(@:release-%=%)` is expanded to:\n   \n   ``` shell\n   node_modules/.bin/xyz --repo git@github.com:ramda/ramda.git --script scripts/prepublish --increment minor\n   ```\n2.  The above command is run.\n3.  xyz checks that the current branch is `master`. If it is not, xyz will exit with an exit status of 1 after printing the following message to stderr:\n   \n   ```\n   Current branch does not match specified --branch\n   ```\n4.  xyz checks that the working directory contains no unstaged changes. If this is not the case, xyz will exit with an exit status of 1 after printing the following message to stderr:\n   \n   ```\n   Working directory contains unstaged changes\n   ```\n5.  xyz reads `name` and `version` from **package.json** and assigns these values to variables.\n6.  xyz uses the [semver](https://www.npmjs.org/package/semver) executable to determine the new version string by running:\n   \n   ``` shell\n   \"$dir/node_modules/.bin/semver\" -i \"$increment\" \"$version\"\n   ```\n7.  xyz presents a confirmation prompt:\n   \n   ```\n   Current version is 0.6.0. Press [enter] to publish ramda@0.7.0.▌\n   ```\n   \n   This provides on opportunity to abort by pressing <kbd>Ctrl</kbd>-<kbd>C</kbd>.\n8.  xyz runs the prepublish script with appropriate environment variables:\n   \n   ``` shell\n   VERSION=0.7.0 PREVIOUS_VERSION=0.6.0 'scripts/prepublish'\n   ```\n9.  The prepublish script updates Ramda version strings in **README.md**:\n   \n   ``` bash\n   README=\"$(cat README.md)\"\n   README=\"${README//\"$PREVIOUS_VERSION/ramda.min.js\"/\"$VERSION/ramda.min.js\"}\"\n   README=\"${README//\"${PREVIOUS_VERSION%.*}/ramda.min.js\"/\"${VERSION%.*}/ramda.min.js\"}\"\n   echo \"$README\" >README.md\n   ```\n10. The prepublish script adds **README.md** to the index:\n    \n    ``` bash\n    git add README.md\n    ```\n11. The prepublish script updates Ramda version strings in **ramda.js**:\n    \n    ``` bash\n    RAMDA=\"$(cat ramda.js)\"\n    RAMDA=\"${RAMDA//$PREVIOUS_VERSION/$VERSION}\"\n    echo \"$RAMDA\" >ramda.js\n    ```\n12. The prepublish script adds **ramda.js** to the index:\n    \n    ``` bash\n    git add ramda.js\n    ```\n13. The prepublish script runs `make ramda.min.js`.\n14. Make expands the body of the target to:\n    \n    ``` shell\n    node_modules/.bin/uglifyjs --compress --mangle --preamble '/*! ramda 2014-10-19 */' <'ramda.js' >'ramda.min.js'\n    ```\n    \n    The current date will appear in place of `2014-10-19`.\n15. The prepublish script adds **ramda.min.js** to the index.\n16. xyz updates `version` in **package.json** and **bower.json**, and adds these files to the index.\n17. xyz runs `git commit --message 'Version 0.7.0'`.\n18. xyz runs `git tag --annotate 'v0.7.0' --message 'Version 0.7.0'`.\n19. xyz runs `git push 'git@github.com:ramda/ramda.git' 'refs/heads/master' 'refs/tags/v0.7.0'`.\n20. xyz runs `npm publish`. **.npmignore** ensures that only the following files are included in the tarball:\n    \n    ```\n    - package/package.json\n    - package/README.md\n    - package/ramda.js\n    - package/ramda.min.js\n    - package/LICENSE.txt\n    - package/ext/debug/debug.js\n    - package/ext/impure/setProp.js\n    - package/ext/lazylist/lazylist.js\n    - package/ext/random/random.js\n    - package/ext/types/Either.js\n    - package/ext/types/Future.js\n    - package/ext/types/IO.js\n    - package/ext/types/Identity.js\n    - package/ext/types/Maybe.js\n    - package/ext/types/Reader.js\n    ```\n\n---\n### What this release process does _not_ do\n\nThis does not create nifty GitHub release thingamajigs (à la [ramda/ramda/releases](https://github.com/ramda/ramda/releases)). Instead, it creates run-of-the-mill releases (à la [davidchambers/xyz/releases](https://github.com/davidchambers/xyz/releases)). I don't know whether the fancy release notes are a GitHub-specific feature or whether GitHub is exposing Git functionality. I suspect the former, but I'll read about the feature to find out.\n\n**Update:** Having read about GitHub releases (the [blog post](https://github.com/blog/1547-release-your-software), the [help article](https://help.github.com/articles/creating-releases/), and the [API documentation](https://developer.github.com/v3/repos/releases/)) it's still not clear to me exactly how they work. I've learnt enough to be fairly sure that creating a GitHub release as part of the automated release process would prove more trouble than it's worth. I do find the release notes helpful when bumping my Ramda dependency, but the compare view (e.g. https://github.com/ramda/ramda/compare/v0.5.0...v0.6.0) is a decent alternative.\n",
    "head_branch": "xyz",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f008dfb6b84f2425b73",
    "number": 459,
    "body": "feedback please\n",
    "head_branch": "lens",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f018dfb6b84f2425b74",
    "number": 458,
    "body": "Hi, I'm megawac\n",
    "head_branch": "megawac",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 2825fa1f83c51ec78eda6bf7d3ef4bb3faa7cbed into f01bd2fa09860c43c02f598e6ed7f16b56e3be01"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f028dfb6b84f2425b75",
    "number": 456,
    "body": "Obviously slight (probably inlined function call) perf hit but it's going to be much better than it was last revision and kills some redundancy. `min` and `max` may also perform better for some edge cases with a slow `valueOf`\n",
    "head_branch": "max-min-abs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f038dfb6b84f2425b76",
    "number": 451,
    "body": "To go along with Lenses, I'd like to revisit the idea of pure setters.\n\nPing #398\n",
    "head_branch": "setPropAndPath",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f048dfb6b84f2425b77",
    "number": 450,
    "body": "There's no need to test each reference to a function individually.\n",
    "head_branch": "aliases",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 3efc1651d398d27f6a7d695157fc24fa911a6998 into e2970aa7bf18e54098c07b2e4c5cdc35a48f80f9"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f058dfb6b84f2425b78",
    "number": 449,
    "body": "This simple function is useful when working with objects in point-free style. Here's an example from actual code:\n\n``` javascript\n// toQuestionnaire :: Object -> {type,send:{questions:[{question}]}}\nvar toQuestionnaire = R.pipe(\n  R.prop('credentials'),                // :: {questions:[{question}]}\n  R.prop('questions'),                  // :: [{question}]\n  R.last,                               // :: {question}\n  R.pick(['question']),                 // :: {question}\n  R.of,                                 // :: [{question}]\n  R.mapEntry('questions'),              // :: {questions:[{question}]}\n  R.mapEntry('send'),                   // :: {send:{questions:[{question}]}}\n  R.mixin(R.mapEntry('type', 'questions'))\n);\n```\n",
    "head_branch": "map-entry",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f068dfb6b84f2425b79",
    "number": 448,
    "body": "This can be merged when we're ready to switch to [ramda/ramda](https://github.com/ramda/ramda).\n\nNote that we'll need to delete ramda/ramda, then _move_ CrossEye/ramda to ramda/ramda. This will ensure we carry over stars, pull requests, etc.\n",
    "head_branch": "ramda",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 69ba215730d5f87d0de47596b35668757e7c7185 into 9b7256c6b950926364d182933cacd10cc4379dfc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f078dfb6b84f2425b7a",
    "number": 443,
    "body": "This is largely a copy-paste-modify from core. I'm not too sure about the @sig stuff as I've not learned me a haskell.\n",
    "head_branch": "jsdoclazy",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 597a47d92742c9640be85f33e5604f79d2356a7c into 4aff000706919c6c3918dfc92d12d0b972e8c908"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f088dfb6b84f2425b7b",
    "number": 440,
    "body": "Opening for discussion. I'm not sure this is an improvement.\n\nPros:\n- declarative\n- could be applied throughout the module, at which point `noArgsException` could be removed\n\nCons:\n- stack traces report \"incorrect\" line\n- performance penalty if applied throughout the module\n\nHaving organized my thoughts, I don't think this is a good idea, but I'll open a pull request anyway as the ensuing discussion may be fruitful.\n",
    "head_branch": "no-args",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f098dfb6b84f2425b7c",
    "number": 439,
    "body": "Fixed spelling errors caught by @davidchambers \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge e04bf1c2122cc45221b5e1b2e250ae4c1ee12c0f into f5741f97430d3034892cfebf02282ae049df102d"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f0a8dfb6b84f2425b7d",
    "number": 438,
    "body": "",
    "head_branch": "compareKeys",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7ac4666d5d2643e13e065e4545c745b6ef75719c into 6614102fbb166370058b72630da57d86c392d7d8"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f0b8dfb6b84f2425b7e",
    "number": 436,
    "body": "R.pathEq determines whether the given, possibly nested, path of an\nobject has a  specific value according to strict equality ('===').\n\nThis function is implemented by passing the arguments to R.eq and using\nR.path.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f0c8dfb6b84f2425b7f",
    "number": 435,
    "body": "",
    "head_branch": "newIdentity",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b590129a4bf368db54665fa13de8a43f3a923a17 into 152180f4d92d68b5298389794bcd81ed364eedc0"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f0d8dfb6b84f2425b80",
    "number": 432,
    "body": "I put together this PR to add the `R.has` function. It is similar to [underscore's](http://underscorejs.org/#has) `_.has` function, except with the arguments reversed to make partial application more useful. Here are a couple of examples of its use:\n\n``` javascript\nvar obj = {\n  foo: 1,\n  bar: 2,\n};\nR.has('foo', obj);  //=> true\n\nvar list = [{foo: 1}, {foo: 2}, {bar: 3}];\nR.filter(R.has('foo'), list);  //=> [{foo: 1}, {foo: 2}]\n```\n\nThis is one of the few functions that I find myself reaching back to underscore for so it would be great to get an even better version of this in Ramda!\n",
    "head_branch": "bp-add-has",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f0e8dfb6b84f2425b81",
    "number": 426,
    "body": "> extending this whole placeholder concept to all our currying\n\nWell, for better or worse, here is an attempt.\n- First, I realize this a pretty big change. If it is not accepted, totally cool, hopefully its existence still somehow furthers the ramda cause even in defeat\n- I saw 0.6 was about ready to go, I doubt this would go in there, but I figured I better submit the PR before I found myself writing a `curry0` function (more on that in a bit)\n- got rid of `op`\n- It doesn't seem to be Ramda style to include inline comments. I have some in there (with at least one typo that I now see) but we can obviously get rid of those\n- I had to update `checkForMethod` to return a function with the proper arity\n- `curry2` is updated, and now `curry1` is a thing! Despite being a bit ugly, my totally unscientific testing showed it is (unfortunately) something like 5-10% faster. I did not rewrite `curry3`\n- `R.__` is defined as an object that we can test for with ===, as defining it as `undefined` or `void 0` can cause problems if someone actually wants to use `undefined` and ramda mistakes it for our placeholder.\n- In this implementation, I would say `R.__` is maybe not so much a \"placeholder\" as a \"skip\" concept. Passing in one or more `R.__` with no actual arguments just gives you back the function you already had.\n\nAlright, probably could go on but I think that is a enough to get the discussion started. Thanks!\n",
    "head_branch": "curry-anywhere",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f0f8dfb6b84f2425b82",
    "number": 425,
    "body": "Adds a global mutable reference to the impure extension.\n\nAside: I still do not seem to understand a thing about rebasing commits, so sorry, three commits and no idea what 47ad54e is doing here.\n",
    "head_branch": "STRef",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f108dfb6b84f2425b83",
    "number": 423,
    "body": "",
    "head_branch": "deedpoll",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge da90cdfc7f459d63be1e3ae276ca83f91b46aa7d into 846ff64336a8785d414f5dbfca553312f7301e95"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f118dfb6b84f2425b84",
    "number": 422,
    "body": "Third time lucky? #417\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f128dfb6b84f2425b85",
    "number": 421,
    "body": "ping #417\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f138dfb6b84f2425b86",
    "number": 420,
    "body": "Ping #417\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f148dfb6b84f2425b87",
    "number": 419,
    "body": "Resolves #417\n",
    "head_branch": "key",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge e7b7810e582ebf10016914f117b50bc4d9fb0cc0 into 1e71f9aebb8e28d179830826c6672518891aae50"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f148dfb6b84f2425b88",
    "number": 415,
    "body": "",
    "head_branch": "fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 65868ab22adf29ab340fc16151632fa29690db57 into 0893bfff946ada9e4244815a3a99e9517c842675"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f158dfb6b84f2425b89",
    "number": 413,
    "body": "Uses MDN polyfill to comply with ES3.\n",
    "head_branch": "trim",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 590bceb438542eb7ea7c01732e9e4383ce06f5c7 into a4de8bc6760854a20cd6de7b41cd0ea934f14183"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f168dfb6b84f2425b8a",
    "number": 412,
    "body": "",
    "head_branch": "small-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f178dfb6b84f2425b8b",
    "number": 410,
    "body": "",
    "head_branch": "typos",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d3ff92d2bc1c88252794af58a1ef195e5de9cbea into 178cb64cf967d0cf0e67a42e1a948956c89ff0c9"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f188dfb6b84f2425b8c",
    "number": 409,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5b3434951431f6b0d9c3ad97b24e37fec363a3df into aea0b5f6272d5e4c9f62a7bbc54d7a2a30f7a969"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f198dfb6b84f2425b8d",
    "number": 407,
    "body": "Added more unit tests to tests argument passing to condition functions.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f1a8dfb6b84f2425b8e",
    "number": 406,
    "body": "Adds a conditional function that can be used for the some of the following situations:\n\n```\nR.each(R.if(Array.isArray, function() {\n    // Perform operation only on arrays in our list\n}));\n\n// Flatten all arrays in the list while keeping all other value types\nvar flattenArrays = R.map(R.if(Array.isArray, R.flatten, R.identity));\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f1b8dfb6b84f2425b8f",
    "number": 403,
    "body": "http://jsperf.com/r-reverse-e\n\nCouple different options\n- fb5b242d474296abf23fd0e2e1953c10604c3cd6\n- via `map` a91f33bb9c07a0aa424fb9f6541bff0169258ac0\n- Refactor `_slice` c2729bbe21c659d596ab178619bd66a81e2038e3\n\nFeel free to punt this. I just hate `[].reverse`\n",
    "head_branch": "reverse",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f1c8dfb6b84f2425b90",
    "number": 399,
    "body": "properties are prepended with _ to allow functions left() and right()\nisRight() added to pass strict mode\n",
    "head_branch": "either",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f1d8dfb6b84f2425b91",
    "number": 396,
    "body": "I assume the missing tag is the reason `R.op` is treated differently from all the other functions at [ramdajs.com](http://ramdajs.com/R.html).\n",
    "head_branch": "op",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7dbf161b6dd41bf0c6ce1d04bae65c3bb64fbf3b into c9464e7eced23bde42f823791614f9790d4f33f7"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f1e8dfb6b84f2425b92",
    "number": 393,
    "body": "Grammar nazi mode on\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f1f8dfb6b84f2425b93",
    "number": 391,
    "body": "- Let invoker take the method instead of name and object.\n- Remove undefined-returning behavior.\n",
    "head_branch": "simplify-invoker",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f208dfb6b84f2425b94",
    "number": 390,
    "body": "Replace NO_ARGS_EXCEPTION singleton with an error factory.\nThis way when error is created it has the culprit function in the\nstack trace.\n",
    "head_branch": "no-args-exception-stacktrace",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 2e862cdfae7e31caffd7bc3ca349efc4440a5c7b into 9cbca365074cb805d4e821aa330a4ab2a6791931"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f218dfb6b84f2425b95",
    "number": 386,
    "body": "There is a semantic difference between a nonexistent property and a property whose value is undefined.\n",
    "head_branch": "placeholder",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f228dfb6b84f2425b96",
    "number": 385,
    "body": "",
    "head_branch": "gitignore",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7f572a6f8748f043c3fddb100c765fd7d179941a into 248f79c207dbe72b1782ad3c016a2ba5ff0f6478"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f238dfb6b84f2425b97",
    "number": 384,
    "body": "These were added in merge d8ee88b81ec7a575911e54ffb204e3fa43a24e2a\n",
    "head_branch": "remove-orig-files",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f248dfb6b84f2425b98",
    "number": 383,
    "body": "- Eliminate optional argument.\n- Remove unnecessary check for `arguments.length`.\n- Add unit tests.\n",
    "head_branch": "invoker-n",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f258dfb6b84f2425b99",
    "number": 380,
    "body": "Remove signatures from `@param` JSDoc tags since we now have the separate `@sig` tag.\nAdd descriptions to predicate function params.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 426b6f6b7b0693dedf0dce4ae83386add9f7df70 into 9705ade03f48ae5ccebccb0ff1a72b61890abfe9"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f268dfb6b84f2425b9a",
    "number": 379,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 091b25c91d608fc34c3aa57eef45d130beb1745c into 720dbc17dfa4c3d4a19ade2c7321572c0a5e7107"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f278dfb6b84f2425b9b",
    "number": 376,
    "body": "Cleaned up the ops examples.\n\nRegarding the commit message.. I changed the runExample function so that it creates a new function for each test with a name that includes\n- the function it is trying to run the test for\n- the line number from ramda.js\n\nThis way if it fails to compile the test, you will see in your stack trace something like `at Function.runExample.(anonymous function) [as runExample_R_useWith_543]` so it is easy to track down where things are going wrong.\n\nIf it is an actual assertion that fails, you will see the expression that was calculated, what it resulted in, and what the author thought it should have been.\n\nQuick note, I think it is a good idea to use the `R.` version of the function in examples rather than any local function name, as the examples are used to generate the docs at ramdajs.com and it can be strange to see an example not actually use the function it is demonstrating (and of course compliation will fail if there is not actually a local function with that name).\n",
    "head_branch": "example-ops-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f288dfb6b84f2425b9c",
    "number": 375,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f298dfb6b84f2425b9d",
    "number": 374,
    "body": "Having standalone config files is useful for text editor integration. Interacting with these tools from the makefile removes the need for the `grunt-` wrappers.\n\nThere are code changes because the **bench** and **examples** directories have so far escaped linting.\n",
    "head_branch": "lint",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge cefe22fc4018d51f06164e520167fb087d8a97ca into 6821e274422e2bfac4d6159507eed30b293bf703"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f298dfb6b84f2425b9e",
    "number": 373,
    "body": "",
    "head_branch": "nary",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 2d8a65a8a4b37fcb16d5a74b1b63857b864448d8 into 750f15fed39c2daf24688b78e4efa6ba193cbdb9"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f2a8dfb6b84f2425b9f",
    "number": 372,
    "body": "I don't see a reason to create some of the arity fixers up front, since each one is created at most once anyway.\n",
    "head_branch": "arity",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f2b8dfb6b84f2425ba0",
    "number": 371,
    "body": "",
    "head_branch": "lint",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 45f9b2ee0f57e2e616dc626d2126e1ae41a23e7a into 4d959501272f11600ce0e8488dd64e03eb97d271"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f2c8dfb6b84f2425ba1",
    "number": 370,
    "body": "",
    "head_branch": "deedpoll",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 489a86199b2761000c423123d3823423e91622ec into b39550030c26b2c6c5f7c3f9727b316f089ecb63"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f2d8dfb6b84f2425ba2",
    "number": 369,
    "body": "We should also settle on either `i` or `idx` for loop variables. (My vote is for the latter.)\n",
    "head_branch": "deedpoll",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7538bfb8abb217637029f5ed507f6b529e8a1f06 into c43bee56379c6cdf3c61ea0d4ac9fd168a586f15"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f2e8dfb6b84f2425ba3",
    "number": 368,
    "body": "",
    "head_branch": "ops",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 7a09ab3fbf1a6b2717df81e3f271e7d633eb7e7f into b9a641ff9223b9105e038955a0539f05eda7e448"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f2f8dfb6b84f2425ba4",
    "number": 367,
    "body": "",
    "head_branch": "zip-doc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 66a434b214ad147afd019a8c1b86336c073dde63 into 7f24c4b41d65e48a51bee6865d4ac3c70617e676"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f308dfb6b84f2425ba5",
    "number": 365,
    "body": "I've create a Reader monad, including UMD, which is now also added to IO.\n\nA few corrections to examples are included too. Did not intend to PR that yet, but I do not know how to exclude files from a PR...\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f318dfb6b84f2425ba6",
    "number": 363,
    "body": "Supersedes #350\n",
    "head_branch": "is-atom",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f328dfb6b84f2425ba7",
    "number": 362,
    "body": "(This pull request replaces #327)\n\n`curry :: (* -> a) -> (* -> a)` for normal usage\n`curryN :: Number -> (* -> a) -> (* -> a)` for variadic functions\n",
    "head_branch": "curry-n",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge afc2d9484fa6605551d975764342f81fcfbbab50 into 268451d19dee71091d0157771a9572172988dab7"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f338dfb6b84f2425ba8",
    "number": 361,
    "body": "Alright, here is my Frankenstein imperative/functional mocha test for the examples. There was really no hope I could write anything properly functional in a couple days so I just got what I had written to pass the lint checker and here it is.\n\nBasic idea:\n- parse the function comments (and function declarations for mocha it() descriptions)\n- extract example, parse example so we can test the //=> 'eg' as assertions\n- inject our executable example source as a function in ramda (so that we can also run internal function examples)\n- run our example function, see what happens\n\nIf you want to see all the assertions being run, you can just add `console.log(msg);` to `assertPairEqual` (maybe grunt option for more verbose?)\n",
    "head_branch": "mocha-examples-test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f348dfb6b84f2425ba9",
    "number": 358,
    "body": "Hi all,\n\nI just recently stumbled on this whole \"functional programming\" thing and shortly after that stumbled on ramda. Seems really neat!\n\nI noticed an error or two in the examples, one thing lead to another, and I ended up writing a mocha test to compile and run all the examples. I went through and tried to get them all in working order. I changed some around slightly but mostly just little syntax fixes.\n\nThis commit only includes my fixes to the examples. If you would like me to add the mocha test that compiles and runs the examples as well, let me know and I will issue a separate pull request. Thanks!\n",
    "head_branch": "example-updates",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f358dfb6b84f2425baa",
    "number": 357,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f368dfb6b84f2425bab",
    "number": 356,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d41d6ad5eb9eee37d7e5b8f67fcd9621d89f9b5d into 023350ba00cae8e27a34fb0b9bc8ccf5187f2123"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f378dfb6b84f2425bac",
    "number": 354,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge e93181cc6764fe5516c5d61f598980aadf4b495b into c4d992ed1a5dab05cf08e6c288b73840ae3dada9"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f388dfb6b84f2425bad",
    "number": 353,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f398dfb6b84f2425bae",
    "number": 352,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge db44406d948232e1ef13860a48d354a1a913e3f5 into deaeb3402b9d48652e0dd848f16d77f2a01d6453"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f3a8dfb6b84f2425baf",
    "number": 351,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f3a8dfb6b84f2425bb0",
    "number": 350,
    "body": "You might wait to merge this until you're ready to release 0.5.0, so it doesn't go out in a patch release.\n",
    "head_branch": "is-atom",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f3b8dfb6b84f2425bb1",
    "number": 349,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f3c8dfb6b84f2425bb2",
    "number": 348,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ba63cde286e9cdd01fa8367172cf3f7477fb771b into cf07ef6fed2c224b9e36a88f9edc34e4900c3a8d"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f3d8dfb6b84f2425bb3",
    "number": 347,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 54cc5d57a3593d23422137dbe37c9e3b55dc258c into 17d68722d311ac59206d5a1a6812538d5dbb52e0"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f3e8dfb6b84f2425bb4",
    "number": 346,
    "body": "Reverts CrossEye/ramda#345\n",
    "head_branch": "revert-345-browser-tests",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 0fe922f8c38d598a663b23eeee2fea6483f52c76 into 56036e752639484c3c1617e617390619dabf0408"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f3f8dfb6b84f2425bb5",
    "number": 345,
    "body": "Currently, we include expect.js which we then wrap to conform to the API of Node's assert module. It's much simpler to add [Jxck/assert](https://github.com/Jxck/assert) as a dependency.\n\nThere's no need to have **mocha.css** and **mocha.js** in the repository, either. :)\n\nHaving removed these files, the only file remaining in **lib/test** was **require-shim.js**, so I embedded it in **index.html** once again. So long, **lib/test**!\n",
    "head_branch": "browser-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge e5bbf77a0f5b7b29918752f18f4edea057a059f3 into 4736201422619a495005f70a335d5d6610c4e611"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f408dfb6b84f2425bb6",
    "number": 344,
    "body": "See https://github.com/CrossEye/ramda/pull/341#issuecomment-54105648\n",
    "head_branch": "test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f418dfb6b84f2425bb7",
    "number": 343,
    "body": "These commits are a tiny first step towards merging my ES6 modules branch.\n\nThey add support for running the Ramda.js test suite using the Testem test runner, which allows tests to be run across different browsers with results shown in your terminal, and live-reloaded as any changes are made to production code or test code.\n",
    "head_branch": "testem",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f428dfb6b84f2425bb8",
    "number": 342,
    "body": "",
    "head_branch": "dependencies",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge e73c555bdf0ad76e40896c0e6ffe8bc035e8419a into 4334a727213d8211f9cf620be09144f97e9970c9"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f438dfb6b84f2425bb9",
    "number": 341,
    "body": "The `is` test file was not included in test/index.html, and so its tests were not run. This commit adds it.\n",
    "head_branch": "run-is-test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 30237b1f6db171d12efaa3d4e7468c07142601b9 into ea2bea335b38f8c69db6e7da2387c836543c48d5"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f448dfb6b84f2425bba",
    "number": 340,
    "body": "Calling `R.skip(n, list)` for `n >= list.length` would result in an error being thrown. Instead,\nthis commit causes an empty array to be returned.\n",
    "head_branch": "fix-skip-bug",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge cff57033fbc96e6ff6b04ab712da2875a0c5d161 into d1536dd89e6405f73914465c61c3593a9da75892"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f458dfb6b84f2425bbb",
    "number": 338,
    "body": "example now has the right order ( fn, acc, list )\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1354d85a5c785ad3da0b92d00351cd44938bc7a7 into 639e10f6394201ab33a241b321064c271f8de470"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f468dfb6b84f2425bbc",
    "number": 337,
    "body": "check in test file too\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge dbb473742383f1a383613f1e8bd9428b6419a538 into 8f6c04518e913aff06c354bf2770cffbaf2bba78"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f478dfb6b84f2425bbd",
    "number": 336,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 24f2120feea91151849d16744a65aa44a5792f08 into 5c2a56e7eccae9f54aa95de6d98dd931354504de"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f488dfb6b84f2425bbe",
    "number": 334,
    "body": "The wrong argument of `mathMod` was being checked for being less than 1. As a result, it was not actually computing values as advertised.\n",
    "head_branch": "fix-mathmod",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f498dfb6b84f2425bbf",
    "number": 333,
    "body": "This fixes two issues:\n\n(1) If only the first element of an array matched the predicate, neither findLast nor findLastIndex\nwould report is as present.\n\n(2) More critically, if queried with an empty array, both functions would enter into an infinite\nloop.\n",
    "head_branch": "fix-find-last-bugs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ca9e5be75cf24ede32e8c8206b492633242068c1 into bd2a0f15aa2ae420aff9d4ae58f2d849cb0943f2"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f4a8dfb6b84f2425bc0",
    "number": 332,
    "body": "Please look at the individual commits to see the explanations for each section of changes.\n",
    "head_branch": "topic/Docs_improvements",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f4b8dfb6b84f2425bc1",
    "number": 331,
    "body": "Related to #319\n",
    "head_branch": "slice",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 21813b90e2cef3f4d284cb97959fb5e1e8201e9e into d8f76bff6fc1df0b8b2b3cd2eb19edc0ef7a7dbd"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f4c8dfb6b84f2425bc2",
    "number": 330,
    "body": "Rationale:\n- **Consistency.** Currently we use a mixture of `foo` and `R.foo` internally.\n- **Clarity.** It's easy to differentiate private and public functions when public functions are prefixed with `R.`.\n",
    "head_branch": "aliases",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f4d8dfb6b84f2425bc3",
    "number": 329,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 39130570b4635023f81deee70f532d8695010b7a into f43cb50e901b96db9fc423cdc6d995a0f93e9830"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f4e8dfb6b84f2425bc4",
    "number": 328,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge fdfe0cefa31c6731cae36c95c7f590bba70e8e12 into 7f9e0e13c6723fedc2e4323247c7fe8cf1bd5345"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f4f8dfb6b84f2425bc5",
    "number": 327,
    "body": "`curry :: (* -> a) -> (* -> a)` for normal usage\n`curryN :: Number -> (* -> a) -> (* -> a)` for variadic functions\n\nDiscussed in https://github.com/CrossEye/ramda/pull/319.\n",
    "head_branch": "curry-n",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f4f8dfb6b84f2425bc6",
    "number": 324,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 9a44a7202c3b9f3b8d9dc43d77e6624d280faa9d into 69ec6e27b4eace7bcaebf6702bebd98a7e4302c2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f508dfb6b84f2425bc7",
    "number": 323,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f518dfb6b84f2425bc8",
    "number": 322,
    "body": "",
    "head_branch": "move-alias",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f528dfb6b84f2425bc9",
    "number": 321,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 288070ed8ed6478cfb2e43ab5b7adec6a7c01ffc into 6293f7a943ea0d6c12caf58351aba568642718d4"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f538dfb6b84f2425bca",
    "number": 320,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7ab94bd838c37f60094363a1a482c8d54430a7e3 into 9235b308173fb622d6660d0229f67f12876e497b"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f548dfb6b84f2425bcb",
    "number": 319,
    "body": "Switching based on number of arguments is _The Ramda Way_. Type checking should be the measure of last resort.\n",
    "head_branch": "curry",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 98ea9b6620816ac0287d7adbf74e42dc20df2237 into 0f841a5b9336185a8093874122d1b6336bc08d44"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f558dfb6b84f2425bcc",
    "number": 318,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 772d9f6e7b1118c2999e9b16aeb77808b93baa88 into fbdde226708e14198ce9a7a70ce7953763c5fcee"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f568dfb6b84f2425bcd",
    "number": 317,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge eb41a854eec33ba7e680f656392463bce1d51f57 into b30cc36a03f5af13d99c73c41bbcb6a6dbc08082"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f578dfb6b84f2425bce",
    "number": 316,
    "body": "- Remove dynamic dispatch from `reduce.idx`, `reduceRight.idx`, `map.idx` and `filter.idx`.\n- Add `foldl.idx` and `foldr.idx` aliases to the docs.\n",
    "head_branch": "remove-idx-dispatch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f588dfb6b84f2425bcf",
    "number": 315,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f8332997990bdc872a8cdce4c22a4390b5871b4b into 4b8f8d78dafca0fd1ca9817382e849c8f022d5ba"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f598dfb6b84f2425bd0",
    "number": 314,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f5a8dfb6b84f2425bd1",
    "number": 311,
    "body": "- Add new tests for nAry that didn't have tests before.\n- Add test for currying eq.\n- Add tests for eq, where and propOrDefault with 0 args.\n- Fix eq to throw with 0 args.\n",
    "head_branch": "test-arity",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f5b8dfb6b84f2425bd2",
    "number": 310,
    "body": "- partially\n- checkMethod with 4 arguments\n",
    "head_branch": "remove-unreachable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f5b8dfb6b84f2425bd3",
    "number": 309,
    "body": "",
    "head_branch": "remove-any-blanks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge c78387acc749bb4ec23e9724656e0023e3b61cde into f51f17db9c9db71799948ef87685c2bceea1baec"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f5c8dfb6b84f2425bd4",
    "number": 308,
    "body": "Fix `@see` tags: Point to R.{methodName} so links work in the docs. (And only one `@see` reference per line.)\n\nReplace obsoleted aliases: all->every, any->some.\n\nFix `useWith` name in example.\n",
    "head_branch": "more-jsdocs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7824ab72302227fd5929bed2b56932f4a877d3a2 into d82e8d0617bf98dc97382469f64fc1e16f605c6e"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f5d8dfb6b84f2425bd5",
    "number": 306,
    "body": "JSDoc doesn't recognize functions curried with our curry\nfunction properly without a `@func` annotation.\n\nReplaced the `@static` tags with it, since `@static` seems\nredundant (JSDoc inferred it correctly without the tag) and\nI didn't want to increase the number of tags required.\n",
    "head_branch": "jsdoc-annotation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f5e8dfb6b84f2425bd6",
    "number": 305,
    "body": "This has been discussed in the past. I believe it's a good idea.\n\nThis will break backwards compatibility. Those who which to update without doing a find and replace can define their own alias:\n\n``` html\n<script src=\"path/to/ramda.js\"></script>\n<script>window.ramda = window.R</script>\n<script src=\"path/to/myapp.js\"></script>\n```\n",
    "head_branch": "global",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b0e0ad6d08eef2746df8bebd38f947b9273b715f into f15cb9bdb24b6a27618be22f2faf7794491c6c7f"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f5f8dfb6b84f2425bd7",
    "number": 304,
    "body": "I believe this file is no longer used.\n",
    "head_branch": "delete-file",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b4760e3878c67cf6580925c3370745b817d1022b into 0feb1911f585565b6efe0ac3d4c902c49bd1bced"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f608dfb6b84f2425bd8",
    "number": 303,
    "body": "**Pro-tip:** Append `?w=` to the URL when viewing these changes to see a meaningful diff.\n\n---\n\nOverview:\n- normalize function formatting:\n  - function statement: `function f() {}`\n  - function expression: `function() {}`\n- `disallowQuotedKeysInObjects: true` (e.g. `{foo: 42}` rather than `{'foo': 42}`)\n- `requireSpaceAfterLineComment: true` (e.g. `// comment` rather than `//comment`)\n- `validateIndentation: 4`\n\nI prefer two spaces for indentation, and this style is currently used in some of the project's files, but **ramda.js** itself uses four spaces so I went with that. If you'd like to switch to two spaces I'll update this pull request. :)\n\nHow is **ramda.api.js** used?\n",
    "head_branch": "jscs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f618dfb6b84f2425bd9",
    "number": 301,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge c1937bee0ed6f92db1cd0fc722f8dd4f6d1fb916 into 680491985d97e55240cf265d3771669fe6170b9b"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f628dfb6b84f2425bda",
    "number": 300,
    "body": "Added utility method to get the list of function names in the object just like underscore of lodash _.functions or _.methods\n\nUseful to create the Ramda plugins for example ramdangular\n\nIts easy to get the list of utility functions Ramda has and make them available to the $rootScope in Angular\n\nR.functions(R)  --> will return all the function names Ramda supports\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 3d7f2fb7243cf3c3dc11c0a1f5f8af79b763a54f into a7bd2ca1ccd914f766e50e8b0ed623d639588f6a"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f638dfb6b84f2425bdb",
    "number": 299,
    "body": "Currently we have:\n\n``` javascript\n..., function(global) {\n    'use strict';\n    return (function() {\n        ...\n        return R;\n    }());\n});\n```\n\nOne function wrapper is sufficient:\n\n``` javascript\n..., function(global) {\n    'use strict';\n    ...\n    return R;\n});\n```\n",
    "head_branch": "wrapper",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 3a62bb63f315582106db8dc56a0dc1c097b0b4ec into 8b1e1d3501ef4043dcc9d7f8cae5e43aa1a4def5"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f648dfb6b84f2425bdc",
    "number": 298,
    "body": "These rules don't necessitate any code changes, but they may avoid future style violations.\n",
    "head_branch": "jscs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 79030d00e38bd3bbf50e835654546b2d8892bb0a into a005e5bfb295aea6aafaa06a33aab71665ce1000"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f658dfb6b84f2425bdd",
    "number": 296,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge bdac4042e07e142ca276277f76ed419c85f655f7 into f048b1ba3ed73b2bf0f0a2c12bc25a21b2c8f684"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f668dfb6b84f2425bde",
    "number": 295,
    "body": "",
    "head_branch": "clone",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d279b631df3cdbf6c0afcaf56f7583ea8a90c6f5 into fb07010d82560ed534cc56d2db708a9652fc2931"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f678dfb6b84f2425bdf",
    "number": 294,
    "body": "These changes should not be controversial: they simply bring everything in line with the project's prevailing formatting.\n",
    "head_branch": "jscs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f688dfb6b84f2425be0",
    "number": 293,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge e43d6efb4704db294942b710c22ef59c05ee0a64 into f51bcc4e47c8a4e0701694e4fc32aaa744ac514c"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f698dfb6b84f2425be1",
    "number": 292,
    "body": "Consistency is nice!\n",
    "head_branch": "jscs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f6a8dfb6b84f2425be2",
    "number": 291,
    "body": "Reasoning:\n- explicit is better than implicit;\n- `R.installTo(global)` reads nicely, but `R.installTo()` does not;\n- requiring all arguments is “the Ramda way”; and\n- it’s simpler to document.\n",
    "head_branch": "install-to",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 8a18bf4bdc4a3a5f1964be19bb23bbb722e67cf6 into 2407b6850f056f711c822c48c0408786ae0fea34"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f6b8dfb6b84f2425be3",
    "number": 290,
    "body": "Added utility method to get the list of function names in the object just like underscore of lodash _.functions or _.methods\n\nUseful to create the Ramda plugins for example ramdangular\n\nIts easy to get the list of utility functions Ramda has and make them available to the $rootScope in Angular \n\nR.functions(R) or R.methods(R) --> will return all the function names Ramda supports \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f6c8dfb6b84f2425be4",
    "number": 289,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b590fdcc3a41322875cc7a8b3434e85c757d2b18 into 9d3f9a4943549c025cdd1284b7c766d0d99cea02"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f6d8dfb6b84f2425be5",
    "number": 285,
    "body": "",
    "head_branch": "whitespace",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f6e8dfb6b84f2425be6",
    "number": 284,
    "body": "",
    "head_branch": "curry2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f6e8dfb6b84f2425be7",
    "number": 283,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5b2f40fcdb761f93243be8d01a973c13bd69d977 into 5e887a0b2f3593a7f23583ece5210562af4a969d"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f6f8dfb6b84f2425be8",
    "number": 282,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b2e483c22798ec591a078ea0c61bb90a3b9c9ffd into 74cb08d1d923a5a1b69e1a5fe9a933496342a010"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f708dfb6b84f2425be9",
    "number": 281,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge caec1898fbc589dbbdc0159c03812cefbf360d62 into cba5fe089acf1df3ad6bfabe916518b8735f9f29"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f718dfb6b84f2425bea",
    "number": 280,
    "body": "JavaScript provides a convenient, well-understood mechanism for defining aliases:\n\n```\nvar alias = canonical;\n```\n\nLet's use it! :grinning:\n",
    "head_branch": "aliases",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f728dfb6b84f2425beb",
    "number": 279,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7ef25d24ed0375aaf69a93dff7d9ccb69736636d into 3592ceea0b49914e39f44c8ee0787012e6e19997"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f738dfb6b84f2425bec",
    "number": 278,
    "body": "The documentation for chain is a little confusing as is. The description implies that the input function needs to map a nested list to a nested list. This is one valid use case, but definitely not the only one.\n\nI changed the description of the function to Haskell's documentation for [concatMap](http://hackage.haskell.org/package/base-4.7.0.1/docs/Prelude.html#v:concatMap) and changed the example to include a function that works on a flat input list.\n",
    "head_branch": "chain",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 389eca52dca9824bfb66fe1df21c77bf8a5e5612 into e8cbd2af4270b7b27c1a8f6cc64117e59f4fe41e"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f748dfb6b84f2425bed",
    "number": 276,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b6caa302478664af638edcf193888824df2e4472 into 72a7ba3471528fad637d140f329a7c91b686f344"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f758dfb6b84f2425bee",
    "number": 275,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 340edd8d6ce57747532372cb61ffed7d789d197b into cad558b9e3edab64eaa588a163d981a634aa4e7c"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f768dfb6b84f2425bef",
    "number": 274,
    "body": "",
    "head_branch": "func",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge fde004a1e9170496a62dbc06fae55c57d3d9a710 into 3ef4a86df799401057136b434b57fe15f3ade8a7"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f778dfb6b84f2425bf0",
    "number": 273,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5b80860ad6b8dac1960c397bf5cffadc7996a9d3 into d35a671bb925f8d4103f1c11a5510a390b43b4fa"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f788dfb6b84f2425bf1",
    "number": 271,
    "body": "Closes https://github.com/CrossEye/ramda/issues/270\n",
    "head_branch": "prop-without-args",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1fd426a9415a7842b0adb0d6dfd3529d07115597 into c8cf56d7cc4ea0111ccd51538a7499fea258f1ce"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f798dfb6b84f2425bf2",
    "number": 269,
    "body": "",
    "head_branch": "func",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f7a8dfb6b84f2425bf3",
    "number": 268,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 28be1b8e0d7d5a15838ed524fb9d810f8960fa8b into 0f702092557d51442469599005459500c70af1e9"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f7b8dfb6b84f2425bf4",
    "number": 266,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f4bfc5f6cee56ca3bd237f673df79f55d533d456 into bc2af743336e183142192f9da93b5b2f49a12d4a"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f7c8dfb6b84f2425bf5",
    "number": 265,
    "body": "Closes https://github.com/CrossEye/ramda/issues/263\n",
    "head_branch": "prop-or-default",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f7c8dfb6b84f2425bf6",
    "number": 264,
    "body": "Like `construct`, but takes the arity as an argument, making it usable with variadic constructor functions.\n\nConstructing `Date` objects is still not supported and a note about this has been added to the docs.\nSee https://github.com/CrossEye/ramda/issues/245 for discussion about `Date`.\n",
    "head_branch": "constructn",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 8304196ba809c4a9b100dce47e10b21b8b2289d0 into 6102df929850e664f3f6223fcfc66d926028ba1b"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f7d8dfb6b84f2425bf7",
    "number": 262,
    "body": "Some examples were using incorrect/old names for functions.\nAlso fixes the name for `R.sortBy` (`sortyBy` -> `sortBy`).\n",
    "head_branch": "fix-examples",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 0f6683358466d36a274ef4de9be945332503061b into 7ff47431796ee26e4804070871f7815c8ca6ca7b"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f7e8dfb6b84f2425bf8",
    "number": 261,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge aa88a08cc1817c2822fabcf03ecc7005c3f67dce into 19f75a7b33271063e71ad8537bc506cdb9d05628"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f7f8dfb6b84f2425bf9",
    "number": 260,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 6761f21f5921c9800c5599a50f281da2f6d1359b into b53aa20f130ab676d4522118ac1a6a61d176190a"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f808dfb6b84f2425bfa",
    "number": 259,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge dc12ae713017c7968c7a1566554cccc24a2163f6 into 26d717cbeff02cfcdc00d0a4e1fea7f61025ed5e"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f818dfb6b84f2425bfb",
    "number": 258,
    "body": "",
    "head_branch": "partition",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 0d74f83f29397397afd1251ecf92e2b619190e7b into 2f55da36322b99132dc85cda3f972d6f8fad858d"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f828dfb6b84f2425bfc",
    "number": 257,
    "body": "Like a lot of other folks (especially those coming from Lodash/Underscore), I frequently find myself reaching for `foldl` when dealing with plain objects. Converting the object to an array before passing it to `foldl`-like functions is both verbose and has some significant disadvantages. Currently, most Ramda functions only work on arrays, but I'd like to change that, starting with `fold`-family functions.\n\nI see this as more of a conversation starter than anything, since work to be done here before this PR is ready. I'm not satisfied with the current implementation of this for a few reasons:\n- Currently, because `foldl` is decorated by `checkForMethod`, this wastefully checks whether or not the target is an array twice--once in the `checkForMethod` call, and again in the body of the function when checking which function to dispatch. I can conceive of a few ways to get around this, but not without fairly significant refactoring (e.g. I think the `checkForMethod` decoration pattern is a little inflexible as is; I'd pull the check back into each function body, and maybe refactor the dispatching code into a separate function `dispatchMethod`).\n- I'd want to amend this PR before merge to include a patch to all fold-like functions (`foldl.idx`,  `foldr`, etc.) to keep the assorted interfaces consistent.\n\nA broader topic of conversation is to extend this kind of polymorphic functionality to functions other than `foldl` (e.g. `map` `any`, etc.)--many list-oriented functions are useful whether the input list is an array or an object.\n",
    "head_branch": "feat/polymorphic-foldl",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f838dfb6b84f2425bfd",
    "number": 256,
    "body": "",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 35e69af53a4b7c50613e83e701c1c8f13df22489 into 75e9d27cbfc69cd30c4fe57478dd27c65cda728b"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f848dfb6b84f2425bfe",
    "number": 253,
    "body": "Fixes #251\n",
    "head_branch": "test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f858dfb6b84f2425bff",
    "number": 252,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge a8f98ee670d3c94161ff8453d55c6b3eba192506 into 24b249352b4faa103bda5aa907bad6d46ade7f45"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f868dfb6b84f2425c00",
    "number": 248,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 825628c42c712bb240002637a03e0af11f777be9 into 22b66b6f31681a7667cf5e8d88275750d4872246"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f878dfb6b84f2425c01",
    "number": 247,
    "body": "Related to #216\n",
    "head_branch": "pipe",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f888dfb6b84f2425c02",
    "number": 243,
    "body": "I was doing some dynamic RegExp creation and noticed that when using construct with RegExp it created the object with the defaults, for example:\n\n``` javascript\nvar regex = construct(RegExp);\nvar word = regex('word', 'gi');\nconsole.log(word.source); // => \"(?:)\" should be \"word\"\n```\n\nThe code is based on this SO answer (http://stackoverflow.com/a/3362623), this could work with Date and others but to keep compatibility (according to #80) I didn't used `bind` or `Object.create`.\n",
    "head_branch": "construct",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b3014a188200575a8e542c0eeb01e71a2e6bd11d into 8d2a0d245edafa1ded09e8dd99faf6149949da3a"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f898dfb6b84f2425c03",
    "number": 242,
    "body": "in future run \"grunt push:$LEVEL:bump-only\" to update package.json. bower.json, & ramda.js before publish. gotta work in updating README urls with latest version as well.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 9c6a737b05d22f92c9a9cc7796c0a4ae1b9ea335 into d16d6fdf3323c42fe0e05c602d14c8fdd2043372"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f8a8dfb6b84f2425c04",
    "number": 241,
    "body": "",
    "head_branch": "import",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ad66405674e00804fc660a69e6da34112afcfee0 into 0492e99febceb51315f85e544cc7adb6fb148bbb"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f8b8dfb6b84f2425c05",
    "number": 239,
    "body": "",
    "head_branch": "lint",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f8c8dfb6b84f2425c06",
    "number": 238,
    "body": "Before:\n\n``` javascript\n> isArrayLike(new String('foo'))\ntrue\n```\n\nAfter:\n\n``` javascript\n> isArrayLike(new String('foo'))\nfalse\n```\n",
    "head_branch": "array-like",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f8c8dfb6b84f2425c07",
    "number": 236,
    "body": "Before:\n\n``` javascript\n> isArrayLike({length: 0})\n0\n```\n\nAfter:\n\n``` javascript\n> isArrayLike({length: 0})\ntrue\n```\n",
    "head_branch": "array-like",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge de8434fdda7167eb573a9da30444932f236a8835 into 52061842e3d3d0653d021a8b3298a2ee9a9ce2b3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f8d8dfb6b84f2425c08",
    "number": 235,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f8e8dfb6b84f2425c09",
    "number": 234,
    "body": "",
    "head_branch": "trailing-whitespace",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f8f8dfb6b84f2425c0a",
    "number": 233,
    "body": "Not only does this change remove ≅200 lines of code, it makes it easy to differentiate functions defined in the test suite from Ramda functions.\n\nI would go further and remove the aliases in **ramda.js**, but that's a controversial change.\n",
    "head_branch": "aliases",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f908dfb6b84f2425c0b",
    "number": 232,
    "body": "Reverts CrossEye/ramda#231\n",
    "head_branch": "revert-231-master",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 8944c2e45537be98b8953b600b4afd656039ed09 into 15f6f1f077decafe37d23518bee3a640a5b3b5bb"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f918dfb6b84f2425c0c",
    "number": 231,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge eda92fa6cf506bf920c62fcf3160d3553339fa91 into e575307d6bf15fa2c339347de3472fc6ae9cc122"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f928dfb6b84f2425c0d",
    "number": 229,
    "body": "",
    "head_branch": "test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 97126a20632a979d9fe104f1967468ee100f3933 into 61db9c2b60af00d477d1c60a313a4664f518bf7c"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f938dfb6b84f2425c0e",
    "number": 228,
    "body": "Closes #219\n",
    "head_branch": "is",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d02645b0767c313b44d6c70a69a759715e5e30e4 into 7cd1fb861a627f731f43fcad194e93b329a800b3"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f948dfb6b84f2425c0f",
    "number": 227,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 460d68f3b95e29532bc3a31dcdb0d47d4d93edc2 into 91af973461ae3da68f3b167305d5b1a88154f265"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f958dfb6b84f2425c10",
    "number": 226,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f968dfb6b84f2425c11",
    "number": 224,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b64610f082fc3b968e304d7c55c49d8526b4c450 into 76feb44e4b39375ed9d9e7af4bedcd93ba291095"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f978dfb6b84f2425c12",
    "number": 223,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1163efc780f6cf96480649afe5d877bf4d53945c into 603c89e611ed252993e8e3a2f891062798e50883"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f988dfb6b84f2425c13",
    "number": 221,
    "body": "Closes #220\n",
    "head_branch": "partition",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f998dfb6b84f2425c14",
    "number": 217,
    "body": "https://github.com/CrossEye/ramda/commit/d234d032db2e7f4bdfbb976b34031d211d6a472d#commitcomment-7116091\n",
    "head_branch": "undefined",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b98e88855fb8816828db00b5419abba1e32c156d into 4024b35707a75e0ec3237ca9c792c773eb0bb9fb"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f9a8dfb6b84f2425c15",
    "number": 216,
    "body": "Fixes #215\n",
    "head_branch": "compose",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 9888c6e0020ef794336c0c18b8bbf8f6e290b711 into 5134ca2f62061d4477cef283297de0e7a9fbfec8"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f9a8dfb6b84f2425c16",
    "number": 214,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b42f4806588ad5c671b526297ea0aee8fa483edd into 57c28a0680300ffbaef746f0759bd4df5fafc15e"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f9b8dfb6b84f2425c17",
    "number": 212,
    "body": "",
    "head_branch": "fix-example",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 011d643411eb3f0e6bb8af931e1fc5045b74c142 into b8ed414164f2816e7b454c9f8e41079051c1adce"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f9c8dfb6b84f2425c18",
    "number": 211,
    "body": "Because an API reference alone doesn't give a feel of functional programming with Ramda.\n",
    "head_branch": "introductions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7f9d8dfb6b84f2425c19",
    "number": 207,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7df980f0e532d248047efdd7c3582a526bf228bd into 12bfec69d0a131ce3a05688273dc81991ac9dda1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f9e8dfb6b84f2425c1a",
    "number": 206,
    "body": "[see pix](http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html#applicatives)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 711f1f28711a1aa438f1dc72443d53d1ffd447a2 into 5124125f5515b1ce0fd188ad47944b34d8f502eb"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7f9f8dfb6b84f2425c1b",
    "number": 205,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 3744bf1ec0b238780351c0dc386ab7f95cc26497 into fef2829a7649bf5bd460c3c484a7ef9a3cf2a838"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7fa08dfb6b84f2425c1c",
    "number": 204,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge df697924cb5f662522ad9b1a36a48bce4a0abfde into 0018f70176f5876085cff5320ce1bcdb0d615128"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7fa18dfb6b84f2425c1d",
    "number": 203,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 8f2c2159a3d02903eeada8066e9531b669b8305a into 90d7d3b5ce379ab4cb1d87499e6301bb90202e59"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7fa28dfb6b84f2425c1e",
    "number": 202,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 097b253c0419a481201e2ae0704131f55e186617 into bdd103a84b86177f7ffac714559b0ab5e9f871a9"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7fa38dfb6b84f2425c1f",
    "number": 201,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge c5cc68a2476e1cd27fdf5e1cd72edaddce71e179 into 7c696752b90122e5888075a77e9d7e9f0f2ac5c5"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7fa48dfb6b84f2425c20",
    "number": 200,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 6d703faeaa22eb84b5f72bf075750bb0a992b961 into 54337ddbdda973ee24bd162f9836ac834509f43d"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7fa58dfb6b84f2425c21",
    "number": 199,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ffcde234be8a7cef62317cd72fee7d56e10af362 into 4e6cd51c6b228d8be6265230792c826508a7951c"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7fa68dfb6b84f2425c22",
    "number": 198,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge e367af03fc5042048a5c862c6bbb0a13ddd1c934 into 747c4e6761eafc3ee2328ec09d24c344cfadd3e6"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7fa78dfb6b84f2425c23",
    "number": 197,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fa88dfb6b84f2425c24",
    "number": 196,
    "body": "",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 8b45635bf562fc56ade4e8fff1b03753f3358b0a into 48827c076dff15e286ad18112eaa340be93791dd"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fa98dfb6b84f2425c25",
    "number": 195,
    "body": "excuse the trivial pull request.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7faa8dfb6b84f2425c26",
    "number": 194,
    "body": "Getting burnt out on docs. Anybody think they could step in for a bit on this?\n",
    "head_branch": "topic/Even_more_JSDoc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 6a4b361332031cd57ca4df592adf5de3235e90d1 into b3837fcbbf28024e93ac90ac32da7fc71ad34097"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7faa8dfb6b84f2425c27",
    "number": 193,
    "body": "Use a wrapper to do the `hasMethod` check. If the `obj` doesn't have the method call the `ramda` implementation. The call stack is the same so performance shouldn't differ much.\n\nThis change makes it easier to wrap the `hasMethod` check so we can implement it pretty elegantly on `skipUntil`, `find`, etc (not in this patch)\n\nThis is perhaps another argument for keeping an internal reference to internal implementations -- we can fully now avoid the `hasMethod` lookup which is far from free. Thoughts @CrossEye\n",
    "head_branch": "checkMethod",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fab8dfb6b84f2425c28",
    "number": 190,
    "body": "Current take is ridiculous, first calling slice via clone than changing length... simplifies it significantly. Seems like something missed with all the _slice maintenance\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d6d1bad2673fd1a72c24b14dba15e547e6c565ae into 738ae0f94c5a642175db49ea336e98352690d0e0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7fac8dfb6b84f2425c29",
    "number": 187,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 8911a49a1e539b0ccdea3760815122dee86b0a09 into e4115f5fe3b65e1e7d32cbb3d4bcaa40bd6787ba"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7fad8dfb6b84f2425c2a",
    "number": 185,
    "body": "This doesn't add JSDoc documentation to **every** function yet, so feel free to hold off on merging it if you'd rather wait until then.\n",
    "head_branch": "topic/More_JSDoc_documentation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 696effb1624d84619fe0c1f9165f4f960b80b145 into f7bf8ac02b4124485dbe7baeb6d55cd3ce619ed2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7fae8dfb6b84f2425c2b",
    "number": 178,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 89f12e50e664e19a1521053bb02d4dfe787a4227 into a493d9f80345cce2d89c4903d9ba37cad83a50e0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7faf8dfb6b84f2425c2c",
    "number": 173,
    "body": "",
    "head_branch": "installto",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fb08dfb6b84f2425c2d",
    "number": 172,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 199d8d24e90f84b26182fa39cb181fdf6bef248c into 5bf4d04b49c3721c0afedfacbd361a7e704b2b24"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7fb18dfb6b84f2425c2e",
    "number": 171,
    "body": "Some of these still have a few TODOs, but I've tackled most of the functions through the end of the `list` functions.\n\nWould you like me to squash PRs down into a single commit? Any preference?\n",
    "head_branch": "docs/documentation-revamp",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fb28dfb6b84f2425c2f",
    "number": 170,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fb38dfb6b84f2425c30",
    "number": 167,
    "body": "These are hot methods relied on internally. They shouldn't be abstracted as much as they are\n\nhttp://jsperf.com/ramda-uniq\n",
    "head_branch": "uniqer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 151cebc94b979fdcd920ebcd532fc89e155fe182 into ab65363088a3f6967ccec36f0025e42f2b74bdcf"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7fb48dfb6b84f2425c31",
    "number": 166,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 65a236c96cc53b0da6f38a71af658a229520b650 into 261952ea43abeeabc1bd1dc8769d710400b0134e"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fb58dfb6b84f2425c32",
    "number": 165,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 2032d2ba04ade5f76ae610f962604d048951f320 into 1ca3a770df41e39ad76ba298880be62f3d0a1faa"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7fb68dfb6b84f2425c33",
    "number": 163,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fb78dfb6b84f2425c34",
    "number": 162,
    "body": "I generally use [EditorConfig](http://editorconfig.org/) in projects to be sure I'm respecting the project's style. This looks like the style Ramda is using.\n",
    "head_branch": "chore/editorconfig",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 21d5145b035f7c513c44ad9676c4d39c110ed923 into f375c8b54a9fe7ea14eae8947beee43326d89927"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fb88dfb6b84f2425c35",
    "number": 161,
    "body": "",
    "head_branch": "isSet2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f3c5d9343822a5013c74d1cd4ea32fe810cb37de into a7427f13624450f81a0d3b5793cd6f23bf0a0ee3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fb98dfb6b84f2425c36",
    "number": 160,
    "body": "Running suite isSet [bench/isset.bench.js]...\n\n> > isSet(unsortedBag) x 790,309 ops/sec ±0.75% (100 runs sampled)\n> > isSet(unsortedSet) x 789,221 ops/sec ±0.70% (101 runs sampled)\n> > isSet(sortedBag) x 786,332 ops/sec ±0.72% (98 runs sampled)\n> > isSet(sortedSet) x 790,996 ops/sec ±0.26% (100 runs sampled)\n> > Fastest tests are isSet(sortedSet),isSet(unsortedBag),isSet(unsortedSet) at 1.00x faster than isSet(unsortedBag)\n\nRunning suite isSet [bench/isset.bench.js]...\n\n> > isSet(unsortedBag) x 3,572,194 ops/sec ±0.81% (101 runs sampled)\n> > isSet(unsortedSet) x 3,606,429 ops/sec ±0.75% (99 runs sampled)\n> > isSet(sortedBag) x 3,515,737 ops/sec ±1.46% (95 runs sampled)\n> > isSet(sortedSet) x 3,678,495 ops/sec ±0.16% (103 runs sampled)\n> > Fastest test is isSet(sortedSet) at 1.02x faster than isSet(unsortedSet)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 6d5ff93b310a2ae8f62a104ef2c24b70471e4be7 into 25b3789adb18343897a009144c6faa275dc3ac6f"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7fba8dfb6b84f2425c37",
    "number": 159,
    "body": "Fixes #147\n",
    "head_branch": "cdn",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge be38acc9b3da9db059caf2f0b36f650f313a0016 into 291086685f9f907e4e9657c9698c4f2852c78b31"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fba8dfb6b84f2425c38",
    "number": 158,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d305e79b5dd7e7cf0671b50282f29bd64e112a05 into 79cd9c889d5be522d88e5e2efba95b4edccdc0be"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fbb8dfb6b84f2425c39",
    "number": 157,
    "body": "Prompted by / further discussion on this in https://github.com/CrossEye/ramda/issues/37.\n\nI rough drafted some JSDoc documentation for Ramda today, very much so modeled after Lodash's documentation (which I generally find to be a lot more searchable/browsable than the documentation Docco produces). My current thinking is to finish this style documentation across all of Ramda's functions, with the ultimate goal of producing a more comprehensive set of docs.\n\nThose docs could potentially resemble something like [Lodash's documentation](http://lodash.com/docs), but I'm not attached to any visual representation in particular.\n\nI've only finished (read: drafted) JSDoc-style documentation for a subset of the library (starting at line 708 in this PR), but I'm curious if this is in line with what y'all had in mind for the project's documentation. If so, let me know--I'm willing to keep documenting until I finish (or until my brain numbs over from documentation overload, whichever comes first).\n",
    "head_branch": "docs/documentation-revamp",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d44e06ddfab1e39bdb14a9b70a0f8e67acc39daf into bafcc293636350fc30c3a410c356c7252632afee"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f7fbc8dfb6b84f2425c3a",
    "number": 156,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 18d2b3df7092b2fa5ef6fb199bff77cf7828d87e into ba4865f7239e9e71455d02df8258b9ace07a0f01"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fbd8dfb6b84f2425c3b",
    "number": 155,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fbe8dfb6b84f2425c3c",
    "number": 154,
    "body": "- a little bit of cleanup\n",
    "head_branch": "compose-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fbf8dfb6b84f2425c3d",
    "number": 153,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 9432f8e21fe05b0b8ae1399d95727495b48224a4 into dd90e150b15d6eb1793f983d223681661a81baff"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fc08dfb6b84f2425c3e",
    "number": 152,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fc18dfb6b84f2425c3f",
    "number": 150,
    "body": "As this was the original reason for the function anyway\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fc28dfb6b84f2425c40",
    "number": 149,
    "body": "`concat :: [a] -> [a] -> ... -> [a]`\n\n`concat (s1, s2, ... , sn) = concat (s1) (s2, s3, ... , sn)` is a variadic function that takes lists or strings and returns a single list or string containing of the elements or characters of the arguments in order from left to right. `concat` is curried with respect to the first argument.\n\nThis `concat` now works as expected for `strings`\n",
    "head_branch": "concat",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fc38dfb6b84f2425c41",
    "number": 148,
    "body": "Probably more useful than `repeatN` -- might be best to just drop `repeatN` as its just `R.times(R.always(value), n);`?\n",
    "head_branch": "times",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 9ca320753ecc6a0f9de2836c1d7e72332e54a489 into ccf6e1fa910f60b99fa3cc6bf984f0d156e6cdfa"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fc48dfb6b84f2425c42",
    "number": 146,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge aedde900a880ca6f172b8489291a351488921ca9 into 516ac8e63c77151fdb21ff8342d91dffa4017ae2"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fc58dfb6b84f2425c43",
    "number": 142,
    "body": "Fixes various bugs... As discussed at length in d265815015fc7b95d90b580e60f569de887fd2c6 and #146\n",
    "head_branch": "where2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fc68dfb6b84f2425c44",
    "number": 141,
    "body": "these will need to get wired to a gulp/grunt task to process 'em. at present you gotta run 'em with node by hand. \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 46bc783a214705999eada187a0720a08d71b84eb into 58180a1040a0c27ab52a5142bee240c6382f13bd"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fc78dfb6b84f2425c45",
    "number": 140,
    "body": "Signed-off-by: buzzdecafe m_hur@yahoo.com\n\nplease review--i think it makes sense to use setSource only in debug mode, but i don't wanna merge without discussion/confirmation.\n\nAlso, this overriding thing may be a bit complex when we have `R` functions pointing at local variables e.g. `curry`; the build has to be able to override those internal functions somehow, or we have to change how they are used.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 9cc7728646bea03a877b4b1e3e970312b0c51944 into 46e69c4ee5ff8f7be6191a8963c9d948e56446de"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fc88dfb6b84f2425c46",
    "number": 138,
    "body": "`partially (f, a, b, c...) = partially (f) (a, b, c...)` is a function that return the function `f` partially applied with the parameters `a, b, c...`. Example\n\n```\nfunction sumArgs () {\n    return R.sum (arguments);\n}\nvar sum6 = partially (sumArgs, 1, 2, 3);\nvar ten = sum6 (2, 2); //sumArgs (1, 2, 3, 2, 2) = 10;\n```\n\n`partially` is curried with respect to the first parameter `f`, this enables one to create a \"curried\" (2)  variadic function. Example\n\n```\ncurried2SumArgs = partially (sumArgs);\nvar sum6 = curried2SumArgs (1, 2, 3);\nvar ten = sum6 (2, 2); //sumArgs (1, 2, 3, 2, 2) = 10;\n```\n\nIf composed with itself, `partially` allows for further \"variadic currying\". Example\n\n```\ncurried3SumArgs = partially( partially (sumArgs)); // Same as R.compose(partially,partially)(sumArgs)\nvar sum3 = curried2SumArgs (1, 2);\nvar sum6 = sum3 (3);\nvar ten = sum6 (2, 2); //sumArgs (1, 2, 3, 2, 2) = 10;\n```\n\nTake some time to digest this.\n",
    "head_branch": "curriedCompose",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fc98dfb6b84f2425c47",
    "number": 137,
    "body": "Solution to #135\n\n`compose` and `pipe` now return a partially applied function when they are called with only one argument, for this they use the function `partially`.\n\n`partially (f, a)` is a function that return the partial application of `a` to `f` (although this could later be generalized for _n_ arguments `a, b, c...`). `partially` is useful for variadic functions because they can't be curried.\n\nCode snippet of compose\n\n```\nvar f = arguments[0];\nif (arguments.length == 1) {\n    return partially (compose, f);\n}\n```\n",
    "head_branch": "curriedCompose",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fca8dfb6b84f2425c48",
    "number": 136,
    "body": "As described in #122.\n",
    "head_branch": "composeRepr",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fcb8dfb6b84f2425c49",
    "number": 134,
    "body": "Reverts CrossEye/ramda#125\n\nThis killed the performance gains this ugly code was designed to add.  See  [the jsperf test](http://jsperf.com/lodash-vs-ramda) and its successors to see what was going on.\n",
    "head_branch": "revert-125-where",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge f407161043823040efb4951af820033a0b7814dc into 28542c9cbac19316d83be18cbb7f21c6074b5b4d"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fcc8dfb6b84f2425c4a",
    "number": 133,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b5e6629efcae5ff0c6416c053c78a666d80c8d52 into 7a000b5a5d43d68ec3a5621568f105aa6c65a739"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fcd8dfb6b84f2425c4b",
    "number": 132,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 65dad6c70ee29b4f6690be7b75685b517712e956 into f4d21a5832b96bcf030cb5a2ceeb30d1545dede2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fcd8dfb6b84f2425c4c",
    "number": 131,
    "body": "",
    "head_branch": "curries",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fce8dfb6b84f2425c4d",
    "number": 130,
    "body": "Return a fresh array that the user is free to manipulate\n",
    "head_branch": "sans-empty",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fcf8dfb6b84f2425c4e",
    "number": 128,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fd08dfb6b84f2425c4f",
    "number": 127,
    "body": "Ping @davidchambers. Let me know if you guys dig this and I'll work start on the invoker ones.\n\nMissing some test coverage for `===`, `neq`, etc. I can add it if we want to keep em\n\nThis also add a lot of alias sugar -- e.g. `ramda[\"+\"]` === `ramda.sum`\n",
    "head_branch": "nucleotides",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fd18dfb6b84f2425c50",
    "number": 126,
    "body": "",
    "head_branch": "tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fd28dfb6b84f2425c51",
    "number": 125,
    "body": "Small change in contract, functions will only be checked if the test `obj` has own property for that key\n\n`where({toString: R.alwaysTrue}, {a: 1}) // => false`\n",
    "head_branch": "where",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge a4e372110baac74948cf0f67ce62519542bc0b92 into 730529332fa0532f8babdac6577a88a2bfe1a641"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fd38dfb6b84f2425c52",
    "number": 124,
    "body": "Expose `R.pickWith(function(val, key, obj){}, obj)`\n",
    "head_branch": "filterObject",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fd48dfb6b84f2425c53",
    "number": 123,
    "body": "A whole new implementation that splits the behaviour of Maybe into Just and Nothing. The `Maybe` constructor decides if its a `Just` or a `Nothing`, after that each subclass decides that to do with `map`, `ap`, `of` and `chain`. Because of this, it avoid continuous `null` checks and performs better;  actually, `Nothing` doesn't even store a value!!!\n\nAlso added an additional `isNothing : bool` _getter_ property that is useful to tell which of the two classes an object belongs.\n",
    "head_branch": "maybe",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fd58dfb6b84f2425c54",
    "number": 122,
    "body": "Similar to `setSource` but for 2 functions, `setCompositeRepr` creates a\nstring representation for the composed function in this style\n\n```\nfunction f (...)  {\n//stuff\n}\n\nOF\n\nfunction g (...)  {\n//stuff\n}\n```\n\nMore specifically, its the string represetnation of `f` + new\nlines + `\"OF\"` + new lines + the string representation of `g`, for the\nfunction `compose(f, g)`.\n",
    "head_branch": "help",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fd68dfb6b84f2425c55",
    "number": 119,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge fc0452182f62cb188b956d87526f9083a37af520 into 9aae92b3a9f0d8e89da8f649f9bd8fe760d0249f"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fd78dfb6b84f2425c56",
    "number": 118,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f23a41aa6aa69ffca707f1be0a5be42df3326586 into d70400ce1a176d3d9217022e5d9db591865c0119"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fd88dfb6b84f2425c57",
    "number": 117,
    "body": "Similar to `setSource` but for 2 functions, `setCompositeRepr` creates a\nstring representation for the composed function in this style\n\n```\nfunction f (...)  {\n//stuff\n}\n\nOF\n\nfunction g (...)  {\n//stuff\n}\n```\n\nMore specifically, its the string represetnation of `f` + new\nlines + `\"OF\"` + new lines + the string representation of `g`, for the\nfunction `compose(f, g)`.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fd98dfb6b84f2425c58",
    "number": 116,
    "body": "Pretty clear optimization for all `invoker` functions (one less function call per)\n",
    "head_branch": "curryArity",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fda8dfb6b84f2425c59",
    "number": 115,
    "body": "Instead of praying to the gods `.apply` can handle an arguments object as large as the list. Oh this is also faster :)\n",
    "head_branch": "flatten",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 74b9ee4c638fc6f7870a94031c4a3d30092aa6be into 86e266fffddb6c16e7c385947226b0a7cabd892a"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fdb8dfb6b84f2425c5a",
    "number": 114,
    "body": "",
    "head_branch": "path",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fdc8dfb6b84f2425c5b",
    "number": 113,
    "body": "Uses an internal ES5 specish implementation of `indexOf` and `lastIndexOf`\n",
    "head_branch": "indexOf",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge c16f0ca27987ddaf42f7ca01254875248d3355d0 into 53f42a671401eb1499ca88d2a06bb483ec71c4c2"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fdd8dfb6b84f2425c5c",
    "number": 110,
    "body": "Simplified R.map using R.curry on function that:\n1) Either applies list.map or\n2) Calls Array.map onto it.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fde8dfb6b84f2425c5d",
    "number": 109,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fde8dfb6b84f2425c5e",
    "number": 108,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge e8c4f29bca097da0f71cfc8a356a346bbf754c2a into 754406316cd2d3227f5d38e614db9630e2f56984"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fe08dfb6b84f2425c5f",
    "number": 106,
    "body": "All within `+-` of each other. I have other ones ready locally if this floats your boat\nhttp://jsperf.com/ramda-auto-curry-cost/10\n\nOptimizations are potentially possible by switching the switch with a lookup or if?\n",
    "head_branch": "map-curry",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 93cfd235df7fc1a0dbfa20f634ded772eb0a2d59 into f88a966dd8ba497c50f03e8e18bbac7c30e30289"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fe08dfb6b84f2425c60",
    "number": 105,
    "body": "Optimizes isArray and cleans up some code\n",
    "head_branch": "cleanup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 9e119d6616815a5f032d06b1fee7f8e72205bf57 into abde9ab968ca59ca8027f4ae6a802fa7bd809b40"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fe18dfb6b84f2425c61",
    "number": 104,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fe28dfb6b84f2425c62",
    "number": 103,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge bb023acf070cc6e2c422f5245990511b62114255 into a5c3bc2bdda8cb1c28bc9448c341ebd694fc9b6e"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fe38dfb6b84f2425c63",
    "number": 102,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge eccd3eb3b46d1c0586fe19dcfe319d1f79b9199e into bfe8e5a151c88a49a9e903bfdda0fccdb6ed72a8"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fe48dfb6b84f2425c64",
    "number": 101,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 13087a973af04aaa9301e2257a809d3bc332e036 into 03632a852130b27a9a252d2b458c3cbaea1f9436"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fe58dfb6b84f2425c65",
    "number": 100,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge cdc7614239eeb879b3071951d5dd7a9488a35cdf into 4c61715b52592af59a5a4a7aa2bedd723c0fbaf5"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fe68dfb6b84f2425c66",
    "number": 99,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge a50a47190625fe08ab63a30845fb3bf3f781f196 into 97a23abda890565392f67a8bb2b4da3cedbc1a08"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fe78dfb6b84f2425c67",
    "number": 98,
    "body": "... contracts\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 006ff5b94bf24f34fbab11ca2bcdc4578dbaef61 into 9d2024c9b5a608017b0f0dfd3774fa859fefb010"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fe88dfb6b84f2425c68",
    "number": 97,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 0906ff5fbb85996a2c15d8b0c271fd85797a0bce into 1aec1a3ec330a12ea82640950dd0ae586b96cf32"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fe98dfb6b84f2425c69",
    "number": 95,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 0d42a2e61acaf91d04c82dbdccca69c014e8fe61 into f980d2db471cdec0ac510832d30a76a2442eca99"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fea8dfb6b84f2425c6a",
    "number": 94,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge c87852365e5d7719da2aa7222038e621beaf2c6a into 840038e612c8d81954204a643aa6513279c7ffb4"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7feb8dfb6b84f2425c6b",
    "number": 93,
    "body": "per @megawac 's suggestion\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 8d6b311d024679f9a7100559ddc17e2a92d66388 into ed7ef3ed8c6601bc17200a0243c25eec7d803576"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fec8dfb6b84f2425c6c",
    "number": 92,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 18258e715a37463e51e34aa4e42828dc4ea3b6a1 into 1724f5684438b5c423c36cd9f495a11d6046eb6c"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fed8dfb6b84f2425c6d",
    "number": 91,
    "body": "",
    "head_branch": "rip-globals",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d502cae168197ca266836d7ecf379d5d6501663c into 16ccd820ba4db858f181d902df73d45f78acf556"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fed8dfb6b84f2425c6e",
    "number": 90,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge a346618b5d6f1d790a97f3cc59832c2370ed2640 into bcb9c3b9fb244a49a6729915a9b874f58d71322e"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fee8dfb6b84f2425c6f",
    "number": 89,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 6e3e82310a6315ac42cf7f4c6d9af094abcc04a8 into 8ad86f3dfc51690c6a8bb4c51882f39651c1e364"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fef8dfb6b84f2425c70",
    "number": 88,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 6ebfc79e23c059d7e69cbd05f4cb9a5d98890491 into 9ed5b16d849066e7ccb000099c6eb731e295f4a7"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ff08dfb6b84f2425c71",
    "number": 86,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge acb6498100cd436bae8f6270c317b46a51ad8fcd into 45d6fe95a7db2bba926b207ff342aac0429c5402"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ff18dfb6b84f2425c72",
    "number": 85,
    "body": "Hope this is an obvious enough optimization. Have been experimenting with a similar implementation for underscore.\n\n**Useful side-effect** this adds support for array-likes for `clone`, `merge`, etc. LMK if this is desired and I'll add tests\n",
    "head_branch": "concatter",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 9d34aea57f8cc1dea719de4fbb7863e1e42a4cba into cd52f9cc82753b98c5a173ea833c632e056ad810"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ff28dfb6b84f2425c73",
    "number": 82,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge c61398058ad4c808678d518fbcb53f6a4cc53482 into eee97e892b3bc4c67f62384d091fd8f0a6c25f79"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ff38dfb6b84f2425c74",
    "number": 79,
    "body": "Your `groupBy` function appears to be identical to `partition`\n",
    "head_branch": "groupBy",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d875c54206aafad0b027bac6d0047d1950aa86d6 into 5693e690e1c1a841259eef0b6e717fd44648aeb3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ff48dfb6b84f2425c75",
    "number": 77,
    "body": "",
    "head_branch": "compose",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ff58dfb6b84f2425c76",
    "number": 76,
    "body": "",
    "head_branch": "takewhile",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ff68dfb6b84f2425c77",
    "number": 75,
    "body": "- looks more functional :o\n",
    "head_branch": "splice",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge a6060cc15a058e32753832575cec3fb61bc19e55 into 3896ad38418b3b179389aed670b1f9715dbfe1b5"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ff78dfb6b84f2425c78",
    "number": 74,
    "body": "",
    "head_branch": "objects",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ff88dfb6b84f2425c79",
    "number": 73,
    "body": "beauty :)\n",
    "head_branch": "skipUntil",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ff98dfb6b84f2425c7a",
    "number": 72,
    "body": "Playing around with reimplementing ramda in lodash as a weekend project :).\n\nThe curry change is for an alternative solution I was playing with if we don't care about arity. Below is how I'm writing these methods currently in my implementation\n\n```\nfunction predicateWrap(method) {\n    return lodash.curry(function(preds /* , args */) {\n        var args = lodash.slice(arguments, 1);\n        return method(preds, function(func) {\n            return func.apply(null, args);\n        });\n    }, 2);\n}\n\nramda.allPredicates = predicateWrap(lodash.all);\nramda.anyPredicates = predicateWrap(lodash.any);\n```\n",
    "head_branch": "predicateWrap",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ffa8dfb6b84f2425c7b",
    "number": 71,
    "body": "",
    "head_branch": "simplify-append",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 797dd32acc42df72a67e3ab10b0d7d1e28d56c1b into 2894197b852ce1e310164a8cc995be163d910a1e"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ffb8dfb6b84f2425c7c",
    "number": 70,
    "body": "According to http://jsperf.com/arguments-to-array/5, instantiating an\nArray with a known length is more performant.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 0c14b772b0a8895d57fbec482aadaa307cd83457 into c1c986b177a89fe104765bb622ff93b22afe45d8"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ffc8dfb6b84f2425c7d",
    "number": 69,
    "body": "According to http://jsperf.com/arguments-to-array/5, instantiating an\nArray with a known length is more performant.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ffd8dfb6b84f2425c7e",
    "number": 68,
    "body": "According to http://jsperf.com/arguments-to-array/5, instantiating an\nArray with a known lenght is more performant.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ffe8dfb6b84f2425c7f",
    "number": 64,
    "body": "Hi,\nI just changed the variable name for clarity.  \nIt threw me off for a moment while reading the docs.\n\nDo tell me if there's some process or format I didn't follow for the pull request.\nNice library, by the way!\n\nThanks,\nVictor\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7ffe8dfb6b84f2425c80",
    "number": 63,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f7fff8dfb6b84f2425c81",
    "number": 61,
    "body": "",
    "head_branch": "topic/Make_use_of_internal_functions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 6ddea14fce2e13996f79bed45a7fe8b560fc3286 into 13c176720b72fd4610aa4fdc354396c0c43d2187"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f80008dfb6b84f2425c82",
    "number": 58,
    "body": "Needs docco\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 6e6fc295b85aae6457e181837d3e684ee5fd5d21 into 9c024aa612f6166aee30ede7e63fdd41aac6cae2"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f80018dfb6b84f2425c83",
    "number": 57,
    "body": "Updated `compose` to a new implementation as described in\nCrossEye#53\nwith an additional fix so that `compose2` accepts multiple arguments.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge c370e28158d5caefd9650b95822514ab6d501e59 into e1e814557fe5dc10995354f7ab3d4ad2d6528274"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f80028dfb6b84f2425c84",
    "number": 55,
    "body": "Updated compose to a more efficient implementation based on compose2 as described in\nhttps://github.com/CrossEye/ramda/issues/53\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f80038dfb6b84f2425c85",
    "number": 52,
    "body": "It was missing a comma in an array.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f80048dfb6b84f2425c86",
    "number": 46,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 3d11592c76db93f369d4876d91f15d26f2e46f8c into 914844ae26bba11e6455616beb5afd35dd9cc569"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f80058dfb6b84f2425c87",
    "number": 45,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 19d35fd667f2ced7121f41a02ad2bfb3d58f3c8f into a0693715a6fdc2fe7a4952aefcecb830b054092e"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f80068dfb6b84f2425c88",
    "number": 41,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 33f60626385de09cd43e8d9beb908365b81dd098 into 4ba326967cb4ec1d92cffcb0ecb3932ad182e086"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f80078dfb6b84f2425c89",
    "number": 39,
    "body": "",
    "head_branch": "algebra",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 993c7b66fd30b3d741655d7563b590f58060bde3 into 596dfc6fb9705113593c847e41b565ec4520fb8d"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661f80088dfb6b84f2425c8a",
    "number": 36,
    "body": "",
    "head_branch": "algebra",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f80098dfb6b84f2425c8b",
    "number": 35,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 18b85624c1bcb0b7a0ca1b22ee39132a56729a90 into 55267e31305c1fb6c9ed94ac1bda952fd8fec3ce"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f800a8dfb6b84f2425c8c",
    "number": 34,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 095a4c91b1fac622975cd1762edb96eb4418d276 into 8181926cb580673999018b4a02dedf5f9ad79a5b"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f800b8dfb6b84f2425c8d",
    "number": 33,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 9b079174234a244ea8d3cc18fd328c4bf4652bb0 into 62cf78c8a874611ca4b75cf058781d5452e89531"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f800b8dfb6b84f2425c8e",
    "number": 32,
    "body": "..., but i guess the user can flip 'em\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge fde894725e2fe7f2b433c70ad44e6426df8ec95c into 45e840d9c2630d5ae48a01327ec0d06655a6e07c"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f800c8dfb6b84f2425c8f",
    "number": 30,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 9d9ca72ab7f56a04e8822f0b7f0b1507569e6781 into 26d7a0e7acd2ff1c10f8584716aa4cef7d4c47a2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f800d8dfb6b84f2425c90",
    "number": 29,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f800e8dfb6b84f2425c91",
    "number": 28,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 908c50c8820035cbc247a0ac5aedb504baec73e4 into 02eba6bd12f7b0e25e609eb78ac1f42609afa414"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f800f8dfb6b84f2425c92",
    "number": 24,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ca9685edd543fea1eac15e948445f4284a4a6c1a into 7381d17e4125098e2c238fbd516f1de1aeb3b625"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f80108dfb6b84f2425c93",
    "number": 23,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f80118dfb6b84f2425c94",
    "number": 22,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge fc595a3ad064687c6bbfb3fa029a42768b31cebf into 8318dbc82a44b91eb65d8acc92e1621ecaaee505"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f80128dfb6b84f2425c95",
    "number": 21,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge aae187b1e0f8dc2ebd881f34e9efc52924581d6e into 4a54c1d7c1781a550d78d18226ac0beae934de33"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f80138dfb6b84f2425c96",
    "number": 19,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 60a3d22a018592dfb21b3ecb4201e6b5a7b450ba into b84471f728fefe8b77c42caecde3c3b24ae76336"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f80148dfb6b84f2425c97",
    "number": 18,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f80158dfb6b84f2425c98",
    "number": 16,
    "body": "need to add more tests, but so far so good\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 988365bd82246633017f1147af2d8cdc571bf921 into 0921515e13ff6131c72d59c09fcd77021dbb8131"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f80168dfb6b84f2425c99",
    "number": 14,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 44d9b998c2a6459f0bff40f420cf5582c6cff1d3 into d688d5f30eca1053639bc538a993cc1088840d55"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f80178dfb6b84f2425c9a",
    "number": 13,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge eee8aee9d4e15ea59a8a3331830d4db795a6b87c into b12d40297474b161e918f6609d011b10a9ef82bb"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f80188dfb6b84f2425c9b",
    "number": 12,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge a16fc19c31bcc07ad864316db78c6e91deb52e3c into bfdf38dd4c9c0d825420e280bbc914e1026e997b"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f80198dfb6b84f2425c9c",
    "number": 11,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 8e985ceafe341cd7f261d4a589adb1dd3912b1dc into adc6098c86815c875c1b8e0936b56d7152f75c7b"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f801a8dfb6b84f2425c9d",
    "number": 10,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661f801b8dfb6b84f2425c9e",
    "number": 7,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b82f41ff5631f0788a2e79e6d777b326e3a93497 into 3c215816698e29e83642a007d23333cf994c99eb"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  }
]