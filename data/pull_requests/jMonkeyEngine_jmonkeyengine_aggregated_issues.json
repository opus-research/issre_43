[
  {
    "_id": "66240d29a14f302d393b25bb",
    "number": 2244,
    "body": "As written in https://hub.jmonkeyengine.org/t/2079-warnings/47608/3 I tried to remove some warnings. \r\n\r\nFor the **raw type** warnings, I replaced it with a simple wildcard; maybe I should change some of them to a upper-bound wildcard. Any thoughts on that?\r\n\r\n ```\r\nClass<JmeContext> ctxClazz = (Class<JmeContext>) Class.forName(className);\r\n            return ctxClazz.getDeclaredConstructor().newInstance();\r\n``` \r\nI think this doesn't work while I am writing this.\r\n\r\n\r\nRessource Warning in **/cursors/plugins/CursorLoader.java** was fixed by closing DataInput\r\nthe _int flag_ wasn't and what the comment implies shoundn't be used so I removed it and nextInt into \"nirvana\".\r\n\r\n**/system/AWTComponentRenderer.java** and **system/AWTFrameProcessor.java** had a deprecated FrameBuffer creation. I added **AWTUtils** with the function _getFrameBuffer(...)_ and suppressed the warning. Is there a better way to create the buffer?\r\n\r\n**jme3tools/converters/ImageToAwt.java** had some unused \"constants\" I suppressed the warning. I also removed an unused constructor.",
    "head_branch": "cleanup-warnings-jme3-desktop",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d2aa14f302d393b25bc",
    "number": 2243,
    "body": "This pull request addresses several issues with the `MatParamTexture` class:\r\n\r\n* **Duplicate variable**: The `texture` variable is redundant as it's already stored in the inherited `value` variable. This PR removes the unnecessary texture field.\r\n* **Missing Javadoc**: The class and its methods lacked proper documentation. This PR adds comprehensive Javadoc comments to improve code readability and maintainability.\r\n* **Inconsistent null handling**: The behavior of `setValue` methods regarding null values differed. This PR modifies `setValue` to allow null values, aligning it with the behavior of `setTextureValue` and the superclass's `setValue`.\r\n\r\nKey improvements:\r\n* **Code simplification**: By removing the duplicate variable, the code becomes cleaner and easier to understand.\r\n* **Improved documentation**: Clear Javadoc comments explain the class, its purpose, and how to use its methods.\r\n* **Consistent null handling**: All setValue methods now allow null values, preventing unnecessary exceptions.\r\n\r\nOverall, this PR enhances the MatParamTexture class by streamlining the code, providing proper documentation, and ensuring consistent behavior.\r\n\r\n--Edit:\r\nInstead of overriding `setValue` in `MatParamTexture`, we can leverage the existing behavior in the superclass. The superclass method likely performs type and value checking, making an override unnecessary in this case.",
    "head_branch": "capdevon-MatParamTexture",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d2ba14f302d393b25bd",
    "number": 2241,
    "body": "Hi. I simple corrected the oddities in the code.",
    "head_branch": "mastertopull2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d2ca14f302d393b25be",
    "number": 2240,
    "body": "Hello everyone, this PR is about adding two new methods to the **ColorRGBA** class where you can make colors brighter or darker.\r\n\r\nThe difference between method `brighter()` and `get|setAsSrgb() `is the following:\r\n\r\n- It is static (which makes it easier to call)\r\n-  It doesn't saturate the color, just a brighter (\"lighter\") tone.\r\n\r\nAlso add an example class (**ColorBrighterTest**) so you can try it out.\r\n\r\n[ **Some screenshots** ]\r\n\r\n![Captura desde 2024-04-06 19-18-57](https://github.com/jMonkeyEngine/jmonkeyengine/assets/97632588/158afef9-30c3-4c08-bdb3-ed5a9135d08e)\r\n![Captura desde 2024-04-06 19-19-10](https://github.com/jMonkeyEngine/jmonkeyengine/assets/97632588/7ac7c30d-ff98-449b-b4ed-726943b16bf6)\r\n\r\nWhat do you think of this idea?\r\n\r\n\r\n",
    "head_branch": "color_rgba",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d2da14f302d393b25bf",
    "number": 2238,
    "body": "This PR is to remove a '**redundancy'** in the size depth settings in **LwjglCanvas**\r\n\r\n```java\r\n...\r\n[Line 500] glData.depthSize = settings.getBitsPerPixel();\r\n...\r\n[Line 504] glData.depthSize = settings.getDepthBits();\r\n```\r\n\r\nIt doesn't cause any problems but it is better to clean it.",
    "head_branch": "LwjglCanvas_logical_error]",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Logic code error (#2238)\n\n remove a 'redundancy' in the size depth settings in LwjglCanvas"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d2ea14f302d393b25c0",
    "number": 2237,
    "body": "`TestScene` is a high-quality and configurable PBR scene that can quickly and easily be set up for any tests or examples.\r\n\r\n![](https://github.com/codex128/ImageUpload/blob/master/test-scene-in-jme.png?raw=true)\r\n\r\nThe scene was created with only the following setup:\r\n\r\n```java\r\nprivate class TestApp extends SimpleApplication {\r\n    \r\n    private static void main(String[] args) {\r\n        new TestApp().start();\r\n    }\r\n    \r\n    @Override\r\n    public void simpleInitApp() {\r\n        \r\n        JmeUtils.setDefaultAnisotropyLevel(this, 8);\r\n        \r\n        TestScene.setupSimpleApp(this);\r\n        PhysicsSpace space = TestScene.setupPhysics(this, false).getPhysicsSpace();\r\n        \r\n        TestScene scene = new TestScene(assetManager, viewPort);\r\n        scene.setPhysicsSpace(space);\r\n        scene.setSubScene(TestScene.PHYSICS_SUBSCENE);\r\n        rootNode.attachChild(scene.load());\r\n        \r\n    }\r\n    \r\n}\r\n```\r\n\r\nCurrent features:\r\n\r\n* Scene length and width is configurable so it can fit any test or example.\r\n* Automatic lighting and shadows that can be disabled if desired. Shadow map size and number of splits are configurable.\r\n* Automatic filter effects (SSAO and Bloom) that can be disabled if desired.\r\n* Performant physics scene.\r\n* Automatic light probe generation with EnvironmentProbeControl.\r\n* Configurable image-based skybox.\r\n* ...and a more small bells and whistles.\r\n\r\nTodo:\r\n\r\n* Get a nice skybox. The ones jme has already aren't good enough, in my opinion.\r\n* Create more subscenes. There is only a small physics subscene right now.\r\n\r\nTestScene is currently part of the jme3-examples package, which is normally not built for releases, I believe. I think it would be best if it was moved to where end users can access it easily. Does anyone have any ideas for this?\r\n\r\nThis PR also includes JmeUtils, to which I've added several methods for shadow renderer/filter creation and anisotropic filtering. I can remove this class, but I think it would be beneficial to have a class or two that helps streamline development like this class does.\r\n\r\nWhat do you all think?\r\n",
    "head_branch": "qualityOfLife",
    "is_a_fork": true,
    "comments": [
      "IMO, the jme-core module should contain only the essential engine functions. This would allow users to create custom utility libraries that perfectly fit the needs of their projects. After all, user freedom is a fundamental principle of JME!\r\n\r\nBy keeping utility classes separate, we ensure that they can be easily tested, updated, and maintained without impacting the main engine. This is especially important considering the long release cycles of JME. Utility class bugs can be fixed much more quickly in external libraries than waiting for the next engine update.\r\n\r\nSo, let's empower users and keep the core engine lean!",
      "This PR is designed for use in official JME examples and tests, so I can't move it to an external library. What do you suggest?",
      "This PR introduces two new classes to the jme-core module: `NormalQuad` and `JmeUtils`.\r\n\r\n#### 1. NormalQuad:\r\nThere are already existing classes like `Quad`, `CenterQuad`, and `RectangleMesh`. I don't know if another `NormalQuad` class is needed.\r\n\r\n#### 2. JmeUtils:\r\nSince it's customized to your specific needs, it might not be universally applicable to other users.  There are hundreds of classes like this on github and they should not be in the core module.\r\n\r\n----\r\n#### TestScene:\r\nThe TestScene class looks a bit complex for general use and contains many options that you have customized on the .blend and .gltf scene file. I believe in keeping example classes clear and easy to understand.\r\n\r\nConsider that there are already 2 open Issues to improve the jme3-examples module:\r\nhttps://github.com/jMonkeyEngine/jmonkeyengine/issues/2145",
      "> TestScene\r\n\r\nThere are two problems that need to be solved:\r\n\r\n1. The engine examples are ugly.\r\n2. Users new to JME are unable to make graphics that look good, simply because it is very difficult to do.\r\n\r\nSolving these problems could greatly boost the confidence users have in their engine of choice, thus making them less likely to drop the engine when they inevitably hit a tough problem. TestScene is trying its best to fix these problems, and it would do a pretty good job, imo. It is taking a very complex problem and reducing it to a set of parameters that are frankly very easy to work with. If you have suggestions on how it can be made simpler, I'd be happy to hear them.\r\n\r\nAlso, I would argue that TestScene would actually make the engine examples less complex, because it would move all that messy boilerplate scene setup elsewhere. Of course, this would only be true if users were already somewhat familiar with what TestScene does.\r\n\r\n> NormalQuad\r\n\r\nAh, I was unaware of RectangleMesh. I will delete NormalQuad.\r\n\r\n> JmeUtils\r\n\r\nOk, I see what you mean, I will delete that also.",
      "And please make it the default scene of all the examples. It would be especially nice to get rid of the ogre.xml scenes in jme3-examples.",
      "If you intend to go ahead with this PR, to improve code maintainability and facilitate review, consider using the [Builder](https://howtodoinjava.com/design-patterns/creational/builder-pattern-in-java/) pattern for the `TestScene` class or a `BaseAppState` or something else. This would enhance its flexibility and readability. Including references to unused objects like `Sky`, `ShadowRender`, `ShadowFilter`, `FilterPostProcessor`, `Filters`, `PhysicsSpace`, `LightProbe` etc... in a class that extends `Node`, seems inefficient and is not a good example for novices.  Consider removing these references or creating a mechanism to handle optional components.\r\n\r\nModifying 20 classes at once makes review cumbersome. Break down the changes into smaller, manageable pieces. Additionally, aim for a balance between utility methods and code exposure in TestScene class. While utility methods can improve code organization, excessive use can hinder understanding.\r\n\r\nExamples should be stripped-down to highlight a single functionality. While aesthetics can be appealing, prioritize clarity and ease of understanding.\r\n\r\nEdit:\r\nAlternatively, you can consider creating a couple of \"new\" test scenes with high-definition lighting and textures to show off the engine's capabilities. ",
      "Hi @codex128 are you still interested in working on this PR? If so then we could try to get it done and merged for 3.9. And maybe even try to build on it and upload some more PBR assets to better demonstrate jme's current graphical capabilities.\r\n\r\nAs for my critique of your PR so far:\r\n\r\nI like the idea of replacing the models in old examples with newer PBR ones like the scene you've added;\r\n\r\nBut I don't necessarily think that using the TestScene class in some of the old tests is a good idea since it can complicate some of those existing tests, some of which are meant to be super simple to isolate issues and to make it easy for users who want to learn a single thing from an example.\r\n\r\nSo I'd be okay with replacing the models and textures in old tests/examples, but I think that the TestScene.java should be demonstrated in a standalone example and it can be used in future tests/examples that intend to be more complex, and especially in cases where the intention is to show off graphical capabilities in jme. I think it would be great to have some new examples using your TestScene class that can show a variety of different scenes/models in a well lit scene with togglable filters and everything for the best final render. ",
      "I am indeed interested in this PR. I looked over the code again and wasn't very happy with it, so I rewrote it and am submitting it in #2412."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d2fa14f302d393b25c1",
    "number": 2236,
    "body": "This PR adds 3 classes extending Material for PBRLighting, Lighting, and Unshaded matdefs. The goal is to make these matdefs as easy to use as possible, since they are used so often.",
    "head_branch": "matClasses",
    "is_a_fork": true,
    "comments": [
      "IMO the jme-core module should contain only the essential engine functions. This would allow users to create custom utility libraries that perfectly fit the needs of their projects. After all, user freedom is a fundamental principle of JME!\r\n\r\nBy keeping utility classes separate, we ensure that they can be easily tested, updated, and maintained without impacting the main engine. This is especially important considering the long release cycles of JME. Utility class bugs can be fixed much more quickly in external libraries than waiting for the next engine update.\r\n\r\nSo, let's empower users and keep the core engine lean! ;)\r\n\r\nStephen's approach of building external utility libraries is inspiring! It encourages innovation and reusability.",
      "I realize adding these classes to an external library is optimal. However, I think in this case they are better off in jme3-core. Otherwise they'd be buried in a utility library somewhere, and no one would know they exist. They might as well not exist at all in that case.\r\n\r\nAlso, I think these classes would primarily benefit new users, who are unlikely to download a utility library until they've learned the engine.",
      "re: \"Also, I think these classes would primarily benefit new users\"\r\n...by teaching them that they cannot easily create their own materials.\r\n\r\nThe engine has avoided making such classes up until now to avoid locking users into fixed materials.  One of the great benefits of the engine is how easy it is to roll a new material.\r\n\r\nIt's important to be careful of the \"because this will be easier for new users\" phrase because new users are already going to be cutting and pasting code to get something working... so it matters little whether it's one class or another at that point.  But as we see over and over, new users get really confused when they try to at all stray outside of the 'demo level' code... see: every question about \"why can't I access 'app' from my class?\" and all of the mistakes from having every class in their game extend SimpleApplication.\r\n\r\nIf we are worried about new users, we need to get the code templates working in the SDK again (I assume they aren't).  When I started with JME, I was able to write a whole test game in a weekend because of those little insertable code snippets.",
      "Hmm, good point. I didn't think of that.\r\n\r\nI don't see much support for this PR, so I'm going to close it unless further interest is expressed.",
      "I appreciate the desire, though.  I often catch myself getting caught up in a similar want... but usually five minutes later, I've forked my shader for some other reason and I'm suddenly glad all of my existing material code still works.\r\n\r\n...could also be neat if IDE magic could make command completion work on material parameters... but I think that's a big ask even from the really advanced IDEs.",
      "> If we are worried about new users, we need to get the code templates working in the SDK again (I assume they aren't). When I started with JME, I was able to write a whole test game in a weekend because of those little insertable code snippets.\r\n\r\nIf you mean these, go right ahead, fully maintained & ready to go:\r\n![image](https://github.com/jMonkeyEngine/jmonkeyengine/assets/8344766/17b240ed-cb0b-4e83-89af-2aa4f5de4072)\r\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d30a14f302d393b25c2",
    "number": 2235,
    "body": "Hi\r\n\r\nThis PR resolves dependency issues with **lwjgl** (2 or 3) reported on the [forum](https://hub.jmonkeyengine.org/t/jmonkeyengine-v3-7-feature-freeze/47558/12?u=swiftwolf) when trying to use the zip version of JME3.\r\n\r\nThe reason for these problems is that jme3-lwjgl3 only loaded the dependencies at runtime and when compiling JME3 it did not export the jar files, this can be solved by changing the way of adding the dependencies:\r\n\r\n```Gradle\r\napi \"org.lwjgl:lwjgl:${lwjgl3Version}:natives-windows\"\r\n```\r\n\r\nShould we use jme3-lwjgl3 by default in the examples? (I think it's already quite stable)",
    "head_branch": "Gradle_Build",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Gradle build (zip) (#2235)\n\n* lwjgl dependency issues"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d31a14f302d393b25c3",
    "number": 2232,
    "body": "Fixes #2230 by logging the resulting exception as severe and providing extra info when an asset locator fails to be instantiated.",
    "head_branch": "fix2230",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Logs exception as severe on asset locator instantiation failure (#2232)\n\nswitched to severe logging"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d32a14f302d393b25c4",
    "number": 2231,
    "body": null,
    "head_branch": "capdevon-AnimComposer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d33a14f302d393b25c5",
    "number": 2229,
    "body": "The filter introduced in this PR produces much cleaner and visually natural results than BloomFilter. Only supports the equivalent of GlowMode.Scene (no select object glow).\r\n\r\nBasic usage is similar to BloomFilter:\r\n```java\r\nFilterPostProcessor fpp = new FilterPostProcessor(assetManager);\r\nPBRBloomFilter bloom = new PBRBloomFilter();\r\nfpp.addFilter(bloom);\r\nviewPort.addProcessor(fpp);\r\n```\r\n\r\nNote: name changed from PBRBloomFilter to SoftBloomFilter.",
    "head_branch": "betterGlow",
    "is_a_fork": true,
    "comments": [
      "* Does the PBRBloomFilter work only with PBR materials ? \r\n* What effect does it have on Lighting materials (the teapot and the box in the test class) ? \r\n* Can you copy/paste a screenshot in the comments please ? \r\n\r\nThe java code looks ok to me, but I am not experienced enough to do a review of the shader code. \r\nSo you need approval from a shader expert and a core member for final integration. @riccardobl @stephengold @scenemax3d ",
      "> Does the PBRBloomFilter work only with PBR materials?\r\n\r\nIn general, yes, because this filter relies heavily on HDR.\r\n\r\n> What effect does it have on Lighting materials (the teapot and the box in the test class)?\r\n\r\nSame effect, technically, though not noticeable because Lighting.j3md doesn't utilize HDR. I copied TestBloomFilter.java, so that is why the teapot is in the test.\r\n\r\n> Can you copy/paste a screenshot in the comments please?\r\n\r\n![](https://github.com/codex128/ImageUpload/blob/master/better-pbrbloom.png?raw=true)",
      "This is a multipass bloom filter that uses hardware filtering to increase the samples, similar to the mipmap bloom filter but it doesn't relies on the opengl mipmap generation function (that is driver dependent and not guaranteed to run on the gpu).\r\n\r\nThis is much better than the default bloom filter and it has a different optimization (uses hardware filtering instead of two pass blur) so it might be pretty much equivalent or even better from  a performance standpoint, and it has less dependencies on the driver implementation than the mipmap bloom, so it is better from that side too.\r\n\r\nMy only suggestion is to find a different name, since calling it PBR might be confusing.\r\n\r\nI have one question though, what is the default min filter for the filter `getRenderedTexture()` ? This should work best with MinFilter.BilinearNoMipMaps , can you check that? @codex128 ",
      "> My only suggestion is to find a different name, since calling it PBR might be confusing.\r\n\r\nGood idea, though PBR Bloom is what the original article calls it. Perhaps SoftBloomFilter?\r\n\r\n> what is the default min filter for the filter `getRenderedTexture()` ?\r\n\r\nYup, the default min filter for pass textures is NearestNoMipMaps, so that should be good.",
      "This is a multipass bloom filter that uses hardware sampling, kinda like the mipmap bloom filter-\r\n\r\n> > My only suggestion is to find a different name, since calling it PBR might be confusing.\r\n> \r\n> Good idea, though PBR Bloom is what the original article calls it. Perhaps SoftBloomFilter?\r\n\r\nYes SoftBloomFilter might be a good option.\r\n\r\n> > what is the default min filter for the filter `getRenderedTexture()` ?\r\n> \r\n> Yup, the default min filter for pass textures is NearestNoMipMaps, so that should be good.\r\n\r\nCan you try with **Bilinear**NoMipMaps and show the results? This will enable hardware filtering when downscaling , the result should be smoother.\r\nMight be worth trying also Bilinear MagFilter when upscaling.\r\n\r\n",
      "> Can you try with **Bilinear**NoMipMaps and show the results?\r\n\r\nOh, sorry, my bad. :stuck_out_tongue: Here is the result with min=BilinearNoMipMaps and mag=Bilinear:\r\n\r\n![](https://github.com/codex128/ImageUpload/blob/master/bilinearNoMipMapsGlow.png?raw=true)\r\n\r\nIt's difficult to tell, but I think the default min/mag filters produce *slightly* rougher glow. For reference:\r\n\r\n![](https://github.com/codex128/ImageUpload/blob/master/better-pbrbloom.png?raw=true)\r\n\r\nThe differences become more apparent if you zoom in on the glowing sections.\r\n\r\n",
      "It should be more visible with complex scenes.\r\nOne last thing, can you make it on by default but toggleable with `setBilinearFiltering(false)`?",
      "I have implemented that. I also added something to suppress the number of downsampling/upsampling passes made so that textures do not have width or height <= 0.",
      "> I have implemented that. I also added something to suppress the number of downsampling/upsampling passes made so that textures do not have width or height <= 0.\r\n\r\nJust to be sure to not hurt the feeling of any driver, could you please make it <=2 ?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d34a14f302d393b25c6",
    "number": 2228,
    "body": "Resolves #2226\r\n\r\nPrevents NPE after deserializing SkeletonDebugger. The solution is not that pretty. But it works. The children are written/read properly, this just then finds them by the fixed names set.",
    "head_branch": "bugfix/issue-2226",
    "is_a_fork": true,
    "comments": [
      "Here is the code I used to test this. The model is here https://sketchfab.com/3d-models/silver-dragonkin-mir4-89ead4e87cdc4b70840f748383f0998f, get it as FBX:\r\n```\r\npackage jme3test.scene;\r\n\r\nimport com.jme3.app.SimpleApplication;\r\nimport com.jme3.asset.plugins.FileLocator;\r\nimport com.jme3.asset.plugins.HttpZipLocator;\r\nimport com.jme3.asset.plugins.ZipLocator;\r\nimport com.jme3.export.binary.BinaryExporter;\r\nimport com.jme3.light.AmbientLight;\r\nimport com.jme3.light.DirectionalLight;\r\nimport com.jme3.math.ColorRGBA;\r\nimport com.jme3.math.Vector3f;\r\nimport com.jme3.scene.Geometry;\r\nimport com.jme3.scene.Spatial;\r\nimport com.jme3.scene.shape.Sphere;\r\nimport com.jme3.util.SkyFactory;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\n\r\npublic class TestSceneLoading extends SimpleApplication {\r\n\r\n    final private Sphere sphereMesh = new Sphere(32, 32, 10, false, true);\r\n    final private Geometry sphere = new Geometry(\"Sky\", sphereMesh);\r\n    private static boolean useHttp = false;\r\n\r\n    public static void main(String[] args) {\r\n     \r\n        TestSceneLoading app = new TestSceneLoading();\r\n        app.start();\r\n    }\r\n\r\n    @Override\r\n    public void simpleUpdate(float tpf){\r\n        sphere.setLocalTranslation(cam.getLocation());\r\n    }\r\n\r\n    @Override\r\n    public void simpleInitApp() {\r\n        File file = new File(\"wildhouse.zip\");\r\n        if (!file.exists()) {\r\n            useHttp = true;\r\n        }\r\n\r\n        assetManager.registerLocator(\"C:\\\\temp\\\\dragon\\\\source\", FileLocator.class);\r\n        \r\n        this.flyCam.setMoveSpeed(10);\r\n\r\n        // load sky\r\n        rootNode.attachChild(SkyFactory.createSky(assetManager, \r\n                \"Textures/Sky/Bright/BrightSky.dds\", \r\n                SkyFactory.EnvMapType.CubeMap));\r\n        \r\n        // create the geometry and attach it\r\n        // load the level from zip or http zip\r\n/*        if (useHttp) {\r\n            assetManager.registerLocator(\"https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/jmonkeyengine/wildhouse.zip\", HttpZipLocator.class);\r\n        } else {\r\n            assetManager.registerLocator(\"wildhouse.zip\", ZipLocator.class);\r\n        }*/\r\n        Spatial scene = assetManager.loadModel(\"Mon_BlackDragon31_Skeleton.FBX\");\r\n        BinaryExporter exporter = BinaryExporter.getInstance();\r\n        File f = new File(\"C:\\\\temp\\\\dragon\\\\source\\\\MyModel.j3o\");\r\n        try {\r\n            exporter.save(scene, f);\r\n        } catch (IOException ex) {\r\n\r\n        }\r\n\r\n        scene = assetManager.loadModel(\"MyModel.j3o\");\r\n\r\n        AmbientLight al = new AmbientLight();\r\n        scene.addLight(al);\r\n\r\n        DirectionalLight sun = new DirectionalLight();\r\n        sun.setDirection(new Vector3f(0.69077975f, -0.6277887f, -0.35875428f).normalizeLocal());\r\n        sun.setColor(ColorRGBA.White.clone().multLocal(2));\r\n        scene.addLight(sun);\r\n\r\n        rootNode.attachChild(scene);\r\n    }\r\n}\r\n```\r\n",
      "Hi @tonihele , \r\nyou are right, I downloaded the dragon model and ran your code on my local pc getting the following error. \r\n```java\r\njava.lang.NullPointerException\r\n\tat com.jme3.scene.debug.SkeletonDebugger.updateLogicalState(SkeletonDebugger.java:99)\r\n\tat com.jme3.scene.Node.updateLogicalState(Node.java:239)\r\n\tat com.jme3.app.SimpleApplication.update(SimpleApplication.java:268)\r\n\tat com.jme3.system.lwjgl.LwjglWindow.runLoop(LwjglWindow.java:631)\r\n\tat com.jme3.system.lwjgl.LwjglWindow.run(LwjglWindow.java:721)\r\n\tat java.base/java.lang.Thread.run(Thread.java:834)\r\n```\r\n\r\nEffectively jme's stock `FBXLoader` still uses the old animation system. The strange thing is that it adds the `SkeletonDebugger` to the model after loading it. \r\n\r\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-plugins/src/fbx/java/com/jme3/scene/plugins/fbx/node/FbxNode.java#L525\r\n```java\r\n...\r\n        if (fbxNode.skeleton != null) { \r\n            jmeSpatial.addControl(new AnimControl(fbxNode.skeleton));\r\n            jmeSpatial.addControl(new SkeletonControl(fbxNode.skeleton));\r\n            \r\n// comment out this code\r\n            /*SkeletonDebugger sd = new SkeletonDebugger(\"debug\", fbxNode.skeleton);\r\n            Material mat = new Material(fbxNode.assetManager, \"Common/MatDefs/Misc/Unshaded.j3md\");\r\n            mat.getAdditionalRenderState().setWireframe(true);\r\n            mat.getAdditionalRenderState().setDepthTest(false);\r\n            mat.setColor(\"Color\", ColorRGBA.Green);\r\n            sd.setMaterial(mat);\r\n            \r\n            ((Node)jmeSpatial).attachChild(sd);*/\r\n        }\r\n```\r\n\r\nI don't know if the `SkeletonDebugger` is meant to be serialized or to be used for debugging purposes only in test applications. The solutions could be either to comment out the SkeletonDebugger from the `FBXLoader` or to fix the `SkeletonDebugger` as you did.\r\n\r\n",
      "> I don't know if the `SkeletonDebugger` is meant to be serialized or to be used for debugging purposes only in test applications. The solutions could be either to comment out the SkeletonDebugger from the `FBXLoader` or to fix the `SkeletonDebugger` as you did.\r\n\r\nSkeletonDebugger is serializable. So IMO it should work, regardless what FBXLoader or anyone else thinks of it. We have no way of deducting how it will be used but it should work flawlessly as it promises to.\r\n\r\nFBXLoader is another issue. Yes, it feels that it should not be in the master branch yet since it seems to use some debug data. It should not probably use this SkeletonDebugger. There is also another issue about the FBXLoader using the old animation system.",
      "> SkeletonDebugger is serializable. So IMO it should work, regardless what FBXLoader or anyone else thinks of it. We have no way of deducting how it will be used but it should work flawlessly as it promises to.\r\n\r\nI agree with you."
    ],
    "commit_messages": [
      "Fix SkeletonDebugger deserializing (#2228)\n\nFix SkeletonDebugger deserializing"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d35a14f302d393b25c7",
    "number": 2225,
    "body": " Fix bug where the clipRect would be left in the openGL state leading to surprising (clipped) results when later using GLRenderer#copyFrameBuffer\r\n\r\ncloses #2224 ",
    "head_branch": "#2224-fix-Renderer#renderViewPort-method-leaves-clipRect-in-OpenGL-state",
    "is_a_fork": true,
    "comments": [
      "Hi @richardTingle ,\r\nWas this tested with v3.7 as well or just with master branch?",
      "I tested that the bug existed in 3.6 and master, but I tested the fix only in a locally built master"
    ],
    "commit_messages": [
      "#2224 Fix bug where the clipRect would be left in the openGL state leading to surprising (clipped) results when later using GLRenderer#copyFrameBuffer (#2225)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d36a14f302d393b25c8",
    "number": 2220,
    "body": "Performance improvements. From static code analysis. All Java 8 compatible (is this the official code level?).\r\n\r\nThere are few types of improvements:\r\n\r\n- Switching manual array copying to a system call (is this ok on Android??)\r\n- String concatenation / string format to use StringBuilder properly\r\n- Creating/copying collections switched to use bulk operation\r\n- Some early breaks to loops\r\n- Use Files to get Input/OutputStreams. At least on Windows this is proven to give faster stream implementation\r\n- Collection.toArray size thing (https://shipilev.net/blog/2016/arrays-wisdom-ancients/)\r\n\r\nThis should be all pretty safe stuff. I did not benchmark this separately at all. These are based on static code analysis.",
    "head_branch": "feature/performance-analysis",
    "is_a_fork": true,
    "comments": [
      "Note that if merged, use SQUASH and merge. I accidentally added some test files in the process. The Squashing will rewrite this so that that oopsie never happened... right? Anyway, nothing dirty, Jaime heads in various formats",
      "re: your description when it says \"Arrays.asList size thing\" I think you mean \"Collection.toArray() size thing\"\r\n\r\nCurious: what static code analysis was used?",
      "> Curious: what static code analysis was used?\r\n\r\nI used IntelliJ's.\r\n\r\n\r\n> re: your description when it says \"Arrays.asList size thing\" I think you mean \"Collection.toArray() size thing\"\r\n\r\nCorrect. Fixed to description.",
      "Is this now ok to merge? I believe I did all the requested changes?",
      "I haven't finished looking at all 107 files.",
      "> I didn't get very far in my review before losing enthusiasm. Hope my review is helpful. Many issues I found involve `System.arrayCopy()`. You may want to self-review those changes.\r\n\r\nThanks, I'll go through them. These are all changes by automation.",
      "> > I didn't get very far in my review before losing enthusiasm. Hope my review is helpful. Many issues I found involve `System.arrayCopy()`. You may want to self-review those changes.\r\n> \r\n> Thanks, I'll go through them. These are all changes by automation.\r\n\r\nSubmitting a huge PR that's 100% auto generated and then relying on human volunteers review it seems abusive. And perhaps detrimental to the project as a whole.",
      "> > > I didn't get very far in my review before losing enthusiasm. Hope my review is helpful. Many issues I found involve `System.arrayCopy()`. You may want to self-review those changes.\r\n> > \r\n> > \r\n> > Thanks, I'll go through them. These are all changes by automation.\r\n> \r\n> Submitting a huge PR that's 100% auto generated and then relying on human volunteers review it seems abusive. And perhaps detrimental to the project as a whole.\r\n\r\nI'm terribly sorry. I did of course go through it myself prior submitting it. And my motivation is to help the project as a whole. And I feel that I am one of the _abused_ human volunteers that you referenced, having been here for a long time too. And to be perfectly clear, I don't feel abused by this PR, any comment or anything, just including myself to this _sorry lot_ :D\r\n\r\nMy point perhaps was the scope of this PR. I'm more than happy to discuss and make changes you guys request, no problem there. Just kinda a defensive point that the focus point was only on the performance of these scattered lines. Not to make existing problems go away or make actual changes in behavior. Of course there is no intention of making the code less readable either.\r\n\r\nAnd thank you for your review!",
      "@tonihele, I realize of course that you're also a volunteer, and I greatly value and respect you and your past contributions to the project. If this PR had come from someone I didn't know and respect, I would have totally ignored it or closed it as \"won't fix.\" As it is, I've neglected it. I realize now I haven't been forthcoming about my reasons for that neglect, and I apologize for my silence. You deserve better communication, so I'll try to explain myself.\r\n\r\nEngine performance is important, but micro improvement efforts should focus on the inner loops of practical workloads. Furthermore, I doubt optimizations auto-generated by static analysis will measurably improve the performance of JME.\r\nI tried to explain this to xtonik last year (https://hub.jmonkeyengine.org/t/newcomer/46680) and didn't do a great job.\r\n\r\nA lot of Engine code is semi-obsolete, rarely executed, and/or executed only during testing or initialization or error conditions. Automated static analysis doesn't take such factors into account.\r\n\r\nFurthermore, many micro-optimizations reduce readability. For example, I'd rather read a `for` loop than an invocation of `System.arrayCopy()`. I read and write `for` loops daily and find them very readable. OTOH I find `arrayCopy()` very opaque. It has 5 positional arguments (3 of which are integers) that are easily confused. I use it so rarely that I forget its precise semantics: what happens if an argument is negative, what happens if the arrays are too short, and what happens if `src` and `dest` are the same array or are of different types.\r\n\r\nIMO, the time and energy of the core developers is better spent on bugs that visibly affect apps. If you enjoy spending your time on micro-optimizations, that's what you should do. But repeatedly, publicly, and specifically requesting my review drags me into work I don't enjoy and have little talent for, all for benefits I don't believe in.\r\n\r\nAgain, I'm sorry it's taken me so long to articulate my underlying concerns about this PR, and I apologize for that."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d37a14f302d393b25c9",
    "number": 2218,
    "body": null,
    "head_branch": "addAnimMaskTest",
    "is_a_fork": true,
    "comments": [
      "#2215"
    ],
    "commit_messages": [
      "added test class (#2218)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d38a14f302d393b25ca",
    "number": 2217,
    "body": "Fix issue reported here: https://hub.jmonkeyengine.org/t/jmonkeyengine-v3-7-0-alpha2-release/47534\r\n\r\nSome OpenGL drivers do not like precision qualifiers even if they should be supported as nop accordingly to the documentation",
    "head_branch": "glprecisionfix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use precision qualifiers only in GL ES shaders (#2217)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d39a14f302d393b25cb",
    "number": 2214,
    "body": "This PR adds a test for issue #2209, to help us detect regressions.",
    "head_branch": "sgold/test-2209",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "jme3-examples:  add the TestIssue2209 class (#2214)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d39a14f302d393b25cc",
    "number": 2213,
    "body": "As discussed at PR #2207, the Engine currently codes the Gradle version in 2 places (build.gradle and gradle/wrapper/gradle-wrapper.properties).\r\n\r\nAs a result:\r\n+ The Engine's procedure for updating Gradle differs from that described in Gradle release notes, requiring an extra step.\r\n+ It's possible for the coded versions to get out of synch with one another, causing confusion about which version is used to build the Engine.\r\n\r\nThis PR deletes the \"wrapper\" block from build.gradle .\r\n\r\nAs a result:\r\n+ The Engine's Gradle version is coded in a single, central place.\r\n+ The upgrade procedure documented in Gradle release notes will suffice, but a simple \"gradlew update\" will not.\r\n\r\n",
    "head_branch": "sgold/gradle-wrapper",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "build.gradle:  don't hardcode the Gradle version here (#2213)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d3aa14f302d393b25cd",
    "number": 2212,
    "body": "The Engine uses Groovy solely for automated testing during builds.\r\nThis PR updates the buildscripts to use the latest release (dated 1 March 2024).",
    "head_branch": "sgold/groovy-3-0-21",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "update Groovy to v3.0.21 (#2212)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d3ba14f302d393b25ce",
    "number": 2210,
    "body": "Fix https://github.com/jMonkeyEngine/jmonkeyengine/issues/2209",
    "head_branch": "fixnan2",
    "is_a_fork": true,
    "comments": [
      "Great work, @riccardobl!"
    ],
    "commit_messages": [
      "Fix divide by 0 in shadow utils for some scenes #2209 (#2210)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d3ca14f302d393b25cf",
    "number": 2208,
    "body": "While testing some pbr code, i've noticed that something was off with lighting, after some convoluted debugging i've found that pr https://github.com/jMonkeyEngine/jmonkeyengine/commit/5975b3f791d18fae311a10e209b3ed40b5e5c60f introduced a bug.\r\n\r\nThe tl;dr is that copyMergedTo changes the passed state when additionalState is set, but returns `this` when it isn't, causing mergedRenderState to not be updated at all.\r\n\r\nThis PR restores the original behavior of passing the returned state to applyRenderState instead of mergedRenderState.",
    "head_branch": "fixupdaterenderstate",
    "is_a_fork": true,
    "comments": [
      "Note: it seems this issue was introduced by PR #2091."
    ],
    "commit_messages": [
      "fix render states merging when additionalState is not set (#2208)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d3da14f302d393b25d0",
    "number": 2207,
    "body": "After PR #2197 (updating the Gradle version in gradle/wrapper/gradle-wrapper.properties) was integrated, @llzen44 pointed out that a Gradle version is also coded in the project's top-level build script.\r\n\r\nI'm not 100% certain, but I assume this code is in case someone executes a \"gradlew wrapper\" command without specifying the desired version.\r\n\r\nFor the sake of consistency, this PR updates the top-level build script to specify the same version as gradle/wrapper/gradle-wrapper.properties",
    "head_branch": "sgold/gradle-7-6-4-part2",
    "is_a_fork": false,
    "comments": [
      "This is the correct way of upgrading the wrapper, https://github.com/jMonkeyEngine/jmonkeyengine/pull/2197 was not the correct way. Sorry I did not spot it.\r\n\r\n1. Change the Gradle wrapper version of build.gradle\r\n2. Run Gradle wrapper (gradlew wrapper in Windows)\r\n3. Repeat step 2",
      "@tonihele: Thanks for that information.\r\n\r\nIs our Gradle upgrade procedure documented somewhere other than this PR conversation?\r\n\r\nI believe the JMonkeyEngine project is unusual in having its Gradle version hard-coded in \"build.gradle\".\r\n\r\nThe standard upgrade procedure in [the Gradle release notes](https://docs.gradle.org/7.6.4/release-notes.html#upgrade-instructions) is simply `./gradlew wrapper --gradle-version=7.6.4`\r\n\r\nPerhaps we should simplify and standardize our Gradle upgrade process and code the version in just one place.",
      "> @tonihele: Thanks for that information.\r\n> \r\n> Is our Gradle upgrade procedure documented somewhere other than this PR conversation?\r\n> \r\n> I believe the JMonkeyEngine project is unusual in having its Gradle version hard-coded in \"build.gradle\".\r\n> \r\n> The standard upgrade procedure in [the Gradle release notes](https://docs.gradle.org/7.6.4/release-notes.html#upgrade-instructions) is simply `./gradlew wrapper --gradle-version=7.6.4`\r\n> \r\n> Perhaps we should simplify and standardize our Gradle upgrade process and code the version in just one place.\r\n\r\nYes you can do that, and should if you feel that that is the correct procedure. The reason I've been doing it this way I described is that me and command line do not mix. I mostly use IDEs. That is probably why I have this habit.\r\n\r\nSo you can completely remove the wrapper task override from the build.gradle.",
      "I use the command line for many tasks, but I also wish to support people who use IDEs. I'm unsure how to proceed.",
      "I would just go with what is more standard. And I think it is your way. At least I got that impression from Gradle release notes you referred and all the guides I googled. The less we have our own custom standards and the more we comply to generally accepted standards, the better.\r\n\r\nIDEs, like Netbeans, does allow giving arguments to Gradle tasks. Probably other IDEs as well, it is just not usually so convenient. Hidden behind some dialogs."
    ],
    "commit_messages": [
      "build.gradle:  update Gradle version to match gradle-wrapper.properties (#2207)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d3ea14f302d393b25d1",
    "number": 2206,
    "body": "- Update License year\r\n- AbstractShadowRenderer.setRenderBackFacesShadows(): Change input type Boolean -> boolean.\r\n- AbstractShadowFilter.setRenderBackFacesShadows(): Change input type Boolean -> boolean.\r\n\r\nPR for Issue [ #2203 ]",
    "head_branch": "capdevon-AbstractShadowRender",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "AbstractShadowRenderer.setRenderBackFacesShadows(): Change input type Boolean -> boolean (#2206)\n\nAbstractShadowFilter.setRenderBackFacesShadows: change input type from Boolean to boolean"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d3fa14f302d393b25d2",
    "number": 2204,
    "body": "* DirectionalLightShadowFilter: format code + javadoc\r\n* PointLightShadowFilter: format code + javadoc\r\n* SpotLightShadowFilter: format code + javadoc\r\n\r\nUpdate License year\r\nRemoved broken links to unreachable sites",
    "head_branch": "capdevon-DirectionalLightShadowFilter",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "xxxLightShadowFilter: format code + javadoc (#2204)\n\nDirectionalLightShadowFilter, DirectionalLightShadowFilter, SpotLightShadowFilter, PointLightShadowFilter : format code + javadoc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d40a14f302d393b25d3",
    "number": 2202,
    "body": "MatParam: format code\r\n\r\nupdate License year",
    "head_branch": "capdevon-MatParam2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "MatParam: format code (#2202)\n\nMatParam: format code\r\n\r\nupdate License year"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d41a14f302d393b25d4",
    "number": 2201,
    "body": null,
    "head_branch": "capdevon-MatParam",
    "is_a_fork": true,
    "comments": [
      "This PR should modify only the MatParam class."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d42a14f302d393b25d5",
    "number": 2200,
    "body": "MaterialDebugAppState: format code\r\n\r\nUpdate License year",
    "head_branch": "capdevon-MaterialDebugAppState",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "MaterialDebugAppState: format code (#2200)\n\nMaterialDebugAppState: format code"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d43a14f302d393b25d6",
    "number": 2199,
    "body": "`VarType.Boolean`: reorder the list of `javaTypes` in accordance with `Float` and `Int`\r\n\r\n- format code\r\n- update License year\r\n\r\n```java\r\n// before\r\nFloat(\"float\", float.class, Float.class), \r\nInt(\"int\", int.class, Integer.class), \r\nBoolean(\"bool\", Boolean.class, boolean.class), //<----\r\n```\r\n\r\n```java\r\n// after\r\nFloat(\"float\", float.class, Float.class), \r\nInt(\"int\", int.class, Integer.class), \r\nBoolean(\"bool\", boolean.class, Boolean.class), //<----\r\n```",
    "head_branch": "capdevon-VarType",
    "is_a_fork": true,
    "comments": [
      "Thanks for your review @stephengold , I agree with you. I noticed this discrepancy in the order of `javaTypes` while designing my editor. The correct order would have made my code more elegant, instead I will have to handle the problem in my code as usual. Now it is too late to fix past mistakes. I have restored the original code. This PR only formats the class code."
    ],
    "commit_messages": [
      "VarType: format code (#2199)\n\nVarType code formatting"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d44a14f302d393b25d7",
    "number": 2198,
    "body": "Addition of final static variables for code consistency with `Vector3f` and `Vector4f` classes:\r\n\r\n* Vector2f.NAN\r\n* Vector2f.UNIT_X\r\n* Vector2f.UNIT_Y\r\n* Vector2f.POSITIVE_INFINITY\r\n* Vector2f.NEGATIVE_INFINITY",
    "head_branch": "capdevon-Vector2f",
    "is_a_fork": true,
    "comments": [
      "Looks good to me",
      "Thank you @riccardobl ;)"
    ],
    "commit_messages": [
      "Vector2f: added final static variables NAN, UNIT_X, UNIT_Y, POS_INF, NEG_INF (#2198)\n\nVector2f: added final static variables:\r\n* Vector2f.NAN\r\n* Vector2f.UNIT_X\r\n* Vector2f.UNIT_Y\r\n* Vector2f.POS_INF\r\n* Vector2f.NEG_INF"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d45a14f302d393b25d8",
    "number": 2197,
    "body": "We can't easily upgrade to Gradle 8, but at least we can use the latest release of Gradle 7.\r\n\r\nUpgrading to 7.6.4 addresses some security vulnerabilities. See [the release notes](https://docs.gradle.org/7.6.4/release-notes.html) for details.\r\n\r\nUpgrading is a simple matter of changing the properties file:  the upgrade does not involve any changes to the Gradle JAR. (@tonihele I ran the update command twice, just in case.)\r\n\r\nLong-term, we should clean up the project so it can migrate to Gradle 8 ... and perhaps Kotlin-based Gradle as well, since that's where the world appears to be headed.",
    "head_branch": "sgold/gradle-7-6-4",
    "is_a_fork": false,
    "comments": [
      "> @tonihele I ran the update command twice, just in case.\r\n\r\nGlad to have caused adulthood trauma :D"
    ],
    "commit_messages": [
      "update the Gradle wrapper to v7.6.4 (#2197)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d46a14f302d393b25d9",
    "number": 2196,
    "body": "update copyright year",
    "head_branch": "capdevon-BoundingSphereDebug",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "BoundingSphereDebug: removed the unused variable radius and its getter method getRadius() (#2196)\n\nBoundingSphereDebug: removed the unused variable radius and its getter method getRadius()"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d47a14f302d393b25da",
    "number": 2195,
    "body": "add jMonkeyEngine license",
    "head_branch": "capdevon-clip-action",
    "is_a_fork": true,
    "comments": [
      "Hi @capdevon ,\r\nCan you explain why did you remove the reset() method?\r\n\r\nThanks!",
      "Hi @scenemax3d , the `ClipAction.reset()` method is **empty** and does **nothing**. \r\nIt is a method that was left incomplete in the transition to the new animation system. \r\nRemoving it does not cause any problem. In my opinion it only creates confusion and lowers the quality of the code.",
      "Yes, either to implement the method or remove it completely, however implementation will require a discussion on forum and some prerequisites, and thus another completely different PR. @scenemax3d If you want to support resetting ClipActions, then you might consider opening an issue for a later implementation."
    ],
    "commit_messages": [
      "#2194 add ClipAction.getAnimClip() method, remove ClipAction.reset() method (#2195)\n\n Add the ClipAction.getAnimClip() method and remove ClipAction.reset() method"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d48a14f302d393b25db",
    "number": 2193,
    "body": "For complex game state management, JME users can benefit from having a composite app state which handles child app states. This way the developer can easily organize his game states.\r\n\r\nThis composite app state is a contribution of Paul Speed and was copied as-is from:\r\n[src/main/java/com/simsilica/state/CompositeAppState.java](https://github.com/Simsilica/SiO2/blob/master/src/main/java/com/simsilica/state/CompositeAppState.java)\r\n\r\n",
    "head_branch": "composite-app-state",
    "is_a_fork": true,
    "comments": [
      "Hi @pspeed42,\r\nCan you please review the license text and add whatever needed credit / reference to your SiO2 lib\r\n\r\nThanks again :)  ",
      "To cover all bases, it might be nice to add a line like:\r\n\"Copied with Paul Speed's permission from: https://github.com/Simsilica/SiO2\"\r\n...somewhere near the copyright (maybe right before the all rights reserved).\r\nIt makes the pedigree clear and the permission explicit.\r\nBut it's technically fine as-is.",
      "> To cover all bases, it might be nice to add a line like: \"Copied with Paul Speed's permission from: https://github.com/Simsilica/SiO2\" ...somewhere near the copyright (maybe right before the all rights reserved). It makes the pedigree clear and the permission explicit. But it's technically fine as-is.\r\n\r\nSure! done."
    ],
    "commit_messages": [
      "Create CompositeAppState.java (#2193)\n\nA composite app state which auto manages child app states."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d49a14f302d393b25dc",
    "number": 2192,
    "body": "The continuous integration at GitHub needs a few updates to address the recent deprecation of Node.js 16.\r\n\r\nRecent CI summaries contain annotations of the following sort:\r\n\r\n> Node.js 16 actions are deprecated. Please update the following actions to use Node.js 20: actions/setup-java@v3, gradle/wrapper-validation-action@v1. For more information see: https://github.blog/changelog/2023-09-22-github-actions-transitioning-from-node-16-to-node-20/.\r\n\r\nFor example, see: https://github.com/jMonkeyEngine/jmonkeyengine/actions/runs/7747717155\r\n\r\nIf left unresolved, these issues might someday cause our continuous integration to fail.\r\nThis PR should resolve all or most of those annotations.",
    "head_branch": "sgold/gha-updates",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "update GitHub actions: setup-java to v4, wrapper-validation-action to v2 (#2192)\n\nResolves the deprecation of Node.js 16"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d4aa14f302d393b25dd",
    "number": 2191,
    "body": "Addresses this issue: https://github.com/jMonkeyEngine/jmonkeyengine/issues/2122\r\n\r\nTo re-summarize:\r\n\r\nThis PR extracts all of the texture reads and base PBR matParam assignment into a .glslib file (currently named PBRLightingParamReads.glsllib)\r\n\r\nAnd then it also extracts all of the lighting calculation into a .glslib file (currently named PBRLighting.glsllib)\r\n\r\nI also fixed alot of formatting and indentation mistakes, and overall reorganized the shader.\r\n\r\nThis should now make it as easy as possible for jme devs to fork PBRLighting to make changes, and they will no longer have to update the lighting or texReads to stay on par with master, as all future changes will all be in the glsllibs. This also reduces the chances that a lesser-skilled shader dev (or even skilled shader devs on a bad day) mistakenly mess up the lighting calculations when forking the shader.\r\n\r\nAny feedback and review is greatly appreciated.",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [
      "Once approved, I will also update the PBRTerrain shaders to create 2 new glsllibs titled \"AdvancedPBRTerrainParamReads.glsllibs\" and \"PBRTerrainParamReads.glsllib\" so that those will be modularized as well. \r\n\r\nBoth of those shaders will also be able to use PBRLighting.glslib for the final lighting calculation, ensuring that PBRLighting and PBRTerrain shaders always share the same lighting code and this will greatly reduce code redundancy. \r\n\r\nIt will also make shader development waaay easier for devs like myself who have 10 forks of PBRLighting all with minor differences.",
      "I have also placed both of the glslllibs in Common/ShaderLib/ for now...\r\n\r\nHowever I am not sure if that is the right place for these, as there is also a PBRLighting.glslib that contains the deeper pbr lighting equations (which are referenced and used in the new PBRLighting.glsllib) and the two could be easily confused. \r\n\r\nSo maybe we should make a new shaderLib directory for modular PBR glsllibs? I'm open to hearing others input on this (for now I don't have the correct reference to the glsllib in PbrLighting.frag, but I will update the import to be correct once a final location has been determined for these new glsllibs)\r\n\r\nI have also removed some ifDefs aroungs things like tbnMat's calculation, so that it will be calculated even if there is no normal map (I also still need to change PBRLighting.vert to remove ifDefs around the passing of the tbnMat and vViewDir varyings) . This will be important so that forks of the shader that do things like splatting normal maps will still be easy to make even if the original model does not have a normal map, without having to go in and change any of these .glsllibs",
      "Just made one more set of changes because I forgot about the spec-gloss pipeilne. \r\n\r\nI typically only use the metallic pipeline so I overlooked spec gloss yesterday, but I fixed it so both will work now.\r\n\r\nI've extensively tested my changes with models that use the metallic pipeline, however I have very few spec-gloss models so I didn't get to test that as thoroughly.\r\n\r\nI've also updated the vert and j3md files, so now this PR should be ready for a full-scale review. \r\n\r\n (The only reamining error in the code that I am aware of is the incorrect reference to importing PBRLighting.glsllib and PBRLightingParamReads.glsllib, since I am still unsure of where the best place to place these 2 new glslibs is)",
      "Hi @yaRnMcDonuts ,\r\nThank you for this PR 👍 \r\nThis split that you have made , does it breaks compatibility in any way for devs who forked the current shaders? do they need to change any of their custom shaders because of this change?\r\n\r\n10X :) ",
      "There shouldn't be any compatibility issues for any existent forks that are already out there. I made sure to not remove any params or defines from the shader, and only added 3 defines that will not have any effect if left undefined. So all files (the .j3md, .frag, and .vert) on master should still be compatible with forked versions of each other.\r\n\r\n> do they need to change any of their custom shaders because of this change?\r\n\r\nIf any jme devs out there don't want to adapt these changes to their own existing forks of PBRLighting.frag, then they should still be able to keep all of the logic in one big file and manually keep it up to date with master/stable without any newly added trouble.\r\n\r\nHowever, the next time someone makes a PR to add a new feature to the new PBRLighting .glsllibs on master, (such as the recent SpecularAA or AOStrength PRs) then, at that point, I'd highly recommend everyone with forks of PBRLighting adapt the changes and have their forks use the new glsllibs, so then they will never have to worry about updating their forks to stay on par with master/stable ever again in the future. \r\n\r\nBut if anyone still chooses not to adapt these changes and doesn't mind manually adding new features to their own custom version of PBRLighting.frag everytime master/stable has an update, then they are still free to keep on doing things the old way without any issues.",
      "How about renaming the file `PBRLightingParamReads.glsllib` -> `PBRLightingParamsReader.glsllib` since it contains a method named `readMatParamsAndTextures` ?",
      "That sounds like a good name to me, I updated the PR to rename it to PBRLightingParamsReader.glsllib and also updated the imports in PBRLighting.frag to reflect the change.\r\n\r\nI also fixed the import path to point to Common/ShaderLib/ in jme-core, so unless anyone objects to having these 2 new .glsllibs in the Common/ShaderLib/ directory in favor of a better place, then I will leave them there. \r\n\r\n",
      "I updated the comments to fix the typos you pointed out, thanks for the proofread.\r\n\r\nI also appeared to have misspelled glsllib as glslib multiple times (missing the second L) in the comments, so I fixed that as well. ",
      "The build failed on mac due to a time-out error, however I resubmitted the same file and it worked again... Strange, but at least everything is okay and there were no real problems.",
      "@yaRnMcDonuts , Since this is a change to the way dev. will use the engine and indicates some kind of official best practice approach for using shaders, I would like engine core devs to comment on it before integration.\r\nSo, @pspeed42 , @riccardobl , @stephengold, @MeFisto94  - can you please review & comment on this PR?\r\n\r\nThanks!",
      "The concern of code duplication is valid, but this change makes the shaders even more spaghetti coded.\r\nI think a better approach would be to keep the uniforms in the main shader and make all the functions work with well defined structs (eg. Light, Surface ...) , but generally speaking i would be reluctant to change well tested core code like this one, instead this could be a glsllib available for new shaders.\r\nAlso, there are additions that seem unrelated or maybe have very opinionated names eg.  indoorSunLightExposure , afaik there is no concept of indoor in this shader.",
      "@scenemax3d I have limited experience writing shaders and don't fully understand what this PR is doing, so I'd rather not make judgments regarding it.",
      "\r\n> but this change makes the shaders even more spaghetti coded.\r\n\r\nI would have to adamantly disagree with this in almost every way possible. \r\n\r\nOf course there are things I can still do to improve the organization of my PR, however I cannot believe that my PR is in any way more spagheti-coded than the previous PBRLighting.frag implementation, as that was extremely disorganized and needlessly difficult to make and maintain forks of.\r\n\r\nThe previous .frag shader was a jumbled mess with lighting-related code and paramter reads all mixed together, making it extremely annoying to write a fork that alters basic values that were previously spread accross the whole shader with some lighting-related calculations spread in between. \r\n\r\nNow it is organized so that any forks will 99% of the time be putting their code between the parmReads() method and the lightingCalculation() method I've added, so now no one will ever have to go and untangle the jumbled mess when they try ti make a fork of PBRLighting.\r\n\r\nWant to do simple splatting by blending to another albedo/normal/roughness/etc value in the old PBR shader? Well then you'd have to go down 100 lines to do the normal mapping after all the code putting the normal map in tangent space, then another 150 lines to do the roughness/metallic blending, then you had to go alll the way to the bottom of the shader (past the spec-gloss params and some lighting related stuff) to do the ao blending because for some reason AO got placed really far down, and at that point you now have to scroll up/down a huge file to keep track of code that should've been all in the same place. And with this PR, all the code that someone would add when forking this shader will 99% of the time fit simply between the paramReads and the lightincCalculation functions I've reorganized everything into.\r\n\r\n> Also, there are additions that seem unrelated or maybe have very opinionated names eg. indoorSunLightExposure , afaik there is no concept of indoor in this shader.\r\n\r\nI added some code to do indoor-lighting using the red channel of the vertex colors as an AO channel for only the DirectionalLight (I have videos to show it works if that is a concern). I did this to keep PBRLighting consistent with the official PBR terrain shader I added, since they will both use the same lighting glsllib. And this indoor lighting has been in my pbr terrain since I first contributed that shader. Also @JohnLKkk added this feature to his since-discontinued rendering pipeline and had plans to integrate it there, so I was also trying to stay consistent with the shaders being used for his PR. \r\n\r\nSo maybe that would be better renamed from InddorSunlightExposure to instead be something like DirecionalLightOcclusion?\r\n",
      "> I think a better approach would be to keep the uniforms in the main shader\r\n\r\nI could do this, but the general idea of this PR was to move as much solidified-code as possible out of the PBRLighting.frag file and into a glsllib, so that next time someone adds a PR changing the texture reads or lighting calculatons for PBR, anyone using that glsllib will only have to add the matParams to the .jmd and will not have to go and make a ton of changes in different places in the fragment sahder too.\r\n\r\nFor example, I have 6 forks of PBRLighting that all do something unique. So if I want to include the latest PRs from master that add AoStrength and SpecularAA, I have to go and put them in the right spot in every jumbled fragment shader, add al the uniforms to every fragment shader, and then also add all the params and defines to the .j3md.\r\n\r\nWith this PR, I would only have to add the params and defines for AoStrength and specularAA to the .j3md files, and would not have to change any of my forked .frag shaders since all the uniforms and important code for AOStrength and SpecularAA are in the .glsllib that every fork (and master) all use. \r\n",
      "> but generally speaking i would be reluctant to change well tested core code like this one, instead this could be a glsllib available for new shaders.\r\n\r\nHaving 2 identically functioning PBRLighting shaders in master sounds like a recipe for disaster and will just make things even more convoluted and confusing as far as keeping forks up to date with master.\r\n\r\nThis would mean that any new PRs to PBRLighting.frag on mater (like AoStrength or SpecualrAA, to conitnue with the examples I've been using) would also need implemented into the 2 glsllibs I've added (and vice versa), which would defeat the purpose of this PR that aims to make maintaining multiple forks of PBRLighting easier. \r\n",
      "> I would have to adamantly disagree with this in almost every way possible.\r\n\r\nMaybe i should elaborate on my previous point, i have nothing against the PBRLightingParamsReader that is closely related to PBRLighting, as you said, this can simplify the creation of \"forks\" of PBRLighting. \r\n\r\nMy argument is against PBRLighting.glsllib , since it declares some uniforms closely related to PBRLighting.frag implementation (or ibl technique)  but also some more generic PBR code that could be used by shaders not necessarily forking PBRLighting. \r\n\r\nIMO all the uniforms and macro declaration should be relegated to PBRLightingParamsReader and the generic code in  PBRLighting.glsllib should be extracted and refactored into self contained functions that do not access uniforms directly from the function body, the resulting library should be self contained and usable also from new shaders.\r\n\r\nI am opening a review to point exactly to the changes i am talking about\r\n\r\n----\r\n\r\nMaybe outside the scope of this pr, since it is a big refactoring of the pbr logic, but this was my solution: reimplementing everything as functions that receive structs as input and outputs new structs\r\nIf you are interested, you can see the code here:  https://gist.github.com/riccardobl/373028cd15c6c2ccca83889baeccce61 (this is partially based/inspired by jme pbrs).\r\n\r\n",
      "Well I still have a few minor changes to make to this PR, however I am going to wait to do any more work on this PR until I am sure it is going to be accepted...\r\n\r\nBased on the discussion in the issue that spurred this PR (as well as some discussion in a jme thread where with jhonkkk where he suggested I do this) I thought that there would be no issue passing a PR like this. I understand there are ways to modularize things even more, and this isn't the only way. Anyone else who wants to further modularize these shaders is welcome to do so in addition to this PR. \r\n\r\nBut I personally think these first steps I've taken to refactor PBRLighting are very basic and it seem like it should be common sense to implement such changes to reduce all of the duplicate code across the PBR and Terrain shaders.... this will make JME's stock shaders so much easier to maintain on core, and will also make them easier to extend for other rendering pipeline that want to use JME's current PBR implementation as a foundation (like how jhonkkk did). \r\n\r\nAlso @riccardobl I understand you are very skilled with shaders, but it also seems like you have your own versions of a PBR shader and a PBR terrain that do not match the ones on core and your shaders have deviated quite far from the ones on core, so I worry that you will not see the benefits of this PR as much as someone like myself who bases all of their shaders off of the ones on core. I have used and forked jme's stock PBRLighting and PBRTerrain shaders more than anyone else in this community probably, so I find it discouraging that I am encountering resistance on a PR like this.\r\n\r\n\r\n",
      "> Well I still have a few minor changes to make to this PR, however I am going to wait to do any more work on this PR until I am sure it is going to be accepted...\r\n> \r\n> Based on the discussion in the issue that spurred this PR (as well as some discussion in a jme thread where with jhonkkk where he suggested I do this) I thought that there would be no issue passing a PR like this. I understand there are ways to modularize things even more, and this isn't the only way. Anyone else who wants to further modularize these shaders is welcome to do so in addition to this PR.\r\n> \r\n> But I personally think these first steps I've taken to refactor PBRLighting are very basic and it seem like it should be common sense to implement such changes to reduce all of the duplicate code across the PBR and Terrain shaders.... this will make JME's stock shaders so much easier to maintain on core, and will also make them easier to extend for other rendering pipeline that want to use JME's current PBR implementation as a foundation (like how jhonkkk did).\r\n> \r\n> Also @riccardobl I understand you are very skilled with shaders, but it also seems like you have your own versions of a PBR shader and a PBR terrain that do not match the ones on core and your shaders have deviated quite far from the ones on core, so I worry that you will not see the benefits of this PR as much as someone like myself who bases all of their shaders off of the ones on core. I have used and forked jme's stock PBRLighting and PBRTerrain shaders more than anyone else in this community probably, so I find it discouraging that I am encountering resistance on a PR like this.\r\n\r\nDoes it make sense to suggest 2 side-by-side versions of PBRLighting? your way and the current way and let people decide which technique fits them better? or it will make everything more complicated?  ",
      "> Well I still have a few minor changes to make to this PR, however I am going to wait to do any more work on this PR until I am sure it is going to be accepted...\r\n> \r\n> Based on the discussion in the issue that spurred this PR (as well as some discussion in a jme thread where with jhonkkk where he suggested I do this) I thought that there would be no issue passing a PR like this. I understand there are ways to modularize things even more, and this isn't the only way. Anyone else who wants to further modularize these shaders is welcome to do so in addition to this PR.\r\n> \r\n> But I personally think these first steps I've taken to refactor PBRLighting are very basic and it seem like it should be common sense to implement such changes to reduce all of the duplicate code across the PBR and Terrain shaders.... this will make JME's stock shaders so much easier to maintain on core, and will also make them easier to extend for other rendering pipeline that want to use JME's current PBR implementation as a foundation (like how jhonkkk did).\r\n> \r\n> Also @riccardobl I understand you are very skilled with shaders, but it also seems like you have your own versions of a PBR shader and a PBR terrain that do not match the ones on core and your shaders have deviated quite far from the ones on core, so I worry that you will not see the benefits of this PR as much as someone like myself who bases all of their shaders off of the ones on core. I have used and forked jme's stock PBRLighting and PBRTerrain shaders more than anyone else in this community probably, so I find it discouraging that I am encountering resistance on a PR like this.\r\n\r\nI see the issue you are raising and i think this solves it to some extent, my worry is if this can be future proof. \r\nI see in your example that implementations are supposed to freely include readPBRParams or calculateFinalLightingValue function, or reimplement them if needed.\r\nThis will work only if we mandate that the behavior of readPBRParams and calculateFinalLightingValue will never ever be changed, otherwise a non backward compatible change in readPBRParams might break unexpectedly all the shaders depending on it, i think this might end up adding a lot of confusion and require multiple implementation of readPBRParams and calculateFinalLightingValue going forward.\r\n",
      "> I have used and forked jme's stock PBRLighting and PBRTerrain shaders more than anyone else in this community probably, so I find it discouraging that I am encountering resistance on a PR like this.\r\n\r\nI am sorry you feel discouraged, that's not my intention, i've also did a lot of experimentation with jme shaders and shaders in general and i've found that debugging shaders is very very hard and it is better to keep them as straightforward as possible, even if they look ugly and are monolithic.\r\nThat said, i am not opposed to this PR in principle ",
      "> Does it make sense to suggest 2 side-by-side versions of PBRLighting? your way and the current way and let people decide which technique fits them better? or it will make everything more complicated?\r\n\r\nThe only issue with having 2 versions is that the code/functionality would be identical so anytime someone updates PBRLighting they'd have to make the same changes in two placed. So we'd be maintaining 2 different shaders that are funciontallly identical which seems like unnecessary extra work, and wouldn't be a good permanent solution in my opinion.\r\n\r\nThis would potentially an acceptable short-term solution, that way we could ensure there are no issues with the refactored version of PBRLighting, PBRTerrain, and AdvancedPBRTerrain prior to replacing them. But having 2 different versions of an identical shader in the long term seems like it would defeat part of the purpose of this PR, since the goal is to make it easier to maintain those. \r\n\r\nFor example, both PBRTerrain shaders on master are currently a few PRs behind PBRLighting (missing things like SpecularAA) so right now I will have to go and copy/paste those changes to both shaders. And if we create two versions of each, then that would actually increase the work and I'd have to copy those changes to 4 places now. \r\n\r\nThis is the issue I currently have with my 8-9 forks of PBRLighting that all do the same param-reads and lighting, but have just a few changes between those 2 functions. My shader dev has been 100x less head-ache inducing since I no longer have to keep track of identical code in 8 different places.\r\n\r\n> i've found that debugging shaders is very very hard and it is better to keep them as straightforward as possible,\r\n\r\nI think the new version in this PR is much more straightforward, considering i de-coupled some lighting and param-reading code that was previously intermingled in PBRLighting, and separated the shader into 2 logical pieces (param reads and lighting). As long as a shader dev knows how .glsllibs work then it should be fairly easy to know which of the 2 new glsllibs you need to open up when an error points to code in those glsllibs. And this issue already exists considering PBR.glsllib already outsources some important lighting code to a glsllib, so I don't understand what is the fear in organizing some more reusable code into glsllibs like this.\r\n\r\n> This will work only if we mandate that the behavior of readPBRParams and calculateFinalLightingValue will never ever be changed,\r\n\r\nYes this was my intention to make these 2 .glsllibs un-changing, and they are always meant to be used with PBRLighting.frag or a fork of it. There are tons of things in PBRLighting.frag currently that should never be changed, but could easily be changed by mistake when someone forks it.\r\n\r\nFor example there is only 1 right way to read an albedo/normal/metallic roughness map for a PBR material. No one should be trying to fork a shader to change the base param reads susbtantially, and if they do so then they are no longer workign with a true fork of PBRLighting, and they would likely be working with a broken shader and probably don't know what they are doing and would have issues whether the code is in .glsllibs or in one big mega shader.\r\n\r\nThe only time anyone would ever change either of these .glsllibs is when someone makes a new PR that would've previously been added to PBRLighting.frag and PBRTerrain (such as the recent SpecularAA PR). \r\n\r\nI do not expect anyone to ever change these files when they try to make a fork of the current PBRLighting shaderr on master. If someone wants to make a new PBR shader with a new lighting technique, then they would be able to re-use PBRParamReader but would write their own code for the lighting, and they could even pack that into a glsllib so it can be reused by other shaders (like terrains) that share the new lighting technique.\r\n\r\nI keep mentioning JhonKKK's abandoned branch because that was the best example and is why I did this PR in the first place. He wanted to make his new lighting system work so that jme devs could re-use all of their existent PBR materials with his new system simply by changing the .j3md used by your existing materials. This meant that his new shader had to have all of the same MatParams as PBRLighting, thus why I packed those all into a glsllib so that they can be reused and won't have to continually be copy/pasted into new shaders, which would result in a ton of identical code across multiple forks which makes a ton of extra work trying to maintain them all.",
      "> otherwise a non backward compatible change in readPBRParams might break unexpectedly all the shaders depending on it,\r\n\r\nThis would only happen if we mistakenly let someone submit a bad PR to the glsllib for reading PBRParamaters and that would also break PBRLighting.frag on master, so I don't expect this to ever happen as long as we treat the new glsllibs the same way we treat the current mega shader.\r\n\r\nThat glsllib is exclusivley intended to work with PBRLighting.frag and true-forks of PBRLighting.frag. The only other reason PBRParamReader.glsllib would break an existing fork is if that fork is not a true-fork of PBRLighting, in which case they should not have tried reusing the PBRParamReader for their shader in the first place. That would be like if a jme dev was trying to use the Param reads from Lighting.frag with the lighting equation from PBRLighting.frag and then wonder why they don't have a roughness/metallic value.... at that point there's nothing we can do to help someone if they are going to try and mis-match shader code in such an incorrect way.\r\n\r\nI understand the desire to make things fool-proof, but I also am confused because typically jme core devs say the exact opposite, and I've often been told that \"jme is a developer's engine\" and that we should not sacrifice functionality and modularity just to make things more bug-proof and easier for an unskilled developer.\r\n\r\nIf this makes things a tiny bit more confusing for shader devs that don't like working with .glsllibs and ensuring that their .frag is set up parallell to PBRLighting.frag, well than I think that's an acceptable sacrifice to make. \r\n\r\nBut if we decide to not implement my changes, then we are making it harder for an experienced shader dev to maintain PBRLighting, PBRTerrain, and AdvancedPBRTerrain (as well as the 3 other GBufferPack version of these shaders that share param-reading but use a different lighting .glsllib) just so that other less skilled shader devs don't get as confused having to work with glsllibs instead of working in one mega shader. \r\n\r\nAnd I'd argue my solution is actually more fool-proof because an unskilled shader dev should not be trying to change things in the lighting or paramater reading equation anyways. 99% of forks of PBRLighting do not change the param reads or the lighting equation, they just alter the values like albedo/normal/rouhngess after the param reads but before the lighting. So by putting that static param reading and lighting code into glsllibs, the chance of a dev breaking something important is actually drastically reduced and the shader becomes way easier to debug when the forker's code is not intermingled with the code they should never be changing.",
      "I also think I need to mention one more thing for context, to ensure we are on the same page:\r\n\r\nWhen I say \"true fork of PBRLighting\" I am talking about a fork that uses the same param reads and same lighting code as the version of PBRLighting on master.\r\n\r\nI do not consider the \"PBRLightingGBufferPack\" shader by jhonkkk or your personal versions of a deferred PBR shaderr to be a true-fork of PBRLighting.j3md. Those are their own shaders with their own lighting techniques.\r\n\r\nThey might be able to share the same param reads (as is the case with JhonKKK's GBufferPack shaders), but since it does lighting in a drastically different way it is not really a fork of PBRLighting anymore (it is a new vesion of PBRLighting with new lighting code), and I do not expect these .glsllibs to be usable by anyone who deviates too far from the official version of PBRLighting.j3md.\r\n\r\nThis PR is specifically aimed at making the current PBR shaders on master (PBRLighting, PBRTerrain, AdvanceDPBRTerrain) easier to maintain and easier to fork for people who want to use our current rendering pipeline. And the fact that the param reads are able to be reused by other pipelines in the future  (which JhonKKK's implementation appears to have proven is possible) will make the job easier for him or the next person to pick up where he left off. He could just plug the params returned from PBRParamReader into his own lighting code and save himself the trouble of copy/pasting identical code to multiple frag files.\r\n\r\nAnd if he (or anyone else) really needed to make changes to the paramReader file in order for it to work with the new shader, then they could simply fork PBRLightingParamReader.glsllib and create a slighlty altered version called GBufferPackPBRLightingParamReader and then all his GBufferPack shaders could use that while all the old PBRLighting shaders would use the one I made. But that would be unlikely because PBR shaders will almost always all use the same base textures and params, even for different lighting techniques. The code in PBRLighting.glsllib is only the code that is likely to deviate and require new .glsllibs for each new rendering pieplline. And then at that point we could still go back and modularize the lighting code that is shared by multiple pipelines too, as you suggested in an earlier post. But since we only have 1 pipeline as of now, that is not a worry for me currently. I'll cross that bridge when/if we ever get another rendering pipeline.",
      "> The only issue with having 2 versions is that the code/functionality would be identical so anytime someone updates PBRLighting they'd have to make the same changes in two placed. So we'd be maintaining 2 different shaders that are funciontallly identical which seems like unnecessary extra work, and wouldn't be a good permanent solution in my opinion.\r\n> \r\n> This would potentially an acceptable short-term solution, that way we could ensure there are no issues with the refactored version of PBRLighting, PBRTerrain, and AdvancedPBRTerrain prior to replacing them. But having 2 different versions of an identical shader in the long term seems like it would defeat part of the purpose of this PR, since the goal is to make it easier to maintain those\r\n\r\nMy intention was to suggest some kind of deprecation process for the current shaders so we can safely remove them in future releases. not to keep updating both of them. Also, since this is actually an interface change I guess we should update the documentation with explanation about using those shaders with the new lib, extending it etc. I see that @riccardobl is not opposing the PR and personally I think it's a step in the correct direction (engineering wise) so I tend to integrate it but we need to make sure we have the updated docs.\r\n ",
      "Hi @yaRnMcDonuts,\r\nFollowing the [discussion ](https://hub.jmonkeyengine.org/t/extensible-structs-as-shader-pre-preprocessor-directive/47525/2) in the forum, are you going to update this PR with the improvement suggested by @riccardobl ?\r\nCan you share your plans for this PR?\r\n\r\nThanks :)",
      "Yes I was planning to continue working on this and was going to try to have it ready in time for the next release if possible. But @riccardobl messaged me to discuss the PR, and he had said he would work on a new struct based implementation of this PR that includes the important aspects of my PR with his struct approach. So hopefully he can comment and let you know the current status.\r\n",
      "> Yes I was planning to continue working on this and was going to try to have it ready in time for the next release if possible. But @riccardobl messaged me to discuss the PR, and he had said he would work on a new struct based implementation of this PR that includes the important aspects of my PR with his struct approach. So hopefully he can comment and let you know the current status.\r\n\r\nOK so if I understand correctly, @riccardobl will provide a new PR based on this PR and his structs approach? If so, can we close this PR as soon as he provides the new one?\r\n",
      "The draft is here: https://github.com/riccardobl/jmonkeyengine/tree/modularpbr\r\nIf @yaRnMcDonuts is ok with it, i can push to this pr branch",
      "@riccardobl Yeah that sounds good to me",
      "Hi @riccardobl ,\r\nwhen do you plan to push your changes to this PR?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d4ba14f302d393b25de",
    "number": 2190,
    "body": "Not sure if this list is only for released games, or if a coming-soon title is allowed (feel free to deny this pr if not)",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [
      "The proposed link points to some interesting articles about the project.\r\n\r\nI don't think there's a hard-and-fast policy for inclusion. We list Mythruna, but that at least has a test release available for download.\r\n \r\n@yaRnMcDonuts What's the availability of The Afflicted Forests? Is there anything people can actually run?",
      "It is technically in beta on steam (although not publicly listed on the Steam store yet), and it can be tested by any Steam user who has a beta key. \r\n\r\nAlthough it has been over 2 years since I updated the steam version because I unfortunately had no one contact me for keys when I announced it in the past on my IndieDb and social media accounts for my game, and Steam's stats shows no activity amongst the people who were given keys, sadly (lots of people asked for keys then never even activated them, so that was also a bit discouraging).\r\n\r\nI'm hoping to try another round of Beta testing soon, and can share keys with any JME user who is interested. But I admittedly have been discouraged from posting any recent updates to Steam since it started to feel like wasted time when no one was actually playing it, and I had a few times where I rushed to update it for a few people who asked for keys, only to find that they didn't actually try it or even activate their key.\r\n\r\nSo right now I'm trying to just improve my game visually and market it as much as possible in hopes of gathering more interest before I do another announcement about beta keys and start posting updates again.",
      "Yeah, marketing is hard.  Mythruna has a dedicated core set of users and a ton of old momentum and I'm still lucky to get 4-5 downloads when I do a new release... and that's with a significant amount of weekly work that's almost entirely for organic marketing (weekly videos, weekly live stream, etc.)",
      "I support this pull request."
    ],
    "commit_messages": [
      "Add My Game to README.md (#2190)\n\nAfflicted Forests game was added to the readme.md"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d4ca14f302d393b25df",
    "number": 2189,
    "body": "addresses this issue: https://github.com/jMonkeyEngine/jmonkeyengine/issues/2188 ",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Move NoiseLib.glslib to more appropriate location (#2189)\n\nRelocates reference of NoiseLib to jmecore"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d4da14f302d393b25e0",
    "number": 2187,
    "body": "This PR addresses issue #2186 and updates the copyright years for the affected source file.",
    "head_branch": "sgold/issue/2186",
    "is_a_fork": false,
    "comments": [
      "Thank you @stephengold "
    ],
    "commit_messages": [
      "IBLGLEnvBaker:  don't share a logger with IBLHybridEnvBakerLight (#2187)\n\nupdates the copyright years for the IBLGLEnvBaker.java\r\nsource file."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d4da14f302d393b25e1",
    "number": 2185,
    "body": "The smart quotes were unnecessary and caused issues in some editors, so I removed them. This resolves issue #2184.\r\nI also updated the copyright dates and split 2 lines that exceeded the 110-character limit.\r\nReady for review.",
    "head_branch": "sgold/issue/2184",
    "is_a_fork": false,
    "comments": [
      "It looks fine to me. Thank you @stephengold ",
      "I believe this is ready for integration."
    ],
    "commit_messages": [
      "solve issue #2184 (smart quotes in log messages) (#2185)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d4ea14f302d393b25e2",
    "number": 2183,
    "body": "Currently the jme3-plugins-json-gson subproject depends on v2.9.1 of Google's Gson library, which was released in July 2022.\r\n\r\nThis PR updates the dependency to v2.10.1, which was released in January 2023.\r\n\r\nFor a summary of the differences between the 2 releases, see [the Gson release notes](https://github.com/google/gson/releases).",
    "head_branch": "sgold/pr/gson2-10",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "update the \"gson\" library to v2.10.1 (#2183)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d4fa14f302d393b25e3",
    "number": 2182,
    "body": "This PR should be integrated as soon as any changes to the public repository are published.",
    "head_branch": "sgold/copyright/2024",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "update copyright years in the license (#2182)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d50a14f302d393b25e4",
    "number": 2181,
    "body": "This PR implements the suggested fix for issue #2178.\r\nReady for review.",
    "head_branch": "sgold/issue/2178",
    "is_a_fork": false,
    "comments": [
      "It looks fine to me. Thank you @stephengold "
    ],
    "commit_messages": [
      "solve issue #2178 (PBRTerrainTest typo) (#2181)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d51a14f302d393b25e5",
    "number": 2180,
    "body": "This PR implements the suggested fix for issue #2177.",
    "head_branch": "sgold/issue/2177",
    "is_a_fork": false,
    "comments": [
      "Ready for review.",
      "It looks fine to me. Thank you @stephengold "
    ],
    "commit_messages": [
      "solve issue #2177 (PBRTerrainAdvancedTest typo) (#2180)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d52a14f302d393b25e6",
    "number": 2179,
    "body": "https://github.com/jMonkeyEngine/jmonkeyengine/issues/2176\r\nLWJGLBufferAllocator.allocate() now always returns zero-initialized buffers.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "#2176 Make LWJGLBufferAllocator use nmemCalloc() instead of nmemAlloc() (#2179)\n\nhttps://github.com/jMonkeyEngine/jmonkeyengine/issues/2176\r\nLWJGLBufferAllocator.allocate() now always returns zero-initialized buffers."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d53a14f302d393b25e7",
    "number": 2175,
    "body": "Deprecate key classes in JME3-vr. This functionality is outdated (using OpenVR) and will be deleted in a future version.\r\n\r\nUser provided libraries supporting OpenXR should be used instead.\r\n\r\nAs discussed in the [thread for JME V3.7](https://hub.jmonkeyengine.org/t/jme-3-7/47390/5?u=richtea)",
    "head_branch": "#2174_deprecate-jme3-vr",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "#2174 deprecate key classes in JME3-vr. This functionality is outdated (using OpenVR) and will be deleted in a future version. (#2175)\n\nUser provided libraries supporting OpenXR should be used instead"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d54a14f302d393b25e8",
    "number": 2172,
    "body": "A straightforward fix based on @capdevon's suggestion, plus an automated test to catch regressions.",
    "head_branch": "sgold/issue/2168",
    "is_a_fork": false,
    "comments": [
      "This pull request is ready for review.",
      "It looks fine to me. Thank you @stephengold "
    ],
    "commit_messages": [
      "solve issue #2168 (incomplete serialization of FXAAFilter) (#2172)\n\n* solve issue #2168 (incomplete serialization of FXAAFilter)\r\n\r\n* test FXAAFilter serialization"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d55a14f302d393b25e9",
    "number": 2171,
    "body": "A straightforward fix based on @capdevon's suggestion, plus an automated test to catch regressions.",
    "head_branch": "sgold/issue/2167",
    "is_a_fork": false,
    "comments": [
      "This pull request is ready for review",
      "It looks fine to me. Thank you @stephengold "
    ],
    "commit_messages": [
      "solve issue #2167 (incomplete serialization of PosterizationFilter) #2170 (#2171)\n\n* solve issue #2167 (incomplete serialization of PosterizationFilter)\r\n\r\n* test PosterizationFilter serialization"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d56a14f302d393b25ea",
    "number": 2170,
    "body": "I implemented @capdevon's suggested fix and added an automated test to catch regressions.",
    "head_branch": "sgold/issue/2166",
    "is_a_fork": false,
    "comments": [
      "This pull request is ready for review",
      "It looks fine to me. Thank you @stephengold "
    ],
    "commit_messages": [
      " solve issue #2166 (logic error in DepthOfFieldFilter serialization)  (#2170)\n\n* solve issue #2166 (logic error in DepthOfFieldFilter serialization)\r\n\r\n* test DepthOfFieldFilter serialization"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d57a14f302d393b25eb",
    "number": 2165,
    "body": "Material-parameter names are case-sensitive, and the actual name of the parameter is \"CausticsMap\".\r\nThis resolves issue #2164.",
    "head_branch": "sgold/issue/2164",
    "is_a_fork": false,
    "comments": [
      "Even though this PR hasn't been reviewed, I plan to self-integrate it in about 36 hours ... unless there's substantial discussion."
    ],
    "commit_messages": [
      "solve issue #2164 (setCausticsTexture() sets non-existent parameter) (#2165)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d58a14f302d393b25ec",
    "number": 2163,
    "body": "Additional patch to #2085 that makes gltf pbr materials default EmissiveIntensity to 1.0.",
    "head_branch": "emissiveIntensityDefault",
    "is_a_fork": true,
    "comments": [
      "Done. Also updated UnlitExtensionLoader.",
      "> Also updated UnlitExtensionLoader.\r\n\r\nWhy did you do that?",
      "My bad. I was under the impression that copyright dates need to be updated as a matter of course. I'll change it back.",
      "> I was under the impression that copyright dates need to be updated as a matter of course.\r\n\r\nCopyright dates only need to be updated on files that are modified.",
      "Thanks for the fix, @codex128 !"
    ],
    "commit_messages": [
      "Fixes Gltf Emissive Intensity Default (#2163)\n\n* fixed emissive intensity gltf default\r\n\r\n* updated copyright dates\r\n\r\n* reverted copyright date"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d59a14f302d393b25ed",
    "number": 2162,
    "body": "Fixes #2161 by making PBRLighting use PBRGlow.frag, which uses Emissive and EmissiveMap material parameters for calculating glow.",
    "head_branch": "pbrGlow",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Solve issue #2161 (PBRLighting incompatible with glow) #2162"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d5aa14f302d393b25ee",
    "number": 2160,
    "body": "Fixed a bunch of Javadoc errors ~that were preventing the build~.",
    "head_branch": "javadoc-errors",
    "is_a_fork": true,
    "comments": [
      "These are good fixes, but I don't see any evidence that the build was broken.\r\nIf the build was broken, how come the repo's GitHub actions haven't failed?",
      "I tested it again and build is actually working fine. My mistake!\r\nApologies for the wrong report. ",
      "Unless there's more to discuss, I plan to integrate this PR in about 24 hours."
    ],
    "commit_messages": [
      "Fix javadoc errors (#2160)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d5aa14f302d393b25ef",
    "number": 2158,
    "body": "Improve several material definitions used in tests, based on Riccardo's note at the Discourse Forum/Hub: https://hub.jmonkeyengine.org/t/porting-jmonkeyengine-to-the-browser-with-webgl2-and-teavm-sourcecode-released/47020/65\r\n\r\nAs far as I know, these material definitions aren't causing any issues. This PR is more about setting a good example.",
    "head_branch": "sgold/glsl-order",
    "is_a_fork": false,
    "comments": [
      "Even though this PR hasn't been reviewed, I plan to self-integrate it in about 48 hours ... unless there's substantial discussion."
    ],
    "commit_messages": [
      "in J3MD files, always list GLSL versions in descending order (#2158)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d5ba14f302d393b25f0",
    "number": 2157,
    "body": "I reproduced issue #2096 using Java 11 on Mint Linux.  Adding 2 library dependencies solved it, as I suspected it might.\r\n\r\nHowever, I'm not very confident this is the right solution.\r\nI don't understand why issue #2096 doesn't occur when running examples in NetBeans.\r\nI don't understand when/why the jme3-plugins-json and jme3-plugins-json-gson libraries are required. Is this documented anywhere?",
    "head_branch": "sgold/issue/2096",
    "is_a_fork": false,
    "comments": [
      "Even though this PR hasn't been reviewed, I plan to self-integrate it in about 72 hours ... unless there's substantial discussion."
    ],
    "commit_messages": [
      "jme3-example:  add 2 library dependencies that were missing"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d5ca14f302d393b25f1",
    "number": 2156,
    "body": "This PR improves the javadoc in the com.jme3.math package to document certain assumptions and limitations related to 3-D coordinate transforms.\r\n\r\nIn particular, `Matrix4f.toScaleVector()` does not capture reflection and `Quaternion.fromRotationMatrix()` fails to compensate for it. These limitations ripple outwards, affecting other `Matrix4f`, `Quaternion`, and `Transform` methods.\r\n\r\n",
    "head_branch": "sgold/issue/2089",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "add some caveats to the com.jme3.math javadoc (#2156)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d5da14f302d393b25f2",
    "number": 2155,
    "body": "This adds null checks to the software skinning code, for both the old animation system and the new one.\r\nTo catch future regressions, a test case is provided.",
    "head_branch": "sgold/issue/2076",
    "is_a_fork": false,
    "comments": [
      "Unless there's something worth discussing, I plan to self-integrate this pull request in about 48 hours."
    ],
    "commit_messages": [
      "solve issue #2076 (software skinning requires vertex normals) (#2155)\n\n* SkinningControl:  add null checks to solve issue #2076\r\n\r\n* SkeletonControl:  add null checks to solve issue #2076\r\n\r\n* jme3-examples:  add a test for issue #2076"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d5ea14f302d393b25f3",
    "number": 2154,
    "body": "Ready for review.",
    "head_branch": "sgold/issue/2142",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "solve issue #2142 (Armature javadoc indicates wrong default) (#2154)\n\nThank you, @codex128 !"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66240d5fa14f302d393b25f4",
    "number": 2153,
    "body": "Would this be an acceptable solution for now?\r\n\r\nThis solves the problem of integrating https://github.com/LWJGLX/lwjgl3-awt (#1868)\r\n\r\nThere is just one small detail, removing the canvas from its main component and integrating it again breaks it. This issue occurs on the lwjgl3-awt side (https://github.com/LWJGLX/lwjgl3-awt/pull/40)",
    "head_branch": "LwjglCanvas_lwjgl-jawt",
    "is_a_fork": true,
    "comments": [
      "extends LwjglContext ,LwjglWindow , Which one is better?    LwjglWindow  Mainly to initialize glfw window",
      "This would solve #1192 and make #1868 obsolete.\r\n\r\nI didn't test it. But code wise it looks good. Very simple (or rather low LoC count :) ).\r\n",
      "I tried to test this but I couldn't get it running. I was always greeted with:\r\n![image](https://github.com/jMonkeyEngine/jmonkeyengine/assets/8344766/8e712188-0db3-4549-9fec-aa98593b90c4)\r\nAnd the appsettings at least indicate I have renderer set accordingly",
      "Did you check the dependencies?; You might be using lwjgl (on my Linux it throws a lot of errors)\r\n\r\n![Captura desde 2023-12-17 19-59-17](https://github.com/jMonkeyEngine/jmonkeyengine/assets/97632588/e793fd0c-ce98-44cb-b4fb-840aee073916)\r\n\r\nIn the examples module I did not change anything (in the tests I did but I reverted the changes)\r\n\r\nIt looks like a version issue... if so, it's probably line 199 (working to locate the error).",
      "> It looks like a version issue... if so, it's probably line 199 (working to locate the error).\r\n\r\nYeah, if I just remove `glData.profile = GLData.Profile.CORE;`, then it works. But it is a little bit volatile then:\r\n\r\n- Closing the app causes NPE (at LwjglAWTGLCanvas.deleteContext)\r\n- Switching the canvas to another tab just results in a black canvas. I can't see the cube anymore\r\n\r\nI'm talking about the `jme3test.awt.TestCanvas`.",
      "To actually use the profiles you need to do as the error message I posted, but it of course refers to the library settings:\r\n```\r\n        glData.majorVersion = 3;\r\n        glData.minorVersion = 2;\r\n        glData.profile = GLData.Profile.CORE;\r\n```\r\nThe above works but the canvas is just black and the test cube is not showing.",
      "Core profile I didn't get to work. Compatibility profile works. Here is an example how I tested this then to conform to jME's rendered setting (although I'm not sure if this is required or not...). But note that these didn't fix any of the problems encountered:\r\n\r\n```\r\nprivate static final Map<String, Consumer<GLData>> RENDER_CONFIGS = new HashMap<>();\r\n\r\n    static {\r\n        RENDER_CONFIGS.put(AppSettings.LWJGL_OPENGL30, (data) -> {\r\n            data.majorVersion = 3;\r\n            data.minorVersion = 0;\r\n        });\r\n        RENDER_CONFIGS.put(AppSettings.LWJGL_OPENGL31, (data) -> {\r\n            data.majorVersion = 3;\r\n            data.minorVersion = 1;\r\n        });\r\n        RENDER_CONFIGS.put(AppSettings.LWJGL_OPENGL32, (data) -> {\r\n            data.forwardCompatible = true;\r\n            data.majorVersion = 3;\r\n            data.minorVersion = 2;\r\n            data.profile = GLData.Profile.COMPATIBILITY;\r\n        });\r\n        RENDER_CONFIGS.put(AppSettings.LWJGL_OPENGL33, (data) -> {\r\n            data.forwardCompatible = true;\r\n            data.majorVersion = 3;\r\n            data.minorVersion = 3;\r\n            data.profile = GLData.Profile.COMPATIBILITY;\r\n        });\r\n        RENDER_CONFIGS.put(AppSettings.LWJGL_OPENGL40, (data) -> {\r\n            data.forwardCompatible = true;\r\n            data.majorVersion = 4;\r\n            data.minorVersion = 0;\r\n            data.profile = GLData.Profile.COMPATIBILITY;\r\n        });\r\n        RENDER_CONFIGS.put(AppSettings.LWJGL_OPENGL41, (data) -> {\r\n            data.forwardCompatible = true;\r\n            data.majorVersion = 4;\r\n            data.minorVersion = 1;\r\n            data.profile = GLData.Profile.COMPATIBILITY;\r\n        });\r\n        RENDER_CONFIGS.put(AppSettings.LWJGL_OPENGL42, (data) -> {\r\n            data.forwardCompatible = true;\r\n            data.majorVersion = 4;\r\n            data.minorVersion = 2;\r\n            data.profile = GLData.Profile.COMPATIBILITY;\r\n        });\r\n        RENDER_CONFIGS.put(AppSettings.LWJGL_OPENGL43, (data) -> {\r\n            data.forwardCompatible = true;\r\n            data.majorVersion = 4;\r\n            data.minorVersion = 3;\r\n            data.profile = GLData.Profile.COMPATIBILITY;\r\n        });\r\n        RENDER_CONFIGS.put(AppSettings.LWJGL_OPENGL44, (data) -> {\r\n            data.forwardCompatible = true;\r\n            data.majorVersion = 4;\r\n            data.minorVersion = 4;\r\n            data.profile = GLData.Profile.COMPATIBILITY;\r\n        });\r\n        RENDER_CONFIGS.put(AppSettings.LWJGL_OPENGL45, (data) -> {\r\n            data.forwardCompatible = true;\r\n            data.majorVersion = 4;\r\n            data.minorVersion = 5;\r\n            data.profile = GLData.Profile.COMPATIBILITY;\r\n        });\r\n    }\r\n```\r\n```\r\n        RENDER_CONFIGS.computeIfAbsent(settings.getRenderer(), (t) -> {\r\n            return (data) -> {\r\n                data.majorVersion = 2;\r\n                data.minorVersion = 0;\r\n            };\r\n        }).accept(glData);\r\n```",
      "> * Switching the canvas to another tab just results in a black canvas. I can't see the cube anymore\r\n\r\nAs I mentioned before, removing the canvas from the parent component and adding it back (or to any other component) breaks it, which is a problem that lwjgl3-awt currently has; TestCanvas performs this same procedure (removing the canvas).\r\n\r\n> * Closing the app causes NPE (at LwjglAWTGLCanvas.deleteContext)\r\n\r\nThis is an unexpected issue, thanks for reporting; Just out of curiosity, what operating system are you using (version)",
      "> To actually use the profiles you need to do as the error message I posted, but it of course refers to the library settings:\r\n> \r\n> ```\r\n>         glData.majorVersion = 3;\r\n>         glData.minorVersion = 2;\r\n>         glData.profile = GLData.Profile.CORE;\r\n> ```\r\n> \r\n> The above works but the canvas is just black and the test cube is not showing.\r\n\r\nStill trying to switch tabs?",
      "> This is an unexpected issue, thanks for reporting; Just out of curiosity, what operating system are you using (version)\r\n\r\nWindows 10.\r\n\r\n\r\n> Still trying to switch tabs?\r\n\r\nNo, this was just in general. I was trying stuff out. As the CORE profile doesn't work at all for me.",
      "> No, this was just in general. I was trying stuff out. As the CORE profile doesn't work at all for me.\r\n\r\nWhen setting `data.forwardCompatible = true` to true, for some reason they don't work even though the lwjgl3-awt documentation recommends it... strange; For now this should work.\r\n\r\n> *Closing the app causes NPE (at LwjglAWTGLCanvas.deleteContext)\r\n\r\nNow, it's pending... I'm testing on Windows 10 to fix it...",
      "At the moment I can run it on Windows-10 and there is no problem with Linux.",
      "With this patch (if it can be considered), LwjglCanvas works with Linux without problems (100%)\r\n- Now you can delete and re-add the canvas without any problem.\r\n\r\nNow I'm working on getting it to work with Windows, MacOS shouldn't be a problem.",
      "> With this patch (if it can be considered), LwjglCanvas works with Linux without problems (100%)\r\n> \r\n> * Now you can delete and re-add the canvas without any problem.\r\n> \r\n> Now I'm working on getting it to work with Windows, MacOS shouldn't be a problem.\r\n\r\nHi,\r\nWhat is the status of getting it to work with Windows / MacOS ?\r\nIs there anything preventing us from merging it to v3.7.0?\r\nThanks :) ",
      "> What is the status of getting it to work with Windows / MacOS ?\r\n\r\nIn the case of Windows it is currently pending. The option to remove and re-add the canvas is the only issue present.\r\n\r\nRegarding MacOS; Removing and re-adding the canvas is no problem (it basically totally works; according to the **lwjgl3-awt** guys),\r\n\r\n> Is there anything preventing us from merging it to v3.7.0?\r\n\r\nThe Windows platform that still has the aforementioned problem.\r\n\r\n\r\n",
      "Looks like #1868 just went in. I suppose that is ok, it should not cause any harm. But I'm in favor of overwriting the said PR with this. As this is hardware accelerated, a real solution to the problem.",
      "> Looks like #1868 just went in. I suppose that is ok, it should not cause any harm. But I'm in favor of overwriting the said PR with this. As this is hardware accelerated, a real solution to the problem.\r\n\r\nYes. there is a current pending issue with Windows. I will merge it as soon as it is resolved",
      "Hi @JNightRide \r\nYou mentioned in the forum that more commits are planned for this PR.\r\nWhat is your estimation for adding them? \r\n\r\n@tonihele - if we decide to merge this PR, should we need to pay attention to some of your https://github.com/jMonkeyEngine/jmonkeyengine/pull/1868 PR code or we can just merge this PR as-is without warring about the changes that you have made?\r\n\r\nThanks :)",
      "> What is your estimation for adding them?\r\n\r\nTo answer this question.\r\n\r\n*  I should first mention that the \"commits\" I plan to release are **bugfixes** (JME3 side) and **javadoc**.\r\n* It is possible that it will be finished on February 4.\r\n\r\n[ **NOTE** ]\r\nThis PR still has a conflict with Windows (the issue of removing and re-adding the canvas).\r\n\r\nThis current issue is on the **lwjgl3-awt** side, it can't be patched from JME3 (as far as I know), **lwjgl3-awt** may need to be modified to fix it (source code), I'm working on it; However, at the moment I do not have the time necessary to present a definitive solution.\r\n\r\nIs JME3 willing to accept this \"PR\"? And in a future version (3.7.x), this issue may be fixed.",
      "> * It is possible that it will be finished on February 4.\r\nExcellent! thank you. \r\n\r\n> Is JME3 willing to accept this \"PR\"? And in a future version (3.7.x), this issue may be fixed\r\nI will get the core dev. advise and get back with answer\r\n",
      "> @tonihele - if we decide to merge this PR, should we need to pay attention to some of your #1868 PR code or we can just merge this PR as-is without warring about the changes that you have made?\r\n\r\nThis can and should override my PR. No need to worry about the stuff I made.\r\n\r\nMerge conflicts just no need to be resolved accordingly.\r\n\r\nAlso notable that as of currently this PR will change jme-examples to run on LWJGL 3. I suppose this is fine as we should really start advocating it as default.",
      "Thanks for your PR :100: \r\n\r\nAnyone can test this with Wayland on linux?  It seems it is using X11 apis, so i wonder if it will work as expected",
      "> There is just one small detail, removing the canvas from its main component and integrating it again breaks it. This issue occurs on the lwjgl3-awt side (https://github.com/LWJGLX/lwjgl3-awt/pull/40)\r\n\r\nCan you add a test to reproduce this issue?",
      "> Can you add a test to reproduce this issue?\r\n\r\nThere is the https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-examples/src/main/java/jme3test/awt/TestCanvas.java general test. It has the context menu where this can be caused.",
      "With this, this PR now has the necessary documentation and reported bug fixes.\r\n\r\n",
      ">  Can you add a test to reproduce this issue?\r\n\r\nIt seems that this question has already been answered for you; Thank you @tonihele  for your quick response.",
      "Note that this PR changed the jME tests to run on LWJGL3. While this is fine and desirable. Our TestChooser is still written in Swing, and by using TestChooser people might run into errors..."
    ],
    "commit_messages": [
      "LwjglCanvas using lwjgl-jawt (#2153)\n\nCanvas rendering solution using lwjgl-jawt"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d60a14f302d393b25f5",
    "number": 2152,
    "body": "This PR adds getters for the `FrameInterpolator` of a `MorphTrack` or `TransformTrack`.\r\n\r\nThe corresponding setters date back to MonkAnim, but Nehon didn't provide getters. I don't know why.\r\n\r\nThe use case is when I want to deep-clone an `AnimTrack`.  Since these classes don't implement deep cloning using `cloneFields()`, I need access to the private `interpolator` field. Currently such access is possible only by using reflection.\r\n",
    "head_branch": "sgold/frame-interp",
    "is_a_fork": false,
    "comments": [
      "Unless there's something worth discussing here, I plan to self-integrate this pull request in about 72 hours."
    ],
    "commit_messages": [
      "jme3-core:  add 2 getters for frame interpolators (#2152)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d61a14f302d393b25f6",
    "number": 2151,
    "body": "The recent publication of ndebruyn's jam prompted me to take another look at README.md\r\n\r\nThe tone and inaccuracies of our README have irritated me for years, so I decided to refine it a bit.",
    "head_branch": "sgold/readme/nov2023",
    "is_a_fork": false,
    "comments": [
      "Ready for review.",
      "Thanks for doing this.",
      "If there's nothing more to discuss, I plan to self-integrate this PR in about 24 hours."
    ],
    "commit_messages": [
      "updates to the README (#2151)\n\n* README.md:  add \"Stranded\" (by ndebruyn) the list of published games\r\n\r\n* README.md:  delete misleading disparagement of the \"master\" branch\r\n\r\n* README.md:  SDK plugins and asset packs have been neglected for years\r\n\r\n* README.md:  specify site that hosts \"Cubic Nightmare\" (for consistency)\r\n\r\n* README.md:  tweak capitalization of a section heading (for consistency)\r\n\r\n* README.md:  more accurate description of our technology stack\r\n\r\n* README.md:  capitalize each word in section headings\r\n\r\n* README.md:  abbreviate \"etcetera\"\r\n\r\n* README.md:  motivate forum membership without implying we're tribal\r\n\r\n* README.md:  mention that the Wiki includes tutorials\r\n\r\n* README.md:  elaborate on and clarify the technology stack"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d62a14f302d393b25f7",
    "number": 2150,
    "body": null,
    "head_branch": "sgold/light-control",
    "is_a_fork": false,
    "comments": [
      "Unless there's something to discuss, I'd like to self-integrate this PR in about 24 hours."
    ],
    "commit_messages": [
      "LightControl:  correct some copy-paste errors in the javadoc (#2150)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d63a14f302d393b25f8",
    "number": 2148,
    "body": null,
    "head_branch": "sgold/issue/2131",
    "is_a_fork": false,
    "comments": [
      "Ready for review.",
      "Unless there's substantial discussion, I plan to self-integrate this pull request in about 72 hours."
    ],
    "commit_messages": [
      "solve issue #2131 (NPE while loading a GLB v1 asset) (#2148)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d64a14f302d393b25f9",
    "number": 2147,
    "body": "Ready for review.",
    "head_branch": "sgold/issue/2135",
    "is_a_fork": false,
    "comments": [
      "Unless there's substantial discussion, I plan to self-integrate this pull request in about 48 hours."
    ],
    "commit_messages": [
      "solve issue #2135 (ClassCastException in MTLLoader) (#2147)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d65a14f302d393b25fa",
    "number": 2144,
    "body": "The purpose of this PR is to deprecate TangentBinormalGenerator\r\n\r\n- Deprecate TangentBinormalGenerator in favor of MikktspaceTangentGenerator\r\n- Add a bit more context to the comment in MikktspaceTangentGenerator \r\n- Remove the part about it being experimental, since at this point it has been tested and patched enought to be considered out of this stage\r\n- Add generate(Mesh) to match TangentBinormalGenerator \r\n- Move debugging utils from TangentBinormalGenerator into TangentUtils to be used with MikktspaceTangentGenerator\r\n- Replaces the usage of TangentBinormalGenerator in all the examples and tests (except the Parallel Tangent test since out mikktspace doesn't have a parallel implementation).\r\n\r\nThis PR needs to be tested",
    "head_branch": "deprecatetbn",
    "is_a_fork": true,
    "comments": [
      "Hi guys, what is the status of this PR ? Is it complete ?",
      "> Hi guys, what is the status of this PR ? Is it complete ?\r\n\r\nAfter reviewing the code in regards to its functionality (not for formatting or anything else), I would say it is complete and looks ready to be merged. I have also been using the MikktSpaceTangentGenerator extensively with a fairly wide variety of models in my own project and editor for at least 2 years now, so I am personally confident in its reliability.\r\n\r\nI'd also like to try to merge this to get it into the 3.8 alpha release that will be out soon. That way we can get jme users testing these changes as early in the alpha / beta process as possible. \r\n\r\nBut (since this PR has been sitting for a while) I will wait a few days before merging, in case @riccardobl has anything to add or wants to change anything before the PR is merged. \r\n\r\n",
      "I merged this PR so it will be in the first 3.8.0-alpha1 release in the next day or so.\r\n\r\nThere were many engine examples updated in this PR to use MikktspaceTangentGenerator and there will be a handful of test-cases that will need testing, so I think getting this into the alpha release asap is important.\r\n\r\nI took a screenshots showing a list of every test-case / example that was changed in this PR, so that will hopefully make it easier for users to reference this list to test all of these in rapid succession:\r\n\r\n![image](https://github.com/user-attachments/assets/53425a05-2cdc-44fc-95db-1118dce254c5)\r\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d66a14f302d393b25fb",
    "number": 2141,
    "body": "see:http://www.jp.square-enix.com/tech/library/pdf/ImprovedGeometricSpecularAA(slides).pdf\r\nhttps://docs.unity3d.com/Packages/com.unity.render-pipelines.high-definition@15.0/manual/Geometric-Specular-Anti-Aliasing.html\r\nhttps://hub.jmonkeyengine.org/t/geometric-specular-anti-aliasing/47246/2\r\nUsage: Simply set Material.setBoolean(\"SpecularAA\", true);",
    "head_branch": "jhon-dev",
    "is_a_fork": true,
    "comments": [
      "Should we set this on by default? Are there any disadvantages in doing so? It doesn't seem computationally intensive",
      "> Should we set this on by default? Are there any disadvantages in doing so? It doesn't seem computationally intensive\r\n\r\nPersonally, I'm inclined to set its default value to True, however, others may not want anti-aliasing to be on by default (for some reason it seems most people use the low quality graphics mode in JME), so I'm not sure if the default here should be changed to True...",
      "I forgot one thing, I will expose the two parameters Screen Space Variance and Threshold to material parameters tomorrow as well. For descriptions of them, refer to:\r\nhttps://docs.unity3d.com/Packages/com.unity.render-pipelines.high-definition@15.0/manual/Geometric-Specular-Anti-Aliasing.html",
      "I think we should make an exception in this case, since it won't impact performances too much and it is most likely a wanted feature, i doubt anyone likes aliasing in the reflections, but let's wait for a counterargument .",
      "I would say make it default",
      "agree, i think it should be default with just option to disable. (like its option now)\r\n\r\nTho i belive it might be nice to add later to PBRTerrain too? (it do not need to be this pr ofc)",
      "> agree, i think it should be default with just option to disable. (like its option now)\r\n> \r\n> Tho i belive it might be nice to add later to PBRTerrain too? (it do not need to be this pr ofc)\r\n\r\nSpecular-AA has been added to PBRTerrain.\r\n\r\n> I think we should make an exception in this case, since it won't impact performances too much and it is most likely a wanted feature, i doubt anyone likes aliasing in the reflections, but let's wait for a counterargument .\r\n\r\n> I would say make it default\r\n\r\nTrue has been set as the default value, and two material parameters (Screen Space Variance and Threshold) have been added.\r\n"
    ],
    "commit_messages": [
      "Adding support for Specular-AA (#2141)\n\n* Fixes Issue #2132\r\n\r\n* jme3-core:Adding support for Specular-AA\r\n\r\n* jme3-core:del Specular_Anti_Aliasing2\r\n\r\n* jme3-core:update Specular_Anti_Aliasing\r\n\r\n* jme3-core:update Specular_Anti_Aliasing\r\n\r\n* jme3-core:add MatParam:Sigma,Kappa\r\n\r\n* jme3-terrain:Adding support for Specular-AA\r\n\r\n* jme3-core:update PBRLighting.j3md(with SpecularAA)\r\n\r\n* jme3-terrain:update PBRTerrain.j3md(with SpecularAA)\r\n\r\n* jmee-core:remove the \"f\" suffix\r\n\r\n* jmee-terrain:remove the \"f\" suffix\r\n\r\n* jme3-core:Updated parameter names in PBRLighting.j3md\r\n\r\n* jme3-terrain:Updated parameter names in PBRTerrain.j3md/AdvacedPBRTerrain.j3md\r\n\r\n* jme3-core:Updated macro definitions in PBRLighting.j3md\r\n\r\n* jme3-terrain:Updated macro definitions in PBRTerrain.j3md/AdvancedPBRTerrain.j3md\r\n\r\n---------\r\n\r\nCo-authored-by: chenliming <liming.chen@yingxiong.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d67a14f302d393b25fc",
    "number": 2140,
    "body": "See https://github.com/jMonkeyEngine/jmonkeyengine/pull/2120#issuecomment-1793804895",
    "head_branch": "badtbn",
    "is_a_fork": true,
    "comments": [
      "Tested with the ogre format, it displayed the same behavior as gltf.\r\nNB: tangents need to be generated with parity in the ogre exporter\r\n![image](https://github.com/jMonkeyEngine/jmonkeyengine/assets/4943530/d838bdf9-a4a7-44c9-8a39-728985c87fe2)\r\n\r\n\r\n@codex128 when you can, please look into this and let me know your opinion on this patch"
    ],
    "commit_messages": [
      "Fix sign of tbn generator that caused normal map flipping in some situations (#2140)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d68a14f302d393b25fd",
    "number": 2139,
    "body": "This PR should eliminate the distracting/confusing warnings currently generated when the same texture is specified for both LightMap and another PBR map.",
    "head_branch": "sgold/pr/lightmap-linear",
    "is_a_fork": false,
    "comments": [
      "This change eliminates some runtime diagnostics like this one:\r\n\r\n```console\r\nNov 04, 2023 11:44:39 PM com.jme3.material.Material checkTextureParamColorSpace\r\nWARNING: The texture Models/Tank/Tank_Occ_Rough_Metal.png has linear color space, but the material parameter LightMap specifies no color space requirement, this may lead to unexpected behavior.\r\nCheck if the image was not set to another material parameter with a linear color space, or that you did not set the ColorSpace to Linear using texture.getImage.setColorSpace().\r\n```",
      "Is the light map supposed to be linear? It is sampled as color, so i would say it should be sRGB, but i genuinely don't know what is the consensus for light maps.",
      "The only evidence I have one way or the other is that it's common to specify the same texture for both \"LightMap\" and \"MetallicRoughnessMap\" (with \"LightMapAsAOMap\" set to `true`). Since \"MetallicRoughnessMap\" specifies `-LINEAR` it makes sense that \"LightMap\" should also.",
      "It seems that when LightMapAsAOMap is true the lightmap is used as ao map that is a grayscale linear texture that can be specified as -LINEAR.\r\nBut when it is used as an actual lightmap, it contains colors and so it should be sampled as sRGB.",
      "@riccardobl How inconvenient! \r\nPerhaps a better solution would be to have distinct material parameters for the light map and the AO map.\r\nWhat do you think?",
      "We have so many possible combinations in our PBR shader at this point, but my understanding is that if the AO map is the R component of MetallicRoughnessMap, it should be used by setting AoPackedInMRMap.\r\nWhile LightMapAsAOMap should be used when the AO map is standalone and provided using the LightMap field.",
      "PBRLighting.j3md does seem needlessly complex.\r\n\r\nSo if \"AoPackedInMRMap\" is true then the AO map is linear, but if \"LightMapAsAOMap\" is true then the AO map is sRGB?",
      "AO is always linear, but the lightmap is linear if it contains only AO or sRGB if it is a full lightmap"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d68a14f302d393b25fe",
    "number": 2138,
    "body": "Fixes #2136 ",
    "head_branch": "bugfix/issue-2136",
    "is_a_fork": true,
    "comments": [
      "1. Have you tested this fix?\r\n2. The refactoring is appreciated, but should probably go in a separate PR. Doing so much refactoring for a one-line fix obscures the fix.\r\n3. I'm confused by the comment \"// Alpha is a RenderState not a Material Parameter, so return null\". It looks like \"AlphaDiscardThreshold\" *is* a material parameter. So why is it incorrect to return it?",
      "> 1. Have you tested this fix?\r\n> \r\n>     2. The refactoring is appreciated, but should probably go in a separate PR. Doing so much refactoring for a one-line fix obscures the fix.\r\n> \r\n>     3. I'm confused by the comment \"// Alpha is a RenderState not a Material Parameter, so return null\". It looks like \"AlphaDiscardThreshold\" _is_ a material parameter. So why is it incorrect to return it?\r\n\r\n1. Yes, 3 different models I loaded.\r\n2. I'll revert it and redo it without any refactoring. switch case is faster (marginally) and more readable (to me) but not worth a separate PR\r\n3. The way this adapter pattern works here is that each implementation (here PBRMaterialAdapter) puts their own parameter mapping GLTF syntax -> jME x material syntax. This mapping then either works directly or some GLTF parameters are actually something else. With something else I mean RenderStates or somethings that require setting some other value. With other value, I guess one could create a new MatParam to return and have the super put it. But this would also be a refactor as the pattern in the file seems to be that the overrides are simply set there rather and a new MatParam created. I think it is clearer this current way.\r\n\r\nI guess the correct comment would be something like `GLTF alpha mode already handled here, return null`. Returning null means that the super doesn't set it anymore.",
      "Thanks for the answers. I'll delay integration so you can address items 2 and 3.",
      "Less invasive patch implemented",
      "Thanks, @tonihele. Unless there's substantial discussion, I plan to integrate this in about 48 hours."
    ],
    "commit_messages": [
      "Solve #2136 (flow-control issue with glTF alpha parameter) (#2138)\n\n* Fix flow control issue with alpha parameter\r\n\r\n* Revert \"Fix flow control issue with alpha parameter\"\r\n\r\nThis reverts commit 3ee3473c9108a895b6a0a37f2dc4603105217e08.\r\n\r\n* Fix flow control issue with alpha parameter"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d69a14f302d393b25ff",
    "number": 2137,
    "body": "Optimized version of reading bytes. Instead of reading one byte at the time... read multiple. With GLB, the whole file is in memory and with GLTF the reading is done from `BufferedReader` (meaning that there is never this catastrophic case where we would read a disk file a byte at a time). In latter case this would increase the reading speed even more than analyzed here. I just don't know does GLTF store anything in byte arrays. GLB seems to store the textures this way, which are potentially huge. So even reading from memory, calling this `readByte` billions of times causes significant overhead.\r\n\r\nThe same problem is with all the populate*Array but fixing those others is potentially more messy and yield in less gains as the units are already bigger. That being said, I only focus on this biggest offender.\r\n\r\nI used https://developer.nvidia.com/orca/amazon-lumberyard-bistro (BistroExterior.glb) as a test case. Model loading took on average:\r\n31 605ms (optimized)\r\n47 824ms (old)\r\n\r\nResolves #2125 ",
    "head_branch": "feature/issue-2125",
    "is_a_fork": true,
    "comments": [
      "And as a note, the measurements are done with https://github.com/jMonkeyEngine/jmonkeyengine/issues/2127 in place. So every texture is read max 1 time.",
      "Thank you for investigating how to improve performance.\r\n\r\nFor the `dataLength == stride` case, why not `stream.read()` directly into the `array`? That would eliminate the `arrayCopy()`.",
      "We should fix LittleEndien [sic] readFully() and use readFully() in all of these cases where read(array)'s return value is being ignored.\r\n\r\nThe length passed to read(array, pos, length) is a maximum length to read.  The method is free to return fewer bytes.  I'm surprised this hasn't caused problems actually and we must have been pretty lucky.\r\n\r\nFor example, last I checked, a BufferedInputStream when asked to return 100 bytes but it only has 32 bytes left in its current buffer will just read 32 bytes.  This leaves the rest of the array unchanged and leaves the stream in an unpredictable position.  Actually, who knows how many random issues this may have been causing that we never tracked down because something else magically fixed it.",
      "> For the `dataLength == stride` case, why not `stream.read()` directly into the `array`? That would eliminate the `arrayCopy()`.\r\n\r\nYes, of course. Copy paste brain fart. This was changed.\r\n\r\nAlso added a small assert on the data reading part.",
      "How does it look now? Everything ok?",
      "I'm not sure you understood the nature of my complaint.\r\n\r\nOur use of read(buf, pos, len) is WRONG.  Not in a \"we should detect this possible case\" kind of way... but in a \"we are abusing the method and will have random weird consequences someday kind of way\".\r\n\r\nIf we wants to use read(buf, pos, len) then we need to put it in a loop that reads until pos == len.  See the JDK's implementation of DataInputStream.readFully() for an example of such a loop.\r\n\r\nPut another way: it is perfectly normal for read(buf, 0, 100000) to return only read 2 bytes and return 2.  In the current form, you treat this like an error (it's not).\r\n\r\nBTW: \"assertReadLength\" confused me at first because no actual assert calls were made.",
      "> I'm not sure you understood the nature of my complaint.\r\n> \r\n> Our use of read(buf, pos, len) is WRONG. Not in a \"we should detect this possible case\" kind of way... but in a \"we are abusing the method and will have random weird consequences someday kind of way\".\r\n> \r\n> If we wants to use read(buf, pos, len) then we need to put it in a loop that reads until pos == len. See the JDK's implementation of DataInputStream.readFully() for an example of such a loop.\r\n> \r\n> Put another way: it is perfectly normal for read(buf, 0, 100000) to return only read 2 bytes and return 2. In the current form, you treat this like an error (it's not).\r\n\r\nAs far as I understand, `populateXArray` method and the likes, get a stream and they calculate how much they are supposed to read from it. Depending on the variables they are given. That is why I wouldn't dare to use `readFully`. That might advance the stream too much. This method has no way of telling that the given stream is actually just provided fully for consumption of it.\r\n\r\nNot getting enough bytes from the read would be a file structure error for me at least. I was told to read certain amount of bytes and they were not found, file is corrupted. This is how I treat data structures.\r\n\r\n> BTW: \"assertReadLength\" confused me at first because no actual assert calls were made.\r\n\r\nI'm trying to consolidate to the existing code file. There is already a similar _assert_, `assertNotNull` method. I agree that it is not the best. But I think that it is better not to change the style unnecessarily.\r\n\r\nSo is it fine if I just remove the assert stuff? Fixing LittleEndien I consider to be a little out of scope for this.",
      "@tonihele I think you're missing Paul's point. He isn't asking you to use `readFully`; he's asking to check the return value of `read()` and iterate until enough bytes are read.",
      "sgold's got it.\r\n\r\nIf you ask read to read 10 bytes.  It might only read 2.  That's not because there are only 2 bytes.  That's just because it decided to return 2 right now.  The other 8 are still there waiting for you to finish reading them.  Read again and you will get some more bytes.\r\n\r\nThe current code is 100% totally buggy.  It's frankly amazing that it works at all.",
      "Ok, I think understand now. I was just in the believe that streams have always reached EOF if they don't return the requested amount of bytes and any further call will just get IOException.\r\n\r\nIs it now correct?",
      "Code looks better now, I think.\r\n\r\nread will return -1 when there is no more data.\r\n\r\nThere can be a variety of reasons that read() might return less data then requested.  Apparently, it will always read at least one byte (if available).\r\n\r\nhttps://docs.oracle.com/javase/8/docs/api/java/io/InputStream.html#read-byte:A-int-int-\r\n\r\n...it's up to the stream how to proceed from there.  For example, a BufferedInputStream may return just what's left in its current buffer rather than reading an entire new buffer.  That's why I'm surprised this hasn't come up before.  We may have just been really lucky.\r\n\r\nSomeone should go back and fix LittleEndien (and perhaps fix the spelling someday) to implement a correct readFully().\r\n\r\n",
      "> ...it's up to the stream how to proceed from there. For example, a BufferedInputStream may return just what's left in its current buffer rather than reading an entire new buffer. That's why I'm surprised this hasn't come up before. We may have just been really lucky.\r\n\r\nI think BufferedInputStream returns the requested amount always if available in stream. The buffer is just its internal workings. Only time when I have encountered this is reading straight from a network/Internet. But yeah, this is how the interface is supposed to work then.",
      "I think the code says otherwise.  From BufferedInputStream.java:\r\n```\r\n    /**\r\n     * Read characters into a portion of an array, reading from the underlying\r\n     * stream at most once if necessary.\r\n     */\r\n    private int read1(byte[] b, int off, int len) throws IOException {\r\n        int avail = count - pos;\r\n        if (avail <= 0) {\r\n            /* If the requested length is at least as large as the buffer, and\r\n               if there is no mark/reset activity, do not bother to copy the\r\n               bytes into the local buffer.  In this way buffered streams will\r\n               cascade harmlessly. */\r\n            if (len >= getBufIfOpen().length && markpos < 0) {\r\n                return getInIfOpen().read(b, off, len);\r\n            }\r\n            fill();\r\n            avail = count - pos;\r\n            if (avail <= 0) return -1;\r\n        }\r\n        int cnt = (avail < len) ? avail : len;\r\n        System.arraycopy(getBufIfOpen(), pos, b, off, cnt);\r\n        pos += cnt;\r\n        return cnt;\r\n    }\r\n```\r\nIt won't call fill() if there is already data available and will just return up to whatever is left.  It only calls fill() when it runs out of data.\r\n\r\nThe code is fully available to anyone that wants to check the claims I make about Java code... 90% of the time I already looked up the code before making the claim.",
      "> I think the code says otherwise. From BufferedInputStream.java:\r\n> \r\n> ```\r\n>     /**\r\n>      * Read characters into a portion of an array, reading from the underlying\r\n>      * stream at most once if necessary.\r\n>      */\r\n>     private int read1(byte[] b, int off, int len) throws IOException {\r\n>         int avail = count - pos;\r\n>         if (avail <= 0) {\r\n>             /* If the requested length is at least as large as the buffer, and\r\n>                if there is no mark/reset activity, do not bother to copy the\r\n>                bytes into the local buffer.  In this way buffered streams will\r\n>                cascade harmlessly. */\r\n>             if (len >= getBufIfOpen().length && markpos < 0) {\r\n>                 return getInIfOpen().read(b, off, len);\r\n>             }\r\n>             fill();\r\n>             avail = count - pos;\r\n>             if (avail <= 0) return -1;\r\n>         }\r\n>         int cnt = (avail < len) ? avail : len;\r\n>         System.arraycopy(getBufIfOpen(), pos, b, off, cnt);\r\n>         pos += cnt;\r\n>         return cnt;\r\n>     }\r\n> ```\r\n> \r\n> It won't call fill() if there is already data available and will just return up to whatever is left. It only calls fill() when it runs out of data.\r\n> \r\n> The code is fully available to anyone that wants to check the claims I make about Java code... 90% of the time I already looked up the code before making the claim.\r\n\r\nBut this is called in a loop by the interface method `BufferedInputStream.java:public synchronized int read(byte b[], int off, int len)`. So it should work right? I have never encountered this behavior... And I do this a lot.",
      "Yeah, I guess you are right.\r\n\r\nI have also done this a lot.  (A lot a lot.) And have 100% encountered this at various times in the past 18 years or so.  I'd have to look back through Java's version history to see if BufferedInputStream's behavior has changed in this regard.\r\n\r\nBut all it takes is one stream in the stack to return 0 from available() and your read will be cut short.\r\n\r\nThat's why there is a readFully() method to begin with.",
      "> Yeah, I guess you are right.\r\n> \r\n> I have also done this a lot. (A lot a lot.) And have 100% encountered this at various times in the past 18 years or so. I'd have to look back through Java's version history to see if BufferedInputStream's behavior has changed in this regard.\r\n> \r\n> But all it takes is one stream in the stack to return 0 from available() and your read will be cut short.\r\n> \r\n> That's why there is a readFully() method to begin with.\r\n\r\nI do 100% agree with you that this is how the reading should be done (while--), regardless what the implementation of `BufferedInputStream` is. The interface Javadoc is quite clear on this. But now we have double checked that jMEs existing code is working(ish) and no need to panic in this regard.\r\n\r\nMaybe they have changed `BuffereInputStream` because developers have made this mistake so many times :) It is so verbose this looping... Of which Java gets some criticism. Not from me, I'm used to it. Old guy.",
      "Is there anything else regarding this PR? :)",
      "If there's no objection, I plan to integrate this PR in about 48 hours."
    ],
    "commit_messages": [
      "Read bytes more efficiently (#2137)\n\n* Read bytes more efficiently\r\n\r\n* Read straight to the buffer\r\n\r\n* Epsilon as final\r\n\r\n* Simple assert for reading malformed stream\r\n\r\n* Stream might not have reached the end even if it doesn't return requested amount of bytes\r\n\r\n* Stream might not have reached the end even if it doesn't return requested amount of bytes\r\n\r\n* Refactor to method"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d6aa14f302d393b2600",
    "number": 2134,
    "body": "Fixes Issue #2132 \r\nsee: https://github.com/jMonkeyEngine/jmonkeyengine/issues/2132",
    "head_branch": "jhon-dev",
    "is_a_fork": true,
    "comments": [
      "Unless there's further discussion, I plan to integrate this PR in about 48 hours.",
      "Thanks for the fix, @johnlkkk !"
    ],
    "commit_messages": [
      "Fixes Issue #2132 (#2134)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d6ba14f302d393b2601",
    "number": 2133,
    "body": "see: https://github.com/jMonkeyEngine/jmonkeyengine/issues/2132，https://hub.jmonkeyengine.org/t/gltf-to-j3o-texture-filtering-issue/47197/73",
    "head_branch": "dev",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d6ca14f302d393b2602",
    "number": 2130,
    "body": "This PR fixes shadows and other rendering issues caused by #2091 (github issue #2129), where render state parameters were leaking between render techniques because `RenderState#set` does not set all parameters.\r\n\r\nUnfortunately, I was unable to get spotlight shadows to work in my test class, but TestSpotLightShadows worked fine, so I'm assuming I simply set up spotlight shadows wrong.\r\n\r\nAny testing is greatly appreciated.",
    "head_branch": "issue2129",
    "is_a_fork": true,
    "comments": [
      "Looks like this fixed the issue 👍🏽.",
      "Unless there's further substantive discussion, I plan to integrate this PR in about 48 hours.",
      "Oh hey, I just noticed that this PR includes a new file \"TestShadows.java\". \r\n\r\nThat file needs a copy of the JME license at the top. It also needs javadoc describing the purpose of the test and how to determine whether the test passes or fails.",
      "I plan on deleting that test, because it doesn't really test anything other tests don't already cover. I built it so I could focus on the shadow debug without a bunch of other code cluttering things up.",
      "back on track for integration in about 45 hours.",
      "Hi guys, what do you think about writing the `copyFrom `method using a `static` method like for java utility libraries (eg `System.arraycopy()` or `Objects.equals(a, b)` ? It might be useful to return the copied object.\r\n\r\n```java\r\n//Usage:\r\nmergedRenderState = RenderState.copy( RenderState.DEFAULT, mergedRenderState );\r\n//or\r\nRenderState.copy( RenderState.DEFAULT, mergedRenderState );\r\n```\r\n\r\n```java\r\npublic static RenderState copy(RenderState from, RenderState to) {\r\n        to.applyBlendMode = from.applyBlendMode;\r\n        to.applyColorWrite = from.applyColorWrite;\r\n        to.applyCullMode = from.applyCullMode;\r\n        to.applyDepthFunc = from.applyDepthFunc;\r\n        to.applyDepthTest = from.applyDepthTest;\r\n        to.applyDepthWrite = from.applyDepthWrite;\r\n        to.applyLineWidth = from.applyLineWidth;\r\n        to.applyPolyOffset = from.applyPolyOffset;\r\n        to.applyStencilTest = from.applyStencilTest;\r\n        to.applyWireFrame = from.applyWireFrame;\r\n        to.backStencilDepthFailOperation = from.backStencilDepthFailOperation;\r\n        to.backStencilDepthPassOperation = from.backStencilDepthPassOperation;\r\n        to.backStencilFunction = from.backStencilFunction;\r\n        to.backStencilMask = from.backStencilMask;\r\n        to.backStencilReference = from.backStencilReference;\r\n        to.backStencilStencilFailOperation = from.backStencilStencilFailOperation;\r\n        to.blendEquation = from.blendEquation;\r\n        to.blendEquationAlpha = from.blendEquationAlpha;\r\n        to.blendMode = from.blendMode;\r\n        to.cachedHashCode = from.cachedHashCode;\r\n        to.colorWrite = from.colorWrite;\r\n        to.cullMode = from.cullMode;\r\n        to.depthFunc = from.depthFunc;\r\n        to.depthTest = from.depthTest;\r\n        to.depthWrite = from.depthWrite;\r\n        to.dfactorAlpha = from.dfactorAlpha;\r\n        to.dfactorRGB = from.dfactorRGB;\r\n        to.frontStencilDepthFailOperation = from.frontStencilDepthFailOperation;\r\n        to.frontStencilDepthPassOperation = from.frontStencilDepthPassOperation;\r\n        to.frontStencilFunction = from.frontStencilFunction;\r\n        to.frontStencilMask = from.frontStencilMask;\r\n        to.frontStencilReference = from.frontStencilReference;\r\n        to.frontStencilStencilFailOperation = from.frontStencilStencilFailOperation;\r\n        to.lineWidth = from.lineWidth;\r\n        to.offsetEnabled = from.offsetEnabled;\r\n        to.offsetFactor = from.offsetFactor;\r\n        to.offsetUnits = from.offsetUnits;\r\n        to.sfactorAlpha = from.sfactorAlpha;\r\n        to.sfactorRGB = from.sfactorRGB;\r\n        to.stencilTest = from.stencilTest;\r\n        to.wireframe = from.wireframe;\r\n        return to;\r\n    }\r\n```",
      "I'm not opposed to it, but `copyFrom` (and even `set`, for that matter) is only used once throughout the whole of jme, so I don't think it's important enough to disrupt the PR to integrate.",
      "The proposed static `copy()` method would be error-prone, since it would be easy to unintentionally reverse the arguments. Let's stick with the current design.",
      "Unless there's further substantive discussion, I plan to integrate this PR in about 24 hours.",
      "Thank you @codex128 for your contribution to JME!"
    ],
    "commit_messages": [
      "Fix RenderState Parameters Leaking Between Renders (#2130)\n\n* debugging shadows\r\n\r\n* fixed directional and point shadows\r\n\r\n* use mergedRenderState instance\r\n\r\n* removed test class"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d6da14f302d393b2603",
    "number": 2128,
    "body": "Ok, GLB with the textures included easily causes LWJGL to run out of memory. As we might upload the same texture many times (we also read it many times...). 32Gb of RAM is nothing then. Also slowdowns and if one is into geometry batching.. no can do.\r\n\r\nSo this caches all the materials read to re-use them. Note that this affects both GLTF and GLB.\r\n\r\nResolves #2127 ",
    "head_branch": "bugfix/issue-2127",
    "is_a_fork": true,
    "comments": [
      "Hmm, maybe I'll change the cache to the material read method. As it seems that those others do the same. They cache and no-one needs to know.",
      "yes, seems like it will be better. \r\n\r\ncache is per load as i see, then cleared.",
      "One question though. Should we return material.clone() from the cache? Because a geometry might have vertex colors set and that would affect the material. Returning a clone still fixes the original issue...",
      "Wait a moment.\r\n\r\nBut then why GLTF had no 32 GB memory issue?\r\n\r\nBoth GLB and GLTF use readMaterial right?\r\nWhile only GLB had issue with multipled materials.\r\n\r\nMaybe this should not be readMaterial as a place then?\r\n\r\nBecause this change affect also GLTF that had no issue like this.\r\n\r\n\r\nFor me this sounds like this loader already implement cache correctly(at least for textures), just not for GLB.\r\n",
      "> Wait a moment.\r\n> \r\n> But then why GLTF had no 32 GB memory issue?\r\n> \r\n> Both GLB and GLTF use readMaterial right?\r\n> While only GLB had issue with multipled materials.\r\n\r\nGLTF/GLB read materials as many times they are referenced. This is fine, until there is also a texture embedded. Like real binary, not a file reference. Then this texture is read each time to the `assetManager` with `loadAssetFromStream` which doesn't cache. This is the source of the problem. So there are going to be so much textures in the memory.\r\n\r\nIt is easier to cache the material in this case in my opinion. It doesn't interfere with non embedded textures (normal GLTF). It is less hassle in this case too. I didnt measure the perfomance of our Material cloning vs reading it all the time again from bytes (latter looks like more expensive operation).",
      "Ok, so i understand that GLTF have \"sourceindex\" that can know what material texture index it is, while GLB do not?\r\n\r\nFor sure you know this loader better than me, just thought it can be cached on texture level, not material for GLB.\r\n\r\nBut if its not possible then yes, lets keep on material level, but need clone materials\r\n",
      "> Ok, so i understand that GLTF have \"sourceindex\" that can know what material texture index it is, while GLB do not?\r\n\r\nGLB/GLTF are identical. But GLB can contain embedded binary textures. GLTF contains only URLs to textures. Both have indices for textures and materials.\r\n\r\nI just guess that original author didn't realize that the assetManager used like that doesn't cache. Creates a new texture with the same key...",
      "```\r\n        if (uri == null) {\r\n            assertNotNull(bufferView, \"Image \" + sourceIndex + \" should either have an uri or a bufferView\");\r\n            assertNotNull(mimeType, \"Image \" + sourceIndex + \" should have a mimeType\");\r\n            byte[] data = (byte[]) readBuffer(bufferView, 0, -1, null, 1, VertexBuffer.Format.Byte);\r\n            String extension = mimeType.split(\"/\")[1];\r\n            TextureKey key = new TextureKey(\"image\" + sourceIndex + \".\" + extension, flip);\r\n            result = (Texture2D) info.getManager().loadAssetFromStream(key, new ByteArrayInputStream(data));\r\n\r\n        } else if (uri.startsWith(\"data:\")) {\r\n            // base64 encoded image\r\n            String[] uriInfo = uri.split(\",\");\r\n            byte[] data = Base64.getDecoder().decode(uriInfo[1]);\r\n            String headerInfo = uriInfo[0].split(\";\")[0];\r\n            String extension = headerInfo.split(\"/\")[1];\r\n            TextureKey key = new TextureKey(\"image\" + sourceIndex + \".\" + extension, flip);\r\n            result = (Texture2D) info.getManager().loadAssetFromStream(key, new ByteArrayInputStream(data));\r\n        } else {\r\n            // external file image\r\n            String decoded = decodeUri(uri);\r\n            TextureKey key = new TextureKey(info.getKey().getFolder() + decoded, flip);\r\n            Texture tex = info.getManager().loadTexture(key);\r\n            result = (Texture2D) tex;\r\n        }\r\n```\r\n\r\nOk i think i understand.\r\n\r\nSo the main reason why GLTF were working is that \"loadTexture\" cache, while every other case like \"loadAssetFromStream\" do not cache. \r\n\r\nThen why not make GLB work same as GLTF by enabling assetmanager cache?\r\n\r\nAs i see other options also have TextureKey with index/name/etc of texture so it should be able to cache right?",
      "Yep, you got it.\r\n\r\n> Then why not make GLB work same as GLTF by enabling assetmanager cache?\r\n> is it possible to cache in assetManager by name or anything or only uri?\r\n\r\nI guess it would be doable by:\r\n```\r\nif(info.getManager(getFromCache(key)) != null) {\r\n...}\r\ntexture = (Texture2D) info.getManager().loadAssetFromStream(key, new ByteArrayInputStream(data));\r\ninfo.getManager().addToCache(key, texture);\r\n```\r\nBut I don't know if it is the same cache. I think normally they go to the weak cache, but this might not be it. I am not an expert on this matter.",
      "Im also unsure if it will be same cache. (well it should, but we need be sure, yes)\r\n\r\nThen i guess we should ask on HUB maybe :) or mention someone here to help.",
      "> Im also unsure if it will be same cache. (well it should, but we need be sure, yes)\r\n> \r\n> Then i guess we should ask on HUB maybe :) or mention someone here to help.\r\n\r\nWell, I read the code. It is the same cache. It is governed by the `assetKey` `cacheType` property, which for `textureKey`s defaults to `WeakRefCloneAssetCache`.",
      "So I guess that is all doable. My personal preference is the material cloning though. But I can go either way. Someone just make the call then :)",
      "i rethink this a little. (ye i know, crazy, sorry ;p)\r\n\r\nLets say we have 2 Models.\r\n\r\nAssetManager cache textures per \"game run\" not per \"model load\"\r\n\r\nSo lets say Both of them use \"MyTexture.png\", but one as file and second as GLB \"binary embeded\"\r\n\r\nNow if binary embeded one will load first, and will be little different than file based one, the next GLTF model will have \"mismatch texture\"\r\n\r\nSo i think we should implement \"per-load\" cache, for texture for both:\r\n\r\nif (uri == null) {\r\n\r\nand\r\n\r\n} else if (uri.startsWith(\"data:\")) {\r\n\r\nonly.\r\n\r\nNo material cache, No assetmanager cache, but local cache only for binary textures in this exactly places.\r\n\r\nSecond way is to cache in assetmanager but with some very specific prefix/index, tho still riscy.\r\n\r\nIn perfect world, assetmanager should cache exact file, so i think we should go first solution to cache per loading for GLB(binary embeded textures) only.",
      "It is all about the asset keys. The embedded ones will not get unique keys, file ones have basically unique keys. Well not unique but all will point to the same file so it is fine if another model uses that.\r\n\r\nThis material cloning will work since the embedded textures wont be cached as their uniqueness can't be vouched for anyway. \r\n\r\nBut if you load the same model multiple times, with embedded texture... you will get multiple (same) textures loaded. So... Kinda could figure a unique name for them, if possible, and then cache them to asset manager as well...",
      "> But if you load the same model multiple times, with embedded texture... you will get multiple (same) textures loaded. So... Kinda could figure a unique name for them, if possible, and then cache them to asset manager as well...\r\n\r\nYes if this would be possible that cache would work for exact GLB file, but not image file or another GLB file with same texture name, then i think it would be fine.",
      "To get close to unique name for the embedded textures... I guess they could contain the URI, same as the actual file references. But here the file is the current GLB file, this can be extracted from `AssetInfo.AssetKey`.",
      "sounds good. GLB file URI + texture URI(or whatever glb store as name/index)?\r\n\r\nOfc still GLTF advantage is its files might use same tex file, while 2 GLB files using same texture 2x times is 2x time more memory usage. But i see no solution for this, because it might break if we cache under same name. Also anyway i belive its similar for j3o?",
      "Well... Lol, this doesn't really work. I mean, I totally did it. And wondered why it doesn't trigger... Because if one loads the whole model the second time, it comes from... the... cache. And it is just cloned. So I suspect that this is just all very fine with the material caching.",
      "The URI proposal is very similar to have Java JAR files work with internal file URIs.\r\n\r\nre: \"while 2 GLB files using same texture 2x times is 2x time more memory usage.\"\r\n\r\n...yeah, because without computing some kind of hash, there is no way to know that they are the same texture.  Name is not enough.\r\n\r\nFor lots of reasons, I've switched to using gltf exclusively here... way easier to debug if something goes wrong.  But yeah, it would be nice if glb can work better than it currently does.\r\n",
      "I loaded the BistroExterior.glb (960Mb, with 360Mb of textures embedded) 100 times to a scene and it looks to be fine. Textures are shared. FPS is terrible :)",
      "But yeah, it still needs to cache the textures locally. If some textures are shared between the materials. But I think this is better done with the local cache than the AssetManager cache. Since reading the texture data (from memory!) is still somewhat slow. I'll optimize this reading with the other ticket I made.\r\n\r\nI'll just cache the textures locally and that I think covers all the cases, right?\r\n\r\nThese embedded textures are unique to the GLB model, and the model itself is cached anyway in the AssetManager for future use.",
      "ye, just cache textures for GLB locally (leave loadTexture case of GLTF because it cache anyway) and it should be done.\r\n\r\nOfc i know that GLB enthusiasts would prefer GLB be better than GLTF, but it seems to be opposite.",
      "Should be good to go!",
      "I re-read the entire discussion just now and was impressed by all the thought and care that went into this pull request. Thank you to all who participated!\r\n\r\nUnless there's further substantial discussion, I plan to integrate this PR in about 48 hours.",
      "Looking at code it seems fine. GLTF or GLB store same textures as indexes, so materials just use same indexes, and code here just cache by indexes, so it should work fine. \r\n\r\nWhile one line \"dataStream.close();\" removal should be fine, since based on stackoverflow \"DataInputStream holds no system resources of its own, so not closing it will not cause any leaks. You can simply leave it open. Alternatively you can return it from the method so that the caller can close it.\"\r\n\r\n**So from my perspective this PR is ready,** tho it would be cool if someone else would look too.\r\n\r\nThis file in general have missing JavaDocs, but it have nothing to do with this fix.",
      "The stream is closed. Previously if failed, it was never closed. I fixed\r\nthis failing case.\r\n\r\nI used Java feature called try-with resource. Which does the try finally if\r\nnot null then close thing but cleaner syntax. Im sorry I explained it\r\npoorly the first time.\r\n\r\nOn Thu, 26 Oct 2023, 12:20 oxplay2, ***@***.***> wrote:\r\n\r\n> Looking at code it seems fine. GLTF or GLB store same textures as indexes,\r\n> so materials just use same indexes, and code here just cache by indexes, so\r\n> it should work fine.\r\n>\r\n> While one line \"dataStream.close();\" removal should be fine, since based\r\n> on stackoverflow \"DataInputStream holds no system resources of its own, so\r\n> not closing it will not cause any leaks. You can simply leave it open.\r\n> Alternatively you can return it from the method so that the caller can\r\n> close it.\"\r\n>\r\n> So from my perspective this PR is ready, tho it would be cool if someone\r\n> else would look too.\r\n>\r\n> —\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/jMonkeyEngine/jmonkeyengine/pull/2128#issuecomment-1780733997>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AB7VJPQAOB6RV7ASHP4KNCTYBITMVAVCNFSM6AAAAAA6MOZQNWVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTOOBQG4ZTGOJZG4>\r\n> .\r\n> You are receiving this because you authored the thread.Message ID:\r\n> ***@***.***>\r\n>\r\n",
      "And we should always close all the streams, we code for the interface. We don't need to understand how the stream actually works for this. (Auto)closeable needs closing. Even if it is bytearraystream or some other NOP close stream.\r\n\r\nHere is a link to try-with resource info which explains this far better than me: https://www.baeldung.com/java-try-with-resources",
      "Unless there's further substantial discussion, I plan to integrate this PR in about 24 hours.",
      "Thank you @tonihele for the solution and @oxplay2 for code review."
    ],
    "commit_messages": [
      "Solve issue #2127 (excessive memory use while loading GLB) (#2128)\n\n* Cache the materials\r\n\r\n* Try with resources to make sure we close the stream\r\n\r\n* Conform cache naming to the other cache usages\r\n\r\n* Just use the cache in the read method as the other caches do\r\n\r\n* Clone the material\r\n\r\n* Cache textures locally to avoid embedded textures to be read many times"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d6ea14f302d393b2604",
    "number": 2126,
    "body": "Moves the pushDebugGroup calls into RenderQueue so all call-sites are covered automatically.\r\nAnd adds a ShadowQueue group for all shadow-related draw calls.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Unless there's further substantial discussion, I plan to integrate this PR in about 48 hours.",
      "Thank you @Trass3r and @riccardobl !"
    ],
    "commit_messages": [
      "add debug groups for shadow draw calls (#2126)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d6fa14f302d393b2605",
    "number": 2120,
    "body": "This PR fixes #2098 by setting the normal type to -1 instead of 1 during gltf import. Since gltf goes by OpenGL's normal map convention, and PBRLighting.j3md defines 1=OpenGL and -1=DirectX, something is clearly wrong here.\r\n\r\nSee this [forum post](https://hub.jmonkeyengine.org/t/parallax-mapping-fundamental-bug/28352/21) for more info.",
    "head_branch": "issue2098",
    "is_a_fork": true,
    "comments": [
      "I guess the documentation in `PBRLighting.j3md` is incorrect.\r\n\r\nChanging the semantics of the \"NormalType\" material parameter would've been easy in 2014. Changing it now would be painful. I propose changing the PBRLighting documentation instead. The change could even be included in this PR, since there's a clear connection between the jme3-plugins defect and the documentation error.",
      "The problem is in MikktspaceTangentGenerator, test this\r\n```java\r\npackage jme3test.model;\r\n\r\nimport com.jme3.app.*;\r\nimport com.jme3.math.ColorRGBA;\r\nimport com.jme3.math.Vector3f;\r\nimport com.jme3.renderer.queue.RenderQueue;\r\nimport com.jme3.scene.*;\r\nimport com.jme3.scene.plugins.gltf.GltfModelKey;\r\nimport com.jme3.system.AppSettings;\r\nimport com.jme3.util.mikktspace.MikktspaceTangentGenerator;\r\n\r\npublic class TestGltfNormal extends SimpleApplication {\r\n    Node probeNode;\r\n\r\n    public static void main(String[] args) {\r\n        AppSettings sett = new AppSettings(true);\r\n        sett.setWidth(1024);\r\n        sett.setHeight(768);\r\n        TestGltfNormal app = new TestGltfNormal();\r\n        app.setSettings(sett);\r\n        app.start();\r\n    }\r\n\r\n    @Override\r\n    public void simpleInitApp() {\r\n        rootNode.setShadowMode(RenderQueue.ShadowMode.CastAndReceive);\r\n        probeNode = (Node) assetManager.loadModel(\"Scenes/defaultProbe.j3o\");\r\n        rootNode.attachChild(probeNode);\r\n\r\n        setPauseOnLostFocus(false);\r\n\r\n        flyCam.setEnabled(false);\r\n        viewPort.setBackgroundColor(new ColorRGBA().setAsSrgb(0.2f, 0.2f, 0.2f, 1.0f));\r\n\r\n        loadModel(\"jme3test/gltf/NormalTangentMirrorTest.glb\", new Vector3f(0, 0, 0), 3);\r\n\r\n    }\r\n\r\n    private void loadModel(String path, Vector3f offset, float scale) {\r\n        GltfModelKey k = new GltfModelKey(path);\r\n        Spatial s = assetManager.loadModel(k);\r\n        s.scale(scale);\r\n        s.move(offset);\r\n        // MikktspaceTangentGenerator.generate(s);\r\n        probeNode.attachChild(s);\r\n    }\r\n\r\n}\r\n```\r\nGLB file: https://github.com/KhronosGroup/glTF-Sample-Models/blob/master/2.0/NormalTangentMirrorTest/glTF-Binary/NormalTangentMirrorTest.glb\r\nNormalTangentMirrorTest has pregenerated tangents and it renders correctly.\r\nNow enable this line   `      // MikktspaceTangentGenerator.generate(s);` that regenerate the tangents with our generator, and now the normals are flipped again.\r\n\r\nThis is caused by the sign of the bitangent (line 282 in MikktspaceTangentGenerator)\r\n```\r\n                mikkTSpace.setTSpaceBasic(tang, pTSpace.orient == true ? 1.0f : (-1.0f), f, i);\r\n```\r\nreplacing it with\r\n```\r\n                mikkTSpace.setTSpaceBasic(tang, pTSpace.orient == true ? -1.0f : 1.0f, f, i);\r\n```\r\nSolves the issue. \r\nHowever i don't know if there is an underlying issues that is causing pTSpace.orient  to be true when in fact it should be false or if this is just a mismatch in handedness with the generator logic and our expected result.\r\n\r\nI suspect this is affecting a lot more than the PBR shader, for example if we look into SPLighting that doesn't have the normal type parameter, it says\r\n```\r\n      //Note the -2.0 and -1.0. We invert the green channel of the normal map, \r\n      //as it's compliant with normal maps generated with blender.\r\n      //see http://hub.jmonkeyengine.org/forum/topic/parallax-mapping-fundamental-bug/#post-256898\r\n      //for more explanation.\r\n      vec3 normal = normalize((normalHeight.xyz * vec3(2.0,-2.0,2.0) - vec3(1.0,-1.0,1.0)));\r\n```\r\nbut blender uses OpenGL Y+ format, see:\r\n![image](https://github.com/jMonkeyEngine/jmonkeyengine/assets/4943530/3f70e798-396a-4f27-be50-9875d19a9f33)\r\n[source](http://wiki.polycount.com/wiki/Normal_Map_Technical_Details#Common_Swizzle_Coordinates)\r\nThe link in the comments is from the old forum, searching it in google points to https://hub.jmonkeyengine.org/t/parallax-mapping-fundamental-bug/28352 \r\n\r\nI suspect there was a misunderstanding, because the original jme tangent generator also had mismatched handedness, so in this case flipping the flipped sign results in correct representation of OpenGL Y+ normals and this ported to the mikkstspace generator that suffers the same issue, however what happens to imported models with Y+ normals and  pregenerated tangents that use SP lighting? I supposed they will have flipped normals like in the gltf test.\r\n\r\nSo, maybe we should attempt an engine wide fix for all the shaders and tangents generators and restandardize the default format to be Y+ for all the engine code.\r\nThis would probably result in some breaking change for the cases where the developer somehow eyeballed the right normal format for the specific combination of tangent/shader/normaltype , however i suspect the vast majority of imported models suffer from this bug\r\n",
      "If someone has the time to convert the GLTF test into different formats, including both pregenerated and non-pregenerated tangents, and SP lighting, we could determine the extent of this bug.",
      "Ok, I'll take a crack at it.",
      "Finally got around to it... sorry for the delay!\r\n\r\nI've tested GLTF, J3O, and OBJ formats, with both pregenerated and non-pregenerated tangents, with each material configuration (packed pbr, runtime pbr, runtime sp), with runtime tangent generators on and off.\r\n\r\nJ3O was tested when converted from both GLTF and OBJ. Results are not shown, because J3O mimicked its source format on all tests.\r\n\r\n## GLTF\r\n\r\n### Packed PBRLighting Material\r\n\r\nNo Pre-Generated Tangents\r\n```\r\nno runtime generator:       FAIL\r\nTangentBinormalGenerator:   FAIL\r\nMikktspaceTangentGenerator: FAIL\r\n```\r\nWith Pre-Generated Tangents\r\n```\r\nno runtime generator:       pass\r\nTangentBinormalGenerator:   FAIL\r\nMikktspaceTangentGenerator: FAIL\r\n```\r\n### PBRLighting Material Created at Runtime\r\n\r\nNo Pre-Generated Tangents\r\n```\r\nno runtime generator:       pass\r\nTangentBinormalGenerator:   pass\r\nMikktspaceTangentGenerator: pass\r\n```\r\n\r\nWith Pre-Generated Tangents\r\n```\r\nno runtime generator:       FAIL\r\nTangentBinormalGenerator:   pass\r\nMikktspaceTangentGenerator: pass\r\n```\r\n\r\n### Lighting MultiPass Material Created at Runtime\r\n\r\nNo Pre-Generated Tangents\r\n```\r\nno runtime generator:       pass\r\nTangentBinormalGenerator:   pass\r\nMikktspaceTangentGenerator: pass\r\n```\r\nWith Pre-Generated tangents\r\n```\r\nno runtime generator:       FAIL\r\nTangentBinormalGenerator:   pass\r\nMikktspaceTangentGenerator: pass\r\n```\r\n\r\n### Lighting SinglePass Material Created at Runtime\r\n\r\nNo Pre-Generated Tangents\r\n```\r\nno runtime generator:       pass\r\nTangentBinormalGenerator:   pass\r\nMikktspaceTangentGenerator: pass\r\n```\r\nWith Pre-Generated tangents\r\n```\r\nno runtime generator:       FAIL\r\nTangentBinormalGenerator:   pass\r\nMikktspaceTangentGenerator: pass\r\n```\r\n\r\n## OBJ (no pre-generated tangents available)\r\n\r\n### PBRLighting Material Created at Runtime\r\n```\r\nno runtime generator:       no shading\r\nTangentBinormalGenerator:   FAIL\r\nMikktspaceTangentGenerator: FAIL\r\n```\r\n### Lighting MultiPass Material Created at Runtime\r\n```\r\nno runtime generator:       no shading\r\nTangentBinormalGenerator:   FAIL\r\nMikktspaceTangentGenerator: FAIL\r\n```\r\n### Lighting SinglePass Material Created at Runtime\r\n```\r\nno runtime generator:       shaded, but does not update to camera angle\r\nTangentBinormalGenerator:   FAIL\r\nMikktspaceTangentGenerator: FAIL\r\n```\r\n",
      "When you create the PBR material at runtime, do you set opengl format?\r\n\r\n> SPLighting Material Created at Runtime\r\n>\r\n>No Pre-Generated Tangents\r\n>\r\n>no runtime generator:       pass\r\n>TangentBinormalGenerator:   pass\r\n>MikktspaceTangentGenerator: pass\r\n>\r\n>With Pre-Generated tangents\r\n>\r\n>no runtime generator:       FAIL\r\n>TangentBinormalGenerator:   pass\r\n>MikktspaceTangentGenerator: pass\r\n\r\nI think this shows that SP Lighting requires directx normals, what do you think?\r\nCan you show the code?",
      "smh, I've made a mistake. That SPLighting data is actually for Lighting.j3md multipass. I've updated the above post to include single pass data (coincidentally, it matches the multipass data).\r\n\r\n> When you create the PBR material at runtime, do you set opengl format?\r\n\r\nI did minimal setup for materials created at runtime, so no. I've pushed the test class, so you can see how I set it up.\r\n\r\n> I think this shows that SP Lighting requires directx normals, what do you think?\r\n\r\nHmm, that seems likely.\r\n\r\n",
      "Thank you, i've looked into your examples, and made some considerations and some tests of my own.\r\n\r\nMy current understanding of the situation:\r\n\r\n- PBR, single-pass (SP) lighting, and multi-pass (MP) lighting all work correctly with Y+ normals internally.\r\n- The PBR shader supports both Y- and Y+ inputs by converting Y- to Y+ internally.\r\n- The SP and MP lighting shaders always convert Y- to Y+ since they lack a normal type parameter, making them compatible only with Y- (DirectX format) normal maps.\r\n- The bitangents generated by the tangent generators have the wrong sign. This essentially flips the normals sampled from the normal map. As a result, shaders that require DirectX normals (e.g., lighting) will now require OpenGL normals, and shaders that require OpenGL normals will need DirectX normals.\r\n\r\nThis issue shows different symptoms depending on the mix of normal types, textures, and bitangents. It can be tricky to spot because some combinations actually work correctly, which is likely why it went unnoticed. \r\n\r\nAnyway, here's a summary:\r\n\r\n| SHADER          | Bitangent Source | NormalType Param | Required Type*| REPORT             |\r\n| --------------- | ---------------- | ----------------- | ------------- | ------------------- |\r\n| PBR Lighting    | In model         | OpenGL           | OpenGL        | OK                  |\r\n| PBR Lighting    | In model         | DirectX           | DirectX        | OK                  |\r\n| PBR Lighting    | JME Generator    | OpenGL           | DirectX        | FLIPPED BY BAD TBN  |\r\n| PBR Lighting    | JME Generator    | DirectX           | OpenGL        | FLIPPED BY BAD TBN  |\r\n| Lighting (SP)   | In model         | N/A              | DirectX        | OK                  |\r\n| Lighting (MP)   | In model         | N/A              | DirectX        | OK                  |\r\n| Lighting (SP)   | JME Generator    | N/A              | OpenGL        | FLIPPED BY BAD TBN  |\r\n| Lighting (MP)   | JME Generator    | N/A              | OpenGL        | FLIPPED BY BAD TBN  |\r\n\r\n<i>*Actual type of the input NormalMap required to have correct results</i>\r\n\r\nPlease, anyone interested, take a look at my findings and let me know if I've missed anything. \r\n\r\n\r\nHere's my plan for the patch:\r\n\r\n- Correct the sign issue in the newer MikktspaceTangentGenerator. As for the legacy tangent generator, it is probably better to leave as is because it's essentially deprecated at this point.\r\n-  Add the NormalType parameter to SP/MP Lighting, with the default setting being DirectX (the expected type up to now).\r\n\r\n\r\nThis change might create a minor backward incompatibility.  SP and MP lighting shaders have an implicit normal type, which might have misled developers using these shaders along with the JME tangent generator: they might have thought the shader required an OpenGL-type normal map because a (correct) DirectX normal map would appear flipped due to the bug mentioned earlier.\r\n\r\n**However, this change addresses a more significant issue: developers using the PBR shader and relying on the specified normal type would have encountered incorrect normal maps if they were using one of the JME tangent generators and this is likely to go mostly unnoticed, especially with complex textures.**",
      "Patch here: https://github.com/jMonkeyEngine/jmonkeyengine/pull/2140\r\nI've included a test that swap material every 5 seconds to test all the affected shaders.\r\n\r\nIt is left to check if the tangents imported from other formats (eg. ogre) have the correct sign or if they need to be flipped by the loader.",
      "I don't have a deep understanding of tangent conventions, but everything I've seen so far is consistent with `MikktspaceTangentGenerator` getting the sign backward, so I support that portion of the change."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d70a14f302d393b2606",
    "number": 2119,
    "body": "Sorry, some git problems occurred.",
    "head_branch": "issue2098",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d71a14f302d393b2607",
    "number": 2117,
    "body": "This patch fixes 2114 and adds simple tests.\r\n\r\nRemoves the check if some lod failed. \r\nThe performance gain is negligible, most of the time it copies <10 VertexBuffer refs unless I overlook something.  \r\n\r\n\r\n",
    "head_branch": "fix_2114",
    "is_a_fork": true,
    "comments": [
      "Fixes #2114 ",
      "Build test failed because of 3 tests I made. Locale execution without gradle works, with gradle build it fails.\r\nI guess the causing part is this:\r\n\r\n`URL assetCfgUrl = JmeSystem.getPlatformAssetConfigURL();\r\n    AssetManager assetManager = JmeSystem.newAssetManager(assetCfgUrl);`\r\n    \r\n    Error: \r\n    F:\\Programming\\jmonkeyengine\\jme3-plugins-json-gson\\src\\main\\java\\com\\jme3\\plugins\\gson\\GsonObject.java:81: warning: [unchecked] unchecked conversion\r\n        Entry<String, JsonElement>[] entries = new Entry[entrySet.size()];\r\n                                               ^\r\n  required: java.util.Map.Entry<java.lang.String,com.jme3.plugins.json.JsonElement>[]\r\n  found:    java.util.Map.Entry[]\r\n1 warning\r\n<path to project>\\jmonkeyengine\\jme3-plugins\\src\\gltf\\java\\com\\jme3\\scene\\plugins\\gltf\\TextureTransformExtensionLoader.java:135: warning: [unchecked] unchecked conversion\r\n            Map<Integer, Matrix3f> transformMap = loader.fetchFromCache(\"textureTransformData\", 1, HashMap.class);\r\n                                                                       ^\r\n  required: java.util.Map<java.lang.Integer,com.jme3.math.Matrix3f>\r\n  found:    java.util.HashMap\r\nNote: Some input files use or override a deprecated API.\r\nNote: Recompile with -Xlint:deprecation for details.\r\n1 warning\r\n\r\n320 tests completed, 3 failed, 1 skipped\r\n\r\nFAILURE: Build failed with an exception.",
      "@riccardobl I removed the Test decorator. I guess it is an issue with loading the Jaime.j3o asset while building. ",
      "@riccardobl Do you support disabling the failing junit tests?",
      "@stephengold @riccardobl I added javadoc and the licenses. ",
      "Apologies for the late reply, somehow i've missed the notifications.\r\nThese tests were added in this pr correct? In that case i have nothing against disabling them if there are technical challenges in making them work.\r\nI think this can be merged",
      "@riccardobl \r\n\"These tests were added in this pr correct?\":\r\nYes."
    ],
    "commit_messages": [
      "Remove null levels from lod generator output (Fix #2114)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d72a14f302d393b2608",
    "number": 2116,
    "body": "This PR re-implements the changes @yaRnMcDonuts made to `DefineList` and `Technique` in #2033.\r\nIt implements new fixes to `OpaqueComparatorTest` and `DefineListTest` that better reflect the intent of those tests.\r\nIt also updates copyright dates and improves the formatting of affected code.",
    "head_branch": "sgold/redo-pr-2033",
    "is_a_fork": false,
    "comments": [
      "I took a look through and everything looks identical to my changes to DefineList and TehcniqueDef in my other bugged PR, so this PR looks like its all good now!\r\n\r\nUnless anyone else has anything to add/suggest then I say its ready to be integrated.\r\n"
    ],
    "commit_messages": [
      "Increase MAX_DEFINES in DefineList (re-do) (#2116)\n\n* DefineList:  re-implement using a BitSet to remove the size limit\r\n\r\n* TechniqueDef:  DefineList size is no longer limited, so remove 2 checks\r\n\r\n* OpaqueComparatorTest: update expected sort order affected by DefineList\r\n\r\n* DefineListTest:  rewrite tests to accept any valid hashCode() function"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d73a14f302d393b2609",
    "number": 2115,
    "body": "Following up on this issue: https://hub.jmonkeyengine.org/t/optimize-terrain-shaders-for-tri-planar-mode-per-layer-remove-fog-defines-to-make-room/46816/32",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Not successful sadly... \r\n\r\nAlthough I suspect this was not the best way to try duplicating my PR, since Github made me reset and then reuse my same master branch that the bugged PR was derived from. So if my JME fork is bugged, then I don't think this duplicate PR did anything to work around that... but I also am taking wild guesses here since we're in some strange and uncharted territory considering the build passes locally for 2 of us but still fails on github..\r\n\r\n@stephengold let me know if you have any luck duplicating the PR an your own branch (if you still have time to do so of course) and maybe that will prove some better results. \r\n\r\nOtherwise (unless another 3rd jme besdies us 2 user can run this build and prove that the test doesn't pass locally on their device) then I am going to conclude that this may be bugged in some way that is better investigated within its own PR, and I will temporarily comment-out the failling tests unti it can be fixed or preferably a new replacement test is created (since the failing test is not actually indicative of any bugs in the  PR's code, and it also has been thoroughly discussed that the test is badly written in the first place and should be replaced by a better sorting test). And in this case, I will also open another issue related to replacing that test, this way the PR can go forward without the test hindering anything, but we can still work on replacing that test and tracking down this potential github bug in the future.\r\n\r\nDoes anyone object to this idea, and if so do you have any other proposed solutions? (also, if anyone does manage to build this branch locally and trigger a failing test, then please let me know as well, as that will mean I am wrong in many of my assumptions. But for now, 2 different users have built this fork sucessfuly locally with no failing test, so unless at least 1 other user can produce a locally failling or provide reason as to why it fails only on github, test then the odds are in favor that github is being buggy)",
      "Oops it looks like you were already ontop of htis, and your PR passed! Yay! I will delete this PR and my other one."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d74a14f302d393b260a",
    "number": 2113,
    "body": "Convenient Geometry constructor with material, in order to avoid systematic subsequent setMaterial setter.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "I have reservations about this PR. Since setMaterial() is a method of Spatial, it does make sense to require developers to call it explicitly for each type of spatial. Introducing a new constructor for Geometry makes it convenient, but it also introduces inconsistency.\r\n\r\nI'm not entirely opposed on principle, but I'd prefer to hear other opinions.\r\n\r\n\r\n\r\n",
      "Spatial.setMaterial() is actually a surprise for almost everyone who uses it the first time.  Geometry is the only thing that requires a material.  Geometry is the only thing that accepts a material. Spatial.setMaterial() actually finds the child geometries and sets that material on all of them, sensible or not.  (It's a method I've thought should be removed since the first time I saw it.)\r\n\r\nIt is really weird that there is no way to create a functional geometry in one call.  I've always thought so.\r\n\r\nBut... \"doing anything about it\" has always been tempered with how ugly the code looks to put it on one giant line: because there is no way to trivially create a material.  It's always like half a screen-width of code.\r\n\r\nI don't mind Geometry taking material as a parameter.  It's otherwise weird that we require setting the name (99% of the time useless) but not the material."
    ],
    "commit_messages": [
      "Geometry constructor with material. (#2113)\n\n* Geometry constructor with material.\r\n\r\n* Geometry constructor with material."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d75a14f302d393b260b",
    "number": 2112,
    "body": "Prevent updateShadowCamera from corrupting shadowCam matrix when there isn't any visible shadow caster in scene. \r\nDiscovered in #2111",
    "head_branch": "fixshadowmatrixocorruption",
    "is_a_fork": true,
    "comments": [
      "Shouldn't the changes to asserts and diagnostics have been a separate PR?\r\n\r\nAlso, what's the significance of the hacktoberfest labels? (Just curious.)",
      "> Shouldn't the changes to asserts and diagnostics have been a separate PR?\r\n\r\nWell i wouldn't dedicate a PR to this small change that i made just to debug this issue and I merged the pr without squash to keep the commits separated, so it shouldn't cause any issue for the git history or if we need to revert it.\r\n\r\n> Also, what's the significance of the hacktoberfest labels? (Just curious.)\r\n\r\nTwo years ago, I assumed the responsibility of moderating [Hacktoberfest](https://hacktoberfest.com/) for our repositories. This year, in order for a pull request to be considered valid for the quota, it must either be approved, merged, or have a specific label applied for a continuous 7-day period. As we are in the second half of October, I've added the label to mark valid pull requests as soon as they are submitted, avoiding the need for rushed approvals in case the submitter is participating.\r\nI added the label to this PR by mistake.",
      "I see. Thanks for the answers."
    ],
    "commit_messages": [
      "Print binding of problematic uniforms in assert message"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d76a14f302d393b260c",
    "number": 2111,
    "body": "Yep, just some errors on the shaders.\r\n\r\nI modified the TestGltfMorph to have the shadows instead of duplicating it. I hope this is ok. I can change it if not of course.\r\n\r\nResolves #1997 ",
    "head_branch": "bugfix/issue-1997",
    "is_a_fork": true,
    "comments": [
      "Also worth noticing that when I move around with the flycam on the test, I can quite easily get an error. Especially when looking at the floor on shallow angles (camera looking along the floor to the horizon):\r\n\r\n> Oct 15, 2023 3:40:15 PM com.jme3.app.LegacyApplication handleError\r\n> SEVERE: Uncaught exception thrown in Thread[jME3 Main,5,main]\r\n> java.lang.AssertionError: Invalid Matrix4f value Matrix4f\r\n> [\r\n>  NaN  NaN  NaN  NaN \r\n>  0.11412298  -0.14265376  -0.057061512  -1.0 \r\n>  NaN  NaN  NaN  NaN \r\n>  0.0  0.0  0.0  1.0 \r\n> ]\r\n> \tat com.jme3.renderer.opengl.GLRenderer.updateUniform(GLRenderer.java:1381)\r\n> \tat com.jme3.renderer.opengl.GLRenderer.updateShaderUniforms(GLRenderer.java:1480)\r\n> \tat com.jme3.renderer.opengl.GLRenderer.setShader(GLRenderer.java:1722)\r\n> \tat com.jme3.material.logic.DefaultTechniqueDefLogic.render(DefaultTechniqueDefLogic.java:96)\r\n> \tat com.jme3.material.Technique.render(Technique.java:167)\r\n> \tat com.jme3.material.Material.render(Material.java:1052)\r\n> \tat com.jme3.renderer.RenderManager.renderGeometry(RenderManager.java:675)\r\n> \tat com.jme3.renderer.queue.RenderQueue.renderGeometryList(RenderQueue.java:273)\r\n> \tat com.jme3.renderer.queue.RenderQueue.renderShadowQueue(RenderQueue.java:282)\r\n> \tat com.jme3.shadow.AbstractShadowRenderer.postFrame(AbstractShadowRenderer.java:515)\r\n> \tat com.jme3.renderer.RenderManager.renderViewPort(RenderManager.java:1243)\r\n> \tat com.jme3.renderer.RenderManager.render(RenderManager.java:1297)\r\n> \tat com.jme3.app.SimpleApplication.update(SimpleApplication.java:283)\r\n> \tat com.jme3.system.lwjgl.LwjglWindow.runLoop(LwjglWindow.java:628)\r\n> \tat com.jme3.system.lwjgl.LwjglWindow.run(LwjglWindow.java:717)\r\n> \tat java.base/java.lang.Thread.run(Thread.java:833)\r\n> \r\n> ",
      "Thanks for the patch and for extending the morph test.\r\n\r\nI can reproduce the assertion when running the test with \"-ea\" and looking away from the scene, i suspect it has something to do with culling.\r\n",
      "Nice work. Thanks, guys!"
    ],
    "commit_messages": [
      "Fix #1997 (shadows on hardware-accelerated morph animations) (#2111)\n\n* Fix shadows for morph animations\r\n\r\n* Set shadows to the morph test"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d77a14f302d393b260d",
    "number": 2109,
    "body": "This PR fixes #2092 where morph animation clips were loaded without tracks. The problem was occurs because the animation channels were assigned to a node instead of a geometry in the gltf file, which excluded those channels from being properly loaded.\r\n\r\nMy solution is if the target spatial is a node, traverse over that node's children and apply the morphs to the geometries found, otherwise apply morphs as before. This allows the engine to pass the [Morph Stress Test](https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/MorphStressTest) where it couldn't before.",
    "head_branch": "issue2092",
    "is_a_fork": true,
    "comments": [
      "Looks perfect. Thanks!"
    ],
    "commit_messages": [
      "Fixes GLTF Import of Morph Animations (#2109)\n\n* drafted fix\r\n\r\n* removed reference to local assets\r\n\r\n* moved repeated code to method\r\n\r\n* used helper method"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d78a14f302d393b260e",
    "number": 2107,
    "body": "Makes default extensions registrable statically, to allows specific modules (think about (j)bullet, minie etc) to statically register their own extension in the gltf loader. \r\nSimilar to what is done in other contexts (eg. blender) that allow to extend their gltf importer/exporter.",
    "head_branch": "gltfstaticext",
    "is_a_fork": true,
    "comments": [
      "It appears that this change introduces a problem with multithreading that has been solved previously.\r\n\r\n[Made Gltf extension loaders non-static to avoid concurrency](\r\nhttps://github.com/jMonkeyEngine/jmonkeyengine/pull/1886)",
      "> It appears that this change introduces a problem with multithreading that has been solved previously.\r\n> \r\n> [Made Gltf extension loaders non-static to avoid concurrency](https://github.com/jMonkeyEngine/jmonkeyengine/pull/1886)\r\n\r\nThis doesn't revert to the previous behavior, instead it registers statically only the classes on a concurrent hash map and then each instance of the loader creates a local instance of every extension. This makes it thread safe.",
      "OK, thank you for clarifying my doubts.",
      "Unless there's additional substantive discussion, I plan to integrate this PR in about 36 hours."
    ],
    "commit_messages": [
      "Make default extensions statically registrable (#2107)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d79a14f302d393b260f",
    "number": 2106,
    "body": "Adds a default user data loader from Simsilica's JmeConvert to the GLTF loader to make it load custom properties/extras as user data.",
    "head_branch": "gltfuserdata",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add userdata loader to gltf (#2106)\n\n* Add userdata loader and make it the default\r\n\r\n* turn unhandled extras log into a warning\r\n\r\n* Make default extra loader static and configurable\r\n\r\n* Make default extras loader configurable and reinstance with gltf loader\r\n\r\n* code cleanup\r\n\r\n* make defaultExtraLoaderClass volatile\r\n\r\n* fix"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d7ba14f302d393b2610",
    "number": 2105,
    "body": null,
    "head_branch": "vscode-sett",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update vscode config (#2105)\n\n* Add null analysis, format on modification, prettier config and recommended extensions to vscode settings.\r\n\r\n* Remove gradle extension from recommended"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d7ca14f302d393b2611",
    "number": 2104,
    "body": "When a geometry is loaded by the gltf loader for the first time, the same instance that is cached is also returned, meaning that changes to the first instance will reflect also to the other instances of the same cached geometry.\r\nThis PR ensures that this never happens by returning a clone also for the first instance.",
    "head_branch": "gltfspleak",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      " Never return the cached spatial directly: prevent the manipulation of the first instance of a spatial from poisoning the cache. (#2104)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d7da14f302d393b2612",
    "number": 2103,
    "body": "Alternative fix for https://github.com/jMonkeyEngine/jmonkeyengine/pull/2071\r\nThis solves the issue by providing a consistent scenegraph that doesn't depend on its content. (See https://github.com/jMonkeyEngine/jmonkeyengine/pull/2071#issuecomment-1722168917, https://github.com/jMonkeyEngine/jmonkeyengine/pull/2071#issuecomment-1722259307 , https://github.com/jMonkeyEngine/jmonkeyengine/pull/2071#issuecomment-1722263563 for more info)",
    "head_branch": "gltfnames",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Gltf imported spatial names (#2103)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d7ea14f302d393b2613",
    "number": 2102,
    "body": "- Enable GLDebug for webgl.\r\n- Name framebuffers in postprocessing: this is used to tag framebuffers in debuggers when GLDebug is enabled.",
    "head_branch": "gldebug2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Improve GL Debug (#2102)\n\n* Enable gl debug for webgl\r\n\r\n* Add debug info"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d7fa14f302d393b2614",
    "number": 2101,
    "body": "This pr expand the compatible format list for gl es 3 and adds ETC2 support.\r\nThe DDS loader can now load ETC DDSs converted with [compressonator](https://gpuopen.com/compressonator/) (basically old header dds with custom pixel formats).\r\n\r\nlimitations:\r\n- *ETC flipping is not supported*: i couldn't figure out how to flip etc compressed textures without decompressing them first, even though it is probably possible (similar to dxt flipping). I don't this this is very important, since compressed textures are usually considered in their final form and they can be flipped during compression if needed, also we didn't even had dxt flipping for a long time. I plan to open an issue for this and hopefully someone that is knowledgeable about etc formats can contribute with the missing code one day.\r\n",
    "head_branch": "glesformats",
    "is_a_fork": true,
    "comments": [
      "The new file (ETCFlipper.java) needs some javadoc describing its purpose."
    ],
    "commit_messages": [
      "Expand support for GL ES / WebGL compatible formats. (#2101)\n\n* Add more WebGL / GLES supported formats\r\n\r\n* Add compressonator ETC formats to DDS loader\r\n\r\n* ETCFlipper description\r\n\r\n---------\r\n\r\nCo-authored-by: SceneMax3D <scenemax3d@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d80a14f302d393b2615",
    "number": 2100,
    "body": "Set shadow mode to Off instead of Inherit for sky boxes to prevent them from messing with the shadow renderer if attached to a rootNode that has shadows enabled.",
    "head_branch": "skyfix",
    "is_a_fork": true,
    "comments": [
      "This change is long overdue.\r\nThank you, @riccardobl !"
    ],
    "commit_messages": [
      "Disable shadows for sky (#2100)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d81a14f302d393b2616",
    "number": 2095,
    "body": "I raised the same exact error at the same exact code line than the OP in the issue. That resulted in getting 2 errors. By properly using synchronized block, the other (coding error) was gone and I observed no dead locks.\r\n\r\nThe fix in TestChooser is for fixing these failed launches preventing the Chooser from shutting down properly. Failed launches cause the thread to loop in sleep waiting for some kind of confirmation I guess. Wait to stay alive to call the GC. They will stay there forever. Using `shutdownNow` interrupts the threads hanging and properly shuts them down. Note that this doesn't change the behavior otherwise. If you have a test running and close the TestChooser, the test doesn't close. Just the chooser exits and stops waiting. Also `shutdownNow` doesn't block, neither did the `shutdown`.\r\n\r\nResolves #2077 ",
    "head_branch": "bugfix/issue-2077",
    "is_a_fork": true,
    "comments": [
      "Auto-format strikes again. But it is easy to just see the changes from the 2 commits I made. Just one liners.",
      "> Auto-format strikes again.\r\n\r\nMh it seems having it disabled from the settings isn't enough to prevent it from running on forks. \r\nI've pushed a commit to disable it entirely."
    ],
    "commit_messages": [
      "auto-format"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d82a14f302d393b2617",
    "number": 2094,
    "body": "This upgrades the Gradle wrapper to [v7.6.3](https://github.com/gradle/gradle/releases/tag/v7.6.3), which addresses two security vulnerabilities.",
    "head_branch": "sgold/gradle763",
    "is_a_fork": false,
    "comments": [
      "Unless there's substantial discussion, I plan to integrate this PR in about 72 hours."
    ],
    "commit_messages": [
      "build using Gradle v7.6.3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d82a14f302d393b2618",
    "number": 2093,
    "body": "Updates the J3o version from 2 to 3 for adding \"jme-\" prefix to userdata maps, lists, and arrays to fix #2068 xml export issue.",
    "head_branch": "issue2068",
    "is_a_fork": true,
    "comments": [
      "I think the prefix should be added and removed inside\r\n\r\njme3-plugins/src/xml/java/com/jme3/export/xml/DOMOutputCapsule.java\r\njme3-plugins/src/xml/java/com/jme3/export/xml/DOMInputCapsule.java\r\n\r\nsince it fixes a limitation that is specific to xml specs",
      "Can you bump the format to 3 as you did in the first draft and enable the prefix only for formats >=3 ? So that we can keep backward compatibility for already exported xml.",
      "Sorry, I should have thought of that before. :P",
      "Looks fine now, thank you!",
      "Sorry, i did one last review before merging and i've found there is still one last issue, the format_version is prefixed on the output capsule"
    ],
    "commit_messages": [
      "Fixes XML Map Export (#2093)\n\n* export issue fixed\r\n\r\n* tentative version checking\r\n\r\n* commented versioning code\r\n\r\n* implemented fix\r\n\r\n* tested xml import\r\n\r\n* tested binary import\r\n\r\n* rollback changes\r\n\r\n* implemented prefix in DOM input and output capsules\r\n\r\n* moved helper methods to utility class\r\n\r\n* added license for utility class\r\n\r\n* incremented format version and made javadoc clearer\r\n\r\n* fixed backwards compatibility issues\r\n\r\n* removed unnecessary imports\r\n\r\n* fixed incorrect prefix in output capsule\r\n\r\n* Add unit test for jme exporter / jme importer\r\n\r\n---------\r\n\r\nCo-authored-by: Riccardo Balbo <riccardo0blb@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d83a14f302d393b2619",
    "number": 2091,
    "body": "This PR partially fixes #2087 by \"flipping\" the face cull mode as the render state is applied to the renderer if the geometry world scale is found to be negative. This does not alter the normal vectors, so shaders still receive backwards normals and models still may not appear quite right (especially with normal maps), but this fixes the face culling issue, at least.",
    "head_branch": "issue2087",
    "is_a_fork": true,
    "comments": [
      "Did you test these changes on the \"NegativeScaleTest\" model?",
      "Oops, no, I didn't. Tested it out just now, and yes, the changes fixed the test model so there are no Xs anymore. I think it may have also fixed the shading on the spheres, but I couldn't tell for certain.",
      "Hey @codex128 ! Thanks for your contribution to JMonkeyEngine.",
      "According to git bisect this broke our rendering as soon as shadows are enabled.\r\nThere's an incorrect glDepthMask(false) for some of the rendered opaque geometry, I guess from the PreShadow material.\r\nCan anyone confirm?",
      "My first guess would be that `RenderState#set` is problematic, since my change uses `set`, while the previous code did not. Are you using a shadow filter or a shadow renderer?",
      "Yeah from my debugging might be ForcedRenderState related.\r\nHappens with both renderer and filter.",
      "I've opened #2130 which should fix this issue.",
      "Thank you @codex128 for following up on issue #2129.",
      "I just found a problem locally. This modification seems to have caused an exception with ShadowFilter (running TestDirectionalLightShadow.java results in a black screen). I found this issue at commitID=5975b3f791d18fae311a10e209b3ed40b5e5c60f.",
      "`\r\nprivate void updateRenderState(Geometry geometry, RenderManager renderManager, Renderer renderer, TechniqueDef techniqueDef) {\r\n        if (renderManager.getForcedRenderState() != null) {\r\n            mergedRenderState.set(renderManager.getForcedRenderState());\r\n        } else if (techniqueDef.getRenderState() != null) {\r\n            // copyMergedTo writes to mergedRenderState\r\n            techniqueDef.getRenderState().copyMergedTo(additionalState, mergedRenderState);\r\n        } else {\r\n            RenderState.DEFAULT.copyMergedTo(additionalState, mergedRenderState);\r\n        }\r\n        // test if the face cull mode should be flipped before render\r\n        if (mergedRenderState.isFaceCullFlippable() && isNormalsBackward(geometry.getWorldScale())) {\r\n            mergedRenderState.flipFaceCull();\r\n        }\r\n        renderer.applyRenderState(mergedRenderState);\r\n    }\r\n`\r\nIt should be changed to:\r\n`\r\nprivate void updateRenderState(Geometry geometry, RenderManager renderManager, Renderer renderer, TechniqueDef techniqueDef) {\r\n        if (renderManager.getForcedRenderState() != null) {\r\n            mergedRenderState.set(renderManager.getForcedRenderState());\r\n        } else if (techniqueDef.getRenderState() != null) {\r\n            // copyMergedTo writes to mergedRenderState\r\n            mergedRenderState.set(techniqueDef.getRenderState().copyMergedTo(additionalState, mergedRenderState));\r\n        } else {\r\n            mergedRenderState.set(RenderState.DEFAULT.copyMergedTo(additionalState, mergedRenderState));\r\n        }\r\n        // test if the face cull mode should be flipped before render\r\n        if (mergedRenderState.isFaceCullFlippable() && isNormalsBackward(geometry.getWorldScale())) {\r\n            mergedRenderState.flipFaceCull();\r\n        }\r\n        renderer.applyRenderState(mergedRenderState);\r\n    }\r\n`",
      "@JohnLKKK Thank you for reporting the issue! Two things:\r\n\r\n1. When quoting multiple lines of code at GitHub, please use [triple backticks](https://docs.github.com/en/get-started/writing-on-github/working-with-advanced-formatting/creating-and-highlighting-code-blocks) so line breaks and indentation will be preserved, like so:\r\n```java\r\npublic static int main(String... args) {\r\n    return 0;\r\n}\r\n```\r\n2. Please open a new PR with your fix so it can be reviewed and integrated ASAP.",
      "I believe this problem was fixed in #2130.\r\n`TestDirectionalLightShadow.java` is working fine for me on that branch.",
      "> @JohnLKkk Thank you for reporting the issue! Two things:\r\n> \r\n> 1. When quoting multiple lines of code at GitHub, please use [triple backticks](https://docs.github.com/en/get-started/writing-on-github/working-with-advanced-formatting/creating-and-highlighting-code-blocks) so line breaks and indentation will be preserved, like so:\r\n> \r\n> ```java\r\n> public static int main(String... args) {\r\n>     return 0;\r\n> }\r\n> ```\r\n> \r\n> 2. Please open a new PR with your fix so it can be reviewed and integrated ASAP.\r\n\r\nThank you for your guidance. "
    ],
    "commit_messages": [
      "Partial fix for Issue #2087 (NegativeScaleTest) (#2091)\n\n* solution drafted\r\n\r\n* solution tested and confirmed\r\n\r\n* tested scale component combinations\r\n\r\n* removed unnecessary import\r\n\r\n* fixed instatiation of a new object every frame"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d84a14f302d393b261a",
    "number": 2090,
    "body": "see:[https://hub.jmonkeyengine.org/t/enhancements-to-the-jme3-rendering-engine/47145/27](url)\r\n\r\n### Enhance the capabilities of the JME3.7 renderer, mainly including:\r\n1. Introduce a basic framegraph framework for managing renderPasses, while modularizing the existing rendering modules into several core Passes for reuse;\r\n2. Added support for render paths, including Forward (default render path), Deferred (a standard DeferredShading), and TileBasedDeferred (Tile-optimized DeferredShading). They should be compatible with most existing modules.\r\n3. Added some code demos for RenderPath.\r\n\r\nRegarding render paths, please refer to: https://docs.unity3d.com/Manual/RenderingPaths.html\r\n\r\n### Performance considerations\r\nThe rendering overhead of real-time lights in deferred shading is proportional to the number of pixels illuminated by the light and not dependent on Scene complexity. So small Point Lights or Spot Lights are very cheap to render and if they are fully or partially occluded by Scene GameObjects then they are even cheaper.\r\nOf course, lights with shadows are much more expensive than lights without shadows. In deferred shading, shadow-casting GameObjects still need to be rendered once or more for each shadow-casting light. Furthermore, the lighting shader that applies shadows has a higher rendering overhead than the one used when shadows are disabled.\r\n\r\n### GBuffer format: \r\nRT0, RGBA16F: Pack DiffuseColor, Ao, Alpha\r\nRT1, RGBA16F: Pack SpecularColor, FZero, Roughness\r\nRT2, RGBA16F: Pack ShadingModelId, emissiveColor\r\nRT3, RGBA32F: Pack Normal (contains Normal with TBN transform and modelNormal, using cubemap mapping)\r\nRT4, depth: Pack depth\r\n\r\n### LightPack:\r\nThere are two ways to package lightData, one of which is to use a uniform array, which should be faster, but its quantity is limited, and a large number of light sources will be drawn and accumulated through several passes to complete all light sources;\r\nAnother way is to package all light source information through three texture1D, which may have some performance overhead, but supports a large amount of light source data;\r\n\r\n### Tile-Based DeferredShading:\r\nTileLightDecode: Packs tile information, x indicates the first light source offset used by the tile (for lookup in TileLightIndex), y indicates how many lights are associated with the tile (currently no limit, i.e. unlimited number of lights), z indicates the uv coordinate offset when sampling TileLightIndex for the tile; \r\nTileLightIndex: Packs light source ids for each tile\r\n\r\n### UseRenderPath:\r\nEnable the corresponding renderPath in the following ways：\r\n`renderManager.setCurMaxDeferredShadingLightNum(1000);// Pre-allocate a maximum value for light sources to ensure the maximum number of light sources in the scene does not exceed this value.\r\n        renderManager.setRenderPath(RenderManager.RenderPath.Deferred);`\r\n\r\n### UseFramegraph(Still in development...):\r\nIncludes a set of FG public APIs (current internal implementation details may not be perfect, but usable interfaces will be finalized in this PR) \r\nEnable the corresponding framegraph in the following ways：\r\n`renderManager.enableFramegraph(true);`",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "How about we mark this PR as a draft until it's ready for final review?",
      "> How about we mark this PR as a draft until it's ready for final review?\r\n\r\nI think it's possible, however advancing this might require some extra work:\r\n1. Should testing be done and related bugs reported and fixed (although I personally tested my local examples code, others' situations might differ)?\r\n2. Should this PR be a \"1.0 version to enhance renderer capabilities\" instead of a one-step perfect version? (I think this PR is not perfect now because the render path is not thoroughly optimized, however, theoretically when adding a new feature, it should first be made compatible with existing architecture and run stably, then do 2.0 or 3.0 iteration and optimization work afterwards) \r\n3. I may not include global illumination content in this PR, because I think the subject deserves its own new PR created specifically for it.",
      "I think this PR should be marked as a draft. Marking in-progress PRs as a drafts reduces the mental load on integrators and prevents premature integration.\r\n\r\n> Should testing be done and related bugs reported and fixed (although I personally tested my local examples code, others' situations might differ)?\r\n\r\nTesting and bug reporting can and should continue while the PR is a draft.\r\n\r\n>  Should this PR be a \"1.0 version to enhance renderer capabilities\" instead of a one-step perfect version?\r\n\r\nYour decision; we can go either way.\r\n\r\n> I may not include global illumination content in this PR, because I think the subject deserves its own new PR created specifically for it.\r\n\r\nI'm fine with that.",
      "Each Java sourcefile you add to the repo should have the full JME license at the top of the file, with the current year for the copyright date.",
      "> Each Java sourcefile you add to the repo should have the full JME license at the top of the file, with the current year for the copyright date.\r\n\r\nI think I will make time to modify each Java file according to the engine source code conventions.",
      "> I don't understand a lot about rendering, so I probably won't catch any major issues. Hopefully this review will be helpful anyway. 😉 I've refrained from mentioning javadoc and basic style issues, since it sounds like you'll be working on that soon.\r\n\r\nThank you for your valuable suggestions. I will refer to most of the suggestions and only need to make corresponding modifications and adjustments.",
      "> Each Java sourcefile you add to the repo should have the full JME license at the top of the file, with the current year for the copyright date.\r\n\r\nI have just supplemented a large number of core comments as well as complete JME license information in each file.",
      "I am not happy with the material handling. I know there are some upsides when using a separate technique, but having all the shader code twice is going to be a nightmare to maintain/extend. \r\n\r\nMy proposal would be adding a define \"GBUFFER_WRITE\" to the default techniques. you can set the define to 1 using MatParamOverrrides\r\n\r\nInside the shaders then a simple #ifdef #else can be used to write to data to gbuffer, or continue with the default lighting code.\r\n\r\nBut i would like to discuss this, since i am facing the same issue with the OrderIndepenededTranslucency and this is the implementation i opted for. ",
      "Hi @JohnLKkk, just my two cents to this amazing work: according to the engine's default java programming style, package names should not contain capital letters. Could you please rename the package `com.jme3.renderer.renderPass` to `com.jme3.renderer.renderpass` ?",
      "Maybe even just com.jme3.renderer.pass.   \"render\" might be redundant when already under the renderer package.",
      "I agree with @pspeed42 ",
      "> Maybe even just com.jme3.renderer.pass. \"render\" might be redundant when already under the renderer package.\r\n\r\nI will adjust the java package name to com.jme3.renderer.pass later.",
      "> My proposal would be adding a define \"GBUFFER_WRITE\" to the default techniques. you can set the define to 1 using MatParamOverrrides\r\n> \r\n> Inside the shaders then a simple #ifdef #else can be used to write to data to gbuffer, or continue with the default lighting code.\r\n\r\n\r\n\r\n> I am not happy with the material handling. I know there are some upsides when using a separate technique, but having all the shader code twice is going to be a nightmare to maintain/extend.\r\n> \r\n> My proposal would be adding a define \"GBUFFER_WRITE\" to the default techniques. you can set the define to 1 using MatParamOverrrides\r\n> \r\n> Inside the shaders then a simple #ifdef #else can be used to write to data to gbuffer, or continue with the default lighting code.\r\n> \r\n> But i would like to discuss this, since i am facing the same issue with the OrderIndepenededTranslucency and this is the implementation i opted for.\r\n\r\nYou raised a good suggestion. In fact, my original implementation was the approach you mentioned, which is to include multiple logic branches in a .frag file. However, I finally chose to use independent GBufferPass Technique blocks for the following reasons:\r\n1. A primary goal: How to ensure a Mesh should be rendered in the Deferred stage or Forward stage of the hybrid rendering path? The answer is determined by its currently bound material. So I need a way to judge whether to dispatch the MeshDrawcommands to the DeferredRenderPass when distributing MeshDrawcommands. If I handle the default lighting or GBUFFER_WRITE through macro definitions or MaterialParameters in the default Technique, then when distributing MeshDrawcommands in the renderPass, I can only judge whether the Mesh should enter the DeferredRenderPass through the following ugly code:\r\nif(Mesh.getMaterial().getParam(\"HasGBufferWriteParam\") != null){  \r\n// can dispatch to DeferredRenderPass\r\nMesh.getMaterial().setParam(\"HasGBufferWriteParam\", true);\r\n}\r\nOr judge if the macro definition exists:\r\nHasGBufferWriteDefine = techniqueDef.addShaderUnmappedDefine(\"GBUFFER_WRITE\", VarType.Int|VarType.Boolean); \r\nif(HasGBufferWriteDefine != null){\r\n// inject macro definition, recreate shader variant, disable macro definition next frame...\r\n}\r\nThere is another issue when considering switching the rendering path at runtime. If I set the Material through HasGBufferWriteDefine or HasGBufferWriteParam, then when I switch from DeferredPath to ForwardPath, I need additional tracking lists to record which Meshes' Materials have been modified with HasGBufferWriteParam or HasGBufferWriteDefine, and in switching rendering paths, loop through all Meshes' Materials and reset their HasGBufferWriteDefine or HasGBufferWriteParam to false. Such logic is not good...\r\nAs you can see, this code is ugly. I finally chose to judge whether the Mesh can be dispatched to the specified rendering path by: \r\nif(Mesh.getMaterial().HasTechnique(\"GBufferPass\")){\r\n// can dispatch to DeferredRenderPass\r\n}\r\nThen I don't need to switch the Technique for each Mesh here, because JME already encapsulates an interface: renderManager.setForcedTechnique(XXXX);\r\nSo I just need to collect objects and execute the GBufferPass through the encapsulated JME interface.\r\n2. For safety, if I change to a single Technique block, I may not choose to use macro definitions to implement shader branches, because that would create shader variants (only one branch executes at a time, so no gpu warp dispatch overhead here, material parameters can be used safely), so I would use material parameters to control the branch (so the default Technique block would only create one shader variant). But in this way, JME3 users may edit the value of this \"HasGBufferWriteParam\" in the MaterialEditor...\r\n3. Clarity of materials. If I include branches to handle Forward and Deferred logic in a default Technique block, then the user's custom MaterialDef would need to add a material parameter \"HasGBufferWriteParam\", or add a macro definition HasGBufferWriteParam. Also, users may add the HasGBufferWriteParam material parameter but forget to write the corresponding branch code. However, in the DispathMeshDrawcommands stage, because I judge that Mesh.getMaterial().getParam(\"HasGBufferWriteParam\") exists, I think it can be rendered in the DeferredRenderPass, and the final result is blank, and JME3 users may not find the reason. \r\nOn the contrary, with a separate GBufferPass Technique block, users must explicitly define this block. If this block does not exist, it will not be dispatched to the DeferredRenderPass, but will execute in the ForwardPass. Then I can detect whether the GBufferPass Technique block is valid when parsing the MaterialDef, and report an error to remind JME3 users to write their custom GBufferPass.\r\n4. I need extra processing of the GBufferPass in subsequent stages, and you may have seen the following Pipeline tag: \r\nTechnique GBufferPass{\r\n        Pipeline Deferred\r\n}\r\nIt doesn't work now, but it will work for future features. If I integrate the GBufferWrite code into the default Technique block, I won't be able to distinguish the extra work of handling Pipeline Deferred...\r\n5. Regarding your point about duplicate shader code, this is indeed a big problem. I discussed this issue with yaRnMcDonuts. Our idea is to extract the common code into glsllib so that only one copy needs to be maintained. This work has been started in this PR (https://github.com/jMonkeyEngine/jmonkeyengine/issues/2122，but not yet done)...\r\nIn summary, I'm not saying this approach is most reasonable, it's just that currently I don't have a better encapsulation idea. After repeatedly considering points 1, 2, 3, and 4, my compromise was to delete the early code (which was the approach you mentioned, integrating all logic into the default Technique block)... If there are better architectures or encapsulation ideas in the future, it can be refactored here. If you have a better solution, please feel free to discuss with me anytime. Thanks!",
      "> Hi @JohnLKkk, just my two cents to this amazing work: according to the engine's default java programming style, package names should not contain capital letters. Could you please rename the package `com.jme3.renderer.renderPass` to `com.jme3.renderer.renderpass` ?\r\n\r\nThank you for pointing that out. I will adjust the java package path naming here.",
      "Yeah, i am also not sure whats the best approach here. \r\nI am thinking about it, but thanks for the full explanation. Something more to consider. \r\nSo the proposed layout of any material should be:\r\n`Mat.j3md\r\nMat.glsllib\r\nMat-forward.frag\r\nMat-deferred.frag`\r\n\r\nTbh, i do not like this solution, and i do see the issues of the branching solution, but at this moment i also do not know of anything there could be done. (As adding a feature to the material system that would eliminate this problems). I am providing a more in depth response but i am in a hurry. ",
      "> Maybe even just com.jme3.renderer.pass. \"render\" might be redundant when already under the renderer package.\r\n\r\nThe naming has been fixed.",
      "> Hi @JohnLKkk, just my two cents to this amazing work: according to the engine's default java programming style, package names should not contain capital letters. Could you please rename the package `com.jme3.renderer.renderPass` to `com.jme3.renderer.renderpass` ?\r\n\r\nThe naming has been fixed.",
      "> Yeah, i am also not sure whats the best approach here. I am thinking about it, but thanks for the full explanation. Something more to consider. So the proposed layout of any material should be: `Mat.j3md Mat.glsllib Mat-forward.frag Mat-deferred.frag`\r\n> \r\n> Tbh, i do not like this solution, and i do see the issues of the branching solution, but at this moment i also do not know of anything there could be done. (As adding a feature to the material system that would eliminate this problems). I am providing a more in depth response but i am in a hurry.\r\n\r\n\r\n\r\n> Yeah, i am also not sure whats the best approach here. I am thinking about it, but thanks for the full explanation. Something more to consider. So the proposed layout of any material should be: `Mat.j3md Mat.glsllib Mat-forward.frag Mat-deferred.frag`\r\n> \r\n> Tbh, i do not like this solution, and i do see the issues of the branching solution, but at this moment i also do not know of anything there could be done. (As adding a feature to the material system that would eliminate this problems). I am providing a more in depth response but i am in a hurry.\r\n\r\nIn fact, unless we refactor the MaterialSystem and Render to reasonably consolidate all the code into one Technique, and avoid the 4 concerns I worried about, it would be very unpleasant to resolve the 4 concerns I mentioned earlier (among which the most important ones are point 1 and 3) (not that the current architecture cannot do it, but the code would be very ugly...), so the current approach is somewhat a compromise I made for the existing JME3 architecture. However, unless a significant number of JME3 users reject this approach, I currently do not have the bandwidth to adjust the MaterialSystem and Render parts...because I have more important PRs (global illumination and FSR, VRS) to work on.",
      "@stephengold @riccardobl I noticed there is currently \"1 workflow awaiting approval\" on the PR, should I wait or? Sorry I hope someone can let me know...",
      "i guess it just need code rewiew people to mark \"approve\" not just \"comment\" but might be wrong.\r\n\r\nIm not sure how it will work now, since there was HUB topic to improve PR.\r\nFrom Riccardo post earlier:\r\n\r\n> Anyone within the community who possesses knowledge of the code changes is encouraged to review the Pull Request\r\n> If a reviewer is confident that the PR requires no further alterations, they are encouraged to provide their approval from the github interface\r\n\r\nI guess zzuegg might be one i would hope, since he had knowledge\r\n\r\nAlso:\r\n\r\n> For feature PRs, they need approval from at least one core developer (two if it’s from a core developer). Everyone is encouraged to review, and if someone lacks the expertise (or time), they can still express approval or disapproval by reacting with :+1: or :-1: to indicate their stance on the feature’s general concept.\r\n\r\nIm not sure if this new ideas are existing now, but this PR already have some :+1: so should be fine i guess.\r\n\r\nAnyway yes, i think we should wait for core-devs confirmation",
      "> @stephengold @riccardobl I noticed there is currently \"1 workflow awaiting approval\" on the PR, should I wait or? Sorry I hope someone can let me know...\r\n\r\nIt seems it is your first contribution, or the first contribution since when forks need approval to run on github actions and so it needs to be manually approved.\r\nI approved the workflow :+1: ",
      "I think i have stated my opinion regarding the jme integration part here and on the forum. So i will let others argue about that. \r\nI have reviewed most of the files changed, but i have not yet dig into the new one. Don't know whats expected from a reviewer..",
      "zzuegg i seen forum replies should answer about first case.\r\n\r\nSecond case idk, tho last commit were only about loggers. I guess some changes might be also made in 2.0.",
      "So, after reviewing most of the code, and having spent too much time arguing with various people here is my summary:\r\n\r\nThis PR introduces a possible future rendering style that is up to date. It should offer a simple and flexible way to adapt the rendering to the needs of the game)\r\nIn the current state, **this is not the case**, because the two available options are hardcoded into RenderManager.java with no option to customize it. \r\nAs discussed with JohnLKKK a user configurable render graph is the final goal and he is working towards the same goal. As far i understand, his ultimate solution is quite close to what i had in mind.\r\n\r\nSo here is the bullet list why i vote against a merge into master:\r\n\r\n- The integration is not done at all. See all stuff hardcoded into RenderManager.java\r\n- This PR add methods/types that are not used in any code // i might be wrong on this one, they are used to switch between the hardcoded once\r\n- Everything in the FrameGraph package is poorly documented\r\n- Naming inside the shaders (If i have to look up a java file and a project desription to see whats inside a texture it is bad to maintain)\r\n- It offers no more flexibility than the current backend. (Only moar lights)\r\n- The api is far from stable and v2 in his repository is quite different than this\r\n- The public api added trough this PR it will break code once it hopefully gets integrated cleanly. \r\n- The current implementations skips still important topics (shadows/post processing)\r\n- The usual formatting issues\r\n\r\nAll in all, i have the feeling this is a proof of concept, and an early test if the underlying FrameGraph api works as expected. I would probably do the same in my private repository, but it should not go on master. \r\n\r\nJohnLKKK seems to know this, and he also mentioned that he has no hurry for merging and would continue even if this PR stays open for a long time. \r\nSince my efforts to look for a way if it could be done externally failed because of public rejection i see no option to make the feature available for the public (Beside a gradle install from his repository of course)\r\n\r\nI personally did choose a bad PR to start my reviewing career, so i will still comment if things are unclear, but i am not going to argue with various \"i want this in core!!!now!!!\" people.\r\n\r\nIf you all come to a different conclusion then the rules for merging to master have changed drastically, but go ahead",
      "> * The integration is not done at all. See all stuff hardcoded into RenderManager.java\r\n> * This PR add methods/types that are not used in any code\r\n> * Everything in the FrameGraph package is poorly documented\r\n> * Naming inside the shaders (If i have to look up a java file and a project desription to see whats inside a texture it is bad to maintain)\r\n> * It offers no more flexibility than the current backend. (Only moar lights)\r\n> * The api is far from stable and v2 in his repository is quite different than this\r\n> * The public api added trough this PR it will break code once it hopefully gets integrated cleanly.\r\n> * The current implementations skips still important topics (shadows/post processing)\r\n> * The usual formatting issues\r\n\r\nHi zuuegg,\r\nThanks for the summary.\r\nIf I understand correctly your points are:\r\nwe have some hard-coded stuff in RenderManager \r\nwe have new methods that are not used anywhere else - **is it an issue? it doesn't break anything. it's a new foundation and likely to add new stuff that will be used later on** \r\nFrameGraph is poorly documented - fixable\r\nNaming in shaders can be better \r\nWe only get more lights - **I guess more features will add much more code to this already huge PR**\r\nThe API is not stable - **johnLkkk is handling it in V2**\r\nThe public API added will introduce breaking changes to the current version - **is it avoidable?**\r\nShandows / post processing is not improved in this PR - **again, more features will add much more code to this already huge PR**\r\ngeneral formatting - **I see several reviewers commented and johnLkkk fixed in all concrete comments**\r\n\r\nso, in general I think we have 2 major points here:\r\nhard-coded stuff in RenderManager\r\nnew API introduces breaking changes\r\n\r\nregarding the hard-coded stuff I need to go back and see johnLkkk's response and how sever it is\r\nregarding the breaking changes - @JohnLKkk - can you elaborate what us (the end users) need to change in current code?\r\n\r\nThanks again!  \r\n\r\n",
      "\"Handeling/Fixing/Needing it in V2\" talk is an early sign for me that it is currently not ready to ship. And the fact that he is already way into V2 is even more a strong sign that V1 is not ready. \r\n\r\nI would be more open minded if it would not be the central part of the engine. This should be done right from the beginning. Or at least try",
      "> This PR introduces a possible future rendering style that is up to date. It should offer a simple and flexible way to adapt the rendering to the needs of the game)\r\n> In the current state, **this is not the case**, because the two available options are hardcoded into RenderManager.java with no option to customize it.\r\n\r\nSure it would be great to refactor it the way you described to let other renderers be swapped out, but right now we have 0 modular renderers to swap around so why make it the author of this PR's job to refactor our old rendering system and his new rendering system so they can be swapped in and out with any other new renderers that also don't exist yet? We can refactor that all in the future, but it shouldn't be a reason to slow down the implementation of a better renderer.\r\nI'd say it's on the fault of jme that our engine wasn't written to work with swappable renderers in the first place, but we're only just realizing it now apparently. So why make this the burden of the guy who's just trying to write us a cool new renderer? \r\n\r\n> Since my efforts to look for a way if it could be done externally failed because of public rejection\r\n\r\nI would say this is actually because of author decision. I (and others) agreed that 3rd party libs have objective benefits, but not everyone likes making them and the author said he doesn't want to go that route. So we either let him make the PR, or we tell him to stop if he's not going to do it the way that we insist is easier for him. \r\n\r\nI also stated how I believe we are being overly protective of the master branch and have yet to hear a reason to prove why we should be acting this way, especially about such groundbreaking features that many devs expect of a modern engine, and many choose not to use JME as a result of. \r\n\r\nIf this PR does end up abandoned and unfinished, there's nothing stopping us from reverting all the PRs and cleaning out the master branch.  We have versions and beta/stable releases for a reason, and the documentation clearly advises that jme devs should not use master in production. So if master is more unstable for a while during this time then I don't think that's a bad price to pay, especially if the alternative is axing this feature altogether because the author is forced to do it in a way that is non-conducive to his preferred workflow and ultimately leads him to get frustrated and give up. \r\n\r\n> If you all come to a different conclusion then the rules for merging to master have changed drastically, but go ahead\r\n\r\nWe aren't changing the rules on master branch to say that any and every feature/idea can now be workshopped and tested directly on master like this. We are making a very specific choice to allow this to happen because the scope of the feature and the benefits it can bring.\r\n\r\n\r\n\r\n\r\n\r\n",
      "So whats the benefit of adding it to master if it does not get shipped with next version?\r\n\r\nThen, i fortunately have not be the guy to make the final call, this are my impressions and the result of my review. Thats it, not more not less. ",
      "> So whats the benefit of adding it to master if it does not get shipped with next version?\r\n\r\nI think the benefit is that he gets to work the way he wants and is less likely to get discouraged by the hurdles you have to jump through to learn how to post and manage your first 3rd party lib. \r\n\r\nI did it once for my PBR terrains before they got merged to core, and it was not fun and took a lot of my time trying to overcome minor bugs and issues learning and using the interface for the place I was instructed to upload my library to. Time I'd have rather spent working on the actual shaders but instead was getting frustrated trying to learn a new websites interface. I'd say it was a valuable learning experience, but I completely forget the process because it was so long ago and the Jfrog place I was uploading to was apparently getting shut down shortly after I started using it, so that was discouraging lol. Needless to say I do not look forward to relearning this all again when I make another 3rd party library. \r\n\r\nSo even if it is objectively better way to make everything a 3rd party lib, that is only true for devs who are experienced in that process and know the process like the back of their hand. I commend those of you who are in that position, but that is not the majority position, and expecting absolutely everyone who wants to commit a big feature to jme to go through that process with no exceptions seems like a great way to discourage contributions. ",
      "Based on HUB topic referred to zzuegg comment, currently i only see 4 real topics based on it:\r\n\r\n- currently i see mainly lack of docks in FrameGraph package files. (on experimental branch it might not be important but docs should be added before merge in current way)\r\n\r\n- Formatting, not that important(worth to reformat ofc), but not to me to decide here. In general like already discussed on HUB, would be good to add github formatting verification step or auto-formatting later anyway.\r\n\r\n- one unused variable(with setters) in ViewPort file. \"setRenderPath/getRenderPath\" seems unused. Might be added later when needed, just not now.\r\n\r\n- Also related to HUB zzuegg comment:\r\n``Everything added in the RenderManager.java again will probably get removed again.\r\nAll setters of the various techniques have to go to some VarSinks at some point``\r\nrelated to:\r\n``The public api added trough this PR it will break code once it hopefully gets integrated cleanly.``\r\nSomeone would need refer to this.\r\n\r\nSo Imo just this 4 topics here. \r\nOne of zzuegg points were in fact new feature, since current code do not provide this."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d85a14f302d393b261b",
    "number": 2088,
    "body": "Adds `KHR_materials_emissive_strength` GLTF extension loader that fixes #2085.\r\n\r\nOn a side note, I noticed PBRLighting.j3md does not have `GlowMap` or `GlowColor` material parameters. Is that on purpose?",
    "head_branch": "issue2085",
    "is_a_fork": true,
    "comments": [
      "I believe PBRLighting.j3md uses `EmissiveMap` and `Emissive` in place of `GlowMap` and `GlowColor`.",
      "The \"EmissiveStrengthTest\" model is licensed CC-BY 4.0, which is not compatible with the BSD license of jme3-examples.\r\nMoving it to jme3-testdata won't help, since that's also licensed BSD. So please remove the 3 model files from this PR.\r\n\r\nIf you don't feel like creating a new test model from scratch, I suggest using jme3test.model.TestGltfLoading for testing.",
      ">If you don't feel like creating a new test model from scratch, I suggest using jme3test.model.TestGltfLoading for testing.\r\n\r\nOh, yeah, that looks much easier! :smile: ",
      "re: \"I believe PBRLighting.j3md uses EmissiveMap and Emissive in place of GlowMap and GlowColor\"\r\nI may be speaking on topics I don't understand, but: both Lighting.j3md and PBRLighting.j3md seem to use the same shaders for the glow pass.  So I'm not sure what adapts the Emissive* stuff to GLow* stuff.  Perhaps we need a PBRGlow.frag that uses EmissiveMap/Emissive.",
      "Looks good to me. Unless there's further substantive discussion of this PR, I plan to integrate it in about 72 hours."
    ],
    "commit_messages": [
      "Fixes Issue #2085 (KHR_materials_emissive_strengh extension) (#2088)\n\n* test-model appears as expected\r\n\r\n* removed test resources\r\n\r\n* fixed license headers"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d86a14f302d393b261c",
    "number": 2086,
    "body": "Fixes enabling of vertex colors in the gltf loader as described in #2083.",
    "head_branch": "issue2083",
    "is_a_fork": true,
    "comments": [
      "Thank you, @codex128 !\r\n\r\nUnless there's additional substantive feedback, I plan to integrate this PR in about 48 hours.",
      "Ugh! Huge merge conflict with PR #2104. Could someone resolve it for me?",
      "> Ugh! Huge merge conflict with PR #2104. Could someone resolve it for me?\r\n\r\nWorking on it",
      "> Ugh! Huge merge conflict with PR #2104. Could someone resolve it for me?\r\n\r\nResolved and added a test.\r\n",
      "Thank you for your contributions, @codex128 and @riccardobl .",
      "FoxCC has reported a possible issue with e440f31:  https://hub.jmonkeyengine.org/t/jmonkeyengine-v3-7-0-beta1-release/47653/40"
    ],
    "commit_messages": [
      "Merge pull request #2086 from codex128/issue2083\n\nFixes Issue #2083 (enable vertex colors in glTF loader)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d87a14f302d393b261d",
    "number": 2084,
    "body": "Fixes issues loading blend modes and alpha discard levels on gltf models as described in #2082.",
    "head_branch": "issue2082",
    "is_a_fork": true,
    "comments": [
      "Thanks for your work. A couple changes, please:\r\n+ The \"AlphaBlendModeTest\" data is licensed CC-BY 4.0, which is not compatible with JME's license.  Either create new test data or delete the test.\r\n+ There should be no line break after a brace that is followed by `else`. Delete those line breaks.",
      "Unless there is further substantive discussion, I plan to integrate this PR in about 48 hours.",
      "Thanks for the contribution, @codex128 !"
    ],
    "commit_messages": [
      "Fixes Issue #2082 (AlphaBlendModeTest) (#2084)\n\n* test model appearance is correct\r\n\r\n* comment changes\r\n\r\n* fixed javadoc and license\r\n\r\n* deleted incompatible assets and fixed code style\r\n\r\n* fixed return value for masked blend"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d88a14f302d393b261e",
    "number": 2081,
    "body": "This commit fixes the minor #2070 asset key issue by adding equals and hashcode methods to GltfModelKey and SceneKey.",
    "head_branch": "issue2070",
    "is_a_fork": true,
    "comments": [
      "Thank you, @codex128 ",
      "Thanks for the changes @codex128 .  Unless there's further substantial discussion, I plan to integrate this fix in about 24 hours.",
      "I intended a squashed integration but apparently I goofed and did a straight rebase, so now the fix is split into 2 commits in the \"master\" branch."
    ],
    "commit_messages": [
      "made code more readable and added hashcode and equals methods to AnimationList"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d89a14f302d393b261f",
    "number": 2080,
    "body": "Small quality-of-life improvement. :)\r\n\r\nThis pull request adds a class that iterates over the scene graph with the depth-first approach. The advantage to using this over the standard scene traversal is being able to use enhanced for-loops, which allow for functionality lambdas are not capable of. I have found this to be very useful for processing scenes at runtime.\r\n\r\nBasic usage:\r\n```java\r\nSpatial main = ...\r\nfor (Spatial spatial : new SceneGraphIterator(main)) {\r\n    // ...\r\n}\r\n```\r\nThe iterator has a couple useful methods:\r\n```java\r\n// makes the iterator not iterate over the children of the current spatial\r\niterator.ignoreChildren();\r\n\r\n// gets the current depth (distance from the current spatial to the main spatial)\r\niterator.getDepth();\r\n```\r\nExample: count geometries\r\n```java\r\nint total = 0;\r\nSpatial gameScene = rootNode.getChild(\"game-scene\");\r\nfor (Spatial spatial : new SceneGraphIterator(gameScene)) {\r\n    if (spatial instanceof Geometry) {\r\n        total++;\r\n    }\r\n}\r\n```\r\nExample: selective material replacement\r\n```java\r\nSceneGraphIterator iterator = new SceneGraphIterator(rootNode);\r\nMaterial replace = assetManager.loadMaterial(\"Material/MyMaterial.j3m\");\r\nfor (Spatial spatial : iterator) {\r\n    // any geometry under \"house1\" should not use the replacement material\r\n    if (\"house1\".equals(spatial.getName())) {\r\n        iterator.ignoreChildren();\r\n        continue;\r\n    }\r\n    if (spatial instanceof Geometry) {\r\n        ((Geometry)spatial).setMaterial(replace);\r\n    }\r\n}\r\n```",
    "head_branch": "sceneIterator",
    "is_a_fork": true,
    "comments": [
      "Unless there's further substantive discussion, I plan to integrate this PR in about 48 hours.",
      "GitHub wouldn't let me rebase, so I integrated using \"squash and merge\".",
      "Thanks for another good contribution to JMonkeyEngine, @codex128 !",
      "You're welcome. Glad to do it!"
    ],
    "commit_messages": [
      "SceneGraphIterator (#2080)\n\n* ported in iterator\r\n\r\n* added test\r\n\r\n* made example clearer\r\n\r\n* fixed child ignore\r\n\r\n* small changes in iterator example\r\n\r\n* fixed small example issue\r\n\r\n* fixed null pointer on depth\r\n\r\n* fixed code style and javadoc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d8aa14f302d393b2620",
    "number": 2079,
    "body": "A proposed fix for issue #2078.\r\nThis solution enables `FlyByCamera` to zoom even when the camera is in orthographic mode.\r\nNot exactly how it worked in JME v3.3.2, but similar.",
    "head_branch": "sgold/pr/issue2078",
    "is_a_fork": false,
    "comments": [
      "Unless there's substantial discussion, I plan to integrate this pull request in about 72 hours."
    ],
    "commit_messages": [
      "bugfix: IllegalArgumentException in Camera.setFov() (issue #2078)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d8ba14f302d393b2621",
    "number": 2075,
    "body": "These changes are intended to make the sourcecode more readable.\r\n\r\n+ number agreement between nouns and verbs\r\n+ punctuation to separate clauses\r\n+ apostrophe when \"let us\" is contracted\r\n+ correct glaring typos such as \"MiiktSpace\" and \"color major\"",
    "head_branch": "sgold/pr/gltf-loader-jdoc",
    "is_a_fork": false,
    "comments": [
      "Unless there's substantial discussion, I plan to integrate this PR in 72 hours."
    ],
    "commit_messages": [
      "GltfLoader:  copyedits to 18 inline comments"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d8ca14f302d393b2622",
    "number": 2074,
    "body": "Changed default values to \"0\" instead of \"-1\" and moved them to private constant class variables.\r\nI guess \"-1\" was used as an fail/error-state but i didn't seen any checks besides \">=0\", \"!=0\" and \"==0\".\r\n\r\nAlso after reading the request which also fixes #334 I am not sure if this a useful solution. \r\n\r\nUnittests -> ok\r\nHandpicked examples(Scenes, Animation) ->  #ok\r\n\r\n",
    "head_branch": "fix_311",
    "is_a_fork": true,
    "comments": [
      "This isn't a good solution for #313, because the render statistics will still be incorrect.\r\n\r\nIf the statistics are -1, that indicates that the mesh hasn't been completely initialized. If such a mesh were passed to the renderer, it might be best to fail quickly.",
      "Okay. I should read more thoroughly: **\"If the stats value is -1 the mesh should be considered invalid and crash with exception.\"**",
      "We could either close this PR or else turn it into a refactoring PR that simply adds a bunch of constants. @MelVimL what's your preference?\r\n\r\nIf we pursue the latter course, I request that the constants not be public unless there's a good case for using them outside the package.",
      "I like constants for defaults/inits, even the private ones.",
      "Unless there's further substantive discussion, I plan to integrate this in 24 hours.",
      "Oops! I just noticed the added file \"MeshTest.java\". Probably it should be deleted from this PR. If not deleted, it needs javadoc and a copy of the license.\r\n\r\n@MelVimL would you please take care of it?",
      "@stephengold  Added the requested javadoc and license. I used the TestSpatial as a reference.",
      "Thank you @MelVimL . I plan to integrate this in a few hours.",
      "@stephengold You're Welcome. Love the project!"
    ],
    "commit_messages": [
      "Mesh:  add constants for initial/default values of fields (#2074)\n\n* Fixes Issue #313\r\n\r\n* Moves default vaules to constants\r\n\r\n* Fixes Test\r\n\r\n* Fixes Typos.\r\n\r\n* Adds missing changes from last commit.\r\n\r\n* Adds license and javadoc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d8da14f302d393b2623",
    "number": 2073,
    "body": null,
    "head_branch": "johnkkk",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d8ea14f302d393b2624",
    "number": 2072,
    "body": "I've reviewed the release notes and begun using LWJGL 3.3.3 in my own projects, both on Linux and Windows 11. So far I haven't uncovered any regressions or new issues.\r\n\r\nI think this change shouldn't be controversial.\r\nI'm submitting this PR as a reminder to upgrade our Engine at some convenient time.",
    "head_branch": "sgold/pr/lwjgl333",
    "is_a_fork": false,
    "comments": [
      "Unless there's substantive discussion, I plan to integrate this PR in about 72 hours."
    ],
    "commit_messages": [
      "update LWJGL to v3.3.3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d8fa14f302d393b2625",
    "number": 2071,
    "body": "https://hub.jmonkeyengine.org/t/solved-getting-the-names-of-objects-not-meshes-into-jme/45511",
    "head_branch": "gltf_loader_object_names_fix",
    "is_a_fork": true,
    "comments": [
      "@JosiahGoeman thanks for your contribution.\r\n\r\n@riccardobl can we adjust auto-formatting to only apply to the changed lines and not the whole class?",
      "At least the formatting is in its own commit. So it is still easy to check what actually changed.",
      "Auto-formatting = \"being exactly the same is more important than being readable.\"  And several of these changes are good examples.  Oh, well.",
      "> @riccardobl can we adjust auto-formatting to only apply to the changed lines and not the whole class?\r\n\r\nThat's not possible afaik, the best we can do is run the formatter once  for the entire repo.\r\n\r\nConsidering that the commits are separated and the pr can be merged without squash, is the current approach really bad?",
      "Anything that harms readability is bad, unless it's required for correctness.",
      "Oof, it really did a number on that file.  Sorry, I didn't notice the extra commit.",
      ">Sorry, I didn't notice the extra commit.\r\n\r\nThat is added automatically by the auto-formatting plugin that runs via our GitHub actions. Nothing wrong on your side. ",
      "Ok, so, if everyone agrees, we can disable with workflow for now, and re-enable when (if) we get to jme4 after a full formattation of the legacy code ",
      "> https://hub.jmonkeyengine.org/t/solved-getting-the-names-of-objects-not-meshes-into-jme/45511\r\n\r\nI am not sure about this PR.\r\nThe loader already creates a parent node with the node name, and that's the correct approach, since gltf meshes map to jme geometries and they should be named after the mesh name.\r\n\r\nConsider that one gltf mesh with multiple materials can be converted into multiple jme geometries.\r\n\r\nEg. if you have a car with 3 materials, it will look like this in gltf\r\n\r\n```\r\ncar : Node ->\r\n   carMesh(mat1, mat2, mat3) : Mesh\r\n```\r\nbut like this in jme\r\n\r\n```\r\ncar : Node -> \r\n   carMesh : Node ->\r\n     carMesh1 (mat1) : Geometry\r\n     carMesh2 (mat2) : Geometry\r\n     carMesh3 (mat3) : Geometry\r\n```\r\n\r\nand that's expected.\r\n\r\nWith your patch it will look like this\r\n\r\n```\r\ncar : Node -> \r\n   car : Node ->\r\n     carMesh1 (mat1) : Geometry\r\n     carMesh2 (mat2) : Geometry\r\n     carMesh3 (mat3) : Geometry\r\n```\r\n\r\nThis might lead to unexpected results when looking for the \"car\" node.\r\n\r\n\r\nIf anything i think we should get rid lines 252 to 256 since they introduce inconsistency in the node tree since they make so that carMesh can be either a geometry or a node depending on its content\r\n\r\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-plugins/src/gltf/java/com/jme3/scene/plugins/gltf/GltfLoader.java#L252-L256\r\n",
      ">Eg. if you have a car with 3 materials, it will look like this in gltf\r\n\r\nI tried this but I could not reproduce the issue you mentioned\r\n\r\nI made a simple test in Blender:\r\n\r\n![Screenshot_2023-09-16_00-49-07](https://github.com/jMonkeyEngine/jmonkeyengine/assets/5787647/6d18c625-cf32-4aaa-979d-16066fad17ee)\r\n\r\nthis is the gltf file:\r\n\r\n```\r\n{\r\n    \"asset\" : {\r\n        \"generator\" : \"Khronos glTF Blender I/O v3.4.50\",\r\n        \"version\" : \"2.0\"\r\n    },\r\n    \"scene\" : 0,\r\n    \"scenes\" : [\r\n        {\r\n            \"name\" : \"Scene\",\r\n            \"nodes\" : [\r\n                0\r\n            ]\r\n        }\r\n    ],\r\n    \"nodes\" : [\r\n        {\r\n            \"mesh\" : 0,\r\n            \"name\" : \"Car\"\r\n        }\r\n    ],\r\n    \"materials\" : [\r\n        {\r\n            \"doubleSided\" : true,\r\n            \"name\" : \"Material-Green\",\r\n            \"pbrMetallicRoughness\" : {\r\n                \"baseColorFactor\" : [\r\n                    0.026959503069519997,\r\n                    0.8000000715255737,\r\n                    0.02678806707262993,\r\n                    1\r\n                ],\r\n                \"metallicFactor\" : 0,\r\n                \"roughnessFactor\" : 0.5\r\n            }\r\n        },\r\n        {\r\n            \"doubleSided\" : true,\r\n            \"name\" : \"Material-Blue\",\r\n            \"pbrMetallicRoughness\" : {\r\n                \"baseColorFactor\" : [\r\n                    0.0382981039583683,\r\n                    0.02713284268975258,\r\n                    0.8000000715255737,\r\n                    1\r\n                ],\r\n                \"metallicFactor\" : 0,\r\n                \"roughnessFactor\" : 0.5\r\n            }\r\n        }\r\n    ],\r\n    \"meshes\" : [\r\n        {\r\n            \"name\" : \"Car-Mesh\",\r\n            \"primitives\" : [\r\n                {\r\n                    \"attributes\" : {\r\n                        \"POSITION\" : 0,\r\n                        \"TEXCOORD_0\" : 1,\r\n                        \"NORMAL\" : 2\r\n                    },\r\n                    \"indices\" : 3,\r\n                    \"material\" : 0\r\n                },\r\n                {\r\n                    \"attributes\" : {\r\n                        \"POSITION\" : 4,\r\n                        \"TEXCOORD_0\" : 5,\r\n                        \"NORMAL\" : 6\r\n                    },\r\n                    \"indices\" : 3,\r\n                    \"material\" : 1\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"accessors\" : [\r\n        {\r\n            \"bufferView\" : 0,\r\n            \"componentType\" : 5126,\r\n            \"count\" : 24,\r\n            \"max\" : [\r\n                1,\r\n                1,\r\n                1\r\n            ],\r\n            \"min\" : [\r\n                -1,\r\n                -1,\r\n                -1\r\n            ],\r\n            \"type\" : \"VEC3\"\r\n        },\r\n        {\r\n            \"bufferView\" : 1,\r\n            \"componentType\" : 5126,\r\n            \"count\" : 24,\r\n            \"type\" : \"VEC2\"\r\n        },\r\n        {\r\n            \"bufferView\" : 2,\r\n            \"componentType\" : 5126,\r\n            \"count\" : 24,\r\n            \"type\" : \"VEC3\"\r\n        },\r\n        {\r\n            \"bufferView\" : 3,\r\n            \"componentType\" : 5123,\r\n            \"count\" : 36,\r\n            \"type\" : \"SCALAR\"\r\n        },\r\n        {\r\n            \"bufferView\" : 4,\r\n            \"componentType\" : 5126,\r\n            \"count\" : 24,\r\n            \"max\" : [\r\n                3.7098071575164795,\r\n                1,\r\n                1\r\n            ],\r\n            \"min\" : [\r\n                1.7098071575164795,\r\n                -1,\r\n                -1\r\n            ],\r\n            \"type\" : \"VEC3\"\r\n        },\r\n        {\r\n            \"bufferView\" : 5,\r\n            \"componentType\" : 5126,\r\n            \"count\" : 24,\r\n            \"type\" : \"VEC2\"\r\n        },\r\n        {\r\n            \"bufferView\" : 6,\r\n            \"componentType\" : 5126,\r\n            \"count\" : 24,\r\n            \"type\" : \"VEC3\"\r\n        }\r\n    ],\r\n    \"bufferViews\" : [\r\n        {\r\n            \"buffer\" : 0,\r\n            \"byteLength\" : 288,\r\n            \"byteOffset\" : 0,\r\n            \"target\" : 34962\r\n        },\r\n        {\r\n            \"buffer\" : 0,\r\n            \"byteLength\" : 192,\r\n            \"byteOffset\" : 288,\r\n            \"target\" : 34962\r\n        },\r\n        {\r\n            \"buffer\" : 0,\r\n            \"byteLength\" : 288,\r\n            \"byteOffset\" : 480,\r\n            \"target\" : 34962\r\n        },\r\n        {\r\n            \"buffer\" : 0,\r\n            \"byteLength\" : 72,\r\n            \"byteOffset\" : 768,\r\n            \"target\" : 34963\r\n        },\r\n        {\r\n            \"buffer\" : 0,\r\n            \"byteLength\" : 288,\r\n            \"byteOffset\" : 840,\r\n            \"target\" : 34962\r\n        },\r\n        {\r\n            \"buffer\" : 0,\r\n            \"byteLength\" : 192,\r\n            \"byteOffset\" : 1128,\r\n            \"target\" : 34962\r\n        },\r\n        {\r\n            \"buffer\" : 0,\r\n            \"byteLength\" : 288,\r\n            \"byteOffset\" : 1320,\r\n            \"target\" : 34962\r\n        }\r\n    ],\r\n    \"buffers\" : [\r\n        {\r\n            \"byteLength\" : 1608,\r\n            \"uri\" : \"Cube.bin\"\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\nThis is the result in JME before and after the OP's change:\r\n\r\n```\r\n\r\n1) Before\r\nScene (Node) \r\n\tCar-Mesh (Node) \r\n\t\tCar-Mesh_0 (Geometry) / Material[name=Material-Green, def=PBR Lighting, tech=null]\r\n\t\tCar-Mesh_1 (Geometry) / Material[name=Material-Blue, def=PBR Lighting, tech=null]\r\n\r\n2) After\r\nScene (Node) \r\n\tCar (Node) \r\n\t\tCar-Mesh_0 (Geometry) / Material[name=Material-Green, def=PBR Lighting, tech=null]\r\n\t\tCar-Mesh_1 (Geometry) / Material[name=Material-Blue, def=PBR Lighting, tech=null]\r\n\r\n```\r\n\r\nThe second one looks correct to me.\r\n\r\nHere is the model if you want to try: \r\n[TestGltf.zip](https://github.com/jMonkeyEngine/jmonkeyengine/files/12639880/TestGltf.zip)\r\n",
      "You are right, i was confused by the code, for multi material mesh the node tree seems correct, but for single material (one-geometry) it looks like this with the patch:\r\n\r\nsingle:\r\n```\r\nRoot Node (Node) / (0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 1.0), (1.0, 1.0, 1.0)\r\n        autoRotate (Node) / (0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 1.0), (1.0, 1.0, 1.0)\r\n                probeNode (Node) / (0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 1.0), (1.0, 1.0, 1.0)\r\n                        Scene (Node) / (0.0, -1.0, 0.0), (0.0, 0.0, 0.0, 1.0), (1.0, 1.0, 1.0)\r\n                                Cube (Geometry) / (0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 1.0), (1.0, 1.0, 1.0)\r\n                                \r\n```\r\n\r\nvs this for multi:\r\n\r\n```\r\nRoot Node (Node) / (0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 1.0), (1.0, 1.0, 1.0)\r\n        autoRotate (Node) / (0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 1.0), (1.0, 1.0, 1.0)\r\n                probeNode (Node) / (0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 1.0), (1.0, 1.0, 1.0)\r\n                        Scene (Node) / (0.0, -1.0, 0.0), (0.0, 0.0, 0.0, 1.0), (1.0, 1.0, 1.0)\r\n                                Cube (Node) / (0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 1.0), (1.0, 1.0, 1.0)\r\n                                        CubeMesh_0 (Geometry) / (0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 1.0), (1.0, 1.0, 1.0)\r\n                                        CubeMesh_1 (Geometry) / (0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 1.0), (1.0, 1.0, 1.0)\r\n```\r\n\r\n\r\nAs you can see the mesh name is lost entirely in single material meshes.\r\nI think that for consistency sake it should look like this instead:\r\n\r\nmulti;\r\n```\r\nRoot Node (Node) / (0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 1.0), (1.0, 1.0, 1.0)\r\n        autoRotate (Node) / (0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 1.0), (1.0, 1.0, 1.0)\r\n                probeNode (Node) / (0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 1.0), (1.0, 1.0, 1.0)\r\n                        Scene (Node) / (0.0, -1.0, 0.0), (0.0, 0.0, 0.0, 1.0), (1.0, 1.0, 1.0)\r\n                                Cube (Node) / (0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 1.0), (1.0, 1.0, 1.0)\r\n                                        CubeMesh (Node) / (0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 1.0), (1.0, 1.0, 1.0)\r\n                                                CubeMesh_0 (Geometry) / (0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 1.0), (1.0, 1.0, 1.0)\r\n                                                CubeMesh_1 (Geometry) / (0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 1.0), (1.0, 1.0, 1.0)\r\n```\r\n\r\nsingle:\r\n\r\n```\r\nRoot Node (Node) / (0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 1.0), (1.0, 1.0, 1.0)\r\n        autoRotate (Node) / (0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 1.0), (1.0, 1.0, 1.0)\r\n                probeNode (Node) / (0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 1.0), (1.0, 1.0, 1.0)\r\n                        Scene (Node) / (0.0, -1.0, 0.0), (0.0, 0.0, 0.0, 1.0), (1.0, 1.0, 1.0)\r\n                                Cube (Node) / (0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 1.0), (1.0, 1.0, 1.0)\r\n                                        CubeMesh (Node) / (0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 1.0), (1.0, 1.0, 1.0)\r\n                                                CubeMesh_0 (Geometry) / (0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 1.0), (1.0, 1.0, 1.0)\r\n\r\n                                                                         \r\n  ```\r\n\r\n\r\nTo get this node tree i've replaced the lines from 252 to 264  in  GltfLoader.java\r\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/2a1e87e5a8050ee4e48f3baa9abdd421918ff061/jme3-plugins/src/gltf/java/com/jme3/scene/plugins/gltf/GltfLoader.java#L252-L264\r\n\r\n with\r\n\r\n```java\r\n           Geometry[] primitives = readMeshPrimitives(meshIndex);\r\n\r\n            Node node = new Node();\r\n            for (Geometry primitive : primitives) {\r\n                node.attachChild(primitive);\r\n            }\r\n\r\n            node.setName(readMeshName(meshIndex));\r\n            \r\n            spatial = new Node();\r\n            ((Node)spatial).attachChild(node);\r\n```\r\n\r\nand line 489 \r\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/2a1e87e5a8050ee4e48f3baa9abdd421918ff061/jme3-plugins/src/gltf/java/com/jme3/scene/plugins/gltf/GltfLoader.java#L488-L490\r\n\r\nwith\r\n```\r\n                    geom.setName(name +  \"_\" + index);\r\n```\r\n\r\n\r\nThis gives a static structure to work with, that doesn't change with the content of the scene.\r\nWhat do you think?\r\n\r\nThe models i am using (simple blender cube)\r\n[TestModels.zip](https://github.com/jMonkeyEngine/jmonkeyengine/files/12640138/TestModels.zip)\r\n\r\n",
      ">As you can see the mesh name is lost entirely in single material meshes.\r\n\r\nYeah, and that is fine because in JME a mesh can not have a name anyway. If a mesh had a name in JME then we could use the gltf mesh name as well I think.\r\n\r\n>What do you think?\r\n\r\nNot sure, to me your approach unnecessarily adds redundant nodes.\r\n\r\n",
      "> > As you can see the mesh name is lost entirely in single material meshes.\r\n> \r\n> Yeah, and that is fine because in JME a mesh can not have a name anyway. If a mesh had a name in JME then we could use the gltf mesh name as well I think.\r\n\r\nYes, that was my reasoning too.  Since JME meshes don't have names, it makes sense for that information should be what gets lost on import.  Would it make sense to add a name field to the Mesh class?  For gltf at least, it would be cleaner than having the extra node.  I don't know how the FBX and ogre loaders work though.",
      "In jme the concept of blender/gltf mesh is expressed by Geometry, Mesh are at lower level and are just a collection of buffers.\r\n\r\neg. in jme you assign materials to Geometries, in blender you assign them to meshes, in gltf to primitives that are a subpart of a mesh and are loaded as geometries by the loader.\r\n\r\nI don't think this approach is redundant because it  provides a single predictable way to represent  the scene tree independently on its content. \r\n\r\n### Let's explore a common use case: i want to replace the CubeMesh with Cube2Mesh for whatever reason (lod, customization, etc..), my Cube spatial is used by my game logic (eg. has controls attached, rigidbody etc) how do i replace the mesh with the minimal change to the scene?\r\n\r\nLet's see this in code\r\n## with the proposed patch, i need a whole flowchart:\r\n\r\n![Untitled Diagram drawio(4)](https://github.com/jMonkeyEngine/jmonkeyengine/assets/4943530/89aa4079-7ef7-4e50-b835-acd92fd2201a)\r\n\r\n\r\nYou could say, just remove \"Cube\", and replace the entire node. Yes that would work, but you will need to transfer all the controls and replace the references in your app.\r\n\r\n## with my proposal:\r\n```\r\nNode parent = (Node) s;\r\nSpatial meshContainer = parent.getChild(\"CubeMesh\");\r\nmeshContainer.getParent().attachChild(cube2Mesh);\r\nmeshContainer.removeFromParent();\r\n```\r\ndone, references are not touched, no need to copy transforms or controls.",
      "I've found another corner case that is even worse:\r\n![image](https://github.com/jMonkeyEngine/jmonkeyengine/assets/4943530/fa2cf035-a4cc-475b-927a-81697933e40e)\r\n\r\nWith the proposed patch it will load like this\r\n\r\n```\r\nRoot Node (Node) / (0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 1.0), (1.0, 1.0, 1.0)\r\n        autoRotate (Node) / (0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 1.0), (1.0, 1.0, 1.0)\r\n                probeNode (Node) / (0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 1.0), (1.0, 1.0, 1.0)\r\n                        Scene (Node) / (0.0, -1.0, 0.0), (0.0, 0.0, 0.0, 1.0), (1.0, 1.0, 1.0)\r\n                                CubeParent (Node) / (0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 1.0), (1.0, 1.0, 1.0)\r\n                                        CubeMesh (Geometry) / (0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 1.0), (1.0, 1.0, 1.0)\r\n                                        Cube2 (Geometry) / (1.2840239, -2.1808097, -0.21893275), (0.0, 0.0, 0.0, 1.0), (1.0, 1.0, 1.0)\r\n                                        \r\n```\r\nSo if i want to select the first cube i will need to use getChild(\"CubeMesh\"), while if i want to select the second cube getChild(\"Cube2\") ?\r\n\r\nWith my proposal it will load like this:\r\n```\r\nRoot Node (Node) / (0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 1.0), (1.0, 1.0, 1.0)\r\n        autoRotate (Node) / (0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 1.0), (1.0, 1.0, 1.0)\r\n                probeNode (Node) / (0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 1.0), (1.0, 1.0, 1.0)\r\n                        Scene (Node) / (0.0, -1.0, 0.0), (0.0, 0.0, 0.0, 1.0), (1.0, 1.0, 1.0)\r\n                                CubeParent (Node) / (0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 1.0), (1.0, 1.0, 1.0)\r\n                                        CubeMesh (Node) / (0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 1.0), (1.0, 1.0, 1.0)\r\n                                                CubeMesh_0 (Geometry) / (0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 1.0), (1.0, 1.0, 1.0)\r\n                                        Cube2 (Node) / (1.2840239, -2.1808097, -0.21893275), (0.0, 0.0, 0.0, 1.0), (1.0, 1.0, 1.0)\r\n                                                CubeMesh2 (Node) / (0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 1.0), (1.0, 1.0, 1.0)\r\n                                                        CubeMesh2_0 (Geometry) / (0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 1.0), (1.0, 1.0, 1.0)\r\n```\r\nand i can just use getChild(\"CubeMesh\") getChild(\"CubeMesh2\") that is incidentally what i would do in blender.\r\n\r\nGltf attached \r\n[parent.zip](https://github.com/jMonkeyEngine/jmonkeyengine/files/12641131/parent.zip)\r\n",
      "Fixed by https://github.com/jMonkeyEngine/jmonkeyengine/pull/2103"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d90a14f302d393b2626",
    "number": 2069,
    "body": "This is the initial work to improve and extend the gltf support in jme.\r\nThis pr:\r\n- Fix an issue with cache poisoning when manipulating the first instance of a cached spatial\r\n- Adds the UserData loader from Simsilica and makes it the default (as expected from a jme loader)\r\n- Moves all the extensions related code to packages with their fully qualified name to make it easier to figure out which code belongs to which official or unofficial extension\r\n- Adds a new JME_speaker extension to load speaker nodes directly from blender scenes into jme (this will require an extension also on the blender side)\r\n- Makes default extension registrable statically, this allows specific modules (think about (j)bullet, minie etc) to statically register their own extension in the gltf loader.\r\n\r\nCurrently testing:\r\n- JME_physics extension automatically registered by jbullet to load rigidbodies from blender scenes (needs blender addon)",
    "head_branch": "gltf",
    "is_a_fork": true,
    "comments": [
      "@riccardobl thanks for your contribution\r\n\r\nPlease update the copyright date to 2023 on the modified classes.",
      "In general, a PR should do one thing. The scope of a PR should be narrow, addressing a single refactor, issue, or feature. See [Creating Good Pull Requests](https://sparkbox.com/foundry/creating_good_pull_requests).\r\n\r\nAccording to the description, this PR includes 3 new features, a bug fix, and major refactoring.\r\n\r\nI request that the changes be split up into multiple PRs. This will make the changes easier to understand and review.",
      "> In general, a PR should do one thing. The scope of a PR should be narrow, addressing a single refactor, issue, or feature. See [Creating Good Pull Requests](https://sparkbox.com/foundry/creating_good_pull_requests).\r\n> \r\n> According to the description, this PR includes 3 new features, a bug fix, and major refactoring.\r\n> \r\n> I request that the changes be split up into multiple PRs. This will make the changes easier to understand and review.\r\n\r\nYou are right, but since i am submitting these PRs in between projects i am doing with the engine,  i have limited time and working on multiple PRs that rely on each other is very time consuming.\r\n",
      "Another thing: package names use only lowercase letters and digits (no underscores). See [the Google Java Style Guide section 5.2.1](https://google.github.io/styleguide/javaguide.html#s5.2.1-package-names).",
      "> i am submitting these PRs in between projects i am doing with the engine, i have limited time\r\n\r\nAre you suggesting your PRs deserve special treatment because you work on other projects and have limited time?",
      "> Another thing: package names use only lowercase letters and digits (no underscores). See [the Google Java Style Guide section 5.2.1](https://google.github.io/styleguide/javaguide.html#s5.2.1-package-names).\r\n\r\nI would make an exception in this case to match their registered extension name in gltf (https://github.com/KhronosGroup/glTF/blob/main/extensions/README.md) but i don't have a strong opinion in this regard\r\n\r\n> > i am submitting these PRs in between projects i am doing with the engine, i have limited time\r\n> \r\n> Are you suggesting your PRs deserve special treatment because you work on other projects and have limited time?\r\n\r\nI am suggesting that if you want the perfect PRs we can leave them open indefinitely until i have time to follow all the rules, or we can accept my bad PRs to get features and bug fixes merged quickly as long as the code works.\r\n\r\nI am always working on a fork, so i don't have any urge to get my code merged, and besides, last time i checked i had push rights to the repo.",
      "Regarding package names, even though I do like your approach but yeah that seems to be not a standard Java package naming(?). Also as most of those extensions turn out to be a single class file anyway, I would recommend having a `gltf.ext.khr` package for all Khronos extensions, (but if you like you can also divide them like `gltf.ext.khr.light`, `gltf.ext.khr.material`, `gltf.ext.khr.texture`,....)\r\n\r\nNext, we can have a `gltf.ext.jme` package for JME extensions. Similarly, if you think a JME extension is going to have multiple related classes (which sounds unlikely to me) you can make a subpackage for that. (e.g. `gltf.ext.jme.audio`,...)\r\n\r\n",
      "Regarding PR complexity, looks like `UserDataLoader` is imported from the [JmeConvert library](https://github.com/Simsilica/JmeConvert/blob/master/src/main/java/com/simsilica/jmec/gltf/GltfExtrasLoader.java)(?),  if so, I am already using that in my project and it works just fine, so I think we can skip reviewing the functionality of that class.",
      ">Next, we can have a `gltf.ext.jme` package for JME extensions.\r\n\r\nI think we can even omit `jme` from above, so we have just `gltf.ext` for custom JME extensions and `gltf.ext.khr` for Khronos extensions. What do you think?\r\n\r\nJust my two cents!",
      "> we can leave them open indefinitely until i have time to follow all the rules, or we can accept my bad PRs to get features and bug fixes merged quickly\r\n\r\nThe goal is to do what's best for the project in the long term. Code added to the project requires maintenance, so we want PRs to be in as good shape as possible *before* they're integrated, while the burden of maintenance falls on the submittor, not the community.\r\n\r\nIf this PR is urgent for some reason, please document that reason.\r\n\r\n> besides, last time i checked i had push rights to the repo.\r\n\r\nAs do many other people. Why even bring that up? This is a discussion of proposed changes to the codebase, not a discussion of Riccardo. Let's keep the discussion as impersonal as possible.",
      "> > we can leave them open indefinitely until i have time to follow all the rules, or we can accept my bad PRs to get features and bug fixes merged quickly\r\n> \r\n> The goal is to do what's best for the project in the long term. Code added to the project requires maintenance, so we want PRs to be in as good shape as possible _before_ they're integrated, while the burden of maintenance falls on the submittor, not the community.\r\n> \r\n> If this PR is urgent for some reason, please document that reason.\r\n> \r\n> > besides, last time i checked i had push rights to the repo.\r\n> \r\n> As do many other people. Why even bring that up? This is a discussion of proposed changes to the codebase, not a discussion of Riccardo. Let's keep the discussion as impersonal as possible.\r\n\r\nDoes the size of the PR reflects on the quality of the code?\r\n\r\n> As do many other people. Why even bring that up? This is a discussion of proposed changes to the codebase, not a discussion of Riccardo. Let's keep the discussion as impersonal as possible.\r\n\r\nPretend the PR wasn't submitted and consider the single commits as if they were pushed to the master, you will see that every change has its own commit and the fact they are grouped on  a single PR by the github interface doesn't make it less true.",
      "> Does the size of the PR reflects on the quality of the code?\r\n\r\nNo."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d91a14f302d393b2627",
    "number": 2067,
    "body": "A github action workflow that applies [prettifier](https://prettier.io/) to pull requests (if needed) to automatically fix formatting issues.\r\n\r\n## Why prettifier?\r\n- It is standalone\r\n- The rules are similar to jme style but standardized (the only custom option used is tabsize=4)\r\n- It is supported by many editors and can be used as git pre commit hook\r\n- It supports many languages \r\n\r\nThe goal is to make pr integration faster by resolving all sort of formatting issues automatically, since sometimes, even with a properly configured editor it is possible to miss some. (Unless you configure your editor to format on save, but can pollute the commit since most of our code was not formatted properly from the start.).\r\n\r\nWith this workflow contributors can simply pr changes  and have github action attach a formatting commit for the changed files, only if necessary.\r\n\r\nI won't hide the fact that i am proposing this also because i am starting to believe i have developed some form of *formatting blindness*, since despite putting in 101% effort my PRs  always have formatting issues :crab: . \r\n\r\n\r\n",
    "head_branch": "autoformat",
    "is_a_fork": false,
    "comments": [
      "If there aren't objections i will merge this",
      "Go ahead and integrate it. If it causes problems, we can simply delete the workflow, right?",
      "Shall we test this in a separate branch with a dummy PR first? Just to see if it works fine before applying it on real PRs.",
      "> Go ahead and integrate it. If it causes problems, we can simply delete the workflow, right?\r\n\r\nYes\r\n\r\n\r\n\r\n> Shall we test this in a separate branch with a dummy PR first? Just to see if it works fine before applying it on real PRs.\r\n\r\nI've tested it here https://github.com/RiccardoblSandbox/jmonkeyengine-test .\r\nI increased the suggested line length to 180 (that's the same max line length of our jme_style.xml)  because it was breaking the lines too easily",
      "Do we prefer this\r\n```\r\n    public BulletAppState(\r\n        Vector3f worldMin,\r\n        Vector3f worldMax,\r\n        BroadphaseType broadphaseType\r\n    ) {\r\n```\r\nover this?\r\n\r\n```\r\npublic BulletAppState(Vector3f worldMin, Vector3f worldMax, BroadphaseType broadphaseType) {\r\n```\r\n\r\nor was that because of the line length setting you mentioned above?",
      "I think the maximum line length should be 110 characters/columns, per our preferred coding style: https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/CONTRIBUTING.md#coding-style",
      "> or was that because of the line length setting you mentioned above?\r\n\r\nThis is the formatting with line width = 110\r\n\r\nhttps://github.com/RiccardoblSandbox/jmonkeyengine-test/pull/12/commits/65454e2526be418251e3b13aa258050f377ee08c\r\n\r\n\r\n\r\n> I think the maximum line length should be 110 characters/columns, per our preferred coding style: https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/CONTRIBUTING.md#coding-style\r\n\r\nDone, it seems JME_style.xml has some errors",
      ">This is the formatting with line width = 110\r\n>https://github.com/RiccardoblSandbox/jmonkeyengine-test/commit/65454e2526be418251e3b13aa258050f377ee08c\r\n\r\nI think it looks better now, thanks.\r\n\r\nWhat was the default width used by the plugin?",
      "> > This is the formatting with line width = 110\r\n> > [RiccardoblSandbox@65454e2](https://github.com/RiccardoblSandbox/jmonkeyengine-test/commit/65454e2526be418251e3b13aa258050f377ee08c)\r\n> \r\n> I think it looks better now, thanks.\r\n> \r\n> What was the default width used by the plugin?\r\n\r\nit uses 80 ",
      "Is there any reason to retain the \"autoformat\" branch in the public repo?",
      "nope, removed.",
      "This feature was disabled at 7c20f951 (12 October 2023)."
    ],
    "commit_messages": [
      "Autoformat workflow (#2067)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d92a14f302d393b2628",
    "number": 2066,
    "body": null,
    "head_branch": "riccardobl-patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d93a14f302d393b2629",
    "number": 2065,
    "body": null,
    "head_branch": "enveq",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Implement Environment.equals() (#2065)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d94a14f302d393b262a",
    "number": 2064,
    "body": "…ndroid Gradle Plugin 4.2.0\r\n\r\nUpdate build.gradle to use default Build Tools (30.0.2) required by Android Gradle Plugin 4.2.0",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update build.gradle to use default Build Tools (30.0.2) required by Android Gradle Plugin 4.2.0 (#2064)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d95a14f302d393b262b",
    "number": 2062,
    "body": "Some fixes to the contrast adjustment filter:\r\n- Include GLSLCompat so that there is no need to have two default techniques and two fragment shaders.\r\n- Remove versions > GLSL150 from the declaration since they aren't required\r\n- add NUM_SAMPLES",
    "head_branch": "cadj",
    "is_a_fork": true,
    "comments": [
      "Perhaps related\r\nhttps://hub.jmonkeyengine.org/t/solved-error-with-contrastadjustmentfilter-in-android/46215\r\n\r\n",
      "The problem is not with the extension not being supported, it's a warning and it is expected since the #extension directive is processed before the macros.\r\n\r\nThe issue there is that the GLSL 150+ shader has an output color ( out vec4 fragColor; ) while also including GLSLCompat  that internally declares its own output color ( out highp vec4 outFragColor;  ) \r\nThe result is that there are two output variables but they are not defined as a proper multi target output.\r\n\r\nAs side effect, this patch resolves that issue as well.\r\n\r\nI think the original author misunderstood  GLSLCompat or forgot to remove it, since it exists only to upgrade the old syntax, but ContrastAdjustment15 is already using the newer shader syntax since it is written exclusively for GLSL150+, so it shouldn't  have been included in the first place.",
      "This patch has been merged with https://github.com/jMonkeyEngine/jmonkeyengine/pull/2061 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d96a14f302d393b262c",
    "number": 2061,
    "body": "This PR improves GL ES 3.0 support in jme:\r\n- add glBindVertexArray, glDeleteVertexArrays and  glGenVertexArrays\r\n- enable coreprofile  (except on Ios due to limited support) and other supported capabilities when GL ES 3.0 is used\r\n- detect webgl platforms\r\n- detect when RGB floating point draw buffers are supported vs RGBA\r\n- replace use of RGB floating attachment with RGBA when not supported\r\n- reimplement glDrawBuffer shim to workaround the limits of GL ES 3 and reproduce the exact same behavior of OpenGL (when GLSLCompat is included in shaders)\r\n- adapt all materials to explicitly support GL ES 3 and new glDrawBuffer shim.",
    "head_branch": "glesext",
    "is_a_fork": true,
    "comments": [
      "Do we need to test Android for these new changes?",
      "> Do we need to test Android for these new changes?\r\n\r\nProbably yes, before the next release at least.",
      "New issues have arisen: \r\n\r\n1. the current implementation of glDrawBuffer workaround (since not available in GL ES 3) was incomplete ( see old implementation discussion here: https://hub.jmonkeyengine.org/t/opengl-es-3-0-and-newer-on-android/41913/61 ).\r\nThe problem here is that jme allows to set the target attachment of a multi target framebuffer, this is not possible in any way in GL ES since glDrawBuffers can only enable or disable attachments but cannot change their order (eg. color0 must always draw on attachment0). My workaround uses multi target rendering and some macro tricks to define the outFragColor in GLSLCompat to output to the right attachment as per framebuffer target, basically a transparent fix for all those shaders that use GLSLCompat that requires no code change from the shader developer. All materials are updated to support this fix with the inclusion of BoundDrawBuffer param and BOUND_DRAW_BUFFER define (similar to the way we support NUM_SAMPLES of MSAA)\r\n\r\n2. All shaders langs declarations in matdefs have been reordered with the proper order\r\n\r\n3. A capability to detect if RGB float attachments (nb. without alpha) are supported (normally they aren't in standard GL ES 3 implementations) and the relevant code has been changed to use RGBA when RGB is not supported (ie filter post processor)\r\n\r\nAfter these fixes i've managed to get the accelerated env baker (from the other PR) to run on the super strict GL ES 3 implementation in WebGL 2 🫡",
      "The last commit removes the hardcoded precision from GLRenderer and puts it in the optional GLSLCompat, it also checks if highp is supported and sets to mediump if it isn't."
    ],
    "commit_messages": [
      "GL ES 3.0 megapatch (#2061)\n\n* Extend GL ES 3.0 support. Enable CoreProfile capability when using GL ES 3.0. Add WebGL caps.\r\n\r\n* Fix contrast adjustment matdef\r\n\r\n* Improve GL ->GLES compatibility: Detect if RGB float attachment is supported, implement correct glDrawBuffer shim, add explicit GLES 300 support in all materials\r\n\r\n* Allow setReadDrawBuffers in GLES 30+, add DepthTexture capability in GLES 30+\r\n\r\n* Make passing boundDrawBufferId to shaders toggleable (default true). Disable in tests\r\n\r\n* Revert \"Allow setReadDrawBuffers in GLES 30+, add DepthTexture capability in GLES 30+\"\r\n\r\nThis reverts commit d8c7e96d2937bcaa68527cb1b8171a2e11124d35.\r\n\r\n* Fix tests\r\n\r\n* Set default precision in GLSLCompat only if supported\r\n\r\n* Set highp for samplerCube and int. Do not check for GL_FRAGMENT_PRECISION_HIGH as it is not always declared despite the specs.\r\n\r\n* Fix GLES formats declaration"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d97a14f302d393b262d",
    "number": 2060,
    "body": "This PR substitutes the obligatory gson dependency in jme3-plugins with an abstraction, akin to the BufferAllocationFactory system. This change allows the developers to bind a custom JSON parser implementation through System properties as replacement for the default parser that uses GSON.\r\n\r\nThis PR introduces two new modules:\r\n\r\n- jme3-plugins-json: This module contains the abstraction layer.\r\n- jme3-plugins-json-gson: this module contains the gson implementation\r\n\r\nBoth modules are included as dependencies within jme3-plugins, to maintain backward compatibility. However, in the future, developers should be encouraged to manually add jme3-plugins-json-gson into their build.gradle files.\r\n\r\nThe goal of this PR is to improve compatibility with non-standard JVMs and platforms, since GSON is a pretty complex library that heavily relies on reflection and Java internals (such as Unsafe), and for this reason it is very hard to port on different platforms.",
    "head_branch": "json",
    "is_a_fork": true,
    "comments": [
      ">The goal of this PR is to improve compatibility with non-standard JVMs and platforms, since GSON is a pretty complex library that heavily relies on reflection and Java internals (such as Unsafe), and for this reason it is very hard to port on different platforms.\r\n\r\nHave you tried to see if GSON fails with teavm? And do you perhaps have another JSON library in mind that can be used safely with teavm on the web?",
      "> > The goal of this PR is to improve compatibility with non-standard JVMs and platforms, since GSON is a pretty complex library that heavily relies on reflection and Java internals (such as Unsafe), and for this reason it is very hard to port on different platforms.\r\n> \r\n> Have you tried to see if GSON fails with teavm? And do you perhaps have another JSON library in mind that can be used safely with teavm on the web?\r\n\r\nYes, it fails.  Luckily javascript has its own default JSON parser, so for the teavm backend it was just a matter of wrapping it in this abstraction, no external library needed.",
      "Do you think jme3-plugins-json abstraction should also expose interface for mapping JSON to/from Java objects?",
      "> @riccardobl Thanks for the PR Ricc, if you don't mind, I would like to just add some suggested changes here, on top of that, I think we need a `package-info.java` for the new packages and an example illustrating the use of this new API.\r\n\r\nThanks for the review.\r\nI've added the package-info.\r\nRegarding the examples, the goal of this pr is to make the engine compile without GSON, i am not sure if these modules will be useful outside of the core (i would consider them to be similar to the old jme3-bullet-native in scope) ",
      "> Do you think jme3-plugins-json abstraction should also expose interface for mapping JSON to/from Java objects?\r\n\r\nI don't think so, because that would be very hard to implement without using reflections or other tricks"
    ],
    "commit_messages": [
      "JSON parser abstraction. (#2060)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d98a14f302d393b262e",
    "number": 2059,
    "body": "To enhance compatibility with JVMs that deviate from standard norms and may lack complete or partial support for classloaders (such as teavm), this pull request introduces a new encapsulating class called ResourcesLoader. Functioning analogously to BufferAllocators, this addition empowers developers to specify a personalized implementation. The default implementation, named ResourcesLoaderJImpl, operates by interfacing with the classloader.\r\n\r\nThroughout the core, all instances where classloaders were used have been substituted with the utilization of ResourcesLoader, excluding specific parts in GL debug classes and jme3-networking which involve proxies and might need more careful consideration.\r\n\r\nThe methods within AssetManager that depend on ClassLoader usage have been deprecated and could potentially be marked for removal, as they are not utilized by the engine itself.",
    "head_branch": "resloader",
    "is_a_fork": true,
    "comments": [
      "Do you have an implementation of ResourceLoader that is compatible with Teavm?",
      "> Do you have an implementation of ResourceLoader that is compatible with Teavm?\r\n\r\nYes, the resource loader for teavm loads from the site root\r\n\r\n```java\r\npackage com.jme3.web.filesystem;\r\n\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.net.MalformedURLException;\r\nimport java.net.URL;\r\nimport java.nio.charset.Charset;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Enumeration;\r\nimport java.util.List;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\n\r\nimport org.teavm.jso.browser.Window;\r\n\r\nimport com.jme3.util.res.ResourcesLoaderImpl;\r\n\r\npublic class WebResourceLoaderImpl implements ResourcesLoaderImpl {\r\n    private static final Logger logger = Logger.getLogger(WebResourceLoaderImpl.class.getName());\r\n\r\n    private String getFullPath(Class<?> clazz, String path) {\r\n        String resourcePath = path;\r\n        if (clazz != null) {\r\n            String className = clazz.getName();\r\n            String classPath = className.replace('.', '/') + \".class\";\r\n            classPath = classPath.substring(0, classPath.lastIndexOf('/'));\r\n            resourcePath = classPath + \"/\" + path;\r\n        }\r\n        try {\r\n            URL baseURL = new URL(Window.current().getLocation().getFullURL());\r\n            resourcePath = new URL(baseURL, resourcePath).toString();\r\n        } catch (MalformedURLException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resourcePath;\r\n    }\r\n\r\n    @Override\r\n    public URL getResource(String path, Class<?> clazz) {\r\n        path = getFullPath(clazz, path);\r\n        logger.log(Level.FINE, \"Fetch resource {0}\", path);\r\n        try {\r\n            URL url = new URL(path);\r\n            return url;\r\n        } catch (MalformedURLException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public InputStream getResourceAsStream(String path, Class<?> clazz) {\r\n        path = getFullPath(clazz, path);\r\n        logger.log(Level.FINE, \"Fetch resource as stream {0}\", path);\r\n        try {\r\n            URL url = new URL(path);\r\n            InputStream is = url.openStream();\r\n            return is;\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public Enumeration<URL> getResources(String path, Class<?> clazz) throws IOException {\r\n        List<URL> urls = new ArrayList<URL>();\r\n        try {\r\n            String indexPath = \"/index.dat\";\r\n            logger.log(Level.FINE, \"Fetch resources index {0}\", indexPath);\r\n            URL resourcesIndex = getResource(indexPath, null);\r\n            ByteArrayOutputStream resourcesBo = new ByteArrayOutputStream();\r\n            byte[] buffer = new byte[1024];\r\n            int read = 0;\r\n            InputStream is = resourcesIndex.openStream();\r\n            while ((read = is.read(buffer)) > 0) {\r\n                resourcesBo.write(buffer, 0, read);\r\n            }\r\n            is.close();\r\n            logger.log(Level.FINE, \"Listing resources in {0}\", path);\r\n            String resources[] = new String(resourcesBo.toByteArray(), Charset.forName(\"UTF-8\")).split(\"\\n\");\r\n            for (String resource : resources) {\r\n                resource = resource.trim();\r\n                if (resource.length() > 0 && resource.startsWith(path)) {\r\n                    URL url = getResource(resource, null);\r\n                    urls.add(url);\r\n                }\r\n            }\r\n            logger.log(Level.FINE, \"Found {0} resources in {1}\", new Object[] { urls.size(), path });\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return Collections.enumeration(urls);\r\n    }\r\n\r\n}\r\n```",
      "When reviewing, I've asked myself what the actual problem/purpose here is and to me I could come up with 2-3 actual different use-cases:\r\n1. We seem to have quite some code that loads ominous .cfg files and by doing so, it doesn't even leverage the asset manager but uses class.getResourceAsStream(). This in itself may be questionable, because you have a config file, but can maybe hardly overwrite it? And if you're supposed to override it, why can't we use the AssetManager for such, perspectively?\r\n2. There are some cases that have a legitimate class loader, especially around the `Savable` interface. In order to properly deserialize, we need class instances and it looks like the class loader just tries to locate and instantiate those (instead of manually registering implementations or `Class<?>`s.\r\n3. Then there's the ClassLoader AssetLocator, probably the default for DesktopAssetManager, but do we really need to replace it with a ResourceLoader, if we could just swap in another AssetLocator?\r\n\r\nSo basically I just have the gut feeling that we could solve each of those even better, given good design/refactorings.",
      "> We seem to have quite some code that loads ominous .cfg files and by doing so, it doesn't even leverage the asset manager but uses class.getResourceAsStream(). This in itself may be questionable, because you have a config file, but can maybe hardly overwrite it? And if you're supposed to override it, why can't we use the AssetManager for such, perspectively?\r\n\r\nThese files are used to initialize the assetManager , so it doesn't exist yet at that point. Also it is a good thing they don't use the asset manage features, because they aren't assets, they don't need caching or to be overwritten by things in the asset path.\r\n\r\n\r\n> 2\\. There are some cases that have a legitimate class loader, especially around the `Savable` interface. In order to properly deserialize, we need class instances and it looks like the class loader just tries to locate and instantiate those (instead of manually registering implementations or `Class<?>`s.\r\n\r\nThis change is only related to resources in the classpath, not classes.\r\n\r\n\r\n\r\n\r\n\r\n> Then there's the ClassLoader AssetLocator, probably the default for DesktopAssetManager, but do we really need to replace it with a ResourceLoader, if we could just swap in another AssetLocator?\r\n\r\nIf the problem was only with the asset locator, i would have written a new one of my teavm implementation, but this affect various parts of the engine outside of the asset locator and the side effect of this patch is that the default classpath locator becomes automatically compatible.\r\n\r\n\r\n\r\n\r\n> So basically I just have the gut feeling that we could solve each of those even better, given good design/refactorings.\r\n\r\nMaybe, but redesigning all this would take way too much time vs this simple patch that doesn't break anything.\r\nAnd i don't think the redesign would look much better, you would need to initialize the asset locator way sooner in an hardcoded \"default\" state and then replace the configuration with the content of the cfg file. And you would have to deal with the risk of having assets replacing important configuration files"
    ],
    "commit_messages": [
      "Replace direct usage of ClassLoader with ResourcesLoader (#2059)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d99a14f302d393b262f",
    "number": 2058,
    "body": null,
    "head_branch": "nan",
    "is_a_fork": true,
    "comments": [
      "Note regarding the protected void isValidNumber(float v) methods.\r\n\r\n...because they are protected it is harder for Java to inline them but even if asserts are turned off they will be called.\r\n\r\nEither way, I wonder if it would be better if isValidNumber() simply returned true/false and then the calls are replaced with asserts... then when asserts are turned off no extra calls are made.\r\n\r\nElse, isValidNumber() should be renamed because \"is\" implies a boolean return.",
      "I've updated the pr accordingly to your suggestions.\r\nI would add the content of the invalid uniforms in the assert message eg.\r\n`assert isValidNumber(c) : \"Invalid Quaternion value: \" + c;`\r\nbut i am not sure if this can result in performance degradation even if assertions are disabled.\r\nAny thoughts?",
      "My understanding is that if assertions are disabled then the entire part after \"assert\" is removed... including the string concatenation.",
      "...and by the way, I think this kind of instrumenting is really great for those \"special times\" when it's necessary.",
      "I added the values to the assert messages",
      "If there aren't objections i will merge this",
      "Hi @riccardobl, please take a look at my revision before merging the code, there are code formatting errors, extra lines and double semicolons at the end of the instructions. Could you please correct them?",
      "> Hi @riccardobl, please take a look at my revision before merging the code, there are code formatting errors, extra lines and double semicolons at the end of the instructions. Could you please correct them?\r\n\r\nMhh i don't see your revision anywhere, but i think i've fixed the issues you pointed out, see the last commit",
      "Looks like he forgot to \"submit\" the reviews, so they won't be displayed to the public. \r\nThis also happened to me before!",
      "> Looks like he forgot to \"submit\" the reviews, so they won't be displayed to the public. This also happened to me before!\r\n\r\n@Ali-RS Correct, I have submitted the reviews which should now be visible. \r\nThanks for your patience @riccardobl . I think there is still a little something to correct ;)",
      "Done"
    ],
    "commit_messages": [
      "Fix issue #2056 . Check for NaN uniforms (#2058)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d99a14f302d393b2630",
    "number": 2054,
    "body": "One remaining issue regarding local var distance from declaration to use. \r\nPartial Implementation of #1877 ",
    "head_branch": "1877-fix-style-on-com-jme3-app",
    "is_a_fork": true,
    "comments": [
      "Thanks again for your contributions, @andygibson! "
    ],
    "commit_messages": [
      "1877: Fix style issues on jme3-core/com.jme3.app package (#2054)\n\n* 1877: Fix style issues on jme3-core/com.jme3.app package\r\n\r\nOne remaining issue regarding local var distance from declaration to\r\nuse.\r\n\r\n* Made changes as per PR comments"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d9aa14f302d393b2631",
    "number": 2053,
    "body": "Fix #2045 ",
    "head_branch": "fix-issue-2045",
    "is_a_fork": true,
    "comments": [
      "Unless there's something to discuss, I plan to self-integrate this PR in about 24 hours."
    ],
    "commit_messages": [
      "solve issue #2045 (ArmatureMask.createMask() duplicate code) (#2053)\n\n* Removed redundant for-loop in ArmatureMask.\r\n\r\n* Update javadoc."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d9ba14f302d393b2632",
    "number": 2052,
    "body": "Integer.parseInt(currentElem.getAttribute(\"key\")) can throw NumberFormatException, which is inconsistent with other parsing methods.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d9ca14f302d393b2633",
    "number": 2051,
    "body": "Prototype that seems to solve the problem ( #1982) with negative numbers being a valid object id and an indicator of whether the id/object is valid or not. If interested, I can polish it up a bit. \r\n\r\nThe changes start in NativeObject, and most of the other changes are in response to those changes. ",
    "head_branch": "1982-negative-unique-id-issue",
    "is_a_fork": true,
    "comments": [
      "This is probably the right way to resolve this issue, but it can be a breaking change for third party libraries that relies on getId() to be == INVALID_ID",
      "If this fix resolves this problem: \r\ncom.jme3.renderer.RendererException: Invalid ID (0) received when trying to create shader program. at com.jme3.renderer.opengl.GLRenderer.updateShaderData(GLRenderer.java:1595)\r\n\r\nIs there any chance, this PR makes it into 3.7 ? Because 3.6.1 is currently not usable on a Mac",
      "On behalf of the JMonkeyEngine project, I apologize for the delay and confusion.\r\n@scenemax3d is release manager for v3.7.0; the decision to include a PR or not is up to him.\r\nYou could improve the odds by responding to his review (above) and resolving the merge conflict in BufferObject.java .\r\n\r\nRegarding issue #1982, I use v3.6.1 on a Mac Mini M1 running Ventura 13.2.1 and have yet to encounter it.\r\nI'm wondering if it is specific to a particular device driver.\r\nDo you have a test that can reliably reproduce the issue on your system?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d9da14f302d393b2634",
    "number": 2046,
    "body": "Removed a redundant loop in ArmatureMask\r\n\r\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/5155f56616497a4087ffc43af53f968c565dd065/jme3-core/src/main/java/com/jme3/anim/ArmatureMask.java#L89-L96\r\n\r\nNow as:\r\n```\r\npublic static ArmatureMask createMask(Armature armature, String... joints) {\r\n    ArmatureMask mask = new ArmatureMask();\r\n    mask.addBones(armature, joints);\r\n    return mask;\r\n}\r\n```\r\nEdit: I made a mistake on my git handling, so there are more commits displayed than necessary. The only commit that matters is the last one, which negates the effects of all the others and adds this fix. :P",
    "head_branch": "anim-fix",
    "is_a_fork": true,
    "comments": [
      "I've had to close this because of a git mistake, sorry!"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d9ea14f302d393b2635",
    "number": 2044,
    "body": "* Indicate the default is 0\r\n* Ammended to explain 0 or 1 is single sampled\r\n* Might seem odd without explaining it.",
    "head_branch": "1977-fix-samples-default-javadoc",
    "is_a_fork": true,
    "comments": [
      "Unless there's further discussion, I plan to integrate this PR in about 24 hours."
    ],
    "commit_messages": [
      "1977: Fix AppSettings samples javadoc (#2044)\n\n* Indicate the default is 0\r\n* Ammended to explain 0 or 1 is single sampled\r\n* Might seem odd without it."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240d9fa14f302d393b2636",
    "number": 2043,
    "body": "This is my first pull request ever, so take it easy on me :)\r\n\r\nThe main element of this class (~~AlertArmatureMask~~ SingleLayerInfluenceMask) is the ability to check if a joint is currently being used by a higher layer before approving it for personal use via `contains(Object target)`. This can help smooth some interpolation issues that may arise between layers with looped/sequenced animations (see [here](https://hub.jmonkeyengine.org/t/solved-animation-transition-not-seamless-as-expected/46941/8) for more details on the problem).\r\n\r\nThis class also provides several helper methods to make mask creation easier.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "So is this basically a filter?  Or is it like firing off \"Hey, look at me! look at me! look at me! look at me!\" events?",
      "Yes, I guess you could call it a filter.  It's pretty much the same as ArmatureMask except it has an extra criteria for masking joints."
    ],
    "commit_messages": [
      "Adds SingleLayerInfluenceMask (#2043)\n\nChecks if a joint is currently being used by a higher layer before approving it for personal use via contains(Object target). This can help smooth some interpolation issues that may arise between layers with looped/sequenced animations"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240da0a14f302d393b2637",
    "number": 2042,
    "body": "Add checkstyle plugin to common.gradle\r\nAdd a checkstyle.xml based on google checkstyle xml with ammendments. \r\nCheckstyle errors do not fail the build since everything is marked as a warning.\r\nmodules can be refined over time as per comments in #1877.\r\n\r\nCheckstyle can be run with `./gradlew checkstyleMain` - it runs for all projects.",
    "head_branch": "1877-add-checkstyle-to-project",
    "is_a_fork": true,
    "comments": [
      "Andy, thank you for your contribution to the JMonkeyEngine project.",
      "Now that continuous tests have run, I see some changes will be required. Andy, would you be willing to do some rework on this PR?\r\n\r\n1. To avoid breaking JDK8 builds, the CheckStyle toolVersion should be rolled back to 9.3\r\n2. As it stands, the output is too overwhelming to be of use. I downloaded the archived log for the \"windows jdk17\" run, and it came to 12.3 MBytes. We should start smaller and expand coverage later, either with just a handful of Checkstyle modules (as proposed in #1877) or else just checking a subset of the project that's relatively clean (such as jme3-core/src/main/java/com/jme3/renderer, which was cleaned up by #1653). Both approaches have trade-offs.\r\n",
      "Ah hey, just saw your comments - already did the fix for 9.3 and pushed a new checkstyle.xml to go with it. \r\nI'll have a look at curtailing some of the checks, I'll just mark them with ignore if thats ok so we can re-enable them later and don't miss any.",
      "So I've got it down to about 2.2M, ignore some modules and skipping the jme3-vr and jme3-networking projects. \r\n\r\nAt this point, taking out modules is about the only way to get it down.  jme3-examples and jm3-core are the next two biggest culprits at 632K and 912K respectively. \r\n",
      "Progress!\r\nI imagine you could use the \"BeforeExecutionExclusionFileFilter\" module to limit coverage just to com/jme3/renderer ...",
      "`BeforeExecutionExclusionFileFilter` wasn't playing nicely, checkstyle favours exclusion over inclusion so makes it difficult to exclude everything but a specific set. \r\nAdding an `include` to the config means we only process that package, now we only get a very small number of errors in one 19Kb file.\r\n",
      "Its always just after you push you spot the obvious mistakes ;-)\r\n\r\nI put the `include` in, but it was only looking at java files directly under `com/jme3/renderer` I've changed it to look in packages below that. \r\nIt now produces 200Kb of content over 4 projects. I can roll this back if you want the smaller-version.\r\n",
      "The portion of the codebase that was cleaned up in #1653 was specifically just the files directly under com/jme3/renderer in the jme3-core sub-project, so expanding it to packages below that in 4 sub-projects seems to me like a step backward. But since the scope of checking is supposed to evolve over time, it's not crucial to perfect it right now. The key things are:\r\n1. you've demonstrated how the scope can be tweaked and\r\n2. you've shrunk the GitHub Actions logs down to a size that can be browsed using a web browser \r\n\r\nThat's good progress!\r\n\r\nLooking at the GitHub Actions logs, I see some CheckStyle diagnostics for code I believe conforms to our preferred coding style. For instance:\r\n```log\r\n[ant:checkstyle] [WARN] /home/runner/work/jmonkeyengine/jmonkeyengine/jme3-core/src/main/java/com/jme3/renderer/Camera.java:744:5: All overloaded methods should be placed next to each other. Placing non-overloaded methods in between overloaded methods with the same type is a violation. Previous overloaded method located at line '712'. [OverloadMethodsDeclarationOrder]\r\n```\r\nRegarding Section 3.4.2 of the Google style guide, our guidelines say \"Logical ordering of class contents is encouraged but not required.\" So I suggest removing the `OverloadMethodsDeclarationOrder` module entirely.\r\n\r\nAlso:\r\n```log\r\n[ant:checkstyle] [WARN] /home/runner/work/jmonkeyengine/jmonkeyengine/jme3-core/src/main/java/com/jme3/renderer/Camera.java:1135:26: Local variable name 'rVal' must match pattern '^[a-z]([a-z0-9][a-zA-Z0-9]*)?$'. [LocalVariableName]\r\n```\r\nSection 5.2.7 of the Google style guide says only that \"local variable names are written in lowerCamelCase\". I don't see any reason the second character can't be uppercase. I suggest modifying the pattern to `^[a-z]([a-zA-Z0-9]*)?$`\r\n\r\nAlso\r\n```log\r\n[ant:checkstyle] [WARN] /home/runner/work/jmonkeyengine/jmonkeyengine/jme3-core/src/main/java/com/jme3/renderer/Camera.java:1142:1: Comment has incorrect indentation level 0, expected is 12, indentation should be the same level as line 1,144. [CommentsIndentation]\r\n```\r\nRegarding Section 4.8.6.1 of the Google style guide, our guidelines say \"Commented-out code need not be indented at the same level as surrounding code.\" I suggest removing the `CommentsIndentation` module entirely.\r\n\r\nAlso\r\n```log\r\n[ant:checkstyle] [WARN] /home/runner/work/jmonkeyengine/jmonkeyengine/jme3-core/src/main/java/com/jme3/renderer/Camera.java:1457:45: Abbreviation in name 'viewZPos' must contain no more than '1' consecutive capital letters. [AbbreviationAsWordInName]\r\n```\r\nThe letter \"Z\" is not an abbreviation or acronym, so I think `viewZPos` is acceptable camelcase. I suggest increasing the value of the `allowedAbbreviationLength` property to `1`.\r\n\r\n\r\n\r\n\r\n",
      "I hadn't really looked too much at the actual content, just took the google config at face value with a few changes as per the project style guide. The details and scope of projects its checking can be changed over time.\r\n\r\nCould consider in future changing the max `allowedAbbreviationLength` to 3, there are a lot of RGB, VBO, EXT, GLXxxx, ARB  references in there. You can specify `allowedAbbreviations`, but it doesn't improve things much.",
      "> Could consider in future changing the max allowedAbbreviationLength to 3, there are a lot of RGB, VBO, EXT, GLXxxx, ARB references in there. You can specify allowedAbbreviations, but it doesn't improve things much.\r\n\r\nSure. But unlike the `z` in `viewZPos`, most of these references are actual abbreviations, acronyms, or initialisms that have been (incorrectly IMO) converted to camel case. (And many of them are defined in APIs we don't control, which is a whole 'nother issue!)\r\n\r\nI foresee a need for further tweaking of the Checkstyle configuration. For instance, the `VariableDeclarationUsageDistance` module is generating false positives that might actually encourage poor coding style. But such tweaking can be an ongoing project. No need to creep the scope of issue #1877 any further.\r\n\r\nThank you @andygibson for getting the ball rolling, so to speak.\r\n\r\nUnless there's further substantive discussion of this pull request, I plan to integrate it in about 96 hours."
    ],
    "commit_messages": [
      "1877: Add checkstyle to project (#2042)\n\n* 1877: Add checkstyle to project\r\n\r\nAdd checkstyle plugin to common.gradle\r\nAdd a checkstyle.xml based on google checkstyle xml with ammendments.\r\nCheckstyle errors do not fail the build, everything is marked as a\r\nwarning, can be refined over time as per comments in #1877.\r\n\r\nCheckstyle can be run with `./gradlew checkstyleMain` - it runs for all\r\nprojects.\r\n\r\n* 1877: Updated to work with Java 8\r\n\r\nWound back checkstyle version to 9.3\r\nLast good version to work out of the box with java 8\r\nRe-copied the google checkstyle config from that version too\r\nUpdated the links in the checkstyle config to the right docs url.\r\nRebuilt with Java 8 & 17 to test.\r\n\r\n* 1877: Reduce checks to limit output\r\n\r\n* Ignore some modules that produce a lot of warnings.\r\n* Increase line length to 150 so we only get the worst offenders\r\n* Reduces output by ~70% (counting main.html sizes, about 4M)\r\n\r\n* Reduced checkstyle output\r\n\r\n* Don't run checkstyle on jme3-networking and jme3-vr\r\n* These two make up about 1M of reporting\r\n* Fixed ref to checkstyle-suppressions and added a template file\r\n* Removed suppressionXPathFilter\r\n* Disabled a couple more checks.\r\n* Output is down to ~ 2.2M\r\n\r\n* 1877: Further refinement of output\r\n\r\n* Only process /com/jme3/renderer sources\r\n* Rolled back jme3-network/vr exclusion (still not processed though)\r\n* Added modules back into checkstyle config\r\n* Now gives 38 errors from 11 files within com/jme3/renderer package\r\n* BeforeExecutionExclusionFileFilter wasn't playing nicely\r\n\r\n* 1877: Fixed package filter\r\n\r\n* Realised I made a mistake on the package filter\r\n* was only pulling java classes directly under com/jme/renderer/\r\n* Ammded to include all java classes in that package\r\n* Opened up to 200Kb of errors over 4 projects\r\n\r\n* 1877: Fixed some style rules\r\n\r\n* Made style changes suggested in the PR comments"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240da1a14f302d393b2638",
    "number": 2041,
    "body": "Add a new save method that takes a flag to indicate if the file parent directories should be created.\r\n\r\nMake the current save() method default in the interface and use the new method with createDirectories true.\r\n\r\nAdded tests for JmeExport using all current implementations of it.",
    "head_branch": "1011-consistent-path-handling-on-save-file",
    "is_a_fork": true,
    "comments": [
      "Thank you for working on issue #1011. I'm busy at present and unsure when I'll get around to reviewing this.",
      "Having some unexpected slack time, I took a closer look.\r\n\r\nEven though the interface change will break existing custom exporters, this seems like a reasonable solution to #1011. (I doubt there are many custom exporters out there.)\r\n\r\nIf there's no substantive discussion in the next 96 hours, I will integrate this PR.",
      "Thank you for your contribution to JME, @andygibson !"
    ],
    "commit_messages": [
      "Issue 1011: Make JmeExport save consistent in its path handling (#2041)\n\nAdd a new save method that takes a flag to indicate if the file parent\r\ndirectories should be created.\r\n\r\nMake the current save() method default in the interface and use the new\r\nmethod with createDirectories true.\r\n\r\nAdded tests for JmeExport using all current implementations of it."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240da2a14f302d393b2639",
    "number": 2040,
    "body": "As mentioned [here](https://hub.jmonkeyengine.org/t/solved-failure-to-find-org-jmonkeyenginejar-2-9-5-after-upgrading-to-3-6-0/46838), the mvn package failed with the runtime dependency. ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Thank you for providing the fix.",
      "Unless there's something to discuss, I plan to integrate this PR in about 24 hours."
    ],
    "commit_messages": [
      "remove runtime dependency to lwjgl-platform:2.9.5 so mvn package does not fail (#2040)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240da3a14f302d393b263a",
    "number": 2038,
    "body": "This PR fixes the javadoc of the `Application#stop(boolean)` argument.",
    "head_branch": "app-stop-issue",
    "is_a_fork": true,
    "comments": [
      "Good catch, Pavl! Looks good to me.\r\n\r\n Unless there's further discussion, I will integrate this in 24 hours."
    ],
    "commit_messages": [
      "Application#stop(boolean): fix javadoc args issue (#2038)\n\n* Application#stop(boolean): fix javadoc args conditions issue\r\n\r\n* Application#stop(boolean): fix args javadoc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240da4a14f302d393b263b",
    "number": 2037,
    "body": "Resolves #2027",
    "head_branch": "2027-guard-setters-against-negative-values",
    "is_a_fork": true,
    "comments": [
      "Thanks for the PR, I will look into it soon.",
      "I don't have anything to add to this PR, however, I am not sure if this change needs a unit test class, I will leave this for the maintainers to decide.",
      "Unless there's further substantive discussion, I plan to integrate this PR in about 24 hours."
    ],
    "commit_messages": [
      "2027 - guard setters against negative values (#2037)\n\n* 2027 - guard setters against negative values\r\n\r\n* 2027 - removed space"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240da5a14f302d393b263c",
    "number": 2036,
    "body": "This modifies PR #2008 (including a partial revert) in order for it to be included in v3.6.1",
    "head_branch": "sgold/instance",
    "is_a_fork": false,
    "comments": [
      "It looks fine to me, thank you!"
    ],
    "commit_messages": [
      "InstancedGeometry:  re-implement no-arg version of updateInstances() (#2036)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240da6a14f302d393b263d",
    "number": 2035,
    "body": "This implements the suggested fix and also updates the file's copyright notice.",
    "head_branch": "sgold/issue/2034",
    "is_a_fork": false,
    "comments": [
      "Unless there's substantial discussion, I plan to integrate this PR in about 24 hours."
    ],
    "commit_messages": [
      "solve issue 2034 (serialization of ShaderNodeDefinition) (#2035)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240da7a14f302d393b263e",
    "number": 2033,
    "body": "Partial fix for this issue:\r\nhttps://github.com/jMonkeyEngine/jmonkeyengine/issues/2032",
    "head_branch": "patch-5",
    "is_a_fork": true,
    "comments": [
      "As mentioned on the forum, the long isSet is another reason there is a max of 64 entries.  I haven't looked to see if the isSet() method is actually called anywhere in JME... but it's public so maybe some app is using it somewhere even so.\r\n\r\nTo increase the max values we will have to at least refactor how isSet() works... either by adding a second isSet long or using something like BitSet to track entry usage.",
      "Based on my reading of the codebase, `isSet()` seems essential to the functionality of `DefineList`. Ryan, would you please amend this PR so that `isSet()` works for more than 64 defines?",
      "I admittedly do not think I have sufficient knowledge working with this type of bit-level coding in java, and I might not be able to make an acceptable PR without a lot of help guiding me in the right direction. I have a mild understanding of what this code is doing but never coded with many of these operators first hand so I don't feel entirely comfortable trying to fix this on my own. So I can try to work on this more if anyone is willing to offer more guidance than usual, or if its easier for a maintainer to edit this PR to fix it quicker that is okay with me as well.\r\n\r\nAt first glance, prior to making this PR, I did not notice the bitshifting code and I just naively used ctrl-f to search for the number \"64\" in that file to replace all instances of \"64 \" with \"128\" and I naively assumed that was enough to fix the issue.\r\n\r\nIf I understand the code correctly now (and please correct me if I'm wrong) it looks like the long's bit values are being used to store the define count since a long is a 64 bit variable? And I guess this ends up being more efficient and uses less memory than if you were to just store an int to represent the number of defines that are set (or am I entirely wrong? again, sorry for my lack of knowledge in this area 😕 )\r\n\r\n",
      "It's using the 64 bits to specify which defined ID is set.  bit 0 set then define ID 0 is set.  bit 1 is set then define ID 1 is set.  It's not keeping a count.  It's keeping the individual bits.  So if bit 1 is set and not bit 0 then ID 1 is set and not ID 0.\r\n\r\nJava provides a BitSet class that can be any size.  I'm not sure why that wasn't used originally.  There is a 50/50 chance that the answers is \"Author didn't think of it.\"",
      "I made an attempt to update DefineList to use BitSet instead now, let me know if anything needs fixed.\r\n\r\nThe BitSet appeared much easier to use than bitshifting multiple longs would've been, but let me know if I did anything wrong with it. I was also unsure about 3 things in particular:\r\n\r\n- The hashCode method previously used the isSet long. So for now I just made it isSet.hashCode() so it returns the hashCode of the new BitSet. \r\n- The equals method uses isSet, but the code still works now that isSet is a BitSet instead of long, so I left it alone. \r\n- I made MaxDefines 128 instead of 64. Should I raise this more or should we look into ways to let this be changed in an engine setting?",
      "Just answering the last question: I would think once we use BitSet that maybe we no longer need a \"max defines\" concept at all. I wonder if that is used for anything useful elsewhere.",
      "I did a search of \"MAX_DEFINES\" in the jmonkey repo on github, and it appears it's used in two places in the TchniqueDef class, but only to throw an error to prevent going over the previous limit due to using a long:\r\n\r\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/02a006d04e660df889141ac0329bd8ed3c5f5008/jme3-core/src/main/java/com/jme3/material/TechniqueDef.java#L425\r\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/02a006d04e660df889141ac0329bd8ed3c5f5008/jme3-core/src/main/java/com/jme3/material/TechniqueDef.java#L448\r\n\r\nSo it looks like we should be able to remove these checks and get rid of MAX_DEFINES entirely now.",
      "I tried updating the hashCode() method since it looked like some of the failed checks were related to hashCode and equals, and the equals methods looked correct from as far as I can tell. But the checks still failed it looks like. I have very little experience with the tests/checks that get done on github since this is the first and only project I've ever created PRs for, and I also have minimal experience overriding hashCode or equals in my own projects, so any guidance or advice is greatly appreciated.",
      "I suspect that the `OpaqueComparatorTest` tests are failing because the `DefineList.equals()` method is now incorrect. When the `isSet` field was a primitive type, it was fine to compare fields using `if (isSet == o.isSet) {`, but now that the field is an object, we should of course use something like `if (isSet.equals(o.isSet) {` (assuming it's never `null`).",
      "Also the copy constructor `private DefineList(DefineList original)` needs some rework, to avoid multiple `DefineList` instances sharing the same `BitSet` instance.",
      "I updated the equals method, and it looks like a null check for isSet shouldn't be necessary since isSet is prviate and final, but I could go back and add a null check if you think that is best. I also considered doing an instanceof check to make sure the object paramater in the equals method is indeed a DefineList, but I wasn't sure if that is necessary to add or not since this is mostly an internally used class and has never encountered an error from that before.\r\n\r\nAnd I also changed the copy constructor so that it clones the BitSet now. Is this enough or should I instead create a new BitSet and loop through to set the same values as the one thats being copied from?\r\n\r\nAnd of course let me know if there's anything else you see that could be done better.",
      "I don't know if we want to fix it as part of this since equals() was already broken  before... but the idiom should be:\r\n(pseudo code):\r\n```\r\nif( this == obj ) {\r\n    return true;\r\n}\r\nif( obj ==  null || obj.getClass() != getClass() ) {\r\n    return false;\r\n}\r\nDefineList other = (DefineList)obj;\r\n...do the comparison stuff... usually using Object.equals() for the non-primitive fields\r\nif( !Object.equals(isSet, other.isSet) ) {\r\n    return false;\r\n}\r\nreturn true;\r\n```",
      "I updated the equals() method as you suggested, let me know if it looks like I understood your suggestion correctly or if I messed up or should change anything else.\r\n\r\nI also am still fairly confused about a few things regarding DefineList and this PR in genera:\r\n\r\nFirst I am curious what is the reason that we are overriding the equals and hashCode method here, and what is the reason for the unit tests that are looking for a specific hash code value? Is this just to make things more optimized, and if so what is the reason that it matters in this class but not in others? Is DefineList just a very low level class that benefits from these minor optimizations? Or is the code overriding the equals() all overkill and not really necessary for things to work? (sorry if this is a naïve question, but most of my experience as a coder has been very high level stuff where minor optimizations like this are negligible, so I guess that's why I managed to get so far without learning much about all of this...)\r\n\r\nAs I mentioned earlier, overriding equals() is something I have frequently seen in other Java apps and have googled why/when to do it, but it's not something I have done in my app and it doesn't appear as though I've encountered any errors as a result (possibly a huge blunder on my end?) and anytime I google when/why to override the equals method to try to understand better, I feel like the examples I've found are very poor and overly basic, and I've never had that \"eureka\" moment where I realized I oughta go back into my own app and override a bunch of equals() method to fix everything... and this worries me since I still seem to feel like there's no reason to do so in my own app and have no apparent problems related to this, but I have come to realize that it is very common in other java apps and that worries me and makes me cast doubt on the integrity a lot of my own code now.\r\n\r\nAny insight on this stuff is greatly appreciated. ",
      "It's not an optimization; it's a correctness issue.\r\n\r\nA good rule of thumb is that if you want to use a class in a hashing context (such as in a `HashSet` or as the key in a `HashMap`) then you need to override `Object.equals()` and `Object.hashCode()`. Otherwise you risk creating 2 distinct objects that have all fields the same, yet `equals()` returns false and they have different hash codes. Does that help?\r\n\r\nIn the case of `DefineList`, it's used here: https://github.com/jMonkeyEngine/jmonkeyengine/blob/4e6a7f14086e8a0f83689d65e88eb39cc6f9f5b7/jme3-core/src/main/java/com/jme3/material/TechniqueDef.java#L147\r\n\r\nI haven't looked at the failing test(s), but I did take a quick glance at the revised `equals()` and `hashCode()` methods, and they both seem excessively complex. Since `BitSet` provides both `equals()` and `hashCode()`, you should rely on those methods. There's no need for `equals()` or `hashCode()` to examine individual bits.",
      "Yes that helps, thanks. I had always understood how equals() checks value and differs from == but somehow I never realized that you have to override that method and write the code correctly for a class to actually work that way... I thought that was just the default way it worked for all objects, but I think I see how I was mistaken now..\r\n\r\n> Otherwise you risk creating 2 distinct objects that have all fields the same, yet `equals()` returns false\r\n\r\nI think I managed to go so long without realizing this because all of the classes I've made for game objects (like npcs or items) luckily never have a situation where 2 copies of something get created with identical values. So I just never had a problem and could get by not overriding it without any issues. But I see how not overriding equals() would break things for something like Vector3f where having multiple copies with identical values is very common.\r\n\r\nDefinitely a slightly embarrassing thing for me to have have overlooked for so long. I'm primarily self taught aside from very minor schooling (my university didn't have a Software Engineering program, the best option was Computer Information Systems which taught me very little about the software side of computers unfortunately, and JME is the only real coding experience I've had since graduating a few years ago). So I frequently find that there are alot of things like this this that I never learned properly since I am limited to coding and learning by trial/error alone in my own bubble. But that's the great things about trying to make a PR to the engine, I usually learn things that I otherwise wouldn't on my own. So I appreciate all the help and patience.\r\n",
      "I reverted the hashCode() method to how I originally did it using isSet.hashCode(), I had only tried making it more complex because I thought one of the failing tests was related to an insufficient hashCod() method. So I guess I will still need insight on how to get some of those checks to pass.\r\n\r\nI also took a look at the equals() method as of my most recent update based on pspeed's suggestion, however I don't quite see how I could simplify it further. Maybe I am still misunderstanding something then 😕 ",
      "Your equals() looks fine to me.  I think maybe in all the talk of bitsets folks forget we are actually keeping the values as well.\r\n\r\nI don't know why someone wrote unit tests for the hashCode() function.  You might search around the code to see if anything is using this raw hash code for anything.  However, it may also be someone was trying to increase test coverage and did it poorly.  By pure unit test standards, the only way to unit test a hashCode() method is to check for exact values (presuming a predictable algorithm) but in almost no cases is this actually a useful test. (and I'd argue that in the cases that it IS a useful test then hashCode() is being abused somewhere.)\r\n\r\nThis particular hashCode() is stunted because it's calculating a hash from only the bitset and not the values  (rather than just using Objects.hash(isSet, values))  The only way to reasonable unit test it would be to create two different DefineLists and compare their hash codes.  In this case, if the \"only using bitset for the hash\" is desirable then we could construct the DefineList with two different sets of values (but the same positions) and see if their hash matches.\r\n\r\n...but I'm also inclined not to require that behavior because I think it was an overzealous optimization.  To know for sure would require some detailed searching of the engine to see how exactly DefineList is used everywhere.\r\n\r\n...and perhaps DefineList.equals()/hashCode() are not used directly anywhere but are used by Material.equals()/hashCode() and maybe _those_ are called often.  Some profiling might show how often these methods are called and in what context.\r\n\r\nAND: if it turns out that these methods are never called or rarely called... then this is a good lesson on how much time can be wasted when things are over-engineered without comments explaining why.",
      "> ...and perhaps DefineList.equals()/hashCode() are not used directly anywhere but are used by Material.equals()/hashCode() and maybe _those_ are called often. Some profiling might show how often these methods are called and in what context.\r\n\r\nI did a search of every occurrence of \"DefineList\" on the github repo and looked through all potential usages (DefineList had multiple occurrences across 12 files according to the github search), and it appears that the hashCode() and equals() method are never directly called anywhere in jme's codebase. \r\n\r\nI was about to go ahead and remove these unit tests, however I am wondering what is the best way to do that.\r\n\r\nI see that all but 1 failing test are in a file titled DefineListTest:\r\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/177f7d34491a933a2c5213d5be6cc2e8d6247023/jme3-core/src/test/java/com/jme3/shader/DefineListTest.java#L42\r\nCan I just remove these tests individually from that file? Or is there anywhere else I need to remove the calls to these methods as well?\r\n\r\nAnd I see one of the failing tests is in a separate test file here : \r\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/177f7d34491a933a2c5213d5be6cc2e8d6247023/jme3-core/src/test/java/com/jme3/renderer/OpaqueComparatorTest.java#L227\r\n\r\nIs that related to something I am doing wrong, or should this also be removed? It appears to be related to alot more than just the DefineList class (unlike the other failing tests) so I wonder if there is still something I need to fix in DefineList?",
      "Tests are run pretty much automatically so removing a test method is enough to remove the test.\r\n\r\nI'm ok with removing those DefineList tests as long as we are sure there isn't any funny code in Material.equals() or something that is depending on some specific behavior (unlikely).\r\n\r\nAs to the other, I'd need to know more about why it's failing to comment.  Without diving in too deeply, it seems like some code somewhere is using the hash code is a sort discriminator.  This is ok but it does mean that assumptions made in this particular test may be incorrect and the materials passed to the testSort() method need to be rearranged.",
      "> I'm ok with removing those DefineList tests as long as we are sure there isn't any funny code in Material.equals() or something that is depending on some specific behavior (unlikely).\r\n\r\nI took a look at the Material class (forgot to mention it in my previous reply) and DefineList isn't used anywhere there or in its equals() method. \r\n\r\nIt looks like the Material class also doesn't override a standard equals() method:\r\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-core/src/main/java/com/jme3/material/Material.java#L227\r\n\r\nand instead that class uses a contentEquals() with a comment saying \"    Since materials are mutable objects, implementing equals() properly is not possible, hence the name contentEquals().\" Not sure if that's relevant to this discussion though.\r\n\r\nBut regardless, I removed the 5 failing tests, and left the other 1 alone for now. \r\n    \r\n\r\n> As to the other, I'd need to know more about why it's failing to comment. Without diving in too deeply, it seems like some code somewhere is using the hash code is a sort discriminator. This is ok but it does mean that assumptions made in this particular test may be incorrect and the materials passed to the testSort() method need to be rearranged.\r\n\r\nI don't have any clue how to start going about fixing that test since I don't quite know what its doing 😆 so I may need to wait until you or someone else has time to dive in deeper to help figure out how to fix the last remaining test.",
      "I believe the test is making sure that sorting is stable (because sometimes that's important).\r\n\r\nAs such, it's probably easy enough to just see what the order difference is and change the ordering of arguments passed to testSort() so that it matches what's expected.  But I'm making assumptions because I don't even know why the test is failing exactly.",
      "I was sick for the past month so I procrastinated finishing this PR, but I finally got around to it, and the test is finally passing when I run the build locally, but it fails on github after ive uploaded it here\r\n\r\n> As such, it's probably easy enough to just see what the order difference is and change the ordering of arguments passed to testSort() so that it matches what's expected\r\n\r\nYes I was able to see the exception when I built the engine locally, and then I just kept swapping the order for each param and building until it stopped failing which (I thought) meant I had finally found the correct sort order.\r\n\r\nBut it certainly was a struggle figuring out this sort order 1 param at a time with repetitive abbreviated named DefineLists params such as \"DefVL, DefVC, DefTC, DefVCVL, DefVCVLTC\" that didn't match their unabbreviated variable name either, so that made this take 10x longer than it probably should have. Definitely not the best thing for me to have tried working on while I'm just getting over a bad head cold lol...\r\n\r\nI uploaded DefineList.java from my local branch that passed again just in case, and. I ensured the local branch I downloaded is the branch I am using for this PR titled yaRnMcDonuts:patch-5 which I downloaded after my last change, so it should be identical to this branch on github. But still the most recent build fails on github.\r\n\r\nAny ideas what could be wrong still? I could still be making a mistake but right now it looks like the failing branch I've uploaded is identical to the one that passes locally, so I don't know what else could be the issue. \r\n\r\n",
      "Tried running checks again on here, but the test still fails.\r\n\r\nSo I re-downloading this exact github branch and built with gradle in windows command prompt and the test passes and the build is successful 😕  \r\n\r\n\r\nedit:\r\n\r\nhere are 2 screenshots I took after fixing the issue when this weird behavior started, just to confirm that I indeed got the tests to pass locally: \r\n![image](https://github.com/jMonkeyEngine/jmonkeyengine/assets/1530236/49461ca2-9154-4e44-9c8a-1e67160dbec5)\r\n\r\n",
      "I've just noticed that the failure report on github is showing a new error in the sort-All test (whereas previously the only error was thrown in the test for sortDefineLists).\r\n\r\n`com.jme3.renderer.OpaqueComparatorTest > testSortByAll FAILED\r\n    java.lang.AssertionError: 1110 != 1100 for index 0\r\n        at com.jme3.renderer.OpaqueComparatorTest.testSort(OpaqueComparatorTest.java:130)\r\n        at com.jme3.renderer.OpaqueComparatorTest.testSortByAll(OpaqueComparatorTest.java:334)\r\n`\r\n\r\nSo by changing the sort order of params to be correct in the one test, I broke the order in another test. And i suspect if I fix the order for that test, it will break the order for the test I just fixed.... Which further confirms my suspicion that it is not possible to pass this test in any way now that I changed hashCode() and scrambled the exact values expected from these intertwined sort tests.\r\n\r\nAlso it would be impossible for me to try to fix both sort orders anyway now, since my local branch doesn't throw this error and says this test passes now and is perfectly fine, even though github says its not.",
      "I think we are an impasse until someone with time actually learns what these unit tests were testing and fixes them to work.  I think these tests are testing something real and something important... but I think they are doing it very BADLY.",
      "After studying `DefineListTest` more closely, I believe some of its uses of `hashCode()` are valid. In other places, however, the test author relied on an undocumented property of `DefineList.hashCode()` when they should've used `isSet()` instead.\r\n\r\n`OpaqueComparatorTest` is poorly designed and needs a rewrite, but that's way outside the scope of this PR."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240da8a14f302d393b263f",
    "number": 2031,
    "body": "Add support for multiple monitors.\r\nAdd a feature so that when a \"Full Screen\" window is created, that you can tell it which monitor to create the window on.\r\nAdd a feature so that the application can call context to get a list of monitors that OPENGL found. It returns them in an ArrayList so that the programmers can select a monitor from the list. JME will take the pos of the monitor from the arraylist to get its handle. So if you have 2 monitors, you will have 2 in the list. So to tell JME which monitor to create the window on it would be 0 or 1. The array position in the list.\r\n\r\nThe thought behind this is the program gets a list of monitors and then they can use that list in their settings for the user to select which monitor to us.\r\nSince the ID of the monitor changes between each launch, I went with the position from the arraylist that it returned. So many if user changes the order of the monitors then the program will launch on a different screen. Minor.\r\n\r\nAdded in AppSettings a way to get/set Monitor. Monitor value is used only when creating a Full Screen.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Thank you for implementing the feature for us.\r\n\r\nI don't have a multi-monitor setup myself, so it didn't occur to me that this might be wanted. I assumed it would usually be easier to create windows in the primary display and use a window manager to move them to where they're wanted. Is that not the case?\r\n\r\nI don't understand why this PR modifies `TestResizableApp`. Please explain.\r\n\r\nThere are style violations in the added files:  javadoc issues, braces missing or positioned unconventionally, 3-space indentation of code blocks, extra blank lines in `import` sections, and so on. Please review our [coding style](https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/CONTRIBUTING.md#coding-style) and revise accordingly.\r\n\r\nAlso I think the added files should have 2023 copyright dates.",
      "> I don't have a multi-monitor setup myself, so it didn't occur to me that this might be wanted. I assumed it would usually be easier to create windows in the primary display and use a window manager to move them to where they're wanted. Is that not the case?\r\n\r\nI think it is impossible in many windowing systems. This is the way to go.",
      "Do modern games usually let you select the monitor from the game settings?\r\n\r\nEdit:\r\nAlso, from a quick look at this PR seems the selected monitor will be used only when running in fullscreen while using the primary monitor for non-fullscreen modes?",
      "Yes, this is for full screen only.  You can't select a monitor for \"WINDOW\", it is forced to \"primary OS monitor\".   When doing full screen, if you don't select it will do it on primary.  If your primary is the window you want, then it is fine.  But for it to launch and then move a FULL SCREEN is not nice.  When you can cause it to launch on the correct window.\r\n\r\nI'll update the copyright.",
      "Forgot..  TestResizableMonitor was failing after creating a window in full screen when using a different monitor.\r\n\"reshape\" function was called before \"SimpleInitApp()\" was called when creating a window other than \"NULL\".  I put a check in there to not update label.   So 'txt' variable was \"NULL\" because it had not called simpleInitApp(), yet. \r\n\r\nI didn't look into way JME was calling reship before it did the initialization.   ",
      "I updated the comments.  Let me know if you find anything else.",
      "I missed the LegacyApplication update for getMonitors()",
      "As a general comment, this new API feels a little weird to me.  Having a Monitors class that is essentially just a list of monitor infos with one odd control method feels off.  Even weirder if this is ever extended to provide display information about the monitors other than \"what it is right now\".\r\n\r\nWhat I would have expected from this feature is some way to ask JME what monitors are available that returns a List of info objects... then some method to set the current monitor on the same thing I asked for the list of monitors.\r\n\r\nsomething like:\r\n```\r\nJmeSystem.getMonitorInfos() : List<MonitorInfo>\r\nJmeSystem.setCurrentMonitor(MonitorInfo)\r\n```\r\nAnd even that might be a dead-end design if we ever want to support changing things about a particular monitor (like current display settings or whatever).\r\n\r\nInstead of MonitorInfo we could have a Monitor interface with the getters (no setters necessary) then different system implementations can implement the Monitor interface as they see fit.  (An abstract version could be provided to make this easier for the system implementations that only support one display... and perhaps Display is a better name than Monitor.)\r\n\r\nSo:\r\n```\r\nJmeSystem.getAvailableDisplays() : List<Display>\r\nJmeSystem.setCurrentDisplay(Display)\r\n```\r\n\r\nRegardless of all that, a MonitorInfo class with all public fields becomes a maintenance burden forever and should be avoided.",
      "@pspeed42, \r\nI thought about just capturing the list of all the available mode that monitor support and add them to the list.   I didn't do this because when I run it on my both of my 2k monitors,  it shows the max being 800x600.   when it is 2k.   It doesn't report back (At least my monitors) accurately.  \r\nAlso, the monitor names come from Windows and even though I have Acer monitors, the driver comes up generic monitor.\r\n\r\nThe monitors do 2k 170hz on both of them, but they report is not even close.  So I thought if we listed resolution, people might think that is the only option because it doesn't report correctly.\r\n\r\nI can change the Monitor classes, I could create getter/setters  and even a interface class.  That would all be easy.\r\n\r\nDoing a setCurrentDisplay()  would be very hard to do.  The monitor selection is a \"WINDOW CREATION\"  so this is before you get into the App simpleInitApp().   So the only option to set which monitor in full screen is through the ini.  A restart of the application is require after you allow user to select a monitor.  I didn't see an LWJGL command to move monitor to another monitor, just during window creation.\r\n\r\nLet me know if someone knows something I don't and I can look into it and change it.\r\n\r\n\r\n ",
      "The point about the resolution settings is that someday the OS/drivers/etc. may fix those issues and those APIs would work like we expect... so it's better not to automatically design dead-ends into JME's API.\r\n\r\nAs to setCurrentDisplay(), I was confused by this which seemed to be essentially doing the same thing:\r\npublic void setPrimaryMonitor(int monPos)\r\n\r\nBut maybe change what I said to setPrimaryDisplay() and it makes more sense?  Maybe it should be on AppSettings?\r\n\r\nEither way, I prefer a \"request the available options\" and \"set the option I want\" API versus a \"get the available options and somehow call something on those options to set my option\"\r\n\r\nAnd having setters on MonitorInfo is probably confusing when they don't really do anything except let callers mess up the values.\r\n\r\nThanks for the work so far.  I don't mean to be picking on every thing.  I'm just trying to forestall some future maintenance burden.",
      "@pspeed42,\r\nThose things make sense,   The Monitors::setPrimaryMonitor() is misleading.  It is more \"Mark monitor as the active monitor\".   I can change it to be setActiveMonitor().  Which is more accurate.\r\n\r\nThere is no way to do a \"setPrimaryDisplay()\"  sense it is before the simpleInitApp().\r\n\r\nAll the calls to getMonitors() and such is \"AFTER\" the fact.  It only use is for programmers to get a list of monitors if they wish to use it in \"settings\" gui to list the monitor to use on \"Next\" launch.\r\n\r\nI have no problem with you making suggestions or even demands to fit JME.  I don't write JME and don't know the true layout.\r\n\r\nSo I can change\r\nMonitors:setPrimaryMonitor()  to  Monitors::setActiveMonitor().  That way if the game grabs monitors again, it will reflect the current monitor that game uses on boot and they could display that if they wish.\r\n\r\n\r\nCalling AppSettings::setMonitor()   updates the \"App Ini settings\".   The game could then capture the close and write out ini so it is updated,  or could write the ini in the gui control when it updates the monitor.\r\n\r\n\r\n\r\n\r\n",
      "The objects returned from getMonitors/Displays/Whatever should be immutable objects with no setters on them.  There should be no Monitors class as it is unnecessary.  A list is fine.  \"Monitor\" is also a limiting name since a Monitor is a Display but not all Displays are \"monitors\".\r\n\r\nWe should find a way to fix JME so that we can make platform specific queries before starting JME.  Else we end up with cases where the user never gets to see the app because the OS chose to put it on a display that isn't even turned on.\r\n\r\nSetting which display to use should be done on AppSettings.  That is the \"JME way\", I guess... but we need a platform-independent way of reliably querying the available displays (and even the available resolutions... which we currently do not have either).  That last bit is kind of a larger issue with how JME is setup.",
      "I used \"Monitor\" because that is the reference inside OPENGL.   It is called a monitor in the code.\r\n\r\nI could change everything related to \"Monitor\" to \"Display\"  to fix that idea of \"Not a Monitor\"\r\nSelecting which display to use is through \"AppSettings\",  calling setMonitor()  (change it to setDisplay).   Since it is part of the AppSettings those values can be saved and reused on launch.\r\n\r\nI have a check inside jme3-lwjgl3::LwjglWindow::createContext().   it checks if the number of the display doesn't show up in the list of available displays then use the \"primaryMonitor\" instead.\r\n\r\nNow since OPENGL lwjgl3  call to get monitors sends a new number each time that application is launched and programmers will never be able to guarantee it is the same monitor.   So if a person changed their primary monitor.  Then next time, it will open on another monitor.  We only get a list of monitor and the ID changes all the time.  So we can't determine which monitor it is.  \r\n\r\n\r\n",
      "Probably even OpenGL doesn't call it a monitor on mobile devices... but I haven't looked.\r\n\r\nIs the last paragraph new information or in response to something we were discussing?",
      "OpenGL does call it monitors.  \r\n[https://www.glfw.org/docs/3.3/group__window.html#ga3555a418df92ad53f917597fe2f64aeb](url)\r\n\r\n![image](https://github.com/jMonkeyEngine/jmonkeyengine/assets/30982580/00ab07b1-7250-4917-906e-6de8d87f12bd)\r\n",
      "The comment is related to you comments about a window opening up on a monitor that is not there anymore or turned on.  The best we could do is if you select monitor 1 (0-1)  and when game launches,  we could default it to 0.   But if you have 3 monitors 0-2 and you select 1.  Then remove your 2nd monitor, so the 3rd monitor becomes the 2nd monitor.  There is no way in code, to determine that is a different monitor now.\r\n",
      "GLFW = \"for windows\" not mobile.  So is still going to be very PC-monitor specific.  FWIW, OpenGL-ES calls it a \"surface\".",
      "Interesting,  but this is not for Android.   The only support is for PC.   I do not code for mobile and don't know enough to write something that would support mobile.\r\n\r\nBut again, I do not see support for multiple monitors in mobiles.  So this feature is basically for PC not other devices.  That is why if you call monitor functions, you get either NULL or 0, because it is not supported.",
      "What interface are you putting this method on?  I thought it was shared across all platforms JME supports and so it would be nice if it didn't have PC-specific stuff hard-coded onto it.\r\n\r\nIf you want to make some specific windows-style-os-specific new class to handle \"the window-bearing subset\" of platforms that JME supports then so be it.  Otherwise, we should code the \"all platforms\" API as if someone someday will do something other than UnsupportedOperationException for the platforms you don't develop implementations for.\r\n\r\nAs API developers, we need to think about the future.  Maybe in two years flip phones have two screens again and treat them as separate displays.\r\n\r\nThen again, as already alluded to, JME provides no way to query anything about the current display settings, available display settings, or anything prior to starting the application... and that would be a really useful thing to have and maybe IS windows-style-os-specific.",
      "> But again, I do not see support for multiple monitors in mobiles. So this feature is basically for PC not other devices.\r\n\r\nAndroid already supports [Multiple Displays](https://source.android.com/docs/core/display/multi_display/displays#more_displays), but it's a part of Android core hardware not GLES specifically, you have to be careful developing this API to build it across the JME Cross platform interface, I suggest we continue on forums.\r\n\r\nEDIT: \r\nI suggest to change `Monitor` keyword to `Display` to be more compatible with Mobile Devices supporting HDMI and everyone will be happy I guess 😁.",
      "@Scrappers-glitch,  just got to ask.  How is handling it the way Mobile devices more compatible, when desktops call it Monitors under OpenGL.   There is not a common verbiage.\r\n\r\nHow about \"screen\"  it something that is not really in either.  Desktop uses Monitor, Mobile uses Displays.\r\n\r\n",
      "Let's come at this from a different direction: why do you have such a huge problem with the word \"display\"?\r\n\r\n(Mobile calls them 'surfaces', by the way.  The trick is to come up with a word that can apply to all things that 'display' graphics... whether monitor, screen, surface, projector, laser array, HMD, whatever.)",
      "> @Scrappers-glitch, just got to ask. How is handling it the way Mobile devices more compatible, when desktops call it Monitors under OpenGL. There is not a common verbiage.\r\n\r\nDisplay is an abstract keyword, both Graphics Monitor and Screen are types of Display, that's why I suggested Display too at the first place.",
      "Give me a couple of days, life,  and I'll get it changed to display.",
      "Sorry, been away for sometime.  Work and the farm taking up all the spare time.  I just uploaded the changes to \"Devices\".\r\n\r\n",
      "I didn't mean to close this.",
      "My branch was old, and merged it to current, but not sure if I missed something.  Please let me know, and I'll fix it.",
      "What is the difference between Display and Monitor? They look copy paste to me.",
      "A Display is something capable of displaying graphics.  A Monitor is the big giant display sitting on your desk... which is by definition a subset of Display.\r\n\r\nWas this about code or the naming conversation?",
      "Did github autoformat everything again?  Going to take some extra time to review with all of the non-changes mixed in."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240da9a14f302d393b2640",
    "number": 2029,
    "body": "This PR makes PrimitiveAllocator the default buffer allocator due to a memory leak issue with AndroidNativeBufferAllocator.\r\n\r\nSee issue https://github.com/jMonkeyEngine/jmonkeyengine/issues/1990\r\n\r\nIn the below link you can find out why direct byte buffers allocated via JNI (`env->NewDirectByteBuffer()`) are not cleaned when GCed but the ones created with `ByteBuffer.allocateDirect()` are cleaned with GC. \r\n\r\nhttps://stackoverflow.com/a/35364247",
    "head_branch": "android-memory-leak",
    "is_a_fork": true,
    "comments": [
      "Unless there's something to discuss, I plan to self-integrate this PR in about 24 hours."
    ],
    "commit_messages": [
      "By default use PrimitiveAllocator on Android (#2029)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240daaa14f302d393b2641",
    "number": 2028,
    "body": "This PR adds the basic javadoc for `com.jme3.anim.tween.action.BlendableAction` class.",
    "head_branch": "blendableaction-javadoc",
    "is_a_fork": true,
    "comments": [
      "@Scrappers-glitch The PR is marked as draft? Are you still actively looking at it?",
      "> @Scrappers-glitch The PR is marked as draft? Are you still actively looking at it?\n\nYes. However, this PR is dependent upon other PRs, my plan is to get others merged first before going on with this one."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240daba14f302d393b2642",
    "number": 2026,
    "body": "The PR documents a few places where normalization is assumed.\r\n\r\nJME assumes that the local rotations of scene-graph spatials are normalized. A violation of this assumption caused the issue @yaRnMcDonuts recently reported [at the Discourse Forum/Hub](https://hub.jmonkeyengine.org/t/solved-static-rigidbodycontrol-is-wrongly-offsetting-location-of-spatial/46792).",
    "head_branch": "sgold/pr/abnormal",
    "is_a_fork": false,
    "comments": [
      "Unless there's further discussion, I plan to integrate this PR in about 24 hours.",
      "I realized that `transformVector()` and `transformInverseVector()` both use `Quaternion.rot(Vector3f, Vector3f)` and therefore make the same assumption of normality. I've added appropriate javadoc to this PR.\r\n\r\nResetting the clock, I plan to integrate this PR in 24 hours.\r\n",
      "Probably too late comment so do with it what you will...\r\n\r\nThere was once a time that someone wanted to rename \"mult\" to \"rotate\".  The ultimate issue was that Quaternion is a math concept that _can_ be used for 3D graphics but that is not necessarily it's only use.  When a Quaternion is \"normal\" then \"mult\" _can_ be used for rotation but that might not be the only reason to call Quaternion.mult in a mathematics sense.\r\n\r\nAny time we talk about rotation, then it is kind of necessary for Quaternions to be normalized and so it 100% makes sense to mention the requirement for the methods that are specifically dealing with rotations. (like the one returning a rotation matrix, etc.).  It may make less sense for the \"purely math but can be used for rotation\" ones.\r\n\r\nThat said, anyone using Quaternions for something other than rotation probably already knows this.",
      "I assume that the `Quaternion.mult()` and `multLocal()` methods involving vectors were named by analogy with `Matrix3f`. Both sets of methods serve analogous purposes: for restricted values (unit quaternions and 3x3 rotation matrices) the methods perform 3-D rotations on vectors.\r\n\r\nUnfortunately, mathematicians defined multiplication of a quaternion with a vector to suit their purposes, and that definition conflicts with what `Quaternion.mult()` actually does to a 3-D vector, namely: rotate (not multiply!) the vector. Seeing these methods named `mult()` caused me to add javadoc disclaimers at #1725, lest someone using `Quaternion` for something other than rotation be misled by the names. (Interestingly, the `mult()` methods that *don't* involve vectors *do* agree with the mathematical definition of multiplication, which only magnifies the confusion.)\r\n\r\nWhile it *seems* expedient for rotation methods to assume their inputs are normalized and (for such inputs) produce normalized outputs, it leads to subtle bugs. For instance, if you start with a normalized value and then apply enough math operations, floating-point round-off may cause the norms to diverge substantially from 1.\r\n\r\nFurthermore, naive users and buggy tools (such as the one that bit Ryan) generate unintentional non-normalized quaternions with surprising frequency.\r\n\r\nI realize the disclaimers added in this PR are unlikely to mean much to naive users. They're mainly to soothe my conscience at the lack of run-time checks.\r\n\r\nIn my own projects, I prefer to check for a normal quaternion *before* each rotation. The cost seems slight compared to the time I spend debugging issues. But such run-time checks seem contrary to the JME Way, so I have not added them here."
    ],
    "commit_messages": [
      "jme3-core:  document a few places where normalization is assumed (#2026)\n\n* jme3-core:  document a few places where normalization is assumed\r\n\r\n* Spatial:  document the assumption in setLocalRotation()\r\n\r\n* Spatial:  document the argument to setLocalTransform()\r\n\r\n* javadoc:  say \"approximately equal to 1\"\r\n\r\n* document assumptions of transformVector() and transformInverseVector()"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240daba14f302d393b2643",
    "number": 2024,
    "body": "An automated testcase is included, to detect future regressions.",
    "head_branch": "sgold/issue/2023",
    "is_a_fork": false,
    "comments": [
      "Oops! Now `LightFilterTest` is failing. The camera orientation gets set to an impossible value at line 137: look direction and up direction are the same! Based on the comments, I don't believe this was intentional, so I will alter the test.",
      "Unless there's substantial discussion, I plan to integrate this change in about 24 hours.",
      "On further consideration, it's quite possible existing apps rely on the incorrect result. Postpone this until 3.7 or 4.0 ."
    ],
    "commit_messages": [
      "solve issue #2023 (getRotationColumn() returns wrong result) (#2024)\n\n* add an automated test for issue #2023\r\n\r\n* fix issue #2023\r\n\r\n* LightFilterTest:  correct some camera orientations\r\n\r\n* update the copyright years to include 2023"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240daca14f302d393b2644",
    "number": 2022,
    "body": "This PR adds a basic javadoc for the BlendSpace class.",
    "head_branch": "blendspace-javadocs",
    "is_a_fork": true,
    "comments": [
      "Javadoc is important, and I appreciate the considerable effort that's gone into this PR. Unfortunately, it's still very confusing. @Scrappers-glitch are you willing to continue refining it?",
      "@stephengold For me, this PR is complete, you can point to the confusing and/or missing parts, please don't forget to mention why these parts are confusing and a superior format for describing these confusing parts. ",
      "@stephengold In this PR, I chose to stick to describing the behavior of the pattern used, or maybe the interaction of the API components, if you want to understand more, please use this paradigm designed by Remy (Most of this documentation is based on this paradigm, the talks on forums and [my own techdemos](https://github.com/Monkey-Droid/DBTraining/tree/master/app/src/main/java/com/scrappers/dbtraining/mainScreens/prefaceScreen/renderer/animationWrapper)): \r\n[Monkanim: new animation system in the works](https://hub.jmonkeyengine.org/t/monkanim-new-animation-system-in-the-works/36359/1)\r\n\r\nEDIT: \r\nHere are some examples of implementing new BlendSpaces in a user application: \r\n[CustomBlendAction and CustomBlendSpaces](https://github.com/Monkey-Droid/DBTraining/blob/master/app/src/main/java/com/scrappers/dbtraining/mainScreens/prefaceScreen/renderer/animationWrapper/customBlendAction/CustomBlendAction.java)\r\n",
      "Okay I am willing to refine this. @stephengold Do you recommend specific refinements to make it more simple. Maybe code samples? or more mathematical terms? any ideas so far?",
      "Figuring out why the javadoc is confusing and writing a clear explanation seems like a lot of effort. I don't want to spend more time on this PR.",
      "BlendSpace is all about a provider interface. It provides the blend weight value to blend between 2 actions. Blend weight is then used as the value of interpolation. That simple. I like to think of it from a higher perspective as an interface that enables the user to adjust the behavior of blending (a controller interface from an architectural perspective), and that blend weight value is a read-only value. It could be manipulated using the mediator `BlendSpace#setValue(...)`.",
      "For me, this PR has completed. Please let me know if there are any changes you want to add, otherwise it's ready for merging.",
      "It would be great if you consider this PR on jme-3.8 if possible. It has been a year since no one has reviewed this PR and requested any changes. I guess its complete. However, if clarification is required, I will happily try to provide.\r\n",
      "I agree it should be merged for 3.8 if possible, I must have missed this when I was looking through PRs while searching for ones like this that that are finished or suitable for the next release.\r\n\r\nI took a look at the changes and it looks good to me. But I know there's been some previous discussion, and I personally haven't used this class much yet myself (so any mistakes wouldn't stand out to me right away). \r\n\r\nSo I will wait 2 days in case anyone has any further review, and then I will merge. \r\n\r\n",
      "I would like to hear from @stephengold; as there were some conflicts about the way things got to be explained so far. In the meantime, I will update the copyright and see if anything could be added.",
      "> I would like to hear from @stephengold; as there were some conflicts about the way things got to be explained so far.\r\n\r\nAs I said a year ago, I don't want to spend any more time on this PR.",
      "I asked the AI ​​to check the javadoc for errors and rewrite it in a way that conforms to java standards. Below is the analysis of the defects identified by the AI:\r\n\r\n* Incomplete and unclear description:\r\nThe description of the interface and methods should be clearer and more detailed. For example, the description of BlendSpace should better explain the context and use of the interface.\r\n\r\n* Improper use of HTML tags:\r\nThe use of `<li>` tags within `<p>` tags is incorrect. List items should be enclosed in `<ul>` or `<ol>` tags.\r\n\r\n* Notes and warnings:\r\nNotes and warnings should be more prominent and separated from the main text to improve readability.\r\n\r\nHere is an improved version:\r\n```java\r\n/**\r\n * A provider interface that supplies a value to control the blending between\r\n * two successive actions in a {@link BlendAction}. The blending weight is a\r\n * read-only value, adjustable using the arbitrary value set during runtime.\r\n * \r\n * <p>\r\n * Blending is the process of mixing two successive animation\r\n * {@link BlendableAction}s by interpolating their transforms and applying the\r\n * result to the assigned {@link HasLocalTransform} object. The\r\n * {@link BlendSpace} provides this blending action with a blend weight value.\r\n * </p>\r\n * \r\n * <p>\r\n * The blend weight is the value used for interpolation of the target transforms\r\n * and must be in the range [0, 1].\r\n * </p>\r\n * \r\n * <p>\r\n * Different blending weight scenarios managed by {@link BlendAction}:\r\n * <ul>\r\n *   <li>0 < Blending weight < 1: Blending is executed each update among two actions. The first action uses a blend value of 1, and the second action uses the blend space weight for interpolation.</li>\r\n *   <li>Blending weight = 0: Blending hasn't started yet; only the first action is interpolated at weight = 1.</li>\r\n *   <li>Blending weight = 1: Blending is finished; only the second action continues to run at weight = 1.</li>\r\n *   <li>Negative values and values greater than 1 are not allowed (extrapolations are not allowed).</li>\r\n * </ul>\r\n * </p>\r\n * \r\n * <p>\r\n * For more details, see {@link BlendAction#doInterpolate(double)} and\r\n * {@link BlendAction#collectTransform(HasLocalTransform, Transform, float, BlendableAction)}.\r\n * </p>\r\n * \r\n * Created by Nehon.\r\n * \r\n * @see LinearBlendSpace an example of blend space implementation\r\n */\r\npublic interface BlendSpace {\r\n\r\n    /**\r\n     * Adjusts the target blend action instance that will utilize the blend weight\r\n     * value provided by this blend-space implementation.\r\n     * \r\n     * @param action the blend action instance that will utilize this blend-space (not null).\r\n     */\r\n    public void setBlendAction(BlendAction action);\r\n\r\n    /**\r\n     * Provides the blend weight value to the assigned {@link BlendAction} instance.\r\n     * This value will be used for interpolating a collection of actions'\r\n     * transformations (keyframes).\r\n     * \r\n     * @return the blending weight value in the range from 0 to 1. Negative values\r\n     *         and values above 1 are not allowed.\r\n     */\r\n    public float getWeight();\r\n\r\n    /**\r\n     * Sets an arbitrary value used for adjusting the blending weight value.\r\n     * \r\n     * @param value the value in floats.\r\n     */\r\n    public void setValue(float value);\r\n}\r\n```\r\n\r\nEdit:\r\nI don't have a strong opinion about it, but since this PR has already been rejected in the past by expert people, if you really want to integrate it, please consider making some improvements.",
      "I appreciate your comment Mr. Wyatt @capdevon. However, sometimes the AI Models introduce polished solutions which are really annoying.\r\n\r\nFor example, what is the core difference between:\r\n```java\r\n* A provider interface which provides a value {@link BlendSpace#getWeight()} to control the blending between 2 successive actions in a {@link BlendAction}.\r\n```\r\nAnd this:\r\n```java\r\nA provider interface that supplies a value to control the blending between\r\n * two successive actions in a {@link BlendAction}. \r\n```\r\nReally?\r\n\r\nI will go over them anyway, and see if there are things to add, but core changes, I don't think so.",
      "I believe @pavly-gerges did a decent job addressing some of the initial concerns that were raised. \r\n\r\nI wouldn't say that your wording was the wording I would have used in some cases, but it did seem to be understandable enough and objectively correct in your description of methods when I reviewed it. And that is the important part in my opinion.\r\n\r\nBut I also agree that the some of the suggested changes from @capdevon improve upon it even further. \r\n\r\nI'm typically skeptical of using AI for jme related things (it seems to get things wrong about jme quite a lot), but I think for javadocs it is one place where Ai can do a goodjob to help refine the word choice and make things more understandable. I wouldn't trust AI to write javadocs all on its own, but it certainly has done a good job refining and finalizing some aspects the existing javadoc that you gave it. \r\n",
      "> Really?\r\n> \r\n> I will go over them anyway, and see if there are things to add, but core changes, I don't think so.\r\n\r\nI think most of your wording is acceptable, there's only a few places where I feel that the AI generated changes offered some improvements.\r\n\r\nThe more I compare, the less big differences I see.\r\n\r\nBut, for example, 1 place that I do prefer the wordage of the AI generated javadoc would be here:\r\n\r\n` <li> The blend weight value must be in this interval [0, 1]. </li>`..\r\n\r\nThe proposed changes swap out the word \"interval\" with \"range\", and I'd say that the word \"range\" is somewhat better of a choice here. \"Interval\" is still understandable but the word \"range\" is probably a better choice of the two.\r\n\r\n",
      "@pavly-gerges Do you have plans to make any more adjustments to this PR?\r\n\r\nIf not, then I will merge it in about 24 hours.\r\n\r\nI do not think that any of the suggested wording changes are major enough to warrant holding up a PR for a basic javadoc any longer. Especially considering that there are language differences amongst jme users and english is not the first language for many, so the perceived \"best wording\" is not always going to be consistent and agreed upon. \r\n\r\nIn its current state, your javadoc is understandable and does a satisfactory job explaining the class' functionality, and I do not see any misleading or incorrect explanations of methods or variables... and ultimately it does a way better job than having no javadoc at all. And if anyone wants to improve some wording in the future, then that can always be adjusted in a future PR.\r\n",
      "> @pavly-gerges Do you have plans to make any more adjustments to this PR?\r\n\r\nI am willing to do some refinements, just for the benefit of the community. Coming up today, keep updated!",
      "For me, this is ready to be merged. Please note that, if you find anything that you would like to change, I have no problems with that; you can just change them directly before merging."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240dada14f302d393b2645",
    "number": 2020,
    "body": "This PR provides basic javadoc for the class `com.jme3.anim.tween.action.BaseAction`.",
    "head_branch": "baseaction-javadoc",
    "is_a_fork": true,
    "comments": [
      "I added some refinements and simplifications. It's ready for another review.",
      "Thanks for merging this PR. I am glad my work is appreciated. I have been working on the animation system documentation for a long time, and now preparing to maintain the API by further studying the architecture involved."
    ],
    "commit_messages": [
      "com.jme3.anim.tween.action.BaseAction: basic javadoc (#2020)\n\nProvides basic JavaDoc for the class com.jme3.anim.tween.action.BaseAction."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240daea14f302d393b2646",
    "number": 2019,
    "body": "This PR adds a basic documentation for `com.jme3.anim.tween.action.Action` class.",
    "head_branch": "action-javadoc",
    "is_a_fork": true,
    "comments": [
      "I am done with this PR, let me know if there is something else you would like to add or change.",
      "There were a lot of forum threads requiring and asking for documentation for the animation system. In this PR (and others), I wasted a lot of my time trying to make that happen, so please reward me by looking into it. Thank you!",
      "Hi Pavel,\r\nCan u please change line #152 from \"Internal use only\" to: \"Meant for internal use\" ?\r\nI can't change it myself..\r\n\r\nThanks!"
    ],
    "commit_messages": [
      "com.jme3.anim.tween.action.Action: basic javadoc (#2019)\n\nJavaDoc for com.jme3.anim.tween.action.Action"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240dafa14f302d393b2647",
    "number": 2018,
    "body": "This is a documention-only PR.  The pre-existing javadoc for `setKey()` is confusing. I started by correcting the grammar (verb agreement) and that led to a couple more substantial clarifications.",
    "head_branch": "sgold/setKey",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "CloneableSmartAsset:  clarify the setKey() javadoc (#2018)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240db0a14f302d393b2648",
    "number": 2017,
    "body": "Fix #2010",
    "head_branch": "fix-jmesurfaceview-mem-leak",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240db1a14f302d393b2649",
    "number": 2016,
    "body": "A very straightforward implementation of the missing getters.",
    "head_branch": "sgold/issue/2015",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "solve issue #2015 (Picture class lacks 2 getters)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240db2a14f302d393b264a",
    "number": 2013,
    "body": "New PullRequest as suggested in #2012",
    "head_branch": "lower-case-variables-vr",
    "is_a_fork": true,
    "comments": [
      "Thank you."
    ],
    "commit_messages": [
      "Variables should start with lower-case. (#2013)\n\nNew PullRequest as suggested in #2012\r\n\r\nCo-authored-by: Starcommander <starcommander@gmx.at>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240db3a14f302d393b264b",
    "number": 2012,
    "body": "This pull-request adds the feature for using openxr in jme3.\r\nIt is a working first implemention and some improvements are still necessary.\r\n- Moving HMD (currently only rotating)\r\n- Controllers\r\n- ~~View perspective is not correctly~~\r\n\r\nI tested it (and works) with OSVR-HMD on Debian 11 (Bullseye) with running monado-service.\r\nI also tested it (and works) with my HTC-VIVE.\r\n\r\nTo get it running:\r\n- In main function modify app settings with: `XrHmd.setRendererForSettings(appSettings);`\r\n- In simpleInitApp(): `XrHmd.initHmd(this);`\r\n- Add your stuff into rootNode\r\n- Start monado-service\r\n- Start app.",
    "head_branch": "feature-openxr",
    "is_a_fork": true,
    "comments": [
      "Given JME's staffing constraints, I worry about adding to the project's maintenance burden.\r\n\r\n + Has adding OpenXR support been discussed at the JME Hub/Forum?\r\n + Is there a good reason develop the jme3-xr library in the jmonkeyEngine repo, instead of as a separate project (like Blocks, Lemur, Minie, and ShaderBlow)?",
      "@stephengold \r\nHere is a Forum, where openxr was discussed.\r\nhttps://hub.jmonkeyengine.org/t/solved-vr-launch-title-and-icon-in-steamvr/43706/14\r\n\r\nWhen we have openvr included in jme3-vr (that needs steam binary blob \"steamvr\"), then why not openxr that is open source, and should be the successor of openvr?",
      "I think it would be a great contribution to add openxr. <s>Adding just openxr as a separate project is probably not feasible as it relies on jme-vr.</s>\r\n\r\nAt the same time I share @stephengold 's concerns. The vr package hasn't had a proper maintainer since 2015 and has relied on sporadic contributions since.\r\n\r\nI wonder if it would make sense to break it put of core to a separate project. It could still reside in the jme project, but not alongside the core packages. That way, updating it would be a little less sensitive.\r\n\r\nCommenting on the pr itself, I think proper hmd translation and controller support would be minimum requirements for it to be considered. Otherwise the use case is very limited.",
      "Integrating OpenXR to JMonkey is a good idea for me. However, i've some concerns regarding the proposed method:\r\n\r\n- jme3-vr module has been thinked in order to provide a high level abstraction of existing VR API (at the beginig OpenVR and VRAPI). Integrating OpenXR should be achieved by extending the current jme3-vr module instead of removing it and providing an OpenXR exclusive module. At this time, OpenVR and VRAPI are supported and are binded by LWJGL. Removing these functionnalities from JMonkey can be problematic for end users.\r\n\r\n- OpenXR provide Virtual Reality and Augmented Reality functionnalities. In the \"real life\" we are not offen use VR / AR at the same time so for me it is not relevant to create a new module that embed all the functionnalities. I think we could split VR / AR functionnalities within separated modules (jme3-vr, jme3-ar ?)\r\n\r\n",
      "Very cool, I will take a look at this PR properly on Friday (and can test on an occulus quest). But I would vote yes to having openXR be an engine feature rather than a seperate library. It's a fundamental capability like android launch that might then have libraries build around it to produce advanced functionality. \r\n\r\nI'm also pro this being seperate from the existing VR stuff because that was written in a very different time where there were many competing standards that needed to be abstracted over",
      ">Adding just openxr as a separate project is probably not feasible as it relies on jme-vr.\r\n\r\nFrom a quick look at this PR (in the gradle build), I do not see how the `jme3-xr` project relies on `jme3-vr`. ",
      "> > Adding just openxr as a separate project is probably not feasible as it relies on jme-vr.\r\n> \r\n> From a quick look at this PR (in the gradle build), I do not see how the `jme3-xr` project relies on `jme3-vr`.\r\n\r\nDamn. I thought I saw it was when I checked on my phone last night. Disregard that part.",
      "@Ali-RS Yes, you are right, jme3-vr is not necessary to launch an app with jme3-xr.\r\nSo, maybe jme3-xr can be a successor of jme3-vr in future.\r\nI will also still work on improvements of this project, for example controller support, and so on.",
      "I've had a play with this on an Oculus Quest 2 on steam running with over virtual desktop and it all works (or the bits you said work work, being able to rotate my eyes but not move my eyes was a weird experience 😆).\r\n\r\nFirst of all I'd like to say this is really impressive, when I tried to do this it was all so complicated I put it on the back burner.\r\n\r\nThen I want to get some context for this. I don't want to make a bunch of nit-picky comments about naming and code structure if you're presenting this as the the major lift to get the core of XR working and then we can all collaboratively work on it. I know I'm all excited now; I did the action based openVR stuff so it might make sense for me to look at actions in openXR as they seem similar (I also have a vested interest in them being implemented similarly in JME as I'll want to upgrade Tamarin to be based on OpenXR and that will be easier if it's similar). I also though don't want to step on your toes",
      "I had a go getting movement to work. I've kind of got it, there is a branch that builds on this here: https://github.com/richardTingle/jmonkeyengine/tree/openxr-withmove\r\n\r\nIt mostly works but there is something wrong with the field of view. It feels a bit like you're looking through a fish eye lens. Not sure why yet as I used the FOV reported by OpenXR",
      "> When we have openvr included in jme3-vr (that needs steam binary blob \"steamvr\"), then why not openxr that is open source, and should be the successor of openvr?\r\n\r\nFrom what I'm reading, JME will probably want to use OpenXR eventually. However, JME publishes feature releases about once per year, so developing it here means the new library probably won't be put into production until 2024. If you develop jme-xr as a separate project, you can release new versions as often as you want. Then when it's stable, we could easily  incorporate it into JME and make it an official part of the Engine.",
      "If we do want it in a seperate library I'd be happy to have it in Tamarin (as a Tamarin 2 that is only openXR and Tamarin 1 keeping legacy support for openVR) and then I'd maintain it",
      "I've been working on actions and am making a fair bit of progress. Have got basic button presses registered and working (I mention this to avoid us duplicating work). \r\n\r\nI have no idea why I'm getting the weird lensing effects when I turn my head and have given up trying to understand why (at least for now)",
      "Could you please convert this PR to a \"draft\"?\r\nThat would make it obvious that the PR isn't ready to be integrated.",
      "> Could you please convert this PR to a \"draft\"? That would make it obvious that the PR isn't ready to be integrated.\r\n\r\nYes, when I am back on Friday I will switch to draft.\r\nUnfortunately I have no access to my account currently.",
      "@richardTingle\r\nYou made some interesting progress regarding **actions** and some little changes in **hmd-moving**\r\nHow would you suggest, we should continue the work?\r\nI would really like to see **jme3-xr** in next release of **jmonkeyengine** :wink:",
      "> @richardTingle You made some interesting progress regarding **actions** and some little changes in **hmd-moving** How would you suggest, we should continue the work? I would really like to see **jme3-xr** in next release of **jmonkeyengine** 😉\r\n\r\n@starcommander yes, actions are going well, I have basic button presses and haptics working. Getting hand skeletons and hand poses working next; then I'll try to get tamarin's bound hands and grab interactions working with it. I much prefer openXR's approach to actions; suggested bindings specified in code, rather than openVRs manifest file that must be specified by an absolute path. \r\n\r\nI found a method to get openXR to suggest eye positions and angles which is what I used in that hmd change. \r\n\r\nOn camera stuff I'm much less good, are you happy to tackle that? I couldn't get to the bottom of the lensing effects I was seeing. Do you see that too? That if you look directly at something it's in the right place but as you move your head it seems to move.\r\n\r\nI'm fairly relaxed on it being a jme3-xr or incorporated into Tamarin (im less keen on a non Tamarin non jme library but thats just me being selfish as Tamarin is my library so if other people want that I'll go with the flow). 2024 does sound like a long time to wait though; that said an OpenVr to OpenXR migration looks like it would be quite easy for existing projects. I will at the very least want to keep the more opinionated bound hand, grab and lemur support within Tamarin.",
      "> I found a method to get openXR to suggest eye positions and angles which is what I used in that hmd change.\r\n> \r\n> On camera stuff I'm much less good, are you happy to tackle that? I couldn't get to the bottom of the lensing effects I was seeing. Do you see that too? That if you look directly at something it's in the right place but as you move your head it seems to move.\r\n\r\nWhen you found a method, then where do you use it?\r\nI only see changes, where you just removed the rotation+distance code.\r\nSo, I also tested your modifications:\r\n- No eye-rotation/eye-distance, so I can only see the same on left and right eye\r\n- Moving HMD does still not work (does nothing)\r\n\r\nRegarding the \"lensing-effect\" you mentioned:\r\n- I think I can see it now, since the fieldOfView is now set to a value, that makes a better sense.\r\n- But it has nothing to do with moving HMD, instead it appears when **rotating** the HMD, right?",
      "@Starcommander That's odd. I definitely can move my head and the cameras move (and closing and opening alternating eyes gives different angles on scene, as you'd expect. This is all on the [openxr-actions](https://github.com/richardTingle/jmonkeyengine/tree/openxr-actions) branch. \r\n\r\nAnd in [HelloOpenXRGL](https://github.com/richardTingle/jmonkeyengine/blob/openxr-actions/jme3-xr/src/main/java/com/jme3/system/lwjgl/openxr/HelloOpenXRGL.java#L847) it sets the position and rotation for each eye\r\n\r\n```\r\n        viewPos.set(pos.x(), pos.y(), -pos.z());\r\n        viewRot.set(orientation.x(), orientation.y(), -orientation.z(), orientation.w());\r\n        \r\n        Eye eye = viewIndex == 0 ? xrHmd.getLeftEye() : xrHmd.getRightEye();\r\n\r\n        eye.setRotation(viewRot.inverse());\r\n        eye.setPosition(viewPos);\r\n```\r\n\r\nI'm not very happy with those coordinate transformations, as JME and OpenXR are supposed to have the same coordinate system. I might try putting in the observer (the reference node from OpenVR implementation) and see if I can use that instead to get consistent directions with the axes.\r\n\r\n> But it has nothing to do with moving HMD, instead it appears when rotating the HMD, right?\r\n\r\nTrue, its when you rotate your head that the lensing becomes apparent.\r\n\r\nThis is the test application I have been using (It only has suggested bindings for Oculus because that's what I've been using to test)\r\n\r\n```\r\npublic class XRTestMain extends SimpleApplication{\r\n\r\n    public static void main(String[] args){\r\n\r\n        XRTestMain app = new XRTestMain();\r\n        AppSettings settings = new AppSettings(true);\r\n        XrHmd.setRendererForSettings(settings);\r\n        app.setSettings(settings);\r\n        app.start();\r\n    }\r\n\r\n    @Override\r\n    public void simpleInitApp() {\r\n        XrHmd.initHmd(this);\r\n\r\n        for(int i = 0; i < 5; i++){\r\n            Box b = new Box(0.1f, 0.1f, 0.1f);\r\n            Geometry geom = new Geometry(\"Box\", b);\r\n            Material mat = new Material(assetManager,\r\n                    \"Common/MatDefs/Light/Lighting.j3md\");\r\n            geom.setMaterial(mat);\r\n            geom.setLocalTranslation(i,0,0);\r\n            rootNode.attachChild(geom);\r\n        }\r\n        for(int i = 1; i < 5; i++){\r\n            Box b = new Box(0.05f, 0.1f, 0.1f);\r\n            Geometry geom = new Geometry(\"Box\", b);\r\n            Material mat = new Material(assetManager,\r\n                    \"Common/MatDefs/Light/Lighting.j3md\");\r\n            geom.setMaterial(mat);\r\n            geom.setLocalTranslation(0,i,0);\r\n            rootNode.attachChild(geom);\r\n        }\r\n        for(int i = 1; i < 5; i++){\r\n            Box b = new Box(0.1f, 0.1f, 0.1f);\r\n            Geometry geom = new Geometry(\"Box\", b);\r\n            Material mat = new Material(assetManager,\r\n                    \"Common/MatDefs/Light/Lighting.j3md\");\r\n            geom.setMaterial(mat);\r\n            geom.setLocalTranslation(0,0,i);\r\n            rootNode.attachChild(geom);\r\n        }\r\n\r\n        rootNode.attachChild(checkerboardFloor(assetManager));\r\n\r\n        DirectionalLight directionalLight = new DirectionalLight(new Vector3f(0.4f,-0.3f,0.6f).normalizeLocal());\r\n        AmbientLight al = new AmbientLight();\r\n        al.setColor(ColorRGBA.White.mult(0.3f));\r\n        rootNode.addLight(al);\r\n        rootNode.addLight(directionalLight);\r\n    }\r\n\r\n    boolean started = false;\r\n\r\n    @Override\r\n    public void simpleUpdate(float tpf) {\r\n        OpenXRActionState state = getStateManager().getState(OpenXRActionState.ID, OpenXRActionState.class);\r\n\r\n        if (!started) {\r\n            Action teleport = Action.builder()\r\n                    .actionName(\"teleport\")\r\n                    .translatedName(\"teleportTranslation\")\r\n                    .actionType(ActionType.BOOLEAN)\r\n                    .withSuggestedBinding(OculusTouchController.PROFILE, OculusTouchController.pathBuilder().leftHand().xClick())\r\n                    .build();\r\n\r\n\r\n            Action trigger = Action.builder()\r\n                    .actionName(\"fire\")\r\n                    .translatedName(\"fireTranslation\")\r\n                    .actionType(ActionType.BOOLEAN)\r\n                    .withSuggestedBinding(OculusTouchController.PROFILE, OculusTouchController.pathBuilder().leftHand().triggerValue())\r\n                    .withSuggestedBinding(OculusTouchController.PROFILE, OculusTouchController.pathBuilder().rightHand().triggerValue())\r\n                    .build();\r\n\r\n            Action haptic = Action.builder()\r\n                    .actionName(\"haptic\")\r\n                    .translatedName(\"haptic\")\r\n                    .actionType(ActionType.HAPTIC)\r\n                    .withSuggestAllKnownHapticBindings()\r\n                    .build();\r\n\r\n            Action pose = Action.builder()\r\n                    .actionName(\"pose\")\r\n                    .translatedName(\"pose\")\r\n                    .actionType(ActionType.POSE)\r\n                    .withSuggestAllKnownGripPoseBindings()\r\n                    .build();\r\n\r\n            ActionSet testActionSet = ActionSet.builder()\r\n                    .name(\"test\")\r\n                    .translatedName(\"testTranslation\")\r\n                    .withAction(teleport)\r\n                    .withAction(trigger)\r\n                    .withAction(haptic)\r\n                    .withAction(pose)\r\n                    .build();\r\n\r\n            ActionManifest manifest = ActionManifest.builder()\r\n                    .withActionSet(testActionSet)\r\n                    .build();\r\n\r\n\r\n            state.registerActions(manifest, \"test\");\r\n\r\n\r\n            started = true;\r\n        }else{\r\n            {\r\n                BooleanActionState booleanActionState = state.getBooleanActionState(\"test\", \"teleport\", null);\r\n                if(booleanActionState.hasChanged()){\r\n                    System.out.println(booleanActionState.getState());\r\n                }\r\n            }\r\n            {\r\n                BooleanActionState booleanActionState = state.getBooleanActionState(\"test\", \"fire\", null);\r\n                if(booleanActionState.hasChanged()){\r\n                    System.out.println(\"fire\"+ booleanActionState.getState());\r\n                }\r\n            }\r\n            for(HandSide handSide : HandSide.values()){\r\n                BooleanActionState booleanActionState = state.getBooleanActionState(\"test\", \"fire\", handSide.restrictToInputString);\r\n                if(booleanActionState.hasChanged()){\r\n                    System.out.println(\"fire \" + handSide + booleanActionState.getState());\r\n                    state.triggerHapticAction(\"test\", \"haptic\", 0.1f, 50, 0.2f, handSide.restrictToInputString);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static Geometry checkerboardFloor(AssetManager assetManager){\r\n        Quad floorQuad = new Quad(10,10);\r\n        Geometry floor = new Geometry(\"floor\", floorQuad);\r\n\r\n        Texture floorTexture = assetManager.loadTexture(\"Textures/checkerBoard.png\");\r\n        floorTexture.setMagFilter(Texture.MagFilter.Nearest);\r\n        Material mat = new Material(assetManager,\"Common/MatDefs/Misc/Unshaded.j3md\");\r\n        mat.setTexture(\"ColorMap\", floorTexture);\r\n        mat.getAdditionalRenderState().setFaceCullMode(RenderState.FaceCullMode.Off);\r\n\r\n        floor.setMaterial(mat);\r\n        Quaternion floorRotate = new Quaternion();\r\n        floorRotate.fromAngleAxis(-FastMath.HALF_PI, Vector3f.UNIT_X);\r\n        floor.setLocalRotation(floorRotate);\r\n        floor.setLocalTranslation(-5,-1,5);\r\n\r\n        return floor;\r\n    }\r\n}\r\n```\r\n\r\n\r\nThere is definitely something wrong with the scene, the boxes seem like they are being looked at from the inside\r\n",
      "I've got hand skeletons more or less working. Weirdly they are mirror images (So the left hand has a right hand and vice versa). Might be more coordinate incompatibilities between JME and OpenXR.\r\n\r\nThis shows the hand joints (each cube is a joint), the large green cube is the overall pose location\r\n\r\n![image](https://github.com/jMonkeyEngine/jmonkeyengine/assets/6330028/2856145b-43c1-41b7-9d54-d7959a5b966d)\r\n\r\nI don't want to go too much further without getting the cameras sorted out (especially given the coordinate transformations that seem to be being needed). Do you mind if we look at that in parallel and see what we both find?\r\n",
      "I've asked a question about the lensing at https://hub.jmonkeyengine.org/t/openxr-vr-rendering-cameras-into-eyes/46837",
      "@richardTingle I found out, why we see the boxes from inside.\r\nSee at HelloOpenXRGL.java: **glFrontFace(GL_CW);** //Clockwise\r\nThis should be: **glFrontFace(GL_CCW);** //Counter-Clockwise as in jme3\r\nI will commit this modification now.",
      "@Starcommander Nice! I bet that was why the hands were showing mirror imaged. I should be able to remove a bunch of nasty fudge factors from the actions stuff now which will put me in a much better place for getting tamarin hands working.",
      "@richardTingle: Hint: You have to disable GL_CULL_FACE in HelloOpenXRGL.java.\nOtherwise you will have a black screen, as offGeo is not rendered.\n\nAm 18. Juni 2023 13:54:42 MESZ schrieb richardTingle ***@***.***>:\n>@Starcommander Nice! I bet that was why the hands were showing mirror imaged. I should be able to remove a bunch of nasty fudge factors from the actions stuff now which will put me in a much better place for getting tamarin hands working.\n>\n>-- \n>Reply to this email directly or view it on GitHub:\n>https://github.com/jMonkeyEngine/jmonkeyengine/pull/2012#issuecomment-1596116618\n>You are receiving this because you commented.\n>\n>Message ID: ***@***.***>",
      "What's the status of this PR? Is this still a work in progress, or has it stalled out?",
      "I tried to figure out where the lensing effect was coming from, but in the end I gave up. I think to solve that I'd have to start from scratch to really understand what's going on. I'm not actively working on it, not sure if @Starcommander2 is",
      "Is still work in progress.\r\nLast time i fixed the issue, that we see the boxes from inside.\r\n\r\nAlso I am very interested in the configuration (Hardware, OS, xr-runtime) that @richardTingle uses.\r\nBecause I have moving not working currently, where it works for richardTingle.\r\nSeems there is a difference in xr-runtime, where I use monado-service on Debian11.",
      "I'm on and Oculus Quest 2, over virtual desktop to a windows 10 PC using Steam VR as my xr-runtime",
      "I have had another go at this. I started again from the [openXR HelloOpenXRGL example](https://github.com/knokko/lwjgl3/blob/origin/fix-xr-gl-sample/modules/samples/src/test/java/org/lwjgl/demo/openxr/HelloOpenXRGL.java) making sure I understood what it was doing but taking what we learned from this attempt as well. \r\n\r\nI think I've solved it this time. I found why I was getting lensing effects; the OpenXR runtime was requesting an asymmetrical field of view (with angleLeft != angleRight) but I was using the standard camera#setFrustumPerspective which doesn't support asymmetrical field of view but when I instead calculated a projection matrix and used camera#setProjectionMatrix it stopped lensing. It makes sense to me now that @Starcommander didn't see the lensing as presumably your headset didn't request an asymmetrical field of view (or al least not so heavily asymmetric) and so the problem didn't occur for you.\r\n\r\nWe were talking before about whether this should be in JMonkey proper or in a library. I did my attempt in a [tamarin 2.x branch](https://github.com/oneMillionWorlds/Tamarin/tree/2.x). Are we ok with that as an approach @Starcommander & @stephengold ?\r\n\r\nMy approach adopts the existing JMonkey OpenGL context rather than creating its own which means it can be a pure app state attached \"whenever\" in the applications running process rather than needing to be booted up before JMonkey.\r\n\r\nAn ultra minimal example application would look like this\r\n\r\n```\r\npublic class MinimalOpenXr extends SimpleApplication {\r\n    public static void main(String[] args) {\r\n        AppSettings settings = new AppSettings(true);\r\n        settings.put(\"Renderer\", AppSettings.LWJGL_OPENGL45);\r\n        MinimalOpenXr app = new MinimalOpenXr();\r\n        app.setSettings(settings);\r\n        app.start();\r\n    }\r\n\r\n    @Override\r\n    public void simpleInitApp(){ \r\n\r\n        getStateManager().attach(new XrAppState());\r\n        // below is optional to get actions working (including hand bones). A manifest needs to be created to describe the available actions\r\n        getStateManager().attach(new OpenXrActionState(manifest(), ActionSets.TEST_SET));\r\n\r\n        Geometry geom = new Geometry(\"Box\", new Box(1, 1, 1)); \r\n        Material mat = new Material(assetManager, \"Common/MatDefs/Misc/Unshaded.j3md\");\r\n        mat.setColor(\"Color\", ColorRGBA.Blue); \r\n        geom.setMaterial(mat);\r\n        geom.setLocalTranslation(new Vector3f(3,0,0));\r\n        rootNode.attachChild(geom);  \r\n    }\r\n}\r\n```\r\n\r\nI already have these things working:\r\n\r\n- Non distorted visuals\r\n- Cameras tracking headset position\r\n- Button press actions\r\n- Hand Pose actions (aka hand positions)\r\n- Hand Bone positions\r\n\r\nI am now working on these\r\n- Moving the observer (aka moving the offset between where the player is in the real world to where in the virtual world - teleporting etc)\r\n- Getting the hand models to pair correctly to the bones. The OpenXR bones seem slightly different to the OpenXR ones so despite already having the bone positions this doesn't seem to immediately give me working hand models. I always thought the OpenVR bones were eccentric so if openXR has fixed this I think that's fine and I'll update my model's bones.\r\n\r\nOnce I get those working I'll start updating the TamarinTestBed examples to use this. Once that all works we'll be approaching parity with OpenVR\r\n",
      "> We were talking before about whether this should be in JMonkey proper or in a library. I did my attempt in a [tamarin 2.x branch](https://github.com/oneMillionWorlds/Tamarin/tree/2.x). Are we ok with that as an approach @Starcommander & @stephengold ?\r\n\r\nAs far as I'm concerned, the decision whether to be an Engine library or a 3rd-party library is up to you. I see a lot of advantages to being a 3rd-party library, especially if the codebase is changing rapidly. But in principle I have no objection to making jme3-xr part of the Engine.\r\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240db4a14f302d393b264c",
    "number": 2009,
    "body": "Solves #2011 \r\n\r\nThis PR is based on the JME hub thread :\r\n[this](https://hub.jmonkeyengine.org/t/shadow-maybe-failed-in-gles2-and-appsetting-failed-to-choose-gl-version/46759/2#:~:text=Contributor-,2,choose%20version%20below%203.2%3A%0Asee%20this%20in%20stackoverflow%20and%20GLFW%20guide,-GLFW_OPENGL_PROFILE**%20specifies%20which)\r\n\r\nIt added a if branch to set GLFW to GLFW_OPENGL_ANY_PROFILE for there is no CORE-PROFILE below 3.2",
    "head_branch": "Appseting_setRenderer_fix",
    "is_a_fork": true,
    "comments": [
      "@aspenyoung79 thanks for your contribution! \r\n\r\nI can reproduce the crash when using  `AppSettings.LWJGL_OPENGL30` and `AppSettings.LWJGL_OPENGL31` renderers.\r\n\r\n```\r\nSEVERE: Context profiles are only defined for OpenGL version 3.2 and above\r\njava.lang.Exception: Context profiles are only defined for OpenGL version 3.2 and above\r\n\tat com.jme3.system.lwjgl.LwjglWindow$1.invoke(LwjglWindow.java:235)\r\n\tat org.lwjgl.glfw.GLFWErrorCallbackI.callback(GLFWErrorCallbackI.java:43)\r\n\tat org.lwjgl.system.JNI.invokePPPP(Native Method)\r\n\tat org.lwjgl.glfw.GLFW.nglfwCreateWindow(GLFW.java:2024)\r\n\tat org.lwjgl.glfw.GLFW.glfwCreateWindow(GLFW.java:2197)\r\n\tat com.jme3.system.lwjgl.LwjglWindow.createContext(LwjglWindow.java:300)\r\n\tat com.jme3.system.lwjgl.LwjglWindow.initInThread(LwjglWindow.java:588)\r\n\tat com.jme3.system.lwjgl.LwjglWindow.run(LwjglWindow.java:710)\r\n\tat java.lang.Thread.run(Thread.java:750)\r\n\r\n\r\n``` \r\nand confirmed that using \r\n```\r\nglfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_ANY_PROFILE);\r\n```\r\nas documented on GLFW docs makes it work like you said.\r\n\r\n>GLFW_OPENGL_PROFILE specifies which OpenGL profile to create the context for. Possible values are one of GLFW_OPENGL_CORE_PROFILE or GLFW_OPENGL_COMPAT_PROFILE, or GLFW_OPENGL_ANY_PROFILE to not request a specific profile. If requesting an OpenGL version below 3.2, GLFW_OPENGL_ANY_PROFILE must be used. If OpenGL ES is requested, this hint is ignored.\r\n\r\n\r\nPlease revert your changes and instead apply them in the below lines:\r\n\r\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/145d043589ee573284ed24d4f7902e17f0b4634c/jme3-lwjgl3/src/main/java/com/jme3/system/lwjgl/LwjglWindow.java#L89-L96\r\n\r\nlike this:\r\n\r\n```\r\n        RENDER_CONFIGS.put(AppSettings.LWJGL_OPENGL30, () -> {\r\n            // Based on GLFW docs for OpenGL version below 3.2,\r\n            // GLFW_OPENGL_ANY_PROFILE must be used.\r\n            glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_ANY_PROFILE);\r\n            glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);\r\n            glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 0);\r\n        });\r\n        RENDER_CONFIGS.put(AppSettings.LWJGL_OPENGL31, () -> {\r\n            // Based on GLFW docs for OpenGL version below 3.2,\r\n            // GLFW_OPENGL_ANY_PROFILE must be used.\r\n            glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_ANY_PROFILE);\r\n            glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);\r\n            glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 1);\r\n        });\r\n```",
      "I tested and verified the fix in the current v3.6.1 release candidate (Git hash=e688861). This is so cool!\r\nThank you @aspenyoung79 and @Ali-RS ."
    ],
    "commit_messages": [
      "solve issue #2011 (app crashes when using OpenGL version 3.0 and 3.1 with LWJGL 3) (#2009)\n\n* fix system crush issue when set desktop AppSetting.setRenderer below 3.2\r\n\r\n* Revert \"fix system crush issue when set desktop AppSetting.setRenderer below 3.2\"\r\n\r\nThis reverts commit 11b7c9e71c239ff239ef71a2c4c48d0420f0c489.\r\n\r\n* fix system crush issue when set desktop AppSetting.setRenderer below 3.2. This fix is reedited by instruction of ali_rs\r\n\r\n---------\r\n\r\nCo-authored-by: ray <raymond.yang@cottonwoodanalytics.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240db5a14f302d393b264d",
    "number": 2008,
    "body": "Solves https://github.com/jMonkeyEngine/jmonkeyengine/issues/2007\r\n\r\nThe issue is that InstancedGeometry uses the wrong camera for \"instance culling\" check when rendering the scene from multiple viewports (e.g. main viewport and water reflection viewport) and this causes objects to get culled wrongly.\r\n\r\nIt is because `InstancedGeometry.updateInstances()` use the old camera (from the previous viewport) before it is updated in the below method:\r\n\r\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/25a3407c9e403dbc0250430a304031c169636a03/jme3-core/src/main/java/com/jme3/scene/instancing/InstancedGeometry.java#L420-L423\r\n\r\nthis PR changed the code so it passes the camera into `updateInstances()` by the caller method.\r\n\r\nBecause `updateInstances()` is a `public` method on InstancedGeometry (not sure why it is so?) this PR should be considered a breaking change I believe because the method signature is changed!",
    "head_branch": "intancing-issues-with-waterfilter",
    "is_a_fork": true,
    "comments": [
      "Yes it's a breaking change. No, I don't know why the method is `public`.",
      "Unless there's something to discuss, I plan to self-integrate this PR in about 24 hours.",
      "We might want to consider this for 3.6.1 because\r\n\r\n1- this is a low-risk bug fix I think (won't affect 99% of JME apps in a negative way I guess, because `updateInstances()` is not meant to be called by user code.)\r\n2- the bug is important enough I believe ",
      "I'm willing to consider this for 3.6.1, but I'm not convinced. To me, the issue looks like a corner case. What percentage of JME apps do you imagine combine instanced objects with a WaterFilter?",
      ">What percentage of JME apps do you imagine combine instanced objects with a WaterFilter?\r\n\r\nWell, this is not just with the WaterFilter, but in any case where an instanced object is rendered by different viewports. The WaterFilter is an example of such case. Minimap could be another example I guess.\r\n\r\nI have not looked at other JME filters (stuck filters or user contributions) to see if any of them require another render pass with a different viewport or camera but In case they are, they will be affected by this bug as well I think. ",
      "In that case I would expect shadow filters to be affected, which greatly raises the priority of this fix.\r\n\r\nStill, I can't see myself listing \"breaking changes\" in the release notes for a patch. Isn't there *any* way to solve #2007 without introducing a breaking change?",
      ">I would expect shadow filters to be affected,\r\n\r\nLooks like this does not affect the shadow filter because the shadow filter seems to not use `RenderManager.renderScene/renderSubScene` and so `Spatial.checkCulling(Camera cam)` is not called.\r\n\r\nFrom what I understand it directly uses `RenderManager.renderGeometryList()` and bypass `spatial.checkCulling()` and `spatial.runControlRender()` (?)\r\n\r\n>Still, I can't see myself listing \"breaking changes\" in the release notes for a patch.\r\n\r\nI see, we can postpone this change to 3.7.\r\n\r\n>Isn't there any way to solve https://github.com/jMonkeyEngine/jmonkeyengine/issues/2007 without introducing a breaking change?\r\n\r\nI do not know, I must take a closer look. The changes are made based on the suggestion from the person who reported this bug. ",
      "It seems to me that with the following additional changes, this PR would no longer be a breaking change:\r\n\r\n```diff\r\n--- a/jme3-core/src/main/java/com/jme3/scene/instancing/InstancedGeometry.java\r\n+++ b/jme3-core/src/main/java/com/jme3/scene/instancing/InstancedGeometry.java\r\n@@ -75,6 +75,7 @@ public class InstancedGeometry extends Geometry {\r\n \r\n     private int firstUnusedIndex = 0;\r\n     private int numVisibleInstances = 0;\r\n+    private Camera cam;\r\n \r\n     public InstancedGeometry() {\r\n         super();\r\n@@ -275,6 +276,13 @@ public class InstancedGeometry extends Geometry {\r\n         }\r\n     }\r\n \r\n+    /**\r\n+     * @Deprecated use {@link #updateInstances(com.jme3.renderer.Camera)\r\n+     */\r\n+    public void updateInstances() {\r\n+        updateInstances(cam);\r\n+    }\r\n+\r\n     public void updateInstances(Camera cam) {\r\n         FloatBuffer fb = (FloatBuffer) transformInstanceData.getData();\r\n         fb.limit(fb.capacity());\r\n@@ -415,6 +423,12 @@ public class InstancedGeometry extends Geometry {\r\n         allInstanceData = allData.toArray(new VertexBuffer[allData.size()]);\r\n     }\r\n \r\n+    @Override\r\n+    public boolean checkCulling(Camera cam) {\r\n+        this.cam = cam;\r\n+        return super.checkCulling(cam);\r\n+    }\r\n+\r\n     @Override\r\n     public int collideWith(Collidable other, CollisionResults results) {\r\n         return 0; // Ignore collision\r\n```",
      "PR #2036 makes this not a breaking change, so it will be included in v3.6.1 ."
    ],
    "commit_messages": [
      "solve issue #2007 (instanced objects are culled when using WaterFilter) (#2008)\n\n* Fix issue with InstancedGeometry that uses the wrong camera for \"instance culling\" check.\r\n\r\n* Minor javadoc update."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240db6a14f302d393b264e",
    "number": 2006,
    "body": "As discussed at issue #2002.",
    "head_branch": "sgold/issue/2002",
    "is_a_fork": false,
    "comments": [
      "Unless there's something to discuss, I plan to self-integrated this PR in about 24 hours."
    ],
    "commit_messages": [
      " solve issue #2002 (TerrainGridTileLoaderTest fails to load tiles) (#2006)\n\n* solve issue #2002 (TerrainGridTileLoaderTest fails to load tiles)\r\n\r\n* TerrainGridTileLoaderTest:  add a clarifying comment"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240db7a14f302d393b264f",
    "number": 2005,
    "body": "As issue #2003 says, there's no reason for `load()` to return `false` in this case.\r\n\r\nOne reason the issue went undetected so long:  all uses of the `load()` method in jme3-terrain and jme3-examples ignore the return value. However, Minie (taking the javadoc literally) *does* check the value, so returning the correct value is important.\r\n\r\nI quickly checked the other known implementations of `load()` and none of them seemed to have similar issues.\r\n",
    "head_branch": "sgold/issue/2003",
    "is_a_fork": false,
    "comments": [
      "Unless there's something to discuss, I plan to self-integrated this PR in about 24 hours.",
      "Existing applications might depend on the return value. I have changed my mind about including this in v3.6.1"
    ],
    "commit_messages": [
      "solve issue #2003 (ParticleDepositionHeightMap.load return value) (#2005)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240db8a14f302d393b2650",
    "number": 2001,
    "body": "This PR attempts to address issue #1999 by changing the `Exception` thrown in `NativeLibraryLoader.computeNativesHash()` (when there's an I/O error) to match that thrown in `NativeLibraryLoader.loadNativeLibrary()`.\r\n\r\n",
    "head_branch": "sgold-issue-1999",
    "is_a_fork": false,
    "comments": [
      "Existing applications might depend on the type of exception. I have changed my mind about including this in v3.6.1"
    ],
    "commit_messages": [
      "NativeLibraryLoader:  more detailed exception in computeNativesHash() (#2001)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240db9a14f302d393b2651",
    "number": 1993,
    "body": "Assertions within the spatial class have no message associated with them. This makes them much less useful for debugging problems (they effectively just say; there is a problem, somewhere in your entire scene graph), By including the spatial name in the assertion message they will help track down the problem much quicker.\r\n\r\nI have some of these very intermittently pop up in my own application but I can't really fix them without more information as to what spatial is causing them",
    "head_branch": "#1992_better_messages_in_spatial_assertions",
    "is_a_fork": true,
    "comments": [
      "Unless there's substantial discussion, I plan to integrate this in about 24 hours."
    ],
    "commit_messages": [
      "solve issue #1992: better messages in spatial assertions (#1993)\n\n* #1992 Improve the messages being reported from spatial assertions\r\n\r\n* #1992 Make clear what name is in the assertion messages\r\n\r\n* #1992 Whitespace correction"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240dbaa14f302d393b2652",
    "number": 1991,
    "body": "As I mentioned at issue #1982, one issue with negative native IDs is the encoding scheme used to implement `NativeObject.getUniqueId()`. To generate a unique ID, the object type is stored in the upper 32 bits. For a negative ID, sign extension during conversion from `int` to `long` obliterates the type information.\r\n\r\nThis PR masks off the upper 32 bits before adding the object type. It is merely the first of *many* changes that will be needed to handle negative native IDs in JMonkeyEngine.",
    "head_branch": "sgold-issue-1982",
    "is_a_fork": false,
    "comments": [
      "Unless there's substantive discussion, I plan to integrate this PR in about 24 hours."
    ],
    "commit_messages": [
      "correctly handle negative IDs in getUniqueId() methods (#1991)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240dbba14f302d393b2653",
    "number": 1988,
    "body": "[Like LWJGL 3](https://github.com/jMonkeyEngine/jmonkeyengine/blob/29e07614ec8d10ebc90f1a997382a267b6667e04/jme3-lwjgl3/src/main/java/com/jme3/system/lwjgl/LwjglContext.java#L252), this re-initializes the renderer on context restarts on LWJGL 2, otherwise changing DepthBits or BitsPerPixel won't take effect and will result in a blank window after context restart (no spatial is rendered in the viewport).\r\n\r\nI made a test case, it starts the app with BitsPerPixel=16 and after pressing key P on the keyboard it changes BitsPerPixel to 24 and restarts context. You will notice the stats view will be disappeared.\r\n\r\n```\r\n\r\npublic class TestContextRestart extends SimpleApplication {\r\n\r\n    public static void main(String[] args) {\r\n        TestContextRestart app = new TestContextRestart();\r\n        AppSettings settings = new AppSettings(true);\r\n        settings.setBitsPerPixel(16);\r\n        app.setSettings(settings);\r\n        app.start();\r\n    }\r\n\r\n    @Override\r\n    public void simpleInitApp() {\r\n        inputManager.addMapping(\"restartContext\", new KeyTrigger(KeyInput.KEY_P));\r\n        ActionListener listener = new ActionListener() {\r\n            @Override\r\n            public void onAction(String name, boolean keyPressed, float tpf) {\r\n                if (name.equals(\"restartContext\") && keyPressed) {\r\n                    restartContext();\r\n                }\r\n            }\r\n        };\r\n        inputManager.addListener(listener, \"restartContext\");\r\n    }\r\n\r\n    void restartContext() {\r\n        settings.setFullscreen(false);\r\n        settings.setBitsPerPixel(24);\r\n        setSettings(settings);\r\n        restart();\r\n    }\r\n}\r\n```\r\n\r\nThis may also fix #798\r\n\r\n\r\n",
    "head_branch": "lwjgl2-restartcontext",
    "is_a_fork": true,
    "comments": [
      "Unless there's something to discuss, I plan to self-integrate this PR in about 24 hours.",
      "I ran some tests on Mint Linux with the current v3.6.1 release candidate e688861 (and LWJGL v2).\r\n+ Switching from fullscreen to windowed mode no longer causes \"OpenGLException: Invalid operation (1282)\"\r\n+ Changing the number of MSAA samples no longer causes \"OpenGLException: Invalid operation (1282)\"\r\n+ My system only supports 24-bit color, so I couldn't test changing color depth. (issue #801)\r\n\r\nLooks good so far!"
    ],
    "commit_messages": [
      "LwjglContext: re-initialize renderer on context restart (lwjgl 2) (#1988)\n\n* LwjglContext: initialize renderer on context restart (lwjgl 2).\r\n\r\n* Reset GL objects in renderer when context restart."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240dbca14f302d393b2654",
    "number": 1986,
    "body": "The first two commits fix some issues that were actually interfering with correct rendering in the javadoc.\r\n\r\nThe third really is just some typo and reflow to be more compliant with project code standards. Note that the file in question has several comment blocks that are still too long, (~125 characters average) but I didn't feel like messing with them on an API that is not really currently maintained. I only picked the truly low-hanging fruit.",
    "head_branch": "warnings-cleanup",
    "is_a_fork": true,
    "comments": [
      "@Sailsman63, thank you!"
    ],
    "commit_messages": [
      "Some javadoc cleanup (#1986)\n\n* Fix some invalid HTML tags\r\n\r\n* Correct deprecation annotations\r\n\r\n* Doc-comments cleanup\r\n\r\n- Corrected some typos, grammar, etc.\r\n- reflowed egregiously long comment lines to comply with column limits"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240dbda14f302d393b2655",
    "number": 1983,
    "body": "In response to this discussion:\r\nhttps://hub.jmonkeyengine.org/t/adding-nightly-builds-to-engine/46560\r\n\r\nThis is mostly just a copy-paste of the relevant parts of the existing release deployment mechanism. It should not require manual intervention at any step.\r\n\r\nI do not have a deployment account for Sonatype, so this branch is only partially tested. (The gradle script call returns \"401: Unauthorized\" when run from the command line. This is what I would expect without an account.)\r\n\r\nUsers who want to use the snapshot will need to add `https://oss.sonatype.org/content/repositories/snapshots/` to their build scripts' repository list, and then target version `<Major_Version>-SNAPSHOT`. Not sure where to document that.\r\n",
    "head_branch": "snapshot",
    "is_a_fork": true,
    "comments": [
      "@Sailsman63, thanks for your contribution to our engine!\r\n\r\n>Not sure where to document that.\r\n\r\nMaybe here https://wiki.jmonkeyengine.org/docs/3.4/getting-started/maven.html\r\n\r\nYou can use \"Edit this page\" option to modify the page.",
      "Hold on this. I did some poking around to test this, and I found that I mixed up how the workflow system operates. This PR will *not* function as intended at this point, and getting it running may lead to some refactoring of the existing workflow.",
      "Okay, I've done a bit more testing & fixed a couple of things.\r\n\r\nThe only thing left is to verify that the correct files actually get uploaded, and the only way to test that is to trigger a run in an appropriate branch under a repository that actually provides a set of sonatype credentials.\r\n\r\n(If someone wants to test without merging into master, it could be done by merging to another branch and modifying line 299 of the workflow to reference *that* branch.)",
      "Thanks, @Sailsman63 \r\n\r\nIt looks fine to me\r\n\r\n>The only thing left is to verify that the correct files actually get uploaded\r\n\r\nUnless there's substantial discussion, I plan to integrate this in about 12 hours, we can then verify how things work ;)  ",
      "Seems it failed to upload snapshots\r\n\r\nhttps://github.com/jMonkeyEngine/jmonkeyengine/actions/runs/4390946051/jobs/7690244506#step:5:488\r\n\r\nmaybe the URL should be\r\n\r\nhttps://s01.oss.sonatype.org/content/repositories/snapshots/\r\n\r\ninstead of\r\n\r\nhttps://oss.sonatype.org/content/repositories/snapshots/\r\n\r\nas stated here\r\nhttps://central.sonatype.org/publish/publish-guide/",
      "Fixed in https://github.com/jMonkeyEngine/jmonkeyengine/commit/a0c2c5ee74f87f588e539531a5c535b77b9ea4b3\r\n\r\nlet's see if it will work now!",
      "Seems it works!\r\n\r\nSnapshots are uploaded to \r\nhttps://s01.oss.sonatype.org/content/repositories/snapshots/org/jmonkeyengine/",
      "Thanks for finishing this up. I've opened a documentation PR for the Wiki: https://github.com/jMonkeyEngine/wiki/pull/167\r\n\r\n(not all users can edit directly.)",
      "Note that I've now set up the \"v3.6\" branch to deploy snapshots in a similar matter.\r\n\r\nI notice that the current scripts don't make efficient use of SonaType's resources. Each successful CI build causes a snapshot deployment which uploads 450 MBytes of data to s01.oss.sonatype.org . As far as I know, the uploaded files are permanent: never overwritten or deleted. So now we have 30+ snapshots deployed, and the number is steadily growing.\r\n\r\nIs this intentional?\r\n\r\nI don't see any reason to retain snapshot builds for more than a week or so. In fact, I when I heard about deploying snapshots to SonaType, I assumed each snapshot deployment would overwrite the previous one.",
      ">Is this intentional?\r\n\r\nI might be wrong, but I think back then we opted for the easiest solution and let other concerns aside until it become an issue. So far it seems SonaType has not blamed us for this but yeah agree with you that our current setup might not be an efficient use of resources! \r\n\r\nIs it possible to set it up to remove the old snapshots? If so that might be a good idea to remove the old ones and only keep the new ones, for example, we might want to only keep the last 10 builds. \r\n\r\nI have no idea how we can implement it, though.",
      "I agree there's no evidence that the old files are causing an issue ... yet.\r\n\r\nWhen I browse the \"Snapshots\" repository in my web browser via the Nexus Repository Manager, there's a \"Delete\" button for each file. (Open the \"Browse Storage\" tab in the lower left quadrant then the \"Artifact\" tab in the lower right.) Assuming those buttons work, removal of old snapshots is theoretically possible. In practice, doing this through the web interface would require thousands of mouse clicks, since a single snapshot contains about 900 files (18 libraries x 5 artifacts/lib x 10 files/artifact).\r\n\r\nWhat I'd ideally like is a tool to remove all snapshot artifacts we own except for the latest 3.6.0 snapshot and the latest 3.7.0 snapshot. Apparently such a feature exists in the Nexus software:\r\n\r\nhttps://support.sonatype.com/hc/en-us/articles/213465308-Can-I-delete-releases-from-Nexus-Repository-2-or-3-after-they-have-been-published-\r\n\r\nhttps://help.sonatype.com/repomanager3/nexus-repository-administration/tasks/maven-snapshot-tasks\r\n\r\nI don't know how to create a \"scheduled task\". That might be something we can request via a Jira ticket.",
      "Looks like it requires administrator access."
    ],
    "commit_messages": [
      "Deploy master branch commits as snapshot (#1983)\n\n* Deploy main branch commits as snapshot\r\n\r\n* Snapshot builds don't have a Release artifact\r\n\r\n* restrict snapshot to actual commits on master branch\r\n\r\n* Deploy steps don't actually use test-run maven artifacts\r\n\r\n* Partial Revert. We need that artifact"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240dbea14f302d393b2656",
    "number": 1981,
    "body": "Added a scalar multiplier controlling the amount of occlusion applied and updated GltfLoader to read it if present on \"occlusionTexture\".\r\n\r\nBased on specs https://github.com/KhronosGroup/glTF/blob/main/specification/2.0/schema/material.occlusionTextureInfo.schema.json\r\n\r\nthe formula should be for final occlusion value as: `1.0 + strength * (<sampled occlusion texture value> - 1.0)` but in JME I used `ao *= strength` based on forum suggestion.\r\n\r\nForum topic: https://hub.jmonkeyengine.org/t/gltf-ao-strenght/46553",
    "head_branch": "ao-strength",
    "is_a_fork": true,
    "comments": [
      ">the formula should be for final occlusion value as: `1.0 + strength * (<sampled occlusion texture value> - 1.0)` but in JME I used ao *= strength based on forum suggestion.\r\n\r\nFixed it to follow the gltf specs: `ao = 1.0 + m_AoStrength * (ao - 1.0);` as requested [here](https://hub.jmonkeyengine.org/t/gltf-ao-strenght/46553/5?u=ali_rs).",
      "We might also want to max ao here to make sure the final ao value is never less than 0\r\n\r\n```\r\nao = 1.0 + m_AoStrength * (ao - 1.0);\r\nao = max(ao, 0.0);\r\n```\r\n\r\nSince right now I think the value you get after applying AoStrength can be below 0 at high AO strengths, and I am not sure whether or not the pbr lighting function would work with a negative ao paramater sent in.",
      ">at high AO strengths, and I am not sure whether or not the pbr lighting function would work with a negative ao paramater sent in.\r\n\r\nAccording to gltf specs occlusion strength must be in [0, 1] so I believe the `ao` value in the above calculation should never go below zero. I will document this on the material definition as well, thanks. \r\n\r\nhttps://github.com/KhronosGroup/glTF/blob/6753012ec446efa747177e2fcc08aa5534fc27e4/specification/2.0/schema/material.occlusionTextureInfo.schema.json#L14-L15",
      "So it sounds like their idea is that the AO Strength can only reduce the AO intensity, and can't increase the intensity at all since its supposed to be in 0-1 range and 1.0 is the default.\r\n\r\nWe could follow their format with this, but we could also allow values over 1.0 (and then clamp the final ao value to 0-1) so that AO strength could also allow you to increase AO intensity with the strength value.\r\n\r\nI notice the PBR shader also doesn't force you to keep the m_Roughness and m_Metallic paramaters in 0-1 range, which I personally like because then I can make minor adjustments to both increase or decrease the value without having to change the textures. So it likely that setting values slightly over 1.0 for AoStrength will be useful for slightly intensifying aoMaps to be more noticeable, so it could still be useful to clamp the final aoValue between 0-1 to make sure it never ends up negative in the case a user does set aoStrength higher than 1.0",
      "Ok, done."
    ],
    "commit_messages": [
      "Add support for AoStrength in PBRLighting & GltfLoader (#1981)\n\n* Added AoStrength factor in PBRLighting. A scalar multiplier controlling the amount of occlusion applied.\r\n\r\n* Add support for reading AoStrength in GltfLoader.\r\n\r\n* Fix ao calculation to follow gltf specs.\r\n\r\n* Update comment on AoStrength mentioning the min and max values.\r\n\r\n* Clamp ao to 0 for negative values that might cause by applying AoStrength > 1.\r\n\r\n* Use glsl clamp instead of max."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240dbfa14f302d393b2657",
    "number": 1980,
    "body": "Based on Gltf specs \r\nhttps://github.com/KhronosGroup/glTF/blob/main/specification/2.0/schema/material.normalTextureInfo.schema.json\r\n\r\nand as issued on the forum https://hub.jmonkeyengine.org/t/khr-transform/46524/39?u=ali_rs \r\n\r\nI added a `NormalScale` factor in PBRLighting. The scalar parameter is applied to each normal vector of the normal map. This value scales the normal vector in X and Y directions using the formula: `scaledNormal = normalize((<sampled normal texture value> * 2.0 - 1.0) * vec3(<normal scale>, <normal scale>, 1.0))`. (from the above gltf spec)\r\n\r\nand updated GltfLoader to support this.",
    "head_branch": "pbr-normalscale-factor",
    "is_a_fork": false,
    "comments": [
      "I believe it's too late in the release cycle to be adding features to 3.6",
      "This PR appears to have caused the regression that's holding up the v3.7.0-stable release. @Ali-RS are you available to help troubleshoot the regression?"
    ],
    "commit_messages": [
      "Add support for NormalScale in PBRLighting & GltfLoader (#1980)\n\n* Added NormalScale factor in PBRLighting. The scalar parameter applied to each normal vector of the normal map. This value scales the normal vector in X and Y directions using the formula: `scaledNormal =  normalize((<sampled normal texture value> * 2.0 - 1.0) * vec3(<normal scale>, <normal scale>, 1.0))`.\r\n\r\n* Add support for reading NormalScale in GltfLoader."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240dc0a14f302d393b2658",
    "number": 1979,
    "body": "Similar to PR #1444 but for PBR.\r\n\r\nIssued on the forum: https://hub.jmonkeyengine.org/t/khr-transform/46524/37?u=ali_rs\r\n",
    "head_branch": "pbr-emissive-color-multiplier",
    "is_a_fork": true,
    "comments": [
      "I believe it's too late in the release cycle to be adding features to 3.6"
    ],
    "commit_messages": [
      "Allow use of Emissive color as a multiplier with EmissiveMap in PBRLighting (#1979)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240dc0a14f302d393b2659",
    "number": 1976,
    "body": "Zeroing the linear and angular velocities of the bridge solves issue #1975. (I tested it.)\r\n\r\nThis PR also simplifies `Quaternion.DIRECTION_Z.toRotationMatrix()`, which turns out to be an obscure (and perhaps misleading) way to generate an identity matrix.",
    "head_branch": "sgold/issue-1975",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "solve issue #1975:  TestAttachDriver doesn't reset properly (#1976)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240dc1a14f302d393b265a",
    "number": 1973,
    "body": "Solves https://github.com/jMonkeyEngine/jmonkeyengine/issues/1968, https://github.com/jMonkeyEngine/jmonkeyengine/issues/1422 and https://github.com/jMonkeyEngine/jmonkeyengine/issues/1971\r\n\r\n@stephengold and @Scrappers-glitch please feel free to review this and let me know what do you think\r\n\r\n",
    "head_branch": "improve-nativelibraryloader",
    "is_a_fork": true,
    "comments": [
      "> About the different \"versions\", they will have different lastModified dates so the new one should overwrite the old one.\r\n\r\n>Sometimes one actually wants the older version.\r\n\r\n_Originally posted by @stephengold in https://github.com/jMonkeyEngine/jmonkeyengine/issues/1965#issuecomment-1444582118_\r\n            \r\nThis takes it into account\r\n\r\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/b80117df23bc1d053edbae8f5bbc25628beb0638/jme3-desktop/src/main/java/com/jme3/system/NativeLibraryLoader.java#L504-L515",
      "For a complete clean-up, could you break the [`NativeLibraryLoader`](https://github.com/jMonkeyEngine/jmonkeyengine/blob/b80117df23bc1d053edbae8f5bbc25628beb0638/jme3-desktop/src/main/java/com/jme3/system/NativeLibraryLoader.java#L427-L547) method down into small private static methods ? \r\nThank you.",
      "Modified `getExtractionFolder()` to use `System.getProperty(\"java.io.tmpdir\")` instead of extracting to the working directory if no custom extraction folder is specified.\r\n\r\nThe directory structure is like below\r\n\r\n```\r\n<java.io.tmpdir>/jme3/natives-<hash>  // hash is computed automatically for each app to prevent collisions\r\n```\r\n\r\nSolve https://github.com/jMonkeyEngine/jmonkeyengine/issues/1971",
      "Unless there's substantial discussion, I plan to self-integrate this in about 24 hours."
    ],
    "commit_messages": [
      "Improve NativeLibraryLoader (#1973)\n\n* Improve NativeLibraryLoader.\r\n\r\n* Add javadoc.\r\n\r\n* Moved library extraction requirement check into a separate method.\r\n\r\n* Fix javadoc.\r\n\r\n* Refactor library extraction check method.\r\n\r\n* Extract natives to system temp directory retrieved by System.getProperty(\"java.io.tmpdir\") instead of working directory.\r\n\r\n* Renamed enum \"Openal\" to \"OpenAL\" and added javadoc on NativeLibraries.\r\n\r\n* Update comments."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240dc2a14f302d393b265b",
    "number": 1970,
    "body": "This PR adds the missing null check and performs some trivial refactoring.",
    "head_branch": "sgold/issue-1969",
    "is_a_fork": false,
    "comments": [
      "Unless there's something to discuss, I plan to integrate this PR into the master and v3.6 branches in about 24 hours. "
    ],
    "commit_messages": [
      "solve issue #1969:  missing check in GLRenderer.clearVertexAttribs() (#1970)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240dc3a14f302d393b265c",
    "number": 1967,
    "body": "Solves  #1965 \r\n",
    "head_branch": "fix-issue-1965-v2",
    "is_a_fork": true,
    "comments": [
      "For better review, I have made the changes in two commits :)\r\n\r\n[Cleanup NativeLibraryLoader](https://github.com/jMonkeyEngine/jmonkeyengine/pull/1967/commits/6865822893071d5eca6b98497e30b5e90fd07f2b)\r\n\r\n[Fix wrong library path](https://github.com/jMonkeyEngine/jmonkeyengine/pull/1967/commits/56bd09c67993d9f9684ccdc5a7b8e41f774531b9)\r\n",
      "Unless there's something to discuss, I plan to self-integrate this PR in about 24 hours.",
      "Should I apply this to the v3.6 branch?",
      "> Should I apply this to the v3.6 branch?\r\n\r\nI'm not sure. Did #1965 ever cause correct applications to fail? If not, then this change seems like a big risk, especially if it hasn't been thoroughly tested on all platforms.",
      "I see, thanks for the comment\r\n\r\n>Did https://github.com/jMonkeyEngine/jmonkeyengine/issues/1965 ever cause correct applications to fail?\r\n\r\nI believe not.\r\n\r\n",
      "From my point of view, cherry-picking is all about risk versus benefit."
    ],
    "commit_messages": [
      " Cleanup NativeLibraryLoader & fix wrong library path  (#1967)\n\n* Cleanup NativeLibraryLoader\r\n\r\n* Fix wrong library path"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240dc4a14f302d393b265d",
    "number": 1966,
    "body": "PR following up on the discussion in this thread:  https://hub.jmonkeyengine.org/t/terrain-collision-exception/46491/6",
    "head_branch": "patch-4",
    "is_a_fork": true,
    "comments": [
      "Can you please update the copyright date?",
      "@yaRnMcDonuts thanks for your contribution\r\n\r\nUnless there's something to discuss, I plan to integrate this PR into the master and v3.6 branches in about 24 hours. "
    ],
    "commit_messages": [
      "Replace Exception with warning in TerrainPatch (#1966)\n\n* Replace Excpetion with warning in TerrainPatch\r\n\r\nPR following up on the discussion in this thread: \r\nhttps://hub.jmonkeyengine.org/t/terrain-collision-exception/46491/6\r\n\r\n* Update TerrainPatch.java\r\n\r\n* Update TerrainPatch.java\r\n\r\n* Update TerrainPatch.java\r\n\r\n* Update TerrainPatch.java\r\n\r\n* Update TerrainPatch.java\r\n\r\n* Update TerrainPatch.java\r\n\r\n* Update TerrainPatch.java"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240dc5a14f302d393b265e",
    "number": 1964,
    "body": "In the case of lwjgl2, natives are loaded when LwjglContext is started but in the TestMusicPlayer test we do not create a LwjglContext, so we should handle loading natives ourselves.\r\n\r\nFix #1963 ",
    "head_branch": "fix-issue-1963",
    "is_a_fork": true,
    "comments": [
      "Unless there's something to discuss, I plan to self-integrate this PR in about 24 hours."
    ],
    "commit_messages": [
      "solve issue #1963 (TestMusicPlayer fails to load AL library on lwjgl2) (#1964)\n\n* TestMusicPlayer: fix UnsatisfiedLinkError when using lwjgl2. Solves issue #1963\r\n\r\n* Add missing load function for \"openal\" natives.\r\n\r\n* Removed the unnecessary check for lwjgl 2 in classpath.\r\n\r\n* Fix comment"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240dc6a14f302d393b265f",
    "number": 1962,
    "body": "The jme3-jogg library currently depends on the open-source j-ogg-all library. In turn, j-ogg-all depends on the Java Media Framework (JMF), which is large (about 1.9 MBytes), unmaintained, not open-source, and not available for all platforms.\r\n\r\nIn fact, jme3-jogg uses just a fraction of the j-ogg-all functionality: specifically, the Ogg-container reader and the Vorbis decoder.\r\n\r\nVersion 1.0.3 of the j-ogg-all project includes a new library (\"j-ogg-vorbis\") without decoders for the FLAC and Theora formats. This PR substitutes \"j-ogg-vorbis\" for \"j-ogg-all\", which should result in more compact applications with fewer dependencies.",
    "head_branch": "sgold/ogg-vorbis",
    "is_a_fork": false,
    "comments": [
      "Thanks\r\n\r\nShould we also merge this into the v3.6 branch?",
      "> Should we also merge this into the v3.6 branch?\r\n\r\nI think it's too late for v3.6 ."
    ],
    "commit_messages": [
      "jme3-jogg: remove dependency on Java Media Framework (#1962)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240dc7a14f302d393b2660",
    "number": 1961,
    "body": "This PR takes use of `OGGLoader` from `jme3-jogg` instead of `NativeVorbisLoader` for loading ogg audio. The `jme3-jogg` uses a pure java decoder and supports `streamCache`.\r\n\r\nSolve #1960 \r\n\r\nEdit:\r\nAlso solve #1972 ",
    "head_branch": "android-ogg",
    "is_a_fork": true,
    "comments": [
      "Unless there's something to discuss, I plan to self-integrate this PR in about 24 hours.",
      "Unless we were able to fix #1972 on `NativeVorbisLoader` I might consider merging this PR into v3.6 branch because of #1972.",
      "I am confident that this PR (and subsequently PR https://github.com/jMonkeyEngine/jmonkeyengine/pull/1962) should be included in v3.6. It fixed issue #1972 on my test.\r\n\r\n"
    ],
    "commit_messages": [
      "solve issue #1960 (use jme3-jogg for loading ogg files on android) (#1961)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240dc8a14f302d393b2661",
    "number": 1959,
    "body": "This PR excludes `javax.media:jmf` library from `jme3-jogg` module as it is not required for decoding ogg files in JME.\r\n\r\nFix issue #1958 ",
    "head_branch": "fix-issue-1958",
    "is_a_fork": true,
    "comments": [
      "I plan to release a new library \"j-ogg-vorbis\" which will be like \"j-ogg-all\" but will exclude the flac and Theora decoders. It won't depend on JMF. That will make this PR redundant, so perhaps you should hold off on this...",
      "Ok, no problem. I will discard this PR then and will submit a new one that makes use of `j-ogg-vorbis`. \r\n\r\nThanks",
      "Closing this for https://github.com/jMonkeyEngine/jmonkeyengine/pull/1962"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240dc9a14f302d393b2662",
    "number": 1956,
    "body": "### This PR fixes the following:\r\n- [x] Issue [#1955] by delegating the file closure to the android [`ParcelFileDescriptor`](https://github.com/jMonkeyEngine/jmonkeyengine/blob/493195eae810c4a38744e6c34ea0e7e8c48542a9/jme3-android/src/main/java/com/jme3/audio/plugins/NativeVorbisLoader.java#L71), the original resource that opens the audio asset.\r\n\r\n### This PR adds the following: \r\n- [x] Java documentation.\r\n- [x] Native.\r\n\r\n### This PR refactors the following: \r\n- [x] `NativeVorbisFile#open(int, long, long)` to `NativeVorbisFile#init(int, long, long)`.\r\n- [x] `NativeVorbisFile#close()` to `NativeVorbisFile#clearResources()`. \r\n- [x] `NativeVorbisFile#read(byte[], int, int)` to `NativeVorbisFile#readIntoArray(byte[], int, int)`.\r\n- [x] `NativeVorbisFile#readFully(ByteBuffer)` to `NativeVorbisFile#readIntoBuffer(ByteBuffer)`.",
    "head_branch": "fix-vorbisnative-patch",
    "is_a_fork": true,
    "comments": [
      "I modified some names (describing their sources better now), and added java docs.\r\n\r\nEDIT:\r\nI would like to take some more time refactoring the native logs and adding documentation (i won't change the base code currently, i will leave the base modifications to another PR).",
      "@Ali-RS For now, this is satisfying for me, i added javadocs improvements and some documentation to the native code, i will keep the rest (including the public java fields on the `NativeVorbisFile` class) until i have some time to understand things better, let  me know if there is something else to add.",
      "Thank you so much @Scrappers-glitch \r\nIt looks fine to me",
      "Unless there's substantial discussion, I plan to integrate this in about 24 hours."
    ],
    "commit_messages": [
      "resolve issue #1955 (Can not play vorbis audio on Android API 31+) (#1956)\n\n* android-native-vorbis: fix double asset file descriptor closure\r\n\r\n* NativeVorbis: better names and javadocs\r\n\r\n* NativeVorbisFile#readIntoBuffer: specifies the start and the end of the read\r\n\r\n* NativeVorbisFile: better explanation for the output buffer on read functions\r\n\r\n* com_jme3_audio_plugins_NativeVorbisFile.c: refactored logs\r\n\r\n* NativeVorbisFile: some docs enhances\r\n\r\n* NativeVorbisLoader: added updated jme3-copyright"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240dcaa14f302d393b2663",
    "number": 1953,
    "body": null,
    "head_branch": "lwjgl-window-fix-typo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix a typo in LwjglWindow (#1953)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240dcba14f302d393b2664",
    "number": 1952,
    "body": "I recently encountered an issue where exceptions were propagating out of my code and silently being swallowed without the usual \"uncaught exception\" window being shown or any logging. Since jME already tries to handle this case, I was surprised after a couple of hours of debugging to find that the origin was an exception coming from within `simpleUpdate()` (in my case it happened in a subtle and rather difficult to debug scenario).\r\n\r\nThe solution I added in my codebase was wrapping the body of `simpleUpdate()` in a try-catch block and logging the stack trace. Since `SimpleApplication` aims to be a consistent and easy to use one-stop-shop for app-level concerns, it would be nice if it handled this situation as well.\r\n\r\nI'm not entirely convinced that this is the best way to do this (especially given jME's existing uncaught exception handling), but it seems a reasonable starting point for further discussion - feedback is welcomed.",
    "head_branch": "simple-update-logging",
    "is_a_fork": false,
    "comments": [
      ">without the usual \"uncaught exception\" window being shown\r\n\r\nJust a note, if you are using JME 3.6, you need to add `jme3-awt-dialogs` into the Gradle dependencies if you want to show the error dialogs else it will only print the error message to the console.\r\n\r\nSee: \r\nhttps://github.com/jMonkeyEngine/jmonkeyengine/pull/1876\r\n\r\nhttps://hub.jmonkeyengine.org/t/next-engine-release/46314/71?u=ali_rs ",
      "This is on `3.5.1-stable`, and I see the AWT exception dialogs for every other uncaught exception that I'm aware of.",
      "May you please post that uncaught exception (with the full stack trace please and the thread name from which it is thrown) that JME was unable to handle it?  \r\n\r\nEdit:\r\n\r\nAnd by the way, taking a quick look, JME will only handle uncaught exceptions thrown from \"jME3 Main\" thread\r\n\r\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/e7eb4d87739003465c89d79e595563d9a127e30f/jme3-lwjgl3/src/main/java/com/jme3/system/lwjgl/LwjglWindow.java#L562-L574\r\n\r\nCan you please confirm that your exception is thrown from \"jME3 Main\" thread?\r\n\r\n\r\nEdit2:\r\nAlso would be very helpful if you can provide a minimal test case to reproduce this issue.",
      "I'm going to retract this pull request - while trying to reproduce the stack trace under conditions that this PR would encounter, I discovered that the error being produced was being swallowed within one of my own libraries (an event dispatcher), so it wasn't jME that was ignoring the error because it never actually propagated to jME at all."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240dcca14f302d393b2665",
    "number": 1951,
    "body": "I use this to grab and hook the water reflection ViewPort into SkyControl for automatically updating the day/night color.\r\n\r\n```\r\nWaterFilter water = fpp.getFilter(WaterFilter.class);\r\nif (water != null) {\r\n     skyControl.getUpdater().addViewPort(water.getReflectionView());\r\n}\r\n```\r\n\r\nWhat do you think, is this a good addition? \r\n\r\nEdit:\r\nIn my case, I am setting an empty node as a \"reflection scene\" (I am doing a cartoon-style water and realistic reflection is not needed also it is a bit expensive) but I still need to be able to reflect the day/night color which I control by the viewport color via SkyControl.",
    "head_branch": "enhance-waterfilter",
    "is_a_fork": true,
    "comments": [
      "Also, may this become a candidate for v3.6?",
      "A worthy addition to the Engine, but too late for version 3.6 .",
      "Ok, thanks\r\n\r\nUnless there's something to discuss, I plan to self-integrate this PR in about 24 hours."
    ],
    "commit_messages": [
      "Add WaterFilter.getReflectionView method (#1951)\n\n* Added WaterFilter.getReflectionView method.\r\n\r\n* Update javadoc."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240dcda14f302d393b2666",
    "number": 1950,
    "body": "… to the values from AppSettings. \r\n\r\nAnd fixed a typo from PR #1794\r\n\r\nShould also, fix #1945\r\nI plan to apply PR #1949 as well.",
    "head_branch": "fix-issue-1945-v2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240dcea14f302d393b2667",
    "number": 1949,
    "body": "Log a \"not supported\" error on AwtPanelsListener.reshape/rescale method instead of throwing an exception. \r\n\r\nFix #1945",
    "head_branch": "fix-issue-1945",
    "is_a_fork": true,
    "comments": [
      "Unless there's something to discuss, I plan to self-integrate this PR in about 24 hours."
    ],
    "commit_messages": [
      "Fix #1945 (IllegalStateException when running TestAWTPanels with LWJGL 3) (#1949)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240dcfa14f302d393b2668",
    "number": 1948,
    "body": "Added the required documentation for issue #1946 ",
    "head_branch": "fix-issue-1946",
    "is_a_fork": true,
    "comments": [
      "Unless there's something to discuss, I plan to self-integrate this PR in about 24 hours.",
      "Looks good to me"
    ],
    "commit_messages": [
      "Update RenderState.setLineWidth javadoc. (#1948)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240dcfa14f302d393b2669",
    "number": 1947,
    "body": "Updated Application.start Javadoc to respect this change: https://github.com/jMonkeyEngine/jmonkeyengine/pull/1690/files\r\n",
    "head_branch": "refix-issue-1275",
    "is_a_fork": true,
    "comments": [
      "Unless there's something to discuss, I plan to self-integrate this PR in about 24 hours."
    ],
    "commit_messages": [
      "Update Application.start javadoc. (#1947)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240dd0a14f302d393b266a",
    "number": 1944,
    "body": "This resolves the JVM crash happening when running TestAWTPanels on Linux and LWJGL 3. Seems setting the Look And Feel on Swing UIManager prevents the crash.\r\n\r\nFix #1558 \r\n\r\nStill need to figure out a solution for IllegalStateException happening on JME 3.6.0-beta1. See https://github.com/jMonkeyEngine/jmonkeyengine/issues/1558#issuecomment-1423951041 \r\nBut I think this should be in a separate PR.",
    "head_branch": "fix-issue-1558",
    "is_a_fork": true,
    "comments": [
      "Unless there's something to discuss, I plan to self-integrate this PR in about 24 hours and close issue #1558."
    ],
    "commit_messages": [
      "Fix issue #1558 (TestAWTPanels crashes with LWJGL v3 on Linux) (#1944)\n\n* TestAwtPanels: apply swing system LAF. This is needed to prevent JVM crash on Linux and LWJGL 3. (See issue #1558)\r\n\r\n* Use single class imports."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240dd1a14f302d393b266b",
    "number": 1943,
    "body": "Instead of a `FrameInterpolator` instance for each `AnimComposer`/`SkinningControl`, this solution provides an instance for each thread. The per-thread instances are allocated using `ThreadLocal.withInitial()`.\r\n\r\nTo maximize compatibility with JME v3.5, the public `FrameInterpolator.DEFAULT` field is retained, however it is deprecated and no longer used in the Engine.\r\n\r\nSimilarly, the `setFrameInterpolator()` methods in `MorphTrack` and `TransformTrack` are retained. However, a `null` interpolator now has special meaning to these classes, namely that the per-thread default instance should be used.\r\n",
    "head_branch": "sgold/issue-1806",
    "is_a_fork": false,
    "comments": [
      "When a thread gets destroyed will its cached FrameInterpolator be cleared from the ThreadLocal? ",
      "https://docs.oracle.com/javase/8/docs/api/java/lang/ThreadLocal.html\r\n\r\n\"after a thread goes away, all of its copies of thread-local instances are subject to garbage collection (unless other references to these copies exist)\"",
      "Thanks\r\n\r\nUnless there's something to discuss, I plan to integrate this PR in about 24 hours.",
      "I was asked to review this one and so I glanced at the code.  I think this solves my original problem but I don't have time to test it.\r\n\r\nIt's probably not the \"correct\" solution from the standpoint of \"state shared between models when you don't expect it to\" but the correct solution (make sure each anim/skin has its own instance) is really difficult and the provided solution will probably fix all cases a user will encounter.\r\n\r\nJust something to keep in the back of our minds if there is ever another future case where JME allows tandem access to the state of multiple spatials (for example, looping in a tween that relies on access the animation state of a separate spatial or something... just trying to think of ways it could possibly happen.)  But in that case, an argument could also be made that frame interpolator should never be shared.\r\n\r\nAnyway, short of being able to test it myself, I think this solution is fine."
    ],
    "commit_messages": [
      "solve issue #1806 (global FrameInterpolator violates threading model) (#1943)\n\n* solve issue #1806 (global FrameInterpolator violates threading model)\r\n\r\n* FrameInterpolator:  deprecate the global instance"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240dd2a14f302d393b266c",
    "number": 1942,
    "body": "A straightforward fix for issue #1879, rotating tangents using the same matrix that's used to rotate normals.\r\n\r\nI've run \"TestJaime.java\" as a sanity check, however I don't see a way to test this fix. That's because I don't see how the `#if NUM_WEIGHTS_PER_VERT == 1` code in \"Skinning.glsllib\" ever gets compiled.\r\n\r\n@zzuegg could you please test this fix or explain how it should be tested?",
    "head_branch": "sgold/issue-1879",
    "is_a_fork": false,
    "comments": [
      "You are correct. I only noticed it as compilation error without having an actual test case. I suspected it is only used in super rare edge cases like single bone models.  Regarding the doc in the animation class, there should always be 4 bones and 4 weights assigned to each vertex. \r\n\r\nI am not sure whats the reason for the code to be there at all. The code in question was added in 2013. At this point i suspect there was the idea to support a variable amount of weights at some point but 4 it is since then. \r\n\r\nI also did not find a reference to NUM_WEIGHTS_PER_VERT outside of Skinning.glsllib.",
      "Unless there's something to discuss, I plan tointegrate this PR in about 24 hours."
    ],
    "commit_messages": [
      "solve issue #1879 (compile-time error in Skinning.glsllib) (#1942)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240dd3a14f302d393b266d",
    "number": 1940,
    "body": "Cleanly handle the absence of animation data in 2 places:\r\n+ in `FbxCluster.fromElement()`, create empty arrays of weights and indices\r\n+ in `FbxLoader.constructAnimations()`, skip over any animations without keyframes",
    "head_branch": "sgold/issue-1939",
    "is_a_fork": false,
    "comments": [
      "Unless there's substantial discussion, I plan to self-integrate in about 24 hours."
    ],
    "commit_messages": [
      "solve issue #1939 [NPE in FbxMesh.applyCluster()] (#1940)\n\n* FBXCluster:  create empty arrays if the cluster contains no keyframes\r\n\r\n* FbxLoader:  don't construct an animation if there are no keyframes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240dd4a14f302d393b266e",
    "number": 1938,
    "body": "The solution avoids the immediate crash and logs a warning with clues to the cause.",
    "head_branch": "sgold/issue-1937",
    "is_a_fork": false,
    "comments": [
      "Unless there's substantial discussion, I plan to self-integrate in about 24 hours."
    ],
    "commit_messages": [
      "solve issue #1937 (NPE in FbxObject) (#1938)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240dd5a14f302d393b266f",
    "number": 1936,
    "body": "Added the `isSimilar()` method to `Matrix4f` since that seems the best place for it. The implementation is closely based on that of `Vector3f.isSimilar()`.\r\n\r\nHardcoded the tolerance to `1e-6f`, even though the largest difference seen so far was `< 1e-19`. I suspect that differences smaller than `1e-6f` will be imperceptible.\r\n",
    "head_branch": "sgold/issue-1933",
    "is_a_fork": false,
    "comments": [
      "Unless there's substantial discussion, I plan to self-integrate in about 24 hours."
    ],
    "commit_messages": [
      "solve issue #1933 (unsupported operation in FbxNode) (#1936)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240dd6a14f302d393b2670",
    "number": 1934,
    "body": "Added code to the FBX importer to handle both array properties *and* multiple properties when importing:\r\n+ a bind-pose matrix\r\n+ the indices of a cluster\r\n+ the weights of a cluster",
    "head_branch": "sgold/issue-1932",
    "is_a_fork": false,
    "comments": [
      "Unless there's substantial discussion, I plan to self-integrate in about 24 hours."
    ],
    "commit_messages": [
      "solve issue #1932 (class cast exceptions in FBX importer) (#1934)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240dd7a14f302d393b2671",
    "number": 1931,
    "body": "Skip the copy if `dataIndices` is null.\r\n\r\nThis enables import of 2 models that used to crash due to issue #1930:\r\n+ \"Old_house_block_01.fbx\"  (file version 7400) and\r\n+ \"Urban_communications.fbx\" (file version 6100)",
    "head_branch": "sgold/issue-1930",
    "is_a_fork": false,
    "comments": [
      "Unless there's substantial discussion, I plan to self-integrate in about 24 hours."
    ],
    "commit_messages": [
      "solve issue #1930 (NPE in FbxLayerElement) (#1931)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240dd8a14f302d393b2672",
    "number": 1929,
    "body": "Here's a proposed fix for issue #1928.\r\n\r\n+ The constants for `BLOCK_SENTINEL_LENGTH` and `BLOCK_SENTINEL_DATA` were removed, since these values are no longer constant.\r\n+ Two new methods were added to `FbxFile` to provide values that depend on the FBX file version.\r\n+ An `FbxFile` instance was added to the arguments of `readFBXElement()`, giving the method access to the values.\r\n+ A utility method was added, to test whether a byte array contains all zeroes.",
    "head_branch": "sgold/issue-1928",
    "is_a_fork": false,
    "comments": [
      "Unless there's substantial discussion, I plan to self-integrate in about 24 hours."
    ],
    "commit_messages": [
      "solve issue #1928 (OutOfMemoryError in FBX importer) (#1929)\n\n* solve issue #1928 (OutOfMemoryError in FBX importer)\r\n\r\n* tweak the new javadoc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240dd9a14f302d393b2673",
    "number": 1927,
    "body": "This modifies buildscripts to dodge some unnecessary dependencies.",
    "head_branch": "sgold/issue-1926",
    "is_a_fork": false,
    "comments": [
      "I believe this is ready to be integrated.",
      "How can we integrate/cherry-pick this into the v3.6 branch from the GitHub web interface?",
      "I do all my cherry-picking using gitk. I've never done it using the GitHub web interface, and I'm not sure it's possible to do it that way.",
      "Ok, thanks\r\nI was able to cherry-pick this PR into the v3.6 branch using the GitHub desktop app."
    ],
    "commit_messages": [
      "resolve issue #1926 (unnecessary dependencies) (#1927)\n\n* buildscript: move def of \"niftyVersion\" to \"common.gradle\" (shared between projects)\r\n\r\n* jme3-testdata:  rm dependency on \"nifty-style-black\" (redundant with \"jme3-niftygui\")\r\n\r\n* buildscript: mv \"nifty-examples\" dependency from \"jme3-testdata\" to \"jme3-examples\""
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240dd9a14f302d393b2674",
    "number": 1924,
    "body": "Deploy OSSRH artifacts with jdk17.\r\n\r\nFix #1923 ",
    "head_branch": "fix-issue-1923",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #1923 (OSSRH artifacts are build with different java version) (#1924)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ddaa14f302d393b2675",
    "number": 1922,
    "body": "This should not break java 8 compatibility because of the \"release = 8\" compile option specified in the Gradle build. I hope!",
    "head_branch": "deploy-with-jdk17",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "main.yml: deploy with jdk17 (#1922)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ddba14f302d393b2676",
    "number": 1921,
    "body": "Updated a comment about the MetallicRoughness map that previously said the Red channel is unused - changed to instead say that the red channel of MR map can store the AO value if AoPackedInMRMap is true.",
    "head_branch": "patch-4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PBRLighting: fix comment describing packed MetallicRoughnessMap (#1921)\n\nUpdated a comment about the MetallicRoughness map that previously said the Red channel is unused - changed to instead say that the red channel of MR map stores the AO value if AoPackedInMRMap is true."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ddca14f302d393b2677",
    "number": 1920,
    "body": "When generating tangents, silently skip any meshes that do not contain triangles.\r\n\r\nMeshes whose modes are `Hybrid` or `Patch` throw an appropriate exception.",
    "head_branch": "sgold-issue1919",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "solve issue #1919 (underflow while generating tangents) (#1920)\n\n* jme-core:  add a test for issue #1919 (underflow generating tangents)\r\n\r\n* MikktspaceTangentGenerator: solve #1919 (underflow generating tangents)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ddda14f302d393b2678",
    "number": 1918,
    "body": "Fixed `JmeDesktopSystem` to duplicate the imageData buffer before converting to AWT image so changes to buffers' position, limit, and mark values will be independent.\r\n\r\nFix #1917 ",
    "head_branch": "fix-issue-1917",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #1917 (RendererException in ScreenshotAppState: Attempting to upload empty buffer) (#1918)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ddea14f302d393b2679",
    "number": 1916,
    "body": "### This PR attempts to remove the java-8 runner images since we are using gradle-7.6 with a release option 8:\r\n- [x] Removed jdk 8 runner image.\r\n- [ ] Migrate deploy to the jdk 17 image (wip).\r\n  \r\nFor more refer to the gradle docs on building jvm applications:\r\nhttps://docs.gradle.org/current/userguide/building_java_projects.html#sec:java_cross_compilation\r\n",
    "head_branch": "remove-java8-runner",
    "is_a_fork": true,
    "comments": [
      "I converted this to draft until it is completed.",
      "Finished this in #1922 ",
      "> Finished this in #1922\r\n\r\nFYI, closing others PR without their knowledge may lead to a bad impact on the engine contributors on the long run (one will think why on earth would i open a PR when someone else will do and everything will start to get teared down in the knowledge of others will do all the needed tasks, but this is not the fact), for me, it won't, but it may perceived from others as disrespect, and/or they may have another benefit thoughts, ideas or tasks to add on a WIP PR that could improve the engine productivity.....\r\n\r\nI don't think that this applies to this PR anyway, since we are just improving things related to a secondary build script, but anyway you got my point.\r\n\r\nWith your permission, i am going to review your merged PR again to give out loud my suggestions, if they are not good, no problem at all, i will keep the ideas for my projects.",
      "@Scrappers-glitch, I'm sorry about this! I agree with you that I must have asked before I wanted to close this and submit another PR, my fault. Sorry again! \r\n\r\n>With your permission, i am going to review your merged PR again\r\n\r\nSure, please let me know if I need to improve #1922. \r\nThanks"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ddfa14f302d393b267a",
    "number": 1915,
    "body": " The ReflectionAllocator uses unsafe and needs to add special flags to work on java 11+ (\"--add-opens=java.base/jdk.internal.ref=ALL-UNNAMED\", \"--add-exports=java.base/sun.nio.ch=ALL-UNNAMED\"). It might break again in the future.\r\n\r\nRelated forum post:\r\nhttps://hub.jmonkeyengine.org/t/deprecating-reflectionallocator/46350\r\n\r\nRelated issue: #1674 ",
    "head_branch": "default-buffer-allocator",
    "is_a_fork": true,
    "comments": [
      "How is the status of this pull request? We have faced the same issues in our game and looking forward for your fix. :)",
      "Hi,\r\n\r\nI am not sure when/if this would be merged but you can switch it to the primitive allocator by passing a system property:\r\n\r\n`-Dcom.jme3.BufferAllocatorImplementation=com.jme3.util.PrimitiveAllocator`\r\n\r\nby the way, if you use jme3-lwjgl3, you do not need to do this as lwjgl3 has its own allocator.",
      "Oh, I wasn't aware of the lwjgl3 option. I switched our projet to it and everything was working as before, just without the Error from the ReflectionAllocator. Thank you for this nice little hint. :D"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240de0a14f302d393b267b",
    "number": 1914,
    "body": "It added the missing natives for windows and mac.\r\n\r\nFix #1908 ",
    "head_branch": "update-lwjgl2-version",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "jme3-lwjgl: bump to lwjgl 2.9.5 (#1914)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240de1a14f302d393b267c",
    "number": 1913,
    "body": null,
    "head_branch": "add-created-by-manifest",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "common.gradle: add \"Created-By\" jar manifest to show Java version and vendor name (#1913)\n\n* common.gradle: add Created-By in jar manifest to show java version used to create the jar.\r\n\r\n* Also add vendor name."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240de2a14f302d393b267d",
    "number": 1912,
    "body": null,
    "head_branch": "jme-particle-emitter",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "ParticleEmitter: improve code readability. Apply the DRY principle (#1912)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240de3a14f302d393b267e",
    "number": 1911,
    "body": "This addresses issue #1900.\r\n\r\nThe most important implementations are those for LWJGL, which are straightforward. However, there are many other implementations of `JmeContext`, and I couldn't figure out how to obtain the desired information from all of them; exceptions are thrown in those cases.",
    "head_branch": "sgold/issue-1900",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "add 4 getters to JmeContext for screen position and frame-buffer size (#1911)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240de4a14f302d393b267f",
    "number": 1910,
    "body": "The solution is to generate a virtual index buffer if the mesh lacks an actual index buffer.",
    "head_branch": "sgold/issue-1909",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "test and fix for #1909 (NPE while generating tangents) (#1910)\n\n* add a JUnit test for issue 1909 (NPE while generating tangents)\r\n\r\n* solve issue #1909 (NPE while generating tangents)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240de5a14f302d393b2680",
    "number": 1907,
    "body": "This will keep java 8 compatibility when it is compiled with newer java versions.\r\n\r\nFix #1896 ",
    "head_branch": "fix-issue-1896-2",
    "is_a_fork": true,
    "comments": [
      "I do something similar in my library projects:\r\n```groovy\r\nsourceCompatibility = JavaVersion.VERSION_1_8\r\ntargetCompatibility = JavaVersion.VERSION_1_8\r\n\r\ntasks.withType(JavaCompile) { // Java compile-time options:\r\n    if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_1_10)) {\r\n        options.release = 8\r\n    }\r\n}\r\n```\r\n\r\nSetting `sourceCompatibility` and `targetCompatibility` covers the edge case of JDK 9."
    ],
    "commit_messages": [
      "common.gradle: set class files compatible with Java 8 using \"release\" option (#1907)\n\n* common.gradle: set class files compatible with Java 8. This will keep java 8 compatibility when it is compiled with newer java versions.\r\n\r\n* Merge with existing block.\r\n\r\n* Reformat code."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240de6a14f302d393b2681",
    "number": 1906,
    "body": "I am going to test the gradle version to which java it consumes and find an answer through github actions to suggest a fix.",
    "head_branch": "enforce-java8-build",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240de7a14f302d393b2682",
    "number": 1905,
    "body": "This PR goes along with my last PR cleaning up the AdvancedPBRTerrain.j3md shader (https://github.com/jMonkeyEngine/jmonkeyengine/pull/1904). The method getTriPlanarBlendFromTexArray() used by that shader was put into this glsllib that contains all of the other commonly used functions for the pbr terrain shaders.",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update AfflictionLib.glsllib (#1905)\n\nThis PR goes along with my last PR cleaning up the AdvancedPBRTerrain.j3md shader. The method getTriPlanarBlendFromTexArray() was put into this glsllib that contains all of the other commonly used functions for the pbr terrain shaders."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240de8a14f302d393b2683",
    "number": 1904,
    "body": "Similar to my recent pull request doing the same for the base PbrTerrain shader (https://github.com/jMonkeyEngine/jmonkeyengine/pull/1901) this PR also adds for-loop support to the advanced version of the pbr shader that uses texture arrays",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [
      "Thanks for your contribution!\r\n\r\nHave you tested this to see if the `PBRTerrainAdvancedTest` running without an issue with the new changes? ",
      "I did, but I tested it with an updated copy of that glsllib in the test cases assets directory, and I forgot change the path to point back to the proper Common/MatDefs folder where its located in jme's terrain library. \r\n\r\nI just updated this PR so it should use the proper path for both terrain shaders now, sorry for the mistake.\r\n\r\n",
      "No worries, Thanks! ",
      "I want to merge this PR and https://github.com/jMonkeyEngine/jmonkeyengine/pull/1905 in about 12H and then release alpha2."
    ],
    "commit_messages": [
      "Refactored Advanced PBR Terrain to use new for-loops (#1904)\n\n* Refactored Advanced PBR Terrain to use new for-loops\r\n\r\nSimilar to my recent pull request doing the same for the base PbrTerrain shader (https://github.com/jMonkeyEngine/jmonkeyengine/pull/1901) this PR also adds for-loop support to the advanced version of the pbr shader that uses texture arrays\r\n\r\n* Update PBRTerrain.frag\r\n\r\n* Update AdvancedPBRTerrain.frag"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240de9a14f302d393b2684",
    "number": 1902,
    "body": "We now maintain our own lwjgl2 repo: https://github.com/jMonkeyEngine/lwjgl2\r\n\r\nSee the release page for what is changed in v2.9.4\r\n\r\nFixes #1247, #1215, and partially https://github.com/jMonkeyEngine/jmonkeyengine/issues/947",
    "head_branch": "update-lwjgl2",
    "is_a_fork": true,
    "comments": [
      "Unless there's something to discuss, I plan to self-integrate this PR in about 24 hours."
    ],
    "commit_messages": [
      "jme3-lwjgl:updated to lwjgl v2.9.4 hosted by org.jmonkeyengine. Fix #1247, #1215, #947 (#1902)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240de9a14f302d393b2685",
    "number": 1901,
    "body": "Drastically reduced code by utilizing JME's new potential for define-compatible for-loops in shaders. Also cleaned up some other little things like indentations, comments, and code placement so that the code is much more organized and easier to understand. And this should also fix this issue: https://github.com/jMonkeyEngine/jmonkeyengine/issues/1785\r\n\r\nI tested the updated shader in the PBR Terrain test case as well as my main project, and encountered no errors or framerate drops. But I have not tested it on a Mac device to personally ensure it fixes issue 1785, although I expect that this PR should resolve it.\r\n\r\nIf everything looks good, I will go ahead and make a second PR with the same changes applied to the other version of the PBR terrain shader that uses TextureArrays (AdvancedPbrTerrain.j3md)\r\n\r\nI also did not refactor the .j3md file to use for-loops, only the .frag file. I considered it, and it would only take a minute if I decide to do it; however, I am not sure if reducing the code in the .j3md file is as important since it is merely a list of the MaterialParamaters, and it feels like putting the variable definitions for AlbedoMaps 0-11 into a for loop would make the .j3md harder for new users to look at and determine what params the terrain uses. But if anyone thinks otherwise feel free to speak up and I can add for-loops to reduce the code in the .j3md file as well.\r\n\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Thank you @yaRnMcDonuts ",
      "Thank you, Ryan.\r\n\r\n@Ali-RS this isn't really an enhancement. Mainly it's a fix for #1785.",
      "I plan to merge this in 24h to be available for testing in the upcoming alpha2 release."
    ],
    "commit_messages": [
      "Refactored PBR Terrain to use new for-loops. Fix #1785 (#1901)\n\nDrastically reduced code by utilizing JME's new potential for define-compatible for-loops in shaders. Also cleaned up some other little things like indentations, comments, and code placement so that the code is much more organized and easier to understand."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240deaa14f302d393b2686",
    "number": 1899,
    "body": "The order of scene-graph controls within a `Spatial` is significant because it determines the order in which their logical state is updated. Update order is particularly important in animation: trouble would ensue if `AnimComposer` came after `SkinningControl`.\r\n\r\nTo arrange controls in a particular order, currently you must add them in that order. Sometimes this is inconvenient, so (for example) `DynamicAnimControl` uses weird tricks (including reflection) to arrange controls.\r\n\r\nThis PR adds a method to the `Spatial` class to insert a control at a particular position in a spatial's control list. This is a basic building block for arranging controls.",
    "head_branch": "sgold/addControlAt",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "add the Spatial.addControlAt() method (#1899)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240deba14f302d393b2687",
    "number": 1898,
    "body": "It fallback to standard 60Hz fullscreen display mode if the specified frequency in the AppSettings is not available and logs a warning when using jme3-lwjgl.\r\n\r\nThis is a shallow fix to just get rid of the preventing exception and let the app continue running.\r\n\r\nPartially address #1890 , #947",
    "head_branch": "fix-issue-1890",
    "is_a_fork": true,
    "comments": [
      "This is a good stopgap. Even better would be to implement a wild-card value (such as -1) for `bpp` and `freq` that could be passed to `getFullscreenDisplayMode()` to match any bpp/frequency.",
      "done",
      "Made a few changes.",
      "I like this solution. Before you integrate this, please add method javadoc for `getFullscreenDisplayMode()` to explain how the wildcards work.",
      "done",
      "Unless there's substantial discussion, I plan to integrate this in about 24 hours."
    ],
    "commit_messages": [
      "Fix #1890 (crashes attempting to run example apps in fullscreen with LWJGL v2) (#1898)\n\n* jme3-lwjgl:fallback to standard 60Hz fullscreen display mode if the specified frequency in the AppSettings is not available and log a warning.\r\n\r\n* Fallback to whatever bps or frequency is available. Added a wild-card value to let selecting any bps or frequency available by passing -1.\r\n\r\n* Support AWT display frequency model. Looks like AWT uses mathematics round to convert float frequency values to int while lwjgl 2 uses mathematics floor. For example if frequency is 59.83, AWT will return 60 but lwjgl 2 will return 59.\r\n\r\n* Remove redundant check.\r\n\r\n* Added documentation for getFullscreenDisplayMode method."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240deca14f302d393b2688",
    "number": 1897,
    "body": "I hope it fixes issue #1896.",
    "head_branch": "fix-issue-1896",
    "is_a_fork": true,
    "comments": [
      "Ehm..., why build stuck on windows jdk11!",
      "Ok, \r\n\r\n>I hope it fixes issue https://github.com/jMonkeyEngine/jmonkeyengine/issues/1896.\r\n\r\nIt does. I grabbed the maven artifacts uploaded on GitHub actions and it works fine on java 8.\r\n",
      "Unless there's something to discuss, I plan to self-integrate this PR in about 12 hours.",
      "tbh this is very dubious _and_ we had that discussion somewhere (apparently after) java 11.\r\nIt may be worth checking the hub on what we've written back then.\r\n\r\nTo me, this is a clear ABI (binary) breakage (code will always compile, because \"buf.flip()\" will _either_ compile to FloatBuffer#flip or Buffer#flip.).\r\nWe should check the generated IL in the class files, to see how they differ, but if changing the java distribution changes something, that's an even more severe bug.\r\n\r\nI don't know the IL in question well enough, but I think in C#, there's explicit method references (so if you compile against Buffer#flip, it will execute that, even if you override the method). That would be even more dangerous, if it would skip the implementation of FloatBuffer#flip at runtime.\r\n\r\nSo TLDR is: I think we should take some time to investigate and solve this properly, as this has implications:\r\n- For jme in general\r\n- For my lwjgl2 build (that's why I don't believe we can compile with java 8 and use it on 17 or vice versa).\r\n- The only potential solution would be multiple BufferUtils impls compiled with different versions.\r\n\r\nAlso it doesn't seem to be exactly java 11, but between 11 and 17:\r\nhttps://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/nio/FloatBuffer.html#flip()\r\nhttps://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/FloatBuffer.html -> see Methods declared in java.nio.Buffer -> https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/Buffer.html#flip()",
      "tbh a completely different question would be dropping java 8 and 11 support, because 8 only has paid support, 11 will have less than half a year support, no one should start a new project not using java 17.\r\nThe only counter argument would be android and potentially web transpilers, but I guess android also isn't stuck on java 8 completely, actually you can't really translate them between versions.",
      "We discussed dropping Java 8 during the 3.5 release, and I decided to defer that change. As far as I'm concerned, that option is still on the table for the 3.6 release.\r\n\r\n> no one should start a new project not using java 17\r\n\r\nFor application projects, I agree. For libraries, using older Java provides compatibility benefits.\r\n\r\n> 8 only has paid support, 11 will have less than half a year support\r\n\r\nI don't understand what you mean here. According to [Wikipedia](https://en.wikipedia.org/wiki/Java_version_history) many vendors plan to provide paid support for Java 8 SE until 2026 or later.\r\n",
      ">So TLDR is: I think we should take some time to investigate and solve this properly, as this has implications:\r\n\r\nWell, I believe this not only affects us but will break everyone's app using java ByteBuffer in their app and compile it with Azul OpenJDK8.\r\n\r\n>dropping java 8 and 11 support\r\n\r\nAfter seeing this mess, I completely agree with dropping java 8 and 11 and moving to 17 and I believe this should be no issue for android and lwjgl2 anymore (now that we fixed lwjgl2 to run on newer java). I have previously been able to compile with java 17 using new language features on android 4.1+ using android desugaring.\r\n\r\nBut I am sure there will be opposing opinions about this and I do want core devs to decide about this so I can not do much at this point.\r\n\r\nBut we need to discuss this in another thread.",
      "Apparently, this still happens with the alpha2 release, my bad!\r\n\r\nhttps://hub.jmonkeyengine.org/t/next-engine-release/46314/14?u=ali_rs"
    ],
    "commit_messages": [
      "main.yml: use \"temurin\" openjdk. Fix #1896 (#1897)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240deda14f302d393b2689",
    "number": 1895,
    "body": "I've tested this with windowed and full-screen contexts, with LWJGL v2 and v3.",
    "head_branch": "sgold/issue-1891",
    "is_a_fork": false,
    "comments": [
      "Thanks",
      "Unless there's something to discuss, I plan to integrate this PR in about 24 hours."
    ],
    "commit_messages": [
      "jme3-niftygui: solve issue #1891 (incorrect fullscreen layout)  (#1895)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240deea14f302d393b268a",
    "number": 1894,
    "body": "When implementing a graphical user interface, it's sometimes necessary to send notifications to the system listener. However, there is no API to access the listener.\r\n\r\nThis PR adds a getter, allowing applications to access the listener.",
    "head_branch": "sgold/getSystemListener",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "JmeContext:  add a getSystemListener() method (#1894)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240defa14f302d393b268b",
    "number": 1893,
    "body": "Happens that java 8 adds \"/\" at the end of the directory name when reading from the jar filesystem. This patch checks if there is a \"/\" appended at the end of the directory name and removes it!\r\n\r\nResolves issue #1892",
    "head_branch": "fix-issue-1892",
    "is_a_fork": true,
    "comments": [
      "Unless there's something to discuss, I plan to self-integrate this PR in about 24 hours."
    ],
    "commit_messages": [
      "Fix #1892 (TestChooser does not show classes list when run with java 8) (#1893)\n\n* TestChooser:fix class list not showing when run with java 8.\r\n\r\n* Update copyright date."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240df0a14f302d393b268c",
    "number": 1889,
    "body": "Fix the wrong particle position when using the `EmitterMeshVertexShape` or `EmitterMeshFaceShape` and `worldSpace` flag equal to true. The old code was interpolating particles' position toward the emitter world position and this was only working fine for EmitterPointShape but in the other shapes, this was causing particles to not keep the shape because they were being dragged toward the emitter position. The new code calculates the distance vector from the emitter's last location to the current emitter location and subtracts it from the particle's position to generate a hypothetical position that is used for interpolation. \r\n\r\nResolves issue #1773 ",
    "head_branch": "fix-issue-1773",
    "is_a_fork": true,
    "comments": [
      "Unless there's something to discuss, I plan to self-integrate this PR in about 24 hours. ",
      "Please hold off until I complete my review.",
      "When I run the test with `motionControl.setSpeed(240f)`, many of the particles appear to be near the center of the loop, where the emitter never goes. Why is that?\r\n\r\nThe documentation for `TestIssue1773` should explain how to test for the bug. How does one determine whether the issue has been reproduced or not?\r\n\r\nPlease apply our preferred style to the new source file \"TestIssue1773.java\". In particular:\r\n+ 3.3.3.2: All non-static imports in a single block.\r\n+ 7.2: Each [required] Javadoc block begins with a brief summary fragment.",
      ">When I run the test with motionControl.setSpeed(240f), many of the particles appear to be near the center of the loop, where the emitter never goes. Why is that?\r\n\r\nI don't know, I believe this has nothing to do with my change as it can be produced with the old code too. I guess this fault has something to do with \"MotionControl\".\r\n\r\n",
      ">The documentation for TestIssue1773 should explain how to test for the bug. How does one determine whether the issue has been reproduced or not?\r\n\r\nAdded the requested documentation."
    ],
    "commit_messages": [
      "Fix #1773 (Wrong particle position when `worldSpace` flag equals to true) (#1889)\n\n* Add test case for issue #1773.\r\n\r\n* Fix wrong particle position when using 'EmitterMeshVertexShape' or 'EmitterMeshFaceShape' and worldSpace flag equal to true. The old code was interpolating particles position toward emitter world position and this was only working fine for EmitterPointShape and in the other shapes this was causing particles not keep the shape because they were being dragged toward emitter position. The new code calculates the distance vector from emitter last location to the current emitter location and subtracts it from particles position to generate a hypothetical position that is used for interpolation.\r\n\r\n* Add javadoc to TestIssue1773.\r\n\r\n* Minor javadoc fix."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240df1a14f302d393b268d",
    "number": 1888,
    "body": "This ensures they show up correctly, as the VRAppState uses totally separate cameras and viewports to the normal JME flow\r\n\r\nResolves issue [#1795](https://github.com/jMonkeyEngine/jmonkeyengine/issues/1795) ",
    "head_branch": "#1795_Bullet_debug_does_not_work_in_VR",
    "is_a_fork": true,
    "comments": [
      "@richardTingle thanks for your contribution.\r\n\r\nCan you please fix the formatting issues? \r\nAdd white space in `){`, `try{`, and `}else{`",
      "Sure @Ali-RS, done",
      "Thanks",
      "Unless there's substantial discussion, I plan to integrate this in about 24 hours.",
      "> Unless there's substantial discussion, I plan to integrate this in about 24 hours.\r\n\r\nNot sure if you saw, but in the related issue https://github.com/jMonkeyEngine/jmonkeyengine/issues/1795 [stephengold](https://github.com/stephengold) mentioned that he is happy for these changes to be integrated.\r\n\r\nBased on conversation in 1795 I've added a comment on why the VR and non-VR implementations are so different \"This is a less good solution than the non-vr version (as the debug shapes can be obscured by the regular geometry), however it is the best possible as VR does not currently support multiple viewports per eye\""
    ],
    "commit_messages": [
      "When in VR attach the debug scene to the two eye's scenes. Fix#1795  (#1888)\n\n* #1795 When in VR attach the debug scene to the two eye's scenes\r\n\r\nThis ensures they show up correctly\r\n\r\n* #1795 Whitespace corrections\r\n\r\n* #1795 Further whitespace corrections\r\n\r\n* #1795 Yet more whitespace corrections\r\n\r\n* #1795 Add explanatory comment as to why VR and non-VR have totally different approaches"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240df2a14f302d393b268e",
    "number": 1886,
    "body": "Now each GltfLoader instantiated via ThreadLocal will have its own instances of extension loaders.",
    "head_branch": "fix-issue-1809",
    "is_a_fork": true,
    "comments": [
      "Unless there's something to discuss, I plan to self-integrate this PR in about 24 hours."
    ],
    "commit_messages": [
      "Made extension loaders non-static to avoid concurrency issues (#1886)\n\nNow each GltfLoader instantiated via ThreadLocal will have its own instances of extension loaders."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240df3a14f302d393b268f",
    "number": 1885,
    "body": "If we pass null for `int[] mipMapSizes` argument in the second constructor, this will wrongly set `mipsWereGenerated` flag to true. Fixed it to behave like the first constructor.\r\n\r\nFixes #1883",
    "head_branch": "fix-issue-1883",
    "is_a_fork": true,
    "comments": [
      "Unless there's something to discuss, I plan to self-integrate this PR in about 24 hours."
    ],
    "commit_messages": [
      "Fix #1883 (Image class wrongly setting GL mips flags inside the constructor) (#1885)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240df4a14f302d393b2690",
    "number": 1884,
    "body": "Updated J3MLoader to read texture mips generation flag from MinFilter. If no min filter is specified, texture will use the `BilinearNoMipMaps` by default.\r\n\r\nFixes #1882",
    "head_branch": "fix-issue-1882",
    "is_a_fork": true,
    "comments": [
      ">If no min filter is specified, texture will use the BilinearNoMipMaps by default.\r\n\r\nOk, I changed this for backward compatibility reasons. If no min filter is specified inside the j3m file then the Trilinear filter will be used by default.\r\n\r\nRead more about the issue here: https://hub.jmonkeyengine.org/t/j3mloader-always-generates-mips-ignoring-minfilter-bug/46296/32?u=ali_rs",
      "Unless there's substantial discussion, I plan to integrate this in about 24 hours."
    ],
    "commit_messages": [
      "Fix #1882 (J3MLoader always generates mips ignoring MinFilter) (#1884)\n\n* Get texture mips generation flag from MinFilter specified in j3m file.\r\n\r\n* Update copyright date.\r\n\r\n* Fix J3MLoaderTest failing.\r\n\r\n* Fix TestMaterialWrite failing.\r\n\r\n* Update copyright date.\r\n\r\n* Use Trilinear if no min filter is specified in j3m file.\r\n\r\n* Add copyright note in J3MOutputCapsule.\r\n\r\n* Fix J3MLoaderTest failing."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240df5a14f302d393b2691",
    "number": 1881,
    "body": "I happened to spot a small mistake in the following commit: https://github.com/jMonkeyEngine/jmonkeyengine/commit/9d5eeee8923c27495c948be7e7c91276e739da51\r\nBased on the assertion in the method and the fact that the default value is 1, it's clear that the 0 and 1 bounds are inclusive.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Nice catch, thank you @mrxz!\r\n\r\nAside from that, I am also not sure why I used `assert` instead of `IllegalArgumentException` back then. It's my bad:man_facepalming: \r\n\r\nWould you mind please removing `assert` and instead threw an  `IllegalArgumentException`? ",
      "> Would you mind please removing assert and instead threw an IllegalArgumentException?\r\n\r\nDone. ",
      "Thanks",
      "Unless there's substantial discussion, I plan to integrate this in about 24 hours."
    ],
    "commit_messages": [
      "BlendableAction: Fix JavaDoc for setMaxTransitionWeight & replace assert with IllegalArgumentException (#1881)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240df6a14f302d393b2692",
    "number": 1880,
    "body": "This is an update for the glTF loader to be able to detect that an occlusion texture is packed in the metallic-roughness texture, so the loader can enable the `AoPackedInMRMap` parameter from the material and avoid double-loading the same texture.\r\n\r\nThe update consists of few lines added to `GltfLoader` that retrieve the `index` (if any) of each texture from the glTF model and compare them: if they exist and are the same, `AoPackedInMRMap` will be enabled and no texture will be loaded for occlusion. \r\n\r\nSee for example the WaterBottle test model:\r\nhttps://github.com/KhronosGroup/glTF-Sample-Models/blob/master/2.0/WaterBottle/glTF/WaterBottle.gltf\r\n\r\n```\r\n  \"materials\": [\r\n    {\r\n      \"pbrMetallicRoughness\": {\r\n        \"baseColorTexture\": {\r\n          \"index\": 0\r\n        },\r\n        \"metallicRoughnessTexture\": {\r\n          \"index\": 1\r\n        }\r\n      },\r\n      \"normalTexture\": {\r\n        \"index\": 2\r\n      },\r\n      \"occlusionTexture\": {\r\n        \"index\": 1\r\n      },\r\n      \"emissiveFactor\": [\r\n        1.0,\r\n        1.0,\r\n        1.0\r\n      ],\r\n      \"emissiveTexture\": {\r\n        \"index\": 3\r\n      },\r\n      \"name\": \"BottleMat\"\r\n    }\r\n  ],\r\n```\r\n\r\nIn the glTF code, when AO map is packed in MR map, the `index` value for `\"occlusionTexture\"` is the same as the `index` value for `\"metallicRoughnessTexture\",` which means that they refer to the same texture image. Note that the clauses `\"pbrMetallicRoughness\"` and `\"occlusionTexture\"` can appear in any order.\r\n\r\nThis PR resolves Issue #1412.",
    "head_branch": "AoPackedInMRMap",
    "is_a_fork": true,
    "comments": [
      "Thank you @manuelrmo",
      "Unless there's something to discuss, I plan to self-integrate this PR in about 24 hours."
    ],
    "commit_messages": [
      "Fix #1412 (GltfLoader does not support AO packed in MetallicRoughnessMap) (#1880)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240df7a14f302d393b2693",
    "number": 1876,
    "body": "This integrates the changes that @riccardobl contributed in PR #1748, which unfortunately has tricky merge conflicts.",
    "head_branch": "pr/1748",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "move SettingsDialog and ErrorDialog to new jme3-awt-dialogs module (#1876)\n\n* Refactory Settings/Error dialogs in JmeDialogsFactory and jme3-awt-dialogs\r\n\r\n* add build.gradle\r\n\r\n* Add copyright headers\r\n\r\n* Fix formatting and documentation\r\n\r\nCo-authored-by: riccardobl <riccardo0blb@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240df8a14f302d393b2694",
    "number": 1873,
    "body": "Fixes #1871\r\n\r\nWith @Ali-RS doing the heavy lifting, this was very trivial to figure out. We just read the wrong amount of bytes when reading as float from arrays of short. Tested with the Duck and the Girl supplied in the issue. Both still work. Only the Girl has these normalized ushort float buffers though.",
    "head_branch": "bugfix/issue-1871",
    "is_a_fork": true,
    "comments": [
      "Nice.",
      "Thanks @tonihele ",
      "I'll merge this in roughly 8 hours."
    ],
    "commit_messages": [
      "Merge pull request #1873 from tonihele/bugfix/issue-1871\n\nFix #1871 (vertex colors not loaded in gltf models)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240df8a14f302d393b2695",
    "number": 1872,
    "body": "I have added the null light filter to all shadow map generators. \r\nFurther investigation is needed to see where else it can be applied",
    "head_branch": "Fix_lightfilter",
    "is_a_fork": true,
    "comments": [
      "Thanks, it looks good to me.",
      "@zzuegg I plan to merge this but before that, have you tested this with some of the JME shadow examples? just to make sure nothing is broken.",
      "I have run all the tests that include *shadow* in the name at least 1trillion time in the last weeks. The only problem was that i accidentally had checked out 3.3 as my master. Since i forgot to update my github fork. Let me check if there where any relevant changes since 3.3. I do not expect any issues since after updating all works the same but i have to make sure. Tomorrow evening i have time for this",
      "Did not notice any regressions. Good to go from my side",
      "Thanks"
    ],
    "commit_messages": [
      "Fix #1867 (LightFilter gets applied even if not needed) (#1872)\n\n* Add NullLightFilter.java\r\n\r\n* Add usage of null light filter when rendering shadowmaps\r\n\r\n* Fix formatting\r\n\r\n* Make static NullLightFilter final\r\n\r\n* Fix formatting and author"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240df9a14f302d393b2696",
    "number": 1869,
    "body": "Implementation of a glTF extension loader for KHR_texture_transform, which allows for UV coordinates to be scaled/rotated/translated based on transformation properties from textures in the glTF model.\r\n\r\nThe extension will avoid the following warning messages:\r\n\r\nExtension KHR_texture_transform is not supported, please provide your own implementation in the GltfModelKey\r\nExtension KHR_texture_transform is mandatory for this file, the loaded scene result will be unexpected.\r\nCould not find loader for extension KHR_texture_transform",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Thanks for your contribution\r\n\r\nCan you test if the extension loader works fine in multithreaded asset loading?\r\n\r\nFrom a quick look, it seems it caches some state, which might get corrupted in multithreaded loading \r\n\r\n```\r\n    private Geometry geomLast = null; // Last geometry created by the GltfLoader.class object\r\n    private Matrix3f mInvLast = null; // Last transformation matrix (inverted) that was applied\r\n```\r\n\r\nAssetManager supports concurrent asset loading and in the case of Gltf models, it will instantiate a new instance of GltfLoader for each thread (using ThreadLocal) but I noticed the CustomContentManager used inside GltfLoader registers the extension loaders statically (in the `defaultExtensionLoaders`) this implies that extension loaders must be thread-safe (because they are shared with GltfLoaders across threads) or otherwise, we should make the `defaultExtensionLoaders` non-static. \r\n\r\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/ceb356462aeedf7769dced52e1d5572b01deca31/jme3-plugins/src/gltf/java/com/jme3/scene/plugins/gltf/CustomContentManager.java#L54-L60\r\n\r\n",
      "I also noticed `MaterialAdapter` that is used by other extension loaders (like PBRSpecGlossExtensionLoader & UnlitExtensionLoader) also is not thread-safe and keeps an internal state which will break if used across multiple threads.\r\n\r\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/ceb356462aeedf7769dced52e1d5572b01deca31/jme3-plugins/src/gltf/java/com/jme3/scene/plugins/gltf/MaterialAdapter.java#L51-L56\r\n\r\nSo my suggestion is to simply make `defaultExtensionLoaders` inside CustomContentManager non-static so each GltfLoader per thread will have its own instance of extension loaders not shared with other threads. This is better done in a separate PR in a similar approach to this: https://github.com/jMonkeyEngine/jmonkeyengine/pull/1810\r\n",
      "Looks fine to me. Thanks @manuelrmo \r\n\r\nLet's keep this open for a few more days in case someone else wants to take a look.",
      "Great, thanks for your help.",
      "The extension loader passes the Texture Transform Test from KhronosGroup/glTF:\r\nhttps://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/TextureTransformTest\r\n\r\n![test](https://user-images.githubusercontent.com/118840772/204991144-9e6eddfc-98a2-40ed-a604-5acf110b517f.PNG)\r\n\r\n",
      "The extension loader passes the Texture Transform Multi Test from KhronosGroup/glTF:\r\nhttps://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/TextureTransformMultiTest\r\n\r\nNotes:\r\n- JME has no KHR_materials_clearcoat extension loader\r\n- JME renderer does not seem to support TEXCOORD_1 coordinates (UV 1)\r\n\r\n![CaptureMultiTest](https://user-images.githubusercontent.com/118840772/205386629-e2396329-edd8-4287-8d59-468140808d35.PNG)\r\n",
      ">JME renderer does not seem to support TEXCOORD_1 coordinates (UV 1)\r\n\r\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/55574561cfcacf0b7b33358330528061b3fd4c42/jme3-plugins/src/gltf/java/com/jme3/scene/plugins/gltf/GltfUtils.java#L135-L136\r\n\r\nI think it is used for lightmap\r\n\r\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/52568d76ffec063355bcff515066cb75887baf34/jme3-core/src/main/resources/Common/MatDefs/Light/PBRLighting.j3md#L68-L72",
      "> I think it is used for lightmap\r\n\r\nCorrect, it is used for LightMap which is shared with AOMap, see the screenshot below after enabling SeparateTexCoord. \r\n\r\nSo it seems that the JME loader ignores the glTF setting asking to use TEXCOORD_1 for the UVs, and the JME renderer will use TEXCOORD_0 by default. \r\nFor LightMap/AOMap, the user still has a chance to edit the material later and enable SeparateTexCoord to use UVs from TEXCOORD_1.\r\n\r\n![CaptureMultiTest2](https://user-images.githubusercontent.com/118840772/205454691-e1c41d82-b6f1-45eb-9521-d902f3e4bd90.PNG)\r\n",
      "I am still not sure I understand the latest change, would you mind explaining it? ",
      "The update allows to have different transformations for the same mesh as long as they apply to different UVs. For example, for a given mesh, one could scale its UVs from TEXCOORD_0 and rotate its UVs from TEXCOORD_1. ",
      "@manuelrmo is this PR ready to be merged?",
      "Yes, thank you",
      "Ok, unless there's substantial discussion, I plan to integrate this in about 24 hours."
    ],
    "commit_messages": [
      "Implementation of a glTF extension loader for KHR_texture_transform (#1869)\n\n* Implementation of a glTF extension loader for KHR_texture_transform\r\n\r\n* Thread-safe version of the glTF extension loader for KHR_texture_transform\r\n\r\n* Updated thread-safe version of the glTF extension loader for KHR_texture_transform\r\n\r\n* Fix (switched indices of the translation matrix): thread-safe version of the glTF extension loader for KHR_texture_transform\r\n\r\n* Added support for texCoord, fixed matrix comparison\r\n\r\n* Simplified matrix comparison, removed trailing whitespaces\r\n\r\n* Update to differentiate transformations applied to different UV sets\r\n\r\n* Improved memory usage for transformMap\r\n\r\n* Specified Map generic types & removed unnecessary cast\r\n\r\nCo-authored-by: Manuel <Manuel@DESKTOP-6RJH3UF>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240dfaa14f302d393b2697",
    "number": 1868,
    "body": "Would this be acceptable solution for now? If we open another ticket to implement this for real?\r\n\r\nThis would fix https://github.com/jMonkeyEngine/jmonkeyengine/issues/1192 and also TestAwtPanels. The performance is not great.. not terrible...\r\n\r\nI tried getting https://github.com/LWJGLX/lwjgl3-awt to work but didn't get it display anything yet.\r\n\r\nThe problem with this solution is that it is pretty much software rendering. The rendering is first done to a Framebuffer as it is recommended. But then everything goes bad, we just render it to an image (I guess slightly accelerated but...) for displaying it to the user. And another problem is that it requires support for non power of two textures.\r\n\r\nThis is basically copy paste from what we already had in the engine, the Offscreen rendering to an AWT panel.",
    "head_branch": "Lwjgl3Canvas",
    "is_a_fork": true,
    "comments": [
      "Thank you for the PR. \r\n\r\n> Would this be acceptable solution for now? If we open another ticket to implement this for real?\r\n\r\nYes, I think this is the least sketchy way to get this to work reliably, other solutions can be implemented as optimization for specific platforms (eg. i see lwjgl3-awt works only on linux systems that use X11).\r\n\r\nAlso this should probably work well  in most systems.\r\n\r\nI have 2 questions:\r\n\r\n1. What is the deal with all the changes to Lists?\r\n2. Is it possible to remove the non-power-of-two requirement by rounding the sizes to the nearest power of two? (it will introduce some cropping, yes, but it should probably be fine i think)\r\n\r\n\r\n",
      "> * What is the deal with all the changes to Lists?\r\n> \r\n> * Is it possible to remove the non-power-of-two requirement by rounding the sizes to the nearest power of two? (it will introduce some cropping, yes, but it should probably be fine i think)\r\n\r\n1. It is just cleanup, aren't we all taught to program with interfaces? :) Well, I intended to actual have the event queues be queues, but I changed my mind as it would achieve nothing. In sense of clarity or performance the same, so then I just left them as cleanups. Irrelevant changes.\r\n\r\n2. Can be done, also in such matter that our Offscreen rendering would also be void of this requirement. Perhaps in such manner that the capability is checked against and a proper strategy is then used.",
      "> It is just cleanup, aren't we all taught to program with interfaces? :) Well, I intended to actual have the event queues be queues, but I changed my mind as it would achieve nothing. In sense of clarity or performance the same, so then I just left them as cleanups. Irrelevant changes.\r\n\r\nOk, i was questioning the use of Deque vs List, but i've seen now that you did that to use poll(). Ok then.\r\n\r\n>  Can be done, also in such matter that our Offscreen rendering would also be void of this requirement. Perhaps in such manner that the capability is checked against and a proper strategy is then used.\r\n\r\nYep, should be easy enough, since we have already a capability registered for that. Do you plan to address it in this PR or would you like to do it at a later time? Non-power-of-two textures should be supported by the vast majority of GPUs anyway, so we could also decide to leave it like that for now.. and just merge this PR\r\n",
      "> Yep, should be easy enough, since we have already a capability registered for that. Do you plan to address it in this PR or would you like to do it at a later time? Non-power-of-two textures should be supported by the vast majority of GPUs anyway, so we could also decide to leave it like that for now.. and just merge this PR\r\n\r\nI would do additional issues. Not this PR. The following issues would be created:\r\n\r\n1. The non-power of two issue is existing issue with the offscreen rendering, create issue for it\r\n2. Implement HW accelerated Lwjgl3 Canvas\r\n\r\n1 & 2 can be handled then separately without applying any pressure on one another. And if 2 is done before, well, that is all good then, canvas works.\r\n\r\nAlso there are issues about the scaling and canvas. That should be taken into consideration when touching issue number two.",
      "What is the state of this PR?\r\nShould this become a candidate for the next release?\r\nIs anybody willing to review and possibly merge it?",
      "> What is the state of this PR? Should this become a candidate for the next release? Is anybody willing to review and possibly merge it?\r\n\r\nIt is ready.\r\n\r\nWhat it is, is a poor solution to something that currently doesn't work at all. With this it works. Usability depends largely on what it is being used for, i.e. gaming, not feasible; using LWJGL 3 and a small 3D canvas in your app, feasibleish. There is the test canvas test app for this. \r\n\r\nEven I'm on the fence with this one. My small hope was that we could use LWJGL 3 with the jME SDK with this. But I don't know if this even really makes it possible. SDK rendering at least would need so little power that in that way this would work.\r\n\r\nFuture development needed as stated above.",
      "Would if be possible to add a short Javadoc comment explaining what/when this is used? IIUC, it's to allow lwjgl to render a scene to an AWT component, but lack of Javadoc is an ongoing pain-point for me with JME.",
      "> Would if be possible to add a short Javadoc comment explaining what/when this is used? IIUC, it's to allow lwjgl to render a scene to an AWT component, but lack of Javadoc is an ongoing pain-point for me with JME.\r\n\r\nThe code is self-doc... :D As far as I know it is indeed used to render jME context inside an AWT component. Would that itself be a suffice explanation?",
      "Sorry, I thought I had responded. Yeah, Just a one-liner stating the use. Most of the methods seem to be `@Overrides` anyway, so they are presumably documented further up the tree.\r\n\r\nI am wondering if `drawFrameInThread()` and `destroyFrameBuffer()` are intended to be called from user code, or if they are marked `public` to allow some of the existing machinery to trigger them. If the later, a doc-comment warning that they should not be called directly might be in order."
    ],
    "commit_messages": [
      "Lwjgl3 canvas (#1868)\n\n* Fix offscreen rendering by not triggering unnecessary resize\r\n\r\n* Not title\r\n\r\n* Better javadoc\r\n\r\n* Modernize the code a bit\r\n\r\n* Modernize the code a bit\r\n\r\n* Don't init GLWF controllers (same as LWJGL 2)\r\n\r\n* Finals and interfaces\r\n\r\n* Java2D graphics based offscreen rendering Canvas solution\r\n\r\n* Import desktop"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240dfba14f302d393b2698",
    "number": 1866,
    "body": "Hey. \r\n\r\nLong time since my last change to the engine. Here we go. \r\nThis fix makes the stencil functions usable. They where hard coded to 0 as reference and Integer.MaxValue as mask\r\n\r\nThis fix does not change the old behavior. If you do not change them manually they are still 0/Max",
    "head_branch": "FixStencilReferenceAndMask",
    "is_a_fork": true,
    "comments": [
      "Thanks for your contribution @zzuegg.\r\n\r\nJust in case, when merging please use the \"Squash and merge\" option to merge, so all 5 commits will be combined into a single commit in the master branch.",
      "Should i merge, or let someone of the team do it?",
      ">or let someone of the team do it?\r\n\r\nwell, it might take forever...\r\n\r\nI think this is a relatively simple change and does not require much input from other members but I would suggest letting it be open for a few days for other folks to have a chance to take a look and if there was no substantial discussion you can self-integrate it.",
      "Perfect. Thank you",
      "I will appreciate it if you also update the copyright year in the modified classes.",
      "I notice that both stencil masks have 0x7fffffff as their default values. Was this intentional? Naively, I would've expected 0xffffffff ...",
      "To be honest i copied over the values used prior to my changes without thinking about the actual bits. Nice catch. \r\n\r\nIn this case (and i have rechecked the gl specs now) there are only images formats specified with stencil width of 8 bits.  So we have \"no mask\" by default. "
    ],
    "commit_messages": [
      "Fix: make the stencil test functions usable. (#1866)\n\n* Fix: make the stencil test functions usable.\r\n\r\n* Fix: formatting\r\n\r\n* Fix: formatting\r\n\r\n* Fix: formatting\r\n\r\n* Fix: copyright year"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240dfca14f302d393b2699",
    "number": 1865,
    "body": "By default, InstancedGeometry was culling instances that were outside camera frustum and this was causing the shadow to disappear on instances away from the camera. See https://hub.jmonkeyengine.org/t/shadow-disapeared-on-instanced-objects-away-from-camera/46174\r\n\r\nI introduced an instance culling function that can be switched or unset. The default implementation checks against camera frustum and does not consider shadow at all. Users wanting proper shadows would have to implement a function that took shadow light frustums into account before culling or otherwise they can unset the function to disable instance culling and it will resolve the shadow issue.",
    "head_branch": "instancing-shadow",
    "is_a_fork": true,
    "comments": [
      "Unless there's something to discuss, I plan to self-integrate this PR in about 24 hours."
    ],
    "commit_messages": [
      "Add instance culling function in InstancedGeometry (#1865)\n\n* Added a workaround to prevent shadow disappearing on instanced geometries away from camera by introducing an instance culling function on InstancedGeometry. There also is a default implementation provided.\r\n\r\n* Removed the bound-scale hack for shadow disappearing issue from DefaultInstanceCullingFunction. The “right” solution is to have it pay attention to the frustums of whatever shadow-casting lights are around… but anyway developers now can implement their own frustum culling however they like or even \"unset\" it to disable instance culling which should also resolve the shadow issue.\r\n\r\n* Remove unused imports."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240dfda14f302d393b269a",
    "number": 1858,
    "body": "### Docs - style\r\n* Fixed broken link in the `README.md` file.\r\n\r\nRelated issue: #1857\r\n\r\nCloses: #1857\r\n\r\nIf possible I would like to do this here fix as part of the \"Hacktoberfest\".  I guess that we need to add a tag that it is accepted as such if that is ok?\r\n",
    "head_branch": "fix-broken-link",
    "is_a_fork": true,
    "comments": [
      "well, i am merging this as usual, but i am not sure if this will count toward the Hacktoberfest goal since it is just a small change"
    ],
    "commit_messages": [
      "fix: broken link in README.md (#1858)\n\nSigned-off-by: Kasper Aaquist Johansen <kasperaaquist@gmail.com>\r\n\r\nSigned-off-by: Kasper Aaquist Johansen <kasperaaquist@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240dfea14f302d393b269b",
    "number": 1855,
    "body": "Rename source file header template",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "@stephengold one build step failed for no obvious reason. Could you trigger a re-start, please.",
      "Is anything else needed to be done from my side here? \r\n\r\nIf not and this can't merged right now, would you be so kind and add at least the label \"hacktoberfest-accepted\" to this pull request, please?",
      "@riccardobl this is a Hacktoberfest PR. Please review it and respond to the submittor.",
      "> Is anything else needed to be done from my side here?\r\n> \r\n> If not and this can't merged right now, would you be so kind and add at least the label \"hacktoberfest-accepted\" to this pull request, please?\r\n\r\nMerged. Thank you for taking the time to figure this out. \r\n\r\n"
    ],
    "commit_messages": [
      "#1569 Fix license file to be better detected by GitHub (#1855)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240dffa14f302d393b269c",
    "number": 1851,
    "body": "…xception)\r\n\r\nIt uses the existing `ImageToAwt` utility class to convert the JME image to an AWT image. One thing to note is that because image color space is not passed in the method and thus it is not possible to guess it so by default it uses Linear color space.",
    "head_branch": "image-write",
    "is_a_fork": true,
    "comments": [
      "I would appreciate it if someone else (other than me) can also review this PR.\r\n\r\nTested with ScreenshotAppState and with an image generated in code and it works fine.\r\nAlso, transparency is preserved when exporting to PNG. The input image data must be in RGBA8 as noted in `JmeSystem.writeImageFile()` Javadoc. If the image is in another format one can use ImageRaster to convert it to an RGBA8 image. (or as proposed by Momoko_Fan [here](https://hub.jmonkeyengine.org/t/exporting-image-as-png/38595/8?u=ali_rs), we can also add a new method `JmeSystem.writeImageFile(OutputStream outStream, String fileFormat, Image image)` that instead of a ByteBuffer, it takes an Image object as its input and converts it to RGBA8 image (if it is not in RGBA8 format) using ImageRaster before delegating it to `JmeSystemDelegate`).\r\n\r\nThe test code:\r\n \r\n```\r\npublic class TestImageWrite extends SimpleApplication {\r\n\r\n    public static void main(String[] args) {\r\n        new TestImageWrite().start();\r\n    }\r\n\r\n    @Override\r\n    public void simpleInitApp() {\r\n\r\n        ByteBuffer data = BufferUtils.createByteBuffer(512 * 512 * 4);\r\n        Image image = new Image(Image.Format.RGBA8, 512, 512, data);\r\n        Texture texture = new Texture2D(image);\r\n        ImageRaster raster = ImageRaster.create(texture.getImage());\r\n        for (int h = 0; h < texture.getImage().getHeight(); h++) {\r\n            for (int w = 0; w < texture.getImage().getWidth(); w++) {\r\n                raster.setPixel(w, h, ColorRGBA.Blue);\r\n                //raster.setPixel(w, h, ColorRGBA.BlackNoAlpha);\r\n                //raster.setPixel(w, h, ColorRGBA.Orange);\r\n            }\r\n        }\r\n\r\n        File f = new File(\"/home/ali/Desktop/test.png\");\r\n        try {\r\n            JmeSystem.writeImageFile(new FileOutputStream(f), \"png\", data, texture.getImage().getWidth(), texture.getImage().getHeight());\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n```",
      "Unless there's something to discuss, I plan to self-integrate this PR in about 24 hours."
    ],
    "commit_messages": [
      "Fix issue #1850 (JmeSystem.writeImageFile() throw java.nio.BufferUnderflowException) (#1851)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e00a14f302d393b269d",
    "number": 1849,
    "body": "Cycle tween is used for running delegate tween back and force and Invert tween is used to run delegate tween backward.",
    "head_branch": "cycle-tween",
    "is_a_fork": true,
    "comments": [
      "Unless there's something to discuss, I plan to self-integrate this PR in about 24 hours."
    ],
    "commit_messages": [
      "Added Tweens.cycle() and Tweens.invert() methods (#1849)\n\nCycle is used for running delegate tween back and force and Invert is used to run delegate tween backward."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e01a14f302d393b269e",
    "number": 1848,
    "body": "This resolves slow-motion side effects caused by BlendAction stretching any animation that doesn't have the same length. It generates speed factors for each child animation that are dynamically interpolated and applied to base speed based on the blend weight taken from blend space.\r\n\r\nThis is a breaking change, as the speed returned by `BlendAction.getSpeed()` used to be a static value but now it returns a dynamic value that is changed as blend weight is changed. Unless `speedFactors` is cleared out or factors are equal. (i.e. clips have the same length).",
    "head_branch": "improve-blenaction",
    "is_a_fork": true,
    "comments": [
      "Please let me know if something is vague about Javadoc or method naming.",
      "I made a demo video:\r\n\r\nOld behavior (not using dynamic speed): https://youtu.be/jZY2u9GU_L8\r\n\r\nNew behavior (using dynamic speed): https://youtu.be/1TuevW1yick",
      "Hi Ali, may I ask you why the `calculateSpeedFactors` method is _public static_ and not _private_? :)",
      "Hi @capdevon :)\r\n\r\nThanks so much for your interest.\r\n\r\nWell, this PR is something that I rewrote multiple times in different ways because I was not sure which one is good. I am interested to hear other ideas. I wanted to indicate that users can modify the default factors to something else or even clear it and **be able to set them back to the default ones** so I made `calculateSpeedFactors` a utility method for that case (flexibility).\r\n\r\nI would also like to hear from @pspeed42 about this.\r\n\r\n",
      "I don't have a problem with the public static utility method.  I'm not sure I'd think to use it, either... but I think it's ok.",
      "@MeFisto94 I would like to hear your opinion as well regarding this PR \r\n\r\nDo you want to add anything here in regards to https://github.com/jMonkeyEngine/jmonkeyengine/issues/1303?",
      "@Ali\r\n> users can modify the default factors to something else or even clear it and **be able to set them back to the default ones**\r\n\r\n@pspeed\r\n> I'm not sure I'd think to use it, either...\r\n\r\nWhat do you think of this proposal? :)\r\nhow about highlighting the 'default' keyword?\r\n\r\n```java\r\n//before\r\npublic static double[] calculateSpeedFactors(BlendAction blendAction) {\r\n\tAction[] actions = blendAction.getActions();\r\n\treturn Arrays.stream(actions)\r\n\t\t\t.mapToDouble(action -> blendAction.getLength() / action.getLength())\r\n\t\t\t.toArray();\r\n}\r\n\r\n//usage example\r\nBlendAction ba = ...;\r\nba.clearSpeedFactors();\r\nba.setSpeedFactors(BlendAction.calculateSpeedFactors(ba));\r\n```\r\n\r\n```java\r\n//after (more compact and self consistent version)\r\npublic void setDefaultSpeedFactors() {\r\n\tAction[] actions = getActions();\r\n\tthis.speedFactors = Arrays.stream(actions)\r\n\t\t\t.mapToDouble(action -> getLength() / action.getLength())\r\n\t\t\t.toArray();\r\n}\r\n\r\n//usage example:\r\nBlendAction ba = ...;\r\nba.clearSpeedFactors();\r\n// I deleted the previous values ​​for some reason, and now I want to set the defaults again.\r\nba.setDefaultSpeedFactors();\r\n```\r\n\r\nI have an API on top of the current animation system, where I use BlendActions with animations of different lengths. To solve the slow motion problem, I dynamically vary the speed using an algorithm inspired by Unity and Godot. What impact can this PR have on those who have already implemented this type of solution before, since the `speedFactors` are calculated in the constructor?\r\n\r\nI saw that in the `TestAnimMigration` class, you removed the instructions that change the speed.\r\n```java\r\n//action.setSpeed(blendValue);\r\n```\r\n\r\nshould I call the `clearSpeedFactors()` method throughout my API after creating a BlendAction?\r\n",
      ">how about highlighting the 'default' keyword?\r\n\r\nI am fine with using `setDefaultSpeedFactors()` instead of a static utility method. Let's see what does @pspeed42 think?\r\n\r\n\r\n>I have an API on top of the current animation system, where I use BlendActions with animations of different lengths. To solve the slow motion problem, I dynamically vary the speed using an algorithm inspired by Unity and Godot. What impact can this PR have on those who have already implemented this type of solution before, since the speedFactors are calculated in the constructor?\r\n\r\nWill break them. If you want to handle this using your API you must unset the speed factors using (`clearSpeedFactors`). \r\n\r\nAgain I would like to ask @pspeed42 what does he think about it?\r\n\r\n>should I call the clearSpeedFactors() method throughout my API after creating a BlendAction?\r\n\r\nYes, if you want to handle speed using your API.",
      "I'm doing my best to follow along but I don't have much experience in this area.  So while I can prevent \"obviously wrong\" general API things from happening, I don't have a strong opinion on how the details work out.\r\n\r\nIf the speed can vary based on blending and different people want to blend things different ways, I wonder if a strategy object/function would be appropriate?  At some point it becomes over-engineered for the problem space, though.",
      ">To solve the slow motion problem, I dynamically vary the speed using an algorithm inspired by Unity and Godot.\r\n\r\n@capdevon can you please show me the code you are using?\r\n\r\nEdit:\r\nNever mind, I think I found it on your repo. It's the AnimatorState, yes?\r\n\r\nI think if you want to make this compatible with your API you need to remove this:\r\n\r\nhttps://github.com/capdevon/jme-capdevon-examples/blob/3d6133d9dc7abd85f80229bc315c33c56db6d6f3/src/main/java/com/capdevon/anim/fsm/AnimatorState.java#L146\r\n\r\nand\r\n\r\nhttps://github.com/capdevon/jme-capdevon-examples/blob/3d6133d9dc7abd85f80229bc315c33c56db6d6f3/src/main/java/com/capdevon/anim/fsm/AnimatorState.java#L160\r\n\r\nand instead set the `childMotion.timeScale` as the speed factor into the BlendAction.\r\n",
      "@capdevon \r\nI changed \r\n`public static double[] calculateSpeedFactors()` \r\nto \r\n`public void applyDefaultSpeedFactors()`.",
      "I've done some testing with my API and everything looks ok. I have no problem modifying it. I'll do some more testing when version 3.6.0-alpha is released. Another step forward for the engine. Good job! ;)",
      "That's cool.",
      "Unless there's substantial discussion, I plan to integrate this in about 24 hours.",
      "So from what I remember, on the surface, there are three types of ways you can combine two animations in parallel:\r\n1. \"Non Looping\", i.e. they just run with their different lengths, start at the same point, end different and then when the full cycle is complete, they start again.\r\n2. Looping them with their natural speed, i.e. if one animation only has half the length, it is just played twice as often\r\n3. Looping them by stretching to the slowest animation (i.e. they end at the same time/loop roll over is at the same time)\r\n\r\nSo in theory, being able to choose between those may be nice, however I think option 2 (that is implemented by that PR) is the most common, especially considering animations are developed for a specific length (so 3 doesn't make too much sense) and option 1 can probably be done by clever tweening?\r\n\r\nFor the implementation I don't know the animation API good enough any more, I just knew that I was thinking on how you could get them to the same speed by just seleting a clever interpolator value (t), but setting a \"fake\" speed is probably a lot easier here (or the only possible way)\r\n\r\nSo yeah, TLDR: Nothing relevant :D ",
      "Thanks, @MeFisto94 \r\n\r\nWell, the looping idea did not turn out well, unfortunately, otherwise, it would definitely be my pick. The blending looks bad, you can see it in this demo video: \r\nhttps://youtu.be/DJHwDaTy79o\r\n\r\nThat's why I opted for the second solution, which is dynamically adjusting the speed. Also, this is what the original author was doing in the TestAnimMigration, by externally setting the speed when blending. This PR does this process internally by automatically adjusting the speed. Blending looks much smoother in this approach. \r\n"
    ],
    "commit_messages": [
      "BlendAction: resolve slow-motion side effect caused by stretching actions (#1848)\n\n* BlendAction: resolve slow motion side effect caused by stretching any action that doesn't have the same length. It generates speed factor for each child animation that are dynamically interpolated and applied to base speed based on the blend weight taken from blend space.\r\n\r\n* Add missing javadoc.\r\n\r\n* Add Copyright.\r\n\r\n* Renamed calculateSpeedFactors() to applyDefaultSpeedFactors() and made it non static."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e02a14f302d393b269f",
    "number": 1847,
    "body": "By default, BlendAction will stretch any action that doesn't have the same length. This will cause stretched actions to end up playing slowly so one needs to manually speed up action to resolve this. What smart stretching does is that it tries to loop the action when possible before stretching to resolve the slow animation effect.\r\n\r\nGives the best result when the max transition weight is set to something lower than 1 (e.g. 0.5)",
    "head_branch": "blendaction-smart-stretch",
    "is_a_fork": true,
    "comments": [
      "Drafted it until I test it with some more examples.",
      "By the way, if you think the term \"smart stretch\" is not suitable or if you know a better one, please let me know. ",
      "I have a new idea that is simpler and visually looks better than this one.\r\n\r\nClosing this draft:D",
      "Is this related to #1303 ?",
      "Yes. \r\n\r\nWell, the looping idea generates some visual artifacts while blending from one to another. Artifacts can be greatly reduced by setting the [max transition weight](https://github.com/jMonkeyEngine/jmonkeyengine/pull/1845)  to 0.5 or something.\r\n\r\nIn the new idea instead of looping I want to dynamically change the speed. So `BlenAction.getSpeed()` will not return a static number but based on the current blend weight it will interpolate a speed factor. I will submit the PR soon, so you can take a closer look at it. This way blending looks much smoother and does not requires using the max transition weight.",
      "See my new PR here: https://github.com/jMonkeyEngine/jmonkeyengine/pull/1848",
      "I made a demo video showing how blending looks with the smart-stretching approach. Not promising\r\n\r\nhttps://youtu.be/DJHwDaTy79o"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e03a14f302d393b26a0",
    "number": 1846,
    "body": "… or duration.",
    "head_branch": "new-tweens",
    "is_a_fork": true,
    "comments": [
      "I noticed there is an edge case using modulo. For example in the below case:\r\n\r\n```\r\nTween countingLoop = Tweens.loopCount(3, Tweens.delay(1), Tweens.callMethod(this, \"countingLoop\"));\r\n```\r\nthe call method will never run because in `t % delegateLength` the result will not include `delegateLength` itself. So delegate tween will never get a chance to complete before it restarts.\r\n\r\n@pspeed42 do you have any idea?",
      "Another question!\r\n\r\nSuppose this example:\r\n\r\n```\r\nTween countingLoop = Tweens.loopCount(3, Tweens.callMethod(this, \"countingLoop\"));\r\n```\r\n\r\nthe length of delegate tween is 0. Should this be considered a valid input or should it throw an exception saying duration can not be 0? What is the expected behavior here?",
      ">I noticed there is an edge case using modulo\r\n\r\nI found an alternative way that bypasses the module problem. Before I commit that I would like everyone to take a look at it:\r\n\r\n```\r\nprivate static class Loop implements Tween, ContainsTweens {\r\n\r\n        private final Tween[] delegate = new Tween[1];\r\n        private final double length;\r\n        private int numLoopDone;\r\n\r\n        public Loop(Tween delegate, double length) {\r\n            if (length <= 0) {\r\n                throw new IllegalArgumentException(\"Loop length must be greater than 0\");\r\n            }\r\n\r\n            this.delegate[0] = delegate;\r\n            this.length = length;\r\n        }\r\n\r\n        @Override\r\n        public double getLength() {\r\n            return length;\r\n        }\r\n\r\n        @Override\r\n        public Tween[] getTweens() {\r\n            return delegate;\r\n        }\r\n\r\n        @Override\r\n        public boolean interpolate(double t) {\r\n            if (t < 0) {\r\n                return true;\r\n            }\r\n\r\n            double loopTime;\r\n            double delegateLength = delegate[0].getLength();\r\n            if (delegateLength > 0) {\r\n                loopTime = t - (numLoopDone * delegateLength);\r\n            } else {\r\n                loopTime = delegateLength;\r\n            }\r\n\r\n            boolean running = delegate[0].interpolate(loopTime);\r\n            if (!running) {\r\n                numLoopDone++;\r\n            }\r\n\r\n            return t < length;\r\n\r\n            // The reason I am not using modulo time (t % delegateLength) to determine loop time\r\n            // is because using modulo the result will not include `delegateLength` itself.\r\n            // So delegate tween will never get a chance to complete before it restarts.\r\n            // For example consider this test:\r\n            // Tweens.loopCount(3, Tweens.delay(1), Tweens.callMethod(this, \"someMethod\"));\r\n            // Here the call method tween would never run if I used modulo time. - Ali-RS:2022-8-19\r\n        }\r\n\r\n        @Override\r\n        public String toString() {\r\n            return getClass().getSimpleName() + \"[delegate=\" + delegate[0] + \", length=\" + length + \"]\";\r\n        }\r\n    }\r\n\r\n```",
      "Yeah, looping is not as straight forward as one might originally think when pass 1's 'length' is the same as pass 2's '0'.\r\n\r\nThink about it this way, what would happen if you put those two sequences together into one parent sequence?  Would the first \"someMethod\" always get called?  ...I think it would because sequence should be keeping track of the last time to the current time and advance everything.  Loop will have to do similar.",
      "And another fun part of tweens is that we let them run forwards or backwards in time.  So any loop-edge detection needs to go both ways.\r\n\r\nif( t >= length ) catch up delegate forward\r\nif( t < 0 ) catch up delegate backwards\r\n\r\n...both of which would depend on what the last 't' was.",
      ">Loop will have to do similar.\r\n\r\nSorry, not sure I am understanding it right! Are you saying that fast-forwarding a loop should try to interpolate the loops left behind as well? For example, let's say I want to loop a tween 3 times and the tween length is 1 second. So it will take 3 seconds to run in regular cases but if I fast forward it 2 seconds it will only do one loop in my implementation and will leave the last two loops behind. Are you saying that it should try to run those first two loops as well?",
      "I mean, technically, yes.  I could probably even contrive some examples where it matters though I don't know how common it would be.  Thinking of parallel tweens where one is a loop of one second and the other is a loop of five seconds and they both moving something forward.  If you jump 4 seconds and don't run the 1 second loop enough times then something might not match up anymore.  (Admittedly this is a squishy way to create a set of animations.)\r\n\r\nTo be honest, I haven't drilled much into this problem or your solution.  I'm just pointing out the how sequence deals with its children and making sure they always see their 'length' can be used as a guide for how to deal with the child of a loop also.  \r\n\r\nAnd that it should work in both directions because so far JME allows reversing.\r\n\r\nIf loop(child) ends up behaving the same as sequence(child, child, child, child, child, etc.) then you're probably doing things right.",
      "Got that, I agree with you, will try to redesign it in the same fashion a sequence works. Thank you so much for helping.",
      "Ok, updated it with the new design. Basically it is a copy-paste from Sequence tween.\r\n\r\nRegarding t<0, time won't be negative, AnimLayer will wrap negative times (speed < 0)  to the [0, length) range using modulo. And yes we have the modulo problem there as well which will cause a tween not fully complete:( \r\n\r\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/f0b7a96e64017dc7d386d1b7f6e86698e0d4780f/jme3-core/src/main/java/com/jme3/anim/AnimLayer.java#L201-L205",
      ">Yeah, looping is not as straight forward as one might originally think when pass 1's 'length' is the same as pass 2's '0'.\r\n\r\nI noticed it produces a small 1 frame glitch when I used this to loop BlendAction. I found out it is because that `action.interpolate(length)` and `action.interpolate(0)` are running in the same frame on the same action. I noticed when I add a one-frame space the glitch goes away. Should there be a one-frame space between those calls?",
      "I'm probably not the one to ask because I've never been able to get a looping animation to work without a single-frame hitch even before.",
      "I mean generally speaking it does not make sense to render the last and the first frame of the animation at the same time. One of the frames will be lost and will not be displayed.",
      "Adding this at the end of the while loop fixed the issue.\r\n\r\n```\r\n                if (t - baseTime < delegate[0].getLength()) {\r\n                    // Finished skipping completed loops, continue the new loop\r\n                    // from the next frame.\r\n                    break;\r\n                }\r\n```\r\n\r\nthis is how the while loop looks:\r\n\r\n```\r\n            // Skip any that are done\r\n            while (!delegate[0].interpolate(t - baseTime)) {\r\n                // Time to go to the next loop\r\n                baseTime += delegate[0].getLength();\r\n                current++;\r\n                if (current >= loopCount) {\r\n                    return false;\r\n                }\r\n\r\n                if (t - baseTime < delegate[0].getLength()) {\r\n                    // Finished skipping completed loops, continue the new loop\r\n                    // from the next frame.\r\n                    break;\r\n                }\r\n            }\r\n```\r\nInside the while, it will skip all finished loops in the same frame, and when it detects that there is no more loop to skip it will continue to the next loop from the next frame.\r\n\r\nPlease let me know if you think otherwise.",
      "The other way is to use an `if` statement instead of `while` so it will skip just one loop at a time. \r\nLet me know if you prefer this.",
      "Cool you got it working.  I'm going to ramble for a second.\r\n\r\nI was thinking about one of my earlier statements about t=0 being the same as t=1... and upon reflection, maybe that sort of shouldn't be true in the general case.  Except when we think of 0 and 1 like boundaries.\r\n\r\nLoops are weird.  And since I've never gotten regular animation looping working, I can't say for sure if JME is handling it correctly or not.  t=0 should be the first frame.  t=1 should be the last frame... where last frame != first frame.\r\n\r\nThen I think about a tween that moves and object from point A to point B. t=0 means the object is at point A.  t=1 means the object is at point B.  I need to reach 1 to be right at B.  \r\n\r\nBut if I chain another tween from B back to A, that transition from one tween to another is a little weird.\r\n\r\nIt's kind of like texture coordinates.  We rarely hit even boundaries, we're always in the middle.\r\n\r\nSo t moves along at some pace, forwards or backwards and we sample where we want to be.  The problem comes when we delegate to children and they won't know that we crossed a boundary... so we have to force give them the 0 or the 1.  (Maybe we went from 0.8 to 1.1 and so will switch to the next tween but the old tween still needs to see its 1... or it might miss something.  As the decorator, we don't know.)  And maybe in that case, we need to be honest with the child and send it the 1.1... let it clamp or not.  But then if it's looping it will start its next loop when it shouldn't.\r\n\r\nWhat a mathematical mess.  If you have something working then I defer to you at this point.  I feel like there is a hole and we just keep working around it.",
      "And probably ignore all of that.  Thinking about it as I walked away most things are fine. t comes like a heartbeat and it's fine to catch up the 'in between stuff' because ultimately we end up where we need to be when 't' finally resolves itself.  Even in the A -> B -> A case I talked about.  't' itself may never hit 1.0 but we still need to pass it to the first tween and then we'll continue on.  That kind of animation will be continuous and no weird hitches.\r\n\r\nI'm pretty well convinced that there is a bug with how tweens interact with the skinned animation.  t=0 and t=1 should both be the same frame for things to work properly.  (So I was 100% wrong about that above.)  Because there is no between 1 and 0.  1 is the loop.  I don't know if the code works that way or not.\r\n\r\nAlso, I feel like the thing that automatically blends from one pose to another is independent of any tween/action 't' but I can't prove it.\r\n\r\nEdit: and I'm 3 hours overdue for bed so I may come back in the morning and see that all of this is crazy... but I know my previous response is bonkers.  This one I can at least prove on paper the first parts. :)",
      "Thanks for the input. Further investigating, I noticed using the loop tween for regular ClipAction does not have this issue so I believe that the Loop tween works fine and I guess it is something specific to BlendAction that does not like about Loop tween calling the interpolate method twice in a single frame at the loop end.\r\n\r\n(I am working on improving BlendAction to support smart stretching, and I need to use a loop tween for this. I might end up creating a customized loop tween (using modulo) for this case. I will make a forum topic about this improvement soon) ",
      "Unless there's substantial discussion, I plan to integrate this in about 24 hours."
    ],
    "commit_messages": [
      "Added a Loop tween to Tweens factory class (#1846)\n\n* Added a Loop tween to Tweens factory class. Supports looping by count or duration.\r\n\r\n* Redesigned the Loop tween to work similar to Sequence tween. Now fast forwarding the loop will also try to catch up the loops left behind making sure they always see their 'length'.\r\n\r\n* Added the missing Override annotation."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e04a14f302d393b26a1",
    "number": 1845,
    "body": "Including:\r\n\r\n* Option to enable/disable animation mask propagation to child actions.\r\n* Option to control max transition weight. For example useful for controlling smooth animation transition when an animation is removed from an upper layer.\r\n* Added animation loop support in AnimLayer.\r\n* AnimLayer can now also keep the action name, so one can easily look up the currently playing action name in a specific layer.",
    "head_branch": "improve-anim-system",
    "is_a_fork": true,
    "comments": [
      "Hi Ali, \r\na little tip: could you remove the `currentActionName` field from the `AnimLayer` class and add the `name` field to the `Action` class? After all when we create an Action we give it a **name**, so it's an attribute that should be in the **Action** class. \r\nIn this way, redundancies are avoided. It is more natural to write the code like this: \r\n\r\n```java\r\nString actionName = animComposer.getCurrentAction().getName();\r\n\r\n//or\r\nString actionName = animComposer.getCurrentAction(layerName).getName();\r\n\r\n//Most common use case:\r\n...\r\npublic void playAnimation(String actionName) {\r\n    if ( !actionName.equals(animComposer.getCurrentAction().getName()) ) {\r\n        animComposer.setCurrentAction(actionName);\r\n    }\r\n}\r\n```\r\n\r\nWhat do you think?",
      "I don't have time to look at the code at the moment but my vague recollection is that the same action instance can be under multiple names... or that actions are not always associated with names or something.\r\n\r\nI just remember looking at this before and somehow coming to the same conclusion as Ali.",
      "Hmm, I do not remember why I didn't put the name on Action. :thinking:  I made yet another look and it sounds fine to give a name to the action.  We are already associating a name for each action we create with AnimComposer anyway.\r\n\r\n>is that the same action instance can be under multiple names...\r\n\r\nMy brain can not think of a use case for this right now. Can you probably give an example of this case?\r\n",
      "I'd have to look at the code or go through my own code again.  I just know I once looked at making the change on action and decided against it.\r\n\r\nIs there a way to add already built actions and give them a name?  How do we add blendable actions and stuff?  If no one knows, I will look again and it's definitely possible I'm wrong.",
      ">Is there a way to add already built actions and give them a name?\r\n\r\nYes, \r\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/591eb36c40501f19803d907872fb7d3d1e8e11fa/jme3-core/src/main/java/com/jme3/anim/AnimComposer.java#L269\r\n\r\n>How do we add blendable actions and stuff?\r\n\r\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/591eb36c40501f19803d907872fb7d3d1e8e11fa/jme3-core/src/main/java/com/jme3/anim/AnimComposer.java#L353-L362\r\n\r\nJME actions are either ClipAction which is corresponded to its clip name in AnimComposer or  BlendAction which is built from multiple ClipAction for example \"WalkRunBlend\" which is made by blending \"Walk\" and \"Run\" actions. The rest of the things are made up of standard tweens that we finally wrap inside `BaseAction` (the spaghetti class;) and register it to the AnimComposer with a name using `addAction()` method.",
      "Went ahead and added a `name` field to Action.",
      "Hi guys, \r\nI'm studying the new functions, probably the `Action.setName()` method should be protected or removed, because actions when registered in the `AnimComposer` class, are stored in a map. \r\n\r\nBy leaving the method public, someone could change the name of the `Action` after registering it, thus creating an inconsistency in the data stored in the map and causing unwanted effects.\r\n\r\nIs the hypothesis correct or am I wrong? What do you think?",
      "Make sense. Maybe it should be passed via constructor only.\r\n\r\n@pspeed42 what do you think?",
      "I guess it's theoretically possible that some implementation wouldn't know at construction time and want to set it after being fully initialized... so a protected setter is nice.",
      "Hmm, If we make it protected, AnimComposer won't be able to set it when it creates one because they are in different packages, so I believe a pass-with-constructor is also required. ",
      "Updated the code. @capdevon thanks for reviewing.",
      "Happy to help. However, seeing the result I start to convince myself that you were right and adding the `name` field to the `Action` class is not a good idea, although it is easy to think that it should be there. \r\n\r\nFor example changing the visibility of the `Action.setName()` method to _protected_ is useless, having added the `name` field to the constructors.\r\n\r\nThe new `AnimComposer.addAction(Action)` method seems unnecessary and could introduce errors and confusion.\r\nAll the methods currently present for adding an action to the AnimComposer require you to always specify the name of the action. See: \r\n* AnimComposer.action(String name)\r\n* AnimComposer.makeAction(String name)\r\n* AnimComposer.addAction(String name, Action action)\r\n* AnimComposer.actionSequence(String name, Tween... tweens)\r\n* AnimComposer.actionBlended(String name, BlendSpace blendSpace, String... clips)\r\n\r\n\r\n\r\n\r\n\r\nLook at this example:  \r\n\r\n```java\r\n        String animName = \"walk\";\r\n\r\n        // Get action registered with specified name. It will make a new action if there isn't any.\r\n        Action action = animComposer.action(animName);\r\n        Tween callback = Tweens.callMethod(this, \"animCycleDone\", animName);\r\n\r\n        // I create a BaseAction without name.\r\n        // I can't name it because the setter method is not visible.\r\n        action = new BaseAction(Tweens.sequence(action, callback));\r\n\r\n        //I try to add the action on the AnimComposer and I trigger the exception. This solution is confusing.\r\n        animComposer.addAction(action); // <- new method added with this PR\r\n```\r\n\r\nSorry to waste your time, but the initial solution with the `currentActionName` field in the `AnimLayer` class, and `Action` classes without constructors and getter / setter for the `name` field, seems better to me.\r\n\r\nWith the current code, running an animation with _loop = false_, the `AnimLayer` resets the variable _currentAction = null_ at the end of the animation, but the animation is still persistent on screen. Querying the `AnimLayer.getCurrentAction()` method I will get an inaccurate information.\r\n\r\nMaking a comparison with the old `AnimChannel` class, perhaps you were right to add the `currentActionName` field to the `AnimLayer` class with just the getter method. In this way we would have all the information we need about the last animation performed on the Layer.",
      "re: \"However, seeing the result I start to convince myself that you were right and adding the name field to the Action class is not a good idea, although it is easy to think that it should be there.\"\r\n\r\nAgreed.  I couldn't remember all of the reasons I didn't like if before and I'm sorry you all had to rediscover them.",
      "No problem. I will revert the namig related changes.",
      "Actually reading that reminds me of the problem I had as well. The Animation System is a bit indecided between string keys and action instances iirc. In theory that deserves fixing one way or another in a long run I guess. That was one of my problems with it",
      "Ok, dropped the last commits related to the ` name` field on Action. Also updated `AnimLayer.cloneFields` method to take 'currentActionName' field into account.",
      ">With the current code, running an animation with loop = false, the AnimLayer resets the variable currentAction = null at the end of the animation, but the animation is still persistent on screen. Querying the AnimLayer.getCurrentAction() method I will get an inaccurate information.\r\n\r\nCan you please clarify what you mean by \"but the animation is still persistent on screen\"? \r\nIf `loop` is set to false, AnimLayer will clear the current action when the action is done and will set it to null using `setCurrentAction(null)`.  Querying the `AnimLayer.getCurrentAction()` afterward must return null. The character will keep the pose it had when the action is removed until a new animation is added or overridden by another layer.",
      "> Can you please clarify what you mean by \"but the animation is still persistent on screen\"?\r\n\r\nI meant this, but you wrote it better ;)\r\n\r\n> The character will keep the pose it had when the action is removed until a new animation is added or overridden by another layer.\r\n\r\n--\r\n\r\n> If `loop` is set to false, AnimLayer will clear the current action when the action is done and will set it to null using `setCurrentAction(null)`. Querying the `AnimLayer.getCurrentAction()` afterward must return null.\r\n\r\nCorrect. This aspect justifies the presence of a new `currentActionName` field, to keep track of the last `Action` performed on the `AnimLayer`.\r\n\r\n--\r\n\r\nI would like to reflect a little more on some scenarios that could occur :)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      ">Correct. This aspect justifies the presence of a new currentActionName field, to keep track of the last Action performed on the AnimLayer.\r\n\r\nNote that the `currentActionName` field is also cleared when `currentAction` is cleared. I do not understand why it should keep the action name while the action is not there anymore. If an app requires to know the previous action name then it should record it somewhere.",
      "Ok, it looks good to me, it's always a pleasure to cooperate with you. It seems to me that all the new features are backwards compatible, making the new animation system more intuitive. Well done.",
      "Thank you so much @capdevon \r\n\r\nUnless there's substantial discussion, I plan to integrate this in about 24 hours."
    ],
    "commit_messages": [
      "Some enhancement to new animation system (#1845)\n\n* Some enhancement to new animation system, including:\r\n* Option to enable/disable animation mask propagation to child actions.\r\n* Option to control max transition weight. For example useful for controlling smooth animation transition when an animation is removed from an upper layer.\r\n* Added animation loop support in AnimLayer.\r\n* AnimLayer can now also keep action name, so one can easily lookup currently playing action name in an specific layer.\r\n\r\n* Minor Javadoc fix.\r\n\r\n* AnimLayer: clear `currentActionName` inside `cloneFields` method."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e05a14f302d393b26a2",
    "number": 1844,
    "body": "Heh, I had this sitting locally for some time. Might as well turn it in.\r\n\r\nBasically it is cleanup. Changed loops to modern for each loops. Avoids some unnecessary string concatenations and other unnecessary operations especially when trying to get the depths. And changes the toArray calls to _faster_ one (https://shipilev.net/blog/2016/arrays-wisdom-ancients/).\r\n\r\nIn all the data handled is so minuscule that I doubt there is anything noticeable in performance. But code might be a bit more readable with less nesting and using DisplayMode.BIT_DEPTH_MULTI instead of magically discarding \"-1\" from the depths...",
    "head_branch": "settings-dialog",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1844 from tonihele/settings-dialog\n\nClean up the display modes parsing"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e05a14f302d393b26a3",
    "number": 1842,
    "body": "Fix #1843\r\n\r\nReported on the forum: \r\nhttps://hub.jmonkeyengine.org/t/httpziplocator-questions/45859\r\n\r\n```\r\n\r\ncom.jme3.asset.AssetLoadException: An error occurred loading Walk.gltf\r\n\tat com.jme3.scene.plugins.gltf.GltfLoader.loadFromStream(GltfLoader.java:181)\r\n\tat com.jme3.scene.plugins.gltf.GltfLoader.load(GltfLoader.java:106)\r\n\tat com.jme3.asset.DesktopAssetManager.loadLocatedAsset(DesktopAssetManager.java:272)\r\n\tat com.jme3.asset.DesktopAssetManager.loadAsset(DesktopAssetManager.java:388)\r\n\tat com.jme3.asset.DesktopAssetManager.loadModel(DesktopAssetManager.java:439)\r\n\tat asset.TestHttpLocator.simpleInitApp(TestHttpLocator.java:33)\r\n\tat com.jme3.app.SimpleApplication.initialize(SimpleApplication.java:240)\r\n\tat com.jme3.system.lwjgl.LwjglWindow.initInThread(LwjglWindow.java:548)\r\n\tat com.jme3.system.lwjgl.LwjglWindow.run(LwjglWindow.java:662)\r\n\tat java.base/java.lang.Thread.run(Thread.java:833)\r\nCaused by: com.google.gson.JsonIOException: java.util.zip.ZipException: invalid code lengths set\r\n\tat com.google.gson.internal.Streams.parse(Streams.java:62)\r\n\tat com.google.gson.JsonParser.parse(JsonParser.java:84)\r\n\tat com.jme3.scene.plugins.gltf.GltfLoader.loadFromStream(GltfLoader.java:123)\r\n\t... 9 more\r\nCaused by: java.util.zip.ZipException: invalid code lengths set\r\n\tat java.base/java.util.zip.InflaterInputStream.read(InflaterInputStream.java:164)\r\n\tat java.base/sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:270)\r\n\tat java.base/sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:313)\r\n\tat java.base/sun.nio.cs.StreamDecoder.read(StreamDecoder.java:188)\r\n\tat java.base/java.io.InputStreamReader.read(InputStreamReader.java:177)\r\nCaused by: com.google.gson.JsonIOException: java.util.zip.ZipException: invalid code lengths set\r\n\r\n\tat com.google.gson.stream.JsonReader.fillBuffer(JsonReader.java:1295)\r\n\tat com.google.gson.stream.JsonReader.nextNonWhitespace(JsonReader.java:1333)\r\nCaused by: java.util.zip.ZipException: invalid code lengths set\r\n\r\n\tat com.google.gson.stream.JsonReader.consumeNonExecutePrefix(JsonReader.java:1576)\r\n\tat com.google.gson.stream.JsonReader.doPeek(JsonReader.java:534)\r\n\tat com.google.gson.stream.JsonReader.peek(JsonReader.java:425)\r\n\tat com.google.gson.internal.Streams.parse(Streams.java:46)\r\n\t... 11 more\r\n\r\n\r\n```\r\n\r\n\r\n```\r\ncom.jme3.asset.AssetLoadException: An error occurred loading Stand.gltf\r\n\tat com.jme3.scene.plugins.gltf.GltfLoader.loadFromStream(GltfLoader.java:181)\r\n\tat com.jme3.scene.plugins.gltf.GltfLoader.load(GltfLoader.java:106)\r\n\tat com.jme3.asset.DesktopAssetManager.loadLocatedAsset(DesktopAssetManager.java:272)\r\n\tat com.jme3.asset.DesktopAssetManager.loadAsset(DesktopAssetManager.java:388)\r\n\tat net.jmecn.HelloArmature.model(HelloArmature.java:321)\r\n\tat net.jmecn.HelloArmature.initScene(HelloArmature.java:257)\r\n\tat net.jmecn.HelloArmature.simpleInitApp(HelloArmature.java:114)\r\n\tat com.jme3.app.SimpleApplication.initialize(SimpleApplication.java:240)\r\n\tat com.jme3.system.lwjgl.LwjglAbstractDisplay.initInThread(LwjglAbstractDisplay.java:139)\r\n\tat com.jme3.system.lwjgl.LwjglAbstractDisplay.run(LwjglAbstractDisplay.java:221)\r\n\tat java.base/java.lang.Thread.run(Thread.java:833)\r\nCaused by: com.google.gson.JsonIOException: java.util.zip.ZipException: invalid distance too far back\r\n\tat com.google.gson.internal.Streams.parse(Streams.java:62)\r\n\tat com.google.gson.JsonParser.parse(JsonParser.java:84)\r\n\tat com.jme3.scene.plugins.gltf.GltfLoader.loadFromStream(GltfLoader.java:123)\r\n\t... 10 more\r\nCaused by: java.util.zip.ZipException: invalid distance too far back\r\n\tat java.base/java.util.zip.InflaterInputStream.read(InflaterInputStream.java:164)\r\n\tat java.base/sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:270)\r\n\tat java.base/sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:313)\r\n\tat java.base/sun.nio.cs.StreamDecoder.read(StreamDecoder.java:188)\r\n\tat java.base/java.io.InputStreamReader.read(InputStreamReader.java:177)\r\n\tat com.google.gson.stream.JsonReader.fillBuffer(JsonReader.java:1295)\r\n\tat com.google.gson.stream.JsonReader.nextNonWhitespace(JsonReader.java:1333)\r\n\tat com.google.gson.stream.JsonReader.consumeNonExecutePrefix(JsonReader.java:1576)\r\n\tat com.google.gson.stream.JsonReader.doPeek(JsonReader.java:534)\r\n\tat com.google.gson.stream.JsonReader.peek(JsonReader.java:425)\r\n\tat com.google.gson.internal.Streams.parse(Streams.java:46)\r\n\t... 12 more\r\n```\r\n\r\n\r\nAfter comparing the two zips (one generated by [www.ezyzip.com](http://www.ezyzip.com/) and one by linux archive manager both from the same contents and with the same compression level), I noticed that their entry offsets are different in HttpZipLocator. \r\n\r\nFollowing it, I found that the \"extraLen\" (Central directory (CEN) header extra field length field offset) used here has different values on these two zip files:\r\n\r\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/5ae543cc6f35cd93b53eb511cb912f91e210749f/jme3-core/src/plugins/java/com/jme3/asset/plugins/HttpZipLocator.java#L239\r\n\r\nin the zip file created by www.ezyzip.com (and also in the JME's \"wildhouse.zip\" that is on google storage), that value is 0 (which is why HttpZipLocator does not show an error) but in the zip file that @icyboxs uploaded and also I created in the Linux archive manager that value is non-zero (36 bytes).\r\n\r\nRemoving the \"extraLen\" fixed the issue.",
    "head_branch": "fix-httpziplocator",
    "is_a_fork": true,
    "comments": [
      "Hmm, looking at the specs though... https://en.wikipedia.org/wiki/ZIP_(file_format)\r\n\r\nIt reads this from the central directory file header:\r\n\r\n42 | 4 | Relative offset of local file header.  This is the number of bytes between the start of the first disk on which the file occurs, and the  start of the local file header. This allows software reading the central  directory to locate the position of the file inside the ZIP file.\r\n-- | -- | --\r\n\r\nAdds the local file header size and the file name size (variable length) and then the extra field size (variable length). But probably the extra field size here now just refers to the Central Directory File Header extra field. Right? This is not clear. This is either correct statement or what is happening here is that the ZIP file is just not in the correct form.\r\n\r\nWhat I think is that this is broken. And this fix wont fix it.\r\n\r\nWhat I think is the correct solution is that we should just always store the local file header offset. And start the reading from there, the header, since clearly it is of variable size and the variable size can't be figured out from the central directory.\r\n\r\nThen of course we would need to read a bit extra again like with the end header. Or sort the entries found and figure out the size of file data + file header from subsequent entries.",
      "Maybe clearer example of ZIP format:\r\nhttps://users.cs.jmu.edu/buchhofp/forensics/formats/pkzip.html",
      ">But probably the extra field size here now just refers to the Central Directory File Header extra field. Right? \r\n\r\nRight, this is what it says in source:\r\n\r\n```\r\n    /**\r\n     * Central directory (CEN) header extra field length field offset.\r\n     */\r\n    static final int CENEXT = 30;\r\n```\r\n\r\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/5ae543cc6f35cd93b53eb511cb912f91e210749f/jme3-core/src/plugins/java/com/jme3/asset/plugins/HttpZipLocator.java#L206\r\n\r\n\r\nand it is used to calculate the new offset for reading the next entry:\r\n\r\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/5ae543cc6f35cd93b53eb511cb912f91e210749f/jme3-core/src/plugins/java/com/jme3/asset/plugins/HttpZipLocator.java#L208",
      "Taking a quick look at the Wikipedia link I see there are local file name length and local extra field length as well.\r\n\r\n```\r\n    /**\r\n     * Local file (LOC) header filename length field offset.\r\n     */\r\n    static final int LOCNAM = 26;\r\n\r\n    /**\r\n     * Local file (LOC) header extra field length field offset.\r\n     */\r\n    static final int LOCEXT = 28;\r\n```\r\n\r\nseems they are not used anywhere in HttpZipLocator:thinking: Are they perhaps meant to be added to local offset instead of the central directory headers CENNAM (`nameLen`) and CENEXT (`extraLen`) at this line? \r\n\r\n`entry.offset += ZipEntry.LOCHDR + nameLen + extraLen; `\r\n\r\nI do not know the internals of zip format so just guessing.",
      "> seems they are not used anywhere in HttpZipLocator🤔 Are they perhaps meant to be added to local offset instead of the central directory headers CENNAM (`nameLen`) and CENEXT (`extraLen`) at this line?\r\n\r\nYeah, it doesn't read the local file header. That is my point. It guesses the length of the local file header from the central directory header and that is the bug. But you can't use those LOCNAM in the central directory header of course. Reading of the local file header is missing from the code totally currently as the length of it is thought to be known from the central directory header. But that is false.\r\n\r\nSo what I am proposing that we just start to read from the local file header always. Meaning in code:\r\n`entry.offset += ZipEntry.LOCHDR + nameLen + extraLen; ` <- this would be totally removed, the whole line. Store the offset as it is.\r\n\r\nSo what we then have in the hash map, is the starting location for each entry. Starting location to the local file header of the entry to be exact. Then we make a guess for reading the file data from the HTTP connection. What we want to read is ZipEntry.LOCHDR (size of the local file header static parts) + nameLen (from the central directory header, assume it is always the same in both) + file data length (from the central directory header) + GUESS the length of the extra field (given by LOCEXT from the local header).\r\n\r\nThis way we read a bit extra, and future bug maybe that someone wrote 7GB to the extra header. I would guess that initially 100 bytes extra is enough for a guess. And shouldn't break the idea of the optimization, hopefully. I would imagine assets are big, 100 bytes is nothing in comparison.",
      "I can also code this in if you agree with me in this approach and you don't want to take a stab at this. In addition:\r\n\r\n- Would be nice to utilize the new Java 11 HttpClient to support HTTP2 and all that\r\n- The static charset thing can be removed as these common ones are already found as static entries",
      "Note that JME has a very long history of \"not invented here\" aversion style development... whether because the developer was unaware of alternatives (even in the JDK) or because of some specific requirement they had latched onto.\r\n\r\nI do not know the history or requirements for this class (though I can guess on the latter) but it might be worth exploring whether \"modern Java\" can already do what this class is trying to do.  (And by \"modern\", I mean post Java 1 point 2 (written out for emphasis how old I mean)).\r\n\r\nFor example, Java (effectively forever) has supported URL jar references to specific files within the jar... and because it uses this for remote class loading, it's been pretty well optimized.\r\n\r\nMeaning: we might be able to rip out all of this weird special code and convert it to some clever URL construction or maybe just create a URLClassLoader that points to the zip file and then use it to resolve resources like a regular classpath asset locator does.\r\n\r\n",
      ">I can also code this in if you agree with me in this approach\r\n\r\nPlease feel free to submit your change. But please note that Java 11 HttpClient still is not supported on android (I have made a [request](https://issuetracker.google.com/issues/197880209) to support it) so better be avoided if we want android compatibility.\r\n\r\n>it might be worth exploring whether \"modern Java\" can already do what this class is trying to do.\r\n\r\nThere is ZipInputStream in java (since java 1.1) that does what HttpZipLocator is doing but seems the issue is that for loading a specific ZipEntry we must traverse through all other entries using `getNextEntry()` inside the stream until finding the entry we want rather than just giving the file name and get to the location. That is what HttpZipLocator tried to solve I believe. \r\n\r\njust for ref:  https://itecnote.com/tecnote/java-how-to-extract-a-single-file-from-a-remote-archive-file/\r\n\r\n>maybe just create a URLClassLoader that points to the zip file and then use it to resolve resources\r\n\r\nHmm, that sounds like a very interesting idea. Java does already handle loading class from a remote jar\r\n\r\nlike `jar:http://www.foo.com/bar/baz.jar!/COM/foo/Quux.class`\r\n\r\nso we may be able to make use of it to handle resources from remote zip\r\n\r\nlike `zip:http://www.foo.com/bar/baz.zip!/COM/foo/Quux.j3o`",
      "> Please feel free to submit your change. But please note that Java 11 HttpClient still is not supported on android (I have made a [request](https://issuetracker.google.com/issues/197880209) to support it) so better be avoided if we want android compatibility.\r\n\r\nDamn Android, why you have to be different... Let's forget the HttpClient then.\r\n\r\n\r\n> I do not know the history or requirements for this class (though I can guess on the latter) but it might be worth exploring whether \"modern Java\" can already do what this class is trying to do. (And by \"modern\", I mean post Java 1 point 2 (written out for emphasis how old I mean)).\r\n> \r\n> For example, Java (effectively forever) has supported URL jar references to specific files within the jar... and because it uses this for remote class loading, it's been pretty well optimized.\r\n> \r\n> Meaning: we might be able to rip out all of this weird special code and convert it to some clever URL construction or maybe just create a URLClassLoader that points to the zip file and then use it to resolve resources like a regular classpath asset locator does.\r\n\r\n\r\nI came to that conclusion that if we use anything ready, we will lose the optimization of just downloading the parts that we are interested in. And that seems to be the whole point in the class. Surely Internet speeds are probably faster today, but so are asset sizes probably on average bigger. Although not supporting Zip64, we have a limit on 4Gb ZIP file.\r\n\r\nThis locator has very niche usage probably, like you expressed in the forum. So I'd just fix the thing, keeping the optimization in place even though it is the part causing all the headaches :D",
      "But I would think that a Java URLClassLoader accessing a jar through a URL would have to have solved all of these problems and used to be super common.  It has to jump all over the place loading one .class file or another .class file... all over the jar.  So either it's doing clever caching or something even more clever.\r\n\r\nMy point is, don't necessarily trust that the \"old ones\" were smarter than we are.  If you look through JME history then you can find plenty of cases where the original authors just didn't know any better... or on that day just thought it would be easier to roll their own than to learn how to do it a built-in way.\r\n\r\nI also think that in modern Java usage, using this class is a bad idea in general.  Without any real modern environments where \"all of the code and data\" is on a web site (ie: Applets), this is going to be poor experience for the user over any alternative.  It's tough to decide what the proper use-case would be.  And without some use-cases, can we honestly say that the four-line URLClassLoader version would perform worse than our bodged together fragile code?",
      "Well, I mean.. after the fix it wouldn't been that fragile, I'm super confident about that :D ZIP format is quite simple and doesn't change. I agree that the code is really complicated for what it is trying to do. Just because it doesn't want to download the whole ZIP file, just the part needed.\r\n\r\nI can try it hopefully today, but I'm quite confident that URLClassLoader approach will download the whole file. It probably caches it. At least the API faintly suggests that there are caches but you never know without looking the code more clearly what cache they are referring to (could be just the HTTP headers where it declares that no cache plz). But do we call this a success then? That the whole file is downloaded once, is that acceptable? That will be a change of behavior and might be noticeable if someone has that kind of weird use case where somehow only few assets are required.\r\n\r\nIf it downloads the ZIP more than once, then I would at least argue that this would be too big of a change to fix this bug (or to introduce in general).",
      "If it does download the whole file then I maybe agree.  But I have doubts.  I'm old enough to have lived through the age of the ubiquitous Java applet and we somehow didn't have to wait 5-10 minutes every time we started one up.\r\n\r\nWhen we assume how it's going to work so continue hand-rolling then we do exactly what the original authors did.  Which is fine... sometimes that's how things get done.  Just a little unfortunate.",
      ">So what I am proposing that we just start to read from the local file header always. Meaning in code:\r\nentry.offset += ZipEntry.LOCHDR + nameLen + extraLen; <- this would be totally removed, the whole line. Store the offset as it is.\r\n\r\n>So what we then have in the hash map, is the starting location for each entry. Starting location to the local file header of the entry to be exact. Then we make a guess for reading the file data from the HTTP connection. What we want to read is ZipEntry.LOCHDR (size of the local file header static parts) + nameLen (from the central directory header, assume it is always the same in both) + file data length (from the central directory header) + GUESS the length of the extra field (given by LOCEXT from the local header).\r\n\r\n\r\n@tonihele something like this?\r\n\r\n```\r\n    private InputStream openStream(HttpZipLocator.ZipEntry2 entry) throws IOException{\r\n        if (entry.nameLength < 0 && entry.extraLength < 0) {\r\n            // Need to fetch local file header to obtain local file name length\r\n            // and extra field length.\r\n            InputStream in = readData(entry.offset, ZipEntry.LOCHDR);\r\n            byte[] localHeader = in.readAllBytes();\r\n            entry.nameLength = get16(localHeader, ZipEntry.LOCNAM);\r\n            entry.extraLength = get16(localHeader, ZipEntry.LOCEXT);\r\n            in.close();\r\n        }\r\n\r\n        // We want the offset in the file data:\r\n        // move the offset forward to skip the LOC header.\r\n        int fileDataOffset = entry.offset + ZipEntry.LOCHDR + entry.nameLength + entry.extraLength;\r\n        InputStream in = readData(fileDataOffset, entry.compSize);\r\n        if (entry.deflate) {\r\n            return new InflaterInputStream(in, new Inflater(true));\r\n        }\r\n        return in;\r\n    }\r\n```\r\nThe above code works successfully. The thing to note is that LOCNAM and CENNAM are the same lengths and LOCEXT is 0. I guess this is true for 99% (?) of the case when we create a zip using an archive creation program unless someone manually adds a local extra field. i.e. we could ignore the local header and consider the local \"extraLength = 0\" but I like your approach more as it is guaranteed to work in all case.\r\n\r\nPlease let me know if this code looks good to you, then I will update my PR.\r\nBy the way, thanks for the help.",
      "That looks correct yes. I would also guess that the name is always the same, whether you got it from the central or the local. But you better make sure and this is the correct way to do it.\r\n\r\nWhat comes now to the guessing how much we need to read. I would say we are safe with 100 bytes extra, ZIP64 for example adds just 32 bytes to the local headers, in form of the extra headers. Surely we wont support it currently and well... And the name should be the same.. This is probably just fine.\r\n\r\nWhat I also noted that the whole class...  I guess it can be stateful, I have seen this a lot in jME. But there might be a risk with multithreading, although I'm not sure how the AssetManager handles the requests, does it allow for multithreaded processing or not. So there is this:\r\n```\r\n    static {\r\n        Charset utf8 = Charset.forName(\"UTF-8\");\r\n        utf8Decoder = utf8.newDecoder();\r\n    }\r\n```\r\n`Charset utf8 = Charset.forName(\"UTF-8\");` <- can be replaced with a constant in modern Java\r\n`utf8Decoder = utf8.newDecoder();` <- should be a class variable, not constant, it breaks with multithreading\r\n\r\nAnd lot of those streams could be handled with `try-with` code.\r\n",
      "Of course the cleaning up and all that would be better of as its own PR, but this is just... How could I put it, to me it doesn't matter that much. I'm always guilty of combining formatting, fix and optimizations into same PR. Which is horrible I know.\r\n\r\nI'm quite curious to add ZIP 64 support. For absolutely no reason at all :D",
      ">What comes now to the guessing how much we need to read. I would say we are safe with 100 bytes extra,\r\n\r\nSorry for my ignorance but not sure if I am understanding this. What are these 100 bytes for? ",
      "> Not sure if I am understanding this. What are these 100 bytes for?\r\n\r\nFrom the central directory you get the offset where the local header starts and the file size. But you don't exactly know how much of the ZIP you should read as the local header size varies. HTTP is expensive, relatively. So we probably want to read the file at one go (like it is already + the central directory reading of course (200 bytes from the end)). Thus we need to make a guess what is the range of bytes we need.\r\n\r\nThe formula to calculate the range of bytes to read is:\r\n**ZipEntry.LOCHDR** (size of the local file header static parts) + **nameLen** (from the central directory header, assume it is always the same in both and even if it isn't, the is some margin) + **file data length** (from the central directory header) + **GUESS** (the length of the extra fields)\r\n\r\n**GUESS** could be 100 bytes.\r\n\r\nIf extra header size is 0, like it seems to be in many of the cases you tried. We will of course read extra 100 bytes.",
      ">GUESS (the length of the extra fields)\r\n\r\nHmm, but we already know the extra fields length (obtained from LOCEXT field) so why need to guess it?\r\n\r\nSee https://docs.fileformat.com/compression/zip/#local-file-header",
      "Yeah, you are reading it from there yes. You know it AFTER you have downloaded the file. The asset requested.\r\n\r\n1. Downloads 200 bytes from the end of the file to get the central directory\r\n2. Parse the central directory to get the files (names and locations) (class variable `entries`)\r\n3. Downloads the requested asset\r\n\r\nThe number 3 dissected:\r\n- We want to read only the part from the ZIP where our asset is\r\n- We know the location where the asset starts in the ZIP (the local file header starts)\r\n- We do **NOT** know how much we need to read (since we don't know the local file header size)\r\n\r\nTo download the asset you need to either take the guess route. Or you need to download in 1-2 parts once you have read the local header.\r\n\r\nThis is how I understand it works currently too. And that is the bug. It guesses the file starting location from the central directory. This fails because the file starting location is depending on the file local header length, which is unknown. It can only be guessed. It is currently guessed, and I suggested making a better guess. But still a guess.\r\n\r\n**To not take a guess** you could download first with the original guess (minus the extra field length like your PR originally did, since the extra field length is from the wrong header, `ZipEntry.LOCHDR + nameLen + file size`). Parse the local file header. And:\r\n```\r\nIF local header extra field size == 0 THEN no need to download anything else\r\nELSE download the extra bytes\r\n```",
      ">You know it AFTER you have downloaded the file.\r\n\r\nIf you take a look at the code I showed above, I'm reading it in 2 steps, in the first connection, I just read the local header to obtain the name length and extra fields length then close the connection, now I already know from where the file data starts ( fileDataOffset = entry.offset + ZipEntry.LOCHDR + nameLength + extraLength ) then I make a new connection to read the file data.",
      "> If you take a look at the code I showed above, I'm reading it in 2 passes, in the first connection, I just read the local header to obtain the name length and extra fields length then close the connection, now I already know from where the file data starts ( fileDataOffset = entry.offset + ZipEntry.LOCHDR + entry.nameLength + entry.extraLength ) then I create a new connection to readd the file data.\r\n\r\nAh yes sorry, that is the route where you don't need guesses yes. `readData` should be `downloadData`, not really. I just wasn't paying attention. Sorry.\r\n\r\nAnd I'm fine with having 2 connections per file. It is less confusing than further trying to optimize like I described with the guesses and all.",
      ">utf8Decoder = utf8.newDecoder(); <- should be a class variable, not constant, it breaks with multithreading\r\n\r\nIt is used from a static method `private static String getUTF8String` so if I want to make utf8Decoder non static I must also make this method non static as well. Should I procceed with this change?",
      "Probably just recreate the decoder every time.  JME bends over so far backwards to avoid creating objects that it ends up breaking its spine and having its head up its own... you get the picture.  And yes, quite often this leads to major and often-subtle threading bugs (see my previous issues about animation tracks).\r\n\r\nUnless we have evidence that creating a new decoder will be expensive then just create one when needed.",
      "Yeah, I would say too that re-create it. It is the safest option. That can't be the heaviest operation there... Then you can still have the method as static.",
      "What about these:\r\n\r\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/5ae543cc6f35cd93b53eb511cb912f91e210749f/jme3-core/src/plugins/java/com/jme3/asset/plugins/HttpZipLocator.java#L83-L84\r\n\r\nShould they be non-static as well? They are also used in `private static String getUTF8String` and passed into `utf8Decoder.decode()`.",
      "Yeah, seems like a threading problem.",
      "Then I have to make `getUTF8String()` method non-static. It is a private method and used internally so won't break anything I guess. ",
      "I'm done with the update. Please feel free to review the changes.",
      "I think it is excellent! Good work!",
      "Thanks! I could not do it without your help, guys."
    ],
    "commit_messages": [
      "Fix #1843 (java.util.zip.ZipException in HttpZipLocator) (#1842)\n\n* HttpZipLocator:fix invalid code lengths set & invalid distance too far back ZipExceptions.\r\n\r\n* Get file name length and extra field length from local file header to calculate file data offset.\r\n\r\n* Make fields `byteBuf`, `charBuf`, `utf8Decoder` non-static because they are not thread-safe.\r\n\r\n* Surround streams with try-with-resources block."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e06a14f302d393b26a4",
    "number": 1841,
    "body": "History: https://hub.jmonkeyengine.org/t/possible-to-use-stencil-buffer-with-filterpostprocessor/45840\r\n\r\nIn 2016, [Tiatin added the setFrameBufferFormat method to FilterPostProcessor.](https://hub.jmonkeyengine.org/t/ability-to-change-image-format-for-filterpostprocessor/36379)  This allows different formats to be used for the color render buffer.  I think the depth buffer needs the same treatment so that stencil operations can be performed while filters are in use.\r\n\r\nThis is the first PR I've made, so please let me know if I've done something wrong, thanks!",
    "head_branch": "fpp_depth_format_setter",
    "is_a_fork": true,
    "comments": [
      "Thanks @JosiahGoeman \r\n\r\nCan you also add a getter, please?\r\n\r\nYou just need to commit it to \"fpp_depth_format_setter\" branch on your fork and it will be automatically added to this PR.",
      "> Thanks @JosiahGoeman\r\n> \r\n> Can you also add a getter, please?\r\n> \r\n> You just need to commit it to \"fpp_depth_format_setter\" branch on your fork and it will be automatically added to this PR.\r\n\r\nOf course, how could I forget? :man_facepalming:\r\nIt's added.",
      "Thanks, changes look fine to me. Lets keep this PR open for a few more days for reviewing by team members before I merge it.",
      "Could you rename the method from `setFrameBufferFormat` to `setDefaultPassTextureFormat` so that you have the same signature as the getter method on the `fbFormat` variable please? This trick of having the names of the getter and setter methods paired is very useful for writing graphical editors.",
      "Hi @capdevon,\r\n\r\nI agree that the naming of setter and getter for \"fbFormat\" mismatch (`setFrameBufferFormat` / `getDefaultPassTextureFormat`). Not sure why the original author did so(?) but note that renaming the \"setFrameBufferFormat\" will be a breaking change and I believe it should be done in a separate PR (we first need to deprecate it and add a new method). So I would like to hear from @stephengold and @pspeed42 before we want to proceed on that.",
      "> it should be done in a separate PR\r\n\r\nI agree that it should be a separate PR.",
      "You are right, i thought the `setFrameBufferFormat` method was added with this PR, instead only the method description was added. Sorry, my mistake.",
      "@JosiahGoeman thanks for submitting the PR and @stephengold, and @capdevon thanks for reviewing the PR.\r\n\r\nThis will be included in the next release.",
      "Alright, neat!  Thanks everyone."
    ],
    "commit_messages": [
      "Added getter & setter for FilterPostProcessor.depthFormat (#1841)\n\n* Added setter for FilterPostProcessor.depthFormat\r\n\r\n* Added getter for FilterPostProcessor.depthFormat"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e07a14f302d393b26a5",
    "number": 1840,
    "body": "Fixes https://github.com/jMonkeyEngine/jmonkeyengine/issues/1839.",
    "head_branch": "fix-issue-1839",
    "is_a_fork": true,
    "comments": [
      "@Lukas-Habring Thanks for the quick response to Ali's PR request.",
      "Unless there's substantial discussion, I plan to integrate this in about 24 hours."
    ],
    "commit_messages": [
      "Fix issue  #1839 (Memory Leak in DefaultLightFilter)\n\nCo-authored-by: Lukas Habring <lukas@Lukas-PC>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e08a14f302d393b26a6",
    "number": 1838,
    "body": "Would be great to have our game Exotic Matter also mentioned as its engine is based on jME. Thanks!",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Sure, thanks for the PR. Glad to see another game made with JME. Wish you the best with your project."
    ],
    "commit_messages": [
      "Update README.md to include Exotic Matter (#1838)\n\nWould be great to have our game Exotic Matter also mentioned as its engine is based on jME. Thanks!"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e09a14f302d393b26a7",
    "number": 1831,
    "body": null,
    "head_branch": "capdevon-particles",
    "is_a_fork": true,
    "comments": [
      "Any feedback on this proposal? Can it be useful or should I close it?",
      "Looks good to me!"
    ],
    "commit_messages": [
      "Improved code readability: ParticlePointMesh and ParticleTriMesh (#1831)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e0aa14f302d393b26a8",
    "number": 1830,
    "body": "- Homogeneous signature of methods.\r\n- Possibility of chaining methods.\r\n- The 'Armature' is passed only once in the constructor.\r\n- 'Joints' are passed to methods as strings instead of objects.",
    "head_branch": "capdevon-avatar-mask",
    "is_a_fork": true,
    "comments": [
      "Any feedback on this proposal? Can it be useful or should I close it?",
      "I think it's worth considering, but my attention has been elsewhere, so I haven't reviewed this in depth. If someone else could review it, that would be great.",
      "I am in doubt if we should add this to the engine or not. And if it will be confusing to have two identical implementations one keeps the Armature instance (AvatarMask) and one does not (ArmatureMask). \r\n\r\nI prefer core members decide about this and if they are positive about this addition then I can continue reviewing the code.",
      "I agree with you Ali, two identical implementations in core package, would just mess up. The `AnimationMask` interface gives programmers the freedom to write their own functionality and that's perfectly fine. If there is nothing else to discuss, I plan to close this PR within 24 hours."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e0ba14f302d393b26a9",
    "number": 1829,
    "body": null,
    "head_branch": "capdevon-particles-updates",
    "is_a_fork": true,
    "comments": [
      "Changing the `toString()` format might break existing code.",
      "It's true, it might.  Though note that in the case of Transform, the lack of proper formatting before (and even after) means that it's nearly unparseable.",
      "How is such a thing possible? Could you give me an example where the code could break?",
      "Probably not break any code internally, or if that is the case, I would be glad it happens and that can be fixed :) `toString()` should not be used for anything more that i.e. logging purposes. But there is always someone using it on logic level. Illegal and should go straight to jail but what can you do.... Chances are probably very low here but of course they exist.",
      "> How is such a thing possible? Could you give me an example where the code could break?\r\n\r\nYes, I could. But first I'd like to understand the benefit of changing the `toString()` format. What's the motivation there?",
      "Because it is the right thing to do, because it is a clear mistake and the goal of all projects is to improve the quality of the code and remove errors, not keep them. \r\n\r\nUntil proven otherwise, as Tonihele said, it is not correct to accumulate errors in the project for those who do not know how to program. We give a signal of low quality and little propensity to improve the project to those who use the engine.",
      "Personally, I don't see a problem with changing toString() output to fix things.  Anyone relying on specific toString() formatting has to know they are on shaky ground.  It's not generally part of any contract and in this case the javadoc is already effectively lying about the output anyway.",
      "@pspeed42 I don't see where the javadoc is lying. Please clarify.\r\n@capdevon Calling it a \"clear mistake\" isn't sufficient to persuade me. You removed 4 blanks from the output, making it more compact. I don't see any other benefit, and you haven't presented any. In my mind, that slight compaction doesn't justify the risk of breaking apps. Please revert that portion of the PR.",
      "The javadoc heavily implies a decimal formatting (4 decimal places, not whole numbers for rotation, etc.) but in fact it will be whatever random format that the float toString will spit out... to potentially include exponent form, NaN, Infinity, etc..\r\n\r\nThe old formatting is inconsistent (leading space but no trailing space).\r\n\r\nIf we can't even fix the formatting of toString() output then maybe it's time to make the repository read-only.",
      "> maybe it's time to make the repository read-only.\r\n\r\n@pspeed42 It's not that time. What's happening here is I'm trying to weigh benefits against the risks, both minuscule in this case.\r\nI respect your wisdom and experience. If you ever get the urge to approve/integrate JME PRs, I'd welcome your assistance.",
      "> The javadoc heavily implies a decimal formatting (4 decimal places, not whole numbers for rotation, etc.) but in fact it will be whatever random format that the float toString\r\n\r\nIf the javadoc is misleading, that's unintentional. How would you improve the javadoc?",
      "I honestly didn't think my change request was so risky and absurd. We are all programmers with years of experience; it is okay to be cautious and evaluate everything carefully, but we all know that anyone would correct that method by removing the spaces. \r\n\r\nI like the engine and all the people behind it. I don't want to fight or disrespect anyone. I'm just trying to help. \r\n\r\nThe discussion got stuck on a hypothesis not yet proven: could you please show a concrete example of an application that could break?  Could it be useful to do a survey on the forum to quantify the percentage of risk?",
      "@capdevon I don't see any reason for a Forum survey. The opinions that matter are those of people with write access to the repo. If pspeed or Ali-RS is willing to integrate this PR without my approval, I won't complain.\r\n\r\nYou say you don't want to fight. Neither do I. So let's collaborate!\r\n\r\nIf I provide \"proof\" that this PR is potentially a breaking change, will you make the changes I requested on 29 June, without further argument? Or will you use my labor as a springboard for your next argument?",
      "ok, let's cooperate in a friendly and peaceful way as we always have.",
      "Please consider this code: https://github.com/jMonkeyEngine/jmonkeyengine/blob/37788c50b437487b474d2e554fe6467dd13955be/jme3-core/src/test/java/com/jme3/math/TestTransform.java#L49-L69\r\n\r\n",
      "At the moment I don't have a fast connection and I can't download the branch (more than 1 Gb) to reset the changes to the `Transform.toString()` method. I synced the branch to the latest master changes via github, and now obviously the changes don't pass the software checks (due to the `TestTransform` class). \r\n\r\nDo you prefer that I close the PR or leave it open in case someone else reports and tries to correct the same problem?\r\n\r\nIf so, I'll post a separate new PR for formatting the `TranslucentBucketFilter` class code as soon as I get the chance.",
      "Let's close this PR. If you want to track the `toString()` format issue, create a GitHub issue for it."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e0ca14f302d393b26aa",
    "number": 1827,
    "body": "Fixed issue #1824  swing look and feel to be defaulted to swing LAF, if you want to change the LAF on your own use this at your `SimpleApplication`: \r\n```java\r\nstatic {\r\n  try {\r\n      UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\r\n  } catch (Exception e) {\r\n      Logger.getLogger(MyClass.class.getName()).severe(\"Cannot set the LAF, defaulting back to System LAF\");\r\n  }\r\n}\r\n```\r\nThis is a test for this PR: \r\n![Screenshot from 2022-05-30 16-36-43](https://user-images.githubusercontent.com/60224159/171016601-c5b25549-e8f6-428a-8d12-40916d7ae898.png)\r\n\r\nWhen setting the LAF at the static initializer (as a user code):\r\n![Screenshot from 2022-05-30 16-39-17](https://user-images.githubusercontent.com/60224159/171016549-bea94294-a75c-4074-95dc-f82f7d29bad9.png)\r\n",
    "head_branch": "settings-laf-fix",
    "is_a_fork": true,
    "comments": [
      "I assigned @pspeed42 the swing master to review. For this seemingly trivial thing to go forward.",
      "Yeah, I think that's better.  Let the app decide.  Merged."
    ],
    "commit_messages": [
      "Merge pull request #1827 from JMonkey-Archive/settings-laf-fix\n\nSettingsDialog: LAF fix"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e0da14f302d393b26ab",
    "number": 1826,
    "body": "This PR includes: \r\n- Migrating the `AreaUtils` class from `com.jme3.scene.control` to `com.jme3.util`.\r\n- Deprecating `com.jme3.scene.control.AreaUtils`.\r\n- Jme3 copyright update.\r\n\r\nEDIT: \r\n- Targeting this issue #1825 ",
    "head_branch": "migrate-AreaUtils",
    "is_a_fork": true,
    "comments": [
      "To avoid code duplication, could you refactor the old deprecated class to keep only the public method and make it call the one in the new class?",
      "> To avoid code duplication, could you refactor the old deprecated class to keep only the public method and make it call the one in the new class?\r\n\r\nHello, yeah i will consider that.",
      "Done, @riccardobl you could review it now.\r\n\r\nEDIT: \r\n- This PR should close this issue #1825.",
      "I think the new class should not call the deprecated class, it should be vice-versa. I think this is also what @riccardobl meant.",
      "> I think the new class should not call the deprecated class, it should be vice-versa. I think this is also what @riccardobl meant.\r\n\r\nOh, i must have misunderstood this, okay i am going to refactor this.\r\n\r\nEDIT:\r\nThere is a small question though, should i move the private methods from the deprecated class to the new one ? I think they should be moved, so in case if we want to modify them later....",
      ">There is a small question though, should i move the private methods from the deprecated class to the new one ?\r\n\r\nYes.",
      "Here we go, you can review this now.",
      "Looks good to me, thanks"
    ],
    "commit_messages": [
      "AreaUtils: Migrated package to `com.jme3.util` (#1826)\n\n* AreaUtils: Migrated package to `com.jme3.util`\r\n\r\n* com.jme3.uitl.AreaUtils: removed code duplicates - added `final` class specifier\r\n\r\n* com.jme3.util.AreaUtils: fixed duplication build error\r\n\r\n* utils/AreaUtils.java: full migration to the utility package\r\n\r\n* scene/control/AreaUtils.java: removed utility methods - delegated functionality to `jme3.utils.AreaUtils`\r\n\r\n* scene/AreaUtils: fixed `jme3.util` package linking typo"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e0ea14f302d393b26ac",
    "number": 1823,
    "body": "This is an initial  implementation for the testable api, targeting issue #1649, which suggests building a better test chooser backend for jme3-examples, where one can pickup which test cases to run inside a package.\r\n\r\nThis is a video demonstrating testables in action : \r\n\r\n[![Video](https://user-images.githubusercontent.com/60224159/170361202-c6c75a54-4197-446a-a653-fbe2fb2b7e7d.jpg)](https://www.youtube.com/watch?v=u9biai9Yg38)\r\n\r\nFAQ: \r\n\r\n**How can i make my own test ?**: \r\nA: Your test should `extends JmeTestApp` or `JmeTestState`, in either cases, you will override `launch()` method and add what you want to test there, whether a `JmeApplication.attachState(this); for AppStates` or `setting up AppSettings and start()` or `setting up a JmeSurfaceView for android`. \r\n\r\n**Does this approach provide a recursive way of opening a package ?**\r\nA; Yep, all you need to do, is to give the package, which can be done by 2 methods : \r\nMETHOD-A : \r\n```java\r\n TestableExecutor.execute(\"jme3test\", \"--No-Data--\", signatures);\r\n```\r\nMETHOD-B : \r\n```java\r\n TestableExecutor.execute(Main.class.getPackage().getName(), \"--No-Data--\", signatures);\r\n```\r\n**Can i test multiple packages that aren't on the same tree, at the same time ?**\r\nA: Yep, just use : \r\n```java\r\nTestableExecutor.execute(new String[] {\"jme3test.app\", \"jme3test.animation\"}, \"--No-Data--\", signatures);\r\n```\r\n**Can i use multiple signatures in the same `@Test` annoation ?**\r\nA: Yep, use this : \r\n```java\r\n@Annotations.Test(signatures = {Launcher.SIG_WATER_FILTERS, Launcher.SIG_ALL})\r\n```\r\nBut, no `@Test` repetition...it complicates simple stuff and not clean anyway.\r\n\r\n**What will happen if i have non-class files on my package**\r\nA: Don't worry, the utility skips those.\r\n\r\n**What will happen if i have other classes not implementing the Testable ?** \r\nA: Those are skipped too.\r\n \r\n**Can i use this on android ?**\r\nA: Theoretically, you can, but i haven't found the time to test that yet.\r\n\r\n**What will happen if i extended JmeTestApp and didn't add a `@Test` with a signature ?**\r\nA: The utility will exclude this test, because how should it know 'is it ready to be executed?', if you want to run all Testables under a package then use a unified signature in all those classes, for example, add this to all the testables you want to run `Launcher.SIG_ALL` while you can still use other signatures to filter your tests for other run configurations : \r\n```java\r\n@Annotations.Test(signatures = {Launcher.SIG_WATER_FILTERS, Launcher.SIG_ALL})\r\n``` \r\n \r\nI think that is it, for now, if that is what you are seeking, then i hope it will be helpful, please give a quick review.\r\n\r\nEDIT: \r\nAn example: \r\n1) The Testable class : \r\n```java\r\n/*\r\n * Copyright (c) 2009-2021 jMonkeyEngine\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are\r\n * met:\r\n *\r\n * * Redistributions of source code must retain the above copyright\r\n *   notice, this list of conditions and the following disclaimer.\r\n *\r\n * * Redistributions in binary form must reproduce the above copyright\r\n *   notice, this list of conditions and the following disclaimer in the\r\n *   documentation and/or other materials provided with the distribution.\r\n *\r\n * * Neither the name of 'jMonkeyEngine' nor the names of its contributors\r\n *   may be used to endorse or promote products derived from this software\r\n *   without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\r\n * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\r\n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\r\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\r\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\r\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\r\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\r\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\npackage jme3test.app.test;\r\n\r\nimport com.jme3.system.AppSettings;\r\nimport com.jme3.testable.impl.JmeAppTest;\r\nimport com.jme3.scene.Geometry;\r\nimport com.jme3.scene.shape.Box;\r\nimport com.jme3.system.Annotations;\r\n\r\nimport jme3test.Launcher;\r\n\r\n/**\r\n * Test a bare-bones application, without SimpleApplication.\r\n */\r\n@Annotations.TestableTags({Launcher.SIG_ALL})\r\npublic class BareBonesAppTest extends JmeAppTest<AppSettings> {\r\n\r\n    private Geometry boxGeom;\r\n\r\n    public static void main(String[] args){\r\n        AppSettings settings = new AppSettings(true);\r\n        settings.setRenderer(AppSettings.LWJGL_OPENGL2);\r\n        settings.setAudioRenderer(AppSettings.LWJGL_OPENAL);\r\n        new BareBonesAppTest().launch(settings);\r\n    }\r\n\r\n\r\n    @Override\r\n    public void simpleUpdate(float tpf) {\r\n        super.simpleUpdate(tpf);\r\n        boxGeom.rotate(tpf * 2, tpf * 4, tpf * 3);\r\n    }\r\n\r\n    @Override\r\n    public void simpleInitApp() {\r\n\r\n        // create a box\r\n        boxGeom = new Geometry(\"Box\", new Box(2, 2, 2));\r\n\r\n        // load some default material\r\n        boxGeom.setMaterial(assetManager.loadMaterial(\"Interface/Logo/Logo.j3m\"));\r\n\r\n        // attach box to display in primary viewport\r\n        rootNode.attachChild(boxGeom);\r\n    }\r\n\r\n\r\n    @Override\r\n    public void launch(AppSettings userData) {\r\n        super.launch(userData);\r\n        setSettings(userData);\r\n        setShowSettings(false);\r\n        start();\r\n    }\r\n}\r\n```\r\n2) The Launcher (main class) : \r\n```java\r\npackage jme3test;\r\n\r\nimport com.jme3.system.AppSettings;\r\nimport com.jme3.util.TestableExecutor;\r\n\r\nimport java.lang.reflect.InvocationTargetException;\r\n\r\n/**\r\n * Tests the new jme test api.\r\n *\r\n * @author pavl_g.\r\n */\r\npublic class Launcher {\r\n    public static final String SIG_ALL = \"ALL\";\r\n    public static final String SIG_WATER_FILTERS = \"WATER-FILTER\";\r\n    public static final String PBR = \"PBR\";\r\n\r\n    public static final String[] signatures = new String[] {\r\n            SIG_ALL\r\n    };\r\n\r\n    public static void main(String[] args) throws InstantiationException, IllegalAccessException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException {\r\n        final AppSettings settings = new AppSettings(true);\r\n        settings.setRenderer(AppSettings.LWJGL_OPENGL2);\r\n        settings.setAudioRenderer(AppSettings.LWJGL_OPENAL);\r\n        TestableExecutor.getInstance().launch(new String[] {\"jme3test\"}, settings, signatures);\r\n    }\r\n}\r\n```\r\n\r\nEDITED: (After moving to generics).\r\nEDITED2: (After replacing `signatures` with `tags`).",
    "head_branch": "jme-test-api",
    "is_a_fork": true,
    "comments": [
      "Since this PR is not ready to be integrated, could you mark it as a draft, please?",
      "> Since this PR is not ready to be integrated, could you mark it as a draft, please?\r\n\r\nYeah sure, but i am keeping it open so you don't ignore it, i just need to be sure of the general pattern of this PR, is that sufficient for improving jme3 examples ??",
      "At the moment, I'm busy with other tasks, so I haven't looked closely at this PR.",
      "Hi Pavl, I appreciate your effort, but it doesn't seem like a core feature to me. If approved, I think it should be in the jme3-examples module. In this way, you do not have to wait for the publication of a new version of the engine, to correct any errors in the tests. In any case, I still have many doubts about the usefulness of this architecture. I would keep the examples simple without non-functional burdens. It might be an external project that uses the jme3-examples module as a library, but that's just my point of view.",
      "Hello Wyatt, thanks for your opinion, I was hesitating about the package too, I don't really know what the right thing to do about this, because this is a backend api (so there are abstraction layers that should be at the core level), so I guess I will wait about more opinions or another idea.\r\n\r\n> In any case, I still have many doubts about the usefulness of this architecture.\r\n\r\nThis is a backend code for testing jMonkeyEngine apps and states, this should replace the current backend of `TestChooser` and should work on android too (still preparing a testcase), the brief of the feature is that it searches a package for `Testables` and launch only tagged ones in synchronicity.\r\n\r\nThis is a requested feature, I wouldn't have written it, if it wasn't a requested feature in the issue.\r\n\r\nEDIT:\r\nMay be one of the strong reasons to keep it at the core level, is that it supports android too and you could do your own Testables and test your own apps and states (since it's an API), so I think it wouldn't be appropriate if you added the module `jme3-examples` to implement the jme3 Testable API for your project.\r\n\r\nEDIT2: \r\nAs for publication, the feature is now ready and fully mature, with desktop prove cases, one thing that's missing is a prove case for android..you could make a quick review.\r\n\r\nEDIT3: \r\nFor example, i could even make a good use of this new api, to fix this issue #632 too, later on, so it's pretty useful when thinking out of the box.",
      "I will separate this into a plugin soon, you can find it available on my repositories later. There is no need to clog-up the core with a new API, though the mere purpose of this PR was the opened issue with the bizarre requirements anyway..."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e0fa14f302d393b26ad",
    "number": 1821,
    "body": "This PR targets this issue #1678 and adds these : \r\n1) Deprecation of `AndroidBufferAllocator`.\r\n2)  Update jme3-copyright.",
    "head_branch": "android-native-bytebuffer",
    "is_a_fork": true,
    "comments": [
      "Thanks @Scrappers-glitch ",
      "@Scrappers-glitch, unfortunately, I am not qualified to review this PR but I have a few questions to ask.\r\n\r\nHave you tested this PR on an android device?\r\nDid you precompile natives or they will be generated by GitHub CI?\r\nWhich ARM architectures are supported? \r\n\r\nThanks",
      "Thank you @Scrappers-glitch . \r\n\r\nWe need to merge this before continuing to work on https://github.com/jMonkeyEngine/jmonkeyengine/issues/1674 , https://hub.jmonkeyengine.org/t/buffer-allocator-implementation-set-by-lwjglcontext-gets-ignored-sometimes/45594/4",
      "> Have you tested this PR on an android device?\r\n\r\n@Ali-RS yep on my physical device (Xiaomi Redmi Note 6 pro running on LineageOS-18), the test on the WIP screenshot, i tested the `TestInstancedNode` testcase and debugged using android logs.\r\n\r\n> Did you precompile natives or they will be generated by GitHub CI?\r\n\r\nI have NDK within the SDK locally on my machine, so i just changed the `ndkPath` on the gradle.properties file to my ndk path and the `compileAndroidNatives` to true that is locally on my laptop so i can test it, but for jme3-android-native yep it will be generated by the CI.\r\n\r\n> Which ARM architectures are supported?\r\n\r\nAll those ABIs (Application Binary Interfaces) are supported  : \r\n1) [armeabi-v7a](https://developer.android.com/ndk/guides/abis#v7a)\r\n2) [arm64-v8a](https://developer.android.com/ndk/guides/abis#arm64-v8a)\r\n3) [x86](https://developer.android.com/ndk/guides/abis#x86) for desktop android_x86 (and emulators).\r\n4) [x86_64](https://developer.android.com/ndk/guides/abis#86-64) for desktop android_x86 (and emulators).\r\n\r\nBy doing this at the `Application.mk` : \r\n`APP_ABI := all`\r\n\r\nI have left respective links for the resources i used for this PR, navigate them if there is something you want to understand.",
      "Ops, `@deprecated` mentioned someone by wrong :-).",
      "Perfect, unless there are objections I will merge this PR tomorrow.\r\nThank you.",
      "Btw, this PR should close the issue #1678, Could you please link them, thank you.",
      "Merged. Thank you for your contribution."
    ],
    "commit_messages": [
      "Android: Implemented AndroidNativeBufferAllocator - Deprecated AndroidBufferAllocator (#1821)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e10a14f302d393b26ae",
    "number": 1820,
    "body": "I think you already upgraded Gradle to 6.9.2 but this part was left out.",
    "head_branch": "gradle-wrapper",
    "is_a_fork": true,
    "comments": [
      "Perfect! Thank you."
    ],
    "commit_messages": [
      "Update the Gradle wrapper version to 6.9.2 (#1820)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e11a14f302d393b26af",
    "number": 1819,
    "body": "This PR includes : \r\n- Migration to new `com.jme3.view.surfaceview` package.\r\n- Addition of `package-info.java` for the new packages.\r\n- Update of jme3-copyright.\r\n\r\nThis PR targets : \r\n- issue #1803.\r\n- Parts of issue #1800.",
    "head_branch": "surfaceview-package-migration",
    "is_a_fork": true,
    "comments": [
      "Let me know if there any required changes for this PR.",
      "I need to know what is next to get this merged, please let me know.",
      "I plan to merge this after PR 1748 is integrated.",
      "> I plan to merge this after PR 1748 is integrated.\r\n\r\nThanks for looking into this.\r\n\r\nIf you would like, i can prepare a simple quick migration guide for these changes to be included in the new release.",
      "Thanks for your contribution. I'm unsure when/if there will be a new release.\r\n\r\nThe changes seem very straightforward; I don't think a migration guide will be needed.",
      "> Thanks for your contribution. I'm unsure when/if there will be a new release.\r\n> \r\n> The changes seem very straightforward; I don't think a migration guide will be needed.\r\n\r\nYeah, anyway, if you changed plans and urgently needs it, just ping me here."
    ],
    "commit_messages": [
      "JmeSurfaceView: Package migration (#1819)\n\n* JmeSurfaceView: migration to new package (com.jme3.view.surfaceview)\r\n\r\n* JmeSurfaceView: migration to new package (com.jme3.view.surfaceview)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e12a14f302d393b26b0",
    "number": 1818,
    "body": "to address issue #1816",
    "head_branch": "sgold/issue-1816",
    "is_a_fork": false,
    "comments": [
      "Unless there's more to discuss, I plan to integrate this PR in about 24 hours."
    ],
    "commit_messages": [
      "jme3-plugins:  rename the TrackData.checkTimesConsistantcy() method (#1818)\n\n* jme3-plugins:  rename the TrackData.checkTimesConsistantcy() method\r\n\r\n* TrackData:  correct my mistake (oops!)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e13a14f302d393b26b1",
    "number": 1817,
    "body": "In the wake of PR #1474, the source code for the jme3-jbullet library remains split between 2 directories:  jme3-jbullet/src/main/java/com/jme3/bullet and jme3-bullet/src/common/java/com/jme3/bullet\r\n\r\nThe jme3-jbullet library shows no signs of dying, and the meanwhile the split has proven confusing and inconvenient. I therefore propose to merge the \"common\" source files into the jme3-jbullet directory.",
    "head_branch": "sgold/physics-reorg",
    "is_a_fork": false,
    "comments": [
      "On a similar note, we may want to integrate jbullet directly, as a submodule? into the repository? or at least in some kind of pipeline, since we're going to have to fix jbullet bugs as well and normen found our version",
      "> we may want to integrate jbullet directly\r\n\r\nThe difficulty is that I haven't managed to build jbullet without using Ant. I know there are ways to integrate Ant tasks into Gradle builds, but I haven't made them work for this particular case. In order to publish a jbullet library, I build the source jar, javadoc jar, pom, and module using Gradle, but build the class jar using Ant.",
      "Barring further discussion, I plan to self-integrate this PR in about 24 hours."
    ],
    "commit_messages": [
      "move 44 Java source files from jme3-bullet/src/common to jme3-jbullet (#1817)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e14a14f302d393b26b2",
    "number": 1815,
    "body": "This PR implements the \"straightforward patch\" solution to issue #1813.",
    "head_branch": "sgold/issue-1813",
    "is_a_fork": false,
    "comments": [
      "I tested this change and it does fix my issue, very cool!",
      "> I tested this change and it does fix my issue, very cool!\r\n\r\nI'm sure you weren't the first person to be affected by #1813, but you were the first to report it with enough details for it to be reproduced. Thank you!\r\n\r\nIt's a nasty bug, an old bug, and it might otherwise have persisted for years. I'm very grateful for your diligence.",
      "Unless there's substantial discussion, I intend to integrate this PR in about 24 hours."
    ],
    "commit_messages": [
      "solve issue #1813 (glTF loader loses keyframes) (#1815)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e15a14f302d393b26b3",
    "number": 1814,
    "body": "It's basically this: https://docs.unity3d.com/ScriptReference/Quaternion.RotateTowards.html\r\nI honestly don't know much about how Quaternions work, I took the code from: https://gist.github.com/aeroson/043001ca12fe29ee911e\r\n\r\nTwo things I don't know:\r\n* The linked implementation uses slerpUnclamped. There's no such method in jMonkey. My test code worked with just clamp.\r\n* I don't know if the angle() method requires the quaternions to be normalized.\r\n\r\nI copied the naming convention that slerp uses, but I think they should be rotateTowards/rotateTowardsLocal (and slerp/slerpLocal) to match the other methods in the maths package.",
    "head_branch": "rotate-towards",
    "is_a_fork": true,
    "comments": [
      "I'm skeptical whether someone who doesn't understand quaternions should be contributing code to the `Quaternion` class. Setting that aside for now, I have a few questions:\r\n\r\n1. What are the intended use cases for the new methods?\r\n2. What tests have you run to convince you that the methods are reliable?\r\n3. What happens if a large negative value (such as -6) is passed for `maxRadDelta`?\r\n\r\nOther notes:\r\n+ The 2-argument `rotateTowards()` should be renamed `rotateTowardsLocal()` because it modifies the current instance. (The `slerp()` method is, unfortunately, a bad example.)\r\n+ The `angle()` method should be renamed `angleBetween()` to match the analogous `Vector3f` method.\r\n+ JME's quaternion slerp method sometimes modifies the target. Hence, so does `rotateTowards()`, and this oddity should be documented.\r\n+ The angles are in radians, and this detail should be documented.\r\n+ As written, the `angle()` method is accurate only for unit (normalized) quaternions. Hence, the other new methods are also limited to unit quaternions, and this limitation should be documented.",
      "My use case is that I have a character and a third-person chase camera.\r\nI'm adding a feature to auto-adjust the camera to go behind the character and I want the camera to move at constant speed.\r\n\r\nI will have to get back to you on tests.\r\n\r\n> * The 2-argument `rotateTowards()` should be renamed `rotateTowardsLocal()` because it modifies the current instance. (The `slerp()` method is, unfortunately, a bad example.)\r\n\r\nActually renamed both, cause they both modify the current instance.\r\n\r\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e16a14f302d393b26b4",
    "number": 1812,
    "body": "I've verified this fix on Linux using the `TestIssue1798` app in jme3-examples. I also tested with no filters in the FPP and without the FPP to ensure I did not break those situations.",
    "head_branch": "sgold/issue-1798",
    "is_a_fork": false,
    "comments": [
      "Now I've also tested all 3 situations on macOS.",
      "I've now tested all 3 cases on Windows 11 as well.\r\n\r\nUnless there's discussion, I intend to integrate this PR in about 26 hours."
    ],
    "commit_messages": [
      "FilterPostProcessor:  update camera frustum during reshape() (#1812)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e17a14f302d393b26b5",
    "number": 1811,
    "body": "I want to use Gltf but I don't want to use PBR, so I made this adapter: https://gist.github.com/Minikloon/93728e7ad494373b70753c072e36a77a\r\n\r\nNow I don't want to register it on every model key!",
    "head_branch": "register-default-material-adapter",
    "is_a_fork": true,
    "comments": [
      "rip conflict with https://github.com/jMonkeyEngine/jmonkeyengine/pull/1810",
      "Do you load GLTF directly into your game or do you use the recommended and much smarter approach of converting it to j3o first?  Because it's quite common to have to fix a dozen things during the gltf->j3o conversion process and this could in theory just be another standard thing to fix during conversion.\r\n\r\nFor example, JmeConvert allows you to specify scripts to post-process the model during conversion and it would be a pretty standard script to convert all materials to something other than PBR.",
      "I saw from JmeConvert that you use the adapters map of the GltfModelKey. I could've used that but then I'd want a ModelKeyFactory.\r\n\r\nIf I wanted to setup an art pipeline rn, I'd override com.simsilica.jmec.Convert::runProcessors and run java code there. But even then it's post-processing. Hooking into the loading dodges having to fully understand the jme layout.",
      "re: \"I'd override com.simsilica.jmec.Convert::runProcessors and run java code there.\"\r\n\r\nIf you are calling it from code then you can already run Java code there and if you are calling it from the command line then you already can use groovy which is like Java++.\r\n\r\nI'm not against fleshing out the GltfLoader API but in the long run you will be happier with an asset pipeline that gets you to a j3o file that is ready to load, properly scaled, cleaned up, generated j3m files, etc... rather than constantly hacking in \"one more thing\" at load time.",
      "@minikloon Why did you close this PR?\r\n",
      "I'll re-open if I work more with jMonkey.",
      "But why not just leave it open until then?",
      "I don't like PRs in limbo, they make me worry that I will have to make changes _someday_.",
      "good to know"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e18a14f302d393b26b6",
    "number": 1810,
    "body": "In order to ensure initialization of the `defaultMaterialAdapters` map, I created a no-arg constructor for the loader. Otherwise this is a straightforward fix.",
    "head_branch": "sgold/issue-1809",
    "is_a_fork": false,
    "comments": [
      "I plan to integrate this in about 24 hours."
    ],
    "commit_messages": [
      "solve issue #1809 (GltfLoader is not thread-safe) (#1810)\n\n* solve issue #1809 (GltfLoader not thread-safe)\r\n\r\n* solve issue #1809 (GltfLoader is not thread-safe)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e18a14f302d393b26b7",
    "number": 1808,
    "body": "This PR includes : \r\n- Migration to new `com.jme3.view.surfaceview` package.\r\n- Addition of `package-info.java` for the new packages.\r\n- Update of jme3-copyright.\r\n\r\nThis PR targets : \r\n- issue #1803.\r\n- Parts of issue #1800.\r\n\r\nNote :  this branch is a sub-branch of `javadocs-format-improves`, so it pre-resolves the conflicts after merging the docs improvements PR :+1: .",
    "head_branch": "package-migration",
    "is_a_fork": true,
    "comments": [
      "Hmm, didn't expect these files to cause conflicts between the 2 branches....i guess nothing can resolve this, i need to copy my files to another new branch with new PR, because if i merged the 2 branches on top of one another, all the work would disappear.",
      "I tried to resolve the conflicts but i cannot, i will just close this and open a new clean one with the same changes (just copying files to another branch), i had to study later why this conflict happens even though i have refractored moved the classes to a new package at the top of this branch.",
      "Ah i got it, i was sub-branching without updating the traffic automatically using `git pull https://github.com/organization/repo.git parent-branch`, my fault."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e19a14f302d393b26b8",
    "number": 1805,
    "body": "Some code format and javadocs fixes",
    "head_branch": "javadocs-format-improves",
    "is_a_fork": true,
    "comments": [
      "Let me know if you find something wrong with this PR..\r\n\r\nNotice : The order of the internal classes have been changed by the code reformater, they are now at the end of the class....",
      "I notice you added blank lines to organize imports into groups. Section 3.3.3 of the style guide says:\r\n> If there are both static and non-static imports, a single blank line separates the two blocks. There are no other blank lines between import statements.",
      "> I notice you added blank lines to organize imports into groups. Section 3.3.3 of the style guide says:\r\n> \r\n> > If there are both static and non-static imports, a single blank line separates the two blocks. There are no other blank lines between import statements.\r\n\r\nThe IDEA code reformater does this, it separates api import statements into [android, jme, java] for readability. Should i revert this ?",
      "> Should i revert this ?\r\n\r\nIf you can.",
      "Done, let me know if there are other changes.",
      "Note:  there are 2 PRs on the same branch. It appears that, as a consequence, the blank lines will be added in #1805 and then removed by #1808.",
      "I was wrong about the 2 PRs on the same branch. I'm glad that worked out cleanly.\r\n\r\n@Scrappers-glitch Thank you for your latest contribution to the Engine!"
    ],
    "commit_messages": [
      "JmeSurfaceView: Javadocs format improves (#1805)\n\n* JmeSurfaceView: format fix and java-docs improves\r\n\r\n* JmeSurfaceView: format fix and java-docs improves\r\n\r\n* Code: removed import statements white spaces"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e1aa14f302d393b26b9",
    "number": 1802,
    "body": "This exception is an android native exception issue #1804 , raised due to trying to use the nullified object before being recycled : \r\n```java\r\nE/AndroidRuntime: FATAL EXCEPTION: main\r\n    Process: com.jme3.hellojmesurfaceview, PID: 12825\r\n    java.lang.IllegalArgumentException: Cannot add a null child view to a ViewGroup\r\n        at android.view.ViewGroup.addView(ViewGroup.java:4994)\r\n        at android.view.ViewGroup.addView(ViewGroup.java:4976)\r\n        at com.jme3.app.jmeSurfaceView.JmeSurfaceView.addGlSurfaceView(JmeSurfaceView.java:551)\r\n        at com.jme3.app.jmeSurfaceView.JmeSurfaceView$RendererThread.run(JmeSurfaceView.java:207)\r\n        at android.os.Handler.handleCallback(Handler.java:938)\r\n        at android.os.Handler.dispatchMessage(Handler.java:99)\r\n        at android.os.Looper.loop(Looper.java:223)\r\n        at android.app.ActivityThread.main(ActivityThread.java:7664)\r\n        at java.lang.reflect.Method.invoke(Native Method)\r\n        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:592)\r\n        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:947)\r\n ```",
    "head_branch": "fix-premature-object-destruction",
    "is_a_fork": true,
    "comments": [
      "I am currently testing this !",
      "The problem is fixed by removing this line !",
      "Who was the crazy guy who added that anyway?!? :) :) :)\r\n\r\nhttps://github.com/jMonkeyEngine/jmonkeyengine/pull/1650",
      "> Who was the crazy guy who added that anyway?!? :) :) :)\r\n> \r\n> #1650\r\n\r\nI agree this was crazy, but you will never believe me, if i told that it was working like a charm on android 10, and on android 11, it sometimes works, but most of time it shows this exception, the problem lies within `setRequestOrientation()` which destroys and recreate the activity !!",
      "I added the code that removes and destroys android views to prevent GlSurfaceViews overlapping.",
      "We all make mistakes. I, for one, appreciate software contributors who hang around and help maintain their contributions.\r\n\r\nNot being an Android developer, I don't feel qualified to review this PR. If there's no substantive discussion, I'll integrate it.",
      "i just realized that i wasn't following the package naming conventions on `com.jme3.app.jmeSurfaceView;`, it should be `com.jme3.app.view;` instead ! Is it okay to rename it in another PR ? (AFAIK, i haven't seen anyone yet using jmesurfaceview, let me know what you think).",
      "Someone mentioned the package naming issue to me---I forget who. It's the sort of issue that's easy to solve before a library is released, but difficult to solve afterward. To fix it now, I believe we'd either have to duplicate source code in the \"jme3-android\" library or else break existing apps. That being the case, I don't think it's worth fixing. Instead, we'll learn from the mistake and carry on.\r\n\r\nIf we wanted to strictly conform to Java's package naming conventions, we'd either have to move all our packages out of \"com.jme3\" or else acquire the \"jme3.com\" domain from Jack M. Estes III.\r\n ",
      "I think we have the forums if existing apps break, one could ask what had happened, and the release notes is a direct guide for engine changes.",
      "\"com.jme3\" issues aside since that's a completely different topic...\r\n\r\nHow many releases did \"com.jme3.app.jmeSurfaceView\" go into?  Is this normally something that a user codes to directly or is it normally hidden?",
      "> \"com.jme3\" issues aside since that's a completely different topic...\r\n> \r\n> How many releases did \"com.jme3.app.jmeSurfaceView\" go into? Is this normally something that a user codes to directly or is it normally hidden?\r\n\r\nThe feature is added since jme-3.4.\r\n\r\nEDIT : JmeSurfaceView is adding jme to a layout, so you have to go through some extra android native steps to setup a jme game, AFAIK most people if not all still using AndroidHarness, which is easier to use.",
      "Further discussion on : #1803 ",
      "@stephengold Could you please link this PR to this issue #1804, thank you.",
      "> Someone mentioned the package naming issue to me---I forget who\r\n\r\nIt was me on Nov 21, 2021 in a private message :) Honestly I'd be more inclined to correct the error and rename the package as Pavl suggested. The functionalities are the same and it takes very little to recompile an application. We all make mistakes, but this should be solved because a good programmer seeing such a thing would think that the whole engine is of low quality and would not use it. I appreciate Pavl's contribution and support on Android and I don't condemn his mistake, but the quality of an engine can also be seen in the details. A description of the change in the release notes of the next version will easily help programmers understand what to do to recompile their application if they have used the class.\r\n",
      "There is a typo on xmL. \r\nThe 'L' is uppercase and 'xm' are lowercase.\r\n```java\r\n/**\r\n * <b>A RelativeLayout class holder that holds a {@link GLSurfaceView} as a renderer UI component and uses {@link OGLESContext} as a renderer context to render\r\n * a jme game on an android view for custom xmL designs.</b>\r\n * ...\r\n */\r\n```\r\n\r\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-android/src/main/java/com/jme3/app/jmeSurfaceView/JmeSurfaceView.java#L70",
      "@capdevon thank you.",
      "I have nothing to add on this PR, @capdevon 's notes are taken for the time of documentation improvements.",
      "@Scrappers-glitch: with your permission, I'd like to make @capdevon's suggested change and then integrate this PR into jMonkeyEngine:master.",
      "> @Scrappers-glitch: with your permission, I'd like to make @capdevon's suggested change and then integrate this PR into jMonkeyEngine:master.\r\n\r\nI was planning to do that on another documentation PR before package changes. Would that be more appropriate ? (there are formatting errors in javadocs too).",
      "@Scrappers-glitch Since the typo isn't related to this PR, that will be fine."
    ],
    "commit_messages": [
      "JmeSurfaceView: Removed explicit nullifying GlSurfaceView onDestroy (#1802)\n\n* JmeSurfaceView: Removed explicit nullifying GlSurfaceView onDestroy\r\n\r\n* JmeSurfaceView: destroying the GlSurfaceView using `ViewGroup#removeView(view:android.View)`\r\n\r\n* fixed-conflicting-changes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e1ba14f302d393b26ba",
    "number": 1801,
    "body": "Fix for issue #1799 ",
    "head_branch": "fix-jmesurfaceview",
    "is_a_fork": true,
    "comments": [
      "Thanks for continuing to maintain `JmeSurfaceView`. Is this PR ready to be integrated?",
      "> Thanks for continuing to maintain `JmeSurfaceView`. Is this PR ready to be integrated?\r\n\r\nYep.\r\nThis situation is very similar to other desktop JmeContext implementations.\r\n\r\nAs you can see, `app.stop()` is called inside `Applet#destroy()` which is the same as `Activity#onDestroy()` on android, in this case a LifeCycleEvent can listen remotely for an `Activity#onDestory()` and stop a legacyApp which dispatches `JmeContext#destroy()` later that destroys jme context including the legacy app (with audio and other game resources) :\r\n\r\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/435101a2c17f2311fcee49d0d1c83f28e93a2967/jme3-desktop/src/main/java/com/jme3/app/AppletHarness.java#L182"
    ],
    "commit_messages": [
      "Android: Fixed duplicate destruction of JmeSurfaceView (#1801)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e1ca14f302d393b26bb",
    "number": 1797,
    "body": "This PR adds the matching java types to VarTypes and uses them to perform runtime type checks on MatParam.setValue().\r\nShould be merged after https://github.com/jMonkeyEngine/jmonkeyengine/pull/1759",
    "head_branch": "materialtypes",
    "is_a_fork": true,
    "comments": [
      "I think this is a good idea. I'm curious why the checks are enabled dynamically.",
      "While not ideal, i suspect there might be some community code that sets wrong types or changes VarType at runtime (being it protected not final),  since this (even if wrong) would technically work in some circumstances,  i wanted to provide a way to disable the type check without requiring a recompilation of the engine in case this causes existing code to break.\r\n\r\nIt might be superfluous ... i am not sure"
    ],
    "commit_messages": [
      "Add java types to VarType and type checks to MatParam (#1797)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e1da14f302d393b26bc",
    "number": 1796,
    "body": "Invoking `AppSettings.getBoolean()` directly is error-prone. Ideally, its use would be limited to custom settings.\r\n\r\nThis PR refactors some invocations to use special-purpose methods already defined in the `AppSettings` class.",
    "head_branch": "sgold/getBoolean",
    "is_a_fork": false,
    "comments": [
      "Unless there's more to discuss, I propose to self-integrate this PR in about 24 hours."
    ],
    "commit_messages": [
      "refactor to avoid invoking AppSettings.getBoolean() directly (#1796)\n\n* refactor AppSettings.getBoolean(\"GraphicsDebug\") to isGraphicsDebug()\r\n\r\n* refactor AppSettings.getBoolean(\"GraphicsTiming\") to isGraphicsTiming()\r\n\r\n* refactor AppSettings.getBoolean(\"GraphicsTrace\") to isGraphicsTrace()\r\n\r\n* refactor !AppSettings.getBoolean(\"DisableJoysticks\") to useJoysticks()\r\n\r\n* LwjglContextVR:  correct my mistake"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e1ea14f302d393b26bd",
    "number": 1794,
    "body": "Based on the observations documented in #1793, the key issue is that transitions between windowed mode and fullscreen mode in LWJGL v3 don't always generate `reshape()` callbacks. This spoils GUI layouts that need updating each time the dimensions of the graphics context change. The user sees a layout generated for a different-sized framebuffer.\r\n\r\n(There's also an issue with the initial `reshape()` callback, which occurs on Windows, but not Linux, when the initial context is created. However, that's an easy issue for apps to work around.)\r\n\r\nThe key issue manifests differently on Linux than on Windows:\r\n+ On Linux LWJGL v3, windowed-to-fullscreen causes a callback, but not fullscreen-to-windowed.\r\n+ On Windows LWJGL v3, neither transition causes a callback.\r\n\r\nThis PR proposes that jme3-lwjgl3's  `LwjglWindow` should explicitly invoke `reshape()` on both windowed-to-fullscreen and fullscreen-to-windowed transitions. This results in some redundant callbacks (multiple callbacks for a single `createContext()`). However, I expect most `reshape()` callbacks perform idempotent operations. Also, filtering out redundant callbacks is much easier that compensating for missing callbacks.",
    "head_branch": "sgold/issue-1793",
    "is_a_fork": false,
    "comments": [
      "Lying in bed this morning, I came up with a simpler, more elegant fix.",
      "Here's a summary:\r\n + deal with all size/scale changes in a single method, now named `updateSizes()`\r\n + keep a private record of the framebuffer size, so `updateSizes()` won't be confused by unrelated changes to `AppSettings`",
      "Unless there's more to discuss, I propose to self-integrate this PR in about 24 hours.",
      "In order to backport this into \"v3.5\" branch, we'd also need to backport #1750. The combination of the 2 PRs seems risky relative to the benefits. Better wait for 3.6 or 4.0",
      "Looks like this breaks TestAWTPanels, please see #1945 "
    ],
    "commit_messages": [
      "work around missing reshape() callbacks from LWJGL v3 (issue #1793) (#1794)\n\n* LwjglWindow:  workaround skipped reshape() callbacks (issue #1793)\r\n\r\n* complete the workaround for MS-Windows platforms\r\n\r\n* LwjglWindow:  maintain oldFramebufferWidth and oldFramebufferHeight\r\n\r\n* notify the window-size listeners\r\n\r\n* better invoke updateSizes() AFTER the window is full configured\r\n\r\n* delete an unused field\r\n\r\n* correct a logic error in updateSizes()"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e1fa14f302d393b26be",
    "number": 1792,
    "body": "Currently, JME scenes with a skybox can't achieve a realistic day/night cycle because the AmbientLight and DirectionalLight do not affect the skyBox's brightness or color.\r\n\r\nThis small addition would allow basic skyboxes to work with day/night cycles, as well as any other special effects that could benefit from changing the distant sky color/brightness.\r\n\r\nIf this addition sounds like a good idea to core devs and is approved, I can add the rest of the code for the new color param to the .jj3md files and make any other adjustments so its mergable.",
    "head_branch": "patch-6",
    "is_a_fork": true,
    "comments": [
      "I think you typoed `.mult` instead of `*`.\r\n\r\nI am fine with this addition, but will this work with common skyboxes? I am not entirely convinced since they are usually pretty complex. Can you show how your skybox looks and how you are using this to simulate day/night cycle?",
      "> I think you typoed `.mult` instead of `*`.\r\n\r\nYes my mistake, I just typed up a short draft to display the general idea and I confused it with the java vector multiplication code.\r\n\r\nI think for some nature-based SkyBoxes with mostly trees, clouds, and mountains this will work well, but you're right it won't work for complex skyboxes, or ones with that appear to be lit from sources that should still be lit when its night.  \r\n\r\nAnd while using a sky box like this definitely isn't as good for day/night as some other sky options like SkyControl or the other dynamic cloudy sky libraries, I figure that having something in the basic SkyBox for day/night is better than nothing. I like those other options better for clouds, but I also like how custom SkyBoxes can be uniquely made to match the zone, so I'm still switching between different sky options for different scenarios.\r\n\r\nAn alternative idea that would have better visual results for complex skyboxes would be to have a second cube map and interpolate between the two based on a value sent into the shader, so you could edit the skybox textures to make an alternate set of textures adjusted for night time (add stars, adjust things like sky-scraper windows to look like the lights are on, etc). \r\n\r\nI will also post a video example later on as soon as I have a chance.",
      "The results with just scaling based on a color value are much worse than I expected, even with a generic set of cloudy sky textures that I thought would do well. So you are right that this isn't a great way to do realistic day/night.\r\n\r\nI also tried the second idea of making a second cubeMap that has versions of the sky textures adjusted for night. This was going well and theoretically works, but I stopped after I finished making the adjusted set of sky textures and previewed them in JME, because it created noticeable seams between the textures of the sky box.  Even though I applied the same edits to all 6 textures, it seems as though some blurring happened on the edges with some of the color editing effects I used did in Gimp to make the night textures. \r\n\r\nSo I think this may not be the best idea to try and use a basic skybox for anything dynamic like day or night, its not necessarily easy to edit existing skybox textures, and the results are still a sky that doesn't move and just changes colors. So maybe its better to just use a more advanced sky library and forgo trying to make skybox more advanced.",
      "Here were the results with interpolating between 2 cubemaps in the shader. It's not bad for a basic skybox, but it's not great for the effort it took to modify all 6 sky textures, especially considering this was a really simple set of sky textures and I still struggled to edit the colors to be dark enough without creating even more noticeable visual artifacts.\r\n\r\nhttps://www.youtube.com/watch?v=5siVvlPOkaU&ab_channel=RyanMcDonough",
      "Maybe the initial idea can be improved by adjusting saturation and brightness(value) instead of multiplying by a color?\r\n![image](https://user-images.githubusercontent.com/4943530/160792320-0fbf32e2-8f89-47d7-9c10-310de3a96549.png)\r\n\r\n\r\nIf you want to give it a try, for convenience, I post here the code that you can use to convert from rgb to hsv and back \r\n```glsl\r\nvec3 rgb2hsv(vec3 c){\r\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\r\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\r\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\r\n\r\n    float d = q.x - min(q.w, q.y);\r\n    float e = 1.0e-10;\r\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\r\n}\r\n\r\nvec3 hsv2rgb(vec3 c){\r\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\r\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\r\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\r\n}\r\n```\r\n\r\n\r\n\r\n",
      "I will give that a try as well whenever I have a chance, and see how the results look. That sounds more promising than scaling just the brightness like I initially did. \r\n\r\nScaling by a single value would also be a lot easier than my second idea, since it wouldn't require editing and preparing a second set of clean sky textures. \r\n\r\nI think I would like the results of interpolating between 2 cubeMaps if it weren't the fact that I cannot find any image editor that can easily edit 6 textures in a cubemap all at the same time without creating artifacts on the edges. \r\n",
      "For a game that doesn't want to implement a real sky, it might be best to handle this with a hard transition.  Popup a message on the screen \"Night has fallen\" while fading the whole non-UI screen to black, switch the skybox, then fade in again.\r\n\r\nElse, a dynamic sky is probably the only good way.",
      "The results were better trying to edit the color in HSV color space as opposed to my initial idea of just multiplying be a color, but it looks like the results are still best when I pre-made a second cubeMap in gimp, since in Gimp you can also edit the HSV as well as the brightness in a curve editor, and also there are other color edit tools that work good in addition to HSV adjustments. The one that worked best was using gimp's Highlight Reduction tool, however that's also why I got hard edge artifacts on the corners of the skybox in the video example I posted earlier, because gimp's highlight adjustment tool adjusts the color based on the contrast between an image's brightest and darkest pixel, so I ended up with small differences in all 6 sky textrues since I had to edit them 1 at a time individually.\r\n\r\nSo unless anyone thinks they'd have usage for interpolating between 2 cubemaps, I think the PR could probably be closed and I will probably continue using SkyControl everywhere instead of trying to integrate skyboxes into some of my maps, since its a lot of work for not so great results.\r\n\r\nOn an unrelated note, I appreciate the code you posted showing how to convert between HSV and RGB @riccardobl. I am also working on a character customization editor for my game, and I believe that I will be able to use the RGB to HSV code in a similar way to allow players to dynamically change a single hair or eyes model to a wider variety of colors by editing its HSV values, as opposed to multiplying by a single RGB color like I initially tried with the sky. Thanks for the tip about HSV :)",
      "@yaRnMcDonuts It was a clever idea. Thanks for implementing it and testing it. I'm sorry it didn't pan out."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e20a14f302d393b26bf",
    "number": 1791,
    "body": "This PR solves the issue #1788 by adding a way to hint the renderer to generate or not generate mipmaps for a specific framebuffer by using:\r\n`FrameBuffer.setMipMapsGenerationHint(true);`\r\n`FrameBuffer.setMipMapsGenerationHint(false);`\r\nIf no hint is given it will fallback to the default that is configurable with\r\n`GLRenderer.setGenerateMipmapsForFramebuffer(boolean)`\r\nand is true by default.\r\n\r\nLeaving everything to its default will maintain the current behavior.",
    "head_branch": "toggleablefbmips",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add toggleable fb mipmaps generation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e21a14f302d393b26c0",
    "number": 1790,
    "body": "This PR implements debug capabilities added by the KHR_debug extension that permit to label objects and group calls in OpenGL.\r\nThis data is picked up by graphics debuggers such as RenderDOC and used to improve their output, see screenshots below\r\n\r\n![Screenshot from 2022-03-29 11 14 21](https://user-images.githubusercontent.com/4943530/160591116-8e9a15a2-c47c-416a-93a2-abe56db7cb36.png)\r\n![Screenshot from 2022-03-29 11 14 28](https://user-images.githubusercontent.com/4943530/160591118-5107bfd7-a488-421c-96b6-ada5ce8049d8.png)\r\n\r\nThis PR is only for the LWJGL3 renderer, the new methods are implemented as default methods of Renderer interface and will do nothing on other renderers.\r\n\r\nThe feature is disabled by default and can be enabled by setting GraphicsDebug to true in AppSettings.\r\n\r\n",
    "head_branch": "gldebug",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add GL debug capabilities (#1790)\n\n* Add GL debug capabilities\r\n\r\n* Fix: check for null names"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e22a14f302d393b26c1",
    "number": 1786,
    "body": "This is an issue in the way glDrawBuffer/glReadBuffer are used in the engine: the state is cached as if it was a global state change, while they actually [change the current bound framebuffer's state ](https://www.khronos.org/opengl/wiki/Framebuffer#Draw_color_buffers).\r\nThe issue prevents FrameBuffer.setTargetIndex(int) from working correctly in some circumstances. \r\n\r\nI am leaving this open for a while to make sure this patch doesn't have any weird side effect before merging it.\r\n",
    "head_branch": "fixfbattchselection",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix draw/read buffer selection for framebuffers"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e23a14f302d393b26c2",
    "number": 1782,
    "body": "This PR is made by multiple parts that together are used to reimplement UBOs and SSBOs in a more convenient and performant way. The main concepts are explained below\r\n\r\n## BufferObject\r\nA BufferObject is a generic memory buffer that exists in OpenGL and from which all the other specialized buffers are derived. In JME we currently have some specialized Buffers (eg. VertexBuffer) but not a generic one.\r\nThis is needed to implement UBOs and SSBOs and can be used as parent class for VertexBuffer in a future refactoring, unlocking some performance improvements (see below)\r\n\r\n## BufferObject layout and sub data update\r\nThis PR introduces the concept of buffer layout, this is an abstraction and doesn't exist in OpenGL, nevertheless it can be used in jme to split the buffer in logical regions that can be marked for update and efficiently pushed to the GPU by the renderer while leaving the rest of the buffer untouched. \r\n\r\n## StructStd140BufferObject\r\nThis is an abstraction on top of BufferObject and BufferObject layouts, it generates an updates a BufferObject from a specially defined object that implements the Struct interface. This makes the creation and update of buffer objects user friendly and matches perfectly the glsl side of the code when using UBO/SSBO.\r\nThe goal when implementing this was to make it the default way to maintain BufferObjects (even inside the core), for this reason the implementation forces some limitations that are there to avoid any meaningful performance burden that might be caused by a more flexible implementation.\r\nThe limitations are:\r\n - Only fields that are of one of the types defined in `com.jme3.util.struct.fields.*` are serialized: this permits to track changes to the fields and update only what changes\r\n - Every serializable field must be final : this allows the code to trust that the class layout will never change \r\n\r\nThese limitations can be avoided by creating and maintaining the BufferObject manually with StructUtils, but shouldn't be needed in common usecases.\r\n\r\n## Usage example\r\nThis is an example and unit test for the UBO implementation\r\n\r\n- TestUBO.java: https://github.com/riccardobl/jmonkeyengine/blob/ef7982de9217dab3f95bc6fdcbbe0f846b896f77/jme3-examples/src/main/java/jme3test/material/TestUBO.java\r\n- TestUBO.frag: https://github.com/riccardobl/jmonkeyengine/blob/ef7982de9217dab3f95bc6fdcbbe0f846b896f77/jme3-examples/src/main/resources/jme3test/ubo/TestUBO.frag\r\n\r\n## Final thoughts\r\nThis PR solves all the issues in he current UBO/SSBO implementation and, thanks to the sub data update, should always result in a performance improvement over sparse uniforms. \r\nIn future the bufferobject regions could be used to split large vertex buffers and allow a more efficient update (eg. for instances position).\r\nThere is an important change from the previous proposal (https://github.com/jMonkeyEngine/jmonkeyengine/pull/1317) in the use of hardcoded `com.jme3.util.struct.fields.*` types, instead of a generic type StructField object, this is used to avoid ambiguity when using StructFields containing immutable types.\r\nIn the previous proposal, two methods were used: \r\n\r\n- setValue() : to update immutable fields \r\n- getValueForUpdate() : to update mutable fields\r\n\r\nThis is now handled internally by the `com.jme3.util.struct.fields.*` types.\r\n\r\n\r\n\r\n\r\n",
    "head_branch": "ubo2",
    "is_a_fork": true,
    "comments": [
      "I am not 100% confident in the correctness of the std140 implementation. \r\nI will start using this PR on some real code and see if any issue arises",
      "What is the state of this? I see there are conflicts.\r\nCan this become a candidate for the next release? \r\nIs anybody willing to review and possibly merge it?",
      "PR updated to the current master. ",
      "This PR adds 37 Java source files. Please add the JME license (with appropriate year(s)) at the top of each file.",
      "This PR is now rebased to the current master and with updated licenses"
    ],
    "commit_messages": [
      "UBO/SSBO Improvements, Structs, BufferObject and sub data update (#1782)\n\n reimplement UBOs and SSBOs in a more convenient and performant way."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e24a14f302d393b26c3",
    "number": 1781,
    "body": "Added \"GLSL150\" to matdefs and `#import \"Common/ShaderLib/GLSLCompat.glsllib\"` to shaders. Not certain I got them all.",
    "head_branch": "sgold/issue-1780",
    "is_a_fork": false,
    "comments": [
      "I verified that this PR solves issue 1780 on macOS Monterey.\r\nIn my opinion this would be worth including in JME 3.5.1 if we decide to go that route.",
      "Optimistically interpreting the thumbs-up emojis as positive code reviews, I plan to self-integrate this PR in about 24 hours ... unless there's something to discuss."
    ],
    "commit_messages": [
      "solve issue #1780 (built-in matdefs/shaders lack core-profile support) (#1781)\n\n* jme3-terrain:  add GLSLCompat.glsllib to 4 jme3-terrain frag shaders\r\n\r\n* jme3-terrain:  add GLSLCompat.glsllib to 4 jme3-terrain vertex shaders\r\n\r\n* jme3-terrain:  add GLSL150 to 3 jme3-terrain material definitions\r\n\r\n* jme3-vr:  add GLSLCompat.glsllib to 5 shaders\r\n\r\n* jme3-niftygui:  add GLSLCompat.glsllib to 6 shaders\r\n\r\n* jme3-niftygui:  add GLSL150 to 3 material definitions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e25a14f302d393b26c4",
    "number": 1779,
    "body": "This a step toward allowing JME applications developed for Linux/Windows to run on macOS without any changes. Since LWJGL v2, doesn't support the newer \"Apple Silicon\" hardware, the focus is on LWJGL v3. For portability, we want to use the \"glfw_async\" library (added in LWJGL v3.3.1) when running on macOS. To reduce the risk of regressions, we'll use the old library when running on other operating systems.\r\n\r\nFor extra flexibility, a new `AppSetting` named \"GlfwLibraryName\" specifies which library to use: \"glfw\" or \"glfw_async\". If this setting is unset or null, `org.lwjgl.system.Platform` is used to determine which library to use.",
    "head_branch": "sgold/glfw_async",
    "is_a_fork": false,
    "comments": [
      "I think it would be better to set Configuration.GLFW_LIBRARY_NAME only if the libraryName != null or platform == MACOS, so that the default becomes whatever LWJGL3 think the default is (except on macos).",
      "I'm converting this to a draft PR both because of the suggestion from @riccardobl and also because I'm unsure the best place to set \"glfw_async\".",
      "This PR is still on hold because I've been investigating issues with \"glfw_async\". I'm convinced it's unreliable in LWJGL v3.3.1, causing certain apps to crash (in a highly reproducible fashion) with \"BUG IN CLIENT OF LIBDISPATCH: dispatch_sync called on queue already owned by current thread\". The same apps work OK with ordinary \"glfw\" and -XstartOnFirstThread. When I have time, I hope to create a compact test case to send to the LWJGL and/or GLFW folks."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e26a14f302d393b26c5",
    "number": 1777,
    "body": "This changes a print statement in `FbxAnimCurveNode.java` to a logger call so it doesn't contaminate output.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove print statements from FBX plugin (#1777)\n\n* Change println to logger\r\n\r\nChange a print statement in FbxAnimCurveNode.java to a logger call\r\n\r\n* Comment-out print statements in FbxLoader"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e27a14f302d393b26c6",
    "number": 1774,
    "body": "Removes deprecated code and some warnings.\r\n\r\nCompiled with JDK 11 (-Xlint:deprecation)...\r\n\r\n- Class.newInstance() was deprecated in Java 9, I replaced it with Class.getDeclaredConstructor().newInstance(); (get empty constructor and call it)\r\n- new Float() is deprecated, unnecessary boxing\r\n- new JsonParser() is deprecated, use the static methods instead",
    "head_branch": "deprecations-cleanup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "avoid use of deprecated methods (mostly Class.newInstance()) (#1774)\n\n* Remove deprecated code\r\n\r\n* Remove deprecated\r\n\r\n* Remove deprecated code\r\n\r\n* Remove deprecated code\r\n\r\n* Remove deprecated newInstance method\r\n\r\n* Formatting"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e28a14f302d393b26c7",
    "number": 1772,
    "body": "…uffers (transformInstanceData and globalInstanceData) so we do not need to recreate it every frame which was not good performance-wise.",
    "head_branch": "instancing-improvment",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "InstancedGeometry: added a field to keep track of all instance data b… (#1772)\n\n* InstancedGeometry: added a field to keep track of all instance data buffers (transformInstanceData and globalInstanceData) so we do not need to recreate it every frame which was not good performance-wise.\r\n\r\n* Update copyright date.\r\n\r\n* Removed redundant suppression and ensured that allInstanceData gets initialized on read()."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e29a14f302d393b26c8",
    "number": 1771,
    "body": "In both cases, \"applications\" is in the possessive case, so an apostrophe is required for clarity.",
    "head_branch": "sgold/simple-application-javadoc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "SimpleApplication:  correct 2 typos in the javadoc (#1771)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e2aa14f302d393b26c9",
    "number": 1770,
    "body": "AppSettings.java contains 2 javadoc tags referencing methods that don't exist. This PR corrects the references.",
    "head_branch": "sgold/app-settings-javadoc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "AppSettings:  solve 2 javadoc diagnostics (#1770)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e2ba14f302d393b26ca",
    "number": 1769,
    "body": "```java\r\nswitch (meshType) {\r\n    case Point:\r\n        particleMesh = new ParticlePointMesh();\r\n        this.setMesh(particleMesh);\r\n        break;\r\n    case Triangle:\r\n        particleMesh = new ParticleTriMesh();\r\n        this.setMesh(particleMesh);\r\n        break;\r\n    default:\r\n        throw new IllegalStateException(\"Unrecognized particle type: \" + meshType);\r\n}\r\n```\r\n\r\nThis piece of code is repeated 3 times in `ParticleEmitter` class, violating the DRY programming rule. So I encapsulated it in a separate method.\r\n\r\nFixed typo compatability -> compatibility",
    "head_branch": "capdevon-vfx",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Refactoring of the initialization code of the 'particleMesh' variable. (#1769)\n\nThis piece of code is repeated 3 times in this class, violating the DRY\r\nprogramming rule.\r\n\r\nFixed typo compatability -> compatibility"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e2ca14f302d393b26cb",
    "number": 1768,
    "body": "The `Object.equals()` method requires an exact class match, and so should methods that override it. However, that is not the case for `CachedTextKey.equals()` in the jme3-niftygui library. See issue #1289.\r\n\r\nThis is similar to PR #1302, which added type checks to `Matrix3f` and `Matrix4f`. \r\n",
    "head_branch": "sgold/text-key-equals",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "RenderDeviceJme:  CachedTextKey.equals() lacks a type check (#1768)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e2da14f302d393b26cc",
    "number": 1767,
    "body": "similar to #1760, this PR brings the \"jme3-niftygui\" library closer to conformity with JME's preferred java style. Changes are limited to whitespace only.",
    "head_branch": "sgold/whitespace-nifty",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "whitespace changes in jme3-niftygui (#1767)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e2ea14f302d393b26cd",
    "number": 1766,
    "body": "Somehow `TestPostWater` was missed when updating jme3-examples to use the new `BitmapText` constructor.",
    "head_branch": "sgold/test-post-water",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "TestPostWater:  avoid using the deprecated BitmapText constructor (#1766)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e2fa14f302d393b26ce",
    "number": 1765,
    "body": "The sourcecode for the `JoyButtonTrigger` class in jme3-core is confusing because it refers to the 2nd argument of the constructor as an axis ID. It is actually a button ID.\r\n\r\nThis PR corrects the javadoc and renames the method argument.",
    "head_branch": "sgold/joy-button-trigger",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "JoyButtonTrigger:  clarify that the constructor arg is not an axis ID (#1765)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e30a14f302d393b26cf",
    "number": 1764,
    "body": "This solves an issue with jme3-nifty not taking gamma correction into account. Nifty UIs specify colors by their red, green, and blue components. In order for jme3-nifty to display these colors property, it needs to know whether gamma correction is enabled or not.\r\n\r\nIf gamma correction is enabled, the application should specify `ColorSpace.sRGB`, in which case `ColorRGBA.setAsSrgb()` will be used to convert Nifty colors to JME colors.\r\n\r\nIf gamma correction is not enabled, the application should use the old constructor or specify `ColorsSpace.Linear`, in which case `ColorRGBA.set()` will be used to convert Nifty color to JME colors.",
    "head_branch": "sgold/nifty-gamma-correction",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "jme3-nifty should account for gamma correction (#1764)\n\n* RenderDeviceJme:  add a field to indicate Nifty's colorspace\r\n\r\n* jme3-examples:  update 4 Nifty examples to handle gamma correction\r\n\r\n* jme3-examples:  update 5 Nifty examples to handle gamma correction"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e31a14f302d393b26d0",
    "number": 1763,
    "body": "Discussion at https://github.com/jMonkeyEngine/wiki/pull/144 highlighted a need for javadoc to document the sign convention of `PhysicsCharacter.setGravity()`, which is perhaps non-intuitive.",
    "head_branch": "sgold/set-gravity",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "PhysicsCharacter:  add javadoc for the setGravity() method (#1763)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e31a14f302d393b26d1",
    "number": 1762,
    "body": "Delete the offending assertion, which was added in 2014 because someone thought it would be \"appropriate\".\r\nI tested this fix.",
    "head_branch": "sgold/issue-1761",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "solve issue #1761 (AssertionError in ALAudioRenderer) (#1762)\n\n* solve issue #1761 (AssertionError in ALAudioRenderer)\r\n\r\n* add a test for issue #1761"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e33a14f302d393b26d2",
    "number": 1760,
    "body": "While incomplete, this PR brings \"jme3-core\" closer to conformity with JME's preferred java style. Changes are limited to whitespace only.\r\n\r\nThey include:\r\n+ deletion of trailing whitespace\r\n+ single space before an open curly brace\r\n+ single space between a reserved word and a parenthesis that follows it directly\r\n+ single space after a comma\r\n+ single space on either side of a binary operator such as = or + or *\r\n+ indent continuation lines in code at least +8 spaces\r\n+ indent javadoc block-tag continuation lines at least +4 spaces",
    "head_branch": "sgold/core-whitespace",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "whitespace changes in jme3-core (#1760)\n\n* jme3-core:  whitespace\r\n\r\n* jme3-core:  whitespace again\r\n\r\n* jme3-core:  whitespace some more\r\n\r\n* Tweens:  tweak whitespace in javadoc\r\n\r\n* BoneTrack:  correct indentation\r\n\r\n* Pose:  delete extra whitespace\r\n\r\n* Skeleton.java:  horizontal whitespace per style guide\r\n\r\n* SkeletonControl:  delete excess whitespace\r\n\r\n* BasicProfiler:  whitespace\r\n\r\n* BasicProfilerState:  whitespace\r\n\r\n* FlyCamAppState:  whitespace in javadoc\r\n\r\n* LegacyApplication:  add space per 4.6.2.5\r\n\r\n* SimpleApplication:  indentation\r\n\r\n* StatsAppState:  whitespace\r\n\r\n* AssetConfig:  add whitespace\r\n\r\n* AssetKey:  whitespace in cast per 4.6.2.5\r\n\r\n* AssetLoadException:  add vertical whitespace required by 4.6.1\r\n\r\n* AssetNotFoundException:  add vertical whitespace required by 4.6.1.1\r\n\r\n* DesktopAssetManager:  whitespace\r\n\r\n* ImplHandler:  whitespace per the style guide\r\n\r\n* ThreadingManager:  indentation\r\n\r\n* WeakRefAssetCache:  cast spacing per 4.6.2.5\r\n\r\n* WeakRefCloneAssetCache:  whitespace\r\n\r\n* AudioBuffer:  whitespace\r\n\r\n* AudioKey:  line wrapping\r\n\r\n* AudioNode:  whitespace\r\n\r\n* Filter:  whitespace per 4.6.2.5\r\n\r\n* Listener:  delete trailing whitespace\r\n\r\n* AlAudioRenderer:  whitespace per perferred style\r\n\r\n* BoundingSphere:  whitespace per perferred style\r\n\r\n* Intersection:  whitespace per perferred style\r\n\r\n* KeyFrame:  whitespace\r\n\r\n* MotionPath:  whitespace\r\n\r\n* TimeLine:  delete excess vertical whitespace\r\n\r\n* AbstractCinematicEvent:  whitespace\r\n\r\n* AnimationEvent:  whitespace\r\n\r\n* MotionEvent:  tweak the whitespace\r\n\r\n* SoundEvent:  tweak the whitespace\r\n\r\n* CollisionResult:  space after closing parenthesis of a cast\r\n\r\n* CollisionResults:  space on both sides of a binary operator\r\n\r\n* SweepSphere:  whitespace\r\n\r\n* BIHTree:  space before {\r\n\r\n* TriangleAxisComparator:  one statement per line\r\n\r\n* ParticleEmitter:  whitespace\r\n\r\n* ParticlePointMesh:  whitespace\r\n\r\n* ParticleTriMesh:  misc whitespace\r\n\r\n* ReadialParticleInfluencer:  delete extra vertical whitespace"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e34a14f302d393b26d3",
    "number": 1759,
    "body": "In the engine we have the concept of state updates for some objects that represent both jme logical objects and opengl native objects.\r\nThis pr extends this approach by introducing a way to store custom states for objects that extend the StatefulObjects class.\r\n\r\nThis can be used to implement self contained renderers as modules that don't need any change in the core to work nor to maintain large maps to point jme objects to their local representation.\r\n\r\nThis also allows multiple contexts to be updated and invalidated separately without them being aware of each other and without polling for changes.\r\n\r\nAs an example let's say we have a Mesh that is needed by the rendering engine and the physics engine:\r\n- both engines append a state to the mesh (eg. GLMeshState and BulletBodyState )\r\n- after some time the mesh is changed (eg. the vertices change position)\r\n-  both the states are invalidated\r\n- the GLMeshState will notify the renderer to submit the new vertices to the gpu, at the same time BulletBodyState will notify the physics engine to update the rigidbody associated to this mesh\r\n- the two states can update out of order and asynchronously \r\n\r\nThis pr implements StatefulObjects for some objects that have a representation in our current rendering backend:\r\n- All the native objects \r\n- Spatial and Node : for model -> world transform matrix\r\n- Camera : for view/projection matrices\r\n\r\n\r\nObviously there is nothing that can benefit from this PR atm, but it will allow future development to be less reliant on the core module.\r\n ",
    "head_branch": "stateful",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e35a14f302d393b26d4",
    "number": 1758,
    "body": "This can be used in shaders that need to repeat some code where loops cannot be used (eg. uniforms declaration).\r\nSee for example \r\n\r\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/ceb356462aeedf7769dced52e1d5572b01deca31/jme3-terrain/src/main/resources/Common/MatDefs/Terrain/TerrainLighting.frag#L20-L56\r\n\r\nThis code can be rewritten like so\r\n\r\n```java\r\n#for i=0..12 (#ifdef DIFFUSEMAP_$i $0 #endif)\r\n  uniform sampler2D m_DiffuseMap_$1;\r\n#endfor\r\n```\r\n*Note: the first diffuse map (m_DiffuseMap) will be renamed in m_DiffuseMap0*\r\n\r\nAs you can see, it makes code much more readable and maintainable.",
    "head_branch": "glslfor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add FOR macro to GLSL preprocessor and J3MD (#1758)\n\n* Add FOR macro to GLSL preprocessor\r\n\r\n* Code cleanup\r\n\r\n* fix  comment"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e35a14f302d393b26d5",
    "number": 1757,
    "body": "I've noticed that ColorRGBA has a very useful .toVector4f() method (and also toVector3() method), which are great for instances where you need to do math with a ColorRGBA value returned from an ImageRaster, but there is no equally convenient method to convert that Vector back into a color afterwards, so I thought these 2 methods could be useful (specifically for Vector4f, but I added one for Vector3f too since there was also a toVector3f() method)\r\n\r\nI initially thought of adding a new toColorRGBA() method to the Vector classes, but it seemed more appropriate to put this functionality into the ColorRGBA class here with set methods the way I did.\r\n\r\nAny thoughts on this addition?",
    "head_branch": "patch-5",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add set methods and constructors to ColorRGBA that take in a Vector param (#1757)\n\n* Add additional set methods to ColorRGBA\r\n\r\nI've noticed that ColorRGBA has a very useful .toVector4f() method (and also toVector3() method), which are great for instances where you need to do math with a Color value returned from an ImageRaster, but there is no equally convenient method to convert that Vector back into a color, so I thought these 2 methods could be useful (specifically for Vector4fs, but I added one for Vector3f too since there was already a toVector3f() method)\r\n\r\nI initially thought of adding a new toColorRGBA() method to the Vector classes, but it seemed more appropriate to put this functionality into the ColorRGBA class here with set methods the way I did.\r\n\r\nAny thoughts on this addition?\r\n\r\n* Update ColorRGBA.java\r\n\r\n* add vector constructor\r\n\r\nI added constructors that take in a Vector3f and Vector4f \r\n\r\nIn the case of a vector3 constructor I also just set the alpha value to 1.0 since it's more likely the user wants a visible opaque color, but can change this if there's a more optimal solution.\r\n\r\n* Update ColorRGBA.java\r\n\r\n* Update ColorRGBA.java\r\n\r\ngrammar correction in javadoc\r\n\r\n* Update ColorRGBA.java"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e36a14f302d393b26d6",
    "number": 1756,
    "body": null,
    "head_branch": "patch-4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add simple math methods to Vector2f (#1756)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e37a14f302d393b26d7",
    "number": 1755,
    "body": null,
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add more simple math methods to Vector4f (#1755)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e38a14f302d393b26d8",
    "number": 1754,
    "body": "This adds no-arg constructors to 6 `Mesh` subclasses and implements `read()` and `write()` methods as needed.\r\n\r\nA few `final` fields had to be made non-final in order for reads to work.\r\n\r\nIn addition, the automated tests for skeleton-debug mesh serialization (in `TestCloneMesh`) were enabled.",
    "head_branch": "sgold/issue-1705",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix issue 1705 (serialize 6 mesh subclasses) (#1754)\n\n* jme3-vr:  implement serialization for CenterQuad\r\n\r\n* ArmatureInterJointsWire:  add a no-arg constructor\r\n\r\n* jme3-core:  implement serialization for skeleton debug meshes\r\n\r\n* TestCloneMesh:  enable testing of skeleton-debug meshes\r\n\r\n* Surface:  implement serialization"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e39a14f302d393b26d9",
    "number": 1753,
    "body": "Fix issue https://github.com/jMonkeyEngine/jmonkeyengine/issues/1745",
    "head_branch": "fix1745",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Scaling issue #1745 (#1753)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e3aa14f302d393b26da",
    "number": 1752,
    "body": "This is the best GL version for compatibility and features, pretty much every system supports it now, so i think it should become the default.\r\nThe primary reason for this change is that by doing so we enforce by default a core profile that is supposed to respect the opengl standards and implement all its features, contrary to the compatibility profile (what we have now by default) that is implementation specific and might not respect standards, also it is not always in sync with the core profile in drivers, eg. the compatibility profile might stop at opengl 3.1 while the same driver might be opengl4 capable if the core profile is used.\r\n\r\nThis solves the issue of PBRLighting not working in MacOS due to missing textureCubeLod in the compat profile.\r\n\r\n",
    "head_branch": "gl32default",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use OpenGL 3.2 as default (#1752)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e3ba14f302d393b26db",
    "number": 1750,
    "body": "This pr makes AppSettings.getWidth/Height return the size of the default framebuffer that is usually what is expected by user code. New methods to set and get window size are added.\r\nThe change is backward compatible.\r\n\r\nThe PR removes also a workaround that caused the engine to be aware of high DPI resolution after the second frame, in my tests waiting two frames has proven to be unnecessary.\r\n\r\nEDIT: added rescale listener that propagates the high dpi scaling. Can be used for example to multiply the size of GUI elements.",
    "head_branch": "hidpires",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Separate concept of window size from default framebuffer size (#1750)\n\n* Separate concept of window size from default framebuffer size that are not always interchangeable in modern platforms. Add methods to query both sizes from AppSettings\r\n\r\n* Add rescaling support\r\n\r\n* Use different workaround that doesn't meddle with the initialization flow, for wrong FB size bug on first frames.\r\n\r\n* Ensure listener.rescale/resize is called only after the listener is initialized. Call rescale only when scale changes. Update scale and size when window size changes (if needed).\r\n\r\n* Fix documentation. Make SystemListener.rescale a default method\r\n\r\n* Fix typo and formatting"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e3ca14f302d393b26dc",
    "number": 1749,
    "body": "The line `getBoolean(GLExt.GL_FRAMEBUFFER_SRGB_CAPABLE_EXT)` in GLRenderer throw an opengl error 1280 (invalid enum) when the GL debugger is enabled. \r\nI am not sure why this is the case, however i believe it is safe to assume that every modern macos device is sRGB capable.",
    "head_branch": "srgbmac",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Always assume MacOS to be sRGB capable."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e3da14f302d393b26dd",
    "number": 1748,
    "body": "This PR  removes SettingsDialog and ErrorDialog from the internal code, since they do not work properly in some platforms when AWT is initialized in the same thread of GLFW. ErrorDialog also causes issues with mouse release on fullscreen apps in linux.\r\n\r\nSettingsDialog is turned into a standalone class for developers that still wish to use it, by doing so we make it easier to replace with something else, eg. a configurator that takes settings from an external launcher with commandline arguments or environment variables\r\n\r\n```java\r\nAppSettings settings=new AppSettings(true);\r\nif(SettingsDialog.showDialog(settings)){\r\n  app.setSettings(settings);\r\n  app.start();\r\n}\r\n```\r\n\r\nErrorDialog is replaced by an error message handler that can be configured by the developer to show/log/send the error message in the most appropriate way.\r\n\r\nEg. reimplementing the ErrorDialog to reproduce the current behavior will look like this:\r\n```java\r\nJmeSystem.setErrorMessageHandler((message)->{\r\n   ErrorDialog.showDialog(message);\r\n});\r\n```\r\n\r\nBy default on desktop ErrorDialog is not used and the error is only printed to System.err.\r\nOn android the behavior remains the same since the current error reporting is reimplemented using a default error message handler.",
    "head_branch": "macNatives",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e3ea14f302d393b26de",
    "number": 1747,
    "body": "This solves an issue with eclipse based IDEs (eg. vscode with redhat's java plugin) that might mark circular dependencies as errors and stop the project from being imported. \r\nSee image below:\r\n![image](https://user-images.githubusercontent.com/4943530/149676782-8c5029d0-e0bb-4a22-b6bf-eba336011f4a.png)\r\n",
    "head_branch": "circulardep",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Configure circular deps as warning on eclipse (#1747)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e3fa14f302d393b26df",
    "number": 1746,
    "body": "Proposed fix for #1745.",
    "head_branch": "sgold/issue-1745",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "GlfwMouseInput:  scale mouse coords only if Retina AppSetting is true (#1746)\n\n* GlfwMouseInput:  scale mouse coords only if Retina AppSetting is true\r\n\r\n* GlfwMouseInput:  some minor code cleanup\r\n\r\n* GlfwMouseInput:  check for scaled content in initCurrentMousePosition()"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e40a14f302d393b26e0",
    "number": 1744,
    "body": "I've added these convenience multiplication and division methods that were missing from the Vector3f class, and did my best to also follow the same javadoc formatting that the rest of the similar methods have. \r\n\r\nLet me know if this looks alright and then I will do the same for Vector2f and Vector4f. And should I make the changes to Vector2f and Vector4f in this PR or should I make a new PR for each?",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add more simple math methods to Vector classes (#1744)\n\nI've added these convenience multiplication and division methods that were missing from the Vector3f class, and did my best to also follow the same javadoc formatting. \r\n\r\nLet me know if this looks alright and then I will do the same for Vector2f and Vector4f. Should I make the changes to Vector2f and Vector4f in this PR or should I make a new PR for each?"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e41a14f302d393b26e1",
    "number": 1743,
    "body": "Similar to #1712 and #1713, this addresses comments and javadoc that might be confusing due to issues such as words run together or missing punctuation.",
    "head_branch": "sgold/jan-typos",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "clarify comments and javadoc (#1743)\n\n* correct more comments and javadoc\r\n\r\n* more typos in comments/javadoc\r\n\r\n* more typos in javadoc/comments\r\n\r\n* javadoc and inline comments"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e42a14f302d393b26e2",
    "number": 1742,
    "body": "Similar to #1716.",
    "head_branch": "sgold/rename-args2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "rename more method arguments for clarity (#1742)\n\n* rename a couple method args\r\n\r\n* KinematicRagdollControl: rename \"reccount\"\r\n\r\n* rename 2 method args\r\n\r\n* rename method args"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e43a14f302d393b26e3",
    "number": 1741,
    "body": "Fixes issue in setNormalRecalcNeeded() method where the bounding box containing recently changed points was always located with the assumption that the terrain's world location is 0,0,0 regardless of the terrain's actual world translation.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "account for world transform in TerrainQuad.setNormalRecalcNeeded() (#1741)\n\n* Fix Normal Recalculation \r\n\r\nFixes issue in setNormalRecalcNeeded() method where the bounding box containing recently changed points was always located at 0,0,0 regardless of the terrain's world translation.\r\n\r\n* Update TerrainQuad.java\r\n\r\nfix indentation that got messed up while copying over my code\r\n\r\n* Update TerrainQuad.java\r\n\r\n* Update TerrainQuad.java\r\n\r\nupdated to account for scale\r\n\r\n* Update TerrainQuad.java\r\n\r\n* Update TerrainQuad.java\r\n\r\n* Update TerrainQuad.java\r\n\r\n* Update TerrainQuad.java\r\n\r\naccidentally deleted quaternion import, added back in\r\n\r\n* Update TerrainQuad.java\r\n\r\nforgot import for bounding sphere\r\n\r\n* Update TerrainQuad.java"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e44a14f302d393b26e4",
    "number": 1740,
    "body": "Close #1739",
    "head_branch": "#1739_NullPointerException_with_JoyStick_and_no_buttons",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "solve issue 1739 (NPE in reloadJoysticks() when joystick lacks buttons) #1740"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e44a14f302d393b26e5",
    "number": 1738,
    "body": "Per discussion at the Hub/Forum:  https://hub.jmonkeyengine.org/t/normalrecalccontrol-not-working-outside-of-sdk/44140/6\r\n\r\nThis makes the `fixNormals()` method public.",
    "head_branch": "sgold/fix-normals",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "TerrainQuad:  publicize fixNormals() (#1738)\n\n* TerrainQuad:  publicize fixNormals()\r\n\r\n* TerrainQuad:  publicize fixNormalEdges()"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e45a14f302d393b26e6",
    "number": 1737,
    "body": "This PR improves the readability of some logger and exception messages, mainly by separating words that were runtogether.",
    "head_branch": "sgold/diagnostics",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "correct typos in diagnostic messages (#1737)\n\n* correct typos in diagnostic messages\r\n\r\n* PhysicsRigidBody:  \"cannot\" is one word\r\n\r\n* GltfLoader:  \"camere\" -> \"camera\"\r\n\r\n* AssetKey:  \"asset manager\" is 2 words"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e46a14f302d393b26e7",
    "number": 1736,
    "body": "Improves the readability of Java sourcecode by renaming some private variables, including names where words were over-abbreviated or runtogether without camelCase.",
    "head_branch": "sgold/rename-privates",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "rename private variables (#1736)\n\n* rename private fields for clarity\r\n\r\n* TestShadowsPerf:  rename \"createballs()\" for clarity\r\n\r\n* rename more private fields\r\n\r\n* MorphControl: rename a private method"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e47a14f302d393b26e8",
    "number": 1735,
    "body": "This leaves all the old stuff there (the oculus, osvr & other openvr) but focusses on the LWJGL openvr for the short term future (I guess OpenXR later on as the more long term future). I have ended up with a bit of a leaky abstraction where VRInputAPI wants to talk about openVr specific stuff like action manifests but I couldn't avoid that without requiring users to cast to LWJGLOpenVRInput which feels equally as bad (especially as LWJGLOpenVRInput is probably the only one that's going to be usable till OpenXR comes along)\r\n\r\nThis allows Jmonkey VR to use the actions manifest style VR (which is the non deprecated openVr api for mapping button presses to \"stuff\" in game).\r\n\r\nAn example action manifest might look like\r\n\r\n```\r\n{\r\n  \"default_bindings\": [\r\n    {\r\n      \"controller_type\": \"oculus_touch\",\r\n      \"binding_url\": \"oculusTouchDefaults.json\"\r\n    }\r\n  ],\r\n  \"actions\": [\r\n    {\r\n      \"name\": \"/actions/main/in/OpenInventory\",\r\n      \"requirement\": \"mandatory\",\r\n      \"type\": \"boolean\"\r\n    },\r\n    {\r\n      \"name\": \"/actions/main/in/scroll\",\r\n      \"type\": \"vector2\",\r\n      \"requirement\": \"mandatory\"\r\n    },\r\n    {\r\n      \"name\": \"/actions/main/out/hapticTest\",\r\n      \"type\": \"vibration\",\r\n      \"requirement\": \"optional\"\r\n    },\r\n    {\r\n      \"name\": \"/actions/main/in/leftTrigger\",\r\n      \"type\": \"vector1\",\r\n      \"requirement\": \"mandatory\"\r\n    }\r\n  ],\r\n  \"action_sets\": [\r\n    {\r\n      \"name\": \"/actions/main\",\r\n      \"usage\": \"leftright\"\r\n    }\r\n  ],\r\n  \"localization\" : [\r\n    {\r\n      \"language_tag\": \"en_us\",\r\n      \"/actions/main\" : \"My Game Actions\",\r\n      \"/actions/main/in/OpenInventory\" : \"Open Inventory\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nWith a default bindings looking like\r\n\r\n```\r\n{\r\n  \"action_manifest_version\" : 0,\r\n  \"bindings\": {\r\n    \"/actions/main\": {\r\n      \"haptics\" : [\r\n        {\r\n          \"output\" : \"/actions/main/out/hapticTest\",\r\n          \"path\" : \"/user/hand/left/output/haptic\"\r\n        }\r\n      ],\r\n      \"sources\" : [\r\n        {\r\n          \"inputs\" : {\r\n            \"click\" : {\r\n              \"output\" : \"/actions/main/in/OpenInventory\"\r\n            }\r\n          },\r\n          \"mode\" : \"button\",\r\n          \"path\" : \"/user/hand/left/input/x\"\r\n        },\r\n        {\r\n          \"inputs\" : {\r\n            \"position\" : {\r\n              \"output\" : \"/actions/main/in/scroll\"\r\n            }\r\n          },\r\n          \"mode\" : \"joystick\",\r\n          \"path\" : \"/user/hand/left/input/joystick\"\r\n        },\r\n        {\r\n          \"inputs\" : {\r\n            \"pull\" : {\r\n              \"output\" : \"/actions/main/in/leftTrigger\"\r\n            }\r\n          },\r\n          \"mode\" : \"trigger\",\r\n          \"path\" : \"/user/hand/left/input/trigger\"\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  \"category\" : \"steamvr_input\",\r\n  \"controller_type\" : \"oculus_touch\",\r\n  \"description\" : \"Bindings for a oculusTouch controller\",\r\n  \"name\" : \"Bindings for a oculusTouch controller\",\r\n  \"options\" : {},\r\n  \"simulated_actions\" : []\r\n}\r\n```\r\n\r\nThen it would be used like:\r\n\r\n```\r\n    public static void main(String[] args) {\r\n        AppSettings settings = new AppSettings(true);\r\n        VREnvironment env = new VREnvironment(settings);\r\n        env.initialize();\r\n\r\n        if (env.isInitialized()){\r\n            VRAppState vrAppState = new VRAppState(settings, env);\r\n            vrAppState.getVRinput().registerActionManifest(\"C:/Users/richa/Documents/Development/android/jmonkeyVrTest/src/main/resources/actionManifest.json\", \"/actions/main\");\r\n\r\n            Main app = new Main(vrAppState);\r\n            app.setLostFocusBehavior(LostFocusBehavior.Disabled);\r\n            app.setSettings(settings);\r\n            app.setShowSettings(false);\r\n            app.start();\r\n        }\r\n    }\r\n```\r\n\r\nAnd within the update loop like\r\n\r\n```\r\n    List<Geometry> handGeometries = new ArrayList<>();\r\n\r\n    @Override\r\n    public void simpleUpdate(float tpf) {\r\n\r\n        VRAppState vrAppState = getStateManager().getState(VRAppState.class);\r\n        int numberOfControllers = vrAppState.getVRinput().getTrackedControllerCount(); //almost certainly 2, one for each hand\r\n\r\n        //build as many geometries as hands, as markers for the demo (Will only tigger on first loop or if number of controllers changes)\r\n        while(handGeometries.size()<numberOfControllers){\r\n            Box b = new Box(0.1f, 0.1f, 0.1f);\r\n            Geometry handMarker = new Geometry(\"hand\", b);\r\n            Material mat = new Material(assetManager, \"Common/MatDefs/Misc/Unshaded.j3md\");\r\n            mat.setColor(\"Color\", ColorRGBA.Red);\r\n            handMarker.setMaterial(mat);\r\n            rootNode.attachChild(handMarker);\r\n            handGeometries.add(handMarker);\r\n        }\r\n\r\n        VRInputAPI vrInput = vrAppState.getVRinput();\r\n\r\n        for(int i=0;i<numberOfControllers;i++){\r\n            if (vrInput.isInputDeviceTracking(i)){ //might not be active currently, avoid NPE if that's the case\r\n\r\n                Vector3f position = vrInput.getFinalObserverPosition(i);\r\n                Quaternion rotation = vrInput.getFinalObserverRotation(i);\r\n\r\n                Geometry geometry = handGeometries.get(i);\r\n                geometry.setLocalTranslation(position);\r\n                geometry.setLocalRotation(rotation);\r\n            }\r\n        }\r\n\r\n        if (vrInput.getDigitalActionState(\"/actions/main/in/OpenInventory\").state){\r\n            System.out.println(\"openInventory\");\r\n            vrInput.triggerHapticAction(\"/actions/main/out/hapticTest\", 1, 5, 1 );\r\n        }\r\n\r\n        System.out.println(\"left trigger\" + vrInput.getAnalogActionState(\"/actions/main/in/leftTrigger\").x);\r\n    }\r\n```\r\n\r\nAssuming people are happy with this I intend to expand the wiki to document how to write action manifests etc",
    "head_branch": "#1734-actions-based-vr-input",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "#1734 actions based vr input (#1735)\n\n* #1734 Bring the LWJGL OpenVR implementation up to the modern actions based input/vr/AnalogActionState.java\r\n\r\nAll the other apis are vender specific or are alternative of versions OpenVR, so are deprecated\r\n\r\n- Deprecate everything but lwjgl openVr\r\n\r\n- Add support for restricting analog, digital and haptics to a particular hand\r\n\r\n- improve vr javadocs\r\n\r\n- Add haptics to the new openVR api\r\n\r\n- Add analogue inputs\r\n\r\n- Add action based digital controls into jme-vr\r\n\r\n* #1734 Improve VR javadoc to make it clear that the action based API is only for OpenVr"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e48a14f302d393b26e9",
    "number": 1733,
    "body": "In javadoc, an unresolved cross reference (`@see` or `@link`) is an error that may suppress javadoc output.\r\n\r\nThis PR attempts to clear up the remaining unresolved refs. In most cases, I could guess what the author intended. In one case, I deleted the offending reference.",
    "head_branch": "sgold/jdoc-unresolved",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "deal with unresolved references in javadoc (#1733)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e49a14f302d393b26ea",
    "number": 1732,
    "body": "Starting with JDK 8, javadoc regards self-closing HTML tags as errors. This PR corrects 17 such errors.",
    "head_branch": "sgold/self-closing",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "avoid self-closing HTML tags in javadoc (#1732)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e4aa14f302d393b26eb",
    "number": 1731,
    "body": "This greatly improves the efficiency of a method ... which is rarely used.",
    "head_branch": "sgold/rotate-around-origin",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Vector2f: save 2 trig calculations in rotateAroundOrigin() (#1731)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e4ba14f302d393b26ec",
    "number": 1730,
    "body": "```\r\njava.lang.NullPointerException: Cannot invoke\r\n\"com.jme3.anim.tween.action.Action.setMask(com.jme3.anim.AnimationMask)\"\r\nbecause \"this.currentAction\" is null\r\n        at com.jme3.anim.AnimLayer.update(AnimLayer.java:209)\r\n        at com.jme3.anim.AnimComposer.controlUpdate(AnimComposer.java:391)\r\n        at com.jme3.scene.control.AbstractControl.update(AbstractControl.java:118)\r\n        at com.jme3.scene.Spatial.runControlUpdate(Spatial.java:743)\r\n        at com.jme3.scene.Spatial.updateLogicalState(Spatial.java:890)\r\n        at com.jme3.scene.Node.updateLogicalState(Node.java:228)\r\n        at com.jme3.scene.Node.updateLogicalState(Node.java:239)\r\n```\r\n\r\n\r\nEdit:\r\nLink to the forum post: https://hub.jmonkeyengine.org/t/v3-5-0-beta-testing/45209/17\r\n\r\nEdit 2:\r\nTo facilitate the understanding of the problem I also add the explanation of the fix discussed on the forum and suggested by Ali-RS: \"the `currentAction` should be copied into a local variable inside `AnimLayer.update()` because it might be changed, removed or replaced with new action in `Action.interpolate(time)`\"\r\n\r\nFor clarity here is a sample code that can cause the exception:\r\n```java\r\nclass NonLoopingAction extends BaseAction {\r\n\r\n    ...\r\n     public boolean interpolate(double t) {\r\n        var result = delegate.interpolate(t);\r\n        if (!result) {\r\n            composer.removeCurrentAction(AnimComposer.DEFAULT_LAYER);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n```",
    "head_branch": "capdevon-issue-animlayer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix NullPointerException in AnimLayer.update() (#1730)\n\n* NullPointerException in AnimLayer.update()\r\n\r\njava.lang.NullPointerException: Cannot invoke\r\n\"com.jme3.anim.tween.action.Action.setMask(com.jme3.anim.AnimationMask)\"\r\nbecause \"this.currentAction\" is null\r\n        at com.jme3.anim.AnimLayer.update(AnimLayer.java:209)\r\n        at com.jme3.anim.AnimComposer.controlUpdate(AnimComposer.java:391)\r\n        at com.jme3.scene.control.AbstractControl.update(AbstractControl.java:118)\r\n        at com.jme3.scene.Spatial.runControlUpdate(Spatial.java:743)\r\n        at com.jme3.scene.Spatial.updateLogicalState(Spatial.java:890)\r\n        at com.jme3.scene.Node.updateLogicalState(Node.java:228)\r\n        at com.jme3.scene.Node.updateLogicalState(Node.java:239)\r\n\r\n* rename runningAction -> action"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e4ca14f302d393b26ed",
    "number": 1729,
    "body": "+ Explain what the class is used for.\r\n+ Consistently refer to its \"values\" as \"components\".\r\n+ Conform the javadoc to the project's preferred Java style.\r\n+ Clarify which methods modify the current instance and which don't.\r\n+ Clarify which arguments can be null and which can't.\r\n+ Clarify the order of the factors in cross products.\r\n+ Add javadoc to methods that lacked it.\r\n+ Don't refer to fractions as percentages, which implies they go from 0 to 100!",
    "head_branch": "sgold/vec2f-jdoc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "new javadoc for Vector2f (#1729)\n\n* Vector2f:  javadoc improvements\r\n\r\n* Vector2f:  javadoc tweaks"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e4da14f302d393b26ee",
    "number": 1728,
    "body": "This attempts to solve issue #1699 by updating OpenAL's direct-filter parameter whenever the `DryFilter` changes, even if the filter itself has already been initialized.\r\n\r\nI rearranged the `DryFilter` logic to make it slightly more readable. ",
    "head_branch": "sgold/issue1699",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "AlAudioRenderer: update OpenAL state when dry filter is re-applied (#1728)\n\n* ALAudioRenderer:  update direct-filter ID even when filter is up-to-date\r\n\r\n* ALAudioRenderer:  update the copyright dates"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e4ea14f302d393b26ef",
    "number": 1727,
    "body": "The `Matrix3f` javadoc used to be good for a few laughs:\r\n+ \"Matrix data is maintained internally\"\r\n+ referring to \"the provided axis\" when 3 axes are provided\r\n+ referring to the current instance as \"this matrix4f\" and \"this instance of Matrix4f\"\r\n+ a method claiming to return a null matrix in situations where it actually throws an NPE\r\n+ failing to document the order of the factors for matrix multiplications\r\n+ the `transpose()` method that modifies the current instance\r\n+ the `multLocal()` method that doesn't modify the current instance\r\n\r\nI've tried to make the javadoc less ridiculous and more informative.\r\nFuture work will include renaming some method arguments.\r\nThe good news is that `Matrix3f` isn't used much...",
    "head_branch": "sgold/matrix3f-jdoc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "new javadoc for Matrix3f (#1727)\n\n* Matrix3f:  begin revising the javadoc\r\n\r\n* Matrix3f:  further revision of the javadoc\r\n\r\n* Matrix3f:  still more revision of the javadoc\r\n\r\n* Matrix3f:  final touches on the javadoc\r\n\r\n* Matrix3f:  multLocal() can return null\r\n\r\n* Matrix3f:  final tweaks"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e4fa14f302d393b26f0",
    "number": 1726,
    "body": "The solves issue 1723 and adds a JUnit test to check for similar bugs in `RenderState` serialization and/or cloning.",
    "head_branch": "sgold/issue-1723",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix and test for issue 1723 (more serialization bugs in RenderState) (#1726)\n\n* RenderStateTest:  add automated tests for cloning/serialization issues\r\n\r\n* RenderState:  solve issue #1723 (serialization bugs)\r\n\r\n* RenderStateTest:  enable testing of serialization\r\n\r\n* RenderStateTest:  don't use floating point for loop indices"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e50a14f302d393b26f1",
    "number": 1725,
    "body": "Despite previous efforts, the `Quaternion` javadoc leaves much to be desired. I plan to clarify what the components represent, what the methods do, which methods modify the object, which arguments can be null, and so on, similar to what I did in PRs #1689 and #1706.",
    "head_branch": "sgold/quat-jdoc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "new javadoc for Quaternion (#1725)\n\n* Quaternion:  begin revising the javadoc\r\n\r\n* Quaternion:  further revision of the javadoc\r\n\r\n* Quaternion:  still more revision of the javadoc\r\n\r\n* Quaternion:  corrections to the javadoc of 3 methods\r\n\r\n* Quaternion:  a correction to the javadoc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e51a14f302d393b26f2",
    "number": 1722,
    "body": "Fix #1721 ",
    "head_branch": "fix-issue-1721",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "LwjglWindow:assign new thread to `mainThread` field. (#1722)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e52a14f302d393b26f3",
    "number": 1720,
    "body": "Fixing OpenCL context null issue with LwjglCanvas. It is important that for Swing applications and with this fix, OpenCL won't be available in \"simpleInitApp\" and everything needs to be initialized inside the \"simpleUpdate\" with a boolean variable.\r\nThe discussion is in the following post:\r\nhttps://hub.jmonkeyengine.org/t/opencl-context-for-lwjglcanvas-is-always-null/45213/3",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "LwjglCanvas: initialize OpenCL for LWJGL2 (#1720)\n\n* Fixing OpenCL context null issue with LwjglCanvas. It is important that for Swing applications and with this fix, OpenCL won't be available in \"simpleInitApp\" and everything needs to be initialized inside the \"simpleUpdate\" with a boolean variable.\r\n\r\n* Adding description to javaDoc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e52a14f302d393b26f4",
    "number": 1719,
    "body": "…ion issue. (issue #1718)",
    "head_branch": "fix-issue-1718",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "RenderState: fixed 'backStencilStencilFailOperation' field serialization issue. (#1719)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e53a14f302d393b26f5",
    "number": 1717,
    "body": "A new PR containing commits from PR #1715 that never got integrated.",
    "head_branch": "sgold-local-vars",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e54a14f302d393b26f6",
    "number": 1716,
    "body": "Sometime a formal method argument has a name that obfuscates its purpose, such as a `JmeImporter` named `e` or when words are run together without using camelCase.",
    "head_branch": "sgold/rename-args",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "rename method arguments for clarity (#1716)\n\n* rename method arguments for clarity\r\n\r\n* Transform:  rename 2 args\r\n\r\n* Quaternion:  rename 3 args\r\n\r\n* rename \"JmeImporter e\" arguments\r\n\r\n* Vector3f:  vector arguments named \"scalar\"???\r\n\r\n* Vector4f:  vector arguments named \"scalar\"???\r\n\r\n* Google style prohibits underscores in argument names\r\n\r\n* jme3-core:  \"Amnt\" -> \"Amount\""
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e55a14f302d393b26f7",
    "number": 1715,
    "body": "Choosing the wrong name for a local variable can make the code less clear than it ought to be.\r\n\r\nSometimes they're misspelled or abbreviated too far. Sometimes words are run together without using camelCase.",
    "head_branch": "sgold-local-vars",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "rename local variables for clarity (#1715)\n\n* AndroidConfigChooser: rename \"choosenConfig\" -> \"chosenConfig\"\r\n\r\n* rename \"glfwkey\" -> \"glfwKey\"\r\n\r\n* GltfLoader: rename \"znear\"/\"zfar\" -> \"zNear\"/\"zFar\"\r\n\r\n* LightProbeFactory: rename \"progres\" -> \"faceProgress\"\r\n\r\n* LwjglContext: rename \"vers\" -> \"version\"\r\n\r\n* LWJGLOpenVRMouseManager: rename \"Xamount\"/\"Yamount\"\r\n\r\n* MathUtils: rename \"numer\"/\"denom\" -> \"numerator\"/\"denominator\"\r\n\r\n* PerturbFilter: rename \"noisex\"/\"noisey\"/\"perturbx\"/\"perturby\"\r\n\r\n* PFMLoader: rename \"needEndienFlip\" -> \"needEndianFlip\"\r\n\r\n* SpotLight: rename \"dsqr\" -> \"dSquared\"\r\n\r\n* TestBatchNode: rename \"boxshape4\" -> \"boxShape4\"\r\n\r\n* Utils: rename \"errname\" -> \"errorName\""
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e56a14f302d393b26f8",
    "number": 1714,
    "body": "These unnecessary dependencies were discovered with the aid of Intellij IDEA, which is an imperfect tool. So the changes will need careful review and testing.",
    "head_branch": "sgold-depend3",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "downgrade or delete unnecessary library dependencies (#1714)\n\n* delete unnecessary library dependencies\r\n\r\n* GltfLoaderTest fails (with NPE) without jme3-desktop\r\n\r\n* \"testRuntime\" dependencies are deprecated\r\n\r\n* downgrade some dependencies to (test)runtimeOnly\r\n\r\n* jme3-terrain:  add back some test dependencies"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e57a14f302d393b26f9",
    "number": 1713,
    "body": "Fixes some javadoc errors.\r\nAlso corrects capitalization, spelling, noun-verb agreement, and punctuation in javadoc.\r\nAlso addresses some awkward phrasing.",
    "head_branch": "sgold/clarify-jdoc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "clarify javadoc (#1713)\n\n* clarify javadoc\r\n\r\n* more javadoc clarification\r\n\r\n* ListSort: more javadpc\r\n\r\n* more javadoc refinements\r\n\r\n* ConstantVerifierState:  \"it's\" -> \"its\""
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e58a14f302d393b26fa",
    "number": 1712,
    "body": "Corrects punctuation/capitalization/agreement, rewords some awkward phrases, and adds missing space after `//`.",
    "head_branch": "sgold/comments3",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "clarify some non-javadoc comments (#1712)\n\n* clarify comments\r\n\r\n* OSVRViewManager:  comment\r\n\r\n* more comments\r\n\r\n* ListSort: more comments"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e59a14f302d393b26fb",
    "number": 1711,
    "body": " Added a `WindowSizeListener` for lwjgl3 which can be registered in `LwjglWindow` also refactored GlfwMouseInput to use this listener instead of directly registering a callback on GLFW as GLFW does not support multiple callbacks.\r\n\r\nAlso, we need to test to see if this possibly solves issue #1710.",
    "head_branch": "lwjgl3-armhf",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "jme3-lwjgl3: add a WindowSizeListener (#1711)\n\n* Added a WindowSizeListener for lwjgl3 which can be registered in LwjglWindow and refactored GlfwMouseInput to use this listener instead of directly registering a callback on GLFW as GLFW does not support multiple callbacks.\r\n\r\n* Javadoc improvement & code cleanup.\r\n\r\n* Added license to WindowSizeListener class.\r\n\r\n* Improve javadoc & expand imports."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e5aa14f302d393b26fc",
    "number": 1709,
    "body": "PR #1685 deprecated the 2-arg constructor for `BitmapText`. That constructor is used extensively in the Engine itself, especially in \"jme3-examples\".\r\n\r\nSince the Engine (and especially \"jme3-examples\") ought to set a good example, this PR replaces all uses of the 2-arg constructor with the 1-arg constructor.",
    "head_branch": "sgold/dep-bitmaptext",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "avoid invoking the newly-deprecated BitmapText 2-arg constructor (#1709)\n\n* avoid invoking the newly-deprecated BitmapText constructor\r\n\r\n* TestMultipleApplications:  avoid deprecated BitmapText constructor"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e5ba14f302d393b26fd",
    "number": 1708,
    "body": "Prior discussion at https://hub.jmonkeyengine.org/t/local-properties-in-the-engine-repository/45196",
    "head_branch": "sgold/local-properties",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "remove the local.properties file (#1708)\n\n* delete the local.properties file from the repository\r\n\r\n* list local.properties in the \".gitignore\" file"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e5ca14f302d393b26fe",
    "number": 1707,
    "body": "Changed it so when you go under water to turn off reverb.   I turned off the Low Filter because it is not needed with Reverb is turned off.\r\n",
    "head_branch": "TestPostWater_1699",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Test post water 1699 (#1707)\n\n* This is a very simple addition. It allows a person to set 3 variables in AppSettings. ‘CenterWindow’, ‘WindowXPosition’ and ‘WindowYPosition’ variables. This way these variable will be saved in the profile when the profile is saved, and be reloaded. I added ‘CenterWindow’ to be added with a ‘true’ value for the default value so it will run just like it did before.\r\n\r\nBut if you set ‘CenterWindow’ to ‘false’ then inside LwjglWindow.java (lwjgl3 code) it will look at these new values, it will determine to center the window or use the position values to place the window back at the location the user last moved it to.\r\n\r\nOf course, these values are only updated if the “program” updates this value. So if you want to save screen position, you can save them on closing to and on restart put the window back into the same location.\r\n\r\n* formatting and comments changes.\r\n\r\n* jme3test.app.TestApplication hangs with LWJGL3 #1193\r\nLWJGL3-JME library would block the current thread when executing LWJGL3.    Instead of calling run() that is blocking,  made it work like LWJGL2-JME library when they start it as a thread so run gets called. I commented out the run() function and replaced it with Thread.start().\r\n\r\n* removing unwanted changes, since you can't do multiple pull requests at once.\r\n\r\n* formatting issues.\r\n\r\n* changed parameter naming to be more consistency with other items.\r\n\r\n* jme3test.app.TestApplication hangs with LWJGL3 #1193\r\n\r\nLWJGL3-JME projects was doing a call that is blocking the current thread.  I changed it to match how LWJGL2-JME project launches the Context Window.\r\n\r\n* jme3test.app.TestApplication hangs with LWJGL3 #1193 (#3)\r\n\r\nLWJGL3-JME projects was doing a call that is blocking the current thread.  I changed it to match how LWJGL2-JME project launches the Context Window.\r\n\r\n* removing unwanted changes.\r\n\r\n* AppSettings:  enhance the new javadoc\r\n\r\n* AppSettings:  capitalize Window{X/Y}Position consistent w/other settings\r\n\r\n* LwjglWindow:  convert tabs to spaces\r\n\r\n* AppSettings:  re-arrange @see tags in javadoc\r\n\r\n* TestPostWater issue #1699\r\n\r\nChanged it so when you go under water to turn off reverb.   I turned off the Low Filter because it is not needed with Reverb is turned off.\r\n\r\n* Added a feature to leave dry filter on/off.  Also put on the screen other hot keys this demo supports.\r\n\r\n* type preventing input to work correctly.\r\n\r\n* more formattings changes.\r\n\r\n* TestPostWater:  standardize key names\r\n\r\n* TestPostWater:  correct key assignements that were swapped\r\n\r\n* TestPostWater:  organize imports per the style guide\r\n\r\n* TestPostWater:  whitespace\r\n\r\n* TestPostWater:  change useDryFilter logic so the 4 key has prompt effect\r\n\r\nCo-authored-by: Stephen Gold <sgold@sonic.net>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e5da14f302d393b26ff",
    "number": 1706,
    "body": "This PR tries to raise the javadoc of `com.jme3.math.Transform` to a higher standard:\r\n+ explicitly indicate which methods modify the current instance and which arguments are modified\r\n+ explicitly indicate which methods return a new instance\r\n+ document which arguments cannot be null and what effect null arguments have\r\n+ consistently refer to `translate`, `rot`, and `scale` as \"components\"",
    "head_branch": "sgold/transform-doc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "new javadoc for Transform (#1706)\n\n* Transform: javadoc frag not a complete sentence, but punctuated like one\r\n\r\n* Transform:  clarify which objects get modified and which are unaffected\r\n\r\n* Transform: document the nullability of arguments and results\r\n\r\n* refer to components consistently, distinguish \"scale\" from \"scaling\"\r\n\r\n* Transform: clarify the return values\r\n\r\n* Transform: when there's a single argument, refer to it as \"the argument\"\r\n\r\n* Transform: use capital letters when referring to axes\r\n\r\n* Transform:  standardize the terminology for caller-provided storage\r\n\r\n* Transform:  rephrase \"given value\" to be more consistent\r\n\r\n* Transform: simplify the javadoc, avoid \"this Transform\"\r\n\r\n* Transform:  tidy the whitespace\r\n\r\n* Transform:  a cleanup pass over the javadoc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e5ea14f302d393b2700",
    "number": 1704,
    "body": "The `CenterQuad` class in jme3-vr seems to have some general utility, for instance for UI objects that will be rotated and/or scaled. This PR cleans it up and adds it to the jme3-core. Long-term, we may want to deprecate the version in jme3-vr.\r\n\r\nNotable changes relative to jme3-vr:\r\n+ no static instances\r\n+ privatized the `updateGeometry()` methods\r\n+ added a no-arg constructor and read/write methods to allow serialization\r\n+ solved a winding-order bug when `width` is negative\r\n+ avoided invocation of overridable methods in constructors\r\n+ improved javadoc",
    "head_branch": "sgold/center-quad-take2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "jme3-core:  add a CenterQuad class based on the one in jme3-vr (#1704)\n\n* jme3-core:  add a CenterQuad class based on the one in jme3-vr\r\n\r\n* CenterQuad:  updateGeometry() invokes setStatic() for the constructor"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e5fa14f302d393b2701",
    "number": 1703,
    "body": "The `CenterQuad` class in jme3-vr seems to have some general utility, for instance for UI objects that will be rotated and/or scaled. This PR cleans it up and adds it to the jme3-core. Long-term, we may want to deprecate the version in jme3-vr.\r\n\r\nNotable changes relative to jme3-vr:\r\n+ no static instances\r\n+ privatized the `updateGeometry()` methods\r\n+ added a no-arg constructor and read/write methods to allow serialization\r\n+ solved a winding-order bug when `width` is negative\r\n+ avoided invocation of overridable methods in constructors\r\n+ improved javadoc",
    "head_branch": "sgold/center-quad",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e60a14f302d393b2702",
    "number": 1702,
    "body": "The `negate()` function in `Quaternion` doesn't follow the JME naming conventions. The other math functions that modify the current instance have \"Local\" in their names, but `negate()` doesn't.\r\n\r\nSince this inconsistency could lead to buggy code, the old method is being deprecated, and a new method `negateLocal()` is being added. Unlike the old method, the new one returns `this` to allow function chaining.",
    "head_branch": "sgold/quat-negate",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "deprecate Quaternion.negate() (#1702)\n\n* add Quaternion.negateLocal() and deprecate Quaternion.negate()\r\n\r\n* Quaternion:  simplify negateLocal() slightly\r\n\r\n* Quaternion:  revert some unintended changes\r\n\r\n* Quaternion:  revert another unintended change"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e61a14f302d393b2703",
    "number": 1701,
    "body": "This RectangleMesh class was created based on the idea proposed at https://hub.jmonkeyengine.org/t/next-release-of-the-engine/44988/170",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "New RectangleMesh shape class (#1701)\n\n* New RectangleMesh shape class\r\n\r\nThis RectangleMesh class was created based on the idea proposed at https://hub.jmonkeyengine.org/t/next-release-of-the-engine/44988/170\r\n\r\n* Update RectangleMesh.java\r\n\r\n* Update RectangleMesh.java\r\n\r\n* Update Rectangle.java\r\n\r\n* Update Rectangle.java\r\n\r\n* Update RectangleMesh.java\r\n\r\n* Update Rectangle.java\r\n\r\n* Update RectangleMesh.java\r\n\r\n* Update TestCameraNode.java\r\n\r\n* Update TestChaseCamera.java\r\n\r\nModified to use RectangleMesh instead of Quad.\r\n\r\n* Update TestTransparentShadow.java\r\n\r\nModified to use RectangleMesh instead of Quad.\r\n\r\n* Update TestTransparentSSAO.java\r\n\r\nModified to use RectangleMesh instead of Quad.\r\n\r\n* Update TestAnisotropicFilter.java\r\n\r\nModified to use RectangleMesh instead of Quad.\r\n\r\n* Update TestTransparentCartoonEdge.java\r\n\r\nModified to use RectangleMesh instead of Quad.\r\n\r\n* Update TestParallax.java\r\n\r\nModified to use RectangleMesh instead of Quad.\r\n\r\n* Modified to use RectangleMesh instead of Quad\r\n\r\n* Modified to use RectangleMesh instead of Quad\r\n\r\n* Update Rectangle.java\r\n\r\n* Rectangle:  javadoc improvements\r\n\r\n* Rectangle:  correct formula for the normal vector\r\n\r\n* Rectangle:  further clarification of the javadoc\r\n\r\n* RectangleMesh:  improve the javadoc\r\n\r\n* Rectangle:  correct the documentation of the normal formula\r\n\r\n* Rename getD() to calculateD() and improve it\r\n\r\n* Access modifier\r\n\r\nChanged the access modifier of updateMesh() from public to protected.\r\n\r\n* Removed setNormal() and created flip()\r\n\r\n* Added texture to flip()\r\n\r\n* Changes on flip() and its javadoc\r\n\r\n* Fixed read() and write() methods\r\n\r\n* Update RectangleMesh.java\r\n\r\nCo-authored-by: Stephen Gold <sgold@sonic.net>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e62a14f302d393b2704",
    "number": 1698,
    "body": "Very similar to #1663, this PR solves missing words/hyphens, unintentionally repeated words, non-standard punctuation, and similar issues.",
    "head_branch": "sgold/dec-typos",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "correct typos in Java comments and javadoc (#1698)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e63a14f302d393b2705",
    "number": 1697,
    "body": "When run from the test chooser, TestIssue1120 in jme3-examples crashes:\r\n\r\nThe application's test field is null because it wasn't initialized. The initialization was placed in main(), which the test chooser never executes.",
    "head_branch": "TestChooser_#1687",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix issue #1687 (NPE in TestIssue1120) (#1697)\n\n* When run from the test chooser, TestIssue1120 in jme3-examples crashes:\r\n\r\nNov 28, 2021 1:10:12 AM com.jme3.app.LegacyApplication handleError\r\nSEVERE: Uncaught exception thrown in Thread[jME3 Main,6,main]\r\njava.lang.NullPointerException\r\n at jme3test.bullet.TestIssue1120.simpleInitApp(TestIssue1120.java:142)\r\n at com.jme3.app.SimpleApplication.initialize(SimpleApplication.java:240)\r\n at com.jme3.system.lwjgl.LwjglAbstractDisplay.initInThread(LwjglAbstractDisplay.java:139)\r\n at com.jme3.system.lwjgl.LwjglAbstractDisplay.run(LwjglAbstractDisplay.java:221)\r\n at java.lang.Thread.run(Thread.java:748)\r\n\r\nThe application's test field is null because it wasn't initialized. The initialization was placed in main(), which the test chooser never executes.\r\n\r\n* remove unwanted commented out code.\r\n\r\nCo-authored-by: Stephen Gold <sgold@sonic.net>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e64a14f302d393b2706",
    "number": 1696,
    "body": " Updating all references to setDepthTexture  and setColorTexture from old system to the new system.",
    "head_branch": "Update_new_frameBuffers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      " using deprecated FrameBuffer methods in jme3-core and jme3-desktop #1657  (#1696)\n\n* This is a very simple addition. It allows a person to set 3 variables in AppSettings. ‘CenterWindow’, ‘WindowXPosition’ and ‘WindowYPosition’ variables. This way these variable will be saved in the profile when the profile is saved, and be reloaded. I added ‘CenterWindow’ to be added with a ‘true’ value for the default value so it will run just like it did before.\r\n\r\nBut if you set ‘CenterWindow’ to ‘false’ then inside LwjglWindow.java (lwjgl3 code) it will look at these new values, it will determine to center the window or use the position values to place the window back at the location the user last moved it to.\r\n\r\nOf course, these values are only updated if the “program” updates this value. So if you want to save screen position, you can save them on closing to and on restart put the window back into the same location.\r\n\r\n* formatting and comments changes.\r\n\r\n* jme3test.app.TestApplication hangs with LWJGL3 #1193\r\nLWJGL3-JME library would block the current thread when executing LWJGL3.    Instead of calling run() that is blocking,  made it work like LWJGL2-JME library when they start it as a thread so run gets called. I commented out the run() function and replaced it with Thread.start().\r\n\r\n* removing unwanted changes, since you can't do multiple pull requests at once.\r\n\r\n* formatting issues.\r\n\r\n* changed parameter naming to be more consistency with other items.\r\n\r\n* jme3test.app.TestApplication hangs with LWJGL3 #1193\r\n\r\nLWJGL3-JME projects was doing a call that is blocking the current thread.  I changed it to match how LWJGL2-JME project launches the Context Window.\r\n\r\n* jme3test.app.TestApplication hangs with LWJGL3 #1193 (#3)\r\n\r\nLWJGL3-JME projects was doing a call that is blocking the current thread.  I changed it to match how LWJGL2-JME project launches the Context Window.\r\n\r\n* removing unwanted changes.\r\n\r\n* AppSettings:  enhance the new javadoc\r\n\r\n* AppSettings:  capitalize Window{X/Y}Position consistent w/other settings\r\n\r\n* LwjglWindow:  convert tabs to spaces\r\n\r\n* AppSettings:  re-arrange @see tags in javadoc\r\n\r\n* using deprecated FrameBuffer methods in jme3-core and jme3-desktop #1657\r\n\r\nUpdating all references to setDepthTexture  and setColorTexture from old system to the new system.\r\n\r\n* Removing unused imports.\r\n\r\n* missed an unused import.\r\n\r\n* FrameBuffer:  improve formatting of the added sourcecode\r\n\r\n* tweak the whitespace\r\n\r\nCo-authored-by: Stephen Gold <sgold@sonic.net>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e65a14f302d393b2707",
    "number": 1695,
    "body": "This is riskier than #1683. For one thing, it affects many commonly extended classes including `BetterCharacterControl` and `AbstractControl`.  Also, it modifies the `JmeCloneable` interface itself.",
    "head_branch": "sgold/issue-1686",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e66a14f302d393b2708",
    "number": 1694,
    "body": "The fix was to access the `settings` field directly (in `simpleInitApp()`) instead of relying on `main()` to initialize the `test` field.",
    "head_branch": "sgold/issue-1687",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e67a14f302d393b2709",
    "number": 1693,
    "body": null,
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e68a14f302d393b270a",
    "number": 1692,
    "body": "See discussion: https://hub.jmonkeyengine.org/t/chasecamera-canrotate-not-set-to-true-when-re-enabled-after-being-disabled/45138/14\r\n\r\nThis fixes the chase camera not correctly setting the canRotate flag upon being re-enabled when drag to rotate is false. ",
    "head_branch": "chase-cam-can-rotate-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Chase cam can rotate fix on re-enable (#1692)\n\n* Upgrade LWJGL to 3.3.0\r\n\r\n* Fix canRotate not being set correctly on re-enable\r\n\r\n* Minor change as suggested in review. Add test case.\r\n\r\n* TestIssues1692:  various minor changes\r\n\r\n* TestIssue1692:  replace a field with a local variable\r\n\r\nCo-authored-by: Stephen Gold <sgold@sonic.net>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e69a14f302d393b270b",
    "number": 1691,
    "body": "We just took this to use and what we use this for is to generate tangents for thousands of geometries. This said batch also gives out 300 lines of log... This particular line. So this is a small optimization. Follows the standard jME logging style.",
    "head_branch": "mikt-logger",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use static final logger (#1691)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e6aa14f302d393b270c",
    "number": 1690,
    "body": " TestAWTPanels hangs with LWJGL v3 #1558 /  jme3test.app.TestApplication hangs with LWJGL3 #1193\r\n\r\nMade LWJGL3-JME to launch in the same way the LWJGL2-JME launches.  This always Windows and Linux to run, still needs testing on Max OS X\r\n",
    "head_branch": "LWJGL3_Hangs_#1558",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix issues #1193 and #1558 for Linux/Windows (LWJGL v3 hangs) (#1690)\n\n* This is a very simple addition. It allows a person to set 3 variables in AppSettings. ‘CenterWindow’, ‘WindowXPosition’ and ‘WindowYPosition’ variables. This way these variable will be saved in the profile when the profile is saved, and be reloaded. I added ‘CenterWindow’ to be added with a ‘true’ value for the default value so it will run just like it did before.\r\n\r\nBut if you set ‘CenterWindow’ to ‘false’ then inside LwjglWindow.java (lwjgl3 code) it will look at these new values, it will determine to center the window or use the position values to place the window back at the location the user last moved it to.\r\n\r\nOf course, these values are only updated if the “program” updates this value. So if you want to save screen position, you can save them on closing to and on restart put the window back into the same location.\r\n\r\n* formatting and comments changes.\r\n\r\n* jme3test.app.TestApplication hangs with LWJGL3 #1193\r\nLWJGL3-JME library would block the current thread when executing LWJGL3.    Instead of calling run() that is blocking,  made it work like LWJGL2-JME library when they start it as a thread so run gets called. I commented out the run() function and replaced it with Thread.start().\r\n\r\n* removing unwanted changes, since you can't do multiple pull requests at once.\r\n\r\n* formatting issues.\r\n\r\n* changed parameter naming to be more consistency with other items.\r\n\r\n* jme3test.app.TestApplication hangs with LWJGL3 #1193\r\n\r\nLWJGL3-JME projects was doing a call that is blocking the current thread.  I changed it to match how LWJGL2-JME project launches the Context Window.\r\n\r\n* jme3test.app.TestApplication hangs with LWJGL3 #1193 (#3)\r\n\r\nLWJGL3-JME projects was doing a call that is blocking the current thread.  I changed it to match how LWJGL2-JME project launches the Context Window.\r\n\r\n* removing unwanted changes.\r\n\r\n* AppSettings:  enhance the new javadoc\r\n\r\n* AppSettings:  capitalize Window{X/Y}Position consistent w/other settings\r\n\r\n* LwjglWindow:  convert tabs to spaces\r\n\r\n* AppSettings:  re-arrange @see tags in javadoc\r\n\r\n* TestAWTPanels hangs with LWJGL v3 #1558 /  jme3test.app.TestApplication hangs with LWJGL3 #1193\r\n\r\nMade LWJGL3-JME to launch in the same way the LWJGL2-JME launches.  This always Windows and Linux to run, still needs testing on Max OS X\r\n\r\n* TestAWTPanels hangs with LWJGL v3 #1558 /  jme3test.app.TestApplication hangs with LWJGL3 #1193\r\n\r\nMade LWJGL3-JME to launch in the same way the LWJGL2-JME launches.  This always Windows and Linux to run, still needs testing on Max OS X\r\n\r\n* Removed the string compare to determine if it is a Mac OS.  Using LWJLG3 class that determines this instead.\r\n\r\n* Making changes for Mac os.  The AWT examples will not work under Mac but the Linux and Windows version will start to work.\r\n\r\n* added braces that are need for formatting.\r\n\r\n* LwjglWindow:  copyright year, log message, correct indents and braces\r\n\r\nCo-authored-by: Stephen Gold <sgold@sonic.net>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e6aa14f302d393b270d",
    "number": 1689,
    "body": "`Vector3f` may be the most crucial class for newcomers to learn, but unfortunately its javadoc is often vague, inconsistent, or even misleading.\r\n\r\nThis PR tries to raise the javadoc to a higher standard:\r\n+ explicitly indicate which methods modify the current instance and which arguments are modified\r\n+ explicitly indicate which methods return a new instance and which can return null\r\n+ document which arguments cannot be null and what effect null arguments have\r\n+ consistently refer to X, Y, and Z as \"components\" instead of \"values\" or \"fields\"\r\n+ in cross-product methods, distinguish the right factor from the left factor\r\n+ don't refer to calculations that modify the current instance as \"internal\"\r\n+ don't refer to a fraction as a \"percentage\"\r\n+ don't constantly tout the benefits of chaining",
    "head_branch": "sgold/vector3f-doc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "new javadoc for Vector3f (#1689)\n\n* Vector3f: correct important javadoc omissions and mistakes\r\n\r\n* Vector3f: javadoc frag not a complete sentence, but punctuated like one\r\n\r\n* Vector3f: clarify which vectors get modified and which are unaffected\r\n\r\n* Vector3f:  a Vector3f has a single \"value\" with 3 \"components\"\r\n\r\n* Vector3f:  document the nullability of arguments and results\r\n\r\n* Vector3f:  no need to emphasize how \"easy\" chaining is!\r\n\r\n* Vector3f:  refer to the components consistently, using capital letters\r\n\r\n* Vector3f:  clarify the return values\r\n\r\n* Vector3f:  all arithmetic takes place \"internally\" -- delete the word\r\n\r\n* Vector3f:  when there's a single argument, refer to it as \"the argument\"\r\n\r\n* Vector3f:  correct more javadoc mistakes\r\n\r\n* Vector3f:  standardize the terminology for caller-provided storage\r\n\r\n* Vector3f:  \"provided/given\" -> \"specified\" for consistency\r\n\r\n* Vector3f:  simplify the javadoc, avoid frequent mention of \"this vector\"\r\n\r\n* Vector3f:  add some details to the javadoc\r\n\r\n* Vector3f:  tidy the whitespace\r\n\r\n* Vector3f:  contract \"it is\" to \"it's\" in javadoc\r\n\r\n* Vector3f:  cleanup pass over the javadoc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e6ba14f302d393b270e",
    "number": 1688,
    "body": "This corrects a typo in the jme3-core source code, making it slightly more efficient.",
    "head_branch": "sgold/issue-1679",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Spatial:  use short-circuit OR in requiresUpdates() -- more efficient (#1688)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e6ca14f302d393b270f",
    "number": 1685,
    "body": "This pull request is solving the problem with displaying Right to Left texts in JME. fixes #1158 and would also make the additional file for testcase close #1159 unnecessary.\r\n\r\nMore info could be found in the [forum  ](https://hub.jmonkeyengine.org/t/issue-with-line-wrapping-of-right-to-left-text-in-bitmaptext/42148/5) or in the discussion for issue #1158.\r\n\r\nWhat changed: \r\nBeside repairing the behaviour of RtL texts, a new parameter in BitMapfont allowing to set the textdirection in the font and in Bitmaptext. Before that was not possible in the font itself. \r\nAn interface \"GlyphParser\" now allowing the user  of Persian, Arabic or other RtL oriented fonts to use individual parsers for the correct position of letters in a text (that may differ depending on letter before or after that) something that is not needed for  Left to Rights texts.\r\nAlso a new discovered bug that brings different results for linewidth from BitmapText.getLineWidth() and BitmapFont.getLineWidth() for textinput with multilines had been fixed.\r\n\r\nWe have tested it and feel the PR is ready for review.\r\n\r\nEdit: Of course it is Right to Left texts (at least I wrote it wrong on each occasion in the text)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "solve issue #1158 (enabling Right-to-Left fonts) (#1685)\n\n* Display Right to Left text correctly (Issue #1158).\r\nSome parts need testing\r\n\r\n* Just a suggestion to set the Right to Left text parameter with the font. Not sure if that will break the import from assetmanager.loadFont\r\n\r\n* Display Right to Left text correctly (Issue #1158).\r\nSome parts need testing\r\n\r\n* Edited out the reverse function of the textinput in BitmapText.\r\nIf the boolean RtL should not be set via Bitmaptext, te whole class could be unchanged\r\n\r\n* Changed the behaviour of RtL text without a textblock\r\n\r\n* Updating the linewidth dor correct calculation if unbounded.\r\n\r\n* Changed the behaviour of how xoffset is treated while calculating x0 for RtL text. (it was deducted twice before)\r\nStill not sure if it is correct that way.\r\n\r\n* Edited out the reverse function of the textinput in BitmapText.\r\nIf the boolean RtL should not be set via Bitmaptext, te whole class could be unchanged\r\n\r\n* validateSize() which is used in BitMapText.getLineWidth was changed to have the same result for LtR texts as it is given by BitMapFont.getLineWidth.\r\n\r\n* Merged with the adaptions and changes of Ali-RS. BitmapText.getLineWidth() and BitmapFont.getLineWidth() will now have the same results.\r\nA few open ToDo and tests have been solvd/closed.\r\n\r\n* Removed ToDos no longer needed due to the last changes\r\n\r\n* Detected small (incorrect) changes while comparing, fixed\r\n\r\n* Delete local.properties\r\n\r\n* Get back local.properties\r\n\r\n* Fix javadoc & formatting issues.\r\n\r\n* Added license to GlyphParser.\r\n\r\n* BitmapFont: serialize \"rightToLeft\" boolean field.\r\n\r\n* Made GlyphParser savable.\r\n\r\n* Deprecate BitmapText(BitmapFont font, boolean rightToLeft). The \"rightToLeft\" should be specified in the font.\r\n\r\n* Fixed alignment issue where Align.Right was not working when vertical alignment was set to anything other than VAlign.Top also made some code cleanup.\r\n\r\n* GlyphParser:added link to an example implementation for Persian text.\r\n\r\nCo-authored-by: Ali-RS <ali_codmw@yahoo.com>\r\nCo-authored-by: Stephen Gold <sgold@sonic.net>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e6da14f302d393b2710",
    "number": 1684,
    "body": "This addresses issue #1677, correcting the glaring inaccuracies and adding some useful details:\r\n + The resulting Mesh is indexed.\r\n + The resulting Mesh is in `Triangles` mode.\r\n + The resulting Mesh is static.\r\n + The resulting mesh includes normals.\r\n + The rectangle is axis-aligned.\r\n + Explain how `CenterQuad` differs from `Quad`.\r\n",
    "head_branch": "sgold/issue1677",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "CenterQuad:  new class javadoc (#1684)\n\n* CenterQuad:  rewrote the class javadoc from scratch\r\n\r\n* CenterQuad: improve the javadoc style"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e6ea14f302d393b2711",
    "number": 1683,
    "body": "This addresses issue #1676, changing the return types of 13 `clone()` methods to the class in which they're declared.\r\n\r\nThis is technically an API change. The most likely breakage would be if external code extended one of these classes and overrode `clone()` with a method returning a supertype (such as `Object`). That would lead to a compile-time error due to incompatible return types.",
    "head_branch": "sgold/clone-type",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "more precise return types for 13 clone() methods (#1683)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e6fa14f302d393b2712",
    "number": 1682,
    "body": "Fixes issue #1680 \r\n\r\n- Only FINE, FINER, FINEST, INFO levels were gated\r\n- A gate is added only if a paremeter needs to be evaluated\r\n- No use of lambda to preserve current practices\r\n- Assumption : methods used in logging parameters did not produce side-effects\r\n",
    "head_branch": "fix/1680",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix issue 1680 (inefficient use of loggers) (#1682)\n\n* #1680 jme3-core inefficient use of loggers\r\n\r\n* #1680 All modules : Gate FINE loggers when required for perf reasons\r\n\r\n* #1680 All modules : Gate INFO loggers when required for perf reasons\r\n\r\n* #1680 All modules : Gate INFO loggers when required for perf reasons\r\n\r\n* #1680 Reverts the \"not worthwhile\" changes\r\n\r\n* revert changes that added complexity to init/cleanup code\r\n\r\n* whitespace\r\n\r\nCo-authored-by: Cédric de Launois <>\r\nCo-authored-by: Stephen Gold <sgold@sonic.net>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e70a14f302d393b2713",
    "number": 1681,
    "body": "\r\n    - With LWJGL2, TestApplication completes in < 20 seconds without user input, after displaying a black window and a black fullscreen.\r\n    -     With LWJGL3, TestApplication displays the black window, then waits for the user to close the window. If the user closes the window, it pauses, displays the black fullscreen, and hangs. ALT-Tab is required to regain control.\r\n",
    "head_branch": "TestApplication_1193",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e71a14f302d393b2714",
    "number": 1675,
    "body": "The instructions in “CONTRIBUTING.md” say to “run ‘gradle build’”, which only works if you’ve installed particular versions of Gradle. Those instructions date back to 2014.\r\n\r\nNo instructions are ever foolproof. However, this PR tries to improve the odds of success for new users.",
    "head_branch": "sgold/build-command",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "document the correct build procedure (#1675)\n\n* CONTIBUTING.md:  correct build command, document its prereqs\r\n\r\n* CONTRIBUTING.md:  expand the build instructions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e72a14f302d393b2715",
    "number": 1673,
    "body": "This fixes issue #1672",
    "head_branch": "fix/1672",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix issue 1672 (inefficient logging in Node.java) (#1673)\n\n* #1672 Logging statements should be guarded\r\n\r\n* #1672 Fix performance penalty of logger without guard\r\n\r\nCo-authored-by: Cédric de Launois <>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e73a14f302d393b2716",
    "number": 1671,
    "body": "https://hub.jmonkeyengine.org/t/how-to-create-a-pull-request-against-the-engine/45080",
    "head_branch": "myPrBranch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "CONTRIBUTING.md:  add step-by-step instructions for submitting a PR (#1671)\n\n* CONTIBUTING.md:  add step-by-step instruction for submitting a PR\r\n\r\n* CONTIBUTING.md:  refine the step-by-step instructions\r\n\r\n* CONTIBUTING.md:  try a collapsible\r\n\r\n* CONTIBUTING.md:  separate prerequisites from the PR process itself\r\n\r\n* CONTIBUTING.md:  bold summary block for the PR process\r\n\r\n* CONTIBUTING.md:  try HTML-style bolding in the summary block\r\n\r\n* CONTIBUTING.md:  \"PR branch\"->\"temporary branch\" + other clarifications\r\n\r\n* CONTRIBUTING.md:  distill the GitHub sign-in process into a single step\r\n\r\n* CONTRIBUTING.md:  oops! inconsistent branch name"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e74a14f302d393b2717",
    "number": 1670,
    "body": "This is a very simple addition. It allows a person to set 3 variables in AppSettings. ‘CenterWindow’, ‘WindowXPosition’ and ‘WindowYPosition’ variables. This way these variable will be saved in the profile when the profile is saved, and be reloaded. I added ‘CenterWindow’ to be added with a ‘true’ value for the default value so it will run just like it did before.\r\n\r\nBut if you set ‘CenterWindow’ to ‘false’ then inside LwjglWindow.java (lwjgl3 code) it will look at these new values, it will determine to center the window or use the position values to place the window back at the location the user last moved it to.\r\n\r\nOf course, these values are only updated if the “program” updates this value. So if you want to save screen position, you can save them on closing to and on restart put the window back into the same location.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added Window Position for LJWGL3 libraries (#1670)\n\n* This is a very simple addition. It allows a person to set 3 variables in AppSettings. ‘CenterWindow’, ‘WindowXPosition’ and ‘WindowYPosition’ variables. This way these variable will be saved in the profile when the profile is saved, and be reloaded. I added ‘CenterWindow’ to be added with a ‘true’ value for the default value so it will run just like it did before.\r\n\r\nBut if you set ‘CenterWindow’ to ‘false’ then inside LwjglWindow.java (lwjgl3 code) it will look at these new values, it will determine to center the window or use the position values to place the window back at the location the user last moved it to.\r\n\r\nOf course, these values are only updated if the “program” updates this value. So if you want to save screen position, you can save them on closing to and on restart put the window back into the same location.\r\n\r\n* formatting and comments changes.\r\n\r\n* jme3test.app.TestApplication hangs with LWJGL3 #1193\r\nLWJGL3-JME library would block the current thread when executing LWJGL3.    Instead of calling run() that is blocking,  made it work like LWJGL2-JME library when they start it as a thread so run gets called. I commented out the run() function and replaced it with Thread.start().\r\n\r\n* removing unwanted changes, since you can't do multiple pull requests at once.\r\n\r\n* formatting issues.\r\n\r\n* changed parameter naming to be more consistency with other items.\r\n\r\n* jme3test.app.TestApplication hangs with LWJGL3 #1193\r\n\r\nLWJGL3-JME projects was doing a call that is blocking the current thread.  I changed it to match how LWJGL2-JME project launches the Context Window.\r\n\r\n* jme3test.app.TestApplication hangs with LWJGL3 #1193 (#3)\r\n\r\nLWJGL3-JME projects was doing a call that is blocking the current thread.  I changed it to match how LWJGL2-JME project launches the Context Window.\r\n\r\n* removing unwanted changes.\r\n\r\n* AppSettings:  enhance the new javadoc\r\n\r\n* AppSettings:  capitalize Window{X/Y}Position consistent w/other settings\r\n\r\n* LwjglWindow:  convert tabs to spaces\r\n\r\n* AppSettings:  re-arrange @see tags in javadoc\r\n\r\nCo-authored-by: Stephen Gold <sgold@sonic.net>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e75a14f302d393b2718",
    "number": 1668,
    "body": "Added the ability under ljwgl3  to be able to position the window instead of forcing it to be center on the screen all the time.   You can set through AppSettings 3 types of values.   CenterWindow, WindowXPosition, WindowYPosition.  By defaul the CenterWindow is set to 'true', so it runs just like it use to do and doesn't affect any previous builds.\r\n\r\n  This way the positioning will can be saved and used in the future.",
    "head_branch": "v3.4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e76a14f302d393b2719",
    "number": 1667,
    "body": "-TangentBinormalGenerator: no changes, just remove extra empty lines and code formatting.\r\n\r\n-TestLodGeneration: code formatting; removal of commented or deprecated code.",
    "head_branch": "capdevon-alpha",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "code formatting (#1667)\n\n-TangentBinormalGenerator: no changes, just remove extra empty lines and\r\ncode formatting.\r\n\r\n-TestLodGeneration: code formatting; removal of commented or deprecated code."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e77a14f302d393b271a",
    "number": 1666,
    "body": "While investigating issue #1597, I uncovered inaccuracies in the definition of JMonkeyEngine's native binary format (J3O) presented in the class javadoc for `BinaryExporter`. Perhaps the format was modified at some point without updating the javadoc.\r\n\r\nThis PR corrects the inaccuracies. It also reformats and simplifies the class javadoc. It also adds comments to the `save()` method to match format items in the documentation with `write()` invocations.",
    "head_branch": "sgold/issue-1597",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "clarify and update the J3O format description (#1666)\n\n* BinaryExporter:  clarify and update the format description\r\n\r\n* BinaryExporter:  comments that link writes to format-description items\r\n\r\n* BinaryExporter:  correct my mistake"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e78a14f302d393b271b",
    "number": 1665,
    "body": "A color filter used to adjust the color contrast and brightness based on a simple tone map operator function and adjust scales on the final result at the final pass before rendering.\r\n\r\nSupports and tested on both OGL and OGLES (android).\r\n\r\nDiscussion : https://hub.jmonkeyengine.org/t/gammacorrectionfilter/45076/33\r\n\r\n ",
    "head_branch": "colorAdjustmentFilter",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "ColorAdjustmentFilter (#1665)\n\n* ContrastAdjustmentFilter\r\n\r\n* ContrastAdjustmentFilter test\r\n\r\n* brightness code fix\r\n\r\n* Fixed material reading problems, added gles glsl support, added final pass scales to the color channels\r\n\r\n* update the testcase to meet the new changes\r\n\r\n* corrected instances namings in the testcase\r\n\r\n* Changed the default exp value to 2.2 and documenting other default values\r\n\r\n* Fixed default constructor javadocs\r\n\r\n* Corrected the brightness docs\r\n\r\n* Cleaning up\r\n\r\n* Cleaning up\r\n\r\n* Java naming convention, code design simplifications, docs improvements\r\n\r\n* Java naming conventions\r\n\r\n* Minor language fix\r\n\r\n* Removed keyword 'brightness' from all files\r\n\r\n* don't limit the output scaling to between 0 and 1\r\n\r\n* ContrastAdjustmentFilter:  simplify the class description\r\n\r\n* ContrastAdjustmentFilter:  clarify what the input range does\r\n\r\n* frags:  use max() instead of abs() to avoid unintended color inversion\r\n\r\n* ContrastAdjustmentFilter:  remove the null check from getMaterial()\r\n\r\n* ContrastAdjustmentFilter:  add setters to set each parameter by itself\r\n\r\n* ContrastAdjustmentFilter:  add a toString() method\r\n\r\n* TestContrastAdjustmentFilter:  add a user interface for thorough testing\r\n\r\n* ContrastAdjustmentFilter:  set the filter name in both constructors\r\n\r\n* ContrastAdjustmentFilter:  remove the extra \"material\" field\r\n\r\n* ContrastAdjustmentFilter:  don't use overridable method in constructor\r\n\r\n* ContrastAdjustmentFilter: consistent naming of fields, methods, and args\r\n\r\n* ContrastAdjustmentFilter:  privatize 8 fields for better encapsulation\r\n\r\n* TCAF:  include current year in the copyright notice\r\n\r\n* TCAF:  display the filter status using a BitmapText\r\n\r\n* TCAF:  scale change rates so they don't depend on the frames per second\r\n\r\n* TCAF:  make the globe smaller, orient with the North Pole on top\r\n\r\n* TCAF:  unshaded scene doesn't need any lights\r\n\r\n* TCAF:  press Enter to reset the filter to defaults\r\n\r\n* TCAF:  configure multisampling in the FilterPostProcessor\r\n\r\n* TCAF:  improve the class javadoc\r\n\r\n* ContrastAdjustmentFilter:  improve the javadoc\r\n\r\n* ContrastAdjustmentFilter:  delete some unnecessary checks\r\n\r\n* TCAF:  avoid crash when numSamples=0\r\n\r\n* ContrastAdjustmentFilter:  more javadoc\r\n\r\n* TCAF: rename to TestContrastAdjustment\r\n\r\n* rename ColorContrast->ContrastAdjustment consistent with other filters\r\n\r\nCo-authored-by: Stephen Gold <sgold@sonic.net>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e79a14f302d393b271c",
    "number": 1664,
    "body": "Static analysis by IntelliJ IDEA flagged this weird code. This PR makes the examples a tiny bit more readable.",
    "head_branch": "sgold/unary-minus",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "jme3-examples:  simplify 6 unnecessary uses of unary minus (#1664)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e7aa14f302d393b271d",
    "number": 1663,
    "body": "This PR corrects typos, grammar, and punctuation issues in Java source.",
    "head_branch": "sgold/nov-comments",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "java comments and javadoc (#1663)\n\n* java comments\r\n\r\n* resolve merge conflict with commit 07f78592"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e7ba14f302d393b271e",
    "number": 1662,
    "body": "This addresses issue #1661.",
    "head_branch": "sgold-issue1661",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e7ca14f302d393b271f",
    "number": 1660,
    "body": "Fix #1634",
    "head_branch": "android-bitmap-patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Un-deprecate AndroidBufferImageLoader (#1660)\n\n* Un-deprecate AndroidBufferImageLoader.\r\n\r\n* Android.cfg: registered AndroidBufferImageLoader to be used for loading WebP & HEIF images."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e7ca14f302d393b2720",
    "number": 1659,
    "body": "@stephengold I have resolved the compilation issue with OpenVR inside jme-vr module, and updated the lwjgl version to 3.3.0.\r\n\r\nI apologize, IDEA is trying to trim trailing whitespace, and no matter what I hit, I cannot get it to leave it alone. All other changes are whitespace changes, the only change is on line 233 (and the imports, which again IDEA does on its own...)\r\n\r\nI guess this is a step in the right direction for the new style guide 🤣 ",
    "head_branch": "lwjgl-3.3.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Upgrade LWJGL to 3.3.0 (#1659)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e7ea14f302d393b2721",
    "number": 1658,
    "body": "While reviewing some deprecation warnings, I discovered that 3 tests in jme3-core were using a deprecated version of `MockitoJUnitRunner`.\r\n\r\nSee https://stackoverflow.com/questions/41909538/mockitojunitrunner-is-deprecated\r\n\r\nThis PR corrects the issue.",
    "head_branch": "sgold/MockitoJUnitRunner",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "jme3-core/src/test:  upgrade MockitoJUnitRunner from deprecated version (#1658)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e7fa14f302d393b2722",
    "number": 1656,
    "body": "This PR consists mainly of refactoring to address issue #1566:\r\n+ All the functionality of the `Layer` class was moved to a new top-level class named `AnimLayer`.\r\n+ Functionality from `AnimComposer.controlUpdate()` was combined with `Layer.advance()` to create a new `AnimLayer.update()` method, resulting in a cleaner interface between the 2 classes.\r\n+ The `AnimLayer` constructor takes 2 arguments instead of one, avoiding the need for an `AnimLayer.setMask()` method.\r\n\r\nIn addition to `AnimComposer.getLayer()`, some new capabilities were added:\r\n+ `AnimComposer.getLayerName()` to find the name of a specified layer,\r\n+ `AnimComposer.getLayerNames()` to enumerate all layer names, and\r\n+ `AnimLayer.getMask()` to access a layer's mask.\r\n\r\n`AnimComposer` is shorter and simpler now, but still more complex than it has to be. At some point we may want to deprecate (and possibly delete) all or some of the redundant methods:\r\n+ `AnimComposer.getCurrentAction()`,\r\n+ `AnimComposer.getLayerManager()`,\r\n+ `AnimComposer.getTime()`,\r\n+ `AnimComposer.setCurrentAction()`,\r\n+ `AnimComposer.setLayerManager()`, and\r\n+ `AnimComposer.setTime()`.",
    "head_branch": "sgold-issue1566",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "convert inner class Layer to a top-level class (#1656)\n\n* replace AnimComposer's inner class with the new AnimLayer class\r\n\r\n* AnimComposer: add the getLayer() method\r\n\r\n* AnimComposer:  simplify the code using getLayer()\r\n\r\n* AnimComposer:  add the getLayerNames() method\r\n\r\n* AnimComposer:  add the getLayerName() method\r\n\r\n* AnimComposer:  delete an import that's no longer needed\r\n\r\n* AnimLayer:  rename 2 formal args per capdevon's advice\r\n\r\n* AnimLayer:  add an omitted word to the setTime() javadoc\r\n\r\n* replace AnimComposer.getLayerName() with AnimLayer.getName()\r\n\r\n* AnimLayer:  instead of \"real\" time, call it \"application\" time"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e7fa14f302d393b2723",
    "number": 1655,
    "body": "This adds a new section to \"CONTRIBUTION.md\" as discussed at issue #1098.",
    "head_branch": "sgold-issue1098",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "solve issue #1098 (preferred coding style isn't documented) (#1655)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e80a14f302d393b2724",
    "number": 1654,
    "body": "Improve TestMultiRenderTarget2 test Demo",
    "head_branch": "kkk",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e81a14f302d393b2725",
    "number": 1653,
    "body": "This PR illustrates minimal changes to make the `com.jme3.renderer` package comply with the coding style proposed at issue #1098.\r\n\r\nMarked as \"draft\" because the PR includes 2 API changes that should be integrated separately, as discussed at #1098.",
    "head_branch": "sgold-style",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "apply preferred style to com.jme3.renderer (#1653)\n\n* coding style improvements\r\n + use curly braces where optional (4.1.1)\r\n + indent continuation lines by +8 (4.5.2)\r\n + no single space after an open paren or before a close paren (4.6.2)\r\n + no single space before an unary operator (4.6.2)\r\n + no single space before a square bracket (4.6.2)\r\n + single space before \"else\" (4.6.2 #2)\r\n + single space before an open curly brace (4.6.2 #3)\r\n + single space around a binary or ternary operator (4.6.2 #4)\r\n + single space after a comma (4.6.2 #5)\r\n\r\n* coding style improvements:  no wildcard imports (3.3.1)\r\n\r\n* RenderContext:  import ordering and spacing (3.3.3)\r\n\r\n* wrap lines that exceed 110 characters\r\n\r\n* single variable per declaration (4.8.2.1)\r\n\r\n* Caps:  mark fallthrough with comments (4.8.4.2)\r\n\r\n* RenderContext:  \"static\" before \"final\" (4.8.7)\r\n\r\n* constant names use CONSTANT_CASE (5.2.4) Note: **API change**\r\n\r\n* ignore acronyms in camel case (5.3) Note: **API change**\r\n\r\n* improve the javadoc style:\r\n + paragraphs separated by a blank line (7.1.2)\r\n + successive paragraphs start with \"<p>\" (7.1.2)\r\n + javadoc blocks begin with a summary fragment, not a sentence (7.2)\r\n + summary not in imperative mood (7.2)\r\n + summary capitalized and punctuated like a sentence (7.2)\r\n\r\n* Renderer:  re-order block tags (7.1.3)\r\n\r\n* indent block-tag continuations by at least +4 (7.1.3)\r\n\r\n* one blank line before the first block tag (7.1.3)\r\n\r\n* correct indentation of javadoc in 2 places (7.1.1)\r\n\r\n* TestIDList:  ignore acronyms in camel case (5.3)\r\n\r\n* revisit the javadoc style, reverting portions of e763ecb6\r\n\r\n* one annotation per line (4.8.5)\r\n\r\n* add required javadoc (7.3)\r\n\r\n* Camera:  blank line before the first block tag (7.1.2)\r\n\r\n* Camera:  revert an unintented change\r\n\r\n* Camera:  change \"Determines\" to \"Returns\" in 2 places\r\n\r\n* no trailing spaces\r\n\r\n* revert API changes\r\n\r\n* convert comment to javadoc and add missing javadoc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e82a14f302d393b2726",
    "number": 1652,
    "body": "An `Enhancement` to the new animation system : \r\n\r\n- Involves controlling the `blendWeight`, using a pie chart area and a pie chart sector.\r\n- Area of pie chart and sector area can be altered during runtime by altering both the radius and the sector angle respectively.",
    "head_branch": "newBLendSpaces",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e83a14f302d393b2727",
    "number": 1651,
    "body": "This PR corrects the offending javadoc.",
    "head_branch": "sgold-issue1648",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "jme3-ios:  correct some javadoc that was copy-pasted from jme3-android (#1651)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e84a14f302d393b2728",
    "number": 1650,
    "body": "A maintenance PR for the `JmeSurfaceView`.\r\n\r\n## New features introduced : \r\n\r\n1) Optionally  binding the jmeSurfaceView to the android activity life cycle, it helps in `pausing`, `resuming` game and openGL context, and also helps in releasing memory when the game is destroyed.\r\n\r\n2) Added new Listeners events : `OnLayoutDrawn()`, `OnRendererStarted()`.\r\n\r\n4) Added a `DestructionPolicy` flag, which uses a static game state `GameState` to determine whether to destroy the game with the activity on exiting the activity or to keep it for a second use.\r\nhttps://youtu.be/NBWyBzr_YXU\r\n\r\n5) Optimizations to the `ErrorDialog` includes : showing a full error stack and `Copy crash log` button.\r\n\r\n6) Added other flags such as : `showErrorDialog`, `exitOnEscPressed`, `showEscExitPrompt`.\r\n\r\n7) Added a getter field for gl_es version.\r\n\r\n8) Documentations and code optimizations following best practices.\r\n\r\n`NB : changes here are tested more than once on pre-existing jme3 android apps since jme3.4.0, and they won't likely affect user code.`\r\n\r\n### Screenshots : \r\n\r\n![Copy crash log feature](https://user-images.githubusercontent.com/60224159/141504356-a42c4c70-f224-4e33-9127-8791bf899901.png)\r\n\r\nI will try to make a video to preview these changes on a live android test.",
    "head_branch": "surfaceViewUpdate",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "SurfaceView Maintenance (#1650)\n\n* surfaceView Maintenance\r\n\r\n* fixed docs about destruction policy notes\r\n\r\n* Javadocs improvements\r\n\r\n* Javadocs improvements 2\r\n\r\n* Converted the enum class to a regular class\r\n\r\n* Constructors and constructors docs\r\n\r\n* Constructors docs\r\n\r\n* Fixed GameState constructor"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e85a14f302d393b2729",
    "number": 1647,
    "body": "this PR solve issue [#1640](https://github.com/jMonkeyEngine/jmonkeyengine/issues/1640)\r\n- remove unused import and extra empty lines from CartoonEdgeFilter\r\n- add test case for CartoonEdgeFilter save and load",
    "head_branch": "capdevon-issue1640",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "solve issue 1640 (CartoonEdgeFilter failing to override read() and write()) (#1647)\n\n* solve issue 1640 (CartoonEdgeFilter failing to override read() and\r\nwrite())\r\n\r\n- remove unused import and extra empty lines from CartoonEdgeFilter\r\n- add test case for CartoonEdgeFilter save and load\r\n\r\n* fix for Desktop Asset Manager creation while run test case for\r\nCartoonEdgeFilter\r\n\r\n* add javadoc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e86a14f302d393b272a",
    "number": 1646,
    "body": "Most of the javadoc in the Engine was written for old JDKs, resulting in warnings and errors when it is built using newer ones. Some sub-projects (such as \"jme3-lwjgl3\" and \"jme3-networking\") work around this by disabling doclint for JDK8+. Others, including \"jme3-core\", don't disable doclint.\r\n\r\nThis PR solves the 3 warnings and 7 errors that JDK 11 currently reports for jme3-core.",
    "head_branch": "sgold-javadoc-returns",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "jme3-core:  solve 10 javadoc diagnostics from JDK 11 (#1646)\n\n* solve 3 JDK 11 javadoc warnings \"@return has already been specified\"\r\n\r\n* solve 7 JDK 11 javadoc errors \"tag not supported...\""
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e87a14f302d393b272b",
    "number": 1645,
    "body": "![Uploading MRT.png…]()\r\nThis case originally seemed to be written by a retired predecessor to test delayed rendering, but its content is missing. I rewritten this case to help newbies use MRT technology outside of jme.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e88a14f302d393b272c",
    "number": 1643,
    "body": "This PR adds a `getMaxLineWidth()` method to the `Renderer` interface. It also adds a test to jme3-examples.",
    "head_branch": "sgold-issue1555",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "solve issue 1555 (add API to determine max line width) (#1643)\n\n* add glGetFloat() to the GL interface\r\n\r\n* add getMaxLineWidth() to the Renderer interface\r\n\r\n* add a simple test for getMaxLineWidth()\r\n\r\n* bugfix:  core profile overrides GL_ALIASED_LINE_WIDTH_RANGE\r\n\r\n* GLRenderer:  delete 2 debug printlns\r\n\r\n* TestLineWidth:  refactor the line-drawing code into a new method"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e89a14f302d393b272d",
    "number": 1642,
    "body": "The javadoc for the `TransformTrack` class is confusing because it implies that the track is a \"joint track\" and also that the target is a \"bone\". But the track's target might actually be a `Spatial`, and (in the new animation system) bones are called \"joints\".\r\n\r\nThe javadoc is also padded with low-value information such as \"a float array\" and \"of this track\".\r\n\r\nThe javadoc also fails to document some important details:\r\n+ which arguments can be null,\r\n+ which getter returns an internal array, and\r\n+ which setter creates an alias, \r\n\r\nThis PR attempts to remedy these defects. Aside from rearranging fields, only comments are affected.",
    "head_branch": "sgold-tt-comments",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "improve the TransformTrack javadoc (#1642)\n\n* TransformTrack:  don't imply that the target must be a bone\r\n\r\n* TransformTrack:  don't imply that the track must be a joint track\r\n\r\n* TransformTrack:  delete mentions of \"this track\" from the javadoc\r\n\r\n* TransformTrack:  do getters return internal arrays or copies?\r\n\r\n* TransformTrack:  consistent verb forms and better grammar in javadoc\r\n\r\n* TransformTrack:  no need to mention that \"times\" is a float array\r\n\r\n* TransformTrack:  mention that setTimes() creates an alias\r\n\r\n* TransformTrack:  document arguments that can be null\r\n\r\n* TransformTrack:  clearer descriptions of the class and its fields\r\n\r\n* \"frame\" -> \"keyframe\", in case it's unclear they're the same thing\r\n\r\n* document where argument length must be the same as times.length\r\n\r\n* TransformTrack:  summary fragments shouldn't form a complete sentence\r\n\r\n* TransformTrack:  capitalize and punctuate the summary fragments\r\n\r\n* TransformTrack:  indent block-tag continuation lines"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e8aa14f302d393b272e",
    "number": 1641,
    "body": "`jme3.anim.TransformTrack` throws generic runtime exceptions in 7 places. This PR changes those exceptions to more specific types, as recommended by Codacy and other static analysis tools.\r\n\r\nThis PR also checks for null arguments that would otherwise cause NPEs.\r\n\r\nIt also tries to make the exception messages clearer.",
    "head_branch": "sgold-ttexceptions",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "throw better exceptions in TransformTrack (#1641)\n\n* TransformTrack:  clarify 7 exception messages\r\n\r\n* TransformTrack:  check for null method arguments in 4 places\r\n\r\n* TransformTrack:  avoid throwing generic runtime exceptions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e8ba14f302d393b272f",
    "number": 1639,
    "body": "This addresses issue #1612, a `NullPointerException` that occurs while importing a model from an invalid glTF file.\r\n\r\nThe proposed fix detects that the model's `SkinningControl` isn't added to any `Spatial`. In that case, it logs a warning and adds the control to the model's root node. This allows the import to proceed. However, the resulting model may be incorrect.",
    "head_branch": "sgold-issue1612",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "GltfLoader:  warn if missing skinned spatial, fall back to root node (#1639)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e8ba14f302d393b2730",
    "number": 1638,
    "body": "This addresses the issue by returning `null` if the key is unknown.",
    "head_branch": "sgold-issue1596",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "GlfwKeyInput:  handle GLFW_KEY_UNKNOWN return by fromJmeKeyCode() (#1638)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e8ca14f302d393b2731",
    "number": 1637,
    "body": "I was contacted privately about improving the readability of SkyFactory.java .\r\n\r\nThis PR attempts to apply standard Java formatting as discussed in PR #1098. Specifically:\r\n + single space before { and surrounding ?:\r\n + no line longer than 110 characters\r\n + 4-space indentation\r\n + blank line between methods\r\n\r\nIt also cleans up some other readability issues:\r\n + remove some excess whitespace\r\n + delete 2 stray asterisks",
    "head_branch": "sgold-skyfactory",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "reformat source code of the SkyFactory class (#1637)\n\n* SkyFactory: add whitespace before left braces and around ?:\r\n\r\n* SkyFactory:  standardize the indentation\r\n\r\n* SkyFactory:  delete excess whitespace\r\n\r\n* SkyFactory:  delete 2 stray asterisks\r\n\r\n* SkyFactory:  break lines that exceed 110 characters\r\n\r\n* SkyFactory:  add a blank line between methods"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e8da14f302d393b2732",
    "number": 1636,
    "body": "Reducing the number of expected warnings increases the chances that new warnings will be noticed.",
    "head_branch": "sgold-unchecked",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "suppress some warnings about unchecked conversions (#1636)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e8ea14f302d393b2733",
    "number": 1635,
    "body": "Our best guidance for how to use `AnimMigrationUtils` is found in 5 example apps in jme3-examples. However, 2 of those apps ( `TestJaime` and `TestAttachmentsNode`) assign return values from `migrate()` to local variables, giving the impression that the model might be converted by creating a new `Spatial`. \r\n\r\nIn fact, `migrate()` converts models in place. Its return value is simply the argument. The assignments are redundant and also misleading, so this PR removes them from `TestJaime` and `TestAttachmentsNode`.",
    "head_branch": "sgold-ignore-migrate-retval",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "jme3-examples:  ignore return values from AnimMigrationUtils.migrate() (#1635)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e8fa14f302d393b2734",
    "number": 1633,
    "body": null,
    "head_branch": "wip/deferred-test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e90a14f302d393b2735",
    "number": 1632,
    "body": "Since Weights was deprecated in v3.4, it can now be deleted (for v3.5).",
    "head_branch": "sgold-issue-1520",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "jme3-core: delete the Weights class (issue #1520) (#1632)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e91a14f302d393b2736",
    "number": 1631,
    "body": "This PR solves issue #1630.",
    "head_branch": "sgold-issue-1630",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "TestBetterCharacter:  set initial camera location (issue #1630) (#1631)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e92a14f302d393b2737",
    "number": 1629,
    "body": "Resolves #1623 \r\n\r\nOkay, it was easy...",
    "head_branch": "issue-1623",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Support texture flipping for signed versions of RGTC 1 and 2 (#1629)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e93a14f302d393b2738",
    "number": 1627,
    "body": "Targeting issue #1622  ",
    "head_branch": "BinEnhancementAndroid",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "BufferedInputStream enhancement android (#1627)\n\n* Wrapped InputStream to BufferedInputStream\r\n\r\n* Copyright update\r\n\r\n* revert back to an input stream"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e94a14f302d393b2739",
    "number": 1626,
    "body": "The docs, since I unfortunately wrongly disrupted my master branch with some forks, no changes are made to the already committed files since the last PR, so you can continue revising from where you have stopped.",
    "head_branch": "newAnimationSystemDocs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e95a14f302d393b273a",
    "number": 1625,
    "body": "Color Targets to render a scene separated by R, G and B values. It leaves out the complexity of the original test that was rendering a scene deferred.\r\n\r\nAs discussed in #1361 \r\n\r\nEdit: Note to myself - I should remove the random color and disable the flyCam, so this can be asserted via [jme3-testing](https://github.com/MeFisto94/jme3-testing)",
    "head_branch": "wip/rework-mrt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Rework Test MultiRenderTarget to actually show how to use multiple (#1625)\n\n* Rework Test MultiRenderTarget to actually show how to use multiple Color Targets to render a scene separated by R, G and B values. It leaves out the complexity of the original test that was rendering a scene deferred.\r\n\r\n* TestMultiRenderTarget:  declare each field on a separate line\r\n\r\n* TestMultiRenderTarget:  additional documentation\r\n\r\n* TestMultiRenderTarget:  format to the preferred style\r\n\r\n* ExtractRGB.j3md:  add documentation\r\n\r\nCo-authored-by: Stephen Gold <sgold@sonic.net>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e96a14f302d393b273b",
    "number": 1621,
    "body": "Resolves #1619 \r\n\r\nThis PR adds support for BPTC compressed textures. Namely BC6 and BC7 compressed formats. Earlier, BC1-BC5 formats were already somewhat supported, that support is now enhanced a bit by making the DDS loader support them more widely. The file format varies widely, both DX9(?) style and the DX10 style files are supported for both BPTC and RGTC (BC4, BC5) compressed textures.\r\n\r\nThe BPTC was _mainlined_ in OpenGL 4.2. I put the constants to the EXT instead and check the capability from both the OpenGL version and the extension. There wasn't a file for GL4.2, so I didn't create one as I was little unsure how to integrate that. Therefore the GLExt houses these new constants. The version + extension checking I hope to make sure we utilize the feature even if the graphics driver doesn't give out all capabilities properly. Doesn't cost a thing...\r\n\r\nThere are some caveats. Support for flipping textures is limited. Not implemented at all for BC6 nor BC7. This is said to be extremely difficult but maybe not impossible. I can create a ticket for these flip issues.\r\n\r\nHere is a report of findings of these formats (I used Compressonator to create these, the file formats vary wildly it seems):\r\n\r\n- BC1 - Ok\r\n- BC2 - Ok\r\n- BC3 - Ok\r\n- BC4 - Image appears as red\r\n- BC4_S - Image appears as red, no flip support\r\n- BC5 - Image colors weird\r\n- BC5_S - Image colors weird,  no flip support\r\n- BC6 - Ok, no flip support\r\n- BC6_SF - Ok, no flip support\r\n- BC7 - Ok, no flip support\r\n",
    "head_branch": "issue-1619",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "solve issue 1619 (add texture-compression formats) (#1621)\n\n* Added the DXGI format constants\r\n\r\n* Support BPTC formats\r\n\r\n* Add the BPTC format capabilities\r\n\r\n* Add the BPTC formats\r\n\r\n* Try with resources\r\n\r\n* Fix BC6 bpp values\r\n\r\n* Properly support BC4 and BC5 file formats\r\n\r\n* Better error message\r\n\r\n* Also accept OpenGL 4.2 to support BPTC compression\r\n\r\n* Add getter for block size (for flipping etc)\r\n\r\n* Better constant names\r\n\r\n* Added load test for various texture formats stored in DDS files"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e97a14f302d393b273c",
    "number": 1620,
    "body": "The inline documentation for the `SettingsDialog` class is painfully out of date:\r\n+ It refers to non-existent classes `PropertiesDialog` and `GameSettings` that have (apparently) been renamed\r\n+ It refers to a \"properties file\" or \"properties.cfg\" for backing storage that has (apparently) been re-implemented using `java.util.prefs.Preferences`\r\n+ The javadoc is vague about what `SettingsDialog` is and does.\r\n+ The javadoc doesn't make it clear that it's for desktop only.\r\n\r\nThis PR attempts to remedy these defects. All changes are to comments only.",
    "head_branch": "sgold-gamesettings",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "SettingsDialog: update the javadoc and comments (#1620)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e97a14f302d393b273d",
    "number": 1618,
    "body": "-Added Java docs.\r\n-Added jme3 copyright licence.\r\n-Code improvements.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e98a14f302d393b273e",
    "number": 1617,
    "body": null,
    "head_branch": "sgold-issue-1614",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "NativeObjectManager: clear reference before deleting to avoid a race (#1617)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e99a14f302d393b273f",
    "number": 1616,
    "body": "# 1. Create the targets\r\nThere are two types of targets:\r\n\r\n### 1. Buffer target : render to a buffer\r\nTo create this target you need to specify a valid format\r\n\r\n```java\r\nFrameBufferBufferTarget depthTarget= FrameBufferTarget.newTarget(Format.Depth);\r\nFrameBufferBufferTarget colorTarget0= FrameBufferTarget.newTarget(Format.RGBA16F);\r\nFrameBufferBufferTarget colorTarget1= FrameBufferTarget.newTarget(Format.RGB8);\r\n```\r\n\r\n\r\n### 2. Texture target : render to a texture\r\nTo create this target you need a valid texture, you might use an existing texture, or create a new one:\r\n```java\r\nTexture2D myTexture = new Texture2D(512, 512, Format.RGBA8);\r\n```\r\nNote: we use this constructor to specify width,height and format, since those parameters are required by the renderer ( we cannot render on something of which we don't know sizes or format). You can also use the constructor that takes  `int numSamples`, if you want to render on a multisample texture. \r\n\r\nYou can then create a target\r\n```java\r\nFrameBufferTextureTarget colorTarget0= FrameBufferTarget.newTarget(myTexture);\r\n```\r\nNote: the type differs from the previous one ( FrameBufferTextureTarget vs FrameBufferBufferTarget) as you can guess, there are two overloaded newTarget methods one that takes Texture and outputs FrameBufferTextureTarget and one that takes Format and outputs FrameBufferBufferTarget .\r\n\r\n# 2. Attach everything to the framebuffer\r\n\r\nOnce you have your targets, you can attach them to the framebuffer\r\n\r\nFirstly we create the framebuffer\r\n```java \r\nFrameBuffer fb = new FrameBuffer(512, 512, 1);\r\n```\r\nNote: if we are using texture targets, they must be of the same size of the framebuffer and have the same number of samples (>1 for multisample textures), in this case we have 512x512 textures without multisample (=1 sample), that's why we are passing those params.\r\n\r\nThen we attach the targets\r\n\r\n```java\r\nfb.setDepthTarget(depthTarget);\r\nfb.addColorTarget(colorTarget);\r\n```\r\n\r\nWe can have many color targets, just attach all of them with addColorTarget in the correct order.\r\n\r\n\r\n# 3.  Additional settings\r\n1. Enable multi render target\r\n```java\r\nfb.setMultiTarget(true);\r\n```\r\nA MRT compatible shader will now be able to render on multiple color targets at the same time\r\n\r\n2. Render in srgb mode\r\n```java\r\nmyTexture.getImage().setColorSpace(ColorSpace.sRGB);\r\nfb.setSrgb(true);\r\n```\r\nEverything that is rendered to this framebuffer will be converted from linear to sRGB space.\r\n",
    "head_branch": "newfbapi",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e9aa14f302d393b2740",
    "number": 1613,
    "body": "Introducing buffered stream for the ImageIO. Otherwise it reads in very small chunks and this is not desirable. Lots of calls. This is a performance improvement.\r\n\r\nOld (starts with very small, and then proceeds with 512, maybe strides, dunno, variable read lengths):\r\n![image](https://user-images.githubusercontent.com/8344766/135659314-0cb2afc5-1170-4d53-8bc2-65018861874d.png)\r\n\r\nNew:\r\n![image](https://user-images.githubusercontent.com/8344766/135659333-874a48fd-cdbf-4735-a819-978c85b5b216.png)\r\n",
    "head_branch": "awtloader-optimization",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Wrap the input stream in BufferedInputStream (#1613)\n\n* Wrap the input stream in BufferedInputStream\r\n\r\n* Use BufferedInputStream on the AssetLoader load path\r\n\r\n* Update the copyright year"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e9ba14f302d393b2741",
    "number": 1610,
    "body": "in order to render the entire model without requiring the user to reposition the camera.\r\n\r\nRequested in this comment: https://github.com/jMonkeyEngine/jmonkeyengine/issues/1089#issuecomment-929926676",
    "head_branch": "Ali-RS-patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "TestGltfLoading: scale down Zophrac model (#1610)\n\nin order to render the entire model without requiring the user to reposition the camera."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e9ca14f302d393b2742",
    "number": 1608,
    "body": "The MorphTrack's current API has some inconsistencies with TransformTrack's API and some limitations as well (no ability to get/set the desired number of morph targets). This patch makes MorphTrack's API consistent with TransformTrack's API and adds a getter/setter for the number of morph targets.",
    "head_branch": "morphtrack-api-tweaks",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Improve MorphTrack API (#1608)\n\n* Improve MorphTrack API\r\n\r\nThe MorphTrack's current API has some inconsistencies with TransformTrack's API and some limitations as well (no ability to get/set the desired number of morph targets). This patch makes MorphTrack's API consistent with TransformTrack's API and adds a getter/setter for the number of morph targets.\r\n\r\n* Set weights with number of morph targets\r\n\r\n* Important invariants must hold between the number of frames, the number of weights, and the number of morph targets, so we're requiring setting the weights at the same time that the number of morph targets are set.\r\n* Javadoc tweaks\r\n\r\n* Fixed build error\r\n\r\n* Improved morph weight invariants checks\r\n\r\n* Removed superfluous assert.\r\n\r\n* Improved exception types & docs\r\n\r\n* Doc cleanup\r\n\r\n* MorphTrack: clarify the javadoc\r\n\r\n* TransformTrack: revert out-of-scope changes\r\n\r\n* reformat modified sourcecode (per issue 1098)\r\n\r\nCo-authored-by: Stephen Gold <sgold@sonic.net>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e9da14f302d393b2743",
    "number": 1607,
    "body": "On MacOS, with retina screen in use, the input cursor position is incorrect. As the window size is not equals to camera resolution.\r\n\r\nThis PR use glfwGetWindowContentScale to get the scaling factor on window resolution, and apply it to GlfwMouseInput#onCursorPos callback. So we have the correct cursor position on MacOS.\r\n\r\nFor more information, there are the links:\r\n\r\n* https://hub.jmonkeyengine.org/t/switching-to-lwjgl-3/41222/11\r\n* https://github.com/glfw/glfw/issues/845\r\n* https://www.glfw.org/docs/latest/window_guide.html#window_scale\r\n\r\nThis PR is also trying to fix part of issue #893\r\n",
    "head_branch": "feature-hidpi-support",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix incorrect input cursor position on MacOS with retina screen in use (#1607)\n\n* [M]Fix code error when checking UTF-8 data\r\n\r\nLet a 3 bytes UTF-8 data = [0xE4, 0x8A, 0xBC], when b = 0xE4 (1110 0100), it will be treated as 2 bytes.\r\n\r\nSee this part:\r\n\r\n```java\r\n            if (b < 0x80) {\r\n                // good\r\n            }\r\n            else if ((b & 0xC0) == 0xC0) {//   (0xE4 & 0xC0) == 0xC0     =====>  true\r\n                utf8State = UTF8_2BYTE;\r\n            }\r\n            else if ((b & 0xE0) == 0xE0) {//   (0xE4 & 0xE0) == 0xE0      =====>  true\r\n                utf8State = UTF8_3BYTE_1;\r\n            }\r\n            else {\r\n                utf8State = UTF8_ILLEGAL;\r\n            }\r\n```\r\n\r\n3 bytes UTF-8 data while always be treated as 2 bytes UTF-8 data.\r\n\r\nIt's better that always treat String data as UTF-8 now.\r\n\r\nsee https://hub.jmonkeyengine.org/t/code-error-on-checking-utf-8-data/43909\r\n\r\n* [M]Use StandardCharsets.UTF_8 instead of constant 'UTF8'\r\n\r\n* [Add]Add HiDPI support with lwjgl3-glfw\r\n\r\n* [M]Add a parameter UseRetinaFrameBuffer to enable/disable usage of full resolution framebuffers on Retina Display\r\n\r\n* [M]WindowContentScale is incorrect when glfw window is created, and we don't get any callback when it is changed.So just get it from time to time when mouse cursor is moved.\r\n\r\n* [M]Get the real frame buffer size at the 2nd frame after the context is restarted.\r\n\r\n* [M]Change default value of UseRetinaFrameBuffer to true.\r\n\r\n* [M]Add resolution check before reshape\r\n\r\nCo-authored-by: 闫茂源 <yanmaoyuan@baijiayun.com>\r\nCo-authored-by: 闫茂源 <yanmaoyuan@kuaikeguanjia.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e9ea14f302d393b2744",
    "number": 1605,
    "body": "To be technical, there were actually 2 bugs:\r\n + The number of virtual indices for `LineLoop` mode should've always been even, but it was odd.\r\n + The last virtual index for `LineLoop` mode should've been 0 (the wrap-around), but that 0 was misplaced.",
    "head_branch": "sgold-issue-1603",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "solve issue #1603 (incorrect VirtualIndexBuffer for a LineLoop mesh) (#1605)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240e9fa14f302d393b2745",
    "number": 1602,
    "body": "This PR renames method arguments in Java code, in order to clarify the purposes of those arguments. Mostly just better use of camelCase to indicate word boundaries.\r\n\r\nThere's plenty of room for further work along these lines.",
    "head_branch": "sgold-sept-args",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "rename some method arguments for clarity (#1602)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ea0a14f302d393b2746",
    "number": 1599,
    "body": "Adds a small note to the javadoc for Quaternion.lookAt, to explain that the method may produce invalid results under some circumstances.",
    "head_branch": "javadoc-quaternion-lookat",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add note to javadoc for Quaternion lookAt method (#1599)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ea1a14f302d393b2747",
    "number": 1598,
    "body": "This PR renames local variables in Java code, in order to clarify the purposes of those variables.\r\n\r\nThere's plenty of room for further work along these lines.",
    "head_branch": "sgold-local-vars",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "rename local variables (#1598)\n\n* AndroidConfigChooser: rename \"choosenConfig\" -> \"chosenConfig\"\r\n\r\n* rename \"glfwkey\" -> \"glfwKey\"\r\n\r\n* GltfLoader: rename \"znear\"/\"zfar\" -> \"zNear\"/\"zFar\"\r\n\r\n* LightProbeFactory: rename \"progres\" -> \"faceProgress\"\r\n\r\n* LwjglContext: rename \"vers\" -> \"version\"\r\n\r\n* LWJGLOpenVRMouseManager: rename \"Xamount\"/\"Yamount\"\r\n\r\n* MathUtils: rename \"numer\"/\"denom\" -> \"numerator\"/\"denominator\"\r\n\r\n* PerturbFilter: rename \"noisex\"/\"noisey\"/\"perturbx\"/\"perturby\"\r\n\r\n* PFMLoader: rename \"needEndienFlip\" -> \"needEndianFlip\"\r\n\r\n* SpotLight: rename \"dsqr\" -> \"dSquared\"\r\n\r\n* TestBatchNode: rename \"boxshape4\" -> \"boxShape4\"\r\n\r\n* Utils: rename \"errname\" -> \"errorName\""
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ea2a14f302d393b2748",
    "number": 1594,
    "body": "This PR improves the readability of some comments in the source code, mostly in Java source. It corrects a few typos, but mostly it adds hyphens or blanks or camelCase to emphasize word boundaries.\r\n\r\nBecause it affects only javadoc and inline comments, this is a low-risk PR.",
    "head_branch": "sgold-comments-august",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "clarify comments (#1594)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ea3a14f302d393b2749",
    "number": 1593,
    "body": "Okay, finally something that it is worthy in my mind; recovering from audio failure! The implementation is based on: http://forum.lwjgl.org/index.php?topic=7081.msg37006#msg37006. Tested on Linux & Windows and seems to work.\r\n\r\nTo try it out:\r\n\r\n- Use i.e. headphones when launching a jME app\r\n- Disconnect headphones\r\n\r\nNew behavior in this case:\r\n\r\n- The disconnection is detected fairly soon, audio renderer is re-created, creates some noise on the log\r\n- Lost bytes in the buffer are not recovered :(\r\n- New audio goes to the new default device\r\n\r\nOld behavior in this case:\r\n\r\n- No sound, ever, again\r\n- Our app plays background tunes -> CPU spikes permanently as we start feeding audio to void\r\n- Behavior of disconnected device is documented here: https://javadoc.lwjgl.org/org/lwjgl/openal/EXTDisconnect.html\r\n- It kinda pretends to work\r\n\r\nWhat this does **not** do:\r\n\r\n- Replugging headphones doesn't change audio back to headphones -> we wont react to changes in default devices, only disconnected/broken\r\n- I did try to also do this, but I couldn't detect this situation. At least with the headphones, the headphones was always the default whether they were plugged in or not. Probably works if the default device is changed by the user for real. But since the automatic headphone thing doesn't work, I don't see this as a must have (or a regular use case).",
    "head_branch": "audio-disconnect",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Restart audio context if current device is \"disconnected\" (#1593)\n\n* Restart audio context if current device is \"disconnected\"\r\n\r\n* Better method name"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ea4a14f302d393b274a",
    "number": 1592,
    "body": "This optimizes the VideoRecorderAppState video file writing.\r\n\r\n- The old version writes really small chunks, 4 bytes, even 1 byte chunks at times, PER FRAME!\r\n- The new version uses buffer (8192 bytes) to write bigger chunks\r\n- In reality much of the data written at a time (the individual frames) is a bigger chunk than 8192 -> written at one go\r\n- Implements AutoCloseable, in my mind this is logical. Like writing a ZIP file etc. similar API\r\n\r\nBasically this improves performance by eliminating some of the system calls.\r\n\r\nNew:\r\n![image](https://user-images.githubusercontent.com/8344766/127681754-2900571f-2f1f-4f85-ab85-05f8124c4548.png)\r\n\r\nOld:\r\n![image](https://user-images.githubusercontent.com/8344766/127681992-144d4070-9f78-4e53-87ee-87f9db9db955.png)\r\n",
    "head_branch": "buffered-mjpeg-file-writer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Buffered mjpeg file writer (#1592)\n\n* Write buffered\r\n\r\n* IOException\r\n\r\n* Don't force flush, maintain position info manually\r\n\r\n* Optimize array initial sizes, usually image is bigger than the buffer so write as one chunk"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ea5a14f302d393b274b",
    "number": 1591,
    "body": "Heh, ok, this is pure cleanup type of thing and adds a bunch of... nothing. Maybe not everybody on board with this.... \r\n\r\n- Uses NIO, should be a bit more lightweight and unifies the JAR handling (although it is still an exception of sorts)\r\n- Removes the complexity of using contains on an unsorted list in a loop\r\n- Removes the use of Vector collection type (obsolete)\r\n- Adds the use of generics\r\n- Uses thread pool for launching the apps instead of always spawning a new thread\r\n\r\nFor all good and bad, the TestChooser should function as always with this exception:\r\n\r\n- It shows up on OS taskbar (I at least easily lose the window)\r\n- It has minimize/maximize window button ",
    "head_branch": "testChooser",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Test chooser (#1591)\n\n* Use NIO, add generics, remove Vector usage, use Threadpool\r\n\r\n* Use jFrame to be visible in the task bar\r\n\r\n* Simplify the filename validation\r\n\r\n* Evaluate the file name first for performance reasons\r\n\r\n* Use Class<?> instead of Class\r\n\r\n* Organize imports so that java.util is not needed"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ea6a14f302d393b274c",
    "number": 1589,
    "body": "This PR renames local variables, method arguments, private fields, and such in the Java code. In most cases the old names contained typos or spelling errors. A few names violated coding conventions (see issue #1587, for instance) or were abbreviated to the brink of becoming unintelligible.\r\n\r\nThere's plenty of room for further work along these lines.",
    "head_branch": "sgold-renames",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "renaming Java identifiers (#1589)\n\n* Armature: rename private field and method\r\n\r\n* AssetLinkNode: rename local variable \"childs\"\r\n\r\n* BloomFilter: rename 3 private fields\r\n\r\n* ColorRGBA: rename 2 method arguments\r\n\r\n* Converter: rename local variable \"indicess\"\r\n\r\n* CurveAndSurfaceMath: rename 2 local variables\r\n\r\n* DebugShapeFactory: rename local variable \"hullIndicies\"\r\n\r\n* DefaultLightFilter: rename private field and method argument\r\n\r\n* FbxMesh: rename 5 local variables\r\n\r\n* FbxSkin: rename 2 local variables\r\n\r\n* IrradianceSphericalHarmonicsGenerator: rename local variable \"shCoeffs\"\r\n\r\n* JmeFormatter: rename private field \"lineSeperator\"\r\n\r\n* LightProbe: rename private field and method argument\r\n\r\n* LightScatteringFilter: rename private field \"adaptative\"\r\n\r\n* LwjglContext: rename local variable \"choosenDevices\"\r\n\r\n* MaterialLoader: rename private field \"shinines\"\r\n\r\n* MeshLoader: rename method argument \"vertexcount\"\r\n\r\n* MikktspaceTangentGenerator: rename 2 fields in a private class\r\n\r\n* MotionPath: rename 2 private methods (issue #1587)\r\n\r\n* NativeLibraryLoader: rename local variable \"extactionDirectory\"\r\n\r\n* PhysicsJoint: rename method argument \"collisionBetweenLinkedBodys\"\r\n\r\n* PhysicsSpace: rename local variable \"clistsize\"\r\n\r\n* RenderManager: rename private field \"handleTranlucentBucket\"\r\n\r\n* RollingTheMonkey: rename local variable \"ammount\"\r\n\r\n* SceneLoader: rename private field \"alayerMap\"\r\n\r\n* ShaderGenerator: rename method parameter \"nodeDecalarationSource\"\r\n\r\n* Skeleton: rename private field \"skinningMatrixes\"\r\n\r\n* TangentBinormalGenerator: rename local variable \"indiceMap\"\r\n\r\n* TestChooser: rename method argument \"pckgname\"\r\n\r\n* TestContextSwitching: rename private field \"availabePlatforms\"\r\n\r\n* TestFancyCar: rename local variable \"chasis\"\r\n\r\n* TestParallax(PBR): rename private field \"parallaxHeigh\"\r\n\r\n* Utils: rename local variable \"errname\"\r\n\r\n* Vector4f: rename method argument \"changeAmnt\"\r\n\r\n* VideoRecorderAppState: rename private field \"isInitilized\"\r\n\r\n* jme3-vr: rename private field \"viewmanager\"\r\n\r\n* WorldOfInception: rename local variable \"strb\"\r\n\r\n* correct 2 compile-time errors\r\n\r\n* jme3-core: don't replace \"matrixes\" with \"matrices\""
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ea7a14f302d393b274d",
    "number": 1588,
    "body": "Testing to upgrade to newer build tools",
    "head_branch": "gradle6",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Upgrade Gradle to 6.9 (#1588)\n\n* Upgrade Gradle to 6.9\r\n\r\n* Remove obsolete repo\r\n\r\n* Remove deprecated keywords\r\n\r\n* Use the annotations\r\n\r\n* Remove deprecated keywords\r\n\r\n* Expose some dependencies\r\n\r\n* Remove deprecated\r\n\r\n* Remove deprecated\r\n\r\n* Expose Nifty, jBullet and LWJGL 2\r\n\r\n* Expose LWJGL 3, fix VR project dependencies\r\n\r\n* Expose the VR libraries\r\n\r\n* Remove deprecated\r\n\r\n* Remove obsolete bintray workarounds and deprecated maven plugin\r\n\r\n* Set the default duplicates strategy to get rid of warnings\r\n\r\n* Set the annotations compileOnly\r\n\r\n* Remove trailing whitespace\r\n\r\n* Expose more dependencies\r\n\r\n* Bump JNA version\r\n\r\n* Bump Android tools gradle\r\n\r\n* Fix the examples mainClass\r\n\r\n* Use mainClassName variable and remove the obsolete mainClass variable"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ea8a14f302d393b274e",
    "number": 1586,
    "body": "",
    "head_branch": "sgold-issue-1583",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix for issue #1583 (Torus serialization bug) (#1586)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ea9a14f302d393b274f",
    "number": 1585,
    "body": "",
    "head_branch": "sgold-iss-1582",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix for issue #1582 (ShaderNodeVariable serialization bug) (#1585)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240eaaa14f302d393b2750",
    "number": 1584,
    "body": "I made this PR separate from #1581 because these corrections are slightly more risky than comments.",
    "head_branch": "sgold-msg-typos",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "correct typos logger/exception messages (#1584)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240eaba14f302d393b2751",
    "number": 1581,
    "body": "This is mostly for typos in Java comments.",
    "head_branch": "sgold-shader-typos",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "correct errors in documentation (#1581)\n\n* correct typos in comments\r\n\r\n* correct typos in Gradle variables\r\n\r\n* correct typos in Java comments and Javadoc\r\n\r\n* correct typos in non-Java comments\r\n\r\n* Skeleton.java: don't replace \"matrixes\" with \"matrices\""
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240eaca14f302d393b2752",
    "number": 1580,
    "body": "...the developer probably want it to be named as its application",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240eada14f302d393b2753",
    "number": 1577,
    "body": "",
    "head_branch": "android-locator-support-path-starting-with-slash",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "support assets paths starting with / (#1577)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240eaea14f302d393b2754",
    "number": 1575,
    "body": "using https://github.com/MeFisto94/jme3-testing that runs functional tests on a software renderer to validate rendering works correctly.\r\n\r\n## Scope\r\nThis is only the tracking PR about the Github Actions integration of this feature. Anything related to the feature itself may happen on the hub topic https://hub.jmonkeyengine.org/t/help-testing-jmonkeyengine/42856 or the jme3-testing repository.\r\n\r\nNote: Currently when merging the PR, none of the tests will work, because they all time out, which means app.stop isn't called correctly. This used to work on an older revision of the engine, maybe context changes have caused the issue, I will investigate it, but it's unrelated to this PR basically.\r\n\r\n## Security\r\nIn theory jme3-testing and the buildenvs should use specific commit hashes to protect against their maintainers introducing evil code (or host them into the main organization, also from the aspect of it not disappearing), since this is a dedicated workflow, unrelated to releasing binaries or something, only the second aspect may be worth considering.\r\n\r\nI'll move this PR in draft state until the issues in jme3-testing have been solved, feel free to comment on both this and jme3-testing in general. \r\n\r\nEdit: Feel free to try jme3-testing locally, for me it almost works (`testSimpleBlueCube10sDebugStats` fails for lwjgl2), so it's something with the headless environment again.",
    "head_branch": "features/jme3-testing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240eafa14f302d393b2755",
    "number": 1574,
    "body": "Instead of issuing a warning, a runtime exception is thrown, in order to avoid subsequent errors that might confuse diagnosis. ",
    "head_branch": "sgold-issue-37",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "test and fix for issue #37 (warn when >16 textures are used) (#1574)\n\n* testcase for issue #37 (warn when more than 16 textures are used)\r\n\r\n* address issue #37 (warn when more than 16 textures are used)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240eb0a14f302d393b2756",
    "number": 1573,
    "body": "This pull request is to solve the issue #1349.\r\nAccording to the definition of each axis and the process to get x, y, and z of Spherical coordinates from the method cartesianZToSpherical, the method sphericalToCartesianZ should be modified.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix the issue #1349 (#1573)\n\n* Fix the issue #1349\r\n\r\n* Unify the definition of y and z in the Spherical coordinates that using positive Z as up."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240eb0a14f302d393b2757",
    "number": 1572,
    "body": "Still trying to understand how fragments work, advice would be nice.\r\nAttempt at patching issue #1284 ",
    "head_branch": "grayFix2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240eb2a14f302d393b2758",
    "number": 1571,
    "body": "Attempt at fixing issue #1284 .\r\nStill trying to understand how these fragments work however; advice would be appreciated.",
    "head_branch": "grayscaleFix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240eb3a14f302d393b2759",
    "number": 1570,
    "body": "For the physics tests, I've verified that reverting the related commits indeed flags the tests as failed.",
    "head_branch": "wip/issue1290",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Convert a few manual tests to unit tests (#1570)\n\n* Towards #1290 automate some bullet examples into unit tests.\r\n\r\n* Towards #1290 automate one core issue regression test\r\n\r\n* Towards #1290 Automate a few more tests/examples\r\n\r\n* resolve commit conflicts in 2 build.gradle files\r\n\r\nCo-authored-by: Stephen Gold <sgold@sonic.net>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240eb3a14f302d393b275a",
    "number": 1568,
    "body": "Testcases to verify patch for issue #1537",
    "head_branch": "testCaseCollision",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240eb4a14f302d393b275b",
    "number": 1567,
    "body": "This test is to increase the test coverage, and the feature we tested was the distance method in the Line class.\r\nWe used a dot product method, and a cross product method to find the distance, which had the same results. However, we found out an issue that the jMonkey’s output for distance was different, and should be incorrect according to how the actual math works. The test case was intended to give a failed test because the calculations for the distance seemed to not match the actual calculations.\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240eb5a14f302d393b275c",
    "number": 1565,
    "body": "This pull request contains a fix for #1564.\r\nIt also added a minor improvement in the Uniform class and a UnitTest. ",
    "head_branch": "issue1564",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Test and solution for issue #1564 (setting Material parameter of type IntArray) (#1565)\n\n* Fixes IntArray material parameters (#1564)\r\n\r\n* Improved array parameter handling in Uniforms (#1564)\r\n\r\n* Added UnifortTest (#1564)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240eb6a14f302d393b275d",
    "number": 1561,
    "body": "Resolves issue #37 ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240eb7a14f302d393b275e",
    "number": 1560,
    "body": "If you run the `TestAttachDriver` app (in jme3-examples) and press the spacebar twice, a diagnostic is issued:\r\n```text\r\nMay 15, 2021 9:53:30 AM com.jme3.bullet.PhysicsSpace removeJoint\r\nWARNING: Joint com.jme3.bullet.joints.SliderJoint@799f10e1 does not exist in PhysicsSpace, cannot remove.\r\n```\r\n\r\nThe diagnostic indicates a bug in the app. This PR fixes the bug.",
    "head_branch": "sgold-tad",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "TestAttachDriver: don't remove the SliderJoint more than once (#1560)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240eb8a14f302d393b275f",
    "number": 1556,
    "body": "+ Removed uses of `setLineWidth()` from `TestDebugShapes` and `TestMousePick`.\r\n+ Privatized methods with no uses outside those classes.\r\n+ Corrected misleading comments and updated the copyright dates.\r\n",
    "head_branch": "sgold-issue-1551",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "resolve issue #1551 (OpenGLExceptions in jme3-examples) (#1556)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240eb9a14f302d393b2760",
    "number": 1553,
    "body": "See: \r\nhttps://hub.jmonkeyengine.org/t/morphcontrol-question/44599?u=ali_rs & https://github.com/jMonkeyEngine/jmonkeyengine/issues/1548#issuecomment-839956156",
    "head_branch": "fix-morph-control",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "MorphControl: serialize target list & add minor cleanups (#1553)\n\n* MorphControl: move target locating out of update loop into setSpatial() & add minor cleanups.\r\n\r\n* Serialize target list\r\n\r\n* Add javadoc\r\n\r\n* Fix comment."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ebaa14f302d393b2761",
    "number": 1550,
    "body": "Much of the javadoc for the `Matrix4f` class is ambiguous, confusing, or downright incorrect. This PR attempts to specify, clarify, and correct it.",
    "head_branch": "sgold-matrix4f",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Matrix4f: improve the javadoc (#1550)\n\n* Matrix4f: improve javadoc (1st pass)\r\n\r\n* Matrix4f: improve javadoc (2nd pass)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ebba14f302d393b2762",
    "number": 1549,
    "body": "",
    "head_branch": "sgold-issue-1458",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "test case and solution for issue #1548 (MorphControl doesn't override methods)  (#1549)\n\n* TestMorph: test cloning and serialization\r\n\r\n* solve issue #1548 (MorphControl doesn't override methods)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ebca14f302d393b2763",
    "number": 1547,
    "body": "I didn't figure out how to remove the horizontal slider. I simply disabled it by turning `sldBarStateChanged()` into a no-op. That fixed the `UnsupportedOperationException`.\r\n\r\nTo fix the `IllegalStateException`, I configured the `AudioNode` to be in ambient mode instead of positional mode.",
    "head_branch": "sgold-issue-1544",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "solve issue #1544 (diagnostic messages from TestMusicPlayer) (#1547)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ebda14f302d393b2764",
    "number": 1546,
    "body": "The new wiki uses different URLs than the old one, of course. But even with the correct URL (https://wiki.jmonkeyengine.org/docs/3.4/tutorials/_images/beginner/beginner-physics.png), it sends a 403 to Java's `URLConnection.getInputStream()`. A security feature of some kind?\r\n\r\nSo I decided to pick on github.com instead.\r\n\r\nAlso I found the inline comments confusing, so I re-phrased them.",
    "head_branch": "sgold-issue-1543",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "solve issue #1543 (crash in TestManyLocators) (#1546)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ebea14f302d393b2765",
    "number": 1545,
    "body": "Several things were broken here.\r\n\r\nIt was inappropriate for `TestAppStates` to use a default screen controller with \"HelloJme.xml\", because of course that screen controller does not implement the \"quit()\" method referenced in \"HelloJme.xml\". Also, \"HelloJme.xml\" specifies that the controller for its \"start\" screen should be an instance of `TestNiftyGui`. Furthermore, the \"end\" screen of \"HelloJme.xml\" is empty and therefore useless.\r\n\r\nIn order for `TestAppStates` and `TestNiftyGui` to cleanly share \"HelloJme.xml\", I added a class `StartScreenController` to serve as a screen controller for both apps.\r\n\r\nI also deleted the \"end\" screen and re-purposed `quit()` to cleanly terminate the application.",
    "head_branch": "sgold-issue-1542",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "solve issue #1542 (crash in TestAppStates) (#1545)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ebfa14f302d393b2766",
    "number": 1541,
    "body": "I uploaded jbullet.jar and stack-alloc.jar to the Maven Central Repository so physics apps built using Gradle (or Maven) no longer need to keep local copies of those JARs.\r\n\r\nThis PR deletes the local copies from the JMonkeyEngine repo and modifies the jme3-jbullet dependencies accordingly.",
    "head_branch": "sgold-jbullet-pom",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "correct the dependencies of jme3-jbullet (#1541)\n\n* jme3-jbullet: upgrade vecmath to v1.5.2\r\n\r\n* delete jbullet.jar & stack-alloc.jar, get them from MavenCentral instead"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ec0a14f302d393b2767",
    "number": 1540,
    "body": "Made minor documentation changes to increase the clarity when describing the purpose and use of the java file and its classes. This is a quick first change before I move back towards attempting to finish the ArrayList sort to PriorityQueue replacement.",
    "head_branch": "Clarify_Documentation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "LodGenerator.java: improve the javadoc (#1540)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ec0a14f302d393b2768",
    "number": 1539,
    "body": "Revived Broken android examples, through a runnable android module, to run : \r\n<ul>\r\n<li>Load the module ```jme3-android-tests``` inside android studio</li>\r\n<li>Change/Update/Downgrade dependencies & run on emulator or a physical device</li>\r\n</ul>\r\n\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ec1a14f302d393b2769",
    "number": 1537,
    "body": "This solves a bug seen in `TestJaime` where anim events in the `Cinematic` were occasionally suppressed. This happened when 2 events were scheduled to play consecutively on the same layer and the later event's `onStart()` was invoked before the earlier event's `onStop()`. In this situation `onStop()` would remove the wrong action from the layer.",
    "head_branch": "sgold-fix-animevent",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "AnimEvent: solve bug where onStop() kills prior event on the same layer (#1537)\n\n* AnimEvent: solve bug where onStop() kills prior event on the same layer\r\n\r\n* AnimEvent: for clarity, use getAction() instead of action()\r\n\r\n* AnimComposer: keep track of the manager for each layer\r\n\r\n* AnimEvent: keep track of which event is managing each layer\r\n\r\n* TestJaime: reset the model position each time the cinematic starts"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ec2a14f302d393b276a",
    "number": 1536,
    "body": "Based on a proposal by Pavl_G at the Forum: https://hub.jmonkeyengine.org/t/question-about-new-animation-system-part-3-engine-v-3-4-0-beta1/44546/22\r\n\r\nThis makes `getAttachmentsNode()` and `getOffsetTransform()` accessible to subclasses. Currently these methods are used only in `SkinningControl` and `Armature` respectively.",
    "head_branch": "sgold-joint-protected",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Joint: make 2 methods accessible to subclasses (#1536)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ec3a14f302d393b276b",
    "number": 1535,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "AppProfiler: Fixed typo in comment (#1535)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ec4a14f302d393b276c",
    "number": 1534,
    "body": "The proposed fix adds a `normalizeLocal()` step and improves the readability of `ArmatureDebugAppState`.",
    "head_branch": "sgold-issue-1533",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix issue #1533 (failed assertion in TestAnimMigration) (#1534)\n\n* fix issue #1533 (failed assertion in TestAnimMigration)\r\n\r\n* ArmatureDebugAppState: restore deleted whitespace"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ec5a14f302d393b276d",
    "number": 1532,
    "body": "As noted [at the Forum](https://hub.jmonkeyengine.org/t/question-about-new-animation-system-part-3-engine-v-3-4-0-beta1/44546/9), it's easy to create a `TransformTrack` without any translations or rotations. Since there are null checks in `getDataAtTime()`, such tracks can be useful. However, the `getTranslations()` and `getRotations()` methods lack null checks, leading to NPEs when applied to such tracks.\r\n\r\nThis PR would avoid NPEs on tracks without any translations or rotations.",
    "head_branch": "sgold-nullcheck-transformtrack",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "TransformTrack: add null checks to getTranslations() and getRotations() (#1532)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ec6a14f302d393b276e",
    "number": 1531,
    "body": "Even though Nehon's documentation made it clear that the no-arg constructor for `TransformTrack` was ONLY for serialization, he used it anyway in the Ogre XML loader. Owing to this contradiction, PR #1228 skipped this class.\r\n\r\nAfter studying `TransformTrack` more closely, I'm convinced that the no-arg constructor is needed ONLY for serialization. In the spirit of PR #1228, this PR would protect it against accidental misuse.\r\n\r\nForum discussion at https://hub.jmonkeyengine.org/t/question-about-new-animation-system-part-3-engine-v-3-4-0-beta1/44546/9",
    "head_branch": "sgold-noarg-transformtrack",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "TransformTrack: protect the no-arg constructor (#1531)\n\n* TransformTrack: protect the no-arg constructor\r\n\r\n* TransformTrack: avoid NPE when \"times\" is null in setKeyframes()"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ec7a14f302d393b276f",
    "number": 1530,
    "body": "We want to be able to distinguish ARM Macs from X86/PPC Macs so that, as soon as LWJGL v3.3 released, JME can also support such platforms.",
    "head_branch": "sgold-issue-1528",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "address issue #1528 (distinguish ARM macOS/Windows from other platforms) (#1530)\n\n* com.jme3.system: distinguish ARM Macs from X86/PPC Macs\r\n\r\n* com.jme3.system: distinguish Windows-on-ARM from wintel platforms"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ec8a14f302d393b2770",
    "number": 1527,
    "body": "This attempts to avoid the `NullPointerException` reported by Pavl_G at the Forum:\r\n   https://hub.jmonkeyengine.org/t/engine-v3-4-0-beta-testing/44507/9\r\n\r\nSince this appears to be related to #1408, I'd appreciate a review from @riccardobl\r\n\r\nStack trace from the reported crash:\r\n```text\r\nSEVERE: Uncaught exception thrown in Thread[jME3 Main,5,main]\r\njava.lang.NullPointerException\r\n\tat com.jme3.renderer.opengl.GLRenderer.clearVertexAttribs(GLRenderer.java:2855)\r\n\tat com.jme3.renderer.opengl.GLRenderer.renderMeshDefault(GLRenderer.java:3188)\r\n\tat com.jme3.renderer.opengl.GLRenderer.renderMesh(GLRenderer.java:3219)\r\n\tat com.jme3.material.logic.DefaultTechniqueDefLogic.renderMeshFromGeometry(DefaultTechniqueDefLogic.java:72)\r\n\tat com.jme3.material.logic.SinglePassAndImageBasedLightingLogic.render(SinglePassAndImageBasedLightingLogic.java:268)\r\n\tat com.jme3.material.Technique.render(Technique.java:167)\r\n\tat com.jme3.material.Material.render(Material.java:1033)\r\n\tat com.jme3.renderer.RenderManager.renderGeometry(RenderManager.java:634)\r\n\tat com.jme3.renderer.queue.RenderQueue.renderGeometryList(RenderQueue.java:273)\r\n\tat com.jme3.renderer.queue.RenderQueue.renderQueue(RenderQueue.java:318)\r\n\tat com.jme3.renderer.RenderManager.renderViewPortQueues(RenderManager.java:918)\r\n\tat com.jme3.renderer.RenderManager.flushQueue(RenderManager.java:799)\r\n\tat com.jme3.renderer.RenderManager.renderViewPort(RenderManager.java:1128)\r\n\tat com.jme3.renderer.RenderManager.render(RenderManager.java:1180)\r\n\tat com.jme3.app.SimpleApplication.update(SimpleApplication.java:273)\r\n\tat com.jme3.system.lwjgl.LwjglWindow.runLoop(LwjglWindow.java:537)\r\n\tat com.jme3.system.lwjgl.LwjglWindow.run(LwjglWindow.java:624)\r\n\tat com.jme3.system.lwjgl.LwjglWindow.create(LwjglWindow.java:473)\r\n\tat com.jme3.app.LegacyApplication.start(LegacyApplication.java:491)\r\n```",
    "head_branch": "sgold-clear-attribs-npe",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "GLRenderer: avoid NPE reported by Pavl_G (#1527)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ec9a14f302d393b2771",
    "number": 1526,
    "body": "https://hub.jmonkeyengine.org/t/white-screen-on-context-restart/43866/28?u=markil3\r\nNow most of the code that goes into initializing the renderer is now repeated every time. This is accomplished by moving most of the logic from the initContextFirstTime() methods into a new initContext(boolean) method. On the first boot, the code ultimately executes the same way. However, every context restart calls initContext(false) now as well. This will repeat all the code from before save for the creation of the GL and Renderer instances as well as input initialization.\r\n\r\nAt the moment, SimpleApplication now has a new default binding for the TAB key that restarts the context. This is to make it easier to test various examples, and I plan on removing it before we actually merge it.\r\n\r\nThis should solve issues #844 and #1445. This commit should also replace PR #1524.",
    "head_branch": "contextRestart",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Refactors the context restart code. (#1526)\n\n* Refactors the context restart code.\r\n\r\nNow most of the code that goes into initializing the renderer\r\n\r\n* Fixed a misleading comment in lwjgl3's LwjglWindow\r\n\r\n* Adds documentation to the LwjglContext methods.\r\n\r\n* Cleans up the code and comments.\r\n\r\n* Moves the renderer initialization for jme3-lwjgl to just the first run.\r\n\r\nApparently, this seems to fix the issue of LWJGL not rendering to the new display. However, trying to apply this fix to jme3-lwjgl3 actually creates the problem there."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ecaa14f302d393b2772",
    "number": 1524,
    "body": "As discussed in https://hub.jmonkeyengine.org/t/white-screen-on-context-restart/43866, this should fix a problem with gamma correction not being applied after a context restart.",
    "head_branch": "gammaCorrectionFix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ecba14f302d393b2773",
    "number": 1523,
    "body": "see issue #1520",
    "head_branch": "sgold-weights",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "deprecate com.jme3.anim.Weights - see issue #1520 (#1523)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ecca14f302d393b2774",
    "number": 1522,
    "body": "",
    "head_branch": "sgold-doclint-jbullet",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "resolve javadoc warnings in the jme3-jbullet library (#1522)\n\n* jme3-jbullet: resolve javadoc warnings\r\n\r\n* jme3-jbullet/build.gradle: enable doclint"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ecda14f302d393b2775",
    "number": 1521,
    "body": "I left the `Weights` class unchanged on the assumption that it will soon be deleted.",
    "head_branch": "sgold-anim-javadoc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "jme3-core: add missing javadoc to the com.jme3.anim package (#1521)\n\n* jme3-core: add missing javadoc to the com.jme3.anim package\r\n\r\n* MorphControl: grammar correction in javadoc\r\n\r\n* TransformTrack: note aliasing in javadoc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ecea14f302d393b2776",
    "number": 1519,
    "body": "",
    "head_branch": "sgold-doclint-effects",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "resolve javadoc warnings in the jme3-effects library (#1519)\n\n* jme3-effects: resolve javadoc warnings\r\n\r\n* jme3-effects/build.gradle: enable doclint"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ecfa14f302d393b2777",
    "number": 1518,
    "body": "* Made the example runnable via Android Studio.\r\n* Created new Build files(that was missing) :\r\n          *  settings.gradle\r\n          *  gradlew.bat\r\n          *  gradle.properties\r\n* One more internal code fix.\r\n          \r\n## To Run the example : \r\n```Android Studio``` - > ```Open Project``` -> ```select ``` -> ```jme3-android-tests``` folder(root module)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ed0a14f302d393b2778",
    "number": 1517,
    "body": "Forum post: https://hub.jmonkeyengine.org/t/fxaa-filter-removes-transparency/42577/4",
    "head_branch": "fxaa-patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "FXAA.frag: read alpha value from texture instead of passing constant 1. (#1517)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ed1a14f302d393b2779",
    "number": 1516,
    "body": "Many JME loggers are declared package-private (with no access modifier). Probably these should all be `public`, `protected`, or `private`. Of these choices, `public` seems the safest.\r\n\r\nIn a few cases, I added the `final` modifier as well.",
    "head_branch": "sgold-logger",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "privatize package-private loggers (#1516)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ed2a14f302d393b277a",
    "number": 1515,
    "body": "In the course of wrapping this up, I fixed a couple bugs in the very new `AnimEvent` class.",
    "head_branch": "sgold-issue-1452",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "resolve issue #1452 (convert jme3-examples to new system) (#1515)\n\n* AnimEvent: set initial duration in constructor\r\n\r\n* TestCinematic: complete the conversion to new animation system\r\n\r\n* bugfix: assertion failures in AnimEvent\r\n\r\n* convert TestJaime to the new animation system"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ed2a14f302d393b277b",
    "number": 1513,
    "body": "I believe the function was broken 5 years ago to \"satisfy a Mac problem?\" - it does not spawn a new asynchronous thread or obey the waitFor parameter as was originally intended.\r\n\r\nI was not sure what to do, I don't have a Mac, so I put in a conditional - probably someone who has mac hardware could fix this the right case for the single use case.",
    "head_branch": "v3.3.2-stable-thread-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ed3a14f302d393b277c",
    "number": 1512,
    "body": "Transparent unshaded materials had an issue with SSAO (and potentially any other filter using the PreNormalPass). Fragments with alpha < alpha threshold were not discarded, so normals were rendered and used for SSAO calculations.\r\n\r\nDetails at hub post: https://hub.jmonkeyengine.org/t/fix-transparent-unshaded-materials-ssao/44482\r\n\r\nEDIT: updated to fix PBRLighting also",
    "head_branch": "unshaded-prenormal-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PreNormalPass fix for Unshaded and PBRLighting (#1512)\n\n* Update GLImageFormats.java\r\n\r\n* Modified JmeBatchRenderBackend to clear the inner buffer of the image in the atlases instead of setting a predefined byte buffer\r\non disposal that made all atlases in the backend use the same buffer and generated rendering issues.\r\n\r\n* First impl of testcasefor multiple atlases issue. Still missing to add more images to the screens so it really uses more atlases\r\n\r\n* Manual merge pending stuff from jme3 base\r\n\r\n* Manual merge\r\n\r\n* Fix PreNormalPass for transparent unshaded materials having issues with ssao filter\r\n\r\n* Fixed proper ssao on transparent pbr materials\r\n\r\nCo-authored-by: joliver82 <joliver@allot.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ed4a14f302d393b277d",
    "number": 1511,
    "body": "The purpose of this pull request is to ensure that every package in the merged javadoc includes a summary description.\r\n\r\nSome JME packages have \"package-info.java\", and some of the older ones have \"package.html\", but most lack any summary description whatsoever. This is glaring if you browse [the merged javadoc on the web](https://javadoc.jmonkeyengine.org/v3.4.0-alpha6/).",
    "head_branch": "sgold-packageinfo",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "add package summaries (#1511)\n\n* add 116 package-info.java files\r\n\r\n* remove 2 \"package-info.java\" files for packages that have \"package.html\"\r\n\r\n* add 15 more \"package-info.java\" files\r\n\r\n* add 2 more \"package-info.java\" files\r\n\r\n* finishing touches"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ed5a14f302d393b277e",
    "number": 1510,
    "body": "Many classes, fields, and methods were deprecated in v3.3 and earlier releases. Few (if any) of them have been deleted.  Many deprecated classes and method still work, so developers may be tempted to ignore deprecation warnings.\r\n\r\nThis PR deletes previously deprecated *setter* methods that are currently no-ops. Such methods are hazards because they fail silently. Developers might use them without realizing they are no longer implemented.",
    "head_branch": "sgold-depreciatedsetters",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "delete deprecated setters that are currently no-ops (#1510)\n\n* delete deprecated setters that are currently no-ops\r\n\r\n* RenderContext: delete unused import of com.jme3.scene.Mesh"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ed6a14f302d393b277f",
    "number": 1509,
    "body": "As NetBeans likes to point out, \"Java language allows access to static fields thru instance variables, however this is often misleading and harder to read.\"",
    "head_branch": "sgold-staticfield",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "avoid accessing static fields through instance variables (#1509)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ed7a14f302d393b2780",
    "number": 1508,
    "body": "This adds a new class `AnimEvent` which approximates the function of `AnimationEvent` in the old animation system. For testing, the `TestCinematic` application was modified to use `AnimEvent` in place of `AnimationEvent`.",
    "head_branch": "sgold-cinema",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "add a CinematicEvent for the new animation system (#1508)\n\n* jme3-core: first cut at a CinematicEvent for the new animation system\r\n\r\n* TestCinematic: use AnimEvent\r\n\r\n* AnimationEvent: add deprecation advice to the javadoc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ed8a14f302d393b2781",
    "number": 1507,
    "body": "1. Added a new class `AnimFactory` which does most of what `AnimationFactory` did, only for the new animation system. Much cleaner than trying to shoehorn the new system into `AnimationFactory`.\r\n2. Modified `TestAnimationFactory` to test `AnimFactory` instead.\r\n2. Deprecated `AnimationFactory`, which depends on the old (deprecated) animation system.",
    "head_branch": "sgold-issue-1453",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "resolve #1453 (AnimationFactory should support the new system) (#1507)\n\n* add AnimFactory to build spatial animations for the new system\r\n\r\n* convert TestAnimationFactory to use AnimFactory\r\n\r\n* deprecate AnimationFactory\r\n\r\n* AnimFactory: avoid using a float as a loop index"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ed9a14f302d393b2782",
    "number": 1506,
    "body": "Resolves #1497",
    "head_branch": "fix-assetmanager",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240edaa14f302d393b2783",
    "number": 1505,
    "body": "This patch allows serializing final fields for sending over the network.\r\n\r\nNote this is possible due to obtaining reflection access to the final field otherwise it will throw IllegalAccessException.\r\n\r\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/c3e06bd507cb22de81cf91e095dca4ca2f29b4e1/jme3-networking/src/main/java/com/jme3/network/serializing/serializers/FieldSerializer.java#L104",
    "head_branch": "serializer-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "FieldSerializer: do not ignore final fields. (#1505)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240edba14f302d393b2784",
    "number": 1504,
    "body": "",
    "head_branch": "sgold-issue1499",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "resolve issue #1499 (more constructors and methods for ArmatureMask) (#1504)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240edca14f302d393b2785",
    "number": 1503,
    "body": "This addresses another piece of issue #1452.",
    "head_branch": "sgold-test-attachments",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "convert TestAttachmentsNode to the new animation system (#1503)\n\n* convert TestAttachmentsNode to the new animation system\r\n\r\n* TestAttachmentsNode: update copyright year\r\n\r\n* TestAttachmentsNode: combine nested \"if\" statements"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240edda14f302d393b2786",
    "number": 1502,
    "body": "When a `SceneProcessor` doesn't implement profiling, delete the unused private `prof` field and document the empty code block in the `setProfiler()` method.",
    "head_branch": "sgold-sceneprocs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "cleanup of scene processors that don't implement profiling (#1502)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240edea14f302d393b2787",
    "number": 1501,
    "body": "",
    "head_branch": "sgold-field2var",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "jme3-examples: convert fields to local variables (#1501)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240edfa14f302d393b2788",
    "number": 1500,
    "body": "This addresses another piece of issue #1452.\r\n\r\nOnce #1499 is fixed, we can replace\r\n```java\r\n        ArmatureMask walkingMask = new ArmatureMask();\r\n        walkingMask.addBones(armature, \"head\", \"spine\", \"spinehigh\");\r\n        walkingMask.addFromJoint(armature, \"hip.left\");\r\n        walkingMask.addFromJoint(armature, \"hip.right\");\r\n        walkingMask.addFromJoint(armature, \"uparm.left\");\r\n```\r\nwith something like\r\n```java\r\n        ArmatureMask walkingMask = new ArmatureMask(armature)\r\n                .remove(shootingMask);\r\n```\r\n",
    "head_branch": "sgold-issue-1452",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "convert TestWalkingChar to the new animation system (#1500)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ee0a14f302d393b2789",
    "number": 1498,
    "body": "Or as the Netbeans inspector puts it, \"Having private or package private types in a package API is useless.\"\r\n\r\nSome instances were resolved simply by reducing the visibility of the field or method. In one instance, a field was only assigned once, so the assignment was made final. In a few instances, the field or method could never be used anywhere, so it was deleted.",
    "head_branch": "sgold-nonpublic",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "public methods and fields shouldn't depend on non-public classes (#1498)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ee1a14f302d393b278a",
    "number": 1495,
    "body": "The `LoopMode` enum is part of the \"com.jme3.animation\" package: the old animation system, which @Nehon deprecated in 2018 when he introduced the new system. However, `LoopMode` is also used extensively in the \"com.jme3.cinematic\" package, which is not deprecated.\r\n\r\nAs long as it has a legitimate use, `LoopMode` should not be deprecated.",
    "head_branch": "sgold-loopmode",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ee1a14f302d393b278b",
    "number": 1494,
    "body": "Embedded jme Game on android view to manipulate jme games on custom xml UI designs , could be used within :\r\n\r\n* android.app.Activity;\r\n* androidx.appcompat.app.AppCompatActivity; or ComponentActivity.\r\n* androidx.appcompat.app.AlertDialog;\r\n* android.app.Fragment;\r\n* androidx.appcompat.app.Fragment;\r\n\r\nOR any OGLES Compatible Context based container.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added JmeSurfaceView.java class , for embedding jme-game in a custom xml UI-design. (#1494)\n\n* Added JmeSurfaceView.java class , for embedding jme-game in a custom xml UI design.\r\n\r\n* Removal of white spaces\r\n\r\nRemoval of white spaces between if...else conditions & class methods.\r\n\r\n* Removal of white spaces\r\n\r\n* Cleaning up (formatting errors/jme copyright)\r\n\r\n* Moved the class files into an independent package\r\n\r\n* Handled the user delay for zero & negative numbers\r\n\r\n* Cleaning up 2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ee3a14f302d393b278c",
    "number": 1493,
    "body": "",
    "head_branch": "sgold-jdwarnings",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "jme3-core resolve javadoc warnings (#1493)\n\n* jme3-core: resolve javadoc warnings, part 1\r\n\r\n* jme3-core: resolve javadoc warnings, part 2\r\n\r\n* jme3-core: resolve javadoc warnings, part 3\r\n\r\n* jme3-core: resolve javadoc warnings, part 4\r\n\r\n* jme3-core: resolve javadoc warnings, part 5\r\n\r\n* jme3-core: resolve javadoc warnings, part 6\r\n\r\n* jme3-core: resolve javadoc warnings, part 7\r\n\r\n* jme3-core: resolve javadoc warnings, part 8\r\n\r\n* jme3-core: resolve javadoc warnings, part 9\r\n\r\n* build.gradle: don't suppress doclint warnings\r\n\r\n* partial revert: some parameters documented more than once"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ee3a14f302d393b278d",
    "number": 1492,
    "body": "As discussed in https://hub.jmonkeyengine.org/t/getter-setter-methods-for-attribute-fieldofview-in-the-class-camera-java-in-jme-3-4/44426/9 and mentioned in #1491, I added getter and setter methods for the field of view for perspective cameras (calling these methods on an orthogonal camera has no effect). These can be easily tested on any example that uses the FlyByCamera (i.e., 90% of them), but I added a new test for it just the same that actually displays the current FOV.",
    "head_branch": "fovSetter",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Adds getters/setters for Camera field of view and aspect ratio (#1492)\n\n* Adds getter/setter fields for the field of view and aspect ratio for the perspective camera.\r\n\r\n* Removes setting the aspect ratio.\r\n\r\nWhat was I thinking? We already have the resize method!\r\n\r\n* No longer caches the field of view.\r\n\r\nReversing the calculations is more accurate.\r\n\r\n* Changes the direction the FlyByCamera zooms in.\r\n\r\n* Throws an IllegalArgumentException when using an illegal FOV.\r\n\r\n* Throws an exception when setting FOV on orthogonal cams.\r\n\r\n* Adds a check to prevent the flyby camera from zooming in to negative values.\r\n\r\n* Cleans up the code a little.\r\n\r\n* Prevents a crash in the test when zooming in."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ee4a14f302d393b278e",
    "number": 1490,
    "body": "",
    "head_branch": "sgold-issue-1446",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "resolve issue 1446 (test whether an EnvironmentCamera is busy) (#1490)\n\n* resolve issue #1446 (test whether an EnvironmentCamera is busy)\r\n\r\n* RefEnv: indicate whether the EnvironmentCamera is busy (to test 1446)\r\n\r\n* EnvironmentCamera: clearer coding of render() method"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ee5a14f302d393b278f",
    "number": 1489,
    "body": "Sometimes (as in PR #1487) it would be convenient to directly alter the duration of an Action.",
    "head_branch": "sgold-action-set-length",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Action: publicize the setLength() method (#1489)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ee6a14f302d393b2790",
    "number": 1488,
    "body": "Native Bullet was removed from JMonkeyEngine on 26 February 2021, but these 7 tests remain. It's unlikely we'll need to run them against jme3-jbullet, so I've removed them.",
    "head_branch": "sgold-native-bullet",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "jme3-examples: delete 7 tests for issues specific to native Bullet (#1488)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ee7a14f302d393b2791",
    "number": 1487,
    "body": "This addresses a single piece of issue #1452.\r\n\r\nTo blend smoothly between animations, I used `actionBlended()`, but the resulting \"halt\" action is much longer than 0.5 seconds. To avoid ignoring keypresses during the \"halt\" action, I used `simpleUpdate()` to initiate the animation. If someone knows a better way to blend animations in the new system, let me know!",
    "head_branch": "sgold-issue-1452",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "convert HelloAnimation to the new animation system (#1487)\n\n* convert HelloAnimation to the new animation system\r\n\r\n* HelloAnimation: more correct action\r\n\r\n* HelloAnimation: simplify using Action.setLength()\r\n\r\n* HelloAnimation: callback needn't be public"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ee8a14f302d393b2792",
    "number": 1486,
    "body": "+ explicitly thrown NullPointerExceptions were converted to IllegalArgumentExceptions or (in a few cases) IllegalStateExceptions\r\n+ where changes were made, the javadoc and copyright notices were updated as necessary\r\n+ in some cases, exception messages were added or made more descriptive",
    "head_branch": "sgold-issue-1419",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "resolve issue #1419 (explicitly thrown NullPointerExceptions) (#1486)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ee9a14f302d393b2793",
    "number": 1485,
    "body": "Added profile tracking to AppStateManager for render and post render.\r\n\r\nIf the community thinks this is useful, feel free to merge, otherwise just close. I found it very helpful when tracing which app state was impacting my fps. ",
    "head_branch": "appstate-render-perf",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added profile tracking to AppStateManager for render and post render. (#1485)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240eeaa14f302d393b2794",
    "number": 1484,
    "body": "",
    "head_branch": "sgold-issue-945",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Quaternion: resolve issue #945 (length of argument isn't checked) (#1484)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240eeba14f302d393b2795",
    "number": 1483,
    "body": "https://hub.jmonkeyengine.org/t/joystickcompatibilitymappings-overhaul/44337\r\nThis PR adds two improvements to the JoystickCompatabilityMapping class: First of all, it allows the remapping file to specify whether a mapping is a buttom remapping or an axis remapping. Considering some gamepads will use the same name for a button and an axis, this feature will help in this field. It is an optional, backwards-compatible feature that can be enabled by adding \"button.\" or \"axis.\" in front of the property name.\r\nThe second change is the ability to change the effective range of axes by adding a bracketed tupple of two floats to the value\r\n`axis.Xbox\\ 360\\ Wireless\\ Receiver.z=rx[0.0,1.0]`\r\nNote that the \"axis.\" prefix is optional, and using the range remapper implies that this remapping is for axes.",
    "head_branch": "joyAxisUpdate",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Joy axis update (#1483)\n\n* Allows the remapper to distinguish between axis and buttons.\r\n\r\nSome controllers (such as wireless Xbox 360 controllers on Linux) use the same names for both buttons and controllers (i.e. both the right trigger axis and the right bumper button are named \"5\").\r\n\r\n* Enables the ability to remap the effective range of an axis.\r\n\r\nThis allows developers to restrict a certain axis to a bound set of values (for example, preventing a one-way trigger access from going below 0, or compensating for a damaged joystick.\r\n\r\n* Adds axis range remapping to LWJGL and LWJGL3 modules.\r\n\r\n* Adds the old constructor back.\r\n\r\nBetter for backwards compatibility.\r\n\r\n* Fixes the unnecessary whitespace changes.\r\n\r\n* Fixes some documentation issues.\r\n\r\n* Fixes a merge conflict in the header of JInputJoyInput\r\n\r\n* Removed fine logging."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240eeca14f302d393b2796",
    "number": 1482,
    "body": "Added 2 methods to the `Renderer` interface to test whether a renderer is implementing gamma correction.",
    "head_branch": "sgold-issue-1074",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "resolve issue #1074 (Renderer lacks getters for sRGB properties) (#1482)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240eeda14f302d393b2797",
    "number": 1481,
    "body": "Previously `EnvironmentCamera` didn't copy the default viewport's background color, but kept an alias to the pre-existing object. To avoid unintentionally altering the default viewport, it is necessary to clone the object.\r\n\r\n`EnvironmentCamera` overrides the `backGroundColor` field during initialization, so setting it any sooner would have no effect. I decided to throw an `IllegalStateException` in that situation, to avert puzzling logic errors in apps. ",
    "head_branch": "sgold-issue-1447",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "resolve issue #1447 (no setter for EnvironmentCamera background color) (#1481)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240eeda14f302d393b2798",
    "number": 1480,
    "body": "I added null checks to the j-ogg-all library, released my own v1.0.1, and changed the build script for jme3-jogg to use the new version.",
    "head_branch": "sgold-issue-1244",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix issue #1244 (NPE in LogicalOggStreamImpl) (#1480)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240eeea14f302d393b2799",
    "number": 1479,
    "body": "",
    "head_branch": "fix-indexbuffer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix issue #1477 (assertion fails for createIndexBuffer(0, 0)) (#1479)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ef0a14f302d393b279a",
    "number": 1478,
    "body": "I've added all the shader files necessary for \"AfflictedPBRTerrain.j3md\" as well as \"AfflictedAdvancedPBRTerrain.j3md\" and I have also updated the paths to the vert/frag/glslib files accordingly.\r\n\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added PBR Terrain shaders (#1478)\n\n* Add files via upload\r\n\r\n* Add files via upload\r\n\r\n* Add files via upload\r\n\r\n* Update AfflictedAdvancedPBRTerrain.frag\r\n\r\n* Update AfflictionLib.glsllib\r\n\r\n* Update AfflictedAdvancedPBRTerrain.j3md\r\n\r\n* Update AfflictedPBRTerrain.j3md\r\n\r\n* Update AfflictedPBRTerrain.frag\r\n\r\n* Rename AfflictedAdvancedPBRTerrain.frag to AdvancedPBRTerrain.frag\r\n\r\n* Update AfflictedAdvancedPBRTerrain.j3md\r\n\r\n* Update and rename AfflictedAdvancedPBRTerrain.j3md to AdvancedPBRTerrain.j3md\r\n\r\n* Rename AfflictedPBRTerrain.frag to PBRTerrain.frag\r\n\r\n* Update and rename AfflictedPBRTerrain.j3md to PBRTerrain.j3md\r\n\r\n* Rename AfflictedPBRTerrain.vert to PBRTerrain.vert\r\n\r\n* Update PBRTerrain.j3md\r\n\r\n* Add files via upload\r\n\r\n* first test case\r\n\r\nuploaded new texture resources that better demonstrate the capabilities of PBR, and added keybinding for switching between day and night by toggling ambient light\r\n\r\n* Update PBRTerrainTest.java\r\n\r\n* Update PBRTerrainTest.java\r\n\r\nfixed to use font thats already included in test data\r\n\r\n* Update PBRTerrainTest.java\r\n\r\n* add light probes used by test case\r\n\r\nmade a new folder for light probes since one did not exist where \"defaultProbe.j3o\" was located.\r\n\r\n* Add files via upload\r\n\r\n* test case for advanced pbr terrain shader\r\n\r\n* Re-upload textures in same format\r\n\r\nHad to fix the bit rate on some png images to make sure they were all the same exact format to fit into texture arrays.\r\n\r\n* Add files via upload\r\n\r\n* Update AdvancedPBRTerrain.j3md\r\n\r\n* Update AdvancedPBRTerrain.j3md\r\n\r\n* Update PBRTerrain.j3md\r\n\r\n* Update PBRTerrain.frag\r\n\r\n* Update AdvancedPBRTerrain.frag\r\n\r\n* Delete fantasy-sky_Probe.j3o\r\n\r\n* Add files via upload\r\n\r\n* Delete sunset_Probe.j3o\r\n\r\n* Update PBRTerrainAdvancedTest.java\r\n\r\nupdate asset paths for textures, and set to use quarry probe\r\n\r\n* Update PBRTerrainTest.java\r\n\r\n* Update PBRTerrainAdvancedTest.java\r\n\r\n* Add files via upload\r\n\r\n* Add files via upload\r\n\r\nadded license file for textures from cc0textures.com\r\n\r\nThey say it is enough to just put \"Contains assets from CC0Textures.com, licensed under CC0 1.0 Universal\" but I still left some extra information pointing back to their site and the page that states this license information\r\n\r\n* Update AfflictionLib.glsllib\r\n\r\n* Update PBRTerrainTest.java\r\n\r\n* Update PBRTerrainAdvancedTest.java\r\n\r\n* Update PBRTerrainTest.java\r\n\r\n* Update license.txt\r\n\r\n* Update license.txt\r\n\r\n* Update PBRTerrainTest.java\r\n\r\n* Update PBRTerrainAdvancedTest.java\r\n\r\n* Update license.txt\r\n\r\n* Update PBRTerrainTest.java\r\n\r\nfixed an assetpath\r\n\r\n* Update AdvancedPBRTerrain.frag\r\n\r\nremove a commented out and unused variable that slipped past my last check\r\n\r\n* Update PBRTerrainAdvancedTest.java\r\n\r\n* Update PBRTerrainTest.java\r\n\r\n* added import for LightProbe.AreaType\r\n\r\n* Update PBRTerrainAdvancedTest.java\r\n\r\n* Update PBRTerrainAdvancedTest.java\r\n\r\n* Update PBRTerrainTest.java\r\n\r\n* Update PBRTerrainAdvancedTest.java\r\n\r\nremoved the comment from earlier review that I missed\r\n\r\n* Update PBRTerrainAdvancedTest.java\r\n\r\nAddressed recent reviews, and also made some other minor changes that should make the test case cleaner and easier to understand.\r\n\r\n* Update PBRTerrainAdvancedTest.java\r\n\r\n* Update PBRTerrainAdvancedTest.java\r\n\r\nfixed emissive being applied to wrong texture slot and adjusted emissiveColor to look better\r\n\r\n* removed unused HORIZON_FADE define\r\n\r\n* Update PBRTerrainAdvancedTest.java\r\n\r\nFixed with proper way to load quarry_Probe, and added class variables for emissiveColors rather than defining them in-line where the values are sent to the shader\r\n\r\n* Update PBRTerrainAdvancedTest.java\r\n\r\n* Update PBRTerrainTest.java\r\n\r\nfixed crashes and cleaned up code in standard test case\r\n\r\n* Update PBRTerrainTest.java\r\n\r\nfixed typo where I spelled \"noticeably\"  wrong\r\n\r\n* Update PBRTerrainAdvancedTest.java\r\n\r\nfixed typo for word \"noticeably\"\r\n\r\n* Update PBRTerrainTest.java\r\n\r\nadded license text at top of class"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ef1a14f302d393b279b",
    "number": 1476,
    "body": "After loading a terrain from j3o, calling `TerrainQuad.getPatchSize()` will return 0, because \"patchSize\" is ignored when writing to file. This patch should fix it.",
    "head_branch": "terrain-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "TerrainQuad: serialize \"patchSize\" field. (#1476)\n\n* TerrainQuad: serialize \"patchSize\" field.\r\n\r\n* Updated copyright date.\r\n\r\n* Added a test for terrain exporting."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ef2a14f302d393b279c",
    "number": 1475,
    "body": "This PR fixes issue https://github.com/jMonkeyEngine/jmonkeyengine/issues/1239 (both sound not working and ogg files not loaded).\r\n\r\nAlso this PR updates openal-soft to latest (1.21.1).\r\n\r\nEDIT: I saw it's failing to compile. Maybe this is caused by an old release of the ndk, I'm using latest (22)",
    "head_branch": "android-native-sound-1.21",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Android native sound fix and update openal-soft to 1.21.1 (#1475)\n\n* Update GLImageFormats.java\r\n\r\n* Modified JmeBatchRenderBackend to clear the inner buffer of the image in the atlases instead of setting a predefined byte buffer\r\non disposal that made all atlases in the backend use the same buffer and generated rendering issues.\r\n\r\n* First impl of testcasefor multiple atlases issue. Still missing to add more images to the screens so it really uses more atlases\r\n\r\n* Manual merge pending stuff from jme3 base\r\n\r\n* Manual merge\r\n\r\n* Added -O0 and -O1 to fix some bad behaviour in newer NDKs making ogg loading fail and no sound on android\r\nFixed bad path check in openalsoft.gradle\r\nUpdated openal-soft to 1.17.2 and added related required defines in config.h\r\n\r\n* Updated openal-soft to 1.19.1\r\nIncluded new required header files\r\nUpdated target platform to android-19 (previous just don't link)\r\n\r\n* Updated to latest openal-soft 1.21.1 (kcat repo)\r\n\r\n* Removed bsinc_inc.h (not used in 1.21.1)\r\n\r\n* Changed android build docker image to jme3\r\n\r\nCo-authored-by: joliver82 <joliver@allot.com>\r\nCo-authored-by: Jesus Oliver <jesus.oliver82@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ef3a14f302d393b279d",
    "number": 1474,
    "body": "As discussed at [the Forum](https://hub.jmonkeyengine.org/t/suggestions-for-v3-4/43836/49).",
    "head_branch": "gsw",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[skip ci] update natives snapshot"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ef3a14f302d393b279e",
    "number": 1473,
    "body": "This is the list of changes:\r\n\r\n- Forced compilation using java 8 (options.release parameter) to avoid random NoSuchMethodException for some methods of java.nio.*Buffer classes.\r\n- Modified GLRenderer to get default framebuffer on start. Most gl implementations use 0 but iOS use a random buffer depending on the execution (usually 1). This allows the usage of filters and postprocessors using an additional framebuffer on ios. Previously if you enabled any of those the screen went black.\r\n- Implemented missing methods of gles2.\r\n- Implemented gles3 methods.\r\n\r\nTopic at hub: https://hub.jmonkeyengine.org/t/ios-improvements-including-gles3-0/44332\r\n\r\n** This PR needs the related SDK PR: https://github.com/jMonkeyEngine/sdk/pull/295",
    "head_branch": "ios-gl3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "iOS gl3 and some improvements (#1473)\n\n* Update GLImageFormats.java\r\n\r\n* Modified JmeBatchRenderBackend to clear the inner buffer of the image in the atlases instead of setting a predefined byte buffer\r\non disposal that made all atlases in the backend use the same buffer and generated rendering issues.\r\n\r\n* First impl of testcasefor multiple atlases issue. Still missing to add more images to the screens so it really uses more atlases\r\n\r\n* Manual merge pending stuff from jme3 base\r\n\r\n* Manual merge\r\n\r\n* Implemented new methods in IosGL wrapper for GLES30\r\nCreated native methods in JmeIosGLES\r\n\r\n* Fixed some imports and typos\r\n\r\n* Added comment\r\n\r\n* Fixed compilation if using java >= 1.9. The bytecode was generated with v52 but when executing it failed to find methods of nio.*Buffer because of an implementation change after java 1.9\r\n\r\n* Added glTexParameterf and fixed black screen rendering on iOS when using any additional framebuffer (scene processors and filters)\r\n\r\n* Added constant GL_FRAMEBUFFER_BINDING\r\n\r\n* More gl functions implemented\r\n\r\n* Removed useless comments\r\n\r\n* Fixed release option to match current gradle version defined in gradlew\r\n\r\n* Fixed formatting to match jME standards\r\n\r\nCo-authored-by: joliver82 <joliver@allot.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ef4a14f302d393b279f",
    "number": 1471,
    "body": "null pointer exception if the GLTF file references a node that doesn't exist.\r\nI got this problem while tring to convert my GLTF file, i got 440 animations on the file with 3 animation that have joint index missmatch.\r\nMaybe it's better to log the errors detail so the user have all the information to correct the error",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "avoid an NPE in GltfLoader.findChildren() (#1471)\n\n* Update GltfLoader.java\r\n\r\nnull pointer exception if the GLTF file references a node that doesn't exist.\r\nI got this problem while tring to convert my GLTF file, i got 440 animations on the file with 3 animation that have joint index missmatch.\r\nMaybe it's better to log the errors detail so the user have all the information to correct the error\r\n\r\n* Update GltfLoader.java\r\n\r\n* format added code per the proposal at PR #1098\r\n\r\n* log any missing JointWrapper\r\n\r\nThis seems to be how model issues are reported by GltfLoader.\r\n\r\nCo-authored-by: Stephen Gold <sgold@sonic.net>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ef5a14f302d393b27a0",
    "number": 1470,
    "body": "",
    "head_branch": "sgold-issue-1469",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "test and fix for issue #1469 (initial transform of Joint never cloned)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ef6a14f302d393b27a1",
    "number": 1467,
    "body": "This should fix the issues with using InstancedGeometry and shadow filter reported on the forum: https://hub.jmonkeyengine.org/t/npe-with-instancednode-and-shadow-filter/44240\r\n\r\n- Now if all instances of an InstancedGeometry are removed the InstancedGeometry will be properly detached as well and its internal buffer will be cleared.\r\n- Instead of returning a null bound in InstancedGeometry (when it is empty) it will return a bounding box with zero extents. (following the same approach in Node class)\r\n- Renamed `getActualNumInstances` to a more meaningful name `getNumVisibleInstances`\r\n- Fixed a bug in visible instances count calculation that was causing `com.jme3.renderer.RendererException: Attempting to upload empty buffer (limit = 0), that's an error` when used with shadow filter.\r\n- Two test classes are added that demonstrates using instancing with raycasting and shadow. (thanks @duncanj for providing tests)\r\n- Fixed an issue where the LOD level was being ignored by InstancedGeometry!",
    "head_branch": "instancing-shodow-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Improve & bug fix InstancedGeometry and add new tests. (#1467)\n\n* Improve & bug fix InstancedGeometry and add new tests.\r\n\r\n* Update the copyright dates"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ef7a14f302d393b27a2",
    "number": 1466,
    "body": "As @tlf30, @pspeed42 and I were working on #1443, it became apparent that the LightControl class wasn't entirely functional, particularly when it came to spot lights. This PR not only fixes that (including filling out the missing spotlight code in the lightToSpatial method), but also replaces some legacy code relating to directional lights from before version 3.\r\nhttps://hub.jmonkeyengine.org/t/gltf-unlit-material-and-punctual-light-extensions/44132/29?u=markil3\r\n\r\nNote that, when dealing with \"world\" coordinates when moving the spatial to the light, the rotations aren't always entirely accurate (the distance between the vectors can be as much as 4 units during testing). However, they appear close enough in debugging that I'm not concerned (Line 141 of TestLightControl2Spot).",
    "head_branch": "lightControlFix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Light control fix (#1466)\n\n* Updates the light control spatialToLight method for Directional and Spot lights to better handle rotations.\r\n\r\nThe directional light was using outdated code from before 3.0 that didn't make sense in these days, to the point of confusion whenever the\r\n\r\nAlso, the spotlight code wasn't working properly, as can be demonstrated by the new TestLightControlSpot test.\r\n\r\nThanks @pspeed42 for the help with simplifying the quaternion.\r\n\r\n* Updates the light control lightToSpatial so it actually works with global coordinates and spot lights.\r\n\r\nThe spot light wasn't implemented at all, and the directional light didn't work.\r\n\r\n* Fixes some error messages in the tests.\r\n\r\nThere should be far less (although one will inevitably pop up when the test first starts, for some reason.\r\n\r\n* Converts spatialToLight to use TempVars.\r\n\r\nIt wastes less objects.\r\n\r\n* Fixed some codacity issues.\r\n\r\n* More formatting fixes\r\n\r\n* Stops updating the rotation or translation when the parent light doesn't have those options.\r\n\r\nIt is a little less error-prone.\r\n\r\n* Normalizes the rotation vector and adds some more readible names.\r\n\r\n* Fixed some formatting/comment issues."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ef8a14f302d393b27a3",
    "number": 1465,
    "body": "",
    "head_branch": "sgold-issue-1459",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "testcase and fix for issue #1459 (BoundingSphere merge yields NaNs) (#1465)\n\n* testcase and fix for issue #1459 (BoundingSphere merge yields NaNs)\r\n\r\n* Vector3f: fix overflow/underflow bugs in length() and distance() methods"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ef9a14f302d393b27a4",
    "number": 1464,
    "body": "Protect the no-arg constructor and use a different constructor to instantiate dummy cameras in jme3-vr.",
    "head_branch": "sgold-issue-1461",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "resolve issue #1461"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240efaa14f302d393b27a5",
    "number": 1463,
    "body": "This adds a GLTF loader extention that will allow jMonkeyEngine to use the Common/MatDefs/Misc/Unshaded.j3md material definition whenever a GLTF scene has the \"unlit\" material on an object. The branch contains a test environment for demonstration.\r\n\r\nNote that in some other testing, I've noticed that the supposedly \"unlit\" material will be affected by shadows, which I did not notice when composing the scene in Blender. This appears to be due to jMonkey's shadows in particular, and not related to GLTF.\r\n\r\nI first introduced it [here](https://hub.jmonkeyengine.org/t/gltf-unlit-material-and-punctual-light-extensions/44132). The thread mostly focuses on punctual lights, but I originally started on it for the unlit lights.",
    "head_branch": "gltfUnlit",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Gltf unlit (#1463)\n\n* Adds support for the Unlit material in the GLTF loader.\r\n\r\n* Adds some author information.\r\n\r\n* Removes an unnecessary test.\r\n\r\nIt was left over from development and inevitably fails. TestGLTFUnlit serves as a good enough test anyway.\r\n\r\n* Adds the copyright notice to TestGltfUnlit."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240efba14f302d393b27a6",
    "number": 1460,
    "body": "This came out of some of the testing I did regarding the [failing Github Actions builds.](https://hub.jmonkeyengine.org/t/jme-github-actions-failing/44180?u=sailsman63)\r\n\r\nHopefully, these changes will make troubleshooting such issues a little simpler in the future:\r\n\r\n- The original failure erroneously seemed to be originating in the \"Build Natives\" step, though it was actually an error the Java build step. It is *not* necessary to build the full engine at this stage, as the result was merely discarded and then repeated during the OS matrix phase a little further down. I suspect that the line that caused this to happen was not intentional in the first place.\r\n- When a single part of a build matrix fails, we really should let all variants complete, rather than bailing early. This allows us to get as much data out of a build run as we can by comparing and contrasting the error messages\r\n    - Also should improve on \"Can't reproduce on my Machine\" issues - We'll at least know which platforms are seeing the issue in the first place\r\n- On occasion, JME swallows exceptions and only logs the error. Bumping the gradle build to log level INFO will get us more of these types of errors. The downside is a larger build log to comb through, but if the build is green, do we really care? And if it's not, the info can be useful.",
    "head_branch": "workflow-updates",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Workflow updates (#1460)\n\n* Native build should not need to build and test engine\r\n\r\n* Do not bail on first failed platform\r\n\r\n* Broader linux test matrix\r\n\r\n* Info-level gradle logs - places STDERR in the log"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240efca14f302d393b27a7",
    "number": 1458,
    "body": "Same fix as before, but in SPLighting.vert for SinglePassLighting (spotted by Ali_RS).\r\nMore info:  https://hub.jmonkeyengine.org/t/shader-compile-error-with-instancednode-lighting-material-and-linearfog/44124/2",
    "head_branch": "fix-lighting-shader-compile-error-with-instancednode-and-fog",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix for lighting vertex shader when used with Fog and InstancedNode.  All credit to sailsman63 for the actual fix.  More info:  https://hub.jmonkeyengine.org/t/shader-compile-error-with-instancednode-lighting-material-and-linearfog/44124/2 (#1458)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240efda14f302d393b27a8",
    "number": 1457,
    "body": "This should fix the raycasting issue reported on the forum: https://hub.jmonkeyengine.org/t/npe-when-ray-casing-with-instancednode/44135",
    "head_branch": "fix-instancing-raycast",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Ignore collision with InstancedGeometry (#1457)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240efea14f302d393b27a9",
    "number": 1456,
    "body": "Fix for lighting vertex shader compile error when used with Fog and InstancedNode.  All credit to sailsman63 for the actual fix.  \r\n\r\nMore info:  https://hub.jmonkeyengine.org/t/shader-compile-error-with-instancednode-lighting-material-and-linearfog/44124/2",
    "head_branch": "fix-lighting-shader-compile-error-with-instancednode-and-fog",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1456 from duncanj/fix-lighting-shader-compile-error-with-instancednode-and-fog\n\nFix for lighting vertex shader when used with Fog and InstancedNode."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240effa14f302d393b27aa",
    "number": 1454,
    "body": "…5 suggested by LWJGL2.\r\n\r\nThis fixes a gamepad bug discussed in https://hub.jmonkeyengine.org/t/linux-gamepad-input-on-jme3-lwjgl-splits-input-between-two-logical-gamepads",
    "head_branch": "updateLWJGL",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Bump jinput version to 2.0.9. (#1454)\n\nThis fixes a gamepad bug discussed in https://hub.jmonkeyengine.org/t/linux-gamepad-input-on-jme3-lwjgl-splits-input-between-two-logical-gamepads"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f00a14f302d393b27ab",
    "number": 1451,
    "body": "This PR corrects the documentation for 4 methods in `com.jme3.math.Quaternion`:\r\n\r\n 1. `fromAngles(float, float, float)`\r\n 2. `fromAngles(float[])`\r\n 3. the `Quaternion(angles)` constructor\r\n 4. `toAngles(float[])`\r\n\r\nIt also adds a test case which provides strong evidence that all 4 methods implement X-Z-Y rotation order.",
    "head_branch": "sgold-issue-1388",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "testcase and fix for issue #1388 (Quaternion javadoc is misleading) (#1451)\n\n* testcase and fix for issue #1388 (Quaternion javadoc is misleading)\r\n\r\n* privatize 2 methods to please Codacy\r\n\r\n* Quaternion: distinguish intrinsic-vs-extrinsic rotation order in cmts\r\n\r\n* TestIssue1388: verify intrinsic rotation order"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f01a14f302d393b27ac",
    "number": 1450,
    "body": "The deleted files have been moved to https://github.com/jMonkeyEngine-Contributions/jme3tools.navigation",
    "head_branch": "sgold-issue-1430",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "address issue #1430: remove the jme3tools.navigation package (#1450)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f02a14f302d393b27ad",
    "number": 1449,
    "body": "I added a small amount of code to the Unshaded.j3md and Unshaded.frag files to allow for desaturating the material's output color based on a float value, specifically for use in GUIs. \r\n\r\nNearly all our GUI libraries use the Unshaded matdef for elements that are attached to the GUI node, and any custom gui elements will typically start from extending Unshaded if they need to do something in the shader, so adding this to Unshaded would alow all of our existent gui libraries to have desaturation functionality.\r\nThis should also not break any existing code, as nothing happens with this code unless the float value for desaturation gets defined for the material.\r\n\r\nFollowing up on this thread https://hub.jmonkeyengine.org/t/how-to-desaturate-gui-element/43963\r\n\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add desaturation functionality to Unshaded.j3md (#1449)\n\n* Update Unshaded.frag\r\n\r\nadded a few lines of code for desaturating final color output based on a float value\r\n\r\n* Update Unshaded.j3md\r\n\r\nadded float variable \"DesaturationValue\" and corresponding define \"DESATURATION\" to support desaturation of the final output color in Unshaded.frag\r\n\r\n* Update Unshaded.frag\r\n\r\nfixed alpha value that was previously being set to 0.0 by mistake\r\n\r\n* Update Unshaded.frag\r\n\r\n* Update Unshaded.frag\r\n\r\nadded ifdef around variable declaration\r\n\r\n* Update Unshaded.j3md"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f02a14f302d393b27ae",
    "number": 1444,
    "body": "In the case of grayscale GlowMap, GlowColor can be used for changing color without manipulating glow texture.\r\n\r\nForum topic: https://hub.jmonkeyengine.org/t/glowcolor-unused-if-a-glowmap-is-specified/44002",
    "head_branch": "glow-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow use of a GlowColor with GlowMap (#1444)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f03a14f302d393b27af",
    "number": 1443,
    "body": "This PR adds support for the GLTF KHR_lights_punctual extension which allows lights from gltf files to be imported.\r\nhttps://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_lights_punctual\r\n\r\nPlease feel free to give feedback. I am currently looking for advice on implementing the intensity field from the gltf spec into the jme lights. \r\n\r\nGLTF model taken from the KHR_light_punctual repo listed above.",
    "head_branch": "khr_lights_punctual",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added KHR_lights_punctual gltf extension (#1443)\n\n* Added initial implementation for KHR_lights_punctual gltf extension\r\n\r\n* Initial implementation of light intensity\r\n\r\n* Add light to model root and add control to light node\r\n\r\n* Fix adding lights when model only has one scene\r\n\r\n* Minor optimization\r\n\r\n* Fix for intensity calc\r\n\r\n* Custom light control for GLTF -Z oriented lights\r\n\r\n* Update dumpScene to give more detailed information about lights\r\n\r\n* Updated to use built-in LightControl\r\n\r\n* Update javadocs\r\n\r\n* Make public members of private class private"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f04a14f302d393b27b0",
    "number": 1442,
    "body": "This is a fix for when the gltf exporter creates an empty scene node from blender. For example:\r\n```json\r\n\r\n    \"scenes\" : [\r\n        {\r\n            \"name\" : \"KB3D_NeoShanghai-Native\",\r\n            \"nodes\" : [\r\n                5\r\n            ]\r\n        },\r\n        {\r\n            \"name\" : \"Scene\"\r\n        }\r\n    ],\r\n```\r\nThis will make the exporter skip attempting to read the nodes from the empty scene, as there are no nodes in the scene.",
    "head_branch": "gltf-scene-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Solve AssetLoadException importing gltf with empty scene (#1442)\n\n* Fix for gltf empty scene\r\n\r\n* Fix grammar error in comment and add test"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f05a14f302d393b27b1",
    "number": 1441,
    "body": "Reported by Codacy\r\n\r\nFields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Move fields to the top in LWJGLBufferAllocator (#1441)\n\nReported by Codacy\r\nFields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f06a14f302d393b27b2",
    "number": 1440,
    "body": "When setting the type of a light probe to spherical, previously the center of the area wasn't set to the probe's position.\r\n\r\nThe code is untested, as I can't currently build the engine locally, so someone testing it would be welcome. The changes are minimal though, so chances of something breaking are small.",
    "head_branch": "light-probe-center",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix spherical light probes always starting at zero (#1440)\n\nWhen setting the type of a light probe to spherical, previously the center of the area wasn't set to the probe's position.\r\n\r\nThe code is untested, as I can't currently build the engine, so someone testing it would be welcome."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f07a14f302d393b27b3",
    "number": 1439,
    "body": "As reported by Codacy",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update TerrainPatch.java (#1439)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f08a14f302d393b27b4",
    "number": 1438,
    "body": "A solution using 2 different material definition assets:\r\n + \"Common/MatDefs/Misc/Sky.j3md\" for cube-mapped skies (tested using `TestHoveringTank`)\r\n + \"Common/MatDefs/Misc/SkyNonCube.j3md\" for sphere-mapped skies (tested using `TestEverything`) and equirect-mapped skies (tested using `RefEnv`)",
    "head_branch": "sgold-issue-1414",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "resolve issue #1414 (checkSetParam warning while creating sky) (#1438)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f09a14f302d393b27b5",
    "number": 1437,
    "body": "Fix the code error when checking UTF-8 data\r\n\r\nlet content = [0xE4, 0x8A, 0xBC], let `b = 0xE4` (1110 0100)\r\n\r\nSee this part:\r\n````java\r\n                if (b < 0x80) {\r\n                    // good\r\n                }\r\n                else if ((b & 0xC0) == 0xC0) {//   (0xE4 & 0xC0) == 0xC0     =====>  true\r\n                    utf8State = UTF8_2BYTE;\r\n                }\r\n                else if ((b & 0xE0) == 0xE0) {//   (0xE4 & 0xE0) == 0xE0      =====>  true\r\n                    utf8State = UTF8_3BYTE_1;\r\n                }\r\n                else {\r\n                    utf8State = UTF8_ILLEGAL;\r\n                }\r\n````\r\n\r\n3 bytes UTF-8 data while always be treated as 2 bytes UTF-8 data.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[M]Fix issue#1436 (#1437)\n\n* [M]Fix code error when checking UTF-8 data\r\n\r\nLet a 3 bytes UTF-8 data = [0xE4, 0x8A, 0xBC], when b = 0xE4 (1110 0100), it will be treated as 2 bytes.\r\n\r\nSee this part:\r\n\r\n```java\r\n            if (b < 0x80) {\r\n                // good\r\n            }\r\n            else if ((b & 0xC0) == 0xC0) {//   (0xE4 & 0xC0) == 0xC0     =====>  true\r\n                utf8State = UTF8_2BYTE;\r\n            }\r\n            else if ((b & 0xE0) == 0xE0) {//   (0xE4 & 0xE0) == 0xE0      =====>  true\r\n                utf8State = UTF8_3BYTE_1;\r\n            }\r\n            else {\r\n                utf8State = UTF8_ILLEGAL;\r\n            }\r\n```\r\n\r\n3 bytes UTF-8 data while always be treated as 2 bytes UTF-8 data.\r\n\r\nIt's better that always treat String data as UTF-8 now.\r\n\r\nsee https://hub.jmonkeyengine.org/t/code-error-on-checking-utf-8-data/43909\r\n\r\n* [M]Use StandardCharsets.UTF_8 instead of constant 'UTF8'\r\n\r\nCo-authored-by: 闫茂源 <yanmaoyuan@baijiayun.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f0aa14f302d393b27b6",
    "number": 1435,
    "body": "Related to: https://github.com/jMonkeyEngine/jmonkeyengine/pull/1434\r\n\r\nThese we write 1100 files (namely the Material files, j3m). The speedup is on the error margin of the measurement. The reason being that the usage really limits to these really small files (500 bytes...). It still should be less writes on the disk.",
    "head_branch": "exporter_optimization2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use BufferedWriter (#1435)\n\n* Use BufferedWriter\r\n\r\n* OutputStreamWriter to Writer as method param\r\n\r\n* Use BufferedOutputStream when writing to file"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f0ba14f302d393b27b7",
    "number": 1434,
    "body": "Ah, sorry for the white space changes.\r\n\r\nWell, I was heavily optimizing our OpenKeeper's file operations. Basically trying to convert it to NIO world instead of the old I/O libraries. The results are stunning. There was still this place where I was relying on jME to write out the converted assets. And here it is.\r\n\r\nWe are writing 2015 files (615 MB) of j3o models with this BinaryExporter. Files range from few kilobytes to anywhere around 8 megabytes.\r\n\r\n**Before: 110 seconds\r\nAfter: 23 seconds**\r\n\r\nThe time includes a lot of stuff really, but this is the effect of this little change. This is not NIO, instead the old I/O. Still the fastest way to write a file in Java. See for example https://www.happycoders.eu/java/how-to-write-files-quickly-and-easily/#Performance_overview_writing_files.\r\n\r\nDunno what you think about doing some NIO work. That means basically getting rid of File, replace it with Path, Paths and Files classes. That doesn't alone yield any performance improvements though, or at least measurable ones. Mainly API thing.",
    "head_branch": "exporter_optimization",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use BufferedOutputStream to achieve maximum throughput (#1434)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f0ca14f302d393b27b8",
    "number": 1432,
    "body": "This adds a series of retries (with increasing delays) in case the first attempt to `AL.create()` throws an `LWJGLException`.",
    "head_branch": "sgold-issue-1383",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "mitigate issue #1383 (Could not locate OpenAL library) for LWJGL v2 (#1432)\n\n* mitigate issue #1383 (Could not locate OpenAL library) for LWJGL v2\r\n\r\n* LwjglALC: convert the System.out warning to a Logger message\r\n\r\n* don't increase the wait time after each failure"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f0da14f302d393b27b9",
    "number": 1429,
    "body": "The `terminate()` method does not exist, the correct one is `cleanup()`",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Javadoc update, proposed fix for issue #1428 (#1429)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f0ea14f302d393b27ba",
    "number": 1427,
    "body": "Issue #1382 provides an example of how sloppy `IndexBuffer` allocations can cause bugs. To help uncover such bugs, this PR adds assertions to the `put()` methods of `IndexByteBuffer` and `IndexShortBuffer` in order to detect attempts to write out-of-range indices. (See the discussion at issue #1382 .)\r\n\r\nI also modified the `createIndexBuffer()` method to record the expected number of vertices. This enables the assertions to test against the expected number of vertices (instead of 128 or 65536) for stronger checking.",
    "head_branch": "sgold-range-check",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add range-check assertions to the IndexBuffer.put() methods (#1427)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f0fa14f302d393b27bb",
    "number": 1426,
    "body": "Info: This PR can be squashed, I mostly did over precise commits for review.\r\nThe most common change was adding a `break` to the last `case` statement of the `switch`, that's bad code that could lead to a problem, when someone adds another `case` statement overlooking the `break`.",
    "head_branch": "wip/codequality",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Codequality Pass 1 (#1426)\n\n* RendererUtil: Remove unreachable switch case.\r\n\r\n* PhysicsCharacter#setUpAxis (deprecated): Behavior change: Throw an exception instead of clamping when invalid values are passed.\r\n\r\n* ALUtil: unnecessary String.valueOf call and missing break.\r\n\r\n* OrientedBoxProbeArea: Some Simplifications and Switch improvements\r\n\r\n* LwjglContext: Switch improvements\r\n\r\n* PBRMaterialAdapter: Switch improvement and comment clarifications\r\n\r\n* DOMSerializer: Add break on the default statement, just in case.\r\n\r\n* MikktSpaceTangentGenerator: simplify condition\r\n\r\n* DOMSerializer: Use StandardCharsets instead of Charset.forName\r\n\r\n* TestBatchNode: Simplify the code a lot\r\n\r\n* TestIssue928: Do not exit the JVM but exit the Application - This allows us to unit test this."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f10a14f302d393b27bc",
    "number": 1424,
    "body": "",
    "head_branch": "sgold-issue-1421",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "solution and testcase for issue #1421 (ScreenshotAppState never cleans up) (#1424)\n\n* add test case for issue #1421 (ScreenshotAppState never cleans up)\r\n\r\n* solution for issue #1421 (ScreenshotAppState never cleans up)\r\n\r\n* ScreenshotAppState: more commentary regarding the dodgy design"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f11a14f302d393b27bd",
    "number": 1423,
    "body": "",
    "head_branch": "sgold-issue1420",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix for issue #1420"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f12a14f302d393b27be",
    "number": 1418,
    "body": "This resolves the immediate issue. I will submit additional PRs to add range-checking assertions.",
    "head_branch": "sgold-issue-1382",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix issue #1382 (LODGeomap index buffers with elements too small) (#1418)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f13a14f302d393b27bf",
    "number": 1416,
    "body": "Since you have been adding those IDE specific settings... here is one from the home team :)\r\n\r\nThis re-adds the once deleted license.txt and adds it as the project license in Gradle properties. This works in Netbeans (jME SDK). Probably not in any other IDE. Whenever you add a new class file to any of the jME projects in NB, this license header will be added on top of the class.",
    "head_branch": "license-header-for-ides",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add project license header information"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f13a14f302d393b27c0",
    "number": 1410,
    "body": "This PR adds the formatter settings discussed here https://github.com/jMonkeyEngine/jmonkeyengine/issues/1098 for vscode.\r\nThe xml file is also compatible with eclipse. I think we could add configurations for more common IDEs  (idea?) as long as they are self contained in identifiable folders (eg no .settings)",
    "head_branch": "formatter",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add vscode config & formatter (#1410)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f14a14f302d393b27c1",
    "number": 1409,
    "body": "",
    "head_branch": "issue1222",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      " Fix mipmaps generation for cubemap framebuffer targets #1222  (#1409)\n\n* Fix mipmaps generation for cubemap framebuffer targets #1222\r\n\r\n* GLRenderer.java: formatting (whitespace around \"else\" keyword)\r\n\r\nCo-authored-by: Stephen Gold <sgold@sonic.net>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f15a14f302d393b27c2",
    "number": 1408,
    "body": "",
    "head_branch": "issue1311",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix memory leaks in render context #1311 (#1408)\n\n* Fix memory leaks in render context\r\n\r\n* NativeObject.java: Codacy says \"fields should be declared at the top\"\r\n\r\n* NativeObject.java: style correction (if statement without braces)\r\n\r\n* NativeObject.java: use diamond notation (redundant type argument)\r\n\r\n* NativeObject.java: provide javadoc for the new method\r\n\r\nCo-authored-by: Stephen Gold <sgold@sonic.net>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f16a14f302d393b27c3",
    "number": 1407,
    "body": "I added some code to allow fading a Particle Emitter's start and end color independently. Previously there was no way to easily fade a particle emitter in/out or to fade it to a different color - you could only set the start and end color. However, in order to smoothly fade out a particle emitter, the start color also needs to be able to be faded. So I added this code to smoothly fade the start and end color to a different color over a set duration in my own version of the ParticleEmitter in my project, and I thought that it might be useful to contribute to the core ParticleEmitter class. \r\n\r\nNo existing code was removed, and I just added methods for initiating the color fading process, as well as some code to the update loop to handle the color fading process.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f17a14f302d393b27c4",
    "number": 1406,
    "body": "In this PR i am going to address the issues that are still stopping us from using lwjgl3 as default backend.\r\n\r\nI'll report important changes below:\r\n\r\n## Better FPS limiter\r\nPorted the Sync class from lwjgl2 to provide a more accurate fps limiter\r\nFix for #1455\r\n\r\n\r\n## InputManager.getKeyName\r\nWorkaround for #942\r\n\r\n-------------------\r\n\r\nThe following will be addressed in a future PR\r\n##~~Removed AWT calls from the core~~\r\n~~The AWT context causes glfw to behave weirdly or break in some platforms. \r\nI moved all the classes that need an awt context into a dedicated package to be adapted for lwjgl3 or outright removed in the future. I removed the SettingsDialog calls from the core, and refactored it to be self contained in its own class. \r\nNow the splash screen needs to be launched manually after creating the AppSettings, to reproduce the old jme behaviour the code will look like this~~\r\n```java\r\n        AppSettings settings=new AppSettings(true);\r\n        \r\n        if(!AWTSettingsDialog.showDialog(settings))return; // Splash screen\r\n\r\n        app.setSettings(settings);\r\n        app.start();\r\n```\r\n\r\n~~Some image loaders still depend on awt, i am not sure if this is a problem, but i guess they can be reworked to use a standalone solution.~~\r\n\r\n## ~~STB based image loader~~\r\n~~I added an alternative to AWTLoader using this pure java port of stb_image `https://github.com/StbJava/StbImageJava`. \r\nWe could of course use the bindings for the official stb_image.h, but the pure java code is more portable. The library is pretty small with no dependencies and under public domain but there is only a private bintray repo for it, so i just copied it in the engine. It seems to be working fine.~~",
    "head_branch": "lwjgl3-patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Lwjgl3 impl patches (#1406)\n\n* Add DONT_CARE refresh rate, port fps sync code from lwjgl2\r\n\r\n* Set name for main lwjgl3 thread\r\n\r\n* Better name for deallocator thread\r\n\r\n* Add InputManager.getKeyName(in) implemented in LWJGL3 backend.\r\n\r\n* getKeyName returns Unknown for DummyKeyInput\r\n\r\n* Add javadoc and fix formatting\r\n\r\n* Throw UnsupportedOperationException for AWTKeyInput.getKeyName"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f18a14f302d393b27c5",
    "number": 1404,
    "body": "Update j3md file to contain a boolean and corresponding define that tells the fragment shader if the ao map is packed in the metallic roughness map",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f19a14f302d393b27c6",
    "number": 1403,
    "body": "Updated frag shader to support reading the AmbientOcclusion value from the Red channel of the packed MetallicRoughness map. \r\nAdds a single boolean define that does this when set to true, so long as a metallic roughness map is also defined.\r\n\r\nIn response to this open issue: \r\nhttps://github.com/jMonkeyEngine/jmonkeyengine/issues/999",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Packing AO in the metallic roughness map (#1403)\n\nPacking AO in the metallic roughness map"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f1aa14f302d393b27c7",
    "number": 1401,
    "body": "All the old methods are kept but deprecated.",
    "head_branch": "framebuff",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Refactoring of framebuffer: Unified way to set render targets, added level field."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f1ba14f302d393b27c8",
    "number": 1400,
    "body": "This pr allows to exclude color copy when using Renderer.copyFrameBuffer. \r\nThe old method is deprecated and redirected to the new one.",
    "head_branch": "depthonlycopy",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow depth only copy with Renderer.copyFrameBuffer"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f1ca14f302d393b27c9",
    "number": 1398,
    "body": "...and fix also android etc. but still, at least we do have that information for desktop.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f1da14f302d393b27ca",
    "number": 1397,
    "body": "The inputs supplied to InOut were unused, previously it always used the Quad ease functions declared earlier in the file.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Actually use ease functions input to InOut when applying"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f1ea14f302d393b27cb",
    "number": 1396,
    "body": "This is a fix for the GltfLoader to properly decode the percent-format uri references in the gltf model file. \r\nSee https://hub.jmonkeyengine.org/t/jme-not-decoding-gltf-uri/43619/12 for discussion. \r\n\r\nThanks,\r\nTrevor",
    "head_branch": "gltf-uri-decoding",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove + escapeing"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f1fa14f302d393b27cc",
    "number": 1392,
    "body": "",
    "head_branch": "patch-4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f20a14f302d393b27cd",
    "number": 1389,
    "body": "Set manifest automatic module name.\r\n\r\nSee: https://hub.jmonkeyengine.org/t/modularize-engine/43578",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[fix]: add automatic module names to manifest"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f21a14f302d393b27ce",
    "number": 1387,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add more license headers to Nehon's gltf loader (#1387)\n\n* Update BinDataKey.java\r\n\r\n* Update BinLoader.java\r\n\r\n* Update CustomContentManager.java\r\n\r\n* Update ExtensionLoader.java\r\n\r\n* Update ExtrasLoader.java\r\n\r\n* Update GlbLoader.java\r\n\r\n* Update GltfLoader.java\r\n\r\n* Update GltfModelKey.java\r\n\r\n* Update GltfUtils.java\r\n\r\n* Update MaterialAdapter.java\r\n\r\n* Update PBRMaterialAdapter.java\r\n\r\n* Update PBRMetalRoughMaterialAdapter.java\r\n\r\n* Update PBRSpecGlossExtensionLoader.java\r\n\r\n* Update PBRSpecGlossMaterialAdapter.java\r\n\r\n* Update TrackData.java"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f22a14f302d393b27cf",
    "number": 1386,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix the typo and improve the work."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f23a14f302d393b27d0",
    "number": 1385,
    "body": "Title says it all",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix for issue #1381"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f24a14f302d393b27d1",
    "number": 1378,
    "body": "This PR adds the ability to remove MorphTargets from Mesh. \r\nIt also adds a helper function to get a single MorphTarget. \r\n\r\n~Trevor",
    "head_branch": "mesh-morph-remove",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add ability to remove morph targets from mesh (#1378)\n\n* Add ability to remove morph targets from mesh\r\n\r\n* Add return values to removeMorphTarget functions\r\n\r\n* Add null saftey\r\n\r\n* Fix typo"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f25a14f302d393b27d2",
    "number": 1377,
    "body": "**Forum Discussion:** https://hub.jmonkeyengine.org/t/bitmaptext-colortags-negativearraysizeexception/43357\r\n\r\n~~~\r\n\r\n        // just for this micro-demo.\r\n        BitmapFont font = new BitmapFont();\r\n        font.setCharSet(new BitmapCharacterSet());\r\n        font.setPages(new Material[0]);\r\n        //  in game it's loaded with AssetManager, of course\r\n\r\n        BitmapText text = new BitmapText(font);\r\n        text.setText(\"\\\\#FFF#\");\r\n~~~\r\n\r\n        Exception in thread \"main\" java.lang.NegativeArraySizeException\r\n            at java.lang.AbstractStringBuilder.<init>(AbstractStringBuilder.java:68)\r\n            at java.lang.StringBuilder.<init>(StringBuilder.java:101)\r\n            at com.jme3.font.ColorTags.setText(ColorTags.java:80)\r\n            at com.jme3.font.Letters.setText(Letters.java:68)\r\n            at com.jme3.font.BitmapText.setText(BitmapText.java:181)\r\n\r\n~~~\r\n// ColorTags.java:80\r\nStringBuilder builder = new StringBuilder(charSeq.length()-7);\r\n~~~\r\nLooks like it expects color tag in `\\#RGBA#` (7 characters) and doesn't count that `\\#RGB#` (6 characters) is valid too.",
    "head_branch": "ColorTags_NegativeArraySize",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "avoid NegativeArraySizeException if input string is \"\\\\#FFF#\""
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f26a14f302d393b27d3",
    "number": 1376,
    "body": "- add getters and setters that should be there just for symmetry reasons\r\n- add missing javadoc (also on existing methods)",
    "head_branch": "improve_AnimComposer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Adding getters/setters to AnimComposer (#1376)\n\n* Add getCurrentAction\r\n\r\n* Add removeCurrentAction (default layer)\r\n\r\n* Add setTime (default layer)\r\n\r\n* Add getTime (default layer)\r\n\r\n* Improve documentation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f27a14f302d393b27d4",
    "number": 1374,
    "body": "`repeating` flag still used and work well.\r\nDiscussion: https://hub.jmonkeyengine.org/t/keyinputevent-isrepeating-not-used-anymore/43318",
    "head_branch": "key_inpu_event_javadoc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "KeyInputEvent javadoc corrected"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f28a14f302d393b27d5",
    "number": 1373,
    "body": "I've caught unpredictable behavior, when tried to use `Camera.contains`, then checked javadoc and found the reason why.\r\nBut javadoc is a bit outdated. This PR updates javadoc according observable behavior.\r\n\r\nOld javadoc:\r\n![image](https://user-images.githubusercontent.com/3194236/83030512-47204300-a03c-11ea-90ac-15f6d2009a1b.png)\r\n\r\nNew javadoc:\r\n![image](https://user-images.githubusercontent.com/3194236/83039357-bdc23e00-a046-11ea-89ca-c4e2dae0028d.png)\r\n\r\nDiscussion: https://hub.jmonkeyengine.org/t/camera-contains-javadoc-outdated/43320",
    "head_branch": "camera_contains_javadoc_updated",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Camera#contains javadoc updated"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f29a14f302d393b27d6",
    "number": 1372,
    "body": "Most files in the engine have headers that only extend the copyright through 2012. This PR updates those files in jme3-core which haven't yet been updated.\r\n2009-2020",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f2aa14f302d393b27d7",
    "number": 1371,
    "body": "Now Github will be able to display the license of the engine.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Replaced Netbeans auto license with real license"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f2ba14f302d393b27d8",
    "number": 1369,
    "body": "# What've done\r\nOBJ model format has markup element to organize objects in groups (without nesting). Currently, this markup is ignored by jME's `OBJLoader` - only shape and material is loaded. This PR implements loading of groups as dedicated children of resulting Spatial. \r\n\r\n# Justification\r\nIn current verison there is no legitimate way of transfering any \"tags\" from model editor to game code with OBJ format models. This feature is vital for loading interactive models from OBJ format. Though OBJ format may be too primitive for serious modern character models, it's easy to support, it's tools-friendly, it's human-friendly, it's still supported by many editors and its capabilities are enough for static geometry modeling such as game areas for non-high-end games.\r\n\r\n# Forum discussion\r\nhttps://hub.jmonkeyengine.org/t/objloader-enhancement-named-groups-support/43243",
    "head_branch": "objloader_groups",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "OBJLoader enhancement: named groups support"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f2ca14f302d393b27d9",
    "number": 1368,
    "body": "This PR restores the \"hooks\" for using JOGL/JOAL as JMonkeyEngine's backend (instead of, say, LWJGL).\r\n\r\nSaid hooks were deleted when jme3-jogl was removed from the Engine by PR #1339. However, the situation has changed. As discussed [at the Forum](https://hub.jmonkeyengine.org/t/merged-dropping-jogl/43046/16), jme3-jogl could be hosted in JogAmp’s repository and maintained by the JogAmp community. Restoring the hooks should enable them to do so without forking JMonkeyEngine.",
    "head_branch": "sgold-jogl-hooks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "restore the JOGL/JOAL hooks (#1368)\n\n* restore the \"hooks\" for using JOGL/JOAL instead of LWJGL as the backend\r\n\r\n* clarify the AppSettings javadoc related to JOGL and JOAL\r\n\r\n* clarify some JmeDesktopSystem diagnostics related to JOGL and JOAL"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f2da14f302d393b27da",
    "number": 1367,
    "body": "Need to work on the AI component for my understanding in the stable release",
    "head_branch": "v3.3",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f2ea14f302d393b27db",
    "number": 1364,
    "body": "The current license seems to be the one we use for Netbeans, but github does not seem to recognize it as on official license. So this PR removes the old one and adds a proper license.\r\nEdit: And maybe the old one should be moved to sdk repo?\r\n ",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f2fa14f302d393b27dc",
    "number": 1359,
    "body": "In order to chip away at this issue, https://github.com/jMonkeyEngine/jmonkeyengine/issues/1001\r\nI've added the proper jME license to the Anim files written by @Nehon (or at least the ones that he committed to, excluding the ones by pspeed which already have the new licenses) . \r\nNow in the previous discussion on that issue, it seemed as if @stephengold was attempting to contact nehon to get his permission. If Nehon replies, then we'll follow from there, but if he doesn't, I say that since he contributed as an engine leader, it would be fine to go ahead and add the licenses.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Proper License to com.jme3.anim files (#1359)\n\n* Update Weights.java\r\n\r\n* Update SkinningControl.java\r\n\r\n* Update SeparateJointModelTransform.java (#2)\r\n\r\n* Update SeparateJointModelTransform.java\r\n\r\n* Update MorphControl.java\r\n\r\n* Update MatrixJointModelTransform.java\r\n\r\n* Update Joint.java\r\n\r\n* Update ArmatureMask.java\r\n\r\n* Update Armature.java\r\n\r\n* Update AnimationMask.java\r\n\r\n* Update AnimTrack.java\r\n\r\n* Update AnimComposer.java\r\n\r\n* Update AnimClip.java\r\n\r\n* Update Weighted.java\r\n\r\n* Update Primitives.java\r\n\r\n* Update JointModelTransform.java\r\n\r\n* Update HasLocalTransform.java\r\n\r\n* Update AnimMigrationUtils.java\r\n\r\n* Update ContainsTweens.java\r\n\r\n* Update LinearBlendSpace.java\r\n\r\n* Update ClipAction.java\r\n\r\n* Update BlendableAction.java\r\n\r\n* Update BlendSpace.java\r\n\r\n* Update BlendAction.java\r\n\r\n* Update BaseAction.java\r\n\r\n* Update Action.java\r\n\r\n* Update AnimTrack.java (#3)\r\n\r\n* Update AnimTrack.java\r\n\r\n* Update ArmatureMask.java\r\n\r\n* Update MatrixJointModelTransform.java\r\n\r\n* Update SeparateJointModelTransform.java\r\n\r\n* Update Weights.java\r\n\r\n* Update Action.java\r\n\r\n* Update BaseAction.java\r\n\r\n* Update ContainsTweens.java\r\n\r\n* Update SkinningControl.java\r\n\r\n* Update AnimTrack.java (#6)\r\n\r\n* Update AnimTrack.java\r\n\r\n* Update BlendAction.java\r\n\r\n* Update BlendSpace.java\r\n\r\n* Update BlendableAction.java\r\n\r\n* Update AnimMigrationUtils.java (#7)\r\n\r\n* Update AnimMigrationUtils.java\r\n\r\n* Update HasLocalTransform.java\r\n\r\n* Update JointModelTransform.java\r\n\r\n* Update Primitives.java\r\n\r\n* Update Weighted.java\r\n\r\n* Update ClipAction.java\r\n\r\n* Update AnimInterpolator.java\r\n\r\n* Update AnimInterpolators.java\r\n\r\n* Update FrameInterpolator.java\r\n\r\n* Update LinearBlendSpace.java\r\n\r\n* Revert AnimTrack.java to original state.\r\n\r\n* Delete AnimTrack.java\r\n\r\n* Add files via upload"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f30a14f302d393b27dd",
    "number": 1358,
    "body": "See #1357",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Set the minimum required OpenGL profiles for the geometry and tessellation shader test cases. Resolves #1357"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f31a14f302d393b27de",
    "number": 1352,
    "body": "As jBullet is about 10 years out of date, and jMonkey has a continually updated physics contribution, Minie, it is about time to part ways.\r\nFarewell jBullet! ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f32a14f302d393b27df",
    "number": 1348,
    "body": "Now that pspeed has moved blender importer to its own separate project; it seems fitting to remove the jme3-blender directory from the engine.\r\nAnd hopefully no more spamming commits this time.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f33a14f302d393b27e0",
    "number": 1344,
    "body": "Simplification using Tweens methods instead of NoLoopAction inner class",
    "head_branch": "patch-8",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Using Tweens methods instead of the inner class\n\nSimplification using Tweens methods instead of NoLoopAction inner class"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f34a14f302d393b27e1",
    "number": 1343,
    "body": "fixes #1340 \r\n\r\nCheck if the NB_PROBES identifier is set, if not set a default value of 0.\r\n\r\nIf needed I can remove the test class as I don't think it's really 'helpful' in this case, as it only loads and displays a model.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Clean up the test case and add some more context. #1340"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f35a14f302d393b27e2",
    "number": 1342,
    "body": "See forum topic: \r\nhttps://hub.jmonkeyengine.org/t/solved-playing-audio-from-audiobuffer-in-audionode-causes-jre-to-die/43091/12",
    "head_branch": "plassMa/checkBufferDirect",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixes #1341: AudioBuffer.updateData only allows direct buffers (#1342)\n\n* only allowing direct buffers now, see: https://hub.jmonkeyengine.org/t/solved-playing-audio-from-audiobuffer-in-audionode-causes-jre-to-die/43091/12\r\n\r\n* style correction\r\n\r\nCo-authored-by: Stephen Gold <sgold@sonic.net>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f36a14f302d393b27e3",
    "number": 1339,
    "body": "",
    "head_branch": "rm_jogl",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove jogl  (#1339)\n\n* Remove JOGL\r\n\r\n* Update build.gradle\r\n\r\n* Update AppSettings.java\r\n\r\n* Update settings.gradle\r\n\r\n* Update TestMultipleApplications.java\r\n\r\n* Update build.gradle\r\n\r\n* Update JmeDesktopSystem.java\r\n\r\n* Update AppSettings.java\r\n\r\n* Update package-info.java\r\n\r\n* Update TestApplet.java\r\n\r\n* Update HelloOpenCL.java\r\n\r\n* Update TestContextSwitching.java\r\n\r\n* Update TestOpenCLLibraries.java\r\n\r\n* Update TestVertexBufferSharing.java\r\n\r\n* Update TestWriteToTexture.java\r\n\r\n* Update TestMultiPostWater.java\r\n\r\nCo-authored-by: Mike Burnett <mikejme4@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f37a14f302d393b27e4",
    "number": 1338,
    "body": "… twice.\r\n\r\nRelevent forum topic: \r\nhttps://hub.jmonkeyengine.org/t/solved-gltf-error-with-textured-mesh/43079",
    "head_branch": "Ali-RS-patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixed an issue with AndroidNativeImageLoader which was opening stream twice. (#1338)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f38a14f302d393b27e5",
    "number": 1337,
    "body": "UnsupportedImageFormatException added.\r\nIt's inhereted from RendererException, nothing will breaks.",
    "head_branch": "fix-1313",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f39a14f302d393b27e6",
    "number": 1335,
    "body": "Lots of code that did nothing in old test (on feet, hand). Only eft hand anim with the bone anim in simpleUpdate works. So I rework the test to do how actionSquence work and manipulate Armature and Joint with ArmatureMask apply.\r\nSo I think there is a bug in ArmatureDebugger when apply PointSize in material. In the render view all points on armature debug have same size.",
    "head_branch": "patch-7",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Removes tabs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f3aa14f302d393b27e7",
    "number": 1334,
    "body": "Migrate SkeletonControl to new SkinningControl",
    "head_branch": "patch-5",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Migrate TestSkeletonControlRefresh to new anim system (#1334)\n\n* Migrate TestSkeletonControlRefresh to new anim system\r\n\r\nMigrate SkeletonControl to new SkinningControl\r\n\r\n* Update TestSkeletonControlRefresh.java\r\n\r\n* Update TestSkeletonControlRefresh.java\r\n\r\n* Update TestSkeletonControlRefresh.java\r\n\r\n* Update TestSkeletonControlRefresh.java\r\n\r\n* Update TestSkeletonControlRefresh.java\r\n\r\n* Update TestSkeletonControlRefresh.java\r\n\r\n* Update TestSkeletonControlRefresh.java\r\n\r\n* Eleminate inner class\r\n\r\n* Update TestSkeletonControlRefresh.java\r\n\r\n* Update TestSkeletonControlRefresh.java"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f3ba14f302d393b27e8",
    "number": 1333,
    "body": "I applied some changes to have the same rendering as the original test (Add static inner class LoopAction)",
    "head_branch": "patch-6",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Migrate TestOgreAnim to new anim system (#1333)\n\n* Migrate TestOgreAnim to new anim system\r\n\r\n* Removing tabs\r\n\r\n* Update TestOgreAnim.java"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f3ca14f302d393b27e9",
    "number": 1332,
    "body": "Migrate TestSkeletonControlRefresh to new Anim system",
    "head_branch": "patch-5",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f3da14f302d393b27ea",
    "number": 1331,
    "body": "",
    "head_branch": "patch-4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Migrate TestBlenderObjectAnim to new anim system"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f3ea14f302d393b27eb",
    "number": 1330,
    "body": "It fixes error of loading assets in examples.\r\n",
    "head_branch": "fix-examples",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixes error of loading assets"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f3ea14f302d393b27ec",
    "number": 1327,
    "body": "Migrate to the new animation system, migration of old Spatial object containing animation and adding method to list all animation name in AnimComposer.",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Migrate TestBlenderAnim to the new anim system\n\nMigrate to the new animation system, migration of old Spatial object containing animation and adding method to list all animation name in AnimComposer."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f3fa14f302d393b27ed",
    "number": 1326,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Migrate TestCutomAnim to the new Animation system"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f40a14f302d393b27ee",
    "number": 1325,
    "body": "Remove all deprecated class and migrate to the new animation system.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Migrate TestSpatialAnim to the new Anim class\n\nRemove all deprecated class and migrate to the new animation system."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f41a14f302d393b27ef",
    "number": 1324,
    "body": "THIS PR IS INCOMPLETE:\r\n\r\nTo make way for Minie physics to become the default physics library of jME, I've removed all Bullet/jBullet libs from the engine.\r\nOnce finished, a new PR verified to build properly will be submitted.",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f43a14f302d393b27f0",
    "number": 1323,
    "body": "This fixes https://github.com/jMonkeyEngine/jmonkeyengine/issues/1297 while retaining previous functionality. Verified using russian locale. Generates something like this:\r\n2020-04-05 13:01:11.588 6397-6439/com.jarlure.paperdorm I/System.out: KeyCode=0,Charactors=р\r\n2020-04-05 13:01:11.588 6397-6439/com.jarlure.paperdorm I/System.out: KeyChar=��",
    "head_branch": "android_fixes_2004",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix for #1297 (#1323)\n\n* fix for #1297\r\n\r\n* fix for #1297\r\n\r\n* fixed line endings?\r\n\r\n* Revert \"fixed line endings?\"\r\n\r\nThis reverts commit 905356ac3ea3e2f56dcd04c88f32e217d25b5581.\r\n\r\n* fixed line endings?\r\n\r\n* fixed line endings?\r\n\r\n* fixed line endings?\r\n\r\n* fixed line endings?\r\n\r\n* Update AndroidTouchInput.java\r\n\r\nusing dos2unix\r\n\r\n* ...\r\n\r\n* ...\r\n\r\n* unix2dos AndroidTouchInput.java\r\n\r\n* undo a couple more changes not related to PR 1323\r\n\r\nCo-authored-by: Stephen Gold <sgold@sonic.net>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f44a14f302d393b27f1",
    "number": 1322,
    "body": "Background: https://github.com/MeFisto94/test-spotbugs/runs/560327969?check_suite_focus=true#step:5:1490\r\n\r\nOn MESA with Debug Mode or Assertions on, we get a GL_INVALID_ENUM at Line 510 (`getInteger(GL_MAX_GEOMETRY_SHADER_...)`).\r\n\r\nI assume this is because this device supports SSBOs as an extension while still being on OpenGL 3.1. For most non-strict-real-gpus, SSBOs are only available with a much higher GL Version.\r\n\r\nAnyway, this is my blind poke at this, I will re-run the above test, but I'd appreciate if someone finds some official source about when the Integers can be `getted`. \r\n\r\nAlso note the `GL_ARB_geometry_shader_4`, I hope I did it right, it's not a `core extension` but an `extension` and I've read some stuff that those `_4` usually had a completely different API.",
    "head_branch": "fix-mesa-invalid-enum-ssbo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1322 from MeFisto94/fix-mesa-invalid-enum-ssbo\n\nFixes SSBO causing GL_INVALID_ENUM in Debug Mode"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f45a14f302d393b27f2",
    "number": 1321,
    "body": " - GLSLCompat now implements mat3(mat4) and determinant() and inverse() for mat2 and mat3\r\n - PBR.glslib uses this functions again instead of one-off workarounds",
    "head_branch": "fix-pbr-opengl2-part2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1321 from MeFisto94/fix-pbr-opengl2-part2\n\nFixing PBR on <= GLSL 130:"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f46a14f302d393b27f3",
    "number": 1320,
    "body": "Sorry, I couldn't resist but to format the nearby code a bit, specifically the missing braces around Display.isCreated.\r\n\r\nSorry for the Review Request, Paul, but together with the issue, it should just be a matter of a few minutes.",
    "head_branch": "fix-lwjgl3-double-stop",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1320 from MeFisto94/fix-lwjgl3-double-stop\n\nFixes #1319 - LWJGL2: start(true) should not freeze when context could not be initialized"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f47a14f302d393b27f4",
    "number": 1318,
    "body": "… GLSL110\r\n\r\nSince I am not shader savy, please check all the relevant things for me (e.g. is L146 even needed? does the index refer to the individual column/row?).\r\n\r\nI could however confirm that it does compile on my Compat Profile.",
    "head_branch": "fix-pbr-opengl2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1318 from MeFisto94/fix-pbr-opengl2\n\nFixes #1304 - Don't use mat3() constructor to keep compatibility with…"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f47a14f302d393b27f5",
    "number": 1317,
    "body": "This fixes some bugs on the current UBO/SSBO implementation and extends/rewrites part of it to be more user friendly.\r\n\r\nUsage:\r\n1. Make a class that implements Struct and defines the fields\r\n```java\r\npublic static class MyStruct implements Struct<Void>{ \r\n        public final StructField<Vector3f> a=new StructField<Vector3f>(0 /*position of the field in the struct*/,new Vector3f()/*default value*/);\r\n        public final StructField<Float> b=new StructField<Float>(1,0f);\r\n\r\n       @Override public Void get() {return null;}\r\n}\r\n```\r\n\r\n2. Create an instance and set the fields\r\n```java\r\nMyStruct s=new MyStruct();\r\ns.a.getValueForUpdate().set(0,0,0); /* Get the current value and mark for update, this is useful to modify mutable objects*/\r\ns.b.setValue(1f); /* Set value and mark for update*/\r\n//...\r\n```\r\n\r\n3. Create the buffer object\r\n```java\r\nBufferObject  bo=new BufferObject(StructuredBufferSTD140Layout.class);\r\nbo.updateData(s);\r\n```\r\n\r\n4. Define in j3md\r\n```\r\nMaterialDef TestMat {\r\n    MaterialParameters {    \r\n        UniformBufferObject MyBufferObject\r\n    }\r\n....\r\n}\r\n```\r\n\r\n5. Define in the shader\r\n```glsl\r\nlayout (std140) uniform m_MyBufferObject {\r\n    vec3 a;\r\n    float b;\r\n}\r\n```\r\n\r\n6. Create and configure the material\r\n```java\r\nMaterial mat=...;\r\nmat.setUniformBufferObject(\"MyBufferObject\",bo);\r\n```\r\n\r\n7. Update the buffer object as many times as you want, it will automatically take care of updating only the fields that changed and the memory used by them\r\n```java\r\n...\r\nbo.updateData(s);\r\ns.b.setValue(2f);\r\nbo.updateData(s);\r\n...\r\n```\r\n\r\n\r\n",
    "head_branch": "ubo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f48a14f302d393b27f6",
    "number": 1315,
    "body": "This will greatly improve performance when not all instances are inside the camera view. \r\n\r\nAnd here is a test result I did with TestInstanceNode with 3600 geometries:\r\n\r\n    Instancing Off:\r\n        All geometries inside camera view: 41 fps\r\n        Only a few objects inside camera view: 890 fps\r\n\r\n    Instancing On (no culling):\r\n        All geometries inside camera view: 210 fps\r\n        Only a few objects inside camera view: 226 fps\r\n\r\n    Instancing On (with culling):\r\n        All geometries inside camera view: 217 fps\r\n        Only a few objects inside camera view: 761 fps\r\n\r\nSee the topic on forum: \r\nhttps://hub.jmonkeyengine.org/t/question-about-geometry-instancing/43023?u=ali_rs\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Check culling on the instanced geometries. (#1315)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f49a14f302d393b27f7",
    "number": 1314,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f4aa14f302d393b27f8",
    "number": 1312,
    "body": "When I call jme3tools.converters.ImageToAwt.DecodeParams#convert with an illgeal image format, it throws UnsupportedOperationException. So in my code, I catch this exception to handle unsupported images. However, I find that some other methods do not throw this exception when image is unsupported. For example, com.jme3.renderer.opengl.TextureUtil#getImageFormatWithError throws RendererException when image is unsupported:\r\n\r\n`public GLImageFormat getImageFormatWithError(Format fmt, boolean isSrgb) {\r\n\r\n        GLImageFormat glFmt = getImageFormat(fmt, isSrgb);\r\n\r\n...\r\n\r\n        if (glFmt == null) { \r\n  \r\n          throw new RendererException(\"Image format '\" + fmt + \"' is unsupported by the video hardware.\");\r\n  \r\n      }\r\n\r\n        return glFmt;\r\n\r\n    }\r\n    ` \r\n\r\nCan the thrown exception of getImageFormatWithError be modified, so my code is cleaner?",
    "head_branch": "v3.3",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f4ba14f302d393b27f9",
    "number": 1310,
    "body": "Fix for issue796 https://github.com/jMonkeyEngine/jmonkeyengine/issues/796\r\nJOGL support was simply removed due to its unpopularity and numerous bugs.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f4ca14f302d393b27fa",
    "number": 1308,
    "body": "Ok, sorry for the branch name, it was intended to fix issue #893 but it really doesn't. But it does make that issue better actually. Only the starting status (camera) is broken anymore there.\r\n\r\nSo what this does is:\r\n- Fixes #1191 \r\n- The fix is to add the callbacks later that they don't trigger on window creation process, there should be no need as it looks that we actually have the correct resolution and even the correct size canvas on HDPI situations, so everything should be fine\r\n- Fixes the resizing altogether for LWJGL 3, it wasn't really working at all. At least for some configurations the window size callback doesn't seem to trigger at all... Windows 10 with NVIDIA seems to be at least said configuration\r\n\r\nThis is made in accordance of https://www.glfw.org/docs/latest/window_guide.html#window_fbsize. I added some comments as it seems that the window size callback (the old) doesn't really work as expected. This maybe a bug or just a behavior difference between LWJGL 2 and 3. This fix now makes LWJGL 2 and 3 behave the same.",
    "head_branch": "issue-893",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix for resizing the window (issue 1191) (#1308)\n\n* Listen for framebuffer size callbacks and set the resolution from that\r\n\r\n* Also check the window size on the framebuffer size callback"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f4da14f302d393b27fb",
    "number": 1306,
    "body": "This commit allows EnvironmentCamera users to access the ViewPorts used\r\nfor rendering the snapshots. This allows incorporating screenspace and other\r\nSceneProcessor-based effects into the snapshots as well as the scene geometry.",
    "head_branch": "envcam-viewports",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1306 from jMonkeyEngine/envcam-viewports\n\nExpose ViewPorts"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f4ea14f302d393b27fc",
    "number": 1302,
    "body": "",
    "head_branch": "normalize-equals",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #1289 Matrix3f/Matrix4f equals() should require an exact class match (#1302)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f4fa14f302d393b27fd",
    "number": 1300,
    "body": "Adds ColorRGBA to the serializer. \r\nAdds Quaternion to the serializer.\r\nI was surprised that neither of these were in there.\r\n\r\nEdit: If there are others that people would like me to add in pr, I will do so. ",
    "head_branch": "color-serializer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f50a14f302d393b27fe",
    "number": 1299,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "BufferUtils: resolve issue #1288 (rewrite isDirect()) (#1299)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f51a14f302d393b27ff",
    "number": 1298,
    "body": "…and so is purely optional\r\n\r\nSo this is a controverse topic, specifically because the opinions on static analysis tools vary.\r\nLet me outline the reason behind this change:\r\nIn the future we might have a bot comparing the spotbugs results of a PR with the \"expected\" results, highlighting additions or removals. This should be purely supportive, just a hint when reviewing a PR.\r\n\r\nSince SpotBugs needs to be run on .class files and since some folks might want to run it locally, I've decided to add it as a gradle plugin, which adds the `spotbugsMain` task to the root project and all (expect native) subprojects.\r\n\r\nOne Cautious Word: I had to upgrade the android build tools, because they supplied an outdated Guava Version, which caused spotbugs to fail. I straight upgraded to the latest version released in december and compatible with our current gradle version (it requires our current gradle version as minimum).\r\nI did _NOT_ check the android build after that, but the android compilation succeeded so at worst it's runtime errors which we might have to check in the future.",
    "head_branch": "add-spotbugs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added a Spot Bugs Implementation, which does not cause tasks to fail and so is purely optional"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f52a14f302d393b2800",
    "number": 1296,
    "body": "Hello monkeys,\r\nI have implemented a simple way to monitor network traffic from within spider monkey. \r\n\r\nExample usage on client:\r\n```\r\n@Override\r\n    public void simpleUpdate(float tpf) {\r\n        oneSec += tpf;\r\n        if (oneSec > 1) {\r\n            oneSec = 0;\r\n            System.out.println(\"b/s rx=\" + myClient.getCounters().getRx() + \" tx=\" + myClient.getCounters().getTx());\r\n            myClient.getCounters().reset();\r\n        }\r\n```\r\n\r\nExample on server:\r\n```\r\n@Override\r\n    public void simpleUpdate(float tpf) {\r\n        oneSec += tpf;\r\n        if (oneSec > 1) {\r\n            oneSec = 0;\r\n            for (HostedConnection conn : clients) {\r\n                System.out.println(\"b/s \" + conn.getAddress() + \" rx=\" + conn.getCounters().getRx() + \" tx=\" + conn.getCounters().getTx());\r\n                conn.getCounters().reset();\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\nI was wondering your thoughts on this implementation. ",
    "head_branch": "jme-network-counters",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f53a14f302d393b2801",
    "number": 1287,
    "body": "Sorry for that catchy PR title, but it's really just minor things I stumbled upon while working on these classes.\r\nTalking about JmeVersion: When the file cannot be found, props.load(null) is called which throws a NPE, so the IOException only happens when reading is not possible for some reason, a very rare case.",
    "head_branch": "fix-small-things",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix small things (#1287)\n\n* JmeVersion: Don't throw a NullPointerException when version.properties can't be found.\r\n\r\n* ImplHandler: Reduce Code-Duplication by using a multi-catch statement"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f54a14f302d393b2802",
    "number": 1285,
    "body": "remove unnecessary tests for null, discovered using NetBeans",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "remove unnecessary casts and tests for null, discovered using NetBeans (#1285)\n\n* remove unnecessary tests for null, discovered using NetBeans\r\n\r\n* jme3-core: remove unnecessary casts\r\n\r\n* jme3-examples: remove unnecessary casts\r\n\r\n* jme3-vr: remove unnecessary casts\r\n\r\n* jme-plugins: remove unnecessary casts\r\n\r\n* jme3-terrain: remove unnecessary casts\r\n\r\n* jme3-desktop: remove unnecessary casts\r\n\r\n* jme3-android: remove unnecessary casts\r\n\r\n* remove unnecessary casts, discovered using NetBeans\r\n\r\n* TerrainQuad: back out one casting delta that's not a removal\r\n\r\n* TerrainPatch: simplify generateLodEntropies() after removal of the cast\r\n\r\n* TerrainPatch: simplify reIndexGeometry() after removal of the cast"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f55a14f302d393b2803",
    "number": 1282,
    "body": "Back in December, @pspeed42 gave permission to re-license the files @Nehon copied from Simsilica LLC, so we can address another tiny sliver of issue #1001.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1282 from stephengold/master\n\nre-assign Simsilica LLC copyrights with Paul's permission (issue #1001)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f56a14f302d393b2804",
    "number": 1281,
    "body": "",
    "head_branch": "fix-openal-soft-deadlink",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix openal-soft dead link"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f57a14f302d393b2805",
    "number": 1279,
    "body": "This is much like the previous PR #1256 but this time it adds another two gems.\r\nFor platforms where a dedicated profiler isn't available or for a quick look, we actually already have a timing code, it was just hidden behind an AppSetting.\r\n\r\nMight again be something for @mitm001 \r\nI didn't try these settings out yet, but in #1278 there are a few potential problems on non lwjgl platforms, which will be fixed, though.\r\n\r\nEdit: For the curious, here is a print out of the blue quad with Graphics Timing:\r\n```\r\nFeb 02, 2020 8:40:45 PM com.jme3.system.JmeDesktopSystem initialize\r\nINFORMATION: Running on jMonkeyEngine 3.3.0-SNAPSHOT\r\n * Branch: fix-lwjgl3-key-input\r\n * Git Hash: 68fb1af\r\n * Build Date: 2019-12-28\r\nFeb 02, 2020 8:40:46 PM com.jme3.system.lwjgl.LwjglContext printContextInitInfo\r\nINFORMATION: LWJGL 3.2.3 build 13 context running on thread pool-1-thread-1\r\n * Graphics Adapter: GLFW 3.4.0 Win32 WGL EGL OSMesa VisualC DLL\r\nGL call glGetString took 2249us to execute!\r\nGL call glGetString took 5305us to execute!\r\nFeb 02, 2020 8:40:46 PM com.jme3.renderer.opengl.GLRenderer loadCapabilitiesCommon\r\nINFORMATION: OpenGL Renderer Information\r\n * Vendor: NVIDIA Corporation\r\n * Renderer: GeForce GTX 1060 6GB/PCIe/SSE2\r\n * OpenGL Version: 4.6.0 NVIDIA 441.12\r\n * GLSL Version: 4.60 NVIDIA\r\n * Profile: Compatibility\r\nFeb 02, 2020 8:40:46 PM com.jme3.asset.AssetConfig loadText\r\nWARNUNG: Cannot find loader com.jme3.scene.plugins.ogre.MeshLoader\r\nFeb 02, 2020 8:40:46 PM com.jme3.asset.AssetConfig loadText\r\nWARNUNG: Cannot find loader com.jme3.scene.plugins.ogre.SkeletonLoader\r\nFeb 02, 2020 8:40:46 PM com.jme3.asset.AssetConfig loadText\r\nWARNUNG: Cannot find loader com.jme3.scene.plugins.ogre.MaterialLoader\r\nFeb 02, 2020 8:40:46 PM com.jme3.asset.AssetConfig loadText\r\nWARNUNG: Cannot find loader com.jme3.scene.plugins.ogre.SceneLoader\r\nFeb 02, 2020 8:40:46 PM com.jme3.asset.AssetConfig loadText\r\nWARNUNG: Cannot find loader com.jme3.scene.plugins.blender.BlenderModelLoader\r\nFeb 02, 2020 8:40:46 PM com.jme3.asset.AssetConfig loadText\r\nWARNUNG: Cannot find loader com.jme3.scene.plugins.fbx.FbxLoader\r\nFeb 02, 2020 8:40:46 PM com.jme3.asset.AssetConfig loadText\r\nWARNUNG: Cannot find loader com.jme3.scene.plugins.gltf.GltfLoader\r\nFeb 02, 2020 8:40:46 PM com.jme3.asset.AssetConfig loadText\r\nWARNUNG: Cannot find loader com.jme3.scene.plugins.gltf.BinLoader\r\nFeb 02, 2020 8:40:46 PM com.jme3.asset.AssetConfig loadText\r\nWARNUNG: Cannot find loader com.jme3.scene.plugins.gltf.GlbLoader\r\nFeb 02, 2020 8:40:46 PM com.jme3.asset.AssetConfig loadText\r\nWARNUNG: Cannot find loader com.jme3.audio.plugins.OGGLoader\r\nFeb 02, 2020 8:40:46 PM com.jme3.audio.openal.ALAudioRenderer initOpenAL\r\nINFORMATION: Audio Renderer Information\r\n * Device: OpenAL Soft\r\n * Vendor: OpenAL Community\r\n * Renderer: OpenAL Soft\r\n * Version: 1.1 ALSOFT 1.19.1\r\n * Supported channels: 64\r\n * ALC extensions: ALC_ENUMERATE_ALL_EXT ALC_ENUMERATION_EXT ALC_EXT_CAPTURE ALC_EXT_DEDICATED ALC_EXT_disconnect ALC_EXT_EFX ALC_EXT_thread_local_context ALC_SOFT_device_clock ALC_SOFT_HRTF ALC_SOFT_loopback ALC_SOFT_output_limiter ALC_SOFT_pause_device\r\n * AL extensions: AL_EXT_ALAW AL_EXT_BFORMAT AL_EXT_DOUBLE AL_EXT_EXPONENT_DISTANCE AL_EXT_FLOAT32 AL_EXT_IMA4 AL_EXT_LINEAR_DISTANCE AL_EXT_MCFORMATS AL_EXT_MULAW AL_EXT_MULAW_BFORMAT AL_EXT_MULAW_MCFORMATS AL_EXT_OFFSET AL_EXT_source_distance_model AL_EXT_SOURCE_RADIUS AL_EXT_STEREO_ANGLES AL_LOKI_quadriphonic AL_SOFT_block_alignment AL_SOFT_deferred_updates AL_SOFT_direct_channels AL_SOFTX_events AL_SOFTX_filter_gain_ex AL_SOFT_gain_clamp_ex AL_SOFT_loop_points AL_SOFTX_map_buffer AL_SOFT_MSADPCM AL_SOFT_source_latency AL_SOFT_source_length AL_SOFT_source_resampler AL_SOFT_source_spatialize\r\nFeb 02, 2020 8:40:46 PM com.jme3.audio.openal.ALAudioRenderer initOpenAL\r\nINFORMATION: Audio effect extension version: 1.0\r\nFeb 02, 2020 8:40:46 PM com.jme3.audio.openal.ALAudioRenderer initOpenAL\r\nINFORMATION: Audio max auxiliary sends: 2\r\nGL call glTexParameteri took 23035us to execute!\r\nGL call glShaderSource took 1803us to execute!\r\n--- TOTAL TIME SPENT IN GL CALLS: 46554us\r\n\tglTexParameteri               23517us\r\n\tglGetString                   11173us\r\n\tglShaderSource                3935us\r\n\tglLinkProgram                 1036us\r\n\tglTexImage2D                  960us\r\n\tglDrawRangeElements           764us\r\n\tglBufferData                  714us\r\n\tglVertexAttribPointer         485us\r\n\tglGetUniformLocation          482us\r\n\tglGetInteger                  419us\r\n\tglBindBuffer                  402us\r\nGL call glBindBuffer took 21938us to execute!\r\n--- TOTAL TIME SPENT IN GL CALLS: 1086us\r\n\tglBindBuffer                  809us\r\n\tglClear                       54us\r\n\tglDrawRangeElements           49us\r\n\tglVertexAttribPointer         28us\r\n\tglUniformMatrix4              23us\r\n\tglUniform4f                   20us\r\n\tglUseProgram                  19us\r\n\tglDepthRange                  16us\r\n\tglBufferData                  15us\r\n\tglDisableVertexAttribArray    13us\r\n\tglBindTexture                 12us\r\nGL call glVertexAttribPointer took 20255us to execute!\r\n--- TOTAL TIME SPENT IN GL CALLS: 897us\r\n\tglVertexAttribPointer         736us\r\n\tglDrawRangeElements           38us\r\n\tglClear                       38us\r\n\tglUniformMatrix4              15us\r\n\tglBindBuffer                  13us\r\n\tglUseProgram                  11us\r\n\tglBufferData                  10us\r\n\tglUniform4f                   6us\r\n\tglDepthRange                  6us\r\n\tglBindTexture                 5us\r\n\tglDisable                     4us\r\n--- TOTAL TIME SPENT IN GL CALLS: 155us\r\n\tglClear                       35us\r\n\tglDrawRangeElements           35us\r\n\tglUseProgram                  12us\r\n\tglUniformMatrix4              12us\r\n\tglVertexAttribPointer         11us\r\n\tglBindBuffer                  11us\r\n\tglUniform4f                   8us\r\n\tglDepthRange                  7us\r\n\tglBindTexture                 5us\r\n\tglDisableVertexAttribArray    4us\r\n\tglDisable                     3us\r\n--- TOTAL TIME SPENT IN GL CALLS: 167us\r\n\tglDrawRangeElements           39us\r\n\tglClear                       39us\r\n\tglVertexAttribPointer         13us\r\n\tglUniformMatrix4              12us\r\n\tglBindBuffer                  12us\r\n\tglUseProgram                  12us\r\n\tglUniform4f                   8us\r\n\tglDepthRange                  7us\r\n\tglBindTexture                 6us\r\n\tglDisable                     4us\r\n\tglEnableVertexAttribArray     3us\r\n--- TOTAL TIME SPENT IN GL CALLS: 165us\r\n\tglDrawRangeElements           39us\r\n\tglClear                       39us\r\n\tglBindBuffer                  15us\r\n\tglVertexAttribPointer         12us\r\n\tglUseProgram                  11us\r\n\tglUniformMatrix4              10us\r\n\tglUniform4f                   8us\r\n\tglDepthRange                  7us\r\n\tglBindTexture                 5us\r\n\tglEnable                      4us\r\n\tglDisable                     4us\r\n\r\n```\r\n\r\nGraphicsTracing looks similar but outputs the exact commands once per frame, with the following example showing the extension detection during startup\r\n```\r\nGetString(VERSION) = \"4.6.0 NVIDIA 441.12\"\r\nGetString(SHADING_LANGUAGE_VERSION) = \"4.60 NVIDIA\"\r\nGetInteger(DRAW_BUFFER, out=BACK)\r\nGetInteger(READ_BUFFER, out=BACK)\r\nGetInteger(NUM_EXTENSIONS, out=389)\r\nGetString(EXTENSIONS, 0) = \"GL_AMD_multi_draw_indirect\"\r\nGetString(EXTENSIONS, 1) = \"GL_AMD_seamless_cubemap_per_texture\"\r\nGetString(EXTENSIONS, 2) = \"GL_AMD_vertex_shader_viewport_index\"\r\n```",
    "head_branch": "appsettings-graphics-tracing-and-timeing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add two convenience flags to AppSettings: GraphicsTrace and GraphicsTiming. (#1279)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f58a14f302d393b2806",
    "number": 1276,
    "body": "Use a reflection-based approach to call checkError() after every call to the openGL API to reduce Code Duplication and increase Maintainability, while also fixing the regression caused by GLDebugDesktop extending from GLDebugES and thus making the Renderer think it is on mobile.\r\n\r\nAs discussed, if I should make this version more dynamic to support GLFbo and GLExt as separate GLDebugDesktop instances, I can do that, but having the if statement probably isn't _that_ bad, but I can see that it is better and more flexible and especially gets rid of the exception in line 73",
    "head_branch": "fix-gldebug",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1276 from MeFisto94/fix-gldebug\n\nFixes #1272 - Improve GLDebugDesktop by reducing manual overrides"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f58a14f302d393b2807",
    "number": 1274,
    "body": "The source code for `TextureGeneratorWood`  indicates that its license is the GNU General Public License. Compliance with the license would compel JME and software derived from JME to offer the same license. Some game developers would find that unacceptable.\r\n\r\nThe source code lists \"Marcin Roguski (Kaelthas)\" as the author. On 27 January 2020, I attempted to communicate with Kaelthas (using both e-mail and the JME Forum) to ask why the file was GPL'd. I've received no response.\r\n\r\njme-blender is no longer actively maintained, and even when it was, I believe the texture generator was rarely used. Removing the contaminated source code seems a prudent course of action.\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "jme3-blender: remove TextureGeneratorWood and its dependencies (#1274)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f59a14f302d393b2808",
    "number": 1273,
    "body": "Should address issue #1267 \r\n\r\nSee forum discussion page : https://hub.jmonkeyengine.org/t/pbrlighting-has-two-postshadow-techniques/42778",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Removed extra PostShadow Technique from PBRLighting.j3md (#1273)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f5aa14f302d393b2809",
    "number": 1271,
    "body": "One file was reformatted completely, sorry about that. It was so weirdly indented. Better to ignore white spaces.\r\n\r\nAdded Override annotations, finals, some cleanup and better null checks (getCurrentScreen in couple of files caused a warning).",
    "head_branch": "nifty-cleanup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added Override annotations, finals, some cleanup and better null checks (#1271)\n\n* Added Override annotations, finals, some cleanup and better null checks\r\n\r\n* More general null check\r\n\r\n* Follow naming conventions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f5ca14f302d393b280a",
    "number": 1270,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add missing @Override annotations (#1270)\n\n* jme3-core: add the missing @Override annotations\r\n\r\n* jme3-desktop: add the missing @Override annotations\r\n\r\n* jme3-bullet and jme3-jbullet: add the missing @Override annotations\r\n\r\n* jme3-effects: add the missing @Override annotations\r\n\r\n* jme3-terrain: add the missing @Override annotations\r\n\r\n* jme3-examples: add the missing @Override annotations\r\n\r\n* jme3-android: add the missing @Override annotations\r\n\r\n* jme3-blender: add the missing @Override annotations\r\n\r\n* jme3-ios: add the missing @Override annotations\r\n\r\n* jme3-jogg and jme3-jogl: add the missing @Override annotations\r\n\r\n* jme3-plugind: add the missing @Override annotations\r\n\r\n* jme3-lwjgl and jme3-lwjgl3: add the missing @Override annotations\r\n\r\n* jme3-networking: add the missing @Override annotations\r\n\r\n* jme3-vr: add the missing @Override annotations"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f5da14f302d393b280b",
    "number": 1269,
    "body": "This fixes #801. Fix is like suggested in the forum post referred in the issue. Fixes for both LWJGL 2 & 3. Basically now all the initial values are in the init function so the same are always used. That seems to do the trick.",
    "head_branch": "issue-801",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Issue 801 (#1269)\n\n* Test case for issue #801\r\n\r\n* Reset the context with the initial values"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f5da14f302d393b280c",
    "number": 1268,
    "body": "Fixes the input issue mentioned in issue #1013 . It of course happens on LWJGL3 universally. Not a Nifty thing.\r\n\r\nThe inputs are very much tied to the window context.",
    "head_branch": "lwjgl3-restart-input-handle",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Lwjgl3 restart input handle (#1268)\n\n* Reinit inputs on context restart\r\n\r\n* Added test issue from issue #1013\r\n\r\n* Verify that the inputs are already initialized"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f5ea14f302d393b280d",
    "number": 1265,
    "body": "Added a PreShadowPBR.frag and PostShadowPBR.frag shader to support shadows for PBR materials with transparency, and updated techniques in PBRLighting.j3md to use them, as discussed in this thread\r\n\r\nhttps://hub.jmonkeyengine.org/t/simarboreal-pbr-shaders-shadow-issue/42766/8",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PreShadow & PostShadow Support for PBRLighting.j3md (#1265)\n\n* Update PBRLighting.j3md\r\n\r\n* Create PreShadowPBR.frag\r\n\r\n* Create PostShadowPBR.frag"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f5fa14f302d393b280e",
    "number": 1264,
    "body": "Changed m_DiffuseMap to m_BaseColorMap to properly support shadows for transparent PBR materials.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f60a14f302d393b280f",
    "number": 1262,
    "body": "Actually mind the comment that has been removed.\r\nEarlier versions had the picker init in collideWith(), to bypass this problem partially, but I think this is the best solution (apart from making Picker cloneable, but it doesn't preserve \"much\" state anyway).\r\n\r\nSo: This would be a fast fix for 3.3 (cherry picking) and we can think about cloning later.\r\nActually the code has been written like that to allow for multiple terrain picker algorithms, where currently we only have Bresenham.\r\n\r\nWhat would _need_ cloning, is the field `multipleCollisions` of `BresenhamTerrainPicker`, but since most cloning happens when loading, this isn't critical.\r\n\r\nUnless you prefer that we'd be doing things right right away and make the Picker Cloneable, for this I'd need guidance, though.",
    "head_branch": "fix-terrain-picker",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1262 from MeFisto94/fix-terrain-picker\n\nFixes #1261 - Clone the Terrain Picker, so that loading a terrain from file still works (after cloning, the picker would have the wrong terrain quad instance)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f61a14f302d393b2810",
    "number": 1259,
    "body": "Fixes an issue where LWJGL2 was returning created too early, so that when having issues during initialization, it would return as sucessfully created.\r\n\r\nNote: I am quite uncertain on this issue, but in my unit testing I discovered, that when trying to access OpenGL Contexts with Graphics Debug (where I know initialization should fail with a RendererException), and it was just freezing in start().\r\n\r\nQuick debugging showed me that created.set(true) is called twice and thus the first time is too early in any case.\r\nAlso I've put it _after_ the openGL Context Init in _initContextFirstTime_.\r\n\r\nI have yet to investigate the real case for the hang up in my case and whether this PR fixes it. Specifically I wonder why I am not notified about the exception which might be the root cause for my problem. Still this looks wrong, so please test it and if you think it's confident, merge it.",
    "head_branch": "fix-lwjgl2-early-create",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f62a14f302d393b2811",
    "number": 1256,
    "body": "Same policy here, especially since nobody commented on #1241 - Going to merge in 7 days.\r\nI've also fixed a javadoc warning in the surrounding code, sorry for that :D ",
    "head_branch": "appsettings-graphicsdebug",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixes #1241 - Add a convenient Graphics Debug Option for the AppSettings (#1256)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f63a14f302d393b2812",
    "number": 1255,
    "body": "So we need to depend on the assemble target, as build only happens when the project is additionally tested, which it might be for CI, but not when including as a subproject (like the SDK did) and also not when calling `gradlew run`, which one would do when executing the jme tests.\r\n\r\nI've taken the freedom to run an auto formatter on that snippet as well to fix whitespaces, I hope you don't mind. It just looked like minified js to me ;)",
    "head_branch": "fix-bullet-natives",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1255 from MeFisto94/fix-bullet-natives\n\nFixes Bullet-Native Artifacts not containing natives when not building from cpp source and not using the build target."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f64a14f302d393b2813",
    "number": 1252,
    "body": "Same rules apply here: No answer after 7 days, I'll merge it.\r\n\r\nDo note that JOGL has it's own Renderer and thus this AppSettings does not affect it (which is something I'd love to address).\r\nAlso the VR backend only supports two specific versions, be it because of specific requirements or because of not having the code written dynamically for this, so this remains untouched.\r\n\r\nAlso please watch the AppSettings file itself and not the diff: I've dragged LWJGL_OPENGL3 above OPENGL30 and then added 31 as a copy, thus it looks like changing OPENGL3 to 31.",
    "head_branch": "add-opengl31-lwjgl",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1252 from MeFisto94/add-opengl31-lwjgl\n\nFixes #1251 - Support OpenGL3.1 on LWJGL2 and LWJGL3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f65a14f302d393b2814",
    "number": 1250,
    "body": "Since this is an easy fix, I'll merge it in 7 days when there is no objection/reaction.\r\nOtherwise we can merge it when someone \"reviewed\" it.\r\n\r\nDo we want this in 3.3 as well?",
    "head_branch": "fix-lwjgl2-double-free",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixes #1249 - Don't hang up when destroy is called multiple times (#1250)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f66a14f302d393b2815",
    "number": 1238,
    "body": "Seems to build little faster. Old Gradle took 5 min and this 4 min. Might not be too reliable numbers :) Either way seems to work. Added the wrapper for easier maintaining.\r\n\r\nThe Android tools Gradle thing seems very old. But since I don't know anything about it, I left it untouched. https://developer.android.com/studio/releases/gradle-plugin.",
    "head_branch": "gradle-5.6.4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Upgrade Gradle 4.10 -> 5.6.4 (#1238)\n\n* Upgrade Gradle 4.10 -> 5.6.4\r\n\r\n* Use Gradle wrapper"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f67a14f302d393b2816",
    "number": 1235,
    "body": "As I commented in forum thread https://hub.jmonkeyengine.org/t/niftygui-some-controls-have-bad-rendering-in-android-having-batch-enabled/42641 all calls to GLRenderer.modifyTexture having different formats of source and destination texture done in GLES context fails with a GL_INVALID_EXCEPTION because glTexSubImage2D on GLES doesn't support it.\r\n\r\nThis PR adds a method in Image class to convert among formats, currently just rgb8 to rgba8 and back which I think are the most common cases for this and modifies GLRenderer.modifyTexture to call it if required",
    "head_branch": "texsubimage-gles-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "GLRenderer.modifyTexture on GLES fix (#1235)\n\n* Update GLImageFormats.java\r\n\r\n* First implementation to solve the glTexSubImage issue\r\n\r\n* Setting proper format to the image\r\n\r\n* Removed the Image.convertToFormat method and its usage from GLRenderer.modifyTexture. Added a warning instead for the potential failing cases\r\nFixing the issue in JmeBatchRenderBackend.loadImage transforming it to RGBA8 if required"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f68a14f302d393b2817",
    "number": 1234,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "com.jme3.scene.shape.Line: protect the no-argument constructor (#1234)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f69a14f302d393b2818",
    "number": 1233,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "AnimControl: correct javadoc for the no-arg constructor (#1233)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f6aa14f302d393b2819",
    "number": 1231,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Mesh: avoid NPE in getMorphTargets() when there are no targets (#1231)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f6ba14f302d393b281a",
    "number": 1230,
    "body": "Per post-merge discussion of PR #1228, I propose re-publicizing the no-arg constructors for `InstancedGeometry`, `LightNode`, and `CameraNode`. Also removing/correcting the javadoc for these classes (plus `Geometry` and `Node`) since the no-arg constructors are apparently NOT serialization-only.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "re-publicize InstancedGeometry no-arg constructor, correct erroneous javadoc (#1230)\n\n* re-publicize 3 no-arg constructors, correct/remove erroneous javadoc\r\n\r\n* re-protect 2 no-arg constructors, restore javadoc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f6ca14f302d393b281b",
    "number": 1229,
    "body": "Now that issue #1119 is closed, protect some more of the public no-arg constructors that are intended only for use by JME's serialization system (`SavableClassUtil`).",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "protect 52 no-arg constructors in the jme3-bullet/jme3-jbullet libraries (#1229)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f6da14f302d393b281c",
    "number": 1228,
    "body": "Now that issue #1119 is closed, protect some of the public no-arg constructors that are intended only for use by JME's serialization system (`SavableClassUtil`).",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "protect 47 no-arg constructors in the jme3-core library (#1228)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f6ea14f302d393b281d",
    "number": 1224,
    "body": "This is a PR to add the `MavenLocal()` command to the `version.gradle` file. \r\nThis enables builds to be stored in the local `.m2` repo.\r\n\r\nThis is one of the first things I do when I clone jme, and I am going to guess that I am not the only one. Is there any reason this is not already (or should not be) in the `version.gradle`?\r\n\r\nThanks,\r\nTrevor",
    "head_branch": "local-maven",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f6fa14f302d393b281e",
    "number": 1223,
    "body": "",
    "head_branch": "Quaternion-lookAt-changes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Closes #1210 Quaternion.lookAt now has a return value (#1223)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f70a14f302d393b281f",
    "number": 1221,
    "body": "Fixing the MorhAnim.glsllib to properly compile on android (and gles devices in general).\r\n\r\nAlso fixed that gl2.glEnable(GL2.GL_VERTEX_PROGRAM_POINT_SIZE); was being called for gles3 devices and this is not supported in any version of GLES.\r\n\r\nForum thread: https://hub.jmonkeyengine.org/t/fixed-morph-shader-compilation-in-android/42522",
    "head_branch": "android-morph-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Android morph fix (#1221)\n\n* Fixed MorphAnim.glsllib to compile on android and avoid enabling GL_VERTEX_PROGRAM_POINT_SIZE in android as it's not supported"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f70a14f302d393b2820",
    "number": 1220,
    "body": "Issue found at jme3-nifty code that depending on the batch configuration will lead to gui rendering issues.\r\n\r\nMore information in the forum thread: https://hub.jmonkeyengine.org/t/potential-issue-in-nifty-batch-rendering/42515",
    "head_branch": "nifty-batch-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Nifty batch fix - memory improvement (#1220)\n\n* Update GLImageFormats.java\r\n\r\n* Modified JmeBatchRenderBackend to clear the inner buffer of the image in the atlases instead of setting a predefined byte buffer\r\non disposal that made all atlases in the backend use the same buffer and generated rendering issues.\r\n\r\n* First impl of testcasefor multiple atlases issue. Still missing to add more images to the screens so it really uses more atlases\r\n\r\n* Fix conflict\r\n\r\n* Fix buffer allocator\r\n\r\n* Modified JmeBatchRenderBackend removing some changes and improving memory usage\r\n\r\n* standardize formatting per issue #1098\r\n\r\n* JmeBatchRenderBackend.java: copyright date -> 2020\r\n\r\nCo-authored-by: joliver82 <joliver@allot.com>\r\nCo-authored-by: Stephen Gold <sgold@sonic.net>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f71a14f302d393b2821",
    "number": 1218,
    "body": "This pr overrides modifyTexture with a new method that allows to specify which part to copy from the source image. A workaround is implemented for gles, that doesn't provide GL_UNPACK_ROW_LENGTH.\r\nThe old method is kept for backward compatibility but deprecated in favor of the new one.",
    "head_branch": "modifyTexture2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Improve support for subimage copying. Allow to copy a part of an image to a texture2D."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f72a14f302d393b2822",
    "number": 1216,
    "body": "Update MacOS build: removed 32 bit support (since deprecated by apple). Update bullet library to the current master branch (needed for compatibility patch with recent clang).",
    "head_branch": "macos-build-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update MacOS build: removed 32 bit support (since deprecated by apple). Update bullet library to the current master branch (needed for compatibility patch with recent clang)."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f73a14f302d393b2823",
    "number": 1214,
    "body": "A new buffer allocator created to solve ReflectionAllocator exceptions while freeing memory (destroyDirectBuffer method) caused by new buffer wrapper classes (java.nio.ByteBufferAs[type]Buffer) in android and improving memory management not having to wait for GC to free direct memory if desired.\r\n\r\nRelated forum post: https://hub.jmonkeyengine.org/t/exception-when-destroying-direct-memory-in-android/42483\r\n",
    "head_branch": "android-memory",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Android buffer allocator implementation (#1214)\n\n* Implemented basic android buffer allocator for newer wrapped buffer classes to be used instead of the default ReflectionAllocator"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f74a14f302d393b2824",
    "number": 1211,
    "body": "Fixes #1207",
    "head_branch": "versionName",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix version naming. Use version-branch-SNAPSHOT for local builds, add custom version name property."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f75a14f302d393b2825",
    "number": 1209,
    "body": "Hello\r\n\r\nThis commit fixes the task `getPrebuiltNatives`.\r\nCurrently, this task is manually implemented as incremental. However, this implementation has some faults, because when the contents of one of the natives is changed, the task does not update the contents of the files properly.\r\n\r\nSo this commit fixes this task and splits it into two incremental tasks (i.e., `getNativesZipFile`, and `extractPrebuiltNatives`) that use the inputs and ouputs properties provided by gradle.\r\n\r\nThis commit removes a lot of custom logic (as it is already implemented by gradle).",
    "head_branch": "fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Separate getNativesZipFile and getPrebuiltNatives. Improve code quality.\n\n* Fix the task 'getPrebuiltNatives'\r\n\r\n* Do not replace native if it's newer than zip"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f76a14f302d393b2826",
    "number": 1206,
    "body": "",
    "head_branch": "Ali-RS-patch-2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Added Joint.getInitialTransform() (#1206)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f77a14f302d393b2827",
    "number": 1205,
    "body": "...which was not setting new length to \"transition\" tween and causing the new length to have no effect.",
    "head_branch": "Ali-RS-patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixed an issue with BlendableAction.setTransitionLength()... (#1205)\n\n...which was not setting new length to transition tween and causing the new length to have no effect."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f78a14f302d393b2828",
    "number": 1201,
    "body": "Resolves #1200",
    "head_branch": "Ali-RS-patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "AnimComposer: added getTime() and setTime() methods (#1201)\n\nResolves #1200"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f79a14f302d393b2829",
    "number": 1198,
    "body": "",
    "head_branch": "Fix#1197",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix issue #1197: ClassCastException in LODGeomap.createMesh() (#1198)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f7aa14f302d393b282a",
    "number": 1196,
    "body": "This is the particle system I have been discussing on the forums and includes all the feedback i've received thus far.\r\n\r\nThe particle system includes a number of different influencers with attributes that can be animated for greater artistic control over the particle system's function. I've also added a new test file which demonstrates much of the functionality of the new particle system as well as several particle tweens for use in the new animation system.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f7ba14f302d393b282b",
    "number": 1195,
    "body": "jME's RMI registry uses an internal SharedObject class to track\r\nmetadata about objects that have been shared. The problem is that when\r\nyou retrieve the shared object, the RMI implementation mistakenly\r\nattempts to cast the SharedObject holder to the class of the actual\r\nshared object. This PR fixes that bug by casting the actual shared\r\nobject instead of the SharedObject holder.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixed ClassCastException in RMI implementation. (#1195)\n\njME's RMI registry uses an internal SharedObject class to track\r\nmetadata about objects that have been shared. The problem is that when\r\nyou retrieve the shared object, the RMI implementation mistakenly\r\nattempts to cast the SharedObject holder to the class of the actual\r\nshared object. This PR fixes that bug by casting the actual shared\r\nobject instead of the SharedObject holder."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f7ca14f302d393b282c",
    "number": 1194,
    "body": "I also updated the \"mockito-core\" version for better compatibility with java11. \r\nThe older version had some issues with java 11 and was preventing the \"mergedJavadoc\" task to succeed.\r\n\r\nFor anyone curious, here is the error with older mockito-core version:\r\n\r\n```\r\nmockito-core-1.10.19.jar(/org/mockito/internal/stubbing/answers/ThrowsExceptionClass.java):11: error: package org.objenesis does not exist\r\nimport org.objenesis.ObjenesisHelper;\r\n1 error\r\n\r\n> Task :mergedJavadoc FAILED\r\n```",
    "head_branch": "Ali-RS-patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated mockito-core to v3.0.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f7da14f302d393b282d",
    "number": 1190,
    "body": " - The CI is moved from travis+appveyor to github actions\r\n - Better division between jobs, all the results are stored internally until the final deploy jobs\r\n - Prebuilt natives are stored outside the source repo and automatically downloaded\r\n - arm builds, based on #1186\r\n - Property to filter wich platforms you want to build (allows to have parallel platform specific jobs when crosscompiling, see the arm build)\r\n\r\n \r\nYou can see the system working here:\r\n- https://github.com/RiccardoblSandbox/jmonkeyengine/tree/newbuild\r\n- https://github.com/RiccardoblSandbox/jmonkeyengine/runs/229997284\r\n- maven on bintray: https://bintray.com/riccardoblsandbox/jmonkeyengine\r\n- generic repo for prebuilt libraries: https://bintray.com/riccardoblsandbox/jmonkeyengine-files/natives",
    "head_branch": "newbuild",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Github Actions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f7fa14f302d393b282e",
    "number": 1189,
    "body": " - The CI is moved from travis+appveyor to github actions\r\n - Better division between jobs, all the results are stored internally until the final deploy jobs\r\n - Prebuilt natives are stored outside the source repo and automatically downloaded\r\n - arm builds #1186\r\n - Property to filter wich platforms you want to build (allows to have parallel platform specific jobs when crosscompiling, see the arm build)\r\n\r\n \r\nYou can see the system working here:\r\n- https://github.com/RiccardoblSandbox/jmonkeyengine/tree/newbuild\r\n- https://github.com/RiccardoblSandbox/jmonkeyengine/runs/229997284\r\n- maven on bintray: https://bintray.com/riccardoblsandbox/jmonkeyengine\r\n- generic repo for prebuilt libraries: https://bintray.com/riccardoblsandbox/jmonkeyengine-files/natives",
    "head_branch": "newbuild",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f7fa14f302d393b282f",
    "number": 1187,
    "body": "Changed `BulletAppState` so it extends `AbstractAppState`.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix for issue #1178 (BulletAppState violates AppState contract) (#1187)\n\n* fix for issue #1178 (BulletAppState violates AppState contract)\r\n\r\n* BulletAppState: make isRunning volatile (potential multithreaded access)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f80a14f302d393b2830",
    "number": 1186,
    "body": "Fixes #1183 \r\nThis PR needs to have it's 32bit linux build tested and unfortunately requires sudo (for now), as the packages need to be installed in a two step progress, which is what travis wouldn't do.\r\n\r\nI also move the native build to our more new openjdk11 environment and also updated the dist to be the newest available. This is just because otherwise the compiler versions would be 4 instead of 7. Also precise is in the process of being decomissioned and basically this PR has to be redone whenever the dist is upgraded, as the packages might change (have a higher version number).\r\n\r\nSo the second part of this PR is like: Move the build towards bionic and keep java 8 for testing / things not ready for java 11.\r\n\r\nAlso note the draft state of this PR, the binaries first have to be tested, some changes might need to be reverted (branchers: feature/bullet-arm).\r\nAlso the gradle wrapper couldn't be used locally as it lead to a NullPointerException. So we use the installed gradle here, we might consider upping the wrapper version a bit.",
    "head_branch": "feature/bullet-arm",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f81a14f302d393b2831",
    "number": 1185,
    "body": "I tested on a bunch of examples from jme3-examples and works fine for me. \r\nTested on Linux.",
    "head_branch": "Ali-RS-patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Bump LWJGL3 version to '3.2.3' on jme3-vr as well"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f82a14f302d393b2832",
    "number": 1182,
    "body": "Add 2 new values to the `com.jme3.system.Platform` enum (and logic to `com.jme3.system.JmeSystemDelegate`) in order to distinguish Linux-on-ARM platforms. (LWJGL3 already supports such platforms.) Define paths to hypothetical BulletJme native libraries built for such platforms.\r\n\r\nThis is just a first step toward supporting Linux-on-ARM.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "define 2 new Platform values for Linux ARM, register BulletJme lib paths (#1182)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f83a14f302d393b2833",
    "number": 1181,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "address issue #1119 (serialization with protected/private constructor) (#1181)\n\n* address issue #1119 (serialization with protected/private constructor)\r\n\r\n* remove an unnecessary step in findNoArgConstructor()\r\n\r\n* use getDeclaredConstructor() in place of the for-loop\r\n\r\n* simplify by throwing the exception in findNoArgContructor()"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f84a14f302d393b2834",
    "number": 1180,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f85a14f302d393b2835",
    "number": 1177,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "test and fix for issue #1138 (#1177)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f86a14f302d393b2836",
    "number": 1175,
    "body": "See #1171 for details. Note that #1171 has to be merged first (as this PR is based on it).\r\nAlso note that the deployment has to be thought of much like with #1171.\r\nThis also touches jme3-bullet-native, which should now compile a bit faster and cleaner (no intermediary files and two-pass-compilation).\r\n\r\nActually I wonder If I should re-open this PR once #1171 is merged into core, so this PR only contains one Commit?",
    "head_branch": "travis/build-android-bullet",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Build android bullet-native on Travis (#1175)\n\n* First attempt at building android-natives.\r\n\r\n*  Use OpenJDK because native build is broken without\r\n\r\n* Try OpenJDK 10\r\n\r\n* Try openJDK 9\r\n\r\n* Try openJDK11 again but \"enable\" the EE Module\r\n\r\n* OpenJDK 11 has no Java EE Module anymore.\r\n\r\n* Try to fix Android Header Generation\r\n\r\n* Fix invalid flag error with javac by removing empty quotes\r\n\r\n* Try to fix build of decode.\r\n\r\n* Remove jni generated headers from the repository.\r\n\r\n* Adjust .gitignore as those header files won't appear at that location anymore\r\n\r\n* Fix Android Build: Fill the jme3-android-native headers during the build of jme3-android. This works because jme3-android-native already depends on jme3-android.\r\n\r\nDue to technical reasons, the headers share the same location and thus the include directives have been adjusted slightly.\r\n\r\n* Copy jni headers to the jni directory.\r\n\r\n* Adjust the path slightly\r\n\r\n* Try to silence android sdk's license print out\r\n\r\n* Also fix openAL\r\n\r\n* Solve task name conflict\r\n\r\n* Really silence license now\r\n\r\n* Tasks seem shared but Strings are not...\r\n\r\n* Only build Android-Native\r\n\r\n* Trying to reduce the amount of dependencies needed.\r\n\r\n* Remove even more dependencies\r\n\r\n* Even more removal\r\n\r\n* Prepare Deployment\r\n\r\n* Fix Deployment\r\n\r\n* Cleanup: Remove feature branch from branches for travis.\r\n\r\n* Revert a few unnecessary things\r\n\r\n* Removed NDK Comments.\r\n\r\n* Bullet Android: Some cosmetic changes (removed commented debug code) and generate bullet-native headers during jme3-bullet compilation.\r\n\r\n* Fix Bullet Build by using GNU libstdc++ instead of STLPort (discontinued)\r\n\r\n* Fix Bullet-Native Compilation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f87a14f302d393b2837",
    "number": 1171,
    "body": "So I looked into building android natives and made them work on travis despite the jdk-11 changes which broke them.\r\n\r\nI added another build to the matrix, which is android. That way the Android NDK is just easily available.\r\n\r\nThe header generation has been moved into jme3-android, which generates headers during the compilation which happens anyway (though now headers are generated if noone wants to build natives).\r\n\r\nOpenJDK 10 is critical here, because the JDK Version 11 does not support Java EE Modules (XML) anymore, which are required by Android Tools.\r\n\r\nWhat is left is the integration, there are two options:\r\n1. Do it like Bullet-Native: Commit the binaries to the repository. These are already here, because when someone wants to build jme without having the Android NDK the existing binaries are just copied. The downside is that a release tag must not be an android-commit because the binaries are only updated the commit after.\r\n2. Do it like one would do: Ensure jme3-android.jar is published to maven by this task and not by all the other envs (two linuxes, one osx).\r\n\r\nPersonally I am in for a hybrid approach: 1 + 2, usually 2 is relevant for most users but we need number 1 to allow users to build the engine (including the jme3-android) module without any issues.",
    "head_branch": "travis/build-android-natives",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Build Android Natives (OpenAL, Vorbis, TextureLoading) on Travis (#1171)\n\n* First attempt at building android-natives.\r\n\r\n*  Use OpenJDK because native build is broken without\r\n\r\n* Try OpenJDK 10\r\n\r\n* Try openJDK 9\r\n\r\n* Try openJDK11 again but \"enable\" the EE Module\r\n\r\n* OpenJDK 11 has no Java EE Module anymore.\r\n\r\n* Try to fix Android Header Generation\r\n\r\n* Fix invalid flag error with javac by removing empty quotes\r\n\r\n* Try to fix build of decode.\r\n\r\n* Remove jni generated headers from the repository.\r\n\r\n* Adjust .gitignore as those header files won't appear at that location anymore\r\n\r\n* Fix Android Build: Fill the jme3-android-native headers during the build of jme3-android. This works because jme3-android-native already depends on jme3-android.\r\n\r\nDue to technical reasons, the headers share the same location and thus the include directives have been adjusted slightly.\r\n\r\n* Copy jni headers to the jni directory.\r\n\r\n* Adjust the path slightly\r\n\r\n* Try to silence android sdk's license print out\r\n\r\n* Also fix openAL\r\n\r\n* Solve task name conflict\r\n\r\n* Really silence license now\r\n\r\n* Tasks seem shared but Strings are not...\r\n\r\n* Only build Android-Native\r\n\r\n* Trying to reduce the amount of dependencies needed.\r\n\r\n* Remove even more dependencies\r\n\r\n* Even more removal\r\n\r\n* Prepare Deployment\r\n\r\n* Fix Deployment\r\n\r\n* Cleanup: Remove feature branch from branches for travis.\r\n\r\n* Revert a few unnecessary things\r\n\r\n* Removed NDK Comments."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f88a14f302d393b2838",
    "number": 1170,
    "body": "",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Adding link to project tab. (#1170)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f89a14f302d393b2839",
    "number": 1169,
    "body": "https://github.com/jMonkeyEngine/jmonkeyengine/issues/1167\r\nhttps://pastebin.com/Ag1LRXE6",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f8aa14f302d393b283a",
    "number": 1168,
    "body": "This allows for builds to be much faster, I always set this to true on my local builds when working with jmonkey. \r\n\r\nI do not see a reason to not enable parallel builds. Any thoughts?",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f8ba14f302d393b283b",
    "number": 1166,
    "body": "glsllib is generally not recognized as proper glsl extension by editors.",
    "head_branch": "glslext",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Recognize .glsl files as glsllib."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f8ca14f302d393b283c",
    "number": 1165,
    "body": "This PR improves the performances and user friendliness of environment baking. \r\n\r\n# Accelerated Baking\r\nThis PR adds 3 accelerated bakers that can be used in place of the current CPU baker.\r\nThe enhancements brought by these bakers is very remarkable, as they allow the environment baking process to be completed in <1s, effectively rendering the need for prebaked environments obsolete.\r\n\r\n## IBLGLEnvBaker\r\nThis is the most high-performing baker.  It run entirely on the GPU, and can generate prefiltered, irradiance, and BRDF maps. \r\nThis is the classic env baker implementation that is currently not used in jme.\r\n\r\n## IBLHybridEnvBakerLight and IBLGLEnvBakerLight\r\nThese bakers generate the prefiltered map and spherical harmonics currently used in the latest PBR shader in jme.\r\nAlthough this method reduces the VRAM consumption, this approach doesn't allow for as much optimization as the IBLGLEnvBaker. Nonetheless, the following accelerated baking methods are available:\r\n- **IBLHybridEnvBakerLight**: A hybrid baker that creates the prefiltered environmental map using GPU while performing spheric harmonics calculations on the CPU.\r\n- **IBLGLEnvBakerLight**: Similar to the IBLHybridEnvBakerLight, but it leverages the GPU to handle spheric harmonics generation as well.\r\n\r\n# New APIs\r\nThe LightProbeFactory has now been deprecated in favor of the LightProbeFactory2, which seamlessly integrates the accelerated baking methods. This transition serves as a dedicated migration path for legacy code.\r\n\r\nThe new API `EnvironmentProbeControl` is designed to streamline and simplify the entire baking and rebaking process. \r\n Here's how it works:\r\n\r\n- *Integration*: Developers are only required to instantiate an EnvironmentProbeControl and attach it to the root node of their targeted scene (e.g., the rootNode).\r\n\r\n- *Geometry Tagging*: By employing the EnvironmentProbeControl.tag(Spatial) method, you can mark which geometries are part of the environment and should be baked (e.g., the skybox).\r\n\r\n- *Profit*: Once the tagging is in place, the control takes care of the rest. On the next frame, it automatically initiates baking for the tagged geometries within its node and completes it before the scene is rendered. No more waiting for the processes to conclude or resorting to convoluted culling tricks.\r\n\r\n- *Update the baking*: Every time the baking needs to be updated (eg. day-night cycles) the rebake() method of the control can be invoked.\r\n\r\nThis new system operates directly within the same scene. It uses  RenderManager.setRenderFilter() (added by this PR) to filter out non tagged geometries, avoiding cloning, extra viewports, or other convoluted approaces. \r\n\r\n## Example\r\nThis is a fully functional remake of TestPBRLighting using the new API\r\n```java\r\npackage jme3test.light.pbr;\r\n\r\n\r\nimport com.jme3.app.SimpleApplication;\r\nimport com.jme3.environment.EnvironmentProbeControl;\r\nimport com.jme3.input.ChaseCamera;\r\nimport com.jme3.material.Material;\r\nimport com.jme3.math.FastMath;\r\nimport com.jme3.scene.Geometry;\r\nimport com.jme3.scene.Spatial;\r\nimport com.jme3.util.SkyFactory;\r\nimport com.jme3.util.mikktspace.MikktspaceTangentGenerator;\r\n\r\n/**\r\n * TestPBRSimple\r\n */\r\npublic class TestPBRSimple extends SimpleApplication {\r\n\r\n    public static void main(String[] args) {\r\n        new TestPBRSimple().start();\r\n    }\r\n\r\n    @Override\r\n    public void simpleInitApp() {\r\n\r\n        Geometry model = (Geometry) assetManager.loadModel(\"Models/Tank/tank.j3o\");\r\n        MikktspaceTangentGenerator.generate(model);\r\n\r\n        Material pbrMat = assetManager.loadMaterial(\"Models/Tank/tank.j3m\");\r\n        model.setMaterial(pbrMat);\r\n        rootNode.attachChild(model);\r\n\r\n        ChaseCamera chaseCam = new ChaseCamera(cam, model, inputManager);\r\n        chaseCam.setDragToRotate(true);\r\n        chaseCam.setMinVerticalRotation(-FastMath.HALF_PI);\r\n        chaseCam.setMaxDistance(1000);\r\n        chaseCam.setSmoothMotion(true);\r\n        chaseCam.setRotationSensitivity(10);\r\n        chaseCam.setZoomSensitivity(5);\r\n        flyCam.setEnabled(false);\r\n\r\n        Spatial sky = SkyFactory.createSky(assetManager, \"Textures/Sky/Path.hdr\", SkyFactory.EnvMapType.EquirectMap);\r\n        rootNode.attachChild(sky);\r\n\r\n        // Create baker control\r\n        EnvironmentProbeControl envProbe = new EnvironmentProbeControl( assetManager, 256);\r\n        rootNode.addControl(envProbe);\r\n\r\n        // Tag the sky, only the tagged spatials will be rendered in the env map\r\n        EnvironmentProbeControl.tag(sky);\r\n\r\n    }\r\n\r\n}\r\n\r\n```\r\n\r\nAs you can see, much simpler and cleaner.\r\n\r\n\r\n## Knowing issues\r\nThe difference in roughness levels in the prefiltered envmap generated by the accelerated baker is less prominent than the current one, i am not sure why, you can test it out by toggling USE_ACCELERATED_BAKING in the TestPBRLighting class included in this PR.\r\nI am not sure if this is an issue or which one is the correct behavior.\r\n\r\n\r\n## Minimum requirements\r\nOpenGL 3.1 or GL ES 3.0",
    "head_branch": "accellbaker",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Accelerated env baking on the GPU (#1165)\n\nAdds 3 accelerated bakers that can be used in place of the current CPU baker.\r\nThe enhancements brought by these bakers is very remarkable, as they allow the environment baking process to be completed in <1s, effectively rendering the need for prebaked environments obsolete."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f8da14f302d393b283d",
    "number": 1163,
    "body": "This PR:\r\n\r\n- Adds Valve Index to the list of recognized HMDs\r\n- Brings the overall lwjgl version of the jme-vr module up to speed with the rest of the engine. This fixes OpenVR lwjgl backend.\r\n- Removes Linux from the list of blacklisted OSes when lwjgl backend is used. In my testing, I got a picture inside the HMD on Linux, but it's cropped to be only the top half of the rendered view for some reason. Debugging this issue led me to believe that the version of OpenVR lwjgl 3.2.1 ships with is bugged on Linux, so this is unlikely to be fixed until we update lwjgl. On Windows it works fine.\r\n\r\n_Also, is it just me or does git really think I deleted the whole files and then created them again?_",
    "head_branch": "VR",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Some fixes in jme-vr (#1163)\n\n* Added Valve Index to the recognized HMD list\r\n\r\n* Fix lwjgl version mismatch\r\n\r\n* Removing linux from the blacklist"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f8ea14f302d393b283e",
    "number": 1160,
    "body": "The old link leads to the site for adults.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update the link of the \"Lightspeed Frontier\". (#1160)\n\nThe old link leads to the site for adults."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f8fa14f302d393b283f",
    "number": 1159,
    "body": "The expected result  should be: \r\n\r\n```\r\n                                                                   to right test a is This\r\n                                                                                .text left \r\n```\r\n\r\nbut it displays: \r\n\r\n\r\n```\r\n                                                                  .text left to right test \r\n                                                                                 a is This \r\n```",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added TestRTLBitmapText for issue #1158 (#1159)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f90a14f302d393b2840",
    "number": 1156,
    "body": "",
    "head_branch": "Ali-RS-patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f91a14f302d393b2841",
    "number": 1155,
    "body": "",
    "head_branch": "Ali-RS-patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Modified TransformTrack.jmeClone() return type to TransformTrack (#1155)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f92a14f302d393b2842",
    "number": 1151,
    "body": "This just fixes an NPE for this physics test when it's being run by the jme3-examples app rather than directly executed.",
    "head_branch": "gimpact-test-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix for NPE when running TestGImpactShape via TestChooser (#1151)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f92a14f302d393b2843",
    "number": 1150,
    "body": "I propose within this PR an AWT component rendering within app state\r\n\r\nThis implementation differs from the previous one as it's relies on AppState (compatible with all JME application) and as it use only produced framebuffer (no link with native objects).\r\n\r\nWith this implementation, it is possible to use AWT component ad rendering target and so to integrate JMonkey rendering within AWT / Swing application. This capability was no more available with LWJGL3 as the version 3.1.x does not provide anymore AWT link.\r\n\r\nThis implementation is compatible with LWJGL 2 and 3 and so, elder implementation of AWT binding can be removed.\r\n\r\nAn example of how to use AWT Component rendering can be found within jme3-examples project  at src/main/java/jme3tests/awt/AWTComponentAppStateSample.java",
    "head_branch": "jme3-awt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f94a14f302d393b2844",
    "number": 1147,
    "body": "Added gles30 and newer functionality for android. All the information at the forum thread: https://hub.jmonkeyengine.org/t/opengl-es-3-0-and-newer-on-android/41913\r\n\r\nChage list:\r\n\r\n- Initialize the proper opengl context (2.0, 3.0, 3.1…)\r\n- Added Caps for all of the new supported features\r\n- Added Instancing as core feature of GLES30 and newer\r\n- Properly adding versioning to shaders (#version xxx es) to shaders\r\n- Added GLSL320,GLSL310 and/or GLSL300 to most materials depending on the required level for them to work properly\r\n- Added depth24 texture usage if hardware supports it\r\n- Enabled Geometry shaders and tessellation (3.2 core feature and 3.1 as extension) and fixed compilation errors on the examples\r\n- Enabled glBlitFramebuffer\r\n- Added GLSL300 to filters not able to work with GLSL100.\r\n- Created Glsl300ShaderGenerator to support GLSL300 in shadernodes\r\n- Fixed most shader compilation issues (strict type checking, adding OpenGL ES specific extensions, function usage depending on version and some other)\r\n- Set default precision to highp solving most filter issues although maybe a little slower. Added specific sampler precision definition for gles300 or newer\r\n- Make use of GL_TEXTURE_MAX_LEVEL in GLES300 to avoid black rendering of non complete mipmapped textures\r\n- Changed some assets from compressed formats not supported in android to RGB/RGBA depending on the needs so all effects and tests can run also on android\r\n- updated precompiled android.jar to have access to newest android API\r\n- enabled some other core features of GLES300, GLES310 and GLES320\r\n- Fixed build issues in jme3-android-examples\r\n- Added 3D texture and texture array support\r\n- Added float texture formats, fixed rgb8 format if having cap rgb8 and fixed glTexImage2D call on AndroidGL\r\n- PBRLighting works and any other effect requiring HDR texture formats should work also\r\n- Effects and postprocessing\r\n- Multisampling\r\n\r\nKnown issues/pending work:\r\n- Fixed most issues with shadow rendering in android (GLES 2.0 and GLES 3.0 or better) although some glitches still apear randomly depending on ShadowMode of the nodes and the device\r\n- Fixed water filter. Still some rendering glitches in my old redmi3 (gles3.0). The water renders properly but the rest of the scene is overwritten in red. Not reproduced in any other device I've tried",
    "head_branch": "android-gl3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Android openGL ES 3 support (#1147)\n\n* Update GLImageFormats.java\r\n\r\n* Added basic support for openGL ES 3.0 and GLSL300 for android\r\n\r\nAdded instancing support for android which is core feature in GLES3.0\r\n\r\nAdded fix for shadows in android\r\n\r\n* Fixed required types of GLES30.glDrawElementsInstanced\r\n\r\n* Properly check GLES3 version and setting precision for shaders for all GLSL ES versions\r\n\r\n* Added support for Opengl ES 3.1 and 3.2 and their shader versions\r\nAdded proper checkings for new OpenGL ES versions\r\nFixed some issues with shadow rendering in GLES 3.0 or better (strict type checking, OpenGL ES specific extensions and percision definition)\r\nAdded GLSL320 and GLSL300 to Unshaded and Lighting materials\r\n\r\n* Added depth texture 24bit for OpenGL ES\r\n\r\n* Added geometry shaders and tessellation to GLES 3.1 as extension and GLES 3.2 as core\r\nModified test materials to use GLSL310\r\n\r\n* Added FB blit for android GLES30\r\n\r\n* Added GlSL300 or better to all effects not able to run in GLSL100\r\nMods on Shadows.glsllib to try to fix android shadow rendering\r\nFixed ssaoBlur.frag that was using a reserved word\r\nFixed precision type missmatch from vertex to fragment shader\r\n\r\n* Partial multisample support\r\nFramebuffer MRT support\r\n\r\n* Temporarily removed texture multisampling (not being able to compile using GLES31)\r\n\r\n* Updated android.jar to api28\r\nEnabled multisampling\r\n\r\n* Better checking for GLES3\r\n\r\n* Removed insert precision for all shaders. This avoided some random precision missmatch error but created rendering issues\r\n\r\n* Removed border check for GLES, caused filtered shadows not to render on GLES2.0 devices\r\n\r\nAdded texture compare mode for GLES3.0 and better to be able to use sampler2DShadow\r\n\r\nModified base materials (Lighting and Unshaded) to use only GLSL100 for post shadow pass\r\n\r\n* Corrected texture comparison function that were incorrectly changed\r\n\r\n* Added precision to samplers for GLESSL300 also\r\n\r\n* Created a subclass of Glsl150ShaderGenerator (Glsl300ShaderGenerator) to support ShaderNodes in GLES SL30 and included it's usage in DesktopAssetManager. Nowadays just copied and overwrote the version string. Needs a full review\r\nAdded image format RGB16F to be used as texture format only in GLES30 (cannot be used as FB format)\r\nAdded GLSL300 and/or GLSL310 to different materials\r\n\r\n* Cleaned GLSL300 generator\r\nFixed shadows glsl lib removing use of GL_EXT_gpu_shaders5\r\n\r\n* Fixed usag of textureCubeLod in fragment shader of envMapping which is unsupported in GLES2.0\r\nModified PBRLighting frag to properly compile on GLES3\r\n\r\n* Added GLSL300 and 310 to PostShadowFilter material definition\r\n\r\n* Make post shadow filter use GLSL100 for GLSL300\r\nSet highp as default precision to fix glitched shadows caused because not enough precision\r\n\r\n* Changed water_normalmap.dds to uncompressed RGB8 because DXT1 is mostly unsupported in GLES\r\n\r\n* Fixed GLES30 compilation issues in Water shaders and added GLSL300 to LightScattering material. ** Not fully tested\r\n\r\n* Added RGB8 dds formatted FullskiesSunset to be used in any platform. Previous file moved to _dtx1.dds\r\n\r\n* Set GL_TEXTURE_MAX_LEVEL in GLES30 contexts fixing issue with not fully mipmapped images and PBR rendering\r\n\r\n* Fixed compilation of jme3-android-examples and upgraded sdk version to use\r\n\r\n* Fixed Geometry Shader and Tessellation Shaders in testdata package to properly compile on GLES320\r\n\r\n* Added non-compressed textures to be able to run all examples on android\r\n\r\nEnabled texture arrays and 3d textures on opengl es 3.0. Peding to implement wrappers to android gl functions (currently getting NullPointerException)\r\n\r\n* More GLES30 functions included to properly support texture arrays, 3d textures and multisampling matching jme core code\r\n\r\n* Fixed 3D texture tests for GLES30\r\nFixed texture 3D and texture array example shader compilation on GLES30\r\nFixed some random missing precision compilation errors on GLES30\r\n\r\n* Fixed TestTextureArray for GLES30\r\n\r\n* Some multisample additions and removal of GLES3 multisampling enable caps\r\nAdded RGBA16F as valid format for GLES32 and using it by default in env camera instead of RGB16F. kept fall back to RGB8\r\n\r\n* added float and half float formats for gles30\r\nadded rgb10a2 format for gles30\r\nfixed usage of glTexImage2D\r\nremoved EnvironmentCamera fallback image format as it's useless now\r\n\r\n* Added more image formats for GLES30\r\nFixed rgb8 if having Caps.Rgba8\r\n\r\n* Enabled RadialBlur for gles30\r\n\r\n* Fixed luminance texture formats for gles\r\n\r\n* Added more depth image formats for gles3\r\n\r\n* Enabled multisampling in gles3\r\n\r\n* Added GLES30 functions to GLDebugES\r\nReverted TestTexture3D and TestTextureArray to use RGB8 format\r\nUpdated EnvMapping100.frag to use EXT_shader_texture_lod in gles sl 100 if available\r\n\r\n* Removed all aditional not used compressed dds files\r\nRemoved also Pond and rock png files previously used in TestTextureArray\r\n\r\n* Removed compressed water_normalmap_dxt1.dds\r\n\r\n* Changed GLES_30 and AndroidGL implementing GL2 to avoid duplicated code checking GL2 vs GLES30\r\n\r\n* Added aditional checking to avoid gles30 calls from gles20 only devices"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f95a14f302d393b2845",
    "number": 1146,
    "body": "The CombinedTexture calls TextureBlenderAWT with null baseTexture,\r\nthe colorspacehandling of this is not null safe (but prior code is) this adds the missing if to prevent NPE in this case.\r\n\r\n```\r\ncom.jme3.asset.AssetLoadException: An exception has occurred while loading asset: models/space/asteroids/asteroid_006_003.blend\r\n\tat com.jme3.asset.DesktopAssetManager.loadLocatedAsset(DesktopAssetManager.java:261)\r\n\tat com.jme3.asset.DesktopAssetManager.loadAsset(DesktopAssetManager.java:373)\r\n\tat com.jme3.asset.DesktopAssetManager.loadModel(DesktopAssetManager.java:416)\r\n\tat de.visiongamestudios.compiler.CompileApplication.internalcompile(CompileApplication.java:252)\r\n\tat de.visiongamestudios.compiler.CompileApplication.lambda$1(CompileApplication.java:208)\r\n\tat com.jme3.app.AppTask.invoke(AppTask.java:142)\r\n\tat com.jme3.app.LegacyApplication.runQueuedTasks(LegacyApplication.java:701)\r\n\tat com.jme3.app.LegacyApplication.update(LegacyApplication.java:715)\r\n\tat com.jme3.app.SimpleApplication.update(SimpleApplication.java:227)\r\n\tat com.jme3.system.lwjgl.LwjglAbstractDisplay.runLoop(LwjglAbstractDisplay.java:151)\r\n\tat com.jme3.system.lwjgl.LwjglCanvas.runLoop(LwjglCanvas.java:229)\r\n\tat com.jme3.system.lwjgl.LwjglAbstractDisplay.run(LwjglAbstractDisplay.java:232)\r\n\tat java.base/java.lang.Thread.run(Thread.java:835)\r\nCaused by: java.io.IOException: Unexpected importer exception occurred: null\r\n\tat com.jme3.scene.plugins.blender.BlenderLoader.load(BlenderLoader.java:223)\r\n\tat com.jme3.scene.plugins.blender.BlenderLoader.load(BlenderLoader.java:88)\r\n\tat com.jme3.asset.DesktopAssetManager.loadLocatedAsset(DesktopAssetManager.java:259)\r\n\t... 12 more\r\nCaused by: java.lang.NullPointerException\r\n\tat com.jme3.scene.plugins.blender.textures.blending.TextureBlenderAWT.blend(TextureBlenderAWT.java:146)\r\n\tat com.jme3.scene.plugins.blender.textures.CombinedTexture.blend(CombinedTexture.java:363)\r\n\tat com.jme3.scene.plugins.blender.textures.CombinedTexture.flatten(CombinedTexture.java:172)\r\n\tat com.jme3.scene.plugins.blender.materials.MaterialContext.applyMaterial(MaterialContext.java:182)\r\n\tat com.jme3.scene.plugins.blender.meshes.TemporalMesh.prepareFacesGeometry(TemporalMesh.java:621)\r\n\tat com.jme3.scene.plugins.blender.meshes.TemporalMesh.toGeometries(TemporalMesh.java:483)\r\n\tat com.jme3.scene.plugins.blender.objects.ObjectHelper.toObject(ObjectHelper.java:248)\r\n\tat com.jme3.scene.plugins.blender.BlenderLoader.load(BlenderLoader.java:105)\r\n\t... 14 more\r\n```",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix for NPE when being called from CombinedTexture with null baseImage (#1146)\n\n* fix for NPE when being called from CombinedTexture with null baseImage\r\n\r\n* formating only"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f96a14f302d393b2846",
    "number": 1145,
    "body": "When extracting native files (.dll), if an IOException of any kind is thrown, the Exception details were being lost. Instead this PR wraps the original Exception into the new (unchecked) one being created, so that a \"Caused by\" (IOException) is also reported. ",
    "head_branch": "native-lib-ioexception",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Wrap potential IOExceptions during native file extraction"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f97a14f302d393b2847",
    "number": 1144,
    "body": "SSR Filter based on: https://github.com/riccardobl/SimpleSSRShader/ \r\nSome liberties taken when restructuring it.\r\n\r\nConsider skipping  testScene.j3o. Might just clutter an already cluttered testData project?\r\n\r\nSome artifacts remain. Unsure which are due to SSR in general, the original shader and my implementation\r\n\r\n",
    "head_branch": "ssrfilter2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f98a14f302d393b2848",
    "number": 1139,
    "body": "Added \"Customs around integration, branching, tagging, and releases\" section to contribution guide.",
    "head_branch": "Ali-RS-patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated CONTRIBUTING.md (#1139)\n\n* Updated CONTRIBUTING.md\r\n\r\nAdded \"Customs around integration, branching, tagging, and releases\" section to contribution guide.\r\n\r\n* Clarify that the admonition to squash PRs is directed at integrators"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f99a14f302d393b2849",
    "number": 1137,
    "body": "Test demonstrating a GImpactCollisionShape falling through a curved mesh, when using JBullet. Native doesn't experience this issue.",
    "head_branch": "issue-1120-test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Test for issue #1120 - JBullet GImpactShape fall-through (#1137)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f9aa14f302d393b284a",
    "number": 1136,
    "body": "As discussed in:\r\nhttps://hub.jmonkeyengine.org/t/indexbuffer-suggestions-improvements-consistency/42022/4\r\n\r\n* [Fix] createIndexBuffer(int, int): return IndexByteBuffer as well for\r\n\tvertexCount < 128\r\n* [Enhancement] Make put(int i, int value) fluid interface\r\n* [Enhancement] Add relative put(int i) to allow easier chaining (parity\r\n\twith other buffer implementations)\r\n* [Enhancement] Add getFormat() to allow setting an IndexBuffer to a\r\n\tMesh directly without type inspection.\r\n* [Fix] Fix WrappedIndexBuffer\r\n\tAPI changes make it possible that IndexByteBuffer is now a valid  type\r\nfor outBuf, leverage the new getFormat() method to set the buffer to the\r\nmesh regardless of its type.",
    "head_branch": "patch-indexbuffer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "jme-core: IndexBuffer fixes & API improvements (#1136)\n\n* jme-core: IndexBuffer fixes & API improvements\r\n\r\nAs discussed in:\r\nhttps://hub.jmonkeyengine.org/t/indexbuffer-suggestions-improvements-consistency/42022/4\r\n\r\n* [Fix] createIndexBuffer(int, int): return IndexByteBuffer as well for\r\n\tvertexCount < 128\r\n* [Enhancement] Make put(int i, int value) fluid interface\r\n* [Enhancement] Add relative put(int i) to allow easier chaining (parity\r\n\twith other buffer implementations)\r\n* [Enhancement] Add getFormat() to allow setting an IndexBuffer to a\r\n\tMesh directly without type inspection.\r\n* [Fix] Fix WrappedIndexBuffer\r\n\tAPI changes make it possible that IndexByteBuffer is now a valid  type\r\nfor outBuf, leverage the new getFormat() method to set the buffer to the\r\nmesh regardless of its type.\r\n\r\n* Update VirtualIndexBuffer to @72f8019566fa4d1379caa820c0c9dc000f489444"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f9aa14f302d393b284b",
    "number": 1132,
    "body": "When you have forced colorspace (-LINEAR) in the matdef and you set a texture param, it will work as expected, but if the value of the matparam is replaced with a different texture, the code that takes care of the colorspace switching will be skipped all together.\r\n\r\nThe unit test shows the issue in detail.\r\n",
    "head_branch": "fixfspace",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1132 from riccardobl/fixfspace\n\nFix forced colorspace in matdefs working only once."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f9ba14f302d393b284c",
    "number": 1122,
    "body": "Proposed fix for issue #1121. Since it's visual not sure if there's any good options for a test, but we'll have at least one which uses this shape when I update the pending physics GImpact shape test. ",
    "head_branch": "pqtorus-bounds",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "#1121-updateBound() call for PQTorus geometry updates (#1122)\n\n* #1121-updateBound() call for PQTorus geometry updates\r\n\r\n* World bounds test added for #1121\r\n\r\n* World bounds test enhancements for #1121\r\n\r\n* Updated test comment"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f9ca14f302d393b284d",
    "number": 1118,
    "body": "Fixes 100+ Javadoc warnings in JDK 11 and this Javadoc NPE: \r\n\r\n```\r\n> Task :jme3-vr:compileJava\r\nNote: /home/lou/git/jmonkeyengine/jme3-vr/src/main/java/com/jme3/input/vr/openvr/OpenVR.java uses or overrides a deprecated API.\r\nNote: Recompile with -Xlint:deprecation for details.\r\n\r\n> Task :jme3-vr:processResources\r\n> Task :jme3-vr:classes\r\n> Task :jme3-vr:jar\r\n\r\n> Task :jme3-vr:javadoc\r\njavadoc: error - An internal exception has occurred. \r\n\t(java.lang.NullPointerException)\r\nPlease file a bug against the javadoc tool via the Java bug reporting page\r\n(http://bugreport.java.com) after checking the Bug Database (http://bugs.java.com)\r\nfor duplicates. Include error messages and the following diagnostic in your report. Thank you.\r\njava.lang.NullPointerException\r\n\tat jdk.compiler/com.sun.tools.javac.api.JavacTrees.attributeDocReference(JavacTrees.java:454)\r\n\tat jdk.compiler/com.sun.tools.javac.api.JavacTrees.getElement(JavacTrees.java:414)\r\n\tat jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.util.CommentHelper.getElement(CommentHelper.java:179)\r\n\tat jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.util.CommentHelper$3.visitReference(CommentHelper.java:460)\r\n\tat jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.util.CommentHelper$3.visitReference(CommentHelper.java:434)\r\n\tat jdk.compiler/com.sun.tools.javac.tree.DCTree$DCReference.accept(DCTree.java:669)\r\n\tat jdk.compiler/com.sun.source.util.SimpleDocTreeVisitor.visit(SimpleDocTreeVisitor.java:79)\r\n\tat jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.util.CommentHelper$3.visitSee(CommentHelper.java:438)\r\n\tat jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.util.CommentHelper$3.visitSee(CommentHelper.java:434)\r\n\tat jdk.compiler/com.sun.tools.javac.tree.DCTree$DCSee.accept(DCTree.java:715)\r\n\tat jdk.compiler/com.sun.source.util.SimpleDocTreeVisitor.visit(SimpleDocTreeVisitor.java:79)\r\n\tat jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.util.CommentHelper.getReferencedElement(CommentHelper.java:477)\r\n\tat jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.util.CommentHelper.getReferencedClass(CommentHelper.java:366)\r\n\tat jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.seeTagToContent(HtmlDocletWriter.java:999)\r\n\tat jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.TagletWriterImpl.seeTagOutput(TagletWriterImpl.java:279)\r\n\tat jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.taglets.SeeTaglet.getTagletOutput(SeeTaglet.java:84)\r\n\tat jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.taglets.TagletWriter.genTagOutput(TagletWriter.java:242)\r\n\tat jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.addTagsInfo(HtmlDocletWriter.java:332)\r\n\tat jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.ConstructorWriterImpl.addTags(ConstructorWriterImpl.java:191)\r\n\tat jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.ConstructorBuilder.buildTagInfo(ConstructorBuilder.java:195)\r\n\tat jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.ConstructorBuilder.buildConstructorDoc(ConstructorBuilder.java:149)\r\n\tat jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.ConstructorBuilder.build(ConstructorBuilder.java:124)\r\n\tat jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.ClassBuilder.buildConstructorDetails(ClassBuilder.java:383)\r\n\tat jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.ClassBuilder.buildMemberDetails(ClassBuilder.java:340)\r\n\tat jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.ClassBuilder.buildClassDoc(ClassBuilder.java:145)\r\n\tat jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.ClassBuilder.build(ClassBuilder.java:120)\r\n\tat jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDoclet.generateClassFiles(HtmlDoclet.java:266)\r\n\tat jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.AbstractDoclet.generateClassFiles(AbstractDoclet.java:286)\r\n\tat jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.AbstractDoclet.generateClassFiles(AbstractDoclet.java:268)\r\n\tat jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.AbstractDoclet.startGeneration(AbstractDoclet.java:207)\r\n\tat jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.AbstractDoclet.run(AbstractDoclet.java:114)\r\n\tat jdk.javadoc/jdk.javadoc.doclet.StandardDoclet.run(StandardDoclet.java:72)\r\n\tat jdk.javadoc/jdk.javadoc.internal.tool.Start.parseAndExecute(Start.java:582)\r\n\tat jdk.javadoc/jdk.javadoc.internal.tool.Start.begin(Start.java:431)\r\n\tat jdk.javadoc/jdk.javadoc.internal.tool.Start.begin(Start.java:344)\r\n\tat jdk.javadoc/jdk.javadoc.internal.tool.Main.execute(Main.java:63)\r\n\tat jdk.javadoc/jdk.javadoc.internal.tool.Main.main(Main.java:52)\r\n1 error\r\n\r\n```\r\n",
    "head_branch": "vr-javadoc-cleanup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "#1107 - Javadoc warning cleanup & Fix for JDK 11 Javadoc NPE (#1118)\n\n* Fixed \"broken\" @see tags causing Javadoc NPE in JDK 11\r\n\r\n* Updated comments to clear Javadoc warnings in JDK 11\r\n\r\n* Added @Deprecated annotations to clear JDK 11 Javadoc warnings"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f9da14f302d393b284e",
    "number": 1117,
    "body": "As requested, here's a physics test using GImpactShapes. For the left side \"floor\" I used a MeshCollisionShape, the right side is a GImpactCollisionShape. All the dropping objects are GImpact. \r\n\r\nWhat's interesting is how different the floors behave. The mesh shape sometimes allows objects to fall through. For me it's _always_ on the 1st, 2nd, and 5th tests, and it's always the same objects at the same places. The GImpact floor never drops anything, and things seem to settle a little better. :neutral_face: \r\n\r\nIt's actually 6 slightly different tests which repeat: \r\n * 1st Test: 10 solver iterations, large pot\r\n * 2nd Test: 20 solver iterations, large pot\r\n * 3rd Test: 30 solver iterations, large pot\r\n * 4th Test: 10 solver iterations, small pot\r\n * 5th Test: 20 solver iterations, small pot\r\n * 6th Test: 30 solver iterations, small pot\r\n\r\nI may add some additional documentation & description later but this should be enough for feedback and such now. Planning to follow up with more tests like this as time allows (open to suggestions also).",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "GImpactShape Test Added (#1117)\n\n* GImpactShape Test Added\r\n\r\n* GImpactShape Test Updates (WIP)\r\n\r\n* Minor tweaks based on feedback\r\n\r\n* Minor corrections + documentation added\r\n\r\n* Final tweaks"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f9ea14f302d393b284f",
    "number": 1115,
    "body": "By giving the user the ability to add an external rotation to a vehicle wheel we can simulate wheel-spin and wheel damage.\r\n\r\nhttps://i.ibb.co/wWsT8wX/image.png\r\n\r\nhttps://youtu.be/tvrN8PDyqeQ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240f9fa14f302d393b2850",
    "number": 1114,
    "body": "…rticlesPerSec set to still emit\r\n\r\nPreviously if particlesPerSec was constantly set timeDifference could never grow large enough to emit a particle as timeDifference was reset to zero each time. This fixes that problem while still ensuring that timeDifference can't have grown very very large (leading to huge numbers of particles being emitted) by capping the timeDifference at the point where its just about to emit a particle.\r\n\r\nDiscussed at https://hub.jmonkeyengine.org/t/particle-emitter-cannot-emit-particles-if-its-emissions-per-second-is-updated-every-frame/41930/2",
    "head_branch": "1113_particalEmitterCantEmitIfConstantlySet",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Issue 1113. Allow for Particle emitters that constantly have their particlesPerSec set to still emit (#1114)\n\nPreviously if particlesPerSec was constantly set timeDifference could never grow large enough to emit a particle as timeDifference was reset to zero each time. This fixes that problem while still ensuring that timeDifference can't have grown very very large (leading to huge numbers of particles being emitted) by capping the timeDifference at the point where its just about to emit a particle.\r\n\r\nDiscussed at https://hub.jmonkeyengine.org/t/particle-emitter-cannot-emit-particles-if-its-emissions-per-second-is-updated-every-frame/41930/2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fa0a14f302d393b2851",
    "number": 1112,
    "body": "Took way longer than I thought it would for \"core\" so I didn't get to \"vr\" yet, but OpenJDK 11 builds produce far fewer warnings after this cleanup. (OpenJDK 8 also tested to make sure new warnings don't appear...) I took the time to understand & preserve comment _intent_ as best I could, and test JavaDoc rendering in NB 11 to ensure doc is readable (before fixes some comments were showing completely misleading text in autocomplete help!). Also fixed a few broken links. \r\n\r\nAlso here \"ContextListener\" was changed to SystemListener - I can't find any \"ContextListener\" other than in some comments (possibly also outdated), so I think this was a typo/mistake? \r\nIf not and there is some \"ContextListener\" concept I'm unaware of, let me know and I'll correct. \r\n```java\r\n/**\r\n * The <code>ContextListener> provides a means for an application  (-)\r\n * The {@code SystemListener} provides a means for an application  (+)\r\n * to receive events relating to a context.\r\n */\r\npublic interface SystemListener {\r\n```\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "#1107-Fix Javadoc warnings in OpenJDK 9+ (#1112)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fa1a14f302d393b2852",
    "number": 1111,
    "body": "Fixes for all subprojects excluding core & vr",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "#1107-Fix Javadoc warnings in OpenJDK 9+"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fa2a14f302d393b2853",
    "number": 1110,
    "body": "when the image object has a ColorSpace value we pass it on, else we leave it at the default value.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "when the image object has a ColorSpace value we pass it on, else we leave it at the default value. fix for #1106 (#1110)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fa3a14f302d393b2854",
    "number": 1109,
    "body": "After reading through issue #1051 and PR #875 i removed the nullcheck from AudioNode.java.\r\n@riccardobl is there anything else that needs to be done to resolve this?",
    "head_branch": "fix-1051",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1109 from karanehra/fix-1051\n\nFix for 1051"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fa4a14f302d393b2855",
    "number": 1108,
    "body": "Just removes javadoc warnings in jme3-jbullet. \r\n\r\n```\r\n> Task :jme3-jbullet:javadoc\r\n/home/lou/git/jmonkeyengine/jme3-jbullet/src/main/java/com/jme3/bullet/PhysicsSpace.java:791: warning - invalid usage of tag >\r\n/home/lou/git/jmonkeyengine/jme3-jbullet/src/main/java/com/jme3/bullet/PhysicsSpace.java:807: warning - invalid usage of tag >\r\n/home/lou/git/jmonkeyengine/jme3-jbullet/src/main/java/com/jme3/bullet/PhysicsSpace.java:791: warning - invalid usage of tag >\r\n/home/lou/git/jmonkeyengine/jme3-jbullet/src/main/java/com/jme3/bullet/PhysicsSpace.java:807: warning - invalid usage of tag >\r\n/home/lou/git/jmonkeyengine/jme3-jbullet/src/main/java/com/jme3/bullet/PhysicsSpace.java:920: warning - invalid usage of tag &\r\n/home/lou/git/jmonkeyengine/jme3-jbullet/src/main/java/com/jme3/bullet/objects/PhysicsVehicle.java:304: warning - invalid usage of tag &\r\n/home/lou/git/jmonkeyengine/jme3-jbullet/src/main/java/com/jme3/bullet/objects/PhysicsVehicle.java:315: warning - invalid usage of tag &\r\n/home/lou/git/jmonkeyengine/jme3-jbullet/src/main/java/com/jme3/bullet/objects/VehicleWheel.java:181: warning - invalid usage of tag &\r\n/home/lou/git/jmonkeyengine/jme3-jbullet/src/main/java/com/jme3/bullet/PhysicsSpace.java:791: warning - invalid usage of tag >\r\n/home/lou/git/jmonkeyengine/jme3-jbullet/src/main/java/com/jme3/bullet/PhysicsSpace.java:807: warning - invalid usage of tag >\r\n/home/lou/git/jmonkeyengine/jme3-jbullet/src/main/java/com/jme3/bullet/PhysicsSpace.java:807: warning - invalid usage of tag >\r\n/home/lou/git/jmonkeyengine/jme3-jbullet/src/main/java/com/jme3/bullet/PhysicsSpace.java:791: warning - invalid usage of tag >\r\n/home/lou/git/jmonkeyengine/jme3-jbullet/src/main/java/com/jme3/bullet/PhysicsSpace.java:807: warning - invalid usage of tag >\r\n/home/lou/git/jmonkeyengine/jme3-jbullet/src/main/java/com/jme3/bullet/PhysicsSpace.java:791: warning - invalid usage of tag >\r\n/home/lou/git/jmonkeyengine/jme3-jbullet/src/main/java/com/jme3/bullet/PhysicsSpace.java:807: warning - invalid usage of tag >\r\n15 warnings\r\n```\r\n",
    "head_branch": "javadoc-cleanup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Javadoc warnings in OpenJDK 9+"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fa5a14f302d393b2856",
    "number": 1104,
    "body": "As per discussion: https://hub.jmonkeyengine.org/t/map-range-function/41906/19",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1104 from jayfella/master\n\nAdd unInterpolateLinear to FastMath class"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fa6a14f302d393b2857",
    "number": 1100,
    "body": "OK, so I am putting a RFC (Request For Comments) here to get some feedback. \r\n\r\nglTF-Blender-IO just added support for shapekey names (names on mesh morphs) to the import/export in blender. (Info found here: https://github.com/KhronosGroup/glTF-Blender-IO/issues/362) \r\n\r\nSeeing as mesh morphs are becoming a more popular feature, I think it would be nice if we had a way to facilitate them. I have made some changes and added glTF support for mesh morph names. This is a rough work in progress, but I wanted some feedback on the core jme changes here to see what everyone thinks.\r\n\r\nPS: Sorry in advance about the Geometry formatting changes, those will be reverted before the final revision of the PR.",
    "head_branch": "gltf-morph-names",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add support for gltf morph names. (#1100)\n\n* Add support for gltf morph names.\r\n\r\n* Fix formatting stuff\r\n\r\n* Add morph name to be saved\r\n\r\n* Testing changes to gltf plugin\r\n\r\n* Review changes\r\n\r\n* Fix comments\r\n\r\n* Fixes for review\r\n\r\n* Remove getMorphNames from Geometry class"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fa7a14f302d393b2858",
    "number": 1099,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "#1097-Fixed inconsistent OpenGL version constants (#1099)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fa8a14f302d393b2859",
    "number": 1096,
    "body": "",
    "head_branch": "lwjgl2gl3.2+",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add support for opengl versions > 3.2 in lwjgl2 renderer"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fa9a14f302d393b285a",
    "number": 1095,
    "body": "The current jmonkey source code can not be built in some countries. i fixed it.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use UTF-8 in gradle builds"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240faaa14f302d393b285b",
    "number": 1094,
    "body": "As per thread: https://hub.jmonkeyengine.org/t/add-fog-to-lighting-j3md/41873/6\r\n\r\nI have added fog to multi-pass lighting.j3md/lighting.vert/lighting.frag for consideration.\r\nI have not made any changes to SPLighting.vert/.frag or PBRLighting yet because the implementation would be the same, so once this has been approved, it can be ported to the rest of the materials.\r\n\r\nI have also included a TestLightingFog in the jme-examples to test the three available fog-modes.\r\n- Linear (simple, lightweight, useful on low-end and android devices)\r\n- Exponential (medium - prettier but slightly more expensive than linear)\r\n- ExponentialSquared (expensive compared to the previous two, but the best looking).\r\n\r\nThe user sets the parameter \"UseFog\" to enable fog, and must set a FogColor. \r\n- setBoolean(\"UseFog\", true);\r\n- setColor(\"FogColor\", new ColorRGBA(0.5f, 0.6f, 0.7f, 1.0f);\r\n\r\nSetting one of the following settings will enable that fog type. This is how you decide which fog-type to use.\r\n- setVector2(\"LinearFog\", new Vector2f(near, far));\r\n- setFloat(\"ExpFog\", 0.015f);\r\n- setFloat(\"ExpSqFog\", 0.02ff);\r\n\r\nAll of this is described in code in the TestLightingFog class.\r\nhttps://github.com/jayfella/jmonkeyengine/blob/master/jme3-examples/src/main/java/jme3test/light/TestLightingFog.java",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1094 from jayfella/master\n\nAdd support for fog in materials."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240faaa14f302d393b285c",
    "number": 1093,
    "body": "This is my first attempt at resolving #1074.\r\n\r\nAdded getters for \"alphaToCoverage\" and \"defaultAnisotropicFilter\" in the Renderer interface.\r\nAdded respective method stubs to GLRenderer and NullRenderer implementing Renderer.\r\n\r\nI'm still trying to implement the exact method in the GLRenderer. Any help appreciated.\r\n",
    "head_branch": "fix-1074",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Attempt to fixing 1074 (#1093)\n\n* Attempt to fixing 1074\r\n\r\n* Added method implementations in GlRenderer\r\n\r\n* Added test.\r\n\r\n* Added test to jme-examples\r\n\r\n* Some changes to resolve merge conficts\r\n\r\n* Fixes\r\n\r\n* Indent-fixes\r\n\r\n* Documented the class and added stop()\r\n\r\n* Fixed a minor error\r\n\r\n* Fixed build gradles\r\n\r\n* Removed line ending"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240faba14f302d393b285d",
    "number": 1087,
    "body": "Further to thread: https://hub.jmonkeyengine.org/t/gamepad-disconnect-re-connect/41822\r\n\r\nThis PR changes the following:\r\n\r\n- You can add joysticks AFTER the game is loaded.\r\n- You don’t need to plug the joystick in BEFORE the game starts.\r\n- You are notified if a joystick is added or removed.\r\n- No errors are thrown if a joystick is removed.\r\n\r\n``` java\r\n\r\nConnection listeners can be added, removed and cleared via the InputManager.\r\n\r\ngetInputManager().addJoystickConnectionListener(new JoystickConnectionListener(){\r\n\r\n            @Override\r\n            public void connectionChanged(int joystickId, JoystickState action) {\r\n                System.out.println(action == JoystickState.CONNECTED\r\n                        ? \"Joystick Connected:\" + joystickId\r\n                        : \"Joystick Disconnected:\" + joystickId\r\n                );\r\n            }\r\n        });\r\n```",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1087 from jayfella/master\n\nAdd support for listening to joystick connection/disconnection."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240faca14f302d393b285e",
    "number": 1082,
    "body": "I tried various ways of rendering blendMode=”multiply” in NiftyGUI, and this is the one that worked best. This PR will need considerable testing to ensure it doesn't break anything.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix for issue #99 (pr #1082)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fada14f302d393b285f",
    "number": 1081,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Travis: use \"xenial\" Linux dist to solve TLS issue (#1081)\n\nFixing the broken build. Thanks to @Ali-RS for providing the hint:  https://travis-ci.community/t/install-of-openjdk11-is-failing-again/3061/16"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240faea14f302d393b2860",
    "number": 1080,
    "body": "",
    "head_branch": "Ali-RS-patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "AnimComposer: updated to save globalSpeed on export and fixed issue with Layer cloning (#1080)\n\n* AnimComposer: save globalSpeed on export\r\n\r\n* Updated TestModelExportingCloning to test AnimComposer.globalSpeed\r\n\r\n* Fixed issue with AnimComposer.Layer cloning"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fafa14f302d393b2861",
    "number": 1078,
    "body": "Adds basic support for Transform Feedback (TF).\r\nAs part of discussion on discord\r\n- new class BufferObject was added which manages BufferObjects\r\n- VertexBuffer now extends BufferObject\r\n- jme3.shader.BufferObject was renamed to UniformBufferObject and now extends BufferObject\r\n\r\nTo support basic transform feedback.\r\n- setTransformFeedbackOutput(TransformFeedbackOutput output) method was added to the Renderer interface\r\n\r\nThe use of this method is similar to how rendering of framebuffers is handled in jme. This method is called to enable transform feedback, after which rendered geometry's TF ouput will be captured to the specified output buffers. Calling it will null, disables transform feedback.\r\n\r\nIn order to use TF, a shader has to specify the output variables which will be outputted to TF. This is accomplished by specifying the output variables in Technique block of .j3md file. Syntax is:\r\n```\r\nTransformFeedback [Off | Interleaved | Separate | InShader] varying1 varying2 varying3 ...\r\n```\r\nFor example a vertex/geometry shader contains the ouput:\r\n```\r\nout mat4 TransformFeedback;\r\n```\r\nA technique can be written as:\r\n```\r\nTechnique {\r\n    VertexShader GLSL130: jme3test/renderer/TestTR.vert\r\n    GeometryShader GLSL150: jme3test/renderer/TestTR.geom\r\n    RenderState {\r\n        RasterizerDiscard On\r\n    }\r\n    TransformFeedback Interleaved TransformFeedback\r\n}\r\n```\r\n- added Render State RasterizerDiscard - when enabled Fragment Processing stage is skipped, \r\n- added QueryObject, retrieve the number of written primitives for TF operation\r\n- added TF testcase jme3test.renderer.TestTransformFeedback\r\n\r\nAwaiting your feedback.",
    "head_branch": "rBasicTF",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fb0a14f302d393b2862",
    "number": 1077,
    "body": "to control the brightness and color of the light probe. Very useful for simulating day/night light and any use case where you don't rebake the probes every time the ambient color needs to change. \r\n\r\n  ",
    "head_branch": "pbr-ambient-light",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added ambient light support in PBR shader (#1077)\n\n* Added ambient light support in PBR shader\r\n\r\n* Updated to auto inject the define value if ambient light found"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fb1a14f302d393b2863",
    "number": 1076,
    "body": "see: #1071 ",
    "head_branch": "refactor-collection-to-set-in-AnimComposer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Refactor collection to set in anim composer (#1076)\n\n* returns an unmodifiable set when retrieving the available animation names and available animation clips instead of an unmodifiable collection. fixes: #1070\r\n\r\n* remove unnecessary set wrapper.\r\n\r\n* Remove the unnecessary creation of a new hashset everytime getAnimClips() is called."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fb2a14f302d393b2864",
    "number": 1075,
    "body": "of the ambient light.",
    "head_branch": "pbr-ambient-filter",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fb3a14f302d393b2865",
    "number": 1073,
    "body": "This PR fixes the issue of class files being placed in the source tree during native binary builds. \r\nSee #1072 for more info.",
    "head_branch": "jdk-11-build-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixed classes location while building natives (JDK11 Support) (#1073)\n\n* Fixed classes location while building natives\r\n* Fix minor formating issue"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fb4a14f302d393b2866",
    "number": 1072,
    "body": "This PR proposes reverting the part of PR #1059 which caused class files to be stored in the source-code directories. This will break JDK10/11 builds, where `javah` no longer exists. However it will allow development on JDK7/8/9 to proceed while a cleaner solution for JDK10/11 builds is developed.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fb5a14f302d393b2867",
    "number": 1071,
    "body": "Returns an unmodifiable set when retrieving the available animation names and available animation clips instead of an unmodifiable collection. fixes: #1070",
    "head_branch": "refactor-collection-to-set-in-AnimComposer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "returns unmodifiable sets (#1071)\n\n* returns an unmodifiable set when retrieving the available animation names and available animation clips instead of an unmodifiable collection. fixes: #1070\r\n\r\n* remove unnecessary set wrapper."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fb6a14f302d393b2868",
    "number": 1069,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix issue #1060: bt32BitAxisSweep3 not implemented"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fb7a14f302d393b2869",
    "number": 1068,
    "body": "This PR fixes: #363 \r\n\r\nThe `totalHeight` was calculated using this line:\r\n\r\n```java\r\ntotalHeight = Math.max(totalHeight, -l.getY1());\r\n```\r\n\r\nThis always resulted in `totalHeight = 0`. I changed the calculation to using the lineHeight of the font and multiplying it by the line count.\r\n\r\n```java\r\ntotalHeight = font.getLineHeight(block) * block.getLineCount();\r\n```\r\n\r\nSince the new height calculation needs the proper line count, I inversed the order of calling the methods in the `update()` method. First the line count is set, then the alignment is calculated.\r\n\r\nI also added a test case with some different alignment settings: `TestBitmapFontAlignment`.\r\n\r\n<img width=\"1136\" alt=\"Screenshot-20190411-102416\" src=\"https://user-images.githubusercontent.com/11334424/55942193-2af8f100-5c44-11e9-8cae-9f2153184a55.png\">\r\n",
    "head_branch": "fix-letters-totalheight-calculation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1068 from rvandoosselaer/fix-letters-totalheight-calculation\n\nCalculate the total line height of a text"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66240fb8a14f302d393b286a",
    "number": 1067,
    "body": "This is the implementation I use in spoxel to dig into performance within app states. The default profiler only gives timings for the App State Manager, but this code automatically profiles each of the app states added to the App State Manager. You can set further breakpoints within the update methods of an app state by calling:\r\n\r\n`profiler.appSubStep(\"EffectState\", \"Run Client Effects\");`\r\n\r\nIn this case \"EffectState\" is an app state and \"Run Client Effects\" is one of the profiling points i've set.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added an easy way to add sub steps to the profiler (#1067)\n\n* Added an easy way to add sub steps to the profiler and enhanced the App State Manager to profile the update method of each app state\r\n\r\n* Added the profiler step to the android profiler\r\n\r\n* Fixed missing profiler extensions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fb9a14f302d393b286b",
    "number": 1066,
    "body": "See #1065 ",
    "head_branch": "fix-classcastexception-#1065",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1066 from rvandoosselaer/fix-classcastexception-#1065\n\nfixed wrong reference check #1065"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fb9a14f302d393b286c",
    "number": 1064,
    "body": "**Adds option to disable VR mouse cursor and thus enable the cursor on the desktop:**\r\nUsecase: We need the cursor on the desktop because the application is operated by a different user who doesn't wear the VR goggles. Using the VRAppState would always disable the desktop-cursor. I added `VRMouseManager.setVRMouseEnabled()`. Default value for `vrMouseEnabled` is true, so it will behave the same by default.\r\n\r\n**Fixes repeated attachment of mouseImage as scene to gui viewport (because its parent was always null):**\r\n`AbstractVRMouseManager.update()` used `mouseImage.getParent()` to check if it's already attached. `mouseImage` is added as a scene to the gui viewport and will never have a parent, hence it was attached on every update call.",
    "head_branch": "jme3-vr_mouse-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1064 from FennelFetish/jme3-vr_mouse-fix\n\nAdds option to disable VR mouse cursor"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fbaa14f302d393b286d",
    "number": 1062,
    "body": "Reverts jMonkeyEngine/jmonkeyengine#1054",
    "head_branch": "revert-1054-export-transparent-png",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1062 from jMonkeyEngine/revert-1054-export-transparent-png\n\nRevert \"Modified JmeDesktopSystem.writeImageFile() to export transparency for…\"\r\n...at least until we can fix it properly."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fbba14f302d393b286e",
    "number": 1061,
    "body": "This PR contains a suite of tests for `com.jme3.renderer.Camera`, once again utilising [Diffblue](https://www.diffblue.com/) [Cover](https://www.diffblue.com/datasheet) to assist with the testing workflow. I've also added additional` .equals()` methods for Camera.java and Plane.java to assist testing of the this class.  ",
    "head_branch": "camera-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fbca14f302d393b286f",
    "number": 1059,
    "body": "OK, this PR adds build support for JDK 11. This has been tested on both JDK 8 and JDK 11. \r\n\r\nCan everyone please look over this and TEST it on both JDK 8 and 11 to confirm that it works for them, and on Linux, OS X, and Android if you have them (I have only tested on Windows 10).\r\n\r\nTake note, this does NOT add modules to JME3, it simply makes it able to compile using JDK 11. \r\n\r\nI would love some feed back, let me know if I forgot anything.\r\n\r\nCurrent Platforms Tested:\r\n- [x] Windows 10\r\n- [x] Linux\r\n- [ ] OS X\r\n- [x] Android\r\n\r\nThank you,\r\nTrevor Flynn",
    "head_branch": "jdk-11",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1059 from tlf30/jdk-11\n\nJdk 11 Build Support"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66240fbda14f302d393b2870",
    "number": 1057,
    "body": "Fixing issue #1046 ",
    "head_branch": "TestDepthStencilFix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix printing if stencil is enable or disable"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fbea14f302d393b2871",
    "number": 1055,
    "body": "(1) publicize `Joint.applyBindPose()` because `DynamicAnimControl` needs to know the bind pose\r\n(2) add `DynamicAnimControl` and related classes in the `com.jme3.bullet.animation` package\r\n(3) revise the `TestBoneRagdoll` and `TestRagdollCharacter` apps to use `DynamicAnimControl` instead of `KinematicRagdollControl`\r\n(4) remove the `TestIK` app which was never completed and had an unhealthy dependency on `TestBoneRagdoll`\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "revise TestBoneRagdoll & TestRagdollCharacter to use DynamicAnimControl"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fbfa14f302d393b2872",
    "number": 1054,
    "body": "… PNG format.\r\n\r\nFor more info see the discussion on forum: \r\nhttps://hub.jmonkeyengine.org/t/generate-transparent-icon-from-model/41232/10?u=ali_rs",
    "head_branch": "export-transparent-png",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1054 from Ali-RS/export-transparent-png\n\nModified JmeDesktopSystem.writeImageFile() to export transparency for…"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fc0a14f302d393b2873",
    "number": 1053,
    "body": "This adds a new public static method to set the default collision margin.\r\n\r\nI'm unsure whether `jme3-jbullet` has any issue with 0 collision margin. To maintain consistency between libraries I modified both `jme3-bullet` and `jme3-jbullet`.\r\n\r\nI ran all the physics tests in `jme3-examples` with both physics libraries and didn't notice any changes, except that `TestCcd` now works with `jme3-bullet`. Refer to issue #1043 for details.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix issue #901 (collision margins initialized to 0) (#1053)\n\n* fix issue #901 (collision margins initialized to 0)\r\n\r\n* add a getter for the default collision margin"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fc1a14f302d393b2874",
    "number": 1052,
    "body": "In j3md you should be allowed to define default textures like this\r\n```        \r\nTexture2D Texture -LINEAR: MinTrilinear MagBilinear /path/to/my/texture.dds\r\n```\r\nBut the j3md loaded actually didn't set the default value for texture params. \r\nThis pr fixes that.",
    "head_branch": "fixdefaulttexture",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "j3md Fix for default textures (#1052)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fc2a14f302d393b2875",
    "number": 1050,
    "body": "This PR contains a suite of tests for `com.jme3.scene.mesh.VirtualIndexBuffer`, once again utilising [Diffblue](https://www.diffblue.com/) [Cover](https://www.diffblue.com/datasheet) to assist with the testing workflow. \r\nThe rest of the requested classes and packages are on my radar; i'll be looking into them next. \r\nSpecifically, `com.jme3.renderer.Camera` is the next class i'll be writing tests for. I hope these tests help! ",
    "head_branch": "virtual-buffer-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1050 from Diffblue-benchmarks/virtual-buffer-tests\n\nAdd tests for com.jme3.scene.mesh.VirtualIndexBuffer"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fc3a14f302d393b2876",
    "number": 1049,
    "body": " by not adding \"ghost\" collisions to the CollisionResults (which weren't removed).\r\nImprove TerrainPicking by allowing to do more ray tracing (previously, it stopped on the first hit, now it will stop on the first hit within range).\r\n\r\nSo: I got the report that terrain picking yields collision results even when no collision has happened. This was due to the way the code was structured: The user had to check the result of collideWith to know if a collision happened or not. This is wrong however, because the passed collisionResults struct could already contain results from previous operations (e.g. when picking the scenegraph recursively) and thus the limit check was wrong (it just picked the \"closest\" collision, which in that scenario makes no sense) and especially the desired result cannot be identified and removed.\r\n\r\nDuring working on that patch I changed semantics: Previously the first hit was returned, even when it's out of range. The code didn't continue to raycast. Now it returns the first hit WITHIN the range or otherwise continues picking. I don't know if that is valid, because I can only imagine situations in which the next raycast is even more out of range. What do you guys think of that situation?\r\n\r\nI'm obviously asking you guys to test picking if it has any downsides (the semantics change should at most only waste CPU cycles, I hope).\r\n\r\nDepending on the decision about the semantics, I might add another commit which encapsulates the distance check into it's own method to reduce redundancy.\r\n\r\n",
    "head_branch": "fix-terrain-picking",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix and Improve TerrainPicking (#1049)\n\n* Fix TerrainPicking by not adding \"ghost\" collisions to the CollisionResults (which weren't removed).\r\n\r\nImprove TerrainPicking by allowing to do more ray tracing (previously, it stopped on the first hit, now it will stop on the first hit within range).\r\n\r\n* Upgraded TerrainTestCollision to support multiple collisions and print the collision results detailed. MultiCollision can easily be turned on/off in simpleInitApp().\r\nDuring testing, I noticed a bug where in very rare cases the first collision isn't what is expected but the back side of the clicked mountain. It has to be validated if this is due to the following changes or was already present.\r\n\r\n* Added Basic Unit Tests for Collision\r\n\r\n* TerrainPicker: Change API to return int to conform with collideWith\r\n\r\n* TerrainQuad: Conform with Picker now returning the number of collisions and allow to set multipleCollisions true or false.\r\n\r\n* TerrainPicking: Fixed a bug where the perpendicular collision always returned true, no matter the result of checkTriangles.\r\n\r\nAlso add support for multiple collisions (which is toggleable to the old behavior, because the picker can early out then).\r\n\r\n* Try to fix Travis Build\r\n\r\n* Fixed a Regression which occurred due to Multi Collision Handling:\r\nThe method used to provide duplicate results, which is why I commented it out. This lead to corner-cases not colliding at all anymore, thus I added a unit-test and removed the commented code and instead made addCollision de-duplicate entries."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fc4a14f302d393b2877",
    "number": 1048,
    "body": "So this seems like a big bug to me. I noticed that for some reason for the lwjgl 3 display context, the wait for was being ignored. There was a comment about a OSX fix, but with no information to go with it. \r\n\r\nIt seems to me that it is important for the waitFor to work, as it broke one of my applications that I was swapping from lwjgl2 to lwjgl3. \r\n\r\nDoes anyone know about this, or can provide insight into this? \r\nThis PR adds support for the waitFor in the same way that it was implemented in lwjgl2.\r\nAlso, if someone can confirm that this still works for them, that would be great. \r\n\r\nPS: I hope I opened this PR correctly. If not I'm sorry in advance, every project has their preferred way of doing things. \r\n\r\nThank you,\r\nTrevor Flynn",
    "head_branch": "waif-for-fix-lwjgl3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fc5a14f302d393b2878",
    "number": 1047,
    "body": "From https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_texture_compression_rgtc.txt\r\n\r\n```\r\n    These formats are designed to reduce the storage requirements\r\n    and memory bandwidth required for red and red-green textures by\r\n    a factor of 2-to-1 over conventional uncompressed luminance and\r\n    luminance-alpha textures with 8-bit components (GL_LUMINANCE8 and\r\n    GL_LUMINANCE8_ALPHA8).\r\n\r\n    The compressed signed red-green format is reasonably suited for\r\n    storing compressed normal maps.\r\n\r\n```",
    "head_branch": "rgtcf",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add RGTC format"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fc6a14f302d393b2879",
    "number": 1042,
    "body": "This fixes #1033.\r\n\r\nShould I also deprecate the TestLightNode.java?",
    "head_branch": "LightDeprecation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Deprecated light node - #1033 (#1042)\n\n* Deprecated light node\r\n\r\n* Deleted TestLightNode\r\n\r\n* Cleanup of this... mess.\r\n\r\n* Removed LightNode usage from TestManyLightsSingle.java\r\n\r\n* TestConeVSFrustum: use LightControl, revert some non-essential changes\r\n\r\n* TestManyLightsSingle: revert a non-essential change\r\n\r\nCo-authored-by: Stephen Gold <sgold@sonic.net>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fc7a14f302d393b287a",
    "number": 1041,
    "body": "…rol and CharacterControl. Fix issue #1008",
    "head_branch": "FixIssue1008",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add getSpatial to GhostControl, RigidBodyControl, AbstractPhysicsCont… (#1041)\n\n* Add getSpatial to GhostControl, RigidBodyControl, AbstractPhysicsControl and CharacterControl. Fix issue 1008\r\n\r\n* Fix doc: control is attached to spatial. Not the other way around.\r\n\r\n* Update doc: Clarify what getSpatial returns"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fc8a14f302d393b287b",
    "number": 1040,
    "body": "Hi, \r\n\r\nIn reference to a PR I made 3 days ago, it was mentioned that you might be interested in receiving additional tests for classes in jmonkeyengine. One such class was `com.jme3.mathVector3f`. This PR contains a suite of tests, again using  [Diffblue](https://www.diffblue.com/) [Cover](https://www.diffblue.com/datasheet) to assist with writing, that brings this class up to 97% coverage according the IntelliJ's internal coverage runner. \r\n\r\nI wasn't able to find any behaviours that struck me as obviously bugs, however. \r\n\r\nIf you're still interested in such, i'll be taking a look at the other suggested classes in the coming days and writing some tests to increase their coverage, too. ",
    "head_branch": "vector-unit-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add tests for com.jme3.math.Vector3f"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fc9a14f302d393b287c",
    "number": 1039,
    "body": "Hi, \r\nI've analysed your code base and noticed that `com.jme3.math.FastMath` is not fully tested.\r\n\r\nI've written some tests for the functions in this class with the help of [Diffblue](https://www.diffblue.com/) [Cover](https://www.diffblue.com/products). Hopefully, these tests should help you detect any regressions caused by future code changes. If you would find it useful to have additional tests written for this repository, I would be more than happy to look at other particular classes that you consider important.",
    "head_branch": "add-unit-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add tests for com.jme3.math.FastMath"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fcaa14f302d393b287d",
    "number": 1038,
    "body": "This PR adds feature request https://github.com/jMonkeyEngine/jmonkeyengine/issues/1019\r\n\r\nThere is no fastForward() method added because we already have setSpeed().\r\n\r\nNote loop=false works only for forward animation (speed > 0). For backward animation (speed < 0) the behaviour is like before (keep looping) regardless of looping is disabled or not.  \r\nThat is because this line : \r\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/9357231911213bc93970ac6f0d74602608b1c1b8/jme3-core/src/main/java/com/jme3/anim/AnimComposer.java#L240\r\n\r\nnever returns false if animation is backward. \r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fcba14f302d393b287e",
    "number": 1036,
    "body": "Issue #1028",
    "head_branch": "alphasumr",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add blend mode that sums alphas and does alpha blending for colors"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fcba14f302d393b287f",
    "number": 1035,
    "body": "Now one can add own actions (ex: extend from BaseAction).\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added AnimComposer.getAction() and AnimComposer.addAction() and improved \nJavaDoc."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fcca14f302d393b2880",
    "number": 1031,
    "body": "",
    "head_branch": "spherespherecs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix issue #1029, integrate PR #1031\n\n* Use gContactStartedCallback instead of gContactProcessedCallback to detect collision events. ( fix for #1029 )\r\n\r\n* Fix  Conversion loses qualifiers"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fcda14f302d393b2881",
    "number": 1020,
    "body": "Done with Netbeans `Inspect and Transform` tool. ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Removed unused imports. (#1020)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fcea14f302d393b2882",
    "number": 1017,
    "body": "Added TestUserData for PR #946 ",
    "head_branch": "Ali-RS-patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added TestUserData. (#1017)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fcfa14f302d393b2883",
    "number": 1016,
    "body": "",
    "head_branch": "Ali-RS-patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added removeAction(), removeLayer() and removeCurrentAction() to AnimComposer (#1016)\n\n* Added AnimComposer.removeAction() and AnimComposer.removeLayer()\r\n\r\n* Added javadoc for AnimComposer.setCurrentAction()\r\n\r\n* Moved removing of current action to a separate method.\r\n\r\n* Added javadoc for new methods."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fd0a14f302d393b2884",
    "number": 1015,
    "body": "...that allow for comparison of values within some epsilon.\r\n\r\nInspired from @pspeed42 's [SimMath](https://github.com/Simsilica/SimMath) library. \r\n ",
    "head_branch": "Ali-RS-patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added isSimilar() to Quaternion, Vector2f, Vector3f and Vector4f (#1015)\n\n* Added isSimilar() to Quaternion.\r\n\r\n* Added isSimilar() to Vector2f.\r\n\r\n* Added isSimilar() to Vector3f.\r\n\r\n* Added isSimilar() to Vector4f.\r\n\r\n* Modified isSimilar() to consider NaN."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fd1a14f302d393b2885",
    "number": 1014,
    "body": "",
    "head_branch": "Ali-RS-patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added AnimComposer.hasAction() method"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fd2a14f302d393b2886",
    "number": 1012,
    "body": "Calling `Node.depthFirstTraversal()` with `DFSMode.PRE_ORDER` doesn't produce the expected order of traversal.\r\n\r\nIt doesn’t pass the DFSMode to the recursive calls. Thus, the `PRE_ORDER` mode is only applied in the first call and will default to `POST_ORDER` further down the scenegraph.\r\n\r\nTest code: https://pastebin.com/XCbwLSAS\r\nThe snipped also includes expected and actual results.\r\n\r\nI've been told to also create an issue for this so others who encounter this problem will know about it, even if this expected behaviour.\r\nBut if this is expected behaviour, I think it should be mentioned in the Java Doc.",
    "head_branch": "node_dfs_order_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added tests for traversal order when using SceneGraphVisitor."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fd3a14f302d393b2887",
    "number": 1010,
    "body": "I encountered the problem when trying to use the ArmatureDebugger on Android.\r\nThe shader compilation fails with a `cannot convert from 'int' to 'highp float'` error and this fixes it.",
    "head_branch": "bugfix-float",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1010 from boonto/bugfix-float\n\nFix Billboard ShaderNode cannot compile on Android"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fd4a14f302d393b2888",
    "number": 1007,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix for issue #1003 (Loading multiple GLB files with animations fails)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fd5a14f302d393b2889",
    "number": 1005,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "test&fix for issue #1004 (RagdollUtils can't handle 16-bit bone indices)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fd6a14f302d393b288a",
    "number": 1002,
    "body": "In addition to making `Action`, `BlendableAction`, and `ClipAction` into `JmeCloneable` classes, I also made `AbstractTween` into a `JmeCloneable` class.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix for issue #972 (TestModelExportingCloning fails)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fd7a14f302d393b288b",
    "number": 1000,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix issue #997 (cloning UpdateControl throws IllegalArgumentException)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fd8a14f302d393b288c",
    "number": 991,
    "body": "Resolves #981 \r\n\r\nThe JME Nifty examples work. So does our project which uses Nifty quite heavily.",
    "head_branch": "feature-981",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated Nifty to 1.4.3 and cleaned up the build"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fd9a14f302d393b288d",
    "number": 990,
    "body": "",
    "head_branch": "feature-981",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fdaa14f302d393b288e",
    "number": 987,
    "body": "This time XBONE S pad when connected via Bluetooth",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #987 from grizeldi/patch-2\n\nMore XBOX controller remappings"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fdba14f302d393b288f",
    "number": 986,
    "body": "#978 ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added getter and setter for LegacyApplication's speed (#986)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fdca14f302d393b2890",
    "number": 980,
    "body": "The method onJoyButtonEvent() was being called on every update(). Now it is called only when the state of a button changes (from not pressed to pressed and vice-versa).",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #980 from fba-rio/patch-2\n\nFixed call to onJoyButtonEvent()"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fdda14f302d393b2891",
    "number": 979,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #979 from mitm001/master\n\nFixed how AppSetting mergeFrom checks for key mapping."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fdea14f302d393b2892",
    "number": 974,
    "body": "Just to get sure nothing is broken I ran with some of the tests in jme3-examples and everything seems running fine. \r\n\r\nYou can take a look at changes at https://github.com/LWJGL/lwjgl3/releases",
    "head_branch": "Ali-RS-patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Bump LWJGL3 version to '3.2.1'"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fdea14f302d393b2893",
    "number": 973,
    "body": "Confirmed the bug in both `jme3-bullet` and `jme3-jbullet` using the test code. Added the test code to `jme3-examples`. Added the missing read/write code to both `jme3-bullet` and `jme3-jbullet`. Re-ran the test to confirm the bug is fixed in both `jme3-bullet` and `jme3-jbullet`.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "test and fix for issue #970 (#973)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fdfa14f302d393b2894",
    "number": 971,
    "body": "This deals with the 2nd half of the issue. Once this is integrated and tested, we should close the issue.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "implement setContactResponse(boolean) for PhysicsCharacter (issue #964) (#971)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fe0a14f302d393b2895",
    "number": 968,
    "body": "… on Linux.\r\n\r\nRead more on https://hub.jmonkeyengine.org/t/experimenting-lwjgl3/37275",
    "head_branch": "Ali-RS-patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added a (hacky) fix for a Java Swing/AWT + GLFW interaction issue… (#968)\n\n* Added a (hacky) fix for a Java Swing/AWT + GLFW interaction issue… \r\n\r\n… on Linux.\r\n\r\n* Added a proper comment\r\n\r\n* Added an extra call to System.gc() as recommendation from lwjgl’s @Spasi\r\n\r\n\"Run System.gc(), at least two times. Not sure how AWT handles native\r\nresources, maybe there’s a finalizable/PhantomRef-ed resource that is not\r\nreleased immediately, but a subsequent GC triggers a (too late) free. \""
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fe1a14f302d393b2896",
    "number": 966,
    "body": "Implementation for PhysicsCharacter will be a separate PR.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "implement setContactResponse(boolean) for PhysicsRigidBody (issue #964) (#966)\n\npartial"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fe2a14f302d393b2897",
    "number": 965,
    "body": "that can optionally throw an exception if the state does not exist.\r\n\r\nInspired from @pspeed42  SiO2 GameSystemManager\r\n\r\nhttps://github.com/Simsilica/SiO2/blob/df02d9dd08943744e6633e476dec38eb6eb44dd7/src/main/java/com/simsilica/sim/GameSystemManager.java#L264",
    "head_branch": "Ali-RS-patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #965 from Ali-RS/Ali-RS-patch-1\n\nAdded AppStateManager.getState(class, failOnMiss)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fe3a14f302d393b2898",
    "number": 963,
    "body": "It looks like the AppVeyor build only happens when there are changes in the jme3-bullet-native directory. This PR will test that theory.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      " PhysicsSpace.cpp: whitespace changes to trigger an AppVeyor build (#963)\n\n* Edit gradle.properties to trigger a rebuild\r\n\r\n* PhysicsSpace.cpp: whitespace changes to trigger an AppVeyor build"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fe4a14f302d393b2899",
    "number": 962,
    "body": "Found one incompatibility between v2.86.1 and v2.87: `btHingeConstraint::getMotorTargetVelosity()` was renamed to `getMotorTargetVelocity`.\r\n\r\nExcluded 4 Bullet3 folders from the C++ compile. These are not needed for 2.87; excluding them should result in smaller libraries.\r\n\r\nAdded a `cleanZipFile` task to `jme3-bullet-native/build.gradle`. Unsure what should depend on it, but it'll be useful when someone wants to rebuild after changing Bullet versions, as I just did.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "AppVeyor: invalidate cached ZIP file if gradle.properties has changed"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fe5a14f302d393b289a",
    "number": 958,
    "body": "+ Fixed the issue by nulling out both cached vectors.\r\n+ Added an automated test for the issue.\r\n+ Updated the copyright dates.\r\n+ Improved the JavaDoc.\r\n+ Added Override annotations.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "test and fix for JME issue #957"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fe6a14f302d393b289b",
    "number": 955,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #955 from stephengold/master\n\ntest and fix for JME issue #954 (null bounding volume)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fe7a14f302d393b289c",
    "number": 952,
    "body": "The trick is to re-generate the debug mesh each time the scale of the collision shape changes.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix for JME issue #887 (debug mesh ignores scaling)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fe8a14f302d393b289d",
    "number": 951,
    "body": "Recompiled bullet native libraries for android to match bullet 2.86.1 and latest updates from @stephengold. Changed Android.mk, Application.mk and build.gradle to properly compile with android ndk r16b and to avoid bullet opencl to be compiled because there is no opencl in android. Android ndk16b is used instead of newer ndk not to lose (almost useless) hardware compatibility because armeabi, mips and mips64 were removed in ndk17\r\n\r\nForum reference: https://hub.jmonkeyengine.org/t/native-physics-not-properly-working-on-android/40504\r\n\r\nThis PR overwrite cancelled PR at https://github.com/jMonkeyEngine/jmonkeyengine/pull/864\r\n",
    "head_branch": "android-native-physics",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update android bullet native libraries"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fe9a14f302d393b289e",
    "number": 950,
    "body": "The copy constructor of the OrientedBoxProbeArea wouldn't take the given transform into account. Now it does.",
    "head_branch": "PR_LightProbeAreaClone",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "OrientedBoxProbeArea copy constructor fixed"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240feaa14f302d393b289f",
    "number": 948,
    "body": "The light is still being added, however, to the scene root node as this is the blender behavior and a wysiwyg is desired.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #324. Blender importer now respects the lightNode pos in the graph\n\nThe light is still being added, however, to the scene root node as this is the blender behavior and a wysiwyg is desired."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240feba14f302d393b28a0",
    "number": 946,
    "body": "Test case\r\nsrc/test/java/unit/TestUserData.java\r\n```java\r\npackage unit;\r\nimport com.jme3.scene.Node;\r\nimport com.jme3.scene.Spatial;\r\nimport org.junit.Test;\r\nimport junit.framework.TestCase;\r\npublic class TestUserData extends TestCase {\r\n\r\n    public static void userDataTest(Spatial sp, Object v) {\r\n        sp.setUserData(\"test\",v);\r\n        assertTrue(\"UserData is null\",sp.getUserData(\"test\")!=null);\r\n        assertEquals(\"UserData value is different than input value\",sp.getUserData(\"test\"),v);\r\n        sp.setUserData(\"test\",null);\r\n    }\r\n    \r\n    @Test\r\n    public void testLong() throws Exception {\r\n        Spatial sp=new Node(\"TestSpatial\");\r\n        userDataTest(sp,(Long)(long)(Math.random()*Long.MAX_VALUE));\r\n    }\r\n\r\n    @Test\r\n    public void testInt() throws Exception {\r\n        Spatial sp=new Node(\"TestSpatial\");\r\n        userDataTest(sp,(Integer)(int)(Math.random()*Integer.MAX_VALUE));\r\n    }\r\n\r\n    @Test\r\n    public void testShort() throws Exception {\r\n        Spatial sp=new Node(\"TestSpatial\");\r\n        userDataTest(sp,(Short)(short)(Math.random()*Short.MAX_VALUE));\r\n    }\r\n\r\n    @Test\r\n    public void testByte() throws Exception {\r\n        Spatial sp=new Node(\"TestSpatial\");\r\n        userDataTest(sp,(Byte)(byte)(Math.random()*Byte.MAX_VALUE));\r\n    }\r\n\r\n    @Test\r\n    public void testDouble() throws Exception {\r\n        Spatial sp=new Node(\"TestSpatial\");\r\n        userDataTest(sp,(Double)(double)(Math.random()*Double.MAX_VALUE));\r\n    }\r\n\r\n    @Test\r\n    public void testFloat() throws Exception {\r\n        Spatial sp=new Node(\"TestSpatial\");\r\n        userDataTest(sp,(Float)(float)(Math.random()*Float.MAX_VALUE));\r\n    }\r\n}\r\n\r\n```\r\n\r\nbuild.gradle\r\n```gradle\r\napply plugin : 'java' \r\n\r\n// Usage: gradle test\r\n\r\n// JME master\r\n// def jmerepo='com.github.jMonkeyEngine.jmonkeyengine'\r\n// def jmeversion='025b27c96d295e02c1471580980c7f4429be44b5'\r\n\r\n// PR branch\r\ndef jmerepo='com.github.riccardobl.jmonkeyengine'\r\ndef jmeversion='211pr-SNAPSHOT'\r\n\r\n\r\n// def jmerepo=\"org.jmonkeyengine\"\r\n// def jmeversion=\"3.3.0-211pr-SNAPSHOT\"\r\n\r\n\r\n\r\nrepositories {\r\n    maven { url 'https://jitpack.io' }   \r\n    mavenCentral(); \r\n}\r\n\r\n\r\ndependencies {\r\n    testCompile jmerepo + ':jme3-core:' + jmeversion\r\n    testCompile jmerepo + ':jme3-desktop:' + jmeversion\r\n    testCompile jmerepo + ':jme3-lwjgl:' + jmeversion\r\n    testCompile 'junit:junit:4.11'\r\n}\r\n```",
    "head_branch": "211pr",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add double short and byte support to UserData (#946)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240feca14f302d393b28a1",
    "number": 944,
    "body": "I don't understand why this fixes the issue, but it does, and only for native Bullet. I tried making the analogous change to JBullet, and it had no effect.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix issue #923 for native Bullet"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240feda14f302d393b28a2",
    "number": 943,
    "body": "25oct2018 jme update",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240feea14f302d393b28a3",
    "number": 937,
    "body": "Updated OpenVR JNA binding from 1.0.9 to 1.0.16\r\nAdded OpenVR/LWJGL binding using KWJGL 3.2.0\r\n",
    "head_branch": "jme3-vr-openvr_lwjgl",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #937 from jseinturier/jme3-vr-openvr_lwjgl\n\nUpdating OpenVR bindings"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fefa14f302d393b28a4",
    "number": 936,
    "body": "Updating OpenVR from 1.0.9 to 1.0.16\r\nRefactoring VR independent classes.",
    "head_branch": "jme-vr-20181005",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ff0a14f302d393b28a5",
    "number": 935,
    "body": "Updating OpenVR from 1.0.9 to 1.0.16\r\nRefactoring VR interface to be independent from implantation",
    "head_branch": "jme3-vr-openvr-116",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ff1a14f302d393b28a6",
    "number": 934,
    "body": "Changed riseCamera to use the up vector set with 'setUpVector(Vector3f upVec)' when pressing Q and Z which should make it go up/down.\r\n\r\nPreviously it was still travelling along the default up vector when pressing Q or W, despite rotating around the new up vector.\r\n\r\njMonkeyEngine/jmonkeyengine#617",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "FlyByCamera rise/fall behaviour (issue #617)\n\nChanged riseCamera to use the up vector set with 'setUpVector(Vector3f upVec)' when pressing Q and Z which should make it go up/down."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ff2a14f302d393b28a7",
    "number": 933,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "test and fix for issue #931"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ff3a14f302d393b28a8",
    "number": 932,
    "body": "This is a suggested change. Replaces the homebrewed JNA bindings with LWJGL's JNI bindings.\r\nIt is built on LWJGL 3.2.0. Can't guarantee the bindings are all there in prior versions.\r\n\r\nAlso one major change in flow; WaitGetPoses is called from render() rather than update(). This is because rendering actually happens there, and \"frameTimings\" show less cpu latency (top bar, this change darker). There are also seemingly less \"late frames\" (bottom bar, red stuff)\r\n\r\n![image](https://user-images.githubusercontent.com/7988802/46459359-f863cc80-c7b8-11e8-9fe2-e481901a699d.png)\r\n\r\nThere are opportunities for more refactoring in the lib.\r\n",
    "head_branch": "vr_lwjgl",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ff4a14f302d393b28a9",
    "number": 930,
    "body": "Particles with a non random animation set currently only work for image sets with rows and columns equal, though you can set them separately and make them unequal. 3x4, 8x2 and so on give incorrect values for imgY. \r\n\r\nForum link: https://hub.jmonkeyengine.org/t/particle-emitter-possible-bug/40971/2\r\n\r\nSmall change means you can have any number of rows and columns.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Particle tile number/UV calculation change (#930)\n\n* Update ParticlePointMesh.java\r\n\r\n* Update ParticleTriMesh.java"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ff5a14f302d393b28aa",
    "number": 929,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "test and fix for issue #928: disabled native Bullet's QuickProf"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ff6a14f302d393b28ab",
    "number": 927,
    "body": "Working on ditching JOpenVR and moving to LWJGL's OpenVR implementation. \r\n\r\nHeadset rendering is not currently working.\r\n\r\nHowever: preview rendering works fine!",
    "head_branch": "openvr-3.2.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ff7a14f302d393b28ac",
    "number": 926,
    "body": "Potential NPE when loading animated cursors (.ani)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Load animated cursor NPE\n\nPotential NPE when loading animated cursors (.ani)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ff9a14f302d393b28ad",
    "number": 925,
    "body": "Could not load .ani files",
    "head_branch": "master",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ffaa14f302d393b28ae",
    "number": 924,
    "body": "Difficult to test, given the lack of a getter for the angularOnly flag.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix for issue #917"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ffba14f302d393b28af",
    "number": 921,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "tests and fixes for issues #918 and #919"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ffca14f302d393b28b0",
    "number": 920,
    "body": "Changed the implementation of the collisionListeners list for both JBullet and native Bullet. Also organized imports and added some JavaDoc.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "resolve issue #916"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ffda14f302d393b28b1",
    "number": 914,
    "body": "Implemented the missing Java_com_jme3_bullet_joints_PhysicsJoint_finalizeNative() method.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix for issue #913"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240ffea14f302d393b28b2",
    "number": 909,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix for issue #908"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66240fffa14f302d393b28b3",
    "number": 907,
    "body": "Not as drastic as PR #905, but fixes a couple significant errors, such as describing PhysicsSweepTestResult as the result of a ray test.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "jme3-bullet: add and improve comments, mostly JavaDoc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241000a14f302d393b28b4",
    "number": 906,
    "body": "This PR changes the semantics of KinematicRagdollControl, particularly for addBoneName(). During and after scanSpatial(), instead of treating an empty bone list as a special case, the bone list now contains precisely the bones that are linked to physics objects. This enables the fix, as follows:\r\n\r\nIf the bone list is empty at the time the control is added to a spatial, all bones are added to the list. Before invoking scanSpatial(), however, any listed bones without vertices are filtered out. This prevents generation of empty hull shapes, saving native Bullet from choking when it tries to step the simulation.\r\n\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix for issue #740 (#906)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241001a14f302d393b28b5",
    "number": 905,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #905 from stephengold/master\n\njme3-bullet: add and improve comments, mostly JavaDoc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241001a14f302d393b28b6",
    "number": 904,
    "body": "The examples won't run on OSX with `-Djava.awt.headless=true` added as a JVM argument.\r\n\r\n```\r\n> Task :jme3-examples:run FAILED\r\nException in thread \"main\" java.awt.HeadlessException\r\n        at java.awt.GraphicsEnvironment.checkHeadless(GraphicsEnvironment.java:204)\r\n        at java.awt.Window.<init>(Window.java:536)\r\n        at java.awt.Frame.<init>(Frame.java:420)\r\n        at java.awt.Frame.<init>(Frame.java:385)\r\n        at javax.swing.SwingUtilities$SharedOwnerFrame.<init>(SwingUtilities.java:1758)\r\n        at javax.swing.SwingUtilities.getSharedOwnerFrame(SwingUtilities.java:1833)\r\n        at javax.swing.JDialog.<init>(JDialog.java:272)\r\n        at javax.swing.JDialog.<init>(JDialog.java:233)\r\n        at jme3test.TestChooser.<init>(TestChooser.java:86)\r\n        at jme3test.TestChooser.main(TestChooser.java:451)\r\n\r\nFAILURE: Build failed with an exception.\r\n\r\n* What went wrong:\r\nExecution failed for task ':jme3-examples:run'.\r\n> Process 'command '/Library/Java/JavaVirtualMachines/jdk1.8.0_102.jdk/Contents/Home/bin/java'' finished with non-zero exit value 1```",
    "head_branch": "iamstuffed/fixDemosOSX",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove JVM arguments for OSX when running examples"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241002a14f302d393b28b7",
    "number": 902,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "test cases and fix for issue #880"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241003a14f302d393b28b8",
    "number": 900,
    "body": "In addition to moving the gravity update from update() to prePhysicsTick(), I changed the copyright notice in TestBetterCharacter.java so it would conform with similar files in the project.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix for issue #897"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241004a14f302d393b28b9",
    "number": 899,
    "body": "When adding a vehicle to a physics space, invoke vehicle.createVehicle(this);",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix for issue #898"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241005a14f302d393b28ba",
    "number": 895,
    "body": "Increased the ray length from 1 to 50.\r\n\r\nRewrote the ray test for clarity.\r\n\r\nAlso provided prompt feedback in case no collision object was hit. Formerly there was a lag of up to 1 second before removal of the collision indication.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix for issue #886"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241006a14f302d393b28bb",
    "number": 892,
    "body": "Also changed the IF to a SWITCH and added some assertions. Note that the tickListener is added in startPhysics() only in the SEQUENTIAL case.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "test case and fix for issue #883"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241007a14f302d393b28bc",
    "number": 891,
    "body": "A cleaner setPhysicsSpace() method fixes the issue.\r\n\r\nApplied the change to AbstractPhysicsControl, CharacterControl, GhostControl, RigidBodyControl, and VehicleControl (though only AbstractPhysicsControl and GhostControl were affected by the issue) in order to increase clarity and reduce the amount of unique code.\r\n\r\nAt some point in the past, the issue probably affected all physics controls. Whoever fixed RigidBodyControl somehow missed fixing AbstractPhysicsControl and GhostControl.\r\n\r\nIf all physics controls were based on AbstractPhysicsControl, there'd be a lot less cut-and-paste, and issues like this one would be easier to catch and fix globally. But such a change would break code that assumes certain physics controls are based on PhysicsCollisionObject.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "test case and fix for issue #889"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241008a14f302d393b28bd",
    "number": 890,
    "body": "There are 3 groups of C++ source files in the  jme3-bullet-native subproject:\r\n  1. Bullet library headers and implementations, extracted from a downloaded ZIP archive\r\n  2. JNI headers, auto-generated by running the javah utility on Java source in the jme3-bullet subproject\r\n  3. JME headers and implementations, to turn JNI calls into Bullet library calls and vice versa\r\n\r\nCurrently group 1 files are not ignored by Git because the .gitignore file was not updated when we switched from Bullet 2.83.7 to Bullet 2.86.1 . Also, \"build clean\" fails to remove these files.\r\n\r\nCurrently group 2 files are checked into the Git repository. Instead, they should be ignored by Git and regenerated as needed. Also, \"build clean\" fails to remove these files.\r\n\r\nThis pull request addresses the issues:\r\n + group 1 files are ignored by Git and removed by \"build clean\"\r\n + group 2 files are ignored by Git, regenerated as needed, and removed by \"build clean\"\r\n\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "rm auto-generated C++ headers from repo, rm unzipped files during clean"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241009a14f302d393b28be",
    "number": 888,
    "body": "Using more recent versions fixes the openjdk build on Travis CI.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "use Gradle v4.10, android tools v3.1.4, bintray plugin v1.8.4"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624100aa14f302d393b28bf",
    "number": 885,
    "body": "Currently the default OS X Build Environment at Travis has JDK10. However, it's tricky to make our build work with both JDK7 and JDK10 because 'javah' was replaced by 'javac -h'. Specifying \"osx_image: xcode9.3\" bypasses this issue for now.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "avoid JDK10 so Travis CI can succeed"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624100ba14f302d393b28c0",
    "number": 882,
    "body": "I haven't found a fix for the issue. Here's a readable test case which works with 3.1.0-stable but not with master.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add a test for JME issue #877"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624100ca14f302d393b28c1",
    "number": 881,
    "body": "The method onJoyButtonEvent() was being called on every update(). Now it is called only when the state of a button changes (from not pressed to pressed and vice-versa).",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624100da14f302d393b28c2",
    "number": 875,
    "body": "This PR fixes some issues in the AudioNode that caused wrong velocity calculation when using velocityFromTranslation.\r\n\r\nIn short, when cloning the node, previousWorldTranslation wasn't reset to its initial value but cloned as reference, and the first velocity update was a subtraction with a NaN.\r\n\r\nI've also modified the cloneFields method to reset the velocity to 0 if velocityFromTranslation is set, to prevent cloned nodes from preserving the velocity of the original in case they are never moved.",
    "head_branch": "audionodefix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix AudioNode issues when using velocityFromTranslation and small refactoring (#875)\n\n* Fix AudioNode issues when using velocityFromTranslation and small refactoring\r\n\r\n* Fix audionode fix"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624100ea14f302d393b28c3",
    "number": 874,
    "body": "Resolves #792 for LWJGL 3",
    "head_branch": "bugfix-792",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "The mouse pos should be initialized always"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624100fa14f302d393b28c4",
    "number": 873,
    "body": "Resolves #871 ",
    "head_branch": "feature-871_3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Feature 871 (#873)\n\n* Update LWJGL to 3.1.6\r\n\r\n* Change LinkedLists to ArrayDeques\r\n\r\n* Call glfwTerminate & set NULL error callback on destroy\r\n\r\nfixes crash when context is re-created"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241010a14f302d393b28c5",
    "number": 872,
    "body": "Resolves #871 ",
    "head_branch": "feature-871",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241010a14f302d393b28c6",
    "number": 868,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix bullet skipping enqueued tasks - #867"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241011a14f302d393b28c7",
    "number": 865,
    "body": "The formula used in the angleBetween method was wrong.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241012a14f302d393b28c8",
    "number": 864,
    "body": "Recompiled bullet native libraries for android, changed Android.mk and Application.mk to properly compile with android ndk r16b and to avoid bullet opencl to be compiled because there is no opencl in android. Android ndk16b is used instead of ndk17 not to lose hardware compatibility because armeabi, mips and mips64 were removed in ndk17\r\n\r\nForum reference: https://hub.jmonkeyengine.org/t/native-physics-not-properly-working-on-android/40504\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241013a14f302d393b28c9",
    "number": 863,
    "body": "Just the @JavaSaBr PR about SSBO but rebased on current master\r\nhttps://github.com/jMonkeyEngine/jmonkeyengine/pull/822",
    "head_branch": "JavaSaBr-added_new_var_type",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Java sa br added new var type (#863)\n\nImplements SSBO (Shader Storage Buffer Object) and UBO (Uniform Buffer Object) support"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66241014a14f302d393b28ca",
    "number": 862,
    "body": "As stated at forum topic https://hub.jmonkeyengine.org/t/illegalstateexception-framebuffer-has-erronous-attachment-if-using-filterpostprocessor-or-shadows/40463 there's an error in the depth format defined for opengl ES 2.0 which should be GL.GL_UNSIGNED_SHORT instead of GL.GL_UNSIGNED_BYTE solving \"Framebuffer has erronous attachment\" IllegalStateException",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update GLImageFormats.java"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241015a14f302d393b28cb",
    "number": 860,
    "body": "Addressed issue 859.  Added a method to aim a ray at a given target location.  Additionally, updated some of the Javadocs to make it clear that the `setDirection` method takes in a relative vector for direction.",
    "head_branch": "ray",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241016a14f302d393b28cc",
    "number": 856,
    "body": "Related thread: https://hub.jmonkeyengine.org/t/shader-node-duplicate-variable-name/40387/7",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241017a14f302d393b28cd",
    "number": 855,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "replace addState() with attach() in the javadoc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241018a14f302d393b28ce",
    "number": 853,
    "body": "There was a singe s in glossiness which makes the whole shader not compile if you have a glossiness map set.",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix a typo which made pbr shader fail to compile"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241019a14f302d393b28cf",
    "number": 850,
    "body": "Javadoc on Image deprecated methods was outdated",
    "head_branch": "docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated deprecation documentation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624101aa14f302d393b28d0",
    "number": 849,
    "body": "This PR fixes the problems described in issue #848.\r\n\r\nI reworked the handling of the blend equations and blend factors in `GLRenderer` and `RenderState`.\r\n\r\nAlso reworked the existing `TestBlendEquations` example. The old example was much confusing and the lack of any documentation in the code gave me no change to understand its intention at all.",
    "head_branch": "issue848",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Reworked the TestBlendEquations example (#848)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624101ba14f302d393b28d1",
    "number": 846,
    "body": "Monkanim: new animation system!!",
    "head_branch": "monkanim",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remobes unused imports"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624101ca14f302d393b28d2",
    "number": 845,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix JME issue #742 (attachment nodes for ignoreTransform geometries)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624101da14f302d393b28d3",
    "number": 842,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624101ea14f302d393b28d4",
    "number": 841,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624101fa14f302d393b28d5",
    "number": 840,
    "body": "Reason:\r\nIf a shader-file has changed the application recognizes correctly the change, but the reload of the material actually reloads the old shader code instead of loading the new code. This is caused by the TechniqueDefault deep in the MaterialDefiniton.\r\n\r\nSolution:\r\nInstead of reuse the old MaterialDefinition let the AssetManager reload the MaterialDefinition.\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update MaterialDebugAppState.java\n\nI was debugging my application to dig down the issue why the shaders are recognized of change but not actually reloaded. I came to this solution."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624101fa14f302d393b28d6",
    "number": 839,
    "body": "Added texture formats R16F, R32F, RG16F, RG32F.\r\nAdded documentation for Format.Image elements.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added Texture Formats R16F, R32F, RG16F, RG32F. (#839)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241020a14f302d393b28d7",
    "number": 838,
    "body": "[Thread](https://hub.jmonkeyengine.org/t/suggestion-to-the-predefined-materials-and-shaders)\r\n@Nehon ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "added class with material's constants."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241021a14f302d393b28d8",
    "number": 837,
    "body": "Hi, \r\nI think I corrected this problem, can you see if this is correct ?\r\n When testing with RigidBodyControl, the null value was placed in the setUserObject. The spatial (in the case of RigidBodyControl), was not copied.\r\n\r\nThanks",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241022a14f302d393b28d9",
    "number": 836,
    "body": "https://hub.jmonkeyengine.org/t/suggestion-to-the-predefined-materials-and-shaders/40154/17",
    "head_branch": "add_materials_constants",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241023a14f302d393b28da",
    "number": 835,
    "body": "Also add minor grammar fixes.\r\n\r\nDependant on PR #834 (Addition of Plane Constructor)",
    "head_branch": "camera-clip",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241024a14f302d393b28db",
    "number": 834,
    "body": "Sorry for the multiple PR's, I'm new to the whole GitHub scene and I'm trying to gain some footing with a simplistic contribution to this great community project.",
    "head_branch": "plane-constructor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #834 from pdid17/plane-constructor\n\nAdd a convenience constructor to Plane"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241025a14f302d393b28dc",
    "number": 833,
    "body": "",
    "head_branch": "camera-clip",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241026a14f302d393b28dd",
    "number": 832,
    "body": "I propose an additional constructor to com.jme3.math.Plane that allows construction of a plane from another common mathematical definition of a plane. The plane is defined by a normal vector and a single point on the plane.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241027a14f302d393b28de",
    "number": 830,
    "body": "This PR resolves issue #829 (\"BoneTrack.clone() adds scales\") and also cleans up a design issue that Paul raised in the wake of commit ce871d8.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "follow JME's conventional approach to cloning a SpatialTrack"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241028a14f302d393b28df",
    "number": 828,
    "body": "I propose within this PR an AWT component rendering within app state\r\n\r\nThis implementation differs from the previous one as it's relies on AppState (compatible with all JME application) and as it use only produced framebuffer (no link with native objects).\r\n\r\nWith this implementation, it is possible to use AWT component ad rendering target and so to integrate JMonkey rendering within AWT / Swing application. This capability was no more available with LWJGL3 as the version 3.1.x does not provide anymore AWT link.\r\n\r\nThe old AWT integration cannot be removed at this time as many users of JMonkey use AWT canvas, however, those that want to use LWJGL3 version of Jmonkey (for example to use VR capabilities) have no more access to AWT capabilities. This is the reason why my commit add redundancy with some classes...",
    "head_branch": "jme3-vr",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Jme3 vr (#828)\n\n* Updated OpenVR implementation to 1.0.9\r\n\r\nUser can specify external OpenVR library to load with\r\nopenvr.library.path system property.\r\nUsage: java -Dopenvr.library.name=my_path_to_library MyApp\r\n\r\nRemoved reference to OCCULUS VR and OpenVR from VRAppstate as this class\r\nis generic and does not have to be linked to specific implementation.\r\n\r\nVRMouseManager can be buggous using OSVR or Occulus VR. \r\n\r\nRefactored VR implementation packages in order to separate all available\r\nimplementation. Modifying or adding implementation should no more impact\r\nother ones. \r\n\r\nRenamed some classes in order to be uniform\r\n\r\n* Sample and VR mouse manager update\r\n\r\nAdding sample for VR AppState\r\n\r\nAdded OSVRMouseManager in order to handle VRMouseManager for OSVR\r\nenvironment\r\n\r\nAdded OcculusMouseManager in order to handle VRMouseManager for Oculus\r\nenvironment\r\n\r\nChanged OpenVRMouseManager reference within VRAppState and VREnvironment\r\ninto VRMouseManager\r\n\r\n* Revert previous commit as jme3-examples does not handle java8 and lwjgl3\r\n\r\n* Adding AWT component rendering within app state\r\n\r\nAdding AWT component rendering capabilities for any JMonkeyEngine\r\nrenderer (works with LWJGL 3.1.x and compatible with other\r\nimplementations)\r\n\r\nThis implementation differs from the previous one as it's relies on\r\nAppState (compatible with all JME application) and as it use only\r\nproduces framebuffer.\r\n\r\nWith this implementation, it is possible to use AWT component ad\r\nrendering target and so to integrate JMonkey rendering within AWT /\r\nSwing application. This capability was not available with LWJGL3 as the\r\nversion 3.1.x does not provide anymore AWT link.\r\n\r\n* AWTComponentAppState update\r\n\r\nAdded Update within AWTComponentAppState and added getter and setter for\r\ntransfer mode within AWTFramePRocessor\r\n\r\n* Removing Java 8 related stuff"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241029a14f302d393b28e0",
    "number": 827,
    "body": " + Change the initial camera position so that the terrain is visible.\r\n + Display a hint about the T key.\r\n + Fix a bug where the T key had to be pressed twice before it would work.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "make TerrainTestCollision more user-friendly"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624102aa14f302d393b28e1",
    "number": 826,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "deprecate Control.cloneForSpatial()"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624102ba14f302d393b28e2",
    "number": 824,
    "body": "A compacted version of this PR:\r\nhttps://github.com/jMonkeyEngine/jmonkeyengine/pull/790",
    "head_branch": "refactoring_upgrading_lwjgl3_3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "refactored and upgraed lwjgl3 module."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624102ca14f302d393b28e3",
    "number": 823,
    "body": "A compacted version of this PR:\r\nhttps://github.com/jMonkeyEngine/jmonkeyengine/pull/790",
    "head_branch": "refactoring_upgrading_lwjgl3_2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624102da14f302d393b28e4",
    "number": 822,
    "body": "Implementing Shader Storage Buffer Object for jME.\r\nExample of shader which uses SSBO as a material parameter:\r\nhttps://github.com/JavaSaBr/jmonkeybuilder/blob/feature/multi_select_in_scene/src/test/resources/MatDefs/Unshaded.frag\r\nExample of working with SSBO.\r\nhttps://github.com/JavaSaBr/jmonkeybuilder/blob/feature/multi_select_in_scene/src/test/java/com/ss/editor/test/external/SSBOSceneTest.java",
    "head_branch": "added_new_var_type",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624102ea14f302d393b28e5",
    "number": 821,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "address issue #816: BoneTrack.setKeyframes() throws NPE in assertions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624102fa14f302d393b28e6",
    "number": 820,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624102fa14f302d393b28e7",
    "number": 819,
    "body": "Fixed 2 parameters of shadow renderer.",
    "head_branch": "fixed_settings_of_shadow_render2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fixed 2 parameters of shadow renderer. (#819)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241030a14f302d393b28e8",
    "number": 818,
    "body": "If we can't locate a linked child, we should print a warning about this, but don't prevent load the parent model. We did it in the case when a loaded child is null, but if the asset manager can't load the child, it doesn't return null, it throws an exception.",
    "head_branch": "fixed_asset_link_node",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241031a14f302d393b28e9",
    "number": 817,
    "body": "Fixed 2 parameters of shadow renderer.",
    "head_branch": "fixed_settings_of_shadow_render",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241032a14f302d393b28ea",
    "number": 814,
    "body": "This is added functionality for convenience, not a bug fix.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add getters to shadow renderers/filters for number of maps and sizes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241033a14f302d393b28eb",
    "number": 813,
    "body": "Fix issue #371",
    "head_branch": "Fix#371",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix an issue with Skeleton deserializing\n\nFix issue #371"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241034a14f302d393b28ec",
    "number": 812,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "resolve deprecation warnings in jme3-niftygui"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241035a14f302d393b28ed",
    "number": 811,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added link to the wiki readme."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241036a14f302d393b28ee",
    "number": 808,
    "body": "Removed excessive logging",
    "head_branch": "fix-694",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #694 Reduce the logging level for OpenCLObjectManager"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241037a14f302d393b28ef",
    "number": 807,
    "body": "I did not fix this for the deprecated Shadow Renderers because they are deprecated",
    "head_branch": "fix-shadows-serialization",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Shadow Filters not having a default constructor and hence not being deserializable."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241038a14f302d393b28f0",
    "number": 806,
    "body": "This pull request adds the missing key code for the Print Screen key. \r\nHowever, LWJGL will interpret this key as SYSRQ unless the buttons are separated.",
    "head_branch": "fix_#682",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Adds missing key code for Print Screen (#682) (#806)\n\n* Adds missing key code for Print Screen and update javadoc (#682)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241039a14f302d393b28f1",
    "number": 805,
    "body": "Fix issue #783 & #764",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[taken]Fix issue #764\n\nFix infinity loop in EmitterSphereShape. issue #764\n\nI test on both method:\n\n    public void getRandomPoint1(Vector3f store) {\n        float l = FastMath.pow(FastMath.nextRandomFloat(), 1f / 3f);\n        float u = FastMath.nextRandomFloat() * 2f - 1f;\n        float o = FastMath.nextRandomFloat() * FastMath.TWO_PI;\n\n        store.z = l * u;\n        u = 1f / FastMath.fastInvSqrt(1f - u * u);\n        store.x = l * u * FastMath.cos(o);\n        store.y = l * u * FastMath.sin(o);\n        store.multLocal(radius);\n        store.addLocal(center);\n    }\n\n    public void getRandomPoint2(Vector3f store) {\n        do {\n            store.x = (FastMath.nextRandomFloat() * 2f - 1f);\n            store.y = (FastMath.nextRandomFloat() * 2f - 1f);\n            store.z = (FastMath.nextRandomFloat() * 2f - 1f);\n        } while (store.lengthSquared() > 1);\n        store.multLocal(radius);\n        store.addLocal(center);\n    }\n    // Test\n    public void testGetRandomPoint() {\n        int n = 1000000;\n        long start = System.nanoTime();\n        for (int i = 0; i < n; i++) {\n            getRandomPoint1(store);\n        }\n        long time1 = System.nanoTime() - start;\n\n        start = System.nanoTime();\n        for (int i = 0; i < n; i++) {\n            getRandomPoint2(store);\n        }\n        long time2 = System.nanoTime() - start;\n\n        System.out.println(\"t1:\" + time1);\n        System.out.println(\"t2:\" + time2);\n        System.out.println(\"t1/t2:\" + (float) time1 / time2);\n    }\n\nResult:\n\n    t1:352272158\n    t2:94436324\n    t1/t2:3.7302613\n\nMethod2 seems nearly 4 times faster than method1."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624103aa14f302d393b28f2",
    "number": 804,
    "body": "The receive_shadow flag is normally interpreted.\r\nThoced",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Ogre importer ignores receive_shadows  issue #647"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624103ba14f302d393b28f3",
    "number": 803,
    "body": "This pull request fixes the typo in the assert statement in the class PhysicSpace.\r\nThe typo is contained in both packages: jme3-bullet and jme3-jbullet but note that in first the whole method is commented out anyway.",
    "head_branch": "typo_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixed typo in assert described in issue #538"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624103ca14f302d393b28f4",
    "number": 802,
    "body": "",
    "head_branch": "Ali-RS-patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix javadoc for Quaternion.toAngles() method (#802)\n\n* Fix javadoc for Quaternion toAngles and fromAngles\r\n\r\nJME treats Z as the main direction or look direction so x is pitch, y is yaw, and z is roll,"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624103da14f302d393b28f5",
    "number": 799,
    "body": "Change \"WeakRefAssetCache\" to \"WeakRefCloneAssetCache\".",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #799 from jmecn/master\n\nFix typo in logger of WeakRefCloneAssetCache"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624103ea14f302d393b28f6",
    "number": 795,
    "body": "It's not pretty code, but it improves the behavior of InputManager when LWJGL is in use and shouldn't break anything (that isn't already broken) when it isn't.\r\n\r\nFor the longer term, a cleaner solution might be to modify MouseInput.setInputListener() so that it returns the current mouse position.\r\n\r\nLet me know what you think!",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "initialize InputManager.cursorPos to fix issue #792 for LWJGL2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624103fa14f302d393b28f7",
    "number": 793,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated version."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624103fa14f302d393b28f8",
    "number": 791,
    "body": "supposed to be an update for https://github.com/jMonkeyEngine/jmonkeyengine/pull/789\r\nBut somehow I guess I cannot override a PR from another branch",
    "head_branch": "classcast",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Uniform.java: avoid ClassCastException when overriding Vector4 params"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241040a14f302d393b28f9",
    "number": 790,
    "body": "These changes are for jME 3.3.\r\n1. Upgraded LWJGL to 3.1.5\r\n2. Refactored LWJGL3 module\r\n3. Refactored some core interfaces(just added Javadoc in the most cases)",
    "head_branch": "refactoring_upgrading_lwjgl3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241041a14f302d393b28fa",
    "number": 789,
    "body": "In 3.1, a delayed ClassCastException would occur com.jme3.shader.Uniform#setValue() whenever:\r\n  1. a ColorRGBA material parameter was overridden by a Quaternion/Vector4f \r\n  2. a Quaternion material parameter was overridden by a ColorRGBA/Vector4f OR\r\n  3. a Vector4f material parameter was overridden by a ColorRGBA/Quaternion .\r\n\r\nTo the shader, these all represent Vector4 values, but to Java they are incompatible objects.\r\n ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241042a14f302d393b28fb",
    "number": 788,
    "body": "Deprecated classes and methods should be avoided, especially in examples. This PR resolves all deprecation warnings in the jme3-examples subproject.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "package protect the MovingAverage class instead of deprecating it"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241043a14f302d393b28fc",
    "number": 787,
    "body": "See jMonkeyEngine/jmonkeyengine#727\r\n\r\nWhen a blender file contained a hdr image, for example, the engine is able to load that as a texture, however the blender importer didn't do so.\r\nThis was because it didn't rely on the AssetManager to load images but instead called some Loaders directly.\r\n\r\nThis pull request fixes this by using the AM, which means any (even user-) registered AssetLoader can be used to load textures from blender files now.\r\n\r\nI've made an API Change though: ImageLoader is now more of a TextureLoader. The AssetManager can only hand back Texture objects and since there is no point in converting: Texture->Image->Texture, I added loadTexture() and deprecated loadImage.\r\n\r\nTechnically loadImage could be removed as well since it's never called, but I kept it in for now.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Blender TextureHelper: Make use of ImageLoader's new loadTexture capability"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241044a14f302d393b28fd",
    "number": 786,
    "body": "It's a good option in some cases when we want to set values to some input variables of a shader node directly without using material parameters. It looks like:\r\n```\r\nShaderNode Add {\r\n                Definition: Add: Common/MatDefs/ShaderNodes/Math/FloatVertexNodes.j3sn\r\n                ValueMappings {\r\n                    first = 1.5\r\n                    second = 2.5\r\n                }\r\n            }\r\n```",
    "head_branch": "value_mappings_for_shader_nodes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Implementing value mappings for shader nodes. (#786)\n\n* implemented value mappings for shader nodes."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241045a14f302d393b28fe",
    "number": 785,
    "body": "Resolves #784 \r\n\r\nI also changed the LinkedLists to ArrayDeques as they should be \"faster\", anyway somewhat more recommended. Minor formattings :( But only minor.\r\n\r\nThis is also not discussed in the forums.",
    "head_branch": "feature-784",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Animated cursor support for LWJGL 3 (#785)\n\n* Simple animated cursor support\r\n\r\n* Use primitive array and diamond constructor"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241046a14f302d393b28ff",
    "number": 782,
    "body": "At this moment, I don't have a possibility to load documentation of shader node definitions in a material definition. \r\nAlso, a shader node definition doesn't contain enough information to load the same definition with documentation separately. So, I have added a method with a thread-local flag to force loading documentation.",
    "head_branch": "added_force_loading_documentation_to_shader_node_loader",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241047a14f302d393b2900",
    "number": 780,
    "body": "Based on recent forum discussion at \r\n\r\nhttps://hub.jmonkeyengine.org/t/3-2-0-alpha-phase/39711/36\r\n\r\nI'm rolling back PR 746. With this change, the emitter in TestMovingParticle appears to move again. I'm optimistic that this will also resolve glh3586's issue. ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "roll back PR 746 (worldTransform to identity) in master branch"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241048a14f302d393b2901",
    "number": 779,
    "body": "User can specify external OpenVR library to load with\r\nopenvr.library.path system property.\r\nUsage: java -Dopenvr.library.name=my_path_to_library MyApp\r\n\r\nRemoved reference to OCCULUS VR and OpenVR from VRAppstate as this class\r\nis generic and does not have to be linked to specific implementation.\r\n\r\nVRMouseManager can be buggous using OSVR or Occulus VR. \r\n\r\nRefactored VR implementation packages in order to separate all available\r\nimplementation. Modifying or adding implementation should no more impact\r\nother ones. \r\n\r\nRenamed some classes in order to be uniform",
    "head_branch": "jme3-vr",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "OpenVR 1.0.9 and Occulus Support (#779)\n\n* Updated OpenVR implementation to 1.0.9\r\n\r\nUser can specify external OpenVR library to load with\r\nopenvr.library.path system property.\r\nUsage: java -Dopenvr.library.name=my_path_to_library MyApp\r\n\r\nRemoved reference to OCCULUS VR and OpenVR from VRAppstate as this class\r\nis generic and does not have to be linked to specific implementation.\r\n\r\nVRMouseManager can be buggous using OSVR or Occulus VR. \r\n\r\nRefactored VR implementation packages in order to separate all available\r\nimplementation. Modifying or adding implementation should no more impact\r\nother ones. \r\n\r\nRenamed some classes in order to be uniform"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241049a14f302d393b2902",
    "number": 777,
    "body": "Fixed finding definitions during material loading.\r\nThe problem is:\r\nI have different shader definitions with the same name(Split/Add/Mult for different types) in my shader node material, but when I try to load it I see that loader looks at only the name of these definitions, so I have incorrect loaded material in the result.",
    "head_branch": "fixed_difinition_name_collisions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixed finding definitions during material loading."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624104aa14f302d393b2903",
    "number": 776,
    "body": "Fixed NPE during loading a shader node material without vertex nodes.",
    "head_branch": "fixed_npe_during_loading_shader_node_material_without_vertex_nodes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fixed NPE during loading shader node material without vertex nodes."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624104ba14f302d393b2904",
    "number": 775,
    "body": "I believe this PR makes saving/loading of Cinematics possible. At least it works with my simple test case. I have a feeling it won't work in all cases, though. See description in c83d087 for details\r\nThis is not so large as it seems. For most classes it's just the addition of constructors. For some reason git wants to replace the whole class. I'm not sure all the changes in commit 5954822 are required when it comes to constructors.\r\nCameraEvent is a new class derived from the anonymous inner class in Cinematic that was causing issues with serialization.\r\nCinematic and AnimationEvent are the two classes that have changes in them.",
    "head_branch": "cinematics",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Several changes to load cinematics\nCinematic:\n\t* Reattach CameraNode to scene\n\t* Set CameraNode's camera to be app's camera\nAnimationEvent:\n\t* Save modelName\n\t* Use modelName and try to replace scene's model in initEvent"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624104ca14f302d393b2905",
    "number": 774,
    "body": "Fixed detecting varyings during loading shader nodes in the case, when we have several output parameters with the same name but with different namespaces.",
    "head_branch": "fix_detecting_varyings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fixed detecting varyings during loading shader nodes in the case, when we have several output parameters with the same name but with different name spaces."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624104da14f302d393b2906",
    "number": 773,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #773 from stephengold/master\n\nfix for issue #772: populate bullet debug mesh using unscaled shape"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624104ea14f302d393b2907",
    "number": 771,
    "body": "Fixed the problem with the reference to light, when we had incorrect reference to the light after loading/cloning spatial of this control.\r\n\r\nExample:\r\nI have a node with a point light and a light control with the reference to the light. When I load the node late, I have a cloned version of the node with a cloned version of the light and a cloned version of the light control, but the cloned control related to original light.",
    "head_branch": "fixed_light_control",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fixed the problem with the reference to light, when we had incorrect reference to the light after loading/cloning spatial of this control."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624104fa14f302d393b2908",
    "number": 769,
    "body": "Added new implementation of ShaderGenerator which is based on AST of GLSL code. \r\nFeatures:\r\n1. Generating result shader without using regex.\r\n2. Auto-resolving names of additional methods in shader nodes to avoid name collisions.\r\n3. Auto-resolving names of local variables of shader nodes to avoid name collisions.\r\n4. Auto-resolving world bindings from imported shaders inside shader nodes.\r\n5. Auto-resolving defines inside shader nodes. For example:\r\nWe have an using of definition in the shader node code like this:\r\n```\r\n#ifdef SD_IS_SET_inColor                    \r\n        vertexColor *= inColor;\r\n    #endif\r\n```\r\nthe generator transforms it into this in the result shader:\r\n```\r\n #ifdef <Namespace>_SD_IS_SET_inColor                    \r\n        <Namespace>_vertexColor *= inColor;\r\n    #endif\r\n```\r\nand if the input parameter is set, the generator adds the definition to the top of the result shader:\r\n`#define <Namespace>_SD_IS_SET_inColor 1`",
    "head_branch": "ast_shader_generator",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241050a14f302d393b2909",
    "number": 767,
    "body": "Here are some changes to jme3-vr:\r\n\r\n1. Updated OpenVR implementation to 1.0.9\r\n2. User can specify external OpenVR library to load with openvr.library.path system property.\r\n    Usage: java -Dopenvr.library.name=my_path_to_library MyApp\r\n3. Removed reference to OCCULUS VR and OpenVR from VRAppstate as this class is generic and does not have to be linked to specific implementation.\r\n4. VRMouseManager could be buggous using OSVR or Occulus VR. \r\n5. Refactored VR implementation packages in order to separate all available implementation. Modifying or adding implementation should no more impact other ones. \r\n6. Renamed VR implementation related classes in order to be uniform",
    "head_branch": "jme3-vr-dev",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241051a14f302d393b290a",
    "number": 765,
    "body": "Fixed the problem with saving/loading light probes.",
    "head_branch": "fixed_saving_loading_light_probes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fixed the problem with saving/loading light probes."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241052a14f302d393b290b",
    "number": 763,
    "body": "I tested the fix in my own application. No test case provided.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #763 from stephengold/master\n\nfix issue #762 (WireSphere generates parallels with wrong radii)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241053a14f302d393b290c",
    "number": 761,
    "body": "1. Added default values for shader node variables.\r\n2. Fixed using texture uniforms in vertex shader nodes.\r\n3. Other small changes.\r\nIt's a branch from the PR https://github.com/jMonkeyEngine/jmonkeyengine/pull/759 without temp commits.",
    "head_branch": "extend_shader_node_things_3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "extended some things from shader node system."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241054a14f302d393b290d",
    "number": 760,
    "body": "1. Added default values for shader node variables.\r\n2. Fixed using texture uniforms in vertex shader nodes.\r\n3. Other small changes.\r\nIt's a branch from the PR https://github.com/jMonkeyEngine/jmonkeyengine/pull/759 without temp commits.",
    "head_branch": "extend_shader_node_things_2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241055a14f302d393b290e",
    "number": 759,
    "body": "1. Added default values for shader node variables.\r\n2. Fixed using texture uniforms in vertex shader nodes.\r\n3. Added two collections to shader node definition for alternative implementations of shader generators.\r\n4. Other small changes.",
    "head_branch": "extend_shader_node_things",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241056a14f302d393b290f",
    "number": 757,
    "body": "This didn't work, so I'm reverting this change. Hopefully input from user will help.",
    "head_branch": "osvr_viewmanager",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #757 from neph1/osvr_viewmanager\n\nreverting orientation changes."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241057a14f302d393b2910",
    "number": 756,
    "body": "Comparing the classes VRViewManagerOpenVR and VRViewManagerOSVR there are some obvious refactoring possibiliets in VRViewManagerOSVR, like overridden fields and methods. This could possibly (although not likely) fix the issue described in https://hub.jmonkeyengine.org/t/official-vr-module/37830/47",
    "head_branch": "osvr_viewmanager",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #756 from neph1/osvr_viewmanager\n\nmaking VRViewManagerOSVR more similar to VRViewManagerOpenVR"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241057a14f302d393b2911",
    "number": 755,
    "body": "Currently, due to some changes I made while getting the GUI to work on the Rift, the main scene is being updated twice per frame while in VR, both on the Rift and SteamVR.\r\n\r\nThe loop used to iterate over `application.getViewPort().getScenes()`, and reverting to this fixed the issue on SteamVR.\r\n\r\nOn SteamVR, the main viewport is always empty while in VR, so removing the original version of the loop does not change anything. However, the main scene remained in the appliation viewport on the Rift, and as such removing the loop entirely fixes the issue.\r\n\r\nSee: [jME Forum post](https://hub.jmonkeyengine.org/t/jme3-vr-duplicate-calls-to-update/39479).",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #755 from ZNixian/master\n\nPrevent double-updating the main scene in VR"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241058a14f302d393b2912",
    "number": 754,
    "body": "Fixed NPE when you try to remove an unused asset loader.",
    "head_branch": "fixed_npe",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "simplified version."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241059a14f302d393b2913",
    "number": 753,
    "body": "This allows apps to use the front mounted camera on the htc vive.\r\nIt's fairly unstable. It (the camera) can break down, in which case, disabling it in SteamVR, restarting SteamVR and enabling the camera again usually works.\r\nI also get a crash first time I use it after SteamVR is launched. Error 113 (no frame available). ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #753 from neph1/master\n\nadded functionality to use front mounted vive camera. 2nd try. Camera is still unstable and can break down between runs. Solution is to restart SteamVR."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624105aa14f302d393b2914",
    "number": 752,
    "body": "This PR adds Oculus Rift / LibOVR support, via the LWJGL bindings.\r\n\r\nSee [the forum thread](https://hub.jmonkeyengine.org/t/libovr-oculus-rift-support/39427) for more information.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #752 from ZNixian/master\n\nAdd Oculus Rift support"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624105ba14f302d393b2915",
    "number": 750,
    "body": "I applied the patch provided by kruchinin-pavel",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #750 from stephengold/master\n\nfix issue #749: NPE in CollideIgnoreTransformTest"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624105ca14f302d393b2916",
    "number": 748,
    "body": "In addition to correcting the cut-and-paste error referenced in issue #697, many other shortcomings of the inline documentation were corrected. Two @Overrides annotations were added. A star import was expanded into multiple statements.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #748 from stephengold/master\n\nFlyByCamera: comments, annotations, & imports; address GitHub issue #697"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624105da14f302d393b2917",
    "number": 747,
    "body": "Add an empty constructor with logical values for serialization purposes. (e.g. the BinaryImporter has issues instantiating the Grid mesh.)\r\n[binaryImporter_stacktrace.txt](https://github.com/jMonkeyEngine/jmonkeyengine/files/1337060/binaryImporter_stacktrace.txt)\r\n",
    "head_branch": "add-grid-constructor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add an empty constructor to Grid mesh (#747)\n\n* add an empty constructor with logical values for serialization purposes. eg. the BinaryImporter has issues instantiating the Grid mesh.\r\n\r\n* empty constructor for serialization purposes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624105ea14f302d393b2918",
    "number": 746,
    "body": "This PR changes the semantics of localToWorld() and worldToLocal() to identities in the case that ignoreTransform is set to true on the Geometry. I think this is more useful than applying a transform that isn't actually used in visualization. Also getWorldRotation(), getWorldScale(), getWorldTransform() and getWorldRotation() will return identities if ignoreTransform is set, which is consistent with localToWorld() if not perfectly intuitive.\r\n\r\nI've confirmed that this change doesn't break CollideIgnoreTransformTest.  By itself, it doesn't fix issue #742 nor issue #743, though it should make both those issues slightly easier to fix.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #746 from stephengold/master\n\nGeometry: set worldTransform to identity if ignoreTranform is true"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624105fa14f302d393b2919",
    "number": 745,
    "body": "Since there's a simple fix, it seems worth fixing.\r\n\r\nThis will change the behavior of Spatial.worldToLocal() and Spatial.localToWorld() when the Spatial is an  ignoreTransforms Geometry, but this strikes me as a positive change, making these methods' behavior more intuitive.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #745 from stephengold/master\n\ntestcase & fix for issue #744: collideWith() versus setIgnoreTransform()"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241060a14f302d393b291a",
    "number": 739,
    "body": "I looked at the problem more deeply which was described by @NemesisMate here:\r\nhttps://hub.jmonkeyengine.org/t/linkedassets-arent-sharing-meshes-when-imported/38494?u=nemesismate\r\nSo I think we need to use asset manager to load children of the asset linked node, but at this moment, BinaryImporter doesn't process correctly recursive loading models in this case, because the importer has a state which was inconsistent in my tests. I offer one of some solutions of this problem, of course, core team can have more correctly vision of this.",
    "head_branch": "fixed_sharing_data_using_asset_link_node",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fixed asset linked node to reuse shared data between loaded models. (#739)\n\n* fixed asset linked node to reuse shared data between loaded models.\r\n* updated implementation of binary loader."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241061a14f302d393b291b",
    "number": 738,
    "body": "We didn't close readers of shader streams in the GLSLLoader. It provided some file lock leaks and then I couldn't change these files on windows without restarting jME application.",
    "head_branch": "fixed_file_look_leaks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "added auto closing readers. (#738)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241062a14f302d393b291c",
    "number": 737,
    "body": "Fixed NPE during saving MatParamOverride. I found that MatParamOverride can have a null value in some cases. For example, if you look at the constructor of SkeletonControl, you can see that this control creates two MPO with null values by default.\r\n```\r\n\r\n        this.numberOfBonesParam = new MatParamOverride(VarType.Int, \"NumberOfBones\", null);\r\n        this.boneMatricesParam = new MatParamOverride(VarType.Matrix4Array, \"BoneMatrices\", null);\r\n```",
    "head_branch": "fixed_NPE_during_saving_matparam",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fixed NPE. (#737)\n\n* fixed NPE.\r\n* changed the if condition."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241063a14f302d393b291d",
    "number": 736,
    "body": "",
    "head_branch": "gradle-4.1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "upgrade to gradle 4.1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241064a14f302d393b291e",
    "number": 735,
    "body": "1. Small fixes with indents\r\n2. The important fix with working of varying variables.",
    "head_branch": "some_changes_for_shader_nodes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241065a14f302d393b291f",
    "number": 734,
    "body": "The fix is simple: use WorldMatrixInverse instead of WorldMatrix to transform the normal vector in the vertex shader.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #734 from stephengold/master\n\ntest and fix for issue #651 (inverted rotation in Sky.vert)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241066a14f302d393b2920",
    "number": 733,
    "body": "",
    "head_branch": "patch-21",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241067a14f302d393b2921",
    "number": 730,
    "body": "When using a `flatDir` repository Gradle is able to copy the dependencies correctly",
    "head_branch": "fix-456",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix #456"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241067a14f302d393b2922",
    "number": 729,
    "body": "Multisample textures do not support mipmapping, so all parameters related to mipmapping are illegal to use",
    "head_branch": "fix-558",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix #558 (#729)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241069a14f302d393b2923",
    "number": 727,
    "body": "When a blender file contained a hdr image, for example, the engine is able to load that as a texture, however the blender importer didn't do so.\r\nThis was because it didn't rely on the AssetManager to load images but instead called some Loaders directly.\r\n\r\nThis pull request fixes this by using the AM, which means any (even user-) registered AssetLoader can be used to load textures from blender files now.\r\n\r\nI've made an API Change though: ImageLoader is now more of a TextureLoader. The AssetManager can only hand back `Texture` objects and since there is no point in converting:  `Texture->Image->Texture`, I added loadTexture() and deprecated loadImage.\r\n\r\nTechnically loadImage could be removed as well since it's never called, but I kept it in for now.",
    "head_branch": "fix_blender_load_hdr",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624106aa14f302d393b2924",
    "number": 726,
    "body": "So there is a little bug in the blender importer:\r\nWhen there is a texture which couldn't be loaded (in my case it was a hdr file which wasn't supported yet), the whole import procedure crashed with a NullPointerException (loadImage() returned null).\r\n\r\nJudging by 0e340416fdf399aec25da9711b501f081232abd9 and the general intention it would be better to import a model without that texture then (The code was already prepared for result being null), so we just don't throw an Exception when the Texture Loading failed.",
    "head_branch": "fix_blender_unknown_image",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "BlenderImporter: Don't silently fail when a packed file couldn't be loaded but use a Placeholder Texture"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624106ba14f302d393b2925",
    "number": 725,
    "body": "Rebasing with Git was driving me crazy, so I cloned a new repo and reapplied my changes.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #725 from stephengold/master\n\ntest and fix for issue #710 (phantom triangles in mesh collision)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624106ba14f302d393b2926",
    "number": 724,
    "body": "I like Jme clone system and savable objects system and I like to use it with all jME objects, but I saw that MaterialDef's things don't implement it. So I have migrated these things to use JmeClonable system and implemented JmeClonable/Savable interfaces for all these things.",
    "head_branch": "migrate_material_things_to_use_jme_clonable_system",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624106da14f302d393b2927",
    "number": 723,
    "body": "![Teapot lit by spot lights](https://jme-hub-cdn-jmonkeyengineor.netdna-ssl.com/uploads/default/original/2X/3/30d4027ec5df65ae6eac9ebff5cada3adf0f0219.png)\r\n\r\nThis is the PR implementing in-pass shadows as shown in the April 2016 screenshot thread:\r\nhttps://hub.jmonkeyengine.org/t/april-2016-monthly-wip-screenshot-thread/35512/128\r\n\r\nHow it works:\r\n`PreShadowArrayRenderer` is responsible for generating a texture array containing shadow maps for every light that should be shadowed. Directional lights use PSSM with 1-4 slices, spot lights use 1 slice, and point lights will use 6 slices (not implemented yet). The information of which texture array to use and the slices is represented in the `ShadowMap` interface. This is then associated with the light so that later it can be retrieved.\r\nWhen the scene is rendered, `ShadowStaticPassLightingLogic` is the `TechniqueDefLogic` implementation that is capable of rendering in-pass shadows. The light types are statically known which allows the shader to avoid control flow. It works similarly to `SinglePass`, except that the lights are first sorted by type and then their counts are known statically, so instead of this loop:\r\n\r\n```\r\nfor each light do ...\r\n```\r\n\r\nIt becomes\r\n\r\n```\r\nfor each directional light do ...\r\nfor each point light do ...\r\nfor each spot light do ...\r\n```\r\n\r\nThis then allows using different logic depending on the light type. The way shadow maps are fetched varies depending on the type of light, which is why this is required.\r\n\r\nTheoretically, if we have control flow in the shader then we don't need to know the light type in advance and we can calculate the slice to fetch per each light. This is probably how in-pass shadows will be integrated with the rest of the lighting shaders.\r\n\r\nTODO:\r\n- [x] Point light support\r\n- [x] Remove / fix the hacks from `ShadowUtil`\r\n- [x] Remove all the static lighting crap\r\n\r\nOptional:\r\n- [ ] Port the old shadow renderers to the new system\r\n- [ ] Implement and test PSSM-only in-pass shadows\r\n- [ ] Test on OpenGL ES 2.0",
    "head_branch": "in-pass-shadows",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624106da14f302d393b2928",
    "number": 722,
    "body": "For some reason this has the commits from `opengles2-fixes`... Too lazy to fix right now.",
    "head_branch": "fast-ms-tonemap",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Avoid calculating whitepoint for each sample for HDR (#722)\n\n* Avoid calculating whitepoint for each sample for HDR"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624106ea14f302d393b2929",
    "number": 721,
    "body": "",
    "head_branch": "travis-suxxorz",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Try to fix Travis-CI buffer overflow on JDK7 (#721)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624106fa14f302d393b292a",
    "number": 720,
    "body": "",
    "head_branch": "opengles2-fixes",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Miscellaneous OpenGL ES fixes (#720)\n\n* Use correct HALF_FLOAT constant for GLES\r\n* Support GLTracer and GL debug in Android\r\n* Support instancing in GLTracer\r\n* Don't use unsupported TEXTURE_{BASE,MAX}_LEVEL in GLES\r\n* Support ABGR8 using swizzle extension\r\n* Move glFramebufferTextureLayer to GLFbo\r\n* Avoid RGB111110F in filters unless its actually supported\r\n* Use the same depth format in all places in FPP\r\n* Print the object with the problem in NativeObjectManager\r\n* JMException does not exist on Android"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241070a14f302d393b292b",
    "number": 719,
    "body": "Fixes `Format.Depth` support in OpenGL ES 2.0. The spec does not allow usage of `GL_DEPTH_COMPONENT` in `glRenderbufferStorage`:\r\nhttps://www.khronos.org/registry/OpenGL-Refpages/es2.0/xhtml/glRenderbufferStorage.xml\r\n\r\n>internalformat\r\n>Specifies the color-renderable, depth-renderable, or stencil-renderable format of the renderbuffer. Must be one of the following symbolic constants: \r\n\t\t    GL_RGBA4, \r\n\t\t    GL_RGB565, \r\n\t\t    GL_RGB5_A1, \r\n\t\t    GL_DEPTH_COMPONENT16, or\r\n\t\t    GL_STENCIL_INDEX8.",
    "head_branch": "fix-gles-depth-fbo",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix depth texture support in OpenGL ES 2.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241071a14f302d393b292c",
    "number": 718,
    "body": "Upgrade to 3.1.2",
    "head_branch": "lwjgl312",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Support LWJGL 3.1.2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241072a14f302d393b292d",
    "number": 717,
    "body": "Fixes the annoying \"Material instances cannot be shared when hardware skinning is used\" error",
    "head_branch": "mpo-skinning",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Use MPOs for skinning"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241073a14f302d393b292e",
    "number": 716,
    "body": "Missed one collection.",
    "head_branch": "fixed_problem_with_clonning_shader_info",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #716 from JavaSaBr/fixed_problem_with_clonning_shader_info\n\nMissed one collection"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241074a14f302d393b292f",
    "number": 715,
    "body": "Fixed NPE and ConcurrentModificationException during cloning TechniqeDef.",
    "head_branch": "fixed_problem_with_clonning_material_definition",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixed NPE and ConcurrentModificationException during cloning TechniqueDef."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241075a14f302d393b2930",
    "number": 714,
    "body": "More info can be [found here](https://hub.jmonkeyengine.org/t/some-keys-not-registering-keyinputevent-on-android/36747).",
    "head_branch": "patch-20",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixed softkeyboard's (simulated) backspace not being recognized (#714)\n\nThe fix assumes that if a key-event's device is not recognized and the soft-keyboard is open, it is a touch-input event."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241076a14f302d393b2931",
    "number": 713,
    "body": "More info can be [found here](https://hub.jmonkeyengine.org/t/some-keys-not-registering-keyinputevent-on-android/36747).",
    "head_branch": "patch-19",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixed softkeyboard's (simulated) backspace not being recognized (#713)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241077a14f302d393b2932",
    "number": 712,
    "body": "",
    "head_branch": "feature/gltf-loader",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Some clean up"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241078a14f302d393b2933",
    "number": 711,
    "body": "I add a test-case for issue #710 and propose a simple fix.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241079a14f302d393b2934",
    "number": 709,
    "body": "allow easy manipulation of particleemitter via subclasses, eg in my case I want a start color, end color and midcolor.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update ParticleEmitter.java\n\nallow easy manipulation of particleemmite via subclasses"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624107aa14f302d393b2935",
    "number": 708,
    "body": "1. can't load classes from asset class loaders.\r\n2. can't load resources from asset class loaders.",
    "head_branch": "fix_problems_with_asset_manager",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #708 from JavaSaBr/fix_problems_with_asset_manager\n\nfixed two problems with asset manager:"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6624107ba14f302d393b2936",
    "number": 707,
    "body": "",
    "head_branch": "fix-appveyor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #707 from jMonkeyEngine/fix-appveyor\n\nFix AppVeyor"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624107ca14f302d393b2937",
    "number": 706,
    "body": "Caused by https://github.com/gradle/gradle/issues/2421",
    "head_branch": "jdk-7-error",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Try to fix JDK7 error (#706)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624107da14f302d393b2938",
    "number": 705,
    "body": "When the pbr material was introduced someone forgot to keep the instancing in mind which uses :\r\n            ViewProjectionMatrix\r\n            ViewMatrix\r\nI added these.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixed: If Instancing is activated you only see shadows\n\nWhen the pbr material was introduced someone forgot to keep the instancing in mind which uses :\r\n            ViewProjectionMatrix\r\n            ViewMatrix\r\nI added these."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624107ea14f302d393b2939",
    "number": 704,
    "body": "Now you can't create a material file of any type for sky, because sky.j3md has the only TextureCubeMap type of used texture even if you don't want to use cube map texture.",
    "head_branch": "fixed_sky_shader",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624107fa14f302d393b293a",
    "number": 703,
    "body": "because I want to get and set inertia",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #703 from empirephoenix/master\n\nAdded Inertia Manipulation Methods"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624107fa14f302d393b293b",
    "number": 702,
    "body": "Reset deactivation timer.\r\n\r\nFrom docu here: http://www.bulletphysics.org/mediawiki-1.5.8/index.php/Activation_States\r\n..\r\nACTIVE_TAG\r\n    Means active so that the object having the state could be moved in a step simulation. This is the \"normal\" state for an object to be in. Use btCollisionObject::activate() to activate an object, not btCollisionObject::setActivationState(ACTIVATE_TAG), or it may get disabled again right away, as the deactivation timer has not been reset. \r\n..",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update com_jme3_bullet_objects_PhysicsRigidBody.cpp (#702)\n\n* Update com_jme3_bullet_objects_PhysicsRigidBody.cpp\r\n\r\nFrom docu here: http://www.bulletphysics.org/mediawiki-1.5.8/index.php/Activation_States\r\n..\r\nACTIVE_TAG\r\n    Means active so that the object having the state could be moved in a step simulation. This is the \"normal\" state for an object to be in. Use btCollisionObject::activate() to activate an object, not btCollisionObject::setActivationState(ACTIVATE_TAG), or it may get disabled again right away, as the deactivation timer has not been reset. \r\n..\r\n\r\n* Update com_jme3_bullet_objects_PhysicsRigidBody.cpp\r\n\r\nSettin RigidBody kinematic and then back dynamic will leave activation state to disabled causing the object never fall to sleep."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241080a14f302d393b293c",
    "number": 701,
    "body": "This is the pull request that tries to fix issue #695.\r\n - The call to Runtime.getRuntime().gc() every few frames is removed. The user should be forced to clear the native handles manually. But the automatic cleanup by the gc is still there.\r\n - Added calls to Reference.clear() when an object is manually deleted.",
    "head_branch": "opencl-gc-patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #701 from shamanDevel/opencl-gc-patch\n\nFix for OpenCLObjectManager"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241081a14f302d393b293d",
    "number": 700,
    "body": "Added a lit bit improvements for SafeArrayList:\r\n1. improved comparing a SafeArrayList with another SafeArrayList.\r\n2. improved the constructor by other collection\r\n3. added a new constructor with init capacity.\r\n\r\nSome improvements with terrain LOD control:\r\n1. Added the new option to use camera from render view port(default false)\r\n2. Removed unnecessary synchronize blocks\r\n3. Replaced each control own executor to global terrain executor\r\n4. Removed unused things\r\n5. Reduced memory allocations\r\n6. Fixed the issue with cloning.\r\n\r\nAlso, these changes, of course, don't break back compatibility.",
    "head_branch": "update_terrain_lod_control",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fixed the constructor."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241082a14f302d393b293e",
    "number": 699,
    "body": "Added a possibility to resize env cameras.",
    "head_branch": "update_env_camera",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added a possibility to resize env cameras. (#699)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241083a14f302d393b293f",
    "number": 698,
    "body": "Builds here:  https://riccardobl.github.io/jme3-bullet-builder/",
    "head_branch": "bullet2_86",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update to bullet 2.86.1 (#698)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66241084a14f302d393b2940",
    "number": 696,
    "body": "Fixed the problem in LoD control:\r\nhttps://hub.jmonkeyengine.org/t/terrain-editor-broken/38952/22\r\nand one optimization in the method to update normals.",
    "head_branch": "update_terrain",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241085a14f302d393b2941",
    "number": 693,
    "body": "Just extended availability to edit/save/load the water filter.",
    "head_branch": "update_water_filter",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update the water filter (#693)\n\nWaterFilter now serializes the different textures textures, and can optionally serialize the reflection scene"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241086a14f302d393b2942",
    "number": 691,
    "body": "Added missed imports in shaders.",
    "head_branch": "fix_some_shaders",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added missed imports. (#691)\n\nUsed GLSL compat on the post shadow filter"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241087a14f302d393b2943",
    "number": 689,
    "body": "More information [here](https://hub.jmonkeyengine.org/t/splatting-textures-with-alpha-using-terrainlighting/38459).",
    "head_branch": "patch-14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added alpha blending option to terrain lightings to allow alpha stencil textures. (#689)\n\nUpdated Terrain materials to allow diffuse textures with alpha"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241088a14f302d393b2944",
    "number": 688,
    "body": "The parameter renderBackFacesShadows is true by default, but it doesn't have effects because the logic of making changes is inside in the setter of this parameter. So I have added a call of the setter during initialization.",
    "head_branch": "fix_option_renderBackFacesShadows",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix of the one parameter of shadows render.  (#688)\n\n* fixed applying the render back faces shadows option during creating a shadow filter."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241089a14f302d393b2945",
    "number": 687,
    "body": "I have found a new issue with the LWJGL buffer allocator in the case with high concurrency because I have added synchronize block only to there, but it needs to be in the deallocator as well.",
    "head_branch": "fix_lwjgl_buffer_2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #687 from JavaSaBr/fix_lwjgl_buffer_2\n\nadded synchronizing during freeing memory from a deallocator."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624108aa14f302d393b2946",
    "number": 686,
    "body": "Update LWJGL from 3.0.0 to 3.1.0(3.1.2 requires to change code), because starting from the version they use other dependencies for native libraries.",
    "head_branch": "update_lwjgl_version",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #686 from JavaSaBr/update_lwjgl_version\n\nUpdate LWJGL from 3.0.0 to 3.1.0(3.1.2 requires to change …"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624108ba14f302d393b2947",
    "number": 684,
    "body": "I see java crashes from time to time with jemalloc when I have high concurrency with memory allocations, so I have added thread-safe implementation of the allocator by default, but if your application doesn't have high concurrency, you can disable thread-safe allocator using a system property to improve performance with it. ",
    "head_branch": "fix_lwjgl_buffer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #684 from JavaSaBr/fix_lwjgl_buffer\n\nadded support multi-threading allocations for LWJGL Buffer Allocator."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624108ca14f302d393b2948",
    "number": 683,
    "body": "Fix typo on LightPosition and LightDirection",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #683 from jmecn/master\n\nFix typo on LightPosition and LightDirection"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624108da14f302d393b2949",
    "number": 681,
    "body": "…s bones to be extended in any direction instead of only the Y direction.",
    "head_branch": "skeletonClone",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Resolving issue in ticket #661.  Creating skelton debugger that allows bones to be extended in any direction instead of only the Y direction. (#681)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624108ea14f302d393b294a",
    "number": 680,
    "body": "I think we need to have a possibility to set core profile of most GL version, not only 3.2. Some drivers work correctly only in the case when you use a core profile, but when we use a core profile, we have limits to use features from higher versions. For example Intel Graphics on Linux, which can't use features from 3+ Open GL without a core profile. At this moment, we can use only core profile for the version 3.2, it isn't enough for example if you want to use geometry/tesselation shaders.",
    "head_branch": "added_missed_gl_versions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added missed gl versions (#680)\n\n* Added missed GL versions and Caps.\r\n\r\n* Added supporting 3.3, 4.0, 4.1, 4.2, 4.3, 4.4 and 4.5 GL core profiles."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624108ea14f302d393b294b",
    "number": 679,
    "body": "Here's the fix I came up with for issue #357. See my discussion in the forum and on that issue.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #679 from stephengold/master\n\ntestcases and fix for issue #357"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624108fa14f302d393b294c",
    "number": 678,
    "body": "Addressed issue in this comment. `https://github.com/jMonkeyEngine/jmonkeyengine/issues/660`",
    "head_branch": "skeletonClone",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #678 from Bekreth/skeletonClone\n\nOverrode SkeletonDebugger clone method.  Ticket #660"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241090a14f302d393b294d",
    "number": 677,
    "body": "Noticed that this javadoc points to web documentation page that is not existing (probably from before migration), so I changed it to point to correct one.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #677 from RemboL/master\n\nfixing documentation link"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241091a14f302d393b294e",
    "number": 675,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #675 from mazerty/patch-1\n\nLodGenerator should accept a constructor by mesh"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241092a14f302d393b294f",
    "number": 674,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241093a14f302d393b2950",
    "number": 673,
    "body": "Added a possibility to handle shaders errors.\r\nI use this to handle incorrect shaders during shader editing in my Editor:\r\nhttps://bitbucket.org/JavaSabr/jme3-spaceshift-editor/commits/d4128e6b06e0ae2ce16d845ada8fa7215819b6e7",
    "head_branch": "add_possibility_to_handle_shaders_errors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241094a14f302d393b2951",
    "number": 672,
    "body": "Refactored Cylinder generation to be more maintainable, readable, and fix #640.\r\nI tested it against the former implementation, and got same results with all parameters.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #672 from Saucistophe/master\n\nRefactored Cylinder"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241095a14f302d393b2952",
    "number": 671,
    "body": "It's just a backport changes from the master branch.",
    "head_branch": "backport_changes_from_3.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #671 from JavaSaBr/backport_changes_from_3.2\n\nBackport changes from the master branch."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241096a14f302d393b2953",
    "number": 670,
    "body": "The issue was due to the texture blending with the object material. By default the material is gray (hence, a gray border). If the material color in blender is set to another color this is being the artifact's color. It can bee seen where the alpha in the texture isn't totally 0 or 1.\r\nThe current implementation weren't taking in account the material transparency when blending, so the fix is basically to use it just like blender does.\r\n\r\nhttps://hub.jmonkeyengine.org/t/multiple-blender-importer-changes-fixes/38568\r\n",
    "head_branch": "patch-17",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added missing var declaration."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241097a14f302d393b2954",
    "number": 669,
    "body": "Ignoring the alpha influencer (mapping) if the color one was found first.\r\n\r\nhttps://hub.jmonkeyengine.org/t/multiple-blender-importer-changes-fixes/38568",
    "head_branch": "patch-15",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #646\n\nIgnoring the alpha influencer (mapping) if the color one was found first."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241098a14f302d393b2955",
    "number": 668,
    "body": "It was overriding the userDefinedUVCoords each time any one of them was used, so if different textures were depending on it, a new texCoord buffer was being created.\r\n\r\nhttps://hub.jmonkeyengine.org/t/multiple-blender-importer-changes-fixes/38568",
    "head_branch": "patch-13",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixed #642\n\nIt was overriding the userDefinedUVCoords each time any one of them was used, so if different textures were depending on it, a new texCoord buffer was being created."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241099a14f302d393b2956",
    "number": 667,
    "body": "https://hub.jmonkeyengine.org/t/multiple-blender-importer-changes-fixes/38568",
    "head_branch": "patch-12",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixed a IndexOutOfBoundsException when residual weights are present"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624109aa14f302d393b2957",
    "number": 664,
    "body": "Reflecting the updated Mesh.setPointSize() documentation in other parts of the class.",
    "head_branch": "MeshPointDocFix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #664 from iamcreasy/MeshPointDocFix\n\nMesh point doc fix"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624109aa14f302d393b2958",
    "number": 663,
    "body": "LodControl throws an exception when the spatial being added to isn't a geometry, however, when the controls is removed it calls setSpatial with a null value triggering the exception throw. Now checking for this null value case.",
    "head_branch": "patch-18",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #663 from NemesisMate/patch-18\n\nFixed IllegalArgumentException when removing a LodControl from a spatial"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624109ba14f302d393b2959",
    "number": 662,
    "body": "Since the original author of issue #621 did not response, here is my merge request to make TempVars closeable.",
    "head_branch": "Make-TempVars-Closeable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624109ca14f302d393b295a",
    "number": 658,
    "body": "Fix issue #654 ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #658 from jmecn/master\n\nFix issue #654"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624109da14f302d393b295b",
    "number": 657,
    "body": "The _INFO_ level might to be too high for showing that the hardware skinning is enabled.",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624109ea14f302d393b295c",
    "number": 656,
    "body": "Fix issue #654, add positional attributes in both WaterFilter#write and WaterFilter#read",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624109fa14f302d393b295d",
    "number": 655,
    "body": "The original link was to a blog post that was turned into a wiki page. The blog post is no longer valid so pointed it to wiki instead.",
    "head_branch": "patch-4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #655 from mitm001/patch-4\n\nUpdated broken link to point to wiki."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410a0a14f302d393b295e",
    "number": 650,
    "body": "Listener does not work for newer versions of java. For key typed events, the getKeyCode method always returns VK_UNDEFINED so e.getKeyCode() == KeyEvent.VK_ENTER and e.getKeyCode() == KeyEvent.VK_ESCAPE will never be true.\r\n\r\nEdit: Forgot to include the forum post.\r\nhttps://hub.jmonkeyengine.org/t/testchooser-infinite-loop/38500",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410a1a14f302d393b295f",
    "number": 649,
    "body": "Fix to prevent infinite loop caused when user cancels SettingsDialog rather than continuing, which prevents context from being set for selected app. If user cancels give context 2 seconds.\r\n\r\nEdit: Forgot to include the link to forum post.\r\nhttps://hub.jmonkeyengine.org/t/testchooser-infinite-loop/38500",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410a2a14f302d393b2960",
    "number": 648,
    "body": "merge",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410a3a14f302d393b2961",
    "number": 645,
    "body": "Note that it has only been tested on linux.",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #645 from grizeldi/patch-2\n\nAdded Xbox One S controller mappings"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410a4a14f302d393b2962",
    "number": 644,
    "body": "The fields `timeThen` and  `timeLate` are static. If multiple Applications are launched in different threads in headless mode, sync fails. This can be fixed removing the static modifier of the fields.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #644 from rpax/patch-1\n\nNullContext thread safety"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410a5a14f302d393b2963",
    "number": 641,
    "body": "Removed more static imports\r\n\r\nMerged with master revision\r\n\r\nCreated a VR input class that enable to handle VR tracker.",
    "head_branch": "jme3-vr-dev",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #641 from jseinturier/jme3-vr-dev\n\nJme3 vr dev"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410a6a14f302d393b2964",
    "number": 639,
    "body": "Certain dds texture lack the DDSCAPS_TEXTURE-flag, but are still recognized by programs like IrfanView and can also be loaded in the engine.\r\nThis commit weakens the check for this flag: Instead of throwing an exception, a warning is logged.\r\n\r\nSee the attached dds file in the zip for an example of a dds texture that lacks that flag.\r\nWith this change, this texture can be loaded normally.\r\n[tiles3.dds.zip](https://github.com/jMonkeyEngine/jmonkeyengine/files/907751/tiles3.dds.zip)\r\n\r\n",
    "head_branch": "DDSLoader-less-constraints",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #639 from shamanDevel/DDSLoader-less-constraints\n\nWeakens the flag tests in DDSLoader: some textures lack the DDSCAPS_TEXTURE flag"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410a6a14f302d393b2965",
    "number": 638,
    "body": "Now that 3.1.0 is stable, the master README.md can stop pointing people toward the 3.0.10 release.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #638 from stephengold/master\n\nVersion 3.1.0 is now stable, both for the SDK and the Engine itself."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410a7a14f302d393b2966",
    "number": 637,
    "body": "Formerly, getAttachmentsNode() assumed no local transform on any geometry with an animated mesh. However, Jaime violates this assumption. To make attachment nodes work more generally, each bone with attachments needs a target geometry. When the bone updates its transforms, it checks to see whether (1) the target geometry has the same parent as the attachments node and (2) whether its local transform is IDENTITY. If both these conditions are met (most models) the bone applies model transforms directly to the attachments node as before. If not, it adjusts the transform. My code assumes the parent of the attachment node is an ancestor of the target geometry. It also assumes all geometries with animated meshes have the same world transform. Formerly, getAttachmentsNode() failed if the spatial controlled by SkeletonControl was a Geometry. I've tried to allow for this possibility, though I didn't test.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #637 from stephengold/master\n\nfix SkeletonControl.getAttachmentsNode() for odd models (such as Jaime)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410a8a14f302d393b2967",
    "number": 633,
    "body": "In 3.0, SkeletonDebugger used Mesh.setPointSize() to highlight the joints. Now that setPointSize() is disabled, users of SkeletonDebugger need materials that set gl_PointSize. In JmeTests, SkeletonDebugger is always used with Unshaded.j3md, so that seems the logical place for it.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #633 from stephengold/master\n\nadd PointSize to Unshaded matdef, test with SkeletonDebugger"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410a9a14f302d393b2968",
    "number": 631,
    "body": "The original pull request #540 has been merged into master instead of v3.1. Cherry picked the corresponding commit from master and merged it with v3.1.\r\n\r\nSee issue #539 for further information.",
    "head_branch": "v3.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "- Replaced console outputs by the standard java logging concept and removed obsolete Sysout-Calls. (#631)\n\n- No functional changes.\r\n- added missing override tags."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410aaa14f302d393b2969",
    "number": 630,
    "body": "",
    "head_branch": "fix_appsettings_resizable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #630 from rvandoosselaer/fix_appsettings_resizable\n\nuse the resizable parameter instead of a default 'true' value"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410aba14f302d393b296a",
    "number": 629,
    "body": "Fixed a problem with converting blend file when there are unsupported textures.\r\nfor example:\r\nCaused by: com.jme3.asset.AssetLoadException: No loader registered for type \"psd\"\r\n\tat com.jme3.asset.ImplHandler.aquireLoader(ImplHandler.java:200)\r\n\tat com.jme3.asset.DesktopAssetManager.loadLocatedAsset(DesktopAssetManager.java:255)\r\n\tat com.jme3.asset.DesktopAssetManager.loadAsset(DesktopAssetManager.java:373)\r\n\tat com.jme3.asset.DesktopAssetManager.loadTexture(DesktopAssetManager.java:390)\r\n\tat com.jme3.scene.plugins.blender.textures.TextureHelper.loadImageFromFile(TextureHelper.java:518)\r\n\tat com.jme3.scene.plugins.blender.textures.TextureHelper.loadImageAsTexture(TextureHelper.java:244)\r\n\tat com.jme3.scene.plugins.blender.BlenderLoader.load(BlenderLoader.java:133)\r\n\t... 7 more",
    "head_branch": "fix_problem_with_converting_blend_files",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #629 from JavaSaBr/fix_problem_with_converting_blend_files\n\nfixed a problem with converting blend file when there are unsupported…"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410aca14f302d393b296b",
    "number": 626,
    "body": "Fixed some problems with getting an address of an LWJGL buffer.",
    "head_branch": "fix_memory_leak_lwjgl",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #626 from JavaSaBr/fix_memory_leak_lwjgl\n\nFixed some problems with getting an address of an LWJGL buffer."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410ada14f302d393b296c",
    "number": 625,
    "body": "I've noticed that the javadoc of the euler angle methods was incorrect and confusing, so I created this PR\r\n\r\n- remove confusing description to fromAngles()\r\n- fix incorrect description of toAngles()\r\n- fix typo rall => roll",
    "head_branch": "QuaternionJavadoc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410aea14f302d393b296d",
    "number": 624,
    "body": "Reverts jMonkeyEngine/jmonkeyengine#573",
    "head_branch": "revert-573-cleanup_build_scripts",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #624 from jMonkeyEngine/revert-573-cleanup_build_scripts\n\nRevert \"Cleanup build scripts (3.1)\""
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410afa14f302d393b296e",
    "number": 623,
    "body": "Implemented auto free LWJGL byte buffers.",
    "head_branch": "fix_memory_leak_lwjgl",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #623 from JavaSaBr/fix_memory_leak_lwjgl\n\nImplemented auto free LWJGL byte buffers."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410b0a14f302d393b296f",
    "number": 622,
    "body": "I had a problem with direct memory cost when I very often make some changes of terrain heightmap(terrain editor). It took a lot of direct memory(8GB). So I have found a place on code where we can see, that we re-create a position buffer for each change. I have replaced it to reusing current position buffer.",
    "head_branch": "fix_memory_cost_on_terrain_changes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #622 from JavaSaBr/fix_memory_cost_on_terrain_changes\n\nadded reusing position buffer on heightmap changing."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410b1a14f302d393b2970",
    "number": 620,
    "body": "There is no explanation why this should be required, and NemesisMate says he tested it, and could not reproduce some of the older issues. It might have been solved with changes since then.",
    "head_branch": "patch-11",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #620 from NemesisMate/patch-11\n\nRemoved the override that avoided a CompoundCollisionShape to be scaled"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410b2a14f302d393b2971",
    "number": 618,
    "body": "Added a VREnvironment class that gather the VR related stuff. A VR environment has to be instanciated and initialized in order to know if the system can use VR display.\r\n\r\nWith this class, it is now possible to know if the system can be used with VR before any JMonkey use. It is so possible to decide if the VRAppState can be attached to the application or not.\r\n\r\nAn updated version of the sample application can be found [here](https://hub.jmonkeyengine.org/t/official-vr-module/37830/32?u=seinturier)",
    "head_branch": "jme3-vr-dev",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #618 from jseinturier/jme3-vr-dev\n\nDeprecated VRApplication. Now VRAppState should be used."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410b3a14f302d393b2972",
    "number": 616,
    "body": "Some blender materials have null Material Param keys. This shouldn't\r\nthrow an exception in a toString method. So rather than throwing a\r\nOperaitonNotSupported exception a string is returned informative of the\r\nnull state of the key.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #616 from delt0r/master\n\nFixed a exception in Material toString with blender materials."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410b3a14f302d393b2973",
    "number": 615,
    "body": "https://hub.jmonkeyengine.org/t/core-dump-in-libbulletjme-so-when-reading-a-saved-rigidbodycontrol/37883",
    "head_branch": "FixMeshCollisionShapeJ3oReadv3.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #615 from riccardobl/FixMeshCollisionShapeJ3oReadv3.1\n\nFix bullet crash when MeshCollisionShape is loaded from j3o [v3.1]"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662410b4a14f302d393b2974",
    "number": 614,
    "body": "https://hub.jmonkeyengine.org/t/core-dump-in-libbulletjme-so-when-reading-a-saved-rigidbodycontrol/37883/",
    "head_branch": "FixMeshCollisionShapeJ3oRead",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #614 from riccardobl/FixMeshCollisionShapeJ3oRead\n\nFix bullet crash when MeshCollisionShape is loaded from j3o"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410b5a14f302d393b2975",
    "number": 613,
    "body": "The same problem for two other physics controls :)",
    "head_branch": "fixed_saving_and_cloning_some_controls",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #613 from JavaSaBr/fixed_saving_and_cloning_some_controls\n\nFixed cloning and saving some contorls."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410b6a14f302d393b2976",
    "number": 612,
    "body": "Fixed saving/cloning enabled state of a RigidBodyControl.",
    "head_branch": "fixed_cloning_and_saving_RigidBodyControl-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #612 from JavaSaBr/fixed_cloning_and_saving_RigidBodyControl-2\n\nFixed saving/cloning enabled state of a RigidBodyControl."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410b7a14f302d393b2977",
    "number": 611,
    "body": "New mashup image including Skullstone.",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #611 from FrozenShade666/patch-2\n\nUpdate README.md"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410b8a14f302d393b2978",
    "number": 610,
    "body": "Added Skullstone",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #610 from FrozenShade666/patch-1\n\nUpdate README.md"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410b9a14f302d393b2979",
    "number": 609,
    "body": "Fixed saving/cloning a state of enabled of a RigidBodyControl.",
    "head_branch": "fixed_cloning_and_saving_RigidBodyControl",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410baa14f302d393b297a",
    "number": 608,
    "body": "Fixed saving a spatial of a motion event control.",
    "head_branch": "fixed_motion_event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #608 from JavaSaBr/fixed_motion_event\n\nFixed saving a spatial of a motion event control."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410bca14f302d393b297b",
    "number": 607,
    "body": "I propose a new JMonkey module dedicated to Virtual Reality rendering (VR). This integration is a fork of the original phr00t [JMonkeyVR ](https://www.google.fr/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&cad=rja&uact=8&ved=0ahUKEwjp2vTF_9_RAhXLiRoKHRCBDD0QFggaMAA&url=https%3A%2F%2Fgithub.com%2Fphr00t%2FjMonkeyVR&usg=AFQjCNHQ167Xu07HfX0HPcIvFeMdaVwnRA&sig2=-ArPTml-l9fhIyX2M60-3Q&bvm=bv.145063293,d.ZGg) library that was built on a customized version of JMonkey.\r\n\r\nI've modified the VR specific module in order to make it integrate with official JMonkey release (and without refactoring any JMonkey core content).\r\n\r\nThis VR module relies on either OpenVR or OSVR underlying system. It enables to make VR rendering on various devices (HTC vive, PlaystationVR, ...) using one of the previousle cited API.\r\n\r\nI've tested and i'm using this module to produce VR demos.\r\n\r\nIf i can access the JMonkey wiki, i will provide a simple tutorial for using VR capabilities within JMonkey environment. I've not included any example within the actual module as i want to minimize its dependencies (actually only jme3-core, jme3-effects and jme3-lwjgl3).\r\n\r\nI hope that this work will interest you.",
    "head_branch": "jme3-vr-dev",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #607 from jseinturier/jme3-vr-dev\n\nJme3 vr dev"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410bda14f302d393b297c",
    "number": 606,
    "body": "I need to store a position of all kinds of light. I don't know how to implement it without core changes and without using light nodes. By the way, 3 of 5 light types using a position, so these changes help with reusing the code.\r\nI provide directly editing of lights in my editor without a LightNode, because we should not have unnecessary nodes in your scene to edit a light. Maybe do you have else ideas about how to implement it?\r\nhttp://imgur.com/a/rRZdE",
    "head_branch": "add_position_to_light",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410bda14f302d393b297d",
    "number": 605,
    "body": "Add cloneable support to shadow renderers and filters.",
    "head_branch": "add_cloneable_support_to_shadow_renderers_and_filters",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #605 from JavaSaBr/add_cloneable_support_to_shadow_renderers_and_filters\n\nAdd cloneable support to shadow renderers and filters"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410bea14f302d393b297e",
    "number": 604,
    "body": "Changed access to some methods of shadow render. I'm going to use it for my editable versions of shadow renders classes.",
    "head_branch": "get_access_to_some_methods_of_shadow_render",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410bfa14f302d393b297f",
    "number": 603,
    "body": "Fix editing color overlay filter",
    "head_branch": "fix_editing_color_overlay_filter",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #603 from JavaSaBr/fix_editing_color_overlay_filter\n\nFix editing color overlay filter"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410c0a14f302d393b2980",
    "number": 602,
    "body": "same diff I committed to 'master' on Jan 14, 2017 only without altering the line endings in Vector3f.java\r\nWithout this change, the magnitude of the project() result is incorrect unless 'other' is a unit vector.",
    "head_branch": "v3.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #602 from stephengold/v3.1\n\nfix errors in how vector projection is calculated"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662410c1a14f302d393b2981",
    "number": 601,
    "body": "Corrected minor spelling and class naming errors in JavaDoc comments.\r\nforum post\r\nhttps://hub.jmonkeyengine.org/t/motionevent-doc-errors/37768",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #601 from mitm001/patch-1\n\nUpdate MotionEvent.java"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410c2a14f302d393b2982",
    "number": 600,
    "body": "same diff I committed to 'master' on Jan 14, 2017\r\nWithout this change, the magnitude of the project() result is incorrect unless 'other' is a unit vector.",
    "head_branch": "v3.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410c3a14f302d393b2983",
    "number": 599,
    "body": "same diff riccardobl committed to 'master' on Jun 20, 2016\r\nWithout this change, a warning is generated every time you construct a CylinderCollisionShape.",
    "head_branch": "v3.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #599 from stephengold/v3.1\n\nCapsuleCollisionShape: warn about scaling only if it's not identity"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410c4a14f302d393b2984",
    "number": 597,
    "body": "Added options of shaders with GLSL150 to support OGL3 core profile on AMD cards.",
    "head_branch": "added_supporting_OGL3_core_profile_part1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410c5a14f302d393b2985",
    "number": 596,
    "body": "Currently, Vector3f's isUnitVector() method is using length() instead of lengthSquared(), thus, a useless sqrt calculation.",
    "head_branch": "patch-10",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410c6a14f302d393b2986",
    "number": 592,
    "body": "single class with physics marble game example.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #592 from SkidRunner/master\n\nNew Physics based jme3 example game."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410c7a14f302d393b2987",
    "number": 591,
    "body": "Here is the original topic: https://hub.jmonkeyengine.org/t/fbx-importer/30309\r\n\r\nChanges:\r\n\r\n* Added support of FBX 2016-17 (7.5)\r\n* Fixed rotation orders (reverse the order, use only for Lcl Rotation)\r\n* Fixed animations transformation (proper conversion from parent space to bone space, proper use of rotation order and other transforms)\r\n* Implemented Segment Scale Compensate property from Maya (most cases) aka InheritType\r\n* Implemented loading bind pose from frame 0\r\n* Properly load all animations from animation layers\r\n* Reworked units size (still no program uses it properly to test)\r\n* Tons of testing with animations and different models",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410c8a14f302d393b2988",
    "number": 590,
    "body": "Update",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410c9a14f302d393b2989",
    "number": 589,
    "body": "Fixed shaders on AMD cards in the OGL3 mode.\r\nFor example:\r\n```\r\nWARNING 17:45:24:823 Editor: RendererException : compile error in: ShaderSource[name=Common/MatDefs/Misc/Particle.frag, defines, type=Fragment, language=GLSL120]\r\nFragment shader failed to compile with the following errors:\r\nERROR: error(#271) Explicit version number 120 not supported by GL3 forward compatible context\r\nERROR: error(#273) 1 compilation errors.  No code generated\r\n\r\nWARNING 17:47:44:276 Editor: RendererException : compile error in: ShaderSource[name=Common/MatDefs/Light/PBRLighting.frag, defines, type=Fragment, language=GLSL110]\r\nFragment shader failed to compile with the following errors:\r\nERROR: error(#272) Implicit version number 110 not supported by GL3 forward compatible context\r\nERROR: error(#273) 1 compilation errors.  No code generated\r\n\r\nWARNING 17:56:34:912 Editor: RendererException : compile error in: ShaderSource[name=Common/MatDefs/Blur/HGaussianBlur.frag, defines, type=Fragment, language=GLSL100]\r\nFragment shader failed to compile with the following errors:\r\nERROR: error(#272) Implicit version number 110 not supported by GL3 forward compatible context\r\nERROR: error(#273) 1 compilation errors.  No code generated\r\n\r\n\t\r\nWARNING 17:57:42:794 Editor: RendererException : compile error in: ShaderSource[name=Common/MatDefs/Blur/VGaussianBlur.frag, defines, type=Fragment, language=GLSL100]\r\nFragment shader failed to compile with the following errors:\r\nERROR: error(#272) Implicit version number 110 not supported by GL3 forward compatible context\r\nERROR: error(#273) 1 compilation errors.  No code generated\r\n\r\nWARNING 17:58:25:357 Editor: RendererException : compile error in: ShaderSource[name=Common/MatDefs/Hdr/LogLum.frag, defines, type=Fragment, language=GLSL100]\r\nFragment shader failed to compile with the following errors:\r\nERROR: error(#272) Implicit version number 110 not supported by GL3 forward compatible context\r\nERROR: error(#273) 1 compilation errors.  No code generated\r\n```",
    "head_branch": "fixing_shaders",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410caa14f302d393b298a",
    "number": 588,
    "body": "Implemented LWJGLBufferAllocator.",
    "head_branch": "added_lwjgl3_allocator",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #588 from JavaSaBr/added_lwjgl3_allocator\n\nimplemented LWJGL3 BufferAllocator"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410cba14f302d393b298b",
    "number": 587,
    "body": "It needs to support name editing in my editor and I can't see any reasons why not. SDK uses a strange method for name editing:\r\n```\r\n                    Animation anim = control.getAnim(oldName);\r\n                    Animation newAnim = new Animation(newName, anim.getLength());\r\n                    newAnim.setTracks(anim.getTracks());\r\n                    control.removeAnim(anim);\r\n                    control.addAnim(newAnim);\r\n```",
    "head_branch": "added_method_to_animation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410cba14f302d393b298c",
    "number": 586,
    "body": "It needs to support name editing in my editor and I can't see any reasons why not. SDK uses a strange method for name editing:\r\n```\r\n                    Animation anim = control.getAnim(oldName);\r\n                    Animation newAnim = new Animation(newName, anim.getLength());\r\n                    newAnim.setTracks(anim.getTracks());\r\n                    control.removeAnim(anim);\r\n                    control.addAnim(newAnim);\r\n```",
    "head_branch": "added_method_to_animation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410cca14f302d393b298d",
    "number": 585,
    "body": "Since the selection of games in JME's README.md is a bit outdatet, I thought adding some newer games wouldn't be a bad idea.\r\nOpinions?",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #585 from grizeldi/patch-1\n\nAdded LSF to showcased games"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410cda14f302d393b298e",
    "number": 584,
    "body": "Notify users there is an alternative to AbstractAppState.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #584 from mitm001/patch-1\n\nUpdate AbstractAppState.java"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410cea14f302d393b298f",
    "number": 582,
    "body": "The first explicitly set tab stop was always skipped. For all non-explicitly set tab stops it inserted a fixed spacing. This commit changes the behaviour so tabs are aligned to columns.\r\nIt also adds handling of tabs to BitmapFont.getLineWidth() which ignored tabs before.\r\n\r\n[This was discussed in the forum.](https://hub.jmonkeyengine.org/t/tabs-in-bitmaptext/37495).\r\nI made a pull request so this isn't forgotten.\r\n\r\nExplanation of changes:\r\n- BitmapFont: Added a constant DEFAULT_TAB_WIDTH. It is package private to not pollute namespace. Also added handling of tabs to getLineWidth().\r\n\r\n- BitmapText: Only changed Javadoc. An important precondition is that the tab positions are sorted. I refrained from adding an Arrays.sort() call because the user shouldn't pay for what he doesn't need.\r\n\r\n- LetterQuad: Removed faulty tab width calculation. It's in StringBlock now.\r\n\r\n- StringBlock: Uses DEFAULT_TAB_WIDTH constant when instantiated. Removed the getters for tabWidth/tabPos. Added calculation of tab position at the bottom. The only way \"tabPos\" can leave this class now is through cloning. But since the array-reference is overwritten in setTabPosition(), it can safely be shared across cloned instances. The tabPos array is cloned in the setter to prevent modifications through the original reference.",
    "head_branch": "font",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #582 from FennelFetish/font\n\nFixes tab stops in BitmapText / BitmapFont (3.1)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662410cfa14f302d393b2990",
    "number": 581,
    "body": "Some problems launching examples of JmeTests (described in issue [#96](https://github.com/jMonkeyEngine/sdk/issues/96), SDK branch). Mostly dead links.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #581 from Ev1lbl0w/master\n\nFix some problems in issue #96 (SDK branch)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410d0a14f302d393b2991",
    "number": 579,
    "body": "It will look for all improperly modified spatials and show enough information to let the developer more precisely identify the problem from [here](https://hub.jmonkeyengine.org/t/a-more-precise-exception-report-about-modifying-the-scene-from-another-thread/34982).\r\n\r\nObs.: the second/newest commit is a proposal clarification method naming deprecation (so nothing will break) basically in favor of:\r\n/* use only for debug purposes */\r\nSpatial.getDebugName() ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410d1a14f302d393b2992",
    "number": 578,
    "body": "LWJGL3 / GLFW expects images for cursors in a different format: RGBA instead of ARGB and vertically flipped. Putting the fix in GlfwMouseInput rather than JmeCursor to preserve compatibility with LWJGL 2.\r\n\r\n[Forum Thread](https://hub.jmonkeyengine.org/t/mouse-cursor-flipped-and-wrong-colors/37484)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #578 from FennelFetish/master\n\nFixes mouse cursor format for LWJGL3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410d2a14f302d393b2993",
    "number": 576,
    "body": "Write the width and height of a quad on serialization. Otherwise getWidth() and getHeight() always return 0 when a quad was created from de-serialization.",
    "head_branch": "upstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #576 from Fadorico/upstream\n\nWrite/read the width and height of a quad"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410d3a14f302d393b2994",
    "number": 575,
    "body": "Write the width and height of a quad on serialization. Otherwise getWidth() and getHeight() always return 0 when a quad was created from de-serialization.",
    "head_branch": "upstream3.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #575 from Fadorico/upstream3.1\n\nWrite/read the width and height of a quad (3.1)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662410d4a14f302d393b2995",
    "number": 574,
    "body": "- Remove SSH based maven publishing.\r\n- Remove SDK configuration.\r\n- Support matrix builds for Linux / OSX and JDK 8 / 7.\r\n- Switch to Gradle 3.2.1\r\n- Support AppVeyor for native bullet building",
    "head_branch": "cleanup_build_scripts_master",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #574 from jMonkeyEngine/cleanup_build_scripts_master\n\nImprove build scripts (master)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410d5a14f302d393b2996",
    "number": 573,
    "body": "- Remove SSH based maven publishing.\r\n- Remove SDK configuration.\r\n- Support matrix builds for Linux / OSX and JDK 8 / 7.\r\n- Fix Gradle 3.2.1 compatibility. ",
    "head_branch": "cleanup_build_scripts",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #573 from jMonkeyEngine/cleanup_build_scripts\n\nCleanup build scripts (3.1)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410d6a14f302d393b2997",
    "number": 572,
    "body": "Fixes an issue where a material parameter with a 0 or 0.0 value would not be defined in the shader. ",
    "head_branch": "define_list_fix",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #572 from jMonkeyEngine/define_list_fix\n\nFix DefineList regression"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410d7a14f302d393b2998",
    "number": 571,
    "body": "Added function cleanupWithInput() which does the opposite than registerWithInput(), like said [here](https://hub.jmonkeyengine.org/t/properly-unregister-chasecamera-from-inputmanager/36813).",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #571 from grizeldi/patch-1\n\nAdded cleanup for ChaseCamera"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410d8a14f302d393b2999",
    "number": 570,
    "body": "Introduces integer texture types.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #570 from TehLeo/master\n\nInteger Texture Support"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410d9a14f302d393b299a",
    "number": 567,
    "body": "In DOMOutputCapsule Line 765 we're removing the last character (the space).\r\nWhen we have an empty buffer, the last character isn't present.\r\n\r\n- There already were some checks for empty buffers, but not for every buffer. They were implemented as `Math.max(0, buf.length() - 1);`. I changed that to `if (buf.length() > 0)` since that's more easy to understand. \r\n- I've added `@Override` to any Override.\r\n- I've added the `//remove last space` comment where it was missing so it is consistent and obvious\r\n- I've enclosed the if condition for the IOException in brackets so it's a bit more easily readable. (Since the long exception message looked like a block of multiple lines)\r\n\r\nWhen this PR is approved/merged I will cherry pick this commit to v3.1",
    "head_branch": "FixDOMOutput",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #567 from MeFisto94/FixDOMOutput\n\nFixes #566 - XML Serialization handles empty buffers properly now."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410daa14f302d393b299b",
    "number": 565,
    "body": "Added Town.zip to jme3-testdata\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410dba14f302d393b299c",
    "number": 561,
    "body": "RenderBuffer.getColorBuffer() returns now the color buffer at the index set by setTargetIndex(int), if multiple buffers are available.\nThis allows Renderer.readFrameBufferWithFormat to read all color buffers, not only the first one.\n",
    "head_branch": "FixFor#503",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #561 from shamanDevel/FixFor#503\n\n#503 fixed"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410dba14f302d393b299d",
    "number": 560,
    "body": "LWJGL3 is only included int he build process, if the jdk is at least of version 1.8.\nThe travis build is edited so that it tests against Java7 and Java8.\n\nThis is the followup to pull request #549.\n",
    "head_branch": "Java7+8-support",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "added conditional include of lwjgl3 if java8 is supported; edited .travis.yml so that the project is compiled against multiple jdks"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410dca14f302d393b299e",
    "number": 559,
    "body": "Added supporting window icons for LWJGL3.\n",
    "head_branch": "master-original",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #559 from JavaSaBr/master-original\n\nadded supporting window icons ans OffscreenSurface context for LWJGL3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410dda14f302d393b299f",
    "number": 557,
    "body": "This should be the fix for #502 .\nI added the missing method FrameBuffer.addColorBuffer(Image.Format).\n",
    "head_branch": "FrameBuffer.addColorBuffer(Image.Format)",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #557 from shamanDevel/FrameBuffer.addColorBuffer(Image.Format)\n\nFix for #502"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410dea14f302d393b29a0",
    "number": 556,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #556 from Ali-RS/master\n\nMinor fix in javadoc for Camera.java class"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410dfa14f302d393b29a1",
    "number": 555,
    "body": "fixed missing Cloneable in the Triangle.\n",
    "head_branch": "master-original",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #555 from JavaSaBr/master-original\n\nfixed missing Cloneable in the Triangle."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410e0a14f302d393b29a2",
    "number": 554,
    "body": "The problem: Happens with two MTR framebuffers with same number of color attachements.\nIf we set a frame buffer frame1, then later frame2.\nr.setFrameBuffer(frame1);\nr.setFrameBuffer(frame2);\nFrame2 buffer will not output to multiple targets. Only its first target will be rendered.\nThis patch fixes that problem.\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #554 from TehLeo/patch-2\n\nFix for MTR Framebuffers"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410e1a14f302d393b29a3",
    "number": 552,
    "body": "It is already implemented in AbstractControl.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410e2a14f302d393b29a4",
    "number": 551,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #551 from Ali-RS/master\n\nfixed a typo"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410e3a14f302d393b29a5",
    "number": 549,
    "body": "This pull request relates to issue #534. The lwjgl version was updated from 3.0.0b to 3.0.0 and all code adaptions were made.\n\nThat lwjgl update introduced many API changes, I had to rewrite a lot of the existing code. So please test it, if I missed something. (I tried many tests from the examples project, but only on my system)\n",
    "head_branch": "LWJGL3-update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #549 from shamanDevel/LWJGL3-update\n\nLwjgl3 update from 3.0.0b to 3.0.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410e4a14f302d393b29a6",
    "number": 547,
    "body": "just like it has been done for Android in 3c56afe\n",
    "head_branch": "ios-legacyapplication",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #547 from MeFisto94/ios-legacyapplication\n\nUsing LegacyApplication in the iOS Harness"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662410e5a14f302d393b29a7",
    "number": 546,
    "body": "Just like it has been done for Android in 3c56afe\n",
    "head_branch": "ios-legacyapplication-master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #546 from MeFisto94/ios-legacyapplication-master\n\nUsing LegacyApplication in the iOS Harness"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410e6a14f302d393b29a8",
    "number": 544,
    "body": "I had several projects in the past where a Class for handling/controlling the rotation of Spatials was quite usefull. Unfortunately I didn't find any similar class in JME so far.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410e7a14f302d393b29a9",
    "number": 543,
    "body": "…en too many cursors are created, resolves #537 \n",
    "head_branch": "issue-537-master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #543 from tonihele/issue-537-master\n\nAdded a cursor cache to avoid cursor disappearing and app crashing wh…"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410e8a14f302d393b29aa",
    "number": 541,
    "body": "",
    "head_branch": "issue-537",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #541 from tonihele/issue-537\n\nAdded a cursor cache for LWJGL 2, resolves #537"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662410e9a14f302d393b29ab",
    "number": 540,
    "body": "This Pull-Request fixes issue #539.\n\nAwtPanel: Replaced console outputs by the standard java logging concept and r…emoved obsolete Sysout-Calls. No functional changes. Added missing override tags.\n\nI also did some code formatting, like introducing missing white spaces and replacing tabs by white spaces.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #540 from oOMoeOo/master\n\nRemoved Sysout-Calls in AwtPanel (Issue #539)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410eaa14f302d393b29ac",
    "number": 535,
    "body": "BlendMode.Custom allows glBlendFuncSeparate() calls.\n",
    "head_branch": "custom-blend-func",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #535 from papaspace/custom-blend-func\n\nAdded RenderState.BlendMode.Custom"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410eba14f302d393b29ad",
    "number": 533,
    "body": "Allows a flexible interface to use own Allocators.\n\nThis has two uses: \n1. the current one does not work at all under Java9 (and it brings a simpler one that does)\n2. it allows to use better/faster native ones, like the ones included in lwjgl and jogl2.\n\nThe default behavior is trying to load the old reflection based one, and Fallback to the simpler if an exception occurs. This allows to use JME in java9, while not changing established behavior.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #533 from empirephoenix/master\n\nBufferAllocator Round 2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410eca14f302d393b29ae",
    "number": 531,
    "body": "texture2D is deprecated in glsl 150\n",
    "head_branch": "pr190716",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #531 from riccardobl/pr190716\n\nUse texture() instead of texture2D() in bloomExtract15 and bloomFinal15"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410eda14f302d393b29af",
    "number": 530,
    "body": "…ssor.\n\nhttps://hub.jmonkeyengine.org/t/ability-to-change-image-format-for-filterpostprocessor/36379\n",
    "head_branch": "v3.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #530 from tiatin/v3.1\n\nv3.1 - Added ability to set framebuffer image format used in FilterPostProce…"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410eea14f302d393b29b0",
    "number": 529,
    "body": "…ssor.\n\nhttps://hub.jmonkeyengine.org/t/ability-to-change-image-format-for-filterpostprocessor/36379\n",
    "head_branch": "FilterPostProcessorImageFormat",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #529 from tiatin/FilterPostProcessorImageFormat\n\nAdded ability to set framebuffer image format used in FilterPostProce…"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410efa14f302d393b29b1",
    "number": 528,
    "body": "",
    "head_branch": "bullet2.83.7",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #528 from riccardobl/bullet2.83.7\n\nUpdate to Bullet 2.83.7"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410f0a14f302d393b29b2",
    "number": 527,
    "body": "Hi,\nafter working some time with the wrapper, I found three important missing features that improved the workflow once implemented.\n- missing `toString()` methods, useful for debugging\n- added getter method for the device in the command queue, necessary e.g. to query the work group size\n-  the `register()` methods for the automatic garbage collection of OpenCL objects now returns `this`. This is important so that e.g. `Buffer b = clContext.createBuffer(1).register();` can be written in one line\n",
    "head_branch": "OpenCL2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #527 from shamanDevel/OpenCL2\n\nOpenCL for jME3 - some missing features"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410f1a14f302d393b29b3",
    "number": 526,
    "body": "https://hub.jmonkeyengine.org/t/java9-incompability/36317/10\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410f1a14f302d393b29b4",
    "number": 525,
    "body": "NewtMouseInput now handles null cursor by resetting mouse cursor to default image.\n",
    "head_branch": "v3.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #525 from saloisio/v3.1\n\nNewtMouseInput accepts null cursor"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410f2a14f302d393b29b5",
    "number": 522,
    "body": "Fixes #499: Fix Hardware Skinning in 3.1\n",
    "head_branch": "v3.1_HWSkinning",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #522 from MeFisto94/v3.1_HWSkinning\n\nAlso applying PR #501 on 3.1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410f3a14f302d393b29b6",
    "number": 520,
    "body": "I've addressed the issue described here: https://hub.jmonkeyengine.org/t/jogl-support-jogl2-that-is/20891/333\n",
    "head_branch": "v3.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #520 from saloisio/v3.1\n\nNewtMouseInput no longer auto-centers mouse cursor"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410f4a14f302d393b29b7",
    "number": 519,
    "body": "I've addressed the issue described here: [https://hub.jmonkeyengine.org/t/jogl-support-jogl2-that-is/20891/333](url)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #519 from saloisio/master\n\nNewtMouseInput no longer auto-centers mouse cursor"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410f5a14f302d393b29b8",
    "number": 517,
    "body": "Same as https://github.com/jMonkeyEngine/jmonkeyengine/pull/515, but for v3.1.\n",
    "head_branch": "v3.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #517 from tiatin/v3.1\n\nGarbage collection and list iteration improvements for v3.1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662410f6a14f302d393b29b9",
    "number": 516,
    "body": "",
    "head_branch": "iterator-garbage-collection-improvement",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410f7a14f302d393b29ba",
    "number": 515,
    "body": "For-Each loop creates Iterator object and uses hasNext and next methods, which are slower, than manual iteration. Also allocating Iterator object increases work for GC.\n\nForum post: https://hub.jmonkeyengine.org/t/iteration-over-list-performance-improvement/36250\n\nSee test 9 for more details: http://www.devahead.com/blog/2011/12/coding-for-performance-and-avoiding-garbage-collection-in-android/\n",
    "head_branch": "iterator-garbage-collection-improvement",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #515 from tiatin/iterator-garbage-collection-improvement\n\nGarbage collection and list iteration improvements"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410f8a14f302d393b29bb",
    "number": 514,
    "body": "Discussion about: https://hub.jmonkeyengine.org/t/userdata-map-not-going-back-to-null-value-once-any-data-is-set/36236\n",
    "head_branch": "patch-9",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #514 from NemesisMate/patch-9\n\nuserdata to null again once all data is removed."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410f9a14f302d393b29bc",
    "number": 513,
    "body": "",
    "head_branch": "PBRisComing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #513 from riccardobl/PBRisComing\n\nFix npe"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410faa14f302d393b29bd",
    "number": 512,
    "body": "<strike>That method just prints a warning, so from my point of view there is no reason to leave the call there.\nEDIT: I want to point out that this is an issue because when cylinder shapes are created frequently the logs are polluted with warnings about scaling when the developer isn't actually trying to scale the shape.</strike>\nSee below.\n",
    "head_branch": "pr200616",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #512 from riccardobl/pr200616\n\nRemoved warning if scale=1,1,1 in CylinderCollisionShape"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410fba14f302d393b29be",
    "number": 511,
    "body": "Long overdue fix for: \n\n(in short calculating inertia on mass=0 objects can cause NAN depending on compiler parameters, these NAN will contaminate every other float they come in contact with, resulting in suddenly vanishing objects on jme side, as the nan position/rotation cannot be rendered and is outside frustum.\n\nhttps://hub.jmonkeyengine.org/t/jmonkey-3-1-native-bullet-bug/33595/3\nhttp://www.bulletphysics.org/Bullet/phpBB3/viewtopic.php?p=12158&f=9&t=\n\nSigned-off-by: Kai Boernert kai-boernert@visiongamestudios.de\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #511 from empirephoenix/master\n\nFinally fixing this"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410fca14f302d393b29bf",
    "number": 510,
    "body": "The rest of the native methods cast jointId to btPoint2PointConstraint so I've changed createJoint() to allocate a btPoint2PointConstraint.\n\nForum link: https://hub.jmonkeyengine.org/t/bugfix-for-point2pointjoints-native-createjoint/36147\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #510 from bertleft/master\n\nBugfix: Native Point2PointJoint.createJoint() incorrectly allocates btHingeConstraint"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410fda14f302d393b29c0",
    "number": 509,
    "body": "without uploadArchives no more snapshots, but you can release (beta2,...)\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #509 from davidB/patch-1\n\ntravis: disable uploadArchives"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410fea14f302d393b29c1",
    "number": 507,
    "body": "… : Material->toString() does not prevent/check for possible NPEs\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #507 from jjYBdx4IL/master\n\nfixes issue https://github.com/jMonkeyEngine/jmonkeyengine/issues/506…"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662410ffa14f302d393b29c2",
    "number": 505,
    "body": "If you can't load some control, you have a message about this, but in next iteration of render, you get crash with NPE.\n",
    "head_branch": "v3.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #505 from JavaSaBr/v3.1\n\nfixed the NPE with controls, thanks to JavaSaBr"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66241100a14f302d393b29c3",
    "number": 504,
    "body": "…th the new “official” groupId: com.github.nifty-gui\n",
    "head_branch": "v3.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #504 from davidB/v3.1\n\nnifty-gui: upgrade from 1.4.1 to 1.4.2, available on maven central wi…"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241101a14f302d393b29c4",
    "number": 501,
    "body": "... by implementing proper Array Serialization for MatParams and making the Shared Materials Check only a warning (it would pop up once each time you load the j3o and if you really use Shared Materials you have weird animations and some log spamming)\n",
    "head_branch": "HwSkinningFixV02",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #501 from MeFisto94/HwSkinningFixV02\n\nFixes #499: Fix Hardware Skinning in 3.1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241102a14f302d393b29c5",
    "number": 500,
    "body": "This is a clean rework of an older pull request #170 .\nThis time with an enum to specify pre-order or post-order and without merge conflicts.\n",
    "head_branch": "PreOrderTraversal",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #500 from shamanDevel/PreOrderTraversal\n\nadded a pre-order traversal of the scene graph"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241103a14f302d393b29c6",
    "number": 498,
    "body": "The current implementation of addAll / removeAll doesn't remove rest of the PhysicsControls if the spatial has a RigidBodyControl.\n\nThis pull request removes the else-branch so that add / remove is always called for the spatial. Add / remove is no longer present in the `if (spatial.getControl(RigidBodyControl.class) != null)` -branch to prevent the RigidBodyControl from being added / removed twice, thus it only handles joints.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #498 from TripleSnail/master\n\nAdd/remove all PhysicsControls even when a RigidBodyControl is present"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241103a14f302d393b29c7",
    "number": 497,
    "body": "Continuing the discussion in the pull request: https://github.com/jMonkeyEngine/jmonkeyengine/pull/471, made the requested changes.\n",
    "head_branch": "patch-7",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #497 from NemesisMate/patch-7\n\nOrdering + raw methods instead of reversing."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241105a14f302d393b29c8",
    "number": 495,
    "body": "fix typos, also add some overrides and fix some javadoc issues.\nI feel bad removing these typos, there are really funny.\nmaybe it's time to send a new keyboard to Nehon :)\n",
    "head_branch": "typo_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #495 from Dokthar/typo_fix\n\nThat's not those typos you're looking for...."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241106a14f302d393b29c9",
    "number": 494,
    "body": "This is a wrapper of OpenCL to jME3.\nIt provides a portable way to use OpenCL over multiple platforms. The most important fact is the interoperability between OpenGL and OpenCL: you can easily share, access and modify jME3 images, textures, vertex buffers, render buffers from OpenCL kernels.\n\nLink to the forum thread:\n[https://hub.jmonkeyengine.org/t/opencl-for-jme3/35750/11](https://hub.jmonkeyengine.org/t/opencl-for-jme3/35750/11)\n",
    "head_branch": "OpenCL",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #494 from shamanDevel/OpenCL\n\nOpenCL for jME3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241107a14f302d393b29ca",
    "number": 491,
    "body": "btGImpactCollisionAlgorithm hasn't been registered for physics spaces, causing Gimpact collisions to not be detected.\nThis pr solves it.\n",
    "head_branch": "AddGimpactCollisionAlgo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #491 from riccardobl/AddGimpactCollisionAlgo\n\nFix GImpact passing through other shapes."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241108a14f302d393b29cb",
    "number": 488,
    "body": "Forum thread: https://hub.jmonkeyengine.org/t/fbx-importer/30309/39?u=eirenliel\n\nChanges from original version:\n- Load animations without any additional data (no SceneKeys or fba files) — animations are loaded from separate animation layers (currently not supported by Maya)\n- Huge code refactoring. It is possible to work with now and add new features (looks like @shadowislord 's :))\n- Added support for not baked transformations (like pre/post-rotations/translation/scale and pivots), all euler rotation orders are implemented too\n- More accurate bone animation\n- Up to 8 UV-layers\n- ByPolygon material data is loaded correctly (without buffer overhead too)\n- Textures are loaded by name from the same folder, if present and no better way found\n- Added support of FaceCullMode.Off\n- Support of axis signs\n- Fixes, tons of them!\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #488 from GreenCubes/master\n\nReworked original FBX importer"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241109a14f302d393b29cc",
    "number": 487,
    "body": "This pull request attempt to fix issue on linux where joystick/gamepad are detected whit the wrong logicalId (button name on linux instead of button number on windows).\n- add missing .trim() in JoystickCompatibilityMappings.java\n- fix some minor logging issue in JInputJoyInput\n- add mapping for two gamepad : \"GASIA CORP. PLAYSTATION(R)3 Controller\", \"DragonRise Inc.   Generic   USB  Joystick\"\n- add a easier way to create a custom joystick mapping in TestJoystick : \"push a joystick button and click on the expected mapped button to print the entry for remapping the button\"\n\nfor more info see the topic on the forum [here](https://hub.jmonkeyengine.org/t/joysticks-detected-with-wrong-logicalid-on-linux/35712)\n",
    "head_branch": "joysticks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #487 from Dokthar/joysticks\n\nJoystick detection on linux and more... (v3.1)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241109a14f302d393b29cd",
    "number": 486,
    "body": "This pull request attempt to fix issue on linux where joystick/gamepad are detected whit the wrong logicalId (button name on linux instead of button number on windows).\n- add missing .trim() in JoystickCompatibilityMappings.java\n- fix some minor logging issue in JInputJoyInput\n- add mapping for two gamepad : \"GASIA CORP. PLAYSTATION(R)3 Controller\", \"DragonRise Inc.   Generic   USB  Joystick\"\n- add a easier way to create a custom joystick mapping in TestJoystick : \"push a joystick button and click on the expected mapped button to print the entry for remapping the button\"\n\nfor more info see the topic on the forum [here](https://hub.jmonkeyengine.org/t/joysticks-detected-with-wrong-logicalid-on-linux/35712)\n",
    "head_branch": "joysticks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #486 from Dokthar/joysticks\n\nJoystick detection on linux and more..."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624110ba14f302d393b29ce",
    "number": 485,
    "body": "",
    "head_branch": "PBRisComing",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624110ca14f302d393b29cf",
    "number": 482,
    "body": "update links to the wiki and to the sdk releases.\n",
    "head_branch": "readme-patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #482 from Dokthar/readme-patch\n\nfix readme links"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624110da14f302d393b29d0",
    "number": 481,
    "body": "Kirill told me to commit this.\nSo, I can not be considered liable for any explosion, amputation, stallmanization, injury of people or animals.\n",
    "head_branch": "fix_setAdamping_bulletnative",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #481 from riccardobl/fix_setAdamping_bulletnative\n\nFix for setAngularDamping / bullet native."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624110da14f302d393b29d1",
    "number": 480,
    "body": "Set the default angular factor for bullet native to the same value of jbullet.\n",
    "head_branch": "fix_default_afactor_bullet_native",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624110ea14f302d393b29d2",
    "number": 477,
    "body": "Fix for the issue reported here: https://hub.jmonkeyengine.org/t/ogre-importer-materials-are-not-shared/35663\n\n**Short description of the problem:**\nWe have an Ogre's .scene with two spatials that share the same material. \nWhen this scene is imported in the engine, the two spatials no longer share the material but, instead, they own a new instanced of it.\nThis happens because the SceneLoader loads the objects through the assetManager as if they were unrelated, the assetManager calls _clone(true)_ on the cached models before returning them, this cause the issue.\n\nThis patch loads the models directly with an instance of MeshLoader opportunely extended to have an internal cache that is preserved until the scene is fully loaded.\n",
    "head_branch": "fix_topic35663_issue",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #477 from riccardobl/fix_topic35663_issue\n\nOgre importer: Fix for material sharing"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624110fa14f302d393b29d3",
    "number": 475,
    "body": "This PR is our effort to provide refactor to improve jMonkeyEngine for SRE course. As requested, here is squashed 1 commit file for our effort. For detailed commit message, please see https://github.com/arkka/jmonkeyengine/tree/refactor-mesh-extract-vertex-data\n- Provide jUnit test file: MeshTest.java\n- Refactor and rework extractVertexData() by introducing two new reusable methods createIndexBuffer() and createVertexBuffer()\n- Refactor prepareForAnim(Boolean) into two separated new methods, which are prepareForAnimSoftware() and prepareForAnimHardware()\n- Remove deprecated method setInterleaved(), because too long and not already used\n",
    "head_branch": "arkka-rucha-refactor-mesh-class",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241110a14f302d393b29d4",
    "number": 473,
    "body": "See RenderState#BlendEquation and RenderState#BlendEquationAlpha\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Moved glBlendEquationSeparate from GL2 interface to GL interface. Added an example of the feature. Minors issues."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241111a14f302d393b29d5",
    "number": 472,
    "body": "The casting to ModelKey what causing an assetkey exception if passing an AssetKey (ie: using loadAsset instead of loadModel) while it wasn't giving any extra method.\n",
    "head_branch": "patch-8",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241112a14f302d393b29d6",
    "number": 471,
    "body": "In some cases, native-bullet returns the ray results on a reversed order so it leads to unexpected bugs.\n\nMore details can be found [here](https://hub.jmonkeyengine.org/t/native-bullet-raytest-randomly-giving-inverted-list/35511).\n",
    "head_branch": "patch-7",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241113a14f302d393b29d7",
    "number": 468,
    "body": "Readded the `UseAlpha` parameter for the Lighting.j3md Material, and gave it the functionality it always should have had, but never actually had.\n\nThe default value is `true`, to ensure backward compatibility.\n",
    "head_branch": "diffuse-map-use-alpha",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241114a14f302d393b29d8",
    "number": 467,
    "body": "",
    "head_branch": "tdl-mpo",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #467 from jMonkeyEngine/tdl-mpo\n\nTDL/MPO"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241115a14f302d393b29d9",
    "number": 464,
    "body": "The normal maps calculated in mikk tangent space expect unnormalized (interpolated) tangent and world normals in the fragment shader, because of this they have to be normalized in the vertex shader.\n",
    "head_branch": "synced-tangent-space",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #464 from Perjin/synced-tangent-space\n\nGet normals and tangent synced with mikk tangent space."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241116a14f302d393b29da",
    "number": 462,
    "body": "lwjgl now respects `AppSettings.getAlphaBits()` when creating its PixelFormat.\n",
    "head_branch": "fix_lwjgl_alphabits",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #462 from Georgeto/fix_lwjgl_alphabits\n\nLet lwjgl respect the AlphaBits setting"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241117a14f302d393b29db",
    "number": 461,
    "body": "These are necessary changes to implement improved shadow rendering.\n\nRecreation of this pull request: [old pull request](https://github.com/jMonkeyEngine/jmonkeyengine/pull/452) for master branch instead of PBR branch.\n\nTexture arrays can now be set as render targets for color and depth buffers.\nAlso fixed an issue with the shader node generation, when using array variables the multiplicity was missing.\nAdded getters and setters in the Light class for frustumCheckNeeded and intersectsFrustum, to be able to implement a custom light filter.\n\nForum: http://hub.jmonkeyengine.org/t/improved-shadow-renderer/33496/50\n",
    "head_branch": "shadow_renderer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #461 from Perjin/shadow_renderer\n\nTexture arrays as render targets, bugfix for shader nodes and new getter and setter in Light class"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241118a14f302d393b29dc",
    "number": 460,
    "body": "If you use lwjgl3, you don't need flip image of cursor. So I created the class CursorKey for configure flip of image.\n",
    "head_branch": "updgrade_cursor_loader",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241119a14f302d393b29dd",
    "number": 459,
    "body": "I had this problem with several model imported from Blender.\n\nWARNING: Could not enable HW skinning due to error:\njava.lang.NullPointerException\n    at com.jme3.scene.Mesh.prepareForAnim(Mesh.java:439)\n    at com.jme3.animation.SkeletonControl.switchToHardware(SkeletonControl.java:127)\n    at com.jme3.animation.SkeletonControl.testHardwareSupported(SkeletonControl.java:160)\n    at com.jme3.animation.SkeletonControl.controlRender(SkeletonControl.java:281)\n    at com.jme3.scene.control.AbstractControl.render(AbstractControl.java:119)\n    at com.jme3.scene.Spatial.runControlRender(Spatial.java:681)\n    at com.jme3.renderer.RenderManager.renderSubScene(RenderManager.java:667)\n    at com.jme3.renderer.RenderManager.renderSubScene(RenderManager.java:677)\n    at com.jme3.renderer.RenderManager.renderSubScene(RenderManager.java:677)\n    at com.jme3.renderer.RenderManager.renderSubScene(RenderManager.java:677)\n    at com.jme3.renderer.RenderManager.renderSubScene(RenderManager.java:677)\n    at com.jme3.renderer.RenderManager.renderSubScene(RenderManager.java:677)\n    at com.jme3.renderer.RenderManager.renderSubScene(RenderManager.java:677)\n    at com.jme3.renderer.RenderManager.renderScene(RenderManager.java:656)\n    at com.jme3.renderer.RenderManager.renderViewPort(RenderManager.java:1038)\n    at com.jme3.renderer.RenderManager.render(RenderManager.java:1097)\n    at com.jme3.app.SimpleApplication.update(SimpleApplication.java:260)\n    at com.ss.editor.Editor.update(Editor.java:353)\n    at com.jme3.system.lwjgl.LwjglWindow.runLoop(LwjglWindow.java:369)\n    at com.jme3.system.lwjgl.LwjglWindow.run(LwjglWindow.java:452)\n    at java.lang.Thread.run(Thread.java:745)\n",
    "head_branch": "fix_skeleton_control",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624111aa14f302d393b29de",
    "number": 458,
    "body": "When I switched my jME3-SpaceShift-Editor to lwjgl3, I got several problems.\n1. The input of chars doesn't work for UI.\n2. Mouse wheel doesn't works.\n3. NPE on start of application.\n",
    "head_branch": "fix_lwjgl3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #458 from JavaSaBr/fix_lwjgl3\n\nFixes in lwjgl3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624111ba14f302d393b29df",
    "number": 457,
    "body": "With the new Mikk Tangent Space generator this fix in the shader should produce correct shading results.\nBiNormal/biTangent needs to be calculated in the fragment shader and the final normal has to be normalized.\nhttp://i.imgur.com/gz9pRUP.png\nhttps://hub.jmonkeyengine.org/t/normal-map-shading-problems/34947/91\n",
    "head_branch": "normal_map_shading",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #457 from Perjin/normal_map_shading\n\nFix incorrect normal map shading in PBRLighting."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624111ca14f302d393b29e0",
    "number": 455,
    "body": "We allow segmentLength to be null but were calling .length(), classical NPE.\nAlso I fixed the typo\n",
    "head_branch": "SplineIssue",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #455 from MeFisto94/SplineIssue\n\nFixed a NPE when Serializing a Spline without points."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624111ca14f302d393b29e1",
    "number": 454,
    "body": "Long story short:\nEven though you are about to overhaul the cloning system you could still be effected by this:\nSince `lookAt` and `rotation` had no initial values, they were serialized as null leading to a NPE in the cloneForSpatial:\n\n```\nat com.jme3.cinematic.events.MotionEvent.cloneForSpatial(MotionEvent.java:284)\n```\n\nLine 284 is `control.lookAt = lookAt.clone();` (it's still alpha-3)\n\nThe thing which first caught me is the behavior of BinaryOutputCapsule's defValue:\nIt's purpose is NOT to write `defVal` when the `value == null` but rather to simply not serialize, when `value` is already `defVal`\n\nI don't know if it'd be a good addition to serialize defVal when value is null (since serializing null is mostly pointless, and if not, you'd have that as defVal), but that's a different story.\n",
    "head_branch": "MECloneIssue",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #454 from MeFisto94/MECloneIssue\n\nAllow MotionEvents to be cloned (NPE)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624111da14f302d393b29e2",
    "number": 452,
    "body": "Texture arrays can now be set as render targets for color and depth buffers.\nAlso fixed an issue with the shader node generation, when using array variables the multiplicity was missing.\nAnd made in the Light class frustumCheckNeeded and intersectsFrustum public, to be able to implement a custom light filter.\n\nForum: http://hub.jmonkeyengine.org/t/improved-shadow-renderer/33496/50\n",
    "head_branch": "pbr_shadow_renderer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624111ea14f302d393b29e3",
    "number": 451,
    "body": "Convenience appstates that show and keep in sync the representation of normal binormal and tangents, and the wireframe on top of existing geometries contained on the node passed as argument to the constructor.\n\nLimitations:\n- Doesn't handle shaders transformations.\n\nRequire pr #450 \n",
    "head_branch": "debugAs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624111fa14f302d393b29e4",
    "number": 450,
    "body": "Since updateBufferData is not called for VertexBuffers that are not available in the shader, their updateNeeded state will stay set to true, while logically should be false, since those buffers won't ever be updated.\n\nupdateBufferData cannot be called on unused buffers without breaking the existing code (i.e. material switching).\n\nThis commit contains the most straightforward way i can think about for fixing this problem.\n\nRefering to http://hub.jmonkeyengine.org/t/see-if-a-mesh-has-been-changed/35346/6\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241120a14f302d393b29e5",
    "number": 448,
    "body": "A NPE is throw when running hovering tank test with native bullet.\n\n```\njava.lang.NullPointerException: The vehicle object does not exist.\n    at com.jme3.bullet.PhysicsSpace.addVehicle(Native Method)\n    at com.jme3.bullet.PhysicsSpace.addRigidBody(PhysicsSpace.java:627)\n    at com.jme3.bullet.PhysicsSpace.addCollisionObject(PhysicsSpace.java:426)\n    at jme3test.bullet.PhysicsHoverControl.setPhysicsSpace(PhysicsHoverControl.java:189)\n    at com.jme3.bullet.PhysicsSpace.add(PhysicsSpace.java:405)\n    at jme3test.bullet.TestHoveringTank.buildPlayer(TestHoveringTank.java:156)\n    at jme3test.bullet.TestHoveringTank.simpleInitApp(TestHoveringTank.java:128)\n```\n\nBecause the native vehicle wasn't created in the setPhysicsSpace methode (in PhysicsHoverControl)\n\n---\n\nThe collision group must be set after the creation of the native body (when setPhysicsSpace is called).\n",
    "head_branch": "hoveringtank",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241121a14f302d393b29e6",
    "number": 446,
    "body": "Well, I found that I'm using this on my code with jbullet but is not present on bullet version so here it is.\n",
    "head_branch": "patch-6",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241122a14f302d393b29e7",
    "number": 445,
    "body": "In native bullet, group collision listeners we're never notified when a collision occurred for a group. This fixes the issue.\n\nSee http://hub.jmonkeyengine.org/t/physicscollisiongrouplistener-possibly-broken-in-native-bullet/35277/7\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #445 from Fadorico/master\n\nFixed collision group listeners not being notified"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241123a14f302d393b29e8",
    "number": 444,
    "body": "Exposed batched geometry to the users in case they need to implement their own batching or post-batch corrections.\nSee: http://hub.jmonkeyengine.org/t/batching-layering/35254\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241124a14f302d393b29e9",
    "number": 443,
    "body": "",
    "head_branch": "Issue442",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241125a14f302d393b29ea",
    "number": 440,
    "body": "",
    "head_branch": "WelcomeScreen",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241126a14f302d393b29eb",
    "number": 439,
    "body": "Just corrected spelling for onGeometryUnassociated() function.\n",
    "head_branch": "geometry-spelling",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 6c9cd46e11bca85c20a074f12a42661dffb96316 into 3b1b146014cb8dc508d8474ea0d5f21783d2ec6d"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241127a14f302d393b29ec",
    "number": 438,
    "body": "Removed the modification of the input parameter that lead to a wrong axisSamples member when the cylinder is closed.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241128a14f302d393b29ed",
    "number": 436,
    "body": "Fixes #395 \n\nSummary: fixes calling destroyDirectBuffer from multiple threads\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241129a14f302d393b29ee",
    "number": 435,
    "body": "The constructor doesn't \"Only copies the name and bind pose from the original.\". It takes the object references from the original which leads to shared bind transforms.\n\nFor example several same models are loaded and each model should have different e.g. arm sizes. If all models shares the same bind object references, all models have the same arm size instead of different ones.\n\nA simple clone() makes a real copy and fixes this problem. Now its prossible to have different sized and bone animated arms.\n\nHint:\n\nenabling UserControl disable bone animations, so this is not the way I want. I want bone affected by animations and customized bone transforms (bind transforms).\n\nForum link: http://hub.jmonkeyengine.org/t/bug-bone-animations-share-their-bind-transforms/35217\n",
    "head_branch": "BoneAnimationBindTransformBug",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f925e3eb81b1c9d6cc4f884e5fdb27c72b6b1457 into 8b2d38d52d5562b95a6a01ea7bb88d071a9e34ce"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6624112aa14f302d393b29ef",
    "number": 434,
    "body": "See http://hub.jmonkeyengine.org/t/dirty-flag-not-set-when-deleting-model-controls/35216\nbtw: Fix Imports removed some unused imports and the \"fireSave\" Override is lent from JmeLight.java\n",
    "head_branch": "SceneComposerFix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624112ba14f302d393b29f0",
    "number": 432,
    "body": "See [here](http://hub.jmonkeyengine.org/t/blender-trouble-with-multi-part-character-model-how-to-do-it-right/35121/9)\nThis is essential for importing models (as you then don't know which assetKey triggered the error)\n",
    "head_branch": "AssetPath",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624112ca14f302d393b29f1",
    "number": 430,
    "body": "- Fixed a NPE when trying to select a Node. Now you can properly remove/edit nodes\n- \"smartLog\" now compares the hash across different instances (Two Material Previews led to duplicate log messages)\n- Using smartLog for CompilationErrors now to not spam the log with 60 FPS\n\nThe Lookup failed because there was no Instance of `MatDefNavigatorPanel`.\nNow everything works as intended (You can remove Nodes, change their properties, or at least select them without a crash.)\n\nWhen you produce a shader compilation error, you have the same error printed three times (wireframe (geometry), solid (color) and a third). This doesn't happen anymore, since the hash is now static.\n\nHowever I am uncertain because of such an example:\nWhen you have two instances, one constantly printing a and one constantly printing b. Then smartLog wouldn't work. Since we have three Renderers with the same Material this is very unlikely.\n",
    "head_branch": "ShaderNodes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624112da14f302d393b29f2",
    "number": 427,
    "body": "Updated welcome screen to say \"You are running the latest preview version of the SDK (jMonkeyEngine SDK 3.1-alpha1)\" instead of SDK 3.0.\nIt gets data from the website like before (literally I just changed one character :smile:)\n\nIt fixes one of the bugs described in issue #329\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge a6a066149e2ef27ae7a9cc3f4d785696c55c18bc into d0c7bd988e9bae1e241e6359b5dc434201f2e2b4"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624112ea14f302d393b29f3",
    "number": 426,
    "body": "- Clarified in the JavaDoc that CullHint is not used for batched geometries.\n- Added collideWith method that takes care of ignoring batched geometries.\n- Removed some commented and not used code.\n- Changed signature of isBatch method to be public final - to allow users to check the children if they are batched geometries or not.\n- Corrected spelling mistake for gatherGeometries method.\n",
    "head_branch": "cleanup-batch-node",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1073eba6bee240a0ebc41e0fa6106b85b2e6616f into 99665055b56edebe10b6c9c862b7f8208de87ce8"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6624112fa14f302d393b29f4",
    "number": 425,
    "body": "",
    "head_branch": "patch-javadoc-encoding",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 78a921e3008cd16f54339dc0260f3c2d3136a646 into 67fef7e767962b9fc27be70d2cdf4267198f6032"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241130a14f302d393b29f5",
    "number": 423,
    "body": "I saw several classes doing exactly the same job, so why not just make one.\n",
    "head_branch": "sdk",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241130a14f302d393b29f6",
    "number": 422,
    "body": "So whilst playing around with MatDefs I found this two issues:\na) When you only have one technique, you couldn't click into the ComboBox without a crash.\nThe reason behind this is that you cannot select the same item itself, so closing the box will lead to selected == null.\nWe fix this by simply taking the first item. If there are multiple available techniques we also print a warning regarding this.\n\nb) When you have an incomplete MatDef, we had a few NPE's which crashed the sdk and hence made switching to another MatDef impossible.\nI don't know if Exceptions on a broken (and hence user edited) MatDef are intentional but since the other code checks for null's, I assume it was simply missing :) \n\nBTW: Example MatDef for b\n\n```\nTechnique Test {\n}\n```\n",
    "head_branch": "ShaderNodes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241131a14f302d393b29f7",
    "number": 421,
    "body": "Hey Guys,\nI guess you have noticed that I am flooding you with PR's :P \n\nWhile working on the SDK I noticed that when a Filter is outside of the Asset Path, every call trying to access the FPP will throw an NPE, so that you'd have to restart the SDK.\nSo I simply fix every possible source of a NPE.\n\n`getFilterPostProcessor()` is a bit verbose, but I think it's better than when simply \"nothing\" happens. \nI also added the Edit Filter. Funnily enough it was already implemented, it was only missing the String (and hence you had an empty context menu entry before).\n\nHave fun and enjoy it ;)\n",
    "head_branch": "FilterExplorer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241132a14f302d393b29f8",
    "number": 420,
    "body": "Yeah, really simple.\nThere was no comment on that Issue since May '14, but since I personally dock every window, it was annoying to scroll down, just to find the SceneExplorer.\n\nI also tried to add more descriptive hovers (They appear when you mouseover the Window Title).\nFeel free to suggest better hovers, I'll change the PR accordingly then\n",
    "head_branch": "135",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241133a14f302d393b29f9",
    "number": 419,
    "body": "",
    "head_branch": "3.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241134a14f302d393b29fa",
    "number": 418,
    "body": "In Issue #81, we simply passed the User Input to the SkyFactory which threw an Exception  in multiple cases:\na) When a User didn't specify all Textures\nb) When they weren't a Square.\n\nThis is now fixed so you can't even proceed in the Wizard with these faults.\nFor this, only small changes to the Panel were needed.\n\nThis is how it looks like: (This is only the Netbeans example)\n![validation](https://platform.netbeans.org/images/tutorials/wizard/70/validation1.png)\n",
    "head_branch": "81",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241135a14f302d393b29fb",
    "number": 417,
    "body": "Yeah, I just tried to implement #342.\nI was uncertain on how the \"jme-style\" would be for that enum, so I took an inner-class enum, however moving it out it just a matter of two key presses :)\n\nI did not remove the constructors but only deprecated them to not break existing code.\nI was also unsure about deprecating `AudioNode(AssetManager assetManager, String name)`, simply because it's a constructor where one doesn't have to think about types at all.\n\nWhen merged/alpha 2 drops, I will add the Wiki accordingly :) \n",
    "head_branch": "342",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge c90048595f4b310cce3f2164a299d2c13f79adb7 into 9b7b3638a728a0099b1dae9f2940f18965a83185"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66241136a14f302d393b29fc",
    "number": 416,
    "body": "Soo this PR requires a bit of explanation I think.\nI did **not** use \"throws CloneNotSupportedException\" even though NetBeans suggests it.\nI simply don't since we already consume that exception in Class \"Light\" and we currently have no reason to throw it (XYZLight will always be Clonable)\n\nCasting super.clone(); is valid because Object.clone() will clone the runtime implementation so in DirectionalLight we will really have a DirectionalLight (see http://stackoverflow.com/a/12213417)\n\nThe last thing: I hope it's okay that DirectionalLight.clone() returns a DirectionalLight? This saves us from useless \"instanceof\" and cloning on the user-level since \"covariant returns\" are allowed since Java 5 (returning a subclass of the overriden method's return type)\n",
    "head_branch": "CloneLights",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241137a14f302d393b29fd",
    "number": 415,
    "body": "Yet another simple fix, but hey, atleast it's a fix :P \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241138a14f302d393b29fe",
    "number": 414,
    "body": "",
    "head_branch": "PBRisComing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241139a14f302d393b29ff",
    "number": 413,
    "body": "This commit adds a new enqueue() method to Application that accepts a Runnable object rather than a callable to allow for the following cleaner syntax when using Java 8 lambda expressions.\n\ncallable-only enqueue:\n\n```\nenqueue(() -> {\n    doSomething();\n    return null;\n});\n```\n\nrunnable enqueue:\n`enqueue(() -> doSomething());`\n",
    "head_branch": "EnqueueRunnable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624113aa14f302d393b2a00",
    "number": 412,
    "body": "This pull request includes a new class called SimpleAppState. It implements a feature that I have felt was lacking in this library since I learned how to use AppStates -- it allows for seamless interaction with all resources that your main class may have through an AppState by providing delegates for SimpleApplication's and Application's methods such as getAssetManager(). It also provides improved lifecycle management such as what is available already in BaseAppState to not force users to choose between the convenient method delegates and BaseAppState's lifecycle management. Lastly, it provides a method to enqueue() a Runnable rather than a Callable to allow those who are implementing games in Java 8 use simple enqueue lambda expressions such as `enqueue(() -> doSomething())` rather than `enqueue(() -> {doSomething(); return null;});`\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624113ba14f302d393b2a01",
    "number": 409,
    "body": "Hey Guys, this pull request is a bit embarassing but since this warning caught my eye during compilation I thought let's do this.\n\nAt least a tiny step towards a working javadoc :P\n",
    "head_branch": "JavaDoc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624113ca14f302d393b2a02",
    "number": 408,
    "body": "Added support of overriding for class EnvironmentCamera\n",
    "head_branch": "PBRisComing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 718b66ba629c43cb8686558a2ab764cdb054e825 into bc73765d7cd54975d06236dc9c9b0c2674415d59"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6624113da14f302d393b2a03",
    "number": 407,
    "body": "Added support of overriding and added support the resize image on loading.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624113ea14f302d393b2a04",
    "number": 406,
    "body": "added constructor to simplify creation of Quaternion by using individual angle parameters.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624113fa14f302d393b2a05",
    "number": 404,
    "body": "The commit will allow to publish (in dry mode) from travis to bintray in repository https://bintray.com/jmonkeyengine/org.jmonkeyengine when a tag (starting with jmeMainVersion) is pushed.\n## Setup\n- On bintray\n  - create account on bintray (eg using github identity provider )\n  - ask me or Erlend to register the account as member of the organization jmonkeyengine to be able to upload artifacts\n- On travis\n  - register 2 env variables (I prefer to setup in the settings'panel, but I guess using secure in .travis.yml should work)\n    - `ORG_GRADLE_PROJECT_bintray_user` with the bintray account name, could be displayed in build.log\n    - `ORG_GRADLE_PROJECT_bintray_api_key` with the bintray api key of the account (from https://bintray.com/profile/edit), could NOT be displayed in build.log \n## Apply:\n- On desktop\n  set a git tag that start by jmeMainVersion (3.1 today) and push.\n\n```\ngit tag 3.1.0-alpha2\ngit push --tags\n```\n\nThe tag will be used as version and jmePomVersion\n- After build connect + login on bintray, the artifact should be uploaded in the repostory but not published (I disable the auto-publish (dry = false) until we test the process). So you can choose to publish or to discard the uploaded artifacts. Login is required to see the panel or info about \"uploaded but not published data)\n## Try on local:\n- setup the env variable or setup bintray_user and bintray_api_key into your $HOME/.gradle/gradle.properties\n- git tag or define TRAVIS_TAG (env variable) with a value that start by \"3.1\" (eg \"3.1.0-myversion\")\n- call `./gradlew bintrayUpload`\n",
    "head_branch": "exp_bintray2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241140a14f302d393b2a06",
    "number": 403,
    "body": "Seems to me that cloning the scene graph doesn't work as intended:\n\nCalling Node#clone(boolean) on the root Node will correctly clone all Spatials and their Controls (it's in Spatial#clone(boolean) ), but will not call Node#invalidateUpdateList() afterwards.\n\nOnce you call Node#update(float) on the clone of the root Node, the Spatials and Controls in the original scene graph will be updated. \n\nPossible workaround is to attach a dummy Spatial to the cloned root node and immediately remove it. That will trigger the updateList being rebuild. However, clearing the clone's update list seems more like the proper way to do it.\n",
    "head_branch": "node-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241141a14f302d393b2a07",
    "number": 402,
    "body": "…tive bullet\n",
    "head_branch": "Issue373",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241141a14f302d393b2a08",
    "number": 401,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241143a14f302d393b2a09",
    "number": 400,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241144a14f302d393b2a0a",
    "number": 399,
    "body": "This is basically a re-submit of PR #398 with just the fixes for the master branch. It fixes issue #394 by instantiating class supplied the by @Serializable for a Serializer instead of looking for a SerializerRegistration for the Serializer class in registerClass. \n\nThe second file, SavableSerializer, had a minor thing in SavableSerializer.ByteBufferInputStream: it did not implement the OutputStream contract contract completely correct. Hence it corrupts the stream when wrapped into a BufferedInputstream. This doesn't affect jMonkey's current master branch but broke things I changed in my local branch.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241145a14f302d393b2a0b",
    "number": 398,
    "body": "As the master head failed to run for me, I branched of the 3.1.alpha1 tag. Sorry for the clutter in the diff, but I ran the classes I edited through my code cleaner/formatter and many indentations, alphabetical/qualifier method ordering and missing final tags were changed. \n\nThis PR fixes two things:\n1. Fixing issue 394, when specifying the Serializer class through the @Serializable annotation. The edit took place in  public static SerializerRegistration registerClass( Class<?> cls, boolean failOnMiss ) in Serializer.java\nand now correctly uses reflection to instantiates the Serializer rather than looking up the Serializer for the SerializerClass.\n2. It adds a new feature: I needed to send Savables larger than 32K over a message,the relevant changes are in the send/broadcast methods in DefaultClient and DefaultServer. I also added a new method to their respective interface to configure the buffer size dynamically.\n\nThis also fixes an issue that the SavableSerializer had, the ByteBuffer..Streams did not implement the Output/InputBufferStream contract correctly. This only showed when either of them is wrapped in a Buffered..Stream and buffers larger than 32K are read/written. \n\nIf you decide to discard the >32K buffers feature for DefaultClient/Server, I recommend to use the fixed SavableSerializer anyhow.\n",
    "head_branch": "Branch_v3.1-alpha1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241146a14f302d393b2a0c",
    "number": 397,
    "body": "Sync with upstream\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241146a14f302d393b2a0d",
    "number": 392,
    "body": "It seems that the variable was the wrong one when adding the normal texture to the atlas.\n\nLink to the post where this is talked: http://hub.jmonkeyengine.org/t/fixed-a-possible-bug-in-textureatlas-java/34653\n",
    "head_branch": "patch-4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241147a14f302d393b2a0e",
    "number": 391,
    "body": "Sometimes, when the BetterCharacterControl is not moving, it flickers due it physics being always active. The reason for it being always active is that on the prePhysicsTick method it always set the rigidBody's linear velocity (and the method PhysicsRigidBody.setLinearVelocity(Vector3f) reactivates the physics each time is called).\n\nThe fix consist on just comparing if the current velocity and the setting one aren't the same and, thus, not setting it (using ZERO_TOLERANCE instead 0 to best results).\n",
    "head_branch": "patch-5",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241148a14f302d393b2a0f",
    "number": 385,
    "body": "The private **tmp_inverseWorldRotation** quaternion is only used to make calculations that are completely lost and, thus, unnecessary.\n",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241149a14f302d393b2a10",
    "number": 384,
    "body": "",
    "head_branch": "fix_physicsRigidBody_read",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624114aa14f302d393b2a11",
    "number": 382,
    "body": "…, Sky\n",
    "head_branch": "fix_opengl3_materials",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624114ba14f302d393b2a12",
    "number": 381,
    "body": "Currently there is a problem with ParticleEmitter. It doesn't take into account the the distance it has travelled between updates. Or at least this is my interpretation - I didn't invent this solution. methusalah did. Please see the following threads for more information:\n\nhttp://hub.jmonkeyengine.org/t/interpolation-of-particle-spawning-point/30385/9\nhttp://hub.jmonkeyengine.org/t/interpolation-of-particle-spawning-point-when-emitter-has-moved/30400\n\nThe following images are from my game. FPS is 60 and the emitter emits 2000 particles per second. Projectile's linear speed is 200 world units / s (it uses RigidBodyControl).\n\nWithout interpolation\n![Without interpolation](http://i.imgur.com/6OXVf0f.png)\n\nWith interpolation\n![With interpolation](http://i.imgur.com/Ou5gr5e.png)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624114ca14f302d393b2a13",
    "number": 379,
    "body": "",
    "head_branch": "fix_opengl3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624114da14f302d393b2a14",
    "number": 377,
    "body": "",
    "head_branch": "fix_opengl3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624114ea14f302d393b2a15",
    "number": 376,
    "body": "For both DirectInput and XInput mode. Also tentatively added support of alternate version of xbox360 controller.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624114fa14f302d393b2a16",
    "number": 375,
    "body": "- Y hotspot is top in jogl, and bottom in jme\n- in jme when mouse is invisible it should be confined into the window (on mac it could go out of the window)\n- when window doesn't has the focus the mouse should not behave like when has the focus like \n  - trying to re-center\n  - stay invisible\n",
    "head_branch": "wip_jogl",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241150a14f302d393b2a17",
    "number": 372,
    "body": "Fast, precise implementation of multLocal(Vector3f), mult(Vector3f, Vector3f) \n\nFrom forum thread: http://hub.jmonkeyengine.org/t/4x-faster-quaternion-vector-multiplication/32618/25\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241151a14f302d393b2a18",
    "number": 368,
    "body": "Little docstring problem I noticed.\n",
    "head_branch": "fix/bdero/flybycam-unregister-docstring",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1bb3ee089a2102dfcf799137de69bb2b7a6b6d57 into d48a1bb99838792285087fa71298801a9fc33c59"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66241152a14f302d393b2a19",
    "number": 366,
    "body": "Still had that in my repo, I hope it's done the way you imagined :) \n",
    "head_branch": "Issue46",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241153a14f302d393b2a1a",
    "number": 364,
    "body": "- implementations of intersectsSphere() for Ambient / Directional / Point / Spot  Light\n  (see #362)\n",
    "head_branch": "light",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241154a14f302d393b2a1b",
    "number": 361,
    "body": "I hope this will fix the issue #188 , i didn't have a test case : /\n( added a call to updateBound() just after creating the shape ) \n",
    "head_branch": "bullet_RigidBody",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241154a14f302d393b2a1c",
    "number": 354,
    "body": "",
    "head_branch": "AndroidFix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241155a14f302d393b2a1d",
    "number": 350,
    "body": "According to the Oracle's [docummentation](http://docs.oracle.com/javase/7/docs/api/java/io/ByteArrayOutputStream.html#close%28%29): \"Closing a `ByteArrayOutputStream` has no effect. The methods in this class can be called after the stream has been closed without generating an `IOException`.\" \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241156a14f302d393b2a1e",
    "number": 349,
    "body": "In the `toString()` method concatenation will be performed during the runtime, because not all parameters are `String` type literals.\nThat is why it is better to use `StringBuilder` here.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241157a14f302d393b2a1f",
    "number": 346,
    "body": "Shortening code using Java7's catch block, that can handle exceptions of the different types.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241158a14f302d393b2a20",
    "number": 345,
    "body": "I'm using jMonkeyEngine to display content, that was created for DirectX, and therefore I have to use a negative scaled z axis.\n\nThe bounding box of a rotated and negative scaled object, is totally messed up.\n![wrongboundingbox](https://cloud.githubusercontent.com/assets/9250103/9991830/bdbb0914-606d-11e5-9588-48f07af7ca42.PNG)\n\nUsing the absolute value of scale, when calculating the scaled bounding box extent, eliminates the problem.\n![fixedboundingbox](https://cloud.githubusercontent.com/assets/9250103/9991833/c3e33b5e-606d-11e5-8e97-8582e287cf2a.PNG)\n",
    "head_branch": "patch_negscalebb",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241159a14f302d393b2a21",
    "number": 344,
    "body": "",
    "head_branch": "PBRisComing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624115aa14f302d393b2a22",
    "number": 340,
    "body": "I realise this is a huge pull request but most of the real changes are in the new module so new files altogether.\n\nSome other changes will have been made, in particular to how lwjgl native libraries were registered, this now happens in the two modules jme3-lwjgl and jme3-lwjgl3.\n\nI also took the liberty to change the info log statement of the audio renderer to better match the one of the gl renderer.\n\nTake note that the jme3-lwjgl3 module currently depends on LWJGL 3.0.0b which is a snapshot version. It will probably stay like this until we get a proper 3.0.0 version.\n\nSupport for keyboard, mouse and joystick is all working with a new joystick mapping added as well.\n\nAlso note that currently there will be some duplicate code between the jme3-lwjgl module and the new jme3-lwjgl3 module.\n",
    "head_branch": "issue314",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624115da14f302d393b2a23",
    "number": 339,
    "body": "Edit: For 3.1 Alpha!!!\n\nRemove these four lines from Node.CollideWith. It makes exceptions when the node has more then 3 children. These lines are new in 3.1\n\n``` javascript\n\nif (children.size() > 4)\n{\n      BoundingVolume bv = this.getWorldBound();\n      if (bv==null) return 0;\n\n      // collideWith without CollisionResults parameter used to avoid allocation when possible\n      if (bv.collideWith(other) == 0) return 0;\n}\n\n```\n\nI attached the corrected Node.java with these faulty lines in commentary. Contact me at ericbourque29@gmail.com if you want a test app that shows the problem. \n\n``` javascript\n\n/*\n * Copyright (c) 2009-2012 jMonkeyEngine\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * * Redistributions of source code must retain the above copyright\n *   notice, this list of conditions and the following disclaimer.\n *\n * * Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * * Neither the name of 'jMonkeyEngine' nor the names of its contributors\n *   may be used to endorse or promote products derived from this software\n *   without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.jme3.scene;\n\nimport com.jme3.bounding.BoundingVolume;\nimport com.jme3.collision.Collidable;\nimport com.jme3.collision.CollisionResults;\nimport com.jme3.export.JmeExporter;\nimport com.jme3.export.JmeImporter;\nimport com.jme3.export.Savable;\nimport com.jme3.material.Material;\nimport com.jme3.util.SafeArrayList;\nimport com.jme3.util.TempVars;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Queue;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\n\n/**\n * <code>Node</code> defines an internal node of a scene graph. The internal\n * node maintains a collection of children and handles merging said children\n * into a single bound to allow for very fast culling of multiple nodes. Node\n * allows for any number of children to be attached.\n * \n * @author Mark Powell\n * @author Gregg Patton\n * @author Joshua Slack\n */\npublic class Node extends Spatial {\n\n    private static final Logger logger = Logger.getLogger(Node.class.getName());\n\n    /** \n     * This node's children.\n     */\n    protected SafeArrayList<Spatial> children = new SafeArrayList<Spatial>(Spatial.class);\n\n    /**\n     * If this node is a root, this list will contain the current\n     * set of children (and children of children) that require \n     * updateLogicalState() to be called as indicated by their\n     * requiresUpdate() method.\n     */\n    private SafeArrayList<Spatial> updateList = null;\n\n    /**\n     * False if the update list requires rebuilding.  This is Node.class\n     * specific and therefore not included as part of the Spatial update flags.\n     * A flag is used instead of nulling the updateList to avoid reallocating\n     * a whole list every time the scene graph changes.\n     */     \n    private boolean updateListValid = false;    \n\n    /**\n     * Serialization only. Do not use.\n     */\n    public Node() {\n        this(null);\n    }\n\n    /**\n     * Constructor instantiates a new <code>Node</code> with a default empty\n     * list for containing children.\n     * \n     * @param name the name of the scene element. This is required for\n     * identification and comparison purposes.\n     */\n    public Node(String name) {\n        super(name);\n\n        // For backwards compatibility, only clear the \"requires\n        // update\" flag if we are not a subclass of Node.\n        // This prevents subclass from silently failing to receive\n        // updates when they upgrade.\n        setRequiresUpdates(Node.class != getClass()); \n    }\n\n    /**\n     * \n     * <code>getQuantity</code> returns the number of children this node\n     * maintains.\n     * \n     * @return the number of children this node maintains.\n     */\n    public int getQuantity() {\n        return children.size();        \n    }\n\n    @Override\n    protected void setTransformRefresh(){\n        super.setTransformRefresh();\n        for (Spatial child : children.getArray()){\n            if ((child.refreshFlags & RF_TRANSFORM) != 0)\n                continue;\n\n            child.setTransformRefresh();\n        }\n    }\n\n    @Override\n    protected void setLightListRefresh(){\n        super.setLightListRefresh();\n        for (Spatial child : children.getArray()){\n            if ((child.refreshFlags & RF_LIGHTLIST) != 0)\n                continue;\n\n            child.setLightListRefresh();\n        }\n    }\n\n    @Override\n    protected void updateWorldBound(){\n        super.updateWorldBound();\n\n        // for a node, the world bound is a combination of all it's children\n        // bounds\n        BoundingVolume resultBound = null;\n        for (Spatial child : children.getArray()) {\n            // child bound is assumed to be updated\n            assert (child.refreshFlags & RF_BOUND) == 0;\n            if (resultBound != null) {\n                // merge current world bound with child world bound\n                resultBound.mergeLocal(child.getWorldBound());\n            } else {\n                // set world bound to first non-null child world bound\n                if (child.getWorldBound() != null) {\n                    resultBound = child.getWorldBound().clone(this.worldBound);\n                }\n            }\n        }\n        this.worldBound = resultBound;\n    }\n\n    @Override\n    protected void setParent(Node parent) {\n        if( this.parent == null && parent != null ) {\n            // We were a root before and now we aren't... make sure if\n            // we had an updateList then we clear it completely to \n            // avoid holding the dead array.\n            updateList = null;\n            updateListValid = false;\n        }\n        super.setParent(parent);\n    }\n\n    private void addUpdateChildren( SafeArrayList<Spatial> results ) {\n        for( Spatial child : children.getArray() ) {\n            if( child.requiresUpdates() ) {\n                results.add(child);\n            }\n            if( child instanceof Node ) {\n                ((Node)child).addUpdateChildren(results);\n            }\n        }\n    }\n\n    /**\n     *  Called to invalidate the root node's update list.  This is\n     *  called whenever a spatial is attached/detached as well as\n     *  when a control is added/removed from a Spatial in a way\n     *  that would change state.\n     */\n    void invalidateUpdateList() {\n        updateListValid = false;\n        if ( parent != null ) {\n          parent.invalidateUpdateList();\n        }\n    }\n\n    private SafeArrayList<Spatial> getUpdateList() {\n        if( updateListValid ) {\n            return updateList;\n        }\n        if( updateList == null ) {\n            updateList = new SafeArrayList<Spatial>(Spatial.class);            \n        } else {\n            updateList.clear();\n        }\n\n        // Build the list\n        addUpdateChildren(updateList);\n        updateListValid = true;       \n        return updateList;   \n    }\n\n    @Override\n    public void updateLogicalState(float tpf){\n        super.updateLogicalState(tpf);\n\n        // Only perform updates on children if we are the\n        // root and then only peform updates on children we\n        // know to require updates.\n        // So if this isn't the root, abort.\n        if( parent != null ) {\n            return;\n        }\n\n        for( Spatial s : getUpdateList().getArray() ) {\n            s.updateLogicalState(tpf);\n        }\n    }\n\n    @Override\n    public void updateGeometricState(){\n        if (refreshFlags == 0) {\n            // This branch has no geometric state that requires updates.\n            return;\n        }\n\n        if ((refreshFlags & RF_LIGHTLIST) != 0){\n            updateWorldLightList();\n        }\n\n        if ((refreshFlags & RF_TRANSFORM) != 0){\n            // combine with parent transforms- same for all spatial\n            // subclasses.\n            updateWorldTransforms();\n        }\n\n        refreshFlags &= ~RF_CHILD_LIGHTLIST;\n\n        if (!children.isEmpty()) {\n            // the important part- make sure child geometric state is refreshed\n            // first before updating own world bound. This saves\n            // a round-trip later on.\n            // NOTE 9/19/09\n            // Although it does save a round trip,\n            for (Spatial child : children.getArray()) {\n                child.updateGeometricState();\n            }\n        }            \n\n        if ((refreshFlags & RF_BOUND) != 0){\n            updateWorldBound();\n        }\n\n        assert refreshFlags == 0;\n    }\n\n    /**\n     * <code>getTriangleCount</code> returns the number of triangles contained\n     * in all sub-branches of this node that contain geometry.\n     * \n     * @return the triangle count of this branch.\n     */\n    @Override\n    public int getTriangleCount() {\n        int count = 0;\n        if(children != null) {\n            for(int i = 0; i < children.size(); i++) {\n                count += children.get(i).getTriangleCount();\n            }\n        }\n\n        return count;\n    }\n\n    /**\n     * <code>getVertexCount</code> returns the number of vertices contained\n     * in all sub-branches of this node that contain geometry.\n     * \n     * @return the vertex count of this branch.\n     */\n    @Override\n    public int getVertexCount() {\n        int count = 0;\n        if(children != null) {\n            for(int i = 0; i < children.size(); i++) {\n               count += children.get(i).getVertexCount();\n            }\n        }\n\n        return count;\n    }\n\n    /**\n     * <code>attachChild</code> attaches a child to this node. This node\n     * becomes the child's parent. The current number of children maintained is\n     * returned.\n     * <br>\n     * If the child already had a parent it is detached from that former parent.\n     * \n     * @param child\n     *            the child to attach to this node.\n     * @return the number of children maintained by this node.\n     * @throws IllegalArgumentException if child is null.\n     */\n    public int attachChild(Spatial child) {\n        return attachChildAt(child, children.size());\n    }\n\n    /**\n     * \n     * <code>attachChildAt</code> attaches a child to this node at an index. This node\n     * becomes the child's parent. The current number of children maintained is\n     * returned.\n     * <br>\n     * If the child already had a parent it is detached from that former parent.\n     * \n     * @param child\n     *            the child to attach to this node.\n     * @return the number of children maintained by this node.\n     * @throws NullPointerException if child is null.\n     */\n    public int attachChildAt(Spatial child, int index) {\n        if (child == null)\n            throw new NullPointerException();\n\n        if (child.getParent() != this && child != this) {\n            if (child.getParent() != null) {\n                child.getParent().detachChild(child);\n            }\n            child.setParent(this);\n            children.add(index, child);\n\n            // XXX: Not entirely correct? Forces bound update up the\n            // tree stemming from the attached child. Also forces\n            // transform update down the tree-\n            child.setTransformRefresh();\n            child.setLightListRefresh();\n            if (logger.isLoggable(Level.FINE)) {\n                logger.log(Level.FINE,\"Child ({0}) attached to this node ({1})\",\n                        new Object[]{child.getName(), getName()});\n            }\n\n            invalidateUpdateList();\n        }\n\n        return children.size();\n    }\n\n    /**\n     * <code>detachChild</code> removes a given child from the node's list.\n     * This child will no longer be maintained.\n     * \n     * @param child\n     *            the child to remove.\n     * @return the index the child was at. -1 if the child was not in the list.\n     */\n    public int detachChild(Spatial child) {\n        if (child == null)\n            throw new NullPointerException();\n\n        if (child.getParent() == this) {\n            int index = children.indexOf(child);\n            if (index != -1) {\n                detachChildAt(index);\n            }\n            return index;\n        } \n\n        return -1;        \n    }\n\n    /**\n     * <code>detachChild</code> removes a given child from the node's list.\n     * This child will no longe be maintained. Only the first child with a\n     * matching name is removed.\n     * \n     * @param childName\n     *            the child to remove.\n     * @return the index the child was at. -1 if the child was not in the list.\n     */\n    public int detachChildNamed(String childName) {\n        if (childName == null)\n            throw new NullPointerException();\n\n        for (int x = 0, max = children.size(); x < max; x++) {\n            Spatial child =  children.get(x);\n            if (childName.equals(child.getName())) {\n                detachChildAt( x );\n                return x;\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * \n     * <code>detachChildAt</code> removes a child at a given index. That child\n     * is returned for saving purposes.\n     * \n     * @param index\n     *            the index of the child to be removed.\n     * @return the child at the supplied index.\n     */\n    public Spatial detachChildAt(int index) {\n        Spatial child =  children.remove(index);\n        if ( child != null ) {\n            child.setParent( null );\n            logger.log(Level.FINE, \"{0}: Child removed.\", this.toString());\n\n            // since a child with a bound was detached;\n            // our own bound will probably change.\n            setBoundRefresh();\n\n            // our world transform no longer influences the child.\n            // XXX: Not neccessary? Since child will have transform updated\n            // when attached anyway.\n            child.setTransformRefresh();\n            // lights are also inherited from parent\n            child.setLightListRefresh();\n\n            invalidateUpdateList();\n        }\n        return child;\n    }\n\n    /**\n     * \n     * <code>detachAllChildren</code> removes all children attached to this\n     * node.\n     */\n    public void detachAllChildren() {\n        // Note: this could be a bit more efficient if it delegated\n        // to a private method that avoided setBoundRefresh(), etc.\n        // for every child and instead did one in here at the end.\n        for ( int i = children.size() - 1; i >= 0; i-- ) {\n            detachChildAt(i);\n        }\n        logger.log(Level.FINE, \"{0}: All children removed.\", this.toString());\n    }\n\n    /**\n     * <code>getChildIndex</code> returns the index of the given spatial\n     * in this node's list of children.\n     * @param sp\n     *          The spatial to look up\n     * @return \n     *          The index of the spatial in the node's children, or -1\n     *          if the spatial is not attached to this node\n     */\n    public int getChildIndex(Spatial sp) {\n        return children.indexOf(sp);\n    }\n\n    /**\n     * More efficient than e.g detaching and attaching as no updates are needed.\n     * \n     * @param index1 The index of the first child to swap\n     * @param index2 The index of the second child to swap\n     */\n    public void swapChildren(int index1, int index2) {\n        Spatial c2 =  children.get(index2);\n        Spatial c1 =  children.remove(index1);\n        children.add(index1, c2);\n        children.remove(index2);\n        children.add(index2, c1);\n    }\n\n    /**\n     * \n     * <code>getChild</code> returns a child at a given index.\n     * \n     * @param i\n     *            the index to retrieve the child from.\n     * @return the child at a specified index.\n     */\n    public Spatial getChild(int i) {\n        return children.get(i);\n    }\n\n    /**\n     * <code>getChild</code> returns the first child found with exactly the\n     * given name (case sensitive.) This method does a depth first recursive\n     * search of all descendants of this node, it will return the first spatial\n     * found with a matching name.\n     * \n     * @param name\n     *            the name of the child to retrieve. If null, we'll return null.\n     * @return the child if found, or null.\n     */\n    public Spatial getChild(String name) {\n        if (name == null) \n            return null;\n\n        for (Spatial child : children.getArray()) {\n            if (name.equals(child.getName())) {\n                return child;\n            } else if(child instanceof Node) {\n                Spatial out = ((Node)child).getChild(name);\n                if(out != null) {\n                    return out;\n                }\n            }\n        }\n        return null;\n    }\n\n    /**\n     * determines if the provided Spatial is contained in the children list of\n     * this node.\n     * \n     * @param spat\n     *            the child object to look for.\n     * @return true if the object is contained, false otherwise.\n     */\n    public boolean hasChild(Spatial spat) {\n        if (children.contains(spat))\n            return true;\n\n        for (Spatial child : children.getArray()) {\n            if (child instanceof Node && ((Node) child).hasChild(spat))\n                return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Returns all children to this node. Note that modifying that given\n     * list is not allowed.\n     *\n     * @return a list containing all children to this node\n     */\n    public List<Spatial> getChildren() {\n        return children;\n    }\n\n    @Override\n    public void setMaterial(Material mat){\n        for (int i = 0; i < children.size(); i++){\n            children.get(i).setMaterial(mat);\n        }\n    }\n\n    @Override\n    public void setLodLevel(int lod){\n        super.setLodLevel(lod);\n        for (Spatial child : children.getArray()) {\n            child.setLodLevel(lod);\n        }\n    }\n\n    public int collideWith(Collidable other, CollisionResults results){\n        int total = 0;\n\n        // optimization: try collideWith BoundingVolume to avoid possibly redundant tests on children\n        // number 4 in condition is somewhat arbitrary. When there is only one child, the boundingVolume test is redundant at all. \n        // The idea is when there are few children, it can be too expensive to test boundingVolume first.\n        /*if (children.size() > 4)\n        {\n          BoundingVolume bv = this.getWorldBound();\n          if (bv==null) return 0;\n\n          // collideWith without CollisionResults parameter used to avoid allocation when possible\n          if (bv.collideWith(other) == 0) return 0;\n        }*/\n        for (Spatial child : children.getArray()){\n            total += child.collideWith(other, results);\n        }\n        return total;\n    }\n\n\n     /**\n     * Returns flat list of Spatials implementing the specified class AND\n     * with name matching the specified pattern.\n     * </P> <P>\n     * Note that we are <i>matching</i> the pattern, therefore the pattern\n     * must match the entire pattern (i.e. it behaves as if it is sandwiched\n     * between \"^\" and \"$\").\n     * You can set regex modes, like case insensitivity, by using the (?X)\n     * or (?X:Y) constructs.\n     * </P> <P>\n     * By design, it is always safe to code loops like:<CODE><PRE>\n     *     for (Spatial spatial : node.descendantMatches(AClass.class, \"regex\"))\n     * </PRE></CODE>\n     * </P> <P>\n     * \"Descendants\" does not include self, per the definition of the word.\n     * To test for descendants AND self, you must do a\n     * <code>node.matches(aClass, aRegex)</code> +\n     * <code>node.descendantMatches(aClass, aRegex)</code>.\n     * <P>\n     *\n     * @param spatialSubclass Subclass which matching Spatials must implement.\n     *                        Null causes all Spatials to qualify.\n     * @param nameRegex  Regular expression to match Spatial name against.\n     *                        Null causes all Names to qualify.\n     * @return Non-null, but possibly 0-element, list of matching Spatials (also Instances extending Spatials).\n     *\n     * @see java.util.regex.Pattern\n     * @see Spatial#matches(java.lang.Class, java.lang.String) \n     */\n    @SuppressWarnings(\"unchecked\")\n    public <T extends Spatial>List<T> descendantMatches(\n            Class<T> spatialSubclass, String nameRegex) {\n        List<T> newList = new ArrayList<T>();\n        if (getQuantity() < 1) return newList;\n        for (Spatial child : getChildren()) {\n            if (child.matches(spatialSubclass, nameRegex))\n                newList.add((T)child);\n            if (child instanceof Node)\n                newList.addAll(((Node) child).descendantMatches(\n                        spatialSubclass, nameRegex));\n        }\n        return newList;\n    }\n\n    /**\n     * Convenience wrapper.\n     *\n     * @see #descendantMatches(java.lang.Class, java.lang.String) \n     */\n    public <T extends Spatial>List<T> descendantMatches(\n            Class<T> spatialSubclass) {\n        return descendantMatches(spatialSubclass, null);\n    }\n\n    /**\n     * Convenience wrapper.\n     *\n     * @see #descendantMatches(java.lang.Class, java.lang.String) \n     */\n    public <T extends Spatial>List<T> descendantMatches(String nameRegex) {\n        return descendantMatches(null, nameRegex);\n    }\n\n    @Override\n    public Node clone(boolean cloneMaterials){\n        Node nodeClone = (Node) super.clone(cloneMaterials);\n//        nodeClone.children = new ArrayList<Spatial>();\n//        for (Spatial child : children){\n//            Spatial childClone = child.clone();\n//            childClone.parent = nodeClone;\n//            nodeClone.children.add(childClone);\n//        }\n        return nodeClone;\n    }\n\n    @Override\n    public Spatial deepClone(){\n        Node nodeClone = (Node) super.clone();\n        nodeClone.children = new SafeArrayList<Spatial>(Spatial.class);\n        for (Spatial child : children){\n            Spatial childClone = child.deepClone();\n            childClone.parent = nodeClone;\n            nodeClone.children.add(childClone);\n        }\n        return nodeClone;\n    }\n\n    @Override\n    public void write(JmeExporter e) throws IOException {\n        super.write(e);\n        e.getCapsule(this).writeSavableArrayList(new ArrayList(children), \"children\", null);\n    }\n\n    @Override\n    public void read(JmeImporter e) throws IOException {\n        // XXX: Load children before loading itself!!\n        // This prevents empty children list if controls query\n        // it in Control.setSpatial().\n\n        children = new SafeArrayList( Spatial.class, \n                                      e.getCapsule(this).readSavableArrayList(\"children\", null) );\n\n        // go through children and set parent to this node\n        if (children != null) {\n            for (Spatial child : children.getArray()) {\n                child.parent = this;\n            }\n        }\n\n        super.read(e);\n    }\n\n    @Override\n    public void setModelBound(BoundingVolume modelBound) {\n        if(children != null) {\n            for (Spatial child : children.getArray()) {\n                child.setModelBound(modelBound != null ? modelBound.clone(null) : null);\n            }\n        }\n    }\n\n    @Override\n    public void updateModelBound() {\n        if(children != null) {\n            for (Spatial child : children.getArray()) {\n                child.updateModelBound();\n            }\n        }\n    }\n\n    @Override\n    public void depthFirstTraversal(SceneGraphVisitor visitor) {\n        for (Spatial child : children.getArray()) {\n            child.depthFirstTraversal(visitor);\n        }\n        visitor.visit(this);\n    }\n\n    @Override\n    protected void breadthFirstTraversal(SceneGraphVisitor visitor, Queue<Spatial> queue) {\n        queue.addAll(children);\n    }\n}\n\n```\n\nForum link:\n\nhttp://hub.jmonkeyengine.org/t/windows-exe-does-not-build-after-switching-to-3-1-alpha/33730/37\n\nThis is my first ever pull request, please tell me if there is anything I should have done differently.\n",
    "head_branch": "master",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624115ea14f302d393b2a24",
    "number": 336,
    "body": "Changed the paintTool tooltip text to match the tool actions \n",
    "head_branch": "sdk_scenecomposer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624115fa14f302d393b2a25",
    "number": 334,
    "body": "Quite a simple commit:\n- computeNumElements could return -2 depending on the Mode (TRIANGLE_STIRP) and now it always returns zero as it should.\n- The Statistics-Render will now crash when there is an erroneous Mesh (without proper tri/vert count).\n  Note: This also means that a clean `Geometry g = new Geometry(\"Geo\", new Mesh());`will lead to a crash as the plain constructor doesn't set the tri/vert count.\n\nAlso note that when you use BasicGameTemplate the vert-count goes up by 4 when adding an \"empty\" Mesh, this is because the object-count goes up from 9 to 10 and thus requiring another digit.\n\nEdit: Sorry, I was unable to open two separate pull requests since Github always wants to use the newest version of my fork :/ What would've been the right way? One branch for each new feature? (Like each issue?)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241160a14f302d393b2a26",
    "number": 333,
    "body": "- the position of the cursor wasn't updated, now it's work fine.\n- added a line width to the select arrow so theres are easier so select (not as much as expected :/ )\n",
    "head_branch": "sdk_scenecomposer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241161a14f302d393b2a27",
    "number": 320,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241162a14f302d393b2a28",
    "number": 309,
    "body": "In FlyByCamera, rather than hardcoding them to be along the Y axis, 'Q' and 'Z' now move with and against respectively whatever direction has been set as its up vector (using setUpVector).\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241163a14f302d393b2a29",
    "number": 306,
    "body": "per discussion at http://hub.jmonkeyengine.org/t/new-contributor-wants-to-submit-small-usability-tweaks/33150. The new constructors have been added in such a way as to preserve existing functionality whereby most direction and light data are copied during set\\* operations.\n",
    "head_branch": "light-ctors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241164a14f302d393b2a2a",
    "number": 305,
    "body": "…t is less than 4\n",
    "head_branch": "fix_skeleton",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241165a14f302d393b2a2b",
    "number": 304,
    "body": "Merge\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241166a14f302d393b2a2c",
    "number": 303,
    "body": "This modification allow to \"lock\" a degree of freedom of one rigidBody, without joint. This ability is only available with native bullet. \nThis can be useful for using bullet for 2D game (maybe not the best option), this can be done like so : \n\n``` java\nbody.setAngularFactor(new Vector3f(0,0,1)); // <-- only rotate on Z axis\nbody.setLinearFactor(new Vector3f(1,1,0)); // <-- only move on a 2D plane (X-Y)\n```\n\nYou can also set a value between [0;1] to \"reduce\" the movement / rotation. \nUsing angular/linear factor do not preserve the conservation of energy. (the factor only scale the \"forces\")\n",
    "head_branch": "bullet_RigidBody",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241167a14f302d393b2a2d",
    "number": 302,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241167a14f302d393b2a2e",
    "number": 301,
    "body": "Added support for setting minification and magnification filters on a texture in the j3m material file. This also adds support for double and single quoted paths as well as being able to set WrapMode for a specific WrapAxis.\n\nThis PR also contains a slight change to a couple of build scripts to include the other modules as dependencies rather than have their sources referenced directly. This was causing an issue with IntelliJ IDEA which does not allow source paths residing outside a modules root.\n\nThis pull request resolves #295 \n",
    "head_branch": "issue295",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241168a14f302d393b2a2f",
    "number": 294,
    "body": "I remade the PR #288 to have a cleaner diff and history (commit log).\n\nThe PR include a fix for  GLSL150Compat  (the version + auto-injection of the define XXXX_SHADER).\n",
    "head_branch": "david_gl3_mrt_unshaded",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 568ee09d17a1d95aa31f97de1977d6ee419cfbfd into c7606ccff2527acc1b6495a87bc742646c030e07"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241169a14f302d393b2a30",
    "number": 293,
    "body": "as discuss in [Ignore technique with no shader - Development - jMonkeyEngine Hub](http://hub.jmonkeyengine.org/t/ignore-technique-with-no-shader/33012/10)\n\nI forgot that java require so many boilerplate to add a public field, since I used more sweet syntax (scala, xtend, lombock).\n",
    "head_branch": "david_materiel_no_render",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge fe72dd67dd33f402b8e755f07001bb172f9156d2 into 6d3377a2a88afa30e54fcc8666a10420e38931ca"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6624116aa14f302d393b2a31",
    "number": 292,
    "body": "I've found an issue with the uniforms. It seams that they are sent to the GPU even if the value hasn't changed.\nIn my game I was able to reduce the uniforms from ~10.000 to ~2000 which results in up to 15% of performance increase. For me it was about 10 fps more than before.\n\nforum link: http://hub.jmonkeyengine.org/t/performance-issue-too-much-uniform-updates/33016\n",
    "head_branch": "ResuceUniforms",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624116ba14f302d393b2a32",
    "number": 290,
    "body": "The GZIP and ZIP serializer copying the whole temporary buffer instead of only the part where the data was written. This can be easily fixed.\n\nForum thread: http://hub.jmonkeyengine.org/t/gzipserializer-creates-too-big-buffers/32925\n",
    "head_branch": "ImproveCompressedSerialization",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7b6a742f0f2bea30bb44085af7edd150d2b387ab into b0e751c81acfeea1de98da636a260d387a8bb42a"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624116ca14f302d393b2a33",
    "number": 289,
    "body": "Replaced call to System.out.println() with proper logging call.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624116da14f302d393b2a34",
    "number": 288,
    "body": "",
    "head_branch": "improvement_gl3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624116ea14f302d393b2a35",
    "number": 287,
    "body": "While for the FileLocator \"/path/x.png\" and \"path/x.png\" are the same location, the ZipLocator (since they are passed directly to ZipFile.getEntry) treats them as two different location, as it should be on a zip archive, but since there is no need of this for the asset manager I think it's reasonable to make both FileLocator and ZipLocator work in the same way.\n\nI noticed this problem after I load a blend model from a zip file and its textures were missed because all path were starting with a slash. I'm not sure if the HttpZipLoader is affected too.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624116fa14f302d393b2a36",
    "number": 282,
    "body": "smalls changes : now the DeleteShortcut cannot be activated at the same time as and other shortcutTool (prevent form miss deleting). And cleaned some code to be more functional (reduce side effects). Get involved here : http://hub.jmonkeyengine.org/t/improving-scene-composer-tools/32230/29\n",
    "head_branch": "sdk_scenecomposer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241170a14f302d393b2a37",
    "number": 279,
    "body": "I've added the missing code taken from Lighting.*\n",
    "head_branch": "PBRisComing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241171a14f302d393b2a38",
    "number": 277,
    "body": "Required to know how many uniforms can be used in the vertex shader.\n\nProbably also required by the hardware skinning?\n\nThe code was already in 3.0 but was commented out in 3.1, you probably had a reason for this i guess. \n\nFollowing some stackoverflow talk, on some ATI cards the returned number has to be divided by 4. Not implemented that because i have not access to testing machines. \n\nReturns 4096 on my geforce 780\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241172a14f302d393b2a39",
    "number": 276,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241173a14f302d393b2a3a",
    "number": 274,
    "body": "So smalls changes : now the DeleteShortcut cannot be activated at the same time as and other shortcutTool (prevent form miss deleting). And cleaned some code to be more functional (reduce side effects). Get involved here : http://hub.jmonkeyengine.org/t/improving-scene-composer-tools/32230/29\n\nps : don't care about the two last commits, wrong branch commits ^^\n",
    "head_branch": "scenecomposer/master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241174a14f302d393b2a3b",
    "number": 273,
    "body": "This add new way to manage shortcut for sceneEditTool, since there was all handled into the selectTool. Now this provide a much readable and easiest way to add new shortcuts to the sceneComposer. Plus each shortcut can be used with every other \"classical\" tools. For more information see : http://hub.jmonkeyengine.org/t/improving-scene-composer-tools/32230/23\n",
    "head_branch": "scenecomposer/master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241174a14f302d393b2a3c",
    "number": 272,
    "body": "Not a new feature at all, but added missing loader for 16 bit grayscale textures. 3.1 loaded the files as RGB8, while 3.0 was loading a Luminance16 \n\nNot sure why this feature was removed from 3.1. I am probably overseeing some big downside of this format. But i have not yet found any other way to load a 16 bit heightmap in 3.1 due to the missing formats. \n\nI am open to suggestions\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241175a14f302d393b2a3d",
    "number": 269,
    "body": "Great Success !\n",
    "head_branch": "scenecomposer/master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241176a14f302d393b2a3e",
    "number": 268,
    "body": "now right clicking will cancel the current transformation (for the Scale, Rotate and Move Tool). Also improved these tool feedback as it's easier to start the transformation.\nFor more information see : http://hub.jmonkeyengine.org/t/improving-scene-composers-tool/32230/20\n",
    "head_branch": "scenecomposer/master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge a913d8e0c29b6c39a490ad88ac4c1036e9dfccad into a4e1aa450ddebf6d5b12feb11be6dd82b1ff7c98"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66241177a14f302d393b2a3f",
    "number": 267,
    "body": "An updated and cleaned version of my scissoring stuff from last year. The thread is http://hub.jmonkeyengine.org/t/enabling-and-specifying-scissoring-via-renderstate/29742\n\nUse spatial.enableClipping(x, y, width, height) and spatial.disableClipping() to turn clipping on and off for a given spatial.\n",
    "head_branch": "per_geometry_scissor_2.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241178a14f302d393b2a40",
    "number": 266,
    "body": "This merge add the option to choose a transformation type ( local, global or camera) in the sceneComposer (tool window) , which is used by the pickManager providing corresponding transformation for the Move, Rotate and Scale tools.\nFor more information see : http://hub.jmonkeyengine.org/t/improving-scene-composers-tool/32230/16\n",
    "head_branch": "scenecomposer/master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241179a14f302d393b2a41",
    "number": 264,
    "body": "Removed redundand code. Fixed java/lang/IllegalStateException in com/jme3/asset/DesktopAssetManager.registerAndCloneSmartAsset. Added ogg loader\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624117aa14f302d393b2a42",
    "number": 263,
    "body": "Created pickManager based on the moveManager that allow to have \"3D\" tools in the sceneComposer.\nNow the rotate tool and the scale tool doesn't use anymore screen coords for transformation. \nAnd now the local/global choice for transformations is just a step away.\nFor more information see : http://hub.jmonkeyengine.org/t/improving-scene-composers-tool/32230/6\n",
    "head_branch": "scenecomposer/master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d48c1e0e9d6eba7d246d363c4a2f7b67a56f1358 into da8bd08aa1197506709bae3c34de43d9d4159e1b"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6624117ba14f302d393b2a43",
    "number": 262,
    "body": "Fixed iOS subsystem after transition to common renderer. Added OpenAL audio renderer. Implemented flip y in native iOS image loader\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624117ca14f302d393b2a44",
    "number": 261,
    "body": "Fixed a typo and nothing else\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624117da14f302d393b2a45",
    "number": 260,
    "body": "Enable axis pick for MoveTool and ScaleTool, however scale tool still use screen coordinate for scale change.\nFor more information see : http://hub.jmonkeyengine.org/t/improving-scene-composers-tool/32230/4\n",
    "head_branch": "scenecomposer/master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624117ea14f302d393b2a46",
    "number": 256,
    "body": "- Now you can't use scenecomposer tool while overiding the camera control\n- Fixed a case where a tool modificaton isn't undo/redo able.\n",
    "head_branch": "scenecomposer/master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624117fa14f302d393b2a47",
    "number": 251,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241180a14f302d393b2a48",
    "number": 250,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5c8b1fe585282034966b1e31920c58e251ddfdf3 into 38e4580857e032137741278563645cbf14ff6903"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66241181a14f302d393b2a49",
    "number": 248,
    "body": "Just another serializer, this one for UUIDs\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241181a14f302d393b2a4a",
    "number": 245,
    "body": "Improved the parsing performance (important mainly for Android). Example model with 32k vertices took initially 71 seconds and loads now in around 15 seconds. I tried to keep as much as possible of the original structure. Main problem on Android is that the Scanner class is horribly slow and the Pattern class as well so I got rid of them and added my own implementation of the split method.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241182a14f302d393b2a4b",
    "number": 229,
    "body": "previously only test as assertionEnabled = true\n",
    "head_branch": "build_enable_assertion",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241183a14f302d393b2a4c",
    "number": 228,
    "body": "",
    "head_branch": "fix_cinematic_clear",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241184a14f302d393b2a4d",
    "number": 227,
    "body": "",
    "head_branch": "fix_javadoc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241185a14f302d393b2a4e",
    "number": 226,
    "body": "Test push to complete a contributor's pull request\n",
    "head_branch": "pr/223",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241186a14f302d393b2a4f",
    "number": 224,
    "body": "Fixed the swapped bits for the shader flags and renamed the shaders for the test\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241187a14f302d393b2a50",
    "number": 223,
    "body": "During tweaking [Optimize RenderShadow to use scene hierarchy for culling](https://github.com/jMonkeyEngine/jmonkeyengine/pull/211) there was the statement:\n\n> Bebul: The reason why there is still `RenderQueue.shadowRecv` left is to possibly reuse the collected receivers, as having the list of receivers in the camera frustum can become handy. So it is not necessarily empty! It is also used in our next to come push request...\n\nThe PR mentioned is [Fix shadow disappearing for Spot and Point Lights](https://github.com/jMonkeyEngine/jmonkeyengine/pull/218) which @shadowislord  and @Nehon has recognized to be more hack / workaround for an issue that shouldn't be there in the first place.\nIf so, the reason to keep recv shadow bucket in `RenderQueue` has vanished and there is no need to have both `lightReceivers` and `sceneReceivers` in the code.\nI think it deserves this simple code cleanup.\n\nExcept for code cleanup, the `setFlushQueues(boolean flushQueues)` was marked `@Deprecated` as there are no shadow buckets left now, so there is no need to take care about shadow queues flushing anymore.\n",
    "head_branch": "OptimizeSceneReceivers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 8c377787497bdbaa2949a55e9ba8c68b38ead6ef into 1616b08c5bbf552f62eb5b2719b648f4d55e7c7b"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66241188a14f302d393b2a51",
    "number": 222,
    "body": "Yeah, I just need to make sure that I can actually figure out one of\nthese pull request thingies I keep hearing about.\n\nMake sure to say \"howdy\"! :smile:   And then, just deny it or whatever.\nI'll try to figure out how to remove this if you guys can't.  <-- still\nlearning, me.\n\nSo ... hope hope hope.... LOL\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241189a14f302d393b2a52",
    "number": 220,
    "body": "At current state everything beside the ShaderNode test works. I added two simple tests to show that geometry shaders as well as the tessellation shader stage works.\n\nWould be good if someone looks over the changes, to give me an imput, what i should/could change. \n\nI would also like to mark a few Vertex+Fragment shader specific methods as deprecated, and in the the same time promote the generic versions like \n\"getShaderProgramLanguage(ShaderType.Vertex) instead of getVertexShaderLanguage()\"\n\nSo all in all this is still a 99% working WIP, but i would like to have some inputs before working completely in the wrong direction\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624118aa14f302d393b2a53",
    "number": 219,
    "body": "These are necessary if jme's bullet wrapper is used in a non Scenegraph enviroment,\nfor example a ES based server. As without this there is no clean way to get the values of these two variables.\n-> wheelspat being null in this case, normally the rotation and position is set to the Wheel Spatial.\n\nIn the case of a Scenegraphless Server it makes no sense to have a dummy spatial just for this, especially if all logic necessary already exist, and only the getters are missing.\n\nSigned-off-by: Kai Börnert kai-boernert@visiongamestudios.de\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624118ba14f302d393b2a54",
    "number": 218,
    "body": "After **Light culling** implementation there is a problem with shadow disappearing for `SpotLight` and `PointLight`. As documented in worthy @Nehon article: [3.1 Sneak peek : Light culling and Single pass lighting](http://jmonkeyengine.org/298849/3-1-sneak-peek-light-culling-and-single-pass-lighting/)\n\n> **Noteworthy**\n> Shadows now also use light culling. This means that shadow maps won’t be calculated for lights that are outside of the frustum. This can give a huge performance boost.\n\nThe shadow disappears when shadow caster geometry is inside light cone which does not reach the camera view frustum but its shadow is casted into the view. It happens very easy. Just make the shadow long enough and move the camera.\nIt is because the light radius (or range) is short enough not to reach the view frustum but the caster is close enough, so the shadow is casted.\n\nProposed fix in this pull request is conservative. It allows to cull shadows less aggressively through new `PointLight` or `SpotLight` setting public method `setShowCulledLightssShadows(boolean)` while default is the old behaviour.\n",
    "head_branch": "FixShadowCulling",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624118ca14f302d393b2a55",
    "number": 217,
    "body": "Fixed an issue where viewport sizes could be a pixel smaller in either\ndimension in certain situations.  This caused gaps to appear between\nadjacent viewports at certain resolutions.\nForum Reference:\n\nhttp://hub.jmonkeyengine.org/t/fix-for-rounding-errors-in-viewport-dimensions/31751\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624118da14f302d393b2a56",
    "number": 216,
    "body": "Fixed the exception occurring when using this serializer. More commented here:\n\nhttp://hub.jmonkeyengine.org/t/savableserializer-and-client-bufferunderflowexception/31774\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624118ea14f302d393b2a57",
    "number": 215,
    "body": "Currently the stats shown on pressing F5 include even the primitives used to render the stats themselves. While this is not incorrect, sometimes it can be confusing.\n\nF5 now cycles between three states: off, full, post not included.\n\nIn the last mode the stats shown are captured when the stats object starts rendering, which means the stats do not include the stats object itself.\n\nDepending on what are other viewports present in postFrame it may also skip some other primitives.\n\nIf you think changing the F5 for all applications is too drastic, I may adjust it so that it is done only when the application opts for it explicitely.\n",
    "head_branch": "StatsFix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624118fa14f302d393b2a58",
    "number": 213,
    "body": "This commit updates Nifty to version 1.4.1 and makes all\nthe necessary changes to the JME-Nifty integration to be\ncompatible with this version of Nifty (manily support of multiple\ntexture atlases in the batch renderer and some minor changes\nlike the removal of some *Null classes).\n\nMost User code should still be able to compile with this change.\n\nHowever, the NiftyJmeDisplay constructor that requires the\nwidth and height of the texture atlas has been deprecated in\nfavour of the newly added static factory methods:\nNiftyJmeDisplay.newNiftyJmeDisplay(). The new methods\nadd support for the Nifty BatchRenderConfiguration class that\nallow further configuration of some rendering details.\n\nThe testcase jme3test.niftygui.TestNiftyGui has been modified\nto use the new methods and seems to render fine for me.\n\nMost of Nifty 1.4.1 should be compatible with old versions of\nNifty. However some compile-time incompatibilities might\nexists to old 1.3.x code. Additionally some internal mechanism\nhave been modified with 1.4 so there might be additional runtime\nincompatibilities as well.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241190a14f302d393b2a59",
    "number": 211,
    "body": "Shadow rendering was using the flattened list of all scene geometries to check culling. This optimization traverses the scene hierarchy recursively from `rootNode` and tries to cull the whole `Node` whenever possible.\nWhen the scene is constructed carefully to take advantage of hierarchical culling the optimization is significant.\n\nThe optimization tries to maintain the jME `public interface`. Some shadow related `RenderManager` or `RenderQueue` members were marked `@Deprecated`, mainly the flattened lists of shadow occluders and receivers, which are no longer used.\n\nTwo deprecated renderers, `BasicShadowRenderer` and `PssmShadowRenderer` were updated too, as these would not work with flattened occluders and receivers missing.\n\nWe are not aware of any other dependencies to be addressed.\n",
    "head_branch": "optimizeRenderShadow",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241191a14f302d393b2a5a",
    "number": 208,
    "body": "This test case show the problem of rendering a compressed DDS texture array.\n\nInstead of showing two different textures side by side, the screen remains black because of the bug in the renderer. The textures are in the DXT5 .dds image format and loaded via the AssetLoader. \n",
    "head_branch": "compressed-dds-array-textures",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 799d8d9ef205df55e6eb84275f354f570cc0a099 into 407056278aa8f5eaa5fbccb41d850e0c91c081a2"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66241192a14f302d393b2a5b",
    "number": 202,
    "body": "In the Last significant change of updateLogicalState in 05c6986492166c549d928cc2b23dc4c5de289b54 the `Node.getUpdateList()` rebuilds the `updateList`, but only children are added, the rootNode never.\nThe fix is trivial.\n",
    "head_branch": "fixGetUpdateList",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241193a14f302d393b2a5c",
    "number": 201,
    "body": "This is only fix of trivial: Last significant change of updateLogicalState in 05c6986492166c549d928cc2b23dc4c5de289b54 has used both cycle and recursion inside `Node.invalidateUpdateList()`. So it has had quadratic complexity O(depth^2).\n",
    "head_branch": "invalidateUpdateListOptimization",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 12d45dedc09239b1b5614c2678a998b8d70538c1 into 8560b98aa0a8230f0bfe9add21e5af56d33da6a0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66241194a14f302d393b2a5d",
    "number": 200,
    "body": "by @tort32\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 718bb09db10ff3af5e1a422005d4af5dbf771834 into 30f8ff4b8109e968d10b7b11deb817d314191d5b"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241194a14f302d393b2a5e",
    "number": 197,
    "body": "`updateLogicalState` traverses the whole scene through recursion `child.updateLogicalState(tpf)`.\nTo recognize whether recursion is necessary, we can maintain child controls count inside `Node`'s subtree and when there are no controls, skip the `updateLogicalState`  recursion.\n",
    "head_branch": "updateLogicalStateOptimization",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241195a14f302d393b2a5f",
    "number": 196,
    "body": "`Node.collideWith` always traverses the whole scene through `child.collideWith(...)` recursion. \n\nThis optimization tries to avoid recursion when possible using boundingVolume test first.\n",
    "head_branch": "collideWithOptimization",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241196a14f302d393b2a60",
    "number": 195,
    "body": "`Node.updateGeometricState` always traverses the whole scene through `child.updateGeometricState()` recursion. Such traverse can be optimized to skip the recursion when there is no need to call `updateGeometricState()` on any child.\n\nThe `refreshFlags` were currently able to recognize transform or bound update necessity, but unable to say anything about possible LightList update need on any children.\n\nFor this reason the new refreshFlag `RF_CHILD_LIGHTLIST` was introduced and along with other flags used to skip the `Node.updateGeometricState` recursion whenever possible.\n",
    "head_branch": "updateGeometricStateOptimization",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge c19842c55f57b28c6ec23f95c12136ed1d50e090 into 41580062b8b4bed15597fe025c03dfde0ae6ac4b"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241197a14f302d393b2a61",
    "number": 194,
    "body": "Updated the wiki to include steps to import the project in Eclipse as an existing Java Project.\nAlso added steps to install Gradle to build the project from the command line.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241198a14f302d393b2a62",
    "number": 193,
    "body": "update\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66241199a14f302d393b2a63",
    "number": 192,
    "body": "update\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624119aa14f302d393b2a64",
    "number": 191,
    "body": "update\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624119ba14f302d393b2a65",
    "number": 187,
    "body": "As commented in: http://hub.jmonkeyengine.org/forum/topic/unable-to-import-3ds-max-models/#post-285056\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624119ca14f302d393b2a66",
    "number": 186,
    "body": "As commented in: http://hub.jmonkeyengine.org/forum/topic/unable-to-import-3ds-max-models/#post-285054\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624119da14f302d393b2a67",
    "number": 184,
    "body": "fix https://github.com/jMonkeyEngine/jmonkeyengine/issues/183\n\nready for review\n",
    "head_branch": "fix_fb_depth24stencil8",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4fdde38bc2aa6b4e1ba8f272ed3431439d58a46b into 84046018ba3d1fea7d51b70d489e1be48648e4dd"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6624119ea14f302d393b2a68",
    "number": 181,
    "body": "so it can be used with foreach statements.\nIt might be not a best practice to create iterator each frame, but it saves few lines when quickly prototyping things - and in any case, iterator cost is quite small and should never leave new generation.\n",
    "head_branch": "IterableGeometryList",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 9484f1f4b422eee819c75f6283c5092efc23223f into 90d62218ed7e2d37d1c3e6de9c48e787adb91ac7"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6624119fa14f302d393b2a69",
    "number": 180,
    "body": "https://github.com/jMonkeyEngine/jmonkeyengine/issues/179\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1ddb8c22dad725481186964973a3595a7f0b585d into f5f2fa360ca7c11bf3a5fb5eefe0662ff73cd196"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662411a0a14f302d393b2a6a",
    "number": 178,
    "body": "...coded normal instead of black screen.\n\nSame fix could done on 3.0. Do you want PR for 3.0 ?\n",
    "head_branch": "mrt_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662411a1a14f302d393b2a6b",
    "number": 174,
    "body": "Changes to JOGL canvas classes to fix stalled shutdown, as discussed on the jme forum: http://hub.jmonkeyengine.org/forum/topic/testcanvas-doesnt-shutdown-with-jogl-renderer/\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662411a2a14f302d393b2a6c",
    "number": 173,
    "body": "Fix exception when loading geometry with some polygons without uv, fix loading nodes\nwithout models (nested nodes).\n\n(I'm doing it because @tort32 is too lazy to commit changes :))\n\nOriginal forum topic: http://hub.jmonkeyengine.org/forum/topic/fbx-importer/\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1b43cb6d4a131ca918458f56c7c22d58cf1dfabb into 1f795a7485685a648c21a0959f1167be1f016984"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662411a3a14f302d393b2a6d",
    "number": 172,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662411a4a14f302d393b2a6e",
    "number": 171,
    "body": "Hello, this pull request adds the new visual editor for nifty-gui files. This is the result of the JME Soc project, also there is a detailed devblog about the implementation in (this)[http://hub.jmonkeyengine.org/forum/board/development/summer-of-code/] sub forum. In particular this pull requests contains new features such as : \n- A new palette\n- New visual editor with real time manipulation of elements\n- Templates for : A basic nifty-gui, an empty nifty-gui , empty style , control and button style.\n- Navigator to see the gui structure\n- Undo support\n- Copy&Paste actions\n- Save changes\n\nThe project contains all the classes needed to integrate the editor in SDK platform all the logic to edit nifty files resides inside nifty-editor project which this project depends.\nI hope this is details is enough! \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 41c40872037c042615e94c3e6662a9e564a6abd1 into 6e21b0527c1d129c656d14644c6ca49fae211d7c"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662411a5a14f302d393b2a6f",
    "number": 170,
    "body": "Adds a new method called depthLastTraversal() to Spatial and subclasses as an extension to depthFirstTraversal() and breathFirstTraversal().\n",
    "head_branch": "pre-order-traversal",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662411a6a14f302d393b2a70",
    "number": 169,
    "body": "Fix using AssetManager.loadModel() with fbx file causing to throw\nAssetLoadException.\nImplemented loading of new file format .fba - .fbx file with animation\nmapping.\n\nForum post: http://hub.jmonkeyengine.org/forum/topic/fbx-importer/page/2/#post-294574\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f28c31d8512a9c9bd5dbfff33f21b1874f40aebc into fb40a14de2bfaf396811da71c8eaf62d43a47a01"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662411a6a14f302d393b2a71",
    "number": 168,
    "body": "Return this after setting with fromIntARG && fromIntRGBA\n",
    "head_branch": "color_changes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662411a7a14f302d393b2a72",
    "number": 167,
    "body": "Forum topic: http://hub.jmonkeyengine.org/forum/topic/fbx-importer/ , see supported features here: http://hub.jmonkeyengine.org/forum/topic/fbx-importer/page/2/#post-294294\nMost work done by @tort32\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662411a8a14f302d393b2a73",
    "number": 165,
    "body": "- only add joint if current PhysicNode is BodyA of the joint\n  - => avoid logging warning\n  - => fix a previous bug in test about getBodyA when adding/removing BodyB\n- remove optimisation that by-pass routing made by add()/remove()\n",
    "head_branch": "wip_jbullet_update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 3c72c065ad4a2dbfcad6b0ea452eb8640513f208 into b7433b99f7aadabf8fed9e667edb3d513f942e76"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662411a9a14f302d393b2a74",
    "number": 163,
    "body": "This Pull Request adds a post processing filter that highlights objects in the scene.\nThe objects are highlighted by drawing a border around them.\nThe functionallity is simmilar to the glow effect. The scene is rendered using a specific 'Highlight' technique that is added to Lighting.j3md and Unshaded.j3md that renders only these objects that have to material property 'Highlighted' set to true.\nIn a post process, the shape edges are then extracted and drawn on the screen.\nThe edge color and thickness are customable.\n\nOther highlighting effects, such as drawing the object with flipped culling again, suffer from the fact that the outline may not be drawn complete. This issue is solved by this method. However, because the scene is rendered twice and the edges have to be detected, the performance decreases. If the edge thickness is very hight, this might be a problem.\n\nThe highlight filter also does not work when mutlisampling is enabled, for some unknown reason.\n\nHere are some screenshots from the test case:\n![nohighlight](https://cloud.githubusercontent.com/assets/1770337/3787952/767a6f32-1a45-11e4-8c86-965b27aae992.jpg)\n![highlight](https://cloud.githubusercontent.com/assets/1770337/3787953/7c4bd324-1a45-11e4-8ee2-438f0ed90680.jpg)\n",
    "head_branch": "highlight-filter",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662411aaa14f302d393b2a75",
    "number": 162,
    "body": "I changed a little thing in the PhysicsSpace as talked about in [this Thread](http://hub.jmonkeyengine.org/forum/topic/small-improvement-for-physicsspace/#post-293587).\n\nWhile I use git all the time, I'm new to pull requests, so tell me if I got something wrong. :)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662411aba14f302d393b2a76",
    "number": 161,
    "body": "The engine can load dds textures, but the SDK cannot display, open and edit them.\nHowever, I think that the dds texture format is one of the most important formats for textures, because it can be directly loaded into the GPU memory.\nTherefore, I've added support for these textures in the sdk.\n\nThese code changes come in four steps:\n1. Relax restrictions in the dds loader in the core engine\n2. Add libraries to load and store dds textures for the SDK\n3. Extend the module Texture-Editor\n4. Add a dialog that can convert textures\n\n<strong>1. Relax restrictions in the dds loader </strong>\nThe dds loader tests if the flag \"DDSCAPS_TEXTURE\" is set. However, there exists many vaild textures without these flags (valid because they can be loaded by the official dds loader). Especially the libraries in the next step create textures without that flag.\n\n<code>\ndiff --git a/jme3-core/src/plugins/java/com/jme3/texture/plugins/DDSLoader.java b/jme3-core/src/plugins/java/com/jme3/texture/plugins/DDSLoader.java\nindex 8ea46a7..8aa6749 100644\n--- a/jme3-core/src/plugins/java/com/jme3/texture/plugins/DDSLoader.java\n+++ b/jme3-core/src/plugins/java/com/jme3/texture/plugins/DDSLoader.java\n@@ -203,9 +203,10 @@ public class DDSLoader implements AssetLoader {\n         texture3D = false;\n\n```\n     if (!directx10) {\n```\n-            if (!is(caps1, DDSCAPS_TEXTURE)) {\n-                throw new IOException(\"File is not a texture\");\n-            }\n- ```\n        //ignore it, there exists many valid textures that have not this flag set\n  ```\n  \n  +//            if (!is(caps1, DDSCAPS_TEXTURE)) {\n  +//                throw new IOException(\"File is not a texture\");\n  +//            }\n  \n  ```\n       if (depth <= 0) {\n           depth = 1;\n  ```\n  \n  </code>\n\n<strong>2. Add libraries to load and store dds textures for the SDK</strong>\nI use the library https://code.google.com/p/java-dds/ for reading \nand https://github.com/Dahie/DDS-Utils for writing.\nThese libraries are a bit old and buggy, but the best I could find.\n\n<strong>3. Extend the module Texture-Editor</strong>\nIn this main step, the texture editor is extended, so that dds textures are recognized as textures and can be read and written.\n\n<strong>4. Add a dialog that can convert textures</strong>\nThe last step is an addon that allows to convert textures to a different format and also allows to compress the dds textures.\nThe SDK already support the texture compression tool, but it requires the tool from NVIDIA to be installed. This dialog has limited functionallity,\nbut it does not need additional executables. It is also directly integrated into the node structure.\n\nThis dialog looks like:\n![dds-converter](https://cloud.githubusercontent.com/assets/1770337/3776475/0f371334-1955-11e4-9d29-dc38ff393289.jpg)\n",
    "head_branch": "extended-dds-support",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662411aca14f302d393b2a77",
    "number": 160,
    "body": "",
    "head_branch": "meshutil",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662411ada14f302d393b2a78",
    "number": 158,
    "body": "Noticed that terrain painting didn't working correctly, because the clamp method wasn't exactly doing what it was supposed to do (or anything at all).\n",
    "head_branch": "colorRGBA-bugfix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge dacaaa547704560487966bf9fea1e59ef283e5bf into e76e770d17df382d7014a1a467fc9ba18c7ff7b7"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662411aea14f302d393b2a79",
    "number": 156,
    "body": "Hi,\n\njust a tiny fix. I think this was caused by some copy&past work ;)\n\nCheers,\n\nChristian\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662411afa14f302d393b2a7a",
    "number": 155,
    "body": "This was causing an infinite cycle of java.awt.HeadlessException in case handleError was called in an environment without display.\n\nIn applications with a headless context, the error dialog will now be skipped.\n",
    "head_branch": "bug/handleerrorheadless",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662411b0a14f302d393b2a7b",
    "number": 154,
    "body": "Parallel version of generate can speed up generation according to number of cores in best case.\nprocessTriangle now uses temp vars instead of allocation, which gives around 30% speedup in Sponza testcase I was running. Entire methods seems modified, but this is because of indent change - actual modification is just few lines at the start and tmp.release at the end.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662411b1a14f302d393b2a7c",
    "number": 153,
    "body": "The less intrusive fix, it introduce a better symmetrie between open/close scene . A better fix require a \"refactor\" in the way to chain actions between job/AWT/jME thread => discussion before.\n",
    "head_branch": "fix_152",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge cbffd34b0843dbb6f77037c4f88905e994c5845a into 1ff0035e37c464c1acbefccdc7ae9af091074a08"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662411b2a14f302d393b2a7d",
    "number": 151,
    "body": "NewGeometry, hope to fix missing dependencies to jdesktop.bindings\n",
    "head_branch": "sdk_scene_addprimitives",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 506c1ded99e3e6939e3ead2ad7ed49e9b97b64d1 into 359e9d2d64b274877ca01a56ad00bc77ab7c5d83"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662411b3a14f302d393b2a7e",
    "number": 150,
    "body": "Apply change discuss on previous PR #149  and forum about\n",
    "head_branch": "sdk_scene_addprimitives",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ffad8344dca0cb069dc7d8ad7ede4390a3ad1c41 into 4d39fc86aa078334b2677915ef15881614f960ce"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662411b4a14f302d393b2a7f",
    "number": 149,
    "body": "I copy some code form Vector3fPropertiesEditor into ConverterVector3f_String.java\n\ndiscussion at : [SceneExplorer: Commands to add Primitives Shapes](http://hub.jmonkeyengine.org/forum/topic/sceneexplorer-commands-to-add-primitives-shapes/)\n",
    "head_branch": "sdk_scene_addprimitives",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ed06161f49202f4b2551594b77bea8e73fadcbac into a166e8cb17c44e7606522afad56f3853384e9b17"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662411b4a14f302d393b2a80",
    "number": 148,
    "body": "There is a bug in RGB10_A2 format for lwjgl implementation - it was specified as RBG instead of RGBA texture. It was causing GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT when trying to use it with MRT.\n\nThere might be same problem in other renderers (? jogl, android, ios), I do not compile these projects, so cannot check/fix there - please take a look.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 6adb15abd602cb3c9621eacfb168e21edad4feee into 648477e8c28b451d0cbd29d1f4e6e2c187fe89eb"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662411b5a14f302d393b2a81",
    "number": 147,
    "body": "Added support for enabling GL_SCISSOR_TEST and defining the dimensions of the scissor rectangle by using Material's getAdditionalRenderState(). Forum thread: http://hub.jmonkeyengine.org/forum/topic/enabling-and-specifying-scissoring-via-renderstate/\n\nRendererContext now includes renderStateClipRectEnabled along side clipRectEnabled. I also have replaced clipX/clipY/clipW/clipH with a ClipRectangle object and added several new ClipRectangle objects. Their purpose is as follows:\n\ncurrentClipRect - Contains the dimensions of the clip rectangle currently set with glScissor(). Updates are compared against this to check if a glScissor() call is necessary.\nrendererClipRect - Contains the dimensions of the clip rectangle from the last call of setClipRect(). In the event that clipRectEnabled is true and renderStateClipRectEnabled is false currentClipRect should be logically equivalent to this.\nrenderStateClipRect - Contains the dimensions of the clip rectangle from the last call of applyRenderState assuming that Material.setClipTest() and Material.setClipRect() were true. In the event that clipRectEnabled is false and renderStateClipRectEnabled is true currentClipRect should be logically equivalent to this.\nintersectionClipRect - Contains the dimensions of the clip rectangle that is the intersection of both clip rectangles set by setClipRect() and applyRenderState(). In the event that both clipRectEnabled and renderStateClipRectEnabled are true currentClipRect should be logically equivalent to this if the intersection is valid, otherwise it is zeroed.\n\nSome changes to setClipRect() and clearClipRect() were required with the intention that it functions as a master switch. setClipRect() will always result in GL_SCISSOR_TEST being enabled and glScissor/currentClipRect being set to the values entered. clearClipRect() will always result in GL_SCISSOR_TEST being disabled.\n",
    "head_branch": "scissorrenderstate",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662411b6a14f302d393b2a82",
    "number": 146,
    "body": "- merge play an pause Physics buttons in a singleToggleButton\n- add a debug ToggleButton to display physics' bodies\n",
    "head_branch": "sdk_scenecomposer_debugphysics",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662411b7a14f302d393b2a83",
    "number": 145,
    "body": "It's possible if the class of the control is not found (may be deleted).\n\nIn SDK with this modification, the exception about ClassNotFound is \"notify\"\nbut it no longer raise a NPE (on clone()) and the j3o can be open and edited\nwithout the missing Control.\n\n```\nSEVERE [com.jme3.export.binary.BinaryImporter]: Exception\njava.lang.ClassNotFoundException: vdrones.NewControl\n    at java.net.URLClassLoader$1.run(URLClassLoader.java:372)\n    at java.net.URLClassLoader$1.run(URLClassLoader.java:361)\n    at java.security.AccessController.doPrivileged(Native Method)\n    at java.net.URLClassLoader.findClass(URLClassLoader.java:360)\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:424)\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:357)\n    at com.jme3.export.SavableClassUtil.fromName(SavableClassUtil.java:195)\n[catch] at com.jme3.export.binary.BinaryImporter.readObject(BinaryImporter.java:333)\n    at com.jme3.export.binary.BinaryInputCapsule.resolveIDs(BinaryInputCapsule.java:483)\n    at com.jme3.export.binary.BinaryInputCapsule.readSavableArray(BinaryInputCapsule.java:471)\n    at com.jme3.export.binary.BinaryInputCapsule.readSavableArrayList(BinaryInputCapsule.java:587)\n    at com.jme3.scene.Spatial.read(Spatial.java:1333)\n    at com.jme3.scene.Node.read(Node.java:608)\n    at com.jme3.export.binary.BinaryImporter.readObject(BinaryImporter.java:344)\n    at com.jme3.export.binary.BinaryInputCapsule.resolveIDs(BinaryInputCapsule.java:483)\n    at com.jme3.export.binary.BinaryInputCapsule.readSavableArray(BinaryInputCapsule.java:471)\n    at com.jme3.export.binary.BinaryInputCapsule.readSavableArrayList(BinaryInputCapsule.java:587)\n    at com.jme3.scene.Node.read(Node.java:598)\n    at com.jme3.export.binary.BinaryImporter.readObject(BinaryImporter.java:344)\n    at com.jme3.export.binary.BinaryImporter.load(BinaryImporter.java:242)\n    at com.jme3.export.binary.BinaryImporter.load(BinaryImporter.java:125)\n    at com.jme3.export.binary.BinaryImporter.load(BinaryImporter.java:109)\n    at com.jme3.asset.DesktopAssetManager.loadAsset(DesktopAssetManager.java:288)\n    at com.jme3.asset.DesktopAssetManager.loadModel(DesktopAssetManager.java:374)\n    at com.jme3.gde.core.assets.SpatialAssetDataObject.loadAsset(SpatialAssetDataObject.java:94)\n    at com.jme3.gde.scenecomposer.OpenSceneComposer$1.run(OpenSceneComposer.java:38)\n    at java.lang.Thread.run(Thread.java:745)\nSEVERE [org.openide.util.Exceptions]\njava.lang.NullPointerException\n    at com.jme3.scene.Spatial.clone(Spatial.java:1188)\n    at com.jme3.scene.Node.clone(Node.java:564)\n    at com.jme3.scene.Node.clone(Node.java:60)\n    at com.jme3.scene.Spatial.clone(Spatial.java:1173)\n    at com.jme3.scene.Node.clone(Node.java:564)\n    at com.jme3.scene.Node.clone(Node.java:60)\n    at com.jme3.scene.Spatial.clone(Spatial.java:1218)\n    at com.jme3.scene.Spatial.clone(Spatial.java:66)\n    at com.jme3.asset.CloneableAssetProcessor.createClone(CloneableAssetProcessor.java:48)\n    at com.jme3.asset.DesktopAssetManager.loadAsset(DesktopAssetManager.java:327)\n    at com.jme3.asset.DesktopAssetManager.loadModel(DesktopAssetManager.java:374)\n[catch] at com.jme3.gde.core.assets.SpatialAssetDataObject.loadAsset(SpatialAssetDataObject.java:94)\n    at com.jme3.gde.scenecomposer.OpenSceneComposer$1.run(OpenSceneComposer.java:38)\n    at java.lang.Thread.run(Thread.java:745)\n```\n",
    "head_branch": "fix_spatial_load_with_removed_control",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662411b8a14f302d393b2a84",
    "number": 144,
    "body": "bug description at  http://hub.jmonkeyengine.org/forum/topic/scenecomposer-cant-add-control-to-linked-model/\n",
    "head_branch": "fix_sdk_addControlToLink",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 932245d10b994758cdbf9f065cef4e88c9756424 into 846960c28c66757adb745acdfeff85930d4900c5"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662411b9a14f302d393b2a85",
    "number": 143,
    "body": "",
    "head_branch": "fix_npe",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 2f248d15df7de96bff0cb0dd80e823b53b027304 into 16beac352f7fc5455ba1c4ec7a211eab3b655e14"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662411baa14f302d393b2a86",
    "number": 142,
    "body": "fix JmeGenericControl to display initial value of Property and inherited Property (grouped by class)\nsheet.set of superclasses are hidden by default.\n\nfix both issues discuss at http://hub.jmonkeyengine.org/forum/topic/scenecomposer-custom-controls-properties-wrongly-initialized-in-property-panel/\n",
    "head_branch": "wip_sdk_properties_control",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 95bbbefb6fcd9f69fcefa4e3ac5f4752a298e70b into a6b24c91ea0bf93588cba0f308e6c93527a33aa5"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662411bba14f302d393b2a87",
    "number": 141,
    "body": "provide general pattern instead of explicit directory list.\nI'm not sur about 'release/' directory so I keep as is.\n",
    "head_branch": "wip_scenecomposer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662411bca14f302d393b2a88",
    "number": 140,
    "body": "Instead of just choosing between emitting all particles, or some over a period of time, this new method allows you to immediately emit a certain number of particles.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662411bda14f302d393b2a89",
    "number": 137,
    "body": ".... http://hub.jmonkeyengine.org/forum/topic/fix-for-using-different-shadowrendererspoint-directional-spot-together/\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662411bea14f302d393b2a8a",
    "number": 132,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1919bac082a049f96000f9b3e849ed5c543b3579 into a2855c1cf0fae57f239c6eacc9a0b61831dee950"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662411bfa14f302d393b2a8b",
    "number": 131,
    "body": "",
    "head_branch": "color_rgba",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662411c0a14f302d393b2a8c",
    "number": 130,
    "body": "This should be tested thoroughly in case it breaks something.\n\nI did the following;\nhttps://help.github.com/articles/dealing-with-line-endings\n\n```\ngit rm --cached -r .\n# Remove everything from the index.\n\ngit reset --hard\n# Write both the index and working directory from Git's database.\n\ngit add .\n# Prepare to make a commit by staging all the files that will get normalized.\n# This is your chance to inspect which files were never normalized. You should\n# get lots of messages like: \"warning: CRLF will be replaced by LF in file.\"\n\ngit commit -m \"Normalize all the line endings\"\n# Commit\n```\n",
    "head_branch": "eol_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662411c1a14f302d393b2a8d",
    "number": 129,
    "body": "Fixed bug when setting MinFilter with mipmapping after generating mipmaps causes jME to update image data every frame.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662411c2a14f302d393b2a8e",
    "number": 128,
    "body": "Fixed TextureUtil to properly handle mipmapped texture 2d arrays and 3d textures\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662411c3a14f302d393b2a8f",
    "number": 126,
    "body": "Before an eventual pull, the screen blending mode must be implemented in all the other renderers. I can do that if you think this is a good idea.\n",
    "head_branch": "screen_blendmode",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662411c3a14f302d393b2a90",
    "number": 125,
    "body": "http://hub.jmonkeyengine.org/forum/topic/proposed-fix-for-issue91-github-issue580google-code-monitor-gpu-memory/\n",
    "head_branch": "issue#91",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662411c4a14f302d393b2a91",
    "number": 124,
    "body": "Turns out the imporved  error dialog was less helpful than the old one...\n",
    "head_branch": "fix_better_error_dialog",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 2b8cdbb34ce70fbc8bdf49b8f567e427c4038cce into 1b3c2e4436b3a85f2d210b20dfd20ba3378abb80"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662411c6a14f302d393b2a92",
    "number": 123,
    "body": "I have taken the time to refactor the ScreenshotAppState and made the system more extendable.\n\nKey changes:\n- Split out the SceneProcessor from the AppState.\n- Separate the writeToFile aspect from the SceneProcessor, what happens to the screenshot after it is taken is now pluggable.\n- The file writing has support for custom naming schemes.\n\nThis is still a bit WIP, but please give me your thoughts.\n\n I will squash this when it is cooked =)\n",
    "head_branch": "refactor_screenshots",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662411c6a14f302d393b2a93",
    "number": 119,
    "body": "This is a simple replacement for the JOptionPane showing error messages right now.. on OSX you cannot copy text from a JOptionPane which makes it cumbersome to file error reports.\n\n![skarmavbild 2014-04-01 kl 17 26 35](https://cloud.githubusercontent.com/assets/891566/2580867/4cc31c46-b9b2-11e3-8286-bf5c7248368a.png)\n",
    "head_branch": "better_error_dialog",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 57adc00909ff21d42e77659b8a986ba1d37ef185 into 7c8fa29b26296d451a8d8f7701aca3face8a3744"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662411c7a14f302d393b2a94",
    "number": 118,
    "body": "Fixed compile error, due to catching an not existing exception in the updnetwork code of spidermonkey, preventing the gradle build from finishing.\n\nAlso I accidentially normalized the code to follow java conventions.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662411c8a14f302d393b2a95",
    "number": 117,
    "body": "http://hub.jmonkeyengine.org/forum/topic/proposed-fix-for-issue85-end-demo-app-when-window-is-closed/\n\nFixes #85 \n",
    "head_branch": "issue#85",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  }
]