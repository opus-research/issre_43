[
  {
    "_id": "661fc2fc44ee515ce6a4aa5d",
    "number": 2942,
    "body": "Make sure you have checked all steps below.\n\n### Prerequisite\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\n* [ ] My PR addresses the following pyenv issue (if any)\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\n\n### Description\n- [ ] Here are some details about my PR\n\n### Tests\n- [ ] My PR adds the following unit tests (if any)\n",
    "head_branch": "cpython-3.13.0a6",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.13.0a6 (#2942)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc2fc44ee515ce6a4aa5e",
    "number": 2941,
    "body": "Make sure you have checked all steps below.\n\n### Prerequisite\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\n* [ ] My PR addresses the following pyenv issue (if any)\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\n\n### Description\n- [ ] Here are some details about my PR\n\n### Tests\n- [ ] My PR adds the following unit tests (if any)\n",
    "head_branch": "cpython-3.12.3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.12.3 (#2941)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc2fd44ee515ce6a4aa5f",
    "number": 2939,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2937\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\nSubj\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\nN/A",
    "head_branch": "anaconda_2024.02",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add anaconda 2024.02 (#2939)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc2fe44ee515ce6a4aa60",
    "number": 2938,
    "body": "Make sure you have checked all steps below.\n\n### Prerequisite\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\n* [ ] My PR addresses the following pyenv issue (if any)\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\n\n### Description\n- [ ] Here are some details about my PR\n\n### Tests\n- [ ] My PR adds the following unit tests (if any)\n",
    "head_branch": "cpython-3.11.9",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.11.9 (#2938)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc2ff44ee515ce6a4aa61",
    "number": 2936,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "jython-2.7.3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Jython 2.7.3 (#2936)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc30044ee515ce6a4aa62",
    "number": 2930,
    "body": "Make sure you have checked all steps below.\n\n### Prerequisite\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\n* [ ] My PR addresses the following pyenv issue (if any)\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\n\n### Description\n- [ ] Here are some details about my PR\n\n### Tests\n- [ ] My PR adds the following unit tests (if any)\n",
    "head_branch": "cpython-3.10.14",
    "is_a_fork": true,
    "comments": [
      "Thank you! Sorry for the delay, Github does not send notifications when a PR is marked ready for review, [something that was requested long ago](https://github.com/orgs/community/discussions/22826).",
      "> Thank you! Sorry for the delay, Github does not send notifications when a PR is marked ready for review, [something that was requested long ago](https://github.com/orgs/community/discussions/22826).\r\n\r\nNo need to apologize, thanks for merging!"
    ],
    "commit_messages": [
      "Add CPython 3.10.14 (#2930)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc30044ee515ce6a4aa63",
    "number": 2929,
    "body": "Make sure you have checked all steps below.\n\n### Prerequisite\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\n* [ ] My PR addresses the following pyenv issue (if any)\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\n\n### Description\n- [ ] Here are some details about my PR\n\n### Tests\n- [ ] My PR adds the following unit tests (if any)\n",
    "head_branch": "cpython-3.8.19-3.9.19",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.8.19 and 3.9.19 (#2929)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc30144ee515ce6a4aa64",
    "number": 2928,
    "body": "Update GraalPy to the newly released version 24.0.0: https://github.com/oracle/graalpython/releases/tag/graal-24.0.0\r\n\r\nCC @timfel ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add GraalPy 24.0.0 (#2928)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc30244ee515ce6a4aa65",
    "number": 2927,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2926\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\nAdds PACKAGE_LDFLAGS to be able to pass LDFLAGS separately to readline and python\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "package-ldflags",
    "is_a_fork": true,
    "comments": [
      "> We can probably test this in the same test that tests `PACKAGE_CFLAGS`.\r\n\r\n...And my memory fails me here, too: there is no such test.\r\nThere is however `\"yaml is installed for python\"` in `build.bats` which simulates a build of a dependency package and shows its build flags -- this can be taken as a base.\r\n\r\n---\r\n\r\nIt's also worth documenting the new envvar.",
      "Superseded by https://github.com/pyenv/pyenv/pull/3130"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc30344ee515ce6a4aa66",
    "number": 2924,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n\r\nhttps://www.python.org/downloads/release/python-3130a5/\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "cpython-3.13.0a5",
    "is_a_fork": true,
    "comments": [
      "Is there any known issue with macOS like what was discovered with alpha 4 in #2903?",
      "Looks like it builds well.  After checking out this PR's branch:\r\n```\r\n% pyenv install 3.13.0a5\r\npython-build: use openssl@3 from homebrew\r\npython-build: use readline from homebrew\r\nDownloading Python-3.13.0a5.tar.xz...\r\n-> https://www.python.org/ftp/python/3.13.0/Python-3.13.0a5.tar.xz\r\nInstalling Python-3.13.0a5...\r\npython-build: use tcl-tk from homebrew\r\npython-build: use readline from homebrew\r\npython-build: use ncurses from homebrew\r\npython-build: use zlib from xcode sdk\r\nInstalled Python-3.13.0a5 to /usr/local/pyenv/pyenv/versions/3.13.0a5\r\n\r\n% /usr/local/pyenv/pyenv/versions/3.13.0a5/bin/python3\r\nPython 3.13.0a5 (main, Mar 15 2024, 09:30:16) [Clang 15.0.0 (clang-1500.3.9.4)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>>\r\n```"
    ],
    "commit_messages": [
      "Add CPython 3.13.0a5 (#2924)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc30444ee515ce6a4aa67",
    "number": 2922,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\nremove repetitive words \r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Wow... I wonder what we can even use to test the change! 2.5 definitely isn't compatible with current compilers. The change looks innocent but I'd like to try just for the challenge.\r\nLooks like MacOS 10.3 supports 2.5.",
      "Succeeded in MacOS 10.13.6 VM. Many extensions failed to build but ctypes (which is the module that uses `libffi`) built and tests passed."
    ],
    "commit_messages": [
      "minor grammar fix in libffi backport patch in 2.5.x (#2922)\n\nSigned-off-by: cuinix <915115094@qq.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc30544ee515ce6a4aa68",
    "number": 2916,
    "body": "### Description\r\nAdded instructions on how to setup pyenv with nushell on MacOS, Linux, and Windows.\r\n\r\nFor the moment this instruction are also found here:\r\nhttps://www.nushell.sh/book/configuration.html#pyenv",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc30644ee515ce6a4aa69",
    "number": 2915,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "miniconda3-24.1.2-0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add miniconda3-24.1.2-0 support for py312、py311、py310、py39 (#2915)\n\nCo-authored-by: binbjz <binbjz@skiff.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc30744ee515ce6a4aa6a",
    "number": 2911,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - N/A\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nDocument non-default build configuration settings that we apply\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\nN/A",
    "head_branch": "document_build_configuration",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Document default build configuration customizations (#2911)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc30744ee515ce6a4aa6b",
    "number": 2909,
    "body": "I used `add_miniforge.py` to generate definitions files for missed versions released over the past year.\r\n\r\nIn addition, I realized that the script had some problems pulling all versions, so I adjusted the code accordingly.\r\n\r\nI tested this by successfully installing and running `miniforge3-23.11.0-0` on x86_64 macOS.",
    "head_branch": "update-miniforge-2024-02-26",
    "is_a_fork": true,
    "comments": [
      "I'm not entirely sure what is causing the failures. All of them were caused by `403` errors in conda packages being pulled, but when I checked <https://conda.anaconda.org/conda-forge/osx-64/libev-4.33-haf1e3a3_1.tar.bz2>, which caused the failure in [macos_build (mambaforge-22.11.1-2, macos-12)](https://github.com/pyenv/pyenv/actions/runs/8057336828/job/22008241123?pr=2909#logs), I got a `200` status.\r\n\r\nI suspect we hit a rate limit or some other sort of network-related problem. Can you rerun just the tests that failed?",
      "Did a rerun, same problem.\r\nLooks like the same problem as https://github.com/conda/conda/issues/11638",
      "Tested at home and got the same errors.\r\nThe failed versions (22.11.1-0 through 22.11.1-2) are clearly unusable as of now.\r\n\r\nReported to https://github.com/conda/infrastructure/issues/882",
      "> I suggest we commit this without the broken versions and re-add them when they're fixed.\r\n> \r\n> Is this okay for you?\r\n\r\nWorks for me!\r\n\r\nI find this problem very weird, though. I ran `./plugins/python-build/bin/python-build mambaforge-22.11.1-2 versions/mambaforge-22.11.1-2` and it failed, but I was able to `curl -I https://conda.anaconda.org/conda-forge/osx-64/c-ares-1.18.1-h0d85af4_0.tar.bz2` the failing URL without issue."
    ],
    "commit_messages": [
      "Merge pull request #2909 from aphedges/update-miniforge-2024-02-26\n\nAdd new miniforge and mambaforge definitions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc30844ee515ce6a4aa6c",
    "number": 2908,
    "body": "When running `eval \"$(pyenv init -)\"` to initialize `pyenv`, the command generates a shell script to be executed. When not using the `fish` shell, this script contains a `case` statement where the first case matches against the output of `pyenv-commands --sh` and the second case handles everything else. However, if no commands are returned, then the matching expression will be only `)`, which is invalid Bash.\r\n\r\nI have solved this by only including the first case if there are commands to match. The resulting `case` statement will have only a single, default case, which is somewhat silly, but I wanted to minimize the variation across runs of `pyenv init -`. To catch any regressions, I have added a test to catch unexpected changes in the generated `case` statement.\r\n\r\nI do not know if `pyenv-commands --sh` can ever return nothing under normal conditions, but it happened to me due to completely unrelated problems in underlying Unix utilities called by `pyenv`. Although this bug will rarely occur, I feel that this increased robustness will be useful.\r\n\r\n---\r\n\r\nFeel free to edit the commit message as needed, but I would appreciate if you kept most of it. I sometimes find it useful to grep the Git logs when developing.\r\n\r\nThis bug might also exist in the generated `fish` script, but I know nothing about the `fish` shell. [`case`](https://fishshell.com/docs/current/cmds/case.html) doesn't explain what happens when no pattern is provided.",
    "head_branch": "handle-no-commands",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Handle case where `pyenv-commands --sh` returns nothing (#2908)\n\nIn exceptional cases (custom installation, malfunctions elsewhere), `pyenv-commands --sh` may return nothing.\r\nIn non-Fish, this would cause \"syntax error near unexpected token `)'\" in `pyenv()`.\r\n\r\nBash does not allow to specify a `case` option that would never match.\r\nThis works around it by defaulting to `/`. Commands, being filenames, can never match it.\r\nIn Fish, nothing needs to be done: it apparently does interpret a `case` without argument as one that never matches."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc30944ee515ce6a4aa6d",
    "number": 2906,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2892\r\n  - Closes https://github.com/pyenv/pyenv/issues/2881\r\n  - Closes https://github.com/pyenv/pyenv/issues/2823\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nPractice has shown that users who install Pyenv via Homebrew in Linux want to use dependencies from there, too, despite the drawbacks.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n\r\nTests for the new behavior and envvars",
    "head_branch": "use_linuxbrew_if_preferred",
    "is_a_fork": true,
    "comments": [
      "@native-api I seem to still be running into build issues when using `brew install pyenv --head` on WSL 2. `Ubuntu 20.04 using python-build 20180424`. Let me know how I can help debug this!\r\n\r\n```\r\n/tmp/python-build.20240227215323.186663 ~/courses\r\nCloning into 'python-pyenv-doctor'...\r\nwarning: --depth is ignored in local clones; use file:// instead.\r\ndone.\r\n/tmp/python-build.20240227215323.186663/python-pyenv-doctor /tmp/python-build.20240227215323.186663 ~/courses\r\nconfigure: WARNING: unrecognized options: --enable-shared, --with-tcltk-libs, --with-tcltk-includes\r\nchecking for gcc... gcc\r\nchecking whether the C compiler works... yes\r\nchecking for C compiler default output file name... a.out\r\nchecking for suffix of executables... \r\nchecking whether we are cross compiling... no\r\nchecking for suffix of object files... o\r\nchecking whether we are using the GNU C compiler... yes\r\nchecking whether gcc accepts -g... yes\r\nchecking for gcc option to accept ISO C89... none needed\r\nchecking for rl_gnu_readline_p in -lreadline... no\r\nconfigure: error: GNU readline is not installed.\r\n```\r\n\r\n\r\nhttps://www.loom.com/share/3c30f56950424a05bb2f25d1123d5609?sid=48d3ae51-f718-42ee-8f01-e816d28d5539",
      "sorry about this, I don't know what was wrong, but using Oh My Zsh now solved my issues. I used `curl https://pyenv.run | bash` so I can't confirm if the homebrew changes worked. thanks!"
    ],
    "commit_messages": [
      "Merge pull request #2906 from native-api/use_linuxbrew_if_preferred\n\nUse Homebrew in Linux if Pyenv is installled with Homebrew"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc30a44ee515ce6a4aa6e",
    "number": 2903,
    "body": "3.13.0a3 -> 3.13.0a4\r\n",
    "head_branch": "3.13.0a4",
    "is_a_fork": true,
    "comments": [
      "The MacOS build fails. Looks like `python` is looking for `libpython` at a wrong prefix. Is this a known issue?",
      "This seems to be an upstream issue:\r\n\r\n```\r\n2024-02-16T08:17:42.5537610Z dyld: Library not loaded: /lib/libpython3.13.dylib\r\n2024-02-16T08:17:42.5566900Z   Referenced from: /Users/runner/work/pyenv/pyenv/versions/3.13.0a4/bin/python3.13\r\n2024-02-16T08:17:42.5610750Z   Reason: image not found\r\n```\r\n(earlier)\r\n```\r\n2024-02-16T08:16:56.0094360Z clang -dynamiclib <...> -Wl,-rpath,/Users/runner/work/pyenv/pyenv/versions/3.13.0a4/lib <...> -Wl,-install_name,/lib/libpython3.13.dylib <...> -o libpython3.13.dylib <...>\r\n```\r\nthe argument before `/lib` is Makefile var `PYTHONFRAMEWORKINSTALLNAMEPREFIX` which is only set for a framework build.",
      "This shouldn't have been merged if it doesn't build. Yes, it's an upstream issue, but now there isn't a way to get a 3.13 alpha on Mac.  Have you reported the bug upstream?",
      "The logic was, it's a prerelease, more so, an alpha, so you can expect issues and the need to work them out.",
      "Yes, except now Mac users cannot work them out.  There's no version that is buildable.  This error can be reported to CPython, and leave the PR unmerged.  Then CPython can fix the build errors with a4, while Mac users can continue to try out a3.  Or is someone else working on the build issue with a4?",
      "Okay, [reverted](https://github.com/pyenv/pyenv/commit/f9a2bb81b69bc2fc45753f7da5d246bc2706f01d). Fair enough.",
      "Thanks, sorry to be pushy about it.. <3",
      "[Upstream report](https://github.com/python/cpython/issues/115737).",
      "[Candidate fix](https://github.com/python/cpython/pull/115750)"
    ],
    "commit_messages": [
      "Add CPython 3.13.0a4 (#2903)\n\nCo-authored-by: Edgar Ramírez Mondragón <16805946+edgarrmondragon@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc30b44ee515ce6a4aa6f",
    "number": 2899,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n\r\nhttps://www.python.org/downloads/release/python-3122/",
    "head_branch": "cpython-3.12.2",
    "is_a_fork": true,
    "comments": [
      "Is there a reason to use openssl 3.1.2 and not the latest 3.1.5?",
      "> Is there a reason to use openssl 3.1.2 and not the latest 3.1.5?\r\n\r\nNot really, just copy-pasted from 3.12.1. I think pyenv only uses 3.1.2 if your system doesn't have a valid openssl, though. Probably wouldn't hurt to bump all the way to 3.2.1: be25ce43"
    ],
    "commit_messages": [
      "Add CPython 3.12.2 (#2899)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc30b44ee515ce6a4aa70",
    "number": 2898,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n\r\n\r\nhttps://www.python.org/downloads/release/python-3118/",
    "head_branch": "cpython-3.11.8",
    "is_a_fork": true,
    "comments": [
      "Gentlest of bumps here @native-api, hoping to land this in to address some CVEs.",
      "> Gentlest of bumps here @native-api, hoping to land this in to address some CVEs.\r\n\r\nYou can bump it all the way.\r\nAs the code says, these versions are only used in MacOS if only the system-provided, unusable by Python OpenSSL is present.",
      "@native-api thanks for merging 🙏 , looks like CI finished, any chance we could get a release today as well?",
      "> @native-api thanks for merging 🙏 , looks like CI finished, any chance we could get a release today as well?\r\n\r\nCC @anton-petrov "
    ],
    "commit_messages": [
      "Add CPython 3.11.8 (#2898)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc30c44ee515ce6a4aa71",
    "number": 2887,
    "body": "\r\n\r\nThe checksum for `https://downloads.python.org/pypy/pypy3.9-v7.3.13-macos_x86_64.tar.bz2` should be updated\r\n\r\n```\r\ncurl -O https://downloads.python.org/pypy/pypy3.9-v7.3.13-macos_x86_64.tar.bz2\r\nshasum  -a 256 pypy3.9-v7.3.13-macos_x86_64.tar.bz2\r\n180802aa0122d4a05ec480bf3130c78591ba88fdde25d8e65a92d4a798b318a3  pypy3.9-v7.3.13-macos_x86_64.tar.bz2\r\n```\r\n\r\nThe https://www.pypy.org/checksums.html says also\r\n```\r\n18ad7c9cb91c5e8ef9d40442b2fd1f6392ae113794c5b6b7d3a45e04f19edec6  pypy3.9-v7.3.15-macos_x86_64.tar.bz2\r\n```\r\n\r\nbut pyenv is expecting `fb1ff67340353e837498102fec2b0b45744bb189dced57ee2e00045785e69662`\r\n\r\n\r\n\r\n---\r\n\r\n\r\nToo many issues will kill our team's development velocity, drastically.\r\nMake sure you have checked all steps below.\r\n\r\n\r\n\r\n\r\n### Prerequisite\r\n* [x] Make sure your problem is not listed in [the common build problems](https://github.com/pyenv/pyenv/wiki/Common-build-problems).\r\n* [x] Make sure no duplicated issue has already been reported in [the pyenv issues](https://github.com/pyenv/pyenv/issues). You should look for closed issues, too.\r\n* [x] Make sure you are not asking us to help solving your specific issue.\r\n  * GitHub issues is opened mainly for development purposes. If you want to ask someone to help solving your problem, go to some community site like [Gitter](https://gitter.im/yyuu/pyenv), [StackOverflow](https://stackoverflow.com/questions/tagged/pyenv), etc.\r\n* [x] Make sure your problem is not derived from packaging (e.g. [Homebrew](https://brew.sh)).\r\n  * Please refer to the package documentation for the installation issues, etc.\r\n* [ x Make sure your problem is not derived from plugins.\r\n  * This repository is maintaining `pyenv` and the default `python-build` plugin only. Please refrain from reporting issues of other plugins here.\r\n\r\n### Description\r\n- [x] Platform information: macOS Sonoma 14.2.1\r\n- [x] OS architecture (e.g. amd64): amd64\r\n- [x] pyenv version: 2.3.35\r\n- [ ] Python version:\r\n- [ ] C Compiler information (e.g. gcc 7.3): \r\n- [x] Please attach the debug trace of the failing command as a gist:\r\n  * https://gist.github.com/ecerulm/13fadcc47491907f557831d12eb861c5\r\n\r\n- [ ] If you have a problem with installing Python, please also attach `config.log` from the build directory\r\n  * The build directory is reported after the \"BUILD FAILED\" message and is usually under `/tmp`.\r\n- [ ] If the build succeeds but the problem is still with the build process (e.g. the resulting Python is missing a feature), please attach\r\n  * the debug trace from reinstalling the faulty version with `env PYENV_DEBUG=1 pyenv install -f -k -v <version> 2>&1 | tee trace.log`\r\n  * `config.log` from the build directory. When using `pyenv install` with `-k` as per above, the build directory will be under `$PYENV_ROOT/sources`.\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "@native-api , I see that you merged a similar issue https://github.com/pyenv/pyenv/pull/2208 some time ago, so maybe you can look into this one too? ",
      "Since the CI passed on 7.3.13, the releases must've been reuploaded upstream.\r\nThis is definitely not a copy-paste issue from a previous script."
    ],
    "commit_messages": [
      "Update pypy3.9-7.3.13 checksums\n\nReleases have been reuploaded upstream"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc30d44ee515ce6a4aa72",
    "number": 2886,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n\r\nAdds PyPy v7.3.15, released 2024-01-15.\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "pypy-7.3.15",
    "is_a_fork": true,
    "comments": [
      "Blocked by full resolution of https://github.com/pypy/pypy/issues/4861",
      "It seems there is some caching of the pypy source tarball downloads? The files at https://downloads.python.org/pypy/ have the new checksums. But thinking a bit more: why is pyenv downloading a source tarball? Shouldn't it prefer a precompiled binary?",
      "> It seems there is some caching of the pypy source tarball downloads? The files at https://downloads.python.org/pypy/ have the new checksums. But thinking a bit more: why is pyenv downloading a source tarball? Shouldn't it prefer a precompiled binary?\r\n\r\nI couldn't find the rationale and I don't personally install the src tarball variants, but I found when it was first added: https://github.com/pyenv/pyenv/commit/b77ae3e0b505f2184b8f85334158c0ecb5c3e30e",
      "We provide both precompiled and source versions for PyPy."
    ],
    "commit_messages": [
      "Add PyPy v7.3.15 (#2886)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc30e44ee515ce6a4aa73",
    "number": 2885,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n\r\nAdds CPython [3.13.0a3](https://www.python.org/downloads/release/python-3130a3/), released Jan. 17, 2024.\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "cpython-3.13.0a3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.13.0a3 (#2885)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc30f44ee515ce6a4aa74",
    "number": 2884,
    "body": "Add newly released version of GraalPy\r\n\r\nCC @timfel ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add graalpy-23.1.2 (#2884)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc30f44ee515ce6a4aa75",
    "number": 2876,
    "body": "added pypy 7.3.14 release",
    "head_branch": "pypy-7.3.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added PyPy 7.3.14 (#2876)\n\nCo-authored-by: Dan Dees <dand@appsmiths.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc31044ee515ce6a4aa76",
    "number": 2874,
    "body": "This code block was missing the nice \"copy\" icon that proper code-blocks get:\r\n\r\n![pyenv readme screenshot](https://github.com/pyenv/pyenv/assets/465045/0612a2fc-625d-498a-9f15-660b97d72690)\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make \"Automatic installer\" command a copy-able code block (#2874)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc31144ee515ce6a4aa77",
    "number": 2870,
    "body": "….9、py3.8\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "miniconda3_23.11.0-1_23.11.0-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add support for miniconda3 23.11.0-1, 23.11.0-2 with py3.11, py3.10, py3.9, py3.8 (#2870)\n\nCo-authored-by: binbjz <bin.zhao@naxions.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc31244ee515ce6a4aa78",
    "number": 2869,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "> Please also review the test failures\r\n\r\nThese failures seem unrelated to the current PR",
      "> > Please also review the test failures\r\n> \r\n> These failures seem unrelated to the current PR\r\n\r\n`not ok 66 passthrough CFLAGS_EXTRA to micropython compiler` is definitely related",
      "I adjusted the code. Version 1.9.x requires make axtls, while later versions do not require it.",
      "Looks like axtls cannot build in MacOS because it's using a Linux-specific function: https://github.com/pfalcon/axtls/issues/1\r\nNot sure if we should place a warning. Let's leave it as is, if there are complaints, we can add a warning.",
      "Thank you for resolving the Micropython issue!"
    ],
    "commit_messages": [
      "Add micropython 1.20.0 and 1.21.0 (#2869)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc31344ee515ce6a4aa79",
    "number": 2865,
    "body": "Currently, only the Homebrew prefix is added to the output of python-config --ldflags. Correct the output by prepending the search path of the corresponding Python prefix.\r\n\r\nTested with Python 3.13-dev and 2.7.18 on Apple silicon.\r\n\r\nCloses https://github.com/pyenv/pyenv/issues/2845",
    "head_branch": "pyconf_path_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add installation prefix to `python-config --ldflags` output (#2865)\n\nNeeded to link against libpython of the Pyenv-controlled installation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc31344ee515ce6a4aa7a",
    "number": 2864,
    "body": "Bumps the github-actions group with 1 update: [actions/checkout](https://github.com/actions/checkout).\n\nUpdates `actions/checkout` from 3 to 4\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/checkout/releases\">actions/checkout's releases</a>.</em></p>\n<blockquote>\n<h2>v4.0.0</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Update default runtime to node20 by <a href=\"https://github.com/takost\"><code>@​takost</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/1436\">actions/checkout#1436</a></li>\n<li>Support fetching without the --progress option by <a href=\"https://github.com/simonbaird\"><code>@​simonbaird</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/1067\">actions/checkout#1067</a></li>\n<li>Release 4.0.0 by <a href=\"https://github.com/takost\"><code>@​takost</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/1447\">actions/checkout#1447</a></li>\n</ul>\n<h2>New Contributors</h2>\n<ul>\n<li><a href=\"https://github.com/takost\"><code>@​takost</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/checkout/pull/1436\">actions/checkout#1436</a></li>\n<li><a href=\"https://github.com/simonbaird\"><code>@​simonbaird</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/checkout/pull/1067\">actions/checkout#1067</a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/actions/checkout/compare/v3...v4.0.0\">https://github.com/actions/checkout/compare/v3...v4.0.0</a></p>\n<h2>v3.6.0</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Mark test scripts with Bash'isms to be run via Bash by <a href=\"https://github.com/dscho\"><code>@​dscho</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/1377\">actions/checkout#1377</a></li>\n<li>Add option to fetch tags even if fetch-depth &gt; 0 by <a href=\"https://github.com/RobertWieczoreck\"><code>@​RobertWieczoreck</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/579\">actions/checkout#579</a></li>\n<li>Release 3.6.0 by <a href=\"https://github.com/luketomlinson\"><code>@​luketomlinson</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/1437\">actions/checkout#1437</a></li>\n</ul>\n<h2>New Contributors</h2>\n<ul>\n<li><a href=\"https://github.com/RobertWieczoreck\"><code>@​RobertWieczoreck</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/checkout/pull/579\">actions/checkout#579</a></li>\n<li><a href=\"https://github.com/luketomlinson\"><code>@​luketomlinson</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/checkout/pull/1437\">actions/checkout#1437</a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/actions/checkout/compare/v3.5.3...v3.6.0\">https://github.com/actions/checkout/compare/v3.5.3...v3.6.0</a></p>\n<h2>v3.5.3</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Fix: Checkout Issue in self hosted runner due to faulty submodule check-ins by <a href=\"https://github.com/megamanics\"><code>@​megamanics</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/1196\">actions/checkout#1196</a></li>\n<li>Fix typos found by codespell by <a href=\"https://github.com/DimitriPapadopoulos\"><code>@​DimitriPapadopoulos</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/1287\">actions/checkout#1287</a></li>\n<li>Add support for sparse checkouts by <a href=\"https://github.com/dscho\"><code>@​dscho</code></a> and <a href=\"https://github.com/dfdez\"><code>@​dfdez</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/1369\">actions/checkout#1369</a></li>\n<li>Release v3.5.3 by <a href=\"https://github.com/TingluoHuang\"><code>@​TingluoHuang</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/1376\">actions/checkout#1376</a></li>\n</ul>\n<h2>New Contributors</h2>\n<ul>\n<li><a href=\"https://github.com/megamanics\"><code>@​megamanics</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/checkout/pull/1196\">actions/checkout#1196</a></li>\n<li><a href=\"https://github.com/DimitriPapadopoulos\"><code>@​DimitriPapadopoulos</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/checkout/pull/1287\">actions/checkout#1287</a></li>\n<li><a href=\"https://github.com/dfdez\"><code>@​dfdez</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/checkout/pull/1369\">actions/checkout#1369</a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/actions/checkout/compare/v3...v3.5.3\">https://github.com/actions/checkout/compare/v3...v3.5.3</a></p>\n<h2>v3.5.2</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Fix: Use correct API url / endpoint in GHES by <a href=\"https://github.com/fhammerl\"><code>@​fhammerl</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/1289\">actions/checkout#1289</a> based on <a href=\"https://redirect.github.com/actions/checkout/issues/1286\">#1286</a> by <a href=\"https://github.com/1newsr\"><code>@​1newsr</code></a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/actions/checkout/compare/v3.5.1...v3.5.2\">https://github.com/actions/checkout/compare/v3.5.1...v3.5.2</a></p>\n<h2>v3.5.1</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Improve checkout performance on Windows runners by upgrading <code>@​actions/github</code> dependency by <a href=\"https://github.com/BrettDong\"><code>@​BrettDong</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/1246\">actions/checkout#1246</a></li>\n</ul>\n<h2>New Contributors</h2>\n<ul>\n<li><a href=\"https://github.com/BrettDong\"><code>@​BrettDong</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/checkout/pull/1246\">actions/checkout#1246</a></li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/checkout/blob/main/CHANGELOG.md\">actions/checkout's changelog</a>.</em></p>\n<blockquote>\n<h1>Changelog</h1>\n<h2>v4.1.0</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1396\">Add support for partial checkout filters</a></li>\n</ul>\n<h2>v4.0.0</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1067\">Support fetching without the --progress option</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1436\">Update to node20</a></li>\n</ul>\n<h2>v3.6.0</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1377\">Fix: Mark test scripts with Bash'isms to be run via Bash</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/579\">Add option to fetch tags even if fetch-depth &gt; 0</a></li>\n</ul>\n<h2>v3.5.3</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1196\">Fix: Checkout fail in self-hosted runners when faulty submodule are checked-in</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1287\">Fix typos found by codespell</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1369\">Add support for sparse checkouts</a></li>\n</ul>\n<h2>v3.5.2</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1289\">Fix api endpoint for GHES</a></li>\n</ul>\n<h2>v3.5.1</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1246\">Fix slow checkout on Windows</a></li>\n</ul>\n<h2>v3.5.0</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1237\">Add new public key for known_hosts</a></li>\n</ul>\n<h2>v3.4.0</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1209\">Upgrade codeql actions to v2</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1210\">Upgrade dependencies</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1225\">Upgrade <code>@​actions/io</code></a></li>\n</ul>\n<h2>v3.3.0</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1045\">Implement branch list using callbacks from exec function</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1050\">Add in explicit reference to private checkout options</a></li>\n<li>[Fix comment typos (that got added in <a href=\"https://redirect.github.com/actions/checkout/issues/770\">#770</a>)](<a href=\"https://redirect.github.com/actions/checkout/pull/1057\">actions/checkout#1057</a>)</li>\n</ul>\n<h2>v3.2.0</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/942\">Add GitHub Action to perform release</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/967\">Fix status badge</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1002\">Replace datadog/squid with ubuntu/squid Docker image</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/964\">Wrap pipeline commands for submoduleForeach in quotes</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1029\">Update <code>@​actions/io</code> to 1.1.2</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1039\">Upgrading version to 3.2.0</a></li>\n</ul>\n<h2>v3.1.0</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/939\">Use <code>@​actions/core</code> <code>saveState</code> and <code>getState</code></a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/922\">Add <code>github-server-url</code> input</a></li>\n</ul>\n<h2>v3.0.2</h2>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/checkout/commit/b4ffde65f46336ab88eb53be808477a3936bae11\"><code>b4ffde6</code></a> Link to release page from what's new section (<a href=\"https://redirect.github.com/actions/checkout/issues/1514\">#1514</a>)</li>\n<li><a href=\"https://github.com/actions/checkout/commit/8530928916aaef40f59e6f221989ccb31f5759e7\"><code>8530928</code></a> Correct link to GitHub Docs (<a href=\"https://redirect.github.com/actions/checkout/issues/1511\">#1511</a>)</li>\n<li><a href=\"https://github.com/actions/checkout/commit/7cdaf2fbc075e6f3b9ca94cfd6cec5adc8a75622\"><code>7cdaf2f</code></a> Update CODEOWNERS to Launch team (<a href=\"https://redirect.github.com/actions/checkout/issues/1510\">#1510</a>)</li>\n<li><a href=\"https://github.com/actions/checkout/commit/8ade135a41bc03ea155e62e844d188df1ea18608\"><code>8ade135</code></a> Prepare 4.1.0 release (<a href=\"https://redirect.github.com/actions/checkout/issues/1496\">#1496</a>)</li>\n<li><a href=\"https://github.com/actions/checkout/commit/c533a0a4cfc4962971818edcfac47a2899e69799\"><code>c533a0a</code></a> Add support for partial checkout filters (<a href=\"https://redirect.github.com/actions/checkout/issues/1396\">#1396</a>)</li>\n<li><a href=\"https://github.com/actions/checkout/commit/72f2cec99f417b1a1c5e2e88945068983b7965f9\"><code>72f2cec</code></a> Update README.md for V4 (<a href=\"https://redirect.github.com/actions/checkout/issues/1452\">#1452</a>)</li>\n<li><a href=\"https://github.com/actions/checkout/commit/3df4ab11eba7bda6032a0b82a6bb43b11571feac\"><code>3df4ab1</code></a> Release 4.0.0 (<a href=\"https://redirect.github.com/actions/checkout/issues/1447\">#1447</a>)</li>\n<li><a href=\"https://github.com/actions/checkout/commit/8b5e8b768746b50394015010d25e690bfab9dfbc\"><code>8b5e8b7</code></a> Support fetching without the --progress option (<a href=\"https://redirect.github.com/actions/checkout/issues/1067\">#1067</a>)</li>\n<li><a href=\"https://github.com/actions/checkout/commit/97a652b80035363df47baee5031ec8670b8878ac\"><code>97a652b</code></a> Update default runtime to node20 (<a href=\"https://redirect.github.com/actions/checkout/issues/1436\">#1436</a>)</li>\n<li>See full diff in <a href=\"https://github.com/actions/checkout/compare/v3...v4\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/checkout&package-manager=github_actions&previous-version=3&new-version=4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore <dependency name> major version` will close this group update PR and stop Dependabot creating any more for the specific dependency's major version (unless you unignore this specific dependency's major version or upgrade to it yourself)\n- `@dependabot ignore <dependency name> minor version` will close this group update PR and stop Dependabot creating any more for the specific dependency's minor version (unless you unignore this specific dependency's minor version or upgrade to it yourself)\n- `@dependabot ignore <dependency name>` will close this group update PR and stop Dependabot creating any more for the specific dependency (unless you unignore this specific dependency or upgrade to it yourself)\n- `@dependabot unignore <dependency name>` will remove all of the ignore conditions of the specified dependency\n- `@dependabot unignore <dependency name> <ignore condition>` will remove the ignore condition of the specified dependency and ignore conditions\n\n\n</details>",
    "head_branch": "dependabot/github_actions/github-actions-8a9da2b879",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Bump the github-actions group with 1 update (#2864)\n\nBumps the github-actions group with 1 update: [actions/checkout](https://github.com/actions/checkout).\r\n\r\n- [Release notes](https://github.com/actions/checkout/releases)\r\n- [Changelog](https://github.com/actions/checkout/blob/main/CHANGELOG.md)\r\n- [Commits](https://github.com/actions/checkout/compare/v3...v4)\r\n\r\n---\r\nupdated-dependencies:\r\n- dependency-name: actions/checkout\r\n  dependency-type: direct:production\r\n  update-type: version-update:semver-major\r\n  dependency-group: github-actions\r\n...\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc31444ee515ce6a4aa7b",
    "number": 2863,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [n/a] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [n/a] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [n/a] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n\r\nWhile browsing action runs in the repo I noticed that some of the action versions are out-of-date (for example, `actions/checkout@v3`, used in `macos_build.yml`, is now at `v4`).\r\n\r\nThis PR introduces a Dependabot config that will submit PRs (if needed) to keep action versions up-to-date. If this change is accepted and merges, you can expect Dependabot to immediately submit a PR to update `actions/checkout` to `v4`, together with any other actions that can be updated to new versions.\r\n\r\n> ## Note: \r\n>\r\n> `lee-dohm/no-response` is throwing Node version deprecation warnings ([example](https://github.com/pyenv/pyenv/actions/runs/7174017131)); the action appears to be unmaintained.\r\n>\r\n> It may be that `actions/stale` could be used as a replacement.\r\n\r\nThanks for your work on pyenv! :heart: \r\n\r\n### Tests\r\n- [n/a] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "add-dependabot-for-github-actions",
    "is_a_fork": true,
    "comments": [
      "Checked https://docs.github.com/en/code-security/getting-started/dependabot-quickstart-guide . This look useful.\r\nIt's not clear how much automated it is -- e.g. if it autogenerates PRs itself -- but I guess we'll see.\r\nLet's try it out!",
      "Okay, [it does create PRs itself](https://github.com/pyenv/pyenv/pull/2864)!",
      "Thank you, that's one less thing to think about! :+1: ",
      "You're welcome!"
    ],
    "commit_messages": [
      "Add a Dependabot config to auto-update GitHub action versions (#2863)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc31544ee515ce6a4aa7c",
    "number": 2861,
    "body": "Make sure you have checked all steps below.\n\n### Prerequisite\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\n* [ ] My PR addresses the following pyenv issue (if any)\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\n\n### Description\n- [ ] Here are some details about my PR\n\n### Tests\n- [ ] My PR adds the following unit tests (if any)\n",
    "head_branch": "cpython-3.12.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2861 from edgarrmondragon/cpython-3.12.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc31644ee515ce6a4aa7d",
    "number": 2860,
    "body": "Make sure you have checked all steps below.\n\n### Prerequisite\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\n* [ ] My PR addresses the following pyenv issue (if any)\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\n\n### Description\n- [ ] Here are some details about my PR\n\n### Tests\n- [ ] My PR adds the following unit tests (if any)\n",
    "head_branch": "cpython-3.11.7",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2860 from edgarrmondragon/cpython-3.11.7\n\nAdd CPython 3.11.7"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc31744ee515ce6a4aa7e",
    "number": 2858,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2856\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nAs per https://docs.python.org/3.11/whatsnew/3.11.html#notable-changes-in-3-11-5, OpenSSL 3.0 support in CPython is finally official since 3.11.5.\r\n\r\nThis is also a workaround due to Arm64 Homebrew build of OpenSSL 1.1 being defective: linking to it fails with:\r\n```\r\n*** WARNING: renaming \"_ssl\" since importing it failed: dlopen(<...>/_ssl.cpython-311-darwin.so, 0x0002): symbol not found in flat namespace '_SSL_get_peer_certificate'\r\n*** WARNING: renaming \"_hashlib\" since importing it failed: dlopen(<...>/_hashlib.cpython-311-darwin.so, 0x0002): symbol not found in flat namespace '_EVP_MD_block_size'\r\n```\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\nN/A",
    "head_branch": "openssl_3_official",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Move 3.11.5+ to OpenSSL 3 by default (#2858)\n\nAs per https://docs.python.org/3.11/whatsnew/3.11.html#notable-changes-in-3-11-5,\r\nOpenSSL 3.0 support in CPython is finally official since 3.11.5."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc31744ee515ce6a4aa7f",
    "number": 2855,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2854\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nUsing the same name as graalpy causes a cache clash.\r\n\r\nSo if a user\r\n* has enabled cache\r\n* and checksum checking is disabled/unavailable\r\n* and they install graalpy-community and graalpy\r\n=> graalpy-community will be installed instead of graalpy\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\nN/A",
    "head_branch": "graalpy-community-package-name",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix graalpy-community to use a separate package name (#2855)\n\nUsing the same name as graalpy causes a cache clash"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc31844ee515ce6a4aa80",
    "number": 2853,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Partially addesses https://github.com/pyenv/pyenv/issues/2852\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nDocumenting undocumented envvars. We've suggested them to users a number of time already\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\nN/A",
    "head_branch": "document_envvars",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "python-build: Document PYTHON_BUILD_HOMEBREW_OPENSSL_FORMULA and PYTHON_BUILD_HTTP_CLIENT (#2853)\n\ngrammar"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc31944ee515ce6a4aa81",
    "number": 2849,
    "body": "Make sure you have checked all steps below.\n\n### Prerequisite\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\n* [ ] My PR addresses the following pyenv issue (if any)\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\n\n### Description\n- [ ] Here are some details about my PR\n\n### Tests\n- [ ] My PR adds the following unit tests (if any)\n",
    "head_branch": "cpython-3.13.0a2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2849 from edgarrmondragon/cpython-3.13.0a2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc31a44ee515ce6a4aa82",
    "number": 2844,
    "body": "…niconda3-3.8-23.10.0-1\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Add support for miniconda3 23.10.0-1 with py3.10、py3.9、py3.8\r\n\r\n### Tests\r\n- [x] I have been tested locally and have passed the installation test.\r\n",
    "head_branch": "miniconda-bin",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2844 from binbjz/miniconda-bin"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc31b44ee515ce6a4aa83",
    "number": 2843,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Add support for miniconda3-3.11-23.10.0-1\r\n\r\n### Tests\r\n- [x] I have been tested locally and have passed the installation test\r\n",
    "head_branch": "new-miniconda",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2843 from binbjz/new-miniconda"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc31c44ee515ce6a4aa84",
    "number": 2839,
    "body": "### Description\r\nVersion Bump of miniforge to latest release\r\n\r\n### Tests\r\nTested by installing locally\r\n",
    "head_branch": "miniforge3-23.3.1-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2839 from goerz-forks/miniforge3-23.3.1-1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc31c44ee515ce6a4aa85",
    "number": 2838,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  N/A\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nAllows to pipe `pyenv init` output directly into starup scripts\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\nN/A",
    "head_branch": "pyenv-init-executable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make `pyenv init` output insertable to startup files (#2838)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc31d44ee515ce6a4aa86",
    "number": 2837,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2821\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nFixes breakage in WSL with Pyenv-win installed in the host system; doesn't affect other supported installation scenarios.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\nN/A",
    "head_branch": "bin-no-path",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make adding $PYENV_ROOT/bin to PATH independent of other software (#2837)\n\nFixes breakage in WSL with Pyenv-win installed in the host system;\r\ndoesn't affect other supported installation scenarios."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc31e44ee515ce6a4aa87",
    "number": 2832,
    "body": "(Closes: #2831)\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [X] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2831\r\n\r\n### Description\r\n- [X] Here are some details about my PR\r\n\r\nI looked into describing more of the undocumented options in `libexec/pyenv-init` but my conclusions were speculative. If you would like for me to put those speculations into a separate PR, let me know and I'll go ahead.\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Describe --no-rehash option in the manpage (#2832)\n\n(Closes: #2831)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc31f44ee515ce6a4aa88",
    "number": 2824,
    "body": "I used `add_miniconda.py` to generate definitions files for anaconda `2023.09` and miniconda `23.9.0`.\r\n\r\nIn addition, I realized that `add_miniconda.py` was not properly determining the Python versions properly for recent releases of Anaconda, so I adjusted the code accordingly.",
    "head_branch": "update-miniconda-2023-10-21",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2824 from aphedges/update-miniconda-2023-10-21"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc32044ee515ce6a4aa89",
    "number": 2820,
    "body": "Correct the path for `tcl-tk` `include` for homebrew\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2794\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\nhttps://github.com/pyenv/pyenv/issues/2794#issuecomment-1763182002\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n```\r\npyenv install 2.7.18\r\npython -m Tkinter\r\n```",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "This still links 2.7.18 against 8.5 . [As I said, 2.7.18's Tkinter build is bugged](https://github.com/pyenv/pyenv/issues/2794#issuecomment-1727580772), it appends rather than prepends the required directory to the compiler search path -- so it doesn't pick the intended version when other directories or the compiler search path also have it.\r\n\r\nLooks like to work around that, we'd need to include the mode to configure Tcl/Tk via `CPPFLAGS`/`LDFLAGS` rather than through `--with-tcltk-*`.\r\n\r\n---\r\n\r\nHowever.\r\n\r\nI've looked through the history... and we seem to have never done this before! So, configuring 2.7 with Homebrew's Tcl/Tk never worked (at least since the time Xode SDK had it bundled)! I was suspecting that this worked before and then we broke it -- then this would be a bugfix.\r\nBut it's not. This'll be a new feature.\r\n\r\nAnd because 2.7 is EOL, adding new features just for it would be against our [Deprecation policy](https://github.com/pyenv/pyenv/blob/master/CONTRIBUTING.md#deprecation-policy).\r\n\r\n---\r\n\r\nSo I suggest that we should rather make a patch for 2.7.18 that would properly prepend the dirs to the compiler's search paths.",
      "> And because 2.7 is EOL, adding new features just for it would be against our [Deprecation policy](https://github.com/pyenv/pyenv/blob/master/CONTRIBUTING.md#deprecation-policy).\r\n\r\nThat said, PyPy-2.7 is NOT EOL -- so if this feature applies to it as well, it's fine to add.",
      "> This still links 2.7.18 against 8.5\r\n\r\nTrue, but at least it is not borked. Interestingly if I hardcode it like this:\r\n```\r\npackage_option python configure --with-tcltk-includes=\"-I$tcltk_libdir/include/tcl-tk\"\r\n```\r\nit links `2.7.18` against `8.6`, but if I do conditional setup like this:\r\n```\r\nif [ -d \"$tcltk_libdir/include/tcl-tk\" ]; then\r\n   package_option python configure --with-tcltk-includes=\"-I$tcltk_libdir/include/tcl-tk\"\r\nfi\r\npackage_option python configure --with-tcltk-includes=\"-I$tcltk_libdir/include\"\t\r\n```\r\nIt links against `8.5`. Go figure...",
      "> Looks like to work around that, we'd need to include the mode to configure Tcl/Tk via `CPPFLAGS`/`LDFLAGS` rather than through `--with-tcltk-*`.\r\n\r\nIsn't it better to rely on `pkg-config` and include it in the `brew` requirement? At least it would use relative paths.",
      "Wow! I don't know how but it works.\r\n\r\n```\r\n% find ~/.pyenv/versions/2.7.18 -name _tkinter\\* | xargs otool -L\r\n/Users/admin/.pyenv/versions/2.7.18/lib/python2.7/lib-dynload/_tkinter.so:\r\n\t/usr/local/opt/tcl-tk/lib/libtcl8.6.dylib (compatibility version 8.6.0, current version 8.6.13)\r\n\t/usr/local/opt/tcl-tk/lib/libtk8.6.dylib (compatibility version 8.6.0, current version 8.6.13)\r\n\t/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1319.0.0)\r\n```",
      "Thanks to you, too! Way to prove me wrong!"
    ],
    "commit_messages": [
      "Fix linking against Homebrew's Tcl/Tk 8.6.13 in MacOS (#2820)\n\nHeaders have been moved to the 'tcl-tk' subdir\r\nThis was causing Tcl/Tk 8.5 from XCode SDK to be silently picked instead"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc32044ee515ce6a4aa8a",
    "number": 2818,
    "body": "Make sure you have checked all steps below.\n\n### Prerequisite\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\n* [ ] My PR addresses the following pyenv issue (if any)\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\n\n### Description\n- [ ] Here are some details about my PR\n\n### Tests\n- [ ] My PR adds the following unit tests (if any)\n",
    "head_branch": "cpython-3.13.0a1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.13.0a1 (#2818)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc32144ee515ce6a4aa8b",
    "number": 2817,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Addresses https://github.com/pyenv/pyenv/actions/runs/6427697835/job/17453756085\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nRead all stdin in the `sort` stub.\r\nIn other places, use the newly-discovered way to fix \"broken pipe\" with `head`.\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "fix_broken_pipe",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix intermittent \"broken pipe\" in version sort test (#2817)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc32244ee515ce6a4aa8c",
    "number": 2814,
    "body": "Make sure you have checked all steps below.\n\n### Prerequisite\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\n* [ ] My PR addresses the following pyenv issue (if any)\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\n\n### Description\n- [ ] Here are some details about my PR\n\n### Tests\n- [ ] My PR adds the following unit tests (if any)\n",
    "head_branch": "pypy-7.3.13",
    "is_a_fork": true,
    "comments": [
      "I just saw #2807, which has the same failures for 2.7"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc32344ee515ce6a4aa8d",
    "number": 2813,
    "body": "XCode Command Line Tools 15.0 was recently released, and it contains a broken version of ncurses 6.0. Some uses of Python's `curses` module will segfault when compiled with it. The solution is to switch to using the version of ncurses from Homebrew, which is currently 6.4. Support for ncurses 6 was added to Python 3.7 and was backported to 3.6 and 2.7, so this change should not break any recently supported Python versions.\r\n\r\nI tested this commit with Python 3.12, 3.11, and 2.7, and all tests in the `test.test_curses` module passed without issue.\r\n\r\nSee https://github.com/python/cpython/issues/109617 and https://github.com/python/cpython/issues/69906 for more information.\r\n\r\n---\r\n\r\nFeel free to edit the commit message as needed, but would you consider keeping more of it than in #2768? It's sometimes useful to grep the Git logs when developing.",
    "head_branch": "use-homebrew-ncurses",
    "is_a_fork": true,
    "comments": [
      "I'd appreciate some help with these test failures. They don't seem to be related to my change, and I can't reproduce them locally on my macOS 13 machine.",
      "The failures, at least the ones with `unstub`, are related to the changes because they change the number of calls to `uname`. You need to adjust the number of `stub uname` calls in the corresponding tests.",
      "Will also need a test for the added functionality. There are tests for other lib searches which you can use as a base.",
      "Thank you very much! I figured out how to reproduce these errors, and increasing the number of calls to `uname` fixed some of the failures. I'll have the tests fixed and new tests added later this week.",
      "@native-api, I've fixed the broken tests and added a new one.",
      "Thanks for merging!",
      "Note that it's not that Xcode \"contains a broken version\". What is broken is the heuristic CPython uses to support multiple curses/ncurses versions. More details here https://github.com/python/cpython/issues/109617#issuecomment-1753468166"
    ],
    "commit_messages": [
      "Install ncurses from Homebrew, if available (#2813)\n\nXCode Command Line Tools 15.0 was recently released, and it contains a\r\nbroken version of ncurses 6.0. Some uses of Python's `curses` module\r\nwill segfault when compiled with it. The solution is to switch to using\r\nthe version of ncurses from Homebrew, which is currently 6.4. Support\r\nfor ncurses 6 was added to Python 3.7 and was backported to 3.6 and 2.7,\r\nso this change should not break any recently supported Python versions.\r\n\r\nTested with Python 3.12, 3.11, and 2.7, and all tests in\r\nthe `test.test_curses` module pass without issue.\r\n\r\nSee https://github.com/python/cpython/issues/109617 and\r\nhttps://github.com/python/cpython/issues/69906 for more information."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc32444ee515ce6a4aa8e",
    "number": 2812,
    "body": "#### Summary (from the commit message)\r\n\r\n* Use the new Oracle GraalVM distribution to provide the best user experience,\r\n  as it significantly faster than GraalVM CE and is free for development and production use:\r\n  https://medium.com/graalvm/whats-new-in-graalvm-languages-161527df3d76\r\n\r\n### Description\r\n\r\nHello,\r\n\r\nI would like to give the best experience to GraalPy users, and Oracle GraalVM provides that through being faster and more efficient (also in memory used).\r\n\r\nI see that this has been briefly discussed in https://github.com/pyenv/pyenv/pull/2796 before but I would like to continue the discussion, in this PR.\r\nThe concern raised there by @native-api is:\r\n> IMO we cannot provide non-OSS flavors in the core codebase. At the very least, because we can't help users solve problems with them -- which they will come here with.\r\n\r\nI believe that at least the part about `because we can't help users solve problems with them` can be solved.\r\nWhen a pyenv/python-build user reports a problem, either:\r\n* It is a bug in python-build, and then it is very likely that if the bug happens with `graalpy` it would happen with `graalpy-community` too. So then it can be reproduced with `graalpy-community`. `graalpy` from an installer POV is very similar to `graalpy-community`, the difference is mainly in the JIT and optimizations, not in the file layout or so. Bugs from the JIT or extra optimizations are unlikely to be reported as python-build issues (i.e., they would happen at runtime not install time).\r\n* It is a bug in the Python being installed, i.e., in GraalPy. It makes most sense to ask to report such bugs to [the GraalPy bug tracker](https://github.com/oracle/graalpython/issues).\r\n* If the bug happens with `graalpy` but not with `graalpy-community` I think it makes sense to either tag @msimacek or @timfel or [report a GraalPy issue](https://github.com/oracle/graalpython/issues). Also I would expect most of these bugs can be investigated without needing the sources of Oracle GraalVM, in fact I don't expect any python-build maintainer to have to look at the sources of even GraalPy, if they do I think it's time to file a GraalPy issue.\r\n* It could of course also be a bug in the user dev environment, and the same reasoning as above applies (e.g. likely to happen on `graalpy-community` too otherwise mention/file a GraalPy issue).\r\n\r\nIf there are other concerns, let's discuss them here.\r\n\r\nRegarding OSS, GraalPy itself is [open-source](https://github.com/oracle/graalpython). As said in https://github.com/pyenv/pyenv/pull/2796:\r\n> The difference in the versions is mostly performance, as _Oracle GraalPy_ features more compiler optimizations. The python runtime is identical with the exception of two modules, `struct` and `pickle` that have optimized versions in _Oracle GraalPy_.\r\n\r\nFor background I am a maintainer of ruby-build, setup-ruby and I contributed TruffleRuby (= Ruby on GraalVM) support to all 3 Ruby installers and switchers, so I think I understand fairly well the concerns with language installers in general and with users reporting issues to installers instead of to implementations of the language.\r\nIn `ruby-build` this was mostly solved by moving such \"it does not work on my machine\" to discussions instead of issues, done through [issue templates](https://github.com/rbenv/ruby-build/issues/new/choose). That avoids spamming the maintainers of the installer with issues which are in large majority not a bug of the installer (but either of that implementation or broken user dev environment).\r\n\r\nI see that pyenv uses [a checklist in issues](https://github.com/pyenv/pyenv/blob/master/.github/ISSUE_TEMPLATE.md#prerequisite) for a similar purpose, that's great.\r\nI think adding this item could help address the concern above:\r\n* [x] If the problem happens with `graalpy`, try with `graalpy-community`, if it only happens with `graalpy` and not `graalpy-community` report it [here](https://github.com/oracle/graalpython/issues) instead.\r\n\r\nThis could even be generalized to:\r\n* [x] If the problem happens with an alternative Python implementation (i.e., not CPython) and does not happen with CPython (check this), report it to that Python implementation instead, because then it is most likely a bug of that Python implementation rather than pyenv/python-build.",
    "head_branch": "graalpy-gftc-23.1.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2812 from eregon/graalpy-gftc-23.1.0\n\nAdd GraalPy 23.1.0 definition using the faster Oracle GraalVM distribution"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc32544ee515ce6a4aa8f",
    "number": 2810,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nThis PR will add support for installing a named version using the\r\nfollowing:\r\n\r\n```\r\npyenv install --name <name> <version>\r\n```\r\n\r\nThis will add the user supplied `<name>` to the end of the version as\r\n`<version>-<name>`. For example:\r\n\r\n```\r\n~$ pyenv install --name test-environment 3.11.3\r\nDownloading Python-3.11.3.tar.xz...\r\n-> https://www.python.org/ftp/python/3.11.3/Python-3.11.3.tar.xz\r\nInstalling Python-3.11.3...\r\nInstalled Python-3.11.3 to /home/user/.pyenv/versions/3.11.3-test-environment\r\n~$ pyenv versions\r\n* system (set by /home/user/.pyenv/version)\r\n  3.8.5\r\n  3.11.3\r\n  3.11.3-test-environment\r\n~$ pyenv 3.11.3-test-environment\r\n~$ pyenv global 3.11.3-test-environment\r\n~$ pyenv versions\r\n  system\r\n  3.8.5\r\n  3.11.3\r\n* 3.11.3-test-environment (set by /home/user/.pyenv/version)\r\n~$\r\n```\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "install_named_version_support",
    "is_a_fork": true,
    "comments": [
      "Whats the reason for this feature? Why not use specialized software to create a virtual environment? We already have some perfect tools for that, for ex. venv, poetry, etc. \r\nPyenv is not about https://peps.python.org/pep-0405, it's a python versions manager, not virtual environments.",
      "I suppose I can make venv work. My thoughts were to limit the tools needed for shell integration for a shared installation while maintaining my own version of the same python version.",
      "@raven42  \r\nOk, I understood your point, thanks! Personally, I’m not against this functionality, if anyone needs it, let’s add it.\r\n\r\n@yyuu @native-api how do you think? such a functionality may be useful when developing or modifying your own custom version of python",
      "Note: I actually found a bug in this PR if anybody resurrects it. I am moving forward with using the venv module for my purposes.\r\n\r\nThe following change is needed. It was missing the `! -z \"$NAME\"` check:\r\n```bash\r\n# If the `name` argument has been used, validate the name given is valid\r\nif [[ ! -z \"$NAME\" &&  ! $(grep '^[-0-9a-zA-Z_]*$' <<< $NAME) ]]; then\r\n  echo -e \"Error: --name argument can only contain alpha-numeric, '-', and '_' characters\\n\" >&2\r\n  usage 1 >&2\r\nfi\r\n```",
      "Such a feature has been requested a number of times. Not for virtual environments though but for customized builds. Currently, the suggested solution is https://github.com/s1341/pyenv-alias but it's been broken since Pyenv 2.3.10 . Perhaps it's time to include this into the base.\r\n\r\nThere are a few points though:\r\n\r\n* IMO \"name\" is misleading -- because it's only a suffix, not a full name.\r\n  * I actually like the idea of a suffix though -- as it provides a clear and consistent naming scheme that specifies both the origin and the customizations made.\r\n* Will this work if multiple versions are passed to `pyenv install`? Which of them will it be applied to?\r\n  * It seems logical to apply the suffix to _all_ the versions. Because build customization is usually done with envvars -- which will affect all the builds equally.\r\n    * This is another advantage of a suffix as opposed to a full name\r\n* A suffix will however likely break `pyenv latest` resolution if a customized version is used together with the original one: the customized version will probably override the original which might be undesirable.",
      "I forked that pyenv-alias plugin to make it work with newer versions, but was only able to make it work with suffixes (which I prefer and think makes more sense) - https://github.com/AdrianDAlessandro/pyenv-suffix\r\n\r\nI'm not intending on developing it into the future (only so far as to make it continue working for me). It would be useful to have as part of the in-built package and use a suffix taken from an environment variable (in my fork it is PYENV_VERSION_SUFFIX)\r\n\r\nTo explain my use case: I use an Apple Silicon MacBook and I use pyenv to switch between ARM and x86 versions of Python, but I like to use the exact same version numbers of Python and want to be able to tell which architecture I am using. This is what my installed versions list looks like:\r\n\r\n```bash\r\n$ pyenv versions\r\n  system\r\n  3.8.16\r\n  3.9.16\r\n  3.9.16x86\r\n* 3.10.9 (set by /home/user/.pyenv/version)\r\n  3.10.9x86\r\n  3.11.1\r\n  3.11.1x86\r\n```\r\n\r\nMethodology is [explained in this blog post](https://blogs.imperial.ac.uk/research-software-engineering/2023/04/20/python-development-on-m1-macs/), if anyone is interested."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc32544ee515ce6a4aa90",
    "number": 2807,
    "body": "Added pypy 7.3.13",
    "head_branch": "pypy-3.7.13",
    "is_a_fork": true,
    "comments": [
      "Please take a look at the CI failures.",
      "> Please take a look at the CI failures.\r\n\r\nAdd PyPy 7.3.10 #2553\r\nhttps://github.com/pyenv/pyenv/pull/2553\r\n\r\nl see, the 2.7 error we gave up on here was not pip...\r\n\r\n/Users/runner/work/pyenv/pyenv/versions/pypy2.7-7.3.13/bin/python: No module named pip (to install pip, you need to run once \"/Users/runner/work/pyenv/pyenv/versions/pypy2.7-7.3.13/bin/python -m ensurepip\")\r\n\r\nI'll look at ensurepip here\r\n.github/workflows/modified_scripts_build.yml\r\n\r\n\r\n\r\n"
    ],
    "commit_messages": [
      "Merge pull request #2807 from dand-oss/pypy-3.7.13\n\nAdd PyPy 7.3.13"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc32644ee515ce6a4aa91",
    "number": 2806,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "cpython-3.11.6",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2806 from coatl-dev/cpython-3.11.6\n\nAdd CPython 3.11.6"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc32744ee515ce6a4aa92",
    "number": 2804,
    "body": "Make sure you have checked all steps below.\n\n### Prerequisite\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\n* [ ] My PR addresses the following pyenv issue (if any)\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\n\n### Description\n- [ ] Here are some details about my PR\n\n### Tests\n- [ ] My PR adds the following unit tests (if any)\n",
    "head_branch": "cpython-3.12.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2804 from edgarrmondragon/cpython-3.12.0\n\nAdd CPython 3.12.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc32844ee515ce6a4aa93",
    "number": 2797,
    "body": "It seems that pyenv cannot install 2.7.18 on Mac M1 (Apple ARM).\r\n\r\n    pyenv install 2.7.18          Downloading openssl-1.0.2q.tar.gz...\r\n    -> https://www.openssl.org/source/old/1.0.2/openssl-1.0.2q.tar.gz\r\n    Installing openssl-1.0.2q...\r\n\r\n    BUILD FAILED (OS X 13.5 using python-build 20180424)\r\n\r\n    Inspect or clean up the working tree at /var/folders/9_/wjqg43y12bz8cnhlmmwh7rgc0000gq/T/python-build.20230816131951.19737\r\n    Results logged to /var/folders/9_/wjqg43y12bz8cnhlmmwh7rgc0000gq/T/python-build.20230816131951.19737.log\r\n\r\n    Last 10 log lines:\r\n       _dgram_write in libcrypto.a(bss_dgram.o)\r\n       _RAND_query_egd_bytes in libcrypto.a(rand_egd.o)\r\n       ...\r\n    ld: symbol(s) not found for architecture i386\r\n    clang: error: linker command failed with exit code 1 (use -v to see invocation)\r\n    make[4]: *** [link_a.darwin] Error 1\r\n    make[3]: *** [do_darwin-shared] Error 2\r\n    make[2]: *** [libcrypto.1.0.0.dylib] Error 2\r\n    make[1]: *** [shared] Error 2\r\n    make: *** [build_crypto] Error 1\r\n\r\nThis is because the pyenv \"recipe\" for 2.7.18 fetches openssl 1.0.2 which did not have ARM support at the time. M1 support was added in 1.1.1i according to https://www.openssl.org/news/cl111.txt.\r\n\r\nSo, this change is pulling in the latest of that series at the time of authoring this change, which is 1.1.1v.\r\n\r\nThis could also potentially bring more security to 2.7.18.\r\n\r\nThere is some evidence here that the corresponding Python maintainer tried to support a more recent OpenSSL version:\r\n\r\nhttps://mail.python.org/pipermail/python-dev/2019-February/156333.html\r\n\r\nFor testing, I tried to exercise the Python test suite to see whether the ssl tests work ok. I have run the following commands to double check that:\r\n\r\n    pyenv uninstall 2.7.18 (just to start clean)\r\n    pyenv install --keep 2.7.18\r\n    cd ~/.pyenv/sources/2.7.18/Python-2.7.18\r\n    make test\r\n\r\nIt seems that importing openssl worked. There are some connection resets by peer in certain threads, but they are not test failures.\r\n\r\nMake sure you have checked all steps below.\r\n\r\nCloses https://github.com/pyenv/pyenv/issues/2757",
    "head_branch": "python-2-7-mac-arm",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update the OpenSSL dependency for Python 2.7.18 to 1.1 (#2797)\n\nIt seems that pyenv cannot install 2.7.18 on Mac M1 (Apple ARM).\r\n\r\nopenssl 1.0.2 does not have ARM support. M1 support was added in 1.1.1i according to\r\nhttps://www.openssl.org/news/cl111.txt"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc32944ee515ce6a4aa94",
    "number": 2796,
    "body": "# Please read before merging\r\nApart from updating GraalPy version to 23.1.0, I'm introducing another change. We now release two versions of GraalPy:\r\n- *Oracle GraalPy*, which is distributed under [Graal Free License](https://www.oracle.com/downloads/licenses/graal-free-license.html). This license permits free use, including commercial use, but is not open source.\r\n- *GraalPy Community*, which is distributed under the [Universal Permissive License](https://github.com/oracle/graalpython/blob/master/LICENSE.txt). This hasn't changed, that's the version we've always had here in pyenv under the same open source license.\r\n\r\nThe difference in the versions is mostly performance, as *Oracle GraalPy* features more compiler optimizations. The python runtime is identical with the exception of two modules, `struct` and `pickle` that have optimized versions in *Oracle GraalPy*.\r\n\r\nWe would like to have both versions available, so I added separate install scripts for them. The naming follows the current upstream naming, where `graalpy` refers to *Oracle GraalPy* and `graalpy-community` refers to *GraalPy Community*. Please confirm if this is ok.\r\n\r\nCC @timfel \r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "@msimacek If you wish to supply non-OSS GraalPy, you can do that with a Pyenv plugin as per https://github.com/pyenv/pyenv/issues/1417#issuecomment-845954847 .",
      "I would still suggest to rename the community version of graalpy to graalpy-community (as already done in this PR), if only to communicate to users that this is not the best version to do benchmarking with. @native-api would you mind if we inform the users about the faster version, either when installing graalpy-community or by leaving the graalpy script in place and only informing the user that they need to get it using a plugin? ",
      "> I would still suggest to rename the community version of graalpy to graalpy-community (as already done in this PR)\r\n\r\nAgree.\r\n\r\n\r\n\r\n> would you mind if we inform the users about the faster version, either when installing graalpy-community or by leaving the graalpy script in place and only informing the user that they need to get it using a plugin?\r\n\r\nI think the rename to `graalpy-community` is enough of a hint that there's a \"non-community\" version, too. You can detail how to install it prominently at the project's site or blog.",
      "> So the `graalpy` file has to go.\r\n\r\nDone, now there's just `graalpy-community`.\r\n",
      "> or by leaving the graalpy script in place and only informing the user that they need to get it using a plugin?\r\n\r\nI considered this, too, and it seems like polluting the codebase with unrelated stuff.\r\nPlus, a broken script is going to cause trouble for all sorts of automated machinery that picks the latest version -- including our own prefix resolver."
    ],
    "commit_messages": [
      "Add graalpy-23.1.0 (#2796)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc32944ee515ce6a4aa95",
    "number": 2795,
    "body": "3.12.0rc2 ->3.12.0rc3\r\n",
    "head_branch": "3.12.0rc3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.12.0rc3 (#2795)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc32a44ee515ce6a4aa96",
    "number": 2793,
    "body": "Make sure you have checked all steps below.\n\n### Prerequisite\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\n* [ ] My PR addresses the following pyenv issue (if any)\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\n\n### Description\n\nFollowing https://github.com/pyenv/pyenv/pull/2781 and https://github.com/pyenv/pyenv/pull/2789\n\n### Tests\n- [ ] My PR adds the following unit tests (if any)\n",
    "head_branch": "prefer-openssl3-3.13-dev",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Prefer OpenSSL 3 in Homebrew in 3.13-dev (#2793)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc32b44ee515ce6a4aa97",
    "number": 2791,
    "body": "All include directories should go into CPPFLAGS\r\nXCode SDK is supposed to be appended, otherwise\r\nTcl/Tk in it overrides Homebrew one\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2790\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nCFLAGS go onto the command line of conftest earlier than CPPFLAGS so 'zlib from xcode sdk' was overriding Tcl/Tk from Homebrew\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "xcode_priority",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Prioritize 'zlib from xcode sdk' flag correctly (#2791)\n\nAll include directories should go into CPPFLAGS.\r\nXCode SDK was being added to CFLAGS instead\r\nwhich caused old Tcl/Tk in the SDK to override a newer one in Homebrew."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc32c44ee515ce6a4aa98",
    "number": 2789,
    "body": "The old 3.1.1s URL returns a 404\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n\r\n### Description\r\nThe old 3.1.1s URL returns a 404\r\n\r\n### Tests\r\nN/A\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2789 from zsol/patch-1\n\nUpdate openssl url for 3.12.0rc2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc32d44ee515ce6a4aa99",
    "number": 2788,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n\r\nOn older recipes for `PyPy` the current `get-pip.py` is called, when it returns and incompatible script. Older `CPython` work around this by supplying the appropriate unsupported minor version number in the URL, such as `https://bootstrap.pypa.io/pip/2.7/get-pip.py`. This change would incorporate this same logic into `PyPy` installs such as `pypy2.7-7.3.12` where the minor version of Python is specified.\r\n\r\n### Tests\r\n\r\n* Adds unittests to `pyenv_ext.bats` for previously untested and new pinned bootstrap script versions.\r\n",
    "head_branch": "fix-pypy-get-pip",
    "is_a_fork": true,
    "comments": [
      "Let me know if an accompanying issue is required and I can open one."
    ],
    "commit_messages": [
      "Fix get-pip urls for older pypy versions (#2788)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc32e44ee515ce6a4aa9a",
    "number": 2786,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] ~~Please consider implementing the feature as a hook script or plugin as a first step.~~\r\n* [ ] ~~Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.~~\r\n* [ ] ~~My PR addresses the following pyenv issue (if any)~~\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nCopying the instructions for configuring the fish shell for pyenv verbatim fails because `fish_add_path` fails when the target directory doesn't exist.\r\n\r\n### Tests\r\n- [ ] ~~My PR adds the following unit tests (if any)~~\r\n\r\nN/A - doc change only.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc32f44ee515ce6a4aa9b",
    "number": 2783,
    "body": "It just points at pyenv version-name.  This adds consistency with the behavior of `pyenv versions --bare`\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n\r\nI don't use `rbenv`, but from a quick look, I *could* make a similar change there. However, the files in question are already different (though the behavior is similar).\r\n\r\n* [] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2779\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\nAdds a `--bare` flag to `pyenv version`\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "jjwatt-version-bare",
    "is_a_fork": true,
    "comments": [
      "Please add a test for the new option.",
      "Sure thing! `bats` for testing. Excellent. I think I see just where to add it.",
      "@jjwatt Hi, so what about tests? I think, PR is ready for merge, except of tests."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc32f44ee515ce6a4aa9c",
    "number": 2781,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2746\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nThe ARM64 build of OpenSSL in MacOS 13 Homebrew lacks some necessary functions for CPython 3.12.\r\nWhile it's a workaround for third-party problem, CPython has been using OpenSSL 3 in CI for several releases now so the support can be considered official now.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\nN/A",
    "head_branch": "prefer_openssl3",
    "is_a_fork": true,
    "comments": [
      "See #2805\r\n"
    ],
    "commit_messages": [
      "Prefer OpenSSL 3 in Homebrew since 3.12 (#2781)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc33044ee515ce6a4aa9d",
    "number": 2778,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "cpython-3.12.0rc2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.12.0rc2 (#2778)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc33144ee515ce6a4aa9e",
    "number": 2769,
    "body": null,
    "head_branch": "fix-a-typo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2769 from xzmeng/fix-a-typo\n\nfix a typo in README.md"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc33244ee515ce6a4aa9f",
    "number": 2768,
    "body": "I was getting warnings when running various `pyenv` commands because of an improper call to `grep`:\r\n\r\n```bash\r\n$ grep -Eq '^(declare|typeset) \\-A' </dev/null\r\ngrep: warning: stray \\ before -\r\n$ grep -Eq '^(declare|typeset) -A' </dev/null\r\n```\r\n\r\nThis call was added in dfeda54,[^1] and there is no documented reason for having the `\\`.\r\n\r\nAccording to the GNU grep manual:[^2]\r\n\r\n> The behavior of `grep` is unspecified if a unescaped backslash is not followed by a special character, a nonzero digit, or a character in the above list. Although `grep` might issue a diagnostic and/or give the backslash an interpretation now, its behavior may change if the syntax of regular expressions is extended in future versions.\r\n\r\nThis became an error in GNU grep 3.8 (2022-09-02),[^3] which explains why this problem was not found when the original code was added. This undefined behavior is part of the POSIX spec,[^4] so this fix should not break any other versions of `grep` being used.\r\n\r\n[^1]:\r\n    https://github.com/pyenv/pyenv/commit/dfeda54079f31471f1eb194e692284514b16be54\r\n\r\n[^2]:\r\n    https://www.gnu.org/software/grep/manual/grep.html#Special-Backslash-Expressions\r\n    (Permalink: https://git.savannah.gnu.org/cgit/grep.git/tree/doc/grep.texi?id=d1c3fbe7722662b449bae23130b644c726473fe3#n1528)\r\n\r\n[^3]:\r\n    https://savannah.gnu.org/news/?id=10191\r\n    (Permalink: https://git.savannah.gnu.org/cgit/grep.git/tree/NEWS?id=d1c3fbe7722662b449bae23130b644c726473fe3#n99)\r\n\r\n[^4]:\r\n    https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap09.html#tag_09_04_02,\r\n    https://pubs.opengroup.org/onlinepubs/9699919799/utilities/grep.html",
    "head_branch": "fix-grep-warning",
    "is_a_fork": true,
    "comments": [
      "I cannot remember ever seeing such a well-documented PR! Great work!"
    ],
    "commit_messages": [
      "Fix \"grep: warning: stray \\ before -\" in `conda.bash` (#2768)\n\nAccording to the POSIX spec, an unescaped backslash not followed by\r\nan escapable character is undefined behavior,\r\nand it has become an error in GNU grep 3.8 (2022-09-02)."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc33344ee515ce6a4aaa0",
    "number": 2764,
    "body": "Helps to workaround #2417\r\n\r\nThe `-s` flag assures that nothing can be installed to user site-package but doesn't seem to keep `ensurepip` from looking there for pip. If pip is installed in the user site-package directory pip isn't installed for the newly built python. `-I` leaves user site-package out entirely during the pip installation.",
    "head_branch": "pip-fix",
    "is_a_fork": true,
    "comments": [
      "May also fix https://github.com/asdf-community/asdf-python/issues/148 and https://github.com/asdf-community/asdf-python/issues/127.",
      "While this will install Pip in the https://github.com/pyenv/pyenv/issues/2417 case -- it won't be actually used, will it?\r\nThe Pip installation in user site-packages will prevail.\r\n\r\nThat's not a bad thing though -- if it works correctly.\r\n\r\nWill this trigger distro-specific customizations of the system Pip for Pyenv-installed Pythons?",
      "Yes, by default the user site packages are still going to be first in `sys.path`. Users could use the same workaround or others to make sure to use the version of pip installed by `python-build` if they care too. The main problems I wanted to solve was providing some additional consistency to the builds and assuring pip shims work correctly. This problem breaks the pip shims for both pyenv and asdf-python which has to be a relatively large population of python users. Even if having a version of pip installed in local won't be that common this affects a lot of people.\r\n\r\nI'm not sure I understand the last question, could you point me at an example?\r\n\r\nThe change does cause `make test-build && make test` to pass on my system now.",
      "> I'm not sure I understand the last question, could you point me at an example?\r\n\r\nDistros patch the system-provided Pip to better suit the distro's ecosystem.\r\nE.g. for https://packages.ubuntu.com/jammy/python3-pip, the patches they apply can be found in http://archive.ubuntu.com/ubuntu/pool/universe/p/python-pip/python-pip_22.0.2+dfsg-1ubuntu0.3.debian.tar.xz , `patches` directory.\r\n\r\nI was wondering: if one\r\n* installs an upgrade for the system's Pip with `pip3 install -U pip` (which goes into `~/.local/lib/pythonX.Y/site-packages`)\r\n* switches to a Pyenv-provided version with the same `X.Y`\r\n* uses Pip from it\r\n* => will the distro patches have an effect?\r\n\r\n---\r\n\r\nAnyway, I've just checked that no, they don't.\r\nBy checking in Ubuntu Jammy:\r\n\r\n```python\r\n>>> import pip._vendor.certifi\r\n>>> pip._vendor.certifi.core.where()\r\n```\r\n\r\nWith the distro patch `certifi-debian-ca-certificates.patch`, it should be printing `'/etc/ssl/certs/ca-certificates.crt'`.\r\nBut it prints the unpatched value, `'<home dir>/.local/lib/python<X.Y>/site-packages/pip/_vendor/certifi/cacert.pem'`.\r\n\r\n---\r\n\r\nSo, we're clear to go."
    ],
    "commit_messages": [
      "Merge pull request #2764 from xaocon/pip-fix\n\nuse -I with ensurepip"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc33444ee515ce6a4aaa1",
    "number": 2763,
    "body": "Make sure you have checked all steps below.\n\n### Prerequisite\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\n* [ ] My PR addresses the following pyenv issue (if any)\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\n\n### Description\n- [ ] Here are some details about my PR\n\n### Tests\n- [ ] My PR adds the following unit tests (if any)\n",
    "head_branch": "cpython-3.10.13",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2763 from edgarrmondragon/cpython-3.10.13\n\nAdd CPython 3.8.18, 3.9.18, 3.10.13, 3.11.5"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc33544ee515ce6a4aaa2",
    "number": 2754,
    "body": "The unix port no longer uses axtls. Earlier versions do, but only 1.9.x\r\nrequires it to be separately built; newer ones have the dependency in\r\norder.\r\n",
    "head_branch": "chore/micropython-1.20.0",
    "is_a_fork": true,
    "comments": [
      "Superseded by https://github.com/pyenv/pyenv/pull/2869"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc33544ee515ce6a4aaa3",
    "number": 2752,
    "body": "Make sure you have checked all steps below.\n\n### Prerequisite\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\n* [ ] My PR addresses the following pyenv issue (if any)\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\n\n### Description\n- [ ] Here are some details about my PR\n\n### Tests\n- [ ] My PR adds the following unit tests (if any)\n",
    "head_branch": "cpython-3.12.0rc1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2752 from edgarrmondragon/cpython-3.12.0rc1\n\nAdd CPython 3.12.0rc1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc33644ee515ce6a4aaa4",
    "number": 2749,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - N/A\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nI added support for PowerShell (on Linux), it could probably be implemented for rbenv also, however I never used ruby and don't feel confident to implement it.\r\n\r\nI know it's maybe a patch too important for the core code, if so just close this (draft) PR.\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any): WIP\r\n\r\nI don't know how BATS works, I need help / hints to understand what should I do -- where is the tested shell specified?",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "> I don't know how BATS works, I need help / hints to understand what should I do -- where is the tested shell specified?\r\n\r\nTests can be run with `make test`. It shows the commands it runs so you can run them by hand or run `bats` with other arguments when diagnosing tests (you'll probably need `-f`) etc.\r\n\r\nLook at the existing tests for the files you've changed to get an idea of what they do. They're basically Bash scripts with some extra syntax that denotes tests and setup/teardown code that's preprocessed and then executed by Bats.\r\n\r\nWe're using a rather old Bats version, 1.2.0, the docs are at https://github.com/bats-core/bats-core/blob/v1.2.0/README.md . Apart from functions defined by Bats, we use additional ones defined in `test_helper.bash` and test files themselves.\r\n\r\nMost tests are unit tests that mock any external interactions; IIRC in the affected files, there're only 1-2 integration tests for Fish.",
      "> I know it's maybe a patch too important for the core code, if so just close this (draft) PR.\r\n\r\n@pyenv/pyenv-core-maintainers IMO supporting PowerShell is fine. However, due to unfamiliarity with it, we may need to request help if more stuff interacting with it will be needed in the future or problems are reported."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc33744ee515ce6a4aaa5",
    "number": 2748,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - N/A\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nGuthub have recently preinstalled x64 Homebrew OpenSSL to stock MacOS runners. This has caused FreeBSD OpenSSL detection logic to erroneously trigger when running FreeBSD tests in MacOS because their paths happened to coincide.\r\n\r\nReplaced checking a specific path with checking with `pkg`.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\nN/A",
    "head_branch": "fix_macos_ci",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix FreeBSD tests in MacOS CI (#2748)\n\nGuthub have recently preinstalled x64 Homebrew OpenSSL to stock MacOS runners. This has caused FreeBSD OpenSSL detection logic to erroneously trigger when running FreeBSD tests in MacOS because their paths happened to coincide.\r\n\r\nReplaced checking a specific path with checking with pkg."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc33844ee515ce6a4aaa6",
    "number": 2744,
    "body": "It's nice if the UNIX easy installation is easy to find by ctrl+f search, especially in such a large README file\r\n\r\nOther ways of marking it would work as well; but having something near that says UNIX, macOS or Linux is nice I think.\r\n\r\nGreat project!\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "The formulation as suggested is incorrect.\r\n\r\nBoth installer and Git checkout are for UNIX/MacOS; Homebrew is for MacOS and now for Linux, too.\r\n\r\nMaybe a subsection \"UNIX/MacOS\", and then separately \"Windows\"?",
      "Good correction! I like that subsection idea."
    ],
    "commit_messages": [
      "README: Add explicit UNIX reference into the relevant installation sections (#2744)\n\nCo-authored-by: Ivan Pozdeev <vano@mail.mipt.ru>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc33944ee515ce6a4aaa7",
    "number": 2742,
    "body": "I used `add_miniconda.py` to generate definitions files for anaconda `2023.03`, anaconda `2023.07`, miniconda `23.3.1`, and miniconda `23.5.0`. I needed to change the conda version processing logic to handle this. In addition, I realized that `add_miniconda.py` was missing support for Python 3.11, so I added it as an acceptable Python version.\r\n\r\nI'm not sure how to best include multiple new definition files. Should each version have its own commit, or is including all the autogenerated files together fine?",
    "head_branch": "update-miniconda-2023-07-11",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2742 from aphedges/update-miniconda-2023-07-11\n\nAdd new anaconda and miniconda definitions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc33a44ee515ce6a4aaa8",
    "number": 2741,
    "body": "Make sure you have checked all steps below.\n\n### Prerequisite\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\n* [ ] My PR addresses the following pyenv issue (if any)\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\n\n### Description\n- [ ] Here are some details about my PR\n\n### Tests\n- [ ] My PR adds the following unit tests (if any)\n",
    "head_branch": "cpython-3.12.0b4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.12.0b4 (#2741)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc33a44ee515ce6a4aaa9",
    "number": 2739,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n\r\n### Description\r\n- [x] Adds script to install Cinder 3.10, similarly to Cinder 3.8 (#2433). All distro and GCC warnings have been kept because Cinder still doesn't officially support building outside their Docker container\r\n- [x] Also adds patches for Cinder configure scripts (both for 3.8 and 3.10) to disable `-Werror`. There are some warnings (`Wdeprecated-declarations`, `Wmaybe-uninitialized`, and others) that occur on newer (GCC 11+) versions and cause the build to fail. I'm not sure why those warnings/error occur on those newer versions, but from a quick search, it appears that at least some of them might be false-positive because of bugs in GCC. When `-Werror` is removed, the build works fine (it compiles and runs a simple Numpy test, not sure if everything is perfectly supported though). There is also existing issue about that (facebookincubator/cinder#114).\r\n\r\nSupported distros:\r\n- Ubuntu 22.04+\r\n- Debian 11+\r\n- Fedora 32+\r\n- Arch\r\n\r\nBasically, distros that have at least GCC 10 / support for C++20 should work. Alpine is not supported because it uses MUSL. Older distro versions are not supported because of of too old GCC version. I haven't tested macOS, but it probably doesn't work.\r\n\r\nTest runs:\r\n- Cinder 3.10: https://github.com/filips123/pyenv-cinder-testing/actions/runs/5400882249/jobs/9809934704\r\n- Cinder 3.8: https://github.com/filips123/pyenv-cinder-testing/actions/runs/5400895786/jobs/9809967403\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "add-cinder-3.10",
    "is_a_fork": true,
    "comments": [
      "> Please be aware that Cinder is only built or tested on Linux x64; anything else (including macOS) probably won't work.\r\n\r\nRemove macOS builds.\r\n\r\n> c++: error: unrecognized command line option ‘-std=c++20’; did you mean ‘-std=c++2a’?\r\n\r\nUbuntu 20.04 build failed because of incorrect command line option.\r\n\r\nCinder is very specific Python implementation, so, I'm not sure if it's necessary to add it. But, if you want, pls, modify your PR for all cases, so that Cinder is installed only in Linux of a certain version and an error would be printed for other OS and platforms.\r\n",
      "> Ubuntu 20.04 build failed because of incorrect command line option.\r\n\r\nIt's probably because Ubuntu 20.04 uses GCC 9.4.0, which does not fully support C++20 that is needed by Cinder. That flag comes from Cinder build system.\r\n\r\n> Cinder is very specific Python implementation, so, I'm not sure if it's necessary to add it. \r\n\r\nWell, yeah, it is a pretty specific implementation, but my previous PR for Cinder 3.8 was accepted, and pyenv already includes some \"less standard\" implementations, so I think it can still be useful to support it.\r\n\r\n> But, if you want, pls, modify your PR for all cases, so that Cinder is installed only in Linux of a certain version and an error would be printed for other OS and platforms.\r\n\r\nIn [the previous PR](pyenv/pyenv#2433), it was suggested to just display [a warning](https://github.com/filips123/pyenv/blob/add-cinder-3.10/plugins/python-build/share/python-build/cinder-3.10-dev#L1-L25) on distros other than Fedora 32 with GCC other than 10, as that's what Cinder officially supports. This can probably be useful in case Cinder adds support for macOS in the future, so the check won't block the build there, and because then I didn't know which exact requirements Cinder has for building on Linux.\r\n\r\nHowever, if needed, I can update those checks to also stop the build if not on Linux and using GCC less than 10.",
      "> However, if needed, I can update those checks to also stop the build if not on Linux and using GCC less than 10.\r\n\r\nOk",
      "I added errors when not on Linux and not using at least GCC 10. I also added a few improvements to also support building on older distros (such as Ubuntu 20.04) as long as GCC 10 is installed (`gcc-10` and `g++-10`)."
    ],
    "commit_messages": [
      "Merge pull request #2739 from filips123/add-cinder-3.10\n\nAdd Cinder 3.10 and Cinder configure patches"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc33b44ee515ce6a4aaaa",
    "number": 2734,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "I updated with a protection\r\n",
      "What's this supposed to do?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc33c44ee515ce6a4aaab",
    "number": 2730,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "cpython-3.12.0b3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2730 from edgarrmondragon/cpython-3.12.0b3\n\nAdd CPython 3.12.0b3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc33d44ee515ce6a4aaac",
    "number": 2729,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - E.g. https://github.com/pyenv/pyenv/actions/runs/5316697716/jobs/9626475046#step:6:215\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\nlooks like `grep -q` closes stdin without reading everything just like `head`, causing the same error intermittently.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\nN/A",
    "head_branch": "fix-prinf-broken-pipe",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix occasional 'libexec/pyenv-latest: line 39: printf: write error: Broken pipe' (#2729)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc33e44ee515ce6a4aaad",
    "number": 2726,
    "body": "Make sure you have checked all steps below.\n\n### Prerequisite\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\n* [ ] My PR addresses the following pyenv issue (if any)\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\n\n### Description\n- [ ] Here are some details about my PR\n\n### Tests\n- [ ] My PR adds the following unit tests (if any)\n",
    "head_branch": "pypy-7.3.12",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2726 from edgarrmondragon/pypy-7.3.12\n\nAdd PyPy 7.3.12"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc33f44ee515ce6a4aaae",
    "number": 2725,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "pypy-7.3.12",
    "is_a_fork": true,
    "comments": [
      "Please, recreate PR from scratch (the simplest way is to refork pyenv repo)."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc33f44ee515ce6a4aaaf",
    "number": 2724,
    "body": "Add newly released version of GraalPy.\r\nCC @timfel ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2724 from msimacek/master\n\nAdd graalpy-23.0.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc34044ee515ce6a4aab0",
    "number": 2723,
    "body": "### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [N/A ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nSome small doc improvement. \r\nEnvironment variables work a bit differently in Fish. Hereby explicitly how to remove the pyenv_dir in Fish. \r\n\r\nIf this is accepted, I'll make contribution upstream to rbenv. \r\n\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "According to https://fishshell.com/docs/current/fish_for_bash_users.html#command-substitutions, Fish actually supports the `$(command)` command substitution syntax as well. So there's no need for 2 separate sections."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc34144ee515ce6a4aab1",
    "number": 2720,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\nAdds micropython 1.20 support\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "add-micropython-1.20",
    "is_a_fork": true,
    "comments": [
      "So new to this repo. The builds failed due to a missing dependency  axtls. Is that an issue with my change or unrelated?",
      "If there are flavor-specific prerequisites, you should be installing them for the specific flavors as part of CI -- i.e. in the corresponding jobs of `.github/workflows/modified_scripts_build.yml`.\r\n",
      "Btw I don't see `axtls` as a dependency at https://docs.micropython.org/en/latest/develop/gettingstarted.html#required-dependencies",
      "Ok. I'll take a look over the weekend.",
      "Yea so it looks like axtls and has been replaced with mbedtls.",
      "Looks like there's a problem with the release: it tries to build a dependency that's no longer being included."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc34244ee515ce6a4aab2",
    "number": 2718,
    "body": "Currently when installing Python 3.7.17 on an Apple Silicon MacBook:\r\n\r\n```\r\n$ pyenv install 3.7.17\r\npython-build: use openssl@1.1 from homebrew\r\npython-build: use readline from homebrew\r\nInstalling Python-3.7.17...\r\npython-build: use readline from homebrew\r\npython-build: use zlib from xcode sdk\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"/Users/tomkins/.pyenv/versions/3.7.17/lib/python3.7/ctypes/__init__.py\", line 7, in <module>\r\n    from _ctypes import Union, Structure, Array\r\nModuleNotFoundError: No module named '_ctypes'\r\nWARNING: The Python ctypes extension was not compiled. Missing the libffi lib?\r\nInstalled Python-3.7.17 to /Users/tomkins/.pyenv/versions/3.7.17\r\n```\r\n\r\nAfter adding the patches:\r\n\r\n```\r\n$ pyenv install 3.7.17\r\npyenv: /Users/tomkins/.pyenv/versions/3.7.17 already exists\r\ncontinue with installation? (y/N) y\r\npython-build: use openssl@1.1 from homebrew\r\npython-build: use readline from homebrew\r\nInstalling Python-3.7.17...\r\npatching file 'Doc/library/ctypes.rst'\r\npatching file 'Lib/test/test_unicode.py'\r\npatching file 'Modules/_ctypes/_ctypes.c'\r\npatching file 'Modules/_ctypes/callproc.c'\r\npatching file 'Modules/_ctypes/ctypes.h'\r\npatching file setup.py\r\npatching file 'Misc/NEWS.d/next/Core and Builtins/2020-06-30-04-44-29.bpo-41100.PJwA6F.rst'\r\npatching file 'Modules/_decimal/libmpdec/mpdecimal.h'\r\npatching file setup.py\r\npython-build: use readline from homebrew\r\npython-build: use zlib from xcode sdk\r\nInstalled Python-3.7.17 to /Users/tomkins/.pyenv/versions/3.7.17\r\n```\r\n\r\nI've copied across the OpenSSL patches for 1.1.1q as well, although that's untested as my current Homebrew OpenSSL is 1.1.1u.",
    "head_branch": "missing-patches",
    "is_a_fork": true,
    "comments": [
      "> I've copied across the OpenSSL patches for 1.1.1q as well, although that's untested as my current Homebrew OpenSSL is 1.1.1u.\r\n\r\nBetter replace the 1.1.1q reference with the latest version as of now and get rid of the patches."
    ],
    "commit_messages": [
      "Add missing patches for Python 3.7/3.8/3.9 (#2718)\n\n* Use OpenSSL 1.1.1u and remove patches for 1.1.1q"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc34344ee515ce6a4aab3",
    "number": 2717,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2716\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nBackport the fix, https://bugs.python.org/issue42351\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\nN/A",
    "head_branch": "backport_42351_3.5.10",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2717 from native-api/backport_42351_3.5.10\n\nBackport bpo-42351 to 3.5.10"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc34444ee515ce6a4aab4",
    "number": 2715,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "cpython-3.11.4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2715 from edgarrmondragon/cpython-3.11.4\n\nAdd CPython 3.11.4"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc34444ee515ce6a4aab5",
    "number": 2714,
    "body": "Make sure you have checked all steps below.\n\n### Prerequisite\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\n* [ ] My PR addresses the following pyenv issue (if any)\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\n\n### Description\n- [ ] Here are some details about my PR\n\n### Tests\n- [ ] My PR adds the following unit tests (if any)\n",
    "head_branch": "cpython-3.10.12",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2714 from edgarrmondragon/cpython-3.10.12\n\nAdd CPython 3.10.12"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc34544ee515ce6a4aab6",
    "number": 2713,
    "body": "Make sure you have checked all steps below.\n\n### Prerequisite\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\n* [ ] My PR addresses the following pyenv issue (if any)\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\n\n### Description\n- [ ] Here are some details about my PR\n\n### Tests\n- [ ] My PR adds the following unit tests (if any)\n",
    "head_branch": "cpython-3.12.0b2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2713 from edgarrmondragon/cpython-3.12.0b2\n\nAdd CPython 3.12.0b2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc34644ee515ce6a4aab7",
    "number": 2711,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "cpython-3.9.17",
    "is_a_fork": true,
    "comments": [
      "Gonna add any other patch release that come out shortly (e.g. `3.8.17`)"
    ],
    "commit_messages": [
      "Merge pull request #2711 from edgarrmondragon/cpython-3.9.17\n\nAdd CPython 3.7.17, 3.8.17 and 3.9.17"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc34744ee515ce6a4aab8",
    "number": 2708,
    "body": "Sorry for this longer text, but I thought I describe it in more detail what this PR is all about and what changes I made. It's actually quite simple. :wink: \r\n\r\n### Prerequisite\r\nnot applicable as it is purely a documentation issue.\r\n\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n\r\n### Description\r\nThis PR fixes #2689 and introduces a RST/Sphinx format for the manpage. It contains:\r\n\r\n* A `man/Makefile` and `man/make.bat` to build the manpage. It can also be used to build other formats like HTML, info, texinfo etc.\r\n* A driver file `man/pyenv.rst` which includes other files as references:\r\n\r\n        man/pyenv.rst\r\n        +-- command-reference.rst\r\n        +-- environment-reference.rst\r\n\r\n* All subcommands are stored in separate files to make it easier to edit, submit, and extend the documentation. See `man/pyenv/<SUBCOMMAND>.rst`. These subcommands are referenced from `command-reference.rst`.\r\n\r\nThere are some important things you should know:\r\n\r\n* The first commit 2c27192 is just the conversion from the manpage to RST (it was done by pandoc with some manual corrections).\r\n* After the first commit, I changed the structure and introduced separate files for each subcommands.\r\n* The Makefile can also be used to build HTML and sync it to ReadTheDocs or some other hosting platform.\r\n* I've tried to be as consistent as possible and introduced in each subcommand files a dedicated structure: synopsis, options, and description.\r\n* Some files contain still some `TODOs`. Sometimes I wasn't able to figure out what the option really does:\r\n  * **Some help for a subcommand doesn't list nor describe their CLI options.**\r\n  * **Feel free to extend these TODOs**.\r\n\r\nPerhaps it would make sense to squash all commits after all changes are done.\r\n\r\n\r\n### Building the manpage\r\n\r\n1. Get the branch with all the changes.\r\n2. From the root directory, run:\r\n   * For manpage: `make man`\r\n     Result in the file `man/_build/man/pyenv.1`\r\n   * For HTML: `make html`\r\n     Result in the file `man/_build/html/pyenv.html`\r\n\r\nIt's also possible to run the `make` command inside the `man` directory.\r\n\r\n\r\n### Future\r\n\r\nWhen I looked through the manpage, maybe some sections should be removed or moved to another file. \r\n\r\nThe manpage contains a mixture of reference and concept topics. According to topic oriented writing, concepts and references are distinct types and should be kept separate.\r\n\r\nAs you already have a README file in the GitHub repository, this can be further extended with concept topics. That would make the manpage much smaller and to the point.\r\n\r\nI didn't tackle this part as this is something for the future and probably need  discussion first.\r\n\r\n\r\n### Benefits\r\n\r\nWith this PR, I believe there are many benefits that helps this project:\r\n\r\n* If someone wants to contribute a new command, it's easier to read the existing documentation and make the necessary additions.\r\n* It makes it easier to review as it is easier to read.\r\n* The RST/Sphinx format and with the help of the Makefile, the documentation can be published as HTML and synced to a hosting server, if wanted.\r\n* People can reference a subcommand in GitHub by pointing to the corresponding RST file.\r\n\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any): not applicable\r\n- I've tested the output in the browser (HTML) and with the `man` command (manpage). \r\n- Not sure why the CI failed. Any idea?\r\n\r\n----\r\n\r\nAre you okay with this PR? Any questions or wishes?",
    "head_branch": "2689-improve-manpage",
    "is_a_fork": true,
    "comments": [
      "Thank you for your comments! :+1: Much appreciated.\r\n\r\n> So... you've converted the entire documentation into ReST?\r\n\r\nNo, not the entire documentation! It's only the manpage. Bascially, what was inside the `man/pyenv.1` file.\r\n\r\n> I hoped you'd reuse the existing Markdown files.\r\n\r\nWell, in issue #2708 I laid down all the option, but I haven't seen any preferences to one format. So my impression was that _all_ the options are equally okay. Perhaps I misread your intention.\r\n\r\nSo I took one which I was most familiar with. That's why I implemented it in RST/Sphinx. Certainly you can do it also with Markdown or with ADoc.\r\n\r\n\r\n> How are we going to host it? \r\n\r\nYou can host the full documentation on GH Pages or use ReadTheDocs (RTD). That is a matter of your preferences. I didn't want to make that decision.\r\n\r\nTo automatically publish the documentation, there are GH Actions for both sites.\r\n\r\n\r\n> Github cannot render ReST adequately (try to see any of the full files in the review UI).\r\n\r\nTrue, it renders only part of the complete syntax. But I think you have a misconception here.\r\n\r\nGitHub gives you a _preview_ be it from Markdown, ADoc, or RST. For the most parts, it's fairly okay and the first two are supported well. The preview is not a fully functioning documentation though. For example, cross references don't work.\r\n\r\nIs it really that important to refer to a command _inside the GitHub repo_? Wouldn't it be much easier to refer to a _fully rendered page_ somewhere on GH Pages or RTD?\r\n\r\n\r\n> We must have online documentation.\r\n> For starters, the README has some links to it that need to stay valid.\r\n\r\nI second that. Again, dealing with the _complete_ documentation was out of scope for _this_ PR. I just focused to solve one problem (the manpage part).\r\n\r\nOf course, that doesn't mean it has to stop here. :wink: My point was to start with something (that is the manpage part) which can be amended. Further related changes can be always done in other PRs.\r\n\r\n\r\n> If the documentation is not in a ready-to-use state, we'll also need a push Github Action to publish it (only for the master branch).\r\n\r\nThat true, but you need that anyway. As I said, that was out of scope for this PR. It should be fairly easy to implement.\r\n\r\n\r\n>It also makes a whole lot harder to edit it since you can't readily view the result -- the opposite of what the PR claims to achieve.\r\n\r\nWell, my point was _any format_ would be easier to edit than the _troff/groff_ markup.\r\n\r\nApart from that, there are two ways to view the results:\r\n\r\n* **Edit a RST file directly on GitHub**\r\n  It's possible and GH supports a preview. As you noted, RST is only partially supported, but it's better than nothing. I gives you at least some idea how it looks like.\r\n\r\n* **Render it locally**\r\n  That would be the preferred way. Run `make man` or `make html` and review the result. You need to add Sphinx to your development requirements.\r\n\r\nI'm not sure how you develop things. But if you run your test suite it's just another command that you run. If you haven't changed the the code base that is related to documentation, it's even simpler: you don't have to run the above commands.\r\n\r\nRegarding adding a new subcommand, you usually don't start from scratch. I've  already added many files, just copy one and edit it to your needs. Copying from an existing file maintains consistency. Why should that be difficult? :thinking: \r\n\r\n",
      "> > So... you've converted the entire documentation into ReST?\r\n> \r\n> No, not the entire documentation! It's only the manpage. Bascially, what was inside the `man/pyenv.1` file.\r\n\r\nYou're deleting COMMANDS.md. What else could this mean? :slightly_smiling_face: \r\n\r\n> > I hoped you'd reuse the existing Markdown files.\r\n> \r\n> Well, in issue #2708 I laid down all the option, but I haven't seen any preferences to one format. So my impression was that _all_ the options are equally okay. Perhaps I misread your intention.\r\n> \r\n> So I took one which I was most familiar with. That's why I implemented it in RST/Sphinx. Certainly you can do it also with Markdown or with ADoc.\r\n\r\nTechnically, yes, all options are okay... Since this is a volunteer-driven project, we'd better work with whatever existing volunteers are willing to provide if we want help from them (which we do).\r\n\r\nNote however that different options carry significantly different amounts of extra work.\r\n\r\n**Since Sphinx-format documentation needs generation and additional hosting to be usable, this means that this PR is incomplete -- since it leaves the project's documentation in an unusable state.**\r\n\r\nSo far, we've been (from what I can see) quite fine with COMMANDS.md and README.md (and the README for Python-Build). While they _can_ be called \"previews\", we didn't really need extensive cross-references so far (again, from what I can see).\r\nDo you think the project is past the point where such a next-level documentation is necessary?\r\n\r\n----\r\n\r\nMy personal preferences don't really matter; in order to be fair and impartial, I try to find and use objective criteria as much as possible. In this particulr case, what does matter is that the suggested solution needs to be maintainable.\r\n\r\nI wasn't able to find out how to determine which \"tags\" (the `.. envvar::` syntax and inline reference syntax; dunno how they are officially called) are available in any given place of an `.rst` file and what they mean/where they're defined.\r\nThis knowledge is critical to be able to write `.rst` fiels and diagnose errors in them whenever those \"tags\" aren't expanded properly.\r\nSo I'm requesting that knowledge to be able to take up maintenance of the codebase with your PR.\r\n",
      "> So... you've converted the entire documentation into ReST?\r\n> I hoped you'd reuse the existing Markdown files.\r\n\r\n[Sphinx supports Markdown](https://docs.readthedocs.io/en/stable/intro/getting-started-with-sphinx.html#using-markdown-with-sphinx) via the [MyST plugin ](https://myst-parser.readthedocs.io/en/latest/intro.html)\r\n\r\n> Since Sphinx-format documentation needs generation and additional hosting to be usable, this means that this PR is incomplete -- since it leaves the project's documentation in an unusable state.\r\n\r\nThe build process and documentation can be hosted for free on the https://readthedocs.org/ https://docs.readthedocs.io/en/stable/tutorial/ . \r\n\r\nReadthedocs integrate with github hooks, and the build can be done automatically. Readthedocs can also use git tags or releases and thus have multiple versions of documentation published. \r\n\r\nReadthedocs is capable of exporting documentation to HTML, ePub and PDF\r\n\r\nIf you want to check an example from the Readthedocs user's point of view, this is a project I maintain.: \r\nhttps://cookiecutter-django.readthedocs.io\r\n\r\nNote: `pyenv` namespace on readthedocs.io ( https://pyenv.readthedocs.io ) it has already been registered by someone, however, it seems that it is effectively not used and so we can most likely manage to transfer ownership to the pyenv organization. In case you want to go with Sphinx and Readthedocs, I can try to solve that.\r\n\r\nThat said, if readthedocs isn't an option, it's still perfectly possible to use github pages for the same purpose and it will work very similarly.\r\n",
      "> You're deleting COMMANDS.md. What else could this mean? :slightly_smiling_face:\r\n\r\nYes, as there are some issues with this file:\r\n\r\n* It's incomplete and doesn't document all subcommands.\r\n* It's inconsistent in its structure.\r\n* It's unnecessary as all its content is available in the manpage files now.\r\n\r\nKeeping it would mean we have similar content in different files which is problematic. Code/doc duplication should be avoided.\r\n\r\nIf you really want to keep this file, I would suggest to clear its content and refer to the `man/pyenv` folder for all the subcommands.\r\n\r\nWould that work?\r\n\r\n\r\n> Note however that different options carry significantly different amounts of extra work.\r\n\r\nI'm not sure if I understood your concerns correctly. What is this \"amounts of extra work\"?\r\n\r\nFrom my point of view, you need build dependencies anyway. For RST you need Sphinx. For ADoc you need ASCIIDoctor. For Markdown other build tools. Whatever you choose you need tools to build the manpage. That's inevitable.\r\n\r\nApart from this, the hosting option is independent from your format. See the comment from luzfcb. That the only work that you need.\r\n\r\nWould you mind to help me to understand your concerns?\r\n\r\n\r\n> Since Sphinx-format documentation needs generation and additional hosting to be usable, this means that this PR is incomplete -- since it leaves the project's documentation in an unusable state.\r\n\r\nTrue. So does ADoc, Markdown or any other format. There is no exception to that. But the hosting is independent from your format.\r\n\r\nI have deliberately excluded hosting questions. This takes some further thoughts and discussions which goes beyond this PR. IMHO, this should be done in a separate PR as you need some testing and you need admin rights for hosting (which I don't have).\r\n\r\n\r\n> Do you think the project is past the point where such a next-level documentation is necessary?\r\n\r\nHonestly, I don't know. When I looked at the manpage, I just saw a need to improve just that. I didn't look that closely at the other documents.\r\n\r\nAs a doc writer, I am naturally happy to see a consistent, clear, well-written, and current docs. :wink: \r\n\r\nOf course, you could create multiple documents aimed at different target groups (users or developers).\r\n\r\nPersonally, if you really want to go this way, I would do it step-by-step. I've started with the first step by improving the manpage. This is probably easier as it is \"just\" a reference. Once this PR is merged and finished, we can think of ways to improve the other documentation.\r\n\r\nIf we mix everything at once in this PR, it just becomes one big mess. :wink:\r\n\r\n\r\n> I wasn't able to find out how to determine which \"tags\" (the .. envvar:: syntax ...)\r\n>\r\n> This knowledge is critical to be able to write .rst fiels and diagnose errors in them whenever those \"tags\" aren't expanded properly.\r\n\r\nI understand your concerns. But wouldn't it be different if we had a another format, be it ADoc, DocBook, or Markdown?\r\n\r\nEvery format has documentation where you can look up to find these details. However, I would doubt if someone really has to know all the details.\r\n\r\nI've created lots of documentation for different projects. What did developers when they wanted to amend the docs (or in this case, the manpage)? According to my experience they just look at the existing examples and copy them and adapt it to their needs.\r\n\r\nIf you are really concerned, we can also provide some help and amend the `CONTRIBUTING.md` file.\r\n\r\n> So I'm requesting that knowledge to be able to take up maintenance of the codebase with your PR.\r\n\r\nSure, if you have questions I'm happy to help. People need to know about it to contribute. But RST/Sphinx (or any other format) is quite common. It's very likely that contributors already know that.",
      "> * It's unnecessary as all its content is available in the manpage files now.\r\n\r\nNot all. I pointed that out earlier.\r\n\r\n> Whatever you choose you need tools to build the manpage. That's inevitable.\r\n\r\nThat's right. But we don't really need a manpage in the repo. It was added by a person who packages Pyenv for some Linux distro. They can generate it themselves as part of their packaging. But we need to provide a facility for them to do that if we're deleting the exisitng manpage.\r\n\r\n\r\n> Honestly, I don't know. When I looked at the manpage, I just saw a need to improve just that. I didn't look that closely at the other documents.\r\n\r\n:bulb: Okay, that finally explains the disconnection! Let me enlighten you on what you really got yourself into... :laughing:\r\n\r\n> As a doc writer, I am naturally happy to see a consistent, clear, well-written, and current docs. wink\r\n\r\nCurrently,\r\n\r\n* our primary user documentation is the built-in console help, README.md, COMMANDS.md and Python-Build's README.md. The main README is the main document that links to the others.\r\n  * to minimize the overlap between COMMANDS.md and the built-in help, we strive to keep in COMMANDS.md only usage notes that do not belong in the built-in help\r\n  * the manpage, as noted above, is a 3rd-party contribution for a specific use case that is not actively maintained as of this writing. When accepting it, we saw to it that it's not too detailed, specifically in order to minimize the risk of obsolescence and contradictions.\r\n  * some more niche use-case-specific notes are on the wiki which the main README links to.\r\n* the developer documentation is CONTRIBUTING.md and MAINTENANCE.md (and technically CONDUCT.md but that's more of a generic declaration).\r\n\r\nAll those can be viewed right here at https://github.com/pyenv/pyenv without a need for any extra steps, not to mention a 3rd-party hosting.\r\n\r\nHopefully, that explains why I'm so cautious about moving the primary documentation elsewhere, doubly so into a format that isn't usable out of the box.\r\n\r\nIdeally, we'd like to see the manpage generated from some of the above.\r\n\r\nWe aren't dogmatic and would accept a conversion of the docs into another format if that has objective benefits -- but as you can see, that's a significantly more drastic undertaking.",
      "> [...]\r\n> \r\n> All those can be viewed right here at https://github.com/pyenv/pyenv without a need for any extra steps, not to mention a 3rd-party hosting.\r\n\r\nThat's true. But you also buy yourself some disadvantages. Keep in mind, GitHub is **not** a _documentation hosting_ system. It never was, it's developed as _code sharing_ system. Sharing doc files is just a byproduct.\r\n\r\nAs such, GitHub comes with some disadvantages in regards to documentation:\r\n\r\n* it doesn't provide any means to link between different related parts of the documentation. \r\n* You cannot search the whole doc.\r\n* Table of contents are restricted to the file.\r\n* Big files can be hard to read. Some doc systems provide a way to split it into different \"chunks\". Not possible on GitHub.\r\n* No specific layout is possible.\r\n* You are restricted to what GitHub allows (file and graphic formats).\r\n* No animation, no JavaScript etc.\r\n* No SEO\r\n\r\n\r\nI see that you want to reduce dependencies, complexity, and the need to host it elsewhere. Those are all valid points. However, you're limiting it to the boundaries of what GitHub can provide. It does not scale. IMHO this project has reached a size where I think it's time to consider how you want to present this project to your users. One way to do it to put more emphasis on documentation.\r\n\r\nIt may be convenient for you as project maintainer, but it's **not** as a user. IMHO we can do better.\r\n\r\nFor a quick overview, it's fine. But if you want to read a cohesive documentation with navigation, search, a good layout, and with links to follow, **GitHub is not a replacement**.\r\n\r\nMost projects that I've visited use one form of doc system to build their documentation and host it somewhere (GH Page or RTD). They see this as a benefit.\r\n\r\n> Hopefully, that explains why I'm so cautious about moving the primary documentation elsewhere, doubly so into a format that isn't usable out of the box.\r\n\r\n:bulb: Thanks for your explanation! That explains a lot. :smile:\r\n\r\nI can understand that your are cautious. It takes some time to set up such an automatic system.\r\n\r\nBelieve me or not, but in my role as doc writer I know that developers want to write code, not documentation. That's okay. But _every_(!) developer that I talked to complains about missing or inaccurate documentation. :joy:  As most tools are not self explanatory, you need accessible and user friendly documentation.\r\n\r\n\r\n> Ideally, we'd like to see the manpage generated from some of the above.\r\n> \r\n> We aren't dogmatic and would accept a conversion of the docs into another format if that has objective benefits -- but as you can see, that's a significantly more drastic undertaking.\r\n\r\nOk, I see what you mean. Seems I completely underestimate that. :joy:\r\n\r\nWell, if I understood you correct, you see a broader doc strategy here, not only the manpage. It all depends on what strategy you want to take. Let me give you a brief theoretical background so we are on the same page before we move to the practical part.\r\n\r\nSorry if this goes a bit beyond the original PR and your idea, but it might be worth to have this detour to better understand the topic.\r\n\r\n\r\n### Theoretical background\r\nIf I'm not completely mistaken, I could identify two target groups:\r\n\r\n* a \"user\" who wants to use pyenv with different Python versions. This is probably your main group.\r\n* A (pyenv) developer who wants to develop subcommands. This is your secondary target group.\r\n\r\nWhat do these people need? Well, from my perspective they need:\r\n\r\n* Installation instruction to install pyenv on their system => task\r\n* \"Howtos\" to use pyenv in their daily work => task\r\n* A list of all pyenv subcommands and their options => reference\r\n* Background information, implementation details, development guides etc. about pyenv for contributors => concept\r\n\r\nIf you organize this into a table, you get this:\r\n\r\n| Guide                  | Category  | Target groups       |\r\n|------------------------|-----------|---------------------|\r\n| Installation           | task      | user, developer     |\r\n| Usage                  | task      | user (developer?)   |\r\n| Manpage                | reference | user                |\r\n| Background information | concept   | developer           |\r\n\r\nAccording to the topic oriented system, you can (and should) split your documentation into one of these categories: tasks for procedures that the user has to execute, concepts for the \"how it works\" and background information, and references to look up like things. For example, a reference would be the manpage. But it could also describe the API or some low level components useful for pyenv developers to understand.\r\n\r\nAnother, similar and widely used doc system is explained here: https://documentation.divio.com/\r\n\r\n\r\n### Putting things together\r\n\r\nThe tricky part is when it comes to maintaining documentation and putting it together.\r\n\r\nTasks and concepts need to be written. That is a manual task and you can't avoid it if you want good documentation. It's inevitable. You already have some topics. These could be analyzed and regrouped. \r\n\r\nFor some things like references, some projects try to autogenerate these. To some degree this can be done, but most of these autogenerated docs are useless. Why? Well, because people  expect examples, context, links to other parts etc. These parts are more difficult to autogenerate. Mostly they have to be manually added.\r\n\r\nFor example, you _could_ generate the manpage if you:\r\n\r\n* add documentation into your code\r\n* extract this documentation into a target format\r\n* combine it and create the manpage\r\n\r\nBut stuffing all these information into the source code makes the code quite verbose.\r\n\r\nSome project does it that way as there is strong connection between code and documentation. Sphinx uses the autodoc extension for this.\r\nFor pyenv, I'm not sure if this would work. I just wanted to illustrate my point.\r\n\r\nTo really create a consistent and up-to-date documentation is... still hard. Here are some ideas to mitigate this issue:\r\n\r\n* Make documentation an equal part of the project.\r\n  If somebody has opened an issue, always ask \"does it affect documentation\"?\r\n* Mention documentation in your contribution file.\r\n  Explain what you expect, how contributors can build it, amend it etc.\r\n  See the example from my [python-semver](https://python-semver.readthedocs.io/en/latest/contribute/doc-semver.html) project.\r\n* mention a documentation item in your pull request template.\r\n  You have already a great checklist. But it doesn't mention documentation at all.\r\n  If people added or changed a new subcommand, the docs must be changed as well. Otherwise it will soon get outdated.\r\n* Don't accept PR when something isn't documented.\r\n  Follow the philosophy that only what's documented is visible to the user.\r\n* Create a GitHub Action that magically detects undocumented options or subcommands.\r\n  This could help contributors and developers and tell them that there is something missing.\r\n* Create a GitHub Action that updates the documentation.\r\n  Whenever a commit is pushed, a release is done, or a tag is set, the CI is triggered and updates the doc. How and when this is done is up to you. GH Actions allow several ways to do that.\r\n  In my project, I host the documentation for python-semver on the [ReadTheDocs](https://python-semver.readthedocs.io/).\r\n\r\nAs you can see, it's not always easy. IMHO, it's a combined effort of developers amending documentation, some automation techniques, the right mindset, and maintainers setting the direction. However, from my point of view, it's worth all the efforts.\r\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc34844ee515ce6a4aab9",
    "number": 2703,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\nNow that 3.12 has its own branch, switch to it with 3.12-dev and point 3.13-dev to main branch...\r\n\r\n### Tests\r\nnone\r\n",
    "head_branch": "branch312",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update 3.12-dev and add 3.13-dev (#2703)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc34844ee515ce6a4aaba",
    "number": 2701,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n\r\nhttps://www.python.org/downloads/release/python-3120b1/",
    "head_branch": "cpython-3.12.0b1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.12.0b1 (#2701)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc34944ee515ce6a4aabb",
    "number": 2697,
    "body": "### Prerequisite\r\n\r\n`libexec/pyenv-init` has diverged somewhat from `rbenv`'s version. [An equivalent PR has been proposed there](https://github.com/rbenv/rbenv/pull/1504), so that this will not introduce a new conflict in the next merge.\r\n\r\n### Description\r\n\r\nKorn shell had two major versions: ’88 and ’93. Some systems have ksh installed under the name `ksh93`. A few systems (maybe only Solaris now) also have a `ksh88`. A few others use the `pdksh` (roughly ’88) or `mksh` (roughly ’93) implementations, originated before ksh was open source.\r\n\r\nAs far as the (very minor) use in pyenv is concerned, these are all equivalent. This change accepts all of the above.\r\n\r\n### Tests\r\n\r\nVerified under `ksh93`, `pdksh`, and `mksh`.\r\n",
    "head_branch": "ksh-versions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Support ksh alternative names (#2697)\n\n* Support ksh versions\r\n\r\nKorn shell had two major versions: ’88 and ’93. Some systems have\r\nksh installed under the name `ksh93`. A few systems (maybe only\r\nSolaris now) also have a `ksh88`. A few others use the `pdksh` (’88)\r\nor `mksh` (’93) implementations, originated before ksh was open source.\r\n\r\nLimit to currently-used versions\r\n\r\n---------\r\n\r\nCo-authored-by: Kevin Schoedel <kps@datatravelandexperiments.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc34a44ee515ce6a4aabc",
    "number": 2691,
    "body": "### TL;DR\r\nMaking the `heredoc` delimiter random and unique in order to prevent attackers from injecting env vars into the pipeline\r\n\r\n### Description\r\nThe `heredoc` delimiter is set to the constant `!`, which allows attackers to break out of the `heredoc` input stream and inject environment variables into the pipeline; This may result in an RCE in `pyenv`'s CI context.\r\n\r\n### Fix\r\nSet the `heredoc` delimiter to a random and unique value for each iteration.\r\n\r\n### PoC\r\nA PR to the repo with maliciously-named files created in the correct directory will result in an RCE in the pipeline:\r\n![image](https://user-images.githubusercontent.com/7353632/235346325-45648b57-6aa1-4a37-9a6f-2e1735247805.png)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2691 from aviadhahami/master\n\nfix: updating heredoc delimiter to be random and unique"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc34b44ee515ce6a4aabd",
    "number": 2687,
    "body": "\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2682\r\n\r\n### Description\r\n- [x] The manpage contains a reference to a file which does only exist on Debian (`/usr/share/pyenv/pyenv_user_setup.bash`).\r\n\r\nIt is replaced by its content to make it usable for other distributions.\r\n\r\n### Tests\r\n- [x] ~My PR adds the following unit tests (if any)~\r\n",
    "head_branch": "bug2682-fix-manpage",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2687 from tomschr/bug2682-fix-manpage\n\nFix #2682: Correct pyenv_user_setup.bash file"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc34c44ee515ce6a4aabe",
    "number": 2677,
    "body": "Fix a mistake reported in https://github.com/pyenv/pyenv/pull/2670#issuecomment-1502655762 - `has_tar_xz_support` else branch should use different URL (download tgz instead of tar.xz) and specify different checksum.\r\n\r\nThis affects both 3.10.11 (#2670) and 3.11.3 (#2671).\r\n\r\nSorry about that.",
    "head_branch": "fix-31011-3113-tarxz",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2677 from mirekdlugosz/fix-31011-3113-tarxz\n\nCorrect link in has_tar_xz_support else branch of 3.10.11 and 3.11.3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc34c44ee515ce6a4aabf",
    "number": 2676,
    "body": "### Description\r\nUse `git -C` instead of changing the user's working directory and switching it back at the end",
    "head_branch": "better_upgrade_command",
    "is_a_fork": true,
    "comments": [
      "> So it needs to be as basic as possible.\r\n\r\nCurrently, the advice uses three commands to run, whereas I believe that one command would suffice and will be simpler. The `-C` switch is a common switch for commands running in the current working directory. \r\n\r\nAdditionally, I noticed that whenever git pull fails, the user's environment gets stuck in the `pyenv` directory. \r\nMy modification ensures that the command leaves the user's environment intact in the event of a git pull failure.\r\n\r\nFinally, I have added quotes around the path in case it contains a space, which would prevent any errors that might occur as a result of unescaped characters.",
      "> Additionally, I noticed that whenever git pull fails, the user's environment gets stuck in the `pyenv` directory.\r\n> My modification ensures that the command leaves the user's environment intact in the event of a git pull failure.\r\n\r\nThat's a fair point -- need to change the 2nd `&&` into `;`",
      "> > So it needs to be as basic as possible.\r\n> \r\n> Currently, the advice uses three commands to run, whereas I believe that one command would suffice and will be simpler. The `-C` switch is a common switch for commands running in the current working directory.\r\n> \r\n> Additionally, I noticed that whenever git pull fails, the user's environment gets stuck in the `pyenv` directory. My modification ensures that the command leaves the user's environment intact in the event of a git pull failure.\r\n> \r\n> Finally, I have added quotes around the path in case it contains a space, which would prevent any errors that might occur as a result of unescaped characters.\r\n\r\n@pyenv/pyenv-core-maintainers , any second opinions?",
      "> > Additionally, I noticed that whenever git pull fails, the user's environment gets stuck in the `pyenv` directory.\r\n> > My modification ensures that the command leaves the user's environment intact in the event of a git pull failure.\r\n> \r\n> That's a fair point -- need to change the 2nd `&&` into `;`\r\n\r\nOn a second thought, even this is okay. Since the commands are for manual use, it's better to break down loudly and clearly point the user that something went wrong and they cannot continue."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc34d44ee515ce6a4aac0",
    "number": 2675,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - N/A\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\n#2609 doesn't actually show link contents for non-selected versions. The test passed because the test/ version of assert_success doesn't support checking the output at the same time.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\nFixes the test false positive",
    "head_branch": "fix_link_showing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix not showing symlink contents for unselected versions in `pyenv versions` (#2675)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc34e44ee515ce6a4aac1",
    "number": 2671,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\nNA\r\n\r\n### Description\r\n- Add CPython 3.11.3 released earlier today: https://www.python.org/downloads/release/python-3113/\r\n\r\n### Tests\r\nNA\r\n",
    "head_branch": "cpython-3.11.3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2671 from mirekdlugosz/cpython-3.11.3\n\nAdd CPython 3.11.3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc34f44ee515ce6a4aac2",
    "number": 2670,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\nNA\r\n\r\n### Description\r\n- Add CPython 3.10.11 released earlier today: https://www.python.org/downloads/release/python-31011/\r\n\r\n### Tests\r\nNA\r\n",
    "head_branch": "cpython-3.10.11",
    "is_a_fork": true,
    "comments": [
      "this below function does not make any sense @mirekdlugosz ?? - as the result - it'll download the same package and it's causing an issue if we don't have xz util installed \r\n```\r\n**if has_tar_xz_support**; then\r\n    install_package \"Python-3.10.11\" \"**https://www.python.org/ftp/python/3.10.11/Python-3.10.11.tar.xz**#3c3bc3048303721c904a03eb8326b631e921f11cc3be2988456a42f115daf04c\" standard verify_py310 copy_python_gdb ensurepip\r\n**else**\r\n    install_package \"Python-3.10.11\" \"**https://www.python.org/ftp/python/3.10.11/Python-3.10.11.tar.xz**#3c3bc3048303721c904a03eb8326b631e921f11cc3be2988456a42f115daf04c\" standard verify_py310 copy_python_gdb ensurepip\r\nfi\r\n```",
      "@hoanguyen-sportsbet you are right. Opened https://github.com/pyenv/pyenv/pull/2677"
    ],
    "commit_messages": [
      "Merge pull request #2670 from mirekdlugosz/cpython-3.10.11\n\nAdd CPython 3.10.11"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc35044ee515ce6a4aac3",
    "number": 2668,
    "body": "Make sure you have checked all steps below.\n\n### Prerequisite\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\n* [ ] My PR addresses the following pyenv issue (if any)\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\n\n### Description\n- [ ] Here are some details about my PR\n\n### Tests\n- [ ] My PR adds the following unit tests (if any)\n",
    "head_branch": "cpython-3.12.0a7",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.12.0a7 (#2668)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc35044ee515ce6a4aac4",
    "number": 2655,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2654\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nSee #2654 for details.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "fix-hook-slow-on-wsl",
    "is_a_fork": true,
    "comments": [
      "Only one test failed:\r\n\r\n```text\r\nnot ok 183 finds versions where present\r\n# (from function `assert_equal' in file test/test_helper.bash, line 67,\r\n#  from function `assert_output' in file test/test_helper.bash, line 76,\r\n#  in test file test/whence.bats, line 20)\r\n#   `assert_output <<OUT' failed\r\n# expected: 2.7\r\n# 3.4\r\n# actual:   /home/runner/work/pyenv/pyenv/test/../libexec/pyenv-latest: line 39: printf: write error: Broken pipe\r\n# 2.7\r\n# 3.4\r\n```\r\n\r\nSeems this is not a functional error, but I have no permission to re-run this workflow in `pyenv` repo. So I ran it again in my fork [with no failure](https://github.com/Harry-Chen/pyenv/actions/runs/4524590349/jobs/7968527704). Maybe it is safe to conclude that all `greadlink` can be safely removed?",
      "Tested on macOS without `greadlink`: all work fine as for me, so, PR ready for merge."
    ],
    "commit_messages": [
      "Try locate `readlink` first in pyenv-hooks, fix #2654 (#2655)\n\n* Remove all use of `greadlink`, fix #2654\r\n\r\nSigned-off-by: Harry Chen <i@harrychen.xyz>\r\n\r\n* revert greadlink back in tests\r\n\r\n---------\r\n\r\nSigned-off-by: Harry Chen <i@harrychen.xyz>\r\nCo-authored-by: Anton Petrov <anton.a.petrov@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc35144ee515ce6a4aac5",
    "number": 2652,
    "body": "A simple update to the READEME with the correct command.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "`-l` is the correct command:\r\n\r\n```\r\n$ pyenv install --help\r\nUsage: pyenv install [-f] [-kvp] <version>...\r\n<...>\r\n  -l/--list          List all available versions\r\n<...>\r\n```"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc35244ee515ce6a4aac6",
    "number": 2648,
    "body": "Ready for [March ](https://www.anaconda.com/blog/upcoming-releases-anaconda-distribution-2023-03-and-beyond) release.\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2648 from anton-petrov/master\n\nAdd Anaconda3-2023.03"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc35344ee515ce6a4aac7",
    "number": 2642,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Description\r\nVersion Bump of miniforge to latest release\r\n\r\n### Tests\r\ninstall it and use it\r\n",
    "head_branch": "miniforge",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Miniforge3-22.11.1-4 (#2642)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc35444ee515ce6a4aac8",
    "number": 2638,
    "body": null,
    "head_branch": "3.12.0a6",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.12.0a6 (#2638)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc35544ee515ce6a4aac9",
    "number": 2635,
    "body": "I used `add_miniconda.py` to generate installation files for miniconda `23.1.0-1`.",
    "head_branch": "update-miniconda-23.1.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add miniconda 23.1.0-1 (#2635)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc35544ee515ce6a4aaca",
    "number": 2634,
    "body": "\r\n\r\n### Description\r\n\r\nThe README mentions `pyenv latest` in the [Prefix auto-resolution to the latest version](https://github.com/pyenv/pyenv/tree/3bfc97a#prefix-auto-resolution-to-the-latest-version) section, which is a subsection of [Install additional Python versions](https://github.com/pyenv/pyenv/tree/3bfc97a#install-additional-python-versions).\r\n\r\nAs such, it seems to me the first command provided should be `pyenv latest -k <prefix>`, as this shows how `pyenv install` would resolve the prefix.\r\n\r\nThis PR does that, plus some minor changes for readability.\r\n\r\n### Prerequisite, Tests\r\n_n/a_\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2634 from mrienstra/patch-1\n\nREADME: clarify behavior of `pyenv latest`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc35644ee515ce6a4aacb",
    "number": 2633,
    "body": "### Description\r\nEven though CI was passing before this PR on macOS 11 and 12, I was not able to build v3.5.10 on macOS 13 with M1. I was getting this, and a failure on importing ctypes:\r\n\r\n```\r\n/private/var/folders/v1/stbp2q2j65x393vm2n2h673c0000gn/T/python-build.20230226071459.74440/Python-3.5.10/Modules/_ctypes/libffi_osx/include/ffi.h:65:3: error: \"Unsupported MacOS X CPU type\"\r\n#       error \"Unsupported MacOS X CPU type\"\r\n        ^\r\n```\r\n\r\nWith these patches, which I copied or adapted from v3.6.15, I got a successful build.\r\n\r\n### Tests\r\nOn macOS 13 with M1:\r\n```\r\npyenv install 3.5.10\r\n```",
    "head_branch": "fix-bpo-36231-on-macos13-v3.5.10",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "bpo-36231 for v3.5.10: fix Unsupported MacOS X CPU type in ffi.h (#2633)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc35744ee515ce6a4aacc",
    "number": 2630,
    "body": "### Description\r\nThis resolves an error encountered on x86_64 for python versions 3.5.10 and 3.6.15 where `./python -c 'import ctypes'` causes an immediate segfault. Also, when pyenv install runs `./python -E -m ensurepip --upgrade --root=/`, this imports ctypes and also causes a segfault. \r\n\r\nThe segfault causes `pyenv install 3.5.10` and the same for 3.6.15 to fail and not install.\r\n\r\nThis bug was resolved in [bpo-27987](https://bugs.python.org/issue27987) for the v2.7 branch and v3.7 branch and later. (Note that in the conversation, although one of the patches was reverted, the revert was reverted at the end.) This PR backports those patches for 3.5.10 and 3.6.15, which were left unfixed. These patches would likely not be accepted upstream because 3.5 and 3.6 are EOL.\r\n\r\nDespite these versions being EOL, I was interested for old times sake. Also, the test harness for chaimleib/intervaltree lists these versions, among others, as test targets. \r\n\r\n### Tests\r\n```\r\nset -e\r\nfor v in 3.5.10 3.6.15; do\r\n  pyenv install $v\r\n  pyenv global $v\r\n  python --version\r\n  python -c 'import ctypes'\r\ndone\r\n```",
    "head_branch": "fix-bpo-27987-on-eol-pythons",
    "is_a_fork": true,
    "comments": [
      "This looks like a solution for some old issues -- https://github.com/pyenv/pyenv/issues/2141 and https://github.com/pyenv/pyenv/issues/2046!",
      "The errors are because 3.5.10 is incompatible with MacOS 11+ (3.6.15 has downstream patches that make it compatible). Going to fix that? [We're fine either way since this is not an additional breakage](https://github.com/pyenv/pyenv/blob/master/CONTRIBUTING.md#adding-version-specific-fixespatches).",
      "Well done! And thank you!"
    ],
    "commit_messages": [
      "Merge pull request #2630 from chaimleib/fix-bpo-27987-on-eol-pythons\n\nbpo-27987 for v3.5.10 and v3.6.15: align by 16bytes on 64bit platforms"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc35844ee515ce6a4aacd",
    "number": 2629,
    "body": "I wanted to try some things within [Venus OS](https://github.com/victronenergy/venus) without killing the python installation there (seemingly a use case for pyenv :-) )\r\n\r\nI used the pyenv source package `v2.3.13.tar.gz` and this failed with\r\n```\r\n# head -1\r\nhead: invalid option -- '1'\r\nBusyBox v1.31.1 (2023-02-09 11:42:03 UTC) multi-call binary.\r\n\r\nUsage: head [OPTIONS] [FILE]...\r\n```\r\n\r\nSo I was tempted to patch pyenv to use `head -n1` instead of `head -1`\r\nIn the systems I know, both are valid.\r\n\r\nIf there are versions of `head` out there which *don't* support `head -n1` I could also implement some check first and use the appropriate version then, which would be an overkill if it's not necessary.\r\n\r\nAny thoughts on this?",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "... probably it's not necessary to patch this in _all places_. I could as well narrow this down.",
      "... not sure if my change caused the check to fail\r\nAlso no clue what to do about it (other than re-run :-) )"
    ],
    "commit_messages": [
      "Support for BusyBox version of `head' (#2629)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc35944ee515ce6a4aace",
    "number": 2626,
    "body": "This is a documentation-only PR, targeted at Apple silicon users trying to follow \"Building for maximum performance\".\r\n\r\nThe `-march=native` flag does not work under the default `clang` version at the time of writing (clang 14):\r\n\r\nhttps://stackoverflow.com/questions/65966969/why-does-march-native-not-work-on-apple-m1\r\n\r\nAdditionally, `--enable-optimizations --with-lto` is only supported by recent Python minor versions on macOS:\r\n\r\nhttps://github.com/python/cpython/issues/86401\r\n\r\nIn the issue above, they mention 3.10+, with the intent to backport. I haven't checked if it's been backported to specific prior micro versions.\r\n\r\nFinally, the installation does not use a Homebrew-updated `clang` by default.\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc35a44ee515ce6a4aacf",
    "number": 2620,
    "body": "Fix indentation issue introduced in https://github.com/pyenv/pyenv/pull/2612",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix indentation (#2620)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc35a44ee515ce6a4aad0",
    "number": 2616,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] No related issue.\r\n\r\n### Description\r\n\r\nAdds CPython `3.10.10`: https://www.python.org/downloads/release/python-31010\r\n\r\n### Tests\r\n\r\nNA\r\n",
    "head_branch": "cpython-3.10.10",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2616 from edgarrmondragon/cpython-3.10.10\n\nAdd CPython 3.10.10"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc35b44ee515ce6a4aad1",
    "number": 2615,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] No related issue.\r\n\r\n### Description\r\n\r\nAdds CPython `3.11.2`: https://www.python.org/downloads/release/python-3112/\r\n\r\n### Tests\r\n\r\nNA\r\n",
    "head_branch": "cpython-3.11.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2615 from edgarrmondragon/cpython-3.11.2\n\nAdd CPython 3.11.2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc35c44ee515ce6a4aad2",
    "number": 2614,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [X] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [X] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [X] My PR does not address any issues\r\n\r\n### Description\r\n- [X] This PR adds the recently released Python 3.12.0a5 to pyenv.\r\n\r\n### Tests\r\n- [X] My PR does not add any unit tests\r\n",
    "head_branch": "3.12.0a5",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2614 from Afront/3.12.0a5\n\nAdd CPython 3.12.0a5"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc35d44ee515ce6a4aad3",
    "number": 2612,
    "body": "Resolves a bug introduced in #2609, `resolve_link` is not defined when `pyenv-realpath.dylib` is built. Here, the public API should be `realpath` but not `resolve_link`.\r\n",
    "head_branch": "bugfix/realpath-in-versions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2612 from laggardkernel/bugfix/realpath-in-versions\n\nFix link resolving in pyenv-versions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc35e44ee515ce6a4aad4",
    "number": 2610,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/pull/2608\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nThe core reason why https://github.com/pyenv/pyenv/pull/2608 happened is because `pyenv-versions` prints `*/envs/*` in addition to the raw `versions/` contents. So the clean way to fix it is to make it not do so in the first place.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\nTest for the added `pyenv-versions` option",
    "head_branch": "version_skip_envs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2610 from native-api/version_skip_envs\n\nIgnore virtualenvs in `pyenv latest' in a clean way"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc35e44ee515ce6a4aad5",
    "number": 2609,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/1563\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nIn non-bare display, if a `versions/` entry is a symlink, show its _direct_ contents (do no resolve further so as not to misinform the user of its contents).\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\nTest the added function",
    "head_branch": "versions_show_links",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Show symlink contents in non-bare `pyenv versions' (#2609)\n\n* Change other tests to use the newly-created convenience function"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc35f44ee515ce6a4aad6",
    "number": 2608,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Workaround for https://github.com/pyenv/pyenv/issues/2606\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nWhen there are virtualenvs, `pyenv-latest` erroneously searches them for prefix resolution, too:\r\n\r\n```\r\n$ echo $PYENV_VERSION\r\npypy2.7-7\r\n$ pyenv versions\r\n  system\r\n  3.10.9\r\n  3.10.9/envs/venv\r\n  3.11-dev\r\n  pypy2.7-7.3.11\r\n* pypy2.7-7.3.11/envs/venvpypy (set by PYENV_VERSION environment variable)\r\n  venv\r\n  venvpypy\r\n```\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n\r\nTest for ignoring specific entry types",
    "head_branch": "pyenv_exclude_virtualenvs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix pyenv-latest to ignore virtualenvs (#2608)\n\n* Add test, exclude alphas as well"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc36044ee515ce6a4aad7",
    "number": 2605,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2604\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nWe were overriding any argument to --enable-framework and --enable-universalsdk, but not deleting the original arguments.\r\nNow that any user-supplied arguments are properly of higher priority than ours, that overriding stopped taking place.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\nTest deleting the original argument",
    "head_branch": "python_build_framework_replace",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix overriding arguments for --enable-framework and --enable-universalsdk after #2592 (#2605)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc36144ee515ce6a4aad8",
    "number": 2602,
    "body": "This adds a more recent build of the \"nogil\" fork of Python.\r\n\r\nThis includes a number of bug fixes, including compatibility with cloudpickle.\r\n\r\nSee https://github.com/pyenv/pyenv/pull/2342 for the PR for the previous build.",
    "head_branch": "nogil-3.9.10-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2602 from colesbury/nogil-3.9.10-1\n\nAdd more recent build of nogil Python."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc36244ee515ce6a4aad9",
    "number": 2601,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - None. A prerequisite to fix https://github.com/pyenv/pyenv-virtualenv/issues/441\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nA missed bit when implementing autoresolution. The code was using `-d versions/${version}` instead of delegating to `pyenv-prefix`.\r\nAlso did a cleanup to avoid iterating twice.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n* test for resolving a prefix\r\n* test for resolving version name for hooks ([`conda.bash`](https://github.com/pyenv/pyenv-virtualenv/blob/d5f2878a97ea647cabe4c1be57f3df4dc161fd3c/etc/pyenv.d/which/conda.bash) hook in Pyenv-virtualenv uses this)",
    "head_branch": "pyenv_which_latest",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix `pyenv which` to support auto-resolved prefixes (#2601)\n\n* Resolve version name that hooks see\r\n* Avoid a 2nd iteration over configured versions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc36344ee515ce6a4aada",
    "number": 2599,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2569\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\n#2568 inadvertently broke `:latest` due to changed logic.\r\nTests passed because there was no test for `:latest`.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n\r\nTest for `:latest`.\r\nNote that other tests disable hooks. We enable only Pyenv built-in ones for this particular test.",
    "head_branch": "python_build_latest",
    "is_a_fork": true,
    "comments": [
      "sorry to forgot about this @native-api \r\n\r\nEdit: in #2569 , the problem was with 2.3.9, but #2568 was merge after and release in 2.3.10",
      "That's okay @rockandska . As I said, the reason this slipped through is because we had no unit test for `:latest`."
    ],
    "commit_messages": [
      "Fix `:latest` after #2568 (#2599)\n\n* Cleanup mocks logic\r\n* Add test for `:latest`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc36344ee515ce6a4aadb",
    "number": 2596,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2578\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nThe comment at https://github.com/pyenv/pyenv/blob/bd618ea9ef445a2610afb035021e50bfcf30a396/plugins/python-build/bin/python-build#L2210 said that rpath does not need to be set in MacOS.\r\nLooks like this is not the case anymore: `bin/python` was linking to the stock Apple's `libpython` without it.\r\n\r\n@yyuu , as the person who authored https://github.com/pyenv/pyenv/commit/0d85193f39186ef35fc67ff599dd46570d5635eb, do you remember anything? Maybe `rpath` only needs to be added to `PYTHON_LDFLAGS`?\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\nN/A",
    "head_branch": "shared_macos",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix wrong libpython being linked to in MacOS (#2596)\n\nWithout rpath, python would link up to the system's libpython"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc36444ee515ce6a4aadc",
    "number": 2595,
    "body": "`self.flavor` is accessed in this function on lines 185 and 191.\r\n\r\nThe current code will raise a `NameError` instead of the expected `ValueError`.\r\n\r\n% `flake8 . --count --select=E9,F63,F7,F82,Y --show-source --statistics`\r\n```\r\n./plugins/python-build/scripts/add_miniconda.py:203:26: F821 undefined name 'flavor'\r\n        raise ValueError(flavor)\r\n                         ^\r\n1     F821 undefined name 'flavor'\r\n1\r\n```\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add_miniconda.py: fix typo oversight (#2595)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc36544ee515ce6a4aadd",
    "number": 2594,
    "body": "…enSSL built with SSLv3 support\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2181\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\nImplement the envvar workaround as per https://github.com/pyenv/pyenv/issues/2181#issuecomment-985960613 for the affected versions.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\nN/A",
    "head_branch": "fix_openssl_sslv3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix a compilation error in 3.8.10+ and 3.9.5+ when linking against OpenSSL built with SSLv3 support (#2594)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc36644ee515ce6a4aade",
    "number": 2593,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2585\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nReworked https://github.com/pyenv/pyenv/pull/2586 . It turns out, only some deps are searched by CPython's Configure with pkg-config. At least Readline and Sqlite3 aren't (this is fixed [for readline](https://github.com/python/cpython/commit/e925241d95d8095adf67f492042f97254ff82ec1) in `3.12.0a1` and [for sqlite3](https://github.com/python/cpython/commit/29e5874d5a9205c488f783356d0cf3f115399327) in `3.11.0a3`).\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n* Tests for added logic",
    "head_branch": "fix_freebsd",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2593 from native-api/fix_freebsd\n\nFix using dependencies from Ports in FreeBSD that are not searched with pkg-config"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc36744ee515ce6a4aadf",
    "number": 2592,
    "body": "Only set --enable-shared if user hasn't supplied --disable-shared\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2580\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n* Test for the priority of user-supplied configure/make options\r\n* Test for user-supplied --disable-shared",
    "head_branch": "disable_shared",
    "is_a_fork": true,
    "comments": [
      "This breaks `pyenv-doctor` for me, as `--enable-shared` gets supplied during the CC executable test. I'm unsure if I should file a bug for `pyenv` or `pyenv-doctor` regarding this.\r\n\r\n    configure:2403: checking whether the C compiler works\r\n    configure:2425: gcc  -pipe -m64 -march=generic64 -mtune=native -I/tmp/pyenv-doctor.20230202143757.4056269/prefix/include -L/tmp/pyenv-doctor.20230202143757.4056269/prefix/lib -Wl,-rpath,/tmp/pyenv-doctor.20230202143757.4056269/prefix/lib conftest.c  >&5\r\n    cc1: error: bad value 'generic64' for '-march=' switch\r\n    cc1: note: valid arguments to '-march=' switch are: nocona core2 nehalem corei7 westmere sandybridge corei7-avx ivybridge core-avx-i haswell core-avx2 broadwell skylake skylake-avx512 cannonlake icelake-client rocketlake icelake-server cascadelake tigerlake cooperlake sapphirerapids alderlake bonnell atom silvermont slm goldmont goldmont-plus tremont knl knm x86-64 x86-64-v2 x86-64-v3 x86-64-v4 eden-x2 nano nano-1000 nano-2000 nano-3000 nano-x2 eden-x4 nano-x4 k8 k8-sse3 opteron opteron-sse3 athlon64 athlon64-sse3 athlon-fx amdfam10 barcelona bdver1 bdver2 bdver3 bdver4 znver1 znver2 znver3 btver1 btver2 native\r\n    configure:2429: $? = 1\r\n    configure:2467: result: no\r\n    configure: failed program was:\r\n    | /* confdefs.h */\r\n    | #define PACKAGE_NAME \"pyenv-doctor\"\r\n    | #define PACKAGE_TARNAME \"pyenv-doctor\"\r\n    | #define PACKAGE_VERSION \"0.0.1\"\r\n    | #define PACKAGE_STRING \"pyenv-doctor 0.0.1\"\r\n    | #define PACKAGE_BUGREPORT \"yamashita@geishatokyo.com\"\r\n    | #define PACKAGE_URL \"\"\r\n    | /* end confdefs.h.  */\r\n    | \r\n    | int\r\n    | main ()\r\n    | {\r\n    | \r\n    |   ;\r\n    |   return 0;\r\n    | }\r\n    configure:2472: error: in `/tmp/python-build.20230202143757.4056286/python-pyenv-doctor':\r\n    configure:2474: error: C compiler cannot create executables\r\n    See `config.log' for more details",
      "> This breaks `pyenv-doctor` for me, as `--enable-shared` gets supplied during the CC executable test. I'm unsure if I should file a bug for `pyenv` or `pyenv-doctor` regarding this.\r\n> \r\n\r\nhttps://github.com/pyenv/pyenv-doctor/issues/13#issuecomment-1414220902"
    ],
    "commit_messages": [
      "Merge pull request #2592 from native-api/disable_shared\n\n* Fix priority for user-supplied configure and make flags\r\n* Don't set --enable-shared if user supplied --disable-shared"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc36744ee515ce6a4aae0",
    "number": 2591,
    "body": "Make sure you have checked all steps below.\r\n\r\nThis is the result of running the script in https://github.com/pyenv/pyenv/pull/2560.\r\n\r\nTest script (with untracked files):\r\n\r\n```bash\r\n#!/usr/bin/bash\r\n\r\nset -eu\r\n\r\nfor f in $(git ls-files --others --exclude-standard -- plugins/python-build/share); do\r\n    bin/pyenv install $(basename $f) &> /dev/null\r\n    bin/pyenv local $(basename $f)\r\n    echo \"Testing $(basename $f)\"\r\n    bin/pyenv exec python3 -V\r\n    echo\r\n    bin/pyenv uninstall -f $(basename $f) &> /dev/null\r\ndone\r\n```\r\n\r\nOutput:\r\n\r\n```\r\nTesting mambaforge-22.9.0-0\r\nPython 3.10.6\r\n\r\nTesting mambaforge-22.9.0-1\r\nPython 3.10.6\r\n\r\nTesting mambaforge-22.9.0-3\r\nPython 3.10.8\r\n\r\nTesting mambaforge-4.10.2-0\r\nPython 3.9.5\r\n\r\nTesting mambaforge-4.10.3-0\r\nPython 3.9.5\r\n\r\nTesting mambaforge-4.10.3-1\r\nPython 3.9.5\r\n\r\nTesting mambaforge-4.10.3-2\r\nPython 3.9.6\r\n\r\nTesting mambaforge-4.10.3-3\r\nPython 3.9.6\r\n\r\nTesting mambaforge-4.10.3-4\r\nPython 3.9.6\r\n\r\nTesting mambaforge-4.10.3-5\r\nPython 3.9.6\r\n\r\nTesting mambaforge-4.10.3-6\r\nPython 3.9.7\r\n\r\nTesting mambaforge-4.10.3-7\r\nPython 3.9.7\r\n```\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "add-missing-miniforge-versions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add missing Miniforge/Mambaforge versions (4.10.2-0 - 22.9.0-3) (#2591)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc36844ee515ce6a4aae1",
    "number": 2590,
    "body": "This PR adds the recently released Python 3.12.0a4 to `pyenv`.",
    "head_branch": "3.12.0a4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2590 from Afront/3.12.0a4\n\nAdd CPython 3.12.0a4"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc36944ee515ce6a4aae2",
    "number": 2586,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2585\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nIt looks like this part of the code was never adapted from Rbenv...\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\nN/A",
    "head_branch": "use_freebsd_ports",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix using dependencies from Ports in BSD with no pkg-config (#2586)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc36a44ee515ce6a4aae3",
    "number": 2583,
    "body": "I used `add_miniconda.py` to generate installation files for miniconda `22.11.1-1`. I needed to change the conda version processing logic to handle this.\r\n\r\nIn addition, I realized that `add_miniconda.py` was missing support for Python 3.10, so I added it as an acceptable Python version.\r\n\r\n---\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "update-miniconda-22.11.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2583 from aphedges/update-miniconda-22.11.1\n\nAdd miniconda 22.11.1-1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc36b44ee515ce6a4aae4",
    "number": 2579,
    "body": "Closes https://github.com/pyenv/pyenv/issues/2577",
    "head_branch": "faster-cpython",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2579 from hauntsaninja/faster-cpython\n\nMention how to build for maximum performance"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc36c44ee515ce6a4aae5",
    "number": 2576,
    "body": "add pypy 7.3.11 release\r\n",
    "head_branch": "pypy-7.3.11",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add PyPy 7.3.11 (#2576)\n\nCo-authored-by: Dan Dees <dand@appsmiths.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc36c44ee515ce6a4aae6",
    "number": 2575,
    "body": "The documentation as written will not run a newly-installed version since the shims need to be rehashed first. This change makes that clear.\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "doc_update",
    "is_a_fork": true,
    "comments": [
      "A manual rehash is not needed because [`pyenv install` does it automatically after the installation succeeds](https://github.com/pyenv/pyenv/blob/f897c502022cf3132574afc084fddf9252644d72/plugins/python-build/bin/pyenv-install#L281-L283).",
      "It was required for me on a fresh install. After `pyenv install 3.11.1` and `pyenv global 3.11.1`, python/python3/pip/pip3 still invoked the system-installed versions. After 'pyenv rehash`, I got the new 3.11.1 for all those commands.",
      "That's not normal. If you report it and provide the necessary diagnostic info, we can look into it.",
      "What diagnostic info do you need? Is there a script I can run to capture\nwhat you'd like?\n\n\nOn Fri, Dec 30, 2022 at 10:32 AM native-api ***@***.***>\nwrote:\n\n> That's not normal. If report it and provide the necessary diagnostic info,\n> we can look into it.\n>\n> —\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pyenv/pyenv/pull/2575#issuecomment-1368044972>, or\n> unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AA5RJFDNRNW6KJL4TODYNOTWP4TFVANCNFSM6AAAAAATL5WQZU>\n> .\n> You are receiving this because you authored the thread.Message ID:\n> ***@***.***>\n>\n",
      "Everything is listed in the issue template."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc36d44ee515ce6a4aae7",
    "number": 2574,
    "body": "Following conversation from https://github.com/pyenv/pyenv/pull/2423",
    "head_branch": "fig-autocomplete",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Fig as autocomplete suggestion  (#2574)\n\nCo-authored-by: Ivan Pozdeev <vano@mail.mipt.ru>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc36e44ee515ce6a4aae8",
    "number": 2568,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [X] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [X] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [X] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/919\r\n\r\n### Description\r\nAs stated in #919, many of the users (as me) expect to have pyenv to install all versions specified in `.python-version` and have `pyenv install` works the same way as `pyenv local` works\r\n\r\n### Tests\r\n- [X] My PR adds the following unit tests (if any)\r\n  - `install proper multi versions`\r\n  - `install resolves a prefix with multi versions`\r\n  - `install pyenv local multi versions by default`\r\n  - `multi arguments for pyenv-install`\r\n- [X] My PR remove the following unit tests (if any)\r\n  - `too many arguments for pyenv-install`\r\n    - replaced by  `multi arguments for pyenv-install` since user could specify multi versions now",
    "head_branch": "fix/919",
    "is_a_fork": true,
    "comments": [
      "Thank you!",
      "Just seen that it was added too in https://github.com/actions/setup-python/pull/567\r\nPerfect timing ^^"
    ],
    "commit_messages": [
      "Merge pull request #2568 from rockandska/fix/919\n\nAllow multiple versions for pyenv-install"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc36f44ee515ce6a4aae9",
    "number": 2566,
    "body": "This makes the output look slightly odd:\r\n\r\n```\r\n$ pyenv install 3.10.9\r\npython-build: use openssl@1.1 from homebrew\r\npython-build: use readline from homebrew\r\nDownloading Python-3.10.9.tar.xz...\r\n-> https://www.python.org/ftp/python/3.10.9/Python-3.10.9.tar.xz\r\nInstalling Python-3.10.9...\r\npython-build: use readline from homebrew\r\npython-build: use zlib from xcode sdk\r\nInstalled Python-3.10.9 to /Users/tklauser/.pyenv/versions/3.10.9\r\n\r\n$\r\n```\r\n\r\nRemove the stray newline to match other pyenv commands.\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - None\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n  - Fixes a stray newline at the end of `pyenv install ...` when installing using `python-build`.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n  - None\r\n",
    "head_branch": "python-build-stray-newline",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove stray newline after python-build installation (#2566)\n\nTo match other Pyenv commands"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc37044ee515ce6a4aaea",
    "number": 2565,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - [Closes https://github.com/pyenv/pyenv/issues/XXXX (https://github.com/pyenv/pyenv/issues/2563)\r\n\r\n### Description\r\n- [x] Add support for new version Anaconda3-2022.10\r\n\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Anaconda3-2022.10 (#2565)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc37044ee515ce6a4aaeb",
    "number": 2564,
    "body": "### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - None\r\n\r\n### Description\r\nPython 3.7.15, 3.7.16, and 3.8.16 use `openssl-1.1.1q` which need the same patch used in previous versions.\r\n\r\n### Tests\r\nNo new tests\r\n",
    "head_branch": "openssl-patches",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2564 from samdoran/openssl-patches\n\nAdd `openssl` patches for 3.7.15, 3.7.16, and 3.8.16"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc37144ee515ce6a4aaec",
    "number": 2561,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n`pyenv-init --detect-shell` will output non-bash script result while configuration files are not supported, since placeholder values are used for explanation.\r\n\r\n### Tests\r\nTest for the new function.",
    "head_branch": "fix-export-shell",
    "is_a_fork": true,
    "comments": [
      "> Perhaps if you could update the Pyenv-Installer PR to show how it is supposed to be used?\r\n\r\nOkay, you already did. Let's see then..."
    ],
    "commit_messages": [
      "Fix non-bash output while detecting shell (#2561)\n\nCo-authored-by: Ivan Pozdeev <vano@mail.mipt.ru>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc37244ee515ce6a4aaed",
    "number": 2560,
    "body": "Used in https://github.com/pyenv/pyenv/pull/2559.\r\n\r\nThis takes inspiration from the similar script for miniconda, but it simplifies by  using the GitHub Releases API instead of scraping HTML.\r\n\r\nIt only backfills releases from the first page of the GitHub API results, which I think is reasonable.\r\n\r\n- - -\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "add-miniforge-script",
    "is_a_fork": true,
    "comments": [
      "@native-api sorry for the delay, I've updated this now to fill in all of the last 20 releases (if missing).\r\n\r\n<details>\r\n<summary>Local output</summary>\r\n\r\n```shell\r\n$ python add_miniforge.py\r\nINFO:__main__:Looking for 22.9.0-3 in /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build\r\nINFO:__main__:Looking for 22.9.0-2 in /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build\r\nINFO:__main__:Looking for 22.9.0-1 in /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build\r\nINFO:__main__:Looking for 22.9.0-0 in /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build\r\nINFO:__main__:Looking for 4.14.0-2 in /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build\r\nINFO:__main__:Looking for 4.14.0-1 in /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build\r\nINFO:__main__:Looking for 4.14.0-0 in /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build\r\nINFO:__main__:Looking for 4.13.0-1 in /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build\r\nINFO:__main__:Looking for 4.13.0-0 in /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build\r\nINFO:__main__:Looking for 4.12.0-3 in /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build\r\nINFO:__main__:Downloading 4.12.0-3\r\nINFO:__main__:Writing 5 specs for miniforge to /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build/miniforge3-4.12.0-3\r\nINFO:__main__:Writing 5 specs for mambaforge to /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build/mambaforge-4.12.0-3\r\nINFO:__main__:Looking for 4.12.0-1 in /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build\r\nINFO:__main__:Downloading 4.12.0-1\r\nINFO:__main__:Writing 5 specs for miniforge to /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build/miniforge3-4.12.0-1\r\nINFO:__main__:Writing 5 specs for mambaforge to /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build/mambaforge-4.12.0-1\r\nINFO:__main__:Looking for 4.12.0-2 in /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build\r\nINFO:__main__:Downloading 4.12.0-2\r\nINFO:__main__:Writing 5 specs for miniforge to /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build/miniforge3-4.12.0-2\r\nINFO:__main__:Writing 5 specs for mambaforge to /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build/mambaforge-4.12.0-2\r\nINFO:__main__:Looking for 4.12.0-0 in /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build\r\nINFO:__main__:Downloading 4.12.0-0\r\nINFO:__main__:Writing 5 specs for miniforge to /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build/miniforge3-4.12.0-0\r\nINFO:__main__:Writing 5 specs for mambaforge to /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build/mambaforge-4.12.0-0\r\nINFO:__main__:Looking for 4.11.0-4 in /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build\r\nINFO:__main__:Downloading 4.11.0-4\r\nINFO:__main__:Writing 5 specs for miniforge to /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build/miniforge3-4.11.0-4\r\nINFO:__main__:Writing 5 specs for mambaforge to /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build/mambaforge-4.11.0-4\r\nINFO:__main__:Looking for 4.11.0-3 in /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build\r\nINFO:__main__:Downloading 4.11.0-3\r\nINFO:__main__:Writing 2 specs for miniforge to /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build/miniforge3-4.11.0-3\r\nINFO:__main__:Writing 2 specs for mambaforge to /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build/mambaforge-4.11.0-3\r\nINFO:__main__:Looking for 4.11.0-2 in /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build\r\nINFO:__main__:Downloading 4.11.0-2\r\nINFO:__main__:Writing 5 specs for miniforge to /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build/miniforge3-4.11.0-2\r\nINFO:__main__:Writing 5 specs for mambaforge to /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build/mambaforge-4.11.0-2\r\nINFO:__main__:Looking for 4.11.0-1 in /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build\r\nINFO:__main__:Downloading 4.11.0-1\r\nINFO:__main__:Writing 5 specs for miniforge to /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build/miniforge3-4.11.0-1\r\nINFO:__main__:Writing 5 specs for mambaforge to /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build/mambaforge-4.11.0-1\r\nINFO:__main__:Looking for 4.11.0-0 in /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build\r\nINFO:__main__:Downloading 4.11.0-0\r\nINFO:__main__:Writing 5 specs for miniforge to /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build/miniforge3-4.11.0-0\r\nINFO:__main__:Writing 5 specs for mambaforge to /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build/mambaforge-4.11.0-0\r\nINFO:__main__:Looking for 4.10.3-10 in /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build\r\nINFO:__main__:Looking for 4.10.3-9 in /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build\r\nINFO:__main__:Downloading 4.10.3-9\r\n\r\nINFO:__main__:Writing 5 specs for miniforge to /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build/miniforge3-4.10.3-9\r\nINFO:__main__:Writing 5 specs for mambaforge to /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build/mambaforge-4.10.3-9\r\nINFO:__main__:Looking for 4.10.3-8 in /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build\r\nINFO:__main__:Downloading 4.10.3-8\r\nINFO:__main__:Writing 2 specs for miniforge to /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build/miniforge3-4.10.3-8\r\nINFO:__main__:Writing 2 specs for mambaforge to /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build/mambaforge-4.10.3-8\r\nINFO:__main__:Looking for 4.10.3-7 in /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build\r\nINFO:__main__:Downloading 4.10.3-7\r\nINFO:__main__:Writing 5 specs for miniforge to /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build/miniforge3-4.10.3-7\r\nINFO:__main__:Writing 5 specs for mambaforge to /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build/mambaforge-4.10.3-7\r\nINFO:__main__:Looking for 4.10.3-6 in /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build\r\nINFO:__main__:Downloading 4.10.3-6\r\nINFO:__main__:Writing 5 specs for miniforge to /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build/miniforge3-4.10.3-6\r\nINFO:__main__:Writing 5 specs for mambaforge to /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build/mambaforge-4.10.3-6\r\nINFO:__main__:Looking for 4.10.3-5 in /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build\r\nINFO:__main__:Downloading 4.10.3-5\r\nINFO:__main__:Writing 5 specs for miniforge to /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build/miniforge3-4.10.3-5\r\nINFO:__main__:Writing 5 specs for mambaforge to /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build/mambaforge-4.10.3-5\r\nINFO:__main__:Looking for 4.10.3-4 in /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build\r\nINFO:__main__:Downloading 4.10.3-4\r\nINFO:__main__:Writing 5 specs for miniforge to /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build/miniforge3-4.10.3-4\r\nINFO:__main__:Writing 5 specs for mambaforge to /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build/mambaforge-4.10.3-4\r\nINFO:__main__:Looking for 4.10.3-3 in /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build\r\nINFO:__main__:Downloading 4.10.3-3\r\nINFO:__main__:Writing 5 specs for miniforge to /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build/miniforge3-4.10.3-3\r\nINFO:__main__:Writing 5 specs for mambaforge to /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build/mambaforge-4.10.3-3\r\nINFO:__main__:Looking for 4.10.3-2 in /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build\r\nINFO:__main__:Downloading 4.10.3-2\r\nINFO:__main__:Writing 5 specs for miniforge to /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build/miniforge3-4.10.3-2\r\nINFO:__main__:Writing 5 specs for mambaforge to /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build/mambaforge-4.10.3-2\r\nINFO:__main__:Looking for 4.10.3-1 in /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build\r\nINFO:__main__:Downloading 4.10.3-1\r\nINFO:__main__:Writing 5 specs for miniforge to /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build/miniforge3-4.10.3-1\r\nINFO:__main__:Writing 5 specs for mambaforge to /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build/mambaforge-4.10.3-1\r\nINFO:__main__:Looking for 4.10.3-0 in /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build\r\nINFO:__main__:Downloading 4.10.3-0\r\nINFO:__main__:Writing 5 specs for miniforge to /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build/miniforge3-4.10.3-0\r\nINFO:__main__:Writing 5 specs for mambaforge to /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build/mambaforge-4.10.3-0\r\nINFO:__main__:Looking for 4.10.2-0 in /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build\r\nINFO:__main__:Downloading 4.10.2-0\r\nINFO:__main__:Writing 5 specs for miniforge to /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build/miniforge3-4.10.2-0\r\nINFO:__main__:Writing 5 specs for mambaforge to /home/smcgivern/forks/pyenv/plugins/python-build/share/python-build/mambaforge-4.10.2-0\r\n```\r\n</details>\r\n\r\nThat is, I add these files:\r\n\r\n```\r\nmambaforge-22.9.0-0\r\nmambaforge-22.9.0-1\r\nmambaforge-22.9.0-3\r\nmambaforge-4.10.2-0\r\nmambaforge-4.10.3-0\r\nmambaforge-4.10.3-1\r\nmambaforge-4.10.3-2\r\nmambaforge-4.10.3-3\r\nmambaforge-4.10.3-4\r\nmambaforge-4.10.3-5\r\nmambaforge-4.10.3-6\r\nmambaforge-4.10.3-7\r\nmambaforge-4.10.3-8\r\nmambaforge-4.10.3-9\r\nmambaforge-4.11.0-0\r\nmambaforge-4.11.0-1\r\nmambaforge-4.11.0-2\r\nmambaforge-4.11.0-3\r\nmambaforge-4.11.0-4\r\nmambaforge-4.12.0-0\r\nmambaforge-4.12.0-1\r\nmambaforge-4.12.0-2\r\nmambaforge-4.12.0-3\r\nmambaforge-4.13.0-1\r\nmambaforge-4.14.0-0\r\nmambaforge-4.14.0-1\r\nmambaforge-4.14.0-2\r\nminiforge3-22.9.0-0\r\nminiforge3-22.9.0-1\r\nminiforge3-22.9.0-3\r\nminiforge3-4.10.2-0\r\nminiforge3-4.10.3-0\r\nminiforge3-4.10.3-1\r\nminiforge3-4.10.3-2\r\nminiforge3-4.10.3-3\r\nminiforge3-4.10.3-4\r\nminiforge3-4.10.3-5\r\nminiforge3-4.10.3-6\r\nminiforge3-4.10.3-7\r\nminiforge3-4.10.3-8\r\nminiforge3-4.10.3-9\r\nminiforge3-4.11.0-0\r\nminiforge3-4.11.0-1\r\nminiforge3-4.11.0-2\r\nminiforge3-4.11.0-3\r\nminiforge3-4.11.0-4\r\nminiforge3-4.12.0-0\r\nminiforge3-4.12.0-1\r\nminiforge3-4.12.0-2\r\nminiforge3-4.12.0-3\r\nminiforge3-4.13.0-0\r\nminiforge3-4.13.0-1\r\nminiforge3-4.14.0-0\r\nminiforge3-4.14.0-1\r\nminiforge3-4.14.0-2\r\n```\r\n\r\nDo you want me to create a separate PR for those?",
      "@smcgivern hi, did you test every new version you added?",
      "> Do you want me to create a separate PR for those?\r\n\r\n@smcgivern Yes, I think you can add all of these files in one new PR.",
      "@anton-petrov yep, I put the details in the PR that adds those versions. This is a _very basic_ test 😃 "
    ],
    "commit_messages": [
      "Merge pull request #2560 from smcgivern/add-miniforge-script\n\nAdd a script to add the latest miniforge and mambaforge versions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc37344ee515ce6a4aaee",
    "number": 2559,
    "body": "These are available, but only as the latest (rolling) version, thanks to https://github.com/pyenv/pyenv/pull/2019. However, it's also useful to be able to get these more recent versions specifically, so we can pin them.\r\n\r\nI am not sure how to comprehensively test this, but it works on my machine 😃 \r\n\r\n```shell\r\n$ bin/pyenv install miniforge3-22.9.0-2\r\nDownloading Miniforge3-22.9.0-2-Linux-x86_64.sh.sh...\r\n-> https://github.com/conda-forge/miniforge/releases/download/22.9.0-2/Miniforge3-22.9.0-2-Linux-x86_64.sh\r\nInstalling Miniforge3-22.9.0-2-Linux-x86_64.sh...\r\nCollecting package metadata (current_repodata.json): done\r\nSolving environment: done\r\n\r\n\r\n==> WARNING: A newer version of conda exists. <==\r\n  current version: 22.9.0\r\n  latest version: 22.11.1\r\n\r\nPlease update conda by running\r\n\r\n    $ conda update -n base -c conda-forge conda\r\n\r\n\r\n\r\n## Package Plan ##\r\n\r\n  environment location: /home/smcgivern/.pyenv/versions/miniforge3-22.9.0-2\r\n\r\n  added / updated specs:\r\n    - conda=22.9.0\r\n    - pip\r\n\r\n\r\nThe following packages will be downloaded:\r\n\r\n    package                    |            build\r\n    ---------------------------|-----------------\r\n    ca-certificates-2022.12.7  |       ha878542_0         143 KB  conda-forge\r\n    certifi-2022.12.7          |     pyhd8ed1ab_0         147 KB  conda-forge\r\n    openssl-3.0.7              |       h0b41bf4_1         2.5 MB  conda-forge\r\n    ------------------------------------------------------------\r\n                                           Total:         2.8 MB\r\n\r\nThe following packages will be UPDATED:\r\n\r\n  ca-certificates                      2022.9.24-ha878542_0 --> 2022.12.7-ha878542_0 None\r\n  certifi                            2022.9.24-pyhd8ed1ab_0 --> 2022.12.7-pyhd8ed1ab_0 None\r\n  openssl                                  3.0.7-h166bdaf_0 --> 3.0.7-h0b41bf4_1 None\r\n\r\n\r\n\r\nDownloading and Extracting Packages\r\nca-certificates-2022 | 143 KB    | : 100% 1.0/1 [00:00<00:00,  2.99it/s]\r\ncertifi-2022.12.7    | 147 KB    | : 100% 1.0/1 [00:00<00:00,  4.97it/s]\r\nopenssl-3.0.7        | 2.5 MB    | : 100% 1.0/1 [00:00<00:00,  1.78it/s]\r\nPreparing transaction: done\r\nVerifying transaction: done\r\nExecuting transaction: done\r\nRetrieving notices: ...working... done\r\nInstalled Miniforge3-22.9.0-2-Linux-x86_64.sh to /home/smcgivern/.pyenv/versions/miniforge3-22.9.0-2\r\n\r\n$ bin/pyenv local miniforge3-22.9.0-2\r\n$ python3 -V\r\nPython 3.10.6\r\n$ bin/pyenv which python3\r\n/home/smcgivern/.pyenv/versions/miniforge3-22.9.0-2/bin/python3\r\n```\r\n\r\nI also have a script similar to https://github.com/pyenv/pyenv/blob/master/plugins/python-build/scripts/add_miniconda.py that I used to add this. I can submit that in a separate PR if needed.\r\n\r\n- - -\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "add-miniforge3-22.9.0-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2559 from smcgivern/add-miniforge3-22.9.0-2\n\nAdd miniforge3 and mambaforge 22.9.0-2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc37444ee515ce6a4aaef",
    "number": 2558,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Additional fixes for: #2494 and #2520 \r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\nPython released new version of 3.9 few days ago, add support to it\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\nNone",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix compilation error when building OpenSSL 1.1.1q in MacOS 11+ for 3.9.16 (#2558)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc37544ee515ce6a4aaf0",
    "number": 2557,
    "body": null,
    "head_branch": "pypysrc",
    "is_a_fork": true,
    "comments": [
      "You can test PRs in your fork if you enable Actions for it."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc37544ee515ce6a4aaf1",
    "number": 2555,
    "body": "request to test pypy src build\r\n",
    "head_branch": "pypysrc",
    "is_a_fork": true,
    "comments": [
      "included in another PR"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc37644ee515ce6a4aaf2",
    "number": 2554,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2294\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Maybe we should experiment with flags and look at how CPython is built in the homebrew:\r\nhttps://github.com/Homebrew/homebrew-core/blob/51fdfef54d478e1fbfa66724d621c06a44be7a3c/Formula/python%403.11.rb#L139"
    ],
    "commit_messages": [
      "Merge pull request #2554 from anton-petrov/master\n\nBuild CPython with--enable-shared flag by default on non-mac systems"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc37744ee515ce6a4aaf3",
    "number": 2553,
    "body": "Add pypy 3.7.10 release\r\nfix mac package name in pypy 3.7.9 release\r\nremove windows support for pypy",
    "head_branch": "pypy7.3.10",
    "is_a_fork": true,
    "comments": [
      "Passes all tests other than for \"src\" builds\r\n",
      "We're fine to accept the PR as is. But maybe we should look into this while we're at it?\r\n\r\nThe checks are basically needed to verify the combined build logic -- that there is no critical breakage in the main supported environments.\r\n\r\nInstalling a binary PyPy before building is not a problem. Neither are resources, see https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources .",
      "ok the source builds now work\r\npyenv-install sets up the reqs if not present\r\n\r\nmac-os fails to build pypy\r\n\r\n   File \"/Users/runner/work/pyenv/pyenv/versions/2.7.18/lib/python2.7/ctypes/__init__.py\", line 366, in __init__\r\n    self._handle = _dlopen(self._name, mode)\r\n[translation:ERROR] OSError: dlopen(/Applications/Xcode_14.0.1.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/lib/libexpat.tbd, 0x0006): tried: '/Applications/Xcode_14.0.1.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/lib/libexpat.tbd' (not a mach-o file), '/Applications/Xcode_14.0.1.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/lib/libexpat.1.tbd' (not a mach-o file)\r\n\r\ndlopen find libexpat.tbd not to be a mac executable\r\n\r\nmaybe libexpat needs to be installed on mac rather than rummaged from mac sdx in the image?\r\n\r\nNever typed on a mac, no idea how to fix ",
      ">            PYENV_VERSION=2.7.18 pip install curses genc pycparser\r\n\r\nI think curses is built in now, no package anymore.  That source build dep check in pyenv-install must be very old.",
      "> I think curses is built in now, no package anymore. That source build dep check in pyenv-install must be very old.\r\n\r\nOkay. That said, `genc` and `pycparser` are not mentioned in https://doc.pypy.org/en/latest/build.html . But `cffi` is mentioned. Maybe that documentation is also too old? :wink: ",
      "You also said that using PyPy as bootstrap would be much faster.\r\nWhich PyPy version is it's better to use?\r\n\r\nThe problem with 2.7.18 is it's EOL and can break at any time in a newer environment. Or just when PyPI drops support...",
      "wow, u have good eye for detail...\r\n\r\npypy build COULD be out of date, only 2 guys doing most of the work, cfbolz and mattipicus.\r\n\r\nPypy was first done 2007 if I recall, so the rpythhon translator must still need 2.x\r\n\r\nwe could try pypy 2.7, they keep releasing it.  I have not built pypy with a pypy binary release.\r\n\r\ncffi might be needed for shared libs in the build.  You are right, the build is \"succeeding\" on linux without it.\r\n\r\nI have the pypy repo checked out.  I will look for genc and pyparser.",
      "appears to me genc and pyparser are provided by \"rpython\", the internal runtime for pypy.\r\n\r\noccurs to me that pypy project wrote and provides cffi, so pypy build may bootstrapy cffi itself now.\r\nhttps://foss.heptapod.net/pypy/cffi\r\narmin rigo still working on it regularly, last commit 5 days ago\r\n\r\nTry no deps at all, see where we get!",
      "Checked it locally. `pycparser` is required, others are not.\r\n\r\nLinux seems fine (got a build \"killed\", probably ran out of memory).\r\nIn MacOS, it can't find libexpat for some reason even though I've installed it and set envvars. That seems to be PyPy's problem.\r\n\r\nSo I'll rebase it to clarify the history and merge.",
      "sounds like this is as good as we can do\r\n\r\nthanks for the yaml work, I am unfamliar with github actions, if learn would be better contributor.",
      "does pypy 2.7 work as a req?  I was trying that since easy to do",
      "I didn't yet check pypy2.7 as bootstrap, doing that now.",
      "> The problem with 2.7.18 is it's EOL and can break at any time in a newer environment. Or just when PyPI drops support...\r\n\r\nthey can't\r\nhttps://twitter.com/pypyproject/status/1160209907079176192\r\nThere is no plan to deprecate the 2.7 version of PyPy, basically for as long as PyPy exists. RPython is based on Python 2, which is not really realistic to change, so we need PyPy2 to bootstrap. Documented here: [http://doc.pypy.org/en/latest/faq.html#how-long-will-pypy-support-python2](http://doc.pypy.org/en/latest/faq.html#how-long-will-pypy-support-python2)",
      "+            # brew install expat\r\n+            # sudo apt install -yq libexpat1-dev\r\nfrom    Remove no-longer-needed PyPy prerequisites\r\nwe can remove dead code before merge...",
      "> * ```\r\n>              # brew install expat\r\n>       ```\r\n> \r\n>     * ```\r\n>              # sudo apt install -yq libexpat1-dev\r\n>       ```\r\n> \r\n> \r\n> from Remove no-longer-needed PyPy prerequisites we can remove dead code before merge...\r\n\r\nAlready",
      "for mac issue\r\n\r\nnot a mach-o file error in Python - mismatching architecture\r\nhttps://developer.apple.com/forums/thread/717724\r\n\r\nFor a Python project, I'm reading a .so file with the ctypes.CDLL and ctypes.cdll.LoadLibrary(...),\r\n\r\nans:\r\n\r\nApple platforms draw an important distinction between architecture and platform. Just because something is the right architecture doesn’t necessarily mean it’ll work on the target platform. In this case there’s an obvious difference, ELF versus Mach-O, but within Mach-O there are subtle differences. I explain this in more detail in my [An Apple Library Primer](https://developer.apple.com/forums/thread/715385)  post.",
      "so mac python is elf (which one?), and github mac image is mac-o\r\n\"architecture\" but both are x86",
      "The \"not a mach-o file\" error doesn't happen with PyPy bootstrapper.\r\nSo it looks like we're done here when the checks complete.",
      "that means the pyenv mac python binary is incompatible with this architecture\r\n\r\nconsidering systemic problem\r\n\r\nDid we install cpython wrong (platfrom x86 but elf on mac o image)\r\nor is pyenv idea of mac builds broken (need both, as msg above)",
      "> Did we install cpython wrong (platfrom x86 but elf on mac o image)\r\n> or is pyenv idea of mac builds broken (need both, as msg above)\r\n\r\n```\r\n% file /Users/admin/.pyenv/versions/2.7.18/bin/python\r\n/Users/admin/.pyenv/versions/2.7.18/bin/python: Mach-O 64-bit executable x86_64\r\n```\r\n\r\nThe error message said that it tried to `_dlopen` a `.tbd` which is not a real library AFAICS.\r\nSo it seems to be a flaw in the library locator.",
      "Okay, success!\r\n\r\nGreat teamwork!"
    ],
    "commit_messages": [
      "Merge pull request #2553 from dand-oss/pypy7.3.10\n\nAdd Pypy 7.3.10"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc37844ee515ce6a4aaf4",
    "number": 2552,
    "body": "Add pypy 3.7.10 release\r\nfix mac package name in pypy 3.7.9 release",
    "head_branch": "pypy3.7.10",
    "is_a_fork": true,
    "comments": [
      "replaced with newer"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc37944ee515ce6a4aaf5",
    "number": 2551,
    "body": "The auto-resolve feature (#2487) means that\r\n\r\n```\r\npyenv install miniforge3\r\n```\r\n\r\ninstalls miniforge3-4.10.3-10 and not the exactly named \"miniforge3\" recipe.  Renaming \"miniforge3\" to \"miniforge3-latest\" solves this issue allowing users to execute\r\n\r\n```\r\npyenv install miniforge3-latest\r\n```\r\n\r\nThis is similar to the naming of the current \"miniconda3-latest\" recipe.\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [n/a] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [n/a] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [n/a] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\n### Tests\r\n- [n/a] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "add-miniforge3-latest-suffix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2551 from nwh/add-miniforge3-latest-suffix\n\nadd -latest suffix to miniforge3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc37944ee515ce6a4aaf6",
    "number": 2550,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n\r\n### Description\r\n- Add Python versions 3.7.16, 3.8.16, 3.9.16 per CONTRIBUTING guidelines\r\n- Port pre-existing patches from 3.7.15\r\n- Hashes generated using `curl <url> | sha256sum`\r\n\r\n### Tests\r\n- All versions install from the Docker image.",
    "head_branch": "add-3-x-16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.7.16, 3.8.16, 3.9.16 (#2550)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc37a44ee515ce6a4aaf7",
    "number": 2549,
    "body": "### Description\r\n- [x] Added latest CPython version: 3.11.1\r\n\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2549 from anton-petrov/master\n\nAdd CPython 3.11.1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc37b44ee515ce6a4aaf8",
    "number": 2546,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "nedbat/3-12-0-a3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc37c44ee515ce6a4aaf9",
    "number": 2545,
    "body": null,
    "head_branch": "3.12.0a3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2545 from saaketp/3.12.0a3\n\nAdd CPython 3.12.0a3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc37d44ee515ce6a4aafa",
    "number": 2544,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] ~Please consider implementing the feature as a hook script or plugin as a first step.~\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] ~Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.~\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] ~My PR addresses the following pyenv issue (if any)~\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Released on 12/06/2022\r\n- [x] https://www.python.org/downloads/release/python-3109/\r\n\r\n### Tests\r\n```\r\n❯ neofetch --stdout\r\nOS: Ubuntu 22.04.1 LTS on Windows 10 x86_64\r\nKernel: 5.10.102.1-microsoft-standard-WSL2\r\nShell: zsh 5.8.1\r\n```\r\n```\r\n❯ pyenv --version\r\npyenv 2.3.7-2-g58bbbf88\r\n```\r\n```\r\n❯ pyenv install 3.10.9\r\nDownloading Python-3.10.9.tar.xz...\r\n-> https://www.python.org/ftp/python/3.10.9/Python-3.10.9.tar.xz\r\nInstalling Python-3.10.9...\r\nWARNING: The Python tkinter extension was not compiled and GUI subsystem has been detected. Missing the Tk toolkit?\r\nInstalled Python-3.10.9 to /home/rudisimo/.pyenv/versions/3.10.9\r\n```\r\n```\r\n❯ pyenv local 3.10.9\r\n❯ python -VV\r\nPython 3.10.9 (main, Dec  6 2022, 17:39:34) [GCC 11.3.0]\r\n```\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "I needed the latest stable release of `3.10` for an internal script which uses a combination of  `python-build` and the latest tag from [python/cpython](https://github.com/python/cpython) to build a nightly development container. Python `3.10.9` was released earlier today so I took the opportunity to send a PR.",
      "Thanks for the first contribution to the project, @rudisimo !"
    ],
    "commit_messages": [
      "Merge pull request #2544 from rudisimo/master\n\nAdd CPython 3.10.9"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc37d44ee515ce6a4aafb",
    "number": 2540,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nThe automatic installer have long been requested to edit user's config files automatically(https://github.com/pyenv/pyenv-installer/issues/112).\r\nHowever, logics for determining user's current shell and configuration files have already implemented in the `pyenv-init` script.\r\nTo reduce duplication, this PR enables `pyenv-init` to help detecting user's shell and config files for other scripts.\r\nOnce this PR get merged, we are able to proceed in https://github.com/pyenv/pyenv-installer/pull/137\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "detect-shell",
    "is_a_fork": true,
    "comments": [
      "CC @native-api "
    ],
    "commit_messages": [
      "Merge pull request #2540 from ianchen-tw/detect-shell\n\nExport detected shell environment in pyenv-init"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc37e44ee515ce6a4aafc",
    "number": 2538,
    "body": "### Prerequisite\r\n* [x ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\nI'm  always forget where this oneliner is and I feel like having it directly in the readme only makes things easier right?\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Copy auto installer oneliner to README (#2538)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc37f44ee515ce6a4aafd",
    "number": 2535,
    "body": "Fix markdown because there was a space at the beginning of the `git clone` command\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Previously displayed readme:\r\n<img width=\"877\" alt=\"image\" src=\"https://user-images.githubusercontent.com/54832625/204267820-a5ac3e49-ef6d-4a32-ab1e-385b1c69644e.png\">\r\n"
    ],
    "commit_messages": [
      "Fix typo in README.md (#2535)\n\nThere was a space at the beginning of the `git clone` command"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc38044ee515ce6a4aafe",
    "number": 2531,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/1675\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nSee https://github.com/pyenv/pyenv/issues/1675#issuecomment-1263585074 for the issue description and https://github.com/pyenv/pyenv/issues/1675#issuecomment-1263652478 for explanation.\r\n\r\n> The reason is that Pyenv sets the `PYENV_VERSION` envvar in the environment of the executed command.\r\n\r\nThat was added in https://github.com/rbenv/rbenv/commit/8ee2f2657a088851d0aa75736c7b0305a10522f1 to ensure the selected version is used when PATH is not changed by `pyenv-exec` (e.g. for the system version).\r\n\r\nThe envvar ensures that the called subcommands are working with the correct version. AFAICS, it's not _strictly_ needed but it steamlines things -- e.g. avoids a repeated call to `pyenv-version-name`.\r\nBut when invoking the command itself, the changed PATH ensures that the right executables are getting the priority.\r\n\r\nHowever, we only add one PATH entry now, for the leading version. If multiple alt versions are selected, we need to add them all to ensure correct selection with just PATH.\r\nIf `system` occurs in the middle of the list, we'll probably have to add the following entries to the _tail_ of PATH.\r\nAnd probably remove `shims` from PATH, for good measure.\r\n\r\nTeam, do you think we should fix the PATH manipulation now, or wait until users complain, at which point we'll be able to obtain details on the intended behavior?\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "unset_version",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc38144ee515ce6a4aaff",
    "number": 2528,
    "body": "### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2522\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nIn Ubuntu, `aria2c` is only available as a snap. Snaps cannot write to `/tmp` where we download stuff\r\n(the download succeeds as `strace` shows but the result is silently discarded).\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\nNone",
    "head_branch": "aria2c_snap_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Support `aria2c` being a snap (#2528)\n\nLikely in Ubuntu where it's only available as a snap"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc38244ee515ce6a4ab00",
    "number": 2527,
    "body": null,
    "head_branch": "3.12.0a2",
    "is_a_fork": true,
    "comments": [
      "Please bump OpenSSL to the latest 1.1.1 release. 1.1.1q is broken in MacOS and we had to apply a patch for it.",
      "@native-api Done (I hoped it was as simple as just changing the file name and hash from 1.1.1q to 1.1.1s). No idea what the 1 cancelled checks means.",
      "Thanks!"
    ],
    "commit_messages": [
      "Add CPython 3.12.0a2 (#2527)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc38244ee515ce6a4ab01",
    "number": 2526,
    "body": "Add option to skip PATH shim push to front.  This is useful when one uses pyenv --path in a login script, and wants to init pyenv functions in each shell (i.e. zshrc).  However, in certain cases, like when using pipenv, one needs zshrc to NOT push the pyenv shims to the front of the path.\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n\r\n### Description\r\n-  Add option --no-path-update to skip PATH var manipulation.\r\n-  Change `refute_line` to look for substrings matches\r\n    This fixes, for example, the --no_hash test, which was automatically passing \r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any):\r\nTests for the new --no-push-path option.\r\n\r\nFixes #2389\r\n",
    "head_branch": "nopath",
    "is_a_fork": true,
    "comments": [
      "With `--no-path-update`, what does `eval \"$(pyenv init --path --no-path-update)\"` do, exactly? It seems to me that nothing :slightly_smiling_face: \r\n\r\nAnother user has had the same probem as you in https://github.com/pyenv/pyenv/issues/2389 , and the way we were intending to do to fix that was to add a switch to not _push_ shims to the start of PATH if they're already there.",
      "I want the shims to not get pushed to the front when in a pipenv shell... Would your solution work for this?\r\n\r\n> With --no-path-update, what does eval \"$(pyenv init --path --no-path-update)\" do, exactly?\r\n\r\nThat does nothing, indeed.  I could make it an error...\r\n\r\n",
      "> I want the shims to not get pushed to the front when in a pipenv shell... Would your solution work for this?\r\n\r\nYes. As for the name, my best idea is \"`--no-push-path`\".",
      "OK, I rewrote the patch based on --no-push-path.   I have not extensively tested this, however.",
      "I've already fixed this for myself locally by patching the output of pyenv:\r\n\r\n```bash\r\neval \"$(pyenv init - | sed -n '/PYENV_SHELL/,$p')\"\r\n```\r\n\r\nI'm just trying to be a good citizen and produce something useful for others...",
      "Sorry for the test failures.  I'm running tests locally now and verified they passed.\r\n\r\nI rewrote the `--no-push-path` tests to check for correct path manipulation logic rather than looking for specific bash lines.",
      "I've eliminated redundant printed logic and replaced unit tests with integration tests; `refute_line` changes are now unneeded.",
      "Thank you for your efforts! :rocket: "
    ],
    "commit_messages": [
      "Add --no-push-path option (#2526)\n\nIn some advanced shell setups, the order of custom-added PATH entries is important.\r\nWe disregard it by default, always pushing shims to the front of PATH,\r\nto ensure that Pyenv works even in poorly maintained shell environments\r\nand with minimal hassle for non-export users\r\n(an attempt to do the opposite (#1898) has ended in a disaster).\r\nSome advanced users are however ready and able to carefully maintain their environment\r\nand deal with breakages and inconvenience. This option is for them."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc38344ee515ce6a4ab02",
    "number": 2524,
    "body": "as defined here https://github.com/pypa/virtualenv/tree/main/src/virtualenv/activation/nushell",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add activate.nu to shim creation exception list (#2524)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc38444ee515ce6a4ab03",
    "number": 2521,
    "body": "…name\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2519\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nMakes a complete name resolve to itself before trying to apply it as a prefix.\r\n\r\nI hesitated to add this initially because subcommands that use `pyenv-latest` already do that -- if the prefix resolution fails, they fall back to using the original name. However, if there are 2 names like `foo` and `foo.bar`, `pyenv latest foo` undesirably succeeds.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\nTest for the new use case",
    "head_branch": "prefix_of_itself",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix resolution of a name that's a prefix of another name (#2521)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc38544ee515ce6a4ab04",
    "number": 2520,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Additional fixes for: https://github.com/pyenv/pyenv/issues/2494\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\nPython updated openssl to version 1.1.1q in 3.8.15, 3.9.15 and 3.11. Python 3.10.7 is at 1.1.1o.\r\nThe following PR added a patch for building openssl 1.1.1q on 3.11 but not for 3.8.15 and 3.9.15.\r\nhttps://github.com/pyenv/pyenv/pull/2500\r\nThis applies the openssl 1.1.1q patches to the 3.8.15 and 3.9.15 builds of python.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\nN/A",
    "head_branch": "fix_3.9.15",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2520 from twangboy/fix_3.9.15\n\nFix compilation error when building OpenSSL 1.1.1q in MacOS 11+ for 3.9.15 and 3.8.15"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc38644ee515ce6a4ab05",
    "number": 2518,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nI saw 036fd63bbd9fea17f3363a511a264e7eaf47ce88, and I was inspired to create a very rudimentary and uncontroversial [`.editorconfig`](https://editorconfig.org) file. Although it isn't a strict check, it should limit newline problems in the future. More can be added as desired, but I don't want to impose a style that isn't already present.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "add-editorconfig",
    "is_a_fork": true,
    "comments": [
      "I'd say it's decently common. There are lists of editors that directly support it (https://editorconfig.org/#pre-installed) and that have plugins for it (https://editorconfig.org/#download), but I'm not sure how much these various editors are used or how often the plugins are installed.\r\n\r\n`.editorconfig` files are definitely used, though. For example, the CPython repository has its own [`.editorconfig`](https://github.com/python/cpython/blob/57be5459593bbd09583317ebdafc4d58ae51dbf4/.editorconfig).\r\n\r\nUltimately, style needs to be enforced by CI/code review, but `.editorconfig` at least makes it easier to write in that style."
    ],
    "commit_messages": [
      "Add .editorconfig (#2518)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc38744ee515ce6a4ab06",
    "number": 2517,
    "body": "For some reason, these 2 files are set to have CRLF, and they always show as changed on my Linux machines. Since pyenv is meant to be used on Linux, I suggest changing the end-of-line to LF.",
    "head_branch": "eol",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "style: convert crlf to lf (#2517)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc38744ee515ce6a4ab07",
    "number": 2516,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nSince other compilers have their own sets of base headers, prepending XCode SDK's include directory will most probably break them.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\nN/A",
    "head_branch": "cc_no_xcode_sdk",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't use Zlib from XCode SDK if a custom compiler is used (#2516)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc38844ee515ce6a4ab08",
    "number": 2511,
    "body": "Make sure you have checked all steps below.\n\n### Prerequisite\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\n* [ ] My PR addresses the following pyenv issue (if any)\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\n\n### Description\n- [x] Here are some details about my PR\n\nThis PR adds explicit [permissions section](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions) to workflows. This is a security best practice because by default workflows run with [extended set of permissions](https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token) (except from `on: pull_request` [from external forks](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/)). By specifying any permission explicitly all others are set to none. By using the principle of least privilege the damage a compromised workflow can do (because of an [injection](https://securitylab.github.com/research/github-actions-untrusted-input/) or compromised third party tool or action) is restricted.\nIt is recommended to have [most strict permissions on the top level](https://github.com/ossf/scorecard/blob/main/docs/checks.md#token-permissions) and grant write permissions on [job level](https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs) case by case.\n\n### Tests\n- [ ] My PR adds the following unit tests (if any)",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "The flip side is we'll need to constantly figure out what each permission controls -- thus which permissions we need for each operation.\r\nWhile the documentation at https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions, https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token and https://docs.github.com/en/rest/overview/permissions-required-for-github-apps#administration is extensive, as usual, it lacks fine details.\r\n\r\nE.g.:\r\n* Why did you grant any permissions to the job if it doesn't use the Github REST API, at all?\r\n* What permissions do we need to e.g. create a PR or a release?\r\n* Do we need any permissions for operations that stem from the workflow definition -- e.g. to run a dependent action or pass data to it?\r\n\r\n---\r\n\r\nHow probable and severe are the risks anyway? E.g.: \r\n* We have workflow start protection for new contributors to filter out bad agents\r\n* Actions' token doesn't have permissions for Administration so even injecting malicious code can't hijack the project or the organization.\r\n\r\nLet's compose a basic [risk heat map](https://www.balbix.com/insights/cyber-risk-heat-map/) so that we can decide which risks we defend against and which we don't.\r\n(Since this requires a colored table, a Google spreadsheet would probably be the most convenient.)",
      "I agree that the documentation could have been better. Though I don't agree, that it introduces a constant burden. After the workflows run with minimal privileges it requires modification only if you add a job or step that requires new permission. If that happens you will see something like \"Resource is not available\". Often the missing permission is obvious from the purpose of the action: comment on issue, label pull request, etc.\r\n\r\nThe risk of **not** hardening the workflows is low:\r\n* Workflows triggered on pull_request from forks already run with restricted permissions.\r\n* 3 of 4 of the workflows are also triggered on `push` which means the changes were accepted and pushed to the repository. However any tool that is installed with, for example, `brew install` can be compromised for a short period of time and would run on any innocuous push to the repository.\r\n*  The no-response.yml runs on comments and by scheduler. The only risk here I see a compromise of the `lee-dohm/no-response` action. By restricting the token permissions, it could only open/close/modify issues. Otherwise it would be able to modify the content of the repository or modify releases.\r\n\r\nFrom my point of view it is more like security hygene not running commands with sudo unnecessarily.",
      "> After the workflows run with minimal privileges it requires modification only if you add a job or step that requires new permission.\r\n\r\nThat's the problem. We do currently plan to add new workflows:\r\n* Detect new Python releases, create PRs and probably merge them, too.\r\n* Create releases recently after a new CPython release comes and bump Homebrew formula",
      "So we can merge this, it won't hurt anything now, but whenever we start tinkering with workflow, it'll probably start causing problems and will be removed since it's wasted time and nerves for questionable gain...",
      "I would rather not merge then if you anticipate it will be removed.",
      "@pyenv/pyenv-core-committers , any thoughts on this?",
      "> @pyenv/pyenv-core-committers , any thoughts on this?\r\n\r\nI see that the current risk is low, but \"better safe than sorry\". \r\nWith new upcoming workflows, it might be a bumpy road to set it up, but it is not that often such new workflows are being made.\r\nI don't mind trying this change out. 👍 ",
      "Okay, in it goes.\r\n\r\n@sashashura , thanks for adding explanations why the permissons are needed!"
    ],
    "commit_messages": [
      "GitHub Workflows security hardening (#2511)\n\nSigned-off-by: Alex <aleksandrosansan@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc38944ee515ce6a4ab09",
    "number": 2510,
    "body": "Now that 3.11 is released with pyenv 2.3.6, we should start building against it.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Python version 3.11 to the macOS build (#2510)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc38a44ee515ce6a4ab0a",
    "number": 2507,
    "body": "As per title, there is a mismatched backtick and single quote. I have chosen the single quote as the more common convention.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Those are [traditional UNIX quotes](https://unix.stackexchange.com/questions/85303/where-does-this-convention-for-quotation-marks-come-from). We use them elsewhere in the codebase, too.",
      "Interesting, I don't think I've ever encountered this with **single** quotes. Fair enough, however."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc38b44ee515ce6a4ab0b",
    "number": 2506,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2505\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nQuoting in the code was insufficient for a nested Bash call\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\nN/A",
    "head_branch": "init-space",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix invalid syntax error in `pyenv init -` if PYENV_ROOT has spaces (#2506)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc38c44ee515ce6a4ab0c",
    "number": 2503,
    "body": "### Description\r\n\r\nWhile checking if there is a new release containing Python 3.11, I stumbled upon discussion in #2474.\r\nI decided to contribute to the docs here with a summary checklist of things to be done for a new release.\r\nI am also happy to help with the new releases, if this is suitable.\r\nThe process is quite similar to what [we are doing in model-bakery](https://github.com/model-bakers/model_bakery/releases/), but we also have a GitHub action hooked to every new git tag that drafts a release in PyPI (which in your case is not needed).\r\n\r\nBest,\r\nRust",
    "head_branch": "release-process-docs",
    "is_a_fork": true,
    "comments": [
      "> Do you think this belongs in CONTRIBUTING.md? This is not for contributors but rather for maintainers.\r\n> \r\n> We would benefit from a Github action that would create a formula bump PR in Homebrew. Rbenv has one. But I don't know if we would have access to the PR branch if a mechanical bump doesn't work and needs adjustment (this happened before).\r\n\r\nReleasing is also a way of contributing, but I agree, we could separate this to a different page. Feel free to add comments on naming and wording there!\r\n\r\n---\r\n\r\nRegarding the automated release - https://github.com/rbenv/rbenv/blob/master/.github/workflows/release.yml does seem rather simple, but seems to need a token. [Action docs](https://github.com/mislav/bump-homebrew-formula-action).\r\nI am not sure I am fully following you.\r\nThe way I see the process:\r\n - a maintainer creates a PR with the new version (or directly pushes it to main branch)\r\n - then they draft a new release via GitHub interface with the new tag\r\n - New tag on GitHub triggers \"bump-homebrew-formula-action\" to run\r\n - Profit?\r\n\r\nBut I am not yet familiar with homebrew processes, happy to get more input.",
      "Okay, now about the releasing.\r\n\r\nI can assign you permissions sufficient to create releases.\r\n\r\nHowever, you must know that the upcoming release is supposed to be a special one.\r\n\r\nFor the first time, we're going to use donated money to fund development. Namely, I'm going to take some funds for implementing https://github.com/pyenv/pyenv/pull/2487 which was the most requested feature. Yuu may also take something for his past contributions as the project's founder and by far the largest contributor. (We've discussed this in the team chat some time ago.)\r\n\r\nSo in the release notes, we need to specifically and prominently inform readers of this, thank all our past sponsors for making this -- and specifically the feature -- possible, and add a section at the bottom listing them. In the following releases, we're going to list sponsors since the last release.\r\n\r\nThis is crucial because this is long overdue: we've set up sponsorship near the end of the last year IIRC and have yet to acknowledge them!\r\n\r\nFrom what I can see, donors can be seen in the Github Sponsors dashboard, even without any special permissions. Some donate directly to our Open Source Collective, they can also be seen there without any special rights.",
      "@native-api fantastic idea to mention beloved sponsors! And you guys definitely deserve this funding.\r\nI drafted some notes for the upcoming release, please, share your thoughts if you'd see it differently, or correct me if I missed something or someone:\r\n\r\n--- \r\n\r\n```\r\n## Thanks to Sponsors\r\n\r\nThis release was possible thanks to our community and specifically to:\r\n\r\n* @samuelcolvin\r\n* @deronnax\r\n* @subecho\r\n* @getsentry\r\n* @thijsmie\r\n* @jgigliotti\r\n* @9bow\r\n* @gabrielmbmb\r\n* @xoflare\r\n* [38elements](https://opencollective.com/38elements)\r\n* [Pedro R.](https://opencollective.com/pedro-r)\r\n\r\nIf your company wants to support the development or to give some love to pyenv, you can join our supporters by:\r\n\r\n* https://github.com/sponsors/pyenv\r\n* https://opencollective.com/pyenv\r\n\r\n\r\n## What's Changed\r\n* ...\r\n\r\n```\r\n",
      "Okay, here're my thoughts:\r\n\r\n> ## What's Changed\r\n> * ...\r\n\r\nThe sponsors section should definitely be at the bottom since it's an addendum, the main topic is the release. Placing it above would give it undue weight and IMO would look like we're trying to suck up to the backers.\r\n\r\n> * samuelcolvin\r\n> * deronnax\r\n> * subecho\r\n\r\nFor the same reason, it should be short and to the point -- which means writing them out in one line.\r\n\r\nI'd also choose a more formal style. We're a high-profile project, IMO it'd be better to project an image of a mature, reliable organization that their money would be safe with and put to appropriate use (which we are and do, but still it'd be better to show that as well) -- by giving appropriate credit where it's due yet keeping our dignity.\r\n\r\nI'd write smth like this:\r\n\r\n> Sponsors\r\n> ======\r\n> \r\n> For the first time, we've used your donated money to fund the project's development. In particular, to implement the most requested feature, [Auto-resolve prefixes to the latest version](https://github.com/pyenv/pyenv/pull/2487).\r\n> \r\n> As such, we're finally giving the long-overdue credit to our generous sponsors! Thank you, guys, for making this possible!\r\n> \r\n> &lt;list the sponsors&gt;",
      "Perfect. But we would mention all the backers I mentioned, right? I hope I did not forget anyone...\r\n\r\n```\r\n## What's Changed\r\n\r\n* Add CPython 3.10.8 (#2480)\r\n* Add CPython 3.7.15, 3.8.15, and 3.9.15 (#2482)\r\n* Add CPython 3.11.0 (#2493)\r\n* Add CPython 3.12.0a1 (#2495)\r\n* Add graalpy-22.3.0 (#2497)\r\n* Auto-resolve prefixes to the latest version (#2487)\r\n  * It must be a full prefix -- the actual searched prefix is `<prefix>[-.]`\r\n  * Other flavors are likely sorted incorrectly atm\r\n  * Prereleases and versions with some suffixes (`-dev`, `-src`, `-latest`) are not searched\r\n  * `pyenv uninstall` has been excluded from the resolution feature: deleting a dynamically selected installation could be problematic\r\n* Fix OpenSSL 1.1.1q compilation error in MacOS 11+ (#2500)\r\n* Link to Tcl/Tk from Homebrew via pkgconfig for 3.11+ (#2501)\r\n* Fix syntax error in `pyenv init -` if PYENV_ROOT has spaces (#2506)\r\n\r\n## Sponsors\r\n\r\nFor the first time, we've used your donated money to fund the project's development. In particular, to implement the most requested feature, [Auto-resolve prefixes to the latest version](https://github.com/pyenv/pyenv/pull/2487).\r\n\r\nAs such, we're finally giving the long-overdue credit to our generous sponsors! Thank you, guys, for making this possible!\r\n\r\n@samuelcolvin, @deronnax, @subecho, @getsentry, @thijsmie, @jgigliotti, @9bow, @gabrielmbmb, @xoflare, @codingjoe, [38elements](https://opencollective.com/38elements), [Pedro R.](https://opencollective.com/pedro-r), @digglife, @bburtin, @stall84, @0x962, @danchev, @atr0phy, @iamjinlei0312\r\n```\r\n\r\nI am also happy if you would want to draft this release. \r\nIn the end I think we came up with a good announcement, and in the same time I was not involved in any development here, but rather had an intention to push this to the finish line.\r\nAlso, if you'd need my further input, I am available 👍 ",
      "> I hope I did not forget anyone...\r\n\r\nNeed to mention \"past sponsors\" from https://github.com/sponsors/pyenv, too. \"Current\" must be \"last donation was no longer than X ago\" (looks like no longer than a month or has an ongoing subscription). But since we've never ever did that yet...",
      "@native-api updated my previous message to include 7 past sponsors, good point. 👍 \r\nI also added cleaned version of a current changelog.\r\n\r\nAnd thank you for the invitation. I am ready to draft a new GitHub release according to our freshly documented process.\r\nThen I could dig into brew releases and prepare a PR into https://github.com/Homebrew/homebrew-core/commits/master/Formula/pyenv.rb\r\n\r\n",
      "I almost forgot. Under https://github.com/pyenv/pyenv/pull/2487 's entry in the release notes, we should mention the caveats outlined in the PR's description.",
      "> I almost forgot. Under #2487 's entry in the release notes, we should mention the caveats outlined in the PR's description.\r\n\r\nAdded!",
      "@native-api so I will proceed with the GitHub release. Also, in case something will go wrong, release descriptions are editable.",
      "Release is in place:\r\nhttps://github.com/pyenv/pyenv/releases/tag/v2.3.6\r\n\r\nI also created a PR in homebrew:\r\nhttps://github.com/Homebrew/homebrew-core/pull/114597 (upd.: it is live in homebrew as well)"
    ],
    "commit_messages": [
      "Document the release process (#2503)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc38c44ee515ce6a4ab0d",
    "number": 2501,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2499\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nCPython 3.11.0 dropped support for `--with-tcl-tk-*` in favor of `pkgconfig`.\r\n<s>Older versions also (supposedly) support `pkgconfig` so it should be safe to use it everywhere.</s>\r\nModerately old versions (2.7.18) do not support `--with-tcl-tk` so we have to use a flag after all.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\nTest for the new envvar",
    "head_branch": "tcltk_homebrew_pkgconfig",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Discover Tcl/Tk from Homebrew via pkgconfig for 3.11+ (#2501)\n\nCPython 3.11+ dropped support for --with-tcl-tk-*\r\nin favor of pure pkgconfig"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc38d44ee515ce6a4ab0e",
    "number": 2500,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2494\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nAdds a patch for OpenSSL\r\nUnlocks patching packages other than Python\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\nN/A",
    "head_branch": "fix_macos_openssl_build",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2500 from native-api/fix_macos_openssl_build\n\nFix compilation error when building OpenSSL 1.1.1q in MacOS 11+"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc38e44ee515ce6a4ab0f",
    "number": 2497,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n\r\n### Description\r\nAdd graalpy 22.3.0, released yesterday. Note it has been renamed upstream from GraalPython to GraalPy. We've also added support for Aarch64 and M1.\r\n\r\nCC @timfel \r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add graalpy-22.3.0 (#2497)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc38f44ee515ce6a4ab10",
    "number": 2496,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n\r\n**TLDR:** For some reason checksum for `Python-3.11.0.tgz` file introduced in 0726e02e3a1b638f6442dffd880abf256e9c2bf7 is invalid. Updated that checksum to ensure `pyenv install 3.11.0` works well on systems without tar.xz support.\r\n\r\n---\r\n\r\nI have tried to run `pyenv install 3.11.0` on one of my Ubuntu 18.04 boxes and it failed with,\r\n\r\n```\r\nBUILD FAILED (Ubuntu 18.04 using python-build 20180424)\r\n\r\nInspect or clean up the working tree at /tmp/python-build.20221025231701.62\r\nResults logged to /tmp/python-build.20221025231701.62.log\r\n\r\nLast 10 log lines:\r\ntmp/python-build.20221025231701.62 ~\r\n\r\nchecksum mismatch: Python-3.11.0.tar.gz (file is corrupt)\r\nexpected 20d77729a64b2a300f08717f7ffcb8da189d02e7c51e6e4a06c0340b619cbf32, got 64424e96e2457abbac899b90f9530985b51eef2905951febd935f0e73414caeb\r\n```\r\n\r\nThis makes me think that, for some reason, checksum for `Python-3.11.0.tgz` file has been invalid in pyenv repo. I can approve this by running following command on same Ubuntu 18.04 box,\r\n\r\n```\r\n$ curl -sSL https://www.python.org/ftp/python/3.11.0/Python-3.11.0.tgz | sha256sum -\r\n64424e96e2457abbac899b90f9530985b51eef2905951febd935f0e73414caeb  -\r\n```\r\n\r\nAnd following on my Mac M1,\r\n\r\n```\r\n❯ curl -sSL https://www.python.org/ftp/python/3.11.0/Python-3.11.0.tgz | shasum -a 256 -\r\n64424e96e2457abbac899b90f9530985b51eef2905951febd935f0e73414caeb  -\r\n```\r\n\r\nCause of that, I have decided to update `3.11.0` build file with updated checksum for `Python-3.11.0.tgz` file.\r\n\r\nps. And yes, installing `3.11.0` via `tar.xz` file works well for me on my Mac M1 and other Ubuntu boxes with XZ (`xz-utils`) installed.\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Can we get this merged?",
      "Hrm... Interesting. I installed 3.11.0 on CircleCI using pyenv _without this patch_ and it did work! Which is confusing 🤔 ",
      "Confusing indeed.\r\nFor me it does work inside a Codespaces/Devcontainer environment (which is based on Docker), but when i add the same command in a Dockerfile it throws checksum error. Even though both environments are almost identical (running the same OS).",
      "Hi @humitos & @exilvm \r\n\r\nThanks for your messages. \r\n\r\nThe error happens only if your system does not have `xz-utils` installed and as result next if statement is falsy: https://github.com/pyenv/pyenv/blob/0726e02e3a1b638f6442dffd880abf256e9c2bf7/plugins/python-build/share/python-build/3.11.0#L5\r\n\r\nIn that case it tries to download `Python-3.11.0.tgz` and afterwards fail with `checksum mismatch`\r\n\r\n<details>\r\n<summary>Dockerfile and reproduction steps</summary>\r\n\r\n**`Dockerfile.pyenv-3.11.0-tgz`**\r\n\r\n```Dockerfile\r\nFROM ubuntu:18.04\r\n\r\nRUN apt-get update -yqq \\\r\n    && apt-get upgrade -yq \\\r\n    && apt-get install -yq --no-install-recommends ca-certificates curl git\r\n\r\nENV PYENV_ROOT=\"${HOME}/.pyenv\"\r\nRUN curl https://pyenv.run | bash\r\n\r\nENV PATH=\"${PYENV_ROOT}/bin:${PATH}\"\r\nRUN pyenv install 3.11.0\r\n```\r\n\r\n```\r\n❯ docker build -f Dockerfile.pyenv-3.11.0-tgz -t pyenv-3.11.0-tgz:latest .\r\n[+] Building 80.7s (7/7) FINISHED                                                                                                                                                                                                             \r\n => [internal] load build definition from Dockerfile.pyenv-3.11.0-tgz                                                                                                                                                                    0.1s\r\n => => transferring dockerfile: 341B                                                                                                                                                                                                     0.1s\r\n => [internal] load .dockerignore                                                                                                                                                                                                        0.0s\r\n => => transferring context: 2B                                                                                                                                                                                                          0.0s\r\n => [internal] load metadata for docker.io/library/ubuntu:18.04                                                                                                                                                                          0.0s\r\n => CACHED [1/4] FROM docker.io/library/ubuntu:18.04                                                                                                                                                                                     0.0s\r\n => [2/4] RUN apt-get update -yqq     && apt-get upgrade -yq     && apt-get install -yq --no-install-recommends ca-certificates curl git                                                                                                60.9s\r\n => [3/4] RUN curl https://pyenv.run | bash                                                                                                                                                                                             13.3s \r\n => ERROR [4/4] RUN pyenv install 3.11.0                                                                                                                                                                                                 6.1s \r\n------                                                                                                                                                                                                                                        \r\n > [4/4] RUN pyenv install 3.11.0:                                                                                                                                                                                                            \r\n#6 0.560 Downloading Python-3.11.0.tar.gz...                                                                                                                                                                                                  \r\n#6 0.561 -> https://www.python.org/ftp/python/3.11.0/Python-3.11.0.tgz                                                                                                                                                                        \r\n#6 5.991                                                                                                                                                                                                                                      \r\n#6 5.991 BUILD FAILED (Ubuntu 18.04 using python-build 20180424)                                                                                                                                                                              \r\n#6 6.005 \r\n#6 6.008 Inspect or clean up the working tree at /tmp/python-build.20221026172116.62\r\n#6 6.011 Results logged to /tmp/python-build.20221026172116.62.log\r\n#6 6.011 \r\n#6 6.011 Last 10 log lines:\r\n#6 6.014 /tmp/python-build.20221026172116.62 /\r\n#6 6.014 \r\n#6 6.014 checksum mismatch: Python-3.11.0.tar.gz (file is corrupt)\r\n#6 6.014 expected 20d77729a64b2a300f08717f7ffcb8da189d02e7c51e6e4a06c0340b619cbf32, got 64424e96e2457abbac899b90f9530985b51eef2905951febd935f0e73414caeb\r\n#6 6.014 \r\n------\r\nexecutor failed running [/bin/sh -c pyenv install 3.11.0]: exit code: 1\r\n```\r\n\r\n---\r\n\r\n</details>\r\n\r\nBut if your system has `xz-utils` (or other package), which brings `.tar.xz` support - all works well, as it now attempts to download `Python-3.11.0.tar.xz` file with proper checksum: https://github.com/pyenv/pyenv/blob/0726e02e3a1b638f6442dffd880abf256e9c2bf7/plugins/python-build/share/python-build/3.11.0#L6\r\n\r\n<details>\r\n<summary>Dockerfile & reproduction steps</summary>\r\n\r\n**`Dockerfile.pyenv-3.11.0-tar-xz`**\r\n\r\n```Dockerfile\r\nFROM ubuntu:18.04\r\n\r\nRUN apt-get update -yqq \\\r\n    && apt-get upgrade -yq \\\r\n    && apt-get install -yq --no-install-recommends ca-certificates curl git xz-utils\r\n\r\nENV PYENV_ROOT=\"${HOME}/.pyenv\"\r\nRUN curl https://pyenv.run | bash\r\n\r\nENV PATH=\"${PYENV_ROOT}/bin:${PATH}\"\r\nRUN pyenv install 3.11.0\r\n```\r\n\r\n**Diff between Dockerfiles**:\r\n\r\n```diff\r\n5c5\r\n<     && apt-get install -yq --no-install-recommends ca-certificates curl git\r\n---\r\n>     && apt-get install -yq --no-install-recommends ca-certificates curl git xz-utils\r\n```\r\n\r\n```\r\n❯ docker build -f Dockerfile.pyenv-3.11.0-tar-xz -t pyenv-3.11.0-tar-xz:latest .\r\n[+] Building 76.7s (7/7) FINISHED                                                                                                                                                                                                             \r\n => [internal] load build definition from Dockerfile.pyenv-3.11.0-tar-xz                                                                                                                                                                 0.1s\r\n => => transferring dockerfile: 353B                                                                                                                                                                                                     0.0s\r\n => [internal] load .dockerignore                                                                                                                                                                                                        0.0s\r\n => => transferring context: 2B                                                                                                                                                                                                          0.0s\r\n => [internal] load metadata for docker.io/library/ubuntu:18.04                                                                                                                                                                          0.0s\r\n => CACHED [1/4] FROM docker.io/library/ubuntu:18.04                                                                                                                                                                                     0.0s\r\n => [2/4] RUN apt-get update -yqq     && apt-get upgrade -yq     && apt-get install -yq --no-install-recommends ca-certificates curl git xz-utils                                                                                       56.3s\r\n => [3/4] RUN curl https://pyenv.run | bash                                                                                                                                                                                             14.0s \r\n => ERROR [4/4] RUN pyenv install 3.11.0                                                                                                                                                                                                 6.3s \r\n------                                                                                                                                                                                                                                        \r\n > [4/4] RUN pyenv install 3.11.0:                                                                                                                                                                                                            \r\n#6 0.543 Downloading Python-3.11.0.tar.xz...                                                                                                                                                                                                  \r\n#6 0.544 -> https://www.python.org/ftp/python/3.11.0/Python-3.11.0.tar.xz                                                                                                                                                                     \r\n#6 5.488 Installing Python-3.11.0...               \r\n...\r\n```\r\n\r\n_Build is also failed as additional build dependencies does not installed_\r\n\r\n---\r\n\r\n</details>\r\n\r\nTo sum up, if you need to have 3.11.0 be installed via pyenv - make sure `xz-utils` or similar package has been installed at your system.\r\n\r\nOtherwise, please wait before this PR will be reviewed and merged 🤝 ",
      "@playpauseandstop excellent explanation! Thanks a lot."
    ],
    "commit_messages": [
      "Update Python 3.11.0 tgz checksum (#2496)\n\nFor some reason checksum for `Python-3.11.0.tgz` file introduced in\r\n0726e02e3a1b638f6442dffd880abf256e9c2bf7 is invalid. Update that\r\nchecksum to ensure `pyenv install 3.11.0` works well on systems without\r\ntar.xz support."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc39044ee515ce6a4ab11",
    "number": 2495,
    "body": "Make sure you have checked all steps below.\n\n### Prerequisite\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\n* [ ] My PR addresses the following pyenv issue (if any)\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\n\n### Description\n- [ ] Here are some details about my PR\n\n### Tests\n- [ ] My PR adds the following unit tests (if any)\n",
    "head_branch": "feature/cpython-3.12.0a1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.12.0a1 (#2495)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc39144ee515ce6a4ab12",
    "number": 2493,
    "body": "CPython 3.11 was just released few minutes ago",
    "head_branch": "feature/cpython-3.11",
    "is_a_fork": true,
    "comments": [
      "Hey, @noamcohen97. Thanks for adding CPython 3.11! Can we expect a release soon so we can bump the pyenv version in Homebrew?",
      "@imankulov you can install the head version of pyenv. Using https://github.com/pyenv/pyenv-installer makes it easier then homebrew or any other package manager.\r\n",
      "> @imankulov you can install the head version of pyenv. Using https://github.com/pyenv/pyenv-installer makes it easier then homebrew or any other package manager.\r\n\r\nFWIW, installing HEAD via homebrew is a simple as `brew install pyenv --head`, or if it was previously installed `brew unlink pyenv && brew install pyenv --head`.",
      "I just tried this and got this error I am on macOS Ventura 13.0 (22A380), which may be the root of the issue? but Xcode 14.1 is not out yet, it's still in rc phase. Any thoughts?\r\n```\r\nUnlinking /opt/homebrew/Cellar/pyenv/2.3.5... 0 symlinks removed.\r\n==> Cloning https://github.com/pyenv/pyenv.git\r\nUpdating /Users/pasta/Library/Caches/Homebrew/pyenv--git\r\n==> Checking out branch master\r\nAlready on 'master'\r\nYour branch is up to date with 'origin/master'.\r\nHEAD is now at 0726e02e Add CPython 3.11.0 (#2493)\r\nError: Your Xcode (14.0.1) is too outdated.\r\nPlease update to Xcode 14.1 (or delete it).\r\nXcode can be updated from the App Store.\r\n```\r\n\r\n",
      "@PastaPastaPasta Considering Ventura was only released on monday (same day as python 3.11), it's reasonable to assume that not everything fully supports it yet. You should probably just install the rc version of Xcode, and I'm sure the stable version will release soon.",
      "> I just tried this and got this error I am on macOS Ventura 13.0 (22A380), which may be the root of the issue? but Xcode 14.1 is not out yet, it's still in rc phase. Any thoughts?\r\n> \r\n> ```\r\n> Unlinking /opt/homebrew/Cellar/pyenv/2.3.5... 0 symlinks removed.\r\n> ==> Cloning https://github.com/pyenv/pyenv.git\r\n> Updating /Users/pasta/Library/Caches/Homebrew/pyenv--git\r\n> ==> Checking out branch master\r\n> Already on 'master'\r\n> Your branch is up to date with 'origin/master'.\r\n> HEAD is now at 0726e02e Add CPython 3.11.0 (#2493)\r\n> Error: Your Xcode (14.0.1) is too outdated.\r\n> Please update to Xcode 14.1 (or delete it).\r\n> Xcode can be updated from the App Store.\r\n> ```\r\n\r\nThat message seems to be coming from Homebrew so it's their issue. They probably don't support MacOS 13 yet.",
      "https://github.com/Homebrew/homebrew-core/issues/113968#issuecomment-1290752564\r\nSeems like best solution is to install the RC"
    ],
    "commit_messages": [
      "Add CPython 3.11.0 (#2493)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc39144ee515ce6a4ab13",
    "number": 2489,
    "body": null,
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc39244ee515ce6a4ab14",
    "number": 2487,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nWhen given a prefix rather than full name, Pyenv resolves it to the latest release in the corresponding version line.\r\n\r\n\r\n**CAVEATS:**\r\n\r\n* It must be a full prefix -- the actual searched prefix is `<prefix>[-.]`\r\n* Other flavors are likely sorted incorrectly atm. Need someone with a use case to clarify the intended semantic.\r\n* Prereleases and versions with some suffixes (`-dev`, `-src`, `-latest`) are not searched. Again, the intended semantic is unclear.\r\n* `pyenv uninstall` has been excluded from the resolution feature: deleting a dynamically selected installation could be problematic. Need user input to be sure that this would be okay.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\nTests for the new functionality in ",
    "head_branch": "auto-latest",
    "is_a_fork": true,
    "comments": [
      "Awesome feature.  This has been the missing piece in pyenv.  Thank you for implementing this!"
    ],
    "commit_messages": [
      "Auto-resolve prefixes to the latest version (#2487)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc39344ee515ce6a4ab15",
    "number": 2482,
    "body": "### Prerequisite\r\nn/a\r\n\r\n### Description\r\n\r\nAdd new versions announced yesterday: [3.7.15](https://www.python.org/downloads/release/python-3715/), [3.8.15](https://www.python.org/downloads/release/python-3815/), and [3.9.15](https://www.python.org/downloads/release/python-3915/).\r\n\r\n3.10.8, also released yesterday, was merged in #2480.\r\n\r\n### Tests\r\n\r\nComputed SHA's with `curl <url> | gsha256sum -`.\r\n",
    "head_branch": "new_pythons",
    "is_a_fork": true,
    "comments": [
      "Ah, I missed the patches. Thanks @native-api ! 🤘"
    ],
    "commit_messages": [
      "Add CPython 3.7.15, 3.8.15, and 3.9.15 (#2482)\n\nCo-authored-by: Ivan Pozdeev <vano@mail.mipt.ru>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc39444ee515ce6a4ab16",
    "number": 2481,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- Released on 2022.10.11\r\n- https://www.python.org/downloads/release/python-3915/\r\n \r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "3.9.15",
    "is_a_fork": true,
    "comments": [
      "I just added all three missing releases from yesterday in #2482. Glad to see our hashes agree.",
      "@adamchainz you're using older version of openssl -- openssl-1.1.1n, latest is openssl-1.1.1r -- any reason for that? ",
      "OpenSSL 1.1.1r was pulled, so changed to 1.1.1q -- https://mta.openssl.org/pipermail/openssl-announce/2022-October/000237.html",
      "I've added the new fallback OpenSSL to the other PR."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc39544ee515ce6a4ab17",
    "number": 2480,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Released on 11/10/2022\r\n- [x] https://www.python.org/downloads/release/python-3108/\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Hi, may I ask if there is a reason why not also 3.9.15, 3.8.15, 3.7.15 was added ?",
      "> Hi, may I ask if there is a reason why not also 3.9.15, 3.8.15, 3.7.15 was added ?\r\n\r\nNope, there are no spesific reasons not to add any of those versions. I personally needed 3.10.8 and then created this commit. You can add them yourself by following [CONTRIBUTING.md](https://github.com/pyenv/pyenv/blob/master/CONTRIBUTING.md). I can try adding them myself too, if nobody else does, once I have spare time. ✌️",
      "I've opened #2482 to add the three missed releases.",
      "Seems like the comment from @tobixx underscores a question I've always had; Why hasn't the process of adding new releases of python versions and creating a new PyEnv release been automated. It always seems to take a few weeks for the latest Python version to be available in the latest PyEnv release. "
    ],
    "commit_messages": [
      "Add CPython 3.10.8 (#2480)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc39544ee515ce6a4ab18",
    "number": 2476,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nAdds Pyston 2.3.5.\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "pyston-2.3.5",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Pyston 2.3.5 (#2476)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc39644ee515ce6a4ab19",
    "number": 2471,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2466\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nAllow configuring CPython with --with--dsymutil in MacOS by defining an envvar in installation script.\r\nDo that for 3.12.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n\r\ntests for the added logic",
    "head_branch": "add_dsymutil",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2471 from native-api/add_dsymutil\n\nBuild CPython 3.12+ with --with-dsymutil in MacOS"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc39744ee515ce6a4ab1a",
    "number": 2469,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2467\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\n#2463 didn't add all 3 patches\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\nN/A",
    "head_branch": "missing_patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add missing patch for 3.7.14 (#2469)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc39844ee515ce6a4ab1b",
    "number": 2468,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nTravis does not support open-source projects anymore, so there's no need in `.travis.yml` since GitHub Actions are up and running.\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Drop Travis integration (#2468)\n\nIt has been unused since Travis dropped free plans"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc39944ee515ce6a4ab1c",
    "number": 2464,
    "body": "### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - None\r\n\r\n### Description\r\n\r\nThis has been discussed and turned down before ( #1686, #1715) and the [suggestion](https://github.com/pyenv/pyenv/issues/1715#issuecomment-929531904) was to make `brew` a noop. That's what I do but it would be nice if there was a simpler way for `pyenv` to handle this. Having to make `brew` a noop, then fix it for normal use is not hard but it gets tiresome (I compile Python a lot 🤓).\r\n\r\nI came up with a solution using an environment variable `PYENV_DISABLE_HOMEBREW`. I wanted to open a PR and discuss adding this to `pyenv`.\r\n\r\nIf it's something that would be considered, I'd be happy to work on documentation and tests.\r\n\r\n### Tests\r\n- [ ] None yet\r\n",
    "head_branch": "skip-brew",
    "is_a_fork": true,
    "comments": [
      "cc @sivel",
      "Where are you going to take deps from in MacOS if not from Homebrew?\r\n\r\nPyenv can compile OpenSSL and Readline from source and take Zlib from XCode SDK. What about others?",
      "As an alternative solution, there's a 3rd-party plugin, https://github.com/sprout42/pyenv-fix-version (linked to from https://github.com/pyenv/pyenv/wiki/Plugins), that recompiles installed Pythons if the underlying deps have been upgraded.",
      "> Where are you going to take deps from in MacOS if not from Homebrew?\r\n> \r\n> Pyenv can compile OpenSSL and Readline from source and take Zlib from XCode SDK. What about others?\r\n\r\nAFAICS, according to https://news.ycombinator.com/item?id=9407119, there's smth called \"pkgsrc\" which is stable release instead of rolling release.",
      "The breakage you're describing is what you get when you're dealing with rolling-release stuff. You _have_ to sync all your dependent software whenever you do an upgrade or you risk this.\r\n\r\nSo it's either\r\n* switch to a stable-release product (and miss out on new versions of libs that might be needed for new versions of Python), or\r\n* introduce extra complexity and sync all your stuff (which is Pythons and their Pip-installed extension modules) to the rolling-release ecosystem at every upgrade",
      "> Where are you going to take deps from in MacOS if not from Homebrew?\r\n> \r\n> Pyenv can compile OpenSSL and Readline from source and take Zlib from XCode SDK. What about others?\r\n\r\nWhat does it matter where they come from? If a user wants more control over handling deps, give them a way to do so.  It's not the default behavior, nor should you be concerned about offering instructions to users that want a way to prevent using homebrew.\r\n\r\nSimply, the desire is to give the user the option to handle the deps themselves, in whatever way they desire.  Just because homebrew is installed, and I am running macos, doesn't mean I want pyenv to magically assume that I want to use homebrew for the deps.",
      "> What does it matter where they come from? If a user wants more control over handling deps, give them a way to do so. It's not the default behavior, nor should you be concerned about offering instructions to users that want a way to prevent using homebrew.\r\n> \r\n> Simply, the desire is to give the user the option to handle the deps themselves, in whatever way they desire. Just because homebrew is installed, and I am running macos, doesn't mean I want pyenv to magically assume that I want to use homebrew for the deps.\r\n\r\nOkay, that makes sense. The normal software build behavior is to take whatever is available on the configured/default search paths -- and let the user arrange them as needed. But the Homebrew search behavior is not a part of that.\r\n\r\nMy primary concern was that there's simply nothing else realistically available in MacOS to get the dependencies from that is any better than Homebrew for your use case (which would make this use case rather unrealistic thus probably not worth supporting). But now that we see there is, that's not a problem.\r\n\r\n---\r\n\r\nThe envvar would need to be prefixed with `PYTHON_BUILD_` like other envvars that affect the build (see https://github.com/pyenv/pyenv/tree/master/plugins/python-build#readme).",
      "> Pyenv can compile OpenSSL and Readline from source and take Zlib from XCode SDK. What about others?\r\n\r\nThe main use case is I have my own versions of libraries I downloaded and compiled myself. They are already set in my `CPPFLAGS` and `LDFLAGS`. But if `brew` exists and is executable, `pyenv` will force the use of libraries from Homebrew by modifying my already correct `CPPFLAGS` and `LDFLAGS` and putting the Homebrew libraries first in those paths in most cases.\r\n\r\nI think the default behavior is great. It would be nice to have an easy way to disable that for advanced use cases.",
      "I'll change the var name and add docs.",
      "Thank you so much!"
    ],
    "commit_messages": [
      "Merge pull request #2464 from samdoran/skip-brew\n\nAdd ability to easily skip all use of Homebrew"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc39a44ee515ce6a4ab1d",
    "number": 2463,
    "body": "### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - None\r\n\r\n### Description\r\nMostly the same patches from 3.7.13 are needed for 3.7.14 on Apple Silicon.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "3.7.14-arm-patches",
    "is_a_fork": true,
    "comments": [
      "Could you also port patches [for the recently-added 3.8.14 and 3.9.14](https://github.com/pyenv/pyenv/pull/2456)?",
      "I'd be happy to, but I don't think those patches are needed for 3.8.14 and 3.9.14. I looked through the CPython source and the changes are already present in those versions and the need for a `VARIADIC` flag was solved in another way (based on reading the comments in the source).\r\n\r\nAlso, I've installed both 3.8.14 and 3.9.14 and `ctypes` compiled fine.",
      "Thank you for merging!"
    ],
    "commit_messages": [
      "Add patches for 3.7.14 needed for Apple Silicon (#2463)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc39a44ee515ce6a4ab1e",
    "number": 2460,
    "body": "update checksum from https://repo.anaconda.com/miniconda/ Miniconda3-py39_4.12.0-MacOSX-arm64.sh 52.2M 2022-06-01 14:45:20 f7448cfeb278f2a84ed903db02d5525c\r\n\r\nMake sure you have checked all steps below.\r\n\r\nPrerequisite\r\n Please consider implementing the feature as a hook script or plugin as a first step.\r\npyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\nWe occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\nGenerally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n My PR addresses the following pyenv issue (if any)\r\nCloses https://github.com/pyenv/pyenv/issues/XXXX\r\nDescription\r\n Here are some details about my PR\r\nUpdate checksum from https://repo.anaconda.com/miniconda/ for miniconda3-3.9-4.12.0\r\nTests\r\n My PR adds the following unit tests (if any)",
    "head_branch": "patch-miniconda3-3.9-4.12.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update miniconda3-3.9-4.12.0 (#2460)\n\nupdate checksum from https://repo.anaconda.com/miniconda/\r\nMiniconda3-py39_4.12.0-MacOSX-arm64.sh\t52.2M\t2022-06-01 14:45:20\tf7448cfeb278f2a84ed903db02d5525c"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc39b44ee515ce6a4ab1f",
    "number": 2459,
    "body": "3.11.0rc2 was released today (September 12th)\r\n\r\nhttps://www.python.org/downloads/release/python-3110rc2/\r\n\r\n\r\n(Fixes earlier PR #2458 based on feedback from @saaketp)",
    "head_branch": "3.11.0rc2",
    "is_a_fork": true,
    "comments": [
      "Can you please add 3.10.7 as well? It was released on Sept. 6, 2022.\r\nhttps://www.python.org/downloads/release/python-3107/",
      "> Can you please add 3.10.7 as well? It was released on Sept. 6, 2022.\r\n> https://www.python.org/downloads/release/python-3107/\r\n\r\nI believe that it has already been added with PR #2454 ."
    ],
    "commit_messages": [
      "Add CPython 3.11.0rc2 (#2459)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc39c44ee515ce6a4ab20",
    "number": 2458,
    "body": "3.11.0rc2 was released today (September 12th)\r\n\r\nhttps://www.python.org/downloads/release/python-3110rc2/",
    "head_branch": "3.11.0rc2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc39d44ee515ce6a4ab21",
    "number": 2456,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n\r\n- https://www.python.org/downloads/release/python-3714\r\n- https://www.python.org/downloads/release/python-3814\r\n- https://www.python.org/downloads/release/python-3914\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "cpython-3.7.14_3.8.14_3.9.14",
    "is_a_fork": true,
    "comments": [
      "Do the patches we provide for the last releases in those release lines no longer apply?",
      "@native-api do you mean something like what's in `pyenv/plugins/python-build/share/python-build/patches/3.7.13/Python-3.7.13/`?\r\n\r\nI'm not familiar with the patches or how they are applied. Should I be looking at the CPython commit history between tags to get those patches?",
      "See https://github.com/pyenv/pyenv/blob/master/CONTRIBUTING.md#authoring-installation-scripts .\r\n\r\nThe easiest way is probably to just try to apply those patches to the new codebase. If a patch doesn't apply, then if it's a backport, the probem is most likely fixed in the new release; if it's a user-provided extended support patch, it needs to be reworked which is the responsibility of a party interested in that extended support.\r\n",
      "@edgarrmondragon Do this (more or less):\r\n\r\n```\r\ngit clone https://github.com/python/cpython.git && cd cpython\r\ngit checkout v3.7.14\r\ngit am /path/to/pyenv/plugins/python-build/share/python-build/patches/3.7.13/Python-3.7.13/0001-Port-ctypes-and-system-libffi-patches-for-arm64-macO.patch\r\ngit am /path/to/pyenv/plugins/python-build/share/python-build/patches/3.7.13/Python-3.7.13/0002-bpo-41100-fix-_decimal-for-arm64-Mac-OS-GH-21228.patch\r\ngit am /path/to/pyenv/plugins/python-build/share/python-build/patches/3.7.13/Python-3.7.13/0003-bpo-42351-Avoid-error-when-opening-header-with-non-U.patch\r\n```\r\n\r\nIf those apply without errors then most likely those patches are still needed in 3.7.14 (IE they were not fixed between [3.7.13 and 3.7.14](https://github.com/python/cpython/compare/v3.7.13...v3.7.14)) and you should create the `pyenv/plugins/python-build/share/python-build/patches/3.7.14/Python-3.7.14/` and copy the three patches to it. Then test that you can still install and build 3.7.14 with your local branch (and otherwise spot test it).\r\n\r\nLuckily it seems like 3.8.14 and 3.9.14 don't have any patches that need to be checked and so those _should_ be fine.\r\n\r\nDisclosure: I'm not involved with this project and my advice may be incorrect. I was just wondering why 3.9.14 wasn't yet available and so found this PR and researched what needed to be done."
    ],
    "commit_messages": [
      "Merge pull request #2456 from edgarrmondragon/cpython-3.7.14_3.8.14_3.9.14\n\nAdd CPython security releases 3.7.14, 3.8.14 and 3.9.14"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc39e44ee515ce6a4ab22",
    "number": 2454,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n\r\n- Released 2022/09/06\r\n- https://www.python.org/downloads/release/python-3107/\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "3.10.7",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.10.7 (#2454)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc39e44ee515ce6a4ab23",
    "number": 2453,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2451\r\n\r\n### Description\r\n- Fixes \"unexpected token '(' on line 5 of pyenv.d/install/latest.bash\" introduced by https://github.com/pyenv/pyenv/commit/4e31668c2136bd7c97b30776da62e80e9a376279\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n- [x] Tested fix locally and works as expected\r\n",
    "head_branch": "fix/2451",
    "is_a_fork": true,
    "comments": [
      "The error has been fixed in https://github.com/pyenv/pyenv/commit/23559ee6d10c5c702f924803b81eaa54a776b360",
      "Thanks nevertheless.",
      "> \r\n\r\nYou're most welcome.  Figured I would help out since I ran into this just now."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc39f44ee515ce6a4ab24",
    "number": 2452,
    "body": "### Description\r\n- I've noticed some of my builds failing that use pyenv and it appears to be due to a syntax error around defining DEFINITION_CANDIDATES (`/opt/hostedtoolcache/pyenv/pyenv.d/install/latest.bash: line 5: syntax error near unexpected token (`). This PR aims to fix this issue and the workflows that ran on my pyenv fork seem to support that this issue is now fixed https://github.com/cavcrosby/pyenv/actions.\r\n",
    "head_branch": "fix-unexpected-token",
    "is_a_fork": true,
    "comments": [
      "Good to hear!\r\n\r\nYea, I believe at this point I'd have to agree that your changes in https://github.com/pyenv/pyenv/commit/23559ee6d10c5c702f924803b81eaa54a776b360 should suffice. Hence I will close this PR."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3a044ee515ce6a4ab25",
    "number": 2449,
    "body": "### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n\r\nThe original instructions were added 2 years ago in https://github.com/pyenv/pyenv/commit/0f2d659732094f6bef11361dbc6261132edc63e2. Since then, [Fish released](https://github.com/fish-shell/fish-shell/releases/tag/3.2.0) [a more declarative instruction for this operation](https://fishshell.com/docs/current/cmds/fish_add_path.html), which is now the recommended way of manipulating `PATH` in Fish.\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "docs: Add configuration option for Fish 3.2.0+ (#2449)\n\nThe original instructions were added 2 years ago in https://github.com/pyenv/pyenv/commit/0f2d659732094f6bef11361dbc6261132edc63e2. Since then, [Fish released](https://github.com/fish-shell/fish-shell/releases/tag/3.2.0) [a more declarative instruction for this operation](https://fishshell.com/docs/current/cmds/fish_add_path.html), which is now the recommended way of manipulating `PATH` in Fish."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3a144ee515ce6a4ab26",
    "number": 2448,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nGithub released ubuntu-22.04 and macos-12 from beta\r\nand deprecated ubuntu-18.04 and macos-10.15, due to dropping by 2013.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\nN/A",
    "head_branch": "bump_os",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "CI: Bump OS versions (#2448)\n\n* CI: Bump OS versions\r\n\r\nGithub released ubuntu-22.04 and macos-12 from beta\r\nand deprecated ubuntu-18.04 and macos-10.15, due to dropping by 2013.\r\n\r\n* CI: clean up installed packages"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3a244ee515ce6a4ab27",
    "number": 2447,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\n* Fix modified script test for Micropython which doesn't support `--version`\r\n* Exclude scripts deleted by a PR from the modified scripts check (which fails because they are deleted)\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\nN/A",
    "head_branch": "ci_modified_micropython",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2447 from native-api/ci_modified_micropython\n\nCI: support Micropython, deleted scripts; build with -v"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3a344ee515ce6a4ab28",
    "number": 2443,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n  * N/A\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n  * N/A\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2440\r\n\r\n### Description\r\nThis commit will add fresh versions of microptyhon: 1.18 and 1.19.1.\r\n\r\n### Tests\r\n- [X] My PR adds the following unit tests (if any)\r\n  * N/A\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Thanks! Added this change: now upip works. Just in case, I also tested older versions -- everything works.",
      "Updated the test: now it passes on a local ubuntu machine.",
      "The builds seem okay, the tests fail because MicroPython doesn't support `--version`. Is there an alternative?\r\nE.g. does `-c 'import sys;print(sys.version)'` work for all releases?"
    ],
    "commit_messages": [
      "Add micropython 1.18 and 1.19.1 (#2443)\n\nSupport frozen builtin modules e.g. upip"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3a344ee515ce6a4ab29",
    "number": 2442,
    "body": "# Commits\r\n- Fixes #2430 by checking that the path resolves as a child path of PYENV_ROOT/versions while still preventing CVE-2022-35861   \r\n    - If version is `..` or contains `/`,  `is_version_safe` sets PWD to the constructed path and verifies that it is child path of `$PYENV_ROOT/versions`. Otherwise, failure at any steps (e.g., `cd`) means that it is unsafe.\r\n- Closes #2430 by adding tests for child paths (e.g., \"3.10.3/envs/test\")\r\n    - Added a test for valid use cases and another test for malicious values",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Re-allow paths in .python-version provided that they resolve to within the versions dir (#2442)\n\n* Fixes #2430 while still preventing CVE-2022-35861\r\n* Adds a skipped version message to stderr\r\n\r\nCo-authored-by: Ivan Pozdeev <vano@mail.mipt.ru>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3a444ee515ce6a4ab2a",
    "number": 2437,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2436\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\nSimilar to #2431; updated instructions to be clear that the commands should be executed, rather than copied. \r\n",
    "head_branch": "issue-2436/janithpet",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3a544ee515ce6a4ab2b",
    "number": 2434,
    "body": "`3.11.0rc1` was released today (August 8th)\r\n\r\nhttps://www.python.org/downloads/release/python-3110rc1/\r\n",
    "head_branch": "3.11.0rc1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.11.0rc1 (#2434)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3a644ee515ce6a4ab2c",
    "number": 2433,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2105\r\n\r\n### Description\r\n- [x] Adds script for installing Facebook's [Cinder](https://github.com/facebookincubator/cinder/)\r\n- [x] Based on `python3.8-dev` script, adjusted for Cinder's repository\r\n- [x] Cinder does not have any versioned releases currently, so this just uses the repository\r\n- [x] Cinder 3.10 is currently not finished and I couldn't manage to successfully compile it\r\n- [x] According to the README, macOS is *probably* not supported; should I mark this somehow?\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n\r\nNo tests are added, but I managed to compile this on Debian 11 and run basic Numpy and Flask scripts.\r\n",
    "head_branch": "add-cinder-3.8",
    "is_a_fork": true,
    "comments": [
      "Build is failing in our stock environments. Please take a look at that.",
      "On Ubuntu 20.04 from GH Actions, it seems GCC is too old to support C++20. On 18.04, there are some other failures that are still probably related to the too old compiler. macOS build failures are kinda expected because Cinder doesn't support it.\r\n\r\nIt also doesn't work in Ubuntu 22.04 but works in Debian 11, so apparently, there are some differences in compilers on Ubuntu and Debian that cause build failures. I'm not really sure why this happens... Maybe Cinder is really too experimental and unstable to be used outside the provided Docker images.",
      "Compilers provide more-or-less standard C/C++ environments... if Cinder doesn't support either of the 2 major compilers -- what _does_ it support, anyway?\r\n\r\nIt's fine if it only supports some bleeding-edge versions and we test for those in the installation script and give some meaningful error messages if those are missing... but so far, it's unclear what we should even test for!",
      "> It's fine if it only supports some bleeding-edge versions and we test for those in the installation script and give some meaningful error messages if those are missing...\r\n\r\nThat said, usually, the software's `configure` scripts does tests like this and bails out if they fail, before any confusing compilation errors start piling up... It's strange that Cinder's doesn't -- _if_ they want third parties to use it, that is.",
      "> It's fine if it only supports some bleeding-edge versions and we test for those in the installation script and give some meaningful error messages if those are missing... but so far, it's unclear what we should even test for!\r\n\r\nYeah, I agree.\r\n\r\n> if they want third parties to use it, that is.\r\n\r\nWell, the thing is that they don't really want to (compile Cinder outside their environement):\r\n\r\n> Cinder should build just like CPython; configure and make -j. However as most development and usage of Cinder occurs in the highly specific context of Meta we do not exercise it much in other environments. As such, the most reliable way to build and run Cinder is to re-use the Docker-based setup from our GitHub CI workflow.\r\n\r\nI thought there would still be fewer problems when I created this PR. I currently don't have much time to deal with them, so I guess it can be closed until someone tries to fix them or Cinder supports more platforms.",
      "We do have a stock function, `require_distro`, to test for Linux distro and version and warn if it doesn't check.\r\n\r\nIf you say that it runs in some vanilla distros, that should be sufficient.\r\n\r\n(Its message wording would need to be altered to also fit source distributions though.)",
      "I did some [tests](https://github.com/filips123/pyenv-cinder-testing/actions/runs/2869593711) on various distros to check what Cinder supports.\r\n\r\nIt appears Cinder only supports GCC 10:\r\n\r\n* Builds on Ubuntu 16.04-20.04 (GCC 5.4.0-9.4.0) all failed because of too old GCC versions that don't support C++20 or other required features. The same with Debian 9-10 (GCC 6.3.0-8.3.0) and CentOS 7 (GCC 4.8.5).\r\n\r\n* Builds on Debian 11 (GCC 10.2.1) and Fedora 32-33 (GCC 10.3.1) work fine. Fedora 32 is also what is used to build Cinder officially in Docker container.\r\n\r\n* What's more interesting is that newer GCC versions also do not seem to work. Builds Ubuntu 22.04 (GCC 11.2.0), Fedora 34-37 (GCC 11.3.1-12.1.1), Arch (GCC 12.1.1), and Alpine (GCC 11.2.1 with musl) all fail (with the same three errors, one on GCC 11, another on GCC 12, and third on Alpine).\r\n\r\n* (I also tried tests on OpenSUSE, but they failed because of some unrelated error.)\r\n",
      "Could you try building with GCC 10 (`CC=gcc-10 pyenv install <...>`) in environments where it's available/can be installed from stock packages?\r\n\r\nIf it (at least somewhat) works, we can set the above envvar if GCC 10 is available (and that envvar is not already set) and warn otherwise.\r\nSince Fedora 32 is the only officially supported ewnvironment, it's still worth checking the distro against it regardless.",
      "I also just realized that you can just silence `require_distro`'s output and check its exit code if you need a custom warning message :slightly_smiling_face: ",
      "Adding `CC=gcc-10` on Ubuntu 22.04 still [doesn't work](https://github.com/filips123/pyenv-cinder-testing/runs/7882340687?check_suite_focus=true). So maybe it's related to glibc version?\r\n\r\nIn case this can be fixed, I think the install script could do something like this:\r\n\r\n* If distro is not Fedora 32, emit warning about distro.\r\n* If normal `gcc` is already 10 (for example, on Debian 11 and Fedora 32/33), just build it.\r\n* If it's not, but `gcc-10` exists, set it as `CC`.\r\n* If it still doesn't exist, emit warning about GCC version.\r\n* Build Cinder.\r\n\r\n(Or similarly for glibc if that's what's important)",
      "> Adding `CC=gcc-10` on Ubuntu 22.04 still [doesn't work](https://github.com/filips123/pyenv-cinder-testing/runs/7882340687?check_suite_focus=true). So maybe it's related to glibc version?\r\n\r\nCan't say because the bvuild was run without `-v` so I can't see the actuall error.\r\n\r\nThe approach LGTM.",
      "Here are logs with verbose build: https://github.com/filips123/pyenv-cinder-testing/runs/7887409227?check_suite_focus=true#step:11:977"
    ],
    "commit_messages": [
      "Add Cinder 3.8 (#2433)\n\n* Add Cinder 3.8\r\n* Add distro and GCC warnings\r\n* Set the complier to GCC 10 if available\r\n\r\nCo-authored-by: Ivan Pozdeev <vano@mail.mipt.ru>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3a744ee515ce6a4ab2d",
    "number": 2432,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2336\r\n\r\n### Description\r\n- [x] adds support for uninstalling multiple python version at once using `pyenv uninstall`\r\n- [x] updates docs (and man pages entries?)\r\n\r\n### Tests\r\n- [x] replaces unit test `too many arguments for pyenv-uninstall` with `more than one argument for pyenv-uninstall`\r\n- [x] adds test for `pyenv-uninstall hooks` for the multiple version scenario \r\n",
    "head_branch": "feature/pyenv-uninstall-multple-versions",
    "is_a_fork": true,
    "comments": [
      "Thank you for your efforts! Supporting multiple versions in commands that currently only support one is a feature that has been requested for some time! (Though it's not the most requested one so we weren't focusing on it)\r\nThis is a start!"
    ],
    "commit_messages": [
      "Add support for multiple versions in `pyenv uninstall` (#2432)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3a744ee515ce6a4ab2e",
    "number": 2431,
    "body": "### Description\r\n- [x] Here are some details about my PR\r\nAdded a small addition to [line 291](https://github.com/pyenv/pyenv/blob/37a6070855d7053c34441b01b79ac6133ae5e5d9/README.md?plain=1#L291) of the README. This is to ensure that the ensuing code blocks are to be run in the terminal, and not to be copied to the respective `rc` or `profile` file. ",
    "head_branch": "update_readme",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Small update to instruction in README.md (#2431)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3a844ee515ce6a4ab2f",
    "number": 2428,
    "body": "Released 2022/08/02\r\n\r\nhttps://www.python.org/downloads/release/python-3106/",
    "head_branch": "3.10.6",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.10.6 (#2428)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3a944ee515ce6a4ab30",
    "number": 2425,
    "body": "Add new relaese of GraalPython. CC @timfel ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Cancelled jobs seem to be Github Actions' issue affecting MacOS 10.15: https://github.com/orgs/community/discussions/27351"
    ],
    "commit_messages": [
      "Add GraalPython 22.2.0 (#2425)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3aa44ee515ce6a4ab31",
    "number": 2423,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\n[Fig](https://fig.io) provides autocomplete for 300+ CLI tools including pyenv, so we would love to have Fig listed as an autocomplete method in your docs. Thanks so much and please let me know if you have any questions!\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "@pyenv/pyenv-core-maintainers Any opinions?\r\n\r\nAFAICS, the tool is completely independent from Pyenv and its bundled completions, it maintains its own database (I dunno how flexible and that probably means that it's not environment-aware). At the very least, that means that it will be somewhat disconnected from the specific Pyenv version installed and its plugins and will probably be unable to provide completions like installed versions/environments.\r\nIt also only supports MacOS.\r\n\r\nSo atm I'm not sure if we can even recommended it, not to say endorse...",
      "Hey @native-api! So yes, you're totally correct, Fig maintains completions for public CLI tools in its [withfig/autocomplete](https://github.com/withfig/autocomplete) repo, separate to the CLI itself. Here is the completion spec we have for pyenv currently: https://github.com/withfig/autocomplete/blob/master/src/pyenv.ts\r\n\r\n1. We actually are fully aware of your environment and can actually do very powerful suggestions. e.g.\r\n![pyenv_demo](https://user-images.githubusercontent.com/4949076/181383765-adb45958-1f5f-4322-8cfb-82c6dd2340ff.gif)\r\n\r\n3. We can change the completions we give users based on the version of pyenv installed. See https://fig.io/docs/handbook/versioning-completion-specs. Admittedly, we haven't set this up for pyenv just yet, but we'd absolutely love to work with you on this (it's quite easy to do, and we'd be happy to help)\r\n4. We are macOS only right now but are literally < 1 month away from launching support for Window and Linux:\r\n* Linux: https://github.com/withfig/fig/issues/34\r\n* Windows: https://github.com/withfig/fig/issues/35\r\n\r\nFinally, we have 100k+ people who use Fig, and pyenv is one of the top 100 CLI tools Fig users use for autocomplete (whereas python, pip, etc are all much higher). We'd generally love to work with you to support pyenv as much as we can and make the experience absolutely great!\r\n\r\nHappy to answer any more questions. ",
      "Okay. After consulting team members, here's the deal.\r\n\r\nA separate, prominent advertisement section recommending Fig as the default way of action is too much -- especially since we cannot vouch for Fig's completions' accuracy, completeness and up-to-dateness for whatever Pyenv version the user has installed.\r\nBut we can briefly mention Fig under an appropriate installation section -- e.g. at the end of https://github.com/pyenv/pyenv#set-up-your-shell-environment-for-pyenv , -- with smth like this:\r\n\r\n> In MacOS, you might also want to install [Fig](https://fig.io/) which provides alternative shell completions with an IDE-like popup interface.\r\n\r\nWould this okay with you? Is the suggested wording accurate -- e.g. are any other steps needed to ensure that Fig won't conflict with the suggested shell setup?",
      "@native-api My apologies. I clearly just completely missed your November comment.\r\n\r\nI have created a new PR (https://github.com/pyenv/pyenv/pull/2574) with your suggestion above. Let me know how this looks and thanks again for your help"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3ab44ee515ce6a4ab32",
    "number": 2421,
    "body": "### Description\r\nUpdate to modifications after PR https://github.com/pyenv/pyenv/pull/2419 which didn't work due to:\r\n -  \"extglob\" mode in BASH doesn't support RegEx-like character classes like `[:digits:]`, you need to\r\n    use `[0-9]` (unless there is another option for *that*...)\r\n\r\n -  BASH `shopt` is *really* strange - it's used by both the parser *and* the runtime: you need to \"wrap\" \r\n    `apply_python_patch()` with `shopt -s extglob / shopt -u extglob`, but then *also* call `shopt -s extglob`\r\n    and `shopt -u extglob` *again* within the function.    \r\n    Otherwise it parses the glob pattern, but applies it \"literally\" (non-extglob-wise) - which won't match \r\n    anything reasonable. :grin: \r\n\r\n",
    "head_branch": "allow-pypy2-pypy3-patching",
    "is_a_fork": true,
    "comments": [
      "Dammit!\r\nI knew that warranted a test...",
      "My apologies for pushing untested code in the previous PR :frowning_face: "
    ],
    "commit_messages": [
      "Allow pypy2 pypy3 patching (#2421)\n\n* Fix: patterns for pypy2.*/pypy3.* versions\r\n\r\n* Shrink pypy patterns\r\n\r\n* Fix extglob pattern\r\n\r\n* Fix: no regex-charclasses like '[:digit:]' in 'extglob', needs also double-activation for parse/runtime stage\r\n\r\nCo-authored-by: native-api <vano@mail.mipt.ru>\r\nCo-authored-by: Bjoern Schneider <bjoern.schneider@scribos.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3ab44ee515ce6a4ab33",
    "number": 2420,
    "body": "`3.11.0b5` was released today (July 26th)\r\n\r\nhttps://www.python.org/downloads/release/python-3110b5/\r\n",
    "head_branch": "3.11.0b5",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.11.0b5 (#2420)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3ac44ee515ce6a4ab34",
    "number": 2419,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n   * It's Python specific / python-build plugin.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * see above\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2418\r\n\r\n### Description\r\nAllows PyPy versions named like `pypy<CPython-compatible-version>-<actual version>` to be patched.\r\n\r\n### Tests\r\nNone. Trivial change (hopefully).\r\n",
    "head_branch": "allow-pypy2-pypy3-patching",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix: patterns for pypy2.*/pypy3.* versions (#2419)\n\nCo-authored-by: native-api <vano@mail.mipt.ru>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3ad44ee515ce6a4ab35",
    "number": 2414,
    "body": "There is a small typo in CONTRIBUTING.md.\n\nShould read `principles` rather than `principes`.\n\n\nSemi-automated pull request generated by\nhttps://github.com/timgates42/meticulous/blob/master/docs/NOTE.md",
    "head_branch": "bugfix_typo_principles",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "docs: fix simple typo (#2414)\n\nSigned-off-by: Tim Gates <tim.gates@iress.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3ae44ee515ce6a4ab36",
    "number": 2413,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n\r\nAs Github deprecated git:// protocol long time ago, we should update the docs. In fact I was not even able to clone using git protocol today as the process was hung, probably the server does not respond anymore.\r\n\r\nReference: https://blog.readthedocs.com/github-git-protocol-deprecation/#:~:text=Last%20year%2C%20GitHub%20announced%20the,project%20)%20to%20clone%20their%20projects.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "python-build: Replace deprecated git protocol in the README (#2413)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3af44ee515ce6a4ab37",
    "number": 2412,
    "body": "\r\n### Description\r\n- It looks like rbenv addressed the [path traversal vulnerability some time ago.](https://github.com/rbenv/rbenv/commit/370c26a6c9ee0511972ea04904fcc89014a22987)\r\n- There are some additional change available in rbenv that simplify the read logic. Even so, my changes are functionally the same.\r\n\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "In the e-mail, you mentioned having a CVE number assigned. Did you get it? If yes, it'll probably be worth mentioning.",
      "> In the e-mail, you mentioned having a CVE number assigned. Did you get it? If yes, it'll probably be worth mentioning.\r\n\r\nI have CVE-2022-35861 reserved. \r\n\r\n> disallowing path traversal constructs altogether like Rbenv did.\r\n\r\nEither approach makes sense to me. My original approach was more of an \"allow\" approach where rbenv took a \"deny\" approach.\r\n",
      "I am done amending my commit. Please review the newest commit.\r\n\r\nThe current CVE form fields are below. Let me know if you would like any revisions.\r\n\r\n### Suggested description\r\npyenv 1.2.24 through 2.3.2\r\n\r\nAllows local users to gain privileges via a .python-version file in the current working directory.\r\n\r\nAn attacker can craft a Python version string in .python-version\r\nto execute shims under their control. (Shims are executables that\r\npass a command along to a specific version of pyenv. The version\r\nstring is used to construct the path to the command, and there is no\r\nvalidation of whether the version specified is a valid version.)\r\n\r\n### VulnerabilityType Other\r\nCWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\r\n\r\n### Vendor of Product\r\npyenv\r\n\r\n### Affected Product Code Base\r\npyenv - 1.2.24-2.3.2\r\n\r\n### Affected Component\r\n.python-version,shims/*\r\n\r\n### Attack Type\r\nContext-dependent\r\n\r\n### Impact Code execution\r\ntrue\r\n\r\n### Attack Vectors\r\nCrafted .python-version file in the current directory allows attacker to specify shims under their control\r\n\r\n### Reference\r\nhttps://github.com/pyenv/pyenv\r\nhttps://github.com/pyenv/pyenv/pull/2412\r\nhttps://cwe.mitre.org/data/definitions/23.html\r\n\r\n### Discoverer\r\nJames Stronz\r\n",
      "I tried to merge Rbenv codebase like @yyuu did before -- since there may be other useful changes beside this -- but was unsuccessful so far (some files didn't merge because of different names, perhaps they weren't properly renamed with Git when forking or merging before).\r\n\r\nI'll continue trying, so whichever effort completes first will get into the codebase."
    ],
    "commit_messages": [
      "CVE-2022-35861: Fixed relative path traversal due to using version string in path (#2412)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3b044ee515ce6a4ab38",
    "number": 2411,
    "body": "### Description\r\n\r\nUpdate CPython 3.11.0 beta release.",
    "head_branch": "cpython-3110b4",
    "is_a_fork": true,
    "comments": [
      "Sorry @native-api! I wiped out your changes when I force-pushed up a change on my fork. Do we need to bump the openssl?",
      "> Do we need to bump the openssl?\r\n\r\nNot really"
    ],
    "commit_messages": [
      "Add CPython 3.11.0b4 (#2411)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3b144ee515ce6a4ab39",
    "number": 2405,
    "body": "* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n\r\nConsidered; implementation is too simple for a plugin.\r\n\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n\r\nIs this recommendation still valid? Looks like rbenv's had version sort for months: rbenv/rbenv@28cd6f12\r\n\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2097\r\n\r\n### Description\r\nCheck if the system `sort` command supports version sort and, if so, use it.\r\n\r\nI used `sort --version-sort` as discussed in #2097. `rbenv`'s solution does not depend on `--version-sort`, and would require a little bit more refactoring, but I'd be happy to port it to pyenv if you think it's worth the effort.\r\n\r\n### Tests\r\nShould I add any?\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Oops I see that I'm relying on the existence of at least some `sort` command; I'll fix it.",
      "`sort` is a standard UNIX command and is used elsewhere, too. You can rely on its presence.",
      "> `sort` is a standard UNIX command and is used elsewhere, too. You can rely on its presence.\r\n\r\napparently it's missing inside the CI environment, because it was breaking some bats tests",
      "BTW how do I run the test suite locally? Instead of pushing only to find I've broken more tests.",
      "> BTW how do I run the test suite locally? Instead of pushing only to find I've broken more tests.\r\n\r\n`make test`",
      "Looks like it's good now!",
      "> As new functionality, this probably warrants a test.\r\n\r\nThe problem is the CI environment [doesn't have `sort`](https://github.com/pyenv/pyenv/runs/7155941041#step:6:187). I could implement a test like \"if system has sort, assert sorted by version; else, assert sorted lexicographically\" -- would it be ok?",
      "> The problem is the CI environment [doesn't have `sort`](https://github.com/pyenv/pyenv/runs/7155941041#step:6:187).\r\n\r\nIt does have `sort` as it's a part of `coreutils`. The reason it's not found there is the [`path_without`](https://github.com/pyenv/pyenv/blob/304515f2cdd11db151b7a5733d11934d3990a67e/test/test_helper.bash#L117-L138) test function. It doesn't include `sort` in the list of executables it ensures to be present on PATH -- `sort` needs to be added to that list.",
      "> I could implement a test like \"if system has sort, assert sorted by version; else, assert sorted lexicographically\"\r\n\r\nThe tests need to run in systems with both \"modern\" and \"old\" `sort` -- so you need to mock it for the test.\r\n\r\nSince the new logic only fires with \"modern\" sort, it's sufficient to mock up a \"modern\" `sort` for the new test: the logic for \"old\" sort is already tested in existing tests which have test data where version sorting makes no difference.\r\n\r\nThere is an existing function that mocks an executable, use it as an example. The logic for the mockup can be to just unconditionally output the correct result for the specific set of versions that you make in the test.",
      "Ok, the test passes, but I'm not sure if that's what you meant.\r\n\r\nIf you drop the `--version-sort` in https://github.com/fofoni/pyenv/blob/c70edbec5386d617f5ace823c97d90a85654c51a/libexec/pyenv-versions#L134 then the test will fail. Is that it?",
      "Also, I didn't add `sort` to the whitelist inside `path_without`, since it's not required anymore to make the tests pass.",
      "Well, the mktemp problem is fixed.\r\n\r\nNow, just to be sure: with the implementation we have right now, if the system doesn't have a modern `sort` binary, then no `sort` binary is used at all. In this case, what happens is the old behavior of getting the order (guaranteed by bash as you mentioned [here](https://github.com/pyenv/pyenv/issues/2097#issuecomment-937620720)) from the glob `$versions_dir/*`.\r\n\r\nAs you also already said,\r\n\r\n> Since the new logic only fires with \"modern\" sort, it's sufficient to mock up a \"modern\" sort for the new test: the logic for \"old\" sort is already tested in existing tests which have test data where version sorting makes no difference.\r\n\r\nthis old behavior is already checked in tests like \"[multiple versions](https://github.com/fofoni/pyenv/blob/master/test/versions.bats#L64)\", \"[indicates current version](https://github.com/fofoni/pyenv/blob/master/test/versions.bats#L79)\", \"[globally selected version](https://github.com/fofoni/pyenv/blob/master/test/versions.bats#L103)\", and others in the `versions.bats` file.\r\n\r\nI understand that maybe explicitly testing the order with another test dedicated for this might be desired; I'd just like to make sure that's what you're asking for.",
      "> this old behavior is already checked in tests like \"[multiple versions](https://github.com/fofoni/pyenv/blob/master/test/versions.bats#L64)\", \"[indicates current version](https://github.com/fofoni/pyenv/blob/master/test/versions.bats#L79)\", \"[globally selected version](https://github.com/fofoni/pyenv/blob/master/test/versions.bats#L103)\", and others in the `versions.bats` file.\r\n\r\nThe problem is, in those tests, we don't mock anything within the ordering logic. So with a new `sort`, those tests would fire the new execution path rather than the old one.",
      "Oh ok, that makes sense",
      "Good job. Thank you!"
    ],
    "commit_messages": [
      "Use version sort in `pyenv versions` if available (#2405)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3b144ee515ce6a4ab3a",
    "number": 2404,
    "body": "### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n\r\nThe order of the versions for `pyenv global` have a meaning.  #2406 shows this.\r\nThis documents what to do to keep the system default python\r\nversion as the version to be used for all commands for the major version but at the same time expose the other installed Python versions with their major and minor versions to PATH.\r\nI.e. python3 -> system\r\npython3.10 -> system\r\npython3.9 -> pyenv\r\npython3.8 -> pyenv\r\n...\r\n\r\nTo use with tox.\r\n\r\nI realize that this is something to be discussed in the forum. If that needs to happen first, please close the issue.\r\nAlthough, this would have saved my some minutes of searching and trying out.\r\n\r\n### Tests\r\n\r\nnone, documentation",
    "head_branch": "document-using-all-versions",
    "is_a_fork": true,
    "comments": [
      "@native-api, I described more clearly what this documentation solves for me. Also, I opened the issue #2406 which this does not solve.",
      "That sounds like a good proposal to me. I will change it when I find the time.\n",
      "It's probably also better to place it into https://github.com/pyenv/pyenv#understanding-python-version-selection because this mechanic is not specific to `pyenv global`."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3b244ee515ce6a4ab3b",
    "number": 2391,
    "body": "### Description\r\n- pyenv install anaconda3-2022.05 failed on my mac, error is checksum mismatch\r\n- I go to https://repo.anaconda.com/archive/  and see the checksum is different than what is expected, I guess some update on anaconda after PR.\r\n- the checksum I use is for the version 304.8M | 2022-06-07 12:40:25\r\n\r\n\r\n\r\n\r\n\r\n### Tests\r\n- I tested on my mac\r\n Platform information: macOS 12.4\r\n OS architecture: arm64\r\n pyenv version: 2.3.1 (latest homebrew)",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update anaconda3-2022.05 MacOSX arm64 md5 (#2391)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3b344ee515ce6a4ab3c",
    "number": 2390,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ x] Here are some details about my PR\r\n\r\n### Tests\r\n- [ x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "pyston-2.3.4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add pyston-2.3.4 (#2390)\n\nCo-authored-by: Dan Dees <dand@appsmiths.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3b444ee515ce6a4ab3d",
    "number": 2386,
    "body": null,
    "head_branch": "cpython-3.10.5",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.10.5 (#2386)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3b544ee515ce6a4ab3e",
    "number": 2385,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2369\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nSupport Anaconda and arbitrary dot-separated version numbers in add_miniconda.py\r\n\r\nAdd resulting generated versions.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\nN/A",
    "head_branch": "condas",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2385 from native-api/condas\n\nAdd Anaconda 2019.10, 2021.04, 2022.05; support Anaconda in add_miniconda.py"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3b644ee515ce6a4ab3f",
    "number": 2384,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2381\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nPython-config ignores build-time LDFLAGS and as such, doesn't print flags required for linking to Homebrew-provided libs. This causes an error when trying to embed Pyenv-provided Python that uses Homebrew-provided libs.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "python_config_homebrew",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add flags for Homebrew into `python-config --ldflags` (#2384)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3b644ee515ce6a4ab40",
    "number": 2382,
    "body": "`3.11.0b3` was released today (June 1st)\r\n\r\nhttps://www.python.org/downloads/release/python-3110b3/\r\n",
    "head_branch": "3.11.0b3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.11.0b3 (#2382)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3b744ee515ce6a4ab41",
    "number": 2380,
    "body": "3.11.0b1 -> 3.11.0b2\r\n",
    "head_branch": "3.11.0b2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.11.0b2 (#2380)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3b844ee515ce6a4ab42",
    "number": 2374,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2367\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "ssh_endless_loop",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix endless loop in `pyenv init -` under SSH in some shell setups (#2374)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3b944ee515ce6a4ab43",
    "number": 2372,
    "body": "### Description\r\nAdd [recently released](https://www.python.org/downloads/release/python-3913/) CPython `3.9.13`.",
    "head_branch": "add-cpython-3-9-13",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.9.13 (#2372)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3ba44ee515ce6a4ab44",
    "number": 2371,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nI used `add_miniconda.py` to generate installation files for `miniconda3-3.7-4.12.0`, `miniconda3-3.8-4.12.0`, and `miniconda3-3.9-4.12.0`.\r\n\r\nIn addition, I realized that `add_miniconda.py` was missing support for three architectures: `aarch64`, `arm64`, and `s390x`. I added support for them and updated the existing Miniconda versions accordingly.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "update-miniconda-4.12.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2371 from aphedges/update-miniconda-4.12.0\n\nAdd miniconda 4.12.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3ba44ee515ce6a4ab45",
    "number": 2361,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [n/a] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nPython 3.11 is in beta, which means it has moved from `main` to `3.11`\r\n* https://github.com/python/cpython/tree/3.11\r\n\r\n`main` is now open as the Python 3.12 branch\r\n* https://github.com/python/cpython\r\n\r\nThis PR is based on https://github.com/pyenv/pyenv/pull/1897 (update 3.10-dev and add 3.11-dev)\r\n\r\n(After the upstream branching, I was a little surprised when I installed `3.11-dev` and it installed Python 3.12 because it went from `main` :)\r\n\r\n### Tests\r\n- [n/a] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "3.12-dev",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update 3.11-dev and add 3.12-dev (#2361)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3bb44ee515ce6a4ab46",
    "number": 2358,
    "body": "`3.11.0b1` was released today (8th of May)\r\n\r\nhttps://www.python.org/downloads/release/python-3110b1/",
    "head_branch": "3.11.0b1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.11.0b1 (#2358)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3bc44ee515ce6a4ab47",
    "number": 2356,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nMy PR fixes several typos in README.md, CHANGELOG.md, libexec/pyenv-help.\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "README.md, CHANGELOG.md, libexec/pyenv-help: Fix typos"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3bd44ee515ce6a4ab48",
    "number": 2355,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nMy PR fixes a typo in README.md.\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "README.md: Fix typo"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3be44ee515ce6a4ab49",
    "number": 2353,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Related to #2137 but seems different enough to not close that issue\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nI got warnings on one machine that `bz2`, `readline`, and `sqlite3` could not be built. When installing the build dependencies according to the wiki, I realized that some warnings were missing. I've added warnings for [`curses`](https://docs.python.org/3/library/curses.html), [`ctypes`](https://docs.python.org/3/library/ctypes.html), and [`tkinter`](https://docs.python.org/3/library/tkinter.html) for all Python 3 versions and warnings for [`lzma`](https://docs.python.org/3/library/lzma.html) for Python 3.3 and later.\r\n\r\nThe wording for the warning messages might need to be adjusted, but I tried my best to match the style for similar warnings.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n\r\nI tested on Python 3.9.12 and 3.10.4 on CentOS 7 systems both with and without these packages to ensure the warnings work as expected. I also tested Python 3.0.1 and 3.3.7 to ensure I didn't break any older versions with these changes.",
    "head_branch": "more-extension-checks",
    "is_a_fork": true,
    "comments": [
      "OTOH, since all these extension modules are part of the standard library, _with no \"ifs\" and \"buts\"_ -- a Python without them can very well be considered not fully functional -- so it's perfectly valid to warn the user about that.\r\n\r\nI would pass on TKinter still since servers are a huge niche for Pyenv and seeing this pointless, unsilenceable warning would be hugely annoying for their operators.",
      "> OTOH, since all these extension modules are part of the standard library, _with no \"ifs\" and \"buts\"_ -- a Python without them can very well be considered not fully functional -- so it's perfectly valid to warn the user about that.\r\n\r\nI agree with this train of thought. These are all packages in the standard library, and they can generally be assumed to be functional in any Python installation. I know that I've had problems where Python would mysteriously fail weeks after I install it because I eventually get around to opening an LZMA-compressed zip file or a similar operation. I know that the current `python-build` code considers `ssl` and `zlib` important enough that the build will fail without them present. I think both `ctypes` and `readline` are vital enough that requiring them (instead of simply warning) would make sense. I don't really know where to draw the line, though.\r\n\r\nI agree that having Tkinter installed on servers doesn't really make sense. However, likely because it wasn't listed on the wiki, I did have problems a couple of years ago getting Tkinter to work on macOS because I didn't even realize that building the module had failed. It'd be nice if there were an easy way to only warn for Tkinter in some circumstances, but I'm not sure what those should be. Maybe have some environment variable to enable or disable the warning, or maybe only warn on macOS, which likely isn't going to be a server.",
      "There is a server version of MacOS. In fact, that's what MacOS CI environments use.",
      "Are you sure? I remember hearing that macOS Server was discontinued. From [About macOS Server 5.7.1 and later - Apple Support](https://support.apple.com/en-us/HT208312):\r\n\r\n> As of April 21, 2022, Apple has discontinued macOS Server.\r\n\r\nI definitely didn't think about whatever version of macOS runs on CI, though. I'm presuming it's similar to standard macOS.\r\n\r\nRegardless, I'm not sure what heuristics to use to figure out whether to warn about missing `tkinter` or not. Detecting the OS doesn't work because it's not needed in CI. Detecting CI doesn't work because there is no general way to detect that. I can see there is a `use_tcltk` function in `python-build`, but it doesn't seem like it has a useful return value, and it probably wouldn't help if Tcl/Tk isn't installed on the system at all.\r\n\r\nI'm thinking that an environment variable to enable or disable the warning might be what is needed, given the inability to decide what the user wants automatically. I can implement it, but I'd like to know whether you'd want the warning to default be enabled or not.",
      "I don't think anyone would bother with an envvar that affects so little...\r\n\r\nIs TKinter such a big deal anyway? I've tried building apps on it. Ended up with a two-month-salary worth of damages. It's horrible to use, has no tooling, no documentation, looks like sh1t and underneath that are serious (as in causing routine crashes) bugs that no-one has bothered to fix for _decades._ I've yet to see a _single_ 3rd-party app built on it, everyone uses Qt or wxWidgets. If that's not evidence that it's is a dead-end library that no-one cares about, I dunno what is.",
      "Anyway, @pyenv/pyenv-core-maintainers , what's your opinion on this? I'm probably biased here...",
      "I personally rarely use Tkinter and have never written anything with it, but I do need to use it maybe once or twice a year to run some existing program or another. I don't have any strong opinions about it as a framework besides the fact that it's in the standard library so some packages assume it's present.",
      "To be quite honest, I cannot provide any clear guidance and/or draw line within standard libraries. My assessment below is all about my personal guess and I might be wrong. tl;dr - let’s remove verification for TkInter. How do you guys think…? 🤔 \r\n\r\nWith regard to other standard libraries we are verifying right now, SSL is vital to maintain things functional since it’s 2022 now and most of websites are on HTTPS; we need SSL before everything. Compression libraries are other parts of foundation to make external connections (to get further libraries installed…) so we wanted to ensure it to be there.\r\n\r\nOne question I have is about “sqlite3”; it has been included as a standard library, however, I have question on the popularity of the library amongst applications. Nowadays, I think it’d be more intuitive if Python treats it as a 3rd party library can be installed from PyPI, IMHO. So far we have been verifying it because it has been a part of standard library, however, it might be excessive if the library is not popular enough.\r\n\r\nBack to the original question on drawing the line, I am fine with LZMA since it’s a part of standard library and is a foundational compression functionality. (although usage of LZMA would be lesser popular compared to GZip…) CFFI is bit tricky but I recognize it as foundational part of standard library. Although TkInter is more like to “sqlite3” case, moreover it would have even lesser popularity compare to it. I actually don’t have any statistics on popularity hence this is all about my guess, but adding verification to TkInter would be more troublesome than its benefit.\r\n\r\nIn case there are some others want to perform extra verifications for TkInter, I think it’d be better idea to start from pyenv’s “after_install” hook to perform the verification instead of changing the verification behaviour for all Pythons. I don’t think I have ever used TkInter for the last 15 years. My case might NOT be as similar as others though.",
      "This discussion made me realize that having concrete statistics about standard library usage would be helpful. I spent an hour analyzing the top 500 packages on PyPI according to the list at <https://hugovk.github.io/top-pypi-packages/>. The least popular of these was downloaded over 4 million times over a recent 30 day period, so these are clearly all used often. Using a variety of heuristics, I have some vague numbers about the usage of various packages:\r\n\r\n- `ctypes` is used by 82 of the packages.\r\n- `tkinter` is used by 9 of the packages, including `ipython`, `matplotlib`, and `nltk`. I can confirm that I've used a GUI for the latter two multiple times before, but that was mostly when I starting to learn Python and didn't know much about using a CLI.\r\n- `sqlite3` is used by 21 of the packages, including `Django`, `SQLAlchemy`, `ansible`, `mypy`, and `pandas`.\r\n\r\nAll the rest of the extension modules are used by at least one package, with `curses` used by 11 and `zlib` used by 57. I can provide numbers for all of them, along with my methodology, if you want. There are probably some false positives, but  a manual inspection shows at least some of these are legitimate.\r\n\r\nI'd like to point out that I'm not saying we need a build failure for any of these checks. The code I've added just prints a warning if importing the module fails. It doesn't seem to have any performance implications, so I don't see any reason to not do it except to avoid showing warnings that the user might not care about. I just feel that it would be more clear to users, especially beginners, if they know upfront that something is missing from their compiled standard library that they would expect to have if they installed a binary from Python.org or Anaconda.\r\n\r\n---\r\n\r\nOver two years later, I'm cleaning out my laptop, and I still have the files I downloaded. Just in case anyone cares to know my methodology in the future, here are the commands I ran:\r\n\r\n```bash\r\nwget https://hugovk.github.io/top-pypi-packages/top-pypi-packages-30-days.min.json\r\npython -c \"import json; top_packages = json.load(open('top-pypi-packages-30-days.min.json')); top_500 = [p['project'] for p in top_packages['rows'][:500]]; open('packages.txt', 'w').write('\\n'.join(top_500) + '\\n')\"\r\ntime xargs -I % pip download --no-deps --only-binary :all: --dest downloads/ % <packages.txt\r\ntime ls downloads/* | xargs -I % bash -c 'mkdir temp/; unzip % -d temp; find temp/ -type f -name *.py | sort | xargs cat >py_files/$(basename %); rm temp/'\r\ntime ls py_files/* | xargs -I % bash -c 'grep \"\\bimport\\b\" % | sed -e \"s/^[[:space:]]*//\" | sort | uniq >import_files/$(basename %)'\r\n```\r\n\r\nThe wheels are way too large to include, but I have attached `top-pypi-packages-30-days.min.json` and `import_files/` to this issue: [pyenv_pull_2353_files.zip](https://github.com/user-attachments/files/17236941/pyenv_pull_2353_files.zip)\r\n",
      "> tkinter is used by 9 of the packages, including ipython, matplotlib, and nltk\r\n\r\nI can attest that IPython has no GUI functionality itself, it rather has a magic command to run TKinter's event loop in background (and for a number of other GUI libraries as well) so that a user is able to run a GUI and use the console without freezing either.\r\n\r\nMatplotlib does have GUI functionality and allows one to select from a number of GUI toolkits as well as save information in a number of image formats instead of displaying it.\r\n\r\nLooking through NTLK docs, TKinter does appear to be the only backend it can use but it's only required if you use the `ntlk.draw` visualization submodule. `ntlk.download` uses TKinter only if it's available, and [this can actually cause problems](https://support.enthought.com/hc/en-us/articles/204470000-NLTK-Natural-Language-Toolkit-Download-function-hangs).",
      "> However, likely because it wasn't listed on the wiki\r\n\r\nThen a solution can be to just list it in the suggested environment :wink: That's fine by me.\r\nAs I mentioned earlier, it's probably not listed now only for historical reasons anyway.",
      "> Then a solution can be to just list it in the suggested environment wink\r\n\r\nDone.",
      "> I'm thinking that an environment variable to enable or disable the warning might be what is needed, given the inability to decide what the user wants automatically. I can implement it, but I'd like to know whether you'd want the warning to default be enabled or not.\r\n\r\n> I don't think anyone would bother with an envvar that affects so little...\r\n\r\nThe presence of the `DISPLAY` envvar looks like the most basic test for GUI capability presence. More importantly, this is the test that CPython itself (https://github.com/python/cpython/blob/a458be3263b4cb92f3fde726461e8ef44b2a4a9d/Lib/tkinter/test/test_tkinter/test_loadtk.py#L12) and Tk (https://github.com/tcltk/tk/blob/dfbc861eafe7035121c0e5543454db7acb5375ef/generic/tkWindow.c#L312-L316) use.\r\n\r\nOf course, even at a workstation, there are text-mode sessions available with this envvar not set, but they are rarely used for regular work.\r\n\r\nSo we could only display the warning when this envvar is present. The warning should probably include a note that a GUI subsystem has been detected to hint the user that the warning is conditional (so that they aren't suprised when it appears in one situation and doesn't in another).",
      "Sorry for the late response. I haven't had the time to follow up on this recently, but I did look into `$DISPLAY`. I was able to confirm it was set on my macOS and Windows installations but not my terminal-only Linux installation. I just didn't get around to implementing your suggested change. Thank you very much for implementing it yourself!\r\n\r\nI agree that adding `tcl-tk` to the Homebrew installation instructions was a good idea. Even so, this check will still be helpful because <https://github.com/python/cpython/commit/b36d222110d0d6d84dc8e973ca87d976c2423f5d> changed the Tkinter installation logic to require `export PKG_CONFIG_PATH=\"$(brew --prefix)/opt/tcl-tk/lib/pkgconfig\"` with Homebrew on macOS. I was able to verify this on my macOS installation with `$(pyenv prefix 3.11.0a7)/bin/python -c 'import tkinter'`. In addition, I was able to confirm the requirement for `$DISPLAY` on my macOS and Linux systems:\r\n\r\n```console\r\n# On macOS\r\n$ echo $DISPLAY\r\n/private/tmp/com.apple.launchd.v2IIgZLwTR/org.xquartz:0\r\n$ python -c 'import tkinter'\r\n$ python -m tkinter\r\n# On Linux over SSH\r\n$ echo $DISPLAY\r\n\r\n$ python -c 'import tkinter'\r\n$ python -m tkinter\r\nTraceback (most recent call last):\r\n  File \"/nas/home/ahedges/.pyenv/versions/3.7.13/lib/python3.7/runpy.py\", line 193, in _run_module_as_main\r\n    \"__main__\", mod_spec)\r\n  File \"/nas/home/ahedges/.pyenv/versions/3.7.13/lib/python3.7/runpy.py\", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  File \"/nas/home/ahedges/.pyenv/versions/3.7.13/lib/python3.7/tkinter/__main__.py\", line 7, in <module>\r\n    main()\r\n  File \"/nas/home/ahedges/.pyenv/versions/3.7.13/lib/python3.7/tkinter/__init__.py\", line 3988, in _test\r\n    root = Tk()\r\n  File \"/nas/home/ahedges/.pyenv/versions/3.7.13/lib/python3.7/tkinter/__init__.py\", line 2023, in __init__\r\n    self.tk = _tkinter.create(screenName, baseName, className, interactive, wantobjects, useTk, sync, use)\r\n_tkinter.TclError: no display name and no $DISPLAY environment variable\r\n```"
    ],
    "commit_messages": [
      "Add post-install checks for curses, ctypes, lzma, and tkinter (#2353)\n\nTkinter check is conditional on DISPLAY\r\n\r\nCo-authored-by: Ivan Pozdeev <vano@mail.mipt.ru>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3bf44ee515ce6a4ab4a",
    "number": 2351,
    "body": "It seems the `:latest` syntax (as added in commit #1831) is not documented anywhere in this file even though it's very useful so i thought it would be useful to add it.\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Was this feature silently removed or got broken because latest pyenv behaves like this never existed:\r\n\r\n```\r\n$ pyenv install 3.10:latest \r\npython-build: definition not found: 3.10:latest\r\n\r\nSee all available versions with `pyenv install --list'.\r\n\r\nIf the version you need is missing, try upgrading pyenv:\r\n\r\n  brew update && brew upgrade pyenv\r\n\r\n$ pyenv --version\r\npyenv 2.3.9\r\n```",
      "[It's broken.](https://github.com/pyenv/pyenv/issues/2569)"
    ],
    "commit_messages": [
      "Add `:latest` syntax to documentation for the `install` command (#2351)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3bf44ee515ce6a4ab4b",
    "number": 2349,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/1479\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nIt turn out, libraries from Homebrew in Linux (\"Linuxbrew\" henceforth for short)\r\ncan't be used out of the box and require additional compiler flags.\r\n\r\nSince Linuxbrew is not the primary source of dependency packages in Linux and\r\nthe problem seems to happen whether Pyenv itself is Linuxbrew-provided or not,\r\nwe'll disable using Homebrew outside of MacOS for now to fix the breakage.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "no_linuxbrew",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2349 from native-api/no_linuxbrew\n\nDon't use Homebrew outside of MacOS"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3c044ee515ce6a4ab4c",
    "number": 2347,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nTrace logs without `-v` are usually useless due to\r\nmissing the build part.\r\nSo this leaves one less thing for users to worry about\r\nwhen submitting error reports.\r\n\r\nMentioning `-v` in the issue template should stay for some time\r\nsince users report on old versions, too.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\nN/A",
    "head_branch": "debug_imply_verbose",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make PYENV_DEBUG imply -v for `pyenv install` (#2347)\n\nTrace logs without `-v` are usually useless due to missing the build part.\r\nSo this leaves one less thing for users to worry about\r\nwhen submitting error reports.\r\n\r\nMentioning `-v` in the issue template should stay for some time\r\nsince users report on old versions, too."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3c144ee515ce6a4ab4d",
    "number": 2346,
    "body": "Add a new release of GraalPython.\r\n\r\nCC @timfel ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add GraalPython 22.1.0 (#2346)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3c244ee515ce6a4ab4e",
    "number": 2344,
    "body": "…y support MacOS 11\r\n\r\nThere are no new platform incompatibilities in MacOS 12 so those releases likely run in it as well\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Addresses https://github.com/pyenv/pyenv/issues/2143\r\n  - Closes https://github.com/pyenv/pyenv/issues/2338\r\n  - Closes https://github.com/pyenv/pyenv/issues/2312\r\n  - Closes https://github.com/pyenv/pyenv/issues/2343\r\n  - Closes https://github.com/pyenv/pyenv/issues/2340\r\n  - Closes https://github.com/pyenv/pyenv/issues/2285\r\n  - Closes https://github.com/pyenv/pyenv/issues/2284\r\n  - Closes https://github.com/pyenv/pyenv/issues/2280\r\n  - Closes https://github.com/pyenv/pyenv/issues/2317\r\n  - Closes https://github.com/pyenv/pyenv/issues/2306\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nAs per https://github.com/pyenv/pyenv/issues/2143#issuecomment-1072032647, backports https://github.com/python/cpython/commit/9c4766772cda67648184f8ddba546a5fc0167f91 to all releases that officially support MacOS 11 (https://github.com/pyenv/pyenv/issues/1737#issuecomment-794592631).\r\nFor some later releases, the patch is not needed.\r\n\r\nRationale:\r\n* MacOS 12 does not introduce any (glaring) new incompatibilities, so those versions should technically run in it as well -- the reason for the error is the new compiler rather than the OS.\r\n* Users have reported that they try to use a multitude of those versions in MacOS 12\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\nN/A",
    "head_branch": "xcode_13.3",
    "is_a_fork": true,
    "comments": [
      "@native-api , can you tag the commit to a release and publish it to homebrew repo? ",
      "Unfortunately this broke our builds as `patch` is now required (ironically on `Linux`).",
      "@jtnz `patch` has always been required, just not always used.\r\nWe do not list it as a prerequisite because it's usually preinstalled.",
      "@liualexiang I'm going to, I just wish to push a few other major fixes before that.",
      "@native-api It's not in the wiki list of packages for RHEL/CentOS etc, so was just letting you know. https://github.com/pyenv/pyenv/wiki#suggested-build-environment",
      "@jtnz I mean that we assume that it's a part of common UNIX tools. If it's actually not, please create an issue, then we can assess this further and perform necessary action."
    ],
    "commit_messages": [
      "Support XCode 13.3 (Apple Cang 13.1.6) in all releases that officially support MacOS 11 (#2344)\n\nThere are no new (glaring) platform incompatibilities in MacOS 12 so those releases should technically run in it as well"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3c344ee515ce6a4ab4f",
    "number": 2342,
    "body": "It would be great if users could install the \"nogil\" fork of CPython through pyenv. This adds the build description for the latest version of the \"nogil\" fork.\r\n\r\nSee also https://github.com/colesbury/nogil/issues/33 and thanks to @Riatre and @thedrow",
    "head_branch": "nogil-3.9.10",
    "is_a_fork": true,
    "comments": [
      "AFAICS, [this fork is blessed by the core team](https://lukasz.langa.pl/5d044f91-49c1-4170-aed1-62b6763e6ad0/) and is actually planned for merging into the core sometime in the future after other related changes are made -- in particular, backward compatibility is ensured. Apparently, it has solved the catastrophic single-threaded code slowdown problem that had killed the previous efforts. So this isn't some one-shot unusable-in-real-life pet build, it's very likely to actually lead somewhere -- and as such, likely to attract a fair share of early adopters.\r\n\r\nAs such, I have no objections.\r\n\r\n@pyenv/pyenv-core-maintainers , any other input?",
      "@colesbury , thank you for your effort and the PR! Hopefully, availability via Pyenv will help attract more input, real-life use and contributions for your initiative!",
      "@native-api Thanks! Pyenv will make it a lot easier for people to try out the fork.\r\n\r\nTo be clear, the fork isn't blessed by the core team. It's under consideration, but there are no plans to merge it into CPython yet. Getting more people to use it (and pyenv helps with that) will help with addressing concerns about compatibility and, I think, also show the benefit in real-life applications."
    ],
    "commit_messages": [
      "Add \"nogil\" Python v3.9.10 (#2342)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3c444ee515ce6a4ab50",
    "number": 2326,
    "body": "For some reason, the init command needs the argument '--path' to add the shims path to the PATH var env.\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Only updating documentation in the Readme file."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3c444ee515ce6a4ab51",
    "number": 2316,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nRemoved warning about Ubuntu and x86_64 only because neither seems to hold per https://github.com/pyston/pyston/releases/tag/pyston_2.3.3 any more.\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "pyston-2.3.3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Pyston 2.3.3 (#2316)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3c544ee515ce6a4ab52",
    "number": 2315,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.11.0a7 (#2315)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3c644ee515ce6a4ab53",
    "number": 2310,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2220\r\n  - Closes https://github.com/pyenv/pyenv/issues/2213\r\n  - Closes https://github.com/pyenv/pyenv/issues/2206\r\n  - Closes https://github.com/pyenv/pyenv/issues/2198\r\n  - Closes https://github.com/pyenv/pyenv/issues/2085\r\n  - Closes https://github.com/pyenv/pyenv/issues/2299\r\n  - Closes https://github.com/pyenv/pyenv/pull/2326\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nNow it's add to both rc and profile:\r\n1) Add `pyenv` to PATH if not already there\r\n2) set PYENV_ROOT if not already set\r\n3) eval \"$(pyenv init -)\"\r\n\r\nNot a breaking change, old setup will continue to work.\r\n\r\nTBD:\r\n* <s>script for installer</s> -- `pyenv init` output cannot be used as installation script, will be done separately as part of https://github.com/pyenv/pyenv-installer/issues/112\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\nFor changed `init` functionality",
    "head_branch": "simplify_setup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2310 from native-api/simplify_setup\n\nSimplify init scheme"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3c744ee515ce6a4ab54",
    "number": 2308,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "pypy379",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add PyPy 7.3.9 (#2308)\n\nCo-authored-by: Dan Dees <dand@appsmiths.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3c844ee515ce6a4ab55",
    "number": 2296,
    "body": "Added CPython 3.9.12",
    "head_branch": "3.9.12",
    "is_a_fork": true,
    "comments": [
      "Although I have the latest pyenv installed, it doesn't show `3.9.12` in the list of available python versions to me.\r\n\r\n I have installed pyenv through `brew` on my MBP M1.",
      "@amirsalaar check that you run the right Pyenv instance. You might have multiple, see [#1961](https://github.com/pyenv/pyenv/issues/1961#issuecomment-852419651)."
    ],
    "commit_messages": [
      "Add CPython 3.9.12 (#2296)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3c944ee515ce6a4ab56",
    "number": 2295,
    "body": "Added CPython 3.10.4\r\n",
    "head_branch": "3.10.4",
    "is_a_fork": true,
    "comments": [
      "Hi, \r\n\r\nAny date for a new version that includes this PR ?\r\n\r\nThanks"
    ],
    "commit_messages": [
      "Add CPython 3.10.4 (#2295)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3c944ee515ce6a4ab57",
    "number": 2292,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes #1643\r\n  - Closes #2290\r\n\r\n### Description\r\nThe newest version of `clang` on macOS (13.1.6 (clang-1316.0.21.2) as of today) now supports the `--print-multiarch` flag and does not error on arm64. This patch applies the upstream fix in 3.7.13 and later to 3.7.12.\r\n\r\n### Tests\r\nNone\r\n",
    "head_branch": "3.7.12-bpo-45405-patch",
    "is_a_fork": true,
    "comments": [
      "Thank you!"
    ],
    "commit_messages": [
      "Support MacOS with CLang 3+ for CPython 3.7.12 (#2292)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3ca44ee515ce6a4ab58",
    "number": 2288,
    "body": "…s://bugs.python.org/issue45405\r\n\r\n### Solve the following https://bugs.python.org/issue45405 \r\n\r\n### Tests\r\n-- pyenv install 3.6.15 (on latest MacOS version)\r\nBEFORE:\r\n\r\npython-build: use readline from homebrew\r\npython-build: use zlib from xcode sdk\r\n\r\nBUILD FAILED (OS X 12.3 using python-build 2.2.5-4-g986fe1a7)\r\n\r\nInspect or clean up the working tree at /var/folders/n2/d8522dmx2sb2n6cqx1cks2140000gs/T/python-build.20220320191907.55294\r\nResults logged to /var/folders/n2/d8522dmx2sb2n6cqx1cks2140000gs/T/python-build.20220320191907.55294.log\r\n\r\nLast 10 log lines:\r\nchecking for --with-cxx-main=<compiler>... no\r\nchecking for clang++... no\r\nconfigure:\r\n\r\n  By default, distutils will build C++ extension modules with \"clang++\".\r\n  If this is not intended, then set CXX on the configure command line.\r\n\r\nchecking for the platform triplet based on compiler characteristics... darwin\r\nconfigure: error: internal configure error for the platform triplet, please file a bug report\r\nmake: *** No targets specified and no makefile found.  Stop.\r\n\r\n\r\nAFTER:\r\nInstall success",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Hi @native-api  - to generate this PR, I cloned CPython using the below and modified the configuration file from it, copy previous changes and added the change on it (and Tested.)\r\nDo you prefer to cherry pick only the specific change based the previous version ? (although the below seems more code accurate.)\r\n\r\ngit clone https://github.com/python/cpython --branch v3.6.15 --single-branch",
      "* Clone CPython and check out the appropriate tag\r\n* Apply existing patches and commit (with either `patch` or `git am`)\r\n* cherry-pick the upstream commit\r\n* commit and `git format-patch`\r\n* Enjoy!",
      "Hi @native-api  - please have a look now and see if this works for you "
    ],
    "commit_messages": [
      "Support MacOS with CLang 3+ for CPython 3.6.15 (#2288)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3cb44ee515ce6a4ab59",
    "number": 2287,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2086\r\n  - Closes https://github.com/pyenv/pyenv/issues/882\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nProvides guidelines for prospective contributors on how to do common tasks and on project-specific conventions.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n\r\nN/A",
    "head_branch": "contribution_guide",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CONTRIBUTING.md (#2287)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3cc44ee515ce6a4ab5a",
    "number": 2286,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2092\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n\r\n---\r\nAdd test workflow for modified python build versions in `plugins/python-build/share/python-build/`, demo test [here](https://github.com/tuzi3040/pyenv/actions/workflows/python_build_modified_version_tests.yml).\r\n\r\nThis workflow will test newly modified versions.\r\nIf no versions modified, actual test jobs will just skip, and workflow will complete successfully.",
    "head_branch": "add-test-for-modified-python-build-versions",
    "is_a_fork": true,
    "comments": [
      "Wow. Just what we needed!"
    ],
    "commit_messages": [
      "CI: Add tests for modified python build scripts (#2286)\n\nCo-authored-by: Ivan Pozdeev <vano@mail.mipt.ru>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3cd44ee515ce6a4ab5b",
    "number": 2282,
    "body": "This PR is _very_ small.\r\n\r\nIn the README, a reference is made to step \"#&#8203;2\" of the Basic GitHub Checkout instructions, but GitHub's markdown interpreter automatically links that to Issue #2 of this repo. This PR inserts a zero-width space to prevent that linkage. (This approach comes from [a suggestion I found on StackOverflow](https://stackoverflow.com/a/52463489).)\r\n",
    "head_branch": "doc/install/homebrew/html_encode_hash_char",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Prevent GitHub autolinking to an issue (#2282)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3cd44ee515ce6a4ab5c",
    "number": 2276,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n\r\n---\r\n\r\nOpenSSL of CPython 3.7 3.8 3.9 should also be bumped to 1.1.1n according to [here](https://github.com/python/cpython/blob/2de452f8bf2f78417e04bcf7919beb502c53a0e2/Misc/NEWS.d/3.9.11.rst).",
    "head_branch": "bump-cpython-3.7.13-3.8.13-3.9.11-3.10.3",
    "is_a_fork": true,
    "comments": [
      "I was unaware this suggestion applied to older python versions as well, thanks!"
    ],
    "commit_messages": [
      "Bump openssl 1.1 to 1.1.1n for CPython 3.7.13 3.8.13 3.9.11 3.10+ (#2276)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3ce44ee515ce6a4ab5d",
    "number": 2274,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] The current documentation erroneously links to the second issue in the repository. This escape character fixes that so that the parentheses are rendered.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "readme-format-fix",
    "is_a_fork": true,
    "comments": [
      "This doesn't have any effect, see https://github.com/pyenv/pyenv/blob/b8bd6e42887a14eea1ea9bbf7976abe049dd4c2f/README.md. The autolink has been removed in https://github.com/pyenv/pyenv/pull/2282."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3cf44ee515ce6a4ab5e",
    "number": 2270,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "docs/prefix-multiple",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "docs(pyenv-prefix): note support for multiple versions (#2270)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3d044ee515ce6a4ab5f",
    "number": 2269,
    "body": "### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n    * See https://github.com/rbenv/rbenv/pull/1393 \r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nSee individual commits for details.\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "refactor/version-file-read",
    "is_a_fork": true,
    "comments": [
      "Unfortunately this doesn't cope with files without a trailing newline. Not sure if there's a concise enough way to accomplish that, leaving open for a bit.\r\n\r\nThe `-s` change could be applied separately, though.",
      "You may take a look at https://mywiki.wooledge.org/BashFAQ/005#Handling_newlines_.28or_lack_thereof.29_at_the_end_of_a_file . It deals with handling a (lack of) trailing newline.",
      "Ah, right. Revised commit 4140c3d28cc32361d482408e2ba149184746ef2a addresses the case without trailing newlines.",
      "Thanks! With combined effort, we pushed through and can finally tick this off! :slightly_smiling_face: "
    ],
    "commit_messages": [
      "Version file read improvements (#2269)\n\n* Don't bother reading empty version files\r\n* Implement version file read in pure bash\r\nIs faster with usual sized version files, slower with degenerate cases."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3d144ee515ce6a4ab60",
    "number": 2268,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nI used `add_miniconda.py` to generate installation files for `miniconda3-3.7-4.11.0`, `miniconda3-3.8-4.11.0`, and `miniconda3-3.9-4.11.0`.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)",
    "head_branch": "update-miniconda-4.11.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add miniconda3-3.7-4.11.0, miniconda3-3.8-4.11.0, miniconda3-3.9-4.11.0 (#2268)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3d244ee515ce6a4ab61",
    "number": 2266,
    "body": "### Description\r\n- [x] Here are some details about my PR\r\n   - 3.11.0a5 -> 3.11.0a6\r\n",
    "head_branch": "3.11.0a6",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.11.0a6 (#2266)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3d244ee515ce6a4ab62",
    "number": 2253,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ x] Here are some details about my PR\r\n\r\n### Tests\r\n- [x ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "pypy-3.7.8",
    "is_a_fork": true,
    "comments": [
      "how about a test bash script which checks each url sources from the build scripts?\r\n\r\nIf I make one, where should we put it?  Any naming convention?",
      "Ok, refactored and added unit test\r\nadded test script which downloads all files and compares checksums\r\ndid pyenv install on compatible files",
      "undid declare\r\nundid shebang\r\nremoved associative arrays\r\nfollowed approach used in graal python\r\n\r\ntested one case",
      "Cool, looking forward for this to make it into a release!"
    ],
    "commit_messages": [
      "Add PyPy 7.3.8 (#2253)\n\nCo-authored-by: Dan Dees <dand@appsmiths.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3d344ee515ce6a4ab63",
    "number": 2252,
    "body": "For the past few days, I have been using your project and looking at its documentation and code. I found many errors in the code style, especially in the Markdown files. So I started and solved all the lint problems related to MD.\r\n\r\n**The original code is excellent and now the documentation is the same.**\r\n\r\nThank you 🥇 \r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "What kind of \"code style\" are you referring to? Did you run some tool through the files?",
      "Yeah, It's [markdownlint](https://github.com/DavidAnson/markdownlint). A complete and powerful tool for lint markdown files. Of course, this tool can not fix some items automatically and will only show alerts. I checked and fixed the files individually."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3d444ee515ce6a4ab64",
    "number": 2241,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n\r\n### Description\r\n- [x] 3.11.0a4 -> 3.11.0a5\r\n\r\n",
    "head_branch": "3.11.0a5",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.11.0a5 (#2241)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3d544ee515ce6a4ab65",
    "number": 2240,
    "body": "Add newly released pyston 2.3.2\r\n\r\nhttps://github.com/pyston/pyston/releases/tag/pyston_2.3.2",
    "head_branch": "pyston-2.3.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add pyston-2.3.2 (#2240)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3d644ee515ce6a4ab66",
    "number": 2238,
    "body": "Add correct URL for downloading pip for Python 3.6, which, as mentioned in #2237, has been recently deprecated by mainline pip.\r\n\r\nIn that PR I said that \"there are other files in this repo that download get-pip\", but most of them were actually in pyenv-virtualenv. The only other file in this pyenv repo that uses that URL is [`/plugins/python-build/test/pyenv_ext.bats`](https://github.com/pyenv/pyenv/blob/master/plugins/python-build/test/pyenv_ext.bats), which looks outdated? I'm not sure what to do about it.",
    "head_branch": "get-pip-url-py36",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "python-build: add URL for get-pip for Python 3.6 (#2238)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3d644ee515ce6a4ab67",
    "number": 2237,
    "body": "### Prerequisite\r\n* [x] My PR addresses the following pyenv issue\r\n  - Closes https://github.com/pyenv/pyenv/issues/2236\r\n\r\n### Description\r\n\r\nI:\r\n\r\n* checked out CPython tag v3.7.12, applied patches from pyenv's `plugins/python-build/share/python-build/patches/3.7.12/Python-3.7.12` with `git am`;\r\n* cherry-picked [python/cpython@7a27c7e](https://github.com/python/cpython/commit/7a27c7ed4b2b45bb9ea27d3f5c4f423495d6e939), as suggested by @chipx86;\r\n* created a new patch with `git format-patch`, and placed it on `plugins/python-build/share/python-build/patches/3.7.12/Python-3.7.12`;\r\n* repeated all of it for 3.6.15, cherry-picking the same commit;\r\n\r\nAlso, I tested, and now CPython 3.7.12 builds successfully on my machine.\r\n\r\nAs for 3.6.15, I have two notes. The first is that I had to make the following correction:\r\n\r\n```\r\ndiff --git a/plugins/python-build/bin/python-build b/plugins/python-build/bin/python-build\r\nindex 7e3834f0..39886b1b 100755\r\n--- a/plugins/python-build/bin/python-build\r\n+++ b/plugins/python-build/bin/python-build\r\n@@ -2204,6 +2204,9 @@ if [ -z \"${GET_PIP_URL}\" ]; then\r\n     3.5 | 3.5.* )\r\n       GET_PIP_URL=\"https://bootstrap.pypa.io/pip/3.5/get-pip.py\"\r\n       ;;\r\n+    3.6 | 3.6.* )\r\n+      GET_PIP_URL=\"https://bootstrap.pypa.io/pip/3.6/get-pip.py\"\r\n+      ;;\r\n     * )\r\n       GET_PIP_URL=\"https://bootstrap.pypa.io/get-pip.py\"\r\n       ;;\r\n```\r\n\r\nI believe this belongs to a separate PR, as there are other files in this repo that use that URL, and I'm not sure if all should be updated (but please tell me if I should include it here).\r\n\r\nThe second note is that even though `pyenv install 3.6.15` did complete successfully, returning code 0 and all, it displays the following error message:\r\n\r\n```\r\n...\r\nInstalling collected packages: setuptools                                                     \r\nSuccessfully installed setuptools-40.6.2                                                      \r\n/home/iptv/.local/lib/pyenv/plugins/python-build/bin/python-build: line 1899: 1109106 Segmentation fault      (core dumped) \"$PYTHON_BIN\" -s -m ensurepip ${ensurepip_opts} > /dev/null 2>&1\r\nInstalling pip from https://bootstrap.pypa.io/pip/3.6/get-pip.py...\r\nCollecting pip<22.0                                                                           \r\n  Using cached pip-21.3.1-py3-none-any.whl (1.7 MB)             \r\n...         \r\n```\r\n\r\nThe installed Python binary apparently runs fine, with no segfaults, though I didn't test it much.\r\n\r\nDid I miss anything?",
    "head_branch": "fix-2236",
    "is_a_fork": true,
    "comments": [
      "pip did indeed drop Python 3.6 support, just two days ago in fact (January 30, 2022). Given that, the pip change is necessary on all platforms, though unrelated to the original issue discussed.\r\n\r\nThe segfault is a concern. Is there a `core` (or `core.*`) file anywhere? If you repeat the install, Control-C after the segfault, and change to the temp directory where this is being built, do you see a core file?\r\n\r\nWhat does lines, say, 1890-1905 look like, just to help provide context on that line 1899?",
      "I checked out this branch and reproduced the same segfault on manjaro and current fedora. I'm guessing this is related to newer gcc versions because passing `clang` as C compiler it is built successfully.\r\n\r\n`CC=clang asdf install python 3.6.15`",
      "> The segfault is a concern. Is there a core (or core.*) file anywhere? If you repeat the install, Control-C after the segfault, and change to the temp directory where this is being built, do you see a core file?\r\n\r\nReproducing the error I found some. \r\n```\r\nfind -name 'core*' -type f\r\n./Lib/distutils/__pycache__/core.cpython-36.pyc\r\n./Lib/distutils/core.py\r\n./Tools/msi/bundle/packagegroups/core.wxs\r\n./Tools/msi/core/core_d.wxs\r\n./Tools/msi/core/core_pdb.wixproj\r\n./Tools/msi/core/core_pdb.wxs\r\n./Tools/msi/core/core.wxs\r\n./Tools/msi/core/core_en-US.wxl\r\n./Tools/msi/core/core.wixproj\r\n./Tools/msi/core/core_files.wxs\r\n./Tools/msi/core/core_d.wixproj\r\n```\r\nI put all these on [this gist](https://gist.github.com/bruno-fs/a236e3e100faec534e0ae324e95840d3)"
    ],
    "commit_messages": [
      "Fix UnicodeDecodeError for CPython 3.6.15 and 3.7.12 (#2237)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3d744ee515ce6a4ab68",
    "number": 2234,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "pypy-3.7.8",
    "is_a_fork": true,
    "comments": [
      "add pypy 7.3.8 1/24/2022",
      "CLOSED -  new version released"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3d844ee515ce6a4ab69",
    "number": 2229,
    "body": "\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2230\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nProblem: The version is incorrect.\r\n\r\nSolution: Replace `2.2.3` with `2.2.4`.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "https://github.com/pyenv/pyenv/releases/tag/v2.2.4-1",
      "I don't understand, why was this (and #2230) closed?",
      "```console\r\n$ brew info pyenv   \r\npyenv: stable 2.2.4 (bottled), HEAD\r\nPython version management\r\nhttps://github.com/pyenv/pyenv\r\n/usr/local/Cellar/pyenv/2.2.4 (859 files, 2.9MB) *\r\n  Poured from bottle on 2022-01-27 at 16:01:13\r\nFrom: https://github.com/Homebrew/homebrew-core/blob/HEAD/Formula/pyenv.rb\r\nLicense: MIT\r\n==> Dependencies\r\nRequired: autoconf ✔, openssl@1.1 ✔, pkg-config ✔, readline ✔\r\n==> Options\r\n--HEAD\r\n\tInstall HEAD version\r\n==> Analytics\r\ninstall: 101,419 (30 days), 363,572 (90 days), 1,547,098 (365 days)\r\ninstall-on-request: 100,074 (30 days), 358,447 (90 days), 1,517,827 (365 days)\r\nbuild-error: 1 (30 days)\r\n\r\n$ pyenv --version\r\npyenv 2.2.3",
      "We already updated the version of pyenv."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3d944ee515ce6a4ab6a",
    "number": 2226,
    "body": "Add newly released version of graalpython. CC @timfel ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add GraalPython 22.0.0 (#2226)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3da44ee515ce6a4ab6b",
    "number": 2221,
    "body": "Enable miniconda3-latest on ARM.",
    "head_branch": "miniconda3-latest-Linux-aarch64",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "miniconda3-latest: added Linux-aarch64 (#2221)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3da44ee515ce6a4ab6c",
    "number": 2219,
    "body": null,
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "See https://github.com/pyenv/pyenv/pull/2218 on comments about 3.10.2",
      "I'm sorry, I don't know how to decide if we can upgrade the dependencies.",
      "You can test if all the tests pass with OpenSSL 3, for both versions (they should).\r\nAbout Readline, I'm pretty sure we can upgrade it (it's only used in MacOS without Homebrew anyway).",
      "Ping @tiran - sorry for bringing you into this conversation seemingly randomly 😅 would you say it's wise for pyenv to provide CPython 3.10.2 compiled against openssl 3?\r\nOr do you see any drawbacks/cons with that?\r\n\r\nI'm on macOS (M1) and when installing [the pyenv prerequisites](https://github.com/pyenv/pyenv/wiki) with `brew`, openssl 3 gets installed:\r\n\r\n```bash\r\n$ brew info openssl           \r\nopenssl@3: stable 3.0.1 (bottled) [keg-only]\r\nCryptography and SSL/TLS Toolkit\r\nhttps://openssl.org/\r\n/opt/homebrew/Cellar/openssl@3/3.0.1 (6,420 files, 27.8MB)\r\n  Poured from bottle on 2021-12-22 at 17:24:42\r\nFrom: https://github.com/Homebrew/homebrew-core/blob/HEAD/Formula/openssl@3.rb\r\nLicense: Apache-2.0\r\n==> Dependencies\r\nRequired: ca-certificates ✔\r\n==> Caveats\r\nA CA file has been bootstrapped using certificates from the system\r\nkeychain. To add additional certificates, place .pem files in\r\n  /opt/homebrew/etc/openssl@3/certs\r\n\r\nand run\r\n  /opt/homebrew/opt/openssl@3/bin/c_rehash\r\n\r\nopenssl@3 is keg-only, which means it was not symlinked into /opt/homebrew,\r\nbecause macOS provides LibreSSL.\r\n\r\nIf you need to have openssl@3 first in your PATH, run:\r\n  echo 'export PATH=\"/opt/homebrew/opt/openssl@3/bin:$PATH\"' >> ~/.zshrc\r\n\r\nFor compilers to find openssl@3 you may need to set:\r\n  export LDFLAGS=\"-L/opt/homebrew/opt/openssl@3/lib\"\r\n  export CPPFLAGS=\"-I/opt/homebrew/opt/openssl@3/include\"\r\n\r\nFor pkg-config to find openssl@3 you may need to set:\r\n  export PKG_CONFIG_PATH=\"/opt/homebrew/opt/openssl@3/lib/pkgconfig\"\r\n```\r\n\r\nHowever, version 3 does not seem to be on $PATH by default (also hinted/indicated from the above chunk of text):\r\n\r\n```bash\r\n$ openssl version\r\nLibreSSL 2.8.3\r\n\r\n$ which openssl\r\n/usr/bin/openssl\r\n\r\n$ /opt/homebrew/opt/openssl@3/bin/openssl version\r\nOpenSSL 3.0.1 14 Dec 2021 (Library: OpenSSL 3.0.1 14 Dec 2021)\r\n```\r\n\r\nI'm quite frankly not sure what happens on my machine when pyenv currently compiles CPython 3.10.x as it is currently configured to compile [against openssl 1.1.1](https://github.com/pyenv/pyenv/pull/2219/files#diff-eccbc0e5760304149d6a9e94b24f642a3228ddd9aaadcef7b595d411332c32b5R4) if local install of openssl is \"broken\" (which I wouldn't expect it to be).",
      "We'd like to do the same for 3.9.10+ since [they backported OpenSSL 3 support there, too](https://bugs.python.org/issue38820).",
      "Python's OpenSSL 3.0 is preliminary and experimental. I recommend against using Python with OpenSSL 3.0 in production environments. There are known performance regressions and problems. Also OpenSSL 3.0 is new and a lot of code has changed.",
      "@tiran Thanks, that's a very valuable info!\r\nIs there any kind of milestone in plans so that we know when to switch?",
      "No ETA yet. Somebody needs to put in the work and review CPython's use of OpenSSL APIs. See also https://mail.python.org/archives/list/python-dev@python.org/thread/ATO4DM6QYZGLSGGDZ3TRN5X3QDD5OHOE/",
      "@tiran thank you for both this input and your invaluable contributions to python. 🙏",
      "Does `pyenv` have a policy about which versions of these dependencies should be included in a build recipe? I wondered about this when I put #2218 together, but erred on the side of keeping what was used for `3.10.1`. This would be a helpful thing to document in a `CONTRIBUTING.md` file.",
      "@SnoopJeDi I agree with you. +1 on having some sort of guidance (I am not aware of one, btw). Ping @anton-petrov ☝️  would you say there is a policy on this which is not communicated?",
      "@fredrikaverpil We don't have any policy about the versions of third party libraries that are used for building CPython yet...\r\nBut, as I see, there are some problems with opensl at the moment, so, I suggest to compiling CPython with OpenSSL 1.1.1, not a version 3.\r\n@SnoopJeDi \r\n> This would be a helpful thing to document in a CONTRIBUTING.md file.\r\n\r\nThat's a good idea! We need to do that in the near future.",
      "\r\n@tiran \r\n> Python's OpenSSL 3.0 is preliminary and experimental. I recommend against using Python with OpenSSL 3.0 in production environments. There are known performance regressions and problems. Also OpenSSL 3.0 is new and a lot of code has changed.\r\n\r\nThanks for this important information!"
    ],
    "commit_messages": [
      "CPython 3.9.10 and 3.10.2 (#2219)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3db44ee515ce6a4ab6d",
    "number": 2218,
    "body": "Adds [CPython 3.10.2](https://www.python.org/downloads/release/python-3102/) to pyenv",
    "head_branch": "feature/CPython-3.10.2",
    "is_a_fork": true,
    "comments": [
      "Superceded by https://github.com/pyenv/pyenv/pull/2219"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3dc44ee515ce6a4ab6e",
    "number": 2217,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "CPython 3.11.0a4 (#2217)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3dd44ee515ce6a4ab6f",
    "number": 2215,
    "body": "There is no `bin` folder under `$PYENV_ROOT/`. It should be `$PYENV_ROOT/shims. \r\nIf keep it as `bin`, the `rbenv` will not be set correctly for fish user.\r\n\r\n<img width=\"442\" alt=\"Screen Shot 2022-01-14 at 5 04 37 PM\" src=\"https://user-images.githubusercontent.com/61396191/149488726-458da36e-6414-492b-8dc7-b56d0c19c9dd.png\">\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "If you've installed Pyenv system-wide, you don't need to add `bin` to PATH. There's only 1 common use case of this, installing via Homebrew, and shell setup instructions reflect that. `shims` are added to PATH by `eval \"$(pyenv init --path)\"`."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3de44ee515ce6a4ab70",
    "number": 2212,
    "body": "This reverts commit 90d0d20508a91e7ea1e609e8aa9f9d1a28bb563e.\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nAfter further consideration, we've decided to remove this workaround:\r\n* It only has an effect if the user has added `gnubin` from Homebrew Coreutils to PATH which is an unsupported setup\r\n* It was intended to be applied only to a few select 3.8 and 3.9 versions that officially support Apple Silicon and only fail with Homebrew Coreutils in PATH because they have `config.*` from a too old version of Autoconf that doesn't support the Arm64 arch -- but\r\n  * CPython devs [didn't actually fix the problem in 3.10, either, only in 3.11](https://github.com/pyenv/pyenv/pull/2157#issuecomment-968055387), so we'd need to apply it to all 3.10 releases, too\r\n  * users started pushing this workaround into other unrelated branches because they were using the above unsupported setup. See https://github.com/pyenv/pyenv/pull/2190#pullrequestreview-835221952 for discussion.\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "revert_coreutils_workaround",
    "is_a_fork": true,
    "comments": [
      "@yackrru Be advised that we're removing this workaround, see above for the reasons."
    ],
    "commit_messages": [
      "Revert \"Disable coreutils on M1 Apple Silicon with arm64 (#2020)\" (#2212)\n\nThis reverts commit 90d0d20508a91e7ea1e609e8aa9f9d1a28bb563e.\r\n\r\nAfter further consideration, we've decided to remove this workaround:\r\n* It only has an effect if the user has added `gnubin` from Homebrew Coreutils to PATH which is an unsupported setup\r\n* It was intended to be applied only to a few select 3.8 and 3.9 versions that officially support Apple Silicon and only fail with Homebrew Coreutils in PATH because they have `config.*` from a too old version of Autoconf that doesn't support the Arm64 arch -- but\r\n  * CPython devs [didn't actually fix the problem in 3.10, either, only in 3.11](https://github.com/pyenv/pyenv/pull/2157#issuecomment-968055387), so we'd need to apply it to all 3.10 releases, too\r\n  * users started pushing this workaround into other unrelated branches because they were using the above unsupported setup. See https://github.com/pyenv/pyenv/pull/2190#pullrequestreview-835221952 for discussion."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3df44ee515ce6a4ab71",
    "number": 2209,
    "body": "### Description\r\n\r\nIn my previous work on getting Python 3.6.15 and 3.7.12 to compile on Apple M1, I backported logic from newer 3.8.x releases to properly find libffi and related files on macOS.\r\n\r\nThis regressed compilation on Linux. The include search path was incomplete, and `ffi.h` could not be found, resulting in `ctypes` being disabled.\r\n\r\nThere was a key difference between the old logic and new logic that led to this regression:\r\n\r\n1. In 3.8 and newer, `detect_ctypes()` in `setup.py` took no arguments, and was expected to access instance variables for the include search path.\r\n2. In 3.7 and earlier, `detect_ctypes()` took the path as an argument, and was expected to make use of it.\r\n\r\nThe backport made use of the instance variables, overriding the provided include path. These were not equivalent. The one on the instance was not complete, lacking the necessary directories to find `ffi.h`. Since this could not be found, `ctypes` support was disabled.\r\n\r\nThe fix is to simply not overwrite the variables passed to the function, and resume using them as before.\r\n\r\nFixes #2207\r\n\r\n\r\n### Tests\r\nCompiled 3.6.15 and 3.7.12 on macOS (M1).\r\n\r\nCompiled 3.6.15 and 3.7.12 on Linux in a Docker image provided on #2207 that reproduced the failure case.\r\n\r\nIn all tested environments, `ctypes` compiled and could be imported successfully.",
    "head_branch": "fix-ctypes-incdirs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix a regression in include paths when compiling ctypes in 3.6.15/3.7.12. (#2209)\n\nIn my previous work on getting Python 3.6.15 and 3.7.12 to compile on\r\nApple M1, I backported logic from newer 3.8.x releases to properly find\r\nlibffi and related files on macOS.\r\n\r\nThis regressed compilation on Linux. The include search path was\r\nincomplete, and `ffi.h` could not be found, resulting in `ctypes` being\r\ndisabled.\r\n\r\nThere was a key difference between the old logic and new logic that led\r\nto this regression:\r\n\r\n1. In 3.8 and newer, `detect_ctypes()` in `setup.py` took no arguments,\r\n   and was expected to access instance variables for the include search\r\n   path.\r\n2. In 3.7 and earlier, `detect_ctypes()` took the path as an argument,\r\n   and was expected to make use of it.\r\n\r\nThe backport made use of the instance variables, overriding the provided\r\ninclude path. These were not equivalent. The one on the instance was not\r\ncomplete, lacking the necessary directories to find `ffi.h`. Since this\r\ncould not be found, `ctypes` support was disabled.\r\n\r\nThe fix is to simply not overwrite the variables passed to the function,\r\nand resume using them as before.\r\n\r\nFixes #2207"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3df44ee515ce6a4ab72",
    "number": 2208,
    "body": "### Description\r\n- SHA256 `9a97de82037d4be1949ec0c35a4d638ba635e8b34948549ae2fa08abd2cbaa8c` actually belongs to `pypy2.7-v7.3.6-osx64.tar.bz2`\r\n- SHA256 `8b10442ef31c3b28048816f858adde6d6858a190d9367001a49648e669cbebb6` actually belongs to `pypy2.7-v7.3.5-osx64.tar.bz2`\r\n- [x] Looks like there may have been a simple copy/paste error for these checksums. I have updated them with the appropriate values.\r\n\r\n### Tests\r\n- [x] N/A\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix incorrect pypy 2.7-7.3.6 sha256 hashes (#2208)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3e044ee515ce6a4ab73",
    "number": 2197,
    "body": "Documented various functions that we found particularly lacking of docstrings.",
    "head_branch": "trelent-documentation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add-miniconda: add docstrings to several key functions (#2197)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3e144ee515ce6a4ab74",
    "number": 2194,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2167\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nAs @Mukundan314 pointed out, some versions of pypy is lacked in the version list. He said that we can add pypy2.7-7.3.2 ~ 7.3.6, but I cannot find the checksum for 7.3.6, so I added to 7.3.5.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n\r\nI added no test. But I checked the correctness of my change by using docker container which this repository provided.",
    "head_branch": "hayashi/add_pypy_27s",
    "is_a_fork": true,
    "comments": [
      "I tried, but I could not find the checksum for those versions at https://www.pypy.org/checksums.html",
      "> I tried, but I could not find the checksum for those versions at https://www.pypy.org/checksums.html\r\n\r\nI can see them just fine atm:\r\n\r\n> 82127f43fae6ce75d47d6c4539f8c1ea372e9c2dbfa40fae8b58351d522793a4  pypy2.7-v7.3.6-linux64.tar.bz2\r\n><...>\r\n> 0114473c8c57169cdcab1a69c60ad7fef7089731fdbe6f46af55060b29be41e4  pypy2.7-v7.3.6-src.tar.bz2",
      "Thank you for your comment. I missed because \"v\" is inserted in the version name for 7.3.6. I'll add it.",
      "Thank you for your contribution! :cake: "
    ],
    "commit_messages": [
      "Add pypy2.7-7.3.2~7.3.6 (#2194)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3e244ee515ce6a4ab75",
    "number": 2193,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2192\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\n1. Adding `Anaconda3-2021.11` install script. \r\n2. Use `verify_py39` since this version is using Python 3.9\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n\r\nChecksums have been verified by myself\r\n![image](https://user-images.githubusercontent.com/150648/146673781-bd6fbe9e-74c4-4e3f-8f65-c08a0b62944b.png)\r\n\r\n",
    "head_branch": "southwolf/add-anaconda3-2021.11",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Anaconda3-2021.11 (#2193)\n\n* Use verify_py39 since anaconda3-2021.11 is using python-3.9 according to release notes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3e344ee515ce6a4ab76",
    "number": 2190,
    "body": "### Description\r\n\r\nThis change ports pyenv and Python patches to 3.7.12 to enable the `ctypes `and `decimal` modules to compile, and to fix a compilation issue with GNU coreutils.\r\n\r\nWhile Python 3.7.12 itself compiles on arm64/M1, both of these modules fail to compile, due to missing support for locating system libffi and due to architecture gate-keeping. These issues have been fixed in newer releases of Python, and in other pyenv patch bundles.\r\n\r\nThe following patches are provided:\r\n\r\n1. `0001-Port-ctypes-and-system-libffi-patches-for-arm64-macO.patch` — Fixes system `ffi.h`/`libffi` path determination and usage and enables calling of variadic functions, fixing ctypes support (consolidated port of existing pyenv patches for 2.7.18 that iterate on this logic).\r\n\r\n2. `0002-bpo-41100-fix-_decimal-for-arm64-Mac-OS-GH-21228.patch` — Adds arm64 to the list of allowable architectures for the `decimal` module (port of Python patch introduced in 3.8.10).\r\n\r\nGNU coreutils is also disabled through when building on arm64, through `arm64_apple_disable_homebrew_coreutils`, in order to avoid build issues caused by a difference in the results from `uname`.\r\n\r\nMake sure you have checked all steps below.\r\n\r\n\r\n### Tests\r\n\r\nAll existing bats unit tests pass.\r\n\r\nPerformed a clean build of the patched version of Python 3.7.12 on a 2021 M1 MacBook Pro running macOS 12.0.1, a 2017 Intel MacBook Pro running macOS 10.14.6, and CentOS 8 (Intel).\r\n\r\nIn each case, I verified that ctypes was working. I also ran through full installation tests and unit tests for all of our products (comprising dozens of pure Python and native C packages, and many thousands of unit tests).",
    "head_branch": "python3.7.12/fix-arm64",
    "is_a_fork": true,
    "comments": [
      "Thanks for working with me on this :) Have a good rest of your night/day!"
    ],
    "commit_messages": [
      "Fix Python 3.7.12 compilation on macOS arm64/M1. (#2190)\n\nThis change ports pyenv and Python patches to 3.7.12 to enable the\r\n`ctypes `and `decimal` modules to compile.\r\n\r\nWhile Python 3.7.12 itself compiles on arm64/M1, both of these modules\r\nfail to compile, due to missing support for locating system libffi and\r\ndue to architecture gate-keeping. These issues have been fixed in newer\r\nreleases of Python, and in other pyenv patch bundles.\r\n\r\nThe following patches are provided:\r\n\r\n1. `0001-Port-ctypes-and-system-libffi-patches-for-arm64-macO.patch` -\r\n   Fixes system `ffi.h`/`libffi` path determination and usage and\r\n   enables calling of variadic functions, fixing ctypes support\r\n   (consolidated port of existing pyenv patches for 2.7.18 that iterate\r\n   on this logic).\r\n\r\n2. `0002-bpo-41100-fix-_decimal-for-arm64-Mac-OS-GH-21228.patch` -\r\n   Adds arm64 to the list of allowable architectures for the\r\n   `decimal` module (port of Python patch introduced in 3.8.10)."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3e444ee515ce6a4ab77",
    "number": 2189,
    "body": "### Description\r\n\r\nThis change ports several established patches to the Python 3.6.15 build, enabling compilation on arm64/Apple M1 architectures:\r\n\r\n1. `0001-Detect-arm64-in-configure.patch` — Updates configure to detect arm64 architectures (port of an existing pyenv patch for 2.7.18).\r\n\r\n2. `0002-bpo-36231-Support-building-on-macOS-without-usr-incl.patch` — Adds macOS SDK root computation logic for determining include paths (port of existing Python patches introduced in 2.7.17 and 3.7.4).\r\n\r\n3. `0003-Fix-macOS-_tkinter-use-of-Tck-Tk-in-Library-Framewor.patch` — Fixes Tcl/Tk support on macOS (port of an existing pyenv patch for 2.7.18).\r\n\r\n4. `0004-Port-ctypes-and-system-libffi-patches-for-arm64-macO.patch` — Fixes system `ffi.h`/`libffi` path determination and usage and enables calling of variadic functions, fixing ctypes support (consolidated port of existing pyenv patches for 2.7.18 that iterate on this logic).\r\n\r\n5. `0005-BPO-41100-Support-macOS-11-when-building-GH-21113.patch` — Updates Darwin version checks to handle macOS 11's major version bump (port of Python patches introduced in 3.7.0 and 3.9.0).\r\n\r\n6. `0006-bpo-41100-fix-_decimal-for-arm64-Mac-OS-GH-21228.patch` — Adds arm64 to the list of allowable architectures for the `decimal` module (port of Python patch introduced in 3.8.10).\r\n\r\nGNU coreutils is also disabled through when building on arm64, through `arm64_apple_disable_homebrew_coreutils`, in order to avoid build issues caused by a difference in the results from `uname`.\r\n\r\n### Tests\r\n\r\nAll existing bats unit tests pass.\r\n\r\nPerformed a clean build of the patched version of Python 3.6.15 on a 2021 M1 MacBook Pro running macOS 12.0.1, a 2017 Intel MacBook Pro running macOS 10.14.6, and CentOS 8 (Intel).\r\n\r\nIn each case, I verified that `ctypes` was working. I also ran through full installation tests and unit tests for all of our products (comprising dozens of pure Python and native C packages, and many thousands of unit tests).",
    "head_branch": "python3.6.15/fix-arm64",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Python 3.6.15 compilation on macOS arm64/M1. (#2189)\n\nThis change ports several established patches to the Python 3.6.15\r\nbuild, enabling compilation on arm64/Apple M1 architectures:\r\n\r\n1. `0001-Detect-arm64-in-configure.patch` -\r\n   Updates configure to detect arm64 architectures (port of an existing\r\n   pyenv patch for 2.7.18).\r\n\r\n2. `0002-bpo-36231-Support-building-on-macOS-without-usr-incl.patch` -\r\n   Adds macOS SDK root computation logic for determining include paths\r\n   (port of existing Python patches introduced in 2.7.17 and 3.7.4).\r\n\r\n3. `0003-Fix-macOS-_tkinter-use-of-Tck-Tk-in-Library-Framewor.patch` -\r\n   Fixes Tcl/Tk support on macOS (port of an existing pyenv patch\r\n   for 2.7.18).\r\n\r\n4. `0004-Port-ctypes-and-system-libffi-patches-for-arm64-macO.patch` -\r\n   Fixes system `ffi.h`/`libffi` path determination and usage and\r\n   enables calling of variadic functions, fixing ctypes support\r\n   (consolidated port of existing pyenv patches for 2.7.18 that iterate\r\n   on this logic).\r\n\r\n5. `0005-BPO-41100-Support-macOS-11-when-building-GH-21113.patch` -\r\n   Updates Darwin version checks to handle macOS 11's major version\r\n   bump (port of Python patches introduced in 3.7.0 and 3.9.0).\r\n\r\n6. `0006-bpo-41100-fix-_decimal-for-arm64-Mac-OS-GH-21228.patch` -\r\n   Adds arm64 to the list of allowable architectures for the\r\n   `decimal` module (port of Python patch introduced in 3.8.10)."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3e444ee515ce6a4ab78",
    "number": 2187,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.11.0a3 (#2187)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3e544ee515ce6a4ab79",
    "number": 2185,
    "body": "### Prerequisite\r\n* [x] (not applicable to implement as a plugin ; this error is in the README file)\r\n* [x] (not applicable to fix in rbenv ; READMEs diverge)\r\n* [x] (does not address any issues filed in GitHub)\r\n\r\n### Description\r\nThere is a really minor error in the readme. Instead of providing a useful command for setting up pyenv in a build script, it is just an \"echo\" statement that echos a string. There is no real file we want to pipe this command to, we just want to tell the user to add this command to their build script, so to resolve I have removed the \"echo\".\r\n\r\n### Tests\r\n- [x] (My PR does not add any automated tests, it is not a code change, just documentation change.)\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix errant \"echo\" in build env install instructions (#2185)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3e644ee515ce6a4ab7a",
    "number": 2184,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- Add latest releases of Miniforge and Mambaforge, which fix https://github.com/conda/conda/issues/10614\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "add-miniforge-mambaforge-4.10.3-10",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Miniforge and Mambaforge 4.10.3-10 (#2184)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3e744ee515ce6a4ab7b",
    "number": 2183,
    "body": "### Description\r\n\r\nhttps://www.python.org/downloads/release/python-3101/",
    "head_branch": "cpython-3.10.1",
    "is_a_fork": true,
    "comments": [
      "I'm delighted to see this version of cPython added. Is there any plans to push a new release out to Homebrew so that it can be listed as an option on the `penv install --list` following a `brew upgrade pyenv`?",
      "@WayneLambert you can install a HEAD version of Pyenv until this change makes it into a release: `brew install pyenv --head`.",
      "@native-api Thanks, I didn't know about the `--head` option, so cheers for that."
    ],
    "commit_messages": [
      "Add CPython 3.10.1 (#2183)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3e844ee515ce6a4ab7c",
    "number": 2182,
    "body": "Building Python 3.6.15 is broken on macOS due to OpenSSL being improperly configured. This PR fixes that and also adds tests to make sure macOS builds work properly across Python versions.\r\n\r\n",
    "head_branch": "fix_3.6.15",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2182 from J-M0/fix_3.6.15\n\nFix 3.6.15 build on macOS"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3e844ee515ce6a4ab7d",
    "number": 2164,
    "body": "[source](https://www.anaconda.com/blog/anaconda-individual-edition-2021-11#:~:text=Update%20on%20macOS%20Apple%20M1%20Support)\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "In https://repo.anaconda.com/miniconda/, I see that they also added Arm64 to Miniconda3-py38_4.10.1 -- but not to the following releases! Do you have any idea why?",
      "I only know that the Miniconda-latest for arm64 is identical to Miniconda3-py38_4.10.1, hardcoded."
    ],
    "commit_messages": [
      "Add macOS Apple M1 to Miniconda-latest (#2164)\n\n[source](https://www.anaconda.com/blog/anaconda-individual-edition-2021-11#:~:text=Update%20on%20macOS%20Apple%20M1%20Support)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3e944ee515ce6a4ab7e",
    "number": 2162,
    "body": "https://pythoninsider.blogspot.com/2021/11/python-399-hotfix-release-is-now.html",
    "head_branch": "cpython-3.9.9",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.9.9 (#2162)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3ea44ee515ce6a4ab7f",
    "number": 2161,
    "body": "Fix readme reference when configuring a shell's environment for pyenv, as discussed in [issue 112](https://github.com/pyenv/pyenv-installer/issues/112) of pyenv-installer.",
    "head_branch": "pyenv-changed-bashrc-script",
    "is_a_fork": true,
    "comments": [
      "The proposed change is incorrect. While it may appear to work, you actually lose the `pyenv` shell function and associated functionality: completion and automatic `rehash` at startup, `shell` and `activate`/`deactivate` subcommands -- as well as the `pyenv` command in noninteractive login shells (e.g. scripts that run commands via `ssh`).\r\n\r\nThe thing that those proposing it are missing is you need to relogin after installation -- as the README section following the shell setup instructions says.\r\n\r\nLifting the restart requirement is being discussed in https://github.com/pyenv/pyenv/issues/2085.",
      "Sorry for incorrect propose, I've thought my pyenv only worked after that change, but I may be due to relogin after installation as well (I'm new to pyenv)"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3eb44ee515ce6a4ab80",
    "number": 2158,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "micropythons",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2158 from scop/micropythons"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3ec44ee515ce6a4ab81",
    "number": 2157,
    "body": "### Description\r\n\r\nDuring the initial phase of compilation, Python's `config.sub` attempts to determine whether the OS and machine identifier type returned by `uname` is a valid target. On M1 Macs, the system-default `uname` returns a value that's eventually parsed as `arm-apple-darwin21.0.1`, which passes the pattern matching.\r\n\r\nHowever, if the coreutils Homebrew target is installed and its version of `uname` is in the path, the result is `arm64-apple-darwin21.0.1`. This isn't handled by the existing patterns, and fails the build.\r\n\r\nThis appears to be a problem on all shipping versions of Python, tested on Python 2.7.18, 3.6.15, 3.7.12, 3.8.12, 3.9.8, and 3.10.0 (the latest versions in each of their respective series).\r\n\r\nThis change patches `config.sub` to add `arm64-*` to the list of patterns, alongside `arm-*`, allowing compilation to proceed. Patches have been added for all the versions of Python mentioned above with the exception of 3.6.15, which will need additional work in order to compile.\r\n\r\n\r\n### Tests\r\n\r\nAll existing unit tests pass.\r\n\r\nPerformed a clean build of each of the patched versions of Python on a 2021 M1 MacBook Pro and tested each.",
    "head_branch": "fix-brew-coreutils-uname",
    "is_a_fork": true,
    "comments": [
      "This is supposed to already be covered by https://github.com/pyenv/pyenv/pull/2020, <s>and in a version-independent manner, too</s>. Isn't it?",
      "That's a fair point.\r\n\r\n3.10 does support arm64, but does not support the coreutils version of `uname`:\r\n\r\n```\r\nchecking build system type... Invalid configuration `arm64-apple-darwin21.0.1': machine `arm64-apple' not recognized\r\nconfigure: error: /bin/sh ./config.sub arm64-apple-darwin21.0.1 failed\r\n```\r\n\r\nAll released versions of Python I've tested have suffered from this.",
      "Alright, I've pulled down the latest version of `config.sub` (and `config.guess`) and have verified it addresses the problem. I'll rework this to update those with the latest version of each sometime this weekend (3AM here right now).\r\n\r\nI have a couple additional patches I plan to put up. One fixes the `ctypes` module on Python 3.7.10, which is busted (I'm porting over the same patches that are in the Python 2.7.18 patch bundle). 3.6.15 is completely unable to compile, so I'm working on that as well (also needs those same patches, plus a couple other fixes to `configure`/`configure.ac`).\r\n\r\n3.6 is near finished, and 3.7 is working without issues (put it through its paces by installing all of my products/dependencies into a new 3.7 virtualenv, ran all of our pretty comprehensive test suites — failed before, checks out now).",
      ">  I'll rework this to update those with the latest version of each sometime this weekend (3AM here right now).\r\n\r\nBefore you delve into that, please consider using the workaround from #2020 in the other affected versions instead.\r\n\r\nSince CPython officially only supports Apple's toolchain, we should avoid using a different set of tools since that can introduce incompatibilities (e.g. if the arch triplet is different, precompiled extensions will probably become incompatible).\r\n\r\nSo in this light, it seems logical to just remove Coreutils from `PATH` in the compilation environment rather than support all their possible differences from Apple's tools.",
      "> First of all, 3.10 already supports the `arm64` arch (at least, it's supposed to, see [#2020 (comment)](https://github.com/pyenv/pyenv/pull/2020#issuecomment-891911842))\r\n> \r\n\r\nShite! They claimed to have fixed that, [but they didn't](https://github.com/python/cpython/pull/25450)! The `config.guess`/`config.sub` update has only happened in https://github.com/python/cpython/pull/25860/files which will go into `3.11`!\r\n\r\nSo we'll have to keep the workaround for 3.10 as well...",
      "That works for me. Is there a preferred approach for manipulating the `PATH` for this? Should this be done in, say, `plugins/python-build/share/python-build/2.7.18`, or in a patch file? I'm still new to the inner workings of pyenv itself (trying to learn as I go).\r\n\r\nLet me know if you have any preliminary thoughts on the other work I mentioned (or if you're aware of any work I'd be duplicating). I'll try to have pull requests up tomorrow, and can make any changes necessary. My primary goal this weekend is to get things working well enough to let me resume development on products for `$DAYJOB` here before the week starts, but I want to go about it right, and give back to pyenv where and how I can.\r\n\r\nThanks for your input on this. Calling it a night here, and hope you have a good day :)",
      "> Is there a preferred approach for manipulating the `PATH` for this?\r\n\r\nIf you're asking about how to apply #2020 to other versions, see its diff.\r\n\r\n> Let me know if you have any preliminary thoughts on the other work I mentioned (or if you're aware of any work I'd be duplicating). \r\n\r\nSee https://github.com/pyenv/pyenv/issues/1737#issuecomment-794592631",
      "> If you're asking about how to apply #2020 to other versions, see its diff.\r\n\r\nYeah, sorry, I was running on fumes last night, wasn't paying enough attention to that change. I'll port that over in a new pull request and drop this one.\r\n\r\n> See [#1737 (comment)](https://github.com/pyenv/pyenv/issues/1737#issuecomment-794592631)\r\n\r\nThanks. I came across the same resolution here, though it only fixes one of the build problems. I'll put up a pull request once I've ironed out the remaining issues, and we can explore the approach further there.\r\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3ec44ee515ce6a4ab82",
    "number": 2156,
    "body": "Closes #106 \r\n\r\nThe issue has been resolved in ed38af64090e985ce0e71087a6f6663600188a09\r\nbut the bounty didn't trigger -- allegedly 'cuz it's not a PR.\r\n\r\nBountysource support replied \"we're looking\" (see below) but never did anything\r\nso I'm going to try to trigger it via a dummy PR.\r\n\r\n---\r\n\r\n> On 19.10.2021 11:19, Bountysource Support wrote:\r\n> > Hi Ivan, hope everything is well for you !\r\n> >\r\n> >\r\n> > We're currently resolving your request, we'll get back to you once it will be finalized. \r\n> >\r\n> > Thanks for your feedback. \r\n> >\r\n> >\r\n> > Best regards,\r\n> >\r\n> > Ilan from Bounty Source team\r\n> >\r\n> >\r\n> > Team Support\r\n> >\r\n> >\r\n> >\r\n> > On Sat, Oct 16, 2021 at 7:57 AM Ivan Pozdeev <vano@mail.mipt.ru> wrote:\r\n> >\r\n> >     https://www.bountysource.com/issues/2813423-pyenv-not-playing-nice-with-brew-config\r\n> >\r\n> >     I've resolved the issue in a commit (not a PR) (which I've linked to as a solution) and closed the issue. However, the bounty didn't trigger.\r\n> >\r\n> >     -- \r\n> >     Regards,\r\n> >     Ivan\r\n> >\r\n> ",
    "head_branch": "dummy_106",
    "is_a_fork": true,
    "comments": [
      "[No effect](https://www.bountysource.com/issues/2813423-pyenv-not-playing-nice-with-brew-config), it's still unresolved.\r\nThere are reports of Bountysource having gone rogue lately: https://help.nextcloud.com/t/dont-use-bountysource-anymore/84943, https://github.com/bountysource/core/issues/1539 .\r\nSo I guess my money is probably gone for good. That's too bad."
    ],
    "commit_messages": [
      "Dummy for https://github.com/pyenv/pyenv/issues/106 (#2156)\n\nThe issue has been resolved in ed38af64090e985ce0e71087a6f6663600188a09\r\nbut the bounty didn't trigger -- allegedly 'cuz it's not a PR.\r\n\r\nBountysource support replied \"we're looking\" but never did anything\r\nso I'm going to try to trigger it via a dummy PR."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3ed44ee515ce6a4ab83",
    "number": 2155,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Addresses side problem in https://github.com/pyenv/pyenv/issues/2137\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nSee https://github.com/pyenv/pyenv/issues/2137#issuecomment-954850201\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "3.10.0_configure",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Patch 3.10.0 configure (#2155)\n\n* Fix \"PKG_PROG_PKG_CONFIG: command not found\"\r\n\r\nApply https://github.com/python/cpython/commit/f146ca36f81075f222aa3a1595042597d96dfad3\r\n* bpo-45350: Rerun autoreconf with the pkg-config macros (GH-28707)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3ee44ee515ce6a4ab84",
    "number": 2152,
    "body": "https://www.python.org/downloads/release/python-398/",
    "head_branch": "python-3.9.8",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.9.8 (#2152)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3ef44ee515ce6a4ab85",
    "number": 2150,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Thanks Ned! ❤️ "
    ],
    "commit_messages": [
      "CPython 3.11.0a2 (#2150)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3f044ee515ce6a4ab86",
    "number": 2147,
    "body": "fixes typo on command examples",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix typos in command examples (#2147)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3f144ee515ce6a4ab87",
    "number": 2144,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n  * https://github.com/rbenv/rbenv/pull/1359\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\n`which` has been deprecated in Debian's debianutils 5.0+ (currently only\r\nDebian unstable), use `command -v` instead like is already done\r\nelsewhere.\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "command-v",
    "is_a_fork": true,
    "comments": [
      "They were all I could find in a quick search, there's a lot of `pyenv which` that are obviously a different thing. But let me know what I missed in addition to the `which -a`.\r\n\r\nOne possibility for `which -a` would be `whereis -b`, done here now.",
      "> `which` has been deprecated in Debian's debianutils 5.0+ (currently only\r\n> Debian unstable), use `command -v` instead like is already done\r\n> elsewhere.\r\n\r\nCould you also link to the source of that and relevant discussion? I'm quite interested in the rationale and officially suggested alternatives.",
      "https://salsa.debian.org/debian/debianutils/-/commit/3a8dd10b4502f7bae8fc6973c13ce23fc9da7efb\r\nhttps://salsa.debian.org/debian/debianutils/-/commit/610a65c6ef040872a124576ddb504c2d4918e880\r\n\r\nI'm not aware of a related mailing list or such discussion (but would be surprised if it didn't exist).",
      "> https://salsa.debian.org/debian/debianutils/-/commit/3a8dd10b4502f7bae8fc6973c13ce23fc9da7efb\r\n\r\nOkay, they suggest `type` and `command` as replacements and the rationale is:\r\n\r\n> Since `type` and `command -v`\r\n> were mandated by POSIX, this utility is no longer useful for\r\n> maintainer scripts and thus will be removed from debianutils.\r\n\r\nSo they think it's not useful _for maintainer scripts._\r\n\r\n---\r\n\r\nThe replacement for `which -a` is `type -aP`.\r\n`whereis` is a bad replacement since its output has to be parsed and it can only use spaces as delimiters.\r\n\r\n---\r\n\r\nHOWEVER. I see this utility missing from `debianutils` `4.9.1`... but [present again in `4.11.2`](https://packages.ubuntu.com/impish/amd64/debianutils/filelist)! Looks like it was reintroduced?\r\nEdit: actually, it's present in `4.9.1`, too. They just moved it from `/bin` to `/usr/bin`.",
      "> So they think it's not useful _for maintainer scripts._\r\n\r\nAs it stands, there's no other implementation of it in the repos, so the only implementation there actually is is scheduled for removal.\r\n\r\n> The replacement for `which -a` is `type -aP`. `whereis` is a bad replacement since its output has to be parsed and it can only use spaces as delimiters.\r\n\r\nAgree `whereis` is far from nice due to parsing, but also because it's not standard either. But `type -aP` isn't all that good either, because `-a` and `-P` to it are not portable: neither is in POSIX, zsh type doesn't have -P, FreeBSD sh type has neither.\r\n\r\n> HOWEVER. I see this utility missing from `debianutils` `4.9.1`... but [present again in `4.11.2`](https://packages.ubuntu.com/impish/amd64/debianutils/filelist)! Looks like it was reintroduced? Edit: actually, it's present in `4.9.1`, too. They just moved it from `/bin` to `/usr/bin`.\r\n\r\nYes, it's \"only\" deprecated for now, not yet removed.",
      "> But `type -aP` isn't all that good either, because `-a` and `-P` to it are not portable: neither is in POSIX, zsh type doesn't have -P, FreeBSD sh type has neither.\r\n\r\nPyenv is written in Bash (except eval'ed blocks which are different for different shells) so we only have to care about different Bash versions.",
      "But of course :facepalm:, thanks for the sanity check. Switched to `type -aP` now."
    ],
    "commit_messages": [
      "Use `command` and `type` instead of `which` (#2144)\n\n`which` has been deprecated in Debian's debianutils 5.0+\r\nThey suggest using `type` and `command` as replacements:\r\nhttps://salsa.debian.org/debian/debianutils/-/commit/3a8dd10b4502f7bae8fc6973c13ce23fc9da7efb ,\r\nhttps://salsa.debian.org/debian/debianutils/-/commit/610a65c6ef040872a124576ddb504c2d4918e880"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3f144ee515ce6a4ab88",
    "number": 2140,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Add documentation for `pyenv doctor` in COMMANDS.md\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "add-def-doctor",
    "is_a_fork": true,
    "comments": [
      "That's a https://github.com/pyenv/pyenv-doctor plugin command.",
      "@native-api This is the output I get when I run `pyenv doctor`:\r\n```\r\n$ pyenv doctor -v\r\n/tmp/python-build.20211102202240.8532 ~\r\nCloning /home/osuser/.pyenv/plugins/pyenv-doctor/bin/.....\r\nCloning into 'python-pyenv-doctor'...\r\nwarning: --depth is ignored in local clones; use file:// instead.\r\n/tmp/python-build.20211102202240.8532/python-pyenv-doctor /tmp/python-build.20211102202240.8532 ~\r\nInstalling python-pyenv-doctor...\r\nchecking for gcc... gcc\r\nchecking whether the C compiler works... yes\r\nchecking for C compiler default output file name... a.out\r\nchecking for suffix of executables... \r\nchecking whether we are cross compiling... no\r\nchecking for suffix of object files... o\r\nchecking whether we are using the GNU C compiler... yes\r\nchecking whether gcc accepts -g... yes\r\nchecking for gcc option to accept ISO C89... none needed\r\nchecking for rl_gnu_readline_p in -lreadline... yes\r\nchecking how to run the C preprocessor... gcc -E\r\nchecking for grep that handles long lines and -e... /usr/bin/grep\r\nchecking for egrep... /usr/bin/grep -E\r\nchecking for ANSI C header files... yes\r\nchecking for sys/types.h... yes\r\nchecking for sys/stat.h... yes\r\nchecking for stdlib.h... yes\r\nchecking for string.h... yes\r\nchecking for memory.h... yes\r\nchecking for strings.h... yes\r\nchecking for inttypes.h... yes\r\nchecking for stdint.h... yes\r\nchecking for unistd.h... yes\r\nchecking readline/readline.h, usability... no\r\nchecking readline/readline.h, presence... no\r\nchecking for readline/readline.h,... no\r\nchecking readline/rlconf.h usability... yes\r\nchecking readline/rlconf.h presence... yes\r\nchecking for readline/rlconf.h... yes\r\nchecking for SSL_library_init in -lssl... no\r\nconfigure: WARNING: OpenSSL <1.1 not installed. Checking v1.1 or beyond...\r\nchecking for OPENSSL_init_ssl in -lssl... yes\r\nchecking openssl/ssl.h usability... yes\r\nchecking openssl/ssl.h presence... yes\r\nchecking for openssl/ssl.h... yes\r\nchecking for BZ2_bzCompressInit in -lbz2... yes\r\nchecking bzlib.h usability... yes\r\nchecking bzlib.h presence... yes\r\nchecking for bzlib.h... yes\r\nchecking for zlibVersion in -lz... yes\r\nchecking zlib.h usability... yes\r\nchecking zlib.h presence... yes\r\nchecking for zlib.h... yes\r\nchecking for sqlite3_initialize in -lsqlite3... yes\r\nchecking sqlite3.h usability... yes\r\nchecking sqlite3.h presence... yes\r\nchecking for sqlite3.h... yes\r\nconfigure: creating ./config.status\r\nconfig.status: creating Makefile\r\necho '#!/bin/sh' > \"python\"\r\nmkdir -p \"/tmp/pyenv-doctor.20211102202240.8508/prefix/bin\"\r\ninstall -m 755 python \"/tmp/pyenv-doctor.20211102202240.8508/prefix/bin/python\"\r\n/tmp/python-build.20211102202240.8532 ~\r\n~\r\nInstalled python-pyenv-doctor to /tmp/pyenv-doctor.20211102202240.8508/prefix\r\n\r\nCongratulations! You are ready to build pythons!\r\n\r\n```\r\nI think we don't need to additionally install `pyenv-doctor` as a pyenv plugin to have access to the pyenv doctor command. Running `pyenv doctor` automatically clones pyenv-doctor and run it. So, I don't think why we shouldn't add it COMMANDS.md. ",
      "[There's zero mention of \"doctor\" in Pyenv's core.](https://github.com/pyenv/pyenv/search?q=doctor&type=code)\r\n\r\n> Cloning /home/osuser/.pyenv/plugins/pyenv-doctor/bin/.....\r\n> Cloning into 'python-pyenv-doctor'...\r\n\r\nThe plugin that's already installed into `/home/osuser/.pyenv/plugins/pyenv-doctor` is cloning itself into a different local directory."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3f244ee515ce6a4ab89",
    "number": 2139,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Add missing definition of `pyenv help` in COMMANDS.md\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "add-def-help",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add definition of pyenv help in COMMANDS.md (#2139)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3f344ee515ce6a4ab8a",
    "number": 2133,
    "body": "Line 251> \"Make sure that your terminal app is configured to run the shell as a login shell\"\r\nFinding the instructions to check for this in zsh, the default shell for MacOS as of Big Sur, took me some time\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Since this is going to be an entire section -- how to check for all the shells, then how to configure the most popular terminal apps -- this should probably be a wiki page. Would this be okay for you?",
      "That would make sense, yes\n\n*Iván Surif*\n\nSoftware Engineer ***@***.***\nwww.cognite.com | REVEALING INDUSTRIAL REALITY™\n\n\n\nOn Tue, Oct 26, 2021 at 4:05 PM native-api ***@***.***> wrote:\n\n> Since this is going to be an entire section -- how to check for all the\n> shells, then how to configure the most popular terminal apps -- this should\n> probably be a wiki page. Would this be okay for you?\n>\n> —\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pyenv/pyenv/pull/2133#issuecomment-952227847>, or\n> unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AESR3EQOCAO256KKQHTUXVDUI33WVANCNFSM5GYQ2MDA>\n> .\n> Triage notifications on the go with GitHub Mobile for iOS\n> <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675>\n> or Android\n> <https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>.\n>\n>\n",
      "Okay, then could you expand this to a more or less usable state?\r\n\r\n* How to check, at least for Bash and Zsh, preferrably for Fish, too\r\n  * Preferrably some short, simple builtin ways with no postprocessing. E.g. in Bash, you can `shopt login_shell` and clearly and unambiguously see the result. The given code is rather inconvenient: there's much to type and one can be unsure whether it's not login or their code is wrong.\r\n* How to set the shell to run as a login shell\r\n  * (preferrably at least this option) set the shell as your login shell and configure the terminal app to run your login shell, at least for the builtin terminal app\r\n  * configure a terminal app to run it as a logn shell with command line options",
      "Sure,\n\n*How to check, at least for Bash and Zsh, preferrably for Fish, too*\n\n\n\nBASH:\nshopt -q login_shell && echo 'Login shell' || echo 'Not login shell'\nZSH:\n\nif [[ -o login ]]; then echo \"login shell\"; else echo \"not login shell\"; fi\n\n\n\n\n\n*How to set the shell to run as a login shell*\n\nThis works in MacOS BigSur 11.6 at least, that's where I could test it :)\n\nIn MacOS:\n\nSystem Preferences> Users and groups > Open padlock to allow changes >\nright click on corresponding user name > advanced options > select the\nlogin shell from the dropdown next to \"Login shell\"\n\n\nThen, in the terminal app: Preferences> General > \"Open shells with\" you\nmay choose \"Predefined login shell\" or else type in the path to zsh:\n\"/bin/zsh\". If the predefined shell is chosen, it should respect the\nselection made in the earlier step. The point here is to check that there's\nno other shell set manually through a path which could be overriding the\none chosen in System Preferences\n\n*Iván Surif *Software Engineer ***@***.***\nwww.cognite.com | REVEALING INDUSTRIAL REALITY™\n\n\n\nOn Tue, Oct 26, 2021 at 4:30 PM native-api ***@***.***> wrote:\n\n> Okay, then could you expand this to a more or less usable state?\n>\n>    - How to check, at least for Bash and Zsh, preferrably for Fish, too\n>       - Preferrably some short, simple builtin ways with no\n>       postprocessing. E.g. in Bash, you can shopt login_shell and clearly\n>       and unambiguously see the result. The given code is rather inconvenient:\n>       there's much to type and one can be unsure whether it's not login or their\n>       code is wrong.\n>    - How to set the shell to run as a login shell\n>       - (preferrably at least this option) set the shell as your login\n>       shell and configure the terminal app to run your login shell, at least for\n>       the builtin terminal app\n>       - configure a terminal app to run it as a logn shell with command\n>       line options\n>\n> —\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pyenv/pyenv/pull/2133#issuecomment-952246444>, or\n> unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AESR3ETKPMXQBDGGRRYIXILUI36VFANCNFSM5GYQ2MDA>\n> .\n> Triage notifications on the go with GitHub Mobile for iOS\n> <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675>\n> or Android\n> <https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>.\n>\n>\n",
      "Done: https://github.com/pyenv/pyenv/wiki/MacOS-login-shell",
      "👏👏👏 🙂\n\nEl mar., 26 oct. 2021 18:20, native-api ***@***.***> escribió:\n\n> Done: https://github.com/pyenv/pyenv/wiki/MacOS-login-shell\n>\n> —\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pyenv/pyenv/pull/2133#issuecomment-952335864>, or\n> unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AESR3EQMMYUH4HXYVQIHE43UI4LQZANCNFSM5GYQ2MDA>\n> .\n> Triage notifications on the go with GitHub Mobile for iOS\n> <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675>\n> or Android\n> <https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>.\n>\n>\n",
      "https://github.com/pyenv/pyenv/commit/a0cc289d156506b031762b2de7aec1046d6027e3",
      "> Done: [pyenv/pyenv/wiki/MacOS-login-shell](https://github.com/pyenv/pyenv/wiki/MacOS-login-shell)\r\n\r\nThanks for these edits. FWIW I think it applies to other distros as well, not just MacOS. I had issues with installing using PyEnv with a non-login shell on Ubuntu. \r\n\r\nWhat is the rationale to require login shell only for PyEnv? Would it makes sense to adapt PyEnv installer & instructions to make the PyEnv work in login and non-login shell or instead give explicit instructions to users how to make pyenv work without making their shell a login shell?",
      "@tvalentyn As a fix to https://github.com/pyenv/pyenv/issues/1649, we moved some of the configuration into the login shell. (As a side effect, this also made Pyenv available to processes outside a terminal session in Linux.)\r\nAs a result, in Linux, you now need to relogin and in MacOS. restart the terminal for Pyenv's shell configuration to take effect.\r\n\r\n**The current shell does _not_ need to be a login shell, but there needs to be a login shell as its ancestor.** In Linux, GUI managers act as a login shell, running `~/.profile`, so terminal shells can be non-login. In MacOS, the GUI does not run any shell init files, so its terminal app runs its shells as login shells by default to compensate -- so we expect this setup.\r\n\r\nIn https://github.com/pyenv/pyenv/issues/2085, we've considered ways to lift the above session restart requirement since the current configuration seems to be too hard to handle for a share of users."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3f444ee515ce6a4ab8b",
    "number": 2132,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n\r\n### Description\r\n- [x] Here are some details about my PR: This adds four new versions\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "pypy3.8-7.3.7",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Adding PyPy release 7.3.7 (Python 3.7 and 3.8). (#2132)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3f544ee515ce6a4ab8c",
    "number": 2128,
    "body": "\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nSanity check for documentation PRs\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n\r\n",
    "head_branch": "markdown_lint",
    "is_a_fork": true,
    "comments": [
      "Turns out it doesn't just validate syntax but enforced a very specific set of conventions. Too restrictive for the job atm :frowning_face: "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3f644ee515ce6a4ab8d",
    "number": 2127,
    "body": "…f a batch job\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2124\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nWas considering to add this, but thought that use case was too niche. Well, I was proven wrong!\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "ci_install_yourself",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add setup instructions for the case when one installs Pyenv as part of a batch job (#2127)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3f644ee515ce6a4ab8e",
    "number": 2126,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/1527\r\n\r\n### Description\r\n- [x ] Added documentation for `completions` command in [COMMANDS.md](https://github.com/pyenv/pyenv/blob/master/COMMANDS.md)\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "feature/add_documentation_for_completions_command",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add documentation for completions command (#2126)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3f744ee515ce6a4ab8f",
    "number": 2125,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/1527\r\n\r\n### Description\r\n- [x ] Added documentation for `init` command in [COMMANDS.md](https://github.com/pyenv/pyenv/blob/master/COMMANDS.md)\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "feature/add_documentation_for_init_command",
    "is_a_fork": true,
    "comments": [
      "I've just moved description and usage from help command output. Guess it would be nice to have options description also. I'll try to add info about options also",
      "Added descriptions for options "
    ],
    "commit_messages": [
      "Add documentation for init command (#2125)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3f844ee515ce6a4ab90",
    "number": 2123,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Add missing documentation for activate and deactivate in COMMANDS.md. \r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "activate-deactivate-command",
    "is_a_fork": true,
    "comments": [
      "These commands are added by the Pyenv-Virtualenv plugin, they belong there.",
      "@native-api should a new COMMANDS.md file be created in https://github.com/pyenv/pyenv-virtualenv to add documentation for these commands?",
      "That's one option, if you also link to it from Pyenv-Virtualenv's README.\r\n\r\nYou may figure out a more convenient way.",
      "\r\n\r\n> That's one option, if you also link to it from Pyenv-Virtualenv's README.\r\n> \r\n> You may figure out a more convenient way.\r\n\r\nCan you please help with some suggestions?",
      "No :slightly_smiling_face: \r\n\r\nI don't use that documentation, so I don't know how it'd be convenient to consume it."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3f944ee515ce6a4ab91",
    "number": 2122,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2121\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nhttps://github.com/pyenv/pyenv/issues/2121#issuecomment-950185279\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n\r\nFor added universalsdk handling logic",
    "head_branch": "universal_archs_m1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Default --with-universal-archs to universal2 on Apple Silicon (#2122)\n\nDon't override a user-supplied value"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3fa44ee515ce6a4ab92",
    "number": 2120,
    "body": "Minor changes to make the docs better.\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update README.md (#2120)\n\nMinor changes to make the docs better."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3fb44ee515ce6a4ab93",
    "number": 2117,
    "body": "Add GraalPython 21.3.0 which was released yesterday. x86_64 only. CC @timfel ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add GraalPython 21.3.0 (#2117)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3fb44ee515ce6a4ab94",
    "number": 2111,
    "body": "Pypy ver 7.3.6 - python 3.7 and python 3.8\r\n",
    "head_branch": "pypy3.8-7.3.6",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2111 from dand-oss/pypy3.8-7.3.6\n\nPypy ver 7.3.6 - python 3.7 and python 3.8"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3fc44ee515ce6a4ab95",
    "number": 2106,
    "body": "Link to the active version like other Homebrew deps --\r\nthis won't break when another binary-compatible version is installed.\r\nUse a discovery method that doesn't break when other versions are present alongside.\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2102\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "tcltk_homebrew_reliable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Discover Tcl/Tk reliably and use active version (#2106)\n\nLink to the active version like other Homebrew deps --\r\nthis won't break when another binary-compatible version is installed.\r\nUse a discovery method that doesn't break when other versions are present alongside."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3fd44ee515ce6a4ab96",
    "number": 2104,
    "body": "Typo in README.\r\n\r\nEdit:\r\n\r\nAlso, I've added `$PYENV_ROOT/shims` to `$fish_user_paths`",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fish installation instructions (#2104)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3fe44ee515ce6a4ab97",
    "number": 2099,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2099 from nedbat/master\n\nAdd CPython 3.11.0a1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3ff44ee515ce6a4ab98",
    "number": 2096,
    "body": "Fix typo `ase` -> `case`\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2096 from ashwinvis/patch-1\n\nFix mambaforge-pypy3 build"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc3ff44ee515ce6a4ab99",
    "number": 2094,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2070\r\n\r\n### Description\r\nhttps://conda.io/projects/conda/en/latest/user-guide/configuration/use-condarc.html#update-conda-automatically-auto-update-conda is the option intended to prevent implicit `conda` package updates.\r\n\r\nCAUTION: it seems to [still not protect from `conda update --all`](https://github.com/conda/conda/issues/5294)!! Pinning protects from it, but it's local to an environment. Since we shim `conda`, we can propagate the pin to other environments as they are created, but that'd be another feature.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\nTest the feature + helper fns for Anaconda",
    "head_branch": "anaconda_no_autoupdate",
    "is_a_fork": true,
    "comments": [
      "@native-api I am against changing the default settings for anaconda/miniconda. End user doesn't even assume that auto-update is turned off for the conda! This will create a bunch of problems!\nSo, after installing the anaconda/miniconda, at the end of the installation process, we should return all the default settings.",
      "Thanks for taking the time to work on this!\r\n\r\nI agree with @anton-petrov about not changing the defaults permanently. Also, I think that chunk of code could have a comment explaining why that is required.",
      "> End user doesn't even assume that auto-update is turned off for the conda!\r\n\r\n@humitos That's strange. In https://github.com/pyenv/pyenv/issues/2070, you assumed exactly that. And for a good reason -- our naming system for Anaconda is based on that assumption!\r\n\r\nWell, if you're fine with things the way they are, who am I to judge you... Let's wait for someone else to run into this and give us more feedback... (if others are fine, too, so they won't -- well, all the better)"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc40044ee515ce6a4ab9a",
    "number": 2093,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "py310",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2093 from Parnassius/py310\n\nAdd Python 3.10.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc40144ee515ce6a4ab9b",
    "number": 2091,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue\r\n  - Closes https://github.com/pyenv/pyenv/issues/1527\r\n\r\n### Description\r\n- [x] Added documentation for `shims` command in [COMMANDS.md](https://github.com/pyenv/pyenv/blob/master/COMMANDS.md)\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "shims-command",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add documentation for shims command (#2091)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc40244ee515ce6a4ab9c",
    "number": 2090,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue\r\n  - Closes https://github.com/pyenv/pyenv/issues/1527\r\n\r\n### Description\r\n- [x] Added documentation for `exec` command in [COMMANDS.md](https://github.com/pyenv/pyenv/blob/master/COMMANDS.md)\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "exec-command",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add documentation for exec command (#2090)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc40344ee515ce6a4ab9d",
    "number": 2089,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue\r\n  - Closes https://github.com/pyenv/pyenv/issues/1527\r\n\r\n### Description\r\n- [x] Added documentation for `hooks` command in [COMMANDS.md](https://github.com/pyenv/pyenv/blob/master/COMMANDS.md)\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "hooks-command",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add documentation for hooks command (#2089)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc40444ee515ce6a4ab9e",
    "number": 2088,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue\r\n  - Closes https://github.com/pyenv/pyenv/issues/1527\r\n\r\n### Description\r\n- [x] Added documentation for `root` command in [COMMANDS.md](https://github.com/pyenv/pyenv/blob/master/COMMANDS.md)\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "root-command",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add documentation for root command (#2088)\n\n* Add documentation for root command"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc40444ee515ce6a4ab9f",
    "number": 2087,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue\r\n  - Closes https://github.com/pyenv/pyenv/issues/1527\r\n\r\n### Description\r\n- [x] Added documentation for `prefix` command in [COMMANDS.md](https://github.com/pyenv/pyenv/blob/master/COMMANDS.md)\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "prefix-command",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add documentaion for prefix command (#2087)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc40544ee515ce6a4aba0",
    "number": 2084,
    "body": "### Description\r\n\r\nCurrent instructions didn't work for me on Ubuntu installation.\r\nSince `.bashrc` doesn't source `.profile` (it's the opposite), `$PATH` variables were not updated by the time `pyenv` is called. \r\n\r\nProposing the fix that makes them work.\r\n\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "As per the instructions, you need to restart your login session before using Pyenv. That way, `.profile` will be sourced.",
      "As mentioned in https://github.com/pyenv/pyenv/pull/2067#issue-1000138452, we can lift the session restart requirement, but programs outside a terminal session will still not find Pyenv until you do so (but before v.2, they weren't able to find Pyenv at all, so that's not a regression). Will that be better?",
      "> As per the instructions, you need to restart your login session before using Pyenv. That way, .profile will be sourced.\r\n\r\nIt still doesn't work after restarting login session, and .profile does not get sourced, perhaps this is specific to Ubuntu 16 that I am running this on.",
      "Are you working in GUI or console session? Do you have `~/.bash_profile`?",
      "console session, no `.bash_profile`, only `.profile` and `.bashrc`. ",
      "Then most probably, your shell is somehow run as a non-login shell. Check that, and what startup files it sources (e.g. by placing a debug print statement at the start of each one).",
      "Thanks, yes, it was running as a non-login shell.",
      "For my education, why would it be wrong to modify `$PATH` in `.bashrc` instead of `.profile`, given that `.profile` sources `.bashrc` ?",
      "Also since we are adding `         echo 'eval \"$(pyenv init -)\"' >> ~/.bashrc`\t- how will pyenv be resolved withing `.bashrc` if the pyenv path is not defined in `.bashrc` ?",
      "`.bashrc` can be sourced multiple times. So it's problematic to do `PATH` manipulations there, they should go into profile files instead. See https://unix.stackexchange.com/questions/609522/should-bashrc-commands-support-shell-reloading",
      "> how will pyenv be resolved withing `.bashrc` if the pyenv path is not defined in `.bashrc` ?\r\n\r\nThat's why the suggested setup puts adding Pyenv to PATH at the _start_ of `.profile`, before it sources `.bashrc`.",
      "Thanks!"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc40644ee515ce6a4aba1",
    "number": 2078,
    "body": "This package gets rid of the extra \"usr\" subdirectory that we had and now fits the format that pyenv expects\r\n\r\nWe got a bug report that compiling extension modules failed, because in my old patch the header files were still located at `usr/include` whereas the binary was at `bin` so it was only looking for `include`",
    "head_branch": "pyston_2.3.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update to Pyston's v2 package of the 2.3.1 release (#2078)\n\nThis one gets rid of the extra \"usr\" subdirectory that we had and now fits the format that pyenv expects"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc40744ee515ce6a4aba2",
    "number": 2075,
    "body": "We changed the directory structure for pyston 2.3.1 slightly, where we now\r\ninclude a top-level \"pyston-2.3.1\" directory when you unpack the tarball.\r\n\r\nMy first time looking at pyenv so I'm not super confident in how I've laid things out.",
    "head_branch": "pyston_2.3.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2075 from kmod/pyston_2.3.1\n\nAdd pyston-2.3.1 support"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc40844ee515ce6a4aba3",
    "number": 2074,
    "body": "### Solution to tell conda to not update other dependencies when installing pip.\r\nThe main idea is to specify the existing version of the conda when installing the pip package.  Conda is the main tool for installing packages in miniconda & miniforge. So, some users does not always need the latest version of conda, for example. After installation of miniconda or miniforge, user can update all packages  manually or use such a setting as  `conda config --set auto_update_conda False`.\r\nThanks to @native-api, @humitos for the suggested solutions.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2070\r\n\r\n### Description\r\n- [x ] Here are some details about my PR\r\n- https://github.com/pyenv/pyenv/issues/2070#issue-1000827548\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2074 from anton-petrov/master\n\nDon't update conda when installing pip"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc40944ee515ce6a4aba4",
    "number": 2073,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\n* Add running `make test` in Github Actions now that Travis check no longer runs; fix failures.\r\n* Add diagnostic output to test libraries hat makes it possible to diagnose errors.\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "github_actions_tests",
    "is_a_fork": true,
    "comments": [
      "Any reason you kept the Travis CI config around still?",
      "@joshfriend I don't know why it was disabled -- that certainly wasn't me. So until that is clarified, I didn't think it was a good idea to touch it.",
      "I didn't disable it, but it's probably for the best given the Travis CI security incident, although I don't know how to revoke the github API key or whatever travis is using to create releasees for tags",
      "> given the Travis CI security incident\r\n\r\nI read [their bulletin](https://travis-ci.community/t/security-bulletin/12081). According to it, it only exposed secret variables to external PR builds (PR builds where the PR branch is from a fork) -- so they could leak if a PR had malicious code.\r\nThere have been no PRs with any suspect of malicious code in that timeframe here, and the secret value is included in such a way that it's hard to access from build logic (need to parse Travis' autogenerated script to my best knowledge, so code doing smth like that would be quite obvious).\r\n\r\n> I don't know how to revoke the github API key or whatever travis is using to create releasees for tags\r\n\r\nI don't see any kind of access keys in this repo's settings. Personal tokens can be used for releases. Since @anton-petrov is doing the releases, I guess it's his personal token encrypted in `.travis.yml`.",
      "> Since @anton-petrov is doing the releases, I guess it's his personal token encrypted in .travis.yml.\r\n\r\nChecking Git Blame, @yyuu added the encrypted value. So it must be his.\r\n\r\nAs mentioned earlier, I believe it's highly unlikely that it has leaked -- yet he can revoke that token nevertheless just for the peace of mind.",
      "Hmm, I couldn't figure out how to revoke my Travis token 🤔  Maybe uninstall & re-install the GitHub App for Travis works...? Maybe it's a better idea to consider migrating to GitHub Actions completely... 🙊 "
    ],
    "commit_messages": [
      "Merge pull request #2073 from native-api/github_actions_tests\n\nGitHub actions tests"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc40944ee515ce6a4aba5",
    "number": 2072,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - None\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nI wanted to add the newer versions of miniconda, and I came across this script that works automatically. However, it was unable to handle the newer versions, which is likely why it hasn't been used recently. I made some inelegant fixes to make `add_miniconda.py` work with newer versions of miniconda and creating files from it accordingly.\r\n\r\nIt would probably look better after a refactor, but that seemed like a lot of work and out-of-scope for this PR.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)",
    "head_branch": "improve-add_miniconda",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2072 from aphedges/improve-add_miniconda"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc40a44ee515ce6a4aba6",
    "number": 2071,
    "body": "In GNU `sed`, the `-iEe` argument is equivalent to `--in-place=Ee`, which would create `~/.profileEe` as backup of `~/.profile` if the command executed successfully. However, because the `e` is no longer being processed as an expression argument, `sed` does not correctly join the expressions and exits with `sed: -e expression #2, char 10: unexpected }`.\r\n\r\nThe proposed change fixes the immediate error, though perhaps it actually makes sense to create a backup for the user (with `-Ei\"_backup\" -e` or something).\r\n\r\nIn a larger sense, it's probably a bad idea to use a multi-line, complicated `sed` command (with hold and pattern space actions, no less!) here. It is overly complex, unmaintainable, and happens in a place that's outside of test coverage (as we just saw). An error could also break a user's system. \r\n\r\nIt would be safer to provide the user with the lines they need to insert into their config, the state of which `pyenv` knows nothing. And if the desire is to automate this process, then the process should be automated with readable, maintainable, and testable code. (Doesn't `pyenv-installer` already do this?)\r\n",
    "head_branch": "sed_fix",
    "is_a_fork": true,
    "comments": [
      "Pulling on this thread a bit more since you mention GNU `sed`.  What about version constraints?  For example GNU `sed` 4.7 versus 4.8?\r\n\r\nWhat about FreeBSD `sed` and any [potential differences](https://unix.stackexchange.com/questions/13711/differences-between-sed-on-mac-osx-and-other-standard-sed)?",
      "According to your link, the invocations would work everywhere, but in FreeBSD, they will also create bogus backup files. Not too bad for a zoo of platforms with mutually-exclusive Sed syntax!\r\n\r\nThe sections where the invocations are are intended for Linux, the many BSD flavors are not our primary supported platforms, and given the lack of any portable alternatives if the post on the link is to be believed, this looks good enough for the task.\r\n\r\nAny other more portable options that I'm aware of (e.g. using Awk) would be much more complex and less readable (e.g. currently, the lines inserted into files are in plain text so it's clear to a reader what is being inserted).\r\nIf you have any ideas for improvement, you can share them and/or submit a PR."
    ],
    "commit_messages": [
      "Fix sed commands (#2071)\n\nIn GNU `sed`, the `-iEe` argument is equivalent to `--in-place=Ee`, which would create `~/.profileEe` as backup of `~/.profile` if the command executed successfully. However, because the `e` is no longer being processed as an expression argument, `sed` does not correctly join the expressions and exits with `sed: -e expression #2, char 10: unexpected }`.\r\n\r\nThe intent is to use extended regex, perform the changes in-place, and use a series of expressions, so `-Ei -e` is used instead."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc40b44ee515ce6a4aba7",
    "number": 2067,
    "body": "See the rendered README at https://github.com/native-api/pyenv/tree/readme#readme\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2062\r\n  - Closes https://github.com/pyenv/pyenv/issues/2058\r\n  - Closes https://github.com/pyenv/pyenv/issues/2068\r\n  - Closes https://github.com/pyenv/pyenv/issues/1990\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\n* Update the setup code in the README based on user feedback\r\n* Remove setup code from installer output since it proved\r\n\r\nConsidered adding logic for pyenv-installer that would replicate the README (like RVM does). Since the logic proves rather complex and multi-case, let's wait for positivbe feedback from users on the README-driven logic before we can rely on it enough to apply it unattended.\r\n\r\n**This is my last-ditch effort to make clear instructions. If these are still too hard to follow, I'll make it so that just `pyenv init -` works, too, as previously, making `--path` optional -- but that will yield poor results in some setups (e.g. in distros that add `~/.local/bin` to `PATH` in profile) where it's preferreable to add a `PATH` entry at a different moment.**\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n\r\nN/A",
    "head_branch": "readme",
    "is_a_fork": true,
    "comments": [
      "Please note that WSL also runs shells as login shells by default.\r\n\r\n```console\r\n$ [[ -o login ]] && echo \"login\"\r\nlogin\r\n$ zsh\r\n$ [[ -o login ]] && echo \"login\"  # no output\r\n```\r\n\r\nTested with Windows Terminal 1.10.2383.0 and:\r\n1. Ubuntu 18.04 WSL, zsh 5.4.2\r\n2. ArchWSL, zsh 5.8\r\n\r\nMaybe the config for MacOS also applies to WSL?",
      "> \r\n> \r\n> Please note that WSL also runs shells as login shells by default.\r\n> \r\n> ```\r\n> $ [[ -o login ]] && echo \"login\"\r\n> login\r\n> $ zsh\r\n> $ [[ -o login ]] && echo \"login\"  # no output\r\n> ```\r\n> \r\n> Tested with Windows Terminal 1.10.2383.0 and:\r\n> \r\n>     1. Ubuntu 18.04 WSL, zsh 5.4.2\r\n> \r\n>     2. ArchWSL, zsh 5.8\r\n> \r\n> \r\n> Maybe the config for MacOS also applies to WSL?\r\n\r\nAFAICS, WSL is effectively an Ubuntu console session in a Windows terminal window. So instructions for Ubuntu should also apply to it, no need for a separate section.",
      "> AFAICS, WSL is effectively an Ubuntu console session in a Windows terminal window. So instructions for Ubuntu should also apply to it, no need for a separate section.\r\n\r\nOf course instructions for Ubuntu work for WSL, and of course no extra section is needed.\r\n\r\nBut instructions for Ubuntu also work for MacOS (except that an extra note is needed to tell users to run the shell as a login shell). Why should there be a seperate section for MacOS? Because there is no need to add three extra lines into `.profile` [1]. This is the same as WSL.\r\n\r\nWhat I meant by saying \"maybe the config for MacOS also applies to WSL\" was that, instead of writing:\r\n\r\n> MacOS, if Pyenv is installed with a Git checkout:\r\n> In MacOS, restarting terminal windows is enough\r\n\r\nwe could write:\r\n\r\n> MacOS or WSL, if Pyenv is installed with a Git checkout:\r\n> In MacOS and WSL, restarting terminal windows is enough\r\n\r\n[1] I have never used MacOS, but I assume lines in `.profile` are ignored if zsh is the login shell, as they should be on WSL, and thus these extra lines will not break pyenv; please let me know if I am wrong.",
      "> What I meant by saying \"maybe the config for MacOS also applies to WSL\" was that, instead of writing:\r\n> \r\n> > MacOS, if Pyenv is installed with a Git checkout:\r\n> > In MacOS, restarting terminal windows is enough\r\n> \r\n> we could write:\r\n> \r\n> > MacOS or WSL, if Pyenv is installed with a Git checkout:\r\n> > In MacOS and WSL, restarting terminal windows is enough\r\n\r\nThat'd not be correct. As you can see, WSL is not a separate OS, it's merely another way to use a pre-existing Linux distro -- one of at least a few different ones as you've demonstrated yourself. So there isn't a single, separate environment called \"WSL\", and as such, there cannot be a separate, not to mention single, set of instructions for it, the instructions for whatever distro you're using through it apply instead.\r\n\r\nMoreover, we do not officially support WSL (in particular, do not test things on it as part of our maintenance) so I'm hesitant to treat it as a first-class citizen in the README as it would give users a false impression.",
      "I'll add some instructions for WSL2 later (using it at work too)..."
    ],
    "commit_messages": [
      "Merge pull request #2067 from native-api/readme\n\nUpdate setup instructions in the Readme"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc40c44ee515ce6a4aba8",
    "number": 2065,
    "body": "Arch Linux has Python is sbin as well as bin\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/331\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nhttps://github.com/pyenv/pyenv/issues/331#issuecomment-920123439\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n\r\nAllow system Python to be in sbin as well as bin",
    "head_branch": "sbin",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow system Python in sbin (#2065)\n\nArch Linux has Python is sbin as well as bin"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc40d44ee515ce6a4aba9",
    "number": 2061,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - #1768 : the most related topic\r\n  - #2020\r\n  - #2060 \r\n\r\n### Description\r\nPython 2.7.x build on macOS + Apple Silicon (arm64) is broken at present. This PR backports the patch of Python 3.8.7 for darwin arm64 from [Homebrew/formula-patches](https://github.com/Homebrew/formula-patches/blob/master/python/3.8.7.patch) and fixes the build of 2.7.18.\r\n\r\nThis depends on #2060 for a successful build on my environment. Some Macs that have no binutils from Homebrew may successfully build it without #2060 but it's not confirmed.\r\n\r\nThe hand-ported patch is somewhat huge; while it produces a working build with _tkinter, _ctypes, and _Qt, I'm not sure if it's necessary to apply this patch to all Python 2.7.x since Python 2.x have EOL'ed, as discussed in #882. This fix should cover most of Python 2 usage for developers who fight against obsolete Python 2 code.\r\n\r\nHere is [a Gist](https://gist.github.com/puhitaku/acc733615e32d009d82994115aca2e0d#file-python-2-7-18-apple-silicon-pyenv-verbose-fail-log) of failing build log and successful build log.\r\n\r\n### Environment\r\n - MacBook Pro (Late 2020, M1)\r\n - macOS 11.5.2 (Big Sur)\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "python2-apple-silicon",
    "is_a_fork": true,
    "comments": [
      "Looks like there are several concerns here mixed up together. Let's sort them out one by one.\r\n\r\n* The alleged issue with binutils we'll discuss in #2060 .\r\n* Until and unless concensus in #882 says otherwise, I'm fine with accepting patches for EOL versions from interested users. We just don't make any promises from our side that any EOL version will work or will keep working.\r\n  * However, I'd like to make sure that we don't patch what we don't absolutely need to.\r\n    * in particular, that the change won't negatively affect builds in legacy environments that do support the EOL version properly.\r\n  * So please demonstrate the problem that each of your patches resolves and its root cause.",
      "Then I'll try to build 2.7.18 with the patch and without disabling binutils (without installing binutils with Homebrew). Fortunately, I have a MacBook Air (M1) which has a almost stock OS installed. After this succeeds, I'll revert back or remove 7c9bfa5 and split the mixed topics.",
      "I've successfully built Python 2.7.18 on a newly installed Mac so please take a look at [this Gist](https://gist.github.com/puhitaku/95b0c10f9f5eb730f407bef60971efe4) for details.\r\n\r\nNow it's concluded that the patch to 2.7.18 is actually needed while Homebrew packages (binutils and coreutils) are another discrete topic.",
      "I've reverted 7c9bfa5. Please tell me if I should *pair-annihilate* the commit and the revert. I'll force push squashed commits.",
      "> \r\n> \r\n> I've reverted [7c9bfa5](https://github.com/pyenv/pyenv/commit/7c9bfa5f8d2478af1b194cf50c9346df2bedb51d). Please tell me if I should _pair-annihilate_ the commit and the revert. I'll force push squashed commits.\r\n\r\nIt's better to have a nice-looking history in a PR when it's presented for review (that's not a strict requirement though -- e.g. if the changes only make sense together, they're going to be squashed together anyway, so why bother).\r\n\r\nThat said, some PR checks currently fail. Please look into that, too.",
      "I've pushed update commits for a fixed build. Please approve workflows. @native-api ",
      "Why I still can't install 2.7.18 on mac m1:\r\n```\r\n➜  ~ pyenv install 2.7.18\r\nDownloading openssl-1.0.2q.tar.gz...\r\n-> https://www.openssl.org/source/old/1.0.2/openssl-1.0.2q.tar.gz\r\nInstalling openssl-1.0.2q...\r\n\r\nBUILD FAILED (OS X 11.6 using python-build 20180424)\r\n\r\nInspect or clean up the working tree at /var/folders/6t/rml6nn4d0q99nrqv8wmwz2t80000gn/T/python-build.20211006181826.78401\r\nResults logged to /var/folders/6t/rml6nn4d0q99nrqv8wmwz2t80000gn/T/python-build.20211006181826.78401.log\r\n\r\nLast 10 log lines:\r\n      _dgram_write in libcrypto.a(bss_dgram.o)\r\n      _RAND_query_egd_bytes in libcrypto.a(rand_egd.o)\r\n      ...\r\nld: symbol(s) not found for architecture i386\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\nmake[4]: *** [link_a.darwin] Error 1\r\nmake[3]: *** [do_darwin-shared] Error 2\r\nmake[2]: *** [libcrypto.1.0.0.dylib] Error 2\r\nmake[1]: *** [shared] Error 2\r\nmake: *** [build_crypto] Error 1\r\n```",
      "@ischaojie try updating `pyenv`. I just pulled down version `pyenv 2.1.0-15-g444088b1` and was able to run `pyenv install 2.7.18` with success."
    ],
    "commit_messages": [
      "Add Python 2.7.18 patches for Apple Silicon machines (#2061)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc40e44ee515ce6a4abaa",
    "number": 2060,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n   - #2020 \r\n\r\n### Related\r\n - https://github.com/bitcoin/bitcoin/issues/20825#issuecomment-753444519\r\n    - Conversation of the same error and solution\r\n\r\n### Description\r\nDisabling coreutils is enough to get Python 3.8.10 ~ 3.8-dev and 3.9.1 ~ 3.9-dev to work on macOS. Disabling binutils from Homebrew was also necessary to build Python 2.7.18 on my Mac + Apple Silicon. Actually, this PR is a part of a fix for Python 2.7.18 + Apple Silicon build failure.\r\n\r\nI've enhanced the (very fresh) function that was introduced in #2020 to disable binutils in Homebrew. Thanks!\r\n\r\n#### Build confirmation after the change\r\n\r\nHere is [a Gist](https://gist.github.com/puhitaku/81b6b0930948fc8e4811a9f850e475fe) that has all verbose build logs of:\r\n - 3.8-dev\r\n - 3.8.10\r\n - 3.8.11\r\n - 3.9-dev\r\n - 3.9.1\r\n - 3.9.2\r\n - 3.9.4\r\n - 3.9.5\r\n - 3.9.6\r\n \r\n #### Environment\r\n - MacBook Pro (Late 2020, M1)\r\n - macOS 11.5.2 (Big Sur)\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "no-homebrew-binutils",
    "is_a_fork": true,
    "comments": [
      "Could you demonstrate the probem with 2.7.18 and how Homebrew's binutils are at fault?\r\n\r\nIf they really are, we should, like in https://github.com/pyenv/pyenv/pull/2020, only disable them for affected versions, separately from coreutils -- i.e. not change the build environment more than necessary for each version.",
      "IIRC 2.7 is not supported on MacOS 11 at all. Does it even build in the stock environment?",
      "> Could you demonstrate the probem with 2.7.18 and how Homebrew's binutils are at fault?\r\n\r\nI've created [a Gist](https://gist.github.com/puhitaku/de8667dd61d8246c8e2cb707723d79fe) for ensuring that both coreutils and binutils have to be disabled. The script is also attached.\r\n\r\nSummary:\r\nAt pyenv 9bd87fa (master + 2.7.18 patch),\r\n - With all (coreutils and binutils are enabled): reproduced #2020 \r\n - Without binutils: reproduced #2020 \r\n - Without coreutils: ld warning and undefined symbol error that look so similar to https://github.com/bitcoin/bitcoin/issues/20825\r\n - Without all: build successfully\r\n\r\n> If they really are, we should, like in #2020, only disable them for affected versions, separately from coreutils\r\n\r\nI'll modify the code to disable binutils only for 2.7.18 to limit the effect of this PR. Applying this to other supported Python should be done in another PR I think.\r\n\r\nFYI: [A brief test](https://gist.github.com/puhitaku/064d2cc443d13e88dcdf5040be332014) shows that disabling Homebrew binutils was also necessary for 3.8-dev",
      "I've pushed 929d066. I re-modified the code rather than reverting it back. If I should squash them, please tell me 😉 ",
      "> IIRC 2.7 is not supported on MacOS 11 at all. Does it even build in the stock environment?\r\n\r\nIt builds on macOS 11.5.2 with only a few lines of patch.\r\n\r\n```patch\r\nFrom 38289ec101bf6bff87e9b76de75928055aedd06c Mon Sep 17 00:00:00 2001\r\nFrom: Takumi Sueda <puhitaku@gmail.com>\r\nDate: Sat, 11 Sep 2021 14:06:11 +0900\r\nSubject: [PATCH] Make configure recognize arm64 environment\r\n\r\n---\r\n configure | 3 +++\r\n 1 file changed, 3 insertions(+)\r\n\r\ndiff --git a/configure b/configure\r\nindex 63d675312d..c40ec120de 100755\r\n--- a/configure\r\n+++ b/configure\r\n@@ -8474,6 +8474,9 @@ fi\r\n     \tppc)\r\n     \t\tMACOSX_DEFAULT_ARCH=\"ppc64\"\r\n     \t\t;;\r\n+    \tarm64)\r\n+    \t\tMACOSX_DEFAULT_ARCH=\"arm64\"\r\n+    \t\t;;\r\n     \t*)\r\n     \t\tas_fn_error $? \"Unexpected output of 'arch' on OSX\" \"$LINENO\" 5\r\n     \t\t;;\r\n-- \r\n2.30.1\r\n```\r\n\r\nIt comes without some internal things that I patched in #2061 \r\n\r\n```\r\nFailed to build these modules:\r\n_ctypes            _Qt                _tkinter        \r\n```",
      "> Without coreutils: ld warning and undefined symbol error that look so similar to Error Building from source on MacOS BigSur; linker issues bitcoin/bitcoin#20825\r\n\r\nPlease do not replace facts with your deductions (you can accompany them with those though). \"Looks very similar\" is not good enough to say with confidence that the specific configuration issue is the same and the best way to fix it is the same.\r\n\r\nIn particular, it also \"looks very similar\" to https://github.com/pyenv/pyenv/issues/1877.\r\n\r\nMoreover, if binutils on PATH unconditionally break Apple's toolchain, I suspect we don't even need to support the case where they are on `PATH` -- the user then has a broken setup.\r\nHomebrew deliberately does not add them to PATH and warns the user that it's because they conflict with Apple's tools."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc40e44ee515ce6a4abab",
    "number": 2059,
    "body": "### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  (N/A: doc improvement)\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  (Not using rbenv)\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/2058\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nAdd a zsh subsection in the installation instructions. See the related issue for details.\r\n",
    "head_branch": "issue-2058",
    "is_a_fork": true,
    "comments": [
      "Maybe `eval \"$(pyenv init -)\"` should be placed into `.zshrc`:\r\n\r\n> `.zshrc' is sourced in interactive shells. It should contain commands to set up aliases, functions, options, key bindings, etc.\r\n\r\nAlso, `.zshrc` is sourced after `.zshenv`.",
      "Closing this in favor of #2067."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc40f44ee515ce6a4abac",
    "number": 2053,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Yes, please!"
    ],
    "commit_messages": [
      "Add Python 3.10.0rc2 (#2053)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc41044ee515ce6a4abad",
    "number": 2052,
    "body": null,
    "head_branch": "add-cpython-3.6.15-3.7.12",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython v3.6.15 and v3.7.12 (#2052)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc41144ee515ce6a4abae",
    "number": 2051,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [X] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [X] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [X] Here are some details about my PR\r\n\r\nThis pull requests adds the missing definition files for the Python 2.6.x series (from 2.6.0 to 2.6.5), as well as their corresponding patches. The definition files are created from the one in Python 2.6.6 but updating the Python versions as well as the digests with:\r\n```\r\nshasum -a 256 -b Python-2.6.tgz\r\nshasum -a 256 -b Python-2.6.1.tgz\r\nshasum -a 256 -b Python-2.6.2.tgz\r\nshasum -a 256 -b Python-2.6.3.tgz\r\nshasum -a 256 -b Python-2.6.4.tgz\r\nshasum -a 256 -b Python-2.6.5.tgz\r\n```\r\n\r\nThese are the logs when building in an ancient Docker image (Debian 4.0 under Ubuntu 20.04):\r\n* [python_build_2.6.0.log](https://github.com/pyenv/pyenv/files/7117614/python_build_2.6.0.log)\r\n* [python_build_2.6.1.log](https://github.com/pyenv/pyenv/files/7117615/python_build_2.6.1.log)\r\n* [python_build_2.6.2.log](https://github.com/pyenv/pyenv/files/7117616/python_build_2.6.2.log)\r\n* [python_build_2.6.3.log](https://github.com/pyenv/pyenv/files/7117618/python_build_2.6.3.log)\r\n* [python_build_2.6.4.log](https://github.com/pyenv/pyenv/files/7117619/python_build_2.6.4.log)\r\n* [python_build_2.6.5.log](https://github.com/pyenv/pyenv/files/7117620/python_build_2.6.5.log)\r\n\r\nI took the patch files from Python 2.6.6 and performed minor modifications to make them compliant with the former Python versions, which are mainly (but not only):\r\n- The line numbers for the patch hunks.\r\n- The indentation in the C files was done with tabs instead of spaces before Python 2.6.6.\r\n- The missing `from distutils.spawn import find_executable` import in `setup.py`.\r\n\r\nRelevant is the following part:\r\n```\r\nINFO: Can't locate Tcl/Tk libs and/or headers\r\n\r\nFailed to find the necessary bits to build these modules:\r\n_tkinter           bsddb185           dl              \r\nimageop            sunaudiodev                        \r\nTo find the necessary bits, look in setup.py in detect_modules() for the module's name.\r\n```\r\nwhich is the same result as when installing Python 2.6.6-2.6.9 in pull request #2049 (i.e. `linuxaudiodev` and `ossaudiodev` are built correctly).\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "feature-py2.6-definitions",
    "is_a_fork": true,
    "comments": [
      "Merging since there are all 2.5 and 2.4 so missing 2.6 looks odd (and the history shows that they weren't deleted, just never added). But I seriously doubt that these will be of any use to anyone.\r\n\r\nDeprecation policy is being discussed in https://github.com/pyenv/pyenv/issues/882.",
      "@native-api Yes, you are totally right, but I also saw that 2.4.x and 2.5.x were complete and because I had been playing around with 2.6.6-2.6.9 I wanted to spend a bit of time in completing the 2.6.x series. Thanks!"
    ],
    "commit_messages": [
      "Add missing Python 2.6.x definitions and patches (#2051)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc41244ee515ce6a4abaf",
    "number": 2050,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "main",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc41344ee515ce6a4abb0",
    "number": 2049,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [X] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [X] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [X] Here are some details about my PR\r\n\r\nThis is essentially the same fix as in pull request #2047, but now:\r\n- It is applied from Python 2.6.6 to 2.6.9, and\r\n- It is applied to `ossaudiodev` as well as the (deprecated) `linuxaudiodev` module.\r\n\r\nBelow you may find sample logs when building with an ancient Debian Docker image (Debian 4.0 hosted by Ubuntu 20.04) before and after applying the patch (the architecture is x86_64):\r\n\r\n* [python-build_2.6.6_without_patch.log](https://github.com/pyenv/pyenv/files/7110484/python-build_2.6.6_without_patch.log)\r\n* [python-build_2.6.6_with_patch.log](https://github.com/pyenv/pyenv/files/7110485/python-build_2.6.6_with_patch.log)\r\n* [python-build_2.6.7_without_patch.log](https://github.com/pyenv/pyenv/files/7110486/python-build_2.6.7_without_patch.log)\r\n* [python-build_2.6.7_with_patch.log](https://github.com/pyenv/pyenv/files/7110487/python-build_2.6.7_with_patch.log)\r\n* [python-build_2.6.8_without_patch.log](https://github.com/pyenv/pyenv/files/7110488/python-build_2.6.8_without_patch.log)\r\n* [python-build_2.6.8_with_patch.log](https://github.com/pyenv/pyenv/files/7110489/python-build_2.6.8_with_patch.log)\r\n* [python-build_2.6.9_without_patch.log](https://github.com/pyenv/pyenv/files/7110490/python-build_2.6.9_without_patch.log)\r\n* [python-build_2.6.9_with_patch.log](https://github.com/pyenv/pyenv/files/7110491/python-build_2.6.9_with_patch.log)\r\n\r\nBasically before:\r\n```\r\nINFO: Can't locate Tcl/Tk libs and/or headers\r\n\r\nFailed to find the necessary bits to build these modules:\r\n_tkinter           bsddb185           dl              \r\nimageop            linuxaudiodev      ossaudiodev     \r\nsunaudiodev                                           \r\nTo find the necessary bits, look in setup.py in detect_modules() for the module's name.\r\n```\r\nand after:\r\n```\r\nINFO: Can't locate Tcl/Tk libs and/or headers\r\n\r\nFailed to find the necessary bits to build these modules:\r\n_tkinter           bsddb185           dl              \r\nimageop            sunaudiodev                        \r\nTo find the necessary bits, look in setup.py in detect_modules() for the module's name.\r\n```\r\nwhere `_tkinter` is not built because I intentionally omitted the `tk-dev` package, `bsddb185` is not compatible with modern versions of `libdb-dev`,  `dl` and `imageop` are only built for 32-bit systems, and `sunaudiodev` is only built for SunOS.\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "bugfix-py2.6-ossaudiodev",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix build of ossaudiodev in Linux/FreeBSD for Python 2.6 (#2049)\n\nThis is essentially the same fix as in pull request #2047, but it\r\nis applied from Python 2.6.6 to 2.6.9, and for `ossaudiodev` as well\r\nas the (deprecated) `linuxaudiodev`."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc41344ee515ce6a4abb1",
    "number": 2047,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [X] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [X] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [X] Here are some details about my PR\r\n\r\nThis pull request updates the patches for the Python 3.1.x series to fix the build of `ossaudiodev` under recent GNU/Linux distributions.\r\n\r\nWith the normal `setup.py`, the installation of the `ossaudiodev` module is skipped under GNU/Linux with newer kernel versions because Python 3.1 appends the major kernel version to the result of `build_ext.get_platform` and later `ossaudiodev` is skipped if the major kernel version is not 2. A similar problem might occur if installing in FreeBSD but because `build_ext.get_platform` appends the FreeBSD major release version number.\r\n\r\nThis problem may even occur if installing Python 3.1.x in a Docker image of an old distribution (e.g. prehistoric Debian or CentOS), because the major kernel version is still the one of the host system.\r\n\r\nThe solution is to use `str.startswith` and only check that the platform starts with 'linux' or 'freebsd'.\r\n\r\n----\r\n\r\nI attach one example of `python-build` log before and after the proposed changes when installing Python 3.1.5 using an ancient Debian GNU/Linux Docker image with recent Ubuntu as host (Linux kernel major version 5):\r\n[pybuild_3.1.5_without_patch.log](https://github.com/pyenv/pyenv/files/7105078/pybuild_3.1.5_without_patch.log)\r\n[pybuild_3.1.5_with_patch.log](https://github.com/pyenv/pyenv/files/7105073/pybuild_3.1.5_with_patch.log)\r\n\r\nSo before the proposed changes:\r\n```\r\nbuilding dbm using gdbm\r\n\r\nPython build finished, but the necessary bits to build these modules were not found:\r\n_tkinter           ossaudiodev                        \r\nTo find the necessary bits, look in setup.py in detect_modules() for the module's name.\r\n```\r\n\r\nAfter the proposed changes:\r\n```\r\nbuilding dbm using gdbm\r\n\r\nPython build finished, but the necessary bits to build these modules were not found:\r\n_tkinter                                              \r\nTo find the necessary bits, look in setup.py in detect_modules() for the module's name.\r\n```\r\n\r\nThe missing `_tkinter` from the logs is an expected result because my test was performed without adding the `tk-dev` headers, it plays no role in this pull request.\r\n\r\nI made equivalent tests with the other versions from the Python 3.1.x series and the behaviour is identical.\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "bugfix-py3.1-ossaudiodev",
    "is_a_fork": true,
    "comments": [
      "By the way, the Python 2.6.x series has the same problem with `linuxaudiodev` and `ossaudiodev`, I will just submit a pull request for that after this one gets accepted.",
      "I see that later versinos of CPython have the same fix."
    ],
    "commit_messages": [
      "Fix build of ossaudiodev in Linux/FreeBSD for Python 3.1 (#2047)\n\nWith the normal `setup.py`, the installation of the `ossaudiodev`\r\nmodule is skipped under GNU/Linux with newer kernel versions because\r\nPython 3.1 appends the major kernel version to the result of\r\n`build_ext.get_platform` and later `ossaudiodev` is skipped if the\r\nmajor kernel version is not 2. A similar problem might occur if\r\ninstalling in FreeBSD.\r\n\r\nThis problem may even occur if installing Python 3.1 in a Docker image\r\nof an old OS (e.g. prehistoric Debian or CentOS), because the major\r\nkernel version is still the one of the host system.\r\n\r\nThe solution is to use `str.startswith` and only check that the\r\nplatform starts with 'linux' or 'freebsd'."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc41444ee515ce6a4abb2",
    "number": 2045,
    "body": "### Description\r\n- [x ] Here are some details about my PR\r\n\r\n`libexec/pyenv` adds the `.../plugins/*/bin` directories to the PATH. This leads to duplicated PATH entries when `bin_path` is the same as `PYENV_ROOT`.\r\n\r\nThis PR simply checks if `bin_path` != `PYENV_ROOT` before adding the bin_path `plugins/*/bin` directories to PATH\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n  * _This is a trivial bug in libexe/pyenv and, therefore, not amenable to either a hook script or a plugin_\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n  *  _I checked rbenv and this code is specific to a difference between rbenv and pyenv, specifically: pyenv adds the bin_path plugins/*/bin directories, while rbenv does not_\r\n\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n  - _No existing pyenv issue_\r\n\r\n\r\n",
    "head_branch": "pm/fix_dupe_plugin_bin_in_path",
    "is_a_fork": true,
    "comments": [
      "> when `bin_path` is the same as `PYENV_ROOT`\r\n\r\nHow can this happen?\r\n`bin_path` (the location of the `pyenv` executable) is supposed to be either `$PYENV_ROOT/bin` (git checkout installation), or outside `$PYENV_ROOT` (Homebrew or other package manager installation).",
      "> > when `bin_path` is the same as `PYENV_ROOT`\r\n> \r\n> How can this happen?\r\n> `bin_path` (the location of the `pyenv` executable) is supposed to be either `$PYENV_ROOT/bin` (git checkout installation), or outside `$PYENV_ROOT` (Homebrew or other package manager installation).\r\n\r\nThis happened in a Docker container that pre-installed pyenv and set `ENV PYENV_ROOT=...`\r\n\r\nNow that I think about it from outside my tunnel vision, I can see that that's not an good plan, and will have a conversation with that Dockerfile maintainer.\r\n\r\nI think the fix is still \"safe\", but it does add complexity, so it's your call whether to include this or not."
    ],
    "commit_messages": [
      "Prevent duplicate PATH entries when bin_path/.. is the same as PYENV_ROOT (#2045)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc41544ee515ce6a4abb3",
    "number": 2044,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [X] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [X] Here are some details about my PR\r\nAdd CPython 3.9.7 \r\nhttps://www.python.org/downloads/release/python-397/\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2044 from poad/master\n\nAdd CPython 3.9.7"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc41644ee515ce6a4abb4",
    "number": 2043,
    "body": null,
    "head_branch": "add-cpython-3.8.12",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython v3.8.12 (#2043)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc41744ee515ce6a4abb5",
    "number": 2040,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\n![image](https://user-images.githubusercontent.com/11611397/130412367-2c4ee775-f298-4950-9b1d-476e51001a5e.png)\r\n\r\nThere is no space between [y|N] and user input when using `pyenv-uninstall` which looks somewhat weird, whereas `pyenv-install` has space.\r\n\r\nhttps://github.com/pyenv/pyenv/blob/8b60418361e29d30fbe7ee3133e57f4d351464da/plugins/python-build/bin/pyenv-install#L160\r\n\r\nAlso the style is slightly different (`pyenv-install (y/N), pyenv-uninstall [y|N]`) but um I think it's not a big deal. Well, this PR is not a big deal actually.\r\n\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add space after yes/no prompt (#2040)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc41844ee515ce6a4abb6",
    "number": 2037,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n\r\n\r\nLast time I wrongly used Bash 4 syntax to check the variable in #2027 , resulted in unusable pyenv in Bash3 (#2034). \r\nThis time I switched to the `declare -p` approach to check it, and have tested on bash:3.2 docker, with the following steps:\r\n1. Map my pyenv's versions dir into docker: `docker run --rm -v /opt/pyenv/versions:/pyenv-vers:ro -it bash:3.2 bash`\r\n2. Install git: `apk add git`\r\n3. Install pyenv\r\n4. link existing versions into versions folder:\r\n    ```\r\n    mkdir ~/.pyenv/versions\r\n    ln -s /pyenv-vers/2.7.18 ~/.pyenv/versions/\r\n    ```\r\n5. test rehash\r\n\r\nresult:\r\n```\r\nbash-3.2# mkdir ~/.pyenv/versions\r\nbash-3.2# ln -s /pyenv-vers/2.7.18 ~/.pyenv/versions/\r\nbash-3.2# pyenv versions\r\n  2.7.18\r\nbash-3.2# pyenv rehash\r\nbash-3.2# ls ~/.pyenv/shims\r\n2to3                   disablenx              idle                   jupyter-kernelspec     phd                    pygmentize             readelf.py             \r\n```\r\n\r\nMuch sorry for the inconvenience I bring to you :(",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "@anton-petrov Sorry for bothering, I've fixed it ;)",
      "Did you tested your PR on `zsh`?",
      "@anton-petrov , this script is for Bash only AFAICS -- is Zsh relevant?",
      "@anton-petrov Yep (although it has nothing to do with Zsh due to shebang), I'm using Zsh as my main shell now  ;)\r\nAlso, in #2034 jaybocc and sodul have also tested for me",
      "Indeed, it seems to me, I turned into a bot that asks stupid questions about compatibility with different shells 😆\r\nWe urgently need to add tests for different shells: bash 3,4,5, zsh, ...",
      "> Indeed, it seems to me, I turned into a bot that asks stupid questions about compatibility with different shells 😆\r\n> We urgently need to add tests for different shells: bash 3,4,5, zsh, ...\r\n\r\nThat's true, but other shell seems only handling alias and PATH, and pyenv are always using bash due to shebang `#!/usr/bin/env bash`. So maybe only bash variant should be tested. "
    ],
    "commit_messages": [
      "Merge pull request #2037 from NyaMisty/master\n\n[Fixed] Adapt conda.bash for bash associative array"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc41844ee515ce6a4abb7",
    "number": 2035,
    "body": "Reverts pyenv/pyenv#2027",
    "head_branch": "revert-2027-master",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2035 from pyenv/revert-2027-master\n\nRevert \"Adapt conda.bash for bash associative array\""
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc41944ee515ce6a4abb8",
    "number": 2032,
    "body": "Move man page to location where it can be automatically found by `manpath` utility without manual `MANPATH` setting. So the one who installs by `git clone` can simply do `man pyenv` instead of `man -l \"($pyenv root)/pyenv.1\"`\r\n\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2032 from vatosarmat/master\n\nMove man page to location where it can be automatically found by man"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc41a44ee515ce6a4abb9",
    "number": 2027,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\nIn #1749 , we move to use associative array on bash >= 4. However, rehash's hook conda.bash are not adapted, thus rendering pyenv's shim rehash filtering for conda useless.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "@NyaMisty @anton-petrov This PR broke `pyenv rehash` for Bash 3 and zsh. Reported in #2034."
    ],
    "commit_messages": [
      "Merge pull request #2027 from NyaMisty/master\n\nAdapt conda.bash for bash associative array"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc41b44ee515ce6a4abba",
    "number": 2025,
    "body": "The binaries were updated today by @pablogsal and here are the new checksums.\r\n\r\nFixes #2024 ",
    "head_branch": "fix-checksums",
    "is_a_fork": true,
    "comments": [
      "@native-api I'm not sure how you usually do this, but that sounds reasonable. You want me to do it here, as part of this PR?",
      "Yes, just do it as a separate commit.",
      "Thanks for the update :)"
    ],
    "commit_messages": [
      "Merge pull request #2025 from fredrikaverpil/fix-checksums\n\nUpdate checksums for CPython 3.10.0rc1\r\nRemove 3.10.0rc1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc41c44ee515ce6a4abbb",
    "number": 2023,
    "body": "### Description\r\n- Add CPython 3.10.0rc1\r\n- More info: https://www.python.org/downloads/release/python-3100rc1/\r\n\r\n### Tests\r\n- Add test to CI\r\n",
    "head_branch": "add-3100rc1",
    "is_a_fork": true,
    "comments": [
      "@anton-petrov why can I not request a review of this PR?"
    ],
    "commit_messages": [
      "Merge pull request #2023 from fredrikaverpil/add-3100rc1\n\nAdd CPython 3.10.0rc1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc41c44ee515ce6a4abbc",
    "number": 2022,
    "body": "It has been recalled due to introducing an unexpected incompatibility:\r\nhttps://www.python.org/downloads/release/python-393/\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "remove_3.9.3",
    "is_a_fork": true,
    "comments": [
      "I didn't really understand why this is removed. It's been \"recalled\", okay, but still there might be people around explicitly install that broken version and try/do things. IMO, it should be kept, for historical reasons at least.",
      "@ulgens PSF strongly discourages people from using this version because it causes trouble due to having introduced a binary incompatibility. They even removed a download for it from their download page.\r\n\r\nIf we kept it, we'd be contributing to that trouble.",
      "@native-api Got it, thanks a lot."
    ],
    "commit_messages": [
      "Merge pull request #2022 from native-api/remove_3.9.3\n\nRemove 3.9.3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc41d44ee515ce6a4abbd",
    "number": 2021,
    "body": "* modified commands for bash, zsh, fish shell installation instructions\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Hey, thanks so much for this contribution and trying to make the install docs better! \r\n\r\n`$PYENV_ROOT/bin` is actually the only thing users need to add to their `$PATH` to set up pyenv. The `bin` directory is actually where the `pyenv` command itself lives, so you need that in the `PATH` to start. Calling `pyenv init --path` then emits a directive that adds the shims path to the `PATH`, e.g. `export PATH=\"/Users/josh/.pyenv/shims:${PATH}\"`."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc41e44ee515ce6a4abbe",
    "number": 2020,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n  * **[Author comment] I don't patch to rbenv.**\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/1768#issuecomment-757552526\r\n    - This issue has already closed but this patch will automate above the commented operation.\r\n\r\n### Description\r\n- Commands of coreutils installed with homebrew can negatively affect installation, which `pyenv install` on M1 Apple Silicon with arm64.\r\n- Therefore, the patch temporarily excludes coreutils bin from PATH so that `pyenv install` does not reference the commands of coreutils.\r\n  - [coreutils](https://www.gnu.org/software/coreutils/)\r\n    - The path of coreutils bin, which is `$(brew --prefix coreutils)/libexec/gnubin`, overrides native path of commands included in coreutils.\r\n    - The overriding allows direct access to commands without using `g*`.\r\n- I don't think this patch satisfies best practices of high maintainability codes because blacklist method lacks versatility.\r\n  - For the time being, I propose a patch as one of the solutions.\r\n\r\n### Problem\r\n- [ ] Platform information (e.g. Ubuntu Linux 16.04): macOS Big Sur 11.4\r\n- [ ] OS architecture (e.g. amd64): arm64\r\n- [ ] pyenv version: 2.0.4-1-gb005dcc7\r\n- [ ] Python version: 3.9.6\r\n- [ ] C Compiler information (e.g. gcc 7.3): I have tried the following two.\r\n  - [ ] Apple clang version 12.0.5\r\n  - [ ] Homebrew GCC 11.2.0\r\n- [ ] Please attach verbose build log as gist: https://gist.github.com/ttksm/f287528cb664cc4bd8e1bbe2ea5d6dfe\r\n  * You can turn on verbose debug logging using by setting `PYENV_DEBUG=1`, e.g. `env PYENV_DEBUG=1 pyenv install -v 3.6.4`\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "disable-coreutils-applesilicon",
    "is_a_fork": true,
    "comments": [
      "Could you please showcase the problem that this is intended to fix -- with diagnostic info as per [the issue template](https://github.com/pyenv/pyenv/blob/master/.github/ISSUE_TEMPLATE.md)?",
      "@native-api \r\nThank you for your comment.\r\nI've added information such as the environment in which the error occurred.\r\nPlease take a look when you get a chance.",
      "Thank you.\r\n\r\nI see that the problem is in `./config.guess` outputting a result that Python's `./configure` is not able to work with.\r\nI don't have Apple M1 hardware, so could you run the following for me?\r\n* The output of `/usr/bin/uname -a`, `guname -a`\r\n* The output of `PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }' sh -x config.guess` in the Python build tree (it should be somewhere under your `$TEMP` after a failed build; if not, download and unpack the release tarball yourself and run the command there).\r\n\r\nI also see that [the release 3.9.3 has been recalled due to having introduced an unexpected incompatibility](https://www.python.org/downloads/release/python-393/) so we should probably remove it, too.\r\n\r\n* Could you check if all other releases that officially support Apple Silicon -- 3.9.1+ and 3.8.10+ -- show the same problem?",
      "Thank you.\r\n\r\n>The output of /usr/bin/uname -a, guname -a\r\n\r\nThe results are as follows.\r\n\r\n- `/usr/bin/uname -a`\r\n```\r\nDarwin BLMC009.local 20.6.0 Darwin Kernel Version 20.6.0: Wed Jun 23 00:26:27 PDT 2021; root:xnu-7195.141.2~5/RELEASE_ARM64_T8101 arm64\r\n```\r\n- `guname -a`\r\n```\r\nDarwin BLMC009.local 20.6.0 Darwin Kernel Version 20.6.0: Wed Jun 23 00:26:27 PDT 2021; root:xnu-7195.141.2~5/RELEASE_ARM64_T8101 arm64 arm64 MacBookPro17,1 Darwin\r\n```\r\n\r\n>The output of PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }' sh -x config.guess in the Python build tree\r\n\r\nI uploaded log to [my gist](https://gist.github.com/ttksm/f287528cb664cc4bd8e1bbe2ea5d6dfe#file-debug_config-guess-log).\r\n\r\n>Could you check if all other releases that officially support Apple Silicon -- 3.9.1+ and 3.8.10+ -- show the same problem?\r\n\r\nI tried to install the following versions but it failed.\r\n3.8.10, 3.8.11, 3.9.1, 3.9.2, 3.9.4, 3.9.5 and 3.9.6.\r\n",
      "Okay. The core reason is an old `config.sub` (a stock file inserted by `autoconf`) that doesn't support `arm64`. The issue has been reported in https://bugs.python.org/issue43878 and fixed in 3.10 only.\r\n\r\nSo we can selectively apply this workaroud to 3.9.1+ and 3.8.10+ only.",
      "Another option is to instead patch the `config.sub` for affected versions to a newer version of it.\r\nThe patch will need to be duplicated for each affected formula though.",
      "Thanks for your investigation and advices.\r\nI changed the logic to only selectively apply to the affected versions (3.8.10+ and 3.9.1+ ~ 3.9.6).\r\nPlease re-review.",
      "I've made some refinements. Please check that all the changed scripts work on an Apple M1.",
      "Thanks for your refinements.\r\nI've checked that scripts work fine with revision https://github.com/ttksm/pyenv/commit/ff9720981852fbcedbe5fbf380612284a01da049."
    ],
    "commit_messages": [
      "Disable coreutils on M1 Apple Silicon with arm64 (#2020)\n\n* Disable coreutils on arm64-apple\r\n* Only selectively apply to the affected CPython versions\r\n\r\nCo-authored-by: Ivan Pozdeev <vano@mail.mipt.ru>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc41f44ee515ce6a4abbf",
    "number": 2019,
    "body": "Added the ability to install the latest versions of [Miniforge 3](https://github.com/conda-forge/miniforge).\r\n- Optional support for PyPy in place of standard Python interpreter.\r\n- Optional support for Mamba in place of Conda.\r\n\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2019 from anton-petrov/master\n\nAdded scripts for rolling releases of Miniforge"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc42044ee515ce6a4abc0",
    "number": 2018,
    "body": "Add script for installing GraalPython 21.2.0 (released yesterday). Still x86_64 only.\r\n\r\nCC @timfel ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add GraalPython 21.2.0 (#2018)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc42144ee515ce6a4abc1",
    "number": 2017,
    "body": "The original 2.3 portable version was compiled on Ubuntu 20.04 and didn't work with older glibc.\r\n\r\nThis has been fixed and the older file has been deleted so hopefully this change is acceptable.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update pyston-2.3 (#2017)\n\nThe original 2.3 portable version was compiled on Ubuntu 20.04 and didn't work with older glibc.\r\n\r\nThis has been fixed and the older file has been deleted so hopefully this change is acceptable."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc42144ee515ce6a4abc2",
    "number": 2013,
    "body": "See reported problem: https://github.com/pyenv/pyenv/pull/2005#issuecomment-882768183\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "fix-3.10.0b4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2013 from nedbat/fix-3.10.0b4\n\nfix: correct the reported version for 3.10.0b4"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc42244ee515ce6a4abc3",
    "number": 2012,
    "body": "Released on Friday. I just copied the existing file and updated the URL and sha256 hash.\r\n\r\nTested on my machine and it installs and runs for me.",
    "head_branch": "pyston-2.3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2012 from dmrlawson/pyston-2.3\n\nAdd Pyston 2.3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc42344ee515ce6a4abc4",
    "number": 2007,
    "body": "WIP CFLAGS_EXTRA should now work for micropython. bats test currently not correct. Please see issue #2006 for details.",
    "head_branch": "fix_cflags_extra_passthrough",
    "is_a_fork": true,
    "comments": [
      "@native-api The fix you propose is not working.\r\n\r\nThe unittest for the function `build_package_micropython` now seemingly does the right thing, but only if the `CFLAGS_EXTRA` argument is passed (like I did in the test). With my `+=` version, that was indeed the correct test, but with your new version, it is no longer. That is because the program itself doesn't get `CFLAGS_EXTRA` passed, but `MAKE_OPTS`, which is a string containing the new `CFLAGS_EXTRA` definition. So we would need to operate that out of `MAKE_OPTS` to make your code work, which is what I wanted to avoid with my `+=` \"hack\".\r\n\r\nThe `+=` syntax is definitely correct syntax _within_ a Makefile, and although the GNU Make docs don't mention it, it seems to also work on the command line for overriding variables. I have also tested this. Do you have docs that state it is not legal syntax on the command line?\r\n\r\nBut now I see how `stub` is meant to work, thanks :)",
      "I made the code prepend stuff rather than append it so that user's input take priority in case of conflicts (I didn't check if the code assumes this chunk to prevail later on though; if it does, the chunk should indeed be appended).\r\n\r\n\r\n\r\n> Do you have docs that state it is not legal syntax on the command line?\r\n\r\nI checked [GNU Make command line docs](https://www.gnu.org/software/make/manual/html_node/Overriding.html#Overriding) which only mention `=` and `:=`/`::=` as valid syntax. Even if it works, using undocumented syntax is risky without additional guarantees 'cuz it can break unpredictably and you don't know the details of how it's supposed to work (so if it breaks, you don't know what to do and who's at fault).",
      "Any progress on this? That is, if you wish to see it merged, of course."
    ],
    "commit_messages": [
      "Pass through CFLAGS_EXTRA for Micropython (#2007)\n\nCo-authored-by: Ivan Pozdeev <vano@mail.mipt.ru>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc42444ee515ce6a4abc5",
    "number": 2005,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "3.10.0b4",
    "is_a_fork": true,
    "comments": [
      "Small note: this PR doesn't bump the package name [here](https://github.com/pyenv/pyenv/pull/2005/files#diff-7b0d1af633a3975c54930597ce77df80c91a51d617e9de881b0b7392d4492c91R7-R9), which produces some slightly confusing build output:\r\n\r\n```\r\n$ pyenv install 3.10.0b4 \r\nDownloading Python-3.10.0b3.tar.xz...\r\n-> https://www.python.org/ftp/python/3.10.0/Python-3.10.0b4.tar.xz\r\nInstalling Python-3.10.0b3...\r\nInstalled Python-3.10.0b3 to /home/snoopjedi/.pyenv/versions/3.10.0b4\r\n```\r\n\r\nThe version installed and its name are correct, however, so I think it's a strictly superficial bug.",
      "Oops! Fix is in https://github.com/pyenv/pyenv/pull/2013",
      "Merged :)"
    ],
    "commit_messages": [
      "Merge pull request #2005 from nedbat/3.10.0b4\n\n3.10.0b4"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc42544ee515ce6a4abc6",
    "number": 2003,
    "body": "### This is not necessarily a typo in the docs, it needs reviewing by a maintainer to ensure my problem is not specific to my installation\r\n\r\nI think there is a mistake in the doc. Not sure why but the install path wasn't correct in my machine (macOS, installed with home-brew). This line is repeated for every possible install platform and it might be needed to update them as well. \r\n\r\n```bash\r\nbefore:\r\n            echo 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.zprofile\r\nafter:\r\n            echo 'export PATH=\"$PYENV_ROOT/shims:$PATH\"' >> ~/.zprofile\r\n```",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "`/bin` is correct, does your shell run `pyenv init` to set things up as described in the README?",
      "Yes I did everything as described in the docs, I don't have anything in /bin. Everything is inside /shims.",
      "You don't need to add `$PYENV_ROOT/bin` to `PATH` if Pyenv is installed with Homebrew.\r\n\r\n`shims` is added to `PATH` with `eval \"$(pyenv init --path)\"` which should also be in your `~/.zprofile` as per the README.",
      "Ok, I find the documentation way too confusing on that part. Why not put this:\r\n\r\n### Homebrew on macOS\r\n\r\n```sh\r\n      brew update\r\n      brew install pyenv\r\n      export PATH=\"/Users/${USER}/.pyenv/shims:${PATH}\"\r\n```\r\n      \r\nInstead of this \r\n\r\n<details>\r\n<summary > Click to expand </summary>\r\n\r\n### Homebrew on macOS\r\n\r\n   1. Consider installing with [Homebrew](https://brew.sh):\r\n      ```sh\r\n      brew update\r\n      brew install pyenv\r\n      ```\r\n   2. Then follow the rest of the post-installation steps under [Basic GitHub Checkout](https://github.com/pyenv/pyenv#basic-github-checkout), starting with #2 (\"Configure your shell's environment for Pyenv\").\r\n\r\nIf you're on Windows, consider using @kirankotari's [`pyenv-win`](https://github.com/pyenv-win/pyenv-win) fork. (Pyenv does not work in Windows outside the Windows Subsystem for Linux.)\r\n\r\n### Basic GitHub Checkout\r\n\r\nThis will get you going with the latest version of Pyenv and make it\r\neasy to fork and contribute any changes back upstream.\r\n\r\n1. **Check out Pyenv where you want it installed.**\r\n   A good place to choose is `$HOME/.pyenv` (but you can install it somewhere else):\r\n\r\n        git clone https://github.com/pyenv/pyenv.git ~/.pyenv\r\n\r\n   Optionally, try to compile a dynamic Bash extension to speed up Pyenv. Don't\r\n   worry if it fails; Pyenv will still work normally:\r\n\r\n        cd ~/.pyenv && src/configure && make -C src\r\n\r\n2. **Configure your shell's environment for Pyenv**\r\n\r\n   **Note:** The below instructions for specific shells are designed for common shell setups.  \r\n   If you have an uncommon setup and they don't work for you,\r\n   use the guidance text and the [Advanced Configuration](#advanced-configuration)\r\n   section below to figure out what you need to do in your specific case.\r\n   \r\n   1. **Adjust the session-wide environment for your account.** Define\r\n   the `PYENV_ROOT` environment variable to point to the path where\r\n   you cloned the Pyenv repo, add the `pyenv` command-line utility to your `PATH`,\r\n   run the output of `pyenv init --path` to enable shims.\r\n   \r\n      These commands need to be added into your shell startup files in such a way\r\n      that _they are executed only once per session, by its login shell._\r\n      This typically means they need to be added into a per-user shell-specific\r\n      `~/.*profile` file, _and_ into `~/.profile`, too, so that they are also\r\n      run by GUI managers (which typically act as a `sh` login shell).\r\n\r\n      **MacOS note:** If you installed Pyenv with Homebrew, you don't need\r\n      to add the `PYENV_ROOT=` and `PATH=` lines.\r\n      You also don't need to add commands into `~/.profile` if your shell doesn't use it.\r\n   \r\n      - For **Bash**:\r\n\r\n         ~~~ bash\r\n         echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.profile\r\n         echo 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.profile\r\n         echo 'eval \"$(pyenv init --path)\"' >> ~/.profile\r\n         ~~~\r\n\r\n         - **If your `~/.profile` sources `~/.bashrc` (Debian, Ubuntu, Mint):**\r\n\r\n            Put these lines into `~/.profile` _before_ the part that sources `~/.bashrc`:\r\n            ~~~bash\r\n            export PYENV_ROOT=\"$HOME/.pyenv\"\r\n            export PATH=\"$PYENV_ROOT/bin:$PATH\"\r\n            ~~~\r\n            \r\n            And put this line at the _bottom_ of `~/.profile`:\r\n            ~~~bash\r\n            eval \"$(pyenv init --path)\"\r\n            ~~~\r\n\r\n            <!--This is an alternative option and needn't be replicated to `pyenv init`-->\r\n            Alternatively, for an automated installation, you can run the following:\r\n            ~~~ bash\r\n            echo -e 'if shopt -q login_shell; then' \\\r\n                  '\\n  export PYENV_ROOT=\"$HOME/.pyenv\"' \\\r\n                  '\\n  export PATH=\"$PYENV_ROOT/bin:$PATH\"' \\\r\n                  '\\n eval \"$(pyenv init --path)\"' \\\r\n                  '\\nfi' >> ~/.bashrc\r\n            echo -e 'if [ -z \"$BASH_VERSION\" ]; then'\\\r\n                  '\\n  export PYENV_ROOT=\"$HOME/.pyenv\"'\\\r\n                  '\\n  export PATH=\"$PYENV_ROOT/bin:$PATH\"'\\\r\n                  '\\n  eval \"$(pyenv init --path)\"'\\\r\n                  '\\nfi' >>~/.profile\r\n            ~~~\r\n\r\n         **Note:** If you have `~/.bash_profile`, make sure that it too executes the above-added commands,\r\n         e.g. by copying them there or by `source`'ing `~/.profile`.\r\n\r\n      - For **Zsh**:\r\n\r\n         - **MacOS, if Pyenv is installed with Homebrew:**\r\n\r\n            ~~~ zsh\r\n            echo 'eval \"$(pyenv init --path)\"' >> ~/.zprofile\r\n            ~~~\r\n         \r\n         - **MacOS, if Pyenv is installed with a Git checkout:**\r\n         \r\n            ~~~ zsh\r\n            echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.zprofile\r\n            echo 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.zprofile\r\n            echo 'eval \"$(pyenv init --path)\"' >> ~/.zprofile\r\n            ~~~\r\n\r\n         - **Other OSes:**\r\n         \r\n           Same as for Bash above, but add the commands into both `~/.profile`\r\n           and `~/.zprofile`.\r\n        \r\n      - For **Fish shell**:\r\n\r\n        Execute this interactively:\r\n        ~~~ fish\r\n        set -Ux PYENV_ROOT $HOME/.pyenv\r\n        set -U fish_user_paths $PYENV_ROOT/bin $fish_user_paths\r\n        ~~~\r\n\r\n        And add this to `~/.config/fish/config.fish`:\r\n        ~~~ fish\r\n        status is-interactive; and pyenv init --path | source\r\n        ~~~\r\n\r\n        If Fish is not your login shell, also follow the Bash/Zsh instructions to add to `~/.profile`.\r\n\r\n      **Proxy note**: If you use a proxy, export `http_proxy` and `https_proxy`, too.\r\n\r\n   2. **Add `pyenv` into your shell** by running the output of `pyenv init -`\r\n     to enable autocompletion and all subcommands.\r\n   \r\n      This command needs to run at startup of any interactive shell instance.\r\n      In an interactive login shell, it needs to run _after_ the commands\r\n      from the previous step.\r\n\r\n      - For **bash**:\r\n        ~~~ bash\r\n        echo 'eval \"$(pyenv init -)\"' >> ~/.bashrc\r\n        ~~~\r\n        \r\n        - **If your `/etc/profile` sources `~/.bashrc` (SUSE):**\r\n        \r\n          ~~~bash\r\n          echo 'if command -v pyenv >/dev/null; then eval \"$(pyenv init -)\"; fi' >> ~/.bashrc \r\n          ~~~\r\n\r\n      - For **Zsh**:\r\n        ~~~ zsh\r\n        echo 'eval \"$(pyenv init -)\"' >> ~/.zshrc\r\n        ~~~\r\n\r\n      - For **Fish shell**:\r\n        Add this to `~/.config/fish/config.fish`:\r\n        ~~~ fish\r\n        pyenv init - | source\r\n        ~~~\r\n\r\n      **General warning**: There are some systems where the `BASH_ENV` variable is configured\r\n      to point to `.bashrc`. On such systems you should almost certainly put the above-mentioned line\r\n      `eval \"$(pyenv init -)\"` into `.bash_profile`, and **not** into `.bashrc`. Otherwise you\r\n      may observe strange behaviour, such as `pyenv` getting into an infinite loop.\r\n      See [#264](https://github.com/pyenv/pyenv/issues/264) for details.\r\n\r\n4. **Restart your login session for the changes to take effect.**\r\n   E.g. if you're in a GUI session, you need to fully log out and log back in.\r\n   \r\n   In MacOS, restarting terminal windows is enough (because MacOS runs shells\r\n   in them as login shells by default).\r\n\r\n5. [**Install Python build dependencies**](https://github.com/pyenv/pyenv/wiki#suggested-build-environment) before attempting to install a new Python version.\r\n\r\n6. **Install Python versions into `$(pyenv root)/versions`.**\r\n   For example, to download and install Python 2.7.8, run:\r\n    ```sh\r\n    pyenv install 2.7.8\r\n    ```\r\n   **NOTE:** If you need to pass a `configure` option to a build, please use the\r\n   ```CONFIGURE_OPTS``` environment variable.\r\n\r\n   **NOTE:** If you want to use proxy to download, please set the `http_proxy` and `https_proxy`\r\n   environment variables.\r\n\r\n   **NOTE:** If you are having trouble installing a Python version,\r\n   please visit the wiki page about\r\n   [Common Build Problems](https://github.com/pyenv/pyenv/wiki/Common-build-problems).\r\n\r\n</details>\r\n\r\nIt is basically impossible for someone who reads the doc for Homebrew to know what should or should not be set."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc42544ee515ce6a4abc7",
    "number": 2001,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\n* In some cases (Ubuntu), `pyenv init -` has to be run before `pyenv init --path` (https://github.com/pyenv/pyenv/discussions/1974).\r\n* The warning has served its purpose by now.\r\n\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "remove_warning",
    "is_a_fork": true,
    "comments": [
      "> The warning has served its purpose by now.\r\n\r\nI can tell you it has not 😆 ",
      "[Maybe](https://github.com/pyenv/pyenv/issues/2010). But I couldn't figure out a way to silence it [in Ubuntu's case](https://github.com/pyenv/pyenv/discussions/1974) which is worse."
    ],
    "commit_messages": [
      "Remove PATH warning (#2001)\n\n* In some cases (Ubuntu), `pyenv init -` has to be run before `pyenv init --path`.\r\n* The warning has served its purpose by now."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc42644ee515ce6a4abc8",
    "number": 1996,
    "body": "https://pythoninsider.blogspot.com/2021/06/python-396-3811-3711-and-3614-are-now.html",
    "head_branch": "python-2021-06-28-releases",
    "is_a_fork": true,
    "comments": [
      "Hey there @native-api, any idea on when this will be released?",
      "That's something that @anton-petrov can answer.\r\n\r\nActually, Anton, could you write some kind of maintenance document so that others can do releases, too, if needed, in a consistent manner?",
      "[Release 2.0.3](https://github.com/pyenv/pyenv/releases/tag/v2.0.3)\r\n\r\n"
    ],
    "commit_messages": [
      "Add Python 3.6.14, 3.7.11, 3.8.11, and 3.9.6 (#1996)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc42744ee515ce6a4abc9",
    "number": 1993,
    "body": "This is just adding the latest Python v3.8 release.",
    "head_branch": "add-cpython-3.8.11",
    "is_a_fork": true,
    "comments": [
      "Duplicate of https://github.com/pyenv/pyenv/pull/1996"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc42844ee515ce6a4abca",
    "number": 1992,
    "body": "Miniforge minor update to 4.10.1-5, including mambaforge version.\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1992 from anton-petrov/master\n\nMiniforge minor update to 4.10.1-5"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc42944ee515ce6a4abcb",
    "number": 1991,
    "body": "...rather than login mode.\r\n\r\nI couldn't get rid of the warning that `pyenv init -` no longer sets path until I did this. It looks like setting only on the login shell wasn't enough to hide the warning in other shells I opened. This fits with [how rbenv does the same thing](https://github.com/rbenv/rbenv/blob/master/libexec/rbenv-init#L74).\r\n\r\nI'm way out of my depth here, so someone who knows about shell types should definitely review this.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1991 from hughrawlinson/patch-1\n\nSuggest that fish users init in interactive mode"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc42944ee515ce6a4abcc",
    "number": 1988,
    "body": "This simply copies and updates the 3.10.0b2 recipe.\r\n\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add 3.10.0b3 (#1988)\n\n* Add 3.10.0b3\r\n\r\nCo-authored-by: Ivan Pozdeev <vano@mail.mipt.ru>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc42a44ee515ce6a4abcd",
    "number": 1987,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/1813\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\nI found the last working version is v1.2.22. \r\nhere is compare: https://github.com/pyenv/pyenv/compare/v1.2.22..v2.0.1\r\nPlease note the differences in these files:\r\n- [libexec/pyenv](https://github.com/pyenv/pyenv/compare/v1.2.22..v2.0.1#diff-6e0affde5e4632aed5256a2023513fafbd3ea40461aa43b5c25e9b5fbd162fd9L64-L81)\r\n- [libexec/pyenv-rehash](https://github.com/pyenv/pyenv/compare/v1.2.22..v2.0.1#diff-d3c2d85854e3a3d7b26f048786b17e8a94e775cf7b58f3a11caab9817fedaa29L70-L82)\r\n\r\n### Tests\r\n\r\ntest-pyenv.py\r\n```python\r\n#!/usr/bin/env python\r\n\r\nimport sys\r\n\r\nprint(\"script:\", __file__)\r\n\r\nprint(\"Python version\")\r\nprint (sys.version)\r\n\r\nprint(\"Version info.\")\r\nprint (sys.version_info)\r\n```\r\n\r\ntest script (fish)\r\n```fish\r\nfor ver in system 3.6.13 3.7.10 3.8.10 3.9.5\r\n  echo \"##### $ver #####\"\r\n  mkdir -p $ver\r\n  cp test-pyenv.py $ver\r\n  pushd $ver\r\n  pyenv local $ver\r\n  popd\r\n  # run script out of directory\r\n  $ver/test-pyenv.py\r\nend\r\n```\r\n\r\nResult:\r\n```\r\n##### system #####\r\n('script:', 'system/test-pyenv.py')\r\nPython version\r\n2.7.16 (default, May  8 2021, 11:48:02)\r\n[GCC Apple LLVM 12.0.5 (clang-1205.0.19.59.6) [+internal-os, ptrauth-isa=deploy\r\nVersion info.\r\nsys.version_info(major=2, minor=7, micro=16, releaselevel='final', serial=0)\r\n##### 3.6.13 #####\r\nscript: 3.6.13/test-pyenv.py\r\nPython version\r\n3.6.13 (default, Jun 18 2021, 12:05:19)\r\n[GCC Apple LLVM 12.0.5 (clang-1205.0.22.9)]\r\nVersion info.\r\nsys.version_info(major=3, minor=6, micro=13, releaselevel='final', serial=0)\r\n##### 3.7.10 #####\r\nscript: 3.7.10/test-pyenv.py\r\nPython version\r\n3.7.10 (default, Jun 18 2021, 17:34:04)\r\n[Clang 12.0.5 (clang-1205.0.22.9)]\r\nVersion info.\r\nsys.version_info(major=3, minor=7, micro=10, releaselevel='final', serial=0)\r\n##### 3.8.10 #####\r\nscript: 3.8.10/test-pyenv.py\r\nPython version\r\n3.8.10 (default, Jun 18 2021, 17:28:52)\r\n[Clang 12.0.5 (clang-1205.0.22.9)]\r\nVersion info.\r\nsys.version_info(major=3, minor=8, micro=10, releaselevel='final', serial=0)\r\n##### 3.9.5 #####\r\nscript: /Users/kzhang/Documents/workspaces/MyWorkspace/pyenv-tests/3.9.5/test-pyenv.py\r\nPython version\r\n3.9.5 (default, Jun 18 2021, 11:18:55)\r\n[Clang 12.0.5 (clang-1205.0.22.9)]\r\nVersion info.\r\nsys.version_info(major=3, minor=9, micro=5, releaselevel='final', serial=0)\r\n```",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "I was also troubled by the problem for a long time. \r\nThe PR address the problem and just restore the old working way. Now it worked well.",
      "We cannot accept this as it is. This feature has caused real problems for real users as outlined in the linked ticket which were impossible to fix without removing it.\r\nYou'll have to figure out some way to address both your needs and the needs of the users whose use case was broken by the feature if you want it to be reintroduced.\r\n\r\nAn alternative way to run select scripts with a specified Python version is to use a plugin that would create a configurable set of \"static shims\", https://github.com/pyenv/pyenv/issues/1918#issuecomment-842261656",
      "As per https://unix.stackexchange.com/questions/656859/detect-if-a-script-is-being-run-via-shebang-or-was-specified-as-a-command-line-a/656866#656866 , it is possible (albeit hard) to distinguish `path/to/script.py` vs `python path/to/script.py` -- but only in Linux, no-one could provide a way for MacOS.\r\n\r\nSo my best idea is to use an external indicator of whether to use the scripts's directory -- either an envvar that's off by default, or some indicator in `.python-version`."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc42b44ee515ce6a4abce",
    "number": 1984,
    "body": "Reverts pyenv/pyenv#1907\r\n\r\nReopens https://github.com/pyenv/pyenv/issues/919\r\n\r\nCloses https://github.com/pyenv/pyenv/issues/1975\r\n\r\n---\r\n\r\nI misread https://github.com/pyenv/pyenv/blob/1706436faeaf1aa439cf4ef5852707c8388f5155/plugins/python-build/bin/pyenv-install#L114, I thought it falls back to help when no arguments are given. It does not. So `pyenv install` does still trigger the inferring logic when no arguments are given (and @anton-petrov who merged #1907 was none the wiser, too :frowning_face: ).",
    "head_branch": "revert-1907-install_no_blank",
    "is_a_fork": false,
    "comments": [
      "Its so sad... that's for sure, especially when  maintaining code that wasn't written by you. \n@native-api Measure twice and cut once 😉",
      "> \r\n> \r\n> Its so sad... that's for sure, especially when maintaining code that wasn't written by you.\r\n> @native-api Measure twice and cut once wink\r\n\r\nI kinda expected you would review the code before merging it... that's what code review is for and that's why I create PRs... since I'm not infallible.\r\nAnyway, hope this serves as a useful lesson for us both. 😐",
      "@native-api: thank you! :shipit: "
    ],
    "commit_messages": [
      "Merge pull request #1984 from pyenv/revert-1907-install_no_blank\n\nRevert \"Drop inferring version to install from `pyenv local`\""
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc42c44ee515ce6a4abcf",
    "number": 1981,
    "body": "### Prerequisite\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\n* [x] My PR addresses the following pyenv issue (if any)\n  - Closes https://github.com/pyenv/pyenv/issues/1980\n\n### Description\n- [x] Here are some details about my PR\n\nThis PR adds a step at the end of pyenv-rehash to update mtimes of shims, where appropriate:\n\n1. List the full paths of all executables under `$PYENV_ROOT/versions/*/bin`.\n2. For each of these executables:\n3. Determine the full path of the corresponding shim (`$PYENV_ROOT/shims/$basename`)\n4. If the executable is newer than the shim, copy its timestamp to the shim.\n\nStep 4 uses bash's builtin `test -nt` to compare mtimes, and `touch -r` to copy the mtime. Note that `touch -r` is specified by POSIX. I have explicitly checked support for `touch -r` on Linux (GNU coreutils), FreeBSD, and MacOS.\n\n### Tests\n- [x] My PR adds the following unit tests (if any)\n  - Add test that rehash updates mtime\n",
    "head_branch": "touch-shims-on-rehash",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc42d44ee515ce6a4abd0",
    "number": 1979,
    "body": "PEP 394 now doesn't require `python` presence or specify what it is.\r\nTests that invoke it use Py3-specific code.\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "test_system_python3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use system Python3 for tests (#1979)\n\nPEP 394 now doesn't require `python` presence or specify what it is.\r\nTests that invoke it use Py3-specific code."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc42e44ee515ce6a4abd1",
    "number": 1978,
    "body": "Closes https://github.com/pyenv/pyenv/issues/1921\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "bash_shims_check",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Check for shims in path with pure Bash (#1978)\n\nCloses https://github.com/pyenv/pyenv/issues/1921"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc42e44ee515ce6a4abd2",
    "number": 1977,
    "body": "### Prerequisite\r\n* [n/a ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ n/a] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x ] My PR addresses the following pyenv issue (if any)\r\nhttps://github.com/pyenv/pyenv/discussions/1974#discussioncomment-839302\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nEdit setup instructions to avoid problem in ubuntu with shim not always being at front of `$PATH` if pip and other python packages installed in `~/.local/bin` (see link)\r\n\r\n\r\n### Tests\r\n- [n/a] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix instructions for Debian/Ubuntu to have shims ahead of ~/.local/bin (#1977)\n\nDebian/Ubuntu's stock `~/.bashrc` prepends `~/.local/bin` to `PATH` towards its end if it exists.\r\nExecutables for per-user modules for system Python are installed into `~/.local/bin` --\r\nso need to prepend `shims` to `PATH` later that that.\r\n\r\nCo-authored-by: Ivan Pozdeev <vano@mail.mipt.ru>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc42f44ee515ce6a4abd3",
    "number": 1971,
    "body": "### Description\r\n- [x] Added Mambaforge support\r\n\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1971 from anton-petrov/master\n\nCreate mambaforge-4.10.1-4"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc43044ee515ce6a4abd4",
    "number": 1966,
    "body": "### Description\r\n\r\nAdds Python 3.10.0-beta2 build recipe\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add 3.10.0b2 (#1966)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc43144ee515ce6a4abd5",
    "number": 1965,
    "body": "Change `done` to `fi` since otherwise Bash emits an unexpected token error:\r\n\r\n```\r\nbash: /home/foo/.bashrc: line 120: syntax error near unexpected token `done'\r\nbash: /home/foo/.bashrc: line 120: `if command -v pyenv >/dev/null; then eval \"$(pyenv init -)\"; done'\r\n```\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix .bashrc `echo` install syntax error (#1965)\n\nChange `done` to `fi` since otherwise Bash emits an unexpected token error:\r\n\r\n```\r\nbash: /home/foo/.bashrc: line 120: syntax error near unexpected token `done'\r\nbash: /home/foo/.bashrc: line 120: `if command -v pyenv >/dev/null; then eval \"$(pyenv init -)\"; done'\r\n```"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc43244ee515ce6a4abd6",
    "number": 1964,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes #1947\r\n  - Closes #1948\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1964 from native-api/master\n\nAdd explicit Zsh instructions for MacOS"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc43344ee515ce6a4abd7",
    "number": 1963,
    "body": "As discussed in [this pullrequest](https://github.com/pyenv/pyenv/pull/1960), pyenv can't correctly identify what shell it is running on windows 10, since the `ps -o` option is missing there.\r\n\r\nThis fix uses `awk` instead of the `-o` option. We could also check if the `-o` option worked (check if `$shell` is empty before using awk fallback), if you would want that instead of the current version, just tell me :)",
    "head_branch": "windows_10_recognize_shell",
    "is_a_fork": true,
    "comments": [
      "> If you can figure out a reliable way to work with ps without -o, I can accept a PR -- but you're very likely to see breakages elsewhere.\r\n\r\nSounds like the fallback option would be better"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc43344ee515ce6a4abd8",
    "number": 1962,
    "body": "As discussed in [this pullrequest](https://github.com/pyenv/pyenv/pull/1960), pyenv can't correctly identify what shell it is running on windows 10, since the `ps -o` option is missing there.\r\n\r\nThis fix uses `awk` instead of the `-o` option. We could also check if the `-o` option worked (check if `$shell` is empty before using awk fallback), if you would want that instead of the current version, just tell me :)",
    "head_branch": "windows_10_recognize_shell",
    "is_a_fork": true,
    "comments": [
      "ah dang another commit sneaked in. let me fix the pr quickly"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc43444ee515ce6a4abd9",
    "number": 1960,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n  **considered, but not applicable**\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project. (**not applicable**)\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - None - Thought it would be faster to just do the PR instead of mentioning the issue first\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nTried to follow the setup instructions using fish, didn't work, so I went through the init script and noticed that with the parameter1 set to the shell in use, it used the fish commands instead of bash. That made it work. So I'm adjusting the README.md to make it easier for other fish users to get up and running with pyenv\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n**none**",
    "head_branch": "readme_fish_guide_fix",
    "is_a_fork": true,
    "comments": [
      "`pyenv init --path` autodetects the shell that started it and produces the appropriate shell commands. So the proposed change looks redundant -- and also exposes an internal interface (the optional `<shell>` argument) which we'd rather not include into official documentation so that we can change it freely.\r\n\r\nDid autodetection fail for you somehow?",
      "I guess it did. Let me check some things and get back to you. My guess is omf pyenv might have put functions somewhere that weren't removed when I uninstalled it. So it does make sense to file a bug issue before doing a report I guess. If it's the auto detect that failed. I'll try to find out why and make a new PR for that.",
      "**This is just an update post, no action needs to be taken. This PR will be linked to a bug issue I will create later. Not sure if today though**\r\n\r\n```\r\n ~ $ status is-login; and pyenv init --path | source\r\n- (line 1): Variables cannot be bracketed. In fish, please use \"$PATH\".\r\nexport PATH=\"/c/Users/rjwes/.pyenv/shims:${PATH}\"\r\n                                          ^\r\nfrom sourcing file -\r\nsource: Error while reading file '<stdin>'\r\n ✘  ~ $ type -a pyenv\r\npyenv is /c/Users/rjwes/.pyenv/libexec/pyenv\r\n ~ $\r\n ```\r\n \r\n there was indeed a function defined in .pyenv/libexec/pyenv.init that fish sourced before. Didn't change anything though.\r\n So pyenv seems to not recognize that im running fish shell. I'll try to reproduce it.\r\n",
      "Autodetection checks the name of the parent process: https://github.com/pyenv/pyenv/blob/e2125b27501888d4163aa526fbbc69c0c7de5082/libexec/pyenv-init#L42-L47\r\n\r\nLooks like you're running Fish under a different name.",
      "seems like my ps doesn't have an -o option.\r\n\r\nDoesn't seem a pyenv bug, but a windows one according to [this slightly unrelated site](https://github.com/rvm/rvm/issues/4354)\r\n\r\nThere seem to be other options than using the `-o` option to extract the information.\r\n\r\n@native-api: Would you accept a pr that changes this so that -o isn't needed or would you just wait for microsoft to fix their error? :)\r\n\r\n\r\n\r\n![mintty_ENhtqdk0Zb](https://user-images.githubusercontent.com/29196542/120385893-42196200-c328-11eb-98d4-345ccf9880e8.png)\r\n\r\n![mintty_I7cq6rwPzf](https://user-images.githubusercontent.com/29196542/120386329-c9ff6c00-c328-11eb-99d0-9f5e7e57b9fd.png)",
      "> @native-api: Would you accept a pr that changes this so that -o isn't needed or would you just wait for microsoft to fix their error? :)\r\n\r\nFrom your screenshots, this seems to be a limitation of Cygwin/MinGW rather than Windows.\r\nWe don't officially support Windows, see https://github.com/pyenv/pyenv#homebrew-on-macos.\r\n\r\nIf you can figure out a reliable way to work with `ps` without `-o`, I can accept a PR -- but you're very likely to see breakages elsewhere."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc43544ee515ce6a4abda",
    "number": 1957,
    "body": "Needed to find other Python deps (e.g. libintl) in Homebrew if it has\r\nnonstandard prefix (e.g. Apple ARM64)\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/1877\r\n  - Closes https://github.com/pyenv/pyenv/issues/2039\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nApple M1 install Homebrew into `/opt/homebrew`.\r\nIf x64 Homebrew is installed as well, ARM64 Python build looks there for libs fisrt and tries to link with those for the other architecture, resulting in error.\r\nAppend paths so as not to override any user-supplied paths.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n\r\nFor added logic",
    "head_branch": "homebrew_custom_prefix",
    "is_a_fork": true,
    "comments": [
      "I'm getting \"`unstub <cmd>` failed\" errors and there's no info to debug them; the bats version in the codebase also cannot do debug printing (to fd 3).\r\n\r\nLooks like I'll have to refirbish the test framework before I'm able to progress with this."
    ],
    "commit_messages": [
      "Append Homebrew custom prefix to search path (#1957)\n\nThis is needed to find other Python deps (e.g. libintl) in Homebrew if it has\r\nnonstandard prefix (e.g. in Apple M1)\r\n\r\n* Re-allow to search Homebrew for zlib everywhere"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc43644ee515ce6a4abdb",
    "number": 1955,
    "body": "The default pyston build do not have pip installed by default. This change just add `get_pip` function to have pip installed.\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1955 from aisk/patch-1\n\ninstall pip with pyston"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc43744ee515ce6a4abdc",
    "number": 1950,
    "body": "Based on https://github.com/pyenv/pyenv/pull/1873\r\n\r\nPlease let me know if I've missed anything",
    "head_branch": "pypy3.7-7.3.5",
    "is_a_fork": true,
    "comments": [
      "> \r\n> \r\n> Could you add the source version, too?\r\n\r\nAnd a source-based version for pypy3.7-7.3.4 as well since that was missed in the PR you linked.",
      "Sure, will do"
    ],
    "commit_messages": [
      "Merge pull request #1950 from dmrlawson/pypy3.7-7.3.5\n\nAdd pypy3.7-7.3.5, pypy3.7-7.3.4-src, pypy3.7-7.3.5-src"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc43744ee515ce6a4abdd",
    "number": 1939,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "feat/micropython-1.15",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add micropython 1.15 (#1939)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc43844ee515ce6a4abde",
    "number": 1937,
    "body": "Fixed checksum for macos package\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Fixed checksum for macOS package\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1937 from anton-petrov/master\n\nUpdate anaconda3-2021.05 - fixed checksum for macOS package"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc43944ee515ce6a4abdf",
    "number": 1936,
    "body": "### Description\r\n\r\nWhen called, some hooks (e.g., pyenv-virtualenv) assume that `PYENV_COMMAND_PATH` contains a path ending with a command name (`PYENV_COMMAND`) and uses it to construct a command path to test for existence and executable bit. In cases where the assumption is broken, such a hook may set a directory to `PYENV_COMMAND_PATH`. Since the executable state of path in `PYENV_COMMAND_PATH` is done via `-x` (and not `-f` additionally), `pyenv-which` sometimes returns a path to directory and not to a command. \r\n\r\nThe proposed patch avoid this issue by setting `PYENV_COMMAND_PATH` to `PYENV_COMMAND` when it is empty. However, this cannot be set as default since we want to avoid `PYENV_COMMAND_PATH` to point to a command in the current working directory.\r\n\r\n### Tests\r\n\r\nAll existing tests pass.\r\n",
    "head_branch": "ts/set-default-command-name",
    "is_a_fork": true,
    "comments": [
      "Could you demonstrate the problem? E.g. with a debug trace as per the issue template."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc43a44ee515ce6a4abe0",
    "number": 1935,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/1003\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nFound a way to redirect `/Applications` prefix to under our prefix without patching `/configure`\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "framework_prefix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1935 from native-api/framework_prefix\n\nPrevent build from installing MacOS apps globally"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc43b44ee515ce6a4abe1",
    "number": 1934,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n\r\nCan preserve the fn (that will now be unused) if that makes a difference.\r\n\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/732\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nEnsuring that all dirs in LDFLAGS exist is only needed for Ruby due to its `configure` requirements.\r\nIf some LDFLAGS entries point to a nonexisting path to which the user doesn't have permission. this causes a build failure.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n\r\nTested a few versions in Bionic to check that the build still works.",
    "head_branch": "no_ldflags_dirs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1934 from native-api/no_ldflags_dirs\n\nldflags_dirs is not needed for Python and causes failures"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc43b44ee515ce6a4abe2",
    "number": 1928,
    "body": "### Description\r\nAdded new version Miniforge3-4.10.1-1\r\n\r\n### Tests\r\n\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1928 from anton-petrov/master\n\nCreate miniforge3-4.10.1-1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc43c44ee515ce6a4abe3",
    "number": 1922,
    "body": "See https://github.com/native-api/pyenv/tree/bash_automated_option#basic-github-checkout for the rendered README\r\n(search that page for \"automated installation\" to quickly find the section).\r\n\r\n---\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/1914\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nAdds an optional way for Bash fit for an automated installation\r\n\r\nBased on https://github.com/pyenv/pyenv/pull/1920, needs to be merged after it\r\n\r\n### Tests\r\n- [N/A] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "bash_automated_option",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Bash automated install option (#1922)\n\nBash automated install option for the case when ~/.profile sources ~/.bashrc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc43d44ee515ce6a4abe4",
    "number": 1920,
    "body": "* See https://github.com/native-api/pyenv/tree/bash_zsh_instructions#basic-github-checkout for the rendered README\r\n* Clone https://github.com/native-api/pyenv/tree/bash_zsh_instructions and run `pyenv init [<shell>]` to see text instructions for `<shell>`:\r\n```\r\npushd \"$(pyenv root)\"\r\ngit remote add pr https://github.com/native-api/pyenv\r\ngit fetch pr\r\ngit status    # see what branch/tag/commit you're currently at\r\ngit checkout bash_zsh_instructions\r\n\r\npyenv init\r\n\r\n#undo the changes\r\ngit checkout <old branch/tag/commit from `git status` above>\r\ngit branch -D bash_zsh_instructions\r\ngit remote remove pr\r\npopd\r\n```\r\n\r\n---\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/1913\r\n  - Closes https://github.com/pyenv/pyenv/issues/1915\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nUpdated README and instructions for Bash and Zsh based on user feedback.\r\nGoing to ask for reviews before merging.\r\n\r\n### Tests\r\n- [N/A] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "bash_zsh_instructions",
    "is_a_fork": true,
    "comments": [
      "@native-api thanks for creating a PR to try and tackle this. \r\n\r\n### The Issue :bug: \r\nI feel that with all of this work on documenting exactly what to do for each shell, we're trying to solve the wrong problem; shell RC files are confusing, and not always consistent between shells and environments.\r\n\r\nAll of the issues that have been raised about this have stemmed from the fact that `pyenv` has several locations that need to end up in `PATH`, and users either don't know of all of them, or don't understand why they need to go in different RC files. This is not a criticism of these users; I have to reference what each shell does when I reply to these issues.\r\n\r\n### New Init API :nut_and_bolt: \r\nI think that we should consider dropping the shell-specific approach entirely, and instead `pyenv` should just expose two commands:\r\n```bash\r\npyenv init --path\r\n```\r\nand\r\n```bash\r\npyenv init --shell\r\n```\r\n\r\nThese are the two kinds of configuration that `pyenv` needs to set AFAICT. The `pyenv init --shell` command is an attempt to remove the visual precedence that `pyenv init -` has over `pyenv init --path`, and to make it clear that one is for shell functions, the other is for environment.\r\n\r\nMy rationale for dropping the per-shell documentation in `pyenv` itself is that it quickly explodes with the number of shells, OS default configurations (e.g. `.profile` sources `.bashrc` on Ubuntu), and login shells (e.g. I'm using GDM [which explicitly sources `~/.profile`](https://unix.stackexchange.com/a/360750) despite `SHELL=/usr/bin/zsh`). This gets *more* confusing if users have non-standard configuration files already in use.\r\n\r\nI think this would be easier to deal with through a wiki entry.\r\n\r\n### Old Init API :spider_web: \r\nOf course, this means that things will change for users. I don't know what the policy for API change is for this project, but if we don't want to break `pyenv init -` outright, then the safest approach is just to add a new `--shell` flag and retain the existing `pyenv init -` behaviour (but mark as deprecated). However, I would perhaps go further, and just make `pyenv init -` return `cat <(echo \"warning ...\") <(pyenv init --path) <(pyenv init --shell)`. This way, users who haven't modified their RC files will be notified of the upcoming deprecation, but will not be confused by breakages. \r\n\r\n### Shell-Specific Help :information_source: \r\nI still think that the shell-specific information is useful, but perhaps it doesn't belong in the tool. If we repurpose `pyenv init -` as an old-style (deprecated) configuration command, then we can add some information about what the new-style looks like, e.g.\r\n\r\n```bash\r\ncat <<- 'EOF' \r\nWarning, `pyenv init -` will no longer work in future releases of pyenv.\r\nTo avoid breakages when this occurs, please move to the new configuration mechanism.\r\n\r\nThe old `pyenv init -` command has been split into two new commands:\r\n`pyenv init --path` and `pyenv init --shell`. \r\n\r\nYou should remove the existing `pyenv init -` code, and instead \r\n1. Add `pyenv init --path` to your `~/.profile` (or equivalent) file\r\n2. Add `pyenv init --shell` to your `~/.bashrc` (or equivalent) file\r\n\r\nIn some cases you might find that this does not work. This is likely because shell configuration is hard! \r\nPlease visit .... for more information with shell-specific guidance.\r\nEOF\r\n\r\nsource pyenv init --path\r\nsource pyenv init --shell \r\n```\r\n\r\nWhat do you think? ",
      "No offense, but reading all the replies in #1915 to my initial request, it looks a bit as the thread got \"hijacked\" for \"_all-things-shell-issues_\" ;-)\r\nInitially, I reported an issue for \"bash\" shell. Here's what I did:\r\n\r\n1. I cloned #1920 to `/usr/src/pyenv` and cd'ed into it\r\n2. `src/configure && make -C src` (successfully)\r\n3. `export PYENV_ROOT=\"/usr/src/pyenv\"`\r\n4. `export PATH=\"${PYENV_ROOT}/bin:${PATH}\"`\r\n5. `which pyenv` (provides `/usr/src/pyenv/bin/pyenv`)\r\n6. Both, `pyenv init` and `pyenv init bash` provide:\r\n```\r\n# Load pyenv automatically by appending\r\n# the following to ~/.bash_profile:\r\n\r\neval \"$(pyenv init -)\"\r\n```\r\nNothing more; nothing about setting the `PATH` or anything; which seems wrong already, isn't it?\r\n\r\nAnyways: I removed everything pyenv related from my `.bashrc` and `.profile` already before running this. I started with 1:1 doing what `pyenv init` suggests, knowing this will fail without the PATH manipulation and - to very few surprises - it did:\r\n\r\n```\r\n-bash: pyenv: command not found\r\n```\r\n\r\nSo, I also added this before that line in `.bash_profile`, making it look like this:\r\n\r\n```\r\nroot@judgepi:~# cat .bash_profile\r\n#source ${HOME}/.bash_pyenv\r\nexport PYENV_ROOT=\"/usr/src/pyenv\"\r\nexport PATH=\"$PYENV_ROOT/bin:$PATH\"\r\neval \"$(pyenv init -)\"\r\n\r\nroot@judgepi:~#\r\n```\r\n\r\nActually, it looks like this did the trick! I can use pyenv and do no longer receive the WARNING when SSH'ing into it:\r\n\r\n```\r\n~ $ ssh pi /bin/true\r\n~ $ echo $?\r\n0\r\n~ $\r\n```",
      "PS: I like @agoose77 's idea! Debugging the global RC-landscape is out of scope for pyenv; at least \"core\". Supporting all shells and advice on them seems to be more related to sidekick-projects like [pyenv/pyenv-installer](https://github.com/pyenv/pyenv-installer).\r\nAs long as it is clear and transparent to the user what's the goal he/she has to take care about, I feel like pyenv's duty is done.",
      ">     1. I cloned #1920 to `/usr/src/pyenv` and cd'ed into it\r\n\r\nThis is wrong. You need to switch your installed Pyenv to it. This is why I gave the exact commands needed right at the top.",
      "> > ```\r\n> > 1. I cloned #1920 to `/usr/src/pyenv` and cd'ed into it\r\n> > ```\r\n> \r\n> This is wrong. You need to switch your installed Pyenv to it. This is why I gave the exact commands needed right at the top.\r\n\r\nI did by modifying the PATH to that new location - didn't I?",
      "> I did by modifying the PATH to that new location - didn't I?\r\n\r\nOh, sorry, I missed that part (I honestly thought that no-one would go for the trouble :-) ). Then it indeed should work.\r\n\r\nHow exactly did you \"clone #1920\"? I suspect that you didn't check out the right branch and ended up at `master` from my fork -- which is stale and unused.",
      "I'm wondering if `pyenv init --path` is even needed at all? the installation is already asking users to add `export PATH=\"$PYENV_ROOT/bin:$PATH`, why not just ask them to add `export PATH=\"$PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH\"` (or the equivalent in each shell) instead?\r\n\r\nI feel like the extra command to set the PATH is what's tripping people up as they think they need to replace the old command with that one. ",
      "> I'm wondering if `pyenv init --path` is even needed at all? the installation is already asking users to add `export PATH=\"$PYENV_ROOT/bin:$PATH`, why not just ask them to add `export PATH=\"$PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH\"` (or the equivalent in each shell) instead?\r\n\r\nThe idea is to make the configuration more future-proof. In the future, we may add/change steps in `--path` if something else needs to be done in the login shell.\r\n \r\n> I feel like the extra command to set the PATH is what's tripping people up as they think they need to replace the old command with that one.\r\n\r\nI think that it's rather the fact that I failed to include the `PYENV_ROOT` and `PATH=` steps into the `pyenv init` instructions _at all!_ (They were only included into the `pyenv-installer` postinstall message.) So the users who saw the warning didn't readily see that they need to _move_ these lines to `~/.profile`!\r\nThat was a blunder on my part.",
      "> ```\r\n> source pyenv init --path\r\n> source pyenv init --shell \r\n> ```\r\n> \r\n> What do you think?\r\n\r\n@agoose77 This solution would work great for all of the use cases in my world! Just my 2 cents.",
      "@agoose77 @julianfortune @The-Judge \r\n\r\n> I feel that with all of this work on documenting exactly what to do for each shell, we're trying to solve the wrong problem; shell RC files are confusing, and not always consistent between shells and environments.\r\n> <...>\r\n> My rationale for dropping the per-shell documentation in `pyenv` itself is that it quickly explodes with the number of shells, OS default configurations (e.g. `.profile` sources `.bashrc` on Ubuntu), and login shells (e.g. I'm using GDM [which explicitly sources `~/.profile`](https://unix.stackexchange.com/a/360750) despite `SHELL=/usr/bin/zsh`). This gets _more_ confusing if users have non-standard configuration files already in use.\r\n\r\n* Not including ready-to-use invocations **would erect a high barrier to entry.** Even if they _can_ (which is also not the case quite often), users don't _want_ to have to think and waste time on it, they assume that if this is a production-ready software product, someone has already done the thinking for them!\r\nAnd rightfully so: if they have a common configuration, there _must_ be someone who already thought of a good, turn-key solution for it, so there's absolutely no reason to reinvent the (square) wheel!\r\n* These \"documenting exactly what to do for each shell\" have been in the README for years and have been working fine so far.\r\n\r\n**I think we can get the best of both worlds here if we include _both_ an explanation of what the effect should be, _and_ the ready-to-use examples for _common_ setups.**\r\nThis is what I just did in the update to this PR -- go see if it's to your satisfaction! :wink: \r\n\r\n> I think that we should consider dropping the shell-specific approach entirely, and instead `pyenv` should just expose two commands:\r\n> \r\n> <..>\r\n> pyenv init --path\r\n> <...>\r\n> pyenv init --shell\r\n\r\nThis is exactly what the interface is now (just with keeping the the old name for \"`--shell`\", see below).\r\n\r\n> \r\n> These are the two kinds of configuration that `pyenv` needs to set AFAICT. The `pyenv init --shell` command is an attempt to remove the visual precedence that `pyenv init -` has over `pyenv init --path`, and to make it clear that one is for shell functions, the other is for environment.\r\n\r\nI thought about renaming `-` to `--rc` -- both when writing #1898 and now -- and ultimately decided against it.\r\n\r\nIt's true that it'll make things _marginally_ clearer. But the drawbacks are:\r\n\r\n* Should we force the users to rewrite their configurations _yet again,_ just after we've already frustrated them with this change and the broken and convoluted instructions?\r\n    * That'll be very bad PR for the project. If we ever do that, we should rather first let the userbase calm down and forget the incident.\r\n* Users don't deal with `pyenv init` _at all_ outside of the initial configuration step. So as long as it's clear what to put where, they don't really _care_ how these [incantations](http://www.catb.org/jargon/html/I/incantation.html) are spelled.\r\n    * So all the frustration and the extra work that we'll be forcing onto all our users would be for nothing, really.\r\n    * See also below for another reason why I _had_ to retain `-`. Concluding from it, the moment to rename it was during #1898, and now the opportunity is gone.\r\n\r\nSo my best idea for this -- if this is even worth doing, as per above -- is to introduce a new name as _an alias_ to `-`, and wait for a _long, long_ time before deprecating the original.\r\n \r\n> Of course, this means that things will change for users. I don't know what the policy for API change is for this project, but if we don't want to break `pyenv init -` outright <...>\r\n\r\nThe change was made to fix https://github.com/pyenv/pyenv/issues/1649. We _needed_ to make a breaking change to force the users to change their configurations -- otherwise, they would keep falling victim to https://github.com/pyenv/pyenv/issues/1649 and would keep reporting it. _And_ we needed to retain `-` so that we could use the existing shell configuration to prominently notify them about what they need to do.\r\n\r\n> Supporting all shells and advice on them seems to be more related to sidekick-projects like pyenv/pyenv-installer.\r\n\r\nActually, [`pyenv init` (without arguments) _is_ intended for Pyenv-installer](https://github.com/pyenv/pyenv-installer/blob/0a5ac813ba1ed660b201005f19be1e6a386d9ed5/bin/pyenv-installer#L61). Since the instructions are specific to Pyenv's version rather than Pyenv-Installer's, it's natuiral to keep them in Pyenv's codebase to avoid duplication.",
      "@native-api thanks for the clarification. I agree on all points; I'm not pushing for any breaking changes any time soon. \r\n\r\nI like the `--path` `--shell` flags because they make it explicit that this is a two-phase initialisation. I agree that this shouldn't *break* anything; it should just be an alias with a long-term deprecation policy. Given that we've now made public changes to the pyenv initialisation APIs, I also concur that `pyenv init -` needs to remain stable.",
      "The updated instructions seem pretty complete to me. The only issue I can see is for anyone using a shell framework like prezto or oh-my-zsh. They generally have some plugin for `pyenv` which may do some, or all, of the initialization. For example, [prezto](https://github.com/sorin-ionescu/prezto/blob/master/modules/python/init.zsh) runs `eval \"$(pyenv init - --no-rehash zsh)\"`, while [oh-my-zsh](https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/pyenv/pyenv.plugin.zsh) attempts to do it all.\r\n\r\nI imagine you don't need to go into detail about this, but maybe just a mention if you're using one of those frameworks you might only need the `PATH` changes (seems like that's all that would be needed for both of those frameworks).",
      "Thank you @aiguofer - even after following the changes mentioned, I was seeing issues. After seeing your comment on oh-my-zsh plugins I was able to resolve this by disabling the plugin.",
      "> For example, [prezto](https://github.com/sorin-ionescu/prezto/blob/master/modules/python/init.zsh) runs `eval \"$(pyenv init - --no-rehash zsh)\"`, while [oh-my-zsh](https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/pyenv/pyenv.plugin.zsh) attempts to do it all.\r\n\r\nThose projects will need to react to Pyenv changes.",
      "> I imagine you don't need to go into detail about this, but maybe just a mention if you're using one of those frameworks you might only need the `PATH` changes (seems like that's all that would be needed for both of those frameworks).\r\n\r\nI feel that it's rather the responsibility of those projects to inform their users which configuration steps they're saving them from.",
      "> > I imagine you don't need to go into detail about this, but maybe just a mention if you're using one of those frameworks you might only need the `PATH` changes (seems like that's all that would be needed for both of those frameworks).\r\n> \r\n> I feel that it's rather the responsibility of those projects to inform their users which configuration steps they're saving them from.\r\n\r\nYeah that makes sense... Maybe just a mention to check how their framework handles `pyenv` then. I feel like a lot of users might unfortunately not be aware that their framework might already be doing something and thus think it's an issue with `pyenv` itself."
    ],
    "commit_messages": [
      "Update install instructions for Bash and Zsh (#1920)\n\n* Update install instructions for Bash and Zsh\r\n\r\n* Synchronize README.md with `pyenv init`\r\n* Add a ~/.bash_profile note\r\n* Concatenate shims activation into installation for brevity\r\n  (Pyenv can't be used meaningfully without shims anyway)\r\n  Otherwise, we'd need to duplicate all the ~/.profile shenanigans in both sections\r\n* Update based on feedback\r\n* Proofread"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc43e44ee515ce6a4abe5",
    "number": 1919,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/1918\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\nif `PYENV_SHIM_VERSION_LOCK`\r\n1) not set or empty, generate 100% same shim\r\n2) set to y, shim will use same version as install.\r\n3) set to n, shim will record the version using while install.\r\n\r\n### Tests\r\n- [] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Now there is also a [pyenv-shim-version-lock](https://github.com/loynoir/pyenv-shim-version-lock).",
      "Static shim is design for outdated package cli.\r\n\r\nSo, switch version is designed to not work under any conditions.\r\n\r\nBut, yes, both implements lack of ability to show which shim is locked. 🙃\r\n\r\nAt last plugin implement fit my need.\r\n\r\n\r\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc43f44ee515ce6a4abe6",
    "number": 1916,
    "body": "### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [X] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n\r\nNot applicable, rbenv does not have these instructions to begin with.\r\n\r\n* [x]  My PR addresses the following pyenv issue (if any)\r\n  -  https://github.com/pyenv/pyenv/issues/1642 (as one part of it)\r\n\r\n### Description\r\n- [X] Here are some details about my PR\r\n\r\nThe instructions for fish are broken at the moment in numerous respects, they\r\n\r\n1. Recommended appending to a universal variable in config.fish, which\r\nwill baloon the variable and end up breaking the shell\r\n2. Recommended using ~/.profile for fish, which it does not use\r\n\r\nThis changes them to be in line with what I'd recommend. See also https://stackoverflow.com/questions/67473902/pyenv-no-longer-sets-paths-correctly-when-activating-virtual-environments/67476295#67476295 where this tripped someone up quite badly.\r\n\r\n\r\nFor easier reading, this is the message it ends up printing:\r\n\r\n```\r\n# Add pyenv executable to PATH by running\r\n# the following interactively:\r\n\r\nset -Ux PYENV_ROOT $HOME/.pyenv\r\nset -Ux fish_user_paths $PYENV_ROOT/bin $fish_user_paths\r\n\r\n# Load pyenv automatically by appending\r\n# the following to ~/.config/fish/config.fish:\r\n\r\npyenv init - | source\r\npyenv init --path | source\r\n```\r\n\r\nwhich, as far as I know, should be correct.\r\n\r\n### Tests\r\n- [N/A] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "fix-fish-instructions",
    "is_a_fork": true,
    "comments": [
      "I think there may be an issue with `pyenv init --path` in `fish`. If the understanding is that part of the code must be run only once and be persistent across restarts, it should output\r\n\r\n```\r\nset -Ux PATH $PYENV_ROOT/shims $PATH\r\n```\r\n\r\ninstead of\r\n\r\n```\r\nset -gx PATH $PYENV_ROOT/shims $PATH\r\n```\r\n\r\nAlso, is there a reason for it to use `$PATH` here instead of `fish_user_paths ` as for `$PYENV_ROOT/bin`?\r\n",
      ">You've lumped all the instructions together. Previously, the ones for adding it to PATH and installing it to the shell were separate\r\n\r\nFish doesn't have the .bashrc/.profile distinction. There is no other configuration file to add `pyenv init --path` to.\r\n\r\nInstead what you'd do is to check `status is-login` to only do something for login shells.",
      ">     You've lumped all the instructions together....\r\n> \r\n> Fish doesn't have the .bashrc/.profile distinction.\r\n\r\nWhat I meant is that the `pyenv init -` step was described in a separate section.\r\nMoving them all together resulted in much duplicated code.\r\n\r\nI reckon this was done because it's kinda-sorta optional -- and was probably designed in such a way to better convince users to try Pyenv out by providing a \"bare minimum impact on the system\" installation option.\r\nDoes anyone still treat it as such? Maybe it's time to bite the bullet and put them together for good?\r\n",
      ">What I meant is that the pyenv init - step was described in a separate section.\r\nMoving them all together resulted in much duplicated code.\r\n\r\nI'm not sure what duplicated code you're referring to?\r\n\r\n--------------\r\n\r\nAlso, just to head this off:\r\n\r\n> set -Ux PATH $PYENV_ROOT/shims $PATH\r\n\r\nA universal $PATH won't work. $PATH is inherited from the parent, and inherited variables take precedence over universal variables. That is why $fish_user_paths exists - its value is added to $PATH (in a deduplicated manner).",
      "> I'm not sure what duplicated code you're referring to?\r\n\r\nThe section headers.\r\n(Not so much, actually...)",
      "> The section headers.\r\n> (Not so much, actually...)\r\n\r\nOkay, scratch that.",
      "@faho Okay, now that you've addresed all of the concerns --\r\ncould you now synchronise the README with the changes -- and we're good to go?",
      ">Okay, now that you've addresed all of the concerns --\r\ncould you now synchronise the README with the changes\r\n\r\nI have now. Note that 91dcaf42cdc3e38b0cf7ea24fc7bf0d377380c63 also adds instructions for when fish isn't the login shell - this happens when people keep $SHELL as e.g. bash, because many operating systems insist on putting important configuration into /etc/profile and friends, and instead start fish via their terminal.\r\n\r\nIn that case they would have to follow the ~/.profile instructions *in addition to* the fish instructions (well, technically the path-setting could be skipped, but since it only applies to login shells already...).\r\n\r\nThere is also the option of not caring about loginshell-ness entirely and instead checking if the components are included. That's easy - `contains -- /path/to/wherever $PATH; or set PATH /path/to/wherever $PATH`. But it's a bigger change that might warrant a separate discussion/PR."
    ],
    "commit_messages": [
      "Fix fish installation instructions (#1916)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc44044ee515ce6a4abe7",
    "number": 1912,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/1911\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\n* Subj\r\n\r\nOur ~/.rc logic must run after the ~/.profile one\r\nIn some systems (many Linuxes), a stock ~/.profile sources ~/.bashrc at the beginning.\r\n(In MacOS, however, it doesn't, so we can't just move all the logic into ~/.bashrc.)\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "profile_sources_rc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1912 from native-api/profile_sources_rc\n\nAdd a hint for cases when ~/.profile sources ~/.rc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc44044ee515ce6a4abe8",
    "number": 1910,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/1909\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nThe migration hint proved to be unclear to users without full data including PATH and PYENV_ROOT entries.\r\n\r\n\r\n### Tests\r\n- [N/A] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "full_install_message",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1910 from native-api/full_install_message\n\nPlace full shell configuration instructions into `pyenv init`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc44144ee515ce6a4abe9",
    "number": 1908,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributiprefer ng the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/1743\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nIn certain cases, a user wants to know the cached filename to add the file themselves,\r\nsee https://github.com/pyenv/pyenv/issues/1743 .\r\nSince we report both a filename and a URL anyway, there's no reason to report a wrong one.\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "show_cache_filename",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1908 from native-api/show_cache_filename\n\nReport cache filename at download"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc44244ee515ce6a4abea",
    "number": 1907,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/919\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nhttps://github.com/pyenv/pyenv/issues/919#issuecomment-834835025\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "install_no_blank",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1907 from native-api/install_no_blank\n\nDrop inferring version to install from `pyenv local`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc44344ee515ce6a4abeb",
    "number": 1905,
    "body": "Only test the permission bit that we're setting\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [N/A] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/853\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nOnly check the bits that the test itself sets thus making user umask not affect the result\r\n\r\n### Tests\r\n- [N/A] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "umask",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1905 from native-api/umask\n\nMake test independent of umask"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc44444ee515ce6a4abec",
    "number": 1902,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/1744\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nSupport building with private OpenSSL for Apple ARM64 architecture which was introduced in MacOS 11.\r\nOpenSSL added support for Apple ARM in 1.1.1\r\n(https://github.com/openssl/openssl/commit/61168b5b8dde03f3b77ddf5e4b1b81c338c01746).\r\nPython added support for MacOS 11 in 3.7.8+, 3.8.4+, 3.9.0+\r\n(https://github.com/python/cpython/pull/21113 and backports).\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "openssl_osx_arm",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1902 from native-api/openssl_osx_arm\n\nBump OpenSSL to 1.1.1x for all Pythons that support MacOS 11"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc44544ee515ce6a4abed",
    "number": 1898,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/1649\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\n* Implements https://github.com/pyenv/pyenv/issues/1649#issuecomment-694388530 .\r\n* Adds a warning on shell startup if ~./profile` entry is not present -- to facilitate migration\r\n* (unrelated) fixes expanding `PATH` in one of test descriptions\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n\r\n* Test for the added warning",
    "head_branch": "startup_r1",
    "is_a_fork": true,
    "comments": [
      "@native-api , to reflect the changings which brings this PR, still need to synchronize that with [pyenv-installer](https://github.com/pyenv/pyenv-installer) before merging to master. Will you do a PR to pyenv-installer?",
      "https://github.com/pyenv/pyenv-installer/pull/109",
      "Since it is this pull request that changes the behavior of pyenv that has existed for years, it would make sense to explain here (even if again) why this change was necessary?\r\n\r\nCurrently, I ignore the existence of .profile and .bash_profile, and everything works fine for years (before this change) in .bashrc via pyenv installed by my walkthrough https://gist.github.com/luzfcb/1a7f64adf5d12c2d357d0b4319fe9dcd .\r\n\r\nIt would probably be good to inform the community of best practices and why to run\r\nthe new `eval \"$ (pyenv init --path)\"` on .bashrc/.zprofile can be a bad idea.\r\n\r\nAre all README instructions up to date?\r\n",
      "This pull-request and some related changes in other pull-requests change anything in the plugin load logic?\r\nI use pyenv-virtualenvwrapper and it works very well, but its code has not been touched by anyone for 4 years.\r\n\r\nhttps://github.com/pyenv/pyenv-virtualenvwrapper",
      ">  why this change was necessary?\r\n\r\n> [x] My PR addresses the following pyenv issue (if any)\r\n> \r\n>  * Closes #1649\r\n\r\n> Are all README instructions up to date?\r\n\r\nNo. https://github.com/pyenv/pyenv/pull/1920 fixes that.\r\n\r\n> This pull-request and some related changes in other pull-requests change anything in the plugin load logic?\r\n\r\nNot to my knowledge.\r\n\r\nHowever, the plugins that add their entries to `PATH` also suffer from a problem the same as #1649 and will need their startup logic split if that's to be fixed."
    ],
    "commit_messages": [
      "Merge pull request #1898 from native-api/startup_r1\n\nSplit startup logic into PATH and everything else"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc44544ee515ce6a4abee",
    "number": 1897,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n\r\nI believe there's been an error with how 3.10-dev was defined in this PR: https://github.com/pyenv/pyenv/pull/1896\r\n\r\nThere was recently a change where the master branch was renamed into main, but there was also a 3.10 branch created. It is my understanding that pyenv's `3.10-dev` version should be taken from this new `3.10` branch and that pyenv's `3.11-dev` version should be taken from the `main` branch.\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "3.1x-dev",
    "is_a_fork": true,
    "comments": [
      "This was all confirmed by the CPython 3.10 release manager: https://github.com/pyenv/pyenv/pull/1896\r\n\r\nWe should get this merged asap!\r\nping @joshfriend @anton-petrov "
    ],
    "commit_messages": [
      "Update 3.10-dev and 3.11-dev (#1897)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc44644ee515ce6a4abef",
    "number": 1896,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes #1893\r\n\r\n### Description\r\nCPython has renamed its `master` branch to `main`, this PR repoints the CPython 3.10-dev to the new target.\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "cpython-branch-change",
    "is_a_fork": true,
    "comments": [
      "Thank you! ❤️ ",
      "Hm, isn't the `main` branch of the cpython repo considered to be `3.11`, now that there's a `3.10` branch?\r\nSo if you want the latest and greatest of 3.10 you should use the [`3.10`](https://github.com/python/cpython/tree/3.10) branch?\r\n\r\nMaybe @pablogsal can chime in here to set us straight?",
      "> Hm, isn't the `main` branch of the cpython repo considered to be `3.11`, now that there's a `3.10` branch\n\nYeah, that's correct (is also on the README)\n\n\n> So if you want the latest and greatest of 3.10 you should use the [`3.10`](https://github.com/python/cpython/tree/3.10) branch?\n\nAlso correct. If you want the released 3.10, check out the v3.10.0b1 tag.\n\n> Maybe @pablogsal can chime in here to set us straight?\n\nAlways happy to help :)\n\n",
      "Uh oh, sorry! So this pattern should be moved to `3.11-dev`, with `3.10-dev` going to:\r\n\r\n```\r\ninstall_git \"Python-3.10-dev\" \"https://github.com/python/cpython\" \"3.10\" standard verify_py310 copy_python_gdb ensurepip\r\n```\r\n\r\nCorrect?",
      "@sco1 yes exactly 😃 \r\n\r\nIf I am correct, I've prepared a PR here: https://github.com/pyenv/pyenv/pull/1897\r\n\r\n~~Would be awesome to get an indication from @ambv or @pablogsal on this.~~\r\nAh, excellent, thank you @pablogsal !!",
      "@joshfriend ping ping ping! 📟 "
    ],
    "commit_messages": [
      "Fix CPython 3.10-dev target branch (#1896)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc44744ee515ce6a4abf0",
    "number": 1895,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n\r\nThis adds CPython 3.8.10\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "3.8.10",
    "is_a_fork": true,
    "comments": [
      "Duplicate of https://github.com/pyenv/pyenv/pull/1894"
    ],
    "commit_messages": [
      "Add CPython 3.8.10 (#1895)\n\nCo-authored-by: Josh Friend <josh@fueledbycaffeine.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc44844ee515ce6a4abf1",
    "number": 1894,
    "body": "### Description\r\nAdds CPython 3.8.10",
    "head_branch": "3.8.10",
    "is_a_fork": true,
    "comments": [
      "This PR is very complex. Please, make different PRs for every change. 3.8.10 merged.",
      "Thanks @a-feld! I incorporated your changes in the other PR that was just merged."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc44944ee515ce6a4abf2",
    "number": 1892,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nAdd CPython 3.9.5\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)",
    "head_branch": "cpython-3.9.5",
    "is_a_fork": true,
    "comments": [
      "Please resolve the conflicts.\r\n\r\nThe yaml changes ensure that our CI proves we can install the version that we are now supporting.  -- It is all one task."
    ],
    "commit_messages": [
      "Add CPython 3.9.5 (#1892)\n\nCo-authored-by: Josh Friend <josh@fueledbycaffeine.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc44a44ee515ce6a4abf3",
    "number": 1891,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n\r\nThis adds the Python 10.0.0b1 from python.org\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "3.10.0b1",
    "is_a_fork": true,
    "comments": [
      "I'm just waiting for the [official announcement](https://www.python.org/downloads/source/) before removing the draft status of this PR.",
      "It's official 🎉 \r\nhttps://www.python.org/downloads/release/python-3100b1/"
    ],
    "commit_messages": [
      "Merge pull request #1891 from fredrikaverpil/3.10.0b1\n\nAdd CPython 3.10.0b1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc44a44ee515ce6a4abf4",
    "number": 1882,
    "body": "Add a script to install GraalPython version 21.1.0 (released yesterday). Note there is still no support for aarch64 nor M1.\r\n\r\nCC @timfel",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1882 from msimacek/master\n\nAdd GraalPython 21.1.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc44b44ee515ce6a4abf5",
    "number": 1880,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR:\r\n\r\n**Add CPython 3.10.0a7 by replacing CPython 3.10.0a6.**\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1880 from Theelgirl/master\n\nAdd CPython 3.10.0a7"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc44c44ee515ce6a4abf6",
    "number": 1878,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Fixes #1716\r\n\r\n### Description\r\n\r\nThis changes the pyenv path used in the shim from `$(brew --prefix)/Cellar/pyenv/1.2.26/libexec/pyenv` to `$(brew --prefix)/opt/pyenv/bin/pyenv` which will not break when the version number changes.\r\n\r\n### Tests\r\n\r\nNone but maybe it should?",
    "head_branch": "brew-path",
    "is_a_fork": true,
    "comments": [
      "I'm guessing that this should go in rbenv. The code looks the same. I'm just confirming whether or not they have the same problem.",
      "Ok yeah so rbenv has the same problem:\r\n```\r\n❯ cat ~/.rbenv/shims/irb\r\n#!/usr/bin/env bash\r\nset -e\r\n[ -n \"$RBENV_DEBUG\" ] && set -x\r\n\r\nprogram=\"${0##*/}\"\r\nif [ \"$program\" = \"ruby\" ]; then\r\n  for arg; do\r\n    case \"$arg\" in\r\n    -e* | -- ) break ;;\r\n    */* )\r\n      if [ -f \"$arg\" ]; then\r\n        export RBENV_DIR=\"${arg%/*}\"\r\n        break\r\n      fi\r\n      ;;\r\n    esac\r\n  done\r\nfi\r\n\r\nexport RBENV_ROOT=\"/Users/jason/.rbenv\"\r\nexec \"/usr/local/Cellar/rbenv/1.1.2/libexec/rbenv\" exec \"$program\" \"$@\"\r\n```",
      "Upstream fix: https://github.com/rbenv/rbenv/pull/1325\r\n\r\nIt doesn't seem to have `pyenv.d/rehash/source.bash` though so I still think this PR is needed?",
      "Fixed in the homebrew formula instead: https://github.com/Homebrew/homebrew-core/pull/75715"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc44d44ee515ce6a4abf7",
    "number": 1875,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Sorry, but It's unsafe to disable certificate validation. Also, there are many many tests, that have failed."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc44e44ee515ce6a4abf8",
    "number": 1874,
    "body": "\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nAny whitespace doesn't work, need version per line.\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "docs/version-file-separator",
    "is_a_fork": true,
    "comments": [
      "Trivially conflicts with #1866, can rebase remaining one when we have one of them merged.",
      "@scop, #1866 merged",
      "Cool, rebased."
    ],
    "commit_messages": [
      "Merge pull request #1874 from scop/docs/version-file-separator\n\ndocs(README): fix info about version-file separator"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc44e44ee515ce6a4abf9",
    "number": 1873,
    "body": "Add support for pypy 7.3.4 python 3.7\r\nNow supports win 64\r\n\r\nDropped win32?\r\n",
    "head_branch": "pypy3.7.4",
    "is_a_fork": true,
    "comments": [
      "@anton-petrov do you mind reviewing this PR? `pypy3.7-7.3.4` is important because it's the first working version of pypy on macOS Big Sur. ",
      "Ok! Merged ^_^"
    ],
    "commit_messages": [
      "Merge pull request #1873 from dand-oss/pypy3.7.4\n\npypy3.7-7.3.4"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc44f44ee515ce6a4abfa",
    "number": 1868,
    "body": "Just bump Miniforge 3 version.\r\n\r\n### Description\r\n- [x] Added latest Miniforge-3-4.10\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1868 from anton-petrov/master\n\nCreate miniforge3-4.10"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc45044ee515ce6a4abfb",
    "number": 1866,
    "body": "\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nSometimes it is convenient to be able to temporarily disable something\r\nin a version-file. Because these files often aren't necessarily tracked\r\nin a SCM, especially when working with virtualenvs, the SCM diffs won't\r\nhelp with showing removed lines which are currently the only way to\r\ndisable something.\r\n\r\nNot applicable as a plugin.\r\n\r\nNot submitted/applicable to rbenv, because they don't support multiple envs in the first place.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n\r\ntest/version-file-read.bats, \"skips comment lines\"",
    "head_branch": "feat/python-version-comments",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1866 from scop/feat/python-version-comments\n\nfeat: support (skip) commented lines in version-file"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc45144ee515ce6a4abfc",
    "number": 1865,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - N/A\r\n  - \r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nAdds CPython 3.9.4 hotfix.\r\n\r\nSee: https://www.python.org/downloads/release/python-394/\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "3.9.4-hotfix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1865 from idwpan/3.9.4-hotfix\n\nadd CPython 3.9.4"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc45244ee515ce6a4abfd",
    "number": 1863,
    "body": "* bpo-43631: update to openssl 1.1.1k (#1861)\r\n* Add CPython 3.9.3 and 3.8.9 (#1859)\r\n* Add micropython 1.14 (#1858)\r\n* Shell detect improvements (#1835)\r\n* Test(init): remove misleading detect from parent shell case arg (#1856)\r\n* Add GraalPython 21.0.0 (#1855)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1863 from anton-petrov/master\n\nNew version 1.2.25"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc45344ee515ce6a4abfe",
    "number": 1861,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - N/A\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nAccording to the [Python 3.9.3 release notes](https://www.python.org/downloads/release/python-393/) and [bpo-43461](https://bugs.python.org/issue43631), several high CVE vulnerabilities were fixed in OpenSSL 1.1.1k, so this updates pyenv to pull the recommended library version.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "bpo-43631-openssl",
    "is_a_fork": true,
    "comments": [
      "Thanks!"
    ],
    "commit_messages": [
      "bpo-43631: update to openssl 1.1.1k (#1861)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc45344ee515ce6a4abff",
    "number": 1859,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - N/A\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nThis PR adds CPython 3.9.3. Bumps OpenSSL to `1.1.1j`.\r\n\r\nAlso adds CPython 3.8.9.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "add-cpython-3.9.3",
    "is_a_fork": true,
    "comments": [
      "Please merge this fast, these two are \"expedited security releases\", so it's important for users to upgrade ASAP.",
      "Unfortunately, 3.9.3 is recalled, and 3.9.4 is out today:\r\nhttps://pythoninsider.blogspot.com/2021/04/python-394-hotfix-is-now-available.html?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+PythonInsider+%28Python+Insider%29"
    ],
    "commit_messages": [
      "Add CPython 3.9.3 and 3.8.9 (#1859)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc45444ee515ce6a4ac00",
    "number": 1858,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "micropython-1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1858 from scop/micropython-1.14\n\nAdd micropython 1.14"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc45544ee515ce6a4ac01",
    "number": 1856,
    "body": "\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nThe generated script does not take/use any arguments, so passing\r\n/bin/zsh to it serves only to cause confusion.\r\n\r\nrbenv PR: https://github.com/rbenv/rbenv/pull/1320\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "test/misleading-parent-shell-arg",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1856 from scop/test/misleading-parent-shell-arg\n\ntest(init): remove misleading detect from parent shell case arg"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc45644ee515ce6a4ac02",
    "number": 1855,
    "body": "Add a script to install GraalPython version 21.0.0 (released in January)\r\n\r\nCC @timfel \r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Any support of Apple M1 or arm64 on Linux?",
      "No support yet in that version"
    ],
    "commit_messages": [
      "Merge pull request #1855 from msimacek/master\n\nAdd GraalPython 21.0.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc45744ee515ce6a4ac03",
    "number": 1844,
    "body": "The bootstrap.pypa.io URLs for pip installation changed.  The pip maintainers ask to use an upgraded URL.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "@anton-petrov care to review?"
    ],
    "commit_messages": [
      "Merge pull request #1844 from mateumann/master\n\nUpdate GET_PIP_URL"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc45744ee515ce6a4ac04",
    "number": 1839,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - N/A\r\n\r\n### Description\r\n- [x] Here are some details about my PR:\r\n\r\n**This PR replaces CPython 3.10.0a5 with 3.10.0a6.**\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1839 from Theelgirl/master\n\nAdd Python 3.10.0a6"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc45844ee515ce6a4ac05",
    "number": 1838,
    "body": "Make sure you have checked all steps below.\r\n\r\n```python\r\nimport os\r\nimport sys\r\n\r\nEXPECTED_PYTHON = ${{ matrix.python-version }}\r\n# Ensure that the actual Python is the expected Python.\r\nassert sys.version.startswith(os.getenv(\"EXPECTED_PYTHON\"))\r\n```\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\nThe goal of this PR was to ensure that `python` and `pip` are pointing to the pyenv installed versions.  That goal has been achieved in the current code.  Sorry for all the tweaking but the GitHub Actions code is touchy.  \r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Thanks to @Dinesh101041 for helping with the test that `actual Python == expected Python`.",
      "@anton-petrov Your review, please.",
      "Well done, @cclauss! "
    ],
    "commit_messages": [
      "Merge pull request #1838 from cclauss/patch-1\n\nGitHub Actions: Add $PYENV_ROOT/shims to $PATH"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc45944ee515ce6a4ac06",
    "number": 1835,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nCorresponding rbenv PR: https://github.com/rbenv/rbenv/pull/1311\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n\r\nN/A",
    "head_branch": "shell-detect-improvements",
    "is_a_fork": true,
    "comments": [
      "The Travis CI build failed. @scop Please, check what's wrong, or PR will be deleted. Thanks.",
      "I'll get to it soon, appreciated if you could keep it open meanwhile.",
      "Removed the misguided changes that were causing failures, should be good and trivial to go now."
    ],
    "commit_messages": [
      "Merge pull request #1835 from scop/shell-detect-improvements\n\nShell detect improvements"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc45a44ee515ce6a4ac07",
    "number": 1834,
    "body": "Update miniforge3-4.9.2 to the latest patch.\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n\r\n### Description\r\n- \r\n\r\n### Tests\r\n-\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1834 from anton-petrov/master\n\nUpdate miniforge3-4.9.2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc45b44ee515ce6a4ac08",
    "number": 1833,
    "body": "Added aarch64 for Linux in anaconda_architecture()\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1833 from anton-petrov/master\n\nAdded aarch64 for Linux in anaconda_architecture()"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc45c44ee515ce6a4ac09",
    "number": 1832,
    "body": "### Description\r\n- [X] Fix error link for Miniconda3-py37_4.9.2-MacOSX-x86_64\r\n- [X] Fix error link for Miniconda3-py38_4.9.2-MacOSX-x86_64\r\n\r\nThe link is incorrect but the hash is correct therefore cause checksum mismatched and unable to install these 2 versions.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix error link (#1832)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc45c44ee515ce6a4ac0a",
    "number": 1831,
    "body": "The main idea of this PR is to add the ability to install the latest version of python, using such syntax:\r\n\r\n`pyenv install 3.9:latest`\r\n`pyenv install 3.8:latest`\r\n`pyenv install 3:latest`\r\n`pyenv install pypy3.7-7.3:latest`\r\nand so on…\r\n\r\nAs for the `:` symbol, i relied on docker syntax as the most clear and used for its images versioning.\r\n\r\nAdded code from [yyuu comment](https://github.com/pyenv/pyenv/issues/602#issuecomment-219896567) as a starting point to be able to install the latest version.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/1349\r\n\r\n### Description\r\n- [x] Despite the recommendation to implement this as a plugin, it seems to me that this functionality should be int the pyenv repo, since it is requested by many users. Also it doesn't change the main logic of pyenv, nor other users workflows.\r\n\r\n### Tests\r\n- No tests.\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Thanks for this!\r\n\r\nI was hoping the _:latest_ suffix would also be supported in _.python-version_ files. Alas, setting \"3.9:latest\" in _.python-version_ results in:\r\n```\r\npyenv: version `3.9' is not installed (set by /Users/brechtm/Documents/Code/rinohtype/.python-version)\r\npyenv: version `latest' is not installed (set by /Users/brechtm/Documents/Code/rinohtype/.python-version)\r\n```\r\n\r\nJust wondering whether this is planned or perhaps already possible by means of other syntax.",
      "I've encountered a pair of issues when trying to use `:latest` on non-cpython as well (but in the basic \"install\" context):\r\n\r\n- `pypy:latest` gives me `pypy-stm-2.5.1` which is somewhat unexpected: it's a 6 years old version of the mostly-abandoned STM effort.\r\n- even going down as far as `pypy3.8:latest` (at which point that takes more effort than copying the version I want) it still does not find the semingly-current-latest `pypy3.8-7.3.7` and tries installing `pypy3.8-7.3.6`.\r\n\r\nAlso `:latest` might be a bit of an UB but it tries installing stackless-3.7.5. Maybe `:latest` alone should be special-cased and refuse resolving anything? Possibly try printing a few prefixes?"
    ],
    "commit_messages": [
      "Merge pull request #1831 from anton-petrov/master\n\nHook script to add latest suffix for install command"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc45d44ee515ce6a4ac0b",
    "number": 1830,
    "body": "The casing for `*_proxy` is currently inconsistent. I'm guessing that's a typo?\r\n\r\nThanks for maintaining this awesome tool!\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1830 from zdog234/patch-1\n\nclarify proxy variable names in readme?"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc45e44ee515ce6a4ac0c",
    "number": 1829,
    "body": "Added --nosystem argument to skip the system environment when searching for an executable.\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/1827\r\n\r\n### Description\r\n- In this [PR](https://github.com/pyenv/pyenv/pull/1797) a new feature was added : if pyenv doesn't find an executable for the current version/virtualenv, then this searches the \"system\" version as a fallback. But, in some use cases, it is required some mechanism for detecting if the current env provides a given executable. So, in that case, need to exclude system from search, to get relevant result - only commands, provided by pyenv.\r\n\r\n### Tests\r\n- No\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1829 from anton-petrov/master\n\nAdded --nosystem argument"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc45f44ee515ce6a4ac0d",
    "number": 1826,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "add-cpython-3.9.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1826 from gotche/add-cpython-3.9.2\n\nAdd CPython 3.9.2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc46044ee515ce6a4ac0e",
    "number": 1825,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1825 from gotche/master\n\nAdd CPython 3.8.8"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc46144ee515ce6a4ac0f",
    "number": 1818,
    "body": "Self explanatory.",
    "head_branch": "add-cpython-3.7.10",
    "is_a_fork": true,
    "comments": [
      "@anton-petrov bump"
    ],
    "commit_messages": [
      "Add CPython v3.7.10. (#1818)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc46144ee515ce6a4ac10",
    "number": 1817,
    "body": "Self explanatory.",
    "head_branch": "add-cpython-3.6.13",
    "is_a_fork": true,
    "comments": [
      "@anton-petrov bump"
    ],
    "commit_messages": [
      "Add CPython v3.6.13. (#1817)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc46244ee515ce6a4ac11",
    "number": 1815,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/1808\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nCurrent printing logic erroneously excluded Bash 3 when checking Bash version. OSX uses that version as of this writing.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n N/A",
    "head_branch": "fix_versions_bash3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1815 from native-api/fix_versions_bash3\n\nFix not printing asterisk for current version in Bash 3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc46344ee515ce6a4ac12",
    "number": 1814,
    "body": "### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * For Ruby and its usecases which are different than Python, the feature may be not breaking things so much. I involved the feature's author in the issue below.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/1813\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nDeletes the subj feature. This is one of the alternatives.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n N/A",
    "head_branch": "rm_script_dir",
    "is_a_fork": true,
    "comments": [
      "FAKE FEATURE, should have been removed, for years!\r\nThank you @native-api , it's almost the most beautiful PR I've met, although maybe no chance to be merged.\r\n\r\nAnyway, advice to pyenv users, as a pyenv user:\r\n* NEVER use `pyenv local` command.\r\n* Delete all `.python-version` files on your disk.\r\n* Use virtualenv if needed.",
      "Requires a common team solution to merge.",
      "@anton-petrov Could you close https://github.com/pyenv/pyenv/issues/1807 as well?\r\nThe magic word in https://github.com/pyenv/pyenv/issues/1813#issue-807820300 didn't work :("
    ],
    "commit_messages": [
      "Merge pull request #1814 from native-api/rm_script_dir\n\nRemove the \"Using script's directory as PYENV_DIR if shim is invoked with a script argument\" feature"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc46444ee515ce6a4ac13",
    "number": 1812,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [X] ~Please consider implementing the feature as a hook script or plugin as a first step.~\r\n* [X] ~Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.~\r\n* [X] ~My PR addresses the following pyenv issue (if any)~\r\n\r\nabove irrelevant as this PR simply adds to the existing version definitions\r\n\r\n### Description\r\n- [X] Here are some details about my PR\r\n\r\nbelow, after checklists\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n\r\n---\r\n\r\nAdds build file for `pypy3.7-c-jit-latest`. see  \r\nhttps://buildbot.pypy.org/nightly/py3.7/\r\n\r\nThis is based on the `pypy3.5-c-jit-latest` file, with modifications to match the architectures that are currently configured in the `pypy3.6-7.3.1` file. This build definition also uses **https** for buildbot.pypy.org URLs; existing pypy definitions were pointing to plain http: `http://buildbot.pypy.org`\r\n\r\nI put this together as I'm running into [this error that's been noted in upstream pypy](https://foss.heptapod.net/pypy/pypy/-/issues/3314) (see also [stackoverflow thread](https://stackoverflow.com/a/66058861)), which breaks `pip` entirely when using the latest pypy3 release versions on MacOS Big Sur. (`AttributeError: No symbol SCDynamicStoreCopyProxies found in library <None>`, etc etc)\r\n\r\nPer that [upstream pypy ticket](https://foss.heptapod.net/pypy/pypy/-/issues/3314), the fix has been merged into nightlies and is confirmed working (as of 5 days ago, Feb 6), but they have not yet pushed out a version release.\r\n\r\nI noticed that `pyenv` didn't yet have definitions for the pypy3.7 nightlies (containing that fix), so here we are.",
    "head_branch": "pypy-nightly-3.7",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add `pypy3.7-c-jit-latest`. use https for buildbot.pypy.org URLs. (#1812)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc46544ee515ce6a4ac14",
    "number": 1811,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Added python 3.10.0a5\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1811 from anton-petrov/master\n\nCreate 3.10.0a5"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc46544ee515ce6a4ac15",
    "number": 1810,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * https://github.com/rbenv/rbenv/pull/1307\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  N/A\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nCurrent PS4 gives incomplete information, making it hard to understand what's happening while tracing Pyenv's execution.\r\n\r\nThis PR fixes that by using PS4 value recommended by the Bash Hackers Wiki: https://wiki-dev.bash-hackers.org/scripting/debuggingtips#making_xtrace_more_useful\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\nN/A",
    "head_branch": "ps4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1810 from native-api/ps4\n\nUse a better PS4 as recommeneded by Bash Hackers Wiki"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc46644ee515ce6a4ac16",
    "number": 1809,
    "body": "### Description\r\n- [x] fix the error link (Miniconda3-py39_4.9.2-MacOSX-x86_64)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1809 from acethical/master\n\nFixed Miniconda 4.9.2 for MacOSX-x86_64"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc46744ee515ce6a4ac17",
    "number": 1806,
    "body": "fixes #1805\r\n\r\nMake sure you have checked all steps below.\r\n\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/1805\r\n\r\n### Description\r\n- [ ] Follows the existing pattern to enable `set -x`\r\n",
    "head_branch": "issue/1805",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1806 from earlchew/issue/1805\n\n[python-build] Support PYENV_DEBUG"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc46844ee515ce6a4ac18",
    "number": 1798,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nPOSIX sleep(1) doesn't provide subsecond precision, but many others do. I looked around (Ubuntu, FreeBSD, Solaris, BusyBox) and failed to find one that actually doesn't.\r\n\r\nDoesn't apply to rbenv, touches pyenv specific code.\r\n\r\nNot sure if 0.1 is the amount we want by default, open to changing it.\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\nN/A",
    "head_branch": "subsec-sleep",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1798 from scop/subsec-sleep\n\nrehash: try to sleep in 0.1 sec steps when acquiring lock"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc46944ee515ce6a4ac19",
    "number": 1797,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Resolves https://github.com/pyenv/pyenv/issues/1210\r\n\r\n### Description\r\n- [x] Here are some details about my PR:\r\n\r\nIf pyenv doesn't find an executable for the current version/virtualenv, then this searches the \"system\" version as a fallback. Here's a motivating use case:\r\n\r\n> **[Black](https://black.readthedocs.io/en/stable/installation_and_usage.html) case**\r\n> \r\n> I have several Black's installations:\r\n> \r\n>     1. global by `brew install black`\r\n> \r\n>     2. project-specific by `pip install black`\r\n> \r\n> \r\n> And if I try to run `black` out of projects directories, I see the error:\r\n> \r\n> ```shell\r\n> ~ black\r\n> pyenv: black: command not found\r\n> \r\n> The `black' command exists in these Python versions:\r\n>   3.6.3/envs/a\r\n>   3.6.3/envs/b\r\n>   3.6.5/envs/c\r\n>   3.7.0/envs/d\r\n>   3.7.0/envs/e\r\n>   3.7.0/envs/f\r\n>   3.7.0/envs/python-in-docker\r\n>   3.7.0/envs/g\r\n> ```\r\n> \r\n> I expect to see `black` running as it a system command. And this is not the same as #1204 that cares about the hierarchy of Python installations.\r\n> \r\n> This issue is about if a system command has the same name as one of `shims` commands have, then it won't be executed when it's not available in the current Python environment.\r\n> \r\n> Does it make sense?\r\n\r\n_Originally posted by @extsoft in https://github.com/pyenv/pyenv/issues/1210#issuecomment-562862901_\r\n\r\nThis behaviour looks similar to one of the features added in https://github.com/rbenv/rbenv/pull/1155, although I haven't gone through it properly. This is the reason why the second pre-requisite is marked.\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "search_system",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1797 from rharish101/search_system\n\nAdded fallback to system executable"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc46a44ee515ce6a4ac1a",
    "number": 1796,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1796 from anton-petrov/master\n\nAdd PyPy 3.6 versions 7.3.2 and 7.3.3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc46a44ee515ce6a4ac1b",
    "number": 1794,
    "body": "GitHub Action to install the following Python versions on Ubuntu 20.04 Focal Fosa.\r\n`python-version: [2.7.18, 3.5.10, 3.6.13, 3.7.10, 3.8.8, 3.9.2]`\r\n\r\nOutput: https://github.com/cclauss/pyenv/actions\r\n\r\nhttps://www.python.org/downloads and https://devguide.python.org/devcycle/#end-of-life-branches\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [
      "@anton-petrov This PR does what I hoped that it would do.",
      "So...  It installs the requested version of CPython but does not set `python` to point to it.",
      "@cclauss \r\nDo you think this PR is ready for review/merge, or work still in progress?",
      "It is ready to merge.  Thanks."
    ],
    "commit_messages": [
      "Merge pull request #1794 from cclauss/patch-3\n\nGitHub Action to build Python versions on Ubuntu"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc46b44ee515ce6a4ac1c",
    "number": 1793,
    "body": "The [usage of an f-string](https://github.com/pypa/pip/blob/master/src/pip/_internal/cli/main.py#L60) in `get-pip` breaks pyenv builds of Python 2.7, 3.4, and 3.5 until this PR (or similar) is landed and released.  Fix pyenv to continue to support these legacy Python builds despite the fact that `get-pip` has dropped support for Python 2.7 as discussed in pypa/pip#9520 --> pypa/get-pip#87.\r\n\r\nAlso, fix Python 3.4 and 3.5 which also do not support f-strings.\r\n\r\nhttps://bootstrap.pypa.io/\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1793 from cclauss/patch-2\n\nFix get-pip which dropped support for legacy Python"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc46c44ee515ce6a4ac1d",
    "number": 1792,
    "body": "I find pyenv extremely useful (thanks!), but I prefer not to use any automatic path mangling. Instead\r\n- I use pyenv to install the Python versions I need (and can't easily get from my distro)\r\n- I manually add a symlink to different Python versions into a folder on my PATH\r\n- I use these Python versions to create different virtualenvs\r\n\r\nI then use `workon` from virtualenvwrapper to switch virtualenvs.\r\n\r\nThis is a simple setup that I'd like to be able to recommend to other people easily. For that reason I think it is helpful to have a note like the one I'm adding in the docs - I can then just link to that section. People who prefer not to use the shims, like me, will then be able to benefit from pyenv like I do.\r\n\r\nThanks for your consideration.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1792 from spookylukey/patch-1\n\nREADME section on using pyenv without \"pyenv init\""
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc46d44ee515ce6a4ac1e",
    "number": 1790,
    "body": "add manpage for pyenv\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "> How would this be synchronized with the README.md and COMMANDS.md?\r\n\r\nthe one who changes them also changes manpage\r\n\r\n> How would this get compiled and get into MANPATH if the program is installed with `git clone`?\r\n\r\nthis doesnt need any compilation, its nroff and user can view with man -l /path/to/pyenv.1",
      "I'm not sure about having to maintain a duplicate instance of documentation.\r\nEspecially since it's doesn't directly correspond to any existing one (so have to decide by hand what does where each time), and cannot be used the standard way (`man pyenv`).\r\n\r\nIME the `--help` texts and `README.md` have been sufficient.\r\n\r\nMaintainers, any thoughts?",
      "It can be used in a standard way if it's installed in standard directory /use/share/man/man1 \r\n\r\nI made it for debian package",
      "Need some instructions in README.MD, how to install man page to use it by standard way `man pyenv`.\r\nIn this case it would be a good option to have manpage for pyenv.\r\n@karthek-git, can you write them?",
      "+1 for man page. It's a CLI tool, `man` is the community standard for CLI documentation... (at least on linux)\r\n\r\nThe point is to not need a browser and internet to get detailed docs (from README or whatever) when you need them. If it's really a bother, there are tools to convert man pages to PDF and html and probably to markdown (something like [this](https://github.com/mle86/man-to-md)).\r\n\r\n> Need some instructions in README.MD, how to install man page to use it by standard way\r\n\r\n@karthek-git wrote a better comment for this below\r\n\r\n~~Eh, that's kind of pointless IMO since it's done by packagers/distros but if you insist:~~\r\n\r\n1. ~~Check output of `manpath`, it should contain `/usr/share/man`~~\r\n2. ~~Compress the manpage with `gzip /path/to/pyenv.1`~~\r\n3. ~~Create `/usr/share/man/man1` if necessary (with `mkdir`)~~\r\n3. ~~`sudo cp /path/to/pyenv.1.gz /usr/share/man/man1`~~\r\n4. ~~Update the database `sudo mandb`~~\r\n\r\n~~I think that's how it's done on most linux distros, but as I said this is kind of distro dependent.~~\r\n\r\nJust my 2c",
      "this usually isn't a problem if you install it through your package manager\r\nbut anyway \r\nthere are a lot of ways to use this manpage easily and here are some of them:\r\n\r\n**1. INSTALLING TO MANPATH**\r\njust cp to any directory in your $MANPATH.\r\n(need to be superuser)\r\n\r\n_NOTE: never mess with /usr/share/man though, as this directory is to be managed by your package manager, only install it into /usr/local/share/man/ or /usr/local/man/ based on your manpath_\r\n\r\nEx.\r\n`cp pyenv.1 /usr/local/share/man/man1/`\r\n(optional) compress it before cp.\r\n\r\n**2.MODIFY MANPATH**\r\nmodify $MANPATH shell environment variable to include /path/to/pyenv/man/\r\nEx.\r\n`echo 'export MANPATH=$MANPATH:/path/to/pyenv/man/' >> ~/.bashrc`\r\n\r\n**3.CREATE COMMAND ALIAS**\r\ncreate shell command alias to man -l /path/to/pyenv.1\r\nso that you can invoke simply by one word command\r\nEX.\r\n`echo 'alias mpyenv=\"man -l /path/to/pyenv.1\"' >> ~/.bashrc`"
    ],
    "commit_messages": [
      "Merge pull request #1790 from karthek-git/master\n\nadd manpage"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc46e44ee515ce6a4ac1f",
    "number": 1786,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nMakes pyenv work in bash set to `nounset` (`-u`) mode. I have been using this for 9 months or so in that mode and have found no problems. Submitted to rbenv too in Apr 2020, https://github.com/rbenv/rbenv/pull/1243 \r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n\r\nNone, see https://github.com/rbenv/rbenv/pull/1243#issuecomment-626656010",
    "head_branch": "nounset",
    "is_a_fork": true,
    "comments": [
      "@anton-petrov thanks! https://github.com/pyenv/pyenv-virtualenv/pull/350 would be the corresponding one for pyenv-virtualenv ;)"
    ],
    "commit_messages": [
      "Merge pull request #1786 from scop/nounset\n\nMake work in nounset (-u) mode"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc46f44ee515ce6a4ac20",
    "number": 1785,
    "body": "Make sure you have checked all steps below.\r\n\r\n\r\n### Description\r\n- [X] Here are some details about my PR\r\n\r\nI added command for pyenv installation for `Zsh`, `Ubuntu` etc. So its easier to do when installing and you can just copy and paste. I did it after having to install pyenv multiple times on different machines. Please check if the commands are all right 😁\r\n",
    "head_branch": "more_general_instal_readme",
    "is_a_fork": true,
    "comments": [
      "Have you tested this in all environments?",
      "> Have you tested this in all environments?\r\n\r\nI did it in all except the `Fish` one. As I do not have access to FIsh nor experience with it. Also that's exactly what your guide is telling ppl to do. I just made it copyable"
    ],
    "commit_messages": [
      "Merge pull request #1785 from John15321/more_general_instal_readme\n\nmore general installation readme instructions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc46f44ee515ce6a4ac21",
    "number": 1782,
    "body": "Added latest Miniforge3-4.9.2-5 support for all platforms, including arm64 in macOS for Apple M1, macOS x86_64, Linux x86_64, Linux ppc64le (POWER8/9).\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "anton-petrov-Miniforge3",
    "is_a_fork": true,
    "comments": [
      "Leave",
      "Looking to get miniforge using pyenv. Is this working at the moment? Should I be seeing it listed when I do `pyenv install --list`?",
      "Yes, of course.\r\n```\r\n❯ pyenv install --list | grep miniforge\r\n  miniforge3-4.9.2\r\n```\r\n",
      "@anton-petrov Odd; I do not see it. `pyenv install --list | grep miniforge` doesn't output anything. I'm running pyenv 1.2.22 by the way.\r\n\r\nMaybe it will be available in the next release? I just noticed that 1.2.22 came out roughly at the same time as this PR.",
      "Hi, @baubaid. It depends on how exactly you install _pyenv_. If you installed _pyenv_ using **git** or **pyenv-installer,** you can execute these command: `cd ~/.pyenv && git pull` to have the latest version. Or, wait for the next release...\r\n\r\nP.S.: In any case, you can go to the directory where _pyenv_ was installed and execute the command `git pull` to update.",
      "Thank you, @anton-petrov ! I actually installed it via Homebrew, so I think I'll just wait for the next release for the time-being."
    ],
    "commit_messages": [
      "Merge pull request #1782 from anton-petrov/anton-petrov-Miniforge3\n\nAdded Miniforge 3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc47044ee515ce6a4ac22",
    "number": 1781,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "anton-petrov-pypy3.7-7.3.3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1781 from anton-petrov/anton-petrov-pypy3.7-7.3.3\n\nCreate pypy3.7-7.3.3-src"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc47144ee515ce6a4ac23",
    "number": 1780,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "anton-petrov-pypy3.7-7.3.3-src",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1780 from anton-petrov/anton-petrov-pypy3.7-7.3.3-src\n\nCreate pypy3.7-7.3.3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc47244ee515ce6a4ac24",
    "number": 1778,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - None\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nPer the [release notes](https://docs.anaconda.com/anaconda/reference/release-notes/#anaconda-2020-07-july-23-2020) the installer and base environment (which I assume\r\nwe'd be verifying here, if anything) is Python 3.8.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n\r\nNone",
    "head_branch": "fix-anaconda3-2020.07",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1778 from chrahunt/fix-anaconda3-2020.07\n\nUse verify_py38 for anaconda3-2020.07"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc47344ee515ce6a4ac25",
    "number": 1776,
    "body": "Added Miniforge3-4.9.2 support for all platforms, including arm64 in macOS for Apple M1 SoC.\r\nDo not merge until the previous ones are merged!\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "anton-petrov-Miniforge3",
    "is_a_fork": true,
    "comments": [
      "New version 4.9.2-5 of Miniforge 3 adds nothing, except \r\n\r\n> Add miniforge_console_shortcut on windows\r\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc47344ee515ce6a4ac26",
    "number": 1775,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "anton-petrov-python-build-arm64-macOS",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added arm64 architecture support in python-build for macOS  (#1775)\n\n* Update python-build with arm64 architecture"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc47444ee515ce6a4ac27",
    "number": 1774,
    "body": "Added support for Anaconda 2020.11\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "anton-petrov-anaconda3-2020.11",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added anaconda3-2020.11 (#1774)\n\nAdded support for Anaconda 2020.11"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc47544ee515ce6a4ac28",
    "number": 1773,
    "body": "Added support  of Anaconda 2020.11\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc47644ee515ce6a4ac29",
    "number": 1769,
    "body": "This happens when someone adds the shims folder to the PATH variable manually.\r\n\r\nReferences https://github.com/rbenv/rbenv/pull/1294.",
    "head_branch": "no-path",
    "is_a_fork": true,
    "comments": [
      "This is being discussed in https://github.com/pyenv/pyenv/issues/1649 where alternative approaches are also considered.",
      "#1838 adds the shims directory to $PATH in our GitHub Actions",
      "Closed due to #1898 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc47744ee515ce6a4ac2a",
    "number": 1766,
    "body": "1. I added support for Anaconda 2020.11. (Linux x86_64, Linux ppc64, macOS x86_64)\r\n2. Added Miniforge3-4.9.2-4 support (Linux x86_64, Linux ppc64, macOS x86_64, macOS arch64), so now we can install and use this python distribution too! This repository holds a minimal installer for conda specific to conda-forge. It is comparable to Miniconda, but with conda-forge set as the default channel and an emphasis on supporting various CPU architectures.\r\n3. I made some changes for supporting new architecture Apple M1 on MacOS in python-build script, specially for Miniforge and future Anaconda installation.\r\n\r\nAll works fine, tested and using on my Macbook Air M1.\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Do you mind splitting the addition of Anaconda3-2020.11 and Miniforge3-4.9.2-4 (non-ARM packages) into a separate PR?",
      "Ok, now splitting into different PRs..."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc47744ee515ce6a4ac2b",
    "number": 1763,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\nUpdate miniconda 4.8.2, 4.8.3, & 4.9.2 w/ py7, py8, and py9 versions\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "> At the first glance, I was surprised with the naming of those new definition files (e.g. use of underscore), however, it seems like it's just following the naming convention of upstream as they are. I think, just using the upstream naming would be good and intuitive for most uses. Any opinions/insights? 🤔\r\n\r\nI fully agree that file naming should be standard, a general approach should be followed, we shouldn't use underscores in filenames, IMHO"
    ],
    "commit_messages": [
      "Merge pull request #1763 from pc-fmarin/master\n\nAdd miniconda3 4.8.2, 4.8.3, & 4.9.2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc47844ee515ce6a4ac2c",
    "number": 1762,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "Add-CPython-3.8.7",
    "is_a_fork": true,
    "comments": [
      "Politely bumping this.",
      "This PR has lead me to some questions for the project which I've asked on [GitHub Discussions](https://github.com/pyenv/pyenv/discussions/1771).",
      "Thanks!"
    ],
    "commit_messages": [
      "Merge pull request #1762 from gotche/Add-CPython-3.8.7\n\nAdd CPython 3.8.7"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc47944ee515ce6a4ac2d",
    "number": 1761,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "add-cpython-3.8.7",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc47a44ee515ce6a4ac2e",
    "number": 1754,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/pull/1711\r\n\r\n### Description\r\n- [ x] Here are some details about my PR:\r\nI noticed that using the the fix in #1711 causes pyenv to fail compiling python with readline (see https://github.com/pyenv/pyenv/pull/1711#issuecomment-742031048). This warning does not occur if the order in LDFLAGS is changed.\r\n\r\nEdit: more info: here https://github.com/pyenv/pyenv/pull/1711#issuecomment-742428338",
    "head_branch": "hotfix-for-1711",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Change order of LDFLAGS paths (#1754)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc47b44ee515ce6a4ac2f",
    "number": 1752,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [X] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [X] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [X] My PR addresses the following pyenv issue (if any)\r\n  - none\r\n\r\n### Description\r\n- [X] Here are some details about my PR\r\n\r\nThis adds CPython 3.9.1 to pyenv\r\n\r\n### Tests\r\n- [X] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Thanks!",
      "@yyuu @joshfriend Could we please get ___a pyenv release___ so we can test compatibility with Apple M1-native CPython.  Thanks for all your awesome work!",
      "Waiting with bated breath;  🤪 "
    ],
    "commit_messages": [
      "Add the CPython 3.9.1 (#1752)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc47b44ee515ce6a4ac30",
    "number": 1750,
    "body": "This prevents people from jumping the gun and trying to install a python version right after brew install.\r\n\r\n### Prerequisite\r\n* [N/A] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [N/A] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [X] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/1136\r\n\r\n### Description\r\n- [X] Here are some details about my PR\r\nSee top\r\n\r\n### Tests\r\n- [N/A] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "good call"
    ],
    "commit_messages": [
      "Put prerequisite for installation before install (#1750)\n\nThis prevents people from jumping the gun and trying to install a python version right after brew install."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc47c44ee515ce6a4ac31",
    "number": 1749,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - N/A\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nThis makes use of bash associative arrays for speedups, see individual commit messages for details. These are quite noticeable at shell startup.\r\n\r\nWill submit the same PR's to rbenv.\r\n\r\n~Note: associative arrays are available starting from bash 4.0. I didn't find a reference which bash versions should pyenv work with, but bash 4.0 is already pretty old. If that's a no go, the implementation could be reworked so that it defines different function implementations for different bash versions.~ Reworked.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n\r\nN/A",
    "head_branch": "perf",
    "is_a_fork": true,
    "comments": [
      "As far as I know, macOS is still shipping its BSD-based system along with bash 3.x even in 2021 (I'd speculate it is because of license concern, but, I'm not confident). Dependency to bash 4+ features might not be a very good idea until this situation to be changed 🤔 \r\n\r\n```\r\n% sw_vers\r\nProductName:    Mac OS X\r\nProductVersion: 10.15.7\r\nBuildVersion:   19H114\r\n% /bin/bash --version\r\nGNU bash, version 3.2.57(1)-release (x86_64-apple-darwin19)\r\nCopyright (C) 2007 Free Software Foundation, Inc.\r\n```",
      "I don't think that will ever change, and it would be a shame to keep the rest of the world stuck in the past just because of that. On the other hand, newer bash versions are available for macOS, they're just not there by default.",
      "Oh, but then again, I didn't even remember that I already _did_ rework this so that it still works with bash < 4 as well, check out the patch contents.",
      "Since in macOS 10.15 Catalina the default shell is zsh, the situation is changing to the good. But we can't just lose compatibility with other systems that still use bash 3. So, can we drop bash 3 support? In any way, this is an important case to be discussed. Maybe we need compatibility layer, or something similar. For example, in [pyenv-init ](https://github.com/pyenv/pyenv/blob/master/libexec/pyenv-init) do some checks for the shell version.\r\n\r\nHi, @scop. You are doing an excellent job of performance improving!"
    ],
    "commit_messages": [
      "Merge pull request #1749 from scop/perf\n\nUse associative arrays for performance on bash >= 4"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc47d44ee515ce6a4ac32",
    "number": 1748,
    "body": "\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - N/A\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nBorrowed the doc snippet from rbenv.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n\r\nN/A",
    "head_branch": "dylib-compile-doc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1748 from scop/dylib-compile-doc\n\nREADME: note optional bash extension build"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc47e44ee515ce6a4ac33",
    "number": 1747,
    "body": "\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - N/A\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nPOSIX sleep(1) doesn't provide subsecond precision, but many others do. I looked around (Ubuntu, FreeBSD, Solaris, BusyBox) and failed to find one that actually doesn't.\r\n\r\nDoesn't apply to rbenv, touches pyenv specific code.\r\n\r\nNot sure if 0.1 is the amount we want by default, open to changing it.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n\r\nN/A",
    "head_branch": "subsec-sleep",
    "is_a_fork": true,
    "comments": [
      "> I'm not familiar with where this is used. What is the intended user-experience outcome of reducing this sleep?\r\n\r\nIt's used in `pyenv init` by default which is intended to be called on shell startup. User experience is reduced shell startup time when the lock cannot be acquired immediately.",
      "(I'm aware of `--no-rehash` and I'm using that due to other rehash slowness personally.)\r\n",
      "I just tested it in various environments, including macOS - everything works fine. As for the `sleep` in macOS -- this function is implemented using _nanosleep()_ that is not accurate on macOS, look at [discussion](https://travis-ci.community/t/sleep-functions-are-not-accurate-on-macos/6122). In any case, the changes you made affect performance, so, I see no reasons to not include this improvements...\r\n",
      "Hm, I read your comment as positive and \"no reasons to not include this improvements\", but nevertheless the PR was closed without merging and without different but corresponding fixes in master. Was that an oversight or did I miss something?",
      "Oh, I'm sorry, that was a mistake :((( Could you re-create the PR? (to be able to approve and merge it to master)\r\n\r\n",
      "All done. Merged your code into the master.",
      "Thanks!"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc47f44ee515ce6a4ac34",
    "number": 1736,
    "body": "This adds the recently released GraalPython 20.3 to the available install scripts.\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "@joshfriend friendly ping :)"
    ],
    "commit_messages": [
      "Add GraalPython 20.3 (#1736)\n\n* Add GraalPython 20.3\r\n\r\n* Update graalpython repository URLs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc48044ee515ce6a4ac35",
    "number": 1732,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc48044ee515ce6a4ac36",
    "number": 1727,
    "body": "Not tested!",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [
      "Any movement on this? Seeing `pypy3.6-7.3.1` as the most current pypy option under `pyenv 1.2.21` `¯\\_(ツ)_/¯`",
      "When it will be merged?",
      "This would be really helpful!"
    ],
    "commit_messages": [
      "Merge pull request #1727 from brechtm/patch-2\n\nAdd PyPy 3.7-7.3.2 (source distribution)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc48144ee515ce6a4ac37",
    "number": 1726,
    "body": "This is basically the installation script from https://github.com/pyenv/pyenv/issues/1699#issuecomment-699144003.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "7.3.3 is out: https://morepypy.blogspot.com/2020/11/pypy-733-triple-release-python-37-36.html",
      "@chrahunt I'm keen to start using this, is there anything I can do to help?"
    ],
    "commit_messages": [
      "Merge pull request #1726 from brechtm/patch-1\n\nAdd PyPy 3.7-7.3.2 (binary distribution)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc48244ee515ce6a4ac38",
    "number": 1718,
    "body": "### Description\r\nThis adds PyPy 3.7 to pyenv",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "So why this PR not merged?"
    ],
    "commit_messages": [
      "Merge pull request #1718 from guiscaranse/master\n\nAdd pypy3.7"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc48344ee515ce6a4ac39",
    "number": 1714,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/1454\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\nFix 'sed: RE error: illegal byte sequence' \r\nby unsetting `LC_ALL` and passing `LC_CTYPE=C` to `sed`.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix 'sed: RE error: illegal byte sequence' (#1714)\n\n... by unsetting `LC_ALL` and passing `LC_CTYPE=C` to `sed`.\r\n\r\nThis commit fixes issue #1454."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc48344ee515ce6a4ac3a",
    "number": 1713,
    "body": "This adds CPython 3.10.0a1.\r\n",
    "head_branch": "3.10.0a1",
    "is_a_fork": true,
    "comments": [
      "a2 is out now, and I guess you don't want recipes for alphas?",
      "Thanks, Ned 😄\r\n\r\nRecipes for alphas/betas/RCs are welcome (we try to only keep the most recent one for each version). I seem to be the only maintainer that is active on the project recently and my recently expanded family takes more of my time and energy than usual.\r\n\r\nSorry your contribution was basically ignored, that's not intentional.",
      "@joshfriend \"recently expanded family\" is a good reason! Congratulations (I'm assuming that phrase means a baby...)! I didn't harbor any ill-will in the first place."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc48444ee515ce6a4ac3b",
    "number": 1712,
    "body": "Updates OpenSSL to the supported version 1.1.1h as 1.1.0 has several [issues](https://www.openssl.org/news/vulnerabilities-1.1.1.html)",
    "head_branch": "update-openssl",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc48544ee515ce6a4ac3c",
    "number": 1711,
    "body": "Add LDFLAGS for Xcode SDK zlib on macOS >= 1100 to resolve build issues on Big Sur.\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n  n/a\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n  n/a - this code does not appear in rbenv\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/1643\r\nNote: The issue is for general macOS 11 Big Sur beta build issues. Users must also have downloaded the Xcode 12.2 beta from Apple and have the macOS 11 SDK installed in addition to the Big Sur beta itself.\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\nThis is a 3 line change to python-build that affects macOS 11.0 Big Sur (currently in beta). Big Sur no longer packages dynamic libraries in /usr/lib as detailed in https://github.com/pyenv/pyenv/issues/1643#issuecomment-704223840 . This requires python-build to link against $(xcrun --show-sdk-path)/usr/lib on macOS >= 11.0 when using the macOS-shipped zlib. This allows python-build to correctly build python again on macOS 11 (Big Sur).\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\nn/a",
    "head_branch": "issue1643",
    "is_a_fork": true,
    "comments": [
      "Now that Big Sur is available for realz, it would be great to have this in pyenv :-)",
      "Hello all,\r\nAnyone know when the next release of `pyenv` will happen?\r\nThank you so much for your hard work!",
      "@joshfriend This PR may actually cause the build to fail compiling readline from home-brew. At least on both of my macs running on macOS Big Sur 11.0.1. It will print\r\n```sh\r\nWARNING: The Python readline extension was not compiled. Missing the GNU readline lib?\r\n```\r\nThe error could not have been caught by travis-ci because the pipeline does not include macOS 11 (yet).\r\nI commented-out the added lines and exported the LDFLAG manually with: \r\n```\r\nexport LDFLAGS='-L /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib/'\r\n```\r\nThis time, pyenv installed/compiled python with no errors or warnings.\r\n\r\nSo, it turns out that `${xc_sdk_path}` was using the MacOSX11.0.sdk from Xcode.app (Version 12.2 (12B45b)) and the sdk in `/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib/` was still 10.15.\r\nCan someone confirm similar issues?",
      "So I did some more digging and apparently the order in LDFLAGS is somehow relevant (?)\r\n\r\n```bash\r\n    if is_mac -ge 1100; then\r\n      export LDFLAGS=\"-L${xc_sdk_path}/usr/lib ${LDFLAGS}\"\r\n    fi\r\n```\r\n\r\n--> Warning ...\r\n\r\n```bash\r\n    if is_mac -ge 1100; then\r\n      export LDFLAGS=\"${LDFLAGS} -L${xc_sdk_path}/usr/lib\"\r\n    fi\r\n```\r\n--> no warning",
      "Edit: I updated the travis setup and the python-build-script to force travis to build against macOS SDK 11.0 (osx_image xcode12.2) and was able to reproduce the warning that readline extension was not compiled. However, this is not treated as a build error and hence the checks passed. But you can see the warning in the travis-logs. See example here: https://github.com/tillhainbach/pyenv/pull/8 and logs here https://travis-ci.com/github/tillhainbach/pyenv/jobs/457193096#L9265\r\n\r\nSo, it should be considered merging #1754",
      "@tillhainbach did you consider any other methods than adding a linker flag? It seems homebrew are using -isysroot for this stuff instead, I'n not sure whether that should make much difference."
    ],
    "commit_messages": [
      "Add LDFLAGS for zlib on macOS >= 1100 (#1711)\n\nAdd LDFLAGS for Xcode SDK zlib on macOS >= 1100 to resolve build issues on Big Sur."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc48644ee515ce6a4ac3d",
    "number": 1708,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\nAdd the current macOS and current Xcode to the testing.\r\n* https://docs.travis-ci.com/user/reference/osx/#macos-version\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\nTravis CI\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "I suggest to more complex changes. Upgrade from Xenial to Focal, for example. As for xcode12u, the best solution would be `xcode12` (Xcode 12.0.1).  And another important point: the more we add an environment for testing, the longer the build time will be.\r\n",
      "Travis jobs should run in parallel so the impact of adding a new env might not be a linear increase in runtime.  If turnaround time is important then perhaps we should move from Travis CI to GitHub Actions.",
      "Unfortunately, Travis CI still does not provide access to macOS Big Sur (v11)\r\nProductName:\tMac OS X\r\nProductVersion:\t10.15.7",
      "Currently runs only 2 parallel vm's for pyenv, as know..."
    ],
    "commit_messages": [
      "Merge pull request #1708 from cclauss/patch-1\n\nTravis CI: Add Xcode 12 on macOS 10.15.5"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc48744ee515ce6a4ac3e",
    "number": 1707,
    "body": "Replaces the current latest 3.9.0 (rc2) with 3.9.0 stable, released today.",
    "head_branch": "cpython-390",
    "is_a_fork": true,
    "comments": [
      "#1706 was submitted first so i merged that one, than you though!"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc48844ee515ce6a4ac3f",
    "number": 1706,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\nAdds support for python 3.9.0 final release\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "@yyuu Could you please make a [pyenv release](https://github.com/pyenv/pyenv/releases) with these changes? [Homebrew formula](https://github.com/Homebrew/homebrew-core/blob/master/Formula/pyenv.rb) requirement a version release for correct via \"brew upgrade\" and it will be awesome to have 3.9.0 in the homebrew 🙏 "
    ],
    "commit_messages": [
      "Add CPython 3.9.0 (#1706)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc48844ee515ce6a4ac40",
    "number": 1704,
    "body": "\r\n\r\n### Description\r\nI have added a file to include the most recent micropython version (v1.13) into the pyenv build list.\r\n\r\n",
    "head_branch": "add_micropython-1.13",
    "is_a_fork": true,
    "comments": [
      "Thanks for merging!"
    ],
    "commit_messages": [
      "add file for downloading and installing micropython-1.13 (#1704)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc48944ee515ce6a4ac41",
    "number": 1703,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/1701\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nI created this issue: https://github.com/pyenv/pyenv/issues/1701 and here is my contribution.\r\nMy main purpose is to avoid ambiguity.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "issue1701",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated documentation pyenv init for fish shell comform to readme. (#1703)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc48a44ee515ce6a4ac42",
    "number": 1700,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [X] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [X] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [X] My PR addresses the following pyenv issue (if any)\r\n  - N/A\r\n\r\n### Description\r\n- [X] Here are some details about my PR\r\n\r\nPyPy has now only one development tip. The `py3k` branch has been closed in 2016. As such, a separate `pypy3-dev` entry no longer makes sense.\r\n\r\n### Tests\r\n- [X] My PR adds the following unit tests (if any)\r\n   N/A",
    "head_branch": "pypy3-drop",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Drop pypy3-dev (#1700)\n\nPyPy has now only one development tip, `default`,\r\nothers are version-line-specific maintenance branches.\r\nThe py3k branch has been closed in 2016.\r\nAs such, a separate pypy3-dev entry no longer makes sense."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc48b44ee515ce6a4ac43",
    "number": 1698,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "add-cpython-3.8.6",
    "is_a_fork": true,
    "comments": [
      "I would like to have this merged into master. My home-brew version of `pyenv` won't let me install 3.8.6 yet",
      "Thanks!"
    ],
    "commit_messages": [
      "Add CPython 3.8.6 (#1698)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc48c44ee515ce6a4ac44",
    "number": 1697,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * _**This solution is not applicable to rbenv because rbenv does not bundle the build plugin (see #913)**_\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  * fixes https://github.com/pyenv/pyenv/issues/1696\r\n\r\n### Description\r\n* [x] Here are some details about my PR\r\n\r\n    I ran into this when using [basher](https://github.com/basherpm/basher) to install pyenv and finding that `pyenv install` was failing for not finding pyenv-install, despite the embedded plugin. This matches my experiences with packaging for linux, where [it's common to move `python-build/` into `share/`](https://build.opensuse.org/package/view_file/devel:languages:python/pyenv/pyenv.spec?expand=1).\r\n\r\n\r\n\r\n### Tests\r\n* [x] My PR ~adds~ updates the following unit tests (if any)\r\n  * `adds its own libexec to PATH`\r\n  * `adds plugin bin dirs to PATH`",
    "head_branch": "fix-1696",
    "is_a_fork": true,
    "comments": [
      "@joshfriend could you take a look at this? It's somewhat related to an old issue that you [commented on last year](https://github.com/pyenv/pyenv/issues/913#issuecomment-542249737). Thanks!",
      "Thanks!"
    ],
    "commit_messages": [
      "Search for plugins in PYENV_DIR and PYENV_ROOT (#1697)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc48d44ee515ce6a4ac45",
    "number": 1694,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "add-cpython-3.9.0rc2",
    "is_a_fork": true,
    "comments": [
      "Hey hey,\r\n\r\nThanks for the awesome work everybody! Do we maybe know when we can expect a release with this PR included?\r\n\r\nThanks! :rocket: "
    ],
    "commit_messages": [
      "Add CPython 3.9.0rc2 (#1694)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc48d44ee515ce6a4ac46",
    "number": 1692,
    "body": "Seeing that `pypy-dev` no longer builds at https://travis-ci.com/github/travis-ci/cpython-builder/jobs/384173201 because PyPy had moved away from BitBucket,\r\n\r\nI've checked _all_ the links and checksums in `plugins/python-build/share/python-build` with the scripts in https://github.com/pyenv/pyenv/pull/1692#issuecomment-711413160.\r\n\r\nThis PR fixes all the found invalid links to valid ones and deletes entries for releases that are no longer available for download.\r\n\r\n---\r\n\r\n### Prerequisite\r\n* [X] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [X] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [X] My PR addresses the following pyenv issue (if any)\r\n  - N/A\r\n\r\n### Description\r\n- [X] Here are some details about my PR\r\n\r\nSee above.\r\n\r\n### Tests\r\n- [X] My PR adds the following unit tests (if any)\r\n  I can add a test for installing (or at least downloading/HEAD checking URLs for) all the archives if you wish.",
    "head_branch": "links_r1",
    "is_a_fork": true,
    "comments": [
      "#1682 already fixed pypy download links, can you update this with only changes to stackless?",
      "@joshfriend I was checking a codebase with #1682 applied and started working on this PR after I couldn't install a few versions. So I can say with confidence that it didn't fix everything.",
      "That said, I didn't check signatures for _all_ the download links, only for those that I fixed (because the logic for this in `python-build` is rather complicated and there's no easy way to reuse it). Shall I do that in this PR?",
      "Checked checksums in addition to URLs with the following code:\r\n\r\n```\r\n#!/bin/bash -e\r\nset -o pipefail\r\ndeclare -A URLS\r\ngrep * -Pe '(?<=\")http[^\"]+(?=\")' --only-matching | \\\r\nwhile IFS=':' read -r FILE URLLINE\r\ndo\r\n  HASH=${URLLINE##*#}; if [[ $HASH == \"$URLLINE\" ]]; then HASH=\"\"; fi\r\n  if [[ -n $HASH ]]; then\r\n    if [[ ${#HASH} -eq 32 ]]; then\r\n        SUM=md5sum\r\n    else\r\n        SUM=sha256sum\r\n    fi\r\n    echo \"$HASH *t.bin\" >t.sum\r\n  fi\r\n  URL=${URLLINE%#*}\r\n  if [[ -n ${URLS[$URL]} ]]; then continue; fi;\r\n  echo \"$FILE:$URL\"\r\n  if \r\n    (\r\n        curl -sSfL -o t.bin \"$URL\" && \\\r\n        if [[ -n $HASH ]]; then\r\n            \"$SUM\" --check t.sum\r\n        fi\r\n    ) 2>&1 \\\r\n    | tee out.txt\r\n  then\r\n    URLS[$URL]=1\r\n  else\r\n    echo \"$FILE:$URL $(cat out.txt)\" >>failed.txt\r\n  fi\r\ndone\r\n```\r\n\r\nChecked generated URLs in the latest PyPy scripts with the following code:\r\n\r\n```\r\n#!/bin/bash -e\r\nset -o pipefail\r\ndeclare -A URLS\r\n\r\nfunction get_version () {\r\n  eval \"$( function echo () { true; }\r\n    function exit () { true; }\r\n    source \"$1\";\r\n    command echo VERSION=$VERSION;\r\n    command echo PYVER=$PYVER;\r\n  )\"\r\n}\r\n\r\n\r\ngrep pypy*-7* -Pe '(?<=\")http[^\"]+(?=\")' --only-matching | \\\r\nwhile IFS=':' read -r FILE URLLINE\r\ndo\r\n  get_version \"$FILE\"\r\n  HASH=${URLLINE##*#}; if [[ $HASH == \"$URLLINE\" ]]; then HASH=\"\"; fi\r\n  if [[ -n $HASH ]]; then\r\n    if [[ ${#HASH} -eq 32 ]]; then\r\n        SUM=md5sum\r\n    else\r\n        SUM=sha256sum\r\n    fi\r\n    echo \"$HASH *t.bin\" >t.sum\r\n  fi\r\n  URL=${URLLINE%#*}\r\n  URL=\"$(eval \"echo \\\"$URL\\\"\")\"\r\n  if [[ -n ${URLS[$URL]} ]]; then continue; fi;\r\n  echo \"$FILE:$URL\"\r\n  if \r\n    (\r\n        curl -sSfL -o t.bin \"$URL\" && \\\r\n        if [[ -n $HASH ]]; then\r\n            \"$SUM\" --check t.sum\r\n        fi\r\n    ) 2>&1 \\\r\n    | tee out.txt\r\n  then\r\n    URLS[$URL]=1\r\n  else\r\n    echo \"$FILE:$URL $(cat out.txt)\" >>failed.txt\r\n  fi\r\ndone\r\n```"
    ],
    "commit_messages": [
      "Fix download links for everything (incl. PyPy and Stackless) (#1692)\n\n* Update PyPy download links. Remove releases that are no longer available.\r\n\r\nPyPy has moved from bitbucket.org to foss.heptapod.net.\r\nDownloads have moved to https://downloads.python.org/pypy/; some of the archives are no longer available.\r\n\r\nPortable PyPy has moved from bitbucket.org to Github. Old archives have been moved to a 3rd-party \"Bitbucket Archive\" site.\r\n\r\n* Update Stackless download links. Remove releases that are no longer available.\r\n\r\nStackless has moved from Bitbucket to Github. Old downloads have been renamed(?); stackless.com no longer works via HTTPS.\r\n\r\n* Delete releases that have become invalid since the last check\r\n\r\n* fix changed checksums"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc48e44ee515ce6a4ac47",
    "number": 1691,
    "body": "This fixes erroneous behavior if there happens to be an entry in the current directory\r\nwith the same name as the defnition.\r\nTo explicitly use a file in the current directory as a definition, specify it as \"./file_name\".\r\n\r\nI ran into this issue when installing and testing multiple versions, saving test output into a file with the same name as the version for simplicity.\r\n\r\n---\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [X] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  N/A: bugfix\r\n* [X] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  N/A: affects python-build\r\n* [X] My PR addresses the following pyenv issue (if any)\r\n  N/A\r\n\r\n### Description\r\n- [X] Here are some details about my PR\r\n\r\nThis fixes erroneous behavior if there happens to be an entry in the current directory\r\nwith the same name as the defnition.\r\nTo explicitly use a file in the current directory as a definition, specify it as \"./file_name\".\r\n\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n There don't seem to be any tests for python-build in tests/. Should there?",
    "head_branch": "python-build-nobare",
    "is_a_fork": true,
    "comments": [
      "@pyenv/pyenv-core-committers Any feedback/opinion on this change? Since it's mine and potentially contentious, I'm hesitant to merge it with none at all.",
      "After much consideration, I decided that the PR violates Python Zen, koan 12 (\"In the face of ambiguity, refuse the temptation to guess.\"). The existing code makes a guess (prefers a file path to a stock script) and my change guesses the other way round.\r\n\r\nIf this is to be fixed, we'd rather need to introduce a switch that will explicitly tell Python-Build to use a file path instead of a stock script."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc48f44ee515ce6a4ac48",
    "number": 1690,
    "body": "Closes #1689 \r\n\r\nAdding the Python v3.5.10 release. Bats tests still pass, tested the install in Ubuntu 20.04.",
    "head_branch": "add-cpython-3.5.10",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython v3.5.10 (#1690)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc49044ee515ce6a4ac49",
    "number": 1685,
    "body": "I added the bin/* contents of the anaconda metadata (coreutils-8.31-h0b31af3_0.json) to default.list\r\n\r\nThis is preventing bash-crashing shims raised in #1683.\r\n",
    "head_branch": "exclude-conda-coreutils",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1685 from miketrumpis/exclude-conda-coreutils\n\nexclude bin files from coreutils"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc49144ee515ce6a4ac4a",
    "number": 1684,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "I just added and test new Anaconda 2020.07 and tested it. All works fine!",
      "Please, add support for Anaconda 2020.07, this pull request contains it."
    ],
    "commit_messages": [
      "Add Anaconda3-2020.07 (#1684)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc49144ee515ce6a4ac4b",
    "number": 1682,
    "body": "Make sure you have checked all steps below.\n\n### Prerequisite\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\n* [x] My PR addresses the following pyenv issue (if any)\n  - https://github.com/pyenv/pyenv/issues/1681\n\n### Description\n- [x] Here are some details about my PR\n\nPyPy has migrated away from Bitbucket hosting to Heptapod. Sources and build\narchives are now hosted at downloads.python.org.\n\n### Tests\n- [ ] My PR adds the following unit tests (if any)\n",
    "head_branch": "fix/pypy-download-links",
    "is_a_fork": true,
    "comments": [
      "I think this is good to go from my side.",
      "Thanks!\r\n\r\nI obviously did not check every single version to see if it installed, but I did download a few random tarballs from the new URLs to verify that they were valid URLs and checked over the diff to make sure no checksums were altered.",
      "Any chance of pushing out a new release (ideally to brew) so we can use these. Alternatively is there a known workaround in the meantime?",
      "+1 for a new release.\r\n\r\n> Alternatively is there a known workaround in the meantime?\r\n\r\nThe fix has been merged on the master branch. Clone pyenv and use it?"
    ],
    "commit_messages": [
      "Fix PyPy download links (#1682)\n\n* Find working PyPy links in downloads.python.org\r\n* Use portable-pypy links from softwareheritage.org"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc49244ee515ce6a4ac4c",
    "number": 1680,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/1679\r\n\r\n### Description\r\nAdds (cpython) 3.6.12 and 3.7.9\r\n\r\n### Tests\r\nI didn't add any tests. To make sure I got the shasums right, I downloaded from the tarballs from python.org, and checked that their md5 sums matched what was published on python.org. Then, I ran `shasum -a 256` on each file.\r\n\r\nThis is my first time contributing to this repo, so please let me know if there is anything else I should do.\r\n\r\nThanks for the awesome utility!\r\n",
    "head_branch": "3.6.12-3.7.9",
    "is_a_fork": true,
    "comments": [
      "I applied the 3.7.9 patch locally and installed it and it ran the test suite for my application without issue. Thank you for this contribution.",
      "Thanks!",
      "Hello,\r\nWhat's the approach to install those versions? Latest pyenv release is `1.2.20` so I assume I must use the `master` branch directly?",
      "for now yes, i will try to get everyone a new tag for homebrew soon!"
    ],
    "commit_messages": [
      "Add 3.6.12 and 3.7.9 versions (#1680)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc49344ee515ce6a4ac4d",
    "number": 1676,
    "body": "Removes 3.9.0b5 and replaces it with 3.9.0rc1 which was released yesterday. Thanks to all maintainers of this project :heart: \r\n",
    "head_branch": "python-3.9.0rc1",
    "is_a_fork": true,
    "comments": [
      "Thanks for contributing!"
    ],
    "commit_messages": [
      "Add Python 3.9.0rc1 (#1676)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc49444ee515ce6a4ac4e",
    "number": 1674,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/732\r\n\r\n### Description\r\n- [x] Here are some details about my PR:\r\n  * Currently build_package_ldflags_dirs() checks for the existence of directories set by the LDFLAGS variable and then attempts to create those directories in an area where it lacks permission. Per the comment by @chrahunt found [here](https://github.com/pyenv/pyenv/issues/732#issuecomment-464899679), this function was introduced to ruby-build for what seems like a Ruby-specific issue. I suggest removing this function entirely from python-build. If there is a good reason for keeping it, proper amendment should be made so it is functional for users utilizing LDFLAGS in their environment.\r\n  * This currently fails to build because the removed function is referenced in the command loop/via each python build definition - these were apparently added to `suppress linker warnings` in [this commit](https://github.com/pyenv/pyenv/commit/8e02b93e3932a5439e9b21a80c5a67e59401cd94).\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc49544ee515ce6a4ac4f",
    "number": 1673,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [N/A] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [N/A] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - Closes https://github.com/pyenv/pyenv/issues/1473\r\n  - Closes https://github.com/pyenv/pyenv/issues/1377\r\n  - https://github.com/pyenv/pyenv/issues/1575\r\n  - https://github.com/pyenv/pyenv/issues/803\r\n\r\n### Description\r\n\r\nFixes an issue where `PYTHON_BUILD_MIRROR_URL` is not used if the mirror does not have the same checksum that is expected. In some cases, the mirror is not expected to have a matching checksum (as in the case of a corporate mirror behind a firewall), which causes errors.\r\n\r\nBy setting `PYTHON_BUILD_MIRROR_URL_SKIP_CHECKSUM`, the `PYTHON_BUILD_MIRROR_URL` will be used but will not attempt to match a checksum.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n  - package is fetched from mirror when checksum is invalid if SKIP_CHECKSUM set",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "👋  Checking in on this PR: would someone please be able to review? Thank you!",
      "Hi: wanted to check in again--would a maintainer be able to review this PR please? Thank you! (CC @joshfriend sorry for the ping 😄 )",
      "why would the download from a mirror have a different checksum?",
      "The downloaded file will have the same checksum--the issue with the current implementation is the assumption that the checksum is always included in the filepath of the mirrored distribution. For example:\r\n\r\n`3.8.5` can be downloaded from `https://www.python.org/ftp/python/3.8.5/Python-3.8.5.tar.xz`.\r\n\r\nMy `PYTHON_BUILD_MIRROR_URL` is `https://mirror.example.com/python/`, and the source distribution is available at `https://mirror.example.com/python/3.8.5/Python-3.8.5.tar.xz`.\r\n\r\nBased on [this logic in `python-build`](https://github.com/pyenv/pyenv/blob/f44cb70d938446b396a676dd76f1b1b28031a9e6/plugins/python-build/bin/python-build#L393), there is an assumption that the path to the mirrored distribution is https://mirror.example.com/python/e3003.../Python-3.8.5.tar.xz, where `e3003...` is the checksum of the file. This may be the case for some mirrors, but is not the case when configuring a remote repository mirror using Artifactory (as is my situation). \r\n\r\nTherefore, the behavior introduced with `PYTHON_BUILD_MIRROR_URL_SKIP_CHECKSUM` is to skip templating the checksum into the URL of the download. The [`verify_checksum` function is still called](https://github.com/pyenv/pyenv/blob/f44cb70d938446b396a676dd76f1b1b28031a9e6/plugins/python-build/bin/python-build#L492) when downloading the tarball from the mirror, so you remain protected against corrupted or poisoned distributions.",
      "Ah I understand now :) thank you ❤️ ",
      "Just want to add a comment:\r\n\r\nBecause of this [code snippet](https://github.com/pyenv/pyenv/blob/master/plugins/python-build/bin/python-build#L421-L422), it actually tries downloading the tarball twice. The first time it tries downloading with the checksum appended, but fails. The second time without checksum, hence succeeds.\r\n\r\nSo I think the name `PYTHON_BUILD_MIRROR_URL_SKIP_CHECKSUM` may not be a good name, because it doesn't skip, but actually substitutes the original url with `PYTHON_BUILD_MIRROR_URL`.\r\n\r\n```\r\n  if [ -n \"$PYTHON_BUILD_MIRROR_URL_SKIP_CHECKSUM\" ]; then\r\n      local package_url=\"$(echo \"$1\" | sed -e \"s|.*//${URL_BASE:-$official_source}|$PYTHON_BUILD_MIRROR_URL|g\")\"\r\n  else\r\n      local package_url=\"$1\"\r\n  fi\r\n```\r\n\r\nIn order to use the name `PYTHON_BUILD_MIRROR_URL_SKIP_CHECKSUM`, maybe [here](https://github.com/pyenv/pyenv/blob/master/plugins/python-build/bin/python-build#L387-L396) is a good place to do some edits.",
      "The Alibaba Cloud image path does not comply with the official agreement"
    ],
    "commit_messages": [
      "Add support for PYTHON_BUILD_MIRROR_URL when checksums do not exist (#1673)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc49644ee515ce6a4ac50",
    "number": 1672,
    "body": "## Description\r\n- Add plugin to support Jython 2.7.2\r\n\r\n",
    "head_branch": "add-jython-2.7.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Jython 2.7.2 (#1672)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc49644ee515ce6a4ac51",
    "number": 1671,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Verify py38"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc49744ee515ce6a4ac52",
    "number": 1670,
    "body": "... which is caused by `realpath.dylib` containing illegal UTF-8 byte sequence, and `LC_CTYPE` won't take effect if `LC_ALL` happens to be set to something other than `C`.\r\n\r\nThis commit fixes issue pyenv/pyenv#1454.\r\n\r\nRef: https://stackoverflow.com/a/23584470\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/1454\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix 'sed: RE error: illegal byte sequence' (#1670)\n\n... which is caused by `realpath.dylib` containing illegal UTF-8 byte sequence, and `LC_CTYPE` won't take effect if `LC_ALL` happens to be set to something other than `C`.\r\n\r\nThis commit fixes issue pyenv/pyenv#1454.\r\n\r\nRef: https://stackoverflow.com/a/23584470"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc49844ee515ce6a4ac53",
    "number": 1668,
    "body": "",
    "head_branch": "feat-add-3.8.5",
    "is_a_fork": true,
    "comments": [
      "Did not see #1667. Closing in favour of that PR."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc49944ee515ce6a4ac54",
    "number": 1667,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "add-cpython-3.8.5",
    "is_a_fork": true,
    "comments": [
      "Thank you!"
    ],
    "commit_messages": [
      "Add CPython 3.8.5 (#1667)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc49a44ee515ce6a4ac55",
    "number": 1663,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/1662\r\n\r\n### Description\r\nLet the `type` cmd be more permissive in finding a suitable `ggrep`/`grep`.\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "grep",
    "is_a_fork": true,
    "comments": [
      "Thanks!"
    ],
    "commit_messages": [
      "Make grep detection more robust (#1663)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc49b44ee515ce6a4ac56",
    "number": 1658,
    "body": "Replaces 3.8.4rc1 with 3.8.4.",
    "head_branch": "feat-add-3.8.4",
    "is_a_fork": true,
    "comments": [
      "Thanks!"
    ],
    "commit_messages": [
      "Add CPython 3.8.4 (#1658)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc49b44ee515ce6a4ac57",
    "number": 1656,
    "body": "### Description\r\n\r\nThis PR adds prefix matching when performing `install` operations so users can get away with specifying a prefix string rather than the complete string, making pyenv much more user friendly.\r\n\r\nFor example, running `pyenv install 3.7` will give the message `python-build: definition not found: 3.7`, but this PR will cause pyenv to install `3.7.8`, the latest version matching `3.7`.\r\n\r\nSimilary, `pyenv install anaconda3-20` will install `anaconda3-2020.02`.\r\n",
    "head_branch": "feature/prefix-match",
    "is_a_fork": true,
    "comments": [
      "I would think this would also need to be updated in the pyenv global/local commands. I'm interested in doing something like this, but my context is a docker image and with https://github.com/randomknowledge/docker-pyenv-tox/pull/7 I alias the major_minor release at a much deeper level https://github.com/randomknowledge/docker-pyenv-tox/pull/7/files#diff-3254677a7917c6c01f55212f86c57fbfR86-R95\r\n\r\nI realized afterwards I could probably create a softlink after building the Python versions instead of before, but for my case it doesn't really make much of a difference and I'm not sure if `pyenv versions --skip-aliases` skipping those is actually better since I want people to not use the point version and use the major_minor version instead (so I don't want the point release visible to the container user)\r\n\r\n",
      "If the latest version changes, then `install` should install the new version since the install wouldn't make sense otherwise.\n\nFor `global` and `local`, it should use the installed versions. I'll add that functionality.",
      "The most manageable and least surprising implementation will likely be to add an aliases feature like in RVM: https://rvm.io/rubies/alias\r\n`install` then can create a corresponding alias like Travis does: https://travis-ci.org/github/OpenBazaar/official_site/builds/752136085#L201"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc49c44ee515ce6a4ac58",
    "number": 1655,
    "body": "### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/1366\r\n  - https://github.com/pyenv/pyenv/issues/1628\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nSimple fixes such that a user who does not have a 'python' binary in their path, but does have a 'python3' binary see their system python in `pyenv versions` and does not receive warnings about no system python installations.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n\r\nN/A",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "fixes #1366\r\nfixes #1628",
      "As mentioned in https://github.com/pyenv/pyenv/issues/1628#issuecomment-655573600, I fully support this PR and think it is a great step in the right direction, although by itself it is not the complete fix for #1628 which I had envisioned.",
      "in #1366 it's suggested that this should be amended to also handle cases of `python2`. I did think of this, but decided not to do so (see my comment in that issue for more of an explanation).\r\n\r\nHowever if it's decided this is wanted, it shouldn't be too difficult to add - especially if there's a better way to handle this than the way I've done here.",
      "I just installed Linux Mint 20 and got hit by the \"no system python\" issue due to Ubuntu 20.04 no longer having `/usr/bin/python`.\r\nAny news regarding this PR? Anything I can do to help get it done and merged?",
      "https://github.com/draeath/pyenv/pull/1 PR to this PR fixes the `python2` detection.",
      "I've never had a PR inside a PR, so I don't know if I need to do anything more than merge on my end.",
      "> \r\n> \r\n> I've never had a PR inside a PR, so I don't know if I need to do anything more than merge on my end.\r\n\r\nYou don't. By merging a nested PR, you push its commits to this PR's branch so they just appear here like any other additional commits to a PR branch.",
      "@anton-petrov Could you also close the associated issues?",
      "Done."
    ],
    "commit_messages": [
      "Merge pull request #1655 from draeath/master\n\n\"system\" python - support cases where python3, python2 is in PATH but not python"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc49d44ee515ce6a4ac59",
    "number": 1654,
    "body": "CPython 3.9.0b4",
    "head_branch": "cpython_3.9.0b4",
    "is_a_fork": true,
    "comments": [
      "@joshfriend there are important seg faults fixed in b4 and this is needed for further testing.",
      "@yyuu @ghedsouza"
    ],
    "commit_messages": [
      "CPython 3.9.0b4 (#1654)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc49e44ee515ce6a4ac5a",
    "number": 1652,
    "body": "While working on a fix for #1647 (PR #1651) I noticed that tgz archive was used even though my FreeBSDs tar is capable of operating with J flag handling xz archives. Reason for that is that the current implementation of the `has_tar_xz_support` function returns always 1 due to the following error:\r\n\r\n```\r\n~ tar Jc /dev/null\r\ntar: Failed to open '/dev/sa0'\r\n```\r\n\r\nEasy fix that works universally on all(? I checked Linux, macOS and FreeBSD) platforms is in this PR.",
    "head_branch": "fix-has-tar-xz-support-for-freebsd",
    "is_a_fork": true,
    "comments": [
      "❤️ Thanks"
    ],
    "commit_messages": [
      "Fix has_tar_xz_support function on FreeBSD. (#1652)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc49f44ee515ce6a4ac5b",
    "number": 1651,
    "body": "This is a minor copy/paste issue where checksum for the file was not bumped up for the given version (and only for tgz archive).\r\n\r\nCloses #1647",
    "head_branch": "issue1647",
    "is_a_fork": true,
    "comments": [
      "Yes please!\r\n```\r\n$ pyenv install 3.7.8\r\nDownloading Python-3.7.8.tgz...\r\n-> https://www.python.org/ftp/python/3.7.8/Python-3.7.8.tgz\r\n\r\nBUILD FAILED (Alpine Linux 3.12.0 using python-build 20180424)\r\n\r\nInspect or clean up the working tree at /tmp/python-build.20200720165554.114\r\nResults logged to /tmp/python-build.20200720165554.114.log\r\n\r\nLast 10 log lines:\r\n/tmp/python-build.20200720165554.114 /\r\n\r\nchecksum mismatch: Python-3.7.8.tar.gz (file is corrupt)\r\nexpected 8c8be91cd2648a1a0c251f04ea0bb4c2a5570feb9c45eaaa2241c785585b475a, got 0e25835614dc221e3ecea5831b38fa90788b5389b99b675a751414c858789ab0\r\n```",
      "Thank you for fixing this. I _really_ do try to make sure I verify the checksums myself and then install the python version to make doubly sure, but I think I just test the `xz` version so this one slipped through 😢 "
    ],
    "commit_messages": [
      "Fix CPython 3.7.8 gzip checksum (#1651)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc49f44ee515ce6a4ac5c",
    "number": 1650,
    "body": "Fixes: #1649\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/1649\r\n\r\n### Description\r\n\r\nUpdate `pyenv-init` script. Add statements to check shims path in `PATH` before appending.\r\n\r\n### Tests\r\n\r\nNo\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Closed since \"can add shims to PATH more than once\" is an intended feature according to the test cases.",
      "For reference: [this commit](https://github.com/pyenv/pyenv/commit/e2173df4aa91c8d365ca1596fb857fcac9fdd787) explains why it is unfortunately \"intended\"."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4a044ee515ce6a4ac5d",
    "number": 1646,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  -#1125\r\nFor anyone trying to use tcltk from homebrew before (or if you had tcltk installed from homebrew tkinter would fail I believe)\r\n#1125\r\n- replaces #1409 (and me being stupid in #1645)\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\nFrom @grahamannett in #1409:\r\n\"I previously added the regex match for this, but having to pass the config opts everytime while other packages use homebrew by default made this seem worthwhile. If there is anything that would make this more streamlined, or a better place to put it in python-build then let me know.\r\nThis should hopefully allow more people to use pyenv and things like matplotlib or whatever that may previously had issues.\"\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any):\r\nMe: In addition to @grahamannett implementation of the option I fixed the tests in plugin/python-build/test/build.bats and added two additional test for the new option (analogous to the test used for the readline option)\r\n",
    "head_branch": "pr1409",
    "is_a_fork": true,
    "comments": [
      "wow. thanks so much for doing this!  i think those tests were exactly what I was trying to figure out but never got around to it.\r\n\r\nalso havent tested this out but from my recollection there was no way to actually \"verify\" that tcl-tk stuff works without manually checking that box pops up with `python -m tkinter -c 'tkinter._test()'`, does this get around that?",
      "No, if one wants to be 100% sure that tkinter works correctly one has to actually call `python -m tkinter` (you don’t need the -c stuff) and check that the Windows looks ok. The tests only verify that the python-build scripts sets the appropriate flags. From there, one has to trust that it gets linked properly by the compiler (or what ever). In my opinion, anything more (like checking that it is actually link) would be beyond the scope of this repo. ",
      "@joshfriend this is a really needed PR for people who might not know how to trouble shoot this issue and fixes the tests you had asked me to fix in https://github.com/pyenv/pyenv/pull/1409.  ",
      "can this be merged please?",
      "Thank's for the review, I'll try to fix the mentioned issues once I find some spare time...\r\n\r\n#### Why not link against Xcode SDK?\r\nCiting from: [python.org](https://www.python.org/download/mac/tcltk/)\r\n>Apple 8.5.9\r\nThis release is included in macOS 10.7 through at least macOS 10.14. As of this writing, there are at least two known issues with Tk 8.5.9 that are present in Apple 8.5.9 Tk but fixed in more recent upstream 8.5 releases. The more serious problem is an immediate crash in Tk when entering a composition character, like Option-u on a US keyboard. (This problem is documented as Tk bug 2907388.) There is also the more general problem of input manager support for composite characters (Tk bug 3205153) which has also been fixed in more recent Tcl/Tk 8.5 releases. You can avoid these problems by using a current python.org installer or by using a third-party distribution of Python that does not use Apple 8.5.9 Tk.\r\n\r\n",
      "FYI: I squashed the intermediate commits for cleaner log-history"
    ],
    "commit_messages": [
      "allow tcl-tk as argument or try with homebrew by default Replacement for #1409 (#1646)\n\n* feat(python-build): allow tcl-tk as argument or default to homebrew\r\n* refactor(python-build): detect tcl-tk-libs from confugre_opts_arr"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4a144ee515ce6a4ac5e",
    "number": 1645,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n\r\nUses version of pyenv/pyenv/#1409\r\n",
    "head_branch": "tcl-homebrew-pr1409",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4a244ee515ce6a4ac5f",
    "number": 1644,
    "body": "Just put it on $fpath (Archlinux did it in default for pyenv).\r\n\r\nBy the way, this commit make pyenv zsh completion support [fzf-tab](https://github.com/Aloxaf/fzf-tab) @Aloxaf .\r\n\r\n![image](https://user-images.githubusercontent.com/9500049/85985739-b911f080-ba1d-11ea-840b-15381ec9d92a.png)\r\n\r\n### Description\r\n\r\nThis PR seems only involved to zsh completion.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "According to the discussion in #1458 the removal of the interactive check apparently breaks completion for people who use `git clone` or `pyenv-installer` instead of proper packages...\r\n\r\nThe following alternative is a bit more modern ~~and works fine even after running `eval \"$pyenv init -)\"` from `.zshrc`~~\r\n\r\n```zsh\r\n#compdef pyenv\r\nif [[ ! -o interactive ]]; then\r\n    return\r\nfi\r\n\r\nlocal state line\r\ntypeset -A opt_args\r\n\r\n_arguments -C \\\r\n    {--help,-h}'[Show help]' \\\r\n    {--version,-v}'[Show pyenv version]' \\\r\n    '(-): :->command' \\\r\n    '*:: :->option-or-argument'\r\n\r\ncase \"$state\" in\r\n    (command)\r\n        local -a commands\r\n        commands=(${(f)\"$(pyenv commands)\"})\r\n        _describe -t commands 'command' commands\r\n        ;;\r\n    (option-or-argument)\r\n        local -a args\r\n        args=(${(f)\"$(pyenv completions ${line[1]})\"})\r\n        _describe -t args 'arg' args\r\n        ;;\r\nesac\r\n\r\nreturn\r\n```\r\n\r\nAlso, it would be good to remove `--version` from the `pyenv commands` output so that it's not suggested twice:\r\n\r\n```\r\n❯ pyenv commands\r\ncommands\r\ncompletions\r\nexec\r\nglobal\r\nhelp\r\nhooks\r\ninit\r\ninstall\r\nlocal\r\nprefix\r\nrehash\r\nroot\r\nshell\r\nshims\r\nuninstall\r\n--version\r\nversion\r\nversion-file\r\nversion-file-read\r\nversion-file-write\r\nversion-name\r\nversion-origin\r\nversions\r\nwhence\r\nwhich\r\n```",
      "@adigitoleo You can suggest your version as a nested PR to either of the PRs. To do that, specify the PR branch as \"base branch\" when creating the nested PR.",
      "@native-api Thanks, let me know if I did something wrong (still learning github).",
      "@native-api Ah, you're right, good catch. This won't work for `pyenv-init` (not sure why I thought it would). We can pick one of:\r\n- special case for zsh in `pyenv-init`\r\n- let it be, and packagers will need to patch the completion file\r\n\r\nIt's a bit awkward, but I think the second option is probably best after all.",
      "I didn't quite understand what you mean:\r\n\r\n> * let it be, and packagers will need to patch the completion file\r\n\r\nDo \"packagers\" include _us?_ Keep in mind that Pyenv is designed to be usable from a Git checkout.\r\n\r\nI reckon if this new completion mechanism is incompatible with our needs, this just means we shouldn't be using it, right?",
      "> Do \"packagers\" include _us?_\r\n\r\nEven if they don't, it's not a good thing to make life harder for packagers without a good reason. (And \"just to use a new fancy tech that's not really any different from the old one\" hardly qualifies.)",
      "> Do \"packagers\" include _us?_\r\n\r\nNo, I meant to say distribution/OS packagers, sorry for the confusion.\r\n \r\n> Even if they don't, it's not a good thing to make life harder for packagers without a good reason. (And \"just to use a new fancy tech that's not really any different from the old one\" hardly qualifies.)\r\n\r\nUnfortunately, the current completion script does make life harder for _distro_ packagers. For example, the current Arch linux package installs the completion scripts into standard system directories, expecting them to be picked up by the respective shell's completion system. It seems that this isn't the case for the provided zsh completion script, which is what motivated me to suggest the version from my earlier comment.\r\n\r\nHowever, since my version breaks for the recommended installation method, I am happy for this to be closed.",
      "Whatever the proposed solution is, it cannot break the use cases that we ourselves recommend.\r\n\r\nIf the `compsys` way has some additional benefits, the proposition should support both.",
      "Is there a solution for this? I really want to have the fzf-tab completion work with pyenv. I installed via github checkout. I tried reading through the linked issues but I couldn't figure out what I'm meant to do",
      "As specified earlier, we need to support dynamic load of completions. If there's a way to plug a configuration file into `compsys` dynamically, we can very well use that.",
      "The best way would be to support both static and dynamic load of completions.",
      "I wanted to use the modern version to have selectable completion of the options and available versions, so I researched this and came up with the code below. The installation of this version is explained in the steps below.\r\n\r\nI have diverted from your completion in the following way:\r\n\r\n- only use pyenv to determine virtualenvs, available versions and installed versions (this is done once per session)\r\n- added the descriptions from the command line help for each option\r\n- stopped autocompletion when no more logical options or flags were required\r\n\r\nThis requires the `_pyenv` file to be on the `fpath` and to be invoked using `autoload` (see below)\r\n\r\nI am happy with the result and am sharing it here for others to use, even if it will not be added to the project.\r\n\r\n```bash\r\n#compdef pyenv\r\n# ------------------------------------------------------------------------------\r\n#\r\n# Description\r\n# -----------\r\n#  Completion script for the pyenv command\r\n#  (https://github.com/pyenv/pyenv)\r\n#\r\n# Authors\r\n# -------\r\n#\r\n#  * Christo Kotzé <onaforeignshore@gmail.com>\r\n#\r\n# ------------------------------------------------------------------------------\r\n\r\n# pyenv currently uses compctl completion.\r\n# To use this file instead, you need to do the following:\r\n# 1. Download this file and place it in a folder\r\n# 2. Make sure that this folder is available on the fpath\r\n# > fpath=(/new/folder $fpath)\r\n# 3. Remove the old completion system\r\n# > unfunction _pyenv\r\n# 4. Load this completion file\r\n# > autoload -U _pyenv\r\n#\r\n# Note:\r\n# You can add steps 2-4 in your .zshrc file to automate this.\r\n\r\ntypeset -A opt_args\r\nlocal state cmd\r\nlocal curcontext=\"$curcontext\"\r\n\r\n# populate lists\r\n(( ${+virtualenv} )) ||\r\nvirtualenvs=(${(f)\"$(pyenv virtualenvs --bare)\"})\r\n\r\n(( ${+availableVersions} )) || {\r\n    availableVersions=(${(f)\"$(pyenv install --list)\"#  })\r\n    shift availableVersions # remove 'Available versions:' header\r\n    availableVersions=( \"${availableVersions[@]//((#s)[[:space:]]##|[[:space:]]##(#e))/}\" ) # remove leading and trailing spaces\r\n}\r\n\r\n(( ${+installedVersions} )) ||\r\ninstalledVersions=(${(f)\"$(pyenv versions --bare)\"})\r\n\r\n\r\n_pyenv() {\r\n    local ret=1\r\n    \r\n    _arguments -A \"-*\" \\\r\n        '(- *)--help[Display help for a command]' \\\r\n        '1: :_pyenv_subcommands' \\\r\n        '*::arg:->args' \\\r\n    && ret=0\r\n    \r\n    if [[ \"$state\" == \"args\" ]]; then\r\n        local -a cmds=(\r\n            activate help install latest local shell shims uninstall\r\n            versions virtualenv virtualenv-delete virtualenvs whence which\r\n        )\r\n        cmds=( ${(M)cmds:#${words[1]}*} )\r\n        if (( ${#cmds} == 1 )) || [[ $cmds[1] = install ]]; then\r\n            cmd=\"$cmds[1]\"\r\n            curcontext=\"${curcontext%:*:*}:pyenv-${cmd}:\"\r\n            _call_function - _pyenv_${cmd//-/_} || _message 'no more arguments'\r\n        else\r\n            _message \"unknown pyenv command: $words[1]\"\r\n        fi\r\n    fi\r\n    \r\n    return ret\r\n}\r\n\r\n#####\r\n# Helper completers\r\n#\r\n\r\n(( $+functions[_pyenv_subcommands] )) ||\r\n_pyenv_subcommands() {\r\n    local -a commands=(\r\n        '--version:Display the version of pyenv'\r\n        'activate:Activate virtual environment'\r\n        'commands:List all available pyenv commands'\r\n        'deactivate:Deactivate virtual environment'\r\n        'exec:Run an executable with the selected Python version'\r\n        'global:Set or show the global Python version(s)'\r\n        'help:Display help for a command'\r\n        'hooks:List hook scripts for a given pyenv command'\r\n        'init:Configure the shell environment for pyenv'\r\n        'install:Install a Python version using python-build'\r\n        'latest:Print the latest installed or known version with the given prefix'\r\n        'local:Set or show the local application-specific Python version(s)'\r\n        'prefix:Display prefixes for Python versions'\r\n        'rehash:Rehash pyenv shims (run this after installing executables)'\r\n        'root:Display the root directory where versions and shims are kept'\r\n        'shell:Set or show the shell-specific Python version'\r\n        'shims:List existing pyenv shims'\r\n        'uninstall:Uninstall Python versions'\r\n        'version:Show the current Python version(s) and its origin'\r\n        'version-file:Detect the file that sets the current pyenv version'\r\n        'version-name:Show the current Python version'\r\n        'version-origin:Explain how the current Python version is set'\r\n        'versions:List all Python versions available to pyenv'\r\n        'virtualenv:Create a Python virtualenv using the pyenv-virtualenv plugin'\r\n        'virtualenv-delete:Uninstall a specific Python virtualenv'\r\n        'virtualenv-init:Configure the shell environment for pyenv-virtualenv'\r\n        'virtualenv-prefix:Display real_prefix for a Python virtualenv version'\r\n        'virtualenvs:List all Python virtualenvs found in `$PYENV_ROOT/versions/*`.'\r\n        'whence:List all Python versions that contain the given executable'\r\n        'which:Display the full path to an executable'\r\n    )\r\n    [[ $debug ]] && commands+=\"$curcontext\"\r\n    _describe -t commands 'command' commands \"$@\"\r\n}\r\n\r\n(( $+functions[_pyenv_help] )) ||\r\n_pyenv_help() {\r\n    _arguments -A \"-*\" \\\r\n    '(- *)--help[Display help for a command]' \\\r\n    '1: :_pyenv_subcommands'\r\n}\r\n\r\n(( $+functions[_pyenv_activate] )) ||\r\n_pyenv_activate() {\r\n    (( $CURRENT == 3 )) && return\r\n    [[ \"${words[2]}\" == \"--unset\" ]] && return\r\n    local -a args=(\r\n        '--unset[Unsets the activated virtualenv]'\r\n    )\r\n    _arguments -S -A \"-*\" $args[@]\r\n    _describe -t versions 'versions' virtualenvs \"$@\"\r\n}\r\n\r\n(( $+functions[_pyenv_install] )) ||\r\n_pyenv_install() {\r\n    if  [[ \"${words[2]}\" == \"--list\" ]] || \\\r\n        [[ \"${words[2]}\" == \"--version\" ]] || \\\r\n        [[ \"${words[2]}\" == \"-l\" ]] || \r\n        [[ \"${words[2]}\" == \"-v\" ]]; then\r\n            return\r\n    fi\r\n    local -a args=(\r\n        '(-l --list)'{-l,--list}'[List all available versions]'\r\n        '(-f --force)'{-f,--force}'[Install even if the version appears to be installed already]'\r\n        '(-s --skip-existing)'{-s,--skip-existing}'[Skip if the version appears to be installed already]'\r\n        '(-k --keep)'{-k,--keep}'[Keep source tree in $PYENV_BUILD_ROOT after installation (defaults to $PYENV_ROOT/sources)]'\r\n        '(-p --patch)'{-p,--patch}'[Apply a patch from stdin before building]'\r\n        '(-v --verbose)'{-v,--verbose}'[Verbose mode: print compilation status to stdout]'\r\n        '(-g --debug)'{-g,--debug}'[Build a debug version]'\r\n        '--version[Show version of python-build]'\r\n    )\r\n    _arguments -S -s $args[@]\r\n    _describe -t versions 'versions' availableVersions \"$@\"\r\n}\r\n\r\n(( $+functions[_pyenv_latest] )) ||\r\n_pyenv_latest() {\r\n    local -a args=(\r\n        '(-k --known)'{-k,--known}'[Select from all known versions instead of installed]'\r\n    )\r\n    local -a commands=(\r\n        '2'\r\n        '3'\r\n    )\r\n    _arguments -S $args[@]\r\n    _describe -t commands 'command' commands \"$@\"\r\n}\r\n\r\n(( $+functions[_pyenv_local] )) ||\r\n_pyenv_local() {\r\n    if [[ $words[2] != \"--unset\" ]]; then\r\n        local -a args=(\r\n            '(-f --force)'{-f,--force}'[Do not verify that the versions being set exist]'\r\n            '--unset[Unset the current version]'\r\n        )\r\n        _arguments -S $args[@]\r\n        _describe -t versions 'version' installedVersions \"$@\"\r\n    fi\r\n}\r\n\r\n(( $+functions[_pyenv_shell] )) ||\r\n_pyenv_shell() {\r\n    if [[ $words[2] != \"--unset\" ]]; then\r\n        local -a args=(\r\n            '-[Restore previously set version]'\r\n            '--unset[Unset `PYENV_VERSION` (restoring environment state to before first `pyenv shell` call)]'\r\n        )\r\n        _arguments -S $args[@]\r\n        _describe -t versions 'version' virtualenvs \"$@\"\r\n    fi\r\n}\r\n\r\n(( $+functions[_pyenv_uninstall] )) ||\r\n_pyenv_uninstall() {\r\n    local -a args=(\r\n        '(-f --force)'{-f,--force}'[Do not verify that the versions being set exist]'\r\n    )\r\n    _arguments -S $args[@]\r\n    _describe -t versions 'version' installedVersions \"$@\"\r\n}\r\n\r\n(( $+functions[_pyenv_versions] )) ||\r\n_pyenv_versions() {\r\n    local -a args=(\r\n        '--bare[Show paths only]'\r\n        '--skip-aliases[Do not show versions that are aliases]'\r\n        '--skip-envs[Do not show versions that are envs]'\r\n    )\r\n    _arguments -S $args[@]\r\n}\r\n\r\n(( $+functions[_pyenv_virtualenv] )) ||\r\n_pyenv_virtualenv() {\r\n    local -a args=(\r\n        '(-f --force)'{-f,--force}'[Install even if the version appears to be installed already. Skip prompting for confirmation]'\r\n        '--version[Show version of pyenv-virtualenv]'\r\n    )\r\n    _arguments -S $args[@]\r\n}\r\n\r\n(( $+functions[_pyenv_virtualenv_delete] )) ||\r\n_pyenv_virtualenv_delete() {\r\n    local -a args=(\r\n        '(-f --force)'{-f,--force}'[Attempt to remove the specified virtualenv without prompting for confirmation]'\r\n    )\r\n    _arguments -S $args[@]\r\n    _describe -t versions 'versions' virtualenvs \"$@\"\r\n}\r\n\r\n(( $+functions[_pyenv_virtualenvs] )) ||\r\n_pyenv_virtualenvs() {\r\n    local -a args=(\r\n        '--bare[Show paths only]'\r\n        '--skip-aliases[Do not show versions that are aliases]'\r\n    )\r\n    _arguments -S $args[@]\r\n}\r\n\r\n(( $+functions[_pyenv_whence] )) ||\r\n_pyenv_whence() {\r\n    local -a args=(\r\n        '(- *)--help[Display help for a command]'\r\n        '--path[List all Python versions that contain the given executable (show full path)]'\r\n    )\r\n    _arguments -S $args[@]\r\n}\r\n\r\n(( $+functions[_pyenv_which] )) ||\r\n_pyenv_which() {\r\n    local -a args=(\r\n        '(- *)--help[Display help for a command]'\r\n        '--nosystem[when you don''t need to search command in the\r\n        system environment]'\r\n    )\r\n    _arguments -S $args[@]\r\n}\r\n\r\n_pyenv \"$@\"\r\n```"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4a344ee515ce6a4ac60",
    "number": 1637,
    "body": "Consolidate the installation instructions to just source the automatic installer since the other installers are causing reports for all sorts of issues.  Why do there need to be more installation routes when the automatic installer or cloning from Git are totally sufficient?\r\n",
    "head_branch": "maint-update-readme",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4a444ee515ce6a4ac61",
    "number": 1629,
    "body": "This is just a fix to the README. Fixes the outbound homebrew link and the internal TOC link.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1629 from ghedsouza/patch-1\n\nFix homebrew link in README."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4a544ee515ce6a4ac62",
    "number": 1625,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "conduct-maintainers",
    "is_a_fork": true,
    "comments": [
      "There's only one maintainer now? :O",
      "nope, im here too",
      "Would be great if someone who knew who the maintainers actually are would push a fixed version of this PR :)",
      "looks like `@yyuu`, `@blueyed`, and myself `@joshfriend` on this main repo. Also @obestwalter on the plugin repos, not sure why he isnt added on this one.",
      "Added blueyed and joshfriend using email addresses from git logs, in order they were in your message.\r\n\r\nWould be good to apply this IMO even if it's bit-perfect (or let me know if there's something I could do, or just go ahead and modify the PR -- the branch is open for collaborators), it's certainly closer to the truth than the one currently in the repo.",
      "Hey, @yyuu added me a long time ago to the packaging maintainers. I am only sporadically using pyenv nowadays though. Still checking in **very** infrequently. So most honest thing would be to remove me from the maintainership, I guess."
    ],
    "commit_messages": [
      "CONDUCT.md: update maintainers (#1625)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4a544ee515ce6a4ac63",
    "number": 1620,
    "body": "This makes it easier to copy and paste commands from the README.\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nThis removes `$` in front of CLI commands so they can easily be copy and pasted.\r\n\r\nFor example, if you want to copy and paste the two lines for `PYENV_ROOT`, you have to copy them individually because you have to avoid the `$`. I think people will generally recognize the code blocks in monospace as commands to run.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n\r\nN/A",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "docs(README): removed $ in front of CLI commands (#1620)\n\nThis makes it easier to copy and paste commands from the README."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4a644ee515ce6a4ac64",
    "number": 1619,
    "body": "### Description\r\nAfter the beta release, `master` now points to `3.10`. `pyenv install 3.9-dev` is also failing because of a mismatch between the version number and the symlink (`python3.9`, I guess).\r\n\r\n### Tests\r\nNo tests added ­— are they needed for this?",
    "head_branch": "update_39",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1619 from pganssle/update_39\n\nUpdate 3.9-dev and add 3.10-dev"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4a744ee515ce6a4ac65",
    "number": 1617,
    "body": "Separating commands for each shell instead of notes to make instructions clearer.\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n       Moving instruction notes to actual copy-paste shell commands.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any) - No tests needed\r\n\r\n",
    "head_branch": "hotfix/update-readme",
    "is_a_fork": true,
    "comments": [
      "Already fixed."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4a844ee515ce6a4ac66",
    "number": 1616,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nRemove extra whitespace in quoted package_url#checksum string.\r\n\r\nPrevent the following error:\r\n```\r\n$ pyenv install stackless-3.7.5\r\nDownloading v3.7.5-slp.tar.gz...\r\n-> https://github.com/stackless-dev/stackless/archive/v3.7.5-slp.tar.gz\r\n\r\nBUILD FAILED (Ubuntu 18.04 using python-build 1.2.18-14-g5a96d9f)\r\n\r\nInspect or clean up the working tree at /tmp/python-build.20200517120717.3108\r\nResults logged to /tmp/python-build.20200517120717.3108.log\r\n\r\nLast 10 log lines:\r\n/tmp/python-build.20200517120717.3108 ~\r\n\r\nunexpected checksum length: 65 (e2562a8d235adc19be5451c170837f53ef916aec4cd5cd17d9e0ab1f1b875d3f )\r\nexpected 0 (no checksum), 32 (MD5), or 64 (SHA2-256)\r\n```\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "stackless-3.7.5-whitespace",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix stackless-3.7.5 python-build script (#1616)\n\nRemove extra whitespace in quoted package_url#checksum string.\r\n\r\nPrevent the following error:\r\n\r\n  unexpected checksum length: 65 (e2562a8d235adc19be5451c170837f53ef916aec4cd5cd17d9e0ab1f1b875d3f )\r\n  expected 0 (no checksum), 32 (MD5), or 64 (SHA2-256)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4a944ee515ce6a4ac67",
    "number": 1612,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/1610\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "add-python-3.8.3",
    "is_a_fork": true,
    "comments": [
      "@gotche Thank you!\r\n\r\n@joshfriend Are you planning a new release in a near future?",
      "Hey @m-aciek , you don't really need to wait for a release. If you install pyenv using the installer, and get all the plugins, you can use \r\n\r\n```bash\r\npyenv update\r\n```\r\n\r\nto pull the latest goodies",
      "@gotche I have homebrew's pyenv :(\r\n\r\nBut thank you for the message.",
      "Same. Sounds like a nice suggestion, if it's possible, to add this function `pyenv update` for use with the Homebrew install.",
      "@m-aciek @robertleeblairjr I have never used homebrew (or even a Mac, so please bear that in mind), what is preventing you from installing pyenv directly from source?",
      "Homebrew version of pyenv is provided as a convenience for our users. It's a bit annoying to have to tag releases and update the formula every time a new patch version of python comes out so I hope you can understand why it lags behind sometimes!\r\n\r\nI think there is a way to install via homebrew where it just clones the pyenv repo direclty instead of using the zip of the tag? \"Head only formula\" or something is what it's called I think.\r\n\r\nI always recommend the github checkout method for installation",
      "I'm on Brew's pyenv. How can I get update so that I can use 3.8.3?",
      "Remove the brew version and then install from source.",
      "> Homebrew version of pyenv is provided as a convenience for our users. It's a bit annoying to have to tag releases and update the formula every time a new patch version of python comes out so I hope you can understand why it lags behind sometimes!\r\n\r\nThis is completely understandable!\r\n\r\nThe readme currently suggests installing pyenv using homebrew for os x. should we change that recommendation? or recommend installing `--head` (does master tend to be stable enough for that)\r\n\r\nlonger term, would it be feasible to split the installation recipes from the bundle so they can change without releasing a new version?",
      "I've frowned upon homebrew installation for pyenv ever since homebrew maintainers forced everyone to remove the caveats section from their formulae which is how those users were previously reminded to add `pyenv-init` to their shells.\r\n\r\n> does master tend to be stable enough for that\r\n\r\nProbably, releases just happen whenever things people wanted get merged and one of us gets spare time.\r\n\r\n> would it be feasible to split the installation recipes from the bundle\r\n\r\nnodenv took that route, and as a user I was always frustrated that after installing nodenv, I would not be able to install any versions of node. If the versions list was auto installed with pyenv, it would probably be fine though. I really honestly like that idea. "
    ],
    "commit_messages": [
      "Add CPython 3.8.3 (#1612)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4a944ee515ce6a4ac68",
    "number": 1603,
    "body": "The test `\"prefix for system in /\"` is duplicated in [test/prefix.bats](test/prefix.bats). Both tests are completely identical. This commit removes the duplicate.\r\n\r\nIt appears that the culprit is this merge from `rbenv/master`, from 2016: cf1beda36248be9b0b0ff0913cca03a51d4572e5\r\n\r\nWith the current development version of bats, this leads to the following error when running `make test` (note that the development version is what pyenv's Makefile uses):\r\n\r\n```\r\nError: Duplicate test name(s) in file \"/home/travis/build/pyenv/pyenv/test/prefix.bats\": test_prefix_for_system_in_-2f\r\n```\r\n\r\nWith the latest release of bats, the duplication only leads to a warning:\r\n\r\n```\r\nbats warning: duplicate test name(s) in /src/test/prefix.bats: test_prefix_for_system_in_-2f\r\n```\r\n\r\nSee also #1602 \r\n\r\nPlease note that the checks for this PR fail because of the issue addressed by #1602 ",
    "head_branch": "fix-merge",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix duplicate test in prefix.bats due to bad merge (#1603)\n\nThe test \"prefix for system in /\" is duplicated in test/prefix.bats.\r\nBoth tests are completely identical. This commit removes the\r\nduplication.\r\n\r\nIt appears that the culprit is this merge from rbenv/master, from 2016:\r\n\r\n  cf1beda36248be9b0b0ff0913cca03a51d4572e5\r\n\r\nWith the current development version of bats, this leads to the\r\nfollowing error when running `make test`:\r\n\r\n  Error:\r\n  Duplicate test name(s) in file\r\n  \"/home/travis/build/pyenv/pyenv/test/prefix.bats\":\r\n  test_prefix_for_system_in_-2f\r\n\r\nNote that the development version is what pyenv's Makefile uses. With\r\nthe latest release of bats, the duplication only leads to a warning:\r\n\r\n  bats warning:\r\n  duplicate test name(s) in /src/test/prefix.bats:\r\n  test_prefix_for_system_in_-2f"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4aa44ee515ce6a4ac69",
    "number": 1602,
    "body": "pyenv's Makefile currently runs bats from its master branch. Pin bats to its latest release (1.2.0 - 2020-04-25) instead. This fixes the following error when running `make test` in CI:\r\n\r\n```\r\n/src/bats/libexec/bats-core/bats-exec-file: line 192: bats-exec-test: command not found\r\n```\r\n\r\nThe master branch of bats is currently at the following commit:\r\n\r\n  bats-core/bats-core@b615ed8f750e45017b1ad070ef893d1e2552633a\r\n\r\nBeyond this specific breakage, using the master branch of bats appears problematic: The master branch is inherently unstable. Also, pyenv's CI is more deterministic if it pins tools to a specific version.",
    "head_branch": "pin-bats",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix CI by pinning bats to the latest release (1.2.0) (#1602)\n\n* Pin bats to the latest release (1.2.0)\r\n\r\nThis fixes the following error when running `make test` with bats\r\ninstalled from its master branch:\r\n\r\n  /src/bats/libexec/bats-core/bats-exec-file:\r\n  line 192:\r\n  bats-exec-test:\r\n  command not found\r\n\r\nThe Makefile currently runs bats from its master branch. This can lead\r\nto errors when bats is broken between releases, as is currently the case\r\nwith bats at the following commit:\r\n\r\n  bats-core/bats-core@b615ed8f750e45017b1ad070ef893d1e2552633a\r\n\r\nInstead, use the latest release of bats, which is 1.2.0 (2020-04-25).\r\n\r\n* Pin bats to latest release on Travis CI"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4ab44ee515ce6a4ac6a",
    "number": 1601,
    "body": "- Add CPython 3.9.0a6, the last alpha for Python 3.9.\r\n- Remove CPython 3.9.0a5.\r\n",
    "head_branch": "cpython-3.9.0a6",
    "is_a_fork": true,
    "comments": [
      "Awesome, thanks! \r\n\r\nThere are some really cool new PEPs in this version!"
    ],
    "commit_messages": [
      "Update cpython 3.9.0 to latest alpha (3.9.0a6) (#1601)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4ac44ee515ce6a4ac6b",
    "number": 1599,
    "body": "# Description\r\nThis update removes several clicks from installation workflow of new MacOS users. I've seen users encounter problems because they did not fully complete the install steps; this update endeavors to help the user do the right thing.",
    "head_branch": "readme-updates",
    "is_a_fork": true,
    "comments": [
      "Good call on placing that at the front of the instructions"
    ],
    "commit_messages": [
      "improve the flow of macOS installation instructions (#1599)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4ad44ee515ce6a4ac6c",
    "number": 1598,
    "body": "### Description\r\nThis PR updates the documentation to include installation via ZPlug plugin.\r\n\r\nThe plugin at https://gitlab.com/RiverGlide/zsh-pyenv.git is pretty straightforward, and would be a good candidate for bringing under the pyenv organisation.\r\nIt uses git submodules to checkout pyenv, and the plugin file itself adds pyenv and pyenv-install to the path as well as calling `eval $(pyenv init -)`\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Not going to merge this because the plugin is not maintained or used by any of the pyenv maintainers. I also see that it installs pyenv as a git submodule and is therefore locked to a specific version of the repo (which we cant change)\r\n\r\nI've created a new wiki page for the wild west of alternate install methods, and copied your suggestion into it: https://github.com/pyenv/pyenv/wiki/Alternate-Installation-Methods"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4ae44ee515ce6a4ac6d",
    "number": 1596,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "@yyuu @blueyed does this change make it more difficult to merge from rbenv?",
      "I think they are imported from https://github.com/rbenv/ruby-build, and, we have left them as is since they are dead code path from python-build’s point of view. These dead lines maybe help generating meaningful diff when importing changes from ruby-build, but maybe not. I an okay to remove them all."
    ],
    "commit_messages": [
      "Remove Ruby references from python-build (#1596)\n\n* Remove Ruby references from python-build\r\n\r\n* restore fix_directory_permissions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4ae44ee515ce6a4ac6e",
    "number": 1594,
    "body": "Adds support for installing GraalPython through pyenv.\r\n\r\nThe script is intentionally kept generic enough for both our -dev and release builds.",
    "head_branch": "add-graalpython",
    "is_a_fork": true,
    "comments": [
      "Hi, do you need anything else from me to get this merged?",
      "Any news about this?",
      "will be happy to get this feature =)",
      "@joshfriend friendly ping :)\r\nCan I do anything to help get this merged? I could also extend this PR to include the just released 20.2 version, but not sure if that will help or delay merging the PR :)",
      "Hi @joshfriend, I updated the PR to point not to a dev build, but instead to the last two releases of Python on GraalVM. I'm hoping that this might be more agreeable than including some arbitrary dev build. Let me know if there's anything I can do to help get this merged :-)",
      "@joshfriend friendly ping :) please let me know if I can make it easier to get this merged.",
      "Sorry for the delay, I've had a busy summer preparing for my first child, I am trying to get through the PR backlog now though"
    ],
    "commit_messages": [
      "Add Graalpython 20.1.0 and 20.2.0 (#1594)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4af44ee515ce6a4ac6f",
    "number": 1593,
    "body": "Adding the Python v2.7.18 release. Bats tests still pass, tested the install in an Ubuntu 19.10 VM.",
    "head_branch": "add-cpython-2.7.18",
    "is_a_fork": true,
    "comments": [
      "Thanks! ❤️ "
    ],
    "commit_messages": [
      "Add CPython v2.7.18. (#1593)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4b044ee515ce6a4ac70",
    "number": 1591,
    "body": "### Description\r\n\r\nAdded improved message printing when uninstalling a python version.\r\n",
    "head_branch": "printing-improvements",
    "is_a_fork": true,
    "comments": [
      "Seems good, but it broke a test case. If you fix that I'll merge it.",
      "Gotcha. Fixed the test.",
      "Thanks! ❤️ "
    ],
    "commit_messages": [
      "Improved messages for uninstall (#1591)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4b144ee515ce6a4ac71",
    "number": 1590,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nlinux64 tested only.\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "pypy731",
    "is_a_fork": true,
    "comments": [
      "Ah, #1586 beat me to it"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4b244ee515ce6a4ac72",
    "number": 1589,
    "body": "### Description\r\nThis PR adds stackless 3.7.5.\r\n\r\n### Tests\r\nThis build script was tests on my workstation (Ubuntu 18.04)\r\n",
    "head_branch": "stackless-3-7-5",
    "is_a_fork": true,
    "comments": [
      "Thanks! ❤️ "
    ],
    "commit_messages": [
      "add stackless 3.7.5 (#1589)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4b244ee515ce6a4ac73",
    "number": 1587,
    "body": "### Description\r\n\r\nThe tarballs for MicroPython 1.12 were changed as a result of  micropython/micropython#5884\r\n\r\nSo currently the old SHA2 values in [`plugins/python-build/share/python-build/micropython-1.12`](https://github.com/pyenv/pyenv/blob/master/plugins/python-build/share/python-build/micropython-1.12) cause the install to fail, like so:\r\n\r\n```\r\n$ pyenv install micropython-1.12\r\n...\r\nchecksum mismatch: micropython-1.12.tar.gz (file is corrupt)\r\nexpected be2041924496f49b580f06c2d328c7757bbc7b62408abb11841ebeb87302c575, got 98fd02366bca23a61c77bbf2b999a45cfc237132db66b5b0874378a5446d81ba\r\n```\r\n\r\nThis pull request updates the SHA2 values to correspond to the latest tarballs and so fixes this issue.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated sha2 values for micropython-1.12 after tarball updates. (#1587)\n\nSee https://github.com/micropython/micropython/issues/5884"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4b344ee515ce6a4ac74",
    "number": 1586,
    "body": "Adds support for PyPy 7.3.1, in both source and binary forms, and in both 2.7 and 3.6 variations.  This was adapted directly from the 7.3.0 support scripts.\r\n",
    "head_branch": "pypy-7.3.1",
    "is_a_fork": true,
    "comments": [
      "Any updates on this?"
    ],
    "commit_messages": [
      "pypy 7.3.1 support (#1586)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4b444ee515ce6a4ac75",
    "number": 1584,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add anaconda3-2020.02 (#1584)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4b544ee515ce6a4ac76",
    "number": 1583,
    "body": "Bash example had a missing quote for setting PYENV_ROOT path\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n\r\n  - https://github.com/pyenv/pyenv/issues/1582\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Thank you for fixing this!"
    ],
    "commit_messages": [
      "Fixes missing double quote in README #1582 (#1583)\n\nBash example had a missing quote for setting PYENV_ROOT path"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4b644ee515ce6a4ac77",
    "number": 1580,
    "body": "Describe more clear for different shells.\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any) (no)\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n  Now we have instructions for Fish Shell.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any) (no)\r\n",
    "head_branch": "update_instructions_for_installation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update instructions for installation in README (#1580)\n\nDescribe more clearly for different shells."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4b744ee515ce6a4ac78",
    "number": 1578,
    "body": "https://www.openssl.org/source/openssl-1.0.2*\r\n  => https://www.openssl.org/source/old/1.0.2/openssl-1.0.2*\r\n\r\nhttps://www.openssl.org/source/openssl-1.1.0*\r\n  => https://www.openssl.org/source/old/1.1.0/openssl-1.1.0*\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [X] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  N/A\r\n* [X] Please consider contributing the patch upstream to [rbenv]\r\n  N/A\r\n* [X] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/1577\r\n\r\n### Description\r\n- [X] Here are some details about my PR\r\n\r\nUpdated all OpenSSL download URLs for openssl-1.0.2 and openssl-1.1.0 releases, as they have been moved into an \"old\" folder on the server.\r\n\r\n### Tests\r\n- [X] My PR adds the following unit tests (if any)\r\n\r\nNew tests not required. I verified the updated download URL works for python-2.7.17",
    "head_branch": "update-openssl-urls",
    "is_a_fork": true,
    "comments": [
      "awesome, thanks!",
      "Thank you for the quick turnaround!"
    ],
    "commit_messages": [
      "Update download URLs for old OpenSSL releases (#1578)\n\nhttps://www.openssl.org/source/openssl-1.0.2*\r\n  => https://www.openssl.org/source/old/1.0.2/openssl-1.0.2*\r\n\r\nhttps://www.openssl.org/source/openssl-1.1.0*\r\n  => https://www.openssl.org/source/old/1.1.0/openssl-1.1.0*\r\n\r\nCo-authored-by: Sean Gies <seangies@apple.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4b744ee515ce6a4ac79",
    "number": 1576,
    "body": "Add sed pipeline to strip colored 'ls' command output on macos color enabled 'ls' (CLICOLOR, CLICOLOR_FORCE)\r\nand use original 'ls' command\r\n\r\n\r\n",
    "head_branch": "symlink-patch",
    "is_a_fork": true,
    "comments": [
      "@juniac Are there any stock configurations that have `CLICOLOR_FORCE` set? In the MacOS versions that I tried, it isn't.\r\nAnd whoever sets it on their own volition is shooting themselves in the foot since colors are disabled for non-tty output specifically to not break output processing."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4b844ee515ce6a4ac7a",
    "number": 1570,
    "body": "closes  #1563, closes #1569  \r\nEnvs and Path is merged to symlink format ( Env -> OrginalPath ).  \r\n```\r\nnkpro@SR:~$ pyenv versions\r\n* system  (set by PYENV_VERSION environment variable)\r\n  3.6.10 \r\n  3.7.7 \r\n  venv37 -> 3.7.7/envs/venv37\r\nnkpro@SR:~$ pyenv shell venv37\r\n(venv37) nkpro@SR:~$ pyenv versions\r\n  system \r\n  3.6.10 \r\n  3.7.7 \r\n* venv37 -> 3.7.7/envs/venv37 (set by PYENV_VERSION environment variable)\r\n(venv37) nkpro@SR:~$ pyenv versions --skip-aliases\r\n  system \r\n  3.6.10 \r\n  3.7.7 \r\n* 3.7.7/envs/venv37 (set by PYENV_VERSION environment variable)\r\n```\r\n> output of `pyenv versions --bare` and `pyenv versions --bare --skip-aliases` are same as before.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "This fixes still has the following problems:  When using the tab-completion for pyenv shell/local/global, the entries in the completion list still include all of them.  I think maybe filter out the symlink's source.\r\n\r\nRegares\r\n\r\n",
      "@nkpro2000sr I tried this commit:https://github.com/pyenv/pyenv/pull/1570/commits/77efd5ebc22fbb1d16583ddf7006e6563eec56e4\r\n\r\nIt cannot fix the problem of tab-completion discussed above:\r\n\r\n```\r\n$ pyenv local <tab>\r\n3.8.1/envs/hpc\r\n[...]\r\nhpc\r\n[...]\r\n```\r\n\r\nRegards\r\n\r\n",
      "> This fixes still has the following problems: When using the tab-completion for pyenv shell/local/global, the entries in the completion list still include all of them. I think maybe filter out the symlink's source.\r\n> \r\n> Regares\r\n\r\nbut tab-completion has to show all the possibilities.  \r\nThough `pyenv global 3.7` and `pyenv global 3.7.7/envs/3.7` are the same,  \r\nstill we can do both.\r\nmaybe setting an environmental variable for that will be nice :+1: .\r\n\r\nwhat do you think?",
      "[this commit](https://github.com/pyenv/pyenv/pull/1570/commits/77efd5ebc22fbb1d16583ddf7006e6563eec56e4) is for an bug that `-->` is include is tab-completion suggestion.",
      "> > This fixes still has the following problems: When using the tab-completion for pyenv shell/local/global, the entries in the completion list still include all of them. I think maybe filter out the symlink's source.\r\n> > Regares\r\n> \r\n> but tab-completion has to show all the possibilities.\r\n> Though `pyenv global 3.7` and `pyenv global 3.7.7/envs/3.7` are the same,\r\n> still we can do both.\r\n> maybe setting an environmental variable for that will be nice +1 .\r\n\r\nI thinks it will be more usable to let the tab-completion displays in the same manner as the ''pyenv versions'' do.  But as you told above, the tab-completion has to show all the possibilities, it seems my suggestion is impossible with the tab-completion method.\r\n\r\nAnother suggestion:\r\n\r\nOr let the tab-completion display the symlinked env-name as following:\r\n\r\n`symlink(-->symlink-src)`\r\n\r\n\r\nRegards \r\n\r\n\r\n\r\n\r\n> \r\n> what do you think?\r\n\r\n",
      "> [this commit](https://github.com/pyenv/pyenv/pull/1570/commits/77efd5ebc22fbb1d16583ddf7006e6563eec56e4) is for an bug that `-->` is include is tab-completion suggestion.\r\n\r\nI've checked out this.\r\nThanks. ",
      "> Another suggestion:\r\n> Or let the tab-completion display the symlinked env-name as following:\r\n> `symlink(-->symlink-src)`\r\n> \r\n> Regards\r\n\r\nI think the display_command and the actual_command must be the same.  \r\nif we display 3.7(-->3.7.7/envs/3.7), then tab-completion will fill the same (eg: `pyenv global 3.7(-->3.7.7/envs/3.7)`) which leads to syntax error.\r\n\r\nMaybe there will be any other way to make it possible :smiley_cat: .  \r\nIf you know how to do this. I am glad to implement it :+1: .",
      "@nkpro2000sr I also have no idea to do that.  But fortunately, the currently fix by you already seems pretty good. ",
      "I personally am opposed to these changes as they break the current API surface. I for one script `pyenv` using the `--skip-aliases` option, and its removal would be quite disruptive to me, and presumably many other users.",
      "@neersighted Just do little adjustments for your code, it's easy, from my point of view.",
      "What is disruptive about removing an option/changing default behavior without any sort of deprecation period is fragmentation. My scripts would have to check for both options over a period of several months at least -- and I can imagine the half-life of some Docker images is even longer. As such I really dislike breaking the existing API.",
      "@neersighted Most of the APIs calls use '--bare' and i didn't changed it except skipping aliases by default. which is no need since real path is showing for '--bare' (i think).",
      "New approach without breaking the existing API :smile_cat: ",
      "@nkpro2000sr It seems this method is buggy and problematic for the case I posted here:\r\n\r\nhttps://github.com/pyenv/pyenv/issues/1592\r\n\r\nAnyway, it seems the currently used method in pyenv is more robust.\r\n\r\nRegards",
      "> @nkpro2000sr It seems this method is buggy and problematic for the case I posted here:\r\n> \r\n> #1592\r\n> \r\n> Anyway, it seems the currently used method in pyenv is more robust.\r\n> \r\n> Regards\r\n\r\nI read your issue, but I don't think the error is because of this method.  \r\nCould you try again with the original [pyenv-versions](https://github.com/pyenv/pyenv/blob/master/libexec/pyenv-versions).  \r\n> replace the current pyenv-versions in .pyenv/libexec with the original one.",
      "@nkpro2000sr It seems the problem is caused by two envs in the path i.e.,` $PYENV_ROOT/versions/*/envs/*/envs/*` is problematic.\r\n\r\nthe symlink method only works for this form:\r\n`$PYENV_ROOT/versions/*/envs/*`\r\n\r\nThe original https://github.com/pyenv/pyenv/blob/master/libexec/pyenv-versions also has this problem.\r\n\r\nOTOH, this type of path is lengthy and not so good, I've discarded this type of virtualenvs and\r\nset the following option for conda in ~/.condarc:\r\n\r\n```\r\nenvs_dirs:\r\n  - $HOME/.pyenv/versions\r\n```\r\n\r\nFinally put all of the virtuenenvs at this location:  `$PYENV_ROOT/versions/*/envs/`.\r\n\r\nRegards"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4b944ee515ce6a4ac7b",
    "number": 1558,
    "body": "add python-build script for anaconda3-2020.02\r\n\r\nSee here for hashes for all files:\r\n\r\nhttps://docs.anaconda.com/anaconda/install/hashes/all/\r\n\r\n\r\n\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "This has fragments from multiple other unrelated PRs, so I cannot merge it",
      "@joshfriend It's used by me for private purpose. If you wish, I can make another PR on the top of official pyenv:master"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4ba44ee515ce6a4ac7c",
    "number": 1555,
    "body": "Update the bats link to https://github.com/bats-core/bats-core (which is what pyenv is actually using on [Travis](https://github.com/pyenv/pyenv/blob/master/.travis.yml#L35))\r\n\r\nTechnically, the link is an artifact of upstream (rbenv), but rbenv is still using the the [old bats](https://github.com/rbenv/rbenv/blob/master/.github/workflows/ci.yml#L15), so without also updating rbenv to bats-core it wouldn't make sense to have this README update be PR against upstream.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update README.md (#1555)\n\nUpdate the bats link to https://github.com/bats-core/bats-core (which is what pyenv is actually using on [Travis](https://github.com/pyenv/pyenv/blob/master/.travis.yml#L35))"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4bb44ee515ce6a4ac7d",
    "number": 1554,
    "body": "Fixes #623\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] ~~Please consider implementing the feature as a hook script or plugin as a first step.~~\r\n  * N/A\r\n* [ ] ~~Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.~~\r\n  * N/A rbenv's [version-file-read](https://github.com/rbenv/rbenv/blob/master/libexec/rbenv-version-file-read) doesn't use a sed regex\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/623\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\nAs reported in #623, there are two test failures when running `bats test` on macOS:\r\n\r\n```\r\nnot ok 98 reads only the first word from file\r\n# (from function `assert_equal' in file test/test_helper.bash, line 65,\r\n#  from function `assert_output' in file test/test_helper.bash, line 74,\r\n#  from function `assert_success' in file test/test_helper.bash, line 49,\r\n#  in test file test/version-file-read.bats, line 41)\r\n#   `assert_success \"3.3.5\"' failed\r\n# expected: 3.3.5\r\n# actual:   3.3.5:2.7.6:hi\r\nnot ok 99 loads *not* only the first line in file\r\n# (from function `assert_equal' in file test/test_helper.bash, line 65,\r\n#  from function `assert_output' in file test/test_helper.bash, line 74,\r\n#  from function `assert_success' in file test/test_helper.bash, line 49,\r\n#  in test file test/version-file-read.bats, line 50)\r\n#   `assert_success \"2.7.6:3.3.5\"' failed\r\n# expected: 2.7.6:3.3.5\r\n# actual:   2.7.6:one:3.3.5:two\r\n```\r\n\r\nThis is because of differences in GNU sed and BSD sed (below, `gsed` is GNU sed and `sed` is BSD sed):\r\n\r\n```console\r\n$ echo \"2.7.17 3.8\" | gsed 's/^\\s*\\(\\S\\+\\).*/\\1/'\r\n2.7.17\r\n$ echo \"2.7.17 3.8\" | sed 's/^\\s*\\(\\S\\+\\).*/\\1/'\r\n2.7.17 3.8\r\n```\r\n\r\nThe fix is to use POSIX character sets for whitespace/non-whitespace:\r\n\r\n```console\r\n$ echo \"2.7.17 3.8\" | gsed 's/[[:space:]]*\\([^[:space:]^[:space:]]*\\).*/\\1/'\r\n2.7.17\r\n$ echo \"2.7.17 3.8\" | sed 's/[[:space:]]*\\([^[:space:]^[:space:]]*\\).*/\\1/'\r\n2.7.17\r\n```\r\nFYI, I found this reference to be the most useful guide for fixing this:\r\nhttps://www.grymoire.com/Unix/Regular.html#uh-13\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "version-file-read-posix-sed",
    "is_a_fork": true,
    "comments": [
      "i still can't run bats on my mac without errors:\r\n\r\n```\r\n/usr/bin/readlink: illegal option -- f\r\nusage: readlink [-n] [file ...]\r\n/Users/josh/.pyenv/bats/libexec/bats-core/bats: line 171: exec: bats-exec-suite: not found\r\n/Users/josh/.pyenv/bats/libexec/bats-core/bats: line 171: bats-format-tap-stream: command not found\r\n```\r\n\r\nFix is to install coreutils with homebrew: https://github.com/bats-core/bats-core/issues/233#issuecomment-528832459\r\n\r\nAny thoughts on that?"
    ],
    "commit_messages": [
      "pyenv-version-file-read: use POSIX character sets (#1554)\n\nFixes #623"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4bc44ee515ce6a4ac7e",
    "number": 1553,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - N/A\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nAdds support for cpython 3.7.7 which was officially released on March 10th, 2020.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n\r\nI did a quick test on my local ubuntu 18.04 system and it installed, ran some code, and uninstalled without issue.\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.7.7 (#1553)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4bc44ee515ce6a4ac7f",
    "number": 1551,
    "body": "Reasoning in the attempted discussion issue #1360 . Paraphrased:\r\n\r\nIt would be nice if calling pyenv install miniconda-{version} produced the same result every time. Pyenv obviously can't guarantee that the upstream artifacts won't change, but one situation where it could attempt to mitigate non-determinism is `miniconda-latest`.\r\n\r\nMiniconda-latest is a problem mainly because the resulting version ends up named miniconda-latest on the user's machine. Without the context of when that was installed, the user doesn't actually know what version it is.",
    "head_branch": "remove-latest",
    "is_a_fork": true,
    "comments": [
      "Any particular justification for the close? If you could also stick it in the linked discussion issue for posterity, that would be great.",
      "@clbarnes Each user decides for himself the issue of the consistency of his working environment. How about, for example, python 3.10-dev (building from github sources)? We need to remove them too?\r\nIn any way, this a discussable question  - to delete, or not to delete...",
      "> How about, for example, python 3.10-dev (building from github sources)? We need to remove them too?\r\n\r\nI mean, maybe?\r\n\r\n>  In any way, this a discussable question - to delete, or not to delete...\r\n\r\nTotally agreed! That's why I raised the linked discussion issue. I didn't raise this PR for another 9 months. Exactly as you say, it's discussable, which is why I requested feedback when it was closed without comment."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4bd44ee515ce6a4ac80",
    "number": 1549,
    "body": "### Description\r\n\r\n[22K+ projects](https://github.com/search?l=&q=filename%3A.python-version&type=Code) define their own `.python-version` files in their source code, version-controlled.\r\n\r\nThis file supposed to be an environment configuration, which is individual to every developer and their habits/preferences. A strict Python version to be used in a project can be opinionated. For actual code restrictions, `python_requires=\"==3.8.1\"` of `setup.py` should be used.\r\n\r\nThis also breaks workflows when plugins like `pyenv-virtualenv` are used, with their own named versions instead of numeric Pythons. Having a fixed numeric Python version in a project assumes that all dependencies will be installed into that binary Python build instead of virtualenvs — for all projects that rely on this Python version.\r\n\r\nWith this PR, the developers will have an option to ignore the recommended Python versions in `.python-version` file of every project, and configure their own dot-file name to use by setting `PYENV_VERSION_FILENAME` on their workstations.\r\n\r\n_The variable name looks not so good, can be discussed._\r\n\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "customized-dotfilename",
    "is_a_fork": true,
    "comments": [
      "My (admittedly somewhat unfeeling) personal opinion:\r\n\r\n22,000 projects are wrong, and when they figure that out because their development environments start showing problems, they'll delete the file, stick it in the gitignore, and everyone will be better off for it with next to no effort on their part. I suspect that you'd find thousands of projects with vim swap files and git merge temporary files committed too, but it's not up to the vim and git developers to overcomplicate their product because people aren't using the *existing* version of it correctly.\r\n\r\nProject-local environment variables are probably defined in a gitignored `.env` file. 6.4 million projects have committed those to source control. I look forward to the PR allowing you to set an environment variable which specifies which environment variable specifies which python version file to look for :)",
      "@clbarnes Do they also put local paths like `/Users/nolar/src/…` into git-committed `.env`?\r\n\r\nPrecise patch-versions of Python are too specific to a local environment and configuration of a workstation: some versions can be installed, some are not. Do I really need _all_ Python versions if I have many repos locally, or `3.8.1` is enough for all `>=3.8,<3.9` projects?\r\n\r\nSpecific binary builds like `3.8.1` as de-facto virtualenvs are problematic too, as long as they will be shared by 2+ projects that decided to pin that exact version for no reason. Can you find an ironic equivalent of such a dependency mess created by `.env` files without any way to opt out of this madness?\r\n\r\n**PS:** I do not insist this is the only right way. This PR is just a proposal how to allow people to opt out of implied dependency restrictions, while still using pyenv as the best management tool for binary Pythons and virtualenvs on their workstations.",
      "I completely agree with all of your points about why projects shouldn't commit `.python-version` to source control. IMO, the solution is to not do that, and for developers who understand what the file is for to raise PRs with well-reasoned and objectively correct descriptions.",
      "`.python-version` in version control has the same intent as `*.lock` files in version control: they attempt to enforce the exact same configuration for all installations.\r\n\r\nYes, they are very restrictive. This is why Pipenv [advises to place `Pipfile` under version contol but not place `Pipfile.lock` under version control -- _if the project allows multiple Python versions to be used_](https://pipenv-fork.readthedocs.io/en/latest/basics.html#general-recommendations-version-control)_._\r\nOTOH [Ruby Bundle does advise to place `Gemfile.lock` under version control](https://bundler.io/rationale.html#a-simple-bundler-workflow) -- allegedly because web applications that it's primarily used for are more widely used and typically installed automatically to production using the same Bundle tool -- so they feel they want to babysit the bulk of their users and enforce the exact configuration in which the project had been tested.\r\nAs you can see, there are legitimate reasons to want to enforce a specific version and it's thus up to every project to decide that.\r\n\r\n> Precise patch-versions of Python are too specific to a local environment and configuration of a workstation\r\n\r\nThat's a call to rather add a second kind of \"non-scrict\" `.python-version` files analogous to `Pipfile`. Pyenv then would need to pick a satisfying version somehow (and ensure that it stays the same until the user wants to change it -- so write a \"strict\" `.pyenv-version` after picking just like Pipenv does).\r\n\r\n> **PS:** I do not insist this is the only right way. This PR is just a proposal how to allow people to opt out of implied dependency restrictions, while still using pyenv\r\n\r\nYou already can opt out by setting the `PYENV_VERSION` envvar which overrides any version derived from CWD.",
      "> You already can opt out by setting the `PYENV_VERSION` envvar which overrides any version derived from CWD.\r\n\r\nIf you wish a more permanent approach to using the codebase contrary to its maintainer's wishes (while still using the same version control) -- you go the route of https://softwareengineering.stackexchange.com/questions/214614/how-to-maintain-a-forked-git-repo-with-feature-branches-that-upstream-wont-pull like with any other changes that upstream won't accept.",
      "There's yet another downside to an envvar. It will affect _all_ projects, not just the one that you have a problem with.",
      "Closing since you can already do what you want -- and with an envvar, too -- and due to other downsides stated above.\r\n\r\nIf you want to automatically set it whenever you're in a specific subtree, you can e.g. use https://github.com/cxreg/smartcd for that."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4be44ee515ce6a4ac81",
    "number": 1548,
    "body": "An alternative to #1547 (see there for more discussion).\r\n\r\nPick this one if you want a faster spin up -> build python -> destroy environment cycle. Pick vagrant if you want to be able to make changes to your build script, have them persisted outside of the container, and re-test in the same container.",
    "head_branch": "docker",
    "is_a_fork": true,
    "comments": [
      "### Possible extension\r\n\r\nHave travis check whether a commit has more versions than master, and if so, try to build every one of them. It may take a while but it will prove that new additions work. ",
      "On the testing point, you can test all new or changed versions compared to master with\r\n\r\n```sh\r\nset -e\r\nset -x\r\n\r\ndocker build -t test-container .\r\n\r\ngit diff --name-only master \\\r\n  | grep '^plugins/python-build/share/python-build/' \\\r\n  | awk -F '/' '{print $NF}' \\\r\n  | xargs -I _ docker run test-container pyenv install _\r\n```",
      "Would be great to get a review on this! @yyuu ? I found it invaluable for testing new miniconda builds when I added a bunch a while back. The above bash script could potentially go it into CI for new build scripts.",
      "I'd love to get this reviewed - @joshfriend @chrahunt , maybe? Not really sure how to move this forward.\r\n\r\nWhen I was working on bulk-contributing new versions previously, nobody was able to answer how to test that they work \"en masse\". I *still* don't know how people are testing newly submitted versions. This represents a drastic improvement whatever that testing workflow is, and doesn't seem to add much maintenance overhead."
    ],
    "commit_messages": [
      "Docker config for testing python-build (#1548)\n\n* Dockerfile for testing python builds\r\n\r\n* README: document docker usage\r\n\r\n* Finish docker\r\n\r\ndockerignore file, specify ephemeral nature of containers.\r\n\r\n* Move docs for docker usage to python-build README"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4bf44ee515ce6a4ac82",
    "number": 1547,
    "body": "### Prerequisite\r\n\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/1445\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nFor some time, there hasn't been a clear path for testing python-build. I suspect that most pyenv developers are pyenv users as well: there has been no documented way of keeping the development version of pyenv away from the version of pyenv supporting their python work.\r\n\r\nThe deafening silence in #1445 and #1361 suggests it's an issue which currently doesn't have an easy answer. Now it does.\r\n\r\nWith vagrant and virtualbox installed, a single command will spin up a clean ubuntu 18.04 virtual machine with all of the build dependencies, and the user's local pyenv repo mounted at `~/.pyenv` and installed in the usual way. Then they can install python versions to their heart's content, and can trash the VM whenever they want, with zero impact on their host machine and its pyenv installation. It's completely optional and doesn't impact the development of anyone not using this workflow (I don't know how those people are testing their builds, and apparently they don't want to tell me). Changes made inside the VM are persisted on the host, and vice versa. Users just have to be careful not to make commits inside the VM if they are relying on the host's global git config.\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n\r\n### Alternatives\r\n\r\nCould use docker instead of vagrant, and provide a docker image which has the build requirements installed already. Rebuilding a clean container would probably be faster under docker, and I think docker has fewer restrictions on e.g. virtualisation being enabled in the BIOS. However, docker as a tool is MUCH less ergonomic than vagrant (unless you also use docker-compose), and you run into issues with persistence and file ownership when trying to use docker for development rather than deployment.\r\n\r\n### Possible extensions\r\n\r\nAn additional script for attempting to build lots of python versions in a batch, possibly in a multi-threaded way, and report successes/ failures.\r\n",
    "head_branch": "vagrant",
    "is_a_fork": true,
    "comments": [
      "More on docker vs vagrant\r\n\r\nIf all you want to do is check that the build completes, docker is the better option. It's much lighter weight, and the spinning up and trashing processes are much, much faster, and can be done in a single line (`docker run -t my_container pyenv install 3.8.1`). It's a little less intuitive in that you have to rebuild the image for every change you make to pyenv. Multiplexing installations can be done from the host, each in their own container, which is a big plus.\r\n\r\nVagrant is slightly more difficult to set up, slightly more verbose to actually do the testing, and a lot slower if you want to trash the container every build, certainly less zeitgeisty. However, it makes it much easier to actually test the python versions you're building.\r\n\r\nHaving now set up both, I'm leaning towards docker. Interested in which is more likely to be merged.",
      "Opened #1548 ; feel free to pick one",
      "Decided docker is better."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4c044ee515ce6a4ac83",
    "number": 1544,
    "body": "### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * Not applicable. The PR is a fix to existing python-build plugin.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n\r\nThe upstream [`has_broken_mac_openssl` function](https://github.com/rbenv/ruby-build/blob/7ec5e411bfc60df9c6df65f8fd7e9b5b38ec2fc6/bin/ruby-build#L1021) does not seem to call the [`use_homebrew_openssl` function](https://github.com/rbenv/ruby-build/blob/7ec5e411bfc60df9c6df65f8fd7e9b5b38ec2fc6/bin/ruby-build#L1028) directly. python-build on the other hand, calls the latter from within the former function and not from templates. Moreover, the upstream's `use_homebrew_openssl` function uses `2>/dev/null` to suppress any error output. python-build does not perform such redirection.\r\n\r\n* [x] My PR addresses the following *python-build* issue (if any)\r\n  - This PR fixes (currently harmless) warning on macOS when homebrew is *not* installed. (Separate issue not created, example/log is shown below).\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nWhen `pyenv install` is called on macOS system without homebrew one gets an error:\r\n\r\n```sh\r\nwadkar$ pyenv install 3.8.2\r\n/Users/wadkar/.pyenv/plugins/python-build/bin/python-build: line 1541: brew: command not found\r\n/Users/wadkar/.pyenv/plugins/python-build/bin/python-build: line 1541: brew: command not found\r\nInstalling openssl-1.1.0j...\r\nInstalled openssl-1.1.0j to /Users/wadkar/.pyenv/versions/3.8.2\r\n\r\nInstalling readline-8.0...\r\nInstalled readline-8.0 to /Users/wadkar/.pyenv/versions/3.8.2\r\n\r\nInstalling Python-3.8.2...\r\npython-build: use zlib from xcode sdk\r\nInstalled Python-3.8.2 to /Users/wadkar/.pyenv/versions/3.8.2\r\n```\r\n\r\nWhile the python installation succeeds, the generated `python-build: line 1541: brew: command not found` error hints at potential issues with programming logic in python-build. Specifically, the boolean returning`has_broken_mac_openssl()` function calls `use_homebrew_openssl()` which in addition to returning a boolean has a side effect of setting the correct `--with-openssl` option.\r\n\r\nThis PR provides a fairly simple fix which immediately returns 1 (i.e. false) if no homebrew command is found. While it may be tempting to fix the line setting `local ssldir` to `local ssldir=\"$(brew --prefix \"${openssl}\" 2>/dev/null || true)\"` as done in upstream. It should be noted that python-build differs from the upstream in the usage of this function. The function is called from within `had_broken_mac_openssl` and not from installation recipes. Finally, the fix proposed in this PR will avoid entering the for loop and makes it obvious that function would return false if there is no brew command to begin with.\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n\r\nI am not sure if this PR is the right place to add a test at `@test \"python-build succeeds on macOS without homebrew\"` level. But I would be happy to add it with some guidance. For example, how do I test for lack of `brew: command not found` in the build_log? Should I also assert for both `readlink` and `openssl` are built?\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix python-build `brew: command not found` error (#1544)\n\nThis PR fixes (currently harmless) warning on macOS when homebrew is *not* installed.\r\n\r\n- [ ] Test case (required?)\r\n\r\nFor example:\r\n\r\n```sh\r\nwadkar$ pyenv install 3.8.2\r\n/Users/wadkar/.pyenv/plugins/python-build/bin/python-build: line 1541: brew: command not found\r\n/Users/wadkar/.pyenv/plugins/python-build/bin/python-build: line 1541: brew: command not found\r\nInstalling openssl-1.1.0j...\r\nInstalled openssl-1.1.0j to /Users/wadkar/.pyenv/versions/3.8.2\r\n\r\nInstalling readline-8.0...\r\nInstalled readline-8.0 to /Users/wadkar/.pyenv/versions/3.8.2\r\n\r\nInstalling Python-3.8.2...\r\npython-build: use zlib from xcode sdk\r\nInstalled Python-3.8.2 to /Users/wadkar/.pyenv/versions/3.8.2\r\n```"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4c144ee515ce6a4ac84",
    "number": 1543,
    "body": "### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n\r\nI skimmed past the requires post-installation steps for Homebrew when walking though the README. \r\nAnecdotally, other devs noted the same issue.\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Tests\r\nN/A \r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update README: highlight brew post-install steps (#1543)\n\nI skimmed past the requires post-installation steps for Homebrew when walking though the README. \r\nAnecdotally, other devs noted the same issue."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4c244ee515ce6a4ac85",
    "number": 1542,
    "body": "### Description\r\n- Adds latest MicroPython version\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Create micropython-1.12 (#1542)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4c244ee515ce6a4ac86",
    "number": 1540,
    "body": "@joshfriend how can i write tests for this with bats where it would test tcl-tk? ive been unable to figure it out",
    "head_branch": "tcltk-homebrew",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4c344ee515ce6a4ac87",
    "number": 1539,
    "body": "### Prerequisite\r\n\r\nI'll issue PR to rbenv once fish is fixed/tested.\r\n\r\n### Description\r\n\r\n`pyenv shell` assumes `$PYENV_VERSION` is set, when it might not be (yet). Use `${PYENV_VERSION-}` instead of $PYENV_VERSION.\r\n\r\nI don't have fish so didn't fix for fish. It seems obvious, but would rather have someone familiar with fish fix.\r\n\r\n### Tests\r\n\r\nFixed shell.bats to check for `${PYENV_VERSION-}`.\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4c444ee515ce6a4ac88",
    "number": 1537,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n  **N/A -- bugfix**\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n  **N/A -- the code in question is not present in rbenv**\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/1156\r\n### Description\r\n- [x] Here are some details about my PR\r\nWhen a build fails, mention log file and its contents regardless of whether `$BUILD_PATH` exists\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\nThe current tests seem to only be testing public functionality while `build_failed()` is private. Should I add a test for it? Is it okay to test it directly? If not, which endpoint should I test it via?",
    "head_branch": "mention_log",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1537 from native-api/mention_log\n\nMention log file if an error happened before building, too"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4c544ee515ce6a4ac89",
    "number": 1525,
    "body": "The pyenv help listing offered the \"commands\" command twice.\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove duplicate help message (#1525)\n\nThe pyenv help listing offered the \"commands\" command twice."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4c644ee515ce6a4ac8a",
    "number": 1521,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/1454\r\n  - https://github.com/pyenv/pyenv/issues/1457\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\nFixes illegal byte sequence error on `pyenv help`\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "fix-sed-RE-error",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fixes sed illegal byte sequence error (#1521)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4c644ee515ce6a4ac8b",
    "number": 1519,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Travis CI: Upgrade to the latest Xcode images (#1519)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4c744ee515ce6a4ac8c",
    "number": 1513,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/969\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nIf there is a better solution like use macro for reusable code plz guide me :)\r\n\r\nJust make it works cause it's really annoying when I have to restart the shell with `exec zsh` and the PATH get populated\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "stop-re-export-shims",
    "is_a_fork": true,
    "comments": [
      "maybe the test \"can add shims to PATH more than once\" should be removed"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4c844ee515ce6a4ac8d",
    "number": 1509,
    "body": "### Description\r\nThis addresses a case I find myself in where aria2c is \"present\" on a system, but broken due to system libraries being in a bad state.  It replaces the `type cmd` check to see if an executable is present with a `cmd --help` to see if the executable can be executed, and exit non-zero.\r\n\r\n### Tests\r\nNo new tests added (should still prefer aria2c/curl/wget as before)\r\n",
    "head_branch": "develop",
    "is_a_fork": true,
    "comments": [
      "Right now the pattern could I guess be summarized as:\r\n\r\n```python\r\nbest_candidate = None\r\nfor best_candidate in candidates_by_preference:\r\n    if candidate_exists(candidate):\r\n        break\r\nelse:\r\n    raise SomeError(\"no downloaders found\")\r\ndownload_using(best_candidate)\r\n```\r\nor something that smells like that.  But there's a chance that a candidate exists but is semi or non-functional.  What about\r\n\r\n```python\r\nfor candidate in candidates_by_preference:\r\n\ttry:\r\n\t\tdownload_using(candidate)\r\n\t\tbreak\r\n\texcept:\r\n\t\tpass # <= couldn't download successfully, either not found or not functional\r\nelse:\r\n\traise SomeError(\"no functional downloaders found\")\r\n```\r\n\r\nseems to me that this would test exactly what we care about (can you successfully download using the given tool), rather than a proxy which is not perfectly correlated?",
      "Also, whoops, forgot this wasn't a python repo itself.",
      "> But there's a chance that a candidate exists but is semi or non-functional.\r\n\r\nThat's what I'm talking about. We do not, and should not be bothering about this. If a user has a broken system, it's their problem, not ours. We aren't wasting our time and effort working around arbitrary problems resulting from others' gross negligence. In fact, we can't do that anyway even if we wanted to, as per above.",
      "What about trying to fetch using different tools instead of testing for tool presence then failing if a present tool fails the download?",
      "A tool can fail the download for a zillion reasons that don't warrant switching to another tool",
      "@jbylund Why don't you just fix the actual problem rather than waste your time shopping for workarounds? If some of your systems have a broken `aria2c` -- just delete it from them! Since it can't be used anyway, there's no point in keeping it, right?\r\n\r\nIf you can't do that for whatever reason, change the configuration for yourself so that it won't be found.",
      "This is a shared system where I don't have access to change the installed python (or the same aria2c).  pyenv _is_ the workaround to not being able to get system admins to keep things up to date/working.  I did make a fix like the one in this pr so that I now have a working python in my home dir.",
      "> If you can't do that for whatever reason, change the configuration for yourself so that it won't be found.\r\n\r\nWhat I mean, you can make a workaround that works independently from Pyenv.\r\n\r\nE.g. if `aria2c` is in `/usr/bin`:\r\n\r\n* make a directory inside your profile\r\n* hardlink or symlink everything from `/usr/bin` there _except_ the broken programs that you want to hide.\r\n* replace `/usr/bin`'s `PATH` entry with this dir.\r\n\r\nAnother way is to make a script with the name \"`aria2c`\" that would run something else (that works) and place it earlier on the `PATH`.",
      "It's clear to me that there are other ways I could have installed python in my users home dir.\r\nIt seems to me that this change would make pyenv work in some situations where it currently does not.\r\nI think your worry is there are situations in which pyenv currently works where it would not with this change?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4c944ee515ce6a4ac8e",
    "number": 1502,
    "body": "The official pypy builds should now be portable on linux.\r\nAlso add aarch64 builds.",
    "head_branch": "pypy-7.3.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1502 from lazka/pypy-7.3.0\n\nAdd PyPy 7.3.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4ca44ee515ce6a4ac8f",
    "number": 1499,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Add CPython 3.6.10\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "python-3.6.10",
    "is_a_fork": true,
    "comments": [
      "Thank you!"
    ],
    "commit_messages": [
      "Add CPython 3.6.10 (#1499)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4cb44ee515ce6a4ac90",
    "number": 1498,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Add CPython 3.7.6\r\n\r\n### Tests\r\n- [X] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "python-3.7.6",
    "is_a_fork": true,
    "comments": [
      "Thank you! ",
      "Thank you for maintaining this awesome project!"
    ],
    "commit_messages": [
      "Add CPython 3.7.6 (#1498)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4cc44ee515ce6a4ac91",
    "number": 1497,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Add CPython 3.8.1\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "python-3.8.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.8.1 (#1497)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4cc44ee515ce6a4ac92",
    "number": 1494,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [
      "See https://github.com/pyenv/pyenv/pull/1361 , which is waiting on advice for how to test new python versions.",
      "miniconda 4.7.12 has been on `master` for several months now, closing.",
      "I’m sorry for late reply. I intended to use separate miniconda version in pyenv because there were not script after miniconda3-4.3.30."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4cd44ee515ce6a4ac93",
    "number": 1486,
    "body": "Closes #1485\n\n",
    "head_branch": "bugfix/typo_above",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1486 from timgates42/bugfix/typo_above\n\nFix simple typo: abovementioned -> above"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4ce44ee515ce6a4ac94",
    "number": 1471,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Minor grammatical corrections for README.md and python-build/README.md\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "readme-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1471 from saahilh/readme-fixes\n\nGrammatical corrections"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4cf44ee515ce6a4ac95",
    "number": 1464,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\nConsidered. Declined.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\nrbenv/ruby-build#1380\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] I was using a `brew install pyenv` environment and was instructed to install `python 3.8`. I ran `pyenv install -l` and all I saw was `3.8-dev`. I checked with `brew` and confirmed I was running the latest version of `pyenv`. We checked and the person who instructed me to install it was using an older version of `pyenv`. This was incredibly confusing. I checked the `pyenv install --help` and there was nothing obvious that indicated what I was doing wrong.\r\n\r\nAt some point, we decided that I should just install `3.8-dev`, and I managed to mistype the name (as `python3.8-dev` iirc) and then I saw the command that explained how to update, and that's when we understood what was missing.\r\n\r\nThis PR attempts to address that missing link by making the standard path for normal users easier.\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "install-should-help-users-update-their-build-plugin",
    "is_a_fork": true,
    "comments": [
      "Why not just tell people to `pyenv update`?",
      "Python-build is now bundled with Pyenv so this is no longer relevant."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4d044ee515ce6a4ac96",
    "number": 1463,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "new111",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4d144ee515ce6a4ac97",
    "number": 1462,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "3hbi-patch-1",
    "is_a_fork": true,
    "comments": [
      "please do not create garbage PRs on random projects"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4d144ee515ce6a4ac98",
    "number": 1461,
    "body": "Remove duplicate entry in the command list.\r\n\r\n### Before PR\r\n\r\n```\r\n$ pyenv help\r\nUsage: pyenv <command> [<args>]\r\n\r\nSome useful pyenv commands are:\r\n   commands    List all available pyenv commands\r\n   activate    Activate virtual environment\r\n   commands    List all available pyenv commands\r\n   deactivate   Deactivate virtual environment\r\n...\r\n```\r\n### After\r\n\r\n```\r\n$ pyenv help\r\nUsage: pyenv <command> [<args>]\r\n\r\nSome useful pyenv commands are:\r\n   commands    List all available pyenv commands\r\n   activate    Activate virtual environment\r\n   deactivate   Deactivate virtual environment\r\n...",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Everything seems to be working fine now."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4d244ee515ce6a4ac99",
    "number": 1458,
    "body": "This is completion based on ``zshcompsys`` rather than older ``zshcompctl``.",
    "head_branch": "nicer-zsh-completion",
    "is_a_fork": true,
    "comments": [
      "Either this issue or #1644 could be closed to avoid confusing potential contributors."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4d344ee515ce6a4ac9a",
    "number": 1456,
    "body": "Due to fcf539ec enabling the help message being dynamic and discovering\r\neverything from `pyenv-commands`, a side effect was the `realpath*`\r\n`bash` builtin extension being listed.  This change elides the shared\r\nlibrary from being listed since it is not a command one can execute via\r\n`pyenv <command>`.\r\n\r\nCloses: #1454 ",
    "head_branch": "commands-filter-realpath-extension",
    "is_a_fork": true,
    "comments": [
      "Thanks for the PR, is your solution here addressing the same problem as #1455?\r\n\r\nIf so, I'd lean towards closing this in favor of #1455 because a blacklist would need periodic updating (and it seems like the other approach filters the commands list more directly based on the root cause of the issue.)",
      "> Thanks for the PR, is your solution here addressing the same problem as #1455?\r\n\r\nYes, it looks like it.  PR #1455 looks like a better general approach to solving this problem.\r\n\r\nClosing this in favor of #1455."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4d444ee515ce6a4ac9b",
    "number": 1455,
    "body": "fix fcf539e: 'commands' command is repeated; commands which call binary\r\nexecutables (e.g. pyenv-realpath.dylib) are also grabbed, which cause\r\nhelp message parsing to fail. depending on the system locale, sed may\r\nalso emit an error.\r\n\r\nremove extra 'commands' command; restrict help message parsing to files\r\nof mime-type 'text/*t'.\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "local",
    "is_a_fork": true,
    "comments": [
      "This closes #1454.",
      "https://github.com/pyenv/pyenv/pull/1461 fixes the duplicate `commands` summary while keeping it at the top of the help output.",
      "Superceded by #1525 , #1714\r\n\r\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4d544ee515ce6a4ac9c",
    "number": 1450,
    "body": "* Stackless.com seems to no longer have SSL support so Stackless URLs to that site updated to HTTP\r\n* Added Stackless 2.7.16\r\n\r\nMake sure you have checked all steps below.\r\n",
    "head_branch": "Fix_Stackless_URLs_and_add_Stackless-stackless-2.7.16",
    "is_a_fork": true,
    "comments": [
      "> Stackless.com seems to no longer have SSL support\r\n\r\nThe stackless.com site redirects to their github wiki page, so probably switch the download URLs to ones from the [GitHub releases page](https://github.com/stackless-dev/stackless/releases)",
      "https://github.com/stackless-dev/stackless/wiki/Download\r\n\r\nThe Wiki points to the files on the site still but HTTPS via Github instead makes sense. I'll update the \r\nPR. "
    ],
    "commit_messages": [
      "Add Stackless 2.7.16 (#1450)\n\n* Added Stackless 2.7.16\r\n\r\nCo-authored-by: Nathan <nathan@nathan.v>\r\nCo-authored-by: Ivan Pozdeev <vano@mail.mipt.ru>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4d644ee515ce6a4ac9d",
    "number": 1449,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\npyenv resides in /usr/local/bin. This path is not yet in the PATH when .zshenv is being sourced. It is added to path during .zprofile sourcing so .zprofile seems a better place thatn .zshenv\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Please see #1400.\r\n\r\nI'm not sure why so many people are suggesting this change recently",
      "Well there is an issue here obviously so no wonder people suggest fixes.\r\nYou say that it must be .zshenv because only this is guaranteed to be sourced.\r\nBut you seem to ignore our reasoning: that during .zshenv pyenv is not in the PATH as /usr/local/bin  is not in the PATH yet so it cannot work at all the way it is now.\r\nOur suggestions may not be perfect but at least then it works for \"normal\" sessions.",
      "@joshfriend  #1400  does not solve the problem. Please don't ignore other comments and acknowledge that `zshenv` is not working."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4d744ee515ce6a4ac9e",
    "number": 1448,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Add [CPython 3.5.9](https://www.python.org/downloads/release/python-359/)\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)",
    "head_branch": "python-3.5.9",
    "is_a_fork": true,
    "comments": [
      "Thanks!"
    ],
    "commit_messages": [
      "Add CPython 3.5.9 (#1448)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4d744ee515ce6a4ac9f",
    "number": 1447,
    "body": "### Description\r\n- With the latest macOS Catalina, I found that setting PYENV and PATHs in `.zshenv` did not properly load the python shim. Moving the commands to `.zshrc` fixed this. \r\n- Furthermore, I would suggest changing all `.zshenv` references to `.zshrc`\r\n> macOS Terminal considers every new shell to be a login shell and an interactive shell. So, in Terminal a new zsh will potentially run all configuration files. For simplicity’s sake, you should use just one file. The common choice is .zshrc.\r\n\r\n",
    "head_branch": "fix_zshrc",
    "is_a_fork": true,
    "comments": [
      "#1400"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4d844ee515ce6a4aca0",
    "number": 1442,
    "body": "```\r\nchecksum mismatch: Python-3.5.8.tar.xz (file is corrupt)\r\nexpected 1bb1319bcd05d95c4d9752c7f6378c5378b8f467fb9045e07023e94b28b2ff41, got 55a345c78ee3afbc2e60678442aad7bcc384ddea5bb95f8d66edc4868d4847d4\r\n```\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "```\r\n$ shasum -a 256 ~/Downloads/Python-3.5.8.tar.xz\r\n1bb1319bcd05d95c4d9752c7f6378c5378b8f467fb9045e07023e94b28b2ff41  /Users/josh/Downloads/Python-3.5.8.tar.xz\r\n```\r\n\r\nwtf python?\r\n\r\nWhen I downloaded it again today, it matches what you have in this PR"
    ],
    "commit_messages": [
      "Update Python 3.5.8 xz checksum (#1442)\n\n```\r\nchecksum mismatch: Python-3.5.8.tar.xz (file is corrupt)\r\nexpected 1bb1319bcd05d95c4d9752c7f6378c5378b8f467fb9045e07023e94b28b2ff41, got 55a345c78ee3afbc2e60678442aad7bcc384ddea5bb95f8d66edc4868d4847d4\r\n```"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4d944ee515ce6a4aca1",
    "number": 1441,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Add [CPython 3.5.8](https://www.python.org/downloads/release/python-358/)\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)",
    "head_branch": "python-3.5.8",
    "is_a_fork": true,
    "comments": [
      "Thank you!"
    ],
    "commit_messages": [
      "Add CPython 3.5.8 and remove 3.5.8rc1 (#1441)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4da44ee515ce6a4aca2",
    "number": 1440,
    "body": "some perl installations leave zombie files on MacOS, mine is perl 5.18, one of them is `/usr/bin/shasum`, it has no execution authority and gives the wrong result for type command on bash.\r\nhttps://github.com/pyenv/pyenv/issues/1414\r\n```\r\n#!/usr/bin/perl\r\n\r\n=for comment\r\n\r\nThe contents of this script should normally never run!  The perl wrapper\r\nshould pick the correct script in /usr/bin by appending the appropriate version.\r\nYou can try appending the appropriate perl version number.  See perlmacosx.pod\r\nfor more information about multiple version support in Mac OS X.\r\n\r\n=cut\r\n\r\nuse strict;\r\nuse Config ();\r\n\r\nmy @alt = grep {m,^$0\\d+\\.\\d+(?:\\.\\d+)?$,} glob(\"$0*\");\r\nprint STDERR <<\"EOF-A\";\r\nperl version $Config::Config{version} can't run $0.  Try the alternative(s):\r\n\r\nEOF-A\r\nif(scalar(@alt) > 0) {\r\n    for(@alt) {\r\n\tmy($ver) = /(\\d+\\.\\d+(?:\\.\\d+)?)/;\r\n\tprint STDERR \"$_ (uses perl $ver)\\n\";\r\n    }\r\n} else {\r\n\tprint STDERR \"(Error: no alternatives found)\\n\";\r\n}\r\ndie <<'EOF-B';\r\n\r\nRun \"man perl\" for more information about multiple version support in\r\nMac OS X.\r\nEOF-B\r\n```\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4db44ee515ce6a4aca3",
    "number": 1434,
    "body": "https://docs.travis-ci.com/user/reference/osx/#macos-version\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "This is a must, is there a way we can bump it?"
    ],
    "commit_messages": [
      "Travis CI: xcode11.2 (#1434)\n\nhttps://docs.travis-ci.com/user/reference/osx/#macos-version"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4db44ee515ce6a4aca4",
    "number": 1433,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Add [CPython 2.7.17](https://www.python.org/downloads/release/python-2717/)\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)",
    "head_branch": "python-2.7.17",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1433 from joesiewert/python-2.7.17\n\nAdd CPython 2.7.17"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4dc44ee515ce6a4aca5",
    "number": 1427,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Thanks!"
    ],
    "commit_messages": [
      "Add anaconda3-2019.10 (#1427)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4dd44ee515ce6a4aca6",
    "number": 1423,
    "body": "CPython 3.7.5 was released on October 15, 2019:\r\n\r\nhttps://pythoninsider.blogspot.com/2019/10/python-375-is-now-available.html?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+PythonInsider+%28Python+Insider%29",
    "head_branch": "cpython-3.7.5",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1423 from cjolowicz/cpython-3.7.5\n\nAdd CPython 3.7.5"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4de44ee515ce6a4aca7",
    "number": 1421,
    "body": "## before\r\n```Usage: pyenv <command> [<args>]\r\n\r\nSome useful pyenv commands are:\r\n   commands    List all available pyenv commands\r\n   local       Set or show the local application-specific Python version\r\n   global      Set or show the global Python version\r\n   shell       Set or show the shell-specific Python version\r\n   install     Install a Python version using python-build\r\n   uninstall   Uninstall a specific Python version\r\n   rehash      Rehash pyenv shims (run this after installing executables)\r\n   version     Show the current Python version and its origin\r\n   versions    List all Python versions available to pyenv\r\n   which       Display the full path to an executable\r\n   whence      List all Python versions that contain the given executable\r\n\r\nSee `pyenv help <command>' for information on a specific command.\r\nFor full documentation, see: https://github.com/pyenv/pyenv#readme\r\n```\r\n\r\n## after\r\n```\r\nUsage: pyenv <command> [<args>]\r\n\r\nSome useful pyenv commands are:\r\n   commands    List all available pyenv commands\r\n   local       Set or show the local application-specific Python version\r\n   --version   Display the version of pyenv\r\n   commands    List all available pyenv commands\r\n   exec        Run an executable with the selected Python version\r\n   global      Set or show the global Python version\r\n   help        Display help for a command\r\n   hooks       List hook scripts for a given pyenv command\r\n   init        Configure the shell environment for pyenv\r\n   install     Install a Python version using python-build\r\n   local       Set or show the local application-specific Python version\r\n   prefix      Display prefix for a Python version\r\n   rehash      Rehash pyenv shims (run this after installing executables)\r\n   root        Display the root directory where versions and shims are kept\r\n   shell       Set or show the shell-specific Python version\r\n   shims       List existing pyenv shims\r\n   uninstall   Uninstall a specific Python version\r\n   update      update pyenv and plugins\r\n   version     Show the current Python version and its origin\r\n   version-file   Detect the file that sets the current pyenv version\r\n   version-name   Show the current Python version\r\n   version-origin   Explain how the current Python version is set\r\n   versions    List all Python versions available to pyenv\r\n   whence      List all Python versions that contain the given executable\r\n   which       Display the full path to an executable\r\n\r\nSee `pyenv help <command>' for information on a specific command.\r\nFor full documentation, see: https://github.com/pyenv/pyenv#readme\r\n```\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "change help message from hard coding to dynamic (#1421)\n\n## before\r\n```Usage: pyenv <command> [<args>]\r\n\r\nSome useful pyenv commands are:\r\n   commands    List all available pyenv commands\r\n   local       Set or show the local application-specific Python version\r\n   global      Set or show the global Python version\r\n   shell       Set or show the shell-specific Python version\r\n   install     Install a Python version using python-build\r\n   uninstall   Uninstall a specific Python version\r\n   rehash      Rehash pyenv shims (run this after installing executables)\r\n   version     Show the current Python version and its origin\r\n   versions    List all Python versions available to pyenv\r\n   which       Display the full path to an executable\r\n   whence      List all Python versions that contain the given executable\r\n\r\nSee `pyenv help <command>' for information on a specific command.\r\nFor full documentation, see: https://github.com/pyenv/pyenv#readme\r\n```\r\n\r\n## after\r\n```\r\nUsage: pyenv <command> [<args>]\r\n\r\nSome useful pyenv commands are:\r\n   commands    List all available pyenv commands\r\n   local       Set or show the local application-specific Python version\r\n   --version   Display the version of pyenv\r\n   commands    List all available pyenv commands\r\n   exec        Run an executable with the selected Python version\r\n   global      Set or show the global Python version\r\n   help        Display help for a command\r\n   hooks       List hook scripts for a given pyenv command\r\n   init        Configure the shell environment for pyenv\r\n   install     Install a Python version using python-build\r\n   local       Set or show the local application-specific Python version\r\n   prefix      Display prefix for a Python version\r\n   rehash      Rehash pyenv shims (run this after installing executables)\r\n   root        Display the root directory where versions and shims are kept\r\n   shell       Set or show the shell-specific Python version\r\n   shims       List existing pyenv shims\r\n   uninstall   Uninstall a specific Python version\r\n   update      update pyenv and plugins\r\n   version     Show the current Python version and its origin\r\n   version-file   Detect the file that sets the current pyenv version\r\n   version-name   Show the current Python version\r\n   version-origin   Explain how the current Python version is set\r\n   versions    List all Python versions available to pyenv\r\n   whence      List all Python versions that contain the given executable\r\n   which       Display the full path to an executable\r\n\r\nSee `pyenv help <command>' for information on a specific command.\r\nFor full documentation, see: https://github.com/pyenv/pyenv#readme\r\n```"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4df44ee515ce6a4aca8",
    "number": 1418,
    "body": "https://pypy.readthedocs.io/en/latest/release-v7.2.0.html\r\n\r\nMarked as draft until squeaky/portable-pypy updates their builds: https://github.com/squeaky-pl/portable-pypy/issues/94",
    "head_branch": "pypy-7.2.0",
    "is_a_fork": true,
    "comments": [
      "Fantastic, thank you 😄 ",
      "They are available now",
      "You will need to change urls to github since I abandoned Atlassian Bitbucket.",
      "Updated to squeaky's new urls and hashes.\r\n\r\nThanks all!"
    ],
    "commit_messages": [
      "Add PyPy 7.2.0 (#1418)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4df44ee515ce6a4aca9",
    "number": 1416,
    "body": "Adds the Python 3.8.0 stable release to `python-build`.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "@AnonGuy maybe you should also update this line: https://github.com/pyenv/pyenv/blob/master/.travis.yml#L29",
      "@patrick91 Thanks for the heads up!",
      "@AnonGuy I think you've added the release note to the wrong section (1.2.13 has already been released)",
      "Thanks @AnonGuy ❤️",
      "I tried to install Python 3.8.0 on Ubuntu but it failed\r\n```root@dd07112a861c:~/.pyenv# bin/pyenv install 3.8.0\r\nDownloading Python-3.8.0.tgz...\r\n-> https://www.python.org/ftp/python/3.8.0/Python-3.8.0.tgz\r\nerror: failed to download Python-3.8.0.tar.gz\r\n\r\nBUILD FAILED (Ubuntu 18.04 using python-build 1.2.14)\r\n```\r\n",
      "@chetankapoor please open a new issue and follow the issue template if you are having issues with this, currently you have provided no useful information for debugging your problem.\r\n\r\nhttps://github.com/pyenv/pyenv/wiki/Common-build-problems",
      "How can I get this from homebrew? It says I have the latest version",
      "Homebrew are in the process of adding Python 3.8.0, please see https://github.com/Homebrew/homebrew-core/pull/45337.",
      "Awesome, thanks @hugovk",
      "Not sure that PR involves pyenv though, I think it only relates to brew's python version. @joshfriend what's the process of updating pyenv on brew?",
      "@patrick91 Issue [here](https://github.com/Homebrew/homebrew-core/pull/45365), it seems! Looks like it's waiting to run the Jenkins build?"
    ],
    "commit_messages": [
      "Add Python 3.8.0 (stable release) (#1416)\n\nUse stable 3.8.0 release for PYTHON_BUILD_VERSION"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4e044ee515ce6a4acaa",
    "number": 1410,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Could you consider sending equivalent fix to rbenv/ruby-build?\r\n\r\nhttps://github.com/rbenv/ruby-build/blob/master/bin/ruby-build#L616",
      "@yyuu Sure, PR sent :)"
    ],
    "commit_messages": [
      "Merge pull request #1410 from felixonmars/patch-1\n\nCorrect a typo in python-build"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4e144ee515ce6a4acab",
    "number": 1409,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/1125\r\nFor anyone trying to use tcltk from homebrew before (or if you had tcltk installed from homebrew tkinter would fail I believe)\r\n #1125 \r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nI previously added the regex match for this, but having to pass the config opts everytime while other packages use homebrew by default made this seem worthwhile.  If there is anything that would make this more streamlined, or a better place to put it in python-build then let me know.  \r\n\r\nThis should hopefully allow more people to use pyenv and things like matplotlib or whatever that may previously had issues.\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "tcltk-homebrew",
    "is_a_fork": true,
    "comments": [
      "can this get looked at @yyuu or someone else?  itd be helpful for installing 3.8.0 and those of use who use install pyenv --HEAD from brew",
      "Can this be merged so users of asdf can use python-build and not run into problems?",
      "@joshfriend or @yyuu any interest in merging this?  ",
      "can you fix the tests?",
      "@joshfriend im not sure i understand travis-ci enough to know why it is failing.  locally my tests run exactly the same.  maybe ill try again and see if i can add a test for the gui portion as it seems plausible and im worried i will create issues for linux users"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4e244ee515ce6a4acac",
    "number": 1406,
    "body": "",
    "head_branch": "cpython-3.5.8rc1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.5.8rc1 (#1406)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4e344ee515ce6a4acad",
    "number": 1405,
    "body": "",
    "head_branch": "cpython-3.7.5rc1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.7.5rc1 (#1405)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4e344ee515ce6a4acae",
    "number": 1404,
    "body": "Added Python version 3.8.0 Release Candidate 1\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Thanks!"
    ],
    "commit_messages": [
      "Create 3.8.0rc1 (#1404)\n\nAdded Python version 3.8.0 Release Candidate 1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4e444ee515ce6a4acaf",
    "number": 1402,
    "body": "This allows for skipping the second `test -x`.\r\n\r\nIt is not applicable for rbenv, which only supports a single version,\r\nand already has only a single `test -x` there.",
    "head_branch": "opt-which",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4e544ee515ce6a4acb0",
    "number": 1401,
    "body": "Ignoring most changes to the README.md.",
    "head_branch": "merge-rbenv",
    "is_a_fork": true,
    "comments": [
      "Dead PR?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4e644ee515ce6a4acb1",
    "number": 1397,
    "body": "Hey this should fix a few issues such as #1375 and #1125 .  I am not sure if there is a better way to go about doing this but this seems to work while not making issues for other variables passed to pyenv install.\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/1125\r\n  - https://github.com/pyenv/pyenv/issues/1375\r\n\r\n### Description\r\n- This fix would allow tcl-tk stuff passed in a string. For instance \r\nPYTHON_CONFIGURE_OPTS=\"--with-tcltk-includes='-I/usr/local/opt/tcl-tk/include' --with-tcltk-libs='-L/usr/local/opt/tcl-tk/lib -ltcl8.6 -ltk8.6'\" pyenv install 3.7.3\r\norder doesnt matter: \r\nPYTHON_CONFIGURE_OPTS=\"--with-tcltk-libs='-L/usr/local/opt/tcl-tk/lib -ltcl8.6 -ltk8.6' --with-tcltk-includes='-I/usr/local/opt/tcl-tk/include'\" pyenv install 3.7.3\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n\r\nI'm not sure how to test this without manually building and running something like \r\n`python -m tkinter -c 'tkinter._test()'` and verifying the box pops up.  It is possible it installs the python version fine and the tkinter stuff doesn't work.  \r\n",
    "head_branch": "tcltk-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1397 from grahamannett/tcltk-fix\n\nworking with tcl-tk in PYTHON_CONFIGURE_OPTS"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4e744ee515ce6a4acb2",
    "number": 1396,
    "body": "This fixes a path in #1394 (sorry, I had pushed the wrong commit earlier...)",
    "head_branch": "fix-micropython-build",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1396 from cdwilson/fix-micropython-build\n\nFix path to Unix port in micropython build"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4e844ee515ce6a4acb3",
    "number": 1395,
    "body": "\r\n",
    "head_branch": "add-micropython-1.11",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1395 from cdwilson/add-micropython-1.11\n\nAdd micropython-1.11"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4e944ee515ce6a4acb4",
    "number": 1394,
    "body": "This PR builds `mpy-cross` before building `micropython`.  If `mpy-cross` dependency is not built, you get errors like this:\r\n\r\n```\r\nUse make V=1 or set BUILD_VERBOSE in your environment to increase build verbosity.\r\nmkdir -p build/genhdr\r\nmkdir -p build\r\nmkdir -p build/build\r\nmkdir -p build/extmod\r\nmkdir -p build/lib/axtls/crypto\r\nmkdir -p build/lib/axtls/ssl\r\nmkdir -p build/lib/berkeley-db-1.xx/btree\r\nmkdir -p build/lib/berkeley-db-1.xx/mpool\r\nmkdir -p build/lib/embed\r\nmkdir -p build/lib/mp-readline\r\nmkdir -p build/lib/oofatfs\r\nmkdir -p build/lib/timeutils\r\nmkdir -p build/lib/utils\r\nmkdir -p build/py\r\nGEN build/frozen.c\r\nMPY modules/upip_utarfile.py\r\nMPY modules/upip.py\r\nmake: ../../mpy-cross/mpy-cross: No such file or directory\r\nmake: ../../mpy-cross/mpy-cross: No such file or directory\r\nmake: *** [build/frozen_mpy/upip_utarfile.mpy] Error 1\r\nmake: *** Waiting for unfinished jobs....\r\nmake: *** [build/frozen_mpy/upip.mpy] Error 1\r\n```",
    "head_branch": "fix-micropython-build",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1394 from cdwilson/fix-micropython-build\n\nBuild mpy-cross dependency for micropython builds"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4e944ee515ce6a4acb5",
    "number": 1390,
    "body": "Fix #1389.\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/1389\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "add-cpython-380b4",
    "is_a_fork": true,
    "comments": [
      "Thanks!"
    ],
    "commit_messages": [
      "Merge pull request #1390 from Juanlu001/add-cpython-380b4\n\nAdd CPython 3.8.0b4"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4ea44ee515ce6a4acb6",
    "number": 1386,
    "body": "### Description\r\n\r\nWhen using pyenv on crostini, I noticed that the installation of at least Python 3.7.4 failed due to the missing core libraries.  I thought it might be a good opportunity to capture the libraries needed in order for Python to be used at least in the README.  \r\n\r\n### Disclaimer\r\n\r\nI'm new to using pyenv so I need to investigate how exactly it works, but if it doesn't install these libraries if they are missing then I think there is room for a feature.\r\n\r\nLet me know what you think, and thank you for providing such a wonderful tool!\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "All of this seems to be covered already in the [common build problems wiki](https://github.com/pyenv/pyenv/wiki/Common-build-problems)\r\n\r\nThis wiki page is linked in the README, the new issue template, and also every time a python build fails.",
      "Ah thanks.  I missed that, my fault.  I'll close this out."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4eb44ee515ce6a4acb7",
    "number": 1382,
    "body": "I added two files to support Anaconda-2019.07.\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1382 from kenshohara/master\n\nSupport Anaconda-2019.07"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4ec44ee515ce6a4acb8",
    "number": 1380,
    "body": "In China,source url download speed is slow, add third-party open source url.\r\n\r\nAdd PYENV_PYTHON_MIRROR_URL variable ,Improving download speed.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "awsome，that's what we need, expecting merged version",
      "Why it's still not merged into master?",
      "good job",
      "I would rather the original mirror mechanism be fixed as opposed to adding in an entirely new one"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4ed44ee515ce6a4acb9",
    "number": 1374,
    "body": "During homebrew installation, the `PYENV_ROOT` variable is neither set at any point, nor any instructions are given to set it manually.\r\n\r\nWithout `PYENV_ROOT` environment variable, e.g. `pipenv` cannot properly detect that `pyenv` is installed.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Should be checked with the upstream readme probably: https://github.com/rbenv/rbenv/blob/master/README.md\r\n\r\nIf it's not in there, it should be added there probably first.\r\n\r\nMerging the README would be good in general I think.",
      "I'm closing this one, because after another look I realised that current instructions are sufficient. \r\n\r\nThis part of the instruction:\r\n\r\n> Then follow the rest of the post-installation steps under [Basic GitHub Checkout](https://github.com/pyenv/pyenv#basic-github-checkout) above, starting with #3 (\"Add `pyenv init` to your shell to enable shims and autocompletion\").\r\n\r\neffectively makes users to add `pyenv init -` to their shell and that sets the `PYENV_SHELL` env variable. This is enough to make `pipenv` properly detect `pyenv` installation, `PYENV_ROOT` isn't actually needed.",
      "👋 @jkukul I also ran into the same problem you did when I first installed `pyenv` and `Pipenv` and would have opened my own pull request with the same proposed changes had you not already done so. \r\n\r\nI have the following in my `.zshrc` file:\r\n\r\n```sh\r\n# pyenv (https://github.com/pyenv/pyenv)\r\nif command -v pyenv 1>/dev/null 2>&1; then\r\n  # define environment variable\r\n  export PYENV_ROOT=\"$HOME/.pyenv\"\r\n  # enable shims and autocompletion\r\n  eval \"$(pyenv init -)\"\r\nfi\r\n```\r\n\r\nI tried removing `export PYENV_ROOT=\"$HOME/.pyenv\"` and reloading my shell to see what would happen.\r\n\r\nHere's what happened when I tried to create a virtual environment with `Pipenv` after reloading:\r\n\r\n```sh\r\nUsing /shims/python (None) to create virtualenv…\r\n⠙ Creating virtual environment...The path /shims/python (from --python=/shims/python) does not exist\r\n```\r\n\r\nWhen I added `export PYENV_ROOT=\"$HOME/.pyenv\"` back to my `.zshrc` file, reloaded my shell, and tried to create a virtual environment with `Pipenv` again, it worked: \r\n\r\n```sh\r\nUsing /Users/username/.pyenv/shims/python (3.7.4) to create virtualenv…\r\n⠧ Creating virtual environment...Using base prefix '/Users/username/.pyenv/versions/3.7.4'\r\nNew python executable in /Users/username/.local/share/virtualenvs/python-Ms9yNXIx-/Users/username/.pyenv/shims/python/bin/python\r\nInstalling setuptools, pip, wheel...\r\ndone.\r\nRunning virtualenv with interpreter /Users/username/.pyenv/shims/python\r\n\r\n✔ Successfully created virtual environment! \r\n```\r\n\r\nThis leads me to believe that `PYENV_ROOT` may still be necessary (at least in my case) and it may still be worth updating the instructions to help others others in the same boat.\r\n\r\nDo you see something wrong with the way I've set things up or the way I'm testing this? I know I may be misunderstanding something here and I'm open to feedback."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4ee44ee515ce6a4acba",
    "number": 1370,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Add [CPython 3.7.4](https://www.python.org/downloads/release/python-374/)\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)",
    "head_branch": "python-3.7.4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.7.4 (#1370)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4ee44ee515ce6a4acbb",
    "number": 1368,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Add [CPython 3.6.9](https://www.python.org/downloads/release/python-369/)\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)",
    "head_branch": "python-3.6.9",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1368 from joesiewert/python-3.6.9\n\nAdd CPython 3.6.9"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4ef44ee515ce6a4acbc",
    "number": 1365,
    "body": "This PR addresses #1364. The goal is to be able to display an alias for the local or global python version so that tools that display your pyenv version can use that instead.\r\n\r\nI could try to turn this into a plugin if it doesn't fit into the ideas for core functionality. Please let me know what you think, and help me turn it into a module if need be.",
    "head_branch": "version_alias",
    "is_a_fork": true,
    "comments": [
      "closing since you've made this into a plugin and closed your original issue."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4f044ee515ce6a4acbd",
    "number": 1361,
    "body": "We're pretty behind on miniconda versions. This includes all new major.minor.patch versions since 4.3.30, as well as a script to automatically populate new miniconda versions in the future.\r\n\r\n- Ignores releases below 4.3.30\r\n- Ignores \"-latest\" releases\r\n- Ignores sub-patch releases if that major.minor.patch already exists\r\n  - But otherwise, takes the latest sub-patch release for given OS/arch\r\n- Assumes all miniconda3 releases > 4.3.30 default to python 3.6 (correct at time of writing)\r\n\r\n### Description\r\n\r\n- miniconda[23] versions 4.3.31 through 4.6.14.\r\n\r\n### Tests\r\n\r\nI am not sure how best to test adding new builds; is there anything more ergonomic than just trying to build each one, one at a time?\r\n\r\nSee also #1360 for a discussion on miniconda-latest. ",
    "head_branch": "auto_miniconda",
    "is_a_fork": true,
    "comments": [
      "Anything remaining on this @yyuu before we can merge?",
      "I still haven't tested most of the builds this adds - is there a good strategy for that?\r\n\r\nAny thoughts on the sub-patch builds?",
      "- rebased on master\r\n- fixed shebang of script\r\n- re-ran script to add miniconda[23]-4.7.10",
      "@yyuu What more is needed here?",
      "I need to update it to use python 3.7 for recent miniconda versions, and test all of them. Is there a good strategy for testing large numbers of builds?",
      "I have rebased this on master, fixed the py37 issue, and re-run the script to pick up 4.7.12.\r\n\r\nThe review comment from @yyuu can't be addressed, as the usage of md5sum is anaconda's choice, not mine.\r\n\r\nAll this needs now is testing, but I can't find any information on how to test installed python versions without my own (mainline) pyenv installation interfering; see #1445 .\r\n\r\n`bats` testing gets the same two failures on master and on this branch:\r\n\r\n```\r\n ✗ sys.executable with system version (#98)                                                                                                     \r\n   (from function `flunk' in file test/test_helper.bash, line 42,                                                                               \r\n    from function `assert_success' in file test/test_helper.bash, line 47,                                                                      \r\n    in test file test/exec.bats, line 90)                                                                                                       \r\n     `assert_success \"${system_python}\"' failed                                                                                                 \r\n   command failed with exit status 1                                                                                                            \r\n ✗ /tmp/pyenv.NZj/root/shims:/home/barnesc/code/pyenv/test/libexec:/home/barnesc/code/pyenv/test/../libexec:/tmp/pyenv.NZj/bin:/usr/bin:/bin:/us\r\nr/sbin:/sbin:/usr/local/bin is not modified with system Python                                                                                  \r\n   (from function `flunk' in file test/test_helper.bash, line 42,                                                                               \r\n    from function `assert_success' in file test/test_helper.bash, line 47,                                                                      \r\n    in test file test/exec.bats, line 102)                                                                                                      \r\n     `assert_success \"$PATH\"' failed                                                                                                            \r\n   command failed with exit status 1   \r\n```",
      "Rebased on master again. Still waiting for documentation or advice on how to test new versions.",
      "Rebasing this on PR #1548 locally allowed me to test a handful of these very easily and in complete isolation.",
      "I think I'll add a readme with a usage example etc.",
      "@yyuu It appears there might be a problem in the merged code - there are duplicate architecture entries in the [miniconda2-4.7.12](https://github.com/pyenv/pyenv/pull/1361/files/81e797be12e86e70bf5e332b3ac15512d65ad950#diff-e51d5e7af8a59099804d79c11541a472) and [miniconda3-4.7.12](https://github.com/clbarnes/pyenv/blob/81e797be12e86e70bf5e332b3ac15512d65ad950/plugins/python-build/share/python-build/miniconda3-4.7.12) python-build files. This manifests as the 4.7.12 shadowing the 4.7.12.1 version i.e. unable to install 4.7.12.1.\r\n\r\nIs that intended, or should there be a separate 4.7.12.1 python-build file?\r\n",
      "As I understand it, pyenv does not and has never handled distinguishing subpatch versions for the \\*condas. As such, this script picks the latest available subpatch version when any given patch version is first picked up. It doesn't overwrite old versions when new subpatch versions are introduced, partially for reasons specified in #1360, partially to prevent it being destructive. Something is very wrong with anaconda's numbering scheme if anybody's workflow would be broken by having a newer subpatch version than they expected. \r\n\r\nI'm open to supporting subpatch versions and it would probably be trivial to update the script to do so, but this is a bigger new feature than I wanted to introduce with this PR. Other alternatives for handling subpatch versions are welcome in #1360.",
      "> As such, this script picks the latest available subpatch version when any given patch version is first picked up.\r\n\r\nJust to clarify, I also expected this behaviour on a fresh install when not overwriting a previous miniconda. But the order in the shell script means that the case statement returns the first match (i.e. 4.7.12) and never gets to the latest subpatch version.\r\n\r\nFor example, from [miniconda3-4.7.12](https://github.com/clbarnes/pyenv/blob/81e797be12e86e70bf5e332b3ac15512d65ad950/plugins/python-build/share/python-build/miniconda3-4.7.12)\r\n```shell\r\n# ...\r\n# matches this first\r\n\"Linux-x86_64\" )\r\n  install_script \"Miniconda3-4.7.12-Linux-x86_64\" \"https://repo.anaconda.com/miniconda/Miniconda3-4.7.12-Linux-x86_64.sh#0dba759b8ecfc8948f626fa18785e3d8\" \"miniconda\" verify_py37\r\n  ;;\r\n\r\n# ...\r\n# never gets here\r\n\"Linux-x86_64\" )\r\n  install_script \"Miniconda3-4.7.12.1-Linux-x86_64\" \"https://repo.anaconda.com/miniconda/Miniconda3-4.7.12.1-Linux-x86_64.sh#81c773ff87af5cfac79ab862942ab6b3\" \"miniconda\" verify_py37\r\n  ;;\r\n\r\n# ...\r\n```\r\n\r\nSo the question was, is this deliberately written that way, should they be swapped around, or any other approach (removing subpatch completely)?",
      "Yes, you're right. That wasn't intentional. I'll see what I can do. The easiest thing may just be to support subpatch versions - that also contributes part of a solution to #1360 (with #1551 being another chunk)."
    ],
    "commit_messages": [
      "Merge pull request #1361 from clbarnes/auto_miniconda\n\nUpdate miniconda builds"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4f144ee515ce6a4acbe",
    "number": 1359,
    "body": "- `~/.bash_profile` may not be sourced in desktop environment. When this happenes, `~/.profile` can be used instead.\r\n- The `pyenv` function should be exported if `eval $(pyenv init -)` is put into `~/.profile` or `~/.bash_profile`.\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Thanks! I would be more specific about when to use `export -f pyenv` because readers of the doc won't know whether \"may need\" applies to them or when it might apply to them in the future. Explaining when export must be used, will remove confusion. ",
      "My thought is when put `eval $(pyenv init -)` in `~/.profile` or `~/.bash_profile`, `export -f pyenv` is needed. But I didn't say that because I am not sure if this is true for most environments, so I simply say \"if `pyenv shell` or `pyenv rehash` doesn't work, you should do this.\" I'd like to hear your thought about this.",
      "My thought is shell configuration schemes are a mess and that has a lot to do with why users so often have broken environments or are confused about their setup. While the invocation section of shell man pages seem carefully written enough, there is no explanation of the requirements driving the complexity.\r\n\r\n> If bash is invoked with the name sh, it tries to mimic the startup behavior of historical versions of sh as closely as possible, while conforming  to  the  POSIX standard as well.  When invoked as an interactive login shell, or a non-interactive shell with the --login option, it first attempts to read and execute commands from /etc/profile and ~/.profile, in that order.  The --noprofile option may be used to inhibit this behavior.  When invoked as an  interactive  shell  with  the name  sh,  bash  looks  for the variable ENV, expands its value if it is defined, and uses the expanded value as the name of a file to read and execute.  Since a shell invoked as sh does not attempt to read and execute commands from any other startup files, the --rcfile option  has  no  effect.   A  non-interactive  shell invoked with the name sh does not attempt to read any other startup files.  When invoked as sh, bash enters posix mode after the startup files are read.\r\n\r\nThe only case for different shell configurations I know of is interactive or non-interactive; so, I source .profile from .bashrc, then in .profile I use a conditional return if non-interactive, `test -t 0 || return 0` before setting interactive variables, aliases and functions. This way I have one file for all my shell configurations, and I can use it on all the different systems I use.\r\n\r\nI use additional branches within that file to detect OS, installed software and the specific shell, so aliases, functions and environmental configurations only get set when appropriate.\r\n\r\nI source ~/.profile from all of my shell rc files (zsh, ksh, bash, etc) to keep all of my configuration in one file. That file checks if it is sourced from a non-interactive shell and returns without error if so, which keeps scp (and anything else using the shell programmatically) from breaking.\r\n\r\nThe thing to keep in mind is shell environment setup is not by design, it's by evolution. There probably isn't a good answer for everyone today. I like the idea of exporting functions from profile, it works when you use run control (rc) files for run control and profile for interactive function setup, as best I can tell. For me, I'll source my .profile from run control (rc files) and do my best to test the environment before setting anything that isn't universal (eg, only set zsh features in zsh, etc).\r\n\r\nAs for what is best in pyenv docs, not sure, but I would avoid anything like 'you may need' in documentation or instructions about what you actually need. Better to state the circumstances you can think of, eg\r\n\r\n- Put `eval $(pyenv init -)` where you define interactive functions, such as `.profile` or `.bash_profile` \r\n- You will need to `export -f pyenv` to access the function from a sub-shell, such as a desktop environment.\r\n\r\nNobody wants to be definitive about how anybody in the world should always setup their system, and there is usually more than one solution. But if you explain how to deal with the specific problem cases you can think of, that's good documentation and the elucidation sometimes identifies a better coding solution too.\r\n\r\nBTW - my favorite shell is ksh but the good version is only available on NetBSD, so I usually use bash on Mac and Linux.",
      "It's updated.And thank @georgalis for sharing your setup! It makes a lot of sense,, and maybe I should do it in the same way.",
      "Would be great to get this via rbenv's (upstream) README: https://github.com/rbenv/rbenv/blob/master/README.md\r\n\r\nThere are changes in this regard IIRC, so it would be good to not derive further from it, but get it straight via/from there.",
      "Superseded by https://github.com/pyenv/pyenv/pull/1920"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4f244ee515ce6a4acbf",
    "number": 1358,
    "body": "infocmp is a system utility that returns information about the user's terminal. When it is shimmed it can cause problems for various programs that use it to determine terminal settings. In particular, the library used by the Scala shell reads it and problems can occur where various control keys don't work (e.g. backspace does not work).\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1358 from jonathanbranam/patch-1\n\nRemove infocmp from shims"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4f244ee515ce6a4acc0",
    "number": 1353,
    "body": "An alternative take on #1219, based on the original attempt to fix that in #1339.\r\n- The `zlib` search flow is organized similarly to the `readline` one, and placed nearby.\r\n- The tests have been updated to account for the extra `is_mac/uname` call.\r\n\r\nFixes #1219 \r\nCloses #1339, #1333",
    "head_branch": "mojave-zlib",
    "is_a_fork": true,
    "comments": [
      "This would also replace #1333",
      "Just checked this out and am getting clang compile commands like this:\r\n\r\n`clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -g -fwrapv -O3 -Wall -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/usr/include   -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/usr/include   -std=c99 -Wextra -Wno-unused-result -Wno-unused-parameter -Wno-missing-field-initializers -Wstrict-prototypes -Werror=implicit-function-declaration   -I. -I./Include -I/usr/local/opt/readline/include -I/usr/local/opt/readline/include -I/Users/josh/.pyenv/versions/3.7.3/include  -I/usr/local/opt/icu4c/include -I/usr/local/opt/readline/include -I/usr/local/opt/readline/include -I/Users/josh/.pyenv/versions/3.7.3/include  -I/usr/local/opt/icu4c/include  -DPy_BUILD_CORE_BUILTIN  -c ./Modules/hashtable.c -o Modules/hashtable.o`\r\n\r\nWhich seems to correctly include the xcode sdk path from `xcrun --show-sdk-path`"
    ],
    "commit_messages": [
      "Find zlib from Xcode or brew on Mojave (#1353)\n\nfixes #1219, #1333"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4f344ee515ce6a4acc1",
    "number": 1350,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] ~~Please consider implementing the feature as a hook script or plugin as a first step.~~\r\n  * ~~pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.~~\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] ~~My PR addresses the following pyenv issue (if any)~~\r\n\r\n### Description\r\n\r\n`pyenv-virtualenv` allows to create virtualenvs with names starting with a dot (e.g. `.dotfiles`), but those cannot be listed. This PR enables `dotglob` option when listing versions.\r\nI don't think this change is necessary to the upstream (`rbenv`) since they probably only deal with version numbers.\r\n\r\nI have also opened a similar PR in the `pyenv-virtualenv` repo: pyenv/pyenv-virtualenv#317\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n  - test \"lists dot directories under versions\" (`test/versions.bats`)\r\n",
    "head_branch": "feature/versions/dotglob",
    "is_a_fork": true,
    "comments": [
      "We're using pyenv-virtualenv too and this change would have saved us many hours of debugging.\r\n\r\nOur CI environment created venvs starting with a dot and the `pyenv rehash` fails to add binaries in the shims. It tool a long time to figure out this was the issue.\r\n\r\n+1 for getting this merged as pyenv-virtualenv doesn't seem maintained anymore\r\n\r\nThanks!"
    ],
    "commit_messages": [
      "Merge pull request #1350 from maxbrunet/feature/versions/dotglob\n\nList versions starting with a dot"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4f444ee515ce6a4acc2",
    "number": 1344,
    "body": "### Description\r\nThere's an extra space before eval that is retained when copied and pasted into an editor. While not a common use case, it's hard to spot and sourcing your profile will result in the error `command not found: eval` so it's worth fixing.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Isn't there still an extra space there?!\r\n\r\nIn general it would be better to use rbenv's (upstream) README (not caused by you though).",
      "No longer relevant after https://github.com/pyenv/pyenv/pull/1920"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4f544ee515ce6a4acc3",
    "number": 1339,
    "body": "[this comment](https://github.com/pyenv/pyenv/issues/1219#issuecomment-428700763) from #1219 pretty well summarizes why building pythons on Mojave keeps failing because of lack of zlib.\r\n\r\nIn this PR, I use the zlib from the xcode commandline tools sdk if available, and homebrew zlib if it is not. If neither are available, the build continues until the checks at the end that assert the presence of zlib and direct the user to the common build issues wiki if no zlib module was compiled. I didn't try to be clever about what happens if both scenarios above fail because the user might have done the manual legacy sdk installation fix or has `CFLAGS` set in their shell or whatever.\r\n\r\nFixes #1219 \r\n",
    "head_branch": "fix-zlib-not-found-mojave",
    "is_a_fork": false,
    "comments": [
      "Lots of tests broke and i have no clue why",
      "@joshfriend What can we do to help push this PR along? I am a new contributor to pyenv but would love to look into CI issues if you could provide some direction.",
      "Please have a look at my variation (#1353) of the fix - with all the tests passing and the code reorganized a bit."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4f644ee515ce6a4acc4",
    "number": 1337,
    "body": "This reverts commit 070e1c859fb2584c3dbe0a6fbe58cbc80938654e, reversing\r\nchanges made to 3faeda67bb33e07750d1a104271369a7384ca45c.\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [X] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/1336\r\n\r\n### Description\r\nThis pull request reverts the changes introduced in https://github.com/pyenv/pyenv/pull/1153. They completely break a number of things as shown in https://github.com/pyenv/pyenv/issues/1336.",
    "head_branch": "1336",
    "is_a_fork": true,
    "comments": [
      "Thanks, I'll merge when Travis is done."
    ],
    "commit_messages": [
      "Merge pull request #1337 from nvllsvm/1336\n\nRevert \"Merge pull request #1153 from cmcginty/remove-sbang\""
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4f744ee515ce6a4acc5",
    "number": 1335,
    "body": "https://pypy.readthedocs.io/en/latest/release-v7.1.1.html",
    "head_branch": "pypy-7.1.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1335 from lazka/pypy-7.1.1\n\nAdd PyPy 7.1.1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4f744ee515ce6a4acc6",
    "number": 1333,
    "body": "__BUILD FAILED (OS X 10.14.3 using python-build 1.2.11-2-g23982d2)__\r\n\r\nRelated to #1219 ??\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "superseded by #1353"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4f844ee515ce6a4acc7",
    "number": 1329,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n    * This is a fix to its core build feature\r\n* x ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n  * The feature isn't derived from the upstream\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - n/a\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nUpdate GNU Readline version to be installed when brew's package is not available.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n  * n/a\r\n",
    "head_branch": "yy-mac-readline-8.0",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1329 from pyenv/yy-mac-readline-8.0\n\nUse GNU Readline 8.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4f944ee515ce6a4acc8",
    "number": 1328,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * Not yet planned, but I may gonna post the equivalent changes later once after proving this way works fine for our use case\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/pull/1302\r\n  - https://github.com/pyenv/pyenv/issues/1325\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nIn #1302, I've merged a PR that lets `python-build` to always prefer Homebrew's `openssl@1.1` over `openssl` (=== OpenSSL 1.0). However, in fact, some of _older_ python versions don't support OpenSSL 1.1 and it caused some build failures.\r\n\r\nI ended up to tweak build definitions to add new parameter `prefer_openssl11` to enable OpenSSL 1.1 only for some definitions.\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n\r\ncc: @ThomasWaldmann @cculianu",
    "head_branch": "yy-prefer-openssl11",
    "is_a_fork": false,
    "comments": [
      "This is brilliant.  Looks great.  Thanks so much for following up on this.  Very happy with these changes.  Much love for you and your project @yyuu \r\n\r\nThe fact that it's now toggled per-python version is ideal, really.\r\n\r\nThanks for merging the previous PR even though it was imperfect.. and then making it more perfect. :D"
    ],
    "commit_messages": [
      "Merge pull request #1328 from pyenv/yy-prefer-openssl11\n\nPrefer OpenSSL 1.1 only for specific python versions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4fa44ee515ce6a4acc9",
    "number": 1327,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * This is core feature and cannot be implemented as some hook\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * This is import from the upstream\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - There's no existing issue for this\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n    * I've imported recent changes from https://github.com/rbenv/ruby-build\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n    * I have already tweaked/fixed broken tests after the import",
    "head_branch": "yy-import-ruby-build-20190401",
    "is_a_fork": false,
    "comments": [
      "Hmm, somehow travis-ci isn't working as I was expecting. I'm going to merge this once after I fixed CI issue...."
    ],
    "commit_messages": [
      "Merge pull request #1327 from pyenv/yy-import-ruby-build-20190401\n\nImport ruby-build 20190401"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4fb44ee515ce6a4acca",
    "number": 1326,
    "body": "take this rather as an idea than a ready-to-use PR.\r\n\r\nit's just 2 things i noticed when looking at that code that seemed strange:\r\n- why is it invoking openssl before even trying sha256sum or md5sum? this commit is just moving the openssl based elif-block to the end.\r\n- why invoke the brew openssl even for trivial stuff like `openssl dgst -sha256` (i found the historic reason, see commit comment - the question now is whether that is still needed). the code after this commit is now closer to the md5 openssl based code in the other function.\r\n\r\nnot tested on macOS yet.",
    "head_branch": "openssl-related-improvements",
    "is_a_fork": true,
    "comments": [
      "I'd _guess_, the reason why it is invoking `openssl dgst` prior to `sha256sum` is that macOS doesn't have the latter by default. The answer to your second question is, it is implemented to avoid use macOS's default `/usr/bin/openssl`, I guess. Anyway it's passing 2 `openssl` to `command -v`, it'll fallback to _ordinary_ `openssl` if `brew` is not available. Both changes are pretty much macOS stuffs, but I don't want to make changes to them to keep differences between https://github.com/rbenv/rbenv as smaller as possible ",
      "guess this code is used for all supported OSes, not just macOS. on linux, md5sum and sha256sum are quite frequently there and checking them first would avoid any openssl / brew troubles (and the fact that it might invoke some brew command on non macOS, not sure what that could do :).\r\n\r\ni know macOS default openssl is old crap, but for very basic stuff like md5 and sha256 it might be good enough.\r\n\r\nunderstandable if you don't want to depart from rbenv code.\r\n\r\nif anybody thinks this might be interesting for rbenv upstream, feel free to submit it there (i won't).\r\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4fb44ee515ce6a4accb",
    "number": 1324,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1324 from binbjz/master\n\nSupport Anaconda 2019.03"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4fc44ee515ce6a4accc",
    "number": 1323,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4fd44ee515ce6a4accd",
    "number": 1322,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [X] Here are some details about my PR\r\n\r\nSSIA.\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "3.4.10",
    "is_a_fork": true,
    "comments": [
      "Thank you ❤️ "
    ],
    "commit_messages": [
      "Add CPython 3.4.10 (#1322)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4fe44ee515ce6a4acce",
    "number": 1321,
    "body": "\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n\r\n### Description\r\nI need to run some ancient app that only supports 2.4.\r\n\r\nWhen running `pyenv install 2.4.6` on Alpine Linux, the following error occurs and the build is aborted:\r\n\r\n```\r\nDownloading Python-2.4.6.tgz...\r\n-> https://www.python.org/ftp/python/2.4.6/Python-2.4.6.tgz\r\nInstalling Python-2.4.6...\r\npatching file setup.py\r\nHunk #2 succeeded at 239 with fuzz 2 (offset -4 lines).\r\n\r\nBUILD FAILED (Alpine Linux 3.8.4 using python-build 1.2.10)\r\n\r\nInspect or clean up the working tree at /tmp/python-build.20190404185130.79\r\nResults logged to /tmp/python-build.20190404185130.79.log\r\n\r\nLast 10 log lines:\r\n posix_close(PyObject *self, PyObject *args)\r\n ^~~~~~~~~~~\r\nIn file included from /usr/include/fortify/unistd.h:20:0,\r\n                 from ./Include/Python.h:41,\r\n                 from ./Modules/posixmodule.c:28:\r\n/usr/include/unistd.h:38:5: note: previous declaration of 'posix_close' was here\r\n int posix_close(int, int);\r\n     ^~~~~~~~~~~\r\nmake: *** [Makefile:1071: Modules/posixmodule.o] Error 1\r\nmake: *** Waiting for unfinished jobs....\r\n```\r\n\r\nThis is a known issue from 2014: https://bugs.python.org/issue20594\r\nThe patch from this issue did the trick. I just ported it to the 2.4.x posixmodule.c. Building 2.4.1 and 2.4.6 worked afterwards.\r\n\r\n",
    "head_branch": "bugfix/fix-2.4-name-collision",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1321 from alexdo/bugfix/fix-2.4-name-collision\n\nFix 2.4 builds: redeclaration of posix_close"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4ff44ee515ce6a4accf",
    "number": 1312,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n**Not applicable.**\r\n\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n**Not applicable.**\r\n\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - [1311](https://github.com/pyenv/pyenv/issues/1311)\r\n  - [1184](https://github.com/pyenv/pyenv/issues/1184)\r\n  - [1268](https://github.com/pyenv/pyenv/issues/1268)\r\n  - [993](https://github.com/pyenv/pyenv/issues/993)\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n`python-build` plugin fails to find some dependency packages because it uses the default `configure` script,  so update the `configure` script and other generated scripts on target system to solve this issue by running autoreconf intead autoconf\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "update_configuration_files",
    "is_a_fork": true,
    "comments": [
      "Does it fix/close all the referenced issues?"
    ],
    "commit_messages": [
      "Merge pull request #1312 from AlyssonOliveira/update_configuration_files\n\nUpdate generated configuration files before run ./configure"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc4ff44ee515ce6a4acd0",
    "number": 1310,
    "body": "",
    "head_branch": "pypy-7.1.0-portable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1310 from lazka/pypy-7.1.0-portable\n\nAdd pypy 7.1.0 portable builds"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc50044ee515ce6a4acd1",
    "number": 1309,
    "body": "Fixes issue introduced in #1283 and #1308.",
    "head_branch": "fix-versions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1309 from chrahunt/fix-versions\n\nAdd copy_python_gdb for 3.7.3 and move patches."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc50144ee515ce6a4acd2",
    "number": 1308,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [X] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [X] My PR addresses the following pyenv issue (if any)\r\nN/A\r\n\r\n### Description\r\n- [X] Here are some details about my PR\r\nThis PR adds the build info for Python 3.7.3 which released earlier today.\r\n\r\n### Tests\r\n- [X] My PR adds the following unit tests (if any)\r\nN/A\r\n",
    "head_branch": "add-python-3.7.3",
    "is_a_fork": true,
    "comments": [
      "This is missing `copy_python_gdb`",
      "@chrahunt ugh, I should have noticed it 😞 I'll try adding it later if I can have chance....",
      "Whoops! Sorry for leaving that out 😣",
      "@yyuu Has this not been released yet?",
      "A release including this would be awesome! 🙏 "
    ],
    "commit_messages": [
      "Merge pull request #1308 from dannyvink/add-python-3.7.3\n\nAdd support for Python 3.7.3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc50244ee515ce6a4acd3",
    "number": 1307,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nI update the documentation to be more direct to the users' needs, especially new users.\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc50344ee515ce6a4acd4",
    "number": 1306,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - none\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n - add cpython 3.5.7\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n  - none",
    "head_branch": "add-cpython-3.5.7",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1306 from zed/add-cpython-3.5.7\n\nAdd cpython 3.5.7"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc50444ee515ce6a4acd5",
    "number": 1305,
    "body": "Adding a list to the notes of point #2 in Basic GitHub Checkout steps.\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1305 from creativecoderr/patch-1\n\nMinor formatting changes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc50544ee515ce6a4acd6",
    "number": 1302,
    "body": "previously, it was not possible to compile a python with homebrew openssl 1.1 because the code always queried \"openssl\" and ignored \"openssl@1.1\".\r\n\r\nnow, if 1.1 is installed, it is used to compile python and only if it is not, 1.0 is checked and used.\r\n",
    "head_branch": "prefer-openssl-1.1",
    "is_a_fork": true,
    "comments": [
      "I am aware that this PR is far from perfect, but it could be temporarily used until someone (not me, I don't like shell scripting) writes even better code:\r\n\r\nE.g. it could be checked whether `PKG_CONFIG_PATH` (and the other 2 env vars) already has an entry pointing at an openssl location and if so, do not modify them. Then users could choose which openssl version they want by setting these env vars before invoking `pyenv install`. Would also need a piece of docs.\r\n",
      "BTW, would be cool to have this available soon, I need python with openssl 1.1 for borgbackup testing.",
      "It's late here in Europe but I am super excited you did this! I'll take it for a spin tomorrow and let you know what I think and how it works for me.  THANK YOU for this. This opens up a lot of possibilities as OpenSSL 1.1 has scrypt and other stuff that python makes use of.\r\n\r\nEDIT: I also upvote having this (or something like this) integrated soon into pyenv. I super need this for my project too (we distribute an app that users need to be able to also build on macOS from scratch including having pyenv build Python for them).  So I am super excited becuse we really need OpenSSL 1.1.",
      "Thanks for making changes :+1:\r\n\r\nbtw, I've been thinking what should happen if,\r\n\r\n1. OpenSSL releases newer than 1.1 have been released\r\n2. Homebrew's `openssl` has been upgraded to install some version newer than 1.1\r\n\r\nWith current code, it will always prefer 1.1 over the _default_ `openssl` of Homebrew. I don't think it's the right behavior, however, in fact, I don't have other better workaround for now. So far I've been waiting for Homebrew to upgrade their default OpenSSL version, but it may gonna require extra time to finish the upgrade. It might be time for us to consider adding this kind of _temporary_ workaround.... 🤔 ",
      "@yyuu I really appreciate your taking the time to think this through and perhaps being amenable to this.  OpenSSL 1.1 is really so much better than 1.0.2 in terms of feature coverage.. would be great to have it.  Thanks.\r\n",
      "Guess if this needs changing, it can be just changed again in future. Considering how long it took from 1.0 to 1.1 and how long it takes software and distributions to adapt to changes, I guess this will not frequently change and not quickly need to be changed.",
      "Another consideration: is it going to blow up something if pyenv produces a python compiled with / linked to openssl 1.1 and some python-based software compiles / links some C extension with 1.0?",
      "@ThomasWaldmann I'm hoping not.  On Linux at least all the pythons you get on all the distros are compiled & linked against OpenSSL 1.1 (if we're talking recent releases here).  Even a lot of the Pythons you see in the Windows world are linked against this.  pyenv on MacOS has been the odd-man-out with its OpenSSL 1.0 as far as I can tell.\r\n\r\nNow -- whether someone built some programs on top of python assuming 1.0.. no idea. Someone more familiar with this packaging zoo might know better.. my gut tells me \"it'll be fine!\".  :)\r\n",
      "any news here?",
      "Yeah I really need this  It works perfectly.\r\n\r\nAny chance we can get this merged very soon? I really really really need this to be standard for my open source project -- people use pyenv to build our app on MacOS.\r\n",
      "openssl 1.0 sucks. 1.1 is the wave of the FUTURE!",
      "@yyuu I beg you. :)",
      "@ThomasWaldmann thanks so much for this PR ❤️ "
    ],
    "commit_messages": [
      "Merge pull request #1302 from ThomasWaldmann/prefer-openssl-1.1\n\nmacOS: prefer homebrew openssl 1.1.x over 1.0.x, see #839"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc50644ee515ce6a4acd7",
    "number": 1296,
    "body": "This PR adds the newly released Python 2.7.16.",
    "head_branch": "feature/2.7.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 2.7.16 (#1296)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc50644ee515ce6a4acd8",
    "number": 1291,
    "body": "For now this just builds the latest CPython, but it can be\r\nextended to include other versions.\r\n\r\nSkip with `[skip build]` in commit message.\r\n\r\nThis covers (Ubuntu Xenial) Linux and macOS.\r\n\r\nCurrently there is an issue in Travis where multiple `osx_image` entries results in multiple linux builds being created. I've raised a support ticket, but it shouldn't cause problems unless we add many more build tests (limit is 200).",
    "head_branch": "feature/add-travis-checks",
    "is_a_fork": true,
    "comments": [
      "We should fold in some of the items from #617 later. For now this should be good enough to point to as a working example of builds for issues with lots of build problems."
    ],
    "commit_messages": [
      "Merge pull request #1291 from chrahunt/feature/add-travis-checks\n\nAdd CI builds that actually build Python."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc50744ee515ce6a4acd9",
    "number": 1289,
    "body": "The script in `Tools/gdb/libpython.py` has helper functions for\r\ndebugging Python processes under gdb. When installed to `{exe}-gdb.py`\r\nit will automatically be loaded by gdb assuming it is in the safe path.\r\n\r\ngdb resolves all symlinks, so having the single script is sufficient\r\nregardless of how Python is invoked.\r\n\r\nSince it is usually only included as part of a dbg/dev package, this\r\nfile is intentionally excluded from install by the CPython build\r\nscripts. Like the packaging with EPEL/Debian, we opt to manually copy\r\nit after the build/install.\r\n\r\nTo ensure this file gets picked up it is enough for users to put this in\r\ntheir `~/.gdbinit`:\r\n\r\n```\r\nadd-auto-load-safe-path ~/.pyenv\r\n```\r\n\r\nFixes #1190.",
    "head_branch": "feature/add-python-gdb",
    "is_a_fork": true,
    "comments": [
      "@altendky, do you mind giving this a try?",
      "@chrahunt, thanks for working this up.  I normally try to be really responsive but I'm running behind.  Maybe tonight depending how other things go.  Cheers.",
      "A quick check worked for me both directly and via a venv.  Thanks!  Luckily I don't need this often but...  when I do it'll be nice to have it handy.  Cheers."
    ],
    "commit_messages": [
      "Merge pull request #1289 from chrahunt/feature/add-python-gdb\n\nInstall python-gdb.py."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc50844ee515ce6a4acda",
    "number": 1287,
    "body": "Complete PR #1278 (fixing issue #1277).\r\n\r\nPyPy 3.6 has been forgotten in PR #1278...",
    "head_branch": "enh/add-pypy3.6-v7.0.0",
    "is_a_fork": true,
    "comments": [
      "I left it out because it said it's in alpha state, so I wasn't sure. Thanks for adding it!"
    ],
    "commit_messages": [
      "Merge pull request #1287 from paugier/enh/add-pypy3.6-v7.0.0\n\nAdd pypy3.6-7.0.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc50944ee515ce6a4acdb",
    "number": 1285,
    "body": "",
    "head_branch": "micropython-xz",
    "is_a_fork": true,
    "comments": [
      "Now tests for tar.xz support.",
      "Thank you!"
    ],
    "commit_messages": [
      "Merge pull request #1285 from scop/micropython-xz\n\nUse xz compressed micropython 1.9.* tarballs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc50a44ee515ce6a4acdc",
    "number": 1284,
    "body": "",
    "head_branch": "micropython-1.10",
    "is_a_fork": true,
    "comments": [
      "Thanks!"
    ],
    "commit_messages": [
      "Merge pull request #1284 from scop/micropython-1.10\n\nAdd micropython 1.10"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc50a44ee515ce6a4acdd",
    "number": 1283,
    "body": "Fixes #1282.",
    "head_branch": "feature/explicit-versions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1283 from chrahunt/feature/explicit-versions\n\nUse explicit versions for CPython identifiers."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc50b44ee515ce6a4acde",
    "number": 1278,
    "body": "Adds PyPy 7.0.0 in the Python 2.7/3.5 variants.\r\n\r\nFixes #1277",
    "head_branch": "pypy-7.0.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1278 from lazka/pypy-7.0.0\n\nAdd pypy 7.0.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc50c44ee515ce6a4acdf",
    "number": 1276,
    "body": "#272 Change in pyenv structure to support pypi\r\n\r\ncommand `pip install pyenv --target $HOME/.pyenv`\r\nHow to get updates: add the installed path to eash_install.pth file to recognise pyenv by pip",
    "head_branch": "packaging",
    "is_a_fork": true,
    "comments": [
      "@yyuu update the paths in test files. \r\n\r\nExpected in following location: **pyenv.bats**\r\n\r\n```bats\r\n@test \"default PYENV_ROOT\" {\r\n  PYENV_ROOT=\"\" HOME=/home/mislav run pyenv root\r\n  assert_success\r\n  assert_output \"/home/mislav/.pyenv\"\r\n}\r\n```",
      "why was it necessary to relocate **nearly 600** files?",
      "We have once tried to support PyPI as https://github.com/pyenv/pyenv-installer/pull/16 (thanks to @obestwalter ). However, we ended up to abandon the approach since it just added extra complexity and dependencies more than benefit. I don't mean supporting PyPI is worthless, but I would never prefer this to be merged into the pyenv's main repo.",
      "I too agree of not getting merged and changing nearly 600 files is not good. The new structure is like python package which is recognised by pypi and pip install. \r\n\r\nwhen I am porting pyenv for windows, I have successfully able to do `pip install pyenv-win` thought the similar approach might help pyenv.",
      "Checking for alternative solutions without changing the structure."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc50d44ee515ce6a4ace0",
    "number": 1274,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/1219\r\n\r\n### Description\r\n\r\nFixes #1219\r\n\r\nOn MacOS 10.9 and later, uses `xcrun --show-sdk-path` to find SDK path, instead of relying on Mac OS headers being available at the system level.  This is required because of a change in XCode 10's default behaviour.\r\n\r\nhttps://developer.apple.com/documentation/xcode_release_notes/xcode_10_release_notes#3035624\r\n\r\nInspired by these comments:\r\n\r\nhttps://github.com/pyenv/pyenv/issues/1219#issuecomment-429331397\r\n\r\nhttps://github.com/pyenv/pyenv/issues/1219#issuecomment-451643266\r\n\r\nhttps://github.com/pyenv/pyenv/issues/1219#issuecomment-452315815\r\n\r\nand this blog post:\r\n\r\nhttps://medium.com/@pimterry/setting-up-pyenv-on-os-x-with-homebrew-56c7541fd331",
    "head_branch": "#1219-support-xcode10+",
    "is_a_fork": true,
    "comments": [
      "What's the status on this?",
      "@dakl this needs to be reviewed and tested. I don't personally have access to a mac, so I cannot test or do any of the sanity checks I would normally for a code review. Here are some details that might help things along:\r\n\r\n## Review\r\n\r\nAnyone can do a code review. If you have access to a mac that is better since you can quickly address small questions yourself.\r\n\r\nThings to consider for any reviewer (in order):\r\n\r\n1. What is the proposed change trying to fix? Is the approach a good one? - I'm not familiar with the file that was edited but it looks like it is only used for the build of the executable that may be used to speed up path resolution. It doesn't look like this is related to the Python build.\r\n2. Is there anything basically wrong, e.g. syntax or typos? - One note, `shobj-conf` is a shell script but the fix here looks like it is trying to invoke a subcommand using `${}`. Not sure what shell that is compatible with but it isn't bash. Maybe `$()` was meant instead?\r\n3. Is the fix compatible with all relevant macOS and XCode versions? What versions was it tested on?\r\n4. What are the failure scenarios and how are they handled? e.g. `xcrun` not available, `--show-sdk-path` invalid option. Would there at least be something in the logs so we'd be able to debug it if someone has an issue?\r\n\r\n## Testing\r\n\r\nSince this repo does not currently have a CI setup that tests builds, we rely on people on various platforms and configurations to report whether the fix worked for them. A :+1: is nice, but a comment stating that you were able to pull this PR locally and successfully compile (including your macOS and XCode version) is better.",
      "Thanks for commenting, @chrahunt!\r\n\r\nI'll just respond to a couple points with clarification:\r\n\r\n2. ~~If I'm being honest, `${}` is just syntax I copied from elsewhere in this file.  From what I can tell it is standard bash syntax for variable expansion (different from `$()`, which evaluates a command in a subshell).  It seems likely to me that if this were problematic, that would have surfaced before now.\r\n https://stackoverflow.com/questions/27472540/difference-between-and-in-bash~~\r\n\r\nWhoops, I have read through my code and my answer again, and I recognize the error you were calling out!  `${}` is not appropriate for the `xcrun` invocation, which is a command and needs `$()` syntax.  Thanks @chrahunt!\r\n\r\n---\r\n\r\n4. I think this is a good question to raise.  I'm not a MacOS guru, and I'm not sure what exactly the conditions are for `xcrun` to be available.  However, I figured it was better to propose a solution and start the conversation than leave things in their current, broken state.",
      "I really want to get this fixed, so I will try to find some time to test it since I am a full time macOS user.\r\n\r\nI just need to figure out how to undo the installation of the sdk to the legacy location that I did previously:\r\n\r\n```\r\nsudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target /\r\n```",
      "On 10.14.1 this patch still exhibits bad `pyenv install` behavior\r\n`CFLAGS=\"-I$(xcrun --show-sdk-path)/usr/include\" pyenv install -v 3.6.7` works fine, whereas `pyenv install` on this branch still fails with zlib error\r\n\r\nI do not have the global sdk installation Josh mentions above, and I'm happy to test any iterations you might have to fix this",
      "Thanks @jeffb4!  I will try to find some time!",
      "Can you please add the change from #1333 and make sure the tests pass?  Thanks!",
      "Firstly: really sorry to let this sit so long, haven't done much python at work recently, which means my related side work also takes a hit.\r\n\r\nSecondly: The approach in this PR doesn't work because if you trace the path of the scripts calling `shobj-conf` (which is what's modified here) upward, you get one path:\r\n\r\n```\r\ntest/run\r\n    -> src/configure\r\n        -> shobj-conf\r\n```\r\n\r\nSo basically at no point during `pyenv install` is the file modified here called.\r\n\r\nI'm working on this right now actually, have it working, but it needs polishing (helpful errors if there is no `xcrun`, potentially falling back to homebrew zlib, idk)",
      "Closing in favor of #1339\r\n\r\nThank you for your valiant effort, @andrew-humu 😄 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc50e44ee515ce6a4ace1",
    "number": 1273,
    "body": "### Prerequisite\r\n* [X] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [X] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n\r\n### Description\r\n\r\nGiven a makefile with the following:\r\n```make\r\nDEBUG ?= false\r\nifeq (${DEBUG}, true)\r\nexport SHELLOPTS += xtrace\r\nendif\r\n\r\nall:\r\n  az account show\r\n```\r\n\r\nWhen I invoke make, I get this error:\r\n```bash\r\n$ make\r\n++ az account show\r\n+ export PYTHONPATH=/usr/local/Cellar/azure-cli/2.0.56/libexec/lib/python3.7/site-packages\r\n+ PYTHONPATH=/usr/local/Cellar/azure-cli/2.0.56/libexec/lib/python3.7/site-packages\r\n+ command -v python3.7\r\n+ python3.7 -m azure.cli account show\r\n+ set -e\r\n/Users/xxx/.pyenv/shims/python3.7: line 12: PYENV_DEBUG: unbound variable\r\n```\r\n\r\nThe script doesn't fail per see, but the python command is never executed.\r\n\r\nThe solution is to turn off `nounset` option.\r\nOr perhaps just adding the edge case with:\r\n```bash\r\nif [[ \"$SHELLOPTS\" =~ xtrace ]]; then\r\n  set +u\r\nfi\r\n```\r\nDidn't see any harm in setting it without checking the variable.\r\n\r\nI am sure this is an edge case, but thought to report it nonetheless. It only happens with SHELLOPTS and make.\r\nIt seems like it is not exclusive to xtrace, but something very specific with these two together, the below produces the same error (without tracing):\r\n```make\r\nexport SHELLOPTS += emacs\r\n```\r\n\r\n### Tests\r\nNot sure how to test this\r\n",
    "head_branch": "fix_shellopts_xtrace",
    "is_a_fork": true,
    "comments": [
      "1. it looks like something that should go into rbenv already\r\n2. do you get the `set -u` behavior with `/usr/bin/env bash` already?  (i.e. does `echo $FOO` triggers it there).\r\n3. what is your normal shell?\r\n4. what is `az`?  Is it the same within the Makefile and outside of it?  (PATH related)\r\n5. `make` might use a different shell than your normal one, with different init scripts\r\n\r\nIn general I think it might be worth fixing, but could also look like this maybe:\r\n```diff\r\ndiff --git a/libexec/pyenv-rehash b/libexec/pyenv-rehash\r\nindex 5c421c4..d4a65a9 100755\r\n--- a/libexec/pyenv-rehash\r\n+++ b/libexec/pyenv-rehash\r\n@@ -64,7 +64,7 @@ create_prototype_shim() {\r\n   cat > \"$PROTOTYPE_SHIM_PATH\" <<SH\r\n #!/usr/bin/env bash\r\n set -e\r\n-[ -n \"\\$PYENV_DEBUG\" ] && set -x\r\n+[ -n \"\\${PYENV_DEBUG:-}\" ] && set -x\r\n \r\n program=\"\\${0##*/}\"\r\n if [[ \"\\$program\" = \"python\"* ]]; then\r\n```\r\n\r\nAs for a test, it could just `set -u` there and call a shim I guess.",
      "Ok, exporting `SHELLOPTS` is the main issue here.\r\n\r\nBut a) using += here is wrong, since it is joined by colons, not spaces, and b) it is still unclear where the \"nounset\" (set -u) is coming from then.\r\n\r\nFor reference:\r\n```make\r\nSHELL := bash\r\nexport SHELLOPTS=xtrace:nounset\r\n\r\nall:\r\n\techo \"${SHELLOPTS}\"\r\n\tbash -c 'true; echo $$FOO'\r\n```",
      "https://github.com/rbenv/rbenv/pull/1151",
      "Apologies for the late reply. I was on holidays.\r\n\r\n> 1. it looks like something that should go into rbenv already\r\n\r\nThe relationship between this project and rbenv is not clear, perhaps clarify this on the README.\r\n\r\n> 2. do you get the `set -u` behavior with `/usr/bin/env bash` already?  (i.e. does `echo $FOO` triggers it there).\r\n\r\nYes.\r\n\r\n> 3. what is your normal shell?\r\n\r\nbash\r\n\r\n> 4. what is `az`?  Is it the same within the Makefile and outside of it?  (PATH related)\r\n\r\nI should have been clearer about this. It's the [azure cli](https://github.com/Azure/azure-cli) used to interact with Azure could. I just used what I was working on at the time.\r\n\r\n> 5. `make` might use a different shell than your normal one, with different init scripts\r\n\r\nTried with both `sh` and `bash` and behaviour is similar, although I cannot fully reproduce it anymore.\r\n\r\n> a) using += here is wrong, since it is joined by colons, not spaces\r\n\r\nCorrect. Thanks for pointing that out.\r\n\r\n> b) it is still unclear where the \"nounset\" (set -u) is coming from then.\r\n\r\nNothing else was being set, just make calling a python tool directly :squirrel:\r\n\r\n---\r\nI cannot seem to reproduce the issue again nonetheless.\r\n\r\nOn a related note, setting `xtrace` propagates through pyenv and conflicts with `PYENV_DEBUG`. Is this the behaviour expected? I'd like to see `pyenv` deal with the former, but only honour debug for the later.",
      "I have got similar unbound variable error when calling pyenv in a bash script:\r\n```\r\n#!/bin/bash\r\nset -exuo pipefail\r\neval \"$(pyenv init -)\"\r\nexport -f pyenv\r\npyenv shell myenv\r\n```",
      "https://github.com/rbenv/rbenv/pull/1151#issuecomment-833088505:\r\n\r\n> Thank you, but I think that if `SHELLOPTS=nounset:pipefail` are exported, they will affect every single rbenv internal, not just the shim script. So it's likely that many more edits would be necessary to fix rbenv. Instead, I would advise that users not export SHELLOPTS globally.\r\n\r\n---\r\n\r\nI also don't see a relevance between \r\n\r\n> ```makefile\r\n> export SHELLOPTS += xtrace\r\n> ```\r\n\r\nand the error -- because `xtrace` sets `-x`, not `-u`.",
      "Let's take a step back, create an issue and discuss how we should approach this.\r\nThere are multiple use cases here (e.g. regular use vs `eval $(pyenv init -)`) and multiple possible solutions, we need to get an overview of them all and weigh their pros and cons."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc50f44ee515ce6a4ace2",
    "number": 1266,
    "body": "This is a minor update to README.md; see #1203 for details.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1266 from bicycle1885/patch-1\n\nAdd a note for fish shell users (close #1203)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc51044ee515ce6a4ace3",
    "number": 1263,
    "body": "This is the same patch that was used for other Python 3.3.X versions.",
    "head_branch": "python3.3.7-sslv3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1263 from jwilk-forks/python3.3.7-sslv3\n\nAdd OPENSSL_NO_SSL3 patch for 3.3.7"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc51044ee515ce6a4ace4",
    "number": 1260,
    "body": "### Description\r\nInstalling ironpython on my mac was failing (Mojave 10.14.1) and I noticed that ironpython-dev was pointing to a much older version of IronLanguages/main which is now archived so I updated the link to match the version that is being updated.\r\n\r\n```bash\r\n$ pyenv install ironpython-dev\r\n```\r\nOutput log:\r\n> Cloning https://github.com/IronLanguages/main.git...\r\n> Installing ironpython-dev...\r\n> BUILD FAILED (OS X 10.14.1 using python-build 20180424)\r\n> Inspect or clean up the working tree at /var/folders/ky/xpvlh4052fb99mp1n12s4pzc0000gn/T/python-build.20181226113820.97537\r\n> Results logged to /var/folders/ky/xpvlh4052fb99mp1n12s4pzc0000gn/T/python-> build.20181226113820.97537.log\r\n> Last 10 log lines:\r\n> /private/var/folders/ky/xpvlh4052fb99mp1n12s4pzc0000gn/T/python-build.20181226113820.97537/ironpython-dev/Languages/IronPython/IronPythonTest/IronPythonTest.csproj (default targets) ->\r\n/usr/local/Cellar/mono/5.14.0.177/lib/mono/xbuild/14.0/bin/Microsoft.CSharp.targets (CoreCompile target) ->\r\n\r\n\tEngineTest.cs(2597,69): error CS0420: Warning as Error: `IronPythonTest.EngineTest.DictThreadGlobalState.DoneCount': A volatile field references will not be treated as volatile\r\n\tEngineTest.cs(2605,69): error CS0420: Warning as Error: `IronPythonTest.EngineTest.DictThreadGlobalState.DoneCount': A volatile field references will not be treated as volatile\r\n\r\n\t 25 Warning(s)\r\n\t 2 Error(s)\r\n\r\n> Time Elapsed 00:00:14.1990510\r\n\r\n### Tests\r\nNot sure where to add tests, would be happy to help add them if necessary\r\n",
    "head_branch": "ironpython_dev",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1260 from adithyabsk/ironpython_dev\n\nUpdate ironpython development install location"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc51144ee515ce6a4ace5",
    "number": 1259,
    "body": "new file:   plugins/python-build/share/python-build/anaconda2-2018.12\r\nnew file:   plugins/python-build/share/python-build/anaconda3-2018.12\r\n\r\nClose #123",
    "head_branch": "add-anaconda-2018.12",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1259 from anton-petrov/add-anaconda-2018.12\n\nAdded new Anaconda 2018.12 installers."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc51244ee515ce6a4ace6",
    "number": 1256,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\nAdd CPython 3.7.2 & 3.6.8\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1256 from ipfans/master\n\nAdd CPython 3.7.2 and CPython 3.6.8"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc51344ee515ce6a4ace7",
    "number": 1248,
    "body": "This is a follow-up to #1247, that makes use of `ls` instead. ",
    "head_branch": "ls-definitions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1248 from neersighted/ls-definitions\n\nUse ls instead of find to list definitions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc51444ee515ce6a4ace8",
    "number": 1247,
    "body": "I'm not entirely sure why `find` is used instead of `ls` (changed in 4a52bfaff971b1326ab023c950f95f663f9dfc6e), as is used in upstream rbenv, but the command presents a significant bottleneck in `pyenv install -l`/`python-build --definitions`. \r\n\r\nIf [fd](https://github.com/sharkdp/fd) is installed, we can use it to achieve a speedup of 4x, or better, in my testing:\r\n\r\n```\r\nBenchmark #1: ./plugins/python-build/bin/python-build --definitions\r\n  Time (mean ± σ):     589.4 ms ±  28.2 ms    [User: 232.3 ms, System: 2252.9 ms]\r\n  Range (min … max):   551.7 ms … 659.1 ms\r\n\r\nBenchmark #2: /home/neersighted/.local/share/pyenv/plugins/python-build/bin/python-build --definitions\r\n  Time (mean ± σ):      2.835 s ±  0.023 s    [User: 104.1 ms, System: 2396.6 ms]\r\n  Range (min … max):    2.799 s …  2.871 s\r\n\r\nSummary\r\n  './plugins/python-build/bin/python-build --definitions' ran\r\n    4.81 ± 0.23 times faster than '/home/neersighted/.local/share/pyenv/plugins/python-build/bin/python-build --definitions'\r\n```",
    "head_branch": "fd-support",
    "is_a_fork": true,
    "comments": [
      "Note that alternative, `ls` or `dir` could be used, if there was no real reason for switching away. `ls` is by far the most performant option:\r\n\r\n```\r\nBenchmark #1: find share/python-build -maxdepth 1 -type f -print0 | xargs -0 -n 1 basename\r\n  Time (mean ± σ):      2.576 s ±  0.024 s    [User: 90.5 ms, System: 2070.3 ms]\r\n  Range (min … max):    2.539 s …  2.619 s\r\n\r\nBenchmark #2: find share/python-build -maxdepth 1 -type f -exec basename {} \\;\r\n  Time (mean ± σ):      2.702 s ±  0.021 s    [User: 92.0 ms, System: 2145.3 ms]\r\n  Range (min … max):    2.672 s …  2.740 s\r\n\r\nBenchmark #3: fd . share/python-build --max-depth 1 --type f --exec echo {/}\r\n  Time (mean ± σ):     607.9 ms ± 128.8 ms    [User: 257.7 ms, System: 2112.5 ms]\r\n  Range (min … max):   483.2 ms … 886.4 ms\r\n\r\nBenchmark #4: fd . share/python-build --max-depth 1 --type f --exec basename\r\n  Time (mean ± σ):     589.5 ms ± 104.1 ms    [User: 242.0 ms, System: 1996.9 ms]\r\n  Range (min … max):   462.4 ms … 803.9 ms\r\n\r\nBenchmark #5: ls share/python-build\r\n  Time (mean ± σ):      10.1 ms ±   1.3 ms    [User: 1.2 ms, System: 7.7 ms]\r\n  Range (min … max):     7.4 ms …  15.3 ms\r\n\r\nSummary\r\n  'ls share/python-build' ran\r\n   58.43 ± 12.90 times faster than 'fd . share/python-build --max-depth 1 --type f --exec basename'\r\n   60.26 ± 15.06 times faster than 'fd . share/python-build --max-depth 1 --type f --exec echo {/}'\r\n  255.34 ± 33.93 times faster than 'find share/python-build -maxdepth 1 -type f -print0 | xargs -0 -n 1 basename'\r\n  267.87 ± 35.57 times faster than 'find share/python-build -maxdepth 1 -type f -exec basename {} \\;'\r\n```",
      "The only reason why we are using find(1) there is that we needed to exclude \"patches\" directory from the output. The easiest and sufficient workaround might be just applying \"grep -vx patches\" to ls(1) output."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc51444ee515ce6a4ace9",
    "number": 1246,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1246 from binbjz/master\n\npython-build: add anaconda[23]-5.3.1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc51544ee515ce6a4acea",
    "number": 1241,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  - **Not applicable.**\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  - **Not applicable.**\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/1184\r\n\r\n### Description\r\n- [x] Here are some details about my PR:\r\n\r\n  For Mac builds, pyenv tries to build a copy of OpenSSL because older versions of the macOS ship with an ancient version of OpenSSL, while newer versions don't ship with any OpenSSL at all. Unfortunately, pyenv neglected to tell Python to actually *use* this version of OpenSSL, which means that you could only use pyenv if you had installed a copy of OpenSSL in a location that is checked by default (e.g. /usr/local/lib).\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n\r\n   **No new tests**",
    "head_branch": "issue-1184",
    "is_a_fork": true,
    "comments": [
      "As far as I could test the behavior, 3.7.1 built by pyenv was linked against OpenSSL built by pyenv, without applying your patch. Am I misunderstanding something around the problem? 😕 \r\n\r\n```sh\r\n% cat ./3.7.1-ossl\r\ninstall_package \"openssl-1.0.2k\" \"https://www.openssl.org/source/openssl-1.0.2k.tar.gz#6b3977c61f2aedf0f96367dcfb5c6e578cf37e7b8d913b4ecb6643c3cb88d8c0\" mac_openssl\r\ninstall_package \"Python-3.7.1\" \"https://www.python.org/ftp/python/3.7.1/Python-3.7.1.tar.xz#fa7e2b8e8c9402f192ad56dc4f814089d1c4466c97d780f5e5acc02c04243d6d\" ldflags_dirs standard verify_py37 ensurepip\r\n% pyenv install -v ./3.7.1-ossl\r\n( ... snip ...)\r\n% otool -L \"$(pyenv root)/versions/3.7.1-ossl/lib/python3.7/lib-dynload/_ssl.cpython-37m-darwin.so\"\r\n/Users/yyuu/.pyenv/versions/3.7.1-ossl/lib/python3.7/lib-dynload/_ssl.cpython-37m-darwin.so:\r\n        /Users/yyuu/.pyenv/versions/3.7.1-ossl/openssl/lib/libssl.1.0.0.dylib (compatibility version 1.0.0, current version 1.0.0)\r\n        /Users/yyuu/.pyenv/versions/3.7.1-ossl/openssl/lib/libcrypto.1.0.0.dylib (compatibility version 1.0.0, current version 1.0.0)\r\n        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1252.50.4)\r\n```\r\n\r\nNote that I was on macOS High Sierra.\r\n\r\n```\r\n% sw_vers\r\nProductName:    Mac OS X\r\nProductVersion: 10.13.6\r\nBuildVersion:   17G3025\r\n```",
      "@yyuu Have you separately installed OpenSSL on your machine somehow? I was having the problem on a clean Mojave install. Installing OpenSSL (or LibreSSL) in /usr/local does fix it; note that I didn't actually check which version of OpenSSL gets linked when you do that — but it's quite clear that you get an error about not having Python's SSL module if, on a clean Mojave install, you don't have OpenSSL installed and don't have this patch.",
      "Hmm, yes I had it in /usr/local and some part of build process might be referring it (during build time only, I guess)🤔 ",
      "Makes me wonder if it's just the test in `configure` that's the problem? I might take a look at that later if I get some time.",
      "FWIW, this allowed me to install 3.7.0 on my Mojave 10.14.2 Beta install. ",
      "This patch did not allow me to install 3.7.3 on Ubuntu 14.04:\r\n\r\n```\r\n$ pyenv install 3.7.3\r\nDownloading Python-3.7.3.tar.xz...\r\n-> https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tar.xz\r\nInstalling Python-3.7.3...\r\nERROR: The Python ssl extension was not compiled. Missing the OpenSSL lib?\r\n\r\nPlease consult to the Wiki page to fix the problem.\r\nhttps://github.com/pyenv/pyenv/wiki/Common-build-problems\r\n\r\n\r\nBUILD FAILED (Ubuntu 14.04 using python-build 1.2.11-13-g7164da5)\r\n\r\nInspect or clean up the working tree at /tmp/python-build.20190522113458.14460\r\nResults logged to /tmp/python-build.20190522113458.14460.log\r\n\r\nLast 10 log lines:\r\n\t\t\tinstall|*) ensurepip=\"\" ;; \\\r\n\t\tesac; \\\r\n\t\t ./python -E -m ensurepip \\\r\n\t\t\t$ensurepip --root=/ ; \\\r\n\tfi\r\nLooking in links: /tmp/tmp8w45dxn7\r\nCollecting setuptools\r\nCollecting pip\r\nInstalling collected packages: setuptools, pip\r\nSuccessfully installed pip-19.0.3 setuptools-40.8.0\r\n```",
      "@chr15m This issue is specific to the Mac build; it's only there, IIRC, that pyenv tries to build OpenSSL, because the system doesn't ship with OpenSSL. On Linux, the problem is most likely just that you haven't actually installed the relevant package (probably called something like openssl-dev, libressl-dev or libssl-dev; I can't remember OTOH what name Ubuntu uses).",
      "@al45tair I do not think the relevant package is available on Ubuntu 14.04, only newer Ubuntus.\r\n\r\nIt would be good if pyenv built & used it's own OpenSSL here.",
      "@chr15m I solved this issue and wrote up the answer.\r\nhttps://stackoverflow.com/questions/59659072/compiling-python-3-7-on-ubuntu-14-04-with-pyenv/59659073#59659073",
      "Then this should fix https://github.com/pyenv/pyenv/issues/1516 also. 👍 ",
      "@joshfriend @chrahunt Please can you take a look at including this patch. It's clearly still bugging Mac users, who keep adding more and more posts to Issue #1184 (which is now getting mixed up with Linux problems that really aren't the same thing).",
      "Thanks @al45tair for this PR.  I tried it on Catalina but it didn't work for me for some reason.  Still the same problem.\r\n\r\nNOTE: one thing that's different about my environment is that my brew prefix is `/brew`, and not `/usr/local`",
      "@al45tair No my knowledge, this PR is no longer needed.\r\nThe OpenSSL build logic has been altered since to only fire if no OpenSSL is found in Homebrew or on `PATH` (excluding Apple's one).",
      "@al45tair Plus, the initial problem in https://github.com/pyenv/pyenv/issues/1261 is that the OpenSSL in Homebrew was too old.\r\nIf it wasn't, the build would have succeeded.\r\n\r\nIn this case, passing additional `CPPFLAGS`/`LDFLAGS`/`CONFIGURE_OPTS` is the way to go.",
      "`--with-openssl` is already being added by 6d279501b542d47a53b83e15e193bb6325f50cf8 and 3bb3de7529f6fa293c12a93b2c69d930befdeabe for CPython versions that support it."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc51644ee515ce6a4aceb",
    "number": 1237,
    "body": "pyenv fails with following script if greadlink cannot be found in PATH\r\n\r\n```bash\r\nexport SHELLOPTS\r\nset -o pipefail\r\nset -e\r\npython -V || echo python failed # python fails\r\n```\r\n\r\nlooking forward patches to fix\r\n\r\nand here one proposed",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Related: #1273 \r\n\r\nThe following would be great, but requires a recent `env`:\r\n```diff\r\n\r\ndiff --git c/libexec/pyenv-rehash i/libexec/pyenv-rehash\r\nindex b6a1c84..5199bb5 100755\r\n--- c/libexec/pyenv-rehash\r\n+++ i/libexec/pyenv-rehash\r\n@@ -72,7 +72,7 @@ fi\r\n # serves as a locking mechanism.\r\n create_prototype_shim() {\r\n   cat > \"$PROTOTYPE_SHIM_PATH\" <<SH\r\n-#!/usr/bin/env bash\r\n+#!/usr/bin/env -S bash -p\r\n set -e\r\n [ -n \"\\$PYENV_DEBUG\" ] && set -x\r\n \r\n```",
      "https://github.com/rbenv/rbenv/pull/1151"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc51744ee515ce6a4acec",
    "number": 1234,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\nReplace OS X with macOS\r\n\r\n### Tests\r\nN/A\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1234 from alanyee/master\n\nUpdate README.md"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc51844ee515ce6a4aced",
    "number": 1228,
    "body": "### Prerequisite\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/1227\r\n\r\n### Description\r\n- [x] PR amends url from `3.7.0` to `3.7.1` which fixes installing version 3.7.1rc2\r\n\r\n### Tests\r\n- [x] Manual testing confirms installation works after change\r\n\r\n@joshfriend Would you mind taking a look please?",
    "head_branch": "3.7.1rc2_url",
    "is_a_fork": true,
    "comments": [
      "Thank you for speedy merge @yyuu "
    ],
    "commit_messages": [
      "Merge pull request #1228 from purificant/3.7.1rc2_url\n\namend 3.7.1rc2 url"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc51844ee515ce6a4acee",
    "number": 1222,
    "body": "",
    "head_branch": "3.7.1rc1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.7.1rc1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc51944ee515ce6a4acef",
    "number": 1221,
    "body": "",
    "head_branch": "3.6.7rc1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.6.7rc1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc51a44ee515ce6a4acf0",
    "number": 1220,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  * No issue is addressed in my PR.\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nThis PR consists of a single commit adding two new files, which allow the user to install both Anaconda2 5.3.0 and Anaconda3 5.3.0 for macOS (64 bit) and Linux (both 32 and 64 bit).\r\n\r\nAll the six Anaconda installation .sh files in the URLs in these two files are at least downloadable; however, the only one of the six files (Anaconda3 5.3.0) has been tested only on macOS to see if it is installable. Every other script should also work properly on each OS platform; please check if the rest of the other possible scripts and OSs combinations are installable.\r\n\r\nThe SHA-256 checksum for each Anaconda shell file is copied from the following pages:\r\n\r\n- [Hashes for Anaconda2-5.3.0-Linux-x86.sh — Anaconda 2.0 documentation](https://docs.anaconda.com/anaconda/install/hashes/Anaconda2-5.3.0-Linux-x86.sh-hash/)\r\n- [Hashes for Anaconda2-5.3.0-Linux-x86_64.sh — Anaconda 2.0 documentation](https://docs.anaconda.com/anaconda/install/hashes/Anaconda2-5.3.0-Linux-x86_64.sh-hash/)\r\n- [Hashes for Anaconda2-5.3.0-MacOSX-x86_64.sh — Anaconda 2.0 documentation](https://docs.anaconda.com/anaconda/install/hashes/Anaconda2-5.3.0-MacOSX-x86_64.sh-hash/)\r\n- [Hashes for Anaconda3-5.3.0-Linux-x86.sh — Anaconda 2.0 documentation](https://docs.anaconda.com/anaconda/install/hashes/Anaconda3-5.3.0-Linux-x86.sh-hash/)\r\n- [Hashes for Anaconda3-5.3.0-Linux-x86_64.sh — Anaconda 2.0 documentation](https://docs.anaconda.com/anaconda/install/hashes/Anaconda3-5.3.0-Linux-x86_64.sh-hash/)\r\n- [Hashes for Anaconda3-5.3.0-MacOSX-x86_64.sh — Anaconda 2.0 documentation](https://docs.anaconda.com/anaconda/install/hashes/Anaconda3-5.3.0-MacOSX-x86_64.sh-hash/)\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n\r\nAs mentioned in the section above, I have only checked one of the six Anaconda installation scripts installable, which is Anaconda3 5.3.0 on macOS (10.12.6). But I believe five of the other scripts should work on each OS platform. Please note that every other script files are at least downloadable. \r\n\r\nJust to mention that I did quadruple-check to make sure the SHA-256 checksum for each Anaconda shell file is properly copied and pasted from the pages listed above to the newly added anaconda2-5.3.0 and anaconda3-5.3.0 files (they are the renamed duplicates of its predecessor files, i.e. anaconda2-5.2.0 and anaconda3-5.2.0). For this reason, I believe they all should work fine (unless copy-and-pasting was wrongly done by me, even after the quadruple-checks).\r\n\r\n---\r\n\r\n### Message from the contributor\r\n\r\nPlease review my commit and if necessary, rectify as appropriate.\r\n\r\nThank you!\r\n\r\nsho",
    "head_branch": "add-anaconda-5.3.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1220 from shoichiaizawa/add-anaconda-5.3.0\n\npython-build: add anaconda[23]-5.3.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc51b44ee515ce6a4acf1",
    "number": 1217,
    "body": "When installing or removing a python version `pyenv` access anything starting with a y as a confirmation.\r\n\r\nThis lead to an issue where one of our scripts returned an error message starting by Y. The proposed patch checks explicitly for one of y, Y, yes or YES in order to avoid errors.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "LGTM."
    ],
    "commit_messages": [
      "Merge pull request #1217 from remilapeyre/master\n\nForce y, Y, yes or YES to confirm installation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc51c44ee515ce6a4acf2",
    "number": 1216,
    "body": "Ref (abs_dirname in bats): https://github.com/sstephenson/bats/pull/224\r\nRef: https://github.com/rbenv/rbenv/pull/868\r\n\r\nFixes https://github.com/pyenv/pyenv/issues/580",
    "head_branch": "abs_dirname",
    "is_a_fork": true,
    "comments": [
      "LGTM."
    ],
    "commit_messages": [
      "Merge pull request #1216 from blueyed/abs_dirname\n\nFix abs_dirname for relative symlinks in same directory"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc51c44ee515ce6a4acf3",
    "number": 1209,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1209 from altendky/patch-1\n\nAdd readme step for installing build deps per wiki"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc51d44ee515ce6a4acf4",
    "number": 1200,
    "body": "See https://github.com/pyenv/pyenv/issues/1199 and https://github.com/pyenv/pyenv/commit/1e96b2c3211a5112a9c348e8538d1f5f9f02b438",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "#1199 introduced Python 3.5.6 not 3.7 (#1200)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc51e44ee515ce6a4acf5",
    "number": 1197,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [X] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [X] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [X] My PR addresses the following pyenv issue (if any)\r\n  - closes #566 \r\n  - closes #1159 \r\n  - #1078 \r\n\r\n\r\n### Description\r\n- [X] This seems like a common usage issue that it is not entirely clear from the CLI that you can specify multiple versions.  The README.md documents this, but I thought it might be helpful to enhance the docs and tips in the CLI when users encounter these \"command found in versions\" messages.\r\n\r\nThese changes are just documentation changes, and an added tip in the output of pyenv-where.\r\n\r\nfwiw, I thought perhaps the help could also provide the link reference to https://github.com/pyenv/pyenv#choosing-the-python-version, but I didn't include that here.\r\n\r\n### Tests\r\n- n/a\r\n\r\n### Example output\r\n<pre>\r\n$ PYENV_VERSION=3.7.0 ./bin/pyenv which python2.7\r\npyenv: python2.7: command not found\r\n\r\nThe `python2.7' command exists in these Python versions:\r\n  2.7.15\r\n\r\n<b>Note: See 'pyenv help global' for tips on allowing both\r\n      python2 and python3 to be found.</b>\r\n</pre>\r\n\r\n<pre>\r\n$ ./bin/pyenv help global\r\nUsage: pyenv global &lt;version&gt; &lt;version2&gt; &lt;..&gt;\r\n\r\nSets the global Python version(s). You can override the global version at\r\nany time by setting a directory-specific version with `pyenv local'\r\nor by setting the `PYENV_VERSION' environment variable.\r\n\r\n<b>&lt;version&gt; should be a space-separated list</b> of Python versions known\r\nto pyenv.  The special version string `system' will use your default\r\nsystem Python.  Run `pyenv versions' for a list of available Python\r\nversions.\r\n\r\n<b>Example: To enable the python2.7 and python3.7 shims to find their\r\n         respective executables you could set both versions with:\r\n\r\n'pyenv global 3.7.0 2.7.15'</b>\r\n\r\n</pre>",
    "head_branch": "help_document_version_lists",
    "is_a_fork": true,
    "comments": [
      "Just noticed this hasn't merged..  any remaining issues?",
      "👍 Ran into this the other day, clarity around multiple versions actually being supported would have been appreciated."
    ],
    "commit_messages": [
      "Update help docs to clarify multiple version(s) are allowed (#1197)\n\n* Update help docs to clarify multiple version(s) are allowed\r\n\r\n* Tweek version(s) help description"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc51f44ee515ce6a4acf6",
    "number": 1196,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/886\r\n\r\n### Description\r\n- [x] See the commit message for details.\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "fbsd",
    "is_a_fork": true,
    "comments": [
      "Let me know what you think.  I believe I may yet need to include another symlinks for pip, when only pip3 is created.  I can follow up later.",
      "It turns out, CPython's Makefile [already links `pythonX.Y<suf>` to `pythonX.Y` since at least `2.7.4` and `3.2`](https://github.com/python/cpython/commit/771d33e1134111a041df78acf7761a9f015d4ea5). so this is not needed.\r\n\r\nI couldn't reproduce the error in #866, and there was no debug trace given as required by the issue template -- so can't say why it happened."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc52044ee515ce6a4acf7",
    "number": 1191,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from that project.\r\n  * We occasionally import the changes from rbenv. In general, you can expect changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we prefer not to make changes in the core in order to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/1184\r\n\r\n### Description\r\n- [ ] pyenv builds/installs `openssl` into a sub-directory of a new installation prefix, but Python is not configured to use it. Without `./configure --with-openssl=${somewhere}` it will favor the system's OpenSSL. In the case of Darwin, this always fails because the version of OpenSSL is no longer supported (Python >=3.7.0).\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "issue-1184",
    "is_a_fork": true,
    "comments": [
      "This problem still exists; this fix is important for users on macOS — they shouldn't have to install their own copy of OpenSSL somewhere when pyenv already downloads and builds it!",
      "OK, so the patch as provided doesn't actually fix the problem, because it tries to test for the presence of the built OpenSSL before the build actually runs. This fails, so it doesn't link against the newly built OpenSSL."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc52044ee515ce6a4acf8",
    "number": 1185,
    "body": "Main motivation: `which foo` should not return a pyenv shim in case `foo` is installed in some environment, but not the current.\r\nThis is a main issue with pyenv, and this fixes it.\r\n\r\nRef: https://github.com/pyenv/pyenv/issues/1112\r\n\r\nAdd PYENV_SHIM, and use it with remove_from_path\r\n\r\nThis is required to avoid infinite recursion with \"system\" version.\r\n\r\nCould also use PYENV_SHIM_PATH, but having PYENV_SHIM is more\r\nflexible/useful.\r\n\r\nTODO:\r\n\r\n- [x] make pyenv-shell and pyenv-global update $PATH.  Currently it only works for \"pyenv-local\" via cd hook (using zsh-autoenv).\r\n- [ ] needs to remove any shim files in the root dir probably, otherwise it fails when there is a shim \"foo\" already, and rehash gets called for a version called \"foo\"\r\n- [ ] pyenv-virtualenv: Also should run (the new) rehashing when activating a virtualenv directly (not using the chpwd hook).\r\n\r\nUses the following chpwd handler (Zsh), e.g. via\r\n[zsh-autoenv](https://github.com/Tarrasch/zsh-autoenv):\r\n\r\n```zsh\r\n  _my_autoenv_pyenv_chpwd() {\r\n    # Experimental: maintain separate shims dir for pyenv.\r\n    local version\r\n    if [[ -z \"$PYENV_VERSION\" ]]; then\r\n      # version=$(pyenv version-name)\r\n\r\n      # Optimized version of pyenv-version-name:\r\n      local -a pyenv_version_file\r\n      setopt localoptions extendedglob\r\n      pyenv_version_file=(./(../)#.python-version(NY1:A))\r\n      if (( $#pyenv_version_file )); then\r\n        version=$(<$pyenv_version_file[1])\r\n      else\r\n        if [[ -f \"$PYENV_ROOT/version\" ]]; then\r\n          version=$(<$PYENV_ROOT/version)\r\n        else\r\n          version=system\r\n        fi\r\n      fi\r\n    else\r\n      version=$PYENV_VERSION\r\n    fi\r\n\r\n    if [[ -z \"$_PYENV_AUTO_VERSION\" || \"$_PYENV_AUTO_VERSION\" != \"$version\" ]]; then\r\n      _PYENV_AUTO_VERSION=$version\r\n      out=$(PATH=$PYENV_ROOT/libexec:$PATH pyenv-sh-shell --updated-path $version | grep '^PATH')\r\n      if [[ -z \"$out\" ]]; then\r\n        echo \"chpwd: pyenv-sh-shell $version failed\"\r\n      fi\r\n      eval \"$out\"\r\n    fi\r\n  }\r\n  add-zsh-hook chpwd _my_autoenv_pyenv_chpwd\r\n```\r\n\r\nDrawbacks:\r\n\r\n- ~~calls `pyenv version-name` every time you change a directory (if\r\n  `pyenv-shell` was not used).  This could be optimized e.g. by looking for the\r\n  `.python-version` file only.~~\r\n\r\n/cc @yyuu @mislav \r\n",
    "head_branch": "separate-shim-paths",
    "is_a_fork": true,
    "comments": [
      "Works quite well for pyenv-shell now already - but no support for fish yet.\r\n\r\nAs for pyenv-local, should we install a chpwd hook ourselves?\r\nI know that you can have several functions in Zsh, but do not know if there is only a global one in Bash/fish.",
      "Interesting approach! I can definitely see value in fixing `which foo` depending on Python version, but I think the extra complexity necessary to pull this off might not be worth porting to rbenv at this time. If rbenv ended up depending on a chpwd shell handler, I would rather recommend using chruby instead.",
      "Hi guys any progress on this one?",
      "@1oglop1 \r\nI am still using it myself, and invite you to try it - just check out my PR use it from there.\r\nThere are issues with other plugins at least, so if you use pyenv-virtualenv also (which is not really necessary), you should use my PR from there, too.\r\nAlso make sure to install a chpwd handler (and example for zsh/zsh-autoenv is above).\r\nLater we would/should ship a chpwd handler probably, but I also agree with @mislav somehow that there are light solutions after all.\r\n\r\nI am using pyenv myself mainly only for installing different Python versions, and use normal virtualenvs per project (created using `python -m venv .venv` and then have (another) chpwd handler to activate those automatically).",
      "@blueyed Thanks I will try later, I was happy having it installed via brew, but I will.\r\n\r\nbtw what's `chpwd`? I've never heard of it and I'm not using `zsh` since it's not \"standard\" shell installed on servers. \r\n\r\nBut if I understand it correctly it does the same thing as `direnv`",
      "You can install it in parallel using `~/.pyenv` (https://github.com/pyenv/pyenv#basic-github-checkout), but make sure to only use it from there then.  After checking it out there, add my remote and check out this branch there.\r\n`chpwd` is a hook Zsh and Bash provide to execute a function if you change a directory, and direnv provide this via `direnv hook bash` for Bash.\r\nYou can use direnv (if you are using it already), but would need to change parts of `_my_autoenv_pyenv_chpwd`, since it uses Zsh globbing (the \"Optimized version of pyenv-version-name\" part).\r\nTherefore it is not really trivial.",
      "> You can use direnv \r\n\r\nNot really, sorry.\r\n\r\nBut you can use the method it uses to create the chpwd hook:\r\n```\r\n_pyenv_hook() {\r\n  local previous_exit_status=$?;\r\n  …\r\n  return $previous_exit_status;\r\n};\r\nif ! [[ \"$PROMPT_COMMAND\" =~ _pyenv_hook ]]; then\r\n  PROMPT_COMMAND=\"_pyenv_hook;$PROMPT_COMMAND\";\r\nfi\r\n```",
      "@blueyed I finally got some time, to play around your branch.\r\nIt took me some time since git installation does not mention that you need to separately install `python-build` plugin to get `pyenv install` working. \r\nNow I can do `pyenv shell <version>` but my default path is still pointing to \r\n`~/.pyenv/shims` instead of `~/.pyenv/shims/<version>` + `.python-version` doesn't do anything. Is this connected to `chpwd` you mentioned or something else?\r\nanyway spearating shims based on python version sounds like a very good idea.\r\n\r\nI also noticed that number of PRs and Issues is increasing are there enough reviewers @joshfriend because there are opened PRs since 2014 ",
      "EDIT:\r\nI finally spent some quality time exploring the code and now I finally understand why\r\n\r\n> `~/.pyenv/shims/<version>` + `.python-version` doesn't do anything.\r\n\r\nIt was because everything executed was first looking for executable in `~/.pyenv/shims` and when that was found it ran all version checks etc.\r\n\r\nNow I understand jargon word `chpwd hook` - which is simply a function which runs when directory is changes.\r\n\r\nWhich means that this branch misses 1 thing.\r\n\r\n`pyenv/libexec/pyenv-init` L89 + L93 - should go away (not sure about the rest, but maybe all can go)\r\n\r\nAnd `pyenv/libexec/pyenv-global` should perform similar/same operation as `updated_path_for_shims` does\r\n\r\n\r\nEDIT\r\n\r\nI noticed that `\"$PYENV_ROOT/shims\"` plays important role in `updated_path_for_shims`. I'm not so familiar how entire pyenv operates the with the `PATH`\r\n\r\nI would say that desired behaviour should look as follows:\r\n\r\n1) pyenv installed, `PATH` is empty - and set to `system` python\r\n2) `pyenv global <version>` adds `$PYENV_ROOT/shims/<version>` to the `PATH`\r\n3) `pyenv shell <version>` adds all it needs to the beginning of `PATH`\r\n4) `pyenv shell --unset` restores previous path",
      "This seems to be working for me so far. I don't know if all of this is necessary, but I ended up doing the following to transition after checking this branch out in my `$PYENV_ROOT`:\r\n\r\n1) `git clean -fdx $PYENV_ROOT/shims`\r\n2) reinstall my python envs\r\n3) Stop using pyenv-virtualenv (I didn't actually try it, but the PR description implies this is not yet supported)",
      "This PR is now so polluted with unrelated commits that I cannot see what it actually does.\r\n\r\nIn particular, I don't see the coveted \"chdir hook\" that must be the key to its usability.",
      "@native-api \r\nYeah, not sure what's up there - could rebase it again (the first commit is \"WIP: use separate shim paths per shell/version\", 4e7d582).\r\n\r\n> In particular, I don't see the coveted \"chdir hook\" that must be the key to its usability.\r\n\r\nThere's an example for one in Zsh in the description itself."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc52144ee515ce6a4acf9",
    "number": 1180,
    "body": "This modification is reapplying #1051 4ebba7cd5f33386e1ddbffe9e020be20f229c509 , which is (accidently?) reverted by #1146 fc90785f75461b8eb67b0a9c3d74f1e4932c9c6f\r\n\r\nWe need this on supercomputer's computing node which is offline but has only old wget",
    "head_branch": "wget_version_check",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1180 from LWisteria/wget_version_check\n\nCheck wget version iff wget is going to be used (again)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc52244ee515ce6a4acfa",
    "number": 1178,
    "body": "CPython 3.6.6 was released on 27-06-2018: <https://www.python.org/downloads/release/python-366/>\r\n\r\nThis PR adds support for it",
    "head_branch": "python366",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1178 from rhymes/python366\n\nAdded CPython 3.6.6"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc52344ee515ce6a4acfb",
    "number": 1177,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.7.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc52444ee515ce6a4acfc",
    "number": 1173,
    "body": "I saw one correction you had made and thought I could make this clearer as a native speaker.\r\n\r\n\"Prefer\" is an interesting verb; I'm struggling to explain why \"don't prefer\" is not quite right. Saying you \"don't prefer\" something isn't the same as saying you \"prefer not to do\" something. Saying \"don't prefer\" is more like saying you don't have a preference, that is, you don't care if it happens or not. Saying \"prefer not\" is saying you have a preference not to do the thing, which is what I think you mean here.\r\n\r\nHope that is helpful, thanks for the useful project!\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from this project.\r\n  * We are occasionally importing the changes from rbenv. In general, you can expect some changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we sometimes don't prefer to make some change in the core to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Language tweaks to PULL_REQUEST_TEMPLATE.md (#1173)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc52444ee515ce6a4acfd",
    "number": 1169,
    "body": "Fixes https://github.com/pyenv/pyenv/issues/789.\r\nRef: #98.",
    "head_branch": "exec",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "pyenv-exec: no `-a` with `exec` to keep $PATH with system version (#1169)\n\nUsing `exec -a` caused Python to use $PATH to look up the full program name (for\r\n`sys.executable`), which 314937d then tried to fix by changing $PATH\r\nalso for the system version.\r\nThis is not necessary anymore when not using the short name with `exec`.\r\n\r\nThis was rejected upstream\r\n(https://github.com/rbenv/rbenv/pull/1089#issuecomment-394531896), since\r\nit is not a problem with Ruby apparently.\r\n\r\nUses $PYENV_ROOT to check if system version is used.\r\n\r\nFixes https://github.com/pyenv/pyenv/issues/98.\r\nFixes https://github.com/pyenv/pyenv/issues/789."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc52544ee515ce6a4acfe",
    "number": 1168,
    "body": "This was imported semi-automatically in 0965577, but `ruby -S` is\r\ndifferent from `python -S`.\r\n\r\n`ruby -S`: look for the script using PATH environment variable\r\n`python -S`: don't imply 'import site' on initialization",
    "head_branch": "remove-test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "tests: remove \"supports python -S <cmd>\" (#1168)\n\nThis was imported semi-automatically in 0965577, but `ruby -S` is\r\ndifferent from `python -S`.\r\n\r\n`ruby -S`: look for the script using PATH environment variable\r\n`python -S`: don't imply 'import site' on initialization"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc52644ee515ce6a4acff",
    "number": 1166,
    "body": "\"pyenv rehash\" does not work on OpenBSD.\r\n\r\n```sh\r\n$ pyenv rehash\r\n/home/tsahara/.pyenv/libexec/pyenv-rehash: line 43: seq: command not found\r\npyenv: cannot rehash: /home/tsahara/.pyenv/shims/.pyenv-shim exists\r\n```\r\n\r\nseq(1) is not available on OpenBSD.\r\n\r\n```sh\r\n% which seq\r\nseq not found\r\n```\r\n\r\nThe couting loop can be written in pure bash (attached patch).  Or we can use an alternative command [jot(1)](https://man.openbsd.org/jot) on OpenBSD.\r\n\r\n----\r\nToo many issues will kill our team's development velocity, drastically.\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Make sure your problem is not listed in [the common build problems](https://github.com/pyenv/pyenv/wiki/Common-build-problems).\r\n* [x] Make sure no duplicated issue has already been reported in [the pyenv issues](https://github.com/pyenv/pyenv/issues). You should look for closed issues, too.\r\n* [x] Make sure you are not asking us to help solving your specific issue.\r\n  * GitHub issues is opened mainly for development purposes. If you want to ask someone to help solving your problem, go to some community site like [Gitter](https://gitter.im/yyuu/pyenv), [StackOverflow](https://stackoverflow.com/questions/tagged/pyenv), etc.\r\n* [x] Make sure your problem is not derived from packaging (e.g. [Homebrew](https://brew.sh)).\r\n  * Please refer to the package documentation for the installation issues, etc.\r\n* [x] Make sure your problem is not derived from plugins.\r\n  * This repository is maintaining `pyenv` and the default `python-build` plugin only. Please refrain from reporting issues of other plugins here.\r\n\r\n### Description\r\n- [x] Platform information (e.g. Ubuntu Linux 16.04): OpenBSD, all versions (maybe)\r\n- [x] OS architecture (e.g. amd64): not platform specific. confirmed on amd64.\r\n- [x] pyenv version: git master (eee72eecdf0685312c1d3096e4ffc4fffacc4617)\r\n- [x] Python version: n/a\r\n- [x] C Compiler information (e.g. gcc 7.3): n/a\r\n- [x] Please attach verbose build log as gist: not a build issue",
    "head_branch": "openbsd-does-not-have-seq",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1166 from tsahara/openbsd-does-not-have-seq\n\nseq(1) is not available on OpenBSD."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc52744ee515ce6a4ad00",
    "number": 1165,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from this project.\r\n  * We are occasionally importing the changes from rbenv. In general, you can expect some changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we sometimes don't prefer to make some change in the core to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nThis PR consists of a single commit adding two new files, which allow the user to install both **Anaconda2 5.2.0** and **Anaconda3 5.2.0** for macOS (64 bit) and Linux (both 32 and 64 bit).\r\n\r\nThe only one of the six Anaconda installation scripts (**Anaconda3 5.2.0**) has been tested only on macOS to see if it is installable, but every other script should also work properly on each OS platform; please check if they are installable with the other possible scripts and OSs combinations.\r\n\r\nThe SHA-256 checksum for each Anaconda shell file is copied from the following pages:\r\n\r\n- https://docs.anaconda.com/anaconda/install/hashes/Anaconda2-5.2.0-Linux-x86.sh-hash\r\n- https://docs.anaconda.com/anaconda/install/hashes/Anaconda2-5.2.0-Linux-x86_64.sh-hash\r\n- https://docs.anaconda.com/anaconda/install/hashes/Anaconda2-5.2.0-MacOSX-x86_64.sh-hash\r\n- https://docs.anaconda.com/anaconda/install/hashes/Anaconda3-5.2.0-Linux-x86.sh-hash\r\n- https://docs.anaconda.com/anaconda/install/hashes/Anaconda3-5.2.0-Linux-x86_64.sh-hash\r\n- https://docs.anaconda.com/anaconda/install/hashes/Anaconda3-5.2.0-MacOSX-x86_64.sh-hash\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n\r\nAs mentioned in the section above, I have only checked one of the six Anaconda installation scripts, which is **Anaconda3 5.2.0** on macOS (10.12.6). But I believe five of the other scripts should work on each OS platform.\r\n\r\nJust to mention that I did quadruple-check to make sure the SHA-256 checksum for each Anaconda shell file is properly copied and pasted from the pages listed above to the newly added `anaconda2-5.2.0` and `anaconda3-5.2.0` files (they are the renamed duplicates of its predecessor files, i.e. `anaconda2-5.1.0` and `anaconda3-5.1.0`). For this reason, I believe they all should work fine (unless copy-and-pasting was wrongly done by me, even after the quadruple-checks).\r\n\r\n---\r\n\r\n### Message from the contributor\r\n\r\nPlease review my commit(s) and if necessary, rectify as appropriate.\r\n\r\nThank you!\r\n\r\nsho",
    "head_branch": "add-anaconda-5.2.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1165 from shoichiaizawa/add-anaconda-5.2.0\n\npython-build: add anaconda[23]-5.2.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc52844ee515ce6a4ad01",
    "number": 1164,
    "body": "This appears to be done to get the resolved name for `$PYENV_DIR`, but\r\nthat is not really necessary.\r\n\r\nAnd its existence is checked below.\r\n\r\nAfter doing this I found 19e2b95 (which added no tests?), and that we still have the `cd` in https://github.com/pyenv/pyenv/compare/master...blueyed:no-cd?expand=1#diff-414cbe2ca9ee5fbfdc48e82392f82db7L87 (with an additional subshell).\r\n\r\nI think a test for what 19e2b95 fixed should be added, and the extra `PYENV_DIR=$(cd \"$PYENV_DIR\" && echo \"$PWD\")` removed then if possible.\r\n\r\n/cc @zachriggle \r\n\r\nUpstream: https://github.com/rbenv/rbenv/pull/1085",
    "head_branch": "no-cd",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc52844ee515ce6a4ad02",
    "number": 1160,
    "body": "",
    "head_branch": "micropython194",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add micropython 1.9.4 (#1160)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc52944ee515ce6a4ad03",
    "number": 1153,
    "body": "All scripts in libexec/ (excluding pyenv) are called through pyenv,\r\ntherefore the shebang lines are not necessary. On some systems this\r\nprovides a measurable increase in performance of the shell prompt.\r\n\r\nRelated to pyenv/pyenv-virtualenv#259\r\n\r\nOn my system this removes 1050ms of runtime from `pyenv sh-activate --quiet`.\r\n",
    "head_branch": "remove-sbang",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1153 from cmcginty/remove-sbang\n\nRemove shebang lines from scripts for performance"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc52a44ee515ce6a4ad04",
    "number": 1151,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* n/a - Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* n/a Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from this project.\r\n  * We are occasionally importing the changes from rbenv. In general, you can expect some changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we sometimes don't prefer to make some change in the core to keep compatibility with rbenv.\r\n* n/a My PR addresses the following pyenv issue (if any)\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nImported changes from https://github.com/rbenv/ruby-build to python-build\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n\r\nI've imported some placeholder for new test in ruby-build.",
    "head_branch": "ruby-build-20180424",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1151 from pyenv/ruby-build-20180424\n\nImport latest changes from https://github.com/rbenv/ruby-build as of v20180424"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc52b44ee515ce6a4ad05",
    "number": 1149,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from this project.\r\n  * We are occasionally importing the changes from rbenv. In general, you can expect some changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we sometimes don't prefer to make some change in the core to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\nTBD\r\n\r\nGenerate symlinks to Python executables based on [PEP 394](https://www.python.org/dev/peps/pep-0394/)\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "pep394",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc52c44ee515ce6a4ad06",
    "number": 1147,
    "body": "### Prerequisite\r\n* [NA] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [NA] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from this project.\r\n  * We are occasionally importing the changes from rbenv. In general, you can expect some changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we sometimes don't prefer to make some change in the core to keep compatibility with rbenv.\r\n* [X] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/273\r\n\r\n### Description\r\n\r\n#273 was closed since it was a defect in old python, not pyenv. However, pyenv's patching system allows us to work around that defect so that extension bundles can be built on newer OSX distributions. This PR adds support for that; I hope the issue can be reopened and resolved via this PR.\r\n\r\n**There is a lot of code in the patch file, but I didn't hand-write any of it.** In the #273 discussion thread, the python issue that causes this behavior is linked: https://bugs.python.org/issue21811; in order to implement this PR, I did the following:\r\n\r\n- Downloaded the 2.7.6 sources used by pyenv.\r\n- Applied the patch to the `configure.ac` file from that issue: https://bugs.python.org/file35698/issue_21811_yosemite_support_configure_27.patch\r\n- Ran `autoreconf` on those sources (Homebrew-installed GNU autoconf 2.69).\r\n- Took a diff of the resulting `configure` file and turned it into this patch.\r\n\r\nOther Pythons may also benefit from this change. I've been cautious and just applied it to 2.7.6, since that is the platform on which I am developing and testing. I can confirm that I have experienced no issues with extension modules built with this patch in my development.\r\n\r\nIf pyenv maintainers want me to do the above patch process for other versions I am happy to do that.\r\n\r\n### Tests\r\nI have tested the various install issues in the #273 discussion thread. None of them reoccur with this PR's changes, and the post-install `sed` statements suggested are no longer necessary.\r\n\r\n`bats test` has 2 failures for me on a clean master checkout. The failures are no different with this branch's changes.",
    "head_branch": "fix_bundle_loader_for_new_osx",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1147 from zbentley/fix_bundle_loader_for_new_osx\n\nAddress #273 via a patch from python#21811"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc52d44ee515ce6a4ad07",
    "number": 1146,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n  * This is core functionality of python-build plugin and needs to be implemented in its plugin code\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from this project.\r\n  * We are occasionally importing the changes from rbenv. In general, you can expect some changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we sometimes don't prefer to make some change in the core to keep compatibility with rbenv.\r\n  * https://github.com/rbenv/ruby-build/pull/1198\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/1126\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nLet python-build to pick up HTTP client without relying on the commands in `$PATH`. Since pyenv is using shim script architecture, checking availability of some command based on the presence doesn't make sense.\r\n\r\nThis effectively allows user to use custom arbitrary HTTP client without relying on python-build's code. It might be better to do some extra refactoring the code around there.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n  * <del>will do</del> rewritten some tests with using `PYTHON_BUILD_HTTP_CLIENT`",
    "head_branch": "http-client-based-on-envvar",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1146 from pyenv/http-client-based-on-envvar\n\nAllow overriding HTTP client type based on environment variable"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc52d44ee515ce6a4ad08",
    "number": 1145,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n  * Unfortunately, this cannot be implemented as a hook script since this needs to work prior to invoking hook scripts\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from this project.\r\n  * We are occasionally importing the changes from rbenv. In general, you can expect some changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we sometimes don't prefer to make some change in the core to keep compatibility with rbenv.\r\n  * <del>I'm going to propose this change to rbenv later</del> https://github.com/rbenv/rbenv/pull/1076\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/pull/1092\r\n  - https://github.com/pyenv/pyenv/pull/1137\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nImproved locking mechanism of rehash to wait until acquisition of the _lock_ instead of fail immediately. For now the code keeps using original pseudo locking mechanism based on `noclobber`.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n  - <del>will implement some</del> implemented basic tests with setting custom `PYENV_REHASH_TIMEOUT`",
    "head_branch": "rehash-wait",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1145 from pyenv/rehash-wait\n\nWait rehash until lock acquisition"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc52e44ee515ce6a4ad09",
    "number": 1144,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from this project.\r\n  * We are occasionally importing the changes from rbenv. In general, you can expect some changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we sometimes don't prefer to make some change in the core to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Updated `README.md` with instructions for reinitializing / restarting fish shell, also added instructions for setting up `pyenv` in a fish shell environment.\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc52f44ee515ce6a4ad0a",
    "number": 1143,
    "body": "add simple check for fish shell to prevent reading the `\\$PYENV_ROOT/shims` directory to the `\\$PATH` when launching `tmux` or reinitializing the shell via `exec fish`. \r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from this project.\r\n  * We are occasionally importing the changes from rbenv. In general, you can expect some changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we sometimes don't prefer to make some change in the core to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [x] Prevent duplicate path entries for `$PYENV_ROOT/shims` in the `$PATH` using fish shell.\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "fix-fish-double-paths",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc53044ee515ce6a4ad0b",
    "number": 1140,
    "body": "",
    "head_branch": "2.7.15rc1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1140 from fschulze/2.7.15rc1\n\nAdd Python 2.7.15rc1."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc53044ee515ce6a4ad0c",
    "number": 1137,
    "body": "The rehash command doesn't take too long to run, but can add up when\r\nseveral *env projects (rbenv, pyenv, nodenv, etc) are installed at the\r\nsame time. This makes it run in the background so that you don't have\r\nto skip it altogether (using the `--no-rehash` flag) but also don't\r\nhave to wait a lot during shell initialization.\r\n\r\nThe `()` around the command prevent it from displaying the job number\r\nor the \"job done\" message once it finishes.\r\n\r\nMake sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [ ] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [ ] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from this project.\r\n  * We are occasionally importing the changes from rbenv. In general, you can expect some changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we sometimes don't prefer to make some change in the core to keep compatibility with rbenv.\r\n* [ ] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/XXXX\r\n\r\n### Description\r\n- [ ] Here are some details about my PR\r\n\r\n### Tests\r\n- [ ] My PR adds the following unit tests (if any)\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc53144ee515ce6a4ad0d",
    "number": 1133,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from this project.\r\n  * We are occasionally importing the changes from rbenv. In general, you can expect some changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generally speaking, we sometimes don't prefer to make some change in the core to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - none\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nI've imported the latest changes from https://github.com/rbenv/rbenv, just like past similar PRs I have made as #669\r\n\r\n```sh\r\ngit merge rbenv/master -s recursive -X rename-threshold=5%\r\n```\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n    * I skipped this since I didn't made any new change by myself, for now. I may be going to change my mind if incompatibility between rbenv come up as some problem",
    "head_branch": "rbenv-20180402",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1133 from pyenv/rbenv-20180402\n\nImport changes from rbenv as of 20180402"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc53244ee515ce6a4ad0e",
    "number": 1132,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from this project.\r\n  * We are occasionally importing the changes from rbenv. In general, you can expect some changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generaly speaking, we sometimes don't prefer to make some change in the core to keep compatibility with rbenv.\r\n  * I'm pretty sure this is pyenv specific!\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nFixed typo in PR template.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n\r\nI'm pretty sure this won't bother anything in the code itself!",
    "head_branch": "fix-typo-in-pr-template",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1132 from pyenv/fix-typo-in-pr-template\n\nFixed a typo in PR template"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc53344ee515ce6a4ad0f",
    "number": 1131,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as a hook script or plugin as a first step.\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer to [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement it as a plugin if possible.\r\n* [x] Please consider contributing the patch upstream to [rbenv](https://github.com/rbenv/rbenv), since we have borrowed most of the code from this project.\r\n  * We are occasionally importing the changes from rbenv. In general, you can expect some changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generaly speaking, we sometimes don't prefer to make some change in the core to keep compatibility with rbenv.\r\n  * This change is pretty much Python specific.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/1127\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nLet python-build to use custom URL for `get-pip.py` some specific versions of CPython as a tentative workaround for backward compatibility issue of pip.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n\r\nAdded some tests of `GET_PIP_URL` value for 2.6, 3.2, 3.3 and other versions.",
    "head_branch": "workaround-get-pip-url-py26-py32",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1131 from pyenv/workaround-get-pip-url-py26-py32\n\nUse custom get-pip URL based on the target version"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc53444ee515ce6a4ad10",
    "number": 1130,
    "body": "",
    "head_branch": "fix-changelog",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Modify changelog to indicate CPython 3.6.5 (#1130)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc53544ee515ce6a4ad11",
    "number": 1128,
    "body": "Manage `GET_PIP_URL` value at single place for readability.\r\n",
    "head_branch": "pip-version-workaround2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1128 from pyenv/pip-version-workaround2\n\nRefactoring around `GET_PIP_URL`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc53544ee515ce6a4ad12",
    "number": 1124,
    "body": "cf. pyenv/pyenv-installer#70",
    "head_branch": "pip-version-workaround",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1124 from pyenv/pip-version-workaround\n\nUnset `PIP_VERSION` before invoking `get-pip.py` as a workaround for `invalid truth value` error"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc53644ee515ce6a4ad13",
    "number": 1123,
    "body": "Make sure you have checked all steps below.\r\n\r\n### Prerequisite\r\n* [x] Please consider implementing the feature as hook script or plugin at first\r\n  * pyenv has some powerful support for plugins and hook scripts. Please refer [Authoring plugins](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) for details and try to implement as some plugin if possible.\r\n* [x] Please consider contribute similar patch to [rbenv](https://github.com/rbenv/rbenv) since we have borrowed most of lines with the project\r\n  * We are occasionally importing the changes from the rbenv. In general, you can expect some changes made in rbenv will be imported to pyenv too, eventually.\r\n  * Generaly speaking, we sometime don't prefer to make some change in the core feature to keep compatibility with rbenv.\r\n* [x] My PR addresses the following pyenv issue (if any)\r\n  - https://github.com/pyenv/pyenv/issues/1116\r\n\r\n### Description\r\n- [x] Here are some details about my PR\r\n\r\nThis adds the templates for issues and pull requests.\r\n\r\n### Tests\r\n- [x] My PR adds the following unit tests (if any)\r\n\r\nNone. Actually I didn't made any changes to the code itself.",
    "head_branch": "github-issue-templates",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1123 from pyenv/github-issue-templates\n\nAdd template for issues and pull requests"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc53744ee515ce6a4ad14",
    "number": 1121,
    "body": "I found dead link inside ToC of this project.\r\n\r\n* https://github.com/pyenv/pyenv#version-history\r\n* https://github.com/pyenv/pyenv#license\r\n\r\nBoth are considered lost when merging with the [rbenv's README](https://github.com/rbenv/rbenv/blob/master/README.md).\r\n\r\nI fixed that both were useful information and that I should leave the link.",
    "head_branch": "fix-dead-link-in-toc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix dead links in ToC (#1121)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc53844ee515ce6a4ad15",
    "number": 1120,
    "body": "This corrects the deffect where pyenv tries to determine an absolute\r\npath of the directory containing a file and follows symlinks\r\nmanually. Because of missing check it behaved correctly, but a\r\nmisleading error message was shown in the terminal output.\r\nResolves #1118.\r\n\r\nThanks to @HQJaTu for the initial patch.",
    "head_branch": "bugfix/dont-follow-symlinked-files-as-dirs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc53944ee515ce6a4ad16",
    "number": 1117,
    "body": "As noted in https://github.com/pyenv/pyenv/issues/993 Python 3.7 changes the way that non default location openssl is added to configure. See https://bugs.python.org/issue32598\r\n\r\nThis pr aims to make python 3.7b2 build with openssl on High Sierra again by adding openssl to PKG_CONFIG_PATH \r\n",
    "head_branch": "37opensslsupport",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Set openssl PKG_CONFIG_PATH for python 3.7 (#1117)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc53a44ee515ce6a4ad17",
    "number": 1113,
    "body": "Support for installing the ActivePython binary distribution for Linux. \r\n\r\nIncludes the current releases.\r\n",
    "head_branch": "activepython",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1113 from timsavage/activepython\n\nSupport for ActivePython"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc53a44ee515ce6a4ad18",
    "number": 1110,
    "body": "There is a minor problem when stack-running shell -- the PATH variable keeps on appending the `.../.pyenv/shims:...`. You can reproduce it by running\r\n\r\n```\r\nbash\r\nbash\r\nbash\r\nbash\r\necho ${PATH}\r\n# On my machine prints\r\n# /home/zafar/.pyenv/shims:/home/zafar/.pyenv/bin:/home/zafar/.pyenv/shims:/home/zafar/.pyenv/bin:/home/zafar/.pyenv/shims:/home/zafar/.pyenv/bin:/home/zafar/.pyenv/shims:/home/zafar/.pyenv/bin:/home/zafar/.pyenv/shims:/home/zafar/.pyenv/bin:/home/zafar/.pyenv/shims:/home/zafar/.pyenv/bin:...\r\n```\r\n\r\nThis PR adds a safety check if the appended path already exists in the `${PATH}`. Note that the check is if the appended path is between `(^|:)` and `($|:)` -- just in case there is a need to add sub-paths (i.e.: it is fine to add `/some/long/path` and `/some/long/` after it).",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc53b44ee515ce6a4ad19",
    "number": 1104,
    "body": "This patch using $ORIGIN in rpath, which make the binary can be moved to other location.",
    "head_branch": "pr/rpath-origin",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc53c44ee515ce6a4ad1a",
    "number": 1101,
    "body": "This also fixes the aspect ratio of the image being incorrect.\r\n\r\nIf you find it too large, I can keep HTML markup to make it centered and smaller while preserving its aspect ratio.",
    "head_branch": "readme-use-markdown-image",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1101 from Calinou/readme-use-markdown-image\n\nUse Markdown image markup in README"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc53d44ee515ce6a4ad1b",
    "number": 1100,
    "body": "This PR consists of a single commit adding two new files, which allow the user to install both Anaconda2 5.1.0 and Anaconda3 5.1.0.\r\n\r\nThe tests have been done only on macOS, but it should also work on Linux; please check if it is buildable on Linux.\r\n\r\nThe SHA-256 checksum for each Anaconda shell file is copied from the following pages:\r\n\r\n- https://docs.anaconda.com/anaconda/install/hashes/Anaconda2-5.1.0-Linux-x86.sh-hash\r\n- https://docs.anaconda.com/anaconda/install/hashes/Anaconda2-5.1.0-Linux-x86_64.sh-hash\r\n- https://docs.anaconda.com/anaconda/install/hashes/Anaconda2-5.1.0-MacOSX-x86_64.sh-hash\r\n- https://docs.anaconda.com/anaconda/install/hashes/Anaconda3-5.1.0-Linux-x86.sh-hash\r\n- https://docs.anaconda.com/anaconda/install/hashes/Anaconda3-5.1.0-Linux-x86_64.sh-hash\r\n- https://docs.anaconda.com/anaconda/install/hashes/Anaconda3-5.1.0-MacOSX-x86_64.sh-hash",
    "head_branch": "add-anaconda-5.1.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1100 from shoichiaizawa/add-anaconda-5.1.0\n\npython-build: add anaconda[23]-5.1.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc53e44ee515ce6a4ad1c",
    "number": 1096,
    "body": "This PR seeks to add a new `build` hook, allowing for plugins to modify the build tree before compilation, but after extraction.",
    "head_branch": "add-build-hooks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc53f44ee515ce6a4ad1d",
    "number": 1094,
    "body": "The current checksums for tar.xz and .tgz files are reversed. This\ncauses python-build to fail with a checksum mismatch error.\n\nReversing the checksums to allow the build to succeed.",
    "head_branch": "update-3.4.8",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1094 from claco/update-3.4.8\n\nCorrect CPython 3.4.8 Checksums"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc53f44ee515ce6a4ad1e",
    "number": 1093,
    "body": "This replaces the screenshot in the readme with one made using Carbon (https://github.com/dawnlabs/carbon).",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1093 from charlesreid1/master\n\nImprove screenshot in readme"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc54044ee515ce6a4ad1f",
    "number": 1092,
    "body": "We encountered the same error (in the same parallelizing-build-system setting) as #174, as the hook around `pip install` occasionally ran at the same time. Since `rehash` is a relatively quick operation, and `pip install` operations can take a while, it isn't feasible to force our build system to serialize those steps.\r\n\r\nRather than simply emitting an error message and failing, it'd be nicer if users can opt in to using a file lock when running `pyenv-rehash`. This commit adds the `PYENV_REHASH_PARALLEL_SAFE` environment variable that can be used to accomplish this goal.\r\n\r\nOn a Linux system, this works well with `flock`. This unfortunately does not exist on macOS by default, but we can fall back to the included `shlock` and achieve reasonable success.",
    "head_branch": "feature/pyenv-rehash-parallel-safe",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc54144ee515ce6a4ad20",
    "number": 1091,
    "body": "1. Add 3.8-dev\r\n1. Update 3.4.8rc1 to 3.4.8 release\r\n\r\nResolves #1088.",
    "head_branch": "python-build-updates",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1091 from BanzaiMan/python-build-updates\n\nPython-build updates"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc54244ee515ce6a4ad21",
    "number": 1090,
    "body": "Pretty straightforward. [3.5.5 released 2018-02-05](https://docs.python.org/3.5/whatsnew/changelog.html#python-3-5-5).",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1090 from draeath/master\n\nAdd CPython 3.5.5"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc54344ee515ce6a4ad22",
    "number": 1086,
    "body": "",
    "head_branch": "3.7b1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "3.7.0a4 -> 3.7.0b1 (#1086)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc54344ee515ce6a4ad23",
    "number": 1084,
    "body": "",
    "head_branch": "pypy3-5.10.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1084 from scop/pypy3-5.10.1\n\nAdd pypy3 5.10.1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc54444ee515ce6a4ad24",
    "number": 1082,
    "body": "## b64c445: Do not create `clear` shim when Anaconda is installed\r\n\r\nAdd `clear` to the Anaconda's default blacklist in order to prevent pyenv from creating the shim script for it.\r\n\r\nThe `clear` command executable began included from Anaconda 5.0.0 onwards, and this executable now conceals that of the user's base system - this hinders the user from running the `clear` command with the `command not found` error output if a user installs and selects one or more Python versions other than Anaconda 5.x.x.\r\n\r\nAdding this one-liner to the blacklist allows the user to use the `clear` command even when Anaconda 5.x.x is not selected by pyenv.\r\n\r\n---\r\n\r\n### Message from the collaborator\r\n\r\nI added this one-liner fix as I have a few Python versions installed together with Anaconda. I was wondering if adding this `clear` executable to the blacklist (and possibly adding more to it if any interferes with my base system in the future) could potentially cause the Anaconda installation to malfunction or not 🤔\r\n\r\nI am guessing blacklisting the `clear` command in this fix shouldn't be a problem and hoping that other people will also gain the small benefit out of it 🤞 \r\n\r\nPlease review my commit and if necessary, rectify as appropriate 🙇\r\n\r\nThank you 🙏 \r\n\r\nsho",
    "head_branch": "add-clear-to-conda-blacklist",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1082 from shoichiaizawa/add-clear-to-conda-blacklist\n\nDo not create `clear` shim when Anaconda is installed"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc54544ee515ce6a4ad25",
    "number": 1070,
    "body": "Ideally, the `require_distro` function is a little more intelligent to allow Xenial to be detected, but this should be good enough for now.",
    "head_branch": "pypy-xenial",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1070 from BanzaiMan/pypy-xenial\n\nAllow binary installs of PyPy on Xenial"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc54644ee515ce6a4ad26",
    "number": 1069,
    "body": "",
    "head_branch": "pypy-file-rename",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Rename PyPy 5.10 to include TEENY version (#1069)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc54744ee515ce6a4ad27",
    "number": 1062,
    "body": "closes #1061\r\n\r\npypy3.5 (but not 2.7 for some reason) has separate builds for High Sierra and above, so I had to add a version check, similar to the linux distro check. I don't have a High Sierra mac, so I was only able to test on Sierra and setting the expected version to 10.12 temporarily.\r\n\r\nPortable binaries are also not available yet, squeaky is probably enjoying his holiday time 😉 ",
    "head_branch": "pypy-5.10",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1062 from pyenv/pypy-5.10\n\nAdd PyPy[23] 5.10"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc54844ee515ce6a4ad28",
    "number": 1059,
    "body": "This is a simple change to pyenv's python-build plugin allowing it to use \"pkgsrc\" instead of \"homebrew\" for the source of \"readline\" and \"openssl\" when building python.\r\n\r\nThe assumption is that a user will either be using \"homebrew\" or \"pkgsrc\" but not both.\r\n",
    "head_branch": "pkgsrc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc54944ee515ce6a4ad29",
    "number": 1058,
    "body": "https://www.python.org/downloads/release/python-364/",
    "head_branch": "cpython-3.6.4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1058 from zmwangx/cpython-3.6.4\n\nAdd CPython 3.6.4 and remove 3.6.4rc1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc54944ee515ce6a4ad2a",
    "number": 1055,
    "body": "\"pyenv install\" crashes on Solaris with an empty log file. Adding support for the proper Solaris getconf call in num_cpu_cores fixed it. Tested and working under OmniOS CE r151024.",
    "head_branch": "fix-illumos",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1055 from klimkjar/fix-illumos\n\nFix pyenv install on Solaris / Illumos"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc54a44ee515ce6a4ad2b",
    "number": 1053,
    "body": "* Added final Python 3.3 release, 3.3.7\n* Removed Python 3.3.7rc1",
    "head_branch": "add-3.3.7",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added CPython 3.3.7 (#1053)\n\n* Added final Python 3.3 release, 3.3.7\r\n* Removed Python 3.3.7rc1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc54b44ee515ce6a4ad2c",
    "number": 1051,
    "body": "Do not check when tarball is cached",
    "head_branch": "do_not_check_wget_version",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1051 from LWisteria/do_not_check_wget_version\n\nCheck wget version iff wget is going to be used"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc54c44ee515ce6a4ad2d",
    "number": 1041,
    "body": "Configured based on https://docs.travis-ci.com/user/deployment/releases/. There's @yyuu's OAuth token is embedded in encrypted form.\r\n\r\nWith configuring automation for the release, I believe we don't need to create releases manually anymore.\r\n\r\ncc: @joshfriend @blueyed @Samureus \r\n",
    "head_branch": "automate-release",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1041 from pyenv/automate-release\n\nCreate releases on GitHub automatically from tags (fixes #1038)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc54d44ee515ce6a4ad2e",
    "number": 1036,
    "body": "Currently, pyenv uses `cd` in some spots to determine real paths, by abusing `$PWD`.\r\n\r\nThis works in the general case, but fails when `PWD=/proc/self/cwd`.  When `pyenv` attempts to change directories back to the \"old\" directory, it fails to do so.\r\n\r\nThis Pull Request wraps a few of these cases in sub-shells, and changes the code in one instance that uses `$OLDPWD`.\r\n\r\nSpecifically, this issue becomes apparent because it breaks the build for Android Open Source Project when `pyenv` is on `$PATH`, even when `pyenv global system` is in use.  This is because Clang upstream compilers now use `#!/usr/bin/env python` instead of `#!/usr/bin/python` in their shebang for the Python wrapper scripts.",
    "head_branch": "pwd-changes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1036 from zachriggle/pwd-changes\n\nFix $PWD changes when executing Python"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc54e44ee515ce6a4ad2f",
    "number": 1033,
    "body": "",
    "head_branch": "mp193",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1033 from scop/mp193\n\nAdd micropython 1.9.3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc54e44ee515ce6a4ad30",
    "number": 1032,
    "body": "...and use it to add micropython-1.9.3.",
    "head_branch": "install_git-tag",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc54f44ee515ce6a4ad31",
    "number": 1031,
    "body": "",
    "head_branch": "getconf",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1031 from scop/getconf\n\nGet number of processors using getconf over cpuinfo grep"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc55044ee515ce6a4ad32",
    "number": 1026,
    "body": "Continued from #1025. Imported recent changes from https://github.com/rbenv/ruby-build",
    "head_branch": "ruby-build-20171031",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1026 from pyenv/ruby-build-20171031\n\nImported recent changes from the latest ruby-build as of Oct 31, 2017"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc55144ee515ce6a4ad33",
    "number": 1025,
    "body": "I've encountered the same error about a missing OpenSSL lib that has affected other users on macOS 10.13 (See #950 and #993). I've also seen the workaround to this problem (See [Common-build-problems](https://github.com/pyenv/pyenv/wiki/Common-build-problems#error-the-python-ssl-extension-was-not-compiled-missing-the-openssl-lib)).\r\n\r\nI haven't encountered this issue with `rbenv`, so I went searching and they've handled the issue inside `ruby-build`.\r\n\r\nIt seems that High Sierra now bundles LibreSSL, and it's this check that is causing `python-build` to not locate the openssl package.\r\n\r\nI've added in the same check that `ruby-build` does, and it works on my local machine. I've not done any tests on this as I have no idea where to start.\r\n\r\nSee rbenv/ruby-build#1095 and rbenv/ruby-build#1104.",
    "head_branch": "fix-missing-openssl-lib",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1025 from jamieconnolly/fix-missing-openssl-lib\n\nIgnore LibreSSL bundled with macOS 10.13"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc55244ee515ce6a4ad34",
    "number": 1024,
    "body": "Removed 3.2-dev and 3.3-dev and updated location to Github repo. Not sure if it's my ISP or Github but it's taking ages to clone. Grateful if someone could check that they work.",
    "head_branch": "stackless-dev-updates",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Moved stackless-dev to Github repo"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc55244ee515ce6a4ad35",
    "number": 1023,
    "body": "I was thinking that we could remove all the pypy definitions for pypy-portable since the definitions for mainstream pypy already will install pypy-portable if the platform is not supported by the official binaries.\r\n\r\nThoughts?",
    "head_branch": "merge-pypy-portable",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "pypy defs already use pypy-portable if no official binary is available (#1023)\n\nhaving a separate definition for each of these seems redundant"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc55344ee515ce6a4ad36",
    "number": 1022,
    "body": "This PR consists of a single commit adding two new files, which allow the user to install both **Miniconda2 4.3.30** and **Miniconda3 4.3.30**.\r\n\r\nThe tests have been done only on macOS, but it should also work on Linux; please check if it is installable on Linux.\r\n\r\nThe SHA-256 checksums for [each Miniconda shell file](https://repo.continuum.io/miniconda/) have been checked by the following shell command:\r\n\r\n```sh\r\n# checksums for Miniconda2-4.3.30\r\n$ shasum -a 256 Miniconda2-4.3.30-MacOSX-x86_64.sh Miniconda2-4.3.30-Linux-x86_64.sh Miniconda2-4.3.30-Linux-x86.sh\r\n1fa6f0ae3b65fc09ba5156c43a3901c4aad0510735c31f58d1be2a71009416f9  Miniconda2-4.3.30-MacOSX-x86_64.sh\r\n0891000ca28359e63aa77e613c01f7a88855dedfc0ddc8be31829f3139318cf3  Miniconda2-4.3.30-Linux-x86_64.sh\r\n3727dcc1561be246c052d6be210b5fd748bf32407cb7e06d0322fe4f79c77482  Miniconda2-4.3.30-Linux-x86.sh\r\n\r\n# checksums for Miniconda3-4.3.30\r\n$ shasum -a 256 Miniconda3-4.3.30-MacOSX-x86_64.sh Miniconda3-4.3.30-Linux-x86_64.sh Miniconda3-4.3.30-Linux-x86.sh\r\nf8b09aa53b7f66ed62d6dd0fec66fa0aead203d5def28f9f125df93af8dbd78a  Miniconda3-4.3.30-MacOSX-x86_64.sh\r\n66c822dfe76636b4cc2ae5604816e0e723aa01620f50087f06410ecf5bfdf38c  Miniconda3-4.3.30-Linux-x86_64.sh\r\n5d0c59c3d93b56dea90af1be96a9f36aa7f35605d9f821e8b86c1aa31d3b4e4b  Miniconda3-4.3.30-Linux-x86.sh\r\n```\r\n\r\n---\r\n\r\n### Message from the collaborator\r\n\r\nPlease review my commit and if necessary, rectify as appropriate.\r\n\r\nThank you!\r\n\r\nsho",
    "head_branch": "add-miniconda-4.3.30",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "python-build: add miniconda[23]-4.3.30 (#1022)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc55444ee515ce6a4ad37",
    "number": 1021,
    "body": "I got \"too many open files in system\" errors trying to install on macOS, so it would be nice if someone could verify this (also linux)",
    "head_branch": "anaconda-5.0.0",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Don't create shim for bunzip2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc55544ee515ce6a4ad38",
    "number": 1019,
    "body": "Tested on Fedora 26. I had to use the workaround posted on https://github.com/pyenv/pyenv/issues/950#issuecomment-334316289\r\n\r\n> Uninstall:\r\n$ dnf remove openssl-devel\r\n\r\n> Install:\r\n$ dnf install compat-openssl10-devel\r\n\r\nto be able to build 3.3.7 and 3.4.7. Stackless 3.5.4 seems to build fine under both OpenSSL 1.0.2 and 1.1, but I haven't done any serious testing besides trying to import _ssl:\r\n\r\n```python\r\n$ python\r\nPython 3.5.4 Stackless 3.1b3 060516 (default, Oct 22 2017, 15:25:02) \r\n[GCC 7.2.1 20170915 (Red Hat 7.2.1-2)] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import _ssl\r\n>>> _ssl.OPENSSL_VERSION\r\n'OpenSSL 1.1.0f-fips  25 May 2017'\r\n```",
    "head_branch": "stackless-updates",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Added stackless-3.5.4"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc55644ee515ce6a4ad39",
    "number": 1017,
    "body": "https://www.python.org/downloads/release/python-370a2/",
    "head_branch": "3.7.0a2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.7.0a2 and remove 3.7.0a1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc55644ee515ce6a4ad3a",
    "number": 1010,
    "body": "Looks like 5045d88 contained some typos, including the URL for the pypy-5.9-linux_x86_64 download, so that request results in a 404 (there is a spurious \"-1\" in the filename).",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1010 from jab/patch-1\n\nFix broken download link"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc55744ee515ce6a4ad3b",
    "number": 1006,
    "body": "https://github.com/pyenv/pyenv/pull/1005#discussion_r143206847",
    "head_branch": "fix-pypy-5.9",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix typo in pypy-5.9 package name for non-ubuntu linux distros\n\nhttps://github.com/pyenv/pyenv/pull/1005#discussion_r143206847"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc55844ee515ce6a4ad3c",
    "number": 1005,
    "body": "",
    "head_branch": "pypy-5.9.0",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add PyPy 5.9.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc55944ee515ce6a4ad3d",
    "number": 1001,
    "body": "## 0c1edef: Do not create `tput` shim when Anaconda is selected\r\n\r\nAdd `tput` to the Anaconda's default blacklist in order to prevent pyenv\r\nfrom creating the shim script for it.\r\n\r\nAnaconda 5.0.0 contains some executables which are part of the base system. Many of these executables did not exist in the last major version of Anaconda (`4.4.0`), and the existence of pyenv's shim scripts for these executables in `5.0.0` can cause to conceal those executables in the user's base system; for the details, please see the discussion with @yyuu at #992.\r\n\r\nThis commit resolves a coloured output error when running a terminal command which uses `tput`. This error occurs when multiple Python versions are installed alongside `anaconda2-5.0.0` or `anaconda3-5.0.0` and neither of those two Anaconda versions is selected by pyenv.\r\n\r\n### Many executables have been added in Anaconda 5.0.0\r\n\r\nAs described above, apart from `tput`, there have been many executables added in **Anaconda 5.0.0**, many of which did not exist in the last major version **Anaconda 4.4.0**; here is the `diff` output of their executable paths:\r\n\r\n```sh\r\n# `>` indicates a new executable addded in Anaconda 5.0.0 \r\n$ diff <(ls ~/.pyenv/versions/anaconda3-4.4.0/bin) <(ls ~/.pyenv/versions/anaconda3-5.0.0/bin)\r\n10a11\r\n> autopoint*\r\n15a17\r\n> captoinfo@\r\n18a21\r\n> clear*\r\n19a23,25\r\n> conda-build*\r\n> conda-convert*\r\n> conda-develop*\r\n20a27,30\r\n> conda-index*\r\n> conda-inspect*\r\n> conda-metapackage*\r\n> conda-render*\r\n21a32,33\r\n> conda-skeleton*\r\n> conda-verify*\r\n22a35\r\n> createfontdatachunk.py*\r\n28a42\r\n> dask-mpi*\r\n33a48,56\r\n> dbus-cleanup-sockets*\r\n> dbus-daemon*\r\n> dbus-launch*\r\n> dbus-monitor*\r\n> dbus-run-session*\r\n> dbus-send*\r\n> dbus-test-tool*\r\n> dbus-update-activation-environment*\r\n> dbus-uuidgen*\r\n41c64\r\n< easy_install-3.6@\r\n---\r\n> easy_install-3.6*\r\n42a66,67\r\n> enhancer.py*\r\n> envsubst*\r\n43a69\r\n> explode.py*\r\n44a71,72\r\n> fax2ps*\r\n> fax2tiff*\r\n53a82,83\r\n> gdbus*\r\n> gdbus-codegen*\r\n58a89,91\r\n> gettext*\r\n> gettext.sh*\r\n> gettextize*\r\n59a93,95\r\n> gifmaker.py*\r\n> gio*\r\n> gio-querymodules*\r\n60a97,106\r\n> glib-compile-resources*\r\n> glib-compile-schemas*\r\n> glib-genmarshal*\r\n> glib-gettextize*\r\n> glib-mkenums*\r\n> gobject-query*\r\n> gresource*\r\n> gsettings*\r\n> gtester*\r\n> gtester-report*\r\n63a110\r\n> h5clear*\r\n67a115,116\r\n> h5fc*\r\n> h5format_convert*\r\n77a127\r\n> h5watch*\r\n83a134,135\r\n> infocmp*\r\n> infotocap@\r\n84a137,138\r\n> iptest*\r\n> iptest3*\r\n96a151,153\r\n> jupyter-lab*\r\n> jupyter-labextension*\r\n> jupyter-labhub*\r\n101a159\r\n> jupyter-run*\r\n115a174,184\r\n> lzcat@\r\n> lzcmp@\r\n> lzdiff@\r\n> lzegrep@\r\n> lzfgrep@\r\n> lzgrep@\r\n> lzless@\r\n> lzma@\r\n> lzmadec*\r\n> lzmainfo*\r\n> lzmore@\r\n119a189,202\r\n> msgattrib*\r\n> msgcat*\r\n> msgcmp*\r\n> msgcomm*\r\n> msgconv*\r\n> msgen*\r\n> msgexec*\r\n> msgfilter*\r\n> msgfmt*\r\n> msggrep*\r\n> msginit*\r\n> msgmerge*\r\n> msgunfmt*\r\n> msguniq*\r\n121a205,206\r\n> ncursesw6-config*\r\n> ngettext*\r\n127a213,219\r\n> painter.py*\r\n> pal2rgb*\r\n> pandoc*\r\n> pandoc-citeproc*\r\n> pcre-config*\r\n> pcregrep*\r\n> pcretest*\r\n128a221,225\r\n> pilconvert.py*\r\n> pildriver.py*\r\n> pilfile.py*\r\n> pilfont.py*\r\n> pilprint.py*\r\n131a229,230\r\n> pkginfo*\r\n> player.py*\r\n133a233\r\n> ppm2tiff*\r\n141a242\r\n> pycodestyle*\r\n160c261\r\n< python3.6m*\r\n---\r\n> python3.6m@\r\n184a286\r\n> raw2tiff*\r\n186a289,290\r\n> recode-sr-latin*\r\n> reset@\r\n188a293\r\n> rst2html4.py*\r\n211a317\r\n> sqlite3_analyzer*\r\n213a320\r\n> tabs*\r\n215,216c322,341\r\n< tclsh8.5*\r\n< uconv*\r\n---\r\n> tclsh@\r\n> tclsh8.6*\r\n> thresholder.py*\r\n> tic*\r\n> tiff2bw*\r\n> tiff2pdf*\r\n> tiff2ps*\r\n> tiff2rgba*\r\n> tiffcmp*\r\n> tiffcp*\r\n> tiffcrop*\r\n> tiffdither*\r\n> tiffdump*\r\n> tiffinfo*\r\n> tiffmedian*\r\n> tiffset*\r\n> tiffsplit*\r\n> toe*\r\n> tput*\r\n> tset*\r\n217a343\r\n> unlzma@\r\n219a346\r\n> viewer.py*\r\n223c350,351\r\n< wish8.5*\r\n---\r\n> wish@\r\n> wish8.6*\r\n224a353\r\n> xgettext*\r\n230a360\r\n> xmlwf*\r\n233a364,372\r\n> xzcat@\r\n> xzcmp@\r\n> xzdec*\r\n> xzdiff*\r\n> xzegrep@\r\n> xzfgrep@\r\n> xzgrep*\r\n> xzless*\r\n> xzmore*\r\n```\r\n\r\nI am uncertain, apart from `tput`, how many of the other executables newly shipped with Anaconda 5.0.0 can cause to conceal the executables of the user's base system. Further investigations are needed on them, or as @yyuu suggested in #992, the pyenv users can use the [pyenv-which-ext](https://github.com/pyenv/pyenv-which-ext) to deal with the potential `command not found` errors.\r\n\r\n### The location of the newly inserted lines in the `pyenv.d/rehash/conda.d/default.list` file\r\n\r\nIn the blacklist file, the executables seem to be listed in an alphabetical-ish order, and the existing comment lines also seem to be used to group the related executables together. I labelled `tput` as `ncurses` and locate in the order which I thought is appropriate.\r\n\r\n---\r\n\r\nPlease review my commit and if necessary, rectify as appropriate.\r\n\r\nThank you!\r\n\r\nsho",
    "head_branch": "add-tput-to-conda-blacklist",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1001 from shoichiaizawa/add-tput-to-conda-blacklist\n\nDo not create `tput` shim when Anaconda is selected"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc55a44ee515ce6a4ad3e",
    "number": 1000,
    "body": "https://docs.python.org/3.6/whatsnew/changelog.html#python-3-6-3-final",
    "head_branch": "python-3.6.3-final",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.6.3 and remove 3.6.3rc1 (#1000)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc55b44ee515ce6a4ad3f",
    "number": 997,
    "body": "Unless specified otherwise, conda will auto-update to the latest version, resulting in a conda install that differs from what was requested. This commit makes the necessary change for the user, but I could also imagine that we might want the user to specify this environment variable themselves (or through a .condarc file).",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc55b44ee515ce6a4ad40",
    "number": 992,
    "body": "This PR consists of a single commit adding two new files, which allow the user to install both **Anaconda2 5.0.0** and **Anaconda3 5.0.0**.\r\n\r\nThe tests have been done only on macOS, but it should also work on Linux; please check if it is buildable on Linux.\r\n\r\nThe SHA-256 checksum for each Anaconda shell file is copied from the following pages:\r\n\r\n- https://docs.anaconda.com/anaconda/install/hashes/Anaconda2-5.0.0-Linux-x86.sh-hash\r\n- https://docs.anaconda.com/anaconda/install/hashes/Anaconda2-5.0.0-Linux-x86_64.sh-hash\r\n- https://docs.anaconda.com/anaconda/install/hashes/Anaconda2-5.0.0-MacOSX-x86_64.sh-hash\r\n- https://docs.anaconda.com/anaconda/install/hashes/Anaconda3-5.0.0-Linux-x86.sh-hash\r\n- https://docs.anaconda.com/anaconda/install/hashes/Anaconda3-5.0.0-Linux-x86_64.sh-hash\r\n- https://docs.anaconda.com/anaconda/install/hashes/Anaconda3-5.0.0-MacOSX-x86_64.sh-hash",
    "head_branch": "add-anaconda-5.5.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #992 from shoichiaizawa/add-anaconda-5.5.0\n\npython-build: add anaconda[23]-5.0.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc55c44ee515ce6a4ad41",
    "number": 987,
    "body": "fixes #985. this introduces two changes:\r\n\r\n- remove `libexec` from PATH\r\n- remove actual python binary location from PATH\r\n\r\ncc @blueyed cc @yyuu for review\r\n\r\nalso do either of you remember some more details regarding #98? was this specific to virtualenv? I don't see any documentation saying `sys.executable` **needs** to point to the python binary:\r\n\r\nhttps://docs.python.org/3/library/sys.html#sys.executable\r\n>A string giving the absolute path of the executable binary for the Python interpreter, on systems where this makes sense. If Python is unable to retrieve the real path to its executable, sys.executable will be an empty string or None.\r\n\r\nreading through some of the virtualenv sourcecode, the issue seemed to be specific to virtualenv\r\n\r\nto elaborate, this is the quintessential bug from changing of the path: https://github.com/jezdez/envdir/issues/62 (tl;dr: programs that create subshells end up with a different PATH)",
    "head_branch": "donttouchmypath",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc55d44ee515ce6a4ad42",
    "number": 984,
    "body": "https://www.python.org/downloads/release/python-363rc1/\r\nhttps://www.python.org/downloads/release/python-370a1/",
    "head_branch": "cpython-3.6.3rc1-and-3.7.0a1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.7.0a1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc55e44ee515ce6a4ad43",
    "number": 983,
    "body": "I believe this fixes #982",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc55f44ee515ce6a4ad44",
    "number": 980,
    "body": "https://www.python.org/download/releases/python-2714",
    "head_branch": "cpython-2.7.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 2.7.14 and remove 2.7.14rc1 (#980)\n\nhttps://www.python.org/download/releases/python-2714"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc56044ee515ce6a4ad45",
    "number": 979,
    "body": "",
    "head_branch": "micropython",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #979 from scop/micropython\n\nmicropython-dev: unix dir moved to ports/unix"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc56044ee515ce6a4ad46",
    "number": 978,
    "body": "Prepared some workaround according to a comment to #912\r\n\r\n> Since Python 3.3, no options is needed.\r\n> Thanks to Flexible Unicode Representation, no \"wide\" and \"narrow\" build.\r\n\r\n",
    "head_branch": "skip-enable-unicode-py33",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #978 from pyenv/skip-enable-unicode-py33\n\nSkip passing `--enable-unicode` for CPython 3.3+ (fixes #912)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc56144ee515ce6a4ad47",
    "number": 977,
    "body": "I added ```[ -x ~/.pyenv/bin/pyenv ]``` to the front of ```pyenv init```  in case ```pyenv``` is not found.",
    "head_branch": "update-readme-pyenv-init",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #977 from cia-rana/update-readme-pyenv-init\n\nUpdate `pyenv init` line in README.md"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc56244ee515ce6a4ad48",
    "number": 976,
    "body": "issue #902 ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove extra spaces in checksum (#976)\n\nFixes #902."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc56344ee515ce6a4ad49",
    "number": 973,
    "body": "Fixes  #964.\r\n\r\nTested on Fedora Core 26:\r\n\r\n```\r\n$ python\r\nJython 2.7.1 (default:0df7adb1b397, Jun 30 2017, 19:02:43) \r\n[OpenJDK 64-Bit Server VM (Oracle Corporation)] on java1.8.0_141\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>>\r\n```\r\n\r\n",
    "head_branch": "jython-2.7.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #973 from Samureus/jython-2.7.1\n\nAdded jython-2.7.1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc56444ee515ce6a4ad4a",
    "number": 971,
    "body": null,
    "head_branch": "add-3.5.4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #971 from claco/add-3.5.4\n\nAdded CPython 3.5.4"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc56444ee515ce6a4ad4b",
    "number": 970,
    "body": "Hey,\r\n\r\nthere is a shell prompt builder that I write I Go which also has a python plugin https://github.com/bullettrain-sh/bullettrain-go-python.\r\n\r\nThe problem I am facing is that whenever I am testing e.g. `python3 --version`  in a virtualenv or setup that has no python3, the whence command kicks in a search if it can help the user. In many cases it's great and helps a lot.\r\n\r\nIn my case, it is merely a performance bottleneck and useless in my scenario. Therefore I kindly ask if I can share this little option (which be also beneficial for other shell themes out there) to disable the implicit search.\r\n",
    "head_branch": "optional-whence",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc56544ee515ce6a4ad4c",
    "number": 966,
    "body": "Trying to figure out how to actually switch is surprisingly difficult.\r\nConsider that [rvm](https://rvm.io/rvm/basics), [nvm](https://github.com/creationix/nvm#usage), [chruby](https://github.com/postmodern/chruby#examples), etc all have a clear, explicit documentation line for switching versions. This repository has a long readme with the way to switch buried in some obscurity. I think it should be surfaced front and center!\r\n",
    "head_branch": "readme-update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc56644ee515ce6a4ad4d",
    "number": 965,
    "body": "First time adding a version so worth double checking",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added CPython 3.4.7 (#965)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc56744ee515ce6a4ad4e",
    "number": 959,
    "body": "use  `exec \"$SHELL\"` instead of `exec $SHELL`",
    "head_branch": "fix_doc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #959 from diggzhang/fix_doc\n\nFix readme.md"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc56844ee515ce6a4ad4f",
    "number": 956,
    "body": "fixes #955",
    "head_branch": "copy-libpypy3",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #956 from pyenv/copy-libpypy3\n\nAdd support for PyPy3 executables like `libpypy3-c.so`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc56944ee515ce6a4ad50",
    "number": 954,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc56944ee515ce6a4ad51",
    "number": 953,
    "body": "Tentative workaround for #688. This might be able to substitute #100.",
    "head_branch": "source-shim",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #953 from pyenv/source-shim\n\nWorkaround for scripts in `$PATH` which needs to be source'd"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc56a44ee515ce6a4ad52",
    "number": 951,
    "body": "https://www.python.org/downloads/release/python-362/",
    "head_branch": "cpython-3.6.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.6.2 and remove 3.6.2rc2 (#951)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc56b44ee515ce6a4ad53",
    "number": 948,
    "body": "https://www.python.org/downloads/release/python-362rc2/",
    "head_branch": "cpython-3.6.2rc2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #948 from zmwangx/cpython-3.6.2rc2\n\nAdd CPython 3.6.2rc2 and remove 3.6.2rc1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc56c44ee515ce6a4ad54",
    "number": 942,
    "body": "Correct command to init pyenv in `bash_profile`",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #942 from xHeliotrope/master\n\nUpdate README.md typo"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc56d44ee515ce6a4ad55",
    "number": 941,
    "body": "shellcheck was not able to parse it before.\r\n\r\nThere are no tests, but I've checked it using:\r\n\r\n    uname_s() {\r\n      echo \"Darwin\"\r\n    }\r\n    osx_version() {\r\n      echo 1000\r\n    }\r\n    is_mac() {\r\n      [ \"$(uname_s)\" = \"Darwin\" ] || return 1\r\n      (( $# == 0 )) || eval \"[ '$(osx_version)' $* ]\"\r\n    }\r\n\r\n    is_mac; echo $?\r\n    is_mac -gt 1000; echo $?\r\n    is_mac -lt 1000; echo $?\r\n    is_mac -gt 999; echo $?",
    "head_branch": "fix-is_mac",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc56e44ee515ce6a4ad56",
    "number": 940,
    "body": "https://www.python.org/downloads/release/python-362rc1/",
    "head_branch": "cpython-3.6.2rc1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.6.2rc1 (#940)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc56e44ee515ce6a4ad57",
    "number": 939,
    "body": "See https://github.com/squeaky-pl/portable-pypy/issues/54\r\n\r\nI chose to keep the same filenames, since this would break the current naming convention for PyPy as\r\n\r\n**pypy(CPython-version)-(PyPy-releasedversion)**\r\n\r\nper issue #931 \r\nlet me know what you think. Then I guess we could make another release.",
    "head_branch": "update-portable-pypy5.8-1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update links to Portable Pypy 5.8-1 bugfix release (#939)\n\n* Update pypy2.7-portable-5.8.0, pypy3.5-portable-5.8.0, pypy2.7-5.8.0 and pypy3.5-5.8.0\r\n\r\nSee issue https://github.com/squeaky-pl/portable-pypy/issues/54"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc56f44ee515ce6a4ad58",
    "number": 932,
    "body": "Do not merge yet, trying to follow issue https://github.com/pyenv/pyenv/issues/931",
    "head_branch": "pypy-5.8",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #932 from Samureus/pypy-5.8\n\nAdd Pypy 5.8.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc57044ee515ce6a4ad59",
    "number": 930,
    "body": "This PR includes two new files, which allow the user to install both **Anaconda2 4.4.0** and **Anaconda3 4.4.0**.\r\n\r\nThe test was done only on macOS, but it should also work on Linux; please check if it is buildable on Linux.\r\n\r\nSHA-256 checksums are from the following pages:\r\n\r\n- https://docs.continuum.io/anaconda/hashes/Anaconda2-4.4.0-Linux-x86.sh-hash\r\n- https://docs.continuum.io/anaconda/hashes/Anaconda2-4.4.0-Linux-x86_64.sh-hash\r\n- https://docs.continuum.io/anaconda/hashes/Anaconda2-4.4.0-MacOSX-x86_64.sh-hash\r\n- https://docs.continuum.io/anaconda/hashes/Anaconda3-4.4.0-Linux-x86.sh-hash\r\n- https://docs.continuum.io/anaconda/hashes/Anaconda3-4.4.0-Linux-x86_64.sh-hash\r\n- https://docs.continuum.io/anaconda/hashes/Anaconda3-4.4.0-MacOSX-x86_64.sh-hash\r\n\r\nThis should be able to close #923.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #930 from shoichiaizawa/master\n\npython-build: add anaconda[23]-4.4.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc57144ee515ce6a4ad5a",
    "number": 927,
    "body": "As of rbenv/rbenv@755c820.\r\n\r\n    Conflicts:\r\n            README.md\r\n            libexec/pyenv---version\r\n            libexec/pyenv-init\r\n            libexec/rbenv\r\n            libexec/rbenv-sh-shell\r\n            libexec/rbenv-which\r\n            test/init.bats\r\n            test/shell.bats\r\n\r\nI've added the \"rbenv*\" files and renamed them, so that they should not conflict with \"deleted by us\" in the future.",
    "head_branch": "merge-rbenv",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #927 from blueyed/merge-rbenv\n\nMerge rbenv master"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc57244ee515ce6a4ad5b",
    "number": 924,
    "body": "In fish shell version 2.6.0, it show the error ``setenv: Too many arguments`` when executing ``. (pyenv init - | psub)``.\r\nIt is because ``setenv`` accepts only two arguments in this version.\r\n```\r\n$ type setenv\r\n# Defined in /usr/share/fish/functions/setenv.fish @ line 1\r\nfunction setenv --description 'Set an env var for csh compatibility.'\r\n    # No arguments should cause the current env vars to be displayed.\r\n    if not set -q argv[1]\r\n        env\r\n        return\r\n    end\r\n\r\n    # A single argument should set the named var to nothing.\r\n    if not set -q argv[2]\r\n        set -gx $argv[1] ''\r\n        return\r\n    end\r\n\r\n    # `setenv` accepts only two arguments: the var name and the value. If there are more than two\r\n    # args it is an error. The error message is verbatim from csh.\r\n    if set -q argv[3]\r\n        printf (_ '%s: Too many arguments\\n') setenv >&2\r\n        return 1\r\n    end\r\n\r\n    # We have exactly two arguments as required by the csh `setenv` command.\r\n    set -l var $argv[1]\r\n    set -l val $argv[2]\r\n\r\n    # Validate the variable name.\r\n    if not string match -qr '^\\w+$' -- $var\r\n        # This message is verbatim from csh. We don't really need to do this but if we don't fish\r\n        # will display a different error message which might confuse someone expecting the csh\r\n        # message.\r\n        printf (_ '%s: Variable name must contain alphanumeric characters\\n') setenv >&2\r\n        return 1\r\n    end\r\n\r\n    # We need to special case some vars to be compatible with fish. In particular how they are\r\n    # treated as arrays split on colon characters. All other var values are treated literally.\r\n    if contains -- $var PATH CDPATH MANPATH\r\n        set -gx $var (string split -- ':' $val)\r\n    else\r\n        set -gx $var $val\r\n    end\r\nend\r\n```",
    "head_branch": "fish-pyenv-init",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc57344ee515ce6a4ad5c",
    "number": 921,
    "body": "The default was `~/.micropython:/usr/lib/micropython`",
    "head_branch": "micropython",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #921 from scop/micropython\n\nmicropython-dev: Set better sys.path"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc57344ee515ce6a4ad5d",
    "number": 920,
    "body": "Not sure if this is quite complete yet as of pyenv standards. Works for me on Fedora 25, if I install the libffi-devel package before trying to install.",
    "head_branch": "micropython",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #920 from scop/micropython\n\nAdd micropython-dev"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc57444ee515ce6a4ad5e",
    "number": 909,
    "body": "Couple small fixes to the `--enable-shared` section.",
    "head_branch": "fix-command",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #909 from joesiewert/fix-command\n\nFix --enable-shared sample command"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc57544ee515ce6a4ad5f",
    "number": 907,
    "body": "`pip -v install foobar` or `pip -q install foobar` did not trigger a rehash before. Now it should have the same behaviour as `pip install foobar`.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #907 from LarsFronius/patch-1\n\nFixes pip-rehash to rehash if pip was called with a flag"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc57644ee515ce6a4ad60",
    "number": 905,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc57744ee515ce6a4ad61",
    "number": 903,
    "body": "Updated a broken link in the README.",
    "head_branch": "fix-pyenv-shell-readme-link",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #903 from webb04/fix-pyenv-shell-readme-link\n\nUpdate link to pyenv shell documentation in README"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc57744ee515ce6a4ad62",
    "number": 901,
    "body": "Link was pointing to this heading. It seemed incorrect",
    "head_branch": "Bachmann1234-patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #901 from Bachmann1234/Bachmann1234-patch-1\n\nRemove duplicate heading"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc57844ee515ce6a4ad63",
    "number": 899,
    "body": "fixes #792 ",
    "head_branch": "fix-anaconda-build-when-prefix_path-exists",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #899 from joliveros/fix-anaconda-build-when-prefix_path-exists\n\nadd -f to anaconda install script"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc57944ee515ce6a4ad64",
    "number": 897,
    "body": "",
    "head_branch": "proinsias/miniconda3-4.3.11",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #897 from proinsias/proinsias/miniconda3-4.3.11\n\nAdd miniconda3-4.2.12 and miniconda3-4.3.11"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc57a44ee515ce6a4ad65",
    "number": 892,
    "body": "replace github.com/yyuu with github.com/pyenv",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #892 from menduo/master\n\nreplace github.com/yyuu with github.com/pyenv"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc57b44ee515ce6a4ad66",
    "number": 884,
    "body": "I realized that there was CI failure after tagging a new version 😞 \r\n\r\nhttps://travis-ci.org/pyenv/pyenv/jobs/215777826",
    "head_branch": "ci-workaround-v1.0.10",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #884 from pyenv/ci-workaround-v1.0.10\n\nWorkaround for CI failures with versions with multiple digits"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc57b44ee515ce6a4ad67",
    "number": 883,
    "body": "We use pyenv in our CI and the CI system can kill a job at any point in time (force push, new commit). I think we had a situation where the job was killed while pyenv was rehashing and the file was not removed. \r\n\r\nAll subsequent builds failed with `pyenv: cannot rehash: [...].pyenv/shims/.pyenv-shim exists`",
    "head_branch": "remove-shim-sigterm",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc57c44ee515ce6a4ad68",
    "number": 881,
    "body": "https://conda.io/miniconda.html\r\nhttps://repo.continuum.io/miniconda/\r\nhttps://github.com/conda/conda/blob/master/CHANGELOG.md\r\n\r\n- Make `miniconda-latest` a shim for `miniconda2-latest`\r\n- miniconda3 no longer seems to have ARM or PPC *latest* versions, only numbered versions, and is now based on 3.6\r\n\r\nTIL: conda automatically updates itself after installation (tested on Ubuntu 16.04):\r\n\r\n```bash\r\n$ pyenv install miniconda3-latest\r\nInstalling Miniconda3-latest-Linux-x86_64...\r\nFetching package metadata ...........\r\nSolving package specifications: .\r\n\r\nPackage plan for installation in environment /home/samo/.pyenv/versions/miniconda3-latest:\r\n\r\nThe following packages will be UPDATED:\r\n\r\n    conda: 4.3.11-py36_0 --> 4.3.14-py36_0\r\n\r\nconda-4.3.14-p 100% |################################################################################################################################################| Time: 0:00:06  74.61 kB/s\r\nInstalled Miniconda3-latest-Linux-x86_64 to /home/samo/.pyenv/versions/miniconda3-latest\r\n$ conda -V\r\nconda 4.3.14\r\n$ python\r\nPython 3.6.0 |Continuum Analytics, Inc.| (default, Dec 23 2016, 12:22:00) \r\n[GCC 4.4.7 20120313 (Red Hat 4.4.7-1)] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> \r\n```",
    "head_branch": "miniconda-latest",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #881 from Samureus/miniconda-latest\n\nUpdate miniconda-latest and miniconda3-latest"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc57d44ee515ce6a4ad69",
    "number": 880,
    "body": "The package names in the python-build files for anaconda2-4.2.0 and\r\nanaconda2-4.3.0 both had 'Anaconda2-4.2.1-MacOSX-x86_64' erroneously\r\nlisted as the package name. Anaconda2-4.2.1 is not a version of Anaconda\r\nin existence. The URL arguments were correct, just not the package name\r\narguments.",
    "head_branch": "anaconda2-typos",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #880 from NickAnderegg/anaconda2-typos\n\npython-build: Fix typo in MacOS packages for anaconda2-4.3.0/4.2.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc57e44ee515ce6a4ad6a",
    "number": 877,
    "body": "Let's do this.",
    "head_branch": "v1.0.9-release",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "V1.0.9 release (#877)\n\n* Update version to 1.0.9"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc57f44ee515ce6a4ad6b",
    "number": 876,
    "body": "Added Anaconda2/Anaconda3 4.3.1 to python-build",
    "head_branch": "anaconda-4.3.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #876 from NickAnderegg/anaconda-4.3.1\n\npython-build: Add Anaconda2/Anaconda3 4.3.1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc58044ee515ce6a4ad6c",
    "number": 873,
    "body": "https://www.python.org/downloads/release/python-361/",
    "head_branch": "cpython-3.6.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.6.1 and remove 3.6.1rc1 (#873)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc58044ee515ce6a4ad6d",
    "number": 872,
    "body": "Tested on Ubuntu 16.04 64-bit.",
    "head_branch": "pypy2-5.7.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add PyPy2 5.7.0 (#872)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc58144ee515ce6a4ad6e",
    "number": 871,
    "body": "Tested on Ubuntu 16.04 64-bit.",
    "head_branch": "pypy3-5.7.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add PyPy3 5.7-beta (#871)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc58244ee515ce6a4ad6f",
    "number": 869,
    "body": "Tested on Ubuntu 16.04 64-bit. No 32-bit build as well.",
    "head_branch": "pypy3-portable-5.7.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added pypy3-portable-5.7.0 (#869)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc58344ee515ce6a4ad70",
    "number": 868,
    "body": "Tested on Ubuntu 16.04 64-bit. Note that there's no longer a 32-bit build available.",
    "head_branch": "pypy-portable-5.7.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added pypy-portable-5.7.0 (#868)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc58444ee515ce6a4ad71",
    "number": 867,
    "body": "The instructions previously mentioned in this file were removed from the Homebrew caveats since\r\nthey weren't specific to homebrew. See discussion in [this homebrew issue](https://github.com/Homebrew/homebrew-core/pull/11209)\r\n\r\nFix for #866 ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated docs to reflect homebrew change. (#867)\n\n* Updated docs to reflect homebrew change.\r\n\r\nThe instructions previously mentioned in this file were removed from the Homebrew caveats since\r\nthey weren't specific to homebrew. See discussion in [this homebrew issue](https://github.com/Homebrew/homebrew-core/pull/11209)\r\n\r\n* Added link to specific section of readme"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc58444ee515ce6a4ad72",
    "number": 864,
    "body": "Tested on Ubuntu 16.04 up to the point where it starts translating. Not sure about the naming convention though (IMHO it's getting complicated).",
    "head_branch": "pypy3-5.7.0-src",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #864 from Samureus/pypy3-5.7.0-src\n\nAdded pypy3.5-5.7-beta-src"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc58544ee515ce6a4ad73",
    "number": 863,
    "body": "Tested on Ubuntu 16.04 up to the point where it starts translating.",
    "head_branch": "pypy-5.7.0-src",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #863 from Samureus/pypy-5.7.0-src\n\nAdd PyPy2 5.7.0-src"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc58644ee515ce6a4ad74",
    "number": 860,
    "body": "Fixes https://github.com/pyenv/pyenv/issues/239\r\n\r\n\r\n\r\n",
    "head_branch": "http_proxy-in-README",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #860 from Samureus/http_proxy-in-README\n\nMention http_proxy in README.md"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc58744ee515ce6a4ad75",
    "number": 859,
    "body": "Tested on Ubuntu 16.04.",
    "head_branch": "pyston-0.6.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #859 from Samureus/pyston-0.6.1\n\nAdded pyston-0.6.1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc58844ee515ce6a4ad76",
    "number": 852,
    "body": "Now I'm working to migrate project site from https://github.com/yyuu/pyenv to https://github.com/pyenv/pyenv for fine grained control over projects.",
    "head_branch": "migrate-to-pyenv-org",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #852 from pyenv/migrate-to-pyenv-org\n\nMigrate to pyenv org"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc58844ee515ce6a4ad77",
    "number": 851,
    "body": "OpenSSL hasn't been upgraded in a while, and according to https://www.openssl.org/news/vulnerabilities.html 1.0.2g suffers from 25 vulnerabilities at the moment, two of which labeled high severity.\r\n\r\nThis PR should help improve the security of the three macOS users out there who don't use Homebrew.",
    "head_branch": "upgrade-openssl-to-1.0.2k",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #851 from zmwangx/upgrade-openssl-to-1.0.2k\n\nUpgrade OpenSSL to 1.0.2k"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc58944ee515ce6a4ad78",
    "number": 850,
    "body": "https://www.python.org/downloads/release/python-361rc1/",
    "head_branch": "cpython-3.6.1rc1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #850 from zmwangx/cpython-3.6.1rc1\n\nAdd CPython 3.6.1rc1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc58a44ee515ce6a4ad79",
    "number": 845,
    "body": "Found using [mwic](http://jwilk.net/software/mwic) and [anorack](https://github.com/jwilk/anorack).",
    "head_branch": "spelling",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #845 from jwilk/spelling\n\nFix typos"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc58b44ee515ce6a4ad7a",
    "number": 837,
    "body": "Similar fix as #836, but for all CPython `*-dev` versions.",
    "head_branch": "cpython-github-dev",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #837 from yyuu/cpython-github-dev\n\nUse GitHub for all CPython dev versions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc58b44ee515ce6a4ad7b",
    "number": 836,
    "body": "CPython has migrated to GitHub. [1][2] The old mercurial repository [3] is no longer updated.\r\n\r\n[1] https://github.com/python/cpython/\r\n[2] https://mail.python.org/pipermail/python-dev/2017-February/147381.html\r\n[3] https://hg.python.org/cpython/",
    "head_branch": "cpython-now-uses-git",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #836 from yan12125/cpython-now-uses-git\n\nCPython now uses git"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc58c44ee515ce6a4ad7c",
    "number": 832,
    "body": "I've just started using pyenv, and I've noticed an annoying error message every time I use ansible:\r\n\r\n```\r\n/home/mcclurmc/.pyenv/libexec/pyenv: line 43: cd: ansible: Not a directory\r\n```\r\n\r\nI run ansible from source, so the python program `ansible-playbook` is somewhere \"nonstandard\" on my path. I've added `set -x` to my pyenv and here are the relevant verbose lines:\r\n\r\n```\r\n+ unset CDPATH\r\n+ '[' exec = --debug ']'\r\n+ '[' -n '' ']'\r\n+ enable -f /home/mcclurmc/.pyenv/libexec/../libexec/pyenv-realpath.dylib realpath\r\n+ '[' -z '' ']'\r\n++ type -p greadlink readlink\r\n++ head -1\r\n+ READLINK=/bin/readlink\r\n+ '[' -n /bin/readlink ']'\r\n+ '[' -z /home/mcclurmc/.pyenv ']'\r\n+ PYENV_ROOT=/home/mcclurmc/.pyenv\r\n+ export PYENV_ROOT\r\n+ '[' -z '' ']'\r\n+ '[' -n /home/mcclurmc/Work/external/ansible/bin/ansible-playbook ']'\r\n+ '[' -L /home/mcclurmc/Work/external/ansible/bin/ansible-playbook ']'\r\n++ abs_dirname /home/mcclurmc/Work/external/ansible/bin/ansible-playbook\r\n++ local cwd=/home/mcclurmc/Work/code/infra/ansible\r\n++ local path=/home/mcclurmc/Work/external/ansible/bin/ansible-playbook\r\n++ '[' -n /home/mcclurmc/Work/external/ansible/bin/ansible-playbook ']'\r\n++ cd /home/mcclurmc/Work/external/ansible/bin\r\n++ local name=ansible-playbook\r\n+++ resolve_link ansible-playbook\r\n+++ /bin/readlink ansible-playbook\r\n++ path=ansible\r\n++ '[' -n ansible ']'\r\n++ cd ansible\r\n/home/mcclurmc/.pyenv/libexec/pyenv: line 43: cd: ansible: Not a directory\r\n```\r\n\r\nI think that all we need to do is pipe the output of the `cd $path` statement to `/dev/null`, so that's what I've done. Please let me know if there are any bash conventions I should follow, or if there are any tests I should write/modify.",
    "head_branch": "hide-abs_dirname-cd-error",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc58d44ee515ce6a4ad7d",
    "number": 831,
    "body": "This allows subcommand style plugins to properly autocomplete.\r\nExisting commands are not affected. \r\n\r\nExample, say you have support for `pyenv foo bar --flag`, then\r\nthis allows the last `--flag` argument to be properly completed.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #831 from maxnordlund/patch-1\n\nFix fish subcommand completion"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc58e44ee515ce6a4ad7e",
    "number": 828,
    "body": "README.md記載のインストールコマンドをanyenv等を使用している場合でも有効なものに変更しました。",
    "head_branch": "develop",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #828 from massongit/develop\n\nFix file the path and file name of README.md"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc58f44ee515ce6a4ad7f",
    "number": 824,
    "body": "",
    "head_branch": "add-anaconda-4.3.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #824 from jprjr/add-anaconda-4.3.0\n\nAdd Anaconda 4.3.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc58f44ee515ce6a4ad80",
    "number": 823,
    "body": "Reverts yyuu/pyenv#819\r\n\r\nsee also: #822 ",
    "head_branch": "revert-819-master",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #823 from yyuu/revert-819-master\n\nRevert \"use $ORIGIN for rpath so the built python can be copied\""
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc59044ee515ce6a4ad81",
    "number": 819,
    "body": "refer: https://medium.com/square-corner-blog/building-portable-binaries-50ca4f3d75cd#.8u7hwyz1v\r\n\r\nbuilt result: \r\n\r\n```\r\n[root@maddog ~]# ldd python3/bin/python|grep libpython\r\n        libpython3.5m.so.1.0 => /root/python3/bin/../lib/libpython3.5m.so.1.0 (0x00007fc9a1\r\n42e000)\r\n[root@maddog ~]# mv python3 python3.5.0\r\n[root@maddog ~]# ldd python3.5.0/bin/python|grep libpython\r\n        libpython3.5m.so.1.0 => /root/python3.5.0/bin/../lib/libpython3.5m.so.1.0 (0x00007f\r\n79d800c000)\r\n\r\n```",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #819 from woosley/master\n\nuse $ORIGIN for rpath so the built python can be copied"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc59144ee515ce6a4ad82",
    "number": 818,
    "body": "Simple init.zsh that can be used by zgen/antigen to add pyenv to the PATH. This removes from the step 2 of the installation the need to manually change the path, eg.:\r\n\r\n`echo 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.bash_profile`",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc59244ee515ce6a4ad83",
    "number": 817,
    "body": "Simple init.zsh that can be used by zgen/antigen to add pyenv to the PATH. This removes from the step 2 of the installation the need to manually change the path, eg.:\r\n\r\n`echo 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.bash_profile`",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc59344ee515ce6a4ad84",
    "number": 812,
    "body": "https://www.python.org/downloads/release/python-346/",
    "head_branch": "3.4.6",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #812 from browniebroke/3.4.6\n\nAdd CPython 3.4.6"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc59444ee515ce6a4ad85",
    "number": 811,
    "body": "https://www.python.org/downloads/release/python-353/",
    "head_branch": "3.5.3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #811 from browniebroke/3.5.3\n\nAdd CPython 3.5.3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc59444ee515ce6a4ad86",
    "number": 801,
    "body": "This should fix #800.",
    "head_branch": "let-jython-to-generate-launcher-as-shell-script",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #801 from yyuu/let-jython-to-generate-launcher-as-shell-script\n\nLet Jython installer to generate shell script instead of python script even if there's `python2.7` available in `$PATH`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc59544ee515ce6a4ad87",
    "number": 798,
    "body": "Document that multiple versions in `.python-version` work similarly to the command line.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #798 from orip/patch-1\n\nREADME: multiple versions in .python-version"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc59644ee515ce6a4ad88",
    "number": 797,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #797 from PeterDaveHello/patch-2\n\nShallow clone bats in makefile"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc59744ee515ce6a4ad89",
    "number": 796,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #796 from PeterDaveHello/patch-1\n\nSyntax highlight in README.md"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc59844ee515ce6a4ad8a",
    "number": 793,
    "body": "This patch fixes a checksum mismatch with `Python-3.6.0.tgz`:\r\n```\r\n$ pyenv install 3.6.0\r\nDownloading Python-3.6.0.tgz...\r\n-> https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tgz\r\n\r\nBUILD FAILED (ScientificCERNSLC 5.11 using python-build 1.0.6-1-g0256ff0)\r\n\r\nInspect or clean up the working tree at /tmp/python-build.20161230171529.10132\r\nResults logged to /tmp/python-build.20161230171529.10132.log\r\n\r\nLast 10 log lines:\r\n/tmp/python-build.20161230171529.10132 ~\r\n\r\nchecksum mismatch: Python-3.6.0.tar.gz (file is corrupt)\r\nexpected b0c5f904f685e32d9232f7bdcbece9819a892929063b6e385414ad2dd6a23622, got aa472515800d25a3739833f76ca3735d9f4b2fe77c3cb21f69275e0cce30cb2b\r\n```",
    "head_branch": "fix-3.6.0_tgz",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix the checksum for Python-3.6.0.tgz (#793)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc59944ee515ce6a4ad8b",
    "number": 787,
    "body": "",
    "head_branch": "3.6.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.6.0 (#787)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc59a44ee515ce6a4ad8c",
    "number": 782,
    "body": "https://www.python.org/downloads/release/python-2713/.",
    "head_branch": "cpython-2.7.13",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 2.7.13 (#782)\n\nhttps://www.python.org/downloads/release/python-2713/."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc59a44ee515ce6a4ad8d",
    "number": 781,
    "body": "https://www.python.org/downloads/release/python-360rc2/.",
    "head_branch": "cpython-3.6.0rc2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.6.0rc2 (#781)\n\nhttps://www.python.org/downloads/release/python-360rc2/."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc59b44ee515ce6a4ad8e",
    "number": 780,
    "body": "add simple documentation to aria2 support introduced in https://github.com/yyuu/pyenv/issues/534 https://github.com/yyuu/pyenv/pull/539",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #780 from luzfcb/patch-2\n\ndocument how to accelerate the download with aria2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc59c44ee515ce6a4ad8f",
    "number": 775,
    "body": "https://github.com/IronLanguages/main/releases/tag/ipy-2.7.7\r\n\r\nTested on Ubuntu 16.04 64-bits. Please note that:\r\n\r\n- The following issues are still open:\r\n\r\n> https://github.com/IronLanguages/main/issues/1072\r\n> https://github.com/IronLanguages/main/issues/1480\r\n\r\nWorkarounds: either run `python` with `-s` (don't add user site directory to sys.path), `-S` (don't imply 'import site' on initialization) or `-X:Frames` (enable basic sys._getframe support)\r\n\r\n- With verify_py27 enabled, it shows the following warning :\r\n\r\n`WARNING: The Python readline extension was not compiled. Missing the GNU readline lib?`",
    "head_branch": "ironpython-2.7.7",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #775 from Samureus/ironpython-2.7.7\n\nAdd Ironpython 2.7.7"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc59d44ee515ce6a4ad90",
    "number": 771,
    "body": "https://www.python.org/downloads/release/python-2713rc1/.",
    "head_branch": "cpython-2.7.13rc1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #771 from zmwangx/cpython-2.7.13rc1\n\nAdd CPython 2.7.13rc1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc59e44ee515ce6a4ad91",
    "number": 765,
    "body": "Tested only mac. Please try linux.\r\n```\r\n% pyenv versions\r\n* system (set by /Users/takeru/.pyenv/version)\r\n  anaconda3-4.2.0\r\n% pyenv shell anaconda3-4.2.0\r\n(anaconda3-4.2.0) % python -V\r\nPython 3.5.2 :: Anaconda 4.2.0 (x86_64)\r\n```\r\n\r\nsha256s are from:\r\nhttps://docs.continuum.io/anaconda/hashes/Anaconda3-4.2.0-Linux-x86.sh-hash\r\nhttps://docs.continuum.io/anaconda/hashes/Anaconda3-4.2.0-Linux-x86_64.sh-hash\r\nhttps://docs.continuum.io/anaconda/hashes/Anaconda3-4.2.0-MacOSX-x86_64.sh-hash\r\n",
    "head_branch": "anaconda3-4.2.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #765 from takeru/anaconda3-4.2.0\n\nanaconda3-4.2.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc59f44ee515ce6a4ad92",
    "number": 762,
    "body": "https://www.python.org/downloads/release/python-360b4/.",
    "head_branch": "cpython-3.6.0b4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CPython 3.6.0b4 and remove 3.6.0b3 (#762)\n\n* Remove CPython 3.6.0b3 in favor of 3.6.0b4\r\n\r\n* Add CPython 3.6.0b4\r\n\r\nhttps://www.python.org/downloads/release/python-360b4/."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc59f44ee515ce6a4ad93",
    "number": 753,
    "body": "Tested under Ubuntu 16.04 64-bit.",
    "head_branch": "stackless-2.7.12",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add stackless-2.7.12 (#753)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5a044ee515ce6a4ad94",
    "number": 752,
    "body": "Tested on Ubuntu 16.04 64-bit, Mono version 4.6.1. Please note that there's a lot of startup error messages like, e.g.:\r\n\r\n```\r\nError processing line 1 of /home/samo/.local/lib/python2.7/site-packages/virtualenvwrapper-4.7.2-py2.7-nspkg.pth:\r\n\r\n  Traceback (most recent call last):\r\n    File \"/home/samo/.pyenv/versions/ironpython-2.7.7-rc2/bin/Lib/site.py\", line 152, in addpackage\r\n      exec line\r\n    File \"<string>\", line 1, in <module>\r\n  AttributeError: 'module' object has no attribute '_getframe'\r\n\r\nRemainder of file ignored\r\nIronPython 2.7.7rc2 (2.7.7.0) on Mono 4.0.30319.42000 (64-bit)\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> \r\n```\r\nThis was already reported in Ironlanguages/main#1469, main issue Ironlanguages/main#1072, current blocker seems to be Ironlanguages/main#1480.",
    "head_branch": "ironpython-2.7.7-rc2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #752 from Samureus/ironpython-2.7.7-rc2\n\nAdd Ironpython 2.7.7 rc2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5a144ee515ce6a4ad95",
    "number": 751,
    "body": "Tested on Ubuntu 16.04 64-bit.",
    "head_branch": "pypy2-5.6.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add PyPy2 5.6.0 (#751)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5a244ee515ce6a4ad96",
    "number": 750,
    "body": "Tested on Ubuntu 16.04 64-bit up to the point where it starts translating.",
    "head_branch": "pypy2-5.6.0-src",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add PyPy2 5.6.0-src (#750)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5a344ee515ce6a4ad97",
    "number": 749,
    "body": "Tested on Ubuntu 16.04 64-bit, would be great if someone can test the 32-bit version as well.",
    "head_branch": "pypy-portable-5.6.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Portable PyPy2 5.6.0 (#749)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5a344ee515ce6a4ad98",
    "number": 744,
    "body": null,
    "head_branch": "3.6.0b3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #744 from methane/3.6.0b3\n\nCPython 3.6.0b3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5a444ee515ce6a4ad99",
    "number": 737,
    "body": "Unfortunately last nightly build did not succeed so I can't test it right now:\n\nhttp://buildbot.pypy.org/nightly/py3.5/pypy-c-jit-latest-linux64.tar.bz2 is empty\n\nso the output currently is:\n\n```\nDownloading pypy-c-jit-latest-linux64.tar.bz2...\n-> http://buildbot.pypy.org/nightly/py3.5/pypy-c-jit-latest-linux64.tar.bz2\n/home/samo/.pyenv/plugins/python-build/bin/python-build: línea 230: pushd: pypy3.5-c-jit-latest-linux64: No existe el archivo o el directorio\n\nBUILD FAILED (Ubuntu 16.04 using python-build 1.0.0-94-geb2e5ac)\n\nInspect or clean up the working tree at /tmp/python-build.20161015133206.14884\nResults logged to /tmp/python-build.20161015133206.14919.log\n\nLast 10 log lines:\n    Input file = (stdin), output file = (stdout)\n\nIt is possible that the compressed file(s) have become corrupted.\nYou can use the -tvv option to test integrity of such files.\n\nYou can use the `bzip2recover' program to attempt to recover\ndata from undamaged sections of corrupted files.\n\ntar: Child returned status 2\ntar: Error is not recoverable: exiting now\n```\n\nI'd like to find a way to catch an empty file and show the error message instead. Any suggestions appreciated.\n",
    "head_branch": "pypy3.5-c-jit-latest",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #737 from Samureus/pypy3.5-c-jit-latest\n\nPypy3.5-c-jit-latest nightly builds (please review)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5a544ee515ce6a4ad9a",
    "number": 736,
    "body": "",
    "head_branch": "pypy3355-portables",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #736 from scop/pypy3355-portables\n\nAdd PyPy3.3 v5.5-alpha portable binaries"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5a644ee515ce6a4ad9b",
    "number": 735,
    "body": "",
    "head_branch": "notes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #735 from scop/notes\n\nFedora users should tweak ~/.bashrc too"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5a744ee515ce6a4ad9c",
    "number": 734,
    "body": "Portable binaries or the raring one are not available yet, but this is a start.\n",
    "head_branch": "pypy3355",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #734 from scop/pypy3355\n\nAdd PyPy3.3 v5.5-alpha"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5a744ee515ce6a4ad9d",
    "number": 733,
    "body": "",
    "head_branch": "spelling",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #733 from scop/spelling\n\nSpelling fixes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5a844ee515ce6a4ad9e",
    "number": 731,
    "body": "https://www.python.org/downloads/release/python-360b2/.\n",
    "head_branch": "cpython-3.6.0b2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #731 from zmwangx/cpython-3.6.0b2\n\nAdd CPython 3.6.0b2 and remove 3.6.0b1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5a944ee515ce6a4ad9f",
    "number": 730,
    "body": "As reported in travis-ci/travis-ci#6599,\nthe \"default\" Python branch has moved on to \"3.7-dev\".\n",
    "head_branch": "3.6",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #730 from skirpichev/3.6\n\nPoint 3.6-dev to the 3.6 branch"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5aa44ee515ce6a4ada0",
    "number": 729,
    "body": "As reported in https://github.com/travis-ci/travis-ci/issues/6599,\nthe \"default\" Python branch has moved on to \"3.7-dev\".\n",
    "head_branch": "python-3.7-dev",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #729 from BanzaiMan/python-3.7-dev\n\nAdd 3.7-dev definition"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5ab44ee515ce6a4ada1",
    "number": 728,
    "body": "Found out after messing with a droplet running Ubuntu 14.04 32-bit, sorry.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #728 from Samureus/patch-1\n\nIncorrect directory in the 32-bit version"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5ab44ee515ce6a4ada2",
    "number": 726,
    "body": "This PR is follow up of discussion in https://github.com/yyuu/pyenv/issues/257\n\nThis lets python-build to stop configuring `--enable-unicode=ucs4`. It means that CPython built on OS X will use narrow encoding (UCS2) after this.\n\nAt least for now, this doesn't care platforms other than OS X; all BSDs will be managed just as similar as Linux distros in terms of encoding perspective. This may cause some binary incompatibility issue on some BSD families. I may be going to tweak the lines again if I got some issues from them.\n",
    "head_branch": "osx-unicode-narrow-ucs2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #726 from yyuu/osx-unicode-narrow-ucs2\n\nStop using ucs4 as default unicode encoding on OS X"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5ac44ee515ce6a4ada3",
    "number": 725,
    "body": null,
    "head_branch": "venv-3.5.2-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #725 from robsonpeixoto/venv-3.5.2-fix\n\nAdd patch to fix 3.5.2 bug - https://bugs.python.org/issue26664"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5ad44ee515ce6a4ada4",
    "number": 720,
    "body": "Take 2.\n",
    "head_branch": "stackless-3.4.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #720 from Samureus/stackless-3.4.2\n\nAdd stackless-3.4.2 with SHA256 checksum"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5ae44ee515ce6a4ada5",
    "number": 718,
    "body": "Tested on Ubuntu 16.04 up to the point where the Numpy tutorial at https://docs.scipy.org/doc/numpy-dev/user/quickstart.html works:\n\n``` python\n$ python\nPyston v0.5.1 (rev abb4b132d260e5858a458462f71fd94955647195), targeting Python 2.7.7\n>> import numpy\n>> import numpy as np\n>> a = np.arange(15).reshape(3, 5)\n>> a\narray([[ 0,  1,  2,  3,  4],\n       [ 5,  6,  7,  8,  9],\n       [10, 11, 12, 13, 14]])\n>> a.shape\n(3, 5)\n>> a.ndim\n2\n>> a.dtype.name\n'int64'\n>> a.itemsize\n8\n>> type(a)\n<type 'numpy.ndarray'>\n>> b = np.array([6, 7, 8])\n>> b\narray([6, 7, 8])\n>> type(b)\n<type 'numpy.ndarray'>\n>> \n```\n\nThis ended up a whole more hackish than I'd like, comments appreciated.\n",
    "head_branch": "pyston-0.5.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #718 from Samureus/pyston-0.5.1\n\nAdd Pyston 0.5.1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5af44ee515ce6a4ada6",
    "number": 717,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #717 from Samureus/patch-1\n\nAdded SHA256 checksum"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5af44ee515ce6a4ada7",
    "number": 716,
    "body": "Tested on Ubuntu 16.04 64-bit. Two things:\n- The zipfile does not have module _sysconfigdata so there's a message on start-up before showing the console prompt:\n\n`Traceback (most recent call last):\n  File \"/home/samo/.pyenv/versions/ironpython-2.7.6.3/bin/Lib/site.py\", line 552, in <module>\n  File \"/home/samo/.pyenv/versions/ironpython-2.7.6.3/bin/Lib/site.py\", line 534, in main\n  File \"/home/samo/.pyenv/versions/ironpython-2.7.6.3/bin/Lib/site.py\", line 266, in addusersitepackages\n  File \"/home/samo/.pyenv/versions/ironpython-2.7.6.3/bin/Lib/site.py\", line 241, in getusersitepackages\n  File \"/home/samo/.pyenv/versions/ironpython-2.7.6.3/bin/Lib/site.py\", line 231, in getuserbase\n  File \"/home/samo/.pyenv/versions/ironpython-2.7.6.3/bin/Lib/sysconfig.py\", line 522, in get_config_var\n  File \"/home/samo/.pyenv/versions/ironpython-2.7.6.3/bin/Lib/sysconfig.py\", line 474, in get_config_vars\n  File \"/home/samo/.pyenv/versions/ironpython-2.7.6.3/bin/Lib/sysconfig.py\", line 358, in _init_posix\nImportError: No module named _sysconfigdata`\n\nI downloaded the file myself and confirmed this module is not included.\n- It defaults to mono runtime 4.0: `IronPython 2.7.6.3 (2.7.6.3) on Mono 4.0.30319.42000 (64-bit)` even though the latest installed is:\n\n`$ mono --version\nMono JIT compiler version 4.6.0 (Stable 4.6.0.245/746756c Wed Sep 21 14:16:42 UTC 2016)`\n\nThis seems to be hardcoded into ipy.exe and ipy64.exe anyway. The other option would be to create a separate ironpython-2.7.6.3-src and build from source, but that's beyond my league right now :).\n",
    "head_branch": "ironpython-2.7.6.3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #716 from Samureus/ironpython-2.7.6.3\n\nAdd ironpython-2.7.6.3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5b044ee515ce6a4ada8",
    "number": 715,
    "body": "Tested on Ubuntu 16.04 64-bit up to the point where it installs.\n\nBy the way, I did not include a checksum as I could not find any at the repository, but since Bitbucket uses HTTPS anyway that should be ok?\n",
    "head_branch": "stackless-3.4.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5b144ee515ce6a4ada9",
    "number": 714,
    "body": "Tested on Ubuntu 16.04 64-bit. Please note that there's are also MacOS X dmg packages listed at\n\nhttps://bitbucket.org/stackless-dev/stackless/downloads?tab=downloads\n\nbut I don't have a Mac to test with and I don't know much Travis-fu to confirm it will catch any mistakes.\n",
    "head_branch": "stackless-2.7.9",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #714 from Samureus/stackless-2.7.9\n\nAdded stackless-2.7.9"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5b244ee515ce6a4adaa",
    "number": 706,
    "body": "My bad!\n",
    "head_branch": "proinsias-miniconda-4.1.11",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #706 from proinsias/proinsias-miniconda-4.1.11\n\nLatest version of miniconda is 4.1.11 not 4.1.1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5b344ee515ce6a4adab",
    "number": 705,
    "body": "I noticed that there were 3 sections for `pyenv install`, so I've rearranged these to make 1 section.\n",
    "head_branch": "patch-4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #705 from proinsias/patch-4\n\nRearrange 'pyenv install' sections in COMMANDS.md"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5b344ee515ce6a4adac",
    "number": 704,
    "body": "",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #704 from proinsias/patch-3\n\nAdd miniconda3 4.1.1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5b444ee515ce6a4adad",
    "number": 703,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #703 from proinsias/patch-2\n\nAdd miniconda2 4.1.1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5b544ee515ce6a4adae",
    "number": 702,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #702 from proinsias/patch-1\n\nAdd anaconda2 4.1.1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5b644ee515ce6a4adaf",
    "number": 701,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #701 from proinsias/patch-1\n\nAdd anaconda3 4.1.1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5b744ee515ce6a4adb0",
    "number": 700,
    "body": "The directory may exist if the `build_package_symlink_version_suffix` ran multiple times. This is a workaround for `mv` errors like `mv: x and y are identical`.\n",
    "head_branch": "issue687",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #700 from yyuu/issue687\n\nRemove `bin.orig` if it already exists"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5b744ee515ce6a4adb1",
    "number": 699,
    "body": "https://www.python.org/downloads/release/python-360b1/\n",
    "head_branch": "3.6.0b1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #699 from zmwangx/3.6.0b1\n\nAdd CPython 3.6.0b1 and remove 3.6.0a4"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5b844ee515ce6a4adb2",
    "number": 697,
    "body": "Tested on Ubuntu 16.04 64-bit up to the point where it starts to download (hopefully Travis will catch any checksum copypasta errors).\n",
    "head_branch": "pypy2-5.4.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #697 from Samureus/pypy2-5.4.1\n\nAdded pypy2-5.4.1 and pypy-5.4.1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5b944ee515ce6a4adb3",
    "number": 696,
    "body": "Tested on Ubuntu 16.04 64-bit.\n",
    "head_branch": "pypy-portable-5.4.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #696 from Samureus/pypy-portable-5.4.1\n\nAdded pypy-portable-5.4.1 now"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5ba44ee515ce6a4adb4",
    "number": 695,
    "body": "Tested on Ubuntu 16.04 up to the point where it starts translating.\n",
    "head_branch": "pypy2-5.4.1-src",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #695 from Samureus/pypy2-5.4.1-src\n\nAdded pypy2-5.4.1-src"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5bb44ee515ce6a4adb5",
    "number": 689,
    "body": "I encountered a bug in `abs_dirname` when using pyenv. I had a file structure that looked like this:\n\n```\n/dept/is/dev/mdippery/opt/bin/asciidoc -> ../Cellar/asciidoc/bin/asciidoc\n/dept/is/dev/mdippery/opt/Cellar/asciidoc/bin/asciidoc -> asciidoc.py\n/dept/is/dev/mdippery/opt/Cellar/asciidoc/bin/asciidoc.py\n```\n\npyenv's `abs_dirname` was encountering an error when it tried to resolve this system of symlinks. When `abs_dirname /dept/is/dev/mdippery/opt/bin/asciidoc` called, the following steps would happen:\n1. `$path` was set to `/dept/is/dev/mdippery/opt/bin/asciidoc`.\n2. Because `[ -n $path ]` was true, pyenv would enter the for loop on Line 42 of `~/.pyenv/libexec/pyenv`.\n3. `$parent` would be set to `/dept/is/dev/mdippery/opt/bin`.\n4. pyenv would `cd` to `$parent`.\n5. `resolve_link asciidoc` would be called, and return `../Cellar/asciidoc/bin/asciidoc`, which would be set to `$path`.\n6. The for loop would start again, since `[ -n $path ]` is still true.\n7. `$parent` would be set to `../Cellar/asciidoc/bin`.\n8. pyenv would `cd` to `$parent`.\n9. `resolve_link asciidoc` would be called, and return `asciidoc.py`, which would be set to `$path`.\n10. The for loop would start again, since `[ -n $path ]` is still true.\n11. _Here's the bug:_ `$parent` would be set to `asciidoc.py`, since that is what `${path%/*}` returns when `$path` is simply `asciidoc.py`, with no parent information.\n12. pyenv would naïvely assume that is a directory, and attempt to `cd` to it. _This causes an error to be thrown._\n\nThe simplest solution seems to be to check whether the \"basename\" of a path is the same as its \"parent\" (i.e., there is a symlink that points to another file in the same directory), and break from the loop if that is the case.\n\nThis fixes a bug that is referenced by #580, #588, and #607. A fix was also supplied in #502, but was never merged. (This fix is a bit different and may work better.)\n",
    "head_branch": "abs_dirname",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5bb44ee515ce6a4adb6",
    "number": 687,
    "body": "build_package_symlink_version_suffix is called twice. The second time, the mv will fail (as bin has already been moved to bin.orig), resulting in the build failing.\n\nThis patch performs the mv only the first time.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5bc44ee515ce6a4adb7",
    "number": 686,
    "body": "Tested on Ubuntu 16.04 64-bit.\n",
    "head_branch": "pypy2-5.4-updated",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #686 from Samureus/pypy2-5.4-updated\n\nUpdated pypy2-5.4 with portable pypy links"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5bd44ee515ce6a4adb8",
    "number": 685,
    "body": "Tested on Ubuntu 16.04 64-bit. Thanks to @squeaky-pl.\n",
    "head_branch": "pypy-portable-5.4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #685 from Samureus/pypy-portable-5.4\n\nAdded pypy-portable-5.4"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5be44ee515ce6a4adb9",
    "number": 684,
    "body": "This also provides _alias_ for existing names.\n",
    "head_branch": "pypy-to-pypy2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #684 from yyuu/pypy-to-pypy2\n\nRename pypy 5.x definitions as `pypy2`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5bf44ee515ce6a4adba",
    "number": 683,
    "body": "Tested in Ubuntu 16.04 up to the point that it downloaded and started translating (\"Installing pypy2-v5.4.0-src...\" message)\n",
    "head_branch": "pypy-5.4-src",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #683 from Samureus/pypy-5.4-src\n\nAdded pypy-5.4-src"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5c044ee515ce6a4adbb",
    "number": 680,
    "body": "Even if pyenv checks a hash for most things (which it doesn't for jython's hg), it doesn't say that to the user (which just tells them it's downloading a HTTP url then unzips and compiles it), and the cost of HTTPS nowadays is so nil that pyenv might as well use it for all the URLs.\n",
    "head_branch": "https",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #680 from hawkowl/https\n\nmake all http source urls https"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5c044ee515ce6a4adbc",
    "number": 674,
    "body": "The plugin pyenv-default-packages uses `$(pyenv root)/default-packages` [as configuration file](https://github.com/jawshooah/pyenv-default-packages#usage). \nSince this plugin is listed as approved, I assume it makes sense to have the file permanently ignored by Git.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #674 from jossy/master\n\nAdd default-packages to .gitignore"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5c144ee515ce6a4adbd",
    "number": 673,
    "body": "https://www.python.org/downloads/release/python-360a4/.\n",
    "head_branch": "3.6.0a4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #673 from zmwangx/3.6.0a4\n\nAdd CPython 3.6.0a4; remove 3.6.0a1 and 3.6.0a3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5c244ee515ce6a4adbe",
    "number": 671,
    "body": "This bug must have been implemented in #487 😞 \n",
    "head_branch": "issue610",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #671 from yyuu/issue610\n\nShow meaningful message on missing executable (fixes #610)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5c344ee515ce6a4adbf",
    "number": 670,
    "body": "Now we don't need to modify hook script itself to tweak the blacklist.\n",
    "head_branch": "conda-rehash-config",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #670 from yyuu/conda-rehash-config\n\nSplit blacklist of conda's system executables"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5c444ee515ce6a4adc0",
    "number": 669,
    "body": "`git merge rbenv/master -s recursive -X rename-threshold=5%`\n",
    "head_branch": "rbenv-20160815",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #669 from yyuu/rbenv-20160815\n\nrbenv 20160815"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5c444ee515ce6a4adc1",
    "number": 668,
    "body": "",
    "head_branch": "ruby-build-20160602",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #668 from yyuu/ruby-build-20160602\n\nruby-build 20160602"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5c544ee515ce6a4adc2",
    "number": 663,
    "body": "`tar` on some BSD systems may not support `-J` (`xz`). As reported in #654, using `.tar.xz` causes some errors on tarball extraction on NetBSD/OpenBSD. (OTOH, it seems `tar` of FreeBSD/OS X supports `-J`)\n\nGenerally speaking `.tar.xz` archives are way smaller than `.tar.gz` and it'd be better to use it as long as the `tar` itself supports it. This workaround will let python-build to use only on the platform where `tar` can work with `-J`.\n\n(cc: @tsahara)\n",
    "head_branch": "bsd-tar-xz",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #663 from yyuu/bsd-tar-xz\n\nUse `.tar.xz` archive only if `tar` supports `-J` (especially on *BSD)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5c644ee515ce6a4adc3",
    "number": 661,
    "body": "This should fix #628.\n\nTODO:\n- [x] Write some test\n- [x] Send PR to rbenv\n",
    "head_branch": "workaroud-bin-python",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #661 from yyuu/workaroud-bin-python\n\nAdd workaround for `/bin/python`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5c744ee515ce6a4adc4",
    "number": 657,
    "body": "https://www.python.org/downloads/release/python-360a3/.\n",
    "head_branch": "cpython-3.6.0a3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #657 from zmwangx/cpython-3.6.0a3\n\nAdd CPython 3.6.0a3 and remove 3.6.0a2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5c844ee515ce6a4adc5",
    "number": 654,
    "body": "XZ could be better from perspective of download size.\n- [x] Check if the archive is actually available\n- [x] Update documentations about dependencies\n  - We'd need to add `xz-utils`\n\nBecause XZ is _relatively new_, changing the compression algorithm may cause problem on very old system. Please comment to issue if you have any concern about this.\n",
    "head_branch": "tgz-to-tar-xz",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #654 from yyuu/tgz-to-tar-xz\n\nUse xz archive instead of gzip archive"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5c844ee515ce6a4adc6",
    "number": 653,
    "body": "`git merge rbenv/master -s recursive -X rename-threshold=5%`\n",
    "head_branch": "rbenv-20160701",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #653 from yyuu/rbenv-20160701\n\nrbenv 20160701"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5c944ee515ce6a4adc7",
    "number": 652,
    "body": "Fixes #647. Also reduces potential demonic invasions through reduction of `666`s.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #652 from nicktimko/patch-1\n\nUse non-broken 3.6.0a2 xz archive"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5ca44ee515ce6a4adc8",
    "number": 651,
    "body": "fixes #650\n",
    "head_branch": "sh-help-stderr",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #651 from yyuu/sh-help-stderr\n\nMessages should not be written to stdout if the command is `sh-` command"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5cb44ee515ce6a4adc9",
    "number": 648,
    "body": "Pretty sure these lines are not supposed to be there... causing install to fail for me.\n",
    "head_branch": "fix-pypy-5-3-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #648 from JayH5/fix-pypy-5-3-1\n\npypy-5.3.1: Remove stray text"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5cb44ee515ce6a4adca",
    "number": 645,
    "body": "https://www.python.org/downloads/release/python-2712/.\n",
    "head_branch": "cpython-2.7.12",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #645 from zmwangx/cpython-2.7.12\n\nAdd CPython 2.7.12 and remove 2.7.12rc1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5cc44ee515ce6a4adcb",
    "number": 643,
    "body": "http://blog.python.org/2016/06/python-352-and-python-345-are-now.html.\n",
    "head_branch": "cpython-3.4.5-and-3.5.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #643 from zmwangx/cpython-3.4.5-and-3.5.2\n\nAdd CPython 3.4.5 and 3.5.2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5cd44ee515ce6a4adcc",
    "number": 642,
    "body": "The original change has made for as a workaround of #638. Though it'd be just better to keep build definitions simple as possible.\n",
    "head_branch": "stop-calling-verify-pyxx-twice",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #642 from yyuu/stop-calling-verify-pyxx-twice\n\nAdded `build_package_symlink_version_suffix` to stop calling `verify_pyXX`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5ce44ee515ce6a4adcd",
    "number": 634,
    "body": "Sometime `aria2c` requires some _special_ customization (e.g. #620) to call it. Using `curl` during tests could make test impl simpler and understandable..\n",
    "head_branch": "use-curl-stub-in-tests",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #634 from yyuu/use-curl-stub-in-tests\n\nUse `curl` stub instead of `aria2c` during tests"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5cf44ee515ce6a4adce",
    "number": 630,
    "body": "https://www.python.org/downloads/release/python-360a2/.\n",
    "head_branch": "cpython-3.6.0a2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #630 from zmwangx/cpython-3.6.0a2\n\nAdd CPython 3.6.0a2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5d044ee515ce6a4adcf",
    "number": 620,
    "body": "`aria2c` doesn't support writing content to stdout. As a workaround, this patch will use temporary file then write content on stdout once finished downloading.\n- [x] fix tests\n- [x] send similar fix to https://github.com/rbenv/ruby-build\n",
    "head_branch": "workaround-aria2c-stdout",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #620 from yyuu/workaround-aria2c-stdout\n\nWrite remote content on stdout with `aria2c`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5d044ee515ce6a4add0",
    "number": 618,
    "body": "",
    "head_branch": "stackless-dev-py35",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #618 from jayvdb/stackless-dev-py35\n\nUpdate stackless-dev to check for Python 3.5"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5d144ee515ce6a4add1",
    "number": 617,
    "body": "\n\n<!-- Reviewable:start -->\nThis change is [<img src=\"https://reviewable.io/review_button.svg\" height=\"34\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/yyuu/pyenv/617)\n<!-- Reviewable:end -->\n",
    "head_branch": "travis-integration-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5d244ee515ce6a4add2",
    "number": 615,
    "body": "running the command suggested by `pyenv init` as it stands (with `.` instead of `source`) in the fish shell doesn't work - fish complains about the [deprecation](https://github.com/fish-shell/fish-shell/issues/310) and otherwise fails. this fixes the problem.\n",
    "head_branch": "fish-depcrecated-period",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #615 from cha-ron/fish-depcrecated-period\n\n\".\" has been deprecated in the fish shell in favor of explicit \"source\""
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5d344ee515ce6a4add3",
    "number": 614,
    "body": "Fixes #610",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5d444ee515ce6a4add4",
    "number": 608,
    "body": "I'm still not 100% sure why but in some case hook script of #595 didn't work. This should make the script more reliably.\n",
    "head_branch": "skip-create-conda-shims-reloaded",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #608 from yyuu/skip-create-conda-shims-reloaded\n\nSkip creating shims for conda's system executables, more reliably"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5d544ee515ce6a4add5",
    "number": 606,
    "body": "My $HOME is located on a share: /company/username. Someone created /company/.python-version directory there and I was getting an error on each pyenv activation:\ncut: /company/.python-version: No such file or directory.\n\nThat happened because pyenv-version-file wasn't distinguishing regular files and directories, it printed existing matching path and fed it to libexec/pyenv-version-file-read which spilled the error.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Do not attempt to read .python-version directories (#606)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5d544ee515ce6a4add6",
    "number": 604,
    "body": "https://www.python.org/downloads/release/python-360a1/\n",
    "head_branch": "cpython-3.6.0a1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #604 from zmwangx/cpython-3.6.0a1\n\nAdd CPython 3.6.0a1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5d644ee515ce6a4add7",
    "number": 595,
    "body": "Anaconda bundles some of system executables (e.g. `curl`, `openssl`, etc.). Though for most use case, users will not want to use them until they really want them. This lets pyenv to skip generating shims for those executables.\n\nWith this, we'd be able to remove a hook script for `pyenv which` eventually.\n",
    "head_branch": "anaconda-rehash",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #595 from yyuu/anaconda-rehash\n\nSkip creating shims for system executables bundled with Anaconda (#594)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5d744ee515ce6a4add8",
    "number": 593,
    "body": "Meh, this still depends on Portable PyPy 5.1.1 being merged first, sorry, I can send the PR later if needed or delete the previous one.\n",
    "head_branch": "PyPy-5.1.1-src",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #593 from Samureus/PyPy-5.1.1-src\n\nPypy 5.1.1 src"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5d844ee515ce6a4add9",
    "number": 592,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5d944ee515ce6a4adda",
    "number": 577,
    "body": "Hi,\n\nI just copied the build script for [jython-2.7.1b2](https://github.com/yyuu/pyenv/blob/master/plugins/python-build/share/python-build/jython-2.7.1b2) and changed the URL and SHA256 hash.\n\nThank you,\n\nCosimo\n",
    "head_branch": "jython-2.7.1b3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #577 from anthrotype/jython-2.7.1b3\n\nAdd Jython 2.7.1 beta3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5d944ee515ce6a4addb",
    "number": 572,
    "body": "",
    "head_branch": "anaconda-4.0.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #572 from SNakano/anaconda-4.0.0\n\nAdd Anaconda 4.0.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5da44ee515ce6a4addc",
    "number": 556,
    "body": "Changed from `20150310` to `20160310`.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5db44ee515ce6a4addd",
    "number": 549,
    "body": "Import changes from rbenv 1.0 (actually I imported changes from the current HEAD instead of tag). Still need testing.\n",
    "head_branch": "rbenv-1.0",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 30538b0672323fde4d6e733d9f08b4a656ccd90b into 7467c88780979d2cd80472bec86b5e6e9fd51e53"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5dc44ee515ce6a4adde",
    "number": 547,
    "body": "Related to #546\n\npypy-dev compiles the pypy project too, so it should use a Python2.7 interpreter \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5dd44ee515ce6a4addf",
    "number": 543,
    "body": "Download links are changed to HTTPS. This is important especially for latest version of miniconda as there is no SHA256 to keep users from MITM attack.\n\nAnaconda 2.5.0 is added as well.\n",
    "head_branch": "update-continuum",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5de44ee515ce6a4ade0",
    "number": 542,
    "body": "",
    "head_branch": "default-unicode-ucs4",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5de44ee515ce6a4ade1",
    "number": 539,
    "body": "Use `aria2c` as HTTP/HTTPS downloader if it is available. This should solve #534.\n",
    "head_branch": "download-aria2c",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #539 from yyuu/download-aria2c\n\nUse `aria2c` as the download if available (#534)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5df44ee515ce6a4ade2",
    "number": 536,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5e044ee515ce6a4ade3",
    "number": 522,
    "body": "Prevents PATH population in the event the pyenv is initialized twice (e.g. once in shell create, a second time in tmux/screen session).\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5e144ee515ce6a4ade4",
    "number": 511,
    "body": "",
    "head_branch": "cpython-3.4.4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5e244ee515ce6a4ade5",
    "number": 510,
    "body": "This patch is similar fix as #507 and it should fix build error of 3.0.x, 3.1.x and 3.2.x with OpenSSL 1.0.2+.\n",
    "head_branch": "no-ssl3-for-py30-py31-py32",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5e344ee515ce6a4ade6",
    "number": 507,
    "body": "This patch will be required to build CPython with OpenSSL 1.0.2+. This is similar fix to #495, but for more versions.\n",
    "head_branch": "openssl-no-ssl3",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5e344ee515ce6a4ade7",
    "number": 504,
    "body": "This includes the fix from https://github.com/rbenv/rbenv/pull/836.\n",
    "head_branch": "merge-rbenv",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5e444ee515ce6a4ade8",
    "number": 503,
    "body": "Fix error about https://github.com/yyuu/pyenv/pull/502\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5e544ee515ce6a4ade9",
    "number": 502,
    "body": "Fix the error below\n\n```\n\n$ mkdir testdir; echo \"print 'hello'\" > testdir/test.py; ln -s test.py testdir/test; python testdir/test\n/Users/meng/.pyenv/libexec/pyenv: line 43: cd: test.py: Not a directory\nhello\n\n```\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5e644ee515ce6a4adea",
    "number": 498,
    "body": "Add CPython 3.5.1 installation.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5e744ee515ce6a4adeb",
    "number": 495,
    "body": "This allows me to build 2.7.3 on debian now. Without this patch, I get the following error:\n\n```\n/tmp/python-build.20151206091414.18928/Python-2.7.3/Modules/_ssl.c: In function ‘newPySSLObject’:\n/tmp/python-build.20151206091414.18928/Python-2.7.3/Modules/_ssl.c:306:33: warning: implicit declaration of function ‘SSLv3_method’ [-Wimplicit-function-declaration]\n         self->ctx = SSL_CTX_new(SSLv3_method()); /* Set up context */\n                                 ^\n/tmp/python-build.20151206091414.18928/Python-2.7.3/Modules/_ssl.c:306:33: warning: passing argument 1 of ‘SSL_CTX_new’ makes pointer from integer without a cast [-Wint-conversion]\nIn file included from /tmp/python-build.20151206091414.18928/Python-2.7.3/Modules/_ssl.c:88:0:\n/usr/include/openssl/ssl.h:2131:10: note: expected ‘const SSL_METHOD * {aka const struct ssl_method_st *}’ but argument is of type ‘int’\n SSL_CTX *SSL_CTX_new(const SSL_METHOD *meth);\n          ^\ngcc -pthread -shared -L/home/catlee/.pyenv/versions/2.7.3/lib -L/home/catlee/.pyenv/versions/2.7.3/lib -I. -IInclude -I./Include -I/home/catlee/.pyenv/versions/2.7.3/include build/temp.linux-x86_64-2.7/tmp/python-build.20151206091414.18928/Python-2.7.3/Modules/_ssl.o -L/home/catlee/.pyenv/versions/2.7.3/lib -L/usr/lib/x86_64-linux-gnu -L/usr/local/lib -lssl -lcrypto -o build/lib.linux-x86_64-2.7/_ssl.so\n*** WARNING: renaming \"_ssl\" since importing it failed: build/lib.linux-x86_64-2.7/_ssl.so: undefined symbol: SSLv3_method\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5e744ee515ce6a4adec",
    "number": 494,
    "body": "http://blog.python.org/2015/12/python-2711-released.html.\n",
    "head_branch": "cpython-2.7.11",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5e844ee515ce6a4aded",
    "number": 491,
    "body": "I believe this would help improving interoperability of pyenv and Anaconda.\n",
    "head_branch": "anaconda-which-ext",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge a6dbb11dca9330d6aefae5910409396065076be6 into a50d0492b30d1b868f6379256a84379ce8693dc6"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5e944ee515ce6a4adee",
    "number": 490,
    "body": "Created with https://github.com/dkhamsing/frankenstein\n### GitHub Corrected URLs\n\n| Was | Now |\n| --- | --- |\n| https://github.com/sstephenson/rbenv | https://github.com/rbenv/rbenv |\n| https://github.com/sstephenson/ruby-build | https://github.com/rbenv/ruby-build |\n### HTTPS Corrected URLs\n\n| Was | Now |\n| --- | --- |\n| http://pypi.python.org/pypi/tox | https://pypi.python.org/pypi/tox |\n| http://pypi.python.org/pypi/virtualenv | https://pypi.python.org/pypi/virtualenv |\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 43abe13db97928097a8ffa23f0559e02ee122f1c into 465bd1f3e8d458ee209e858cad0639bf08ecf01d"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5ea44ee515ce6a4adef",
    "number": 488,
    "body": "This should fix #479.\n\nTODO: \n1. ~~write some tests~~\n2. ~~submit same fix to rbenv~~\n",
    "head_branch": "issue479",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5eb44ee515ce6a4adf0",
    "number": 487,
    "body": "Imported changes from latest rbenv, by `git merge rbenv/master -s recursive -X rename-threshold=5%`. (cc: @blueyed )\n",
    "head_branch": "rbenv-20151121",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5eb44ee515ce6a4adf1",
    "number": 486,
    "body": "",
    "head_branch": "ruby-build-20151028",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5ec44ee515ce6a4adf2",
    "number": 485,
    "body": "To help address issue #481, here are a few edits for the readme:\n\nI added next steps to the Homebrew instructions. It would be great to encourage another newcomer to test these slightly-improved instructions and report any problems they encounter.\n\nI renamed \"Neckbeard Configuration\" to \"Advanced Configuration\", for clarity of language, and I made a few small copyedits for clarity as well.\n\nI removed the extra \"download and unpack the source\" instructions, and I fixed the links to more information about \"pyenv shell\", \"pyenv local\", and \"pyenv global\".\n",
    "head_branch": "readme-improvements",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5ed44ee515ce6a4adf3",
    "number": 477,
    "body": "Tested install of Linux-x86_64 locally.\n",
    "head_branch": "miniconda-3.18.3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5ee44ee515ce6a4adf4",
    "number": 471,
    "body": "List virtualenv created in `envs` directory as a version, to improve the interoperability between Anaconda/Miniconda.\n\n``` sh\n% pyenv versions\n  system\n* 3.4.3 (set by /home/yyuu/.pyenv/version)\n  3.4.3/envs/bar\n  3.4.3/envs/foo\n  miniconda3-3.16.0\n  miniconda3-3.16.0/envs/foo\n```\n",
    "head_branch": "activate-ng",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5ef44ee515ce6a4adf5",
    "number": 447,
    "body": "#239 add how to use proxy to download note.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5f044ee515ce6a4adf6",
    "number": 444,
    "body": "### yyuu/pyenv now has a Chat Room on Gitter\n\n@yyuu has just created a chat room. You can visit it here: [https://gitter.im/yyuu/pyenv](https://gitter.im/yyuu/pyenv?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&content=body_link).\n\nThis pull-request adds this badge to your README.md:\n\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/yyuu/pyenv?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=body_badge)\n\nIf my aim is a little off, please [let me know](https://github.com/gitterHQ/readme-badger/issues).\n\nHappy chatting.\n\nPS: [Click here](https://gitter.im/settings/badger/opt-out) if you would prefer not to receive automatic pull-requests from Gitter in future.\n",
    "head_branch": "gitter-badge",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5f044ee515ce6a4adf7",
    "number": 439,
    "body": "Refer to #438\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5f144ee515ce6a4adf8",
    "number": 437,
    "body": "https://www.python.org/downloads/release/python-350rc4/.\n",
    "head_branch": "cpython-3.5.0rc4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5f244ee515ce6a4adf9",
    "number": 435,
    "body": "Downloaded Linux-x86/Linux-x86_64//MacOSX-x86_64 installers and generated sha256sum locally.\n\n```\nsha256sum Miniconda*-3.16.0-*.sh\nb1facded0d33850e3a467d6e4589830be477bd4f819407b99b033a4d22601e4d  Miniconda-3.16.0-Linux-x86_64.sh\n57e9659848e6322cb18c1c4a5c844a4f7dc5e784dbd8977245769ff9db28dade  Miniconda-3.16.0-Linux-x86.sh\ne93517696d4ede4f8ff21ea42272f24508023b83f1e2e2c989d1b32ab19347a9  Miniconda-3.16.0-MacOSX-x86_64.sh\n3becbcdd36761711850cffa11064b87cfe067dbeb4a5eda544dc341af482de87  Miniconda3-3.16.0-Linux-x86_64.sh\nfaedb7a75584d48d563f0f9b449cb00bf8d05ddb3e1ede1936bf522f03f0e1e2  Miniconda3-3.16.0-Linux-x86.sh\n36fe954548a6900249270f9632b76252e247313cc9d551c096d7e1f526a88631  Miniconda3-3.16.0-MacOSX-x86_64.sh\n```\n",
    "head_branch": "miniconda-3.16.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5540e235abe764834e376fb55282fcfbd7e286b6 into 193e64b6b275ff0727c417b54c3085641af2112a"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5f344ee515ce6a4adfa",
    "number": 424,
    "body": "https://www.python.org/downloads/release/python-350rc1/\n",
    "head_branch": "python-3.5.0rc1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5f444ee515ce6a4adfb",
    "number": 419,
    "body": "I copied and modified the file for beta 3.\n",
    "head_branch": "35b4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5f444ee515ce6a4adfc",
    "number": 414,
    "body": "Used miniconda*-3.9.1 as a template and generated hashes via sha256sum on the command line after downloading.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5f544ee515ce6a4adfd",
    "number": 413,
    "body": "With the switch to hg.python.org, we need to build `3.6-dev`.\n\nThis has been tested [here](https://travis-ci.org/travis-ci/cpython-builder/builds/71512737); Checks out the branch at https://travis-ci.org/travis-ci/cpython-builder/builds/71512737#L121, then proceeds to use the script https://travis-ci.org/travis-ci/cpython-builder/builds/71512737#L140 to build it.\n",
    "head_branch": "ha-feature-py36",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5f644ee515ce6a4adfe",
    "number": 412,
    "body": "BitBucket mirror is no longer up to date with the canonical repository.\n\nFixes https://github.com/yyuu/pyenv/issues/409.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5f744ee515ce6a4adff",
    "number": 410,
    "body": "This is useful as an indicator where it is coming from.\n\nSubmitted for rbenv at: https://github.com/sstephenson/rbenv/pull/756,\nbut pyenv has more tests in this regard.\n",
    "head_branch": "version-origin-with-non-installed",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5f844ee515ce6a4ae00",
    "number": 405,
    "body": "The former should be faster, because it does not invoke a subshell.\n",
    "head_branch": "use-PWD",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5f944ee515ce6a4ae01",
    "number": 402,
    "body": "This is just a copy/paste of #292 to support 2.7.10 to solve the issue in #282\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5f944ee515ce6a4ae02",
    "number": 401,
    "body": "Set LD_LIBRARY_PATH to python installation root path, by this\nallow system to load libraries installed not only in default\nsystem paths. Therefore allowing user to keep different\nversions for each python installation.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5fa44ee515ce6a4ae03",
    "number": 400,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5fb44ee515ce6a4ae04",
    "number": 396,
    "body": "Look in the \"PYTHON_BUILD_CACHE_PATH\" directory for cached files. Not in the current directory.\n\nAlso, don't overwrite a cached file that is already there.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5fc44ee515ce6a4ae05",
    "number": 393,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5fd44ee515ce6a4ae06",
    "number": 384,
    "body": "",
    "head_branch": "pypy-260",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5fe44ee515ce6a4ae07",
    "number": 379,
    "body": "This was rejected for rbenv, where it does not make much sense\n(https://github.com/sstephenson/rbenv/pull/735).\n\nRef: https://github.com/yyuu/pyenv/pull/368#issuecomment-102806837\n",
    "head_branch": "pyenv-rehash-python-glob",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5fe44ee515ce6a4ae08",
    "number": 378,
    "body": "I was seeing the following occasionally in scripts:\n\n> …/.pyenv/libexec/pyenv-version-file-read: line 12: type: write error: Broken pipe\n\nThis patch hopefully improves/fixes this, and it seems better anyway to\njust use sed here.\n\nI've not tested this with OS X's default `sed`.\n",
    "head_branch": "version-file-read-without-type",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc5ff44ee515ce6a4ae09",
    "number": 376,
    "body": "The current Anaconda3 2.2.0 URLs return 404. This PR fixes the problem. Not sure if the current ones ever worked.\n",
    "head_branch": "tj-fix-bad-anaconda-urls",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc60044ee515ce6a4ae0a",
    "number": 375,
    "body": "As title. :)\n",
    "head_branch": "anaconda",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc60144ee515ce6a4ae0b",
    "number": 371,
    "body": "see #351\n\nalso added missing 3.1.x releases.\n",
    "head_branch": "fix-py3.1-pip",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc60244ee515ce6a4ae0c",
    "number": 370,
    "body": "Added the new release version of jython 2.7.0 and removed the betas (didn't seem necessary anymore)\n",
    "head_branch": "jython-2-7-0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc60244ee515ce6a4ae0d",
    "number": 368,
    "body": "I've came up with the regexp before I've noticed that only pip and easyinstall are affected, so this could get optimized / simplified maybe.\n\nAlso the exporting of `PYENV_REHASH_REAL_COMMAND` feels dirty, but is required for the inner communication.\n\nFixes https://github.com/yyuu/pyenv/issues/367\n",
    "head_branch": "pip-rehash-for-versions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 481198d25560086ef426f69fc92fcda0c3daef1d into 5402ce423b6d3f04d0789c1c4e57e2b88d69437b"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc60344ee515ce6a4ae0e",
    "number": 364,
    "body": "https://www.python.org/downloads/release/python-350a4/\n",
    "head_branch": "python-3-5-0-a4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc60444ee515ce6a4ae0f",
    "number": 362,
    "body": "Add detail regarding activating multiple Python2 and Python3 versions simultaneously.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 17c153b1c1bd36c032170370cfc3db5818711450 into 71c9ff565be5a7f0a7dd47e84730095a4b6d555e"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc60544ee515ce6a4ae10",
    "number": 360,
    "body": "This merges\nhttps://github.com/sstephenson/rbenv/commits/4d72eefffc548081f6eee2e54d3b9116b9f9ee8e\nto build a common ancestor for future merges.\n\nThis is branched off f48a5b11d709ec616f766864b8e0ab894cb30962, which was\nthe last manual merge.\n\nDiscussion / initial idea: https://github.com/yyuu/pyenv/pull/286#issuecomment-66565475\n\nThis was done using:\n\n```\n# Keep our changes for \"unmerged, both added\"\nfor i in $(git status --porcelain | grep '^AA ' | cut -d\\  -f2); do\n  git checkout --ours $i\n  git add $i\ndone\n\n# \"git mv\" rbenv files to our name, keeping the current contents.\nfor i in $(git status --porcelain | grep '^A ' | sed 's/^A  //'); do\n  ours=${i//rbenv/pyenv}\n  test -f $ours || { echo \"Skipping: $i\"; continue; }\n  git mv -f $i $ours\n  git reset HEAD $ours\ndone\n```\n\nI've handled the following then manually:\n\n```\n- rbenv.d/exec/gem-rehash.bash\n- rbenv.d/exec/gem-rehash/rubygems_plugin.rb\n```\n\nThis should allow to merge rbenv in the future using:\n\n```\ngit merge rbenv/master -s recursive -X rename-threshold=5%\n```\n\nI am not sure about the rename-threshold, 25% also worked for one file\nI've tested.\n\nConflicts:\n    .gitignore\n    .travis.yml\n    LICENSE\n    README.md\n    src/Makefile.in\n    test/--version.bats\n    test/commands.bats\n    test/completions.bats\n    test/exec.bats\n    test/global.bats\n    test/help.bats\n    test/hooks.bats\n    test/init.bats\n    test/local.bats\n    test/prefix.bats\n    test/rehash.bats\n    test/run\n    test/shell.bats\n    test/shims.bats\n    test/test_helper.bash\n    test/version-file-read.bats\n    test/version-file-write.bats\n    test/version-file.bats\n    test/version-name.bats\n    test/version-origin.bats\n    test/version.bats\n    test/versions.bats\n    test/whence.bats\n    test/which.bats\n",
    "head_branch": "merge-rbenv",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc60644ee515ce6a4ae11",
    "number": 358,
    "body": "This has been fixed for rbenv in\nhttps://github.com/sstephenson/rbenv/commit/050f750.\n\nRef: https://github.com/sstephenson/rbenv/pull/706\n",
    "head_branch": "fix-src-configure-sed",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 80eef69c9abfc53f4b79b53d8f0b25da029e4c25 into 5dc3ee95fdb9c68cb8f66d1bccb03b8d29c73a45"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc60744ee515ce6a4ae12",
    "number": 357,
    "body": "Mainly for https://github.com/yyuu/pyenv/issues/356.\n",
    "head_branch": "performance-tweaks",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc60744ee515ce6a4ae13",
    "number": 355,
    "body": "This is just a copy/paste of https://github.com/yyuu/pyenv/pull/292 to support 2.7.9 to solve the issue in  https://github.com/yyuu/pyenv/issues/282\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge bc025641c2928e2f0b4db0feaeaa5f4262a57f31 into b09681c9fb93cf3449b340fd0062756cf08ad79b"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc60844ee515ce6a4ae14",
    "number": 350,
    "body": "There are times when we do not want this to happen, such as when we are using 'fpm' to package python modules.\n\nIn my case, I am using \"pyenv\" alongside \"rbenv\" (and \"plenv\" and \"renv\"). In my ruby environment, I'm using \"fpm\" (https://github.com/jordansissel/fpm). Let's say I have python 2.7.9 in pyenv, and I want to package \"pyramid\" into a .deb.\n\n```\nfpm --debug -f \n    --python-pypi https://pypi.python.org/simple \\\n    --python-install-lib /opt/pyenv/.pyenv/versions/2.7.9/lib/python2.7/site-packages \\\n    --python-bin /opt/pyenv/.pyenv/shims/python \\\n    --python-pip /opt/pyenv/.pyenv/shims/pip -s python -t deb pyramid\n```\n\nThis will fail because I'm not root and it will fail the auto rehash. With this patch, I can now do this:\n\n```\nPYENV_NOREHASH=1 fpm --debug -f \n    --python-pypi https://pypi.python.org/simple \\\n    --python-install-lib /opt/pyenv/.pyenv/versions/2.7.9/lib/python2.7/site-packages \\\n    --python-bin /opt/pyenv/.pyenv/shims/python \\\n    --python-pip /opt/pyenv/.pyenv/shims/pip -s python -t deb pyramid\n```\n",
    "head_branch": "mcallawa_norehash",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc60944ee515ce6a4ae15",
    "number": 347,
    "body": "Sorry to blow up your inbox today...\n\nLooks like the tag/branch for 2.5.1 moved after I computed the expected checksum. When I downloaded the release, it was at commit [9c4588d](https://bitbucket.org/pypy/pypy/commits/9c4588d), but is now at [e3d046c](https://bitbucket.org/pypy/pypy/commits/e3d046c). I also see a few commits in the log indicating that the tag for 2.5.1 was moved.\n\nAt any rate, I switched the url to the bitbucket downloads page since that is what http://pypy.org/download.html links to. This will ensure that the file we download won't change unless they re-upload it manually.\n",
    "head_branch": "pypy-251-src-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc60a44ee515ce6a4ae16",
    "number": 346,
    "body": "Adds the portable PyPy versions left out in #340 (they were just added in squeaky-pl/portable-pypy#8)\n",
    "head_branch": "pypy-251-portable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc60b44ee515ce6a4ae17",
    "number": 345,
    "body": "The `require_distro` function loops over all distro names passed to it, but constantly checks the current distro against the first argument. Thus, some pythons (e.g. pypy in this case) will fail to install the official binaries unless you are using whatever the first listed supported distro is, even though the binary supports a wide range of distros (like 12.04 thru 14.04).\n\nOn a related note, `pypy-2.5.x` binary versions for `linux64` did not have the correct list of supported distros.\n",
    "head_branch": "fix-require-distro",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc60b44ee515ce6a4ae18",
    "number": 344,
    "body": "https://www.python.org/downloads/release/python-350a3/\n",
    "head_branch": "python-3-5-0-a3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc60c44ee515ce6a4ae19",
    "number": 341,
    "body": "When I tried to install pypy-2.5.0-src I got this error:\n\n```\npushd: pypy-pypy-c6ad44ecf5d8: No such file or directory\n```\n\nLooks like when 2.5.0 was added in b9ae43a9, they forgot to change the build directory and just copied the one from pypy-2.4.0-src.\n",
    "head_branch": "fix-pypy-2-5-0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc60d44ee515ce6a4ae1a",
    "number": 340,
    "body": "Portable distros for linux are not yet available, so I opted to print an error for that case.\n",
    "head_branch": "pypy-2-5-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc60e44ee515ce6a4ae1b",
    "number": 336,
    "body": "so you run the pyenv command in anywhere path\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc60f44ee515ce6a4ae1c",
    "number": 329,
    "body": "Issue #326: have this from last year, only tested on debian wheezy.\n",
    "head_branch": "portable-pypy",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc61044ee515ce6a4ae1d",
    "number": 328,
    "body": "https://www.python.org/downloads/release/python-350a2/\n",
    "head_branch": "python-3-5-0-a2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc61044ee515ce6a4ae1e",
    "number": 324,
    "body": "feel free to decline if alphas are not acceptable to include...\n\nhttps://www.python.org/downloads/release/python-350a1/\n",
    "head_branch": "python-3-5-0-a1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d6e1de3e2fa2f595bc4b3b43b084d09b9b35dd98 into d14357f64c1dde324dd01f036e5068a33e0f3147"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc61144ee515ce6a4ae1f",
    "number": 323,
    "body": "[link to python.org downloads](https://www.python.org/downloads/release/python-343/) for checksum verification...\n",
    "head_branch": "python-3-4-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 063717e6b5279bddee0be89cfcfb5f886f71d85a into 5a05788e615c253fca1d0f96f136a878ade2137f"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc61244ee515ce6a4ae20",
    "number": 318,
    "body": "Follow PR #260. SHA256 are generated from repo.continuum.io direct downloads.\n",
    "head_branch": "conda_new_ver",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 48335302d969d24a9c784871c4bca834f3b6d48c into 9146f44db137a5b1f37b9da15ff360bbf3a28ba0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc61344ee515ce6a4ae21",
    "number": 313,
    "body": "Thanks for pyenv - it is great!\n\nI use the fish shell and was having issues getting it to work. I, not thinking, placed the command \n\n`status --is-interactive; and . (pyenv init -|psub)`\n\nbefore some of my path jockeying in the config.fish file. After moving the command to the end the config, after my path manipulation logic, pyenv worked perfectly.\n\nThis PR changes the informational message for fish shell users by telling them to place the command _at the end of the file_.\n\nThanks again!\n",
    "head_branch": "fish-message",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc61444ee515ce6a4ae22",
    "number": 312,
    "body": "I have defined MACOSX_DEPLOYMENT_TARGET myself. pyenv should read my\nsettings as the default value.\n\nI need to build flat 10.6-intel pythons for compatible wheels.\nRelated article: http://lepture.com/en/2014/python-on-a-hard-wheel\n",
    "head_branch": "patch-deployment-target",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc61544ee515ce6a4ae23",
    "number": 307,
    "body": "git:// protocol is blocked by a lot of servers, https works fine.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge dbd50e7bd93b63b71911ba5a33ce7035c1e3e5a9 into 1c0a5d82647157fe0dec27bc632d2983e0af63ff"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc61544ee515ce6a4ae24",
    "number": 304,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7535efe0318220fa843d7a65e497651ebc161846 into 995da2df89ea0de6717c9a13ec9715238dc5b5c8"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc61644ee515ce6a4ae25",
    "number": 295,
    "body": "Made it consistent with the rbenv documentation by having the cloning step in the installation clone the project directly into the users' home directory.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc61744ee515ce6a4ae26",
    "number": 292,
    "body": "See issue #282.\n\nThis allows pip to install and function correctly in pyenv python instances.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge fe2412c95d8a3d5a08b962cd55e8a597f066218b into 5114600c4de1fa9e5ed3ac80a168fcf22810e573"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc61844ee515ce6a4ae27",
    "number": 290,
    "body": "Display the other available ones still.\n",
    "head_branch": "version-handle-missing-better",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc61944ee515ce6a4ae28",
    "number": 289,
    "body": "",
    "head_branch": "unset-PYTHON_CFLAGS-in-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc61944ee515ce6a4ae29",
    "number": 286,
    "body": "",
    "head_branch": "ignore-bats",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 93ac0632c71c9c66f95b752dd9d35440967ddad4 into f59729359a6d8706a4aa595830301ce6f8d24450"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc61a44ee515ce6a4ae2a",
    "number": 285,
    "body": "I'll take a stab at this...\n",
    "head_branch": "python-279",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7a21cf9c10728fa79753034a1015f6317df77ac2 into db6a41c90fd028889bd781347f26af27a7ea4e69"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc61b44ee515ce6a4ae2b",
    "number": 280,
    "body": "This should be well tested, especially around multiple-version feature of pyenv.\n\nThis changes must break [pyenv-pip-rehash](https://github.com/yyuu/pyenv-pip-rehash). Need some more extra work to fix it. (It'd be better to bundle auto-rehash feature into pyenv as same as rbenv)\n",
    "head_branch": "rbenv-7e0e85bd",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge bfddc69120abeaabc1b204cfb7dc4387dc485ca7 into fc8597ca384f170ae192fae9cb535590c2878143"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc61c44ee515ce6a4ae2c",
    "number": 278,
    "body": "In the event that `eval \"$(pyenv init -)\"` is called from a function named\npyenv (which I do to get pyenv to load lazily in my shell), evaluating the phrase\n`pyenv rehash` will cause the outer function to run again (causing an infinite loop).\n\nThis change makes it clear you want the command named pyenv and not a function\nwhich may exist in the environment.\n\nI updated (and ran) the tests and also verified that this change works locally in my zsh shell.\n",
    "head_branch": "full-path",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc61d44ee515ce6a4ae2d",
    "number": 271,
    "body": "This patches out the `-lSystemStubs` in the `LIBTOOL_CRUFT` configure variable. This library doesn't exist on OSX 10.9.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 268f965421734347279ea5f50c915f03c4087ec3 into ff0f8a140bfc93d94cfa77dfc48270988793c30c"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc61e44ee515ce6a4ae2e",
    "number": 266,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 96c0362b533d71fc0f489718715ee35eb781d1ab into 35aed218cf48e40c444140431b6fded864156dc1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc61e44ee515ce6a4ae2f",
    "number": 265,
    "body": "Import recent changes from ruby-build v20141028.\n\nThe changes are somewhat bigger. It should be tested carefully than usual.\n",
    "head_branch": "ruby-build-v20141028",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc61f44ee515ce6a4ae30",
    "number": 262,
    "body": "`pyenv` downloads Pythons from a private GH-hosted repo:\n\n```\n$ pyenv install 2.7.8\n\nDownloading Python-2.7.8.tgz...\n-> http://yyuu.github.io/pythons/74d70b914da4487aa1d97222b29e9554d042f825f26cb2b93abd20fdda56b557\n```\n\nGitHub Pages [supports HTTPS for `*.github.io` domains](https://konklone.com/post/github-pages-now-supports-https-so-use-it), so this changes the download link to take advantage of that.\n",
    "head_branch": "use-https",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc62044ee515ce6a4ae31",
    "number": 260,
    "body": "SHA256 values generated with direct downloads from repo.continuum.io\n",
    "head_branch": "anaconda210",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 38ab616344c8b9b7da3ab4ced8851e1bf8668f5c into 720870011bb71c2aa62f469242ce885d5271105d"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc62144ee515ce6a4ae32",
    "number": 254,
    "body": "",
    "head_branch": "add-Makefile",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc62244ee515ce6a4ae33",
    "number": 237,
    "body": "",
    "head_branch": "doc-recent-python-versions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc62244ee515ce6a4ae34",
    "number": 236,
    "body": "As seen in #235.\n",
    "head_branch": "doc-mention-pyenv-pip-rehash",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc62344ee515ce6a4ae35",
    "number": 231,
    "body": "With an empty list of completions, zsh would complete a space / advance\nthe cursor by a space when completing.\n",
    "head_branch": "fix-zsh-completion-for-none",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc62444ee515ce6a4ae36",
    "number": 230,
    "body": "With e.g. /usr/local/bin/.python-version owned by some user, `pyenv\nlocal foo` would fail, if the user has no permissions for\n`/usr/local/bin`, but only the `.python-version` file.\n",
    "head_branch": "version-file-write-no-rm",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b6aef96cea7253db761e54c25d36ee650331c6e8 into 2297bd37417ec2280c61de00f5ac2b64069fdd84"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc62544ee515ce6a4ae37",
    "number": 227,
    "body": "Add a note about how to activate/use multiple versions to the main\nREADME, to the \"Choosing the Python Version\" section.\n",
    "head_branch": "doc-multiple-versions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 8595df4e18bf52c74d1f638bf3e9b9817a8b81ee into 6509d318f4d70f838cf66683931049379e06d703"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc62644ee515ce6a4ae38",
    "number": 222,
    "body": "This is fix for #219 and #220, with fixing/adding some tests.\n\nIf the build is for universal (if `--enable-universalsdk` has found in `PYTHON_CONFIGURE_OPTS`), this also sets `--with-universal-archs=intel` as configure option of CPython. This is as same method as building universal binary with saghul/pythonz and python formula of Homebrew.\n",
    "head_branch": "macosx-deployment-target",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 9df0a2916d1d8efaaee84241c991354250970d77 into f9053406c216c81f313bb5d2161bc67daae08fdb"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc62744ee515ce6a4ae39",
    "number": 221,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc62844ee515ce6a4ae3a",
    "number": 220,
    "body": "Fix this issue: https://github.com/yyuu/pyenv/issues/219\n",
    "head_branch": "mac-target",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc62844ee515ce6a4ae3b",
    "number": 215,
    "body": "`${words[2,-2]}` must not be quoted, otherwise completion for multiple\nwords (e.g. `shell 3.4.1`) fails.\n",
    "head_branch": "fix-zsh-completion",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4159055117e7f4842a0f0b78d41b0a54e7255ff1 into ae4659538d38fbdf58ac47031b93a2e8f2a73a58"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc62944ee515ce6a4ae3c",
    "number": 199,
    "body": "This provides just enough to support PyCrypto's test suite, which goes all the way back to Python 2.1.\n",
    "head_branch": "pycrypto",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge a465cb808c89459b5fdd42c18a6191fb2f0f11d2 into ade2bf2a0da0ea7774b4e7dda6572f84caf25916"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fc62a44ee515ce6a4ae3d",
    "number": 195,
    "body": ":ok_hand: :shipit: \n",
    "head_branch": "anaconda-2.0.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 0880a92a7fb728cf9d5aed223dc302f2c252feb5 into 3169a4894b8a57d91b196ecd7848b37baa71b5e6"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc62b44ee515ce6a4ae3e",
    "number": 194,
    "body": "Modified `build_package_ensurepip` to support the Python versions which don't have `ensurepip` module, with using https://bootstrap.pypa.io/ez_setup.py and https://bootstrap.pypa.io/get-pip.py. Actually, at the time of writing this, https://bootstrap.pypa.io/ez_setup.py is still pointed to problematic setuptools 4.0.1 (#190, #191, #192), you need to set `EZ_SETUP_URL=https://bitbucket.org/pypa/setuptools/raw/5.0.1/ez_setup.py` to use this patch for now.\n\nI believe that this also solves #173 partially.\n",
    "head_branch": "pseudo-ensurepip",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge f6a5eb90a1dc6880041acdc264c55f433d0f2917 into 6697437d1a48ab9350bb1fef8d4b1c7bc14e2c24"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc62c44ee515ce6a4ae3f",
    "number": 191,
    "body": "Setuptools re-release of 3.8.1 to signal that it supersedes 4.x\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc62d44ee515ce6a4ae40",
    "number": 184,
    "body": "This requires `PYTHON_BUILD_MIRROR_URL` to migrate their cache filename from MD5 to SHA2. Need some extra works on https://github.com/yyuu/yyuu.github.com. \n",
    "head_branch": "ruby-build-v20140524",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge c2cc649cfae9c338980271c2c49f67b37dd91485 into 3290973990e1cfaced6010ddc019fcaaff471c9a"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc62d44ee515ce6a4ae41",
    "number": 179,
    "body": "New definitions for Anaconda v2.0.0 and the newly introduced Anaconda3 (also v2.0.0).\n",
    "head_branch": "anaconda-2.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4b8146f5169e63e2074db8113e186700f066b78a into 5a69204978f5a219dedd359239db395fd42e2f3f"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc62e44ee515ce6a4ae42",
    "number": 171,
    "body": "Support for new CPython 3.4.1(has been released 18 May).\n",
    "head_branch": "2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d5506e140418e9773b9dc0ba168843bf2e43f6f7 into f5124965889f83a9e151d63eebe6a077ce776fd7"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc62f44ee515ce6a4ae43",
    "number": 169,
    "body": "Update pip (1.5.5 -> 1.5.6)\n",
    "head_branch": "2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 27d4b9b6d2c685947a87f0169927fd0253883d94 into ef8c8b8ef274b74b70c8a227d562e381101cbcda"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc63044ee515ce6a4ae44",
    "number": 168,
    "body": "Currently, the various 'use_homebrew_*' functions overwrite the CPPFLAGS and\nLDFLAGS in the environment. This patch makes sure that the environment flags are\nincluded in the package configure options.\n",
    "head_branch": "dont_clober_LDFLAGS_CFLAGS",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc63144ee515ce6a4ae45",
    "number": 167,
    "body": "This patch allows you to specify an alias name when installing a python version, by adding a `-a`/`--alias` flag to the `python-install` script. This will allow you to install multiple copies of the same python version.\n\nThis is useful if you want to install multiple versions of 2.7.5 with different compile/configure options.\n\nFor example:\n\n```\n# the following line builds a 2.7.5 python framework with ucs2 on osx:\nPYTHON_CONFIGURE_OPTS=\"--enable-framework --enable-unicode=ucs2\" pyenv install -a 2.7.5 2.7.5_framework_ucs2\n\n# and this will give us a framework with ucs4:\nPYTHON_CONFIGURE_OPTS=\"--enable-framework --enable-unicode=ucs4\" pyenv install -a 2.7.5 2.7.5_framework_ucs4\n\n# and a regular 'shared' python, no framework:\nPYTHON_CONFIGURE_OPTS=\"--enable-shared\" pyenv install -a 2.7.5 2.7.5_shared\n```\n\nI believe that this minor patch might be useful for people trying to test tools and applications against different instances of the same python version.\n",
    "head_branch": "add_versionname_alias",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc63144ee515ce6a4ae46",
    "number": 164,
    "body": "I needed some more up-to-date stackless releases on heroku, where I didn't want to install mercurial as well.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 082c19f5a1559ea58c8bd93849eee1f6abfcdc0d into 72a480f2982fb6ae0c558eb103582c95d074762a"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc63244ee515ce6a4ae47",
    "number": 162,
    "body": "Hello there, thanks a lot for pyenv! I love it!!\n\nI've just added the recently released PyPy 2.3 in this pull request :smile: \n\nCheers\nFotis\n",
    "head_branch": "pypy-2.3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 2e737a80c04f3094c8c8c7d75938600f95f9249b into d707546912e2bcee5656f548686584384dedf1d9"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc63344ee515ce6a4ae48",
    "number": 161,
    "body": "NetBSD's mds5 command (6.1.3 at least) does not have a -q/--quiet\nswitch. Work around that.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc63444ee515ce6a4ae49",
    "number": 155,
    "body": "Added a file for the new version of anaconda. \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc63544ee515ce6a4ae4a",
    "number": 152,
    "body": "Add some patches for CPython 2.6, 2.7, 3.1, 3.2 and 3.3 to fix build error with Readline 6.3. This should fix the issues reported in #126 and #149.\n",
    "head_branch": "readline63",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc63644ee515ce6a4ae4b",
    "number": 151,
    "body": "One requested a function to install python via apt in issue #138.\nI would like to suggest `pyenv-register` command helps to use python via apt (or other package manager).\n\nusage:\n\n```\nsudo apt-get install python-2.7\npyenv register /usr/bin/python2.7\n```\n\nThen `$PYENV_ROOT/versions/system-2.7.*` will be created.\n\nQ. Why this command is necessary?\nA. `pyenv install` takes long time for compiling. In case of `apt-get` and `pyenv register`, compiling is not needed.\n\nQ. You can use virtualenv to create `$PYENV_ROOT/versions/system-2.7.*`\nA. `pyenv register` automatically download `virtualenv.py` if virtualenv is not installed.\n\nQ.  `system-2.7.*` is ugly name.\nA. `pyenv register` accept name as 2nd argument. However, I want more good naming.\n",
    "head_branch": "command-to-use-system-python",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc63744ee515ce6a4ae4c",
    "number": 150,
    "body": "There is compiler issue on OS X like #148. To avoid choosing older `gcc` (e.g. `gcc-4.2` on OSX, with brew's `apple-gcc42` formula), just use default `cc` as `CC` to build CPython.\n\nAlthough, there is still a chance to use other `CC`. Just setting `CC` (e.g. `env CC=gcc-4.2 pyenv install -v 2.7.6`) will allow you to build with specified compiler.\n",
    "head_branch": "osx-clang-gcc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge f5fded3b9dcf21ecff5be328d70a101ee3d2f4dc into b55830fb01a002ef8586371417b5e99070892bef"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc63744ee515ce6a4ae4d",
    "number": 142,
    "body": "- Help output is now closer to (equivalent with…?) modern conventions in other CLI programs\n- `Summary…` and `Usage…` spacing adjusted for consistency (and slightly easier reading)\n- Whenever a program prints a path, file, or URL, the path/file/URL is printed on a separate line (for easier reading and copy-pasting)\n- Minor edits to phrasing\n- Minor edits to source spacing and linebreaks (slight improvements for readability)\n",
    "head_branch": "command-help",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc63844ee515ce6a4ae4e",
    "number": 141,
    "body": "I think there’s value in:\n- A reference that stands alone, rather than being buried inside another document\n- A readme that doesn’t become “too long” (admittedly imprecise, and subjective…but still…!)\n",
    "head_branch": "docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge addec6339f9aa5900007e66416bd5c3d2a082faf into 2613e844470279ad8bc2ce3d09351df398f05292"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc63944ee515ce6a4ae4f",
    "number": 140,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d1f78c271624f5bff46e16a9e67413a1454417dc into cf89abaacff804b7b2047e3ee2ff6df5651b1ce5"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc63a44ee515ce6a4ae50",
    "number": 136,
    "body": "This references [issue 135](https://github.com/yyuu/pyenv/issues/135).\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 545052d5ca7e771a65c285f0c2bda1f629c9a866 into 0d51899e9b74e6c81ae1b41e58493efd9e13065c"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc63b44ee515ce6a4ae51",
    "number": 133,
    "body": "Support for new CPython 3.4.0(has been released 17 March).\n",
    "head_branch": "3.4.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f536dca41f577810474b1e0156e8a836d68db41a into 0851436caa386f065de34b4a7caf3f5eee3d09c2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc63b44ee515ce6a4ae52",
    "number": 131,
    "body": "This updates tkinter & readline versions as patch files so python makes without complaining.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc63c44ee515ce6a4ae53",
    "number": 129,
    "body": "This greatly improves the performance of `pyenv virtualenvwrapper_lazy`,\nwhich happens to call pyenv-which a lot.\n\nFor profiling I've initially used:\n\n```\n% zmodload zsh/zprof\n% eval \"$(pyenv init -)\"\n% pyenv virtualenvwrapper_lazy\n\nBefore:\n% zprof|grep -E '(pyenv|virtualenv)'\n 1)    1         754,07   754,07   58,95%    751,50   751,50   58,75%  pyenv\n21)    1           2,57     2,57    0,20%      2,57     2,57    0,20%  virtualenvwrapper_setup_lazy_loader\n 1)    1         754,07   754,07   58,95%    751,50   751,50   58,75%  pyenv\n       1/1         2,57     2,57    0,20%      2,57     2,57             virtualenvwrapper_setup_lazy_loader [21]\n       1/1         2,57     2,57    0,20%      2,57     2,57             pyenv [1]\n21)    1           2,57     2,57    0,20%      2,57     2,57    0,20%  virtualenvwrapper_setup_lazy_loader\n\nAfter:\n% zprof|grep -E '(pyenv|virtualenv)'\n 1)    1         383,30   383,30   27,97%    380,88   380,88   27,79%  pyenv\n31)    1           2,42     2,42    0,18%      2,42     2,42    0,18%  virtualenvwrapper_setup_lazy_loader\n 1)    1         383,30   383,30   27,97%    380,88   380,88   27,79%  pyenv\n       1/1         2,42     2,42    0,18%      2,42     2,42             virtualenvwrapper_setup_lazy_loader [31]\n       1/1         2,42     2,42    0,18%      2,42     2,42             pyenv [1]\n31)    1           2,42     2,42    0,18%      2,42     2,42    0,18%  virtualenvwrapper_setup_lazy_loader\n```\n\nFixes https://github.com/yyuu/pyenv-virtualenvwrapper/issues/13\n\nTests all pass, and got slightly quicker.\n\nBefore:\n142 tests, 0 failures\nbats/bin/bats test/*.bats  11,59s user 17,35s system 110% cpu 26,192 total\n\nAfter:\n142 tests, 0 failures\nbats/bin/bats test/*.bats  10,49s user 16,23s system 110% cpu 24,251 total\n",
    "head_branch": "optimize-pyenv-which",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc63d44ee515ce6a4ae54",
    "number": 125,
    "body": "This gives users an idea of which versions of python are available. Other binary version managers ([nvm](https://github.com/creationix/nvm) with `nvm ls-remote`, [rvm](https://rvm.io/rubies/list) with `rvm list`, [pythonbrew](https://github.com/utahta/pythonbrew) with `pythonbrew list -k`) immediately tell users how to list available versions as well.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7ed908bad15c9593742e62365032402c1ed6978c into dcc7185ae1e07014527ae45b4afae255b683d191"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc63e44ee515ce6a4ae55",
    "number": 123,
    "body": "Support for new Python 3.3.5 release candidate 2 (has been released 2 March).\n",
    "head_branch": "1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge cc423566a8dfffa5674c71184342d8f566922ab3 into e488b31597ac0624eda3de9360e61be2c1bf3075"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc63f44ee515ce6a4ae56",
    "number": 121,
    "body": "Support for new Python 3.3.5 release candidate 1 and 3.4.0 release candidate 2(have been released 23 February).\n",
    "head_branch": "01",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 8164af44b497797d7904e201dbebdcddb68c196c into a1ffc93372087da0ffd2afe1486d540d20c51e08"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc63f44ee515ce6a4ae57",
    "number": 119,
    "body": "`pyenv install-dir` will calculate the standard path for a new install of Python if executed in an unpacked Python source tarball. It can be used to easily set the prefix in the configure script, like so:\n\n```\n./configure --prefix=$(pyenv install-dir)\n```\n",
    "head_branch": "pyenv-install",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc64044ee515ce6a4ae58",
    "number": 118,
    "body": "Change readme for issue #117 created by @ebertti\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 6ee219b9c74346377e1f7d02ab78e946000c75fb into 5f23e3d7b2524b36b92320adc7748d0c83c632ba"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc64144ee515ce6a4ae59",
    "number": 116,
    "body": "",
    "head_branch": "add-pyenv-update-command",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc64244ee515ce6a4ae5a",
    "number": 114,
    "body": "Support for new Python 3.4.0 release candidate 1 (has been released 10 February).\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc64344ee515ce6a4ae5b",
    "number": 113,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d640941976a53cb612fee372789fb34570e8f41f into e58ac666c479db74122e2ccd9469dabdf3d9a085"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc64344ee515ce6a4ae5c",
    "number": 101,
    "body": "I have set `GREP_OPTIONS=\"-E\"` in my `~/.bashrc` as I normally want grep to work regular expression enabled. \nBut in this case, `pyenv install -l` command does not work as followings:\n\n```\n$ pyenv install -l\nAvailable versions:\ngrep: conflicting matchers specified\n$\n```\n\nThis is because grep option -F(Fixed strings matcher) is used in the script and this matcher option conflicts with the other option like -E(Extended regexp matcher), -G(Basic regexp matcher), -P(Perl regexp matcher).\n\nSo I prefixed `env --unset=GREP_OPTIONS` to the `grep` in the script, and this worked for me.\n\n```\n$ pyenv install -l\nAvailable versions:\n  2.4\n  2.4.1\n  2.4.2\n  ...\n```\n\nIt is much appreciated if you would take a look at this pull request.\n\nThanks.\n",
    "head_branch": "feature/fix-grep-option",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc64444ee515ce6a4ae5d",
    "number": 100,
    "body": "This change was done specifically to support virtualenvwrapper which\nprovides scripts that are supposed to be sourced into your current shell.\nThe BASH_SOURCE variable can be used determine the current file that is\nbeing included.  BASH_LINENO can be used to determine if the current\nexecution is an invocations or sourcing of a file.  BASH_LINENO will\nbe 0 in a script invocation because there are no functions currently\non the stack.  Finally, if your a currently sourcing a file, do not\ndo \"set -e\" as that will cause the interactive shell to close on any\nerror.\n",
    "head_branch": "bash-include",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc64544ee515ce6a4ae5e",
    "number": 88,
    "body": "We have '/bin' at the end of a result of pyenv-prefix with 'system', such as '/usr/local/bin'.\nIt is inconsistent with a return value of the command with a specific version, such as '.../.pyenv/versions/3.3.x'.\n",
    "head_branch": "fix-prefix-system",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc64644ee515ce6a4ae5f",
    "number": 83,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 80b8508dbce121e1e21cf841f7567526d1cf3d78 into 02e073a503eaf8935408fa7b71cb464fb16a7235"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc64744ee515ce6a4ae60",
    "number": 80,
    "body": "",
    "head_branch": "add-pyparallel",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc64844ee515ce6a4ae61",
    "number": 58,
    "body": "Adds -z to tar command to make OpenBSD's tar command not mistake the tarball as a cpio archive\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc64844ee515ce6a4ae62",
    "number": 57,
    "body": "Just adding a note for ubuntu users to change the ~/.bashrc file, not ~/.bash_profile\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5c41dc3901519200f18cdc33fc1c5dae84d725c6 into 74a3c55623e1885da1e69f81844a619e052b9410"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc64944ee515ce6a4ae63",
    "number": 54,
    "body": "Updated README.md contents so that installation instructions cover\nnot only the common case for installation directory, i.e. `~/.pyenv`\nbut any other at the user's choice.\n",
    "head_branch": "alternative_install",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 3bf50856cebf02c3f8fd627865261c49cba004bd into c3e55aa5aee52dc8585abf198980b0381755342f"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc64a44ee515ce6a4ae64",
    "number": 53,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 704548336a650db738cb165770346ba4cb414c25 into 0ea5e12b4a0b4da1009b85546d3d1eb04975d10d"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc64b44ee515ce6a4ae65",
    "number": 52,
    "body": "Rationale: argcomplete library and possibily other tools that have\nto follow the \"wrapper chain\" need to identify pyenv shims to be able\nto read the target executable. setuptools do the same with its stubs.\n\nsee https://github.com/kislyuk/argcomplete/issues/58#issuecomment-23205305\n",
    "head_branch": "argcomplete",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc64c44ee515ce6a4ae66",
    "number": 49,
    "body": "[fish shell](http://ridiculousfish.com/shell/) support.\n",
    "head_branch": "fish-support",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge d2f210d70d214880b2573f8f0de7560a709448e6 into 403f4eb7a710062f6f7968d3ba93e02193e8a89e"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc64c44ee515ce6a4ae67",
    "number": 45,
    "body": "Hi, this pull request fixes formatting in the \"Homebrew on Mac OS X\" section of README. :smile: \n",
    "head_branch": "fix-formatting-in-readme",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge cc6c45d7fbfd9ef741c5841ef0e6f477db4216c9 into ce66352f6dcd27da2cf98926688e56bae04f46b5"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc64d44ee515ce6a4ae68",
    "number": 44,
    "body": "Hi yyuu! I added theses fixes to compile python 2.4.6 into ubuntu 13.04 box, could you please review / add the fixes?\n",
    "head_branch": "fix_python2.4.6_ubuntu13.04",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc64e44ee515ce6a4ae69",
    "number": 37,
    "body": "Make possible to install python 2.4.2 using pyenv.\n",
    "head_branch": "build_python_2_4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ae86a253e24cf657245b13294685b46d48d27096 into 0c38147fcbefb4d1fd17ed651b297e7ac601d0a2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc64f44ee515ce6a4ae6a",
    "number": 17,
    "body": "Adds new versions(2.7.5, 3.2.5, 3.3.2).\n",
    "head_branch": "support_2.7.5_3.2.5_3.3.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 907ddb614d11cf906da32cb585eaec64beb5371a into dd0e3feae30ae616c368068d70b72bac7b7e75b4"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc65044ee515ce6a4ae6b",
    "number": 12,
    "body": "Python 2.7.4, 3.2.4 and 3.3.1 were released. Please support these versions.\n",
    "head_branch": "support_2.7.4_3.2.4_3.3.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge bb2d0581674de7a630101e9a2aedef1a04f7ee4b into 6e58c43d8a5f139234cc48746b1b748feb8a7644"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc65044ee515ce6a4ae6c",
    "number": 11,
    "body": "While you're writing C-extension, it is very helpful to use debug version Python. This patch enables you to build a debug version. The instruction to build a debug version is here: [Python Developer’s Guide](http://docs.python.org/devguide/). Just add an option `--with-pydebug`.\n\nTo avoid a conflict with existing non-debug version Python, it adds a suffix \"-debug\" to the install location. You can use Python \"2.7.3\" and \"2.7.3-debug\" simultaneously.\n\nCould you review and merge this change?\n",
    "head_branch": "build-pydebug",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge dce4eb636a20a5e28f8936f58ca7c0e69a0b0bb8 into aa831836e1df0447272b626bf3f577fb4186eb4f"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc65144ee515ce6a4ae6d",
    "number": 10,
    "body": "Add description to pass configure options against python-build.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 0eb15207074965e0af09a8e40a95c7b65d49c417 into 606346761f72911dc2a9395c6c4ba66a7c89c877"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc65244ee515ce6a4ae6e",
    "number": 1,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f3ae8fd9042132415c0a0b9cc1f9df3a1a5a2f1a into 4174749b2448e07bf2e613eaaf0026446e43f1b9"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  }
]