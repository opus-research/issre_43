[
  {
    "_id": "6623058d0ac82a74541b1ff4",
    "number": 3721,
    "body": "Wrote this to try and reproduce #3719 I wasnt able to reproduce the issue, but having a test for this is a good idea.",
    "head_branch": "test/ores",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623058e0ac82a74541b1ff5",
    "number": 3720,
    "body": "- Fix backwards compat for c:strings",
    "head_branch": "tag-postfixes",
    "is_a_fork": true,
    "comments": [
      "Holding onto this for a few days to see if any other issues come up that can be wrapped into this PR"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623058f0ac82a74541b1ff6",
    "number": 3718,
    "body": "Resolves #3712",
    "head_branch": "item-api/tooltip-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix ItemTooltipCallback crash (#3718)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305900ac82a74541b1ff7",
    "number": 3717,
    "body": "It seems I accidentally had the fluid c tags point to themselves as legacy when they are not. \r\n![image](https://github.com/FabricMC/fabric/assets/40846040/c989b9a2-baed-4f41-87fa-ede6c01dfeb4)\r\n\r\nThis is a bug from: https://github.com/FabricMC/fabric/pull/3310\r\n\r\nThis fix PR will make warning stop showing erroneously.",
    "head_branch": "Legacy-Tag-Dectector",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove false legacy tag warning (#3717)\n\n* Remove false legacy tag warning\r\n\r\n* Unused import"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305910ac82a74541b1ff8",
    "number": 3716,
    "body": "This is the spin-off work from the Unify Tag PR: https://github.com/FabricMC/fabric/pull/3310\r\n\r\nWe decided the translations would be its own PR which is this.\r\n\r\nThe goal is instead of having every mod provide their own translations of the default c tags from the mod loader, the modloader would provide those translations instead. Recipe Viewers like EMI uses translations of item tags to present tag contents to users in a more clean way. The minecraft namespaced tags are not translated. That would be a future discussion and PR by someone else if they wish to have modloaders translate Minecraft's own tags. For now, this PR lays the groundwork for translating tags in general.\r\n\r\n`TagKey` gets an interface injection so that it now has the `getTagTranslationKey` method. This will help modders with getting the translation for an item and what the key format is. Helps to standardize this.\r\n\r\nThere is also an optional untranslated item tag logging that devs can opt into using. By default, this logging is off. If you add the `-Dfabric-tag-conventions-v2.missingTagTranslationWarning=DEV_SHORT` vm argument, you will see this for missing translations for item tags: \r\n![image](https://github.com/FabricMC/fabric/assets/40846040/978b7558-a5d6-4fec-b0a5-673c87e6f165)\r\n\r\nIf set to `-Dfabric-tag-conventions-v2.missingTagTranslationWarning=DEV_VERBOSE`, it will print each tag with missing tarnslations:\r\n![image](https://github.com/FabricMC/fabric/assets/40846040/b4f10b50-6347-4e06-9f32-0b26cd7d745d)\r\n\r\nIn fact, I almost forgot to translate fruits tag in this PR and the above logging help caught that so modders doing the translating will enjoy this helpful logging. Only thing is they just need to know about it ahead of time... Spread the info by word of mouth I guess? \r\n\r\nTranslations to other languages would be something that would have to be done manually like Crowdin or whatever if desired. The English translations being datagenned will be bare minimum so that new tags are not forgotten about for translating.",
    "head_branch": "Tag-Translations",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305910ac82a74541b1ff9",
    "number": 3713,
    "body": "Just so you know, Im not the greatest mixin guy.\r\n\r\nFixes #3636",
    "head_branch": "entity-lifespan-api",
    "is_a_fork": true,
    "comments": [
      "Game tests still pending!",
      "Someone else can do it."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305920ac82a74541b1ffa",
    "number": 3710,
    "body": null,
    "head_branch": "misc/add-more-gametests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305930ac82a74541b1ffb",
    "number": 3707,
    "body": "FabricDimensionInternals.changeDimension sets the pitch from teleported instead of target, making the pitch from the TeleportTarget passed into the method do nothing.",
    "head_branch": "1.20.5",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix changeDimensions not using TeleportTarget.pitch (#3707)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305950ac82a74541b1ffc",
    "number": 3706,
    "body": "**Breaking Changes**\r\n- Particle API: `FabricParticleTypes` no longer takes a `Factory` (which was removed). Also, one method erroneously took an unused param, `codecGetter`, which has been removed. (This was introduced in #3537.)\r\n- Content Registries: Added an injected interface `FabricBrewingRecipeRegistryBuilder`, adding back support for `Ingredient`s and additionally allowing users to specify feature flags. (The event callback is now an inner-interface `BuildCallback`.\r\n\r\n**Other Changes**\r\n- Yarn and installer bumped.\r\n- Some general refactors.\r\n- `VariantCodecs` now validates the components like the vanilla `ItemStack`.\r\n- Javadoc fixes.\r\n\r\n**Opinions Wanted**\r\n- Should the builder have methods taking feature flags, or should we pass the feature set along with the builder in the event? In vanilla, it just checks whether the items are valid; we can't do that easily with `Ingredient`s, so I added the feature flag vararg - but maybe passing the features might be better.\r\n- Should `VariantCodecs` validate components?\r\n- How should we handle `SUCCESS_NO_ITEM_USED` action result? This is accepted and swings hands in vanilla, just like `SUCCESS`. Its only use in vanilla is sitting a pet wolf. ",
    "head_branch": "port/1.20.5-pre1",
    "is_a_fork": true,
    "comments": [
      "> Should the builder have methods taking feature flags\r\n\r\nI think you can just interface inject a getting for the feature set\r\n\r\n> Should VariantCodecs validate components?\r\n\r\nYes, especially if vanilla is doing it for item stacks now\r\n\r\n> How should we handle SUCCESS_NO_ITEM_USED action result?\r\n\r\nIm not tottaly sure where we would need to handle it, Ideally id expect one of the methods in the enum to be used to better handle new entries?",
      "As for the SUCCESS thing, because vanilla does not seem to differentiate between the two (yet) I don't know the proper response. While they are equivalent method-wise, they are also compared directly (though not for SUCCESS from what I can find)."
    ],
    "commit_messages": [
      "Finish port to 1.20.5-pre1 (#3706)\n\n* Buildscript changes\r\n\r\n* Particle API: port and some refactor\r\n\r\n* Add support for Ingredient in FabricBrewingRecipeRegistry\r\n\r\n* Add private ctor to ClientPlayerBlockBreakEvents\r\n\r\nNot related to port, but something I've found during the process.\r\nAlso adds final to CommonLifecycleEvents.\r\n\r\n* Fix Sound API testmod\r\n\r\n* Fix broken javadocs\r\n\r\n* Codec-related changes\r\n\r\n* Document behavior of SUCCESS_NO_ITEM_USED in UseEntityCallback\r\n\r\n* Add getEnabledFeatures\r\n\r\n* checkstyle"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305960ac82a74541b1ffd",
    "number": 3702,
    "body": "Supercedes #3589, rebased to target 1.20.5.\r\n\r\n> 1.20.2 added pack overlays (explained in the [23w31a changelog](https://www.minecraft.net/en-us/article/minecraft-snapshot-23w31a)), which conditionally overlay resource/data pack files from sub-directories onto the base pack. This PR extends this system to allow for overlays based on resource conditions, which allow overlays to be applied based on conditions other than just the current pack format.\r\n\r\nThe main difference between the 1.20.4 and 1.20.5 versions of the PR is that `OverlayConditionsMetadata` has been completely refactored for the new codec-based resource conditions, which means they are parsed with a codec now. The class has also been moved to api for datagen purposes.",
    "head_branch": "overlay-conditions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305960ac82a74541b1ffe",
    "number": 3700,
    "body": "## Removed\r\n- fabric-events-lifecycle-v0, previously deprecated almost 4 years ago\r\n- FabricBrewingRecipeRegistry\r\n\r\n## Temporarily disabled\r\n- fabric-particles-v1\r\n\r\n## Added\r\n- BrewingRecipeRegistryBuilderCallback, to be expanded shortly.\r\n\r\n## Broken\r\n- ItemToolTipCallback, now passes the `Item.TooltipContext` and `TooltipType`",
    "head_branch": "port/1.20.5-pre1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "1.20.5-pre1 (#3700)\n\n* 1.20.5-pre1\r\n\r\n* BrewingRecipeRegistryBuilderCallback\r\n\r\n* Remove debug line\r\n\r\n* Fix build\r\n\r\n* Bump version"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305970ac82a74541b1fff",
    "number": 3696,
    "body": "The Point of this PR is to have an After Variant for StartTracking as the current implementation calls the `StartTracking` event before any packets for the Entity's creation making such an event pointless if you need to sync things like data attachment to the Client as such will require some delayed method of handling any packet sent until the entity exists. Evidence of such an event being useful can be found within [Cardinal Components](https://github.com/Ladysnake/Cardinal-Components-API/blob/1a9bf0a0f67d0fd5f7a9195a0c927c2e5eae3443/cardinal-components-entity/src/main/java/dev/onyxstudios/cca/mixin/entity/common/MixinEntityTrackerEntry.java#L43) and [NeoForge](https://github.com/neoforged/NeoForge/blob/9f0d3d489e3746bfe5664ca989f309c261b90c89/patches/net/minecraft/server/level/ServerEntity.java.patch#L29). \r\n\r\n\r\nAdditionally, this PR attempts to keep binary compatibility with previous API versions with such old variants extending the renaming of the old event. ",
    "head_branch": "1.20.4-EntityTrackingEventAlterations",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305980ac82a74541b2000",
    "number": 3695,
    "body": "I have run into situations where with ores for example I want to add them to more than one biomeTag biomes and have to make a separate entry, this solves that by allowing developers to pass in more than one.",
    "head_branch": "1.20.4",
    "is_a_fork": true,
    "comments": [
      "Does creating a tag that references other tags not work for your use case? In most cases, `element.isIn(ElementTags.COMBINED)` is preferred over `element.isIn(ElementTags.FIRST) || element.isIn(ElementTags.SECOND)`.",
      "You could do that but I feel like it's unnecessary and you'd need to make tags for every combo you do",
      "Hmm, can't we just use `&&` or `Predicate.and`?",
      "> Hmm, can't we just use `&&` or `Predicate.and`?\r\n\r\nWe can, but we have convenient helper methods and the author suggests expanding it",
      "I'm unsure how useful this boilerplate code is, as pointed about above this is really easy to do in your own mod with `Predicate.and`."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305990ac82a74541b2001",
    "number": 3694,
    "body": "updates a few outdated paths so they link to the correct file again",
    "head_branch": "transfer-api-fix-readme",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix links in transfer-api README.md (#3694)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623059a0ac82a74541b2002",
    "number": 3693,
    "body": "This backports #3517 to 1.20.1.\r\n\r\nFixes #3680.",
    "head_branch": "jukebox-fix-backport",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix jukebox state getting changed mid-transaction (#3693)\n\n* fix jukebox state getting changed mid-transaction (#3517)\r\n\r\n* fix mixin\r\n\r\n---------\r\n\r\nCo-authored-by: deirn <deirn@bai.lol>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623059a0ac82a74541b2003",
    "number": 3690,
    "body": "Supersedes #3670\r\n\r\nIncludes several breaking changes, and a fix to support loot stuff in 1.20.5 (support was postponed during a port)",
    "head_branch": "resource-conditions/codecified",
    "is_a_fork": true,
    "comments": [
      "Question: does this warrant making it v2?",
      "> Question: does this warrant making it v2?\r\n\r\nV2's are only needed when a none breaking v1 module would be kept around. As this is a hard breaking change no I dont think its needed."
    ],
    "commit_messages": [
      "[1.20.5] Codec-based Resource Conditions and refactors (#3690)\n\n* Initial move to codec-based resource conditions\r\n\r\n* Move default condition types to DefaultResourceConditionTypes\r\n\r\n* Move built-in condition types to impl\r\n\r\n* Run spotlessApply\r\n\r\n* Move default condition registration to entrypoint in imp\r\n\r\n* Formatting fixes\r\n\r\n* Add back package-info.java\r\n\r\n* Make it compatible with new DFU\r\n\r\n* checkstyle\r\n\r\n* Refactor FeaturesEnabledResourceCondition\r\n\r\n* Pass RegistryWrapper and reduce reliance on statics\r\n\r\n* Some more improvements\r\n\r\n* Add back some tests\r\n\r\n* Add more tests\r\n\r\n* Add back tags_populated support, clean up code\r\n\r\n* Some more improvements\r\n\r\n* add javadocs (wip)\r\n\r\n* Fix unfixed merge conflict\r\n\r\n* Javadocs\r\n\r\n* Fix null condition in addConditions\r\n\r\n* Allow empty arrays in certain codecs\r\n\r\n* Move addConditions to datagen impl\r\n\r\n* Address reviews\r\n\r\n* add debug log\r\n\r\n* Store features in normal static field\r\n\r\n* Fix TagsPopulatedResourceCondition#getType\r\n\r\n---------\r\n\r\nCo-authored-by: Apollo <102649729+Apollounknowndev@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623059b0ac82a74541b2004",
    "number": 3685,
    "body": "Currently, data generation is very new and restricted. In this case, block model generation is very limited - being incredibly inaccessible and anything even slightly more complex than a `cube_all` model requires custom classes to be built for generating them. A FabricBlockModelSupplier would fix this issue, where you could easily simply provide the parent type and a (see below) new class - FabricTextureMap with the texture name and location, which can then be turned into a resulting JSON. As an example, creating a `cube_column` model can be easily made, like so - the SimpleBlockStateSupplier allows for no-variant based blockstates to be generated easily, because this isn't a built-in feature for fabric at the moment:\r\n\r\n```java\r\npublic static class ModelGenerator extends FabricModelProvider\r\n{\r\n    private static final Block CHEESE_LOG = // ... \r\n    public ModelGenerator(FabricDataOutput output) { super(output); }\r\n\r\n    @Override\r\n    public void generateBlockStateModels(BlockStateModelGenerator blockStateModelGenerator)\r\n    {\r\n        // We can create the block's model & simple state like so:\r\n        blockStateModelGenerator.blockStateCollector.accept(new SimpleBlockStateSupplier(CHEESE_LOG, new Identifier(\"modid\", \"cheese_log\")));\r\n        blockStateModelGenerator.modelCollector.accept(new Identifier(\"modid\", \"cheese_log\"),\r\n            () -> new FabricBlockModelSupplier(\"cube_column\") // The parent type is the parameter.\r\n                .addTextureData(new FabricTextureMap(\"end\", \"side\")\r\n                    .set(new Identifier(\"modid\", \"block/cheese_log_end\"), new Identifier(\"modid\", \"block/cheese_log_side\")))\r\n                .get());\r\n    }\r\n\r\n    @Override\r\n    public void generateItemModels(ItemModelGenerator itemModelGenerator)\r\n    {\r\n        // ...\r\n    }\r\n}\r\n```\r\nWhich would then be outputted as this, and if done correctly should also generate a basic block parent item model, as well - however some methods won't produce Item Models. Unsure as to the reason of this, looking into it.\r\n```json\r\n{\r\n  \"parent\": \"minecraft:block/cube_column\",\r\n  \"textures\": {\r\n    \"end\": \"modid:block/cheese_log_end\",\r\n    \"side\": \"modid:block/cheese_log_side\"\r\n  }\r\n}\r\n```\r\n```json\r\n{\r\n  \"parent\": \"modid:block/cheese_log\"\r\n}\r\n```\r\nThe creation of a FabricTextureMap not only could potentially help in the long run with other future classes requiring something similar but also, as a whole, it's much easier to use than a raw HashMap - it allows for the code to be more readable than initially (especially without double bracket indentation) and also reduces the line count and should also help reduce external variables being used when people wouldn't use double bracket indentation for the HashMap.\r\n\r\nAs a whole, I think these additions could greatly help the data generation part of fabric, although more specifically attributed towards Block Models - although the FabricBlockModelSupplier could work perfectly fine with Item Models, as well - for example, this is a snippet of how I had recently used it as a custom class for one of my mods more recently:\r\n```java\r\n// Model Generator code...\r\nprotected void simpleItem(ItemModelGenerator generator, String ID)\r\n{\r\n\tgenerator.writer.accept(new Identifier(\"modid\", \"item/\" + ID),\r\n\t\t\t() -> new FabricBlockModelSupplier(\"modid\", ID)\r\n\t\t\t\t\t.get());\r\n}\r\n\r\n@Override\r\npublic void generateItemModels(ItemModelGenerator itemModelGenerator) {\r\n\tsimpleItem(itemModelGenerator, \"myblockitem\")\r\n}\r\n```\r\nThis generates a simple Item Model JSON like so:\r\n```json\r\n{\r\n  \"parent\": \"modid:block/myblockitem\"\r\n}\r\n```\r\nThis is because of the FabricBlockModelSupplier's support for custom model types and it's immediate initialization of the \"parent\" JSON.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "LGTM!",
      "@hellvet3 Hmm, I'm sure vanilla has them?",
      "Vanilla has some capabilities from what I know - but as a whole it's lacking a lot of features. What I showed was a class that could actually easily generate block model jsons, because there isn't many if not any built in classes for that already - but from what I can see anything that does actually generate Block Models aren't very accessible, customisable, etc. \r\n\r\nAs for the `SimpleBlockStateSupplier` it's mainly to generate BlockState files like this which (as far as I know) are just not creatable on it's own, for some reason:\r\n```java\r\n{\r\n    \"variants\": {\r\n        \"\": {\r\n            \"model\": \"modid:block/myblockmodel\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nWhilst I'd understand `SimpleBlockStateSupplier` not being merged, I do think a `FabricBlockModelSupplier` could seriously help because there isn't really a class vanilla or from the Fabric API that acts like this - the Block Model generation has almost if not nothing for it."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623059c0ac82a74541b2005",
    "number": 3678,
    "body": "Also bumps yarn.",
    "head_branch": "port/24w13a",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Improve data attachment port (#3678)\n\n* Bump yarn\r\n\r\n* Apply yarn update\r\n\r\n* Fix porting of Data Attachment block entity support\r\n\r\n* Fix FrameBlockEntity testmod"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623059d0ac82a74541b2006",
    "number": 3677,
    "body": "Depends on https://github.com/FabricMC/fabric/pull/3666 due to generic interface injection",
    "head_branch": "entity-builder-iface-injection",
    "is_a_fork": true,
    "comments": [
      "Can this be done to FabricBlockEntityTypeBuilder too? Since there's already BlockEntityType.Builder.",
      "> Can this be done to FabricBlockEntityTypeBuilder too? Since there's already BlockEntityType.Builder.\r\n\r\nGood idea, I'll take a look. 👍",
      "> Can this be done to FabricBlockEntityTypeBuilder too? Since there's already BlockEntityType.Builder.\r\n\r\nJust had a look as as far as I can tell FabricBlockEntityTypeBuilder is useless? The only thing we add in FabricBlockEntityTypeBuilder is methods to add the supported blocks, but this can be set when creating the vanilla builder using `BlockEntityType.Builder.create` I think ill just deprecate it.",
      "Deprecated FabricEntityTypeBuilder and interface injected a `build()` (without the datafix type) overload."
    ],
    "commit_messages": [
      "Deprecate FabricEntityTypeBuilder & FabricBlockEntityTypeBuilder in favour of the vanilla classes (#3677)\n\n* Replace FabricEntityTypeBuilder with EntityTypeBuilder + iface injection\r\n\r\n* Finish and test entity type builder\r\n\r\n* Deprecate FabricBlockEntityTypeBuilder\r\n\r\n* Review fix\r\n\r\n* Fixes based on review\r\n\r\n* Some fixes\r\n\r\n* Checkstyle"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623059e0ac82a74541b2007",
    "number": 3676,
    "body": "Big thanks to @DrexHD for most of this\r\n\r\nAlso fixes https://github.com/FabricMC/fabric/issues/3669",
    "head_branch": "port/24w13a",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "24w13a (#3676)\n\nFixes https://github.com/FabricMC/fabric/issues/3669\r\n\r\nCo-authored-by: Drex <nicknamedrex@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623059f0ac82a74541b2008",
    "number": 3671,
    "body": "- Added preliminary providers, which are called before all other providers.\r\n- You can register multiple providers for one item/block/entity type now.\r\n- Fallback providers list is replaced by `Event`, where you can add phase ordering.\r\n- All the changes are backward compatible. Some methods are marked with `@Deprecated`.",
    "head_branch": "1.20.1-lookupEnhance",
    "is_a_fork": true,
    "comments": [
      "I don't like this PR, it seems like a bunch of random opinionated changes, and many go against my original design. I would like each change to be submitted separately, and with a motivating use case for each."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623059f0ac82a74541b2009",
    "number": 3670,
    "body": "_(Supercedes #3662, rebased to 1.20.5.)_\r\n\r\nThis PR moves resource conditions to use codecs.\r\n\r\nThe `ConditionJsonProvider` interface has been removed and been replaced by `ResourceCondition`. `ResourceCondition` has a `test` method for determining whether the condition should pass and `getType`, which returns a `ResourceConditionType`. The `ResourceCondition` class itself also holds two codecs: `CODEC` (the base codec for a `ResourceCondition` instance) and `CONDITIONS_CODEC` (the codec used for deserializing resource condition objects in json files).\r\n\r\nA `ResourceConditionType` has the Identifier for the resource condition (used in codec parsing) and has the Codec for the resource condition. They are used to register resource conditions with the `ResourceConditions.register` method.\r\n\r\n**Changes to conditions themselves**\r\n- `fabric:true` has been added, which will always pass.\r\n- `fabric:[block/item/fluid]_tags_populated` have been removed.",
    "head_branch": "codecified-resource-conditions-1.20.5",
    "is_a_fork": true,
    "comments": [
      "That would be alright, yes"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305a00ac82a74541b200a",
    "number": 3668,
    "body": "This PR fixes an issue where the client gets kicked from the server due to not being able to decode the OpenScreenPayload. This is caused by the screen title never being sent.\r\n\r\nThere's also another issue that relates to this one. It's caused by the random mod loading order which I'm not sure of how to fix. Therefore I will open up a new issue soon.",
    "head_branch": "1.20.5",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix OpenScreenPayload title being decoded but not encoded (#3668)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305a10ac82a74541b200b",
    "number": 3666,
    "body": "Already used in 1.20.5",
    "head_branch": "loom-1-6",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update to Loom 1.6 (#3666)\n\n* Update to Loom 1.6\r\n\r\n* Fix gradlew.bat line endings\r\n\r\n* Fix build\r\n\r\n* Another fix\r\n\r\n* Revert change"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305a20ac82a74541b200c",
    "number": 3664,
    "body": "- **BREAKING**: Mining Level API was removed due to changes in this snapshot making it obsolete. An event to modify item components will be added later, which should replace it.\r\n- **BREAKING**: Changed parameters passed to Loot API events. `ResourceMaanger` was omitted, although it is still possible to pass one (let me know if this is worth a ThreadLocal). `LootManager` is gone, and in the `LOAD_ALL` event it was replaced with `Registry<LootTable>`. ID is replaced with registry key. In addition, because mutating registry is pain, the loot tables are modified before addition; this means that per-table events don't get the table registry anymore.\r\n- `VillagerInteractionRegistries#registerGiftLootTable` now take `RegistryKey` of the loot table. The previous method is now deprecated.\r\n- Map decoration type registry is now synced.",
    "head_branch": "port/24w12a",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fully port to 24w12a (#3664)\n\n* Bump yarn\r\n\r\n* Apply yarn update\r\n\r\n* Sync map decorations type registry\r\n\r\n* Remove Mining Level API\r\n\r\n* Port loot API\r\n\r\n* whoops\r\n\r\n* Rename LootManagerMixin\r\n\r\n* Fix javadoc\r\n\r\n* Fix registerGiftLootTable\r\n\r\n* RegistryKey is traditionally compared using identity\r\n\r\n* Fix wrong loot source being used"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305a30ac82a74541b200d",
    "number": 3662,
    "body": "This PR moves resource conditions to use codecs.\r\n\r\nThe `ConditionJsonProvider` interface has been removed and been replaced by `ResourceCondition`. `ResourceCondition` has a `test` method for determining whether the condition should pass and `getType`, which returns a `ResourceConditionType`. The `ResourceCondition` class also holds two codecs: `CODEC` (the base codec for a `ResourceCondition` instance) and `CONDITIONS_CODEC` (the codec used for deserializing resource condition objects in json files).\r\n\r\nA `ResourceConditionType` has the Identifier for the resource condition (used in codec parsing) and has the Codec for the resource condition. They are used to register resource conditions with the `ResourceConditions.register` method.\r\n\r\n**Changes to conditions themselves**\r\n- `fabric:true` has been added, which will always pass.\r\n- `fabric:[block/item/fluid]_tags_populated` have been removed.",
    "head_branch": "codecified-resource-conditions",
    "is_a_fork": true,
    "comments": [
      "As this is very much a breaking change it must target 1.20.5",
      "Moved to #3670 to target 1.20.5"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305a40ac82a74541b200e",
    "number": 3658,
    "body": "# Removed\r\n- FabricItemStack.isSuitableFor (replaced with vanilla component)\r\n- FabricItemStack.getFoodComponent (replaced with vanilla component)\r\n- ResourceReloadListenerKeys.LOOT_TABLES\r\n- fabric-resource-conditions-api-v1 support for loot tables\r\n\r\n# Disabled modules\r\n- fabric-loot-api-v2\r\n- fabric-mining-level-api-v1",
    "head_branch": "port/24w12a",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "24w12a (#3658)\n\n# Removed\r\n- FabricItemStack.isSuitableFor (replaced with vanilla component)\r\n- FabricItemStack.getFoodComponent (replaced with vanilla component)\r\n- ResourceReloadListenerKeys.LOOT_TABLES\r\n- fabric-resource-conditions-api-v1 support for loot tables\r\n\r\n# Disabled modules\r\n- fabric-loot-api-v2\r\n- fabric-mining-level-api-v1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305a50ac82a74541b200f",
    "number": 3654,
    "body": "The first commit should be cherry picked to 1.20.4.\r\nFixes #3652 and https://discord.com/channels/507304429255393322/566276937035546624/1218950217412640879",
    "head_branch": "resource-loader/24w11a",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix bugs in resource loader (#3654)\n\n* Fix builtin resource pack having wrong ID\r\n\r\n* Turn off experiments warning"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305a50ac82a74541b2010",
    "number": 3653,
    "body": "Enable some runtime mixin validation, more work to be done to get it all working later.",
    "head_branch": "fix/HopperBlockEntityMixin",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix HopperBlockEntityMixin not applying. (#3653)\n\n* Fix HopperBlockEntityMixin not applying.\r\n\r\n* Fix direction"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305a60ac82a74541b2011",
    "number": 3649,
    "body": "This is a copy of #3644 with changes to use a single schema tree across mods to remove isolation issues across datafixers.\r\nAfter testing, I believe this is the key to the schema registration isolation issue because the base schema is now the last schema of the last registered data fixer, except for the first registration of course because the parent will just be the vanilla data fixer.\r\n\r\nPossible concerns:\r\n- Mods could break the data fixers of other mods by creating a custom schema that cancels the registration of block entities or entities. This would theoretically only affect the mods that have registered a data fixer before the problematic mod.\r\n- Mods could just *not* register their block entities and entities, limiting the effectiveness of data fixers.\r\n\r\nTodo:\r\n- [x] Write testmod implementation for the \"isolation\" issue\r\n- [x] Fix existing testmod's biome fixes for 1.19.3+",
    "head_branch": "api/datafixerupper-2",
    "is_a_fork": true,
    "comments": [
      "The only major concern I have left is that since the schemas are in a single parent line, any mod could cancel the registration of block entities and entities within the schemas by not calling `super.registerBlockEntities` or `super.registerEntities` in a schema.\r\nCorrect me if I am wrong, but wouldn’t this break all of the parent data fixers?",
      "Also, I’m wondering what the best way to get modders to register their block entities and entities to the schema would be. Perhaps an integration into the Fabric docs website wherever it talks about block entities and entities and an announcement somewhere.\r\nIn any case, if this is merged, I think modders should get notified in some way about this.",
      "Question.\r\nThe vanilla block entity and entity builders have a `String` id parameter that is used to find an instance of the id in the schemas.\r\nFabric basically ignores this with its builders and builds anyway, so I’m wondering if this should be implemented alongside this PR.\r\n\r\nThis is already included in this PR (though likely controversial since it logs an error), but I’m wondering what any of your thoughts are on this.",
      "I believe this still has the exact same schema/fixer ordering transitiveness issues it did way back last time I took a poke at it on discord? (Namely, issues with mutual transitiveness between different mods as fixers to fix transitive entries are only applied the one time) At any rate, no changes have been made that would resolve those issues.",
      "To elaborate: mod A and B add an item and a BE each, which they want to fix. Mod A adds both to a schema and adds a fixer for each afterwards. Mod B does the same. DFU _only_ runs fixers during the specific update step when that fixer exists -- so if mod A's stuff is before mod B's schemas are registered, then a mod A item in a mod B BE will not be properly fixed. A slew of similar cases pop up when you consider that \"transitive\" fixing is accomplished through the AddChoiceType stuff and can in fact be _removed_ if that format no longer exists -- so transitivity in the _same_ mod, with some other mod in the middle, can also cause issues."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305a70ac82a74541b2012",
    "number": 3648,
    "body": null,
    "head_branch": "fix-server-play-networking",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix server play networking (#3648)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305a80ac82a74541b2013",
    "number": 3645,
    "body": null,
    "head_branch": "rename/componentsMatch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Rename TransferVariant.componentsMatches -> componentsMatch (#3645)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305a90ac82a74541b2014",
    "number": 3644,
    "body": "This is a continuation of #2544 aimed to resolve some issues originally found.\r\n\r\nFrom the previous PR, I have made the following changes\r\n- Added an entrypoint (`fabric-data-fixer`) to register block entities and entities to the vanilla schema (applied in the 1.14 schemas, since that is around the time when Fabric started)\r\n- Added the ability for mods to register multiple data fixers by saving and loading different keys appended to the mod id (used when saving and loading the data version)\r\n- Updated the implementation to be compatible with the latest version of Minecraft\r\n- Converted the mixins to more compatible alternatives, patching everything with the exception of `WORLD_GEN_SETTINGS`, and also using the power of Mixin Extras\r\n\r\n\r\nI have also made changes to Fabric’s entity type and blockentity type builders to initialize the vanilla datafixer. These changes may not be wanted by all and can be reverted if needed.\r\n\r\nTodo:\r\n- [ ] Port the biome rename fix to post-1.19.3\r\n- [ ] Add tests for the schema registration entrypoint\r\n- [x] Remove `DataFixerEvents` in favor of the entrypoint\r\n- [x] Add choice fixers for newly registered (block) entities to custom \"vanilla\" schema 1903\r\n\r\nAny feedback on this would be greatly appreciated!",
    "head_branch": "api/datafixerupper",
    "is_a_fork": true,
    "comments": [
      "One of the fundamental issues in the DataFixerUpper (which resulted in me abandoning that PR) is that there are N parallel versions to maintain. I still haven't figured out how to fix this; Quilt's API, from what I've heard, is basically abandoned.\r\n\r\nLet's say a mod has a Metal Chest block. That block gets renamed to Iron Chest. That ID change is a mod-specific change tied to mod data version. The datafixer has to correct the block and item IDs in both vanilla and modded places. These are registered in a schema.\r\n\r\nBut wait! Each DataFixer is a combination of schemas and datafixes. If we add the Metal Chest datafix and schema to Metal Chest datafixer alone, then the datafix would not affect vanilla places. If we add it to both schemas, then the Metal Chest schema is no longer independent of the vanilla data version. That is practically same as doing a Mixin to various schema classes.\r\n\r\n@Treetrain1 Could you explain the answer to this paradox?",
      "In short: I cannot find a way to support all four at the same time without scrapping per-mod data version.\r\n\r\n- Datafixing rename of vanilla items in vanilla chest\r\n- Datafixing rename of vanilla items in modded chest\r\n- Datafixing rename of modded items in vanilla chest\r\n- Datafixing rename of modded items in modded chest",
      "An alternative solution that might cover the most common use cases could be a way to register aliases for registry entries.\r\n\r\nBasically if you have `mymod:old` and want to migrate people to `mymod:new`. You would register the new entry as normal, but then add an alias so anything that queries the registry for `mymod:old` will just be returned the new entry.",
      "> An alternative solution that might cover the most common use cases could be a way to register aliases for registry entries.\r\n> \r\n> Basically if you have `mymod:old` and want to migrate people to `mymod:new`. You would register the new entry as normal, but then add an alias so anything that queries the registry for `mymod:old` will just be returned the new entry.\r\n\r\nYes, that could definitely be used for the most common use cases. However, this doesn’t support transformations to the actual data, which may be more important than an id change, depending on how you look at it across Minecraft or mod versions.",
      "> In short: I cannot find a way to support all four at the same time without scrapping per-mod data version.\r\n> \r\n> * Datafixing rename of vanilla items in vanilla chest\r\n> * Datafixing rename of vanilla items in modded chest\r\n> * Datafixing rename of modded items in vanilla chest\r\n> * Datafixing rename of modded items in modded chest\r\n\r\nI believe the solution to that is to register the block entities and entities into an early version of the vanilla schema, which is covered by the `fabric-data-fixer` entrypoint.\r\n\r\nTonight, I’m going to test the difference in behavior between registered and non-registered block entities.",
      "The only downside to this is that modders will have to register all of their block entities and entities for them to work with datafixers, however this is exactly what mojang does every time they add a new entity or block entity.\r\n\r\nI don’t think modders should be *required* to register their content, but I think they should be greatly advised to.",
      "About the datafixing of Block Entities themselves brought up by apple.\r\n\r\nI entirely agree with modmuss.\r\nI'm quite certain this is exactly what the vanilla fixer does as the \"registry\" is just a map.\r\nLooking through old schemas before telling Tree about datafixing modded things and how to make it work, 99 registers (of course) everything without a namespace and improper capitalization.\r\nThe goal of the fixer is to load almost any old version's worlds and to keep it up with the new one, so it must maintain both the old and new id.\r\nI don't see why anyone would consider this an issue. It's how vanilla works and the proposed API will do it the same way, and I personally don't see a feasible alternative.",
      "After looking at how the schema registration works, I believe there needs to be a way to update the block entities and entities after the vanilla datafixer but before modded ones, without touching the vanilla data version\r\n\r\nI wonder if an intermediary datafixer can resolve this in some way. Perhaps adding a sub version to the latest vanilla schema could work?",
      "> After looking at how the schema registration works, I believe there needs to be a way to update the block entities and entities after the vanilla datafixer but before modded ones, without touching the vanilla data version\r\n> \r\n> I wonder if an intermediary datafixer can resolve this in some way. Perhaps adding a sub version to the latest vanilla schema could work?\r\n\r\nIf I remember correctly, sub-versions can only go up to 9. Be careful.",
      "Does anyone else here think that adding the rename fixes should be doing prior to the schema that the Block Entities/Entities are registered in, by the way?\r\nI think that would be a solution to the whole issue apple brought up, actually. Tree did some testing and had some trouble with just registering the old and new ids.",
      "Though now that I think of it, that wouldn't run, would it.\r\nIs there any way to denote a specific schema as having a separate data version from the rest? One pulling from Vanilla and the other from the mod? Or should there perhaps be an entire separate injected fixer inbetween two schemas solely for renaming to fulfill this purpose?\r\n@Treetrain1 perhaps that would work.",
      "Nevermind.\r\n@Treetrain1 Scratch the \"inbetween two schemas\" idea because that can't work.\r\nBut a datafixer for renaming that runs before the Vanilla fixer instead?",
      "I believe I ran into the same paradox I swore to destroy\r\nI believe apple is right. There isn’t a way to sync changes across all modded fixers with the current implementation.\r\n\r\nTo fix this, I wonder if it’s possible to bundle everything into a single datafixer and sort each mod’s schemas",
      "This definitely isn’t going to work. I’m going to try again with a different approach, combining fixers instead of isolating them to specific mods. Might require a whole new system, especially for supporting mod-specific data versions.",
      "In my view, any attempt to make datafixers work in modded environment properly would require forking DFU first. This is way outside our scope, though."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305aa0ac82a74541b2015",
    "number": 3643,
    "body": "Maybe fix stalling release builds if we are lucky?",
    "head_branch": "gradle-tweak",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "No longer specify gradle threads in github actions. (#3643)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305aa0ac82a74541b2016",
    "number": 3642,
    "body": "Based on #3638.",
    "head_branch": "recipe-api/custom-data-ingredient",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[1.20.5] Add back custom data ingredient (#3642)\n\n* [1.20.5] Add back custom data ingredient\r\n\r\n---------\r\n\r\nCo-authored-by: modmuss50 <modmuss50@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305ab0ac82a74541b2017",
    "number": 3641,
    "body": "This PR backports the changes of #3627 to version 1.20.4 (a backport to prior versions may be done). Its feature set is identical, however it is much more useful here since `EnchantmentTarget` was not yet removed, as that class was the main obstacle to flexibility in enchantment code.\r\n\r\nThis PR adds several ways to modify what enchantments are and are not allowed on certain items:\r\n\r\n- A `canBeEnchantedWith` method in `FabricItem` that allows modded items to override their behavior with regards to existing enchantments (vanilla or from other mods). There is also a `FabricItemStack` counterpart, which should ideally be called in future FAPI design/mods instead of `Enchantment#isAcceptableItem`.\r\n- A new `ALLOW_ENCHANTING` event that allows doing the same thing using a global event-based system, useful for cases where both the items and the enchantments may be vanilla or from another mod.\r\n\r\nThis makes it possible to work around the rigid, unwieldy and hardcoded `EnchantmentTarget` mechanism, and thus allows adding items to/excluding items from existing enchantments without depending on the arbitrary conditions imposed by `EnchantmentTarget`s, as well as differentiating enchantments that have the same `EnchantmentTarget`. Furthermore, all of the new API methods are `ItemStack`-based, as opposed to `Item`-based (this was another big issue with the `EnchantmentTarget` system).\r\n\r\nThe PR also adds a new system of \"intrinsic enchantments\", which are a way for developers to give their items enchant-like effects while avoiding the unintended side-effects that may result from doing so using purely the vanilla system. For example, it could be useful to code electric multi-tools that can have Silk Touch-like or Fortune-like effects depending on their configuration.\r\n\r\nTODO:\r\n- [ ] Test testmod",
    "head_branch": "enchantment-api-1.20.4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Enchantment API (#3641)\n\n* Enchantment API\r\n\r\n* Rework EnchantmentHelperMixin\r\n\r\n* Fix build\r\n\r\n* Fix build again"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662305ac0ac82a74541b2018",
    "number": 3638,
    "body": "- Breaking change: `FabricItem#allowNbtUpdateAnimation` was renamed to `allowComponentsUpdateAnimation`.\r\n- Fixes javadoc errors.\r\n- Testmod improvements and fixes.\r\n- **Does not** include custom data ingredient, separate PR coming soon-ish?",
    "head_branch": "port/24w10a",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "24w10a porting fixes (#3638)\n\n* Rename mixin using unmapped name\r\n\r\n* Fix potential crash in item API testmod\r\n\r\n* Improve custom ingredient javadoc\r\n\r\n* More javadoc improvements\r\n\r\n* Add more tests\r\n\r\n* whoops\r\n\r\n* Fix typos\r\n\r\n* Remove test for strict NBT matching\r\n\r\n* another whoopsie\r\n\r\n* Finish NBT -> components changes\r\n\r\nBreaking change: `FabricItem#allowNbtUpdateAnimation` was renamed to\r\n`allowComponentsUpdateAnimation`.\r\n\r\n* Fix broken javadoc links\r\n\r\n* Fix broken screen handler testmod"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305ad0ac82a74541b2019",
    "number": 3631,
    "body": null,
    "head_branch": "fix/sync-data-comp-types",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Sync data component types registry (#3631)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305ae0ac82a74541b201a",
    "number": 3630,
    "body": "Use `thenCompose` instead of `thenApply` for the loot table provider because `thenCompose` is needed when we return `CompletionStage` (`CompletableFuture`)",
    "head_branch": "fix-24w09a-loot-table-provider",
    "is_a_fork": true,
    "comments": [
      "Exactly the same in [AdvancementProvider](https://github.com/FabricMC/fabric/blob/d20e1f08cb6dcc9bb0d0d0bd9891f1c20cdc35fe/fabric-data-generation-api-v1/src/main/java/net/fabricmc/fabric/api/datagen/v1/provider/FabricAdvancementProvider.java#L83)"
    ],
    "commit_messages": [
      "Fix loot table provider not working after 24w09a port (#3630)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305af0ac82a74541b201b",
    "number": 3628,
    "body": null,
    "head_branch": "transfer-api-cleanup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Dont serialise empty transfer variant components (#3628)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305af0ac82a74541b201c",
    "number": 3627,
    "body": "Snapshot 24w03a added a system of tags which broke a lot of the rigidity of the previous `EnchantmentTarget` system. Nonetheless, some ideas from #3080 are still worth implementing.\r\n\r\nThis PR adds several ways to modify what enchantments are and are not allowed on certain items:\r\n\r\n- A `canBeEnchantedWith` method in `FabricItem` that allows modded items to override their behavior with regards to existing enchantments (vanilla or from other mods). There is also a `FabricItemStack` counterpart, which should ideally be called in future FAPI design/mods instead of `Enchantment#isAcceptableItem`.\r\n- A new `ALLOW_ENCHANTING` event that allows doing the same thing using a global event-based system, useful for cases where both the items and the enchantments may be vanilla or from another mod.\r\n\r\nWhen it comes to vanilla enchantments, these are not meant to replace the robust tag system that was introduced in 24w03a, which should be used instead when possible, but rather allow finer control than what the tag system allows; for example, having the receivable enchantments depend on stack data, or discriminating between enchantments that apply to the same tag (e.g. Mending and Unbreaking). This API might prove more useful in older versions that don't have the new tag system, which may be the subject of a future backport PR.\r\n\r\nThe PR also adds a new system of \"intrinsic enchantments\", which are a way for developers to give their items enchant-like effects while avoiding the unintended side-effects that may result from doing so using purely the vanilla system. For example, it could be useful to code electric multi-tools that can have Silk Touch-like or Fortune-like effects depending on their configuration.\r\n\r\nTODO:\r\n- [x] Intrinsically enchanted items (as in #3080)\r\n- [x] Testmod (check for grindstone interaction)\r\n- [x] Item-based overrides for modded items & vanilla/other mod enchantments?\r\n- [x] Optional: Backport to 1.20.4 or below",
    "head_branch": "enchantment-api",
    "is_a_fork": true,
    "comments": [
      "Is \"Intrinsically enchanted items\" really needed in FAPI?",
      "I think it's reasonable that mods may want to give their items gameplay properties as if they had a vanilla enchantment. For example, some electric multi-tool that has a Silk Touch effect. However, using the vanilla system is sort of messy and requires a bit of boilerplate cleanup to make sure it doesn't look out of place. Off the top of my mind, removing the glint, adding HideFlags, making sure the grindstone doesn't bug out, and perhaps tweaking anvil behavior. Nothing mods can't add themselves, but then again nothing in FAPI is.\r\n\r\nI think it's a nice convenience feature to have.",
      "> I think it's reasonable that mods may want to give their items gameplay properties as if they had a vanilla enchantment. For example, some electric multi-tool that has a Silk Touch effect. However, using the vanilla system is sort of messy and requires a bit of boilerplate cleanup to make sure it doesn't look out of place. Off the top of my mind, removing the glint, adding HideFlags, making sure the grindstone doesn't bug out, and perhaps tweaking anvil behavior. Nothing mods can't add themselves, but then again nothing in FAPI is.\r\n> \r\n> I think it's a nice convenience feature to have.\r\n\r\nunfortunately, will become unnecessary in 1.20.5, as components are very easily leveraged to create this behavior\r\n```java\r\npublic static final Item MY_ENCHANTED_SWORD = register(\"sword\", new SwordItem(ToolMaterials.NETHERITE, 1, -1.3, new Item.Settings().component(DataComponentTypes.ENCHANTMENTS, ...).component(DataComponentTypes.ENCHANTMENT_GLINT, false)));\r\n```",
      "This is a good first approximation, however I believe this doesn't prevent incorrect interactions with grindstones (xp dupe), and it introduces some changes in anvils. To circumvent this you'd need to implement some more methods and you might need a mixin.\r\n\r\nIt is still possible to iron out all of these issues and do it using only vanilla means, but it's not completely trivial (nor do components make a big difference with NBT), hence why this convenience API exists.",
      "Is having an event and the item mehod the best way to do this? As it does mean that you have to check 2 things to know if an item can be enchanted? Im not sure there is an obvious solution, but I think its worth thinking about. ",
      "I hadn't thought about how, in its current state, devs would have to separately check both the event and the FabricItemStack method to find out whether an item can be enchanted. Technici4n suggests moving the event logic to the FabricItemStack method instead, which makes a lot of sense. This way the dev usage is very simple: just call `FabricItemStack#canBeEnchantedWith`."
    ],
    "commit_messages": [
      "Enchantment API (#3627)\n\n* ALLOW_ENCHANTING event\r\n\r\n* Intrinsic enchantments + testmod\r\n\r\nalso fixed a bug in the testmod that prevented the custom damage handler from ever working\r\n\r\n* Item-based override mechanism\r\n\r\n* Replaces part of the use cases of the event with a convenient method to override in FabricItem.\r\n* Updated and tested the testmod.\r\n\r\n* javadoc\r\n\r\n* Move event logic to FabricItemStack\r\n\r\n* oops\r\n\r\n* Simplify mixin\r\n\r\n* Replace ActionResult with TriState\r\n\r\n* Use TriState in testmod\r\n\r\n* requests\r\n\r\n* Clarify jdoc\r\n\r\n* Ship without intrinsic enchantments at first\r\n\r\n* Checkstyle\r\n\r\n* Checkstyle\r\n\r\n---------\r\n\r\nCo-authored-by: modmuss50 <modmuss50@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305b00ac82a74541b201d",
    "number": 3626,
    "body": null,
    "head_branch": "port/transfer-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "24w09a - Transfer API (#3626)\n\n* First pass on transfer API\r\n\r\n* More fixes\r\n\r\n* Another fix\r\n\r\n* Small fixes\r\n\r\n* Move transfer API tests to junit\r\n\r\n* Fix client run\r\n\r\n* Small fixes\r\n\r\n* Copy stack when component changes\r\n\r\n* Small improvement\r\n\r\n* More tests and docs fixes\r\n\r\n* Mutate existing stack"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305b10ac82a74541b201e",
    "number": 3623,
    "body": "Removed:\r\n- FabricItemSettings (previously deprecated)\r\n- NbtIngredient (replaced with ComponentIngredient)\r\n- ModifyItemAttributeModifiersCallback\r\n\r\nDisabled (for now):\r\n- Transfer API\r\n\r\nBreaking changes:\r\n- FabricAdvancementProvider passes a wrapper lookup\r\n- FabricBlockLootTableProvider passes a wrapper lookup\r\n- FabricLanguageProvider passes a wrapper lookup",
    "head_branch": "port/24w09a",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "24w09a (#3623)\n\n* In game\r\n\r\n* More fixes\r\n\r\n* Small fixes + changes\r\n\r\n* Rename\r\n\r\n* Fix test"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305b20ac82a74541b201f",
    "number": 3618,
    "body": null,
    "head_branch": "l10n/1.20.4",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Translation updates (#3618)\n\n* New translations en_us.json (Korean)\r\n\r\n* New translations en_us.json (Vietnamese)\r\n\r\n* New translations en_us.json (Korean)\r\n\r\n* New translations en_us.json (Korean)\r\n\r\n* New translations en_us.json (Vietnamese)\r\n\r\n* New translations en_us.json (Korean)\r\n\r\n* New translations en_us.json (Portuguese, Brazilian)\r\n\r\n* New translations en_us.json (French)\r\n\r\n* New translations en_us.json (Portuguese, Brazilian)\r\n\r\n* New translations en_us.json (Estonian)\r\n\r\n* New translations en_us.json (Malay)\r\n\r\n* New translations en_us.json (Malay)\r\n\r\n* New translations en_us.json (Malay)\r\n\r\n* New translations en_us.json (German)\r\n\r\n* New translations en_us.json (Czech)\r\n\r\n* New translations en_us.json (Chinese Simplified)\r\n\r\n* New translations en_us.json (Chinese Simplified)\r\n\r\n* New translations en_us.json (Spanish, Chile)\r\n\r\n* New translations en_us.json (Spanish, Chile)\r\n\r\n* New translations en_us.json (Spanish, Chile)\r\n\r\n* New translations en_us.json (Chinese Traditional)\r\n\r\n* New translations en_us.json (Chinese Traditional)\r\n\r\n* New translations en_us.json (Polish)\r\n\r\n* New translations en_us.json (Toki Pona)\r\n\r\n* New translations en_us.json (Toki Pona)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305b30ac82a74541b2020",
    "number": 3613,
    "body": "Mojang fixed this bug in https://bugs.mojang.com/browse/MC-193656. Detailed analysis of the fix:\r\n- Before 24w05a: the bottom-most pose's normal matrix in the PoseStack used for rendering contains the mouse rotation, then later on the rotation is inversed using the inverse normal matrix given to `RenderSystem.setInverseViewRotationMatrix`.\r\n- Starting from 24w05a: the mouse rotation does not appear in the normal matrix anymore.\r\n\r\nThe \"numerical instability\" is therefore gone from normal computations entirely, and we can remove this fix.\r\n\r\nTested that the original crumbling bug does not appear anymore when trying to break the octagonal column block from the FRAPI testmod.\r\n\r\nCloses #3582.",
    "head_branch": "remove-decal-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove now unneeded OverlayVertexConsumerMixin (#3613)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305b30ac82a74541b2021",
    "number": 3612,
    "body": "I hope we didn't miss anything else",
    "head_branch": "mob-conversion-event-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fire the `MOB_CONVERSION` event after shearing the mushroom cow (#3612)\n\n* Fire the MOB_CONVERSION event after shearing the mushroom cow\r\n\r\n* checkstyle\r\n\r\n* Add license header"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305b40ac82a74541b2022",
    "number": 3611,
    "body": "Currently I would like to use such a event in galacticraft for overriding vanillas skybox above a certain height",
    "head_branch": "1.20.4-sky",
    "is_a_fork": true,
    "comments": [
      "Would the existing `DimensionRenderingRegistry.registerSkyRenderer` handle your use case? Its not totally clear to me why we also need this event.",
      "> Would the existing `DimensionRenderingRegistry.registerSkyRenderer` handle your use case? Its not totally clear to me why we also need this event.\r\n\r\nNo it doesn't since I want to override the existing skybox in a dimension. Also DimensionRenderingRegistry.registerSkyRenderer doesn't pass the fog callback.\r\nI'd also think it might be useful for the SkyRenderer to return a boolean whether to cancel vanilla rendering (for forge parity mostly but I haven't really seen a clear usecase for that yet.)\r\nHere's a old image of my use case\r\n![image](https://github.com/FabricMC/fabric/assets/26313415/bb5e76f3-5ca1-4197-98e9-b8eac03252c5)\r\n",
      "> No it doesn't since I want to override the existing skybox in a dimension.\r\n\r\n`registerSkyRenderer` can be used to override, assuming there isnt an existing one. Happy to maybe change the API if needed.\r\n\r\n> DimensionRenderingRegistry.registerSkyRenderer doesn't pass the fog callback.\r\n\r\nThis could be added to `WorldRenderContext`",
      "> > No it doesn't since I want to override the existing skybox in a dimension.\r\n> \r\n> `registerSkyRenderer` can be used to override, assuming there isnt an existing one. Happy to maybe change the API if needed.\r\n> \r\n> > DimensionRenderingRegistry.registerSkyRenderer doesn't pass the fog callback.\r\n> \r\n> This could be added to `WorldRenderContext`\r\n\r\nIs it possible to unregister it once I'm done?",
      "> Is it possible to unregister it once I'm done?\r\n\r\nDo you mean you want to temporarily change the sky rendering? 🤔 I havent looked at the code but you might be able to get the exisitng/default sky renderer before registering yours, you can then choose to fall back to that if you dont want to use yours?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305b50ac82a74541b2023",
    "number": 3606,
    "body": "What the title says",
    "head_branch": "1.20.4",
    "is_a_fork": true,
    "comments": [
      "ok, noted"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305b60ac82a74541b2024",
    "number": 3605,
    "body": null,
    "head_branch": "l10n/1.20.4",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Translastion updates (#3605)\n\n* New translations en_us.json (Spanish)\r\n\r\n* New translations en_us.json (Bulgarian)\r\n\r\n* New translations en_us.json (German)\r\n\r\n* New translations en_us.json (Greek)\r\n\r\n* New translations en_us.json (Finnish)\r\n\r\n* New translations en_us.json (Japanese)\r\n\r\n* New translations en_us.json (Korean)\r\n\r\n* New translations en_us.json (Polish)\r\n\r\n* New translations en_us.json (Swedish)\r\n\r\n* New translations en_us.json (Turkish)\r\n\r\n* New translations en_us.json (Chinese Simplified)\r\n\r\n* New translations en_us.json (Chinese Traditional)\r\n\r\n* New translations en_us.json (Vietnamese)\r\n\r\n* New translations en_us.json (Portuguese, Brazilian)\r\n\r\n* New translations en_us.json (Spanish, Mexico)\r\n\r\n* New translations en_us.json (Estonian)\r\n\r\n* New translations en_us.json (Tatar)\r\n\r\n* New translations en_us.json (French)\r\n\r\n* New translations en_us.json (Spanish)\r\n\r\n* New translations en_us.json (Polish)\r\n\r\n* New translations en_us.json (Russian)\r\n\r\n* New translations en_us.json (Ukrainian)\r\n\r\n* New translations en_us.json (Chinese Traditional)\r\n\r\n* New translations en_us.json (Estonian)\r\n\r\n* New translations en_us.json (Russian)\r\n\r\n* New translations en_us.json (French)\r\n\r\n* New translations en_us.json (Spanish)\r\n\r\n* New translations en_us.json (Polish)\r\n\r\n* New translations en_us.json (Russian)\r\n\r\n* New translations en_us.json (Ukrainian)\r\n\r\n* New translations en_us.json (Estonian)\r\n\r\n* New translations en_us.json (Dutch)\r\n\r\n* New translations en_us.json (Dutch)\r\n\r\n* New translations en_us.json (Dutch)\r\n\r\n* New translations en_us.json (Finnish)\r\n\r\n* New translations en_us.json (Finnish)\r\n\r\n* New translations en_us.json (Italian)\r\n\r\n* New translations en_us.json (Italian)\r\n\r\n* New translations en_us.json (Swedish)\r\n\r\n* New translations en_us.json (German)\r\n\r\n* New translations en_us.json (German)\r\n\r\n* New translations en_us.json (German)\r\n\r\n* New translations en_us.json (Chinese Simplified)\r\n\r\n* New translations en_us.json (German)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305b70ac82a74541b2025",
    "number": 3604,
    "body": "Existing languages to add to crowdin before merging:\r\n\r\n- bg_bg - Bulgarian ✅ \r\n- de_de - German ✅ \r\n- el_gr - Modern Greek ✅ \r\n- es_ar - Spanish - ARGENTINA ✅ \r\n- es_cl - Spanish (Chile) ✅ \r\n- es_ec - Spanish (Ecuador) ✅ \r\n- es_es - Spanish ✅ \r\n- es_mx - Spanish - MEXICO ✅ \r\n- es_uy - Spanish (Uruguay) ✅ \r\n- es_ve - Spanish (Venezuela) ✅ \r\n- et_ee - Estonian ✅ \r\n- fa_ir - Persian (Iran) ✅ \r\n- fi_fi - Finnish ✅ \r\n- fr_ca - Canadian French ✅ \r\n- fr_fr - French ✅ \r\n- it_it - Italian ✅ \r\n- ja_jp - Japanese ✅ \r\n- ko_kr - Korean (South Korea) ✅ \r\n- pl_pl - Polish ✅ \r\n- pt_br - Brazilian Portuguese ✅ \r\n- sv_se - Swedish ✅ \r\n- tr_tr - Turkish (Turkey) ✅ \r\n- tt_ru - Tatar (Russia) ✅ \r\n- uk_ua - Ukrainian ✅ \r\n- vi_vn - Vietnamese ✅ \r\n- zh_cn - Chinese - Simplified ✅ \r\n- zh_tw - Chinese - Traditional ✅ ",
    "head_branch": "setup/translations",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Setup crowdin (#3604)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305b80ac82a74541b2026",
    "number": 3603,
    "body": null,
    "head_branch": "fix/3602",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix ClientPlayNetworking.Contexnt.player() being null (#3603)\n\n* Fix ClientPlayNetworking.Contexnt.player() being null\r\n\r\n* Minor cleanup"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305b80ac82a74541b2027",
    "number": 3600,
    "body": "Fixes #3566. The bug was caused by item groups being distributed into pages without checking if they could even be displayed. This PR waits until they have been initialized to do that, and relegates non-displayable groups to the end of the list, making it so that old behavior functions correctly. Testmod has been augmented with a regression test.\r\n\r\nBy coincidence, another bug was fixed wherein empty item groups could sometimes be selected when switching pages.",
    "head_branch": "empty-item-group-arrow-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Improve handling of empty item groups in the creative menu (#3600)\n\n* Better handling of empty item groups in pagination\r\n\r\nEmpty/non-displayable item groups are now put after all other groups and only then are they split into pages.\r\n\r\n* Serendipitious bugfix\r\n\r\nFixed an issue where empty item groups could get selected when switching pages\r\n\r\n* checkstyle"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305b90ac82a74541b2028",
    "number": 3599,
    "body": null,
    "head_branch": "fix/test/register-teal-wood-type",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix teal sign testmod crash by registering the wood type. (#3599)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305ba0ac82a74541b2029",
    "number": 3598,
    "body": "What the title says",
    "head_branch": "fix/regsync",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix registry sync (#3598)\n\n* Fix registry sync\r\n\r\n* Don't use read/writeByteArray, as we know the whole payload is the bytearray\r\n\r\n* Add unit tests"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305bb0ac82a74541b202a",
    "number": 3597,
    "body": "Closes #3408.",
    "head_branch": "spite-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "spite (#3597)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662305bc0ac82a74541b202b",
    "number": 3594,
    "body": "- Deduplicate some logic in the client play/common network addon. \r\n- (Slight breaking change) limit the lenght of a network channel name to 128.\r\n- Set a limit of 8192 channel, can be configured by a system prop.",
    "head_branch": "misc-network-improvements",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[1.20.5] Misc networking cleanup (#3594)\n\n* Misc networking cleanup\r\n\r\n* Dont invoke event twice\r\n\r\n* Review tweaks"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305bc0ac82a74541b202c",
    "number": 3593,
    "body": "- Fix default overlay block check using `TransparentBlock` instead of `TranslucentBlock` (fix #3592)\r\n- Fix `setBlockTransparency`/`isBlockTransparent` not being thread-safe\r\n- Reuse the same render handler objects for water and lava\r\n- Fix custom geometry being buffered twice if `FluidRenderHandler#renderFluid` is invoked directly\r\n- Fix calling `FluidRenderHandler.super.renderFluid` not using passed arguments to calculate color\r\n- Fix calling `FluidRenderHandler.super.renderFluid` more than once producing incorrect geometry\r\n- Fix fluids with no handler never receiving water overlay instead of using default behavior\r\n- Add static `FluidRendering#render`, which allows invoking `FluidRenderHandler#renderFluid` with a specified, possibly non-vanilla default renderer",
    "head_branch": "pr/1.20.4/fluid-rendering-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fluid rendering fixes (#3593)\n\n* Fluid rendering fixes\r\n\r\n- Fix default overlay block check using TransparentBlock instead of TranslucentBlock\r\n- Fix setBlockTransparency/isBlockTransparent not being thread-safe\r\n- Reuse the same render handler objects for water and lava\r\n\r\n* Fix implementation issues\r\n\r\n- Fix custom geometry being buffered twice if FluidRenderHandler#renderFluid is invoked directly\r\n- Fix calling FluidRenderHandler.super.renderFluid not using passed arguments to calculate color\r\n- Fix calling FluidRenderHandler.super.renderFluid more than once producing incorrect geometry\r\n- Fix fluids with no handler never receiving water overlay instead of using default behavior\r\n\r\n* Add way to render fluid with non-vanilla default\r\n\r\n- Fix testmod"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662305bd0ac82a74541b202d",
    "number": 3589,
    "body": "## Summary\r\n\r\n1.20.2 added pack overlays (explained in the [23w31a changelog](https://www.minecraft.net/en-us/article/minecraft-snapshot-23w31a)), which conditionally overlay resource/data pack files from sub-directories onto the base pack. This PR adds an API for custom resource pack overlays, which allow overlays to be applied based on conditions other than just the current pack format.  \r\n\r\n### Don't resource conditions do the same thing?\r\n\r\nThere are a few reasons why overlay conditions and resource conditions are distinct from each other and why both should exist.\r\n\r\n- Resource conditions only apply to data pack files that are not part of dynamic registries such as advancement and recipe files. Overlay conditions can be used on *all* data pack *and* resource pack files.\r\n- Overlay conditions can replace files in base packs. For example, a pack overlay could change a combat-based advancement based on if a mod with a special weapon is loaded. This would keep the advancement's identifier the same, meaning parent/child advancements could still connect with the advancement the same regardless of whether or not the mod with the special weapon is loaded.\r\n- The main trade-off of overlay conditions compared to resource conditions is that overlays are loaded before the game has loaded the contents of the packs, meaning there's no way to do registry checks or tag populated checks. By default the Overlay Conditions API only has `fabric:not`, `fabric:all_of`, `fabric:any_of`, and `fabric:mod_loaded` conditions.\r\n\r\n### Overlay condition format example\r\n```json\r\n{\r\n  \"pack\": {\r\n    \"pack_format\": 26,\r\n    \"description\": \"[Insert description here]\"\r\n  },\r\n  \"fabric:overlays\": {\r\n    \"entries\": [\r\n      {\r\n        \"directory\": \"example_mod_compat\",\r\n        \"type\": \"fabric:mod_loaded\",\r\n        \"mod_id\": \"example_mod\"\r\n      },\r\n      {\r\n        \"directory\": \"worldgen_incompatible_with_terralith\",\r\n        \"type\": \"fabric:not\",\r\n        \"condition\": {\r\n          \"type\": \"fabric:mod_loaded\",\r\n          \"mod_id\": \"terralith\"\r\n        }\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n### Overlay registration example\r\n```java\r\nprivate static final Identifier MOD_LOADED = new Identifier(\"fabric:mod_loaded\");\r\n\r\nstatic void init() {\r\n\t// init static\r\n}\r\n\r\nstatic {\r\n\tOverlayConditions.register(MOD_LOADED, object -> {\r\n\t\tJsonElement modId = JsonHelper.getElement(object, \"mod_id\");\r\n\t\tif (modId instanceof JsonPrimitive) {\r\n\t\t\treturn FabricLoader.getInstance().isModLoaded(modId.getAsString());\r\n\t\t} else {\r\n\t\t\tthrow new JsonParseException(\"Invalid mod_id element: \" + modId);\r\n\t\t}\r\n\t});\r\n}\r\n```",
    "head_branch": "1.20.4",
    "is_a_fork": true,
    "comments": [
      ":iapprove: Was just thinking about this idea! Thanks for PRing. Now onto the code review...",
      "~~Marking the PR as a draft for the moment, as I plan to merge the module into the Resource Conditions API and there's two key issues to sort out as a result of that.~~\r\n\r\n~~First, there's the confusing naming. The Resource Conditions API will contain resource conditions for loading individual files (but only some data pack files and no resource pack files) and overlay conditions for loading pack overlays. Perhaps there's a naming scheme that would work better?~~\r\n\r\n~~Second, there's the conditions themselves. Some conditions can apply to both resource conditions and overlay conditions (`not`, `all_of`, `any_of`, `mod_loaded`) while some can only apply to resource conditions (`features_enabled`,`tags_populated`). Should these remain as separated condition maps, or should they be stored as one map with some way to indicate if a condition is only for resource conditions?~~\r\n\r\nUpon further consideration, it'd make more sense to have overlays as a part of the Resource Loader API. I'll unmark the PR as a draft once that is done and some cases where pack overlays are scrapped get fixed.",
      "Fully migrated overlay conditions over to the Resource Loader API. In addition, I've made pack overlays function in builtin resource packs (which ended up being a very small change code-wise).",
      "Resource conditions are the correct tool for the job here IMO, not a new system that is essentially a copy.\r\n\r\n> meaning there's no way to do registry checks or tag populated checks.\r\n\r\nThat would be a user error for using these conditions, IMO. We could also throw in such cases.",
      "> Resource conditions are the correct tool for the job here IMO, not a new system that is essentially a copy.\r\n\r\nResource conditions still only apply to some datapack files (e.g. loot tables and recipes) and not to files tied to dynamic registries (e.g. worldgen files) and any resource pack files. In addition, conditional overlays make large collections of pack files with the same resource conditions far easier to organize and handle.\r\n\r\n",
      "I mean that you should use resource conditions for the implementation of the overlay conditions, ideally. Resource conditions are fundamentally JSON predicates, which is what you have reinvented here. :P",
      "Made the initial jump to Resource Conditions, will work on handling unsupported overlay conditions (such as the aforementioned `features_enabled` and `tags_populated` conditions) next.",
      "Most of the unsupported overlay conditions ended up already giving a warning in the logs and returning false for when datapack contents haven't been initialized yet. I've applied it to the `features_enabled` condition as well, which should be the only condition that didn't previously have such check.",
      "Superceded by #3702 to target 1.20.5."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305be0ac82a74541b202e",
    "number": 3588,
    "body": "Ensure that empty or null data attachments are never saved or read to nbt.",
    "head_branch": "fix/empty-data-attachments",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix empty data attachments being saved. (#3588)\n\n* Fix empty data attachments being saved.\r\n\r\n* Checkstyle"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305bf0ac82a74541b202f",
    "number": 3586,
    "body": "- use marker file to determine first/second launch\r\n- move FAR_CHUNK farther out, so there is no change it gets generated during spawn chunk generation & extra check to not crash when this is the case anyways.",
    "head_branch": "dataAttachmentTestmodFix",
    "is_a_fork": true,
    "comments": [
      "Well while we're at it, there's also [this typo](https://github.com/FabricMC/fabric/blob/58efd9b512dec461673342bbfdc1031aba24464c/fabric-data-attachment-api-v1/src/testmod/java/net/fabricmc/fabric/test/attachment/AttachmentTestMod.java#L121) and that should be it."
    ],
    "commit_messages": [
      "Fix data attachment testmod (#3586)\n\n* fix data attachment testmod: use marker file to determine first/second launch\r\n\r\n* fix typos\r\n\r\n* one more typo"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305c00ac82a74541b2030",
    "number": 3584,
    "body": "This pull request introduces a new API for registering tracked data handlers, which reduces conflicts between mods registering tracked data handlers in an order that is inconsistent between clients and servers.\r\n\r\nTo use the API, simply replace usages of the vanilla method:\r\n\r\n```diff\r\n- TrackedDataHandlerRegistry.register(TRACKED_DATA_HANDLER);\r\n+ FabricTrackedDataRegistry.registerHandler(TRACKED_DATA_HANDLER_ID, TRACKED_DATA_HANDLER);\r\n```\r\n\r\nAn example of a mod introducing tracked data handlers is provided within the testmod. This entity uses tracked data handlers for global positions, items, and optional item groups, all of which are not available as one of the vanilla tracked data handlers.\r\n\r\nA few remarks regarding the implementation of this API:\r\n\r\n- Documentation has not been written yet.\r\n- Note that the class name is `FabricTrackedDataRegistry` rather than `FabricTrackedDataHandlerRegistry` so that tracked data support can be added in the future within the same class; see #1049 for more information.\r\n- Each registration recomputes the map used by vanilla. I'm not sure whether optimizing this behavior is worthwhile; the work required to delay computation until the map is accessed would be more invasive than the current setup.\r\n- Mods that do not switch to this API will still work as before. Said mods will not gain the benefits of using this API and will still lack a guarantee of tracked data handlers matching between clients and servers.\r\n- There isn't any guard against registering a tracked data handler after mod initialization. Should one be added? Currently, the unspoken idea is that mods will only use this API during mod initialization.\r\n- Mods assuming that tracked data handler IDs are stable during mod initialization (or possibly later, per the last remark) will be broken. I assume this breakage is fine, as I doubt many mods interact with tracked data handlers in this way.\r\n\r\nFixes #3482",
    "head_branch": "tracked-data-handler-registry",
    "is_a_fork": true,
    "comments": [
      "would it be beneficial to add a warning if a non-vanilla handler is registered? (outside of the api)",
      "@Linguardium A warning already will be logged in that scenario.",
      "Yep, i missed that\r\n",
      "@haykam821 are you intrested in finishing this off? I dont think there was anything too crazy left to do on it."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305c00ac82a74541b2031",
    "number": 3583,
    "body": null,
    "head_branch": "fix/coverage",
    "is_a_fork": true,
    "comments": [
      "Merging now, as there is no need to release this change."
    ],
    "commit_messages": [
      "Fix coverage task (#3583)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305c10ac82a74541b2032",
    "number": 3580,
    "body": "This backport includes both the original PR (#3476) and its extension to ProtoChunks (#3548). The code dealing with PersistentStates had to be changed for 1.20.1. The recent fixes for the testmod and empty attachments have also been included. Testmod works as intended.\r\n\r\n~~Currently, the PR contains the changes from #3576, as it hasn't been merged yet and that feature is required for data attachments. Once #3576 is merged, I will rebase/fix my branch's tree accordingly.~~ That PR was merged and the branch was fixed accordingly.",
    "head_branch": "data-attachment-backport",
    "is_a_fork": true,
    "comments": [
      "Please also include: https://github.com/FabricMC/fabric/pull/3588",
      "FYI I squashed some commits so we can merge this PR without suqashing them all."
    ],
    "commit_messages": [
      "Fix empty data attachments being saved. (#3588)\n\n* Fix empty data attachments being saved.\r\n\r\n* Checkstyle"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305c20ac82a74541b2033",
    "number": 3578,
    "body": "Surprisingly, Resource Loader and RegSync needed zero changes with regard to vanilla RegSync feature. We can utilize this, but it is kept for later.\r\n\r\n- Bump yarn\r\n- Refactor some code to 1) adopt Yarn rename of \"resource pack names\" to IDs, 2) to match vanilla coding style (with respect to isInCreativeMode)\r\n- Resolves #3554 \r\n- Fixes a bug where using a custom elytra did not clear the new field, `ignoreFallDamageAboveY`.",
    "head_branch": "port/24w06a",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "24w06a porting fixes (#3578)\n\n* Bump yarn\r\n\r\n* Fix TagsLoaded event again\r\n\r\n* Resource Loader: internal refactor (name to ID)\r\n\r\n* More refactors\r\n\r\n* Reset ignoreFallDamageAboveY when using custom elytra\r\n\r\n* fix checkstyle"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305c30ac82a74541b2034",
    "number": 3576,
    "body": "Required for data attachment. Testmod works fine.",
    "head_branch": "mob-conversion-backport",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[1.20.1] Backport mob conversion event (#3576)\n\n* Add mob conversion event (#3511)\r\n\r\n* Add mob conversion event\r\n\r\n* spacing\r\n\r\n* use a smarter mixin strategy\r\n\r\n* add pig and villager lightning triggers\r\n\r\n* tyop\r\n\r\nCo-authored-by: haykam821 <24855774+haykam821@users.noreply.github.com>\r\n\r\n* handle tadpole -> frog conversion\r\n\r\n- update javadoc to clarify the handled cases\r\n- document keepEquipment parameter\r\n- improve mixin handler names\r\n\r\n---------\r\n\r\nCo-authored-by: haykam821 <24855774+haykam821@users.noreply.github.com>\r\n\r\n* Loader dep\r\n\r\n* Update mixins for loader\r\n\r\nIncorporates the fix in 4ced059\r\n\r\n---------\r\n\r\nCo-authored-by: haykam821 <24855774+haykam821@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662305c40ac82a74541b2035",
    "number": 3571,
    "body": "- Update to loader 0.15.6\r\n- Copy+paste most of the Gradle changes form 1.20.4/5",
    "head_branch": "backport/gradle-changes",
    "is_a_fork": true,
    "comments": [
      "Tested in AOF 7 for 1.20.1, works as expected. There was no issue with running on loader 0.15.6"
    ],
    "commit_messages": [
      "Update Loom/Gradle and Fabric Loader (#3571)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305c50ac82a74541b2036",
    "number": 3565,
    "body": "- Fix wrong ops being used in `AttachmentSerializingImpl`\r\n- **Breaking change**: advancement and loot table providers now require passing `WraperLookup` future.",
    "head_branch": "port/24w05a",
    "is_a_fork": true,
    "comments": [
      "Thanks again"
    ],
    "commit_messages": [
      "Improve 24w05a port (#3565)\n\n* Fix wrong ops being used in AttachmentSerializingImpl\r\n\r\n* Remove unused private method\r\n\r\n* Require and use registry future in advancements and loot tables"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305c50ac82a74541b2037",
    "number": 3563,
    "body": "Fix #3561",
    "head_branch": "after-translucent",
    "is_a_fork": true,
    "comments": [
      "Made it work but I feel like there is still some jank going on. The test is from an existing mod on 1.20.4."
    ],
    "commit_messages": [
      "Fix WorldRenderEvents.AFTER_TRANSLUCENT (#3563)\n\n* Fix WorldRenderEvents.AFTER_TRANSLUCENT\r\n\r\n* Add test for WorldRenderEvents.AFTER_TRANSLUCENT\r\n\r\n* Reset matrixStack"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305c60ac82a74541b2038",
    "number": 3560,
    "body": null,
    "head_branch": "port/24w05a",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Port to 24w05a (#3560)\n\nCo-authored-by: Drex <nicknamedrex@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305c70ac82a74541b2039",
    "number": 3558,
    "body": "This pull request exposes the existing functionality located at `FluidRenderHandlerRegistryImpl#getOverride` so that other mods can use it without depending on internals.\r\n\r\nThe reason for this is because Sodium (see [issue](https://github.com/CaffeineMC/sodium-fabric/issues/2298)) implements its own \"default\" for fluids, which allows it to use per-vertex colors to create a smooth gradient across the water surface. Since it's currently not possible to detect whether the default implementation is being returned by Fabric API, we can't know when to override it with our own in rendering.\r\n\r\nI'm not sure if this is the best solution, but it seems _relatively_ harmless as far as changes go.",
    "head_branch": "fluid-renderer-override-api",
    "is_a_fork": true,
    "comments": [
      "Note: This does introduce one difference, being that the renderer will now _always_ invoke the fluid handler for water/lava fluids in `FluidRendererMixin.tesselate`. I don't know what the consequences of this are exactly, but there seems to be an escape hatch to deal with the recursion and it appears to work fine."
    ],
    "commit_messages": [
      "Expose a function for querying the non-default fluid renderer (#3558)\n\n* Expose a function for querying the non-default fluid renderer\r\n\r\n* Do not register default handlers as overrides\r\n\r\n* Add @Nullable to getOverride\r\n\r\n* Add @Nullable to get\r\n\r\n---------\r\n\r\nCo-authored-by: modmuss50 <modmuss50@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662305c80ac82a74541b203a",
    "number": 3557,
    "body": "Fixes a discrepancy between the profile and pack name, which resulted in a duplicate pack name being assigned.",
    "head_branch": "resource-loader/fix-missing-subpath",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix duplicate resource pack names (#3557)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305c90ac82a74541b203b",
    "number": 3555,
    "body": "Resolves #3554 \r\n\r\nThe first commit (only) should be ported to 1.20.2 and 1.20.4.\r\n\r\nFixed bugs:\r\n\r\n- `TAGS_LOADED` not being invoked on join (#3554, also in 1.20.2+)\r\n- `networkCodec` being ignored in custom dynamic registry\r\n- `SKIP_EMPTY_SYNC_REGISTRIES` being ignored in actually syncing registry & client making the registry (previously it only applied to tags)\r\n- Custom dynamic registry tag syncing relying on class loading order\r\n",
    "head_branch": "reg-sync/24w04a",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix porting issues in Dynamic Registries API (#3555)\n\n* Fix TAGS_LOADED event not being invoked on client join\r\n\r\n* Skip loading empty dynamic registries (client-side)\r\n\r\n* Update ClientTest to handle 24w04a\r\n\r\n* Skip syncing empty dynamic registries (server-side)\r\n\r\n* Fix dynamic registry using wrong codec, tag syncing depending on class load order\r\n\r\n* Fix DynamicRegistrySetupEvent being called on client\r\n\r\n* Test syncing empty registry's tag\r\n\r\n* Actually check skipOnEmpty\r\n\r\n* Downgrade AssertionError to log due to MC-268096"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305c90ac82a74541b203c",
    "number": 3550,
    "body": "`NumberFormatType` and `PositionSourceType` should be ported to 1.20.4. (Older versions unaffected.)",
    "head_branch": "reg-sync/fix-unsynced-attrs",
    "is_a_fork": true,
    "comments": [
      "High priority is for 1.20.5-exclusive attribute sync. Others are low priority.",
      "Going to merge into 1.20.5 now, will backport to 1.20.4 later"
    ],
    "commit_messages": [
      "Fix some registries being unsynced (#3550)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305ca0ac82a74541b203d",
    "number": 3548,
    "body": "This PR extends the Data Attachment API to allow data attachments on `ProtoChunk`s, rather than just `WorldChunk`s. Data on a `ProtoChunk` is kept when it is converted to a `WorldChunk`. This allows storing custom data during worldgen and reading it during gameplay.\r\n\r\n### Individual changes:\r\n- Move the interface injection from `WorldChunk` to `Chunk`.\r\n- Transfer the attachment of a `ProtoChunk` to a `WorldChunk` in the `WorldChunk` constructor.\r\n  - I've reused the `copyOnRespawn` helper method for that and renamed it to `transfer` to better match its extended use.\r\n- A separate mixin to `WrapperProtoChunk` that simply forwards the calls to the wrapped `WorldChunk`.\r\n\r\n### What still needs to be decided:\r\n- [X] Should `WrapperProtoChunk.setAttached` adhere to the `propagateToWrapped` flag? -> We ignore the flag and always write to the `WorldChunk`.\r\n- [X] What should happen when trying to attach a persistent attachment to a `ProtoChunk` with chunk status `EMPTY`? Since those aren't saved, the attachment would get lost too. Options are:\r\n  - ~~Save empty `ProtoChunks` when an attachment is present. (I would still need to investigate how to do that.)~~\r\n  - ~~Throw an exception when trying to attach a persistent attachment (but allow non-persistent attachments).~~\r\n  -> We log a warning. The javadoc documents this behavior. \r\n\r\n### Tests:\r\nI've extended the testmod to test saving data to a `ProtoChunk`s.\r\n- A custom configured feature that writes an attachment to the `ProtoChunk` if it is in the [0, 0] chunk, then testing whether the attachment is present in the WorldChunk after world-load. This tests both writing to `ProtoChunk`s and the `WorldChunk` conversion. \r\n- To test persistence in `ProtoChunk`s, I'm adding an attachment to a far chunk. This requires this chunk to not be generated beforehand.",
    "head_branch": "protoChunk-data-attachment",
    "is_a_fork": true,
    "comments": [
      "To elaborate further on the 2 open questions:\r\n \r\nThe `propagateToWrapped` flag is basically always false, so the question is rather whether WrapperProtoChunks should allow setting attachments at all.\r\n\r\nThere are basically 2 use cases for writing attachments to ProtoChunks: The first use case is writing to the currently generating chunk during worldgen. For this case, neither of the 2 open questions matter, as we never deal with WrapperProtoChunks, nor with chunk status EMPTY. Maybe you'd want to write to neighboring chunks, but even then you\r\nprobaby won't encounter a WrapperProtoChunks unless someone was manually pruning chunks. In that case it might be confusing if setting blocks is silently ignored but writing attachments is allowed.\r\n\r\nThe second use case is saving to chunks at arbitrary positions, i.e. writing something like:\r\n```java\r\noverworld.getChunkManager().getChunk(x, z, ChunkStatus.EMPTY, true).setAttached(...);\r\n```\r\nIf we want to support this use case (and I could very well live with a \"no\" to this questions), then the questions become more relevant:\r\n- Writing to ProtoChunks with `EMPTY` chunk would be helpful, but just exchanging `EMPTY` with `STRUCTURE_STARTS` (the very first actual generation state) just works without changes. (And is what I currently do in the testmod)\r\n- Writing in `WrapperProtoChunks` would be helpful as then you don't need to differentiate between chunks that are fully generated and those that aren't \r\n\r\n",
      "I've extended the testmod to include a direct test of writing to protochunks during worldgen, which is the main use case of this PR.",
      "> Writing to ProtoChunks with EMPTY chunk would be helpful, but just exchanging EMPTY with STRUCTURE_STARTS (the very first actual generation state) just works without changes. (And is what I currently do in the testmod)\r\n\r\nThat sounds like a decent solution, please document it in AttachmentTarget in an extra section. Don't forget to also update the references to WorldChunk that are already present."
    ],
    "commit_messages": [
      "Extend Data Attachment API to ProtoChunk (#3548)\n\n* allow data-attachment on ProtoChunks\r\n\r\n- moved interfaceInjection from WorldChunk to Chunk\r\n- dataAttachment saving on ProtoChunks in ChunkSerializer\r\n- copy attachment from ProtoChunk to WorldChunk on creation.\r\n- make WrapperProtoChunk wrap attachment calls to WorldChunk\r\n\r\n* add test for data-attachment on ProtoChunks, and extend testmod.\r\n\r\n* code style and license headers\r\n\r\n* fix typos in javadoc\r\n\r\n* extend testmod to test setting attachment during worldgen.\r\n\r\n* code formatting\r\n\r\n* fix testmod: don't crash when feature isn't placed (i.e. on GameTest server)\r\n\r\n* add warning when adding persistent attachment to chunk with status EMPTY.\r\n\r\n* update javadoc\r\n\r\n* update javadoc to reference ServerLivingEntityEvents#MOB_CONVERSION"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662305cb0ac82a74541b203e",
    "number": 3547,
    "body": "This Pr adds an api for the new 1.20.5 transfer packets and cookie system. Currently the api can be accessed through any of the network handlers (except handshake). \r\n\r\nTransfer api:\r\n```java\r\npublic interface ServerTransferable {\r\n\r\n    void transferToServer(String host, int port);\r\n\r\n    boolean wasTransferred();\r\n}\r\n```\r\nCookie Api:\r\n```java\r\npublic interface ServerCookieStore {\r\n\r\n    void setCookie(Identifier cookieId, byte[] cookie);\r\n\r\n    CompletableFuture<byte[]> getCookie(Identifier cookieId);\r\n}\r\n```",
    "head_branch": "1.20.5",
    "is_a_fork": true,
    "comments": [
      "Hmmm, The injected interfaces don't seem to be working without a cast (testing in an external dev environment). Does any one see anything obviously wrong? (Could also be my dev env lol)",
      "Try run genSource on the networking project.",
      "Yeah doesn't seem to fix it. Issue happens both in the test mod & in a full external environment",
      "@modmuss50 Just wanted to put it out there, would a pre transfer event be useful? In case mods want to set cookies when another mod triggers a transfer? This may also work nicely with the new /transfer command ",
      "Hey, sorry for being so slow to get back on this. Once my exams are done this week I should hopefully be able to finish this up. Thanks for your help!"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305cc0ac82a74541b203f",
    "number": 3544,
    "body": "Closes #3541 \r\n\r\nThe graph on https://github.com/FabricMC/fabric/pull/3244 says that it sends `c:register` for the play phase but sends for the config phase instead. \r\nThe channel IDs for the config phase have already been sent with the `minecraft:register` payload.",
    "head_branch": "c-register-play-phase",
    "is_a_fork": true,
    "comments": [
      "The issue of ```ServerPlayNetworking.canSend()``` not working properly when entering the server through velocity has also been fixed. Will it be ported to 1.19.4 or other versions?",
      "This fix only applies to 1.20.2 and upwards, before that this data was sent during the login phase and will not be proxied. You might be able to get around it by registering your packet handler during ServerPlayConnectionEvents.INIT, although I havent tried this.",
      "You can make it work with Velocity I believe, you just need them to configure it to enable `ping-passthrough` I believe,",
      "> 我相信你可以让它与 Velocity 一起工作，你只需要他们配置它来启用我相信，`ping-passthrough`\r\n\r\n```ping-passthrough = \"all\"```,```ping-passthrough = \"mods\"```,```ping-passthrough = \"description\"```, ```ping-passthrough = \"disabled\"```    I tried these settings, but they still don't work properly",
      "> This fix only applies to 1.20.2 and upwards, before that this data was sent during the login phase and will not be proxied. You might be able to get around it by registering your packet handler during ServerPlayConnectionEvents.INIT, although I havent tried this.\r\n\r\nI tried it, but it didn't work.",
      "FYI for 1.20.5 this fix is included in: https://github.com/FabricMC/fabric/pull/3537"
    ],
    "commit_messages": [
      "send `c:register` packet for play phase instead of config (#3544)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305cd0ac82a74541b2040",
    "number": 3537,
    "body": "## Changes\r\n- Previously deprecated `fabric-containers-v0` has been removed\r\n- FabricBlockSettings and FabricItemSettings have been deprecated, \r\n  - You should now use `AbstractBlock.Settings` and `Item.Settings`\r\n  - Previous functionality has been interface injected onto the vanilla classes.\r\n- `CustomDamageHandler` now passes the `EquipmentSlot` and a `Runnable` as the break callback.\r\n- Major refactor to the networking APIs (see bellow)\r\n- FabricParticleTypes now supports the `Codec` and `PacketCodec`\r\n- Custom ingridents now provide a `PacketCodec` instead of the old read/write methods using `PacketByteBuf`'s\r\n\r\n## Networking\r\n\r\nMojang heavily refactored packets in this version to use the new `PacketCodec` class, and also changed their CustomPayload class to be an almost perfect replacement for our `FabricPacket` and `PacketType` classes. All APIs that previously worked around using a standalone `PacketByteBuf` have been removed, you must now use a `CustomPayload` with `PacketCodec`'s.\r\n\r\nEach `CustomPayload` must have a `CustomPayload.Id` and `PacketCodec` registered with the new `PayloadTypeRegistry` before you are able to send or recieve them.\r\n\r\n```java\r\nPayloadTypeRegistry.playC2S().register(MyExamplePayload.ID, MyExamplePayload.CODEC);\r\n\r\nprivate record MyExamplePayload(String value) implements CustomPayload {\r\n  public static final CustomPayload.Id<MyExamplePayload> ID = CustomPayload.id(\"fabric:c2s_play\");\r\n  public static final PacketCodec<RegistryByteBuf, MyExamplePayload> CODEC = PacketCodecs.STRING.xmap(MyExamplePayload::new, MyExamplePayload::value).cast();\r\n\r\n  @Override\r\n  public Id<MyExamplePayload> getId() {\r\n    return ID;\r\n  }\r\n}\r\n```\r\n\r\nThe above example shows a basic example of a pyload, that has been registered for the play phase and will be sent from the client to the server. Payload types need to be registered on both the client and server regardless of the drection they are being sent. Bi-directional packets will need to be registered twice for both directions.\r\n\r\nListening to the payload is very similar to the old packet based handlers, using `ServerPlayNetworking.registerGlobalReceiver`\r\n\r\n### Removed classes:\r\n- FabricPacket\r\n- FutureListeners\r\n- PacketType\r\n\r\nA full blog post will be written closer to 1.20.5 release, detailing all of the changes.",
    "head_branch": "port/24w03a",
    "is_a_fork": true,
    "comments": [
      "Going to merge this, I fully expect there to be issues so please make sure to open issues so we can fix them 👍 Thanks everyone for the help, its highly appreciated."
    ],
    "commit_messages": [
      "Port to 24w03b (#3537)\n\n* Deprecate FabricBlockSettings\r\n\r\n* Deprecate FabricItemSettings\r\n\r\n* Start on 24w03a\r\n\r\n* Main menu :)\r\n\r\n* Update mappings\r\n\r\n* PayloadTypeRegistry\r\n\r\n* Networking part 2 of many\r\n\r\n* Networking part 3 of many\r\n\r\n* Networking part 4 of many\r\n\r\n* Recipe api\r\n\r\n* Port Item API to 1.20.5\r\n\r\n* Is this even right?\r\n\r\n* Port FabricParticleTypes to 1.20.5\r\n\r\n* Remove redundant fuel caching logic\r\n\r\n* Remove fabric-containers-v0, deprecated since 2020\r\n\r\n* Regsync work\r\n\r\n* Adapt screen handler to new networking\r\n\r\n* Update yarn + more work\r\n\r\n* More mapping updates\r\n\r\n* Compile fixes\r\n\r\n* Checkstyle + small fixes\r\n\r\n* Single and multiplayer fixes\r\n\r\n* Handle play packets on main thread.\r\n\r\n* Update mappings\r\n\r\n* Even more networking\r\n\r\n* Networking tests\r\n\r\n* Fix todo's\r\n\r\n* Update javadocs\r\n\r\n* Networking API improvements\r\n\r\n* Some small regsync refactors\r\n\r\n* Fix handling of null NBT in NbtIngredient\r\n\r\n* Update fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/api/object/builder/v1/block/FabricBlockSettings.java\r\n\r\nCo-authored-by: ErrorCraft <51973682+ErrorCraft@users.noreply.github.com>\r\n\r\n* Update fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/api/object/builder/v1/block/FabricBlockSettings.java\r\n\r\nCo-authored-by: ErrorCraft <51973682+ErrorCraft@users.noreply.github.com>\r\n\r\n* Add context objects\r\n\r\n* ChannelInfoHolder.getPendingChannelsNames -> fabric_getPendingChannelsNames\r\n\r\n* Fix crash\r\n\r\n* send `c:register` packet for play phase instead of config (#3544)\r\n\r\n* Bump version\r\n\r\n---------\r\n\r\nCo-authored-by: ErrorCraft <51973682+ErrorCraft@users.noreply.github.com>\r\nCo-authored-by: apple502j <33279053+apple502j@users.noreply.github.com>\r\nCo-authored-by: Drex <nicknamedrex@gmail.com>\r\nCo-authored-by: deirn <deirn@bai.lol>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305ce0ac82a74541b2041",
    "number": 3535,
    "body": "### The Issue: \r\nWhen a chunk section (16x16x16 area) is entirely made of blocks that return true for isAir method, vanilla will convert ALL blocks in that chunk section to Blocks.AIR regardless of what block it is. This does impact CAVE_AIR and VOID_AIR too.\r\n\r\nIf a mod has a modded air block returning true for isAir, they are getting this nuking behavior above without knowing it because of how hidden and inconsistent this behavior is. There is no use case for wanting this behavior for a block so no need to expose this for modders to opt into since no one will do so.\r\n\r\nVanilla bug report: https://bugs.mojang.com/browse/MC-232360\r\n\r\n### Solution 1: Tags:\r\nI thought about this but given how widely and heavily used isAir checks are present in just about most mods, it would be impossible to get everyone to switch all of those checks to a tag check. Never will happen.\r\n\r\n### Solution 2: Change the ChunkSection to ignore modded air blocks:\r\nEasiest solution. 2 mixins. And now all modded isAir blocks no longer will be converted into Air automatically by vanilla. It is safe for mods to mark their block as air and get all the isAir compatibility checks they want with other mods. Vanilla air block behavior is unchanged so CAVE_AIR and VOID_AIR still converts to AIR. \r\n\r\n### Why I want this: \r\nI have Heavy Air and Windy Air block and I want them to be treated like air for all modded and vanilla isAir checks. I just don't want them magically disappearing from a chunk section because someone mined out the last solid block from the section somewhere else. Makes zero logical sense.",
    "head_branch": "IsAirFixes",
    "is_a_fork": true,
    "comments": [
      "> Although this is an observable deviation from a vanilla behavior, it is likely acceptable(?)\r\n\r\nNo, this should behave 100% the same for vanilla blocks if im understanding this corrrectly. Modded air blocks should have the different behaviour.",
      "Ah yeah, whoops.",
      "Has this been actually brought up with some of the folks working on Lithium? They'd be more qualified to tell what performance repercussions this could have.",
      "@Syst3ms Lithium devs are not the only people that know about optimizations. I already talked with several people who understand JVM optimizations and they said this is not an issue. The JVM is smart. The isOf methods are pure functions so the JVM will be able to optimize them all into a single call.\r\n\r\nAnd Lithium mixins do not interfere here.\r\nhttps://github.com/CaffeineMC/lithium-fabric/blob/b8f2818899bfcdae1bbf34991f2d3351e72c2f6c/src/main/java/me/jellysquid/mods/lithium/mixin/chunk/no_locking/ChunkSectionMixin.java#L20\r\n\r\nhttps://github.com/CaffeineMC/lithium-fabric/blob/b8f2818899bfcdae1bbf34991f2d3351e72c2f6c/src/main/java/me/jellysquid/mods/lithium/mixin/util/block_tracking/ChunkSectionMixin.java#L28",
      "Can there be a opposite check, incase a mod adds an isAir block but _does_ want the nuking behavior? Eg. wishing well air from draylar's wishing well mod (idk if it's still around). It would somewhat make sense for the air to disappear if someone removed all the surrounding blocks since there's no well there anymore in the same way cave air gets destroyed because there's no cave there anymore",
      "@Devan-Kerman That would require adding a new method to FabricBlockSettings or so and that was discouraged for this PR because people wanted to wait to see what Mojang does with data driven blocks. Also, FabricBlockSettings is being deprecated soon too.\r\n\r\nAlso the nuking behavior is terrible with player expectations too. It's specifically about an entire chunk section empty which a player would have to know about the bounds in a technical sense and deliberately remove every block from there. If they have a torch or say string anywhere in chunk section, it won't nuke. So even in the case of vanilla itself, this nuking behavior is extremely unintuitive and you should not rely on it for removing your block if the environment changes imo. There's much better solutions out there you can do",
      "I think this should be decided by thinking about whether fabric wants to change the behavior of modded air blocks depending on whether fabric is present. The vanilla behavior is bugged / not desirable, but it is the vanilla behavior. See also: Parrot monster spawner does not treat all air types equally https://bugs.mojang.com/browse/MC-232359 .\r\nThe fact that fabric does not modify any behavior is very valuable. The concrete behavior that is being changed here is also observable ingame with vanilla features, but even more with possible modded features (which is why the PR was created).\r\n\r\nI would prefer anything that allows modders to specify which behavior they want, defaulting to the (broken) vanilla behavior. Forcing a change in behavior on mods that do not have a dependency on fabric-api does not sound like a good idea.",
      "@2No2Name just to clarify on top of what you said, this PR preserves the bug for vanilla blocks so there zero change in behavior right now with the PR in game with vanilla blocks. It only makes modded blocks not get the bugged behavior so that modders do not inadvertently get the bugged behavior without knowing about it.",
      "There is still the point that mods not depending on Fabric API will have behaviour changes between with it vs. out; it's likely better as opt-in, or if possible, enforced on if it was depending on Fabric API.",
      "> mods not depending on Fabric API\r\n\r\nI know this is about being thorough but generally, almost every fabric mod runs Fabric API. It’s even enforced in some launchers to always install. I cannot see ever a case where a player would actually be playing without Fabric API so mods without Fabric API is kinda a moot point.\r\n\r\nEspecially content mods with blocks. Heck, to make a custom block, you need resources and modded resources don’t load without Fabric API right? Thus any mods with blocks is forced to require Fabric API or else block assets/data files will not be loaded. \r\n\r\n\r\nEdit: Figured it might be good for me to bring up the question of what possible use case could mods even want this nuking by chunk section behavior at all. Even if used for a marker for some wild modded purpose, it still makes no sense to have it delete based on chunk section. \r\n\r\nSituation 1: Marker is in center of chunk section. All other blocks are remove from section. Marker is deleted with nothing around. Looks ok\r\n\r\nSituation 2: Marker is at any edge of chunk section and the next chunk section is solid blocks. The marker is deleted due to its own section being empty. In world, marker was next to solid blocks, yet nuked. Looks weird as heck. Modder: “Why this happen???”\r\n\r\nSituation 3: Marker is at any edge of chunk section, and there a few blocks on the opposite edge of the chunk away from marker. Marker refuses to be nuked. In world, marker looks like it has nothing around like situation 1 but it doesn’t disappear this time. modder: “wtf is going on???”\r\n\r\nSo in world, the nuking just feels random of whether it happens or not. As a result, whatever modded purpose you had for the marker will now also feel random whether it stays or disappears. It also means you cannot use it in say, giant rooms in structures that have a large space bigger than 16x16x16. It also can be randomly deleted based on where the structure is placed as depending on where in chunk section marker is placed like how situation 1 and 3 shows. There just doesn’t seem to be a valid modded use case for this nuking behavior that I can think of"
    ],
    "commit_messages": [
      "Make chunk sections only convert vanilla air blocks to AIR (#3535)\n\n* Make chunk sections only convert vanilla air blocks to AIR\r\n\r\n* angry checkstyles calmed\r\n\r\n* Comments added for future reference"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662305ce0ac82a74541b2042",
    "number": 3534,
    "body": "- Deprecate FabricBlockSettings & FabricItemSettings.\r\n- Add injected FabricItem.Settings interface replacing FabricItemSettings functionality. \r\n- The existing vanilla Block Settings should provide most if not all of the functionality that FabricBlockSettings provided",
    "head_branch": "deprecate/block-settings",
    "is_a_fork": true,
    "comments": [
      "Incorporated into #3537."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305cf0ac82a74541b2043",
    "number": 3533,
    "body": "This Pr adds two events (`StartSave` & `EndSave`). These events are called when the server starts and stops its periodic saving, as well as when the sever shuts down and when the `/save-all` command is run.\r\n\r\nCommon use cases mainly focus on mods that store data in a custom way (custom files, databases, etc) and need a simple way to periodically save data to reduce data loss.\r\n\r\nI found myself using these mixins in a lot of my projects, and figured it wouldn't hurt to share them here. Please let me know if you would like any changes or If this pr isn't something your interested in.\r\n\r\nCheers and happy modding!",
    "head_branch": "1.20.4",
    "is_a_fork": true,
    "comments": [
      "Let me know what other changes you would like, however I wont be able to get to them until tomorrow."
    ],
    "commit_messages": [
      "Add Save Events to Server Lifecycle Events (#3533)\n\n* Add Server Begin Save and Server End Save event\r\n\r\n* rename events\r\n\r\n* add tests\r\n\r\n* pass more params through"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662305d00ac82a74541b2044",
    "number": 3531,
    "body": "Closes #3530\r\n\r\nIn #3394 the addition of global receivers is moved to `AbstractNetworkAddon#lateInit`, but it never gets called for login addons.\r\nThis also fixes the login `INIT` events not being called.\r\n\r\nNeeds to also be backported to 1.20.2.",
    "head_branch": "login-late-init",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix login network addon not properly initialized (#3531)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305d10ac82a74541b2045",
    "number": 3528,
    "body": "The vanilla code now includes that `shouldTick` call.",
    "head_branch": "1.20.4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't tick gametests if the server isn't ticking (#3528)\n\n* Don't tick gametests if the server isn't ticking\r\n\r\n* Fix import order"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305d20ac82a74541b2046",
    "number": 3523,
    "body": "This is a draft!\r\n\r\nI'm still working on it, but in the meantime I want to get feedback and ideas on how to improve.\r\n\r\n---------------\r\n\r\n# What is this?\r\n\r\nThe goal of this PR is to introduce API to Fabric that will allow mods to more easily render additions to player and entity models. I wanted to make it possible for a mod to subscribe to receieve events whenever a specific named part of a model is rendered (such as the player's head). They should then recieve as part of the event enough information to render additional accessories (like a hat) onto the player's head using the top face as a point of fixture.\r\n\r\nThe head is a trivial example, though, so to try for something a bit more complicated, consider this scenario:\r\n\r\n- Mod A is a backpack mod. It wants to render a backpack onto the player's back whenever their item is equipped.\r\n- Mod B is \"Mine Little Pony\". It replaces the player's entire model with that of a four-legged creature.\r\n\r\nIf Mod A hardcodes the position and orientation of its backpack, when Mod B is installed, the backpack may appear in the wrong location (clipping into the pony's back). Mod A would have to add specific support for Mod B in order for them both to render in a compatible way, which puts the burden of implenting this onto Mod A's developers who may not be interested in doing this.\r\n\r\nThis API is intended to resolve this (and potentially several others), in addition to providing better tools for mods to add more complex additions to player models).\r\n\r\nIf instead, Mod A implemented the rendering for their backpack using this API, they can instead add an event for when the player's torso is rendered, grab the north face, and orient their backpack to that.\r\n\r\nThen, so long as the part for the player's torso is oriented correctly by Mod B, the backpack from Mod A will always appear correctly on the differently-shaped model.\r\n\r\n# Things this API adds\r\n\r\nThere are three types of events:\r\n- The general event\r\n   This is fired when a model part is rendered. Doesn't matter when, you get notified of it. The only context you get for this event listener is the part and whatever was given when rendering it.\r\n   \r\n- The entity event\r\n   This one is specifically only fired when a model is being rendered for an entity (via EntityRendererDispatcher). \r\n   You get notified when the model is being rendered for an entity matching the type you specify, and you receive the entity as part of your context.\r\n\r\n- The block entity event\r\n   Same as the entity event but for block entities\r\n\r\n- PartView, CubeData, FaceData\r\n    The ModelPart being rendered is provided in the form of a PartView which gives you readonly access to pretty much everything you need to know about the ModelPart and its contents.\r\n\r\n- ModelVisitor\r\n    PartViews can be traversed using a visitor pattern. You can create a visitor using ModelVisitor.builder() and specify actions to perform for a Part, a Cube, and a Face. Or you can just query the data using PartView.cubes()\r\n\r\nWhen registering for an event you specify the name/path of the part you want to get events for, and register with one of the three types of event listeners.\r\n\r\nExample that would give the player a second head:\r\n```\r\nModelPartCallbacks.get(PartTreePath.of(EntityModelPartNames.HEAD)).register(EntityType.PLAYER,\r\n        (player, partView, matrices, vertexConsumer, tickDelta, light, overlay, r, g, b, a) -> {\r\n     partView.part().pivotX = -5;\r\n     partView.part().render(matrices, vertexConsumer, light, overlay, r, g, b, a);\r\n     partView.part().pivotX = 4;\r\n});\r\n```\r\n\r\nYou can also specify a `MatchingStrategy` (default is ENDS_WITH) to change the behaviour in how it decides which parts match the path given.\r\n\r\nThis example will fire for any parts contained within the player's head:\r\n\r\n```\r\nModelPartCallbacks.get(ModelPartCallbacks.MatchingStrategy.STARTS_WITH, PartTreePath.of(EntityModelPartNames.HEAD)).register(EntityType.PLAYER, \r\n        (player, partView, matrices, vertexConsumer, tickDelta, light, overlay, r, g, b, a) -> {\r\n    // ...\r\n});\r\n```\r\n\r\n![image](https://github.com/FabricMC/fabric/assets/6429283/b3e97fa8-19ab-4eb5-a5f3-5a1a505df53b)\r\n\r\n![image](https://github.com/FabricMC/fabric/assets/6429283/e40bd82e-dea0-4de2-82df-35b65f99a9a5)\r\n",
    "head_branch": "model-callbacks",
    "is_a_fork": true,
    "comments": [
      "The module name should be `fabric-model-events-v1`.\r\n\r\nhttps://github.com/FabricMC/fabric/blob/a462da68c68e109073526be5dd1ae8803e642435/CONTRIBUTING.md?plain=1#L289-L291",
      "> The module name should be `fabric-model-events-v1`.\r\n> \r\n> https://github.com/FabricMC/fabric/blob/a462da68c68e109073526be5dd1ae8803e642435/CONTRIBUTING.md?plain=1#L289-L291\r\n\r\nThe thing you quoted appears to disagree...?",
      "> Event modules should have the `-events` suffix instead.\r\n\r\nThis seems to be an event module?",
      "> > Event modules should have the `-events` suffix instead.\r\n> \r\n> This seems to be an event module?\r\n\r\nHm okay",
      "Oh no, another module. Could we just add this to Model Loader or Rendering APIs?",
      "Something I'd like some feedback on:\r\n\r\n1. Thread safety in `ModelRenderContext.java`.\r\n  Since this is entirely connected to rendering, I would presume this is always being accessed from the same thread. It's pretty easy for me to fix this, I just want to know if this is this a real concern I should address? \r\n  \r\n2. Preconditions\r\n   In a few places I am using `Objects` and `Preconditions` for doing sanity checks. Is there a preferred alternative I should be using here instead?\r\n\r\n3. Event parameters\r\n   I've included what I think is a reasonable set of parameters, basically the same as what you'd need to specify when calling ModelPart#render. I recognise there might be some use in providing the `VertexConsumers` in use as well. Is there something else worth considering for this?\r\n   \r\n   Options are either I can add it as a parameter to the event, change the existing parameter (not really a fan as they already have a lot) or add additional getters to PartView (as that is intended to be a convenient expansion point to the api as it can serve the role as a `Event` object.\r\n\r\n4. Cancelling\r\n   It's technically possible to allow mods to cancel part rendering by adding a boolean return. I thought about doing that, but then again the handler has all the power to change the model part instance they're given.\r\n   (Although hiding it may be a special case for providing specific support for cancelling as simply setting `ModelPart#hidden = true` would also prevent future invokations of the event)\r\n   \r\n5. Traversal\r\n   I'm on the fence about keeping that. It's technically possible to manually iterate the data views, the traverser can just do it a little more efficiently since it has access to api internals. I'm not a fan of constructing them the way they are being done, however.\r\n   \r\n   The traverser does have the small advantage that it has baked-in handling for all the matrix stack transforming and rotating needed to render stuff where the part is during traversal (which is how I produced the screenshots in the OP) \r\n\r\n6. No lists\r\n   The DataCollection<T> class is not a list, nor did I ever have any intention for them to be used like one (even though they have random access and iteration). They're there as a way to get the first and last element as an optional, with values computed and cached internally upon demand so we're not heavily impacting render performance.\r\n   \r\n   I also anticipate that someone could optimize them further (and I likely will revise it myself during the course of this PR)",
      "> In a few places I am using Objects and Preconditions for doing sanity checks. Is there a preferred alternative I should be using here instead?\r\n\r\nBoth of those are good options, the contributing guidelines mention `Objects` directly too and `Preconditions` is also widely used."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305d20ac82a74541b2047",
    "number": 3522,
    "body": "This PR allows `FabricCodecDataProvider` to access the dynamic registries if it is passed in the constructor. Now, I have a couple of issues with this implementation myself because I didn't want to cause a breaking change, the biggest one being that if you do not override the correct method in your subclass, it won't generate any files. Using the `FabricCodecDataProvider#FabricCodecDataProvider(FabricDataOutput, CompletableFuture, DataOutput.OutputType, String, Codec)}` constructor and then the `FabricCodecDataProvider#configure(BiConsumer)` method won't generate anything as it's never called.\r\n\r\nThis could all be avoided by always requiring a `CompletableFuture<RegistryWrapper.WrapperLookup>` in the constructor and by adding said `RegistryWrapper.WrapperLookup` to the `configure` method, but that would be a breaking change. We would end up with a much more graceful implementation though.",
    "head_branch": "registry-codec-data-provider",
    "is_a_fork": true,
    "comments": [
      "I'd argue that since the datagen module only used in dev, it's fine to break the API.",
      "> I'd argue that since the datagen module only used in dev, it's fine to break the API.\r\n\r\nNo, I dont think this is a something we want to do. A few people actually use this in prod as well (for runtime resource gen)",
      "I recommend breaking this in 1.20.5.",
      "> > I'd argue that since the datagen module only used in dev, it's fine to break the API.\r\n> \r\n> No, I dont think this is a something we want to do. A few people actually use this in prod as well (for runtime resource gen)\r\n\r\nInteresting, I thought people uses different API for that. Still, I don't think the datagen module needs to follow the strict backwards compatibility promise as other modules."
    ],
    "commit_messages": [
      "Allow `FabricCodecDataProvider` to access dynamic registries (#3522)\n\n* Add CompletableFuture to FabricCodecDataProvider\r\n\r\n* Deprecate the old method and constructor, and fix the style\r\n\r\n* Fix the style for real this time\r\n\r\n* Add exceptions to the configure methods\r\n\r\n* Apply suggestions from code review\r\n\r\n---------\r\n\r\nCo-authored-by: modmuss <modmuss50@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662305d30ac82a74541b2048",
    "number": 3521,
    "body": "Relevant issue: https://github.com/FabricMC/fabric/issues/3230\r\n\r\nFrom 1.20.1(?) to 1.20.4, the injection point for the CoreShaderRegistrationCallback event has been broken: it triggers _every time_ vanilla registers a core shader, rather than once during the shader reload cycle. In practice, this means if you rely on the event for loading shaders and use the event as modeled in the test suite, your shader is parsed/validated about _60 times per reload_. An extra implication of this is that if your shader has any unused fields, it will spam console ~60 times telling you to remove it (compared to a single warning per reload, which is what happens in a vanilla environment).\r\n\r\nI removed the slice in favor of injecting at the first add call. A potential adjustment might be injecting at the last add call (to load modded shaders after vanilla shaders), but I'm not sure how to hit that inject point without leaving the try/catch block.\r\n\r\n### Testing / Replicating\r\n\r\nhttps://github.com/FabricMC/fabric/blob/a462da68c68e109073526be5dd1ae8803e642435/fabric-rendering-v1/src/testmodClient/java/net/fabricmc/fabric/test/rendering/client/HudAndShaderTest.java#L45-L49\r\n\r\nPlace a print statement in this callback, or register a shader that will intentionally print a warning (such as one with an unused uniform). The print/warning will log approximately 60 times, once per vanilla core shader registration. The callback should only be triggered once, which is what happens after this patch is applied.\r\n\r\n---\r\n\r\nThank you in advance for reviews and/or change requests! 💗",
    "head_branch": "1.20.4",
    "is_a_fork": true,
    "comments": [
      "> I removed the slice in favor of injecting at the first add call. A potential adjustment might be injecting at the last add call (to load modded shaders after vanilla shaders), but I'm not sure how to hit that inject point without leaving the try/catch block.\r\n\r\nYou can do `@At(value = \"INVOKE_ASSIGN:LAST\"` to inject immediately after the final `List#add`",
      "You cannot, selectors like that are only for use in `@Slice`s.",
      "You can however use a slice to get that selector functionality. This should also absolutely not use locals. I would suggest the following:\r\n```java\r\n@WrapOperation(\r\n\t\tmethod = \"loadPrograms\",\r\n\t\tslice = @Slice(\r\n\t\t\t\tfrom = @At(value = \"INVOKE:LAST\", target = \"Ljava/util/List;add(Ljava/lang/Object;)Z\", remap = false)\r\n\t\t),\r\n\t\tat = @At(value = \"INVOKE\", target = \"Ljava/util/List;add(Ljava/lang/Object;)Z\", remap = false)\r\n)\r\nprivate boolean registerShaders(List<Pair<ShaderProgram, Consumer<ShaderProgram>>> programs, Object e, Operation<Boolean> original, ResourceFactory factory) throws IOException {\r\n\tboolean result = original.call(programs, e);\r\n\tCoreShaderRegistrationCallback.RegistrationContext context = (id, vertexFormat, loadCallback) -> {\r\n\t\tShaderProgram program = new FabricShaderProgram(factory, id, vertexFormat);\r\n\t\tprograms.add(Pair.of(program, loadCallback));\r\n\t};\r\n\tCoreShaderRegistrationCallback.EVENT.invoker().registerShaders(context);\r\n\treturn result;\r\n}\r\n```",
      "Superseeded by: https://github.com/FabricMC/fabric/pull/3886\r\n\r\nMany thanks for the PR"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305d40ac82a74541b2049",
    "number": 3520,
    "body": "99% of the work was done in #3295 by @Phoupraw just a 1.20.4 version\r\n\r\n~~This is the same, just targgeting 1.20.4 and using @WrapOperation in place of @Redirect~~",
    "head_branch": "stack-aware-food",
    "is_a_fork": true,
    "comments": [
      "I wouldn’t use WrapOperation for any of those. They are all meaningful unconditional replacements and as such they should always be the innermost thing in a wrapper chain, and if another mod wants to do a meaningful unconditional replacement as well then they should conflict. For those reasons Redirect is the right choice. The ThreadLocal should however be replaced with a `@Share`.",
      "> I wouldn’t use WrapOperation for any of those. They are all meaningful unconditional replacements and as such they should always be the innermost thing in a wrapper chain, and if another mod wants to do a meaningful unconditional replacement as well then they should conflict. For those reasons Redirect is the right choice. The ThreadLocal should however be replaced with a `@Share`.\r\n\r\nReverted that change and moved to share. Thats a good point, I didnt really give it much thought 👍 "
    ],
    "commit_messages": [
      "Stack aware `getFoodComponent` (#3520)\n\n* Stack aware `getFoodComponent`\r\n\r\nCo-authored-by: Phoupraw <50520903+phoupraw@users.noreply.github.com>\r\n\r\n* Back to redirects\r\n\r\n---------\r\n\r\nCo-authored-by: Phoupraw <50520903+phoupraw@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662305d50ac82a74541b204a",
    "number": 3517,
    "body": "Closes #3485.",
    "head_branch": "fix-jukebox-state",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix jukebox state getting changed mid-transaction (#3517)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662305d60ac82a74541b204b",
    "number": 3515,
    "body": "Disabling the Mixin AP is quite a large change, with plently of room for things to go wrong, so this will need some good testing.",
    "head_branch": "loom-1-5",
    "is_a_fork": true,
    "comments": [
      "Thinking of changing this to just be the 1.5 update, we can disable the mixin AP later."
    ],
    "commit_messages": [
      "Update to loom 1.5 (#3515)\n\n* Update to loom 1.5\r\n\r\n* Continue to use the mixin AP for now.\r\n\r\n* Bump"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305d70ac82a74541b204c",
    "number": 3512,
    "body": "Alters the processing of cooking recipes so that they accept the following JSON formats for deserialising recipe results:\r\n\r\nVanilla\r\n```\r\n\"result\": \"minecraft:example\"\r\n```\r\nAdditional (Added by this pull request)\r\n```\r\n\"result\": {\r\n    \"item\": minecraft:example\",      (required)\r\n    \"count\": 1                       (optional)\r\n }\r\n```\r\n\r\nSerialisation of recipe results is altered from the vanilla format to the additional object format.\r\n\r\nThere has been fruitful discussion on NBT recipe additions in the following thread:\r\n[Add result NBT and count to crafting and smelting recipes](https://github.com/FabricMC/fabric/issues/3068)\r\nThis modification adds the Mojang crafting result Codec to the cooking result deserialisation Codec. Should a Codec that also accepts NBT be produced for crafting, it should be a simple matter to edit `CookingRecipeSerializerMixin` to use that instead. This should give you NBT smithing recipes for (nearly, see below) free.\r\n\r\nSuggested modifications should NBT recipes be enabled:\r\n(Yarn names) `canAcceptRecipeOutput` in `AbstractFurnaceBlockEntity.class` does not check NBT data when checking whether a recipe is valid. In order to avoid unintended gain/loss of NBT data for recipes, this function would need to check NBT of the outputs too.",
    "head_branch": "1.20.4",
    "is_a_fork": true,
    "comments": [
      "You change the codec, okay, but what about networking?",
      "> You change the codec, okay, but what about networking?\r\n\r\nIirc networking uses the codecs for both serialisation and deserialisation also?\r\n\r\nI assume there may be some slowdown from packets switching from the String format to the JSON object format, but I don't imaging this is particularly significant. Crafting uses the same Codec.",
      "I decided to recheck the code and everything seems fine, so I'm sorry. :D My concern was that network packets might ignore the item NBT. And btw, no, recipe network packets doesn't use codecs ",
      "> I decided to recheck the code and everything seems fine, so I'm sorry :D Btw, no, recipe network packets doesn't use codecs\r\n\r\nAh thanks, must me my faulty memory. I was under the impression that the pipeline was something like `(object) --codec--> (JSON) --magic--> (packets)` but it's been a while. I will need to recheck it 😄 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305d70ac82a74541b204d",
    "number": 3511,
    "body": "While working on #3476, I was surprised to find there is no event for mob conversion. This is a generally useful mechanic to expose, so this PR adds a notification event to listen for it. There is no \"allow\" event as mob conversion happens in a variety of contexts, and what it means to \"cancel\" conversion can mean a lot of very different things.",
    "head_branch": "mob-conversion-event",
    "is_a_fork": true,
    "comments": [
      "Is the plan to get this in before the data attachment API? I think it makes sense to?",
      "Yes, preferrably, that avoids having to make a secondary PR to fix this in data attachment.",
      "Added to last call, should only need a few days at most 👍 ",
      "A special case from vanilla that isn't caught by this is Tadpoles growing up into Frogs, in the `TadpoleEntity#growUp()` method. They are indeed separate entity types, and it utilizes `SpawnReason.CONVERSION` so I believe this is justified to fit this event.",
      "Another issue raised on Discord is that perhaps there needs to be clear JavaDoc explaining that this event only pertains to when the resultant entity is different from the original mob, perhaps using the Red Mooshroom to Brown Mooshroom transformation as an example of something that is explicitly NOT covered.",
      "Charged Creeper is also an example"
    ],
    "commit_messages": [
      "Add mob conversion event (#3511)\n\n* Add mob conversion event\r\n\r\n* spacing\r\n\r\n* use a smarter mixin strategy\r\n\r\n* add pig and villager lightning triggers\r\n\r\n* tyop\r\n\r\nCo-authored-by: haykam821 <24855774+haykam821@users.noreply.github.com>\r\n\r\n* handle tadpole -> frog conversion\r\n\r\n- update javadoc to clarify the handled cases\r\n- document keepEquipment parameter\r\n- improve mixin handler names\r\n\r\n---------\r\n\r\nCo-authored-by: haykam821 <24855774+haykam821@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662305d80ac82a74541b204e",
    "number": 3510,
    "body": "Apologies if this has been raised before - I couldn't see anything obvious, but may have missed some discussion!\r\n\r\nThe block lookup API's `registerForBlockEntities` method currently just registers the passed provider for each valid block for that block entity type. While this allows for efficient lookup of providers, it doesn't guarantee that we'll only receive block entities of the correct type to our `BlockEntityApiProvider`!\r\n\r\nIn some situations, the wrong block entity will be present for a particular block (caused by update suppression or a misbehaving mod, e.g. https://github.com/cc-tweaked/CC-Tweaked/issues/1670). This (incorrect) block entity is then passed off to the `BlockEntityApiProvider`. As providers (especially those registered with the generic `registerForBlockEntity`) will often blind-cast to the expected type, we then get class-cast crashes.\r\n\r\nThe wrong BE being present is definitely a bug (and arguably it would be bettter to catch this early rather than silently failing!). However, I think in this case we should follow vanilla's lead and handle this more gracefully. In this case, we just check whether the correct BE type is present before forwarding it to the user-supplied `BlockEntityApiProvider`.\r\n",
    "head_branch": "defensive-block-entity-lookup",
    "is_a_fork": true,
    "comments": [
      "Does this warrant more than a silent ignore? In principle, block entities and block states should not get out of sync.\r\n\r\nIt would also be problematic for a block having different block entity types depending on the state to use this function because there can only be a single provider for the whole block.",
      "> In principle, block entities and block states should not get out of sync.\r\n\r\nOh agreed! The problem is that in practice (though rare), it does happen! And in that case, we can either crash (the current behaviour) or ignore (which is what vanilla tries to do). I guess we could log and remove the problematic BE, but I think that's too invasive.\r\n\r\nWorth mentioning [NeoForge has the same check](https://github.com/neoforged/NeoForge/blob/4a41fbafc644fb8f6299fed381fc72bf031957eb/src/main/java/net/neoforged/neoforge/capabilities/RegisterCapabilitiesEvent.java#L61-L64)  that I'm proposing here, so I think it's probably reasonable. :p.\r\n\r\n> It would also be problematic for a block having different block entity types depending on the state to use this function because there can only be a single provider for the whole block.\r\n\r\nIn that case, shouldn't the modder be registering via the block rather than BE type? Though yes, I guess this is technically a breaking change, Hyrum's law strikes again!",
      "I think the PR is fine, just food for thought. ;)\r\n\r\nI wouldn't worry about the potential BC, it's really a bug that it would have been working previously.",
      "Thank you!"
    ],
    "commit_messages": [
      "Check for the correct BE type in the lookup API (#3510)\n\nThe block lookup API's registerForBlockEntities method currently just\r\nregisters the passed provider for each valid block for that block\r\nentity.\r\n\r\nHowever, in some situations (such as update suppression or a misbehaving\r\nmod), the wrong block entity will be present for one of these blocks.\r\nThis means that the (incorrect) block entity will be passed off to the\r\nprovider. Providers (especially those registered with\r\nregisterForBlockEntity) will often blind-cast the supplied BE, leading\r\nto crashes.\r\n\r\nWhile the wrong BE being present is a bug, we should follow vanilla's\r\nlead and handle this more gracefully. In this case, we just check\r\nwhether the correct BE type is present before forwarding it to the\r\nmain provider."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305d90ac82a74541b204f",
    "number": 3509,
    "body": "This PR adds a system property to specify the output directory for gametest structures, so you don't have to move them manually after exporting them using the `test export` command. If the property is not specified, it still uses the default `gameteststructures` directory in your run directory.\r\n\r\nExample `build.gradle`:\r\n```gradle\r\nloom {\r\n\truns {\r\n\t\tgametestClient {\r\n\t\t\tinherit client\r\n\t\t\tname \"GameTest Client\"\r\n\t\t\tvmArg \"-Dfabric-api.gametest.structures.output-dir=${file(\"src/gametest/resources/data/mod_id/gametest/structures\")}\"\r\n\r\n\t\t\tsource sourceSets.gametest\r\n\t\t}\r\n\t}\r\n}\r\n```\r\nThis then exports the structures to `src/gametest/resources/data/mod_id/gametest/structures`, which can then read by Fabric API again when running your tests. I require the entire path to be specified, as [modmuss talked about additional search directories in Discord](https://discord.com/channels/507304429255393322/566276937035546624/1192157128744505536) too. On top of that, the `test` command does not allow you to specify identifiers, so the mod id has to be included in the path.",
    "head_branch": "gametest-structure-output",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add a system property for a custom output directory for gametest structures (#3509)\n\n* Add a check for the output directory in the test command\r\n\r\n* Fix style and add a run configuration with the output directory set\r\n\r\n* Update fabric-gametest-api-v1/build.gradle\r\n\r\n---------\r\n\r\nCo-authored-by: modmuss <modmuss50@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305da0ac82a74541b2050",
    "number": 3508,
    "body": "Fixes #3505\r\n\r\nThis was a fun one to figure out, this change ensures that custom payloads are always relaesed on the network thread, and no further processing of them happens on the main thread.\r\n\r\nThis caused a rare race codition where a user might be disconnected from a server sending unknown packets with the following error: `io.netty.util.IllegalReferenceCountException: refCnt: 0`",
    "head_branch": "fix-race-condition-with-unknown-packets",
    "is_a_fork": true,
    "comments": [
      "Thankful that it got fixed so fast, this has been annoying me for more than two weeks now.\r\n\r\nI have found this playing BedWars on the Hypixel Server.\r\nThe server sends custom `badlion:timers` packets which allow the client to display information about the game (Time until new resources spawn, Game Events, etc.) and it does this even if your client doesn't even support those features.\r\n\r\nThis doesn't cause any issues, typically."
    ],
    "commit_messages": [
      "Fix race condition when handling unknown packets. (#3508)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305db0ac82a74541b2051",
    "number": 3504,
    "body": "Vanilla 1.19.3 added atlas definition JSON files, which allow controlling how sprites are added to certain atlases. Each entry in this file uses an `AtlasSourceType`, which uses the configuration provided in the rest of the entry to load an arbitrary amount of sprites. This functionality is incredibly useful for custom sprite loading and things like runtime texture generation. The vanilla code related to `AtlasSource`s and `AtlasSourceType`s is already very well designed; the only thing necessary for custom `AtlasSourceType`s to work is to allow adding them to `AtlasSourceManager#SOURCE_TYPE_BY_ID` and this is exactly what this pull request does.\r\n\r\nThe test mod has been changed to add a custom `AtlasSourceType`, registered with the ID `fabric-rendering-v1-testmod:double`. It generates a sprite where two offset copies of another sprite are layered on top of each other.",
    "head_branch": "pr/1.20.4/custom-atlas-source-types",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add AtlasSourceTypeRegistry (#3504)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662305db0ac82a74541b2052",
    "number": 3503,
    "body": "## Preliminary Information and The Problem\r\n\r\n`ColorResolver` is a vanilla functional interface that gets a color using a biome and some positional information. Vanilla has three such `ColorResolver`s, namely for grass, foliage, and water, which can be found in the `BiomeColors` class. `BlockRenderView#getColor(BlockPos, ColorResolver)` is the main way to use a `ColorResolver`; the default implementation of this method already supports custom `ColorResolver`s, but it is overridden in `ClientWorld`. This implementation hard-codes the three vanilla `ColorResolver`s into an array map and invoking it with a custom `ColorResolver` will throw a `NullPointerException` and crash the game.\r\n\r\nBlockView API v2 already provides a standardized method to retrieve the biome at a given position which can be used within `BlockColorProvider`s. However, `ClientWorld#getColor(BlockPos, ColorResolver)` also provides color blending and caching; using the biome getter to recreate the functionality of a `ColorResolver` would either be very inefficient or very complex. Allowing the use of custom `ColorResolver`s would be much easier for the user.\r\n\r\n## API Design\r\n\r\nThere are two main design options for allowing custom resolvers. Either a registry is added for custom resolvers or the `ClientWorld` implementation is silently patched to accept custom resolvers. The former makes it explicitly known that custom resolvers are supported and makes it very difficult to pass `ColorResolver` objects that are only used once (such as through a capturing lambda; such resolvers are terrible for performance) while the latter is easier to use. This pull request uses the former design of using a registry and throwing an exception in `ClientWorld#getColor(BlockPos, ColorResolver)` if the passed `ColorResolver` is not registered.\r\n\r\n## Implementation\r\n\r\n`ClientWorld` associates each `ColorResolver` to a `BiomeColorCache` in the hard-coded array map. The custom resolvers are not added to this map because array maps have slower retrieval times than hash maps, especially with many entries. The field type of this map is `Object2ObjectArrayMap`, so it is not possible to replace the field value with a hash map. Instead, custom `ColorResolver`s are added to a separate `Reference2ReferenceOpenHashMap`, which is populated once at construction time with all registered custom `ColorResolver`s. A `ModifyExpressionValue` was used to change the null cache value so that the local `BiomeColorCache` variable would be populated with the correct value, in case other mods use it in their own mixins.\r\n\r\n## Test Mod\r\n\r\nThe test mod was changed to add a simple block that is rendered as a solid white cube, with the top face tinted using a `BlockColorProvider` and custom `ColorResolver`. The resolver returns a magenta color in biomes with precipitation and a yellow color in biomes without. With maximum biome blending, the following effect is created.\r\n\r\n![image](https://github.com/FabricMC/fabric/assets/44146161/96d42992-4bcb-4f50-aa4e-b2f8781a5bb2)",
    "head_branch": "pr/1.20.4/custom-color-resolvers",
    "is_a_fork": true,
    "comments": [
      "Personally I feel like forcing providers to be registered to a registry might be a better option, even if you keep the underlying map population lazy, like it is right now. Otherwise, it's too easy for a mod to silently leak huge amounts of memory by injecting many lambda instances.",
      "I'm also of the opinion that requiring up-front registration is ultimately for the better here, for the reason stated, and another:\r\n\r\nSodium ([code](https://github.com/CaffeineMC/sodium-fabric/blob/dev/src/main/java/me/jellysquid/mods/sodium/client/world/biome/BiomeColorCache.java#L70-L96)) will fetch all biomes and colors for an entire Y-slice of a chunk section when first accessed, and then blend the entire array of colors at once. This allows us to avoid sampling/blending hundreds of biomes every single time we need to fetch the color for a single block vertex, and is one of the reason why Sodium's chunk meshing is often 10+ times faster than Vanilla's.\r\n\r\nThis works fine when there's only a few ColorResolvers, since more likely than not, a chunk is going to have dozens of blocks using a given ColorResolver, and the overhead of sampling more upfront is quickly amortized. But if mods are allowed to register many ColorResolvers which blocks only sparsely use, this begins to create massive overhead on our side (CPU time + Memory), and will greatly slow down chunk meshing.\r\n\r\nSo I prefer any solution where mods are kind of \"discouraged\" from using ColorResolvers so liberally (especially in the form of inline lambdas) because it will help to avoid exploding things on our side.\r\n\r\nAlso worth mentioning: There are other mods (such as [Better Biome Blend](https://modrinth.com/mod/better-biome-blend)) which I believe have the same overhead problem, so this isn't a Sodium-specific thing.",
      "The `ColorResolverRegistry` has now been added to avoid any issues related to performance and memory usage. Trying to use `ClientWorld.getColor` with an unregistered resolver will throw an `UnsupportedOperationException`."
    ],
    "commit_messages": [
      "Add Support for Custom ColorResolvers (#3503)\n\n* Add support for custom color resolvers\r\n\r\n* Add ColorResolverRegistry\r\n\r\n* Fix checkstyle\r\n\r\n* Statically initialize all BiomeColorCaches"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662305dc0ac82a74541b2053",
    "number": 3495,
    "body": "Closes https://github.com/FabricMC/fabric/issues/3494\r\n\r\nHappens all the way from the start of the Networking API v1, though with the issue only encountered now means that no one actually uses the local handler registry, so not sure if we need to release a fix for all the versions.",
    "head_branch": "fix-local-login-response-handler",
    "is_a_fork": true,
    "comments": [
      "Good fix. In the original draft, I don't think the local handler existed, because back then login stage had so little information available that having client-sensitive channels doesn't make much sense."
    ],
    "commit_messages": [
      "fix local login query response handler not working (#3495)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305dd0ac82a74541b2054",
    "number": 3493,
    "body": "Allows mods to add custom item predicates to be used in advancements and loot tables.\r\nRequired to the stack-based approach in #3477.",
    "head_branch": "custom-item-predicate",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305de0ac82a74541b2055",
    "number": 3487,
    "body": "This adds two new publications, a [BOM](https://docs.gradle.org/current/userguide/platforms.html#sub:bom_import) (`fabric-api-bom`) and a [version catalog](https://docs.gradle.org/current/userguide/platforms.html#sec:importing-published-catalog) (`fabric-api-catalog`).\r\n\r\n**Example use of the BOM**\r\n\r\nThis will also work with `include` configuration in loom 1.5+\r\n```kotlin\r\ndependencies {\r\n  modImplementation(platform(\"net.fabricmc.fabric-api:fabric-api-bom:VERSION\"))\r\n  modImplementation(\"net.fabricmc.fabric-api:fabric-api-lookup-api-v1\") // version is from BOM\r\n}\r\n```\r\n\r\n**Example use of the catalog**\r\n\r\n`settings.gradle(.kts)`:\r\n```kotlin\r\ndependencyResolutionManagement {\r\n  repositories {\r\n    maven(\"https://maven.fabricmc.net/\")\r\n  }\r\n  versionCatalogs {\r\n    create(\"fabricApiLibs\") {\r\n      from(\"net.fabricmc.fabric-api:fabric-api-catalog:VERSION\")\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n`build.gradle(.kts)`:\r\n```kotlin\r\ndependencies {\r\n  modImplementation(platform(fabricApiLibs.bom)) // if you want to use the BOM too\r\n  modImplementation(fabricApiLibs.api.lookup.api.v1)\r\n\r\n  // deprecated modules in own group\r\n  modImplementation(fabricApiLibs.deprecated.command.api.v1)\r\n}\r\n```\r\n\r\n**Future ideas**\r\nFor modules that depend on others, we could also include a bundle in the catalog that has flattened dependencies (for use with `include`).",
    "head_branch": "feat/version-catalog-and-bom",
    "is_a_fork": true,
    "comments": [
      "Maybe mention this in README.md?"
    ],
    "commit_messages": [
      "add fabric-api-bom and fabric-api-catalog (#3487)\n\n* feat: add fabric-api-bom and fabric-api-catalog\r\n\r\n* spotlessApply\r\n\r\n* Apply suggestions from code review\r\n\r\nCo-authored-by: Juuz <6596629+Juuxel@users.noreply.github.com>\r\n\r\n---------\r\n\r\nCo-authored-by: modmuss <modmuss50@gmail.com>\r\nCo-authored-by: Juuz <6596629+Juuxel@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305df0ac82a74541b2056",
    "number": 3486,
    "body": "https://github.com/FabricMC/fabric/pull/3403#discussion_r1437078861",
    "head_branch": "1.20.4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305df0ac82a74541b2057",
    "number": 3477,
    "body": "Adds a boolean method to `FabricItem` and `FabricItemStack`, `isShears`. It functions as a stack-aware check that allows items to function as shears. By default, the method returns true if the item is either an instance of `ShearsItem` or in the `fabric:shears` tag.\r\n\r\nIf a stack `isShears`, it is able to shear pumpkins, de-arm tripwire, be enchanted with efficiency, have `ShearsDispenserBehavior` (if there isn't already a `DispenserBehavior` for the item registered), and shear snow golems, sheep, and mooshrooms.\r\n\r\nThis also mixes into `MatchToolLootCondition` and adds a [custom predicate](https://github.com/FabricMC/fabric/pull/3493) to it if its predicate contains shears. The custom predicate is a boolean value registered under `fabric:allow_shears` and defaults to `true`. If the value is `false`, the mixin will not add the custom predicate even if the predicate contains shears.\r\n\r\nSupersedes/closes #1287 and closes #1226. Also depends on/includes #3493, so either merge that first or just merge this PR.",
    "head_branch": "1.20.4",
    "is_a_fork": true,
    "comments": [
      "Aren't tags saved under `c:shears` not `fabric:shears`? You might want to ammend the comments to correct that if that's the case",
      "Apply the license header with `gradlew spotlessApply`. You also need to fix the style issues.",
      "@ZestyBlaze Generally, `fabric` tags are used for behaviour and `c` tags just for categorisation. (Compare with FAPI's mining level + mineable tags etc)",
      "this works from 23w32a onwards (`MatchToolLootCondition` became a record with an optional in that version)\r\n\r\nfor below that, you would remove `DirectRegistryEntryListAccessor<T>` and replace `MatchToolLootConditionMixin` with something like [this](https://github.com/AnAwesomGuy/wsmlmb/blob/b958f56e92ae1cd7c013b3c85df9b8987edb8e4f/src/main/java/net/anawesomguy/wsmlmb/mixin/shears/MatchToolLootConditionMixin.java#L25-L61). that will work down until somewhere between 1.18.1 and 1.18.2, when `TagKey<T>`s were added",
      "> Not sure about modifying all loot tables, we should probably only do it for vanilla.\n\nIf someone could help me find a way to do that that would be amazing. Though it would be even harder now that we're moving towards making it stack-based, which means I'm mixing into `MatchToolLootCondition#test`, making it so there is basically no context about its creation.\n\nI also don't really see why anyone would want to target only vanilla shears but ¯⁠\\⁠_⁠(⁠ツ⁠)⁠_⁠/¯.",
      "The way Forge does it is to just replace the loot tables with their own. Maybe we can move the modification into a datagen instead.",
      "Then it wouldn't be stack-based, and that seems like what modmuss and some others want.",
      "You can make a custom predicate that checks if the item is shears with #3493 😉 ",
      "That looks pretty good, but how would I make my PR depend on yours?\nShould I just wait for it to get merged?",
      "Thanks for all your work! I think it would be great if the changes were included as I own 2 mods that add shears to Minecraft. They would benefit greatly from this. Are there any plans to bring this PR to 1.20.5? What is needed to reach that? :)",
      "it should already work on 1.20.5, but this pr is kinda in a dead place rn",
      "I think it needs a rework after #3493 was closed, because of the vanilla's sub predicate system.",
      "For porting this to 1.20.6 I think it would be easier to add a new boolean component \"IS_SHEARS\" or something similar and add it to vanilla shears and also to custom shears. This component could be checked in all your mixins instead of adding a new tag, a new `isShears` method and the whole custom predicate logic. That should be much cleaner and easier to use.\r\n\r\nEdit: and don't forget the newly added functionalities: shearable Bogged entity & Wolf armor shearing",
      "Adding new component would make fabric api incompatible with vanilla",
      "yes, that is why i havent ported this to 1.20.5+ yet\r\ni could also go the old route and just add stuff to `FabricItem` (including the custom predicate) but i dont really know if thats the way to go yet"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305e00ac82a74541b2058",
    "number": 3476,
    "body": "Trying to revive #2172, with some ideas from @Technici4n's NF implementation. \r\n\r\nThe Data Attachment API provides a unified and convenient way for modders to attach arbitrary pieces of data to various game objects (as of writing: entities, block entities, worlds and chunks). Importantly, all of the logic specific to each game object type is abstracted away behind an interface and is not the modder's concern.\r\n\r\nAdditionally, attached data can optionally be made to persist across server restarts. A subsequent PR should work to implement a robust and flexible client-server syncing mechanism, staying true to the API's \"target type should not matter in the API\" philosophy.\r\n\r\n### API Overview\r\n\r\nThe API contains three classes: `AttachmentType`,`AttachmentRegistry` and `AttachmentTarget`.\r\n\r\nAn `AttachmentType<A>` is a type of way to attach objects of type `A` to game objects. It specifies whether the attachments are persistent and/or synced, and if one of these is enabled, provides a `Codec<A>` for convenient encoding/decoding. The API assumes the objects of type `A` are immutable or, more generally, do not share any state with other objects used in separate attachments.\r\n\r\nAttachment types are created and registered using `AttachmentRegistry`. This class provides simple `create`, `createDefaulted` and `createPersistent` methods for quick creation and registration of attachments, but when finer control is needed, provides an `AttachmentRegistry.Builder` to set each desired property separately.\r\n\r\nFinally, `AttachmentTarget` defines the game objects to which data can be attached. Currently, `Entity`, `BlockEntity`, `ServerWorld` and `WorldChunk` are made to implement it using interface injection and mixin. It provides methods for getting, setting, modifying and removing attachments, as well as `hasAttached` for check if an attachment exists.\r\n\r\n### Example use\r\n\r\nAttachment types are created and registered using methods in `AttachmentRegistry`, and should be stored in `static final` fields, like so:\r\n```java\r\npublic class ModAttachmentTypes {\r\n    public static final AttachmentType<String> INTERNAL_NAME = AttachmentRegistry.create(\r\n        new Identifier(\"example:internal_name\")\r\n    ); // String attachment type, no defaults, not persisted, not synced\r\n    public static final AttachmentType<Integer> MANA = AttachmentRegistry.createDefaulted(\r\n        new Identifier(\"example:mana\"), \r\n        () -> 0\r\n    ); // Integer attachment with default value 0\r\n    public static final AttachmentType<String> PERSISTENT_NAME = AttachmentRegistry.createPersistent(\r\n        new Identifier(\"example:persistent_name\"),\r\n        Codec.STRING\r\n    );  // String attachment, persists across server restarts\r\n    public static final AttachmentType<Integer> PERSISTENT_MANA = AttachmentRegistry.<Integer>builder() // Builder for finer control\r\n       .codec(Codec.INT) // required codec for persistence\r\n       .persistent() // persistent\r\n       .copyOnDeath() // will persist over entity death and respawn\r\n       .initializer(() -> 0) // default value\r\n       .buildAndRegister(new Identifier(\"example:persistent_mana\"));\r\n}\r\n```\r\nOnce attachments have been registered, they can be used on all `AttachmentTarget`s. In this example, we assume all of the relevant targets start with no attachments.\r\n```java\r\nEntity entity = /* omitted */;\r\nServerPlayerEntity player = /* omitted */;\r\n\r\nString internalName = entity.getAttached(ModAttachmentTypes.INTERNAL_NAME); // null\r\nentity.setAttached(ModAttachmentTypes.INTERNAL_NAME, \"silly entity\");\r\ninternalName = entity.getAttached(ModAttachmentTypes.INTERNAL_NAME); // \"silly entity\"\r\n\r\nboolean hasAttachment = player.hasAttached(ModAttachmentTypes.MANA); // false\r\nint mana = player.getAttachedOrCreate(ModAttachmentTypes.MANA); // 0, auto-initialized !\r\nhasAttachment = player.hasAttached(ModAttachmentTypes.MANA); // now true\r\nplayer.modifyAttached(ModAttachmentTypes.MANA, mana -> mana+1); // increment mana\r\n\r\nplayer.setAttached(ModAttachmentTypes.PERSISTENT_MANA, 10); // will be saved\r\n```\r\n\r\n### Future enhancements\r\n\r\nClient-server syncing would be a great feature to have, but has been left out of this PR on account of being a lot trickier than the rest, and not as essential. It should instead be the subject of a future PR. However, this feature is important because syncing rendering data with the client seems like a very obvious addition to this API. I'll outline a couple of the constraints any potential addition should try to fit into:\r\n\r\n- The syncing API should be target-agnostic, i.e not expose or involve too many mechanics related to the underlying target game objects, in line with the overall design of `AttachmentTarget`.\r\n- It should allow partial syncing, i.e give modders the ability to only sync a part of attachments with the client. This is useful when only a couple fields in a complex attached datatypes are useful for rendering, as to not send useless data.\r\n- It should give control over which clients the data is synced to. For instance, attached data relating to HUD rendering should only be synced with its target.\r\n- Optionally, it could allow incremental syncing, i.e try to sync only what has changed (imagine an attached Map, only the added/removed key-value pairs need to be synced). While I don't see a way to make this fully automatic, it could perhaps be helped with some helper interfaces for attached datatypes to implement.\r\n\r\n\r\n*Maintainer note: the unit tests test persistence for entities and blockentities as those can be mocked without too much effort, but mocking worlds and chunks is such a pain that I opted to make those into a separate testmod. It works by launching a server (on the same world) twice from the client to check the saving/loading.*\r\n\r\nTODO:\r\n\r\n- [x] Javadoc\r\n- [x] Tests\r\n- [x] ~~Implement server-client syncing~~ Scrapped in favor of future PR\r\n\r\n",
    "head_branch": "data-attachment-api",
    "is_a_fork": true,
    "comments": [
      "We need to figure out a couple things regarding how the API of `AttachmentTarget` should look. There are two main paradigms with endless in-between delineations:\r\n\r\n1. All attachments have a mandatory initializer (usually in the form of a `Supplier`), and if no data is attached (i.e `hasAttached` returns `false`), then `getAttached` automatically calls the initializer and returns the result.\r\n    - Pros:\r\n        - Aligns with the implementation in Neoforge by @Technici4n \r\n        - Avoids nullability\r\n        - Many types (like primitives) have very obvious default values\r\n    - Cons:\r\n        - Requires a lot of `hasAttached`/`getAttached` boilerplate to deal with no attached data, e.g if another method expects a nullable parameter, one would probably have to use a ternary.\r\n        - Many types have no good default/dummy value, and the auto-initializing behavior may be undesirable then.\r\n2. Attachments are not automatically initialized, and `getAttached` returns `null` if no data is attached.\r\n    - Pros:\r\n        - Avoids implicit initialization (whether that is a pro is arguable)\r\n        - Avoids initializing complex types with no good dummy values\r\n        - Akin to `Map#get`, which is a very familiar pattern\r\n    - Cons:\r\n        - Having to deal with nullable values\r\n        - Would require a `getOrCreate` helper method, which can be annoying boilerplate in many cases.\r\n\r\nNaturally, many of these cons can be solved or at least alleviated with suitable helper methods. In 1, a `getAttachedOrNull` can be provided to emulate 2's behavior at little extra cost. In 2, a `getAttachedOrThrow` method removes nullability concerns where they are uncalled for, but can also introduce hard failure (exception). \r\n\r\nAn in-between may be to provide partial/optional auto-initialization capability. For example, an optional initializer that, if given, is called when there is no attached data as in 1. Or, for a less intrusive alternative, an optional 'default' initializer that is used as the parameter of `getOrCreate`, for a more concise `target.getOrCreate(attachment)` callsite. But again, that can introduce exceptions. To remedy this and also potentially other issues, it is possible to introduce subinterfaces of `Attachment` to prevent misuse through the type system, but this may be gross overengineering.\r\n\r\nIn any case, the choice should be guided by which paradigm will cause the least boilerplate in the majority of cases. Whatever behavior `getAttached` ends up having, it should be what's likely to be most commonly used. Any additional insight on the matter will be helpful here. @modmuss50 @maityyy ",
      "After some discussion, I have implemented the following compromise:\r\n\r\nBy default, `AttachmentType` does *not* automatically initialize attachments on first query. However, various factory methods allow the user to create a `DefaultedAttachmentType<A>`, which comes with an initializer to provide a default (non-null) value. Accordingly, AttachmentTarget has a new, non-nullable `getAttached` overload taking in a `DefaultedAttachmentType` that will automatically initialize non-existing attachments. \r\n\r\nAs a result, whether the attachment automatically initializes or not, the call site looks like `target.getAttached(TYPE)`. To prevent users from calling the wrong `getAttached` (for example due to a not-specific-enough type when storing the registered type, which the javadoc will warn against doing), a runtime check is performed along with a warning. This should prevent improper use of the system.",
      "What if I registered my `AttachmentType` with an initializer but my field is of type `AttachmentType` instead of `DefaultedAttachmentType`? Then all my calls will escape initialization (because at compile time it will be `getAttached(AttachmentType)` instead of `getAttached(DefaultedAttachmentType)`) when there is no value and I will most likely get an NPE (you also pointed this out in the docs). I don't like the idea of sub-interfaces, it's very non-obvious and difficult to expand in the future.\r\n\r\nI can suggest the following:\r\n\r\n1. Rename `getAttached(DefaultedAttachmentType)` to be different from `getAttached(AttachmentType)` — then modders will likely realize they are calling the wrong method\r\n2. Get rid of `DefaultedAttachmentType` and its `getAttached` overload, call the initializer if it is not `null` in the only remaining `getAttached` every time (like fastutil's maps)\r\n3. The same thing, but in a separate method called `getAttachedOrDefault`\r\n - 2 & 3 will always have the `@Nullable` annotation\r\n\r\nFor now I prefer option 2, but it's not ideal, so I'd like to think more...",
      "I mentioned this potential pitfall, and if you check, the (normal) getAttached implementation issues a warning and auto-inits if you pass a defaulted one.\r\n\r\nBut you're right about bad extensibility, the cursory amount of thought I've given syncing tells me that is quickly going to be unsustainable, so back to the drawing board.\r\n\r\nThat being said, the issue with 2 is that static checkers will complain about nullability even for defaulted attachments (could be solved with a getAttachedOrThrow).\r\n\r\nThe problem with 3 is overarching, and it's that I'm unsure how common defaulted will be vs non-defaulted, and I don't want to have a longer method name be used for the most common case.\r\n\r\n",
      "Just a random idea, maybe it's stupid: maybe the initializer should not be `Supplier<T>` but `Function<*AttachmentTarget*, T>`? (`<Entity, T>`, `<Chunk, T>`, etc.). I think this might be useful for entities: `entity -> entity.ticksFrozen + entity.fireTicks`",
      "Unfortunately that can't be correctly typed because you'd need a generic self-type. Usually you'd implement it by declaring `AttachmentTarget<S extends AttachmentTarget<S>>` and then using `S`, but injected interfaces cannot have generics. Factoring in the target type in the type system more generally was in the original PR, but it's a generic mess.",
      "I didn't actually think about `AttachmentTarget<S extends AttachmentTarget<S>` since `S` will always `implements AttachmentTarget` anyway (Java don't have Higher-Kinded Types sadly), but yeah, that's not the problem...",
      "I have added a convenience `Builder#persistent(Codec)`, but *just in case* it is deemed useful to have a codec for some other purpose, I left persistence and codecs decoupled. Though, I don't think the future syncing API will need one outside of convenience methods. If anyone wants to be less conservative and commit to \"codec == persistence\", I can make that change however.\r\n\r\nEDIT: I have committed to this change after discussing it",
      "Added all the entity copy stuff, with an extra customizable flag for player respawn. The API automatically copies attachments when returning from the End, as well as entity conversion (like zombie → drowned). I'll write a unit test to check this behaves as intended.",
      "I overhauled the API and mechanics for copying entity attachments. There is a new `EntityCopyHandler` functional subinterface of `AttachmentType` that is used to handle the copying properly, as to avoid references to the old `Entity` instance when copying.\r\n\r\nHowever, specifying such a handler manually is unnecessary most of the time, and one will automatically be deduced if a `Codec` is provided. Also, since there are now two independent uses for codecs, the old \"codec method + flag methods\" design has been reinstated, with convenience shorthands.\r\n\r\nAdditionally, the `copyOnDeath` (name changed) flag now also includes entity conversion. I was rather on the fence about whether that should count as a \"respawn\", but I decided to align with NF for the sake of convenience. Only teleportation across worlds is universally desirable.",
      "Discussion was had, and the complex previous change was reverted, and replaced with a javadoc warning about keeping entity instances around. I'd also missed copying on cross-world teleportation. \r\n\r\nBy the way, I was surprised to find there is no event for mob conversion. For easier maintenance, maybe this could be added to the event API? ",
      "> By the way, I was surprised to find there is no event for mob conversion. For easier maintenance, maybe this could be added to the event API?\r\n\r\nYeah, thats a good idea. 👍 ",
      "Two notes:\r\n- It was brought to my attention that on respawn, client players are recreated and copied, but not through any of handled copy methods, so a mixin was added in [c37c705](https://github.com/FabricMC/fabric/pull/3476/commits/c37c705d9a5f7613286d42598780d325f36973f5) to take care of it. Unlike general mob conversion, this is completely covered by the mixin. Nevertheless, is it worth adding to the event API?\r\n- Currently, all mob conversions are treated as deaths for attachment copy, which makes use of the copyOnDeath flag. This makes sense for most conversions, but what about tadpoles growing up? Answer: we'll just treat it the same."
    ],
    "commit_messages": [
      "Data Attachment API (#3476)\n\n* Data Attachment API\r\n\r\n* javadoc\r\n\r\n* Remove AttachmentSerializer & independent syncability and persistence\r\n\r\n- removed AttachmentSerializer in favor of codecs\r\n- renamed serializability to \"persistence\"\r\n- made persistence and syncability independent switches\r\n- reworked convenience registry methods to use Suppliers from the get-go\r\n\r\n* Move some serialization-related methods to impl\r\n\r\n- changed logger name\r\n\r\n* rename Attachment to AttachmentType\r\n\r\n* Added DefaultedAttachmentType and reworded Javadoc\r\n\r\n* add warning in getAttached\r\n\r\n* javadoc\r\n\r\n* fix defaulted API\r\n\r\n* Add unit tests\r\n\r\n* remove DefaultedAttachmentType, add helper methods\r\n\r\nbikeshedding inbound\r\n\r\n* add more unit tests\r\n\r\n* add testmod\r\n\r\nit works\r\n\r\n* stash syncing for a further PR\r\n\r\n* missed license header\r\n\r\n* address most reviews\r\n\r\n* more reviews\r\n\r\n* naming convention\r\n\r\n* fix tyop\r\n\r\n* fix invalid file name error\r\n\r\n* simplify API in the absence of sync\r\n\r\nIt was established that the presence of a codec might be useful for other things than persistence, and while this seems to couple the two, the API can be changed later in a backward-compatible way if need be.\r\n\r\n* couple codec with persistence\r\n\r\ncommitting to the change I mentioned previously\r\n\r\n* little fixes\r\n\r\n* Fix mixins + requests\r\n\r\n- Copy attachments on entity copy,& with a customizable flag in the case of player respawn\r\n- Call relevant change-notifying methods when calling setAttached on BEs and chunks\r\n- Change persistence key\r\n- Fix mixin visibility\r\n\r\n* Write tests for entity copy\r\n\r\n* replace mixin by COPY_FROM event\r\n\r\n* missed license header\r\n\r\n* more advanced copy mechanics\r\n\r\n- attachments require an EntityCopyHandler to be copied across entities\r\n- a copy handler is automatically derived if there's a codec\r\n- updated javadoc for chunk and BE targets\r\n\r\n* Revert \"more advanced copy mechanics\"\r\n\r\nThis reverts commit 3f53b554fbd1c64fd21c95c067d14d43b9b77063.\r\n\r\n* replaced complicated API by a stern warning\r\n\r\n- also handled cross-world entity teleportation\r\n\r\n* add gametest\r\n\r\n* fix compilation\r\n\r\n* flipped boolean\r\n\r\n* forgot some more bools to flip\r\n\r\n* requests\r\n\r\n* fix FMJ\r\n\r\n* fix BE mixin and add gametest\r\n\r\n* add client player entity copying\r\n\r\n* Use new mob conversion event\r\n\r\n---------\r\n\r\nCo-authored-by: modmuss <modmuss50@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662305e10ac82a74541b2059",
    "number": 3474,
    "body": "Breaking changes:\r\n\r\n- `FabricBrewingRecipeRegistry.registerPotionRecipe` takes `RegistryEntry<Potion>` instead of `Potion`\r\n- `SculkSensorFrequencyRegistry.regster` takes `RegistryKey<GameEvent>` instead of `GameEvent`\r\n- `FabricLanguageProvider.add` takes `RegistryEntry<EntityAttribute>` instead of `EntityAttribute`\r\n- `FabricTagProvider.GameEventTagProvider` was removed replace with `FabricTagProvider<GameEvent>`\r\n- `FabricItem.getAttributeModifiers` returns a Multimap with a key of `RegistryEntry<EntityAttribute>` instead of `EntityAttribute`\r\n- `ModifyItemAttributeModifiersCallback.modifyAttributeModifiers` takes Multimap with a key of `RegistryEntry<EntityAttribute>` instead of `EntityAttribute`",
    "head_branch": "port/23w51a",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Port to 23w51b (#3474)\n\nBreaking changes:\r\n\r\n- `FabricBrewingRecipeRegistry.registerPotionRecipe` takes `RegistryEntry<Potion>` instead of `Potion`\r\n- `SculkSensorFrequencyRegistry.regster` takes `RegistryKey<GameEvent>` instead of `GameEvent`\r\n- `FabricLanguageProvider.add` takes `RegistryEntry<EntityAttribute>` instead of `EntityAttribute`\r\n- `FabricTagProvider.GameEventTagProvider` was removed replace with `FabricTagProvider<GameEvent>`\r\n- `FabricItem.getAttributeModifiers` returns a Multimap with a key of `RegistryEntry<EntityAttribute>` instead of `EntityAttribute`\r\n- `ModifyItemAttributeModifiersCallback.modifyAttributeModifiers` takes Multimap with a key of `RegistryEntry<EntityAttribute>` instead of `EntityAttribute`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305e20ac82a74541b205a",
    "number": 3473,
    "body": "Resolves #3302\r\nSupersedes #3312\r\n\r\nLikely the biggest refactor to Resource Loader since its inception??? Work ongoing.\r\n\r\nNote, if you've been using FAPI resource pack internals, this might break it (as expected).\r\n\r\n- [x] Split each mod's resource packs.\r\n- [x] Make sure not to break programmer art/high contrast.\r\n- [x] Add pack dependency system.\r\n- [x] Add a placeholder pack, to be used only for UI purposes.\r\n- [x] Hide internal/per-mod packs.\r\n- [x] Improve documentation.\r\n- [x] Improve internal names.\r\n- [x] Test.\r\n",
    "head_branch": "resource-loader/grouping-redo",
    "is_a_fork": true,
    "comments": [
      "Marked ready for review. Will need some testing.",
      "Test successful, but will need more checks on mod compatibility, ResourceManagerHelper pack interactions, etc.",
      "TODO:\r\n\r\n- [x] Fix reordering of required packs being broken",
      "Thank you so much for working on this! I am excited to test it out, and be able to easily create updates for Fabric again.",
      "This has [caused breakages in Sodium](https://github.com/CaffeineMC/sodium-fabric/issues/2286), because the high contrast/programmer art packs for mods are given the same resource pack name, which it expects to not be possible.",
      "Additionally, this causes massive regressions in UX since now every mod's resource pack is shoved into the space constrained list. Doing this makes the user interface borderline unusable, since it's completely overloaded with entries that 99.9% of users will not understand what to do with.\r\n\r\n![image](https://github.com/FabricMC/fabric/assets/1363084/795bbfe6-4cf6-416c-80bf-774e6e4ca0f3)\r\n\r\nMaybe this specific aspect of the pull request should be reverted until a better user interface is engineered? I really don't think this is helpful for users.",
      "@jellysquid3 Uhh, my test environment did have Sodium 0.5.5, and I did not encounter any errors while booting up or using High Contrast. It could be due to changes in 0.5.6+, I am honestly unsure.\r\n\r\n> because the high contrast/programmer art packs for mods are given the same resource pack name, which it expects to not be possible.\r\n\r\n[Each `ResourcePackProfile` should have a different name](https://github.com/FabricMC/fabric/pull/3473/files#diff-316ac23c11543330b8a7db8932b07521cc6fc3c95508d1ab618a43b296708776R125), but it seems like I forgot to override `ResourcePack#getName`. This is my oversight, yep.\r\n\r\n> Additionally, this causes massive regressions\r\n\r\nThe change should have [removed any \"internal\" packs from `PackResourceOrganizer`](https://github.com/FabricMC/fabric/pull/3473/files#diff-cb2a01758c3e03a48be5aa8189058fc0fe378f7bc93e9218f6d36868677cf2a2R50), making them invisible to the client. The screenshot obviously says that was not the case, though. Could you provide more info on how to reproduce the issue?",
      "> It could be due to changes in 0.5.6+, I am honestly unsure.\r\n\r\nWe [made a change](https://github.com/CaffeineMC/sodium-fabric/commit/5c04268709f8cc27f7b9bc1cc063cd1da63e3d8f) very shortly before Fabric API 0.95.3 was published (a few days ago) that put the resource scan results into a hash table, which doesn't tolerate duplicate keys. It was just really bad luck, and we have since fixed the code to be more tolerant of that case.\r\n\r\n> The screenshot obviously says that was not the case, though. Could you provide more info on how to reproduce the issue?\r\n\r\nThis may have since been fixed. Another user reported it to us with Fabric API 0.95.3, but will see if I can reproduce it myself.\r\n",
      "This happens when \"[Resource Pack Overrides](https://modrinth.com/mod/resource-pack-overrides)\" is present."
    ],
    "commit_messages": [
      "Refactor resource loader internals (#3473)\n\n* First step toward fixing resource pack grouping\r\n\r\n* Placeholder pack and pack dependency\r\n\r\n* Various fixes\r\n\r\n* Fix wrong variable in serialization code\r\n\r\n* Hide packs in PackScreen and DatapackCommand\r\n\r\n* Apparently Japanese people aren't alone in having their currency signs used as special chars...\r\n\r\n* Inject directly to Pack\r\n\r\n* Add temporary logging, fix bug\r\n\r\n* Add proper sorting\r\n\r\n* Improve logging\r\n\r\n* Fix duplicate name registration\r\n\r\n* Fix client pack handling\r\n\r\n* Fix FMJ\r\n\r\n* Stop using interface injection for internal interface\r\n\r\n* Delete unused GroupResourcePack\r\n\r\n* Move refreshAutoEnabledPacks to util\r\n\r\n* Improve logging\r\n\r\n* Make a few things private\r\n\r\n* Use vanilla metadata serialization logic\r\n\r\n* Improve javadoc\r\n\r\n* Add junit test\r\n\r\n* Some final refactors\r\n\r\n* Update ja_jp.json\r\n\r\n---------\r\n\r\nCo-authored-by: modmuss <modmuss50@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662305e30ac82a74541b205b",
    "number": 3471,
    "body": "Fixes #3470 \r\nReverts part of #3451\r\n\r\n`getReturnValue` must be used in `RETURN`, not `INVOKE`.",
    "head_branch": "entity-events/fix-sleep-direction",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305e30ac82a74541b205c",
    "number": 3452,
    "body": "Just a small update\r\n\r\nTo be release alongside: https://github.com/FabricMC/fabric/pull/3451",
    "head_branch": "gradle-8-5",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update loom and Gradle (#3452)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305e40ac82a74541b205d",
    "number": 3451,
    "body": "Ensure all modules depend on the version of loader they are built against, a number of modules had mixins that depended on the \"legacy\" local cpature behaviour, I have replaced those broken with @Local\r\n\r\nGoing forward all modules will depend on the loader version that FAPI is built against.\r\n\r\nI will combine this PR with a Gradle + other deps update as well, due to the need to update all modules.",
    "head_branch": "loader-0-15",
    "is_a_fork": true,
    "comments": [
      "Just as a general point `@Local` is handy when it's needed, but capturing things as they're used will be much more stable."
    ],
    "commit_messages": [
      "Update to loader 0.15 (#3451)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305e50ac82a74541b205e",
    "number": 3450,
    "body": "Resolves #3449\r\n\r\nThis restores the previous FAPI behavior, this is also the same as how vanilla handles custom S2C packets on 1.20.1-.",
    "head_branch": "superjet-donor-encore",
    "is_a_fork": true,
    "comments": [
      "It looks like the CommonPacketTests are now failing.",
      "Ah, since the original buf is copied when received the reader index is still 0."
    ],
    "commit_messages": [
      "Copy untyped payload buffer on read/write (#3450)\n\n* copy untyped payload buffer on read/write\r\n\r\n* use the actual handler on junit tests"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305e60ac82a74541b205f",
    "number": 3446,
    "body": "Resolves #3445",
    "head_branch": "mooned-shopper-wildcard",
    "is_a_fork": true,
    "comments": [
      "Thanks so much!"
    ],
    "commit_messages": [
      "Only retain buffer on receiving side (#3446)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662305e70ac82a74541b2060",
    "number": 3433,
    "body": null,
    "head_branch": "backport/3146",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add event for preventing particle tinting for colored blocks (#3146) (#3433)\n\n- Adds an event, `ParticleRenderEvents.ALLOW_BLOCK_DUST_TINT`, that checks\r\n  if a block dust particle of a specific block can be tinted.\r\n- Bumps Fabric Loader requirement of fabric-particles-v1 to latest to\r\n  disable Loader's mixin compatibility mode that ignores slices for\r\n  certain At annotations.\r\n\r\nSigned-off-by: modmuss50 <modmuss50@gmail.com>\r\n(cherry picked from commit 86d48884d366002a27aa4cdaa7ff76783b481b5f)\r\n\r\nCo-authored-by: Juuz <6596629+juuxel@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662305e70ac82a74541b2061",
    "number": 3432,
    "body": "If anyone has a better idea for passing the DRM instance to the load method please let me know. Closes #3322",
    "head_branch": "fix/3322",
    "is_a_fork": true,
    "comments": [
      "I believe this is as simple as storing the DRM in a normal field rather than in ThreadLocal."
    ],
    "commit_messages": [
      "Fix registry resource conditions on loot tables. (#3432)\n\n* Fix registry resource conditions on loot tables.\r\n\r\n* assert we dont already have the DRM set on this thread.\r\n\r\n* Use a sync map"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305e80ac82a74541b2062",
    "number": 3431,
    "body": "It plays sound to all players only once now.",
    "head_branch": "1.20.2-transfer-playerFluidIneractFix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix `FluidStorageUtil#moveWithSound` Play Sound (#3431)\n\n* fix play sound\r\n\r\n* Update fabric-transfer-api-v1/src/main/java/net/fabricmc/fabric/api/transfer/v1/fluid/FluidStorageUtil.java\r\n\r\n* Fix chute testmod\r\n\r\n---------\r\n\r\nCo-authored-by: modmuss <modmuss50@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305e90ac82a74541b2063",
    "number": 3423,
    "body": "Moral of the story: use Guava instead of rolling your own stuff.\r\n\r\nFixes #3414.\r\n",
    "head_branch": "fix-empty-storage-iterator",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix empty storage iterator returning views that become empty during iteration (#3423)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305ea0ac82a74541b2064",
    "number": 3421,
    "body": "- Fixes `openableByWindCharge` not being copied. Testing this the easy way (copying vanilla) turned out to be a little difficult because you have to compare `BlockSetType`, and the ID field has a colon when constructing with our builder.\r\n- Re-adds one TAW that was accidentally removed.\r\n- Updates testmod to use the proper way of throwing.\r\n- Comment update to remain accurate.",
    "head_branch": "port/23w45a/misc",
    "is_a_fork": true,
    "comments": [
      "I also request Object Builder minor version to be bumped, as we did not when we added wind charge field in the initial port."
    ],
    "commit_messages": [
      "23w45a porting fixes (#3421)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305eb0ac82a74541b2065",
    "number": 3419,
    "body": "Adds `Codec` fields for these two types, which might be useful for the new recipe serializers, which now use `RecipeSerializer#codec` for reading from json, instead of receiving `JsonObject` and reading it imperatively like it was before.",
    "head_branch": "1.20.2",
    "is_a_fork": true,
    "comments": [
      "I thought IDEA had automatically added imports needed when I copy-pasted these lines from a mod of mine, but apparently it didn't",
      "> I thought IDEA had automatically added imports needed when I copy-pasted these lines from a mod of mine, but apparently it didn't\r\n\r\nPlease add some unit tests for this, make sure that the change works as expected.",
      "Moved the resource amount codec. This was enough for my use case and I'm not interested in putting more work into it. I'm also not familiar with data fixers beyond the common uses, so you'll have to find someone else for any codec shenanigans  \r\n\r\nIf the 81000 denominator for fluids is not user-friendly, why was it used in the first place? Is there a non-leaking abstraction for it now?",
      "> If the 81000 denominator for fluids is not user-friendly, why was it used in the first place? Is there a non-leaking abstraction for it now?\r\n\r\nIt is used internally, but should not necessarily be exposed to the user. I think being able to input as floating point buckets or millibuckets is more user-friendly, and should be offered as an option. Not sure about the exact format, here are a few options:\r\n```json5\r\n{\r\n    \"amount\": {\"unit\": \"bucket\", \"amount\": 0.1 }, // a bit verbose\r\n    \"amount\": \"0.1 B\", // parsing is a bit tricky but probably reasonable\r\n    \"amount\": \"100 mB\", // could also support mB with the same format\r\n    \"amount\": \"8100 d\", // maybe also droplets\r\n}\r\n```\r\n\r\nPersonally I like the string with a mandatory unit suffix. I can add the code to your PR if you want.",
      "If doing fancy codecs, why not have one of \"amount\", \"millibuckets\" or \"buckets\". Basically – with variant also \"flattened\" – like this:\r\n```json\r\n{\r\n  \"fluid\": \"minecraft:water\",\r\n  \"amount\": 40500\r\n},\r\n{\r\n  \"fluid\": \"minecraft:water\",\r\n  \"millibuckets\": 500\r\n},\r\n{\r\n  \"fluid\": \"minecraft:water\",\r\n  \"buckets\": 0.5\r\n}\r\n```\r\nIf hiding that fluids use denominator of 81000, why not hide the fact that there are some \"fluid variants\", which users might never have heard of?",
      "Yeah we should definitely hide the \"variant\" too, IMO. I think `fluid`, `amount` and `nbt` should be 3 keys at the same nesting level.",
      "If there are codecs for `FluidVariant` and its' `ResourceAmount`, there's an argument to be made that `ItemVariant` and its' `ResourceAmount` should get a codec too - at least for consistency. But then you might want these codecs to be consistent codecs inside `ItemStack` and `Ingredient`. Also, mods like TechReborn use `data` key for recipe outputs with NBT, not `nbt`.",
      "we can start with the fluid codecs only IMO, that makes things simpler"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305ec0ac82a74541b2066",
    "number": 3416,
    "body": "modmuss50 wanted this to be done at the same time as #3413.",
    "head_branch": "mf/core-shader-registry/1.18.2",
    "is_a_fork": true,
    "comments": [
      "Sorry I might not have been that clear, its been a very long time since we have done a 1.18.2 release. Im not too sure if we want to backport this so far?",
      "@bluebear94 Can you confirm that you have tested this with your mod, and in a mod pack? I just want to be 100% sure its working as intended as I dont plan on doing another 1.18.2 release.\r\n\r\nIll do some basic testing, but it would be nice to know its working for your usecase.",
      "I’ll test this PR with a patch to the 1.18.2 version of Caxton.",
      "@modmuss50, here’s a screenshot of Caxton modified to use the PRed core shader API running with the AOF Skylore pack on 1.18.2. I’ve also published the [branch for this build](https://gitlab.com/Kyarei/caxton/-/tree/mf/use-api-shader-events-1.18.2).\r\n\r\n![2023-11-21_21 14 30](https://github.com/FabricMC/fabric/assets/2975203/64ab7076-6052-4f96-9019-fea4138b899d)\r\n",
      "> @modmuss50, here’s a screenshot of Caxton modified to use the PRed core shader API running with the AOF Skylore pack on 1.18.2. I’ve also published the [branch for this build](https://gitlab.com/Kyarei/caxton/-/tree/mf/use-api-shader-events-1.18.2).\r\n> \r\n> ![2023-11-21_21 14 30](https://user-images.githubusercontent.com/2975203/284768819-64ab7076-6052-4f96-9019-fea4138b899d.png)\r\n\r\nMany thanks for that, I think ill aim to get this out over the weekend. Its going to take me a few hours to sit with the all the builds I need to do 😩 "
    ],
    "commit_messages": [
      "Add registry for core shaders in custom namespaces (#3416)\n\n* Add registry for core shaders in custom namespaces (#2901)\r\n\r\n* Add registry for core shaders in custom namespaces\r\n\r\n* Apply suggestions from code review\r\n\r\nCo-authored-by: modmuss50 <modmuss50@gmail.com>\r\n\r\n* Use Identifier.NAMESPACE_SEPARATOR instead of \":\"\r\n\r\n* Remove fabric_ prefixes from mixins\r\n\r\n* Move test rendering to lower-right corner for test screenshots\r\n\r\n---------\r\n\r\nCo-authored-by: modmuss50 <modmuss50@gmail.com>\r\n\r\n* Reorder imports to comply with checkstyle\r\n\r\n* Rename some classes\r\n\r\n* Fix compilation error in test mod\r\n\r\n---------\r\n\r\nCo-authored-by: Juuz <6596629+Juuxel@users.noreply.github.com>\r\nCo-authored-by: modmuss50 <modmuss50@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662305ec0ac82a74541b2067",
    "number": 3413,
    "body": "This PR backports the core shader API in `fabric-rendering-v1` to 1.19.2. This consists mostly of renames of the 1.19.3 API’s code, plus a minor change in the test mod to use the pre-JOML `Matrix4f`.\r\n\r\n## Motivation\r\n\r\nWhile I want to use the standard Forge and Fabric APIs for custom core shaders in Caxton, Fabric’s APIs are not available on 1.19.2 or 1.18.2, both of which Caxton still supports.",
    "head_branch": "mf/core-shader-registry/1.19.2",
    "is_a_fork": true,
    "comments": [
      "I think its unlikely that we will backport this to 1.18.2, but 1.19.2 should be possible, is there anything else (anyone) may want backporting while we are at it?",
      "I’ll try to backport this to 1.18.2 after this PR is merged.\r\n\r\nRight now, I’d also prefer to have the `ResourceManagerHelper#registerBuiltinResourcePack(Identifier, ModContainer, Text, ResourcePackActivationType)` overload available on 1.19.2 and earlier (the original API used `String` instead of `Text`). But this isn’t a huge priority.",
      "> I’ll try to backport this to 1.18.2 after this PR is merged.\r\n\r\nIm a little hesitant to do a 1.18.2 feature release as its bene so long, and is before we split making it a bit hard to backport, I guess we can? If so It would need to go in at the same time as this PR."
    ],
    "commit_messages": [
      "Add registry for core shaders in custom namespaces (#3413)\n\n* Add registry for core shaders in custom namespaces (#2901)\r\n\r\n* Add registry for core shaders in custom namespaces\r\n\r\n* Apply suggestions from code review\r\n\r\nCo-authored-by: modmuss50 <modmuss50@gmail.com>\r\n\r\n* Use Identifier.NAMESPACE_SEPARATOR instead of \":\"\r\n\r\n* Remove fabric_ prefixes from mixins\r\n\r\n* Move test rendering to lower-right corner for test screenshots\r\n\r\n---------\r\n\r\nCo-authored-by: modmuss50 <modmuss50@gmail.com>\r\n\r\n* Reorder imports to comply with checkstyle\r\n\r\n* Rename some classes\r\n\r\n---------\r\n\r\nCo-authored-by: Juuz <6596629+Juuxel@users.noreply.github.com>\r\nCo-authored-by: modmuss50 <modmuss50@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662305ed0ac82a74541b2068",
    "number": 3407,
    "body": "Resolves #3335\r\n\r\n```mermaid\r\ngraph TD\r\n  ResolvablePayload[\"<i>ResolvablePayload</i>\"] --> RetainedPayload[\"RetainedPayload(Identifier, PacketByteBuf)\"]\r\n  \r\n  ResolvablePayload --> ResolvedPayload[\"<i>ResolvedPayload</i>\"]\r\n  RetainedPayload -.-> ResolvedPayload\r\n  \r\n  ResolvedPayload --> TypedPayload[\"TypedPayload(FabricPacket)\"]\r\n  ResolvedPayload --> UntypedPayload[\"UntypedPayload(Identifier, PacketByteBuf)\"]\r\n```\r\n\r\nOn local connection (singleplayer), `ResolvedPayload` instances will be used directly, bypassing the serialization altogether.\r\n\r\nOn remote connection, the sender sends a `ResolvedPayload` instance. The receiver then receives a `PacketByteBuf` that gets retained and wrapped into `RetainedPayload`. **This doesn't create a new buffer, unlike the current implementation.**\r\n\r\nThen the receiver checks for instance of `ResolvablePayload` and resolves it into `ResolvedPayload` if it's not yet as such.\r\n- For `TypedPayload`, `PacketType#read` will be called.\r\n- For `UntypedPayload`, the buffer from `RetainedPayload` will be copied into a new one.\r\n\r\nThen the handler for the payload will be called as usual.",
    "head_branch": "channeled-addon-refactor",
    "is_a_fork": true,
    "comments": [
      "Does this add a way to enable serialization for singleplayer, for example in dev?",
      "> Does this add a way to enable serialization for singleplayer, for example in dev?\r\n\r\nNo, is it really needed? If you want to check for serialization you can always run the server.",
      "~~One thing that I forgot to mention: if you send a packet using raw buffer when it's registered using the `PacketType` it will fail on local connection as it expects it to be `TypedPayload` when it is a `UntypedPayload`. Should we also handle the conversion?~~\r\n\r\nNot true anymore, it will now convert between the two accordingly. Still, should it really do so?",
      "> > Does this add a way to enable serialization for singleplayer, for example in dev?\r\n> \r\n> No, is it really needed? If you want to check for serialization you can always run the server.\r\n\r\nI think by default it should always serialise when in dev, with a system property to control the behaviour. ",
      "I will initally release this as a beta, many thanks for sorting this. 👍 "
    ],
    "commit_messages": [
      "Avoid serializing object-based payload into `PacketByteBuf` on the main thread (#3407)\n\n* channeled network addon refactor\r\n\r\n* checkstyle\r\n\r\n* fix junit tests\r\n\r\n* convert TypedPayload <-> UntypedPayload if necessary\r\n\r\n* assert payload size\r\n\r\n* add vm arg to force serialization\r\n\r\n* change log level to info and make it single line"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662305ee0ac82a74541b2069",
    "number": 3403,
    "body": "I recently was developing feature that added \"sell\" and \"purchase\" tooltips for blocks with that functionality. The problem is that these toolips were added by different mods, one for selling, one for purchasing. And to make these mods compatible i had to develop small separate library, and package it to both mods. And i haven't even tested compatibility with other mods that may change tooltips.\r\nThe only tooltip related events I found are for adding text lines to tooltip and registering tooltip component.\r\nSo I propose new event the Fabric API - TooltipDataCallback(ItemStack, List<TooltipData>).\r\nAlso i added three example mods to showcase what this can add [(Fabric discord message link)](https://discord.com/channels/507304429255393322/566276937035546624/1170469767669350450)",
    "head_branch": "1.20.2",
    "is_a_fork": true,
    "comments": [
      "Remvoed from last call, there are breaking changes between the two PRs, it might just be best to have one and make sure that all the behaviour is tested/defined."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305ef0ac82a74541b206a",
    "number": 3397,
    "body": "Hi,\r\n\r\nCurrently, game-rules of type Double are impossible to edit using the \"Edit Gamerules\" screen on world creation; any change to those rules is discarded upon exiting the screen.\r\n\r\nThis is due to `DoubleRule.validate` not updating the rule's value when called by the `DoubleRuleWidget`. For other gamerule types, this is how their widget update their value.\r\n\r\nI have tested the fix in this PR on 1.20.2 using the artifacts generated on my fork. However the issue dates from furher back; at least since 1.19.4 where I first identified the issue. If this is accepted, I'd be interested in a backport of this fix to that version.\r\n\r\n",
    "head_branch": "doubleRule",
    "is_a_fork": true,
    "comments": [
      "`validate` is a poor name for this method, unfortunately not changeable in the API. Could you at least update the javadoc of `ValidateableRule` to say that it should also set the value?",
      "By the way, I noticed DoubleRule is the only one that implements `ValidateableRule`. Shouldn't `BoundedInt` implement it as well ?",
      "> By the way, I noticed DoubleRule is the only one that implements `ValidateableRule`. Shouldn't `BoundedInt` implement it as well ?\r\n\r\nIt can't due to remapping (the method would not be available in production)."
    ],
    "commit_messages": [
      "Fix Doubles not being editable in the game-rule menu (#3397)\n\n* Fix double gamerules rules not being editable in menu\r\n\r\n* Updated `validate`'s javadoc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662305f00ac82a74541b206b",
    "number": 3394,
    "body": "Big thanks to @deirn for 98% of the changes in this PR, this is a follow on from #3377 to correctly handle the transition between config and play.\r\n\r\nThis PR also contains a fix for #3384 and now correctly validates the packet size in a few places where it wasnt previously. Testing still needs to be done, will likely release this in a beta.",
    "head_branch": "network-addon-session-refactor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Network addon session refactor (#3394)\n\n* refactor network addon session handling\r\n\r\n* Check payload size\r\n\r\n* Fix ClientLoginNetworkAddon does not handle unsuccessful query responses\r\nCloses #3384\r\n\r\n* Adjust some logging.\r\n\r\n---------\r\n\r\nCo-authored-by: deirn <deirn@bai.lol>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662305f10ac82a74541b206c",
    "number": 3389,
    "body": "@jaredlll08 told me that custom ingredients did not serialize correctly with the `allowEmpty` codec. This is because the serialization code in our modified codec actually tried to serialize using the vanilla codec first, which fails when the ingredient is empty if `allowEmpty` is false **but succeeds if `allowEmpty` is true, thus writing an empty array `[]`**. I rewrote this using an `either` codec, cleaning up the code a bit and fixing the bug.",
    "head_branch": "ingredient-serialize-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix custom ingredient serialization with allowEmpty (#3389)\n\n* Fix custom ingredient serialization with allowEmpty\r\n\r\n* Remove custom First codec\r\n\r\n* Fix checkstyle"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305f10ac82a74541b206d",
    "number": 3387,
    "body": null,
    "head_branch": "fix-fluid-spam",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix log spam with multiple calls to `combinedItemApiProvider` (#3387)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305f20ac82a74541b206e",
    "number": 3383,
    "body": "This PR adds a registration system for spreadable blocks (blocks which extend SpreadableBlock).  Each \"type\" of spreadable block has its own registry instance, which maps a bare block (f.e. Dirt) to a spreadable block (f.e. Grass or Mycelium).  Two instances are provided for mods extending vanilla grass and mycelium.  Additional registries can be requested for new modded spreadable types.  I believe this is the simplest implementation appropriate for FAPI which implements enough features to be useful and is minimally intrusive.  For example, this provides enough functionality I expect to be able to use it in Terraform API.\r\n\r\nGoals:\r\n* Vanilla grass can spread to modded dirt and create the correct modded grass.\r\n* Modded grass can spread to vanilla dirt or other modded dirt and create the correct vanilla or modded grass.\r\n* The same goes for mycelium.\r\n* Additional registries can be easily created for new blocks which extend SpreadableBlock.\r\n\r\nThis PR does not address decay of spreadable blocks, because that can be easily handled by mods via mixin.\r\n\r\nThis PR also does not address allowing mods to change the conditions for spread (such as minimum and maximum light levels), although I could imagine this registry optionally storing a reference to an alternative canSpread method to be used in lieu of vanilla's call to the static method in SpreadableBlock (if only they used an instance method instead ... *sigh*).\r\n\r\nI have added tests to the test mod and tested using runTestmodClient, and also by modifying Terrestria to use the API in production.",
    "head_branch": "1.20.2",
    "is_a_fork": true,
    "comments": [
      "Going to keep this one in last call for a little longer, I think there are still some design questions to be clarified.",
      "> Going to keep this one in last call for a little longer, I think there are still some design questions to be clarified.\r\n\r\nYes, I am still not quite to a good point to pick this up again (and as I mentioned, it could probably be improved now that MixinExtras is available, anyway).",
      "> Yes, I am still not quite to a good point to pick this up again\r\n\r\nNo worries at all, Im quite happy to get this to the finish line myself, its 99% of the way there."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305f30ac82a74541b206f",
    "number": 3377,
    "body": "When transitioning between config and play stage `GlobalReceiverRegistry#endSession` is not called, creating a memory leak.\r\nAlso removed some code repetition.",
    "head_branch": "detach-config-play-transition",
    "is_a_fork": true,
    "comments": [
      "Can we inject `endSession` at `NetworkStateTransitionHandler#handle` instead of at individual packet handlers?",
      "> Can we inject `endSession` at `NetworkStateTransitionHandler#handle` instead of at individual packet handlers?\r\n\r\nMaybe, but I think the changes in this PR make it a bit more clear when its going to happen.",
      "How does injecting at each packet more clear? These packets' handlers themselves don't transition; all vanilla transitions are done in NSTH.handle or disconnection.\r\n\r\nIf the addon registration and unregistration model is too bug-prone, we might move the global receiver propagation to find addons every time the registrations change. We have the client->server connection on MinecraftClient and the server->client connections in one of the server classes, and we can thus derive the addons we need.",
      "I actually have a POC for handling the session automatically in https://github.com/deirn/fabric/commit/0596ed73a3c495771de67a0e9cdc75dd97f243db, it ends the session in `ClientConnection#setPacketListener`. Seems to be working on my limited test, though I became too busy to continue it.",
      "> I actually have a POC for handling the session automatically in [deirn@0596ed7](https://github.com/deirn/fabric/commit/0596ed73a3c495771de67a0e9cdc75dd97f243db), it ends the session in `ClientConnection#setPacketListener`. Seems to be working on my limited test, though I became too busy to continue it.\r\n\r\nThanks, I will take a proper look into this another day to figure out whats best. 👍 ",
      "Merged as part of https://github.com/FabricMC/fabric/pull/3394 Many Thanks :)"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305f40ac82a74541b2070",
    "number": 3374,
    "body": "One code bug (possible memory leak when using reconfiguration), one javadoc issue, and one testmod issue.",
    "head_branch": "port/23w40a/misc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix 23w40a port issues (#3374)\n\n* Fix testmod calling Text#translatable with non-primitive arg\r\n\r\n* Fix javadoc in BlockPickInteractionAware\r\n\r\nThere is no immediate need to change the param type, as the\r\nworld can be obtained from `player.getWorld()`.\r\n\r\n* Fix unload events not running during reconfiguration"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305f50ac82a74541b2071",
    "number": 3373,
    "body": "Fixes FabricBlockSettings' copyOf method missing several new settings introduced as a result of the removal of Materials.\r\n\r\nSpecifically `burnable`, `liquid`, `forceNotSolid`, `forceSolid`, `pistonBehavior`, `instrument`, and `replaceable`. These are all copied by the vanilla `BlockSettings.copy` as well.\r\nThe `emissiveLightingPredicate` is also now copied in vanilla, so I moved the copy of that to reflect that change.\r\n\r\nThis should probably also be backported to 1.20.1, and frontported to 1.20.3 (at least for now, until it gets fully json'd away)",
    "head_branch": "1.20.2-morecopiedsettings",
    "is_a_fork": true,
    "comments": [
      "Shouldn't FabricBlockSettings also just be deprecated in favor of interface injection?",
      "> Shouldn't FabricBlockSettings also just be deprecated in favor of interface injection?\r\n\r\nProbably, I would suggest waiting to see what (if anything) 1.20.3 does to this, its possible it might not exist in its current form for much longer.",
      "If you want a real-world example of something broken because of the missing copies, Every Compat (WoodGood) apparently uses the instrument as one of the checks for whether something is a wood block, which has broken their support for some Fabric mods using `FabricBlockSettings.copyOf`.  It would be nice to know sooner than 1.20.3 whether this will get fixed or we should switch to `Block.Settings.copy` or `AbstractBlock.Settings.copy`."
    ],
    "commit_messages": [
      "Fix FabricBlockSettings copyOf missing settings (#3373)\n\nFixes FabricBlockSettings' copyOf method missing several new settings introduced as a result of the removal of Materials.\r\n\r\nSpecifically, burnable, liquid, forceNotSolid, forceSolid, pistonBehavior, instrument, and replaceable. These are all copied by the vanilla `BlockSettings.copy` as well.\r\nThe emissiveLightingPredicate is also now copied in vanilla, so I moved the copy of that to reflect that change."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305f50ac82a74541b2072",
    "number": 3369,
    "body": "`BiomeSource#getBiomes` mixin applies to all biome sources, including one for Overworld. The return value is a set; however one caller in the worldgen code iterates over it: `PlacedFeatureIndexer`. Using a hash set here randomizes the return value, affecting feature placement. Use a linked hash set instead.\r\n\r\nRequesting backport for all supported versions.\r\n\r\nFixes #3366",
    "head_branch": "biome-api/fix-feature-shifting",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix inconsistency of placed feature locations (#3369)\n\n* Fix inconsistency of placed feature locations\r\n\r\n`BiomeSource#getBiomes` mixin applies to all biome sources, including one for Overworld.\r\nThe return value is a set; however one caller in the worldgen code iterates over it: `PlacedFeatureIndexer`.\r\nUsing a hash set here randomizes the return value, affecting feature placement.\r\nUse a linked hash set instead.\r\n\r\n* Improve fix to only make changes when required.\r\n\r\n---------\r\n\r\nCo-authored-by: modmuss50 <modmuss50@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305f60ac82a74541b2073",
    "number": 3367,
    "body": "Add `ClientPlayerBlockBreakEvents.AFTER` client side.  \r\n\r\nThis does not add to the current `PlayerBlockBreakEvents` since it could be a breaking change.  \r\nThis does not add client-side `ClientPlayerBlockBreakEvents.BEFORE` and `ClientPlayerBlockBreakEvents.CANCELED` since the use case is covered by `AttackBlockCallback`.  ",
    "head_branch": "client-block-break",
    "is_a_fork": true,
    "comments": [
      "Checks failing for no reason... And I can't rerun it.",
      "Sorry just noticed this is still in last call, thats on me. Ill make sure to get this released soon, the holiday might delay me a few days.  Please remind me when I forget stuff like this 👍 "
    ],
    "commit_messages": [
      "Add Client After Block Break Event (#3367)\n\n* Add clientside after block break event\r\n\r\n* Update tests\r\n\r\n* Checkstyle, of course\r\n\r\n* Update Javadoc\r\n\r\n* New Event\r\n\r\n* Checkstyle 2 electric boogaloo\r\n\r\n* Remove block entity parameter\r\n\r\n* Refactor ClientPlayerBlockBreakEvents\r\n\r\n* Update Javadoc"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662305f70ac82a74541b2074",
    "number": 3365,
    "body": "This allows using spotlessApply to fix a number of the common formatting requirements, such as imports and tabs.",
    "head_branch": "spotless-imports",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Configure spotless for imports, sort imports. (#3365)\n\n* Configure spotless to also do imports. Allows for auto applying.\r\n\r\n* Order imports"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305f80ac82a74541b2075",
    "number": 3364,
    "body": "For 1.20.3 only, also see #3354 ",
    "head_branch": "stable-transfer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[1.20.3] Make Transfer API stable & remove previously deprecated API. (#3364)\n\n* Remove deprecated transfer APIs.\r\n\r\n* Make Transfer API stable."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305f90ac82a74541b2076",
    "number": 3363,
    "body": "Wont break the API for mods that are correctly using these events in the client sourceset (or merged mods).\r\n\r\nSeems this was just missed when the inital split was made.",
    "head_branch": "fix/client-pick-block-sides",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[1.20.3] Move clientPickBlock APIs to client source set. (#3363)\n\n* Move clientPickBlock APIs to client source set.\r\n\r\n* Fix entrypoints\r\n\r\n* Dont move impl class to test lol"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305fa0ac82a74541b2077",
    "number": 3359,
    "body": "This PR is a direct port of my utility mod. \r\nI was encouraged to PR this into fabric. \r\n\r\nThis api allows screens to be layered on top of each other, so you can have more than one screen displayed at time.  \r\n\r\nhttps://github.com/mysticdrew/FabricScreenLayers",
    "head_branch": "1.20.2-add-screen-layer-api",
    "is_a_fork": true,
    "comments": [
      "The api surface should be changed\r\n\r\nmod a: *adds health bar overlay*\r\nmod b: *adds armor bar overlay*\r\nmod a: I no longer need the health bar overlay\r\nmod a: *popLayer()* -> pop's armor bar overlay instead\r\n\r\nsame concept applies for if REI or something wanted to use the API. Additionally it's just kinda annoying to use a stack-based system to manage sub-screens",
      "> The api surface should be changed\r\n> \r\n> mod a: _adds health bar overlay_ mod b: _adds armor bar overlay_ mod a: I no longer need the health bar overlay mod a: _popLayer()_ -> pop's armor bar overlay instead\r\n> \r\n> same concept applies for if REI or something wanted to use the API. Additionally it's just kinda annoying to use a stack-based system to manage sub-screens\r\n\r\nThese are not overlays, these are screens. \r\nOnly the top layer or all layers can be removed. Middle layers are not intended to be removed. \r\nMods don't really have a need to put screens on top of another mod's screen. That sounds confusing anyways. ",
      "ok so it's just for one mod, but managing screens as a stack is still annoying. it would be much easier to deal with a map instead of having to pop-pop-pop-push-push-push-push to swap out a screen in the middle. I don't see why there has to be an arbitrary restriction on how screen layers can be added or removed.",
      "> ok so it's just for one mod, but managing screens as a stack is still annoying. it would be much easier to deal with a map instead of having to pop-pop-pop-push-push-push-push to swap out a screen in the middle. I don't see why there has to be an arbitrary restriction on how screen layers can be added or removed.\r\n\r\nThis is a simple way to render a screen on top of another screen. You cannot interact with the screens below, mouse clicks and key presses are not passed through. Only the top layer gets the clicks and presses. \r\n\r\nCall the pop on your screen's close method, it removes the screen from the stack and the one below it is rendered and can be interacted with. \r\n\r\nThis is not a random collections of screens, this is a LIFO stack of screens. I will not even attempt to manage a LIFO map of screens, that sounds brittle. \r\n",
      "Since it's not intended for mods to be compatible, wouldn't extending Screen class to add layered rendering support be better? As I'm sure it should be possible to do that (while not being too hard), which would require less mixins and made state local instead of global. ",
      "I would like to see where your mod is currently being used. Screenshots?\r\n\r\nThe vanilla design for a screen is to take the parent in the constructor and switch to the parent when closed. Unless some overlay is needed, this is probably fine. No need to make it more complex.",
      "> I would like to see where your mod is currently being used. Screenshots?\r\n> \r\n\r\n@apple502j I use it in JourneyMap for the right click context menu on the Fullscreen Map. Then, I do not have to worry about managing any clicks on the map while the menu is up.\r\n\r\nI can get screenshots later after work. \r\n\r\n",
      "> The vanilla design for a screen is to take the parent in the constructor and switch to the parent when closed. Unless some overlay is needed, this is probably fine. No need to make it more complex.\r\n\r\nMy use case for this is a modal window which keeps the original screen in the background for context and whose closing must not re-init the original screen. Vanilla Minecraft has no use case where the original screen should be rendered behind the \"stacked\" one.\r\n![grafik](https://github.com/FabricMC/fabric/assets/11262040/499979d3-5bac-42d4-afb4-8fb423561d4c)\r\n",
      "These two seem like can be solved by just calling render/init methods of parent screen in the current one, without need for handling stacking on global state",
      "> Since it's not intended for mods to be compatible, wouldn't extending Screen class to add layered rendering support be better? As I'm sure it should be possible to do that (while not being too hard), which would require less mixins and made state local instead of global.\r\n\r\n> These two seem like can be solved by just calling render/init methods of parent screen in the current one, without need for handling stacking on global state\r\n\r\nThis then requires the developer to handle passing all input calls to the screen, one layer, sure not much of an issue. Many layers it can get messy. \r\n\r\nThis solution, which is similar to how Forge does it, Minecraft takes care of the screen management of the top most screen, which includes rendering and inputs. \r\n\r\nWhile sure, there are multiple ways to handle screen layering. This is by far the simplest for someone wanting to use the feature. \r\n",
      "In today's snapshot, Mojang introduced a popup screen that renders a parent screen behind it. I think we should stick to vanilla conventions and avoid introducing unnecessary complexity to how screen rendering works.",
      "This implementation breaks once some other mod sets the screen (as it clears when someone else changes screen) and then tries to restore it vanilla way. This is why implementing it fully within screen would be better as it avoids this issue",
      "Note: class_8816 in 23w40a implements a stackable popup screen. Not a drop-in replacement, but that provides a good API.",
      "Interesting, this is good I guess. \r\nNot quite a drop in replacement, but close. \r\nMain difference is my implementation any screen no matter what can be stacked. This implementation, only the custom screen can do it.\r\n\r\nSeems this is not needed/wanted for fabric. I will close it. "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305fb0ac82a74541b2078",
    "number": 3354,
    "body": "The following APIs have been made stable:\r\n\r\n- Biome API, suggestions such as #3316 can be made without breaking the existing API.\r\n- FabricDynamicRegistryProvider, well tested and widely used.\r\n- FabricItemGroupEntries, well tested and widely used.\r\n- Message API\r\n- Configuration networking APIs\r\n- Resource conditions\r\n\r\nTransfer API is still expertimental as there are some APIs that will be removed during the next snapshot cycle.",
    "head_branch": "task/stable-apis",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make some experimental APIs stable. (#3354)\n\n* Make some experimental APIs stable.\r\n\r\n* Imports."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662305fb0ac82a74541b2079",
    "number": 3353,
    "body": null,
    "head_branch": "dynreg-datagen-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix bad interaction between `FabricDynamicRegistryProvider` and modded dynamic registries (#3353)\n\n* Add reproduction test\r\n\r\n* Fix the issue"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305fc0ac82a74541b207a",
    "number": 3352,
    "body": "Hey,\r\n\r\nThe current loot table mixin <https://github.com/FabricMC/fabric/blob/1.20.1/fabric-loot-api-v2/src/main/java/net/fabricmc/fabric/mixin/loot/LootManagerMixin.java#L55> updates the return value which will automatically blocks all modded mixins with the same injection but higher priority. \r\n\r\nSo I added an event which can be used to track down when all loot tables are loaded + modified by fabric events.\r\nMy first idea was to move the mixin to `apply` again like in previous versions but the current mixin requires the `ResourceManager` which does not exist in `apply` and I wasn't sure if collecting the `ResourceManager` first, storing it in the class and passing it later on is a preferable way for fabric. ",
    "head_branch": "1.20.1-LootTableLoaded",
    "is_a_fork": true,
    "comments": [
      "General question, whats the use case for this event? I see the test mod is only checking that loot table is not empty, I imagine you plan to do more with it?",
      "@modmuss50 [Very likely yes](https://github.com/AlmostReliable/lootjs).",
      "> General question, whats the use case for this event? I see the test mod is only checking that loot table is not empty, I imagine you plan to do more with it?\r\n\r\nYes. I want to add loot table modification to LootJS and I want to trigger the LootJS event when all loot tables are loaded and modified by mods. So packdevs can further modify them by their needs. "
    ],
    "commit_messages": [
      "Add LootTableEvents.LOADED event  (#3352)\n\n* Implement `LootTableEvents.LOADED` event\r\n\r\n* Update for checkstyle\r\n\r\n* rename event\r\n\r\n* Update fabric-loot-api-v2/src/main/java/net/fabricmc/fabric/api/loot/v2/LootTableEvents.java\r\n\r\nCo-authored-by: Juuz <6596629+Juuxel@users.noreply.github.com>\r\n\r\n---------\r\n\r\nCo-authored-by: modmuss <modmuss50@gmail.com>\r\nCo-authored-by: Juuz <6596629+Juuxel@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662305fd0ac82a74541b207b",
    "number": 3349,
    "body": "No functional change.",
    "head_branch": "fix/server-network-impl-method-name",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix incorrect internal method names in ServerNetworkingImpl (#3349)\n\nNo functional change."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305fe0ac82a74541b207c",
    "number": 3348,
    "body": null,
    "head_branch": "biome-api/1.20.2-javadoc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Biome API: javadoc fixes (#3348)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305ff0ac82a74541b207d",
    "number": 3347,
    "body": null,
    "head_branch": "content-registries/1.20.2-javadoc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Content Registries: javadoc and small refactor (#3347)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662305ff0ac82a74541b207e",
    "number": 3344,
    "body": "The Minecraft Fandom wiki has been forked to a new domain: minecraft.wiki. Learn more here: https://minecraft.wiki/w/Minecraft_Wiki:Moving_from_Fandom. This PR updates the wiki url accordingly.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306000ac82a74541b207f",
    "number": 3343,
    "body": "Actual documentation on how to use codecs would be veeeery long for inclusion, therefore it is omitted.",
    "head_branch": "recipe-api/codec-javadoc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Document the getCodec method (#3343)\n\n* Document the getCodec method\r\n\r\n* Update fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/api/recipe/v1/ingredient/CustomIngredientSerializer.java"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306010ac82a74541b2080",
    "number": 3342,
    "body": "No backport necessary.",
    "head_branch": "message-api/1.20.2-javadoc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Message API javadoc (#3342)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306020ac82a74541b2081",
    "number": 3341,
    "body": "When merging all versions must be bumped.",
    "head_branch": "update/loom-1-4",
    "is_a_fork": true,
    "comments": [
      "Now building with Java 21 from Microsoft. (Still targets J17 of course)"
    ],
    "commit_messages": [
      "Update to loom 1.4 (#3341)\n\n* Update to loom 1.4\r\n\r\n* Try java 21\r\n\r\n* Revert \"Try java 21\"\r\n\r\nThis reverts commit 5cb23945879f3c769e066a63a1c564f4a15d0a61.\r\n\r\n* Try java 21 again"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306030ac82a74541b2082",
    "number": 3336,
    "body": "Minecraft Wiki has officially moved from Fandom to their own wiki. I updated a link I found in a comment.",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update link to Minecraft Wiki (#3336)\n\nMinecraft Wiki has officially moved from Fandom to their own wiki. I updated a link I found in a comment."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306030ac82a74541b2083",
    "number": 3331,
    "body": "Fix ClientConfigurationNetworkAddon.handleReady() being called too late.\r\nThis fixes a crash when assertions are enabled.\r\nAlso fixes ClientConfigurationConnectionEvents.READY being called at the incorrect time. Assertions have also been enabled for all Fabric API run configs.\r\n\r\nFixes #3330",
    "head_branch": "bugfix/3330",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix ClientConfigurationNetworkAddon.handleReady() being called too late. (#3331)\n\nThis fixes a crash when assertions are enabled.\r\nAlso fixes ClientConfigurationConnectionEvents.READY being called at the incorrect time.\r\nAssertions have also been enabled for all Fabric API run configs."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306040ac82a74541b2084",
    "number": 3328,
    "body": "Closes #3327\r\n\r\nThe discoverbility is low, however I think most people will first try null and then realise it crashes. At the moment this is by far the easyist fix.",
    "head_branch": "fix/3327",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Handle null being passed as the datafix type to PersistentState.Type (#3328)\n\n* Handle null being passed as the datafix type to PersistentState.Type\r\n\r\nCloses #3327\r\n\r\n* Checkstyle ;-)\r\n\r\n* Update fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/mixin/object/builder/PersistentStateManagerMixin.java\r\n\r\nCo-authored-by: Juuz <6596629+Juuxel@users.noreply.github.com>\r\n\r\n---------\r\n\r\nCo-authored-by: Juuz <6596629+Juuxel@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306050ac82a74541b2085",
    "number": 3324,
    "body": null,
    "head_branch": "fix/unhandled-packets",
    "is_a_fork": true,
    "comments": [
      "Yep, this indeed is an unintended side effect since mojang's networking update, where custom payloads have dedicated buf than the buf straight from netty :)",
      "is this related to this? https://github.com/orgs/FabricMC/discussions/3391 "
    ],
    "commit_messages": [
      "Fix unhandled packets disconnecting the client. (#3324)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306060ac82a74541b2086",
    "number": 3312,
    "body": "Closes #3302\r\n\r\nSee: https://www.minecraft.net/en-us/article/minecraft-snapshot-22w11a for more info about filters.\r\n\r\nMods cannot filter each other, but they can filter packs (such as Minecraft its self) that are loaded before. Overlays and features are also supported.",
    "head_branch": "fix/resource-pack-filters",
    "is_a_fork": true,
    "comments": [
      "As suggested by Pepper, it would be best to \"flatten\" group resource packs instead.",
      "> As suggested by Pepper, it would be best to \"flatten\" group resource packs instead.\r\n\r\nCan you explain this a bit more, I must have missed the conversation? This PR is basically providing a \"flatterned\" pack.mcmeta file?\r\n\r\nI think its very much out of scope to make large changes to this in this PR.",
      "The conversation is here on Fabricord: https://discord.com/channels/507304429255393322/566276937035546624/1150963915384160416",
      "> The conversation is here on Fabricord: https://discord.com/channels/507304429255393322/566276937035546624/1150963915384160416\r\n\r\n> Pepper — Today at 02:19\r\nThere was some discussion in the NeoForge server today about a new implementation strategy for mod resource packs. It was suggested that the resource pack menu show one pack as it does currently, but that it would not itself provide any packs and only serve as a marker. Internally, each mod resource pack would be individually added to the ResourceManager pack list such that these packs take the place of the marker pack in the priority list. Having all packs be added separately would solve the issue of getting all resources for one location only retrieving the top-most resource from all mods and it would allow pack.mcmeta features to work automatically. Another benefit of separate packs I can add myself is that mod-added log warnings which report a pack ID will be more specific, as the pack ID will be \"some_mod_resources\" instead of \"fabric_mods\".\r\n\r\nPosting here so its not lost, yeah that seems to make more sense at a high level actually doing it might be easier said than done. I dont know without trying, seems like it would be better suited to go in along with the larger scale resource loader changes.\r\n\r\nFor now I will park this PR.",
      "> For now I will park this PR.\r\n\r\nWhy? This is an internal impl, does it somehow affect the behavior of these features?\r\n",
      "Hey, with 1.20.3 coming out, could this please be revisted and made a higher priority? As a datapack developer, pack overlays not working on Fabric is a *severe* issue. Myself and many other creators I know of use overlays to have a single datapack for all 1.20.x versions.\r\n\r\nIn 1.20.2 this wasn't an enourmous issue, since the main thing that changed was potion NBT, and overlays are technically avoidable by adding both NBT formats at once.\r\n\r\nHowever, 1.20.3 has the `minecraft:grass` to `minecraft:short_grass` change. In preparation for this, datapack creators are making an overlay to override the changes. If we want to package the datapack as a mod - which is extremely common - this functionality will not work, and the datapack will crash.\r\n\r\nYes, we could technically release make a separate 1.20.3 version of our datapacks to package as mods, and release separately. But this will just cause confusion having a version split in the mod releases, but not the datapacks. It will also be a lot more headache-inducing work for us. And as far as I'm aware, the overlay issue does not exist in Forge/NeoForged - making only Fabric hoding us back. (Please correct me if I'm wrong on this part.)\r\n\r\nWith Mojang making more and more breaking changes in minor version releases, overlays are our saving grace. We would greatly appreciate if this PR could be addressed and merged for 1.20.3. Of course backporting this to 1.20.2 as well would be very nice, but 1.20.3 is much more important at the moment.",
      "I am looking into this stuff, hopefully I can finish it before the end of this year. Not a guarantee though.",
      "I've been working on this over at NeoForged - this is the approach I took: https://github.com/neoforged/NeoForge/pull/367 (this is what is meant by the \"flattening\" in question).\r\n\r\nBasically, vanilla makes a couple of assumptions that the current system violates, and that's what leads to this issue in general. Those assumptions are (using yarn names):\r\n\r\n- one pack per `ResourcePackProfile`, in the form of a `ResourcePackProfile.PackFactory`\r\n- one copy of a resource at any given `Identifier` per `ResourcesPack`\r\n- `ResourcePackProfile` is the fundamental, separable unit of resource/data packs - multiple overlays become one `ResourcePackProfile`\r\n\r\nObeying these assumptions means that overlays will work, filters will work, any future such features Mojang adds will work, and any similar features *mods* add will work, all out of the box.\r\n\r\nWhat these add up to, basically, is that flattening has to happen at the `ResourcePackProfile` level, not the `ResourcePack` level. The issue with an approach like the one this PR originally takes is that it could allow mod resource/data packs to sort of \"bleed over\" into one another - if multiple mods had the same overlay names or whatever, or if an overlay from one mod overlays a resource added by multiple mods like a tag file. If you decide it's the direction you'd like to go, feel free to steal whatever you'd like from the work I did in my PR to neoforged; I looked at implementing something similar for fabric a while back, and it looked feasible, though I ran out of time",
      "Superseeded by https://github.com/FabricMC/fabric/pull/3473"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306070ac82a74541b2087",
    "number": 3311,
    "body": "Continuation from #3306, with much cleaner design and code.",
    "head_branch": "object-builder/trade-experiment",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Support trade rebalance experiment (#3311)\n\n* Support trade rebalance experiment\r\n\r\n* Add pool IDs\r\n\r\n* Delayed pool modification\r\n\r\n* Fix unused import"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306080ac82a74541b2088",
    "number": 3310,
    "body": "# Background: \r\n\r\nThe modding community has been split between two tag namespaces. The `c` tag and the `forge` tag with one using folders and the other not. Now that Neoforge is a thing and willing to have discussions about switching namespaces for their tags, we are at a point were we can finally unify both loaders to the same namespace for tags and conventions!\r\n\r\nNeoforge PR: https://github.com/neoforged/NeoForge/pull/135\r\n\r\n# Preface:\r\n  \r\nThis large tag PR is not perfect but it is a great first steps toward a unified tag namespace and convention to ease the burden between both loader's ecosystems and allow for datapacks or other ecosystems to hop in as well to our namespace and conventions if they desire.\r\n  \r\nThere is a ton of moving parts in this PR. Each of these parts I felt are interconnected and are best done all together in a single to help make this switch to the new namespace/conventions as best as possible. The sections below will help break down the PR and go into detail of each part and the reasons for each part. \r\n  \r\nIf after reading the reasons, you still have concerns or suggestions, please voice them on this PR so we can have a discussion! \r\n\r\n# Goals:\r\n\r\n1. Unify both modloaders to the same namespace for tags which is ~~`common`~~ in this PR. **EDIT:** We will be sticking with `c` namespace\r\n\r\n</br>\r\n\r\n2. Add or rename tags to better match each other on both loaders and to match the convention of using folders for better organization. \r\n\r\n</br>\r\n\r\n3. All past tags have a modern equivalent in this PR with backwards compat using optional tag entries. No tags were entirely removed.\r\n\r\n</br>\r\n\r\n4. ~~Datagen translations for modloader common tags under the key format of `tag.<registry>.common.<tagname>` where slashes are turned into periods.~~ **EDIT:** Will be a future PR instead\r\n\r\n</br>\r\n\r\n5. Log short warning by default to console if old tag namespace is detected in a modder's dev environment. Config exists to either turn it off or make it verbose to say all found legacy tags. (Short dev message on by default)\r\n\r\n</br>\r\n\r\n6. ~~Log short warning by default to console if untranslated modded item tags is detected in a modder's dev environment. Have config to either turn it off or make it verbose to say all found untranslated modded item tags. (Off by default)~~**EDIT:** Will be a future PR instead\r\n\r\n# Details And Reasons Of Each Goal:\r\n\r\n### Namespace choice:\r\n\r\nEdit: We are sticking with `c` as we should not let this PR die over namespace concerns. It is important that modding ecosystems all agree on a single standard to make the lives of datapackers, modders, players, and pack makers easier. However, folder conventions will have to stay as I cannot get the other ecosystems to accept non-folder convention. So some work will still need to be done with fabric modder to migrate to new tags as well as spread the word to help clean up the currently polluted `c` namespace.\r\n\r\n~~There are a few reasons to go with `common` namespace as oppose to the currently established `c` namespace on Fabric.~~ \r\n  \r\n</br>\r\n\r\n~~First, the word `common` is much more clear to new modders or to players/modpack makers that this namespace is shared across many mods. `c` doesn't actually mean anything to people not previously familiar with it. Which can lead to confusion on what `c` is for. `common` appears best for conveying the meaning of the namespace to people. Not a powerful reason for this but it is a reason.~~\r\n\r\n~~Second, the `c` namespace is in disaster in conventions at the moment. I'm not talking within Fabric API. I mean as Fabric ecosystem as a whole. To help show what I mean, here is a sheet of all tag usages from the top 1000 Fabric/Quilt mods on Modrinth as of August 4th, 2023: https://docs.google.com/spreadsheets/d/1KBn2hKOz3nnIYh3KAeqv5vezMwFSDO-tL8TUAKYTiBE/edit?usp=sharing~~\r\n\r\n~~In there, you can find some people are using folders under `c`. Some people are not. Some people are properly pluralizing their tag names. Some are not. Basically, it's a mess and I feel this was partially because some modders don't know where to find existing tags and some were not able to figure out what the conventions are when looking at Fabric API's tags. To help facilitate Goal 5, switching off of `c` to `common` makes that goal of notifying people of the new convention we are switching to a million times easier. More info about this logging is in the section below about the logging goal. But yes, this was a big reason for my choice of picking `common`. If we go back to `c` instead, please provide me an alternative solution for notifying people of the new conventions.~~\r\n\r\n</br>\r\n\r\n~~**NOTE:** I know people are going to point out that `common` is a valid modid unlike `c` and that this makes `common` bad. The truth is, that's actually a non-issue. Say if some random mod is made using `common` modid, the modding community will just ignore that mod anyway and it doesn't impact modpacks or anything. Modders will just tell the owner of that mod to change the modid and that'll be that. If it is a heavy concern still, modloaders themselves can just include a dummy `common` modid mod to reserve that namespace to prevent anyone else from using it. Super simple solution. I will leave the choice of reserving the `common` modid up to the modloaders themselves where they can make a PR after this one if we stick with `common` namespace.~~\r\n\r\n</br>\r\n\r\n### Renaming and moving tags to same conventions\r\n\r\nFabric's `c` convention was to never use folders. Forge's convention was to use folders. And Minecraft started out with not using folders but then now does with its block mineable tags. \r\n\r\nWhat it looks like to me is that Minecraft starts with no folders originally but as they grew, they started seeing the value of grouping similar tags together by folders. But they still keep the non-folder tags for backwards compatibility. Forge right away saw that trying to mimic vanilla would be an issue for scalability in a modded ecosystem so they went with folders. Fabric however, stuck with the legacy non-folder convention that vanilla did and this lead to a lot of messiness that lead to the current situation with the `c` namespace tag conventions: https://docs.google.com/spreadsheets/d/1KBn2hKOz3nnIYh3KAeqv5vezMwFSDO-tL8TUAKYTiBE/edit#gid=0\r\n\r\nIf you check what fabric currently does with dyes, all of them are in the format of `c:<color>_dyes` which just bloats the top level view of the `c` tags: https://github.com/FabricMC/fabric/tree/93d8cb82e85c3d5744716430516daef393cf5815/fabric-convention-tags-v1/src/generated/resources/data/c/tags/items\r\n\r\nInstead, if we go with the folder convention, these tags would've be grouped under `c:dyes/<color>` which is a lot more organized and cleaner. It is also far more scalable for a modded ecosystem as more tags can be added to the folder without making the top level view harder to find certain tags. Example of what a folder dye tag looks like:\r\nhttps://github.com/neoforged/NeoForge/tree/1.20.x/src/generated/resources/data/forge/tags/items/dyes\r\n\r\nThat is why the convention of this PR is plural + folders. Because of this, many tags from both `c` and `forge` were shuffled around so that tags that mean the same thing on both loaders now matches each other in the `c` namespace so multi-loader modders only need to pull from 1 tag instead of 2.\r\n\r\n</br>\r\n\r\n### Backwards compat with old tags\r\n\r\nI put a lot of work into making sure that **all** old tags from the modloader are added as an optional tag entry in the modern equivalent of the tag. This will allow built jars and datapacks using the old tag names to continue to have compatibility throughout 1.21 Minecraft. Then these backwards compatibility can be deleted in 1.22 Minecraft to clean up this remaining tech debt as everyone had an entire major Minecraft version to update their tags. \r\n\r\n~~However, because of all the tag renaming and moving around, the tag fields in code were also rename to match the changes. **This means this PR is indeed a breaking change for code references to these fields**. This is why this PR is marked for 1.21 Minecraft as that is a good time for doing breaking changes. The reason I did not keep the old field names nor make dummy fields that references the new fields is this would create a lot of tech debt that I felt the modloaders don't want to take on. If this is a deal breaker and that the dummy fields should be added to keep code compat, let me know and I'll update this PR to not be breaking for code even with the tech debt.~~ Edit: New commit now makes the old tag module marked as deprecated with comments redirecting to v2 of the tag module with the common tags. This means this PR is no longer a breaking change for code usage.\r\n\r\nAs you read this PR's code, you'll notice I put the optional tag entries at the bottom of all the datagen classes for tags. This is so that the optional entry shows up last in the tag's json (cleaner to me and shows it is not super important to viewers) and also makes it very easy to delete in 1.22 Minecraft. Just select the code block at bottom and delete. Done. No more backwards compat. Hopefully this helps!\r\n\r\nMore info on individual tags can be found in the Misc section.\r\n\r\n</br>\r\n\r\n### Datagenning tag translations\r\n\r\n**EDIT:** Will be a future PR instead\r\n\r\n~~This might seem strange at first but it turns out that recipe viewer mods are making use of translations for item tags. I asked about this and another person said their own mod would also benefit from item tag translations. So there is a demand for translations of these tags and currently, every mod that does will need to add translations for all the `c` and `forge` tag entries from the modloaders. Doesn't seem right.~~\r\n\r\n~~So instead, I added translations for the tags and I figured, since I am here making item tag translations, might as well add translations for the rest of the common tags for completeness. I did not add translations for `minecraft` item tags but if desired, I can update this PR to include datagen translations for Minecraft's item tags. Not sure if this is something a Modloader wants to handle from Minecraft. But at the very least, modloaders should be translating their own tags to help out modders and reduce duplicate translations between mods.~~\r\n\r\n~~Also, `TagUtil.getTagTranslationKey` is added as a helper method that modders can use to make it easier to datagen tag translations. Just takes the TagKey and spits out what the lang key is.~~\r\n\r\n</br>\r\n\r\n### Log warning for legacy namespace presence\r\n\r\nThis part is critical to getting modders to update to the new namespace and conventions. Basically, there's no way we can reach out to every modder through Discord or through changelogs as people just update their modloader/minecraft version and start porting. There are too many ways that people can slip through the cracks.\r\n\r\nSo to have a solution that gets this new namespace and convention change out to all modders that actually need this info, this PR include code that will grab all the tags from all Minecraft registries and check for the presence of the legacy namespace. If it is found, it will log a short message that states:\r\n\r\n    Dev warning - Legacy Tags detected. Please migrate your old `c` tags to our new `c` tags that follows better conventions!\r\n    See classes under net.fabricmc.fabric.api.tag.convention.v2 package for all tags.\r\n\r\n    NOTE: Many tags have been moved around or renamed. Some new ones were added so please review the new tags.\r\n    And make sure you follow tag conventions for new tags! The convention is `c` with nouns generally being plural and adjectives being singular.\r\n    You can disable this message by this system property to your runs: `-Dfabric-tag-conventions-v1.legacyTagWarning=SILENCED`.\r\n    To see individual legacy tags found, set the system property to `-Dfabric-tag-conventions-v1.legacyTagWarning=DEV_VERBOSE` instead. Default is `DEV_SHORT`.\r\n\r\nIf set to verbose, the above message will print out this format:\r\n\r\n    Dev warning - Legacy Tags detected. Please migrate your old `c` tags to our new `c` tags that follows better conventions!\r\n    See classes under net.fabricmc.fabric.api.tag.convention.v2 package for all tags.\r\n\r\n    NOTE: Many tags have been moved around or renamed. Some new ones were added so please review the new tags.\r\n    And make sure you follow tag conventions for new tags! The convention is `c` with nouns generally being plural and adjectives being singular.\r\n    You can disable this message by this system property to your runs: `-Dfabric-tag-conventions-v1.legacyTagWarning=SILENCED`.\r\n    To see individual legacy tags found, set the system property to `-Dfabric-tag-conventions-v1.legacyTagWarning=DEV_VERBOSE` instead. Default is `DEV_SHORT`.\r\n\r\n    Legacy tags:\r\n        TagKey[minecraft:block / c:barrel]   ->  TagKey[minecraft:block / c:barrels] \r\n        TagKey[minecraft:item / c:potato]   ->  TagKey[minecraft:item / c:potatoes] \r\n        TagKey[minecraft:item / c:blue_dyes]   ->  TagKey[minecraft:item / c:dyes/blue] \r\n\r\nThis is set to print only in `DEV_SHORT` mode by default so that mod's development environment after world load will see only the shortened message. The modes are `SILENCED`, `DEV_SHORT`, `DEV_VERBOSE`, ~~`PROD_SHORT`, `PROD_VERBOSE`. Prod is included as an opt-in option in case modloader maintainers want to see how many legacy tags are in use for 1.21 modpacks. The prod options can be removed from PR if desired.~~ **EDIT:** Prod option removed\r\n\r\nHopefully this isn't too intrusive. But at least the message says how to turn it off as well as where to find the new tags. This should greatly help speed up modders switching to the new tags and help them see what the desired conventions are. ~~The end goal is a `common` namespace that is not a wild-west of conventions like the `c` namespace is. Will this be successful? I don't know but I have hope that it will. Only way to know for sure is to try this out.~~\r\n\r\n</br>\r\n\r\n### Log warning for untranslated item tags presence\r\n\r\n**NOTE:** This part is a bit more controversial but if desired, this logging can be chopped out of this PR.\r\n\r\n**EDIT:** This is now set to off by default and has to be opt-in by the modder in the config file.\r\n\r\nThe idea is since recipe viewers and other mods rely on item tags to be translated, a short message will be logged if any are found to be untranslated from mods. I did not do the other tag types because there is no demand for those to be translated and thus, doesn't make sense to push for translated tags of other stuff. Only item tags. \r\n\r\nThe code in this PR will grab all the item tags and if running on client side, check if the tag is translated. If it is not, it will log a short message that states:\r\n\r\n    Dev warning - Untranslated Item Tags detected. Please translate your item tags so other mods such as recipe viewers can properly display your tag's name.\r\n    The format desired is tag.item.<namespace>.<path> for the translation key with slashes in path turned into periods.\r\n    You can disable this message in Fabric API's properties config file by setting log-untranslated-item-tag-warning to \"SILENCED\" or see individual tags with \"DEV_VERBOSE\".\r\n\r\nSetting it to verbose basically prints out all the item tags like so:\r\n\r\n    Dev warning - Untranslated Item Tags detected. Please translate your item tags so other mods such as recipe viewers can properly display your tag's name.\r\n    The format desired is tag.item.<namespace>.<path> for the translation key with slashes in path turned into periods.\r\n    You can disable this message in Fabric API's properties config file by setting log-untranslated-item-tag-warning to \"SILENCED\" or see individual tags with \"DEV_VERBOSE\".\r\n\r\n    Untranslated item tags:\r\n      modded1:pies\r\n      modded2:potatoes\r\n      modded2:paintings/1x1\r\n\r\n~~This is set to print only in `DEV_SHORT` mode by default so that mod's development environment after world load will see only the shortened message.~~ The default is `SILENCED` mode and has to be opt-in. The modes are `SILENCED`, `DEV_SHORT`, `DEV_VERBOSE`, `PROD_SHORT`, `PROD_VERBOSE`. Prod is included as an opt-in option in case modloader maintainers want to see how many untranslated modded item tags are in use for 1.21 modpacks. The prod options can be removed from PR if desired.\r\n\r\n</br>\r\n\r\n### Misc\r\n\r\nSo for the individual tags in this PR, there's a lot of changes done. This is not a comprehensive list but some notable points.\r\n\r\n- The deprecated tag fields for buckets and tools were deleted since this PR is already a code breaking change. Might as well do a small cleanup. These can be added back if no code-breaking change is wanted.\r\n\r\n</br>\r\n\r\n- Folders are added and many tags migrated to them.\r\n\r\n</br>\r\n\r\n- block tag c:movement_restricted is renamed to c:relocation_not_supported since that tag name is what many forge mods were using and it covers teleporting blocks to another location. Movement restricted sounded like it was for piston pushing stuff when in reality, it is meant for any kind of block relocating behavior.\r\n\r\n</br>\r\n\r\n- `is_` prefix is added to the biome tags to match the Neoforge PR and how vanilla names their biome tags.\r\n\r\n</br>\r\n\r\n- `c:tools/bows` was split into `c:tools/bows` and `c:tools/crossbows` because these are two separate tools and has different behaviors. Mods that don't care can pull from both tags. But mods that do now can pull exactly what they need. Also, `c:tools/fishing_rods` was added as well since it is a tool and I seen quite a few modded Fishing Rods made.\r\n\r\n</br>\r\n\r\n- Brand new `c:dyed_blocks` and `c:dyed_items` tag was added and has a folder for individual colors in it. I added this because the Forge tags had 32 colors tags for Stained Glass and Stained Glass Panes. It's awful. Imagine if this was extended to every colored block... My solution was to remove those colored glass tags and instead, create new overarching tags that collect all dyed color blocks and items. And the subfolder for these dyed_blocks and dyed_items lists each individual color. The goal is now if you wanted Red Stained Glass Blocks, you would check if a block is in the `c:glass_blocks` tag and is also in the `c:dyed_blocks/red` tag. If so, there's your collection of Red Stain Glass Blocks! This is now universal and can be used for any dyed color block! Much cleaner and far more useful. I hope color-based mods like Spectrum will make good use of this!\r\n\r\n</br>\r\n\r\n- `c:capturing_not_supported` entity type tag now added because there's over 20 mods that I know of that lets players carry an entity or stuff them into an item to move around. I added one entity myself and had to add it to so many mod's disallow tags for picking up into items. We definitely need to standardize this so entity creators only have 1 tag to add to and other mods can pull this tag into their own disallow tag for their stuff.\r\n\r\n</br>\r\n\r\n- Not every tag from the Neoforge PR is ported over to this PR. I only ported the tags that I assumed would be very useful to have such as `c:tools/crossbows`. The reason for this is some tags in the other loader could be questionable so rather than bog this PR down with arguments over these various tags, I'll leave it up to another person's PR to attempt to add tags from one loader to another after my PR. All I did was make sure that the tags in each loader follows a convention and tags for the same thing matches up.\r\n\r\n</br>\r\n\r\n# Conclusion\r\n\r\nAgain, please let me know your feedback or suggestions or thoughts about the various parts of this PR. It is not perfect and getting loaders to use the same namespace and convention for tags is a controversial topic. That is why I am making this PR early long before 1.21 so we can have enough time for discussions.\r\n\r\nPlease also checkout the discussions on the PR for the other loader too as what is talked about there could also impact this PR. No matter what namespace is chosen in the end, both PRs will use the same namespace. That is a hard requirement of this PR so please make sure others from the other loader are involved in the discussion.\r\n\r\nNeoforge PR: https://github.com/neoforged/NeoForge/pull/135\r\n\r\nThank you for you time to read this! I know it was long. But this is very important for the modding ecosystems as what is decided for these PRs will have long-lasting impact.",
    "head_branch": "Common-Tag-Refactor",
    "is_a_fork": true,
    "comments": [
      "@TelepathicGrunt I recommend not dropping a breaking-change PR directly, without any prior discussion... I also wonder what's the Quilt's position on this.",
      "@apple502j I had some discussions already with some Fabric maintainers. But best shown in PR what the idea is and the PR can change if needed. As stated, if desired, I can adjust PR to not have the breaking changes with the fields but comes at cost of more tech debt. \r\n\r\nQuilt pulls from Fabric so it doesn't matter if they want their own thing, they still have to be compatible with Fabric anyway. So discussion will be here if Quilt wants to talk about it. \r\n\r\nEdit: If the concern is about the wording of \"both loaders\", it's because I consider Quilt as a subset of Fabric in terms of tag compatibility. So it wouldn't make sense to PR Quilt when they will pull this PR in anyway from Fabric. For the purpose of this discussion, Fabric/Quilt are considered the same ecosystem.",
      "\r\n> Edit: If the concern is about the wording of \"both loaders\", it's because I consider Quilt as a subset of Fabric in terms of tag compatibility. So it wouldn't make sense to PR Quilt when they will pull this PR in anyway from Fabric. For the purpose of this discussion, Fabric/Quilt are considered the same ecosystem.\r\n\r\nThis is not true at all. Quilt can just *not* support this for Quilt-exclusive mods and make a hack so it converts back to `c`.",
      "> This is not true at all. Quilt can just _not_ support this for Quilt-exclusive mods and make a hack so it converts back to `c`.\r\n\r\nIf that is what Quilt ends up wanting to do, that is totally fine. I can't stop anyone or any modloader from what decision they ultimately choose. But lets focus back to this PR please.",
      "Please keep this discussion on topic, this is about what we are doing for Fabric. 👍 ",
      "> Second, the `c` namespace is in disaster in conventions at the moment.\r\n\r\nAFAIK this is somewhat due to Forge->Fabric mod ports just changing the namespace and using those conventions on the wrong platform. I'm a bit worried that if a new namespace is introduced, people will just move their existing tags to a new namespace, further adding to the tag soup:\r\n\r\n- Proper `common:` tags (`common:tools/pickaxes`)\r\n- Old `forge:` tags (`forge:tools/pickaxe` -> `common:tools/pickaxe`)\r\n- Old `c:` tags (`c:pickaxes` -> `common:pickaxes`)\r\n\r\nIn my opinion, `c` is still a good namespace choice here due to\r\n- It not being a valid mod ID\r\n- The short name also making the namespace feel unimportant in tag (etc) IDs\r\n\r\nI've also seen the `c` namespace being used in non-tag contexts such as #3129, so this change wouldn't only affect tags.\r\n\r\n---\r\n\r\n> What it looks like to me is that Minecraft starts with no folders originally but as they grew, they started seeing the value of grouping similar tags together by folders. But they still keep the non-folder tags for backwards compatibility.\r\n\r\nAs far as I can tell, there are only three examples of folder tags:\r\n- `mineable` tags\r\n- Banner pattern item tags\r\n- `has_structure` tags\r\n\r\n(This comes from a quick search through the Minecraft Wiki list of tags, it's possible I missed something)\r\n\r\nMany \"folderable\" tags have been added in 1.19/1.20 (cherry wood, mob spawn tags for biomes etc) since the mineables and other folder tags were introduced, so it's not purely backwards compat.\r\n\r\nSince the folder naming pattern is inconsistent with vanilla, I feel like a nice solution for that would be to support some sort of tag aliases where `c:ingots/copper` and `c:copper_ingots` could refer to the same tag.\r\n\r\n---\r\n\r\n> Log warning for untranslated item tags presence\r\n\r\nIMO this is a bit questionable since it affects a non-modding feature (data packs), making the modding API create log spam for untranslated tags that can be added by data packs – which can't provide translations in the first place.",
      "Note with my latest push I just did:  `common:capturing_not_supported` entity type tag now added because there's over 20 mods that I know of that lets players carry an entity or stuff them into an item to move around. I added one entity myself and had to add it to so many mod's disallow tags for picking up into items. We definitely need to standardize this so entity creators only have 1 tag to add to and other mods can pull this tag into their own disallow tag for their stuff.\r\n\r\nPicture of my pain with this lmao: https://imgur.com/svORGdt",
      "Just some thoughts, not a review, I also don't particularly care if tags are folders or not so long as the tags exist and are used.\r\n\r\n`c` was chosen as it was (apparently) common for datapacks to use at the time. I don't know how true that is, but that was part of the logic for choosing it. Has that changed?\r\n\r\nCurrently, FAPI uses `c` to mean \"conventional,\" hence the API name... it would be weird to have a \"conventional tag api for common tags.\" I'd rather keep the `c` namespace.\r\n\r\nI'm still not sure how the top level view of a datagenned datapack folder is of any consequence - especially when the API part is still \"bloated.\" Maybe we need an API for getting tags within folders?\r\n\r\nI'd rather have the compat issue be dealt with by tag aliases (some form of API that says tag A and B are the same).",
      "> For consistency with Yarn, the most deeply nested element of a tag key should come first in its field name; for example, the `minecraft:mineable/pickaxe` tag key is assigned to the `BlockTags.PICKAXE_MINEABLE` field.\r\n\r\nFor this, I matched that convention in new PR but I will say it is really awful for biome tags. Biome tag fields now look like this\r\n![image](https://github.com/FabricMC/fabric/assets/40846040/b5c8e3a3-cb01-4875-b98e-f00ecb06b41f)\r\n\r\nI made a issue report to Yarn to choose a new format for Biome tags because the examples in BiomeTags currently are really bad to read. If that issue report gets resolved, I'll convert this PR's biome tag fields to whatever new format yarn choose for them if they do make a change\r\nhttps://github.com/FabricMC/yarn/issues/3661",
      "Being able to use the same recipes and tags sounds great, so many times I've forgotten to edit the files when coping changes between the two loaders.\r\n\r\n\r\nI'm not sure about the `common:dyed_items` tags; If you wanted red glass, how would you use it in a recipe?\r\nAs far as I'm aware they can't filter a tag, so you couldn't say in `common:glass_blocks` and `common:dyed_items/red`\r\nSo either you'd use the item ignoring the tag system, or create a new tag that would still be missing mod added items.\r\n\r\nThe recipe json would need to support \"and\" (and maybe \"or\") blocks; \"and\" requiring the item to be in all tags (\"or\" is any item form the tags)\r\n```\r\n\"key\": {\r\n  \"R\": { \"tag_and\": [ \"common:glass_blocks\", \"common:dyed_items/red\" ] },\r\n  \"G\": { \"tag_or\": [ \"common:glass_blocks\", \"common:glass_pannes\" ] },\r\n},\r\n```\r\n\r\nAlternatively have tag additions filterable, then they can be created and use in recipes as needed.\r\nred_staind_glass.json\r\n```\r\n{\r\n  \"replace\": false,\r\n  \"values\": [\r\n    {\r\n      \"id\": \"#common:glass_blocks\",\r\n      \"filter\": \"#common:dyed_items/red\"\r\n    }\r\n  ]\r\n}\r\n```",
      "@ShetiPhian Just to clarify for you, the dyed_items tag intersection checks are already accessible to both modders and players/modpack makers. Fabric and Neo both implement custom ingredients that allow for matching items that exist in both tags. The Fabric PR is here: https://github.com/FabricMC/fabric/pull/2586/files#diff-706c7797c8302729d8d33b83bf7882a0e14b564e43e8ffe766a8784ff1d64ad6R37\r\n\r\nhttps://github.com/FabricMC/fabric/pull/2586/files#diff-e23003198861ce8b8037728aec48f17a88b4ba99dcd1ddd57c00f77cccc7c348R17\r\n\r\nPlayers/Pack makers can also have easy access to these custom ingredients as well through kubejs/craftweaker.\r\n\r\nSo the dyed tags should be good and usable in recipes. If you need help with getting the custom ingredients to work, I think there's some folks in Fabric Discord that should be able to help you out.",
      "@TelepathicGrunt well may awareness was off ;)\r\nThat solved the only potential issue/concern I had.",
      "> Since the folder naming pattern is inconsistent with vanilla, I feel like a nice solution for that would be to support some sort of tag aliases where `c:ingots/copper` and `c:copper_ingots` could refer to the same tag.\r\n\r\nAgreed. Currently, tags can only have a one-way inclusion relationship. We can implement such an equivalence if we mod tagmanager to support treating multiple identifiers as aliases via some sort of data like mcmeta, and if such a system exists, we don't need to worry too much about the conventions either.",
      "@Juuxel Going to give some of my thoughts on your comment. There's a lot of stuff floating around in my head. Yeah, there is concern of people grandfathering in their old conventions, but that's what goal number 5 is supposed to address. By logging to those users where to see the new tags and explicitly telling them to follow the new conventions, my hope this will make people actual visually look at the new tags and see what the correct naming is. \r\n\r\nIf even after all that, they still decide to use the wrong naming, that's on the modder at that point. As a modloader API, we did all we could by datagenning the new tags, having an API of the tags, and literally poking them in the logs to look at those tags. There isn't anything more that can be done but I feel the logging that is done could be a huge difference! The Fabric Tag Wiki existed but wasn't able to resolve the tag issue due to visibility issues (I never learned about the wiki till much long after it was made) but the logging impacts all modders right in their log right as they port so visibility issue is resolved with that.\r\n\r\nSo if we go with `c` instead, I don't know how we would even do the logging properly. Maybe it could check for presence of all the old  `c` tags that was renamed/moved in Fabric API? But that won't catch people rolling out their own `c` tags with wrong conventions. The logging won't be able to reach them to recheck the conventions. That's a big concern I have over that. Otherwise we would need to put together some sort of \"Convention Team\" that scans mod sites for mods messing up the `c` namespace and contact those modders but this require time, manpower, and effort. I doubt anyone is going to volunteer to do that.\r\n\r\nBut it sounds like @dexman545 and @liach want's to do aliases but I don't know to make those and not sure how they would function. If it is where Fabric API has the `common` tags but they also act like `c` tags, doesn't having the `c` tags as optional entries in the `common` tag already fulfill that role for backwards compat? But if it is that Fabric API keeps the `c` tags but they also act like `common` tags, then that defeats the entire purpose of a unifying namespace across modloaders. It'll also create significant confusion as modders would look into Fabric API and see `c` tag JSONs or APIs and cause modders to continue to make new tags under `c` rather than properly switching to `common` to also work with other modloaders/datapacks. Now aliases on the folder vs non-folder forms... maybe? I guess that could work but why not just include the non-folder forms as optional tags in the folder forms?\r\n\r\nUltimately, the whole concept of aliases weirds me out as it clashes with the entire purpose of unifying namespaces and how tags works. I rather both PRs either stick with `common` or stick with `c`. If `c` is desired, you can pitch your concerns to Neoforge's PR and see if you can convince them to stick to `c`.\r\n\r\nBut yeah on the `c` not being a valid modid, `common` can too be not valid by modloaders reserving it. So whether a namespace is valid or not doesn't really argue for or against any namespace. Lastly, \"**The short name also making the namespace feel unimportant in tag (etc) IDs**\", what do you mean by that? I am not sure I understand that sentence but if you can clarify, I can give my thoughts about it.\r\n\r\nThe packet/networking stuff can indeed stick with `c`. But tags are exposed to users and modders and I feel `common` would be best for tags. It is a difference between the two parts but I think that's ok as long as the namespace fits the role that it is chosen for to get maximum benefit.\r\n\r\n@dexman545 I never actually heard about `c` being chosen because of datapacks. I always heard it was initially chosen mainly because it wasn't a valid modid. Though What I am seeing is datapacks are adding both `c` and `forge` namespaces to try and be compat with multiple loaders. So if we unify namespaces, that's less typing datapackers have to do which should make them happy.  \r\n\r\nBut the funny thing is the part where you said that `c` means `conventional`, I did not know that and it seems most people did not either. As far as I could tell, most people thought `c` actually stood for `common`. Which does bring up my first reasoning for using `common` which is it is much more clear of what it is and actually means than a single letter. Since it seems people are split on what `c` really stands for outside of people who originally discussed adding `c` to Fabric API in the first place. I like being more explicit than implicit tbh but that may just be me. If needed, we can always rename the API from conventional to common but will wait for feedback from Fabric API maintainers on if that should be done or not if `common` is stuck with.",
      "Tag aliasing is to make tags A and B equivalent. This differs from adding A to B as an optional entry, as anyone using A will also get what was added to B, as if they had used B in the first place.\r\n\r\nFor me, tag aliases solve the same problem as unifying the namespace and conventions - instead of forge and fabric changing what they do for all the mods and datapacks, they are made functionally equivalent in practice. So mod M could register fabric tag A and forge tag B as equivalent when porting, and the same recipes/tags will work for both. I'd argue FAPI does have a place for providing some of the more common aliases. Obviously, it could also be used to ease the porting to the new conventions. It would also have the benefit of not needing datapacks to update, as they aren't really going to be notified of this change.\r\n\r\nIf visibility of new conventions is needed, v1 of conventional tags could be deprecated and we get a v2 with the new ones. v1 can be kept around as its very low maintenance. This way we can also keep `c`. The log warning could also show only in dev, as its the modders who mainly need to see this.\r\n\r\nAs for `c` diminishing the importance of the namespace in the tags, to me it as such: it does not matter who is providing the tag, so the namespace is irrelevant. Deemphasizing it by making it one letter is essentially to work around the fact that we need *some* namespace for the tag. The important part is the name of the tag.\r\n\r\nThe history of `c` is nebulous at best. It was a community convention, not something defined by fapi until this API was made years later. It being used in datapacks was something I heard in a discord conversation a very long time ago. Maybe that was important for some modders, and others valued it not being a valid modid more. If you ask the modders who used tags at that time, each one will probably give a different answer.\r\n\r\n`c` *was* for `common` initially. Arguably still is. Fapi has taken it to mean `conventional` now, at least so far as this API is named. I don't think anyone else does though. @Technici4n suggested the change, I believe, so he'll have to give you the reason (I think it was something to do with server/client/common conflict? I don't remember). I do not believe there is any confusion on what `c` means. I'd be fine with changing the API name to `Common[...]` if confusion is an issue, barring the reason it was changed initially, but I don't think it is particularly relevant in this case as both just mean shared tags. ~~The PR for this API was even \"common-tag-v1\"~~\r\n\r\n",
      "I am primarily a datapack developer, and I support the movement for a merged `common` namespace. It is quite annoying having to support both `c` and `forge` tags for compatibility. I also am not able to easily duplicate the change to the other namespace, as the current conventions are different. For example, Fabric has `c:floral`, but there is no equivalent in Forge. Additionally, the difference in names is annoying to deal with. Forge has `forge:is_mountain`, `forge:is_peak`, and `forge:is_slope`; but Fabric has `c:mountain`, `c:mountain_peak`, and `c:mountain_slope`. In fact, when writing this out, I completely missed the `forge:is_slope` tag when searching for the equivalents.\r\n\r\nTl;dr, I want the same classification and experience when my datapacks are used in conjunction with Fabric and Forge mods, but the lack of tag unity limits this.\r\n\r\nI'm not sure how important this really is to the conversation, but I will also mention I have not heard of the `c` namespace being chosen due to datapacks. I've always considered `c` as \"common\" - used by Fabric - and `forge` for Forge, and us datapackers simply use them for compatibility within ourselves and other mods, or just make some under our own namespace. Whether or not `c` was chosen with datapacks in mind, I agree with many of TelepathicGrunt's points. I look forward to seeing things like tags standardized - it may be extra work now, but will make life easier for everyone in the future.",
      "@catter1 Are you exporting objects to these common tags or importing objects from these common tags?\r\n\r\nA temporary workaround for these can be, that assume you have your desired tag `mypack:my_tag` for both purposes, and you want to connect to `c:common_tag` and `forge:forge_tag`. Then, you can make an extra `mypack:my_tag/read` (exclusively for importing purposes, used in commands) tag that includes `#c:common_tag` and `#forge:forge_tag`, while you put everything you want to add to `mypack:my_tag` (which is only used for exporting purposes, i.e. only defined, not read by commands etc.) but you do not read from it in commands.\r\n\r\nThe structure looks like: (a -> b means a is included in b)\r\n\r\n`mypack:my_tag` -> `#forge:forge_tag`\r\n`mypack:my_tag` -> `#c:common_tag`\r\n`mypack:my_tag` -> (whatever other common tags there are)\r\n\r\n`#forge:forge_tag` -> `mypack:my_tag/read`\r\n`#c:common_tag` -> `mypack:my_tag/read`\r\n(whatever other common tags there are) -> `mypack:my_tag/read`",
      "@liach That’s the problem. Everyone is currently making their own tags that’s imports `c` and `forge` tags to try and collect them for their own usage. Ideally with these PRs settling on a single namespace, that resolves the issue of needing personal tags for consolidating multiple standards. \r\n\r\nLess typing extra entries in tags. And possibly less tag files overall needed. That’s what catter was pointing out.  \r\n\r\nEdit: To be clear, any mod doing code references to a tag should have their own personal tag so pack makers can change it without affecting the common tag. But I can see datapacker’s stance for not needing a personal tag as they are already entirely configurable and whatever is using the tag in the datapack can be edited by modpack makers to point to another tag. ",
      "I think that the current tags are fine and should only be extended as needed. Moving from `c` to `common` is just moving from one standard for tags to another. The changes that need to be made for cross-platform compatibility cannot happen in this repository.",
      "> any mod doing code references to a tag should have their own personal tag so pack makers can change it without affecting the common tag\r\n\r\nDoes it mean that mods should use their own tags that include the common tags at use sites (like in command, code `isIn`, etc.)? Or should the items be defined to mod's tags and have that one mod tag defined to common tags? Either way, it significantly reduces the usefulness of this patch.\r\n\r\nI think that even with this integrated, we still have the need to enhance tag itself: to allow aliasing (equivalence), allow specific tag overriding (such as removal from tag building without replacing everything), which IMO are actually more useful than the work done here.\r\n\r\nAnd finally, on the naming conventions. The conventions ask for using plurals without exact reasons (aside from Mojang tendencies, but yarn contributors have seen how bad they organize their code). I personally would prefer singular, like `dye/red`, like the package names per Google Java Style.\r\n",
      "My last thoughts on the aliasing talk as I was talking with others who haven’t commented here yet. They made a great point.\r\n\r\nIf Fabric aliases c:coal_ores to c:ores/coal, and a modpack maker sees a mod using the first tag and decides to empty out or add to that tag to affect just that mod, the change is done to the other tag as well. And they will look at c:ores/coal and see no references to c:coal_ores.\r\n\r\nTheir thoughts? “What the heck is going on??? How is this change in one tag even affecting the other?” \r\n\r\nIt’ll look like a bug to players and modpack makers because the tag files do not reference each other because the aliasing is invisible. \r\n\r\nFurthermore, aliasing just allows for incorrect standards to continue to proliferate and cause more confusion as now people might make their own c tags in either aliased formats and expecting it to aliased together when it won’t (im assuming the aliasing had to be explicitly done for specific tags and not some automated system trying to figure out what tags are equivalent) and if automated, may lead to false positives which leads back to more confusion for players and pack makers on strange behaviors they see\r\n\r\nIf aliasing is to be done, it should be a separate pr to Fabric API and if merged in, I’ll see about editing this pr to use it. But otherwise, I’m personally not a fan of aliasing the more I think about it. Let’s have the tag aliasing talk be moved into its own PR if any of you get a chance to make it",
      "> If Fabric aliases c:coal_ores to c:ores/coal, and a modpack maker sees a mod using the first tag and decides to empty out or add to that tag to affect just that mod, the change is done to the other tag as well. And they will look at c:ores/coal and see no references to c:coal_ores.\n\nThis problem is not exclusive to tag aliasing; simple tag inheritance is similarly invisible. Despite tag inheritance suffering from a similar problem to what you mention on paper, the actual impact of unclear relations to other tags has been minimal enough that it should not be used to disregard tag aliases entirely.",
      "> Their thoughts? “What the heck is going on??? How is this change in one tag even affecting the other?”\r\n\r\nWhy would you ever think that aliasing will be code-exclusive, when the code cannot even always fetch the tags (given they might not exist)? Of course it will be defined in data packs, presumably as some extra key in the JSON format or some extra metadata properties in .mcmeta files.\r\n\r\n> decides to empty out or add to that tag to affect just that mod\r\n\r\nWhy would any of these 2 things happen? They are both incorrect usages of tags.\r\n1. A tag should never be emptied out. If you don't want to use it, you can choose to never refer to it.\r\n2. Why would you change a common tag to affect ONE mod? This falls back to the rabbit hole you described initially:\r\n    > Everyone is currently making their own tags that’s imports c and forge tags to try and collect them for their own usage.\r\n\r\n    And what's the implication? It renders this PR meaningless, since everyone will go back to use their own tag for reading than read directly from the new common tags.",
      "Hey, I'm rx97 speaking as a datapack developer. I wholeheartly support the `common` convention as a way to unify modloaders / the ecosystem in general *especially* for datapackers.\r\n\r\n> `c` was chosen as it was (apparently) common for datapacks to use at the time. I don't know how true that is, but that was part of the logic for choosing it. Has that changed?\r\n\r\nI was surprised to hear this as I've never heard of datapacks even today using them (maybe stardust labs).\r\n\r\n`common` would really benefit datapacks as a standard and could really be embraced in the conventions and compatibility standards (something I'm contributing a lot of energy towards via the @SmithedMC Project). I don't see datapacks choosing these tag conventions if the ecosystem is split on `c` and `forge` with inconsistent backlinking and confusing (re)implementations across mods and more.\r\n\r\ntag-aliases seems like a footgun and a mistake to consider for this, basically nullifying this as a standard.",
      "I am completely in favor of this PR - I haven't checked the details yet, but I approve of the direction.\r\n\r\nYes it is a breaking change, but it's for the best.\r\n\r\nTag aliases are a no-go for me.",
      "At worst, tag aliases are a solution to a problem that doesn't exist. I'm still not convinced that switching namespaces from `c` to `common` will affect anything. Namespace pollution concerns are not fixed by changing the namespace. Even with the namespace of `fabric` that was and is used for functionality only, mod developers [added their own tags](https://github.com/devs-immortal/Paradise-Lost/blob/2.1.0/1.19.2/master/src/main/resources/data/fabric/tags/items/cooked_meat.json).\n\nNor was this pull request properly reviewed, as all the discussion seems to have happened entirely outside of Fabric development spaces. The standard being discussed here seems to be more of an attempt to redo the exact strategy of creating a conventional tag standard that Fabric already has done with its conventional tags module. Why does Fabric have to adopt a new convention when the existing one still exists? The stated reasons do not convince me of the necessity.",
      "> Nor was this pull request properly reviewed, \r\n\r\nHaykam, I think you are heavily confused of what a PR is. A PRs shouldn’t be only reviewed outside of GitHub. A PR **IS** the review and discussion. That’s what a PR is entirely for. That’s the purpose of a PR lmao. It’s to have this talk here instead of it isolated to a discord server that not everyone is in behind closed doors. That’s why I went and made the PRs finally so the discussion can be dragged out into the open",
      "Yes, creating the pull request is helpful so that the flaws of the pull request can be properly assessed. The number of people seemingly blindly approving the pull request indicates that discussions happened elsewhere, though, and now further feedback won't be considered due to these people already having made up their mind.",
      "I think we should keep \"c\" namespace, because it doesn't stand for fabric, instead, common.",
      "@TelepathicGrunt Thanks for your lengthy response to my questions :tiny_potato:\r\n\r\n> If even after all that, they still decide to use the wrong naming, that's on the modder at that point.\r\n\r\nI'd note that it's like that even now. Fabric API and vanilla provide the current naming standards of `c` tags, so all kinds of weird Forge-ism `c:fruits/banana` or singular `c:tin_ingot` tags are examples of mods not following the examples.\r\n\r\nThe documentation is pretty lacking for the current convention if you look at the Fabric Wiki as an example:\r\n\r\n> Common tags should be named with the syntax c:yourtaghere, with c standing for common. When making the file, use the file path src/main/resources/data/c/tags/ and then blocks, items or fluids You should separate words with underscores, and tags should be plural.\r\n\r\nThis could do with some examples, and it doesn't help that `c:yourtaghere` goes against the rules...\r\n\r\nI'm also not inherently against a folder system anymore as I was [last time](https://github.com/FabricMC/fabric/issues/2186) (although there the idea was copy-pasting Forge's unnatural tag naming system with mixed singular and plural names, which was worse than your proposal)\r\n\r\n---\r\n\r\n> Lastly, \"The short name also making the namespace feel unimportant in tag (etc) IDs\", what do you mean by that? I am not sure I understand that sentence but if you can clarify, I can give my thoughts about it.\r\n\r\nIt wasn't really an important point (more of an observation/side note), but I meant that `c` takes up less space visually than `common` in tag IDs: compare `c:buckets` vs `common:buckets`.\r\n\r\n---\r\n\r\n> The packet/networking stuff can indeed stick with c. But tags are exposed to users and modders and I feel common would be best for tags. It is a difference between the two parts but I think that's ok as long as the namespace fits the role that it is chosen for to get maximum benefit.\r\n\r\nSplitting a namespace intended for \"common\" usage is a bit ironic 😅 I feel like it would be best to use the same NS everywhere for consistency, so the chosen NS would be the choice of NS for all shared IDs, whether it's tags, networking, consent APIs etc.\r\n\r\n---\r\n\r\n> If c is desired, you can pitch your concerns to Neoforge's PR and see if you can convince them to stick to c.\r\n\r\nI'm a Fabric triage team member so I'll only be reviewing this from that POV (I probably won't have time to review this on the Neo side 😛)\r\n\r\n---\r\n\r\nWhen it comes to log warnings, while the idea is good, I'm also just a bit worried that they'll have trouble reaching some modders anyway. There are log warnings for missing models or broken recipes etc too, and those show up in most packs.\r\n\r\nI don't know if there are more effective solutions though, aside from crashing when outdated common tags are found (which is not a good idea *at all*, of course)"
    ],
    "commit_messages": [
      "Refactor convention tags (#3310)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306080ac82a74541b2089",
    "number": 3306,
    "body": "API design needs to be discussed. This is just a draft. It does work, but the code is very ugly right now. I'd rather have a brand-new API, sort of like how we reworked the item group API (and move this to Content Registries, since it has nothing to do with object builders).\r\n\r\nThat said, we don't have time. So /shrug",
    "head_branch": "object-builder/cursed-trade-helper",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306090ac82a74541b208a",
    "number": 3305,
    "body": "Breaking change, needs to be merged ASAP.\r\n\r\nTurns out you cannot query CCNH from MinecraftClient. We first need to get ClientConnection (which is also PITA - the impl already does that elsewhere), then get the handler through Netty internals and several casting.\r\n\r\nAlso adds a helper method to disconnect, as there is currently no way to do so. I wasn't sure if interface injection or static method was better; you can revert the commit if this needs to be discussed later.",
    "head_branch": "networking-api/ccn-pass-handler",
    "is_a_fork": true,
    "comments": [
      "Question: why is the handler useful?",
      "Closing, on second thought this doesn't look like it's needed in many use cases."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623060a0ac82a74541b208b",
    "number": 3303,
    "body": "**Breaking change** for 1.20.2.\r\n\r\nIn #3163, modded **dynamic** registries had the registry namespace added to the tag paths. This change now also applies to static registries. This breaks data packs, including bundled ones, if they use tags for custom registries. **This does not affect vanilla tags** like block tags, item tags, or entity type tags.\r\n\r\nJavadoc changes included, to document this behavior.",
    "head_branch": "reg-sync/tag-namespace",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Include namespace in modded registry tag path (#3303)\n\n* Include namespace in modded registry tag path\r\n\r\n* Document tag namespace change"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623060b0ac82a74541b208c",
    "number": 3300,
    "body": "#3268 accidentally changed the code such that `ChunkRendererRegion` no longer implements `RenderAttachedBlockView`. This pull request restores the old behavior and is critical since almost all users of Rendering Data Attachment v1 rely on `ChunkRendererRegion` to implement `RenderAttachedBlockView`.",
    "head_branch": "pr/1.20.1/fix-render-attachment-v1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Implement RenderAttachedBlockView on ChunkRendererRegion (#3300)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623060c0ac82a74541b208d",
    "number": 3295,
    "body": "Similar to `getRecipeRemainder`.",
    "head_branch": "1.20.1",
    "is_a_fork": true,
    "comments": [
      "> Please add a test to the testmod.\r\n\r\nAdded. The test works fine.",
      "wait, the game test doesn't act as I thought.",
      "I plan to do another release very shortly, I will re-target this PR to 1.20.4 and use ME.",
      "I have created a 1.20.4 + ME version of this PR here: https://github.com/FabricMC/fabric/pull/3520",
      "Merged into 1.20.4 via https://github.com/FabricMC/fabric/pull/3520 Many thanks for this 👍 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623060c0ac82a74541b208e",
    "number": 3292,
    "body": "Not complete yet, lacking any testing at all.",
    "head_branch": "port/23w35a",
    "is_a_fork": false,
    "comments": [
      "Hey @modmuss50, it seems that this version was not published on CurseForge. It only shows up on GitHub and Modrinth.\r\nNot sure if it's a glitch or something, but thought you should know.\r\nThanks for all the work you put into these ports!",
      "> Hey @modmuss50, it seems that this version was not published on CurseForge. It only shows up on GitHub and Modrinth.\r\n> Not sure if it's a glitch or something, but thought you should know.\r\n> Thanks for all the work you put into these ports!\r\n\r\nJust checked, it has been put for manual review, not seen this before as usually it get's automatically approved. Hopefully that won't take too long, for now use GitHub or Modrith. \r\n\r\nThanks 👍"
    ],
    "commit_messages": [
      "23w35a (#3292)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623060d0ac82a74541b208f",
    "number": 3287,
    "body": "### Add cull check and item transformation mode getter to FRAPI\r\nNew methods in `RenderContext`:\r\n- `isFaceCulled` to perform a cull check that can be optimized and cached by the renderer.\r\n- `hasTransform`, self-explanatory. Must be checked before using `isFaceCulled` to skip some geometry.\r\n- `itemTransformationMode` to get the current item transformation mode in item contexts.\r\n\r\n### Terminally deprecate `fallbackConsumer` and `bakedModelConsumer`\r\nThe primary goal of this change is to make renderers not need to implement these fallback consumers themselves. However, their design relies on hidden context state that cannot be queried via the API. It is thus impossible to implement a fallback layer for them, and they must be **deprecated, with plans for removal in ~~1.20.2~~ (EDIT: too late for that)** in a follow-up PR.\r\n\r\nNote that `BakedQuadFallback.emitBlockQuads` uses the newly introduced `isFaceCulled` and `hasTransform` methods to shortcut some geometric analysis.\r\n\r\nI also removed the \"vanilla quad handler\" from Indigo.\r\n\r\n### Fix uvs in octagonal column test mod\r\nFix the uvs in the octagonal column test mod by:\r\n- setting the cull face and thus the nominal face to leverage `spriteBake` for the axis-aligned quads;\r\n- manually setting the UVs for the corner quads.",
    "head_branch": "frapi-context-getters",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "FRAPI improvements: context getters, full removal of fallback consumers, small enhancements (#3287)\n\n* Add cull check and item transformation mode getter to FRAPI\r\n\r\n* Terminally deprecate `fallbackConsumer` and `bakedModelConsumer`\r\n\r\n* Fix uvs in octagonal column test mod\r\n\r\n* Review comments"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623060e0ac82a74541b2090",
    "number": 3286,
    "body": "Add `KeyBindingContext` to register multiple key binds that won't conflict with others.\r\n\r\nThis PR doesn't change vanilla behavior in which only one conflicting key (same context and key) will be registered as pressed. \r\nThe order in which what key to functions depends on when the `KeyBinding` instance is created.\r\n\r\n~~Do we want `KeyBinding#isPressed` and `wasPressed` to work when a screen is open?~~ Now it also makes it usable on screen.\r\n",
    "head_branch": "key-binding-context",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623060f0ac82a74541b2091",
    "number": 3285,
    "body": "Fixes javadoc typos, expands some javadocs, and small refactors for 1.20.2.",
    "head_branch": "networking-api/1.20.2-misc-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Networking API javadoc fixes and small refactors (#3285)\n\n* Mark events class constructor as private\r\n\r\n* Enhance FabricServerConfigurationNetworkHandler javadoc\r\n\r\n* Expand package-info\r\n\r\n* Mark some interfaces as non-extendable\r\n\r\n* Refactor PlayerLookup and fix javadoc\r\n\r\nThe example about block entities was removed. This is not the proper way to\r\ndo it anymore; you should use `BlockEntity#markDirty` and the built-in syncing.\r\n\r\n* Fix missing period\r\n\r\n* Fix typos\r\n\r\n* Fix checkstyle.\r\n\r\n---------\r\n\r\nCo-authored-by: modmuss50 <modmuss50@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306100ac82a74541b2092",
    "number": 3282,
    "body": "Fixes #3278.",
    "head_branch": "fix-3278",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Random mismatch between vanilla and FRAPI baked models (weighted and multipart) (#3282)\n\n* Fix Random mismatch between vanilla and FRAPI baked models (weighted and multipart)\r\n\r\n* Review comments"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662306100ac82a74541b2093",
    "number": 3281,
    "body": "`ItemStorage.SIDED` and `FluidStorage.SIDED` have had their direction context changed to be nullable, but the `SidedStorageBlockEntity` methods are not marked as so.",
    "head_branch": "nullable-side",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Mark `SidedStorageBlockEntity`'s side as nullable (#3281)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662306110ac82a74541b2094",
    "number": 3271,
    "body": "And make it consistent with yarn.\r\nThis shouldn't break anything it is just to make the Names better c:",
    "head_branch": "1.20.1",
    "is_a_fork": true,
    "comments": [
      "See the introduction to the Development Guidelines:\r\n\r\n> Old code or parts thereof might not yet be up to the standards defined by these guidelines. When working with old code, try to adhere to these guidelines, but don't bulk update legacy code to match them. The team will handle updating older code to match the newer standards when appropriate.\r\n\r\n- https://github.com/FabricMC/fabric/blob/1.20.1/CONTRIBUTING.md",
      "I think renaming the argument is fine. The event isn't deprecated, and the change only serves to improve the documentation."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306120ac82a74541b2095",
    "number": 3268,
    "body": "This pull requests adds the BlockView API v2 module, which solves the issues with and supersedes the existing Rendering Data Attachment v1 module and adds additional features.\r\n\r\nThe original goal was to interface inject the two interfaces provided by Rendering Data Attachment v1, `RenderAttachmentBlockEntity` and `RenderAttachedBlockView`, to allow for an easier to use API. It proved to be impossible to achieve this and still provide a clean API without making a new module, as explained below.\r\n\r\nThe documentation of `RenderAttachedBlockView` states that it is guaranteed to be implemented on all instances of `BlockRenderView`, but this is not the case. The module implementation only guarantees that all `WorldView` instances implement the interface. `RenderAttachedBlockView` extends `BlockRenderView`, meaning that changing the mixin to satisfy the stated contract is not possible; thus, it can be deduced that the mixin is correct but the stated contract is not. However, this does not lead to an easy to use API and makes interface injection of `RenderAttachedBlockView` impossible.\r\n\r\nThe BlockView API v2 module was made to solve these issues, solve other issues with Rendering Data Attachment v1, and provide additional features.\r\n\r\n- The object that used to be inconsistently termed \"Render Data Attachment\" or \"Render Attachment\" has been renamed to \"Block Entity Render Data\" or simply \"Render Data\" where sufficient. Only the new terms are used in the new module.\r\n- The documentation was rewritten to be more concise, provide more examples, remove mentions of implementation details, and add concrete requirements for use of certain methods.\r\n- The new `FabricBlockView` interface supersedes the `RenderAttachedBlockView` interface.\r\n  - Instead of being implemented on all `BlockRenderView` instances, as the current contract of `RenderAttachedBlockView` states, it is implemented on all `BlockView` instances to provide more flexibility.\r\n  - It contains two new methods, `hasBiomes` and `getBiomeFabric`, to allow biome retrieval. This feature is the only way to create biome-dependent block models, as the `BlockRenderView` provided normally does not have this functionality.\r\n- The new `RenderDataBlockEntity` interface supersedes the `RenderAttachmentBlockEntity` interface.\r\n\r\nThe Rendering Data Attachment v1 module has been deprecated and its documentation has been updated to state the contract that is actually satisfied and link to the v2 replacements. Perfect backward and forward compatibility would result in degraded performance. To compromise, it was observed that the `BlockRenderView` extension interface is invoked much more frequently than it is implemented, and that the `BlockEntity` extension interface is implemented much more frequently than it is invoked. As such, it was decided that the v1 `RenderAttachedBlockView#getBlockEntityRenderAttachment` should proxy to the v2 `FabricBlockView#getBlockEntityRenderData` and the v2 `RenderDataBlockEntity#getRenderData` should proxy to the v1 `RenderAttachmentBlockEntity#getRenderAttachmentData`.",
    "head_branch": "pr/1.20.1/block-view-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "BlockView API v2 (#3268)\n\n* Fabric BlockView API v2\r\n\r\n* Fix dependency on nonexistent module\r\n\r\n* Add test for biome getter\r\n\r\n* Improve getBiomeFabric documentation\r\n\r\n* Simplify javadoc"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662306130ac82a74541b2096",
    "number": 3265,
    "body": "Just a handful of cleanup and fixes to the networking API. Please do let me know if you know of anything else that can be improved. ",
    "head_branch": "feature/final-networking-cleanup",
    "is_a_fork": true,
    "comments": [
      "Going to merge this, the Fabric packet stuff is going to be a much bigger job for another day."
    ],
    "commit_messages": [
      "Misc networking API cleanup + fixes (#3265)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306140ac82a74541b2097",
    "number": 3264,
    "body": "The hope is all mods that use these APIs can move over to using the configuration networking APIs. Please do let me know if you have a usecase for these APIs that cannot be done during the configuration phase. I look forward to discussion about this idea.",
    "head_branch": "remove/login-api",
    "is_a_fork": true,
    "comments": [
      "I strongly disagree. This API is useful for communication with proxy servers during authentication, such as velocity; for instance, see https://github.com/OKTW-Network/FabricProxy-Lite/blob/00bcc13ca17093845a77ce5fbf18e646cee28f60/src/main/java/one/oktw/FabricProxyLite.java#L28-L30",
      "Good point. Guess we should maybe put Deprecated instead temporarily? The majority of uses would be replaceable with config phases, but the minority we cannot ignore.",
      "A way to manually introduce an incompatibility is to change the signature of the packet handlers, such as using the new CustomPayload or dropping MinecraftServer instance when ServerLoginNetworkHandler is available (ask to use ServerLoginNetworking.getMinecraftServer instead)",
      "Tbh, getMinecraftServer should also be removed. We have TAW now :)",
      "I think its fine to keep it as-is, no point in breaking it for the point of it. Thanks @liach for pointing out that usecase 👍 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306150ac82a74541b2098",
    "number": 3258,
    "body": "WIP. Will need to test with a better equipment. Thanks to @LambdAurora for the proposal!",
    "head_branch": "reg-sync/registry-removal-check",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306160ac82a74541b2099",
    "number": 3257,
    "body": "needs backporting to 1.19.4 and 1.19.2",
    "head_branch": "fix/3255",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #3255 (#3257)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306160ac82a74541b209a",
    "number": 3246,
    "body": "This adds back the deprecated modules into dev envs by default, its causing too much confusing. Mod devs can opt out of having these modules like so:\r\n\r\n```kotlin\r\nmodImplementation(\"net.fabricmc.fabric-api:fabric-api:0.86.1+local-1.20.1\") {\r\n   exclude(module = \"fabric-api-deprecated\")\r\n}\r\n```",
    "head_branch": "deprecated-opt-out",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make deprecated modules opt-out instead of opt-in (#3246)\n\n* Make deprecated modules opt-out instead of opt-in\r\n\r\n* Add comment\r\n\r\n* Update build.gradle\r\n\r\nCo-authored-by: Juuz <6596629+Juuxel@users.noreply.github.com>\r\n\r\n---------\r\n\r\nCo-authored-by: Juuz <6596629+Juuxel@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306170ac82a74541b209b",
    "number": 3244,
    "body": "There is more! The original port was very rough, this is hopefully a better longer term solution!\r\n\r\n# Common channel registration packets\r\n\r\nPreviously we sent the play packet channels in a custom packet called `fabric-networking-api-v1:early_registration` this worked OK, but had a few issues.\r\n\r\n- Proxy servers didnt always forward this packet onto the client.\r\n- This packet was specific to Fabric making it harder to create cross platform mods and plugins.\r\n\r\nAfter some discussion in the fabric discord about a solution to this problem I raised our ideas to the folk over at @Neoforged , @PaperMC and @SpongePowered after a quick chat we came up with the idea of also sending a version packet to allow for future expansion. This is still very much open for public discussion and improvments, and still will be after this PR has been merged. The end goal of this is to allow mod/plugin loaders to negotiate with each other allowing mod developers greater flexibility when developing cross platform mods.\r\n\r\n<img width=\"960\" alt=\"Slide1\" src=\"https://github.com/FabricMC/fabric/assets/4324090/316d1eb9-840f-4b5a-88b1-bbab227ee79d\">\r\n\r\nThe above diagram details the current packet format, and the expected behaviour of the packets during the new configuration phase added in 23w31a. This is still very open for input and change, I look forward to seeing what everyone can do with this! Thanks to @Patbox for the great suggestion of using the ping packet to contiune to support vanilla clients!\r\n\r\n\r\n# Configuration task APIs\r\n\r\n`FabricServerConfigurationNetworkHandler` is now interface injected onto `ServerConfigurationNetworkHandler` exposing the vanilla configuration task API. `ServerConfigurationConnectionEvents` now has a `PRE_CONFIGURE` that allows tasks to be ran before any vanilla configuration takes place.\r\n\r\nRegistry sync and custom ingredients have been moved over to use this API.\r\n\r\n# Fabric Packets\r\n\r\n~~Fabric packets are now written to the PacketByteBuf on the network thread by default in production. In development the previous behaviour is retained to help modders test their packets. The system property `-Dfabric-api.networking.write-fabric-packet-calling-thread=false` has been added to allow overriding this behaviour.~~\r\n\r\nDisabled for now, as its causing issues in single player. I will resolve this in its own PR as its a larger than I expected.",
    "head_branch": "configuration-networking-refactor",
    "is_a_fork": true,
    "comments": [
      "I'm not sure to understand the usage of `c:register`, isn't `minecraft:register` supposed to already be able to register the supported channels?",
      "> I'm not sure to understand the usage of `c:register`, isn't `minecraft:register` supposed to already be able to register the supported channels?\r\n\r\nWe use `c:register` to to send the channels for the play phase during configuration before play has started. Previously we sent `fabric-networking-api-v1:early_registration` during login.\r\n\r\nWe cannot use `minecraft:register` as it does not contain a way to specify the intended phase, we decided against changing anything within the `minecraft` namespace.",
      "Mmh, and I guess sending the channels during the actual play phase isn't an option?",
      "> Mmh, and I guess sending the channels during the actual play phase isn't an option?\r\n\r\nIt technically would be if we delayed the play packet untill the 2 way handshake has completed. It still supports the minecraft:register / unregister packets during play.\r\n\r\nHowever configuration is the ideal time for this as we need to know the channels before we fire the `ServerPlayConnectionEvents.INIT`. I imagine this is why we previously sent them during login. I couldnt find much info on the old login packet to be sure of this. Configuration makes things easier for proxies as well.",
      "Mmh, ok, I guess.\r\n\r\nMy only last question is why include the `version` field in the register packet if it's already handshaked earlier?\r\n\r\nNew question: are the registry synchronization channels also registered through the same `minecraft:register` packets as `c:version` and `c:register`? It sounds obvious to me but I'd rather have confirmation since not present on the diagram.\r\n\r\nAlso, I have to voice some grievances over this spec having been built in Discord spaces, this is awful for discoverability of said discussions, and make it hard to understand the reasons behind the spec itself, this should have been discussed somewhere publicly like GitHub.",
      "> My only last question is why include the version field in the register packet if it's already handshaked earlier?\r\n\r\nI think its still worth having in the packet, even if its just to validate it. This could maybe be removed as it is kinda redunant. \r\n\r\n> Also, I have to voice some grievances over this spec having been built in Discord spaces, this is awful for discoverability of said discussions, and make it hard to understand the reasons behind the spec itself, this should have been discussed somewhere publicly like GitHub.\r\n\r\nI do understand the problems with doing this in a private space as everyone likes to be involved. Its not the first time things have been decided in private and wont be the last. It was in a space that I am guest of so did not have any control over who has access to it. However I believe having a small group of people who understand the problem space well leads to a very productive discussion.\r\n\r\nWhat is shown in this PR is not final and very much still open for discussion and change. Either in this PR, or in future PRs on this proejct or other projects. Quite a lot of this design was initally created in a public channel.",
      "> New question: are the registry synchronization channels also registered through the same minecraft:register packets as c:version and c:register? It sounds obvious to me but I'd rather have confirmation since not present on the diagram.\r\n\r\nRegistry sync and any other configuration channels will be in the inital `minecraft:register` packets.",
      "> I do understand the problems with doing this in a private space as everyone likes to be involved. Its not the first time things have been decided in private and wont be the last. It was in a space that I am guest of so did not have any control over who has access to it. However I believe having a small group of people who understand the problem space well leads to a very productive discussion.\r\n\r\nWhile the discussion may be productive, it makes accessing the rationale behind each choices much harder to understand when a PR such like this appears. I also think discussing such subjects on spaces like GitHub can yield similar levels of productivity as talks on GitHub has a tendency to be more fleshed out and discourage unproductive talks.\r\nIt also makes anyone backtracking the choices that are made today much harder down the line, I'd very much like to not have a repeat of me hunting down ancient Fabric contributors to ask about a detail of the registry synchronization code which turned out to only be a side effect of how MC worked in 1.11 and was made useless (as I initially guessed) since 1.13.\r\n\r\nI'm hoping future decisive discussions of this spec will be held mainly on GitHub for the sake of the general modding community and future modders and maintainers.",
      "I would change specification a bit.\r\n- First part of running some verification, through I would use there `c:handshake`/`c:version` there instead of legacy `minecraft:register`. Since it would become a standard, it doesn't matter to keep old one there (it should be kept for play only, for mods that need legacy compat)\r\n- Registry sync should come *after* initial protocol, ideally speaking server-client would first negotiate what they can understand (ofc with server waiting for answer). This would allow for a platform to support alternative registry sync protocol, as it would know what client supports.\r\n- Then you could run core (non-data/static) registry sync to make vanilla registries in line. Could also include other modded sync that could be useful for mods. Ofc only for client supporting it. If it's required and client doesn't support it, it would be disconnected instead\r\n- At this stage vanilla confuguration stuff could be executed.\r\n- Extra modded configuration (if supported) for things that need to be synced after vanilla.\r\n- Transition to play.",
      "> * First part of running some verification, through I would use there `c:handshake`/`c:version` there instead of legacy `minecraft:register`. Since it would become a standard, it doesn't matter to keep old one there (it should be kept for play only, for mods that need legacy compat)\r\n\r\nDoes Mojang already use `minecraft:register` in the configuration phase?\r\nI feel like the advantage of that packet is that most MC clients will understand it. Even if they don't support this protocol.\r\n \r\n> * Registry sync should come _after_ initial protocol, ideally speaking server-client would first negotiate what they can understand (ofc with server waiting for answer). This would allow for a platform to support alternative registry sync protocol, as it would know what client supports.\r\n\r\nGiven what was said earlier, about those packets being advertised through the initial `minecraft:register`, this is a non-issue since both sides would already be aware of the supported synchronization protocols.\r\n\r\n> * Extra modded configuration (if supported) for things that need to be synced after vanilla.\r\n\r\nI feel like the current spec doesn't prevent that, it just doesn't define the order of that.",
      "Nope, `minecraft:register` is legacy supported channel list packet (originally designed by Dinnerbone for Minecraft 1.1). Not used in Minecraft by itself",
      "> Nope, `minecraft:register` is legacy supported channel list packet (originally designed by Dinnerbone for Minecraft 1.1). Not used in Minecraft by itself\r\n\r\nOh, after a quick look it indeed changed quite a lot, there was many more custom pay load packets before...\r\nStrange.\r\n\r\nThis is definitely puzzling because it means a vanilla would log not understanding `minecraft:register` in the logs...\r\nI guess using it specifically might not make as much sense anymore? Though I do question the usefulness of a `c:handshake`.",
      "> Are FabricPacketPayloads actually handled anywhere right now\r\n\r\n`FabricPacketPayload`s are currently only used when sending a packet, as they extend the vanilla `CustomPayload` class they can be passed stright into the custom payload packet. See Server/ClientNetworkingImpl. Thus the PacketByteBuf (PBB) is written to on the network thread.\r\n\r\n> It's a bit of a shame that the Map<Identifier, PacketByteBuf.Reader> maps in the custom packet classes are immutable. Ideally registering a new packet would just extend those maps with the PacketType's reader.\r\n\r\nThis isnt really an issue, right now we hook into readPayload and return a the copied PBB payload as we need to handle the PBB on the network thread. The FabricPacket API is currently implemented ontop of this. I think in a future PR I will look into removing this abstraction and using `FabricPacketPayload` directly for incoming packets, removing the need to copy the PBB.\r\n\r\nThat should all be impl detail, and not affect mods. As this PR has grown quite large I think it makes sense to do that later.\r\n\r\nI hope this makes sense :D ",
      "Ahhh, gotcha. The lack of symmetry confused me, but that makes sense. Thanks! ",
      "> I would change specification a bit.\r\n> \r\n> * First part of running some verification, through I would use there `c:handshake`/`c:version` there instead of legacy `minecraft:register`. Since it would become a standard, it doesn't matter to keep old one there (it should be kept for play only, for mods that need legacy compat)\r\n\r\nContinuing to use the legacy packets to dermine the current phases channels seems fine to me, the main reason we need a custom packet is to allow sending the play packets while not being in the play phase. If either the client or server doesnt understand the custom stuff, but does handle the old packets chances are things will mostly work out of the box. At least to the current status-quo.\r\n\r\n> * Registry sync should come _after_ initial protocol, ideally speaking server-client would first negotiate what they can understand (ofc with server waiting for answer). This would allow for a platform to support alternative registry sync protocol, as it would know what client supports.\r\n\r\nYes, thats exactally what this allows for. The inital minecraft:register will contain the supported channels, thus allowing the server to decide how to handle reg sync. Or skip it if the client doesnt support it.\r\n\r\n> * Then you could run core (non-data/static) registry sync to make vanilla registries in line. Could also include other modded sync that could be useful for mods. Ofc only for client supporting it. If it's required and client doesn't support it, it would be disconnected instead\r\n\r\nExactally, the rest of this PR adds an API for mods to do just this, see the new testmod. The server can decide to proceeded or disconnect if the client cannot recieve on a given channel.\r\n\r\n> * At this stage vanilla confuguration stuff could be executed.\r\n> * Extra modded configuration (if supported) for things that need to be synced after vanilla.\r\n> * Transition to play.\r\n\r\nYep, this PR handles all of that that by having a `BEFORE_CONFIGURE` and `CONFIGURE` event, vanilla goes in the middle, transiition to play happens once all tasks have been completed. \r\n\r\nI hope that answers your questions, I did miss the mark a little on how I worded how this spec was agreed upon (I updated the PR), it was very much the other parties saying this is a good/intresting idea and not commiting to using it. The worst case is we have something that behavaes the same as it does in previous versions (not great, not terrible).\r\n\r\nI should have also explined in detail what problem was being solved, its a low level system that I expect 99% of mod developers dont even know exists let alone have a good understanding of what it does. I certainly didnt untill I was forced into this last week 😆 \r\n\r\nA lot of it was discussed/designed in public before I asked for input elsewhere. The main addion was the version packet. Its still very much open for changes (even past this PR being merged), if anyone did feel left out of the converstation I'm sorry it wasnt my intent. I think its good that this discussion did happen as it shows what can possible if we all work togeather, just need to figure out a good (and fun!) way to go about this next time.\r\n\r\nI do plan to merge this tomorrow and release alongside the next snapshot (assuming there is going to be one).\r\n\r\n",
      "I peeked through the new configuration state logic in enigma and this PR and have a few remarks:\r\n\r\n1. The old login-query packet registration was an implementation detail, a workaround for packet registry that isn't immediately available upon Game join packet. As long as the packet channel list is still accessible at the beginning of play phase event, this mechanism can be nuked.\r\n2. Vanilla's configuration stage has a \"task\" mechanism which is sequential; it waits for one task to complete before moving into the next thing in the queue. This is inefficient if we wish to allow parallel processing of data and dependency declaration instead.\r\n3. Mojang now adds EnterConfigurationC2SPacket for C2S login->configuration state transition (previously, C2S login->play simply \"happened\" when the client receives a GameJoinS2CPacket). Clients can totally send `minecraft:register` and unsolicited pongs immediately after sending a EnterConfiguration for login, but our implementation doesn't seem to be ready for such scenarios. On a side note, vanilla simply ignores them, and its task system prevents unsolicited ReadyC2SPacket (configuration->play transition). ",
      "> I peeked through the new configuration state logic in enigma and this PR and have a few remarks:\r\n> \r\n> 1. The old login-query packet registration was an implementation detail, a workaround for packet registry that isn't immediately available upon Game join packet. As long as the packet channel list is still accessible at the beginning of play phase event, this mechanism can be nuked.\r\n\r\nYes, we are discussing if we can get rid of the login related APIs, it seems like we can. Wont be done as part of this PR though.\r\n\r\n> 2. Vanilla's configuration stage has a \"task\" mechanism which is sequential; it waits for one task to complete before moving into the next thing in the queue. This is inefficient if we wish to allow parallel processing of data and dependency declaration instead.\r\n\r\nYes, this is the API that we have exposed, in theory it would be possible for Fabric to change the behaviour of how the tasks are ran to support running them in parallel. I think for now keeping it as close to vanilla is fine.\r\n\r\n> 3. Mojang now adds EnterConfigurationC2SPacket for C2S login->configuration state transition (previously, C2S login->play simply \"happened\" when the client receives a GameJoinS2CPacket). Clients can totally send `minecraft:register` and unsolicited pongs immediately after sending a EnterConfiguration for login, but our implementation doesn't seem to be ready for such scenarios. On a side note, vanilla simply ignores them, and its task system prevents unsolicited ReadyC2SPacket (configuration->play transition).\r\n\r\nYeah... I think it should handle this case ok, we check to make sure that the inital registry/ping packets were sent before doing anything about their response. Do you have a better solution?\r\n",
      "Merging before porting to the new snapshot, please open an issue for further changes. (I will likely have a follow up PR as well)"
    ],
    "commit_messages": [
      "[1.20.2] Support common registration packets. Add configuration task API  (#3244)\n\n* Config networking refactor :)\r\n\r\n* Add some unit tests for common packets.\r\n\r\n* write FabricPacket on network thread.\r\nSplit ServerConfigurationConnectionEvents into two.\r\n\r\n* Fixes\r\n\r\n* Rename event\r\n\r\n* Add a testmod + ssome docs\r\n\r\n* Improve registry sync fixing deadlock in a number of cases.\r\n\r\n* Cleanup channel events.\r\n\r\n* Review feedback and fixes."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306180ac82a74541b209c",
    "number": 3237,
    "body": "- Removed fabric-networking-v0\r\n- Major networking refactor\r\n\r\nThings are broken, but I think this is at a point where we can release an inital beta to let people provide feedback and find whats broken. I fully expect we may need to make some breaking changes to the the network configuration APIs between now and a stable version, so I have marked those APIs as experimental.\r\n\r\nTODO:\r\n- [x] Networking\r\n- [x] Registry sync move to configure networking phase\r\n- [x] ResourcePackProfile.PackFactory.method_52425, maybe look at ZipResourcePack.class_8615 (needs mappings ideally)\r\n- [x] Mouse scroll events\r\n- [ ] Nested dynamic registry test\r\n- [x] Client tag tests",
    "head_branch": "port/23w31a",
    "is_a_fork": false,
    "comments": [
      "Things are broken, but I think this is at a point where we can release an inital beta to let people provide feedback and find whats broken. I fully expect we may need to make some breaking changes to the the network configuration APIs between now and a stable version, so I have marked those APIs as experimental."
    ],
    "commit_messages": [
      "23w31a"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306190ac82a74541b209d",
    "number": 3223,
    "body": "Fixed number type erasure bug when serializing custom NBT ingredient. This should be fixed in future versions too.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623061a0ac82a74541b209e",
    "number": 3222,
    "body": "This uses the Identifer to sort by and not the display name. Sorting by display name would require us to re-order the groups when the language changes. If there is keen intrest in sorting by the display name this doesnt seem to hard to do, but this PR is a trival easy win either way.\r\n\r\n",
    "head_branch": "feature/sort_item_groups",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Sort item groups to ensure they are in a deterministic order between runs. (#3222)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623061a0ac82a74541b209f",
    "number": 3219,
    "body": "This fixes mods that previously added a dyn registery without using the fabric API no longer working as expected.\r\n\r\nCloses #3215",
    "head_branch": "fix/3215",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #3215 - Only add namespace to registries added using the Fabric API. (#3219)\n\n* Fix #3215 - Only add namespace to registries added using the Fabric API.\r\n\r\n* Cleanup"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623061b0ac82a74541b20a0",
    "number": 3216,
    "body": "Fixes #3215\r\n\r\nThis also adds a test for the dynamic registry provider.",
    "head_branch": "data-gen/fix-dynamic-registry",
    "is_a_fork": true,
    "comments": [
      "Should this only be done for registries registered via the API?",
      "@Technici4n Perhaps. Another solution is to make a new method (with the check you mentioned in place), which providers can override.",
      "> Should this only be done for registries registered via the API?\r\n\r\nYeah, I think this would be wise, and should match what is done in https://github.com/FabricMC/fabric/pull/3219\r\n\r\nI will merge 3219 first, and then update this to use the stuff added in this PR."
    ],
    "commit_messages": [
      "Fix data generation for custom dynamic registry (#3216)\n\n* Fix datagen for custom dynamic registry\r\n\r\n* Test datagen for custom dynamic registry\r\n\r\n* Check if the dynamic registry is registered with Fabric API\r\n\r\n* Cleanup testmod\r\n\r\n* Don't apply to registries not added using the fabric api.\r\n\r\n---------\r\n\r\nCo-authored-by: modmuss50 <modmuss50@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623061c0ac82a74541b20a1",
    "number": 3213,
    "body": "The PR fixes an issue of DFU that, when upgrading a world, it fails to deserialize mod custom generator type when upgrading, then the vanilla dimensions may get lost.\r\n\r\n[My previous PR about dimension deserialization](https://github.com/FabricMC/fabric/pull/2856) is different. That PR fixes the issue after uninstalling dimension mod/dimension datapack by making the deserialization fail-soft. That deserialization is for reading data in `level.dat`. This PR fixes deserialization in DFU, triggered when upgrading world.\r\n\r\nIn MC, it firstly upgrade the data then deserialize the data. It also does deserialization and serialization during upgrading. The deserialization here means the deserialization during upgrading.\r\n\r\nThe fix is to change `Schema2823` and make its `TaggedChoice` to ignore unknown chunk generator types.\r\n\r\nWhen testing it, I found that DFU is sensitive to dimension id's hashcode, that's why I added another dimension `fabric_dimension:void_earilier_in_hash_map` into the test mod. In `NbtCompound` it uses `HashMap` so the order in the map is correlated with hashcode. In `CompoundListCodec.decode`, it deserializes according to the order in the map. And when one entry's deserialization fails, the thing in `result` will be a failed result. In `apply2stable`, if one fails, the failure will propagate the the remaining elements (it's how applicative works). If the result is in failed state, the lambda in `apply2stable` will not execute, so the remaining things will not go to the result even if deserialziation succeededs. The dimension `fabric_dimensions:void` is after all vanilla dimensions in hash map so it will not trigger this issue. So I added the dimension `fabric_dimension:void_earilier_in_hash_map` to make this issue manifest.\r\n\r\nDFU is so \"GREAT\".\r\n\r\nThis only happens with custom chunk generator types (not happening with dimension datapacks). To test this, I added the dimension `fabric_dimension:void_earilier_in_hash_map` in 1.19.4 branch of fabric api and created a world that contains that dimension in 1.19.4. \r\n\r\n[TestDimUpgrade.zip](https://github.com/FabricMC/fabric/files/12135956/TestDimUpgrade.zip)\r\n\r\nWithout this PR, opening that world then it will log `Unsupported key: fabric_dimension:void; Unsupported key: fabric_dimension:void` and the nether and end dimensions will vanish.\r\n\r\nThis makes the DFU to not fail when encountering custom generator type. (The PR also make it not fail when encountering custom biome source type in vanilla chunk generator types). It will possibly be compatible with mod custom datafixers for mod custom chunk generator in `level.dat` (I haven't seen such mod).\r\n\r\nAbout the usage of `@Redirect`: MixinExtra allows WrapOperation to a call that has been redirected, so there is not much need to replace redirect to other injections (I think other injections are more error-prone than redirect in this case).",
    "head_branch": "pr_fix_dfu_dim",
    "is_a_fork": true,
    "comments": [
      "The core thing is in `TaggedChoiceTypeMixin`. `TaggedChoiceType` contains a map from string to codec. It simply dispatches the codec based on the type field.\r\n\r\nAll other mixins are for only enabling fail-soft in the specified places. If making all `TaggedChoiceType` fail-soft is appropriate, this PR can be reduced to only one Mixin."
    ],
    "commit_messages": [
      "Make DFU error-tolerant to mod custom generator types (#3213)\n\n* Make DFU error-tolerant to mod custom generator types.\r\n\r\n* Fix license. Rename mixin.\r\n\r\n* Fix license.\r\n\r\n* Disable remap in Schema2832Mixin"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623061d0ac82a74541b20a2",
    "number": 3212,
    "body": "The after bake modifier may receive a null baked model because `UnbakedModel#bake` can return a null baked model. `Nullable` annotations have been added where appropriate and the behavior of a null baked model has been explained in the modifier's documentation.\r\n\r\nModel Loading API v1 now contains a `\"breaks\"` definition for Models v0 versions <0.4.0. Running v1 with v0 <0.4.0 causes errors that are very difficult to debug.",
    "head_branch": "pr/1.20.1/after-bake-nullability",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Clarify nullability of `ModelModifier.AfterBake` (#3212)\n\n* Clarify nullability of AfterBake modifier\r\n\r\n* Fix documentation\r\n\r\nNull baked models are cached, but only in the inner cache, which is not accessible after all baking is finished. The term \"cache\" is also ambiguous, so its use has been removed.\r\n\r\n* Add breaks for v0 <0.4.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623061e0ac82a74541b20a3",
    "number": 3208,
    "body": "### Improve flat shade\r\n\r\n- Use AO mode to make flat shade calculation consistent with shade applied by smooth lighting\r\n- Use face normal to calculate shade if necessary\r\n- Use normal shade even if no custom normals are set\r\n\r\n ### Improve FRAPI test mod\r\n\r\n- Add octagonal column to test irregular face lighting\r\n- Improve `PillarBakedModel` to fully support custom block appearance \r\n- Use obsidian sprite instead of missing sprite for frame mesh\r\n- Simplify and organize registration\r\n- Inline `simple` package",
    "head_branch": "pr/1.20.1/indigo-changes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Improve Indigo and FRAPI Test Mod (#3208)\n\n* Improve flat shade\r\n\r\n- Use AO mode to make flat shade calculation consistent with shade applied by smooth lighting\r\n- Use face normal to calculate shade if necessary\r\n- Use normal shade even if no custom normals are set\r\n\r\n* Improve FRAPI test mod\r\n\r\n- Add octagonal column to test irregular face lighting\r\n- Use obsidian sprite instead of missing sprite for frame mesh\r\n- Simplify and organize registration\r\n- Inline `simple` package\r\n\r\n* Fix crumbling on 45 degree faces\r\n\r\n- Fix checkstyle\r\n- Give octagonal column a non-zero hardness\r\n\r\n* Fix checkstyle\r\n\r\n* Improve PillarBakedModel to fully support custom block appearance\r\n\r\n* Explain OverlayVertexConsumer fix"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623061e0ac82a74541b20a4",
    "number": 3204,
    "body": "- Deprecate `exactView` with no replacement. It is just clutter that nobody uses as far as I know.\r\n- Move `simulateInsert` and `simulateExtract` methods to `StorageUtil`. This removes these helper methods from the core `Storage` interface, and places them alongside other similar helpers. As a side effect, this allows `simulateExtract` to work on `StorageView`s which also have an `extract` method.\r\n- Link to wiki tutorial in `Storage` javadoc. We don't usually do that, however this API is too hard to comprehend without an entry-level tutorial. The tutorial is not complete yet, but I will be able to expand it as time passes.\r\n- Clarify what the estimate means in `StorageView#getCapacity`.\r\n\r\nThanks to @agnor99 who suggested these changes!",
    "head_branch": "trapi-improvements",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "A few transfer API improvements and deprecations (#3204)\n\n* A few transfer API improvements and deprecations\r\n\r\n* Forward implementation of deprecated methods"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623061f0ac82a74541b20a5",
    "number": 3202,
    "body": "The pink petal is in the `flowers` block tag, so the cherry grove must be added to the `floral` biome tag.\r\n\r\n[Since Mojang have confirmed that the cherry grove is technically not a forest](https://bugs.mojang.com/browse/MC-263202), this biome should be added to the `floral` tag instead of `flower_forests`.\r\n\r\nAlso use `add` instead of `addOptional` for cherry grove since 1.20 is already out\r\n",
    "head_branch": "floral-tag-missing-cherry-grove",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add the cherry grove to the floral biome tag (#3202)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306200ac82a74541b20a6",
    "number": 3201,
    "body": "Added some TAWs for various methods in `Blocks` used to create certain types of blocks that mods may want to also create. Using these methods will allow them to ensure they have all the right block settings they need to stay consistent with vanilla blocks that use the same methods.\r\n\r\nFixes #3086 \r\n\r\nAlso includes some useful fields in `BlockLootTableGenerator` for block loot tables, and fixes formatting in the datagen module's AW file.",
    "head_branch": "1.20.1-taw",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Some more TAWs for block creation and block loot tables (#3201)\n\n* Some more TAWs\r\n\r\nAdded some TAWs for various methods in `Blocks` used to create certain types of blocks that mods may want to also create. Using these methods will allow them to ensure they have all the right block settings they need to stay consistent with vanilla blocks that use the same methods.\r\n\r\n* Add some fields from BlockLootTableGenerator\r\n\r\nuseful fields from BlockLootTableGenerator. also cleaned up the datagen api's accesswidener file"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306210ac82a74541b20a7",
    "number": 3200,
    "body": "Ported from Pepper's similar fix in Sodium. Fixes #3153.",
    "head_branch": "fix-3153",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Indigo handling of sculk sensor AO (#3200)\n\n* Fix Indigo handling of sculk sensor AO. Fixes #3153\r\n\r\n* Split offset and mean formula lighting config options"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306220ac82a74541b20a8",
    "number": 3190,
    "body": "When a beehive is broken, every nearby bee targets a random player. However, if there are no nearby players, the game crashes.\r\n\r\nThis should not occur under normal (vanilla) conditions. However, if a beehive is broken by a fake player there are no players in range, and so we see a crash.",
    "head_branch": "hotfix/fakeplayer-beehive",
    "is_a_fork": true,
    "comments": [
      "Thank you! "
    ],
    "commit_messages": [
      "Fix crash when beehive is broken by fake player (#3190)\n\n* Fix crash when beehive is broken by fake player\r\n\r\nWhen a beehive is broken, every nearby bee targets a random player.\r\nHowever, if there are no nearby players, the game crashes.\r\n\r\nThis should not occur under normal (vanilla) conditions. However, if a\r\nbeehive is broken by a fake player there are no players in range, and so\r\nwe see a crash.\r\n\r\n* Checkstyle, my beloved\r\n\r\n* Remove public modifier\r\n\r\n* See see see"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306230ac82a74541b20a9",
    "number": 3183,
    "body": "In preparation for resource loader v1... This is still for internal use only, but now the event phase sorting logic can be used in other contexts.\r\n\r\nPlease check the first commit for the diff in `PhaseSorting`... the second commit just renames it and moves it to the `toposort` package.",
    "head_branch": "toposort-extraction",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make event phase ordering logic usable in other contexts (internally only) (#3183)\n\n* Make event phase ordering logic usable in other contexts (internally only)\r\n\r\n* Rename and move to toposort package"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306230ac82a74541b20aa",
    "number": 3182,
    "body": "Fix #3170 by moving injection point of `MODIFY_COMMAND` to `HEAD`.  \r\nAdd test for `MODIFY_COMMAND` and the client command api.  \r\nAlso moves `MODIFY_MESSAGE` to `HEAD` for consistency.  ",
    "head_branch": "1.20.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix incorrect behavior with ClientMessageEvents and CommandApi (#3182)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306240ac82a74541b20ab",
    "number": 3181,
    "body": "New events to hook into before and after `Minecraft#render.runTasks()` is ran. This is where all scheduled tasks are ran, including keyboard and mouse handling.\r\n\r\nUse cases for this are unlimited, and guarantees that the event is ran after any scheduled tasks. It also proves a great place to hook to add custom keypresses for KeyBinding. Such as running `KeyBinding.onKeyPress(Key)` manually to press a key automatically.",
    "head_branch": "pull/input-event",
    "is_a_fork": true,
    "comments": [
      "Task execution happens a lot more frequently than the normal client tick."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306250ac82a74541b20ac",
    "number": 3169,
    "body": null,
    "head_branch": "1.20.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Ukrainian translations (#3169)\n\n* Add files via upload\r\n\r\n* Add files via upload"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306260ac82a74541b20ad",
    "number": 3168,
    "body": "All of this code is internal to Fabric API and is not exposed for mods to use. (Yet?)\r\n\r\nThis PR creates a very primitive API for other modules to impliment their own automated client tests, I started by adding some tests for the issues fixed in: https://github.com/FabricMC/fabric/pull/3164\r\n\r\nThings I want to add:\r\n\r\n- A command to run the in world tests without needing to restart the game, should make developing and debugging these tests much easier.\r\n- Golden tests where part of the UI, or a custom exported image are saved into the github repo, thus any change to the image can fail the CI. In this example we could render the block to ensure that the texture changes. \r\n- Some documentation/guides to help other Fabric API developers make use of this\r\n- Maybe: record a video of the tests running in CI, just because its cool to see it click around the UI like a super human.\r\n\r\nSee the test screenshots on github actions or the following examples:\r\n\r\n![injected_resources_default](https://github.com/FabricMC/fabric/assets/4324090/7deff1b6-e430-4ea2-b8f8-2b0dc1d64209)\r\n![injected_resources_high_contrast](https://github.com/FabricMC/fabric/assets/4324090/75ad68a3-3ca3-44e9-800a-6232543997d3)\r\n![injected_resources_programmer](https://github.com/FabricMC/fabric/assets/4324090/0c181238-b7c1-4f53-bf3b-ff518e759610)\r\n",
    "head_branch": "feature/client_test_improvements",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306270ac82a74541b20ae",
    "number": 3167,
    "body": null,
    "head_branch": "1.20.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add vi_vn.json (#3167)\n\n* Create vi_vn.json\r\n\r\n* Create vi_vn.json"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306270ac82a74541b20af",
    "number": 3166,
    "body": null,
    "head_branch": "update-finnish-2023-07-03",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update Finnish translation (#3166)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306280ac82a74541b20b0",
    "number": 3164,
    "body": "Mods can override vanilla textures just fine by placing files into `resources/assets/minecraft`:\r\n![Default](https://github.com/FabricMC/fabric/assets/48808497/4e0d8447-f290-400e-9040-1271e9fb25ab)\r\n\r\nHowever, the same doesn't work (at least not consistently) for injected resources (via `resources/programmer_art/assets/minecraft` for example):\r\n![Injected Current](https://github.com/FabricMC/fabric/assets/48808497/8bf62091-4b26-40ca-b0a9-5d7f70ff069d)\r\n\r\nThis PR fixes the inconsistent behavior:\r\n![Injected Fixed](https://github.com/FabricMC/fabric/assets/48808497/3d581686-2e6b-4e56-ac13-f851210fa52d)\r\n",
    "head_branch": "resource-pack-injection-vanilla-asset-override-fix-1.20",
    "is_a_fork": true,
    "comments": [
      "Done! I've also removed some redundant code while being at it",
      "The build failure is due to checkstyle 👍 ",
      "Oops, should be fixed now"
    ],
    "commit_messages": [
      "Fix injected resources not overriding certain vanilla resources (1.20) (#3164)\n\n* Fix injected resources not overriding certain vanilla resources\r\n\r\n* Adjust comment\r\n\r\n* Add test blocks for High Contrast pack, too\r\n\r\n* Fix `GroupResourcePack`\r\n\r\n* Deduplicate logic between `GroupResourcePack` and `FabricWrappedVanillaResourcePack`\r\n\r\n* Fix checkstyle\r\n\r\n* Delete gravel texture override, change dirt to diamond block"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306290ac82a74541b20b1",
    "number": 3163,
    "body": "Closes #1012, supersedes #1031 and #2719.\r\n\r\nThis PR also fixes the tag paths for modded dynamic registries by adding the registry namespace to them:\r\n```\r\ndata/<tag namespace>/tags/<registry namespace>/<registry path>/<tag path>.json\r\n                          ^~~~~~~~~~~~~~~~~~~~^\r\n                                 added\r\n```",
    "head_branch": "custom-loaded-registries",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add dynamic registry API (#3163)\n\n* Add API for adding custom dynamic registries\r\n\r\nCloses #1012, supersedes #1031 and #2719.\r\n\r\n* Add missing license headers\r\n\r\n* Clarify RegistryLoaderMixin namespace injection\r\n\r\n* Replace event with static registration, add skeleton for sorting registries\r\n\r\n* Fix typo\r\n\r\n* Refactor event phase sorting system for use with dynamic registries (#1)\r\n\r\n* Make minor changes to Technici4n's PR\r\n\r\n* Add test for nested dynamic objects\r\n\r\n* Revert \"Add test for nested dynamic objects\"\r\n\r\nThis reverts commit 486e3e1ce097ff66a4018c71d1101d3ee5427d10.\r\n\r\n* Revert \"Make minor changes to Technici4n's PR\"\r\n\r\nThis reverts commit 741bd52c1e76bf89519d28e6d6b67a6dd04c3fcb.\r\n\r\n* Revert \"Refactor event phase sorting system for use with dynamic registries (#1)\"\r\n\r\nThis reverts commit bb7c8b8790507bc4095f1963f4e2849d904081b4.\r\n\r\n* Remove sorting API\r\n\r\n* Add support for defaulted dynamic registries\r\n\r\n* Re-add test for nested dynamic objects\r\n\r\n* Add missing license headers\r\n\r\n* Fix typo\r\n\r\n* Remove defaulted dynamic registries; flatten registration methods\r\n\r\n* Remove last reference to registry sorting\r\n\r\n* Add option to skip syncing for empty dynregs\r\n\r\n* Update DynamicRegistrySyncOption docs\r\n\r\nCo-authored-by: Technici4n <13494793+Technici4n@users.noreply.github.com>\r\n\r\n* Address review feedback\r\n\r\n* Add registry namespace to tag paths for modded registries\r\n\r\n* Move dynamic registry tests into their own class for readibility\r\n\r\n* Finish DynamicRegistries doc\r\n\r\n* Only apply tag change to dynamic registries\r\n\r\n* Fix checkstyle\r\n\r\n* Update fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/DynamicRegistries.java\r\n\r\nCo-authored-by: Technici4n <13494793+Technici4n@users.noreply.github.com>\r\n\r\n---------\r\n\r\nCo-authored-by: Technici4n <13494793+Technici4n@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623062a0ac82a74541b20b2",
    "number": 3158,
    "body": "Update to Loom 1.3\r\nUpdate to Gradle 8.2\r\nMigrate to my [mod-publish-plugin](https://github.com/modmuss50/mod-publish-plugin)\r\nUse sign jar task in dry run mode for all builds.",
    "head_branch": "loom_1_3",
    "is_a_fork": true,
    "comments": [
      "@modmuss50 a suggestion would be making this update to Gradle 8.2 as well if possible.",
      "@mrjasonn Yeah, I'm working on it. The curse publish plugin we use has some deprecation warnings in 8.2 so needs replacing first (We fail the build with deprecations).",
      "> @mrjasonn Yeah, I'm working on it. The curse publish plugin we use has some deprecation warnings in 8.2 so needs replacing first (We fail the build with deprecations).\r\n\r\nOk. I would also recommend you to have other people that are interested work with you on it so it gets done quicker. It would also be a good idea to make it so it can automatically update to a newer build of Loom 1.3 if possible and feasible.",
      "It would also be a good idea to do this for the other FabricMC projects.",
      "I have already put quite a bit of effort into it here: https://github.com/modmuss50/mod-publish-plugin If you or anyone wishes to help out please let me know on discord, there is plenty to get on with!\r\n\r\nI am going away for a few days shortly ✈️, I doubt ill be able to finish it before then so this PR might be blocked for a week or two.",
      "Im going to merge this into the 1.20.2 branch, to test it out. Will then backport for the next 1.20.1 release 👍 "
    ],
    "commit_messages": [
      "Update to loom 1.3 and use Mod Publish Plugin (#3158)\n\n* Update to loom 1.3\r\n\r\n* Fix more 1.3 deprecations\r\n\r\n* Opps\r\n\r\n* Move to mod publish plugin\r\n\r\n* Revert some changes\r\n\r\n* Fix some more Gradle deprecations\r\n\r\n* Fix names\r\n\r\n* Remove extra stuff\r\n\r\n* Cleanup"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623062b0ac82a74541b20b3",
    "number": 3155,
    "body": "This callback is a simple implementation for a callback after the `Camera#update` method is called from the `WorldRenderer`. The mixin itself is rather trivial, though due to the nature of rendering code (changing values to get it just right and hotswapping), it requires a public static method outside of the mixin class when not using mixin hotswap. The included test slowly rotates the camera upward when the player sleeps in a bed.",
    "head_branch": "feat/camera-update-callback",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623062c0ac82a74541b20b4",
    "number": 3146,
    "body": "Adds an event, `ParticleRenderEvents.ALLOW_BLOCK_DUST_TINT`, that checks if a block dust particle of a specific block can be tinted.\r\n\r\nThe API is useful for partially coloured blocks that use a coloured texture in their models but a non-coloured particle texture, like vanilla grass blocks or various thin tree logs with leaves from biome mods.\r\n\r\nAlso bumps the Fabric Loader requirement of fabric-particles-v1 to latest to disable Loader's mixin compatibility mode that ignores slices for certain `@At` annotations.\r\n\r\nThe area of vanilla code seems to be very stable - this change should be backportable with only test mod changes all the way to 1.18.2 and maybe even further.",
    "head_branch": "add-particle-tint-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add event for preventing particle tinting for colored blocks (#3146)\n\n- Adds an event, `ParticleRenderEvents.ALLOW_BLOCK_DUST_TINT`, that checks\r\n  if a block dust particle of a specific block can be tinted.\r\n- Bumps Fabric Loader requirement of fabric-particles-v1 to latest to\r\n  disable Loader's mixin compatibility mode that ignores slices for\r\n  certain At annotations."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623062d0ac82a74541b20b5",
    "number": 3145,
    "body": "This PR deprecates and supersedes the old `fabric-models-v0` module.\r\n\r\n## Refactors compared to v0\r\n### Model loading hooks\r\nMods now register a single `ModelLoadingPlugin` for any change they want to make to the model loading process. (Or multiple plugins if they want to). This replaces the old `ModelLoadingRegistry`.\r\n\r\nHere is an example:\r\n\r\n```java\r\nModelLoadingPlugin.register(pluginContext -> {\r\n    // ResourceManager access is provided like in the v0 API, but in a central place, and can be used for shared processing in the plugin.\r\n    ResourceManager manager = pluginContext.resourceManager();\r\n\r\n    // Model resource providers still exist, but they are called model resolvers now\r\n    pluginContext.resolveModel().register(context -> {\r\n        // ...\r\n    });\r\n});\r\n```\r\n\r\n#### `ModelVariantProvider` -> `BlockStateResolver`\r\n`ModelVariantProvider` was heavily reworked, and is now replaced by the `BlockStateResolver`, with a much better defined contract.\r\n\r\n#### `ModelResourceProvider` -> `ModelResolver`\r\nThe resource provider is mostly unchanged. The biggest difference is that it is now registered as an event listener. This allows mods to use event phases for ordering between conflicting ~~providers~~ resolvers.\r\n\r\n#### Removed custom exception\r\nAdditionally, `ModelProviderException` could be thrown by a variant or resource provider in the v0 API. This was not explained in the documentation, and would according to the code stop further processing of the providers and log an error.\r\n\r\nIn the new API, any `Exception` is caught and logged. If that happens, the other resolvers are still processed. There is no custom `Exception` subclass anymore.\r\n\r\n### Helper method to get a `BakedModel` by `Identifier` from the manager\r\nThe v0 had such a method in a helper class: `BakedModelManagerHelper#getBakedModel`. It is now interface-injected instead. See `FabricBakedModelManager`.\r\n\r\n## New model wrapping hooks\r\nNew hooks are added for the various needs of mods that want to override or wrap specific models. Thanks to @embeddedt for contributing an initial version of them!\r\n\r\nHere is an example of wrapping the gold model to remove the bottom quads, for example:\r\n```java\r\nModelLoadingPlugin.register(pluginContext -> {\r\n\t// remove bottom face of gold blocks\r\n\tpluginContext.modifyModelAfterBake().register(ModelModifier.WRAP_PHASE, (model, context) -> {\r\n\t\tif (context.identifier().getPath().equals(\"block/gold_block\")) {\r\n\t\t\treturn new DownQuadRemovingModel(model);\r\n\t\t} else {\r\n\t\t\treturn model;\r\n\t\t}\r\n\t});\r\n});\r\n```\r\n\r\nThere are 3 events, for the following use cases:\r\n- Wrapping `UnbakedModel`s right when they are loaded. This allows replacing them entirely in dependent models too.\r\n- Wrapping `UnbakedModel`s right before they are baked. This allows replacing them without affecting dependent models (which might not be expecting a model class change).\r\n- Wrapping `BakedModel`s right when they are baked.\r\n\r\nMultiple mods have implemented their own version of them. Providing them in Fabric API will make it easier on these mods, and will additionally allow optimization mods that perform on-demand model loading to simply fire the hooks themselves instead of working around injections performed by other mods.",
    "head_branch": "model-loading-api-v1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Model Loading API v1 (#3145)\n\nThis PR deprecates and supersedes the old `fabric-models-v0` module.\r\n\r\n## Refactors compared to v0\r\n### Model loading hooks\r\nMods now register a single `ModelLoadingPlugin` for any change they want to make to the model loading process. (Or multiple plugins if they want to). This replaces the old `ModelLoadingRegistry`.\r\n\r\nHere is an example:\r\n\r\n```java\r\nModelLoadingPlugin.register(pluginContext -> {\r\n    // ResourceManager access is provided like in the v0 API, but in a central place, and can be used for shared processing in the plugin.\r\n    ResourceManager manager = pluginContext.resourceManager();\r\n\r\n    // Model resource providers still exist, but they are called model resolvers now\r\n    pluginContext.resolveModel().register(context -> {\r\n        // ...\r\n    });\r\n});\r\n```\r\n\r\n#### `ModelVariantProvider` -> `BlockStateResolver`\r\n`ModelVariantProvider` was heavily reworked, and is now replaced by the `BlockStateResolver`, with a much better defined contract.\r\n\r\n#### `ModelResourceProvider` -> `ModelResolver`\r\nThe resource provider is mostly unchanged. The biggest difference is that it is now registered as an event listener. This allows mods to use event phases for ordering between conflicting ~~providers~~ resolvers.\r\n\r\n#### Removed custom exception\r\nAdditionally, `ModelProviderException` could be thrown by a variant or resource provider in the v0 API. This was not explained in the documentation, and would according to the code stop further processing of the providers and log an error.\r\n\r\nIn the new API, any `Exception` is caught and logged. If that happens, the other resolvers are still processed. There is no custom `Exception` subclass anymore.\r\n\r\n### Helper method to get a `BakedModel` by `Identifier` from the manager\r\nThe v0 had such a method in a helper class: `BakedModelManagerHelper#getBakedModel`. It is now interface-injected instead. See `FabricBakedModelManager`.\r\n\r\n## New model wrapping hooks\r\nNew hooks are added for the various needs of mods that want to override or wrap specific models. Thanks to @embeddedt for contributing an initial version of them!\r\n\r\nHere is an example of wrapping the gold model to remove the bottom quads, for example:\r\n```java\r\nModelLoadingPlugin.register(pluginContext -> {\r\n\t// remove bottom face of gold blocks\r\n\tpluginContext.modifyModelAfterBake().register(ModelModifier.WRAP_PHASE, (model, context) -> {\r\n\t\tif (context.identifier().getPath().equals(\"block/gold_block\")) {\r\n\t\t\treturn new DownQuadRemovingModel(model);\r\n\t\t} else {\r\n\t\t\treturn model;\r\n\t\t}\r\n\t});\r\n});\r\n```\r\n\r\nThere are 3 events, for the following use cases:\r\n- Wrapping `UnbakedModel`s right when they are loaded. This allows replacing them entirely in dependent models too.\r\n- Wrapping `UnbakedModel`s right before they are baked. This allows replacing them without affecting dependent models (which might not be expecting a model class change).\r\n- Wrapping `BakedModel`s right when they are baked.\r\n\r\nMultiple mods have implemented their own version of them. Providing them in Fabric API will make it easier on these mods, and will additionally allow optimization mods that perform on-demand model loading to simply fire the hooks themselves instead of working around injections performed by other mods.\r\n\r\nCo-authored-by: embeddedt <42941056+embeddedt@users.noreply.github.com>\r\nCo-authored-by: PepperCode1 <44146161+PepperCode1@users.noreply.github.com>\r\nCo-authored-by: Juuz <6596629+Juuxel@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623062d0ac82a74541b20b6",
    "number": 3142,
    "body": "The following PR implements a standardized API mods such as Continuity can use to have low-level control over what model instances are loaded and baked within the `ModelLoader`. One benefit of standardizing this system is that it will allow optimization mods such as my own to safely implement dynamic model loading/unloading at runtime without running into compatibility problems when mods that inject into `ModelLoader` directly. It also makes it easy for modders to replace models without needing to learn exactly how the model loader works.\r\n\r\nEDIT: Will run checkstyle after other concerns are addressed.",
    "head_branch": "model-loading-observer",
    "is_a_fork": true,
    "comments": [
      "This now lives inside of #3145."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623062e0ac82a74541b20b7",
    "number": 3141,
    "body": "Fixes #3114. Fixes #3123.",
    "head_branch": "fix-3114",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix default fluid names for non-placeable fluids, clarify Storage iterator lifecycle with modification (#3141)\n\n* Fix default fluid names for non-placeable fluids, clarify Storage iterator lifecycle with modification\r\n\r\n* Fix blank variant translation accidentally changing"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623062f0ac82a74541b20b8",
    "number": 3140,
    "body": "This pull requests adds the Render Data v2 module, which directly supersedes the existing Rendering Data Attachment v1 module.\r\n\r\nThe original goal was to interface inject the two interfaces provided by Rendering Data Attachment v1, `RenderAttachmentBlockEntity` and `RenderAttachedBlockView`, to allow for an easier to use API. It proved to be impossible to achieve this and still provide a clean API without making a new module, as explained below.\r\n\r\nThe documentation of `RenderAttachedBlockView` states that it is guaranteed to be implemented on all instances of `BlockRenderView`, but this is not the case. The module implementation only guarantees that all `WorldView` instances implement the interface. `RenderAttachedBlockView` extends `BlockRenderView`, meaning that trying to change the mixin to satisfy the stated contract is not possible; thus, it can be deduced that the mixin is correct but the stated contract is not, though such a contract does not lead to an easy to use API. Such an API design also makes interface injection of `RenderAttachedBlockView` impossible.\r\n\r\nTo allow for the currently stated contract to be satisfied and to allow for interface injection to happen, a new module was made. It uses the same design as the existing module, with two interfaces that each have one method. Of course, the replacement for `RenderAttachedBlockView` no longer extends `BlockRenderView`. Some terminology and class member names were changed when creating the new module. The object that used to be termed \"Render Data Attachment\" or \"Render Attachment\" has been renamed to \"Block Entity Render Data\" or simply \"Render Data\". All methods, documentation, and other mentions of the old terms, apart from within the existing module, have been changed to use the new terms. Additionally, the documentation was rewritten to be more concise, provide more examples, remove mentions of implementation details, and add concrete requirements for use of certain methods.\r\n\r\nThe existing module has been completely deprecated and its documentation has been updated to state the contract that is actually satisfied and link to the v2 replacements. It was not possible to achieve perfect backward and forward compatibility since this would result in infinite recursion at first thought and degraded performance with an actual implementation. To compromise, it was observed that the `BlockRenderView` extension interface is invoked much more frequently than it is implemented, and that the `BlockEntity` extension interface is implemented much more frequently than it is invoked. As such, it was decided that the v1 `BlockRenderView` extension interface should proxy to v2 and the v2 `BlockEntity` extension interface should proxy to v1.",
    "head_branch": "pr/1.19.4/render-data-v2",
    "is_a_fork": true,
    "comments": [
      "Might be a nice idea to edit the PR description to include a short rundown of what is diffrent with this new API as its not that obvious, and possibly a migration guide. I usually copy these into the commit when suqishing+merging.",
      "Yes this would be nice. We could then reference the PR in the update announcement.\r\n\r\nSomething else we need at the ready for the announcement is the gradle invocation to include the old API back in dev:\r\n\r\n\"The old v0 rendering data attachment module is deprecated, and therefore not in the default dev jar anymore. Here is how to add it back if you don't want to update immediately:\r\n\r\n<gradle diff>\"",
      "Superseded by #3268."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306300ac82a74541b20b9",
    "number": 3129,
    "body": "Dear FabricMC development team,\r\n\r\nI hereby propose a server consent system for clients. As this is just a proposal, I invite you to share your thoughts on this so that we can come up with something better. Since this system is meant to be universal, I also opened an [issue over at Paper](https://github.com/PaperMC/Paper/issues/9380) for the (server-side) system. The text there is roughly the same, with a few server provider specific exceptions, and of course not including the client-sided aspect specifically for Fabric. Thanks for reading!\r\n\r\n# Server Consent API\r\n\r\n_Perhaps a different name would be better._\r\n\r\nSummary\r\n-------\r\n\r\nThis API adds a (universal) server consent system for mods and features\r\nof mods a client connecting to the server uses. The server configures a list\r\nof illegal mods/features and, if enabled, will send the client these lists\r\nwhen the client connects to the server. Mod developers can then process\r\nthis information and if needed disable certain/all functionality. This system\r\nis meant to be standardised across different server software\r\nimplementations, so that clients know what to implement.\r\n\r\nGoals\r\n-----\r\n\r\n- Standardise a system for client mod developers wanting their mod to be\r\nused responsibly. This is the main goal!\r\n- Provide server owners with a system that can _ask_ the client to\r\ndisable some of its mods or some of its mods' functionalities.\r\n\r\nNon-Goals\r\n---------\r\n\r\nIt is absolutely not a goal to provide server owners with a robust\r\nanti-cheat system. This system should not be used in place of anti-cheat\r\nmods and other unfair gameplay preventing plugins/mods. This is not\r\nthe intention of this system.\r\n\r\nSuccess Metrics\r\n---------------\r\n\r\nThe amount of client-sided mods that will adopt this system. Though, it\r\nshould be noted that this system will not have failed if some mods don't\r\nuse this; for servers this system does not have any downsides and any mod\r\nusing this is therefore a success.\r\n\r\nMotivation\r\n----------\r\n\r\nClient mod developers are often powerless to prevent their mods from\r\nbeing used on servers which do not allow them/do not allow certain of\r\ntheir functionalities. For instance, many cheat mod developers wouldn't\r\nwant their mods to be used outside of anarchy servers, but they have no\r\nway of preventing it. Others might completely dismiss certain features\r\nin fear that they will be used irresponsibly. With this system, client\r\nmod developers are no longer limited in this regard, as they can now\r\ndisable their mod/illegal features on servers that want them to.\r\n\r\nThe server-side implementation as shown by the mod is very minimal,\r\nand server owners only need to change a config to enable this system.\r\nThis is beneficial for server owners as it barely requires any effort to\r\nconfigure. The same applies to the client-side implementation.\r\n\r\nDescription\r\n-----------\r\n\r\nThis system uses the custom payload channel `noconsent:flags` to send\r\nthe list of mods/features to the client (namespace should be discussed).\r\nThe list is a `net.minecraft.util.Identifier` list with the following design:\r\n\r\n- `<mod id>:<feature>` requests the feature `<feature>` of the mod with\r\nmod id `<mod id>` to be disabled;\r\n- `c:<feature>` requests the feature `<feature>` of all mods to be disabled;\r\n- `<mod id>:all` requests the all the features of the mod with mod id\r\n`<mod id>` to be disabled.\r\n\r\nThe common namespace `c` is defined by the field\r\n`Flags#COMMON_NAMESPACE`. The wildcard feature `all` is defined by\r\nthe field `Flags#WILDCARD_FEATURE`. To aid standardisation, the `Flags`\r\nclass also includes common flags for mod developers to use.\r\n\r\nIf the server has enabled this system, the server will send the configured\r\nlist of mods/features to the client. For now, this list is configured using\r\nJSON. The default config (located at `.minecraft/config/fabric/consents.json`\r\nis as follows.\r\n\r\n```json\r\n{\r\n  \"enabled\": false,\r\n  \"illegalFlags\": []\r\n}\r\n```\r\n\r\nAn example config might look like this.\r\n\r\n```json\r\n{\r\n  \"enabled\": true,\r\n  \"illegalFlags\": [\r\n    \"c:markers\",\r\n    \"seedmapper:all\"\r\n  ]\r\n}\r\n```\r\n\r\nWith this configuration, the server would ask all mods to disable their\r\n`markers`, and to disable the mod with mod id `seedmapper` entirely. This\r\nlist is parsed by making a simple `TypeAdapter<Identifier>` provided by\r\nGSON.\r\n\r\nWhen the client receives the list of illegal mods/features, an event will\r\nbe triggered by this API to which client mod developers can listen. The\r\nevents is `ClientFabricServerConsentFlagsCallback.FLAGS_SENT`. They can\r\nthen check if their mod is included in any way in the list by using the\r\n`ClientFabricServerConsent#isIllegal` method:\r\n\r\n```java\r\n/**\r\n * Checks for a given flag and mod id whether the flag is illegal.\r\n *\r\n * @param flag the flag to check against\r\n * @return {@code true} if the flag is illegal, {@code false} otherwise\r\n */\r\npublic static boolean isIllegal(Identifier flag) {\r\n\tfor (Identifier illegalFlag : ClientFabricServerConsentImpl.illegalFlags) {\r\n\t\tif (illegalFlag.getNamespace().equals(Flags.COMMON_NAMESPACE)) {\r\n\t\t\tif (illegalFlag.getPath().equals(flag.getPath())) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (illegalFlag.getNamespace().equals(flag.getNamespace())) {\r\n\t\t\tif (illegalFlag.getPath().equals(Flags.WILDCARD_FEATURE)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tif (illegalFlag.getPath().equals(flag.getPath())) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn false;\r\n}\r\n```\r\n\r\nIt is up to the mod developer to decide what to do with this\r\ninformation. \r\n\r\nAlternatives\r\n------------\r\n\r\n- The system is standardised by server software providers, but not\r\nimplemented into them directly. This means that different server\r\nsoftware providers would agree on a namespace for the list of\r\nillegal mods/features, but let the configuration and implementation\r\nbe up to server owners to implement. One way this could be\r\nachieved is by having server software providers document the\r\nsystem clearly, with example code for server owners. There are two\r\ndownsides of this approach, though.\r\n\r\n  1. The documentation will likely not reach the same audience as\r\n  direct implementation would. That means fewer server owners\r\n  will implement use system, which weakens the system as whole.\r\n  2. It is at the expense of standardisation. Direct implementation\r\n  simply has more of a standardising effect than individual\r\n  standardisation has.\r\n\r\n- This system is not standardised at all. In that case a mod (in the\r\ncase of a Fabric server) could be used by server owners. However,\r\nthere is very little chance a third party mod will be widely adopted\r\nby servers. Importantly, standardisation is the main goal of this\r\nsystem. Without it, disagreement and inconsistency would arise, and\r\nthe system would flop. Only if established server software providers\r\nchoose to adopt this system will this work.\r\n\r\nConsidering these two alternatives, only the first could actually work.\r\nThird party implementations just don't have the necessary reach to\r\nestablish something widespread across the Minecraft developer\r\ncommunity.",
    "head_branch": "permissions-api",
    "is_a_fork": true,
    "comments": [
      "It has become clear that the client sending a list of their mods to the server is a bad idea. I will rewrite the code and PR description accordingly later.",
      "I like the idea of this, but I doubt that this will have a major effect in the end, at least on the side of hacked clients where someone could easily just maintain a fork that ignores the API. After all, most major hacked clients don't even bother to check if the server is anarchy or not. In my opinion it's just too much work for something that probably wont be used often or can easily be bypassed.",
      "> I like the idea of this, but I doubt that this will have a major effect in the end, at least on the side of hacked clients where someone could easily just maintain a fork that ignores the API. After all, most major hacked clients don't even bother to check if the server is anarchy or not. In my opinion it's just too much work for something that probably wont be used often or can easily be bypassed.\r\n\r\nIt's up to the developer to adopt this system or not. And yes, it can be easily bypassed. It's an explicit Non-Goal to provide some robust anti-cheat system. This is for client mod developers that want their mod to be used more responsibly.",
      "This would be trivial to bypass as the stated goal is to disabled cheats on servers any \"client\" could just disable this check. Even mods that use this could have the checks disabled.",
      "> This would be trivial to bypass as the stated goal is to disabled cheats on servers any \"client\" could just disable this check. Even mods that use this could have the checks disabled.\r\n\r\nI will say, it would totally be possible for someone to make a mod* that consists of a few mixins, that bypasses the check for all mods, which would mean that compliant mod devs would still have their mods misused. It kind of sucks that there isn't a good way to do with without a) being some level of invasive or b) obfuscating code.\r\n\r\n>*modrinth does not allow these forms of mods, but GitHub and Curseforge could possibly distribute this."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306310ac82a74541b20ba",
    "number": 3127,
    "body": null,
    "head_branch": "fix-typos",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix typos (#3127)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306310ac82a74541b20bb",
    "number": 3118,
    "body": "Allows for client tags to reference tags that may be synced from a server, allowing for them to be used.\r\n\r\nAn example of this being useful is in AutoSwitch. To address `mc:sword_efficient` not containing bamboo, a wrapper tag is needed `as:sword_efficient`. With partially synced tags it would allow for server-side changes to `mc:sword_efficient` to be seen in `as:sword_efficient`, which better reflects the intent of the tag.\r\n\r\nThis is a draft as implementation is worked out, some todos are left in with some questions.",
    "head_branch": "client_tags_1.1",
    "is_a_fork": true,
    "comments": [
      "Your change to the recursion handling means that nested tags won't be correctly overridden anymore, as far as I can tell.",
      "> Your change to the recursion handling means that nested tags won't be correctly overridden anymore, as far as I can tell.\r\n\r\nGood catch. I've restored the recursive search, but added tracking of already tested tags so we should now always terminate.\r\n"
    ],
    "commit_messages": [
      "Add support for partially synced client tags (#3118)\n\n* Draft v1.1.0\r\n\r\n* Resolve some comments\r\n\r\n* Add javadoc\r\n\r\n* Remove old behavior\r\n\r\n* Minor cleanup\r\n\r\n* Add test for partially synced tags\r\n\r\n* Address nitpick\r\n\r\n* Fix checkstyle\r\n\r\n* Hard fail when datapack fails to regsiter\r\n\r\nCo-authored-by: modmuss <modmuss50@gmail.com>\r\n\r\n* Fix missing import\r\n\r\n* Refactor\r\nDon't recurse through tag hierarchy\r\n\r\n* Add note for test\r\n\r\n* Adjustments to logic to handle server-missing nested tags\r\n\r\n* Restore recursive search, add tracking of checked tags\r\n\r\n* Cleanup\r\n\r\n---------\r\n\r\nCo-authored-by: modmuss <modmuss50@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306320ac82a74541b20bc",
    "number": 3117,
    "body": "Resolves #3116\r\n\r\nAnd predicates (loot conditions), item modifiers (loot functions). They are handled by the same method.\r\n\r\n`LootManager` is no longer a `JsonDataLoader` - in fact it is not even a `SinglePreparationResourceReloader` anymore. Therefore it needs a new Mixin.\r\n\r\nThe new mixin, instead of manipulating a map like the old Mixin, early-returns a `forEach` call that parses JSONs.\r\n\r\nAdded two tests using predicates.",
    "head_branch": "resource-conditions/fix-loot-manager",
    "is_a_fork": true,
    "comments": [
      "While tag conditions do not currently work, I still think we should merge it now and fix later. Kinda complex, I think.",
      "I agree, will have a look in a bit."
    ],
    "commit_messages": [
      "Fix resource conditions for loot tables (#3117)\n\n* Add test for LootManager\r\n\r\n* Fix resource conditions for loot tables"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306330ac82a74541b20bd",
    "number": 3115,
    "body": "Adds `BlockSetTypeBuilder` and `WoodTypeBuilder` to replace `BlockSetTypeRegistry` and `WoodTypeRegistry` respectively.\r\n\r\nThe builder format is more suited to these as they have an large amount of values which aren't often changed. `BlockSetTypeRegistry`'s register method in particular has a whopping 11 parameters, most of which are sound events that you'd have to try not to mess up the order on.\r\n\r\nPreviously, if you wanted a `BlockSetType` that was identical to `BlockSetType.OAK` except with custom button sounds and doors that require redstone to open, you'd have to write:\r\n```java\r\npublic static final BlockSetType MAPLE = BlockSetTypeRegistry.register(\r\n\t new Identifier(\"mymod\",\"maple\"),\r\n\t false,\r\n\t BlockSoundGroup.WOOD,\r\n\t SoundEvents.BLOCK_WOODEN_DOOR_CLOSE,\r\n\t SoundEvents.BLOCK_WOODEN_DOOR_OPEN,\r\n\t SoundEvents.BLOCK_WOODEN_TRAPDOOR_CLOSE,\r\n\t SoundEvents.BLOCK_WOODEN_TRAPDOOR_OPEN,\r\n\t SoundEvents.BLOCK_WOODEN_PRESSURE_PLATE_CLICK_OFF,\r\n\t SoundEvents.BLOCK_WOODEN_PRESSURE_PLATE_CLICK_ON,\r\n\t MyModSoundEvents.BLOCK_MAPLE_BUTTON_CLICK_OFF,\r\n\t MyModSoundEvents.BLOCK_MAPLE_BUTTON_CLICK_ON\r\n);\r\n```\r\nNow you can write simply:\r\n```java\r\npublic static final BlockSetType MAPLE = BlockSetTypeBuilder.copyOf(BlockSetType.OAK)\r\n\t .openableByHand(false)\r\n\t .buttonClickOffSound(MyModSoundEvents.BLOCK_MAPLE_BUTTON_CLICK_OFF)\r\n\t .buttonClickOnSound(MyModSoundEvents.BLOCK_MAPLE_BUTTON_CLICK_ON)\r\n\t .register(new Identifier(\"mymod\",\"maple\"));\r\n```\r\nMuch clearer what each value does (particularly the `openableByHand` boolean value!), no need to worry about getting the order wrong for the many sound events, and the `copyOf` method allows to skip things that are already set just how you want them.\r\n\r\nAn added bonus is, that if Mojang decides to add new values to block set types or wood types (as they did in 1.20 by adding the openableByHand boolean!), where previously the already unwieldy `register` methods would need those new values added, changing the method signatures and making them even longer, now with the builder format we can simply add a new method.\r\n\r\nAll the values default to those used by the shortform constructors of `BlockSetType` and `WoodType`.\r\n\r\nThe old registry classes are deprecated in favour of these builders.\r\n\r\nThis can be backported to 1.19.4 (would need references to the `openableByHand` boolean removed).",
    "head_branch": "1.20.1-builders",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add builders for BlockSetType and WoodType to replace registries (#3115)\n\n* Add builders for BlockSetType and WoodType to replace registries\r\n\r\nAdds `BlockSetTypeBuilder` and `WoodTypeBuilder` to replace `BlockSetTypeRegistry` and `WoodTypeRegistry` respectively.\r\n\r\n* whoops\r\n\r\n* double whoops\r\n\r\n* Register and Build now separate methods\r\n\r\nSeparated the register and build methods, with the former calling the latter. Their relationship is explained in the javadoc.\r\n\r\n* Update BlockSetTypeBuilder.java"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306340ac82a74541b20be",
    "number": 3099,
    "body": "### API Changes\r\n- Interface inject `FabricBakedModel`\r\nThis change was done to eliminate the constant need to cast `BakedModel` to `FabricBakedModel`, especially when rendering sub-models. The implementations for the methods of `FabricBakedModel` were moved from `BakedModelMixin` to `FabricBakedModel` as default implementations. Some javadoc was updated to reflect this change.\r\n- Deprecate the mesh consumer (`Consumer<Mesh>` retrieved from `RenderContext`)\r\nThis change was done to ensure consistency across all current and future contexts in which a mesh may need to be output to a quad emitter. The preferred direct replacement is the new method `Mesh#outputTo(QuadEmitter)`. Some javadoc was updated to reflect this change.\r\n- Deprecate the baked model consumer (`BakedModelConsumer` retrieved from `RenderContext`)\r\nThis change was done to ensure consistent rendering of sub-models and to eliminate assumptions about what features a model uses. The preferred direct replacement is to use the appropriate `emit` method in `FabricBakedModel`. Some javadoc was updated to reflect this change.\r\nEven though the consumer is now deprecated, the default `FabricBakedModel` method implementations still use it and renderers must still implement the getter. This is because Indigo and Indium sometimes apply smooth lighting differently based on if the quad came from a vanilla model or not. The eventual solution to allow all baked model consumer usage to be removed is to allow renderers to override the default `BakedModelMixin` and handle default vanilla models directly.\r\n- Fix `QuadView#toVanilla`'s javadoc reporting the wrong minimum array size\r\n\r\n### Implementation Changes\r\n- Restructure `RenderContext` implementations\r\nThis change was done to reduce code duplication, improve standardization, and improve readability. Most code of `AbstractQuadRenderer` was moved into a new class called `AbstractBlockRenderContext` (which `BlockRenderContext` and `TerrainRenderContext` now extend), with the main buffering method being moved to `AbstractRenderContext`.\r\n- Remove red blue color swap\r\nIt is unclear why this code was necessary in the first place. Indigo stores vertex color in ARGB format, then converts it to ABGR format only if the native byte order is little endian, and then reads the vertex color in ABGR format when buffering vertex data. This would mean that on big endian systems, all red and blue color components would be swapped.\r\nNow, color is read in ARGB format when buffering and no color format conversion or swapping is done.\r\n- Encode face normal\r\nThis change was done to improve the performance of meshes. Meshes already encoded all other geometry data, but the face normal would still have to be recomputed every time a mesh quad was rendered. Now, it is stored in the quad data header, so it is simply decoded, which is significantly faster.\r\n- Fix some bugs\r\n  - Outputting a mesh via the mesh consumer would result in the emitter retaining the data of the last quad in the mesh.\r\n  - In non-terrain block rendering, the baked model consumer would incorrectly use the random seed provided by the block state instead of the passed random seed argument.\r\n  - When converting to or from vanilla quad data, the color would not be converted. Indigo uses ARGB format to store color, while vanilla quads use ABGR or RGBA. See the comment near the bottom of `ColorHelper` for more information.\r\n  - Fix TerrainRenderContext using incorrect overlay value of `0` instead of `OverlayTexture.DEFAULT_UV`.\r\n- Improve performance of some code\r\n  - `QuadViewImpl#computeGeometry()` was being called before transforms and the cull test were applied. These operations can change the geometry and invalidate computed geometry data or cancel the quad outright. Calling the method explicitly in those contexts was also not necessary in the first place.\r\n  - A single `Vector4f` instance is now reused to transform the vertex position instead of allocating a new `Vector4f` for each vertex.\r\n  - The random seed lazy computation now uses a separate boolean instead of checking if the seed is `-1`.",
    "head_branch": "pr/1.19.4/fbm-injection",
    "is_a_fork": true,
    "comments": [
      "Reviewers should consider the following additional refactors related to `RenderContext` implementation code.\r\n- Should `ChunkRenderInfo` be merged into `TerrainRenderContext`? This class is not used or accessed outside of `TerrainRenderContext`, and the context always uses the same `final` instance of the `ChunkRenderInfo`. Merging them could improve readability since there are less classes overall and it would very slightly improve performance since some operations would no longer be deferred to a separate object.\r\n- Should the fields that store the parameters that `ItemRenderContext` receives be separated into a separate `ItemRenderInfo` class, much like `BlockRenderInfo`? This would decrease the size of the `ItemRenderContext` class. If these two render info classes were to share a super-class, it would also allow the `colorizeQuad` method from `AbstractBlockRenderContext` and `ItemRenderContext` to be de-duplicated and moved to `AbstractRenderContext`.\r\n\r\nAdditionally, I may add the face normal encoding change to this pull request within a few days. This change is simple and unrelated to any existing changes, however, so reviews are still useful at this point.",
      ">     * Should `ChunkRenderInfo` be merged into `TerrainRenderContext`? This class is not used or accessed outside of `TerrainRenderContext`, and the context always uses the same `final` instance of the `ChunkRenderInfo`. Merging them could improve readability since there are less classes overall and it would very slightly improve performance since some operations would no longer be deferred to a separate object.\r\n> \r\n>     * Should the fields that store the parameters that `ItemRenderContext` receives be separated into a separate `ItemRenderInfo` class, much like `BlockRenderInfo`? This would decrease the size of the `ItemRenderContext` class. If these two render info classes were to share a super-class, it would also allow the `colorizeQuad` method from `AbstractBlockRenderContext` and `ItemRenderContext` to be de-duplicated and moved to `AbstractRenderContext`.\r\n\r\nFor 1), I think the current `ChunkRenderInfo` separation is nice. For 2) I don't particularly care either way about putting the state in `ItemRenderInfo` vs keeping it in the context, so that's up to you. I will say that abstracting `colorizeQuad` would barely reduce the code duplication (it's a simple method after all), but would make understanding the implementation harder, so I wouldn't do that.",
      "> > ```\r\n> > * Should `ChunkRenderInfo` be merged into `TerrainRenderContext`? This class is not used or accessed outside of `TerrainRenderContext`, and the context always uses the same `final` instance of the `ChunkRenderInfo`. Merging them could improve readability since there are less classes overall and it would very slightly improve performance since some operations would no longer be deferred to a separate object.\r\n> > \r\n> > * Should the fields that store the parameters that `ItemRenderContext` receives be separated into a separate `ItemRenderInfo` class, much like `BlockRenderInfo`? This would decrease the size of the `ItemRenderContext` class. If these two render info classes were to share a super-class, it would also allow the `colorizeQuad` method from `AbstractBlockRenderContext` and `ItemRenderContext` to be de-duplicated and moved to `AbstractRenderContext`.\r\n> > ```\r\n> \r\n> For 1), I think the current `ChunkRenderInfo` separation is nice. For 2) I don't particularly care either way about putting the state in `ItemRenderInfo` vs keeping it in the context, so that's up to you. I will say that abstracting `colorizeQuad` would barely reduce the code duplication (it's a simple method after all), but would make understanding the implementation harder, so I wouldn't do that.\r\n\r\nAt the time that I asked the question, `colorizeQuad` was more complicated because of the color swap, but that has been removed now. I do not think that it is worth abstracting it anymore either.",
      "All commits look good so far."
    ],
    "commit_messages": [
      "Interface inject FabricBakedModel (#3099)\n\n### API Changes\r\n- Interface inject `FabricBakedModel`\r\nThis change was done to eliminate the constant need to cast `BakedModel` to `FabricBakedModel`, especially when rendering sub-models. The implementations for the methods of `FabricBakedModel` were moved from `BakedModelMixin` to `FabricBakedModel` as default implementations. Some javadoc was updated to reflect this change.\r\n- Deprecate the mesh consumer (`Consumer<Mesh>` retrieved from `RenderContext`)\r\nThis change was done to ensure consistency across all current and future contexts in which a mesh may need to be output to a quad emitter. The preferred direct replacement is the new method `Mesh#outputTo(QuadEmitter)`. Some javadoc was updated to reflect this change.\r\n- Deprecate the baked model consumer (`BakedModelConsumer` retrieved from `RenderContext`)\r\nThis change was done to ensure consistent rendering of sub-models and to eliminate assumptions about what features a model uses. The preferred direct replacement is to use the appropriate `emit` method in `FabricBakedModel`. Some javadoc was updated to reflect this change.\r\nEven though the consumer is now deprecated, the default `FabricBakedModel` method implementations still use it and renderers must still implement the getter. This is because Indigo and Indium sometimes apply smooth lighting differently based on if the quad came from a vanilla model or not. The eventual solution to allow all baked model consumer usage to be removed is to allow renderers to override the default `BakedModelMixin` and handle default vanilla models directly.\r\n- Fix `QuadView#toVanilla`'s javadoc reporting the wrong minimum array size\r\n\r\n### Implementation Changes\r\n- Restructure `RenderContext` implementations\r\nThis change was done to reduce code duplication, improve standardization, and improve readability. Most code of `AbstractQuadRenderer` was moved into a new class called `AbstractBlockRenderContext` (which `BlockRenderContext` and `TerrainRenderContext` now extend), with the main buffering method being moved to `AbstractRenderContext`.\r\n- Remove red blue color swap\r\nIt is unclear why this code was necessary in the first place. Indigo stores vertex color in ARGB format, then converts it to ABGR format only if the native byte order is little endian, and then reads the vertex color in ABGR format when buffering vertex data. This would mean that on big endian systems, all red and blue color components would be swapped.\r\nNow, color is read in ARGB format when buffering and no color format conversion or swapping is done.\r\n- Encode face normal\r\nThis change was done to improve the performance of meshes. Meshes already encoded all other geometry data, but the face normal would still have to be recomputed every time a mesh quad was rendered. Now, it is stored in the quad data header, so it is simply decoded, which is significantly faster.\r\n- Fix some bugs\r\n  - Outputting a mesh via the mesh consumer would result in the emitter retaining the data of the last quad in the mesh.\r\n  - In non-terrain block rendering, the baked model consumer would incorrectly use the random seed provided by the block state instead of the passed random seed argument.\r\n  - When converting to or from vanilla quad data, the color would not be converted. Indigo uses ARGB format to store color, while vanilla quads use ABGR or RGBA. See the comment near the bottom of `ColorHelper` for more information.\r\n  - Fix TerrainRenderContext using incorrect overlay value of `0` instead of `OverlayTexture.DEFAULT_UV`.\r\n- Improve performance of some code\r\n  - `QuadViewImpl#computeGeometry()` was being called before transforms and the cull test were applied. These operations can change the geometry and invalidate computed geometry data or cancel the quad outright. Calling the method explicitly in those contexts was also not necessary in the first place.\r\n  - A single `Vector4f` instance is now reused to transform the vertex position instead of allocating a new `Vector4f` for each vertex.\r\n  - The random seed lazy computation now uses a separate boolean instead of checking if the seed is `-1`."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662306350ac82a74541b20bf",
    "number": 3093,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306360ac82a74541b20c0",
    "number": 3087,
    "body": "Adds an event to register custom keys with priorities for data generation.\r\n\r\nThe name `JsonKeySortOrderCallback` comes from the yarn field name `JSON_KEY_SORT_ORDER` in the `net.minecraft.data.DataProvider` interface.\r\n\r\nThe interface `JsonKeySortOrderCallback.Adder` exists solely to explain what the parameters do. An `ObjIntConsumer<String>` would suffice, but it seems to be more common to use a custom functional interface for events in order to explain what it does, so I went with that instead. However, I'm not really sure about the name `Adder`, so if anyone has a better name, please suggest it. (Though this might be me bikeshedding again)\r\n\r\nThe test mod adds the `trigger` key with a priority value of `0`, since that is a key used in advancements that are also generated in the same test mod. This should put `trigger` above `conditions`, despite `conditions` coming before `trigger` lexicographically.\r\n",
    "head_branch": "key-priority-datagen",
    "is_a_fork": true,
    "comments": [
      "Wouldn't that require it to load `DataProvider` in order to store it to a field, which only happens when running the first data provider, which means it should have already started? (Forcing a class to load for the sake of capturing a field doesn't really jive with me either.) I see what you mean though, since the second entrypoint might only start when another entrypoint has already started a data provider, which will no longer modify the map as it's already been initialised.\r\n\r\nMaybe storing another map in a static field works. Then inject everything at once as soon as the first data provider is called. Something like this:\r\n- `DataGeneratorEntrypointA` stores its keys and priorities in a static field.\r\n- `DataGeneratorEntrypointB` stores its keys and priorities in a static field.\r\n- The data providers from `DataGeneratorEntrypointA` start, thus loading `DataProvider` and injecting all keys and priorities.\r\n- The data providers from `DataGeneratorEntrypointB` start.\r\n\r\nHowever, won't you face the same problem this way? When `DataGeneratorEntrypointA` stores the keys and priorities and starts, `DataProvider` may have been initialised already. This could be solved by looping over the entrypoints twice; Once for initialising the keys and priorities, and a second time actually running all the providers. However, I'm not sure if that's the preferred way of doing this...",
      "It could be done in a way that doesn't require DataProvider to be loaded early. For example if the stored map is null, we know that it hasn't been loaded yet and can add the entries when it does load.",
      "In the case where it isn't `null`, which means at least one generator is running already, wouldn't that lead to potential inconsistent results, such as one generator having a different sort priority for a key than another?\r\n",
      "Ah, I was thinking that fabric could add to it right before starting the datagen but after the providers have been collected. Just some ideas ^^",
      "Then I think the structure should be changed to accommodate for this accordingly, because currently each generator is started right after creating it, as seen in [this bit here](https://github.com/ErrorCraft/fabric/blob/key-priority-datagen/fabric-data-generation-api-v1/src/main/java/net/fabricmc/fabric/impl/datagen/FabricDataGenHelper.java#L130-L132). Which, now that I think about it, won't this overwrite files that were just generated and written to if you have multiple entry points, since it uses the same output directory and removes stale entries?\r\n\r\nWhat if all generators are initialised, collected and then ran together, rather than initialising and running them immediately?\r\n",
      "Oh, that's my bad, I thought they were all collected and run at once. I don't think we should change this.\r\n\r\nWhat if we \"reset\" the map between runs? I think force-loading the class is not a problem btw.\r\n\r\nI can imagine something like (pseudocode)\r\n```java\r\nDataGeneratorEntrypoint entrypoint = ...;\r\n// Force load class to capture map in a static variable (say MAP in this pseudocode)\r\nnew DataProvider() { ... }\r\n// Collect priorities from the entrypoint\r\nSet<Key> addedKeys = new HashSet<>();\r\nfor key, prio in entrypoint.priorities() {\r\n    MAP.put(key, prio);\r\n    addedKeys.add(key);\r\n}\r\n// Run generator\r\ndataGenerator.run();\r\n// Clear added keys\r\nMAP.keySet().removeAll(addedKeys);\r\n```",
      "Up?",
      "Finally got back to this...\r\nI like that idea, but what about the case where someone overrides an existing/default key, like `type`? This would be a poor choice, but someone might still do it. It would remove the entry after the generator finished, leading to different results for the next generator. We could copy the original map contents to another variable and replace them again after we removed all the keys, but that would create a lot of copies.\r\nAlso, would it be possible to just access `DataProvider.JSON_KEY_SORT_ORDER` directly and cast it back to `Object2IntOpenHashMap<String>`, rather than creating an instance to load the class in order to store the field using a mixin? It wouldn't be future proof if they ever decide to change the type, but at that point we would have to update it regardless if we used a mixin or not, so I doubt that's really a problem.\r\n",
      "> We could copy the original map contents to another variable and replace them again after we removed all the keys, but that would create a lot of copies.\r\n\r\nThat's only one copy per data generation entrypoint, which is acceptable.\r\n\r\n> Also, would it be possible to just access `DataProvider.JSON_KEY_SORT_ORDER` directly and cast it back to `Object2IntOpenHashMap<String>`\r\n\r\nGreat idea, I didn't think of that. Much simpler indeed... :)",
      "> That's only one copy per data generation entrypoint, which is acceptable.\r\n\r\nI realised I could place the copy outside of the loop, so there is only one copy after all.\r\n\r\nNote that the sort keys currently do not get applied in the client test mod, because `DataGeneratorClientTestEntrypoint::onInitializeDataGenerator` is called immediately in `DataGeneratorTestEntrypoint`. I didn't do anything with this as it's meant to be replaced at some point anyways, as per the TODO in `DataGeneratorTestEntrypoint`.\r\n\r\nAlso, the nice thing about the way it works now is that each entry point has its own set of keys and values, so keys clashing should realistically never happen if people were to use multiple entry points. That's also why I could force `type` to be at the end in the client test mod, since only atlas sources are present and there aren't any other common keys.\r\n",
      "Should we use a topological sort instead of int-based? int-based may be problematic if we try to insert a new key between two keys.",
      "I think int is fine here. This is per-entrypoint, so mods can just change their other keys if they want to.",
      "There's also the lexicographical sort that gets applied afterwards, so keys with the same priority already get sorted again.",
      "I also updated the title to better reflect the changes.",
      "Just saw that the target branch was still 1.20, rather than 1.20.1."
    ],
    "commit_messages": [
      "Add a method to data generator entrypoints to register custom keys with priorities (#3087)\n\n* Add JsonKeySortOrderCallback\r\n\r\n* Use an entry point rather than an event for sort keys and priorities\r\n\r\n* Resolve static imports\r\n\r\n* Add a bit of javadoc\r\n\r\n* Check if a key is null and modify the javadoc\r\n\r\n* Add a field reference in the javadoc\r\n\r\n* Rename JsonKeySortOrderAdder to JsonKeySortOrderCallback"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662306360ac82a74541b20c1",
    "number": 3085,
    "body": "The old injection point in the `Screen` lambda predates Chocohead's mixin changes that allowed injectors in interface methods. Moving the injection point to where it should have been (i.e. inside `TooltipComponent.of`) will fix issues such as https://github.com/emilyploszaj/emi/issues/175.",
    "head_branch": "fix-tooltip-callback-inject",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Move injection point of `TooltipComponentCallback` (#3085)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306370ac82a74541b20c2",
    "number": 3083,
    "body": "A much needed update to resource loader.\r\n\r\n## Resource Reload Events\r\n- `ClientResourceReloadEvents` and `ServerResourceReloadEvents` are added to hold new events.\r\n- `START_RELOAD` fires right before resource reloaders start running, and can for example be used to invalidate a cache before the resource reloader recomputes it.\r\n- `END_RELOAD` fires right when the reload completes (successfully or with a failure).\r\n- The exact place where the start event should be invoked is up for debate. Currently it is invoked after the resource reloaders are collected on the server side. Note that it's technically possible for `END_RELOAD` to fire without `START_RELOAD` having fired, if case something fails before `START_RELOAD`.\r\n- `REGISTER_RELOADERS`: see below.\r\n\r\n## Resource Reloaders\r\n- Resource reloader registration now happens in the `REGISTER_RELOADERS` events.\r\n- They still have an ID, however the ID is passed alongside the resource reloader at registration time. (Previously `getFabricId` had to be overridden).\r\n- Resource reloaders are instantiated once per reload on the server and stored inside `DataPackContents`; on the client they are instantiated once and then stored inside `MinecraftClient`.\r\n- Resource reloaders can be accessed from the data pack contents, the client and the server thanks to interface injection of `ResourceReloaderHolder`.\r\n- The event allows `DataPackContents` and `MinecraftClient` to be captured for cross-reloader talk during the apply phase.\r\n- Arbitrary ordering of reloaders was implemented (will use the same backend as event phases). Previously it was not possible to order modded reloaders before vanilla's. This was added in a fully backwards-compatible way.\r\n- Note 1: the client-side `REGISTER_RELOADERS` event only fires exactly once at the start of the game, but I figured it would still be nicer for consistency to have an event.\r\n- Note 2: the v0 API is bridged via `LegacyReloaderHolder` because the new client event is client-only, whereas the old API was side agnostic (since it did not provide any context whatsoever).\r\n\r\nHere is an example of using this new API for a client reloader. I am not fully convinced by this usage pattern yet:\r\n```java\r\nClientResourceReloadEvents.REGISTER_RELOADERS.register(context -> {\r\n\tcontext.addReloader(SpecificModelReloadListener.ID, new SpecificModelReloadListener());\r\n\tcontext.addReloaderOrdering(ResourceReloaderKeys.BAKED_MODELS, SpecificModelReloadListener.ID);\r\n\tcontext.addReloaderOrdering(SpecificModelReloadListener.ID, ResourceReloaderKeys.ENTITY_RENDER_DISPATCHER);\r\n});\r\n\r\n// Later on:\r\nSpecificModelReloadListener myListener = (SpecificModelReloadListener) MinecraftClient.getInstance().getResourceReloader(SpecificModelReloadListener.ID);\r\n```\r\n\r\nFor server reloaders however, this matches what vanilla does, and is much nicer than what the v0 API provides today.\r\n\r\n## Resource Packs\r\n- Builtin packs: functionality is kept unchanged, however providing a display name is now required.\r\n- Currently they are registered by calling `ResourcePackHelper`, perhaps a better name should be found?\r\n- Add new events to directly register `ResourcePack` instances. See `ResourcePackRegistrationEvents#afterMods(ResourceType)` and `afterAll(ResourceType)`.\r\n - These events are side-agnostic. Should we provide more (side-dependent) context to them? I am not convinced that this would be necessary.\r\n - These events provide a `ResourceManager` that allows inspecting the previous packs. This can be useful for virtual resource packs, among other things, however note that this API does **not** provide the virtual resource pack implementation itself.\r\n- Add `ResourcePackHelper#createModResourcePack` to directly instantiate mod nio resource packs. This can be useful to access resources in a mod JAR outside of the normal resource loading lifecycle.\r\n\r\n## Further possibilities\r\n- We could add an API to register custom `ResourcePackProvider`s or `ResourcePackProfile`s. This can be left for a future PR imo. This would either be an event (maybe in `ResourcePackRegistrationEvents`), or a static registration in `ResourcePackHelper`.\r\n\r\n## TODO items\r\n- [ ] Does v1 need to implement `ModResourcePack` on its builtin packs too?\r\n- [ ] Possibly find a better name for `ResourcePackHelper`.\r\n- [ ] Possibly eliminate the action type from `ModNioResourcePack` entirely. Or can also be left for a future PR.\r\n- [ ] Add tests for `ResourcePackRegistrationEvents`\r\n- [ ] Consider adding `isFirst` to the context of `ResourcePackRegistrationEvents`. I think it can be left for later, it's a bit annoying.\r\n- [ ] Should we add `ResourceReloaderKeys` for all the vanilla reloaders? Many are missing on the client side.\r\n- [ ] The old resource reloader API broke ties by registration order, whereas the new APIs break ties by identifier. This is a potential breaking changes for mods. However they were not correctly specifying dependencies as required by the API, so this might be acceptable. A workaround might be to break ties by registration order when using the legacy bridge, and by identifier when using the new API.\r\n- [ ] Add javadoc note saying that END_RELOAD can technically fire even if START_RELOAD did not fire.",
    "head_branch": "resource-loader-v1",
    "is_a_fork": true,
    "comments": [
      "@Technici4n any progress? ",
      "No, I don't think I will be finishing this."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306380ac82a74541b20c3",
    "number": 3078,
    "body": "https://minecraft.fandom.com/wiki/Meadow\r\n> filled with patches of flowers",
    "head_branch": "floral-tag-missing-meadow",
    "is_a_fork": true,
    "comments": [
      "So, do we add lush caves to this tag or not?",
      "> So, do we add lush caves to this tag or not?\r\n\r\nI am not sure, but of all the blocks in this biome, only `flowering_azalea_leaves` is a flower, since it is in the `flowers` tag",
      "More likely no than yes",
      "Alright then this is fine"
    ],
    "commit_messages": [
      "fix: floral tag missing meadow biome (#3078)\n\n* floral tag missing meadow biome\r\n\r\n* run datagen"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306390ac82a74541b20c4",
    "number": 3077,
    "body": "Fixes #2963\r\n\r\nAlternative fix from https://github.com/FabricMC/fabric/pull/2964",
    "head_branch": "fix/2963",
    "is_a_fork": true,
    "comments": [
      "Could use a comment, maybe something like `// Set the screen handler, so the packet writing method can access it through the player. Vanilla sets it too but a bit too late.`. Could be nice in the future to know why this exists.",
      "We could even set it in `fabric_storeOpenedScreenHandler` directly in the mixin, and get rid of the `ThreadLocal` usage and of the cleanup mixin. Otherwise this PR is also fine. Your choice. :)",
      "> We could even set it in `fabric_storeOpenedScreenHandler` directly in the mixin, and get rid of the `ThreadLocal` usage and of the cleanup mixin. Otherwise this PR is also fine. Your choice. :)\r\n\r\nDone, good idea 👍 "
    ],
    "commit_messages": [
      "Set player.currentScreenHandler before invoking ExtendedScreenHandlerFactory (#3077)\n\n* Set player.currentScreenHandler before invoking ExtendedScreenHandlerFactory\r\n\r\n* Add comment\r\n\r\n* Cleanup code"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623063a0ac82a74541b20c5",
    "number": 3076,
    "body": "This PR removes default implementations for the new FRAPI methods, to ensure that all renderers will support them going forward.\r\n\r\nI suggest a major version bump for FRAPI for this change (and for any subsequent change that breaks renderer implementations).\r\n\r\nNote that Indigo is unchanged since it was already supporting the new methods.",
    "head_branch": "renderer-implementation-breaks-1.20",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Removes default implementations for the new FRAPI methods (#3076)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623063b0ac82a74541b20c6",
    "number": 3074,
    "body": null,
    "head_branch": "pommetadata",
    "is_a_fork": true,
    "comments": [
      "@modmuss50 I now made grgit optional. I can also entirely remove it, if you want that.",
      "> @modmuss50 I now made grgit optional. I can also entirely remove it, if you want that.\r\n\r\nI think it would be best, helps enusre that its consitant between runs."
    ],
    "commit_messages": [
      "Add metadata information to POMs (#3074)\n\n* Add metadata information to POMs\r\n\r\n* Add name, description, url and issue management\r\n\r\nAlso update the license name and an url to the fabric website\r\nPulls name and description from the fabric.mod.json\r\n\r\n* Fix imports and make git optional\r\n\r\n* Remove commit from maven metadata"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623063c0ac82a74541b20c7",
    "number": 3073,
    "body": "Sets up unit testing, and adds spotless for the gradle files.\r\n\r\n~~Not to be merged untill after loader 0.14.20 is stable.~~",
    "head_branch": "unit_tests_and_gradle_update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Setup unit tests & format gradle files. (#3073)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623063c0ac82a74541b20c8",
    "number": 3071,
    "body": "1.19.4 fix for #3069, as suggested by @ChampionAsh5357.",
    "head_branch": "fix-3069-simple",
    "is_a_fork": true,
    "comments": [
      "We will go for the cleaner fix in 1.19.4 too: #3070."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623063d0ac82a74541b20c9",
    "number": 3070,
    "body": "Fixes #3069.\r\n\r\nAlso removes unnecessary internal methods from `FabricLootTableProvider` by moving the `run` logic to an impl method.\r\n\r\nThis is not a breaking change assuming modders used the API as intended.",
    "head_branch": "fix-3069-1.20",
    "is_a_fork": true,
    "comments": [
      "So, I don't understand how this fixes the issue, since it still persists. You still need to implement `#accept` to delegate to `#generate` in Mojang's mapping set. Once again, I will suggest just simply changing the `Consumer` to `LootTableGenerator` so that the generator is not dependent on the mapping set to determine whether the method is implemented or not.",
      "It should fix the issue by removing the requirement for an implementation of `Consumer<BiConsumer<...>>`. So `SimpleFabricLootTableProvider#accept` will remain `#accept` when mapped to intermediary as it does not override a Minecraft method, whereas `FabricBlockLootTableProvider#accept` will correctly get remapped to `method_<...>` then back to `generate` in mojmap environments. Since the `Consumer` superinterface is gone, there will not be a compile error.\r\n\r\nI will investigate the alternative approach, however I should say that removing `getLootContextType`, `getFabricDataOutput`, and `run` from `FabricLootTableProvider` makes the code flow much easier to understand IMO, and should be done either way.",
      "Maybe im wrong, I did only have a quick look at it. I will need to get setup to actually test this.",
      "> It should fix the issue by removing the requirement for an implementation of Consumer<BiConsumer<...>>. So SimpleFabricLootTableProvider#accept will remain #accept when mapped to intermediary as it does not override a Minecraft method, whereas FabricBlockLootTableProvider#accept will correctly get remapped to method_<...> then back to generate in mojmap environments. Since the Consumer superinterface is gone, there will not be a compile error.\r\n\r\nI think this is my bad as well. I set up Fabric for the first time on my machine to test it, and it seems I forgot to switch to the PR branch. Apologies, I believe the solution should work fine.",
      "I confirmed that this works by cherry-picking to 1.19.4, publishing to maven local via `gradlew clean build publishToMavenLocal` and then depending on it in AE2 (needed a 1.19.4 mojmap project). If you want to do that too, make sure to uncomment `repositories.mavenLocal()` in the Fabric API `build.gradle` and add maven local to your project's repositories. If you want to test in 1.19.4 you can use that branch: https://github.com/Technici4n/fabric/tree/fix-3069.\r\n\r\nCould probably use extra testing by someone else, but now I'm fully certain that this fix works. Whether it should be backported to 1.19.4 is up for debate... :smile:",
      "Using `LootTableGenerator` would also work, indeed. It only has a single `accept` method.\r\n\r\nIs it useful to have an `accept(BiConsumer<Identifier, LootTable.Builder> exporter)` method in `FabricLootTableProvider`, or not? I don't think one would ever use it. If not we can keep the current PR, if yes I will add it back.\r\n\r\nFor 1.19.4 I think replacing the `Consumer` superinterface by a `LootTableGenerator` is a good fix, however I'd like to clean up the code for 1.20.\r\n\r\nEDIT: opened 1.19.4 version: #3071.",
      "> Is it useful to have an accept(BiConsumer<Identifier, LootTable.Builder> exporter) method in FabricLootTableProvider, or not? I don't think one would ever use it. If not we can keep the current PR, if yes I will add it back.\r\n\r\nSince Fabric doesn't use Mojang's method of generator entries in a single loot table provider, I would say it really just depends on how much logic you want to delegate to the already existing implementations. The Fabric implementation only provides separation of loot table providers, so it's just purely a matter of compatibility if somebody wanted to use Mojang's method of registering a loot table provider instead.",
      "> > Is it useful to have an accept(BiConsumer<Identifier, LootTable.Builder> exporter) method in FabricLootTableProvider, or not? I don't think one would ever use it. If not we can keep the current PR, if yes I will add it back.\r\n> \r\n> Since Fabric doesn't use Mojang's method of generator entries in a single loot table provider, I would say it really just depends on how much logic you want to delegate to the already existing implementations. The Fabric implementation only provides separation of loot table providers, so it's just purely a matter of compatibility if somebody wanted to use Mojang's method of registering a loot table provider instead.\r\n\r\nThen I will add `LootTableGenerator` too, it doesn't hurt."
    ],
    "commit_messages": [
      "Fix FabricBlockLootTableProvider breaking depending on the mapping set (#3070)\n\n* Initial fix for FabricBlockLootTableProvider depending on mappings\r\n\r\n* Remove internal implementation methods from  interface"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623063e0ac82a74541b20ca",
    "number": 3066,
    "body": "- Add `MaterialView` to retrieve material properties from `RenderMaterial` and `MaterialFinder`\r\n- Add `MaterialFinder#copyFrom(MaterialView)` to copy properties from another `MaterialView`\r\n- Finish todo in `QuadView#toBakedQuad`\r\n- Move material impl classes to `material` package\r\n- Improve material properties' javadoc by explaining which contexts support certain properties\r\n- Add `glint` render material property\r\n- Add `MutableQuadView#copyFrom` and deprecate `QuadView#copyTo`",
    "head_branch": "pr/1.19.4/material-inspection",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Material inspection (#3066)\n\n* Material inspection\r\n\r\n- Add MaterialView to get material properties from RenderMaterial and MaterialFinder\r\n- Add MaterialFinder#copyFrom to copy properties from another MaterialView\r\n- Finish todo in QuadView#toBakedQuad\r\n- Move material impl classes to material package\r\n\r\n* Add glint material property\r\n\r\n- Allow force enabling or force disabling glint on items\r\n- Force enable glint on horizontal sides of pillar item model in test mod\r\n\r\n* Fix imports\r\n\r\n* Add documentation\r\n\r\n* Do not create invalid materials\r\n\r\n- Ensure material bits are valid before creating material\r\n- Assert that default MaterialFinder bits are valid\r\n- Remove ordinal checks in MaterialViewImpl since bits are now guaranteed to be valid\r\n- Set default glint mode to default instead of false\r\n- Remove getter overrides in RenderMaterialImpl\r\n\r\n* Add MutableQuadView#copyFrom\r\n\r\n- Deprecate QuadView#copyTo\r\n\r\n* Add missing nullability annotations"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623063f0ac82a74541b20cb",
    "number": 3065,
    "body": "This will make it a bit easier to develop custom biomes and update the FAPI for new versions of the game. I do not see the point in this duplication anyway",
    "head_branch": "improve-floral-tag-gen",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add `#c:flower_forests` to `#c:floral` convention tag (#3065)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306400ac82a74541b20cc",
    "number": 3064,
    "body": "Also ~~checkstyle and~~ fix my wrong in #3060 ",
    "head_branch": "taw-validation",
    "is_a_fork": true,
    "comments": [
      "example\r\n![image](https://github.com/FabricMC/fabric/assets/47220489/88128d44-b7e9-40cc-aeaa-ebf200da93f7)\r\n"
    ],
    "commit_messages": [
      "Fix last few transitive access wideners missing the `transitive-` prefix (#3064)\n\nAlso add validation to make sure that the generated `.accesswidener` has only transitive access modifiers."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306400ac82a74541b20cd",
    "number": 3061,
    "body": null,
    "head_branch": "pr/fix-screen-api-render",
    "is_a_fork": true,
    "comments": [
      "Obviously tested. Non-working before. Working now.\nThe issue was the first matrix stack (that was previously provided) had a translation of z -2000, which seems to prevent rendering (near plane?). A second was created without this that is given to screens and toasts (and I guess `InGameHud`)"
    ],
    "commit_messages": [
      "Fix screen api passing wrong MatrixStack to render events (#3061)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306410ac82a74541b20ce",
    "number": 3060,
    "body": "Many worldgen mods use this",
    "head_branch": "taw-worldgen-tweaks",
    "is_a_fork": true,
    "comments": [
      "oops, my bad"
    ],
    "commit_messages": [
      "Add some new TAWs for tree worldgen (#3060)\n\n* TAWs for worldgen\r\n\r\n* Impl suggestions\r\n\r\n* Forgot run generateAccessWidener ;)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306420ac82a74541b20cf",
    "number": 3058,
    "body": "Fixes #3057.",
    "head_branch": "fix-3057",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #3057: Loot API breaks `random_sequence` (#3058)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306430ac82a74541b20d0",
    "number": 3056,
    "body": "5 mins into porting my mod to 1.20, I found this problem. Its amazing what you find when you actually use something 😆 \r\n\r\nThis should be a none breaking change, also added a basic test to ensure it doesnt get like this again.",
    "head_branch": "block_settings_overrides",
    "is_a_fork": true,
    "comments": [
      "Could these tests be expanded to `FabricItemSettings` as well? There might be other classes that could benefit from these changes but item settings seem like the most prone to changes.",
      "> Could these tests be expanded to FabricItemSettings as well?\r\n\r\nYes, good idea. Its kinda a pain as its in a diffrent module. I may just copy/paste the tests over to the other module 🤔 ",
      "Ideally the whole thing would be replaced by an injected interface"
    ],
    "commit_messages": [
      "Add and test for missing method overrides in FabricBlockSettings (#3056)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306440ac82a74541b20d1",
    "number": 3051,
    "body": "Various convention tag improvements.\r\n\r\n- Cleanup code:\r\n  - Fix `.gitignore` not properly including the generated file.\r\n  - Use `copy` instead of rebuilding tags entirely when they exist both for blocks and for items.\r\n  - Reorder tags a bit, especially block tags so they match item tags.\r\n- Add item version of the block tags where it made sense.\r\n- Add tags for budding blocks: `c:budding_blocks`, `c:buds`, `c:clusters`.\r\n- Add resource category tags: `c:dusts`, `c:gems`, etc...\r\n- Add `c:wooden_barrels`.\r\n- Fix https://github.com/FabricMC/fabric/issues/2831: Move entity buckets to `c:entity_water_buckets`.\r\n- Add `c:villager_job_sites` and the various sandstone tags from #2268.\r\n\r\n**Since these tags are mostly based on community usage, I would appreciate that casual readers have a look and verify that everything makes sense. If you disagree with anything, don't hesitate to say so.**",
    "head_branch": "convention-tags-update",
    "is_a_fork": true,
    "comments": [
      "Idk if we already have this, but tags for terracotta, concrete, concrete dust, glazed terracotta and mostly all the colored stuff, would be super nice",
      "`#minecraft:terracotta` already exists for example. I am not sure about the others."
    ],
    "commit_messages": [
      "Convention Tags Improvements (#3051)\n\n* First pass: refactor a bit, add missing item tags that have block tags, add resource category tags and wooden_barrels\r\n\r\n* Fix #2831: Move entity buckets to c:entity_water_buckets\r\n\r\n* Add villager_job_sites and sandstone tags\r\n\r\n* Add alternative cauldrons to villager job sites.\r\n\r\nSigned-off-by: modmuss50 <modmuss50@gmail.com>\r\n\r\n---------\r\n\r\nSigned-off-by: modmuss50 <modmuss50@gmail.com>\r\nCo-authored-by: modmuss50 <modmuss50@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662306440ac82a74541b20d2",
    "number": 3050,
    "body": "This functionality is useless clutter, using a proper profiler is much better.\r\n\r\nFixes #2849.",
    "head_branch": "fix-2849",
    "is_a_fork": true,
    "comments": [
      "> This functionality is useless clutter, using a proper profiler is much better.\r\n\r\nOne of the nice things about the vanilla profile, that Spark/async-profiler don't make as easy, is that it can provides per-tick profiling data. This is very useful when trying to track down stutter/lag spikes. I've definitely benefitted from this feature in the past.\r\n\r\nThat said, realise this does remove a lot of code, so it may not be worth keeping around just for that.",
      "Im not sure if anyone actully ever used this feature, there was no public API to enable it. I do think the vanilla profiling tools are under used (By players and modders), maybe there are things we can do to help increase its useage.\r\n\r\nSampler can provider per tick profiles, and can also only trigger on ticks that take longer than a given time.",
      "> Im not sure if anyone actully ever used this feature, there was no public API to enable it. \r\n\r\nWas it not enabled by default?",
      "> Was it not enabled by default?\r\n\r\nAh, I just realized... Then it should maybe be set to `true` in the PR? Not that it's really useful anyway...",
      "Oh, apparenly it was enabled by default, my bad. I guess there is a small pref gain from this change then 👍 "
    ],
    "commit_messages": [
      "Terminally deprecate `EventFactory` `isProfilingEnabled` and `invalidate` (#3050)\n\n* Terminally deprecate `EventFactory` `isProfilingEnabled` and `invalidate`\r\n\r\n* Remove `forRemoval` in `isProfiling` deprecation\r\n\r\n* Also deprecate"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662306450ac82a74541b20d3",
    "number": 3049,
    "body": "## Changes\r\n\r\n- Added `toString` to all default `Storage`, `ContainerItemContext` and `Transaction` implementations\r\n- Removed `Impl` suffix from `ItemVariantImpl.toString` and `FluidVariantImpl.toString`. Since they are the only implementations, the suffix offers no meaningful info for callers.\r\n- In `StorageUtil` and `FluidStorageUtil` methods for moving resources, exceptions are now caught are more context is added to them with `CrashReport`.\r\n  - Open question: Would it make sense to catch the precondition exceptions thrown by the methods themselves?\r\n\r\n## Example\r\nHelps a bit with #2923, but without adding context like dimensions and positions everywhere, it's hard to fix completely.\r\n\r\nWith this PR, the error message would've looked somewhat like:\r\n\r\n```\r\njava.lang.IllegalArgumentException: Amount may not be negative, but it is: -1024\r\n     ....stacktrace...\r\n\r\nA detailed walkthrough of the error, its code path and all known details is as follows:\r\n---------------------------------------------------------------------------------------\r\n\r\n-- Move details --\r\nDetails:\r\n    Input storage: SingleStackStorage[10 minecraft:diamond]\r\n    Output storage: com.example.badmod.BrokenStorage@12345678\r\n    Filter: some lambda\r\n    Max amount: 64\r\n    Transaction: Transaction[depth=0, lifecycle=NONE, thread=Server thread]\r\n```",
    "head_branch": "transfer-debug-messages",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Improve transfer API debug messages (#3049)\n\n* Add toStrings to Storage, ContainerItemContext and Transaction impls\r\n\r\n* StorageUtil: Use crash reports for adding context to errors\r\n\r\n* Drop Impl suffix from variant impl toStrings\r\n\r\nSince they are the only implementations, it offers no meaningful info for\r\ncallers.\r\n\r\n* Centralise formatting code, include BE inventory position\r\n\r\n* Include amount and resource in all ContainerItemContext.toString impls\r\n\r\n* Use crash callables in StorageUtil\r\n\r\n* Add crash report to FluidStorageUtil\r\n\r\n* Add owning thread to TransactionImpl.toString\r\n\r\n* Use thread name in TransactionImpl.toString\r\n\r\nThe other info clutters the message.\r\n\r\n* Fix code style"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662306460ac82a74541b20d4",
    "number": 3048,
    "body": "Makes working with custom damage sources nicer. Fixes #2931.",
    "head_branch": "fix-2931",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add TAWs for DamageSources (#3048)\n\nCo-authored-by: modmuss50 <modmuss50@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306470ac82a74541b20d5",
    "number": 3047,
    "body": "`getName` should return an identifier rather than a user-facing name. In particular, the stringified version of the `Text` used for display is bad because lang resources may not be loaded yet.\r\n\r\n#### List of changes\r\n- Change `getName` of the \"Fabric Mods\" pack to `fabric`. This matches what appears in `options.txt` (the id of the `ResourcePackProfile`).\r\n- Replace the `Identifier id` in `ModNioResourcePack` by a `String`, since it is only used as a string anyway. This makes the next change possible.\r\n- Remove `name` from `ModNioResourcePack`. Change `getName` of the mod resource packs to be exactly the modid. This changes the log entry to the modid instead of the mod name.\r\n\r\n#### With these changes\r\n- `options.txt`:\r\n```resourcePacks:[\"vanilla\",\"fabric\",\"fabric-resource-loader-v0-testmod:test\"]```\r\n- log line for the reload:\r\n```[10:47:57] [Render thread/INFO] (Minecraft) Reloading ResourceManager: vanilla, fabric (fabric-renderer-api-v1-testmod, fabric-entity-events-v1, fabric-particles-v1, fabric-crash-report-info-v1, fabric-game-rule-api-v1, fabric-networking-v0, fabric-recipe-api-v1, fabric-blockrenderlayer-v1, fabric-command-api-v1, fabric-networking-api-v1, fabric-rendering-data-attachment-v1, fabric-loot-tables-v1, fabric-renderer-indigo, fabric-lifecycle-events-v1, fabric-transfer-api-v1, fabric-data-generation-api-v1, fabric-convention-tags-v1, fabric-resource-loader-v0, fabric-object-builder-api-v1-testmod, fabric-renderer-api-v1, fabric-message-api-v1, fabric-screen-handler-api-v1-testmod, fabric-screen-handler-api-v1, fabric-models-v0, fabric-key-binding-api-v1, fabric-sound-api-v1-testmod, fabric-rendering-v1-testmod, fabric-keybindings-v0, fabric-command-api-v2, fabric-data-gen-api-v1-testmod, fabric-object-builder-api-v1, fabric-renderer-registries-v1, fabric-biome-api-v1, fabric-rendering-fluids-v1, fabric-item-api-v1-testmod, fabric-resource-loader-v0-testmod, fabric-rendering-v1, fabric-registry-sync-v0, fabric-containers-v0, fabric-content-registries-v0, fabric-mining-level-api-v1, fabric-networking-api-v1-testmod, fabric-rendering-fluids-v1-testmod, fabric-events-lifecycle-v0, fabricloader, fabric-gametest-api-v1, fabric-api-base, fabric-game-rule-api-v1-testmod, fabric-item-api-v1, fabric-screen-api-v1, fabric-commands-v0, fabric-models-v0-testmod, fabric-transitive-access-wideners-v1, fabric-events-interaction-v0, fabric-resource-conditions-api-v1, fabric-rendering-v0, fabric-api, fabric-client-tags-api-v1, fabric-sound-api-v1, fabric-dimensions-v1, fabric-key-binding-api-v1-testmod, fabric-block-api-v1, fabric-item-group-api-v1, fabric-api-lookup-api-v1, fabric-loot-api-v2), fabric-resource-loader-v0-testmod:test```\r\n\r\nThe old log line would have been `vanilla, Fabric Mods (mod name 1, mod name 2, etc...), <stringified version of the display name text used by the test builtin pack>`\r\n\r\n \r\n",
    "head_branch": "fix-get-name",
    "is_a_fork": true,
    "comments": [
      "Will the position of `Fabric Mods` in the resource pack list change now if a player has previously moved it?",
      "> Will the position of `Fabric Mods` in the resource pack list change now if a player has previously moved it?\r\n\r\n~~Yes it will. But~~ tbh, that pack shouldn't even exist to users and be hidden inside the Default pack.",
      "The id of the `ResourcePackProfile` is what's stored inside `options.txt`, and this PR doesn't touch that. So not this doesn't change the position (I just tested this).",
      "Ah, how is the ID of the `ResourcePackProfile` determined again?\r\nMemory is not happy\r\n\r\nOk, looked at the code, Fabric Mods is hardcoded to `fabric` and other built-in packs are the `identifier` given when registering them."
    ],
    "commit_messages": [
      "Fix `getName` for builtin packs not returning an internal name (#3047)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306480ac82a74541b20d6",
    "number": 3044,
    "body": "Continuation of #2933.\r\n\r\n### Remove texture indices\r\nThe most important change of this PR is removing texture indices, that have been unused ever since their introduction in the initial version of the Renderer API. This removes a lot of `0` parameters everywhere.\r\n\r\nThis also comes with a few renames for the new methods (the old methods are not removed/renamed):\r\n- `QuadView`\r\n  - `spriteColor` -> `color`.\r\n  - `spriteU` -> `u`.\r\n  - `spriteV` -> `v`.\r\n- `MutableQuadView`\r\n  - `sprite` -> `uv`.\r\n- `QuadEmitter`\r\n  - `spriteUnitSquare` -> `uvUnitSquare`.\r\n\r\n### Replace `disableAo(boolean)` by `ambientOcclusion(TriState)`\r\nSometimes (i.e. when AO is disabled by the model, or when the block state has luminosity), vanilla will always disable AO. Setting `ambientOcclusion` to `TriState.TRUE` will force-enable AO in that case.\r\n\r\nThis is included in this PR because it is related to methods involving texture indices, and it would be a shame to add a method just to deprecate it in the next PR.\r\n\r\n### Smaller changes\r\n- Reorganize method order. This is split in a separate commit to make reviewing easier.\r\n- ~~Add new `QuadView#toBakedQuad` that accepts a shade boolean.~~\r\n- Add `QuadView#copyUv` to match the existing `copyPos` and `copyNormal`.\r\n- Add `MutableQuadView#fromVanilla(int[], int)`.\r\n- Add `NonExtendable` annotation to `SpriteFinder` and `RendererAccess`.\r\n- Added a few covariant overrides in comments for `QuadEmitter`. Adding them would be a breaking change. They will be uncommented in 1.20 in a follow-up PR.\r\n- Some clarifications / slight improvements around `fromBakedQuad`/`toBakedQuad` and `fromVanilla`/`toVanilla`.\r\n- Fix a few nullability annotations.\r\n\r\n### Compatibility strategy\r\nThe old methods are all deprecated with a suitable default implementation that forwards to the new method, and moved to the bottom of the declaring class.\r\nThe new methods are implemented with a suitable default implementation that forwards to the old method, in place of the old methods in the class. The default implementation will be removed for 1.20 in a follow-up PR.\r\n\r\nFor users, the update strategy is as follows:\r\n- Move to new methods as time allows.\r\n- Old methods will remain usable \"forever\". \r\n\r\nFor renderer implementations, the update strategy is as follows:\r\n- In 1.19.4, implementing the old methods will continue to work, but the new methods should be implemented.\r\n- In 1.20+, the new methods will have to be implemented (default implementations will be gone), and old methods will work through their default implementation.\r\n\r\n### TODO List\r\n- [x] Double check why the new `toBakedQuad` with a shade parameter is useful. Resolution: was removed.\r\n- [x] Double check why the new `fromVanilla(int[], int)` overload is useful. Resolution: Indigo itself is using it, so it can be useful (if interaction with vanilla code is needed).\r\n- [x] Go through the full diff once again.\r\n  - [x] `Reorganize method order`\r\n  - [x] `Remove texture indices`\r\n  - [x] `Make Material AO a TriState`\r\n- [x] Test new renderer API with old mod and old renderer.\r\n- [x] Test new renderer API with updated mod and old renderer.\r\n- [x] Test new renderer API with old mod and updated renderer.\r\n- [x] Test new renderer API with updated mod and updated renderer.\r\n- [x] Add `@apiNote` etc tags to `build.gradle`.\r\n",
    "head_branch": "remove-texture-indices",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove texture indices and make material AO a `TriState` (#3044)\n\n* Reorganize method order\r\n\r\n* Remove texture indices\r\n\r\n- Add allow passing shade boolean to QuadView#toBakedQuad\r\n- Add MutableQuadView#fromVanilla(int[], int)\r\n- Add NonExtendable annotation to SpriteFinder and RendererAccess\r\n- Add note to RenderContext#bakedModelConsumer\r\n\r\n* Make Material AO a TriState\r\n\r\nCo-authored-by: PepperCode1 <44146161+PepperCode1@users.noreply.github.com>\r\n\r\n* Rename spriteUnitSquare -> uvUnitSquare\r\n\r\n* Remove toBakedQuad with shade boolean parameter\r\n\r\n* Add custom apiNote, implSpec, and implNote javadoc tags\r\n\r\n* Reject null BlendMode and AO; clarify fromVanilla(int[], int) javadoc\r\n\r\n* cullFace nullability, fromBakedQuad shade clarification, toBakedQuad color index\r\n\r\n* Add QuadView#copyUv and minor improvements\r\n\r\n* Nullability tweaks\r\n\r\n---------\r\n\r\nCo-authored-by: PepperCode1 <44146161+PepperCode1@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662306480ac82a74541b20d7",
    "number": 3043,
    "body": "[Original PR](https://github.com/FabricMC/fabric/pull/2995)\r\n\r\nCurrently there is no event that handles the case where the player left-clicks air (not pointing to any block or entity). The portal gun mod needs this.\r\n\r\nThe `ClientPreAttackCallback` will fire every tick when the attack key is pressed, before vanilla attack handling. If the callback returns true, then the vanilla handling (breaking block, attacking entity, swining hand) will be cancelled. For multiple callbacks, if the former callback returns true, the later callback won't execute.\r\n\r\nThis event does not consider attack cooldown.",
    "head_branch": "1.19.4_pr_client_pre_attack_event",
    "is_a_fork": true,
    "comments": [
      "@Technici4n The reason that I change the old event into the new event is that, the new event is more general and more capable:\r\n* The old event can intercept block breaking if the player clicks very fast (press and then release in one tick), but cannot intercept block breaking if the player holds attack key\r\n* The old event does not fire when the player holds attack key\r\n* The new event runs when the attack key is in pressed state, and the mod can check whether it's clicked and consume the click.\r\n* The new event allows fully disabling block breaking. (In the old event, using both that event and AttackBlockCallback can disable block breaking, but is more fragile and verbose.)\r\n* The new event allows operations that does not consier cooldown. If the mod wants cooldown, it can manually check the cooldown or use `ItemCooldownManager`. The old event does not allow operations that ignore cooldown.\r\n\r\nMaking the attackCooldown accessible would be good.",
      "Hmmm, I am not too sure. The idea is to provide an event that fills some of the gaps while still being useful to a larger set of mods, and limiting the amount of misuse.\r\n\r\nIf the idea is to provide a \"raw input\" event (which seems to be what your vision is), wouldn't that be better suited as a more generic keyboard and mouse input handling API?\r\n\r\n>     * The old event can intercept block breaking if the player clicks very fast (press and then release in one tick), but cannot intercept block breaking if the player holds attack key\r\n> \r\n>     * The old event does not fire when the player holds attack key\r\n\r\nWould it not be confusing to have the event fire every tick instead of just when the attack key is pressed? I am not sure. How do you prevent the event from firing every tick in your portal gun code?",
      "@Technici4n This event is not a raw input event because it has the functionality of disabling vanilla attack action (breaking block, attacking entity). \r\n\r\nThe testmod already shows how to run only when clicking by `attackKey.wasPressed()`  https://github.com/FabricMC/fabric/pull/3043/files#diff-a4414bc28298c7766eb961096e202737b149cbfc18487ee95ea882c2b8ed318fR37\r\n\r\n(`wasPressed` will consume the click. For item-specific operations consuming the click is fine. But if the mod don't want to consume the click it can directly read the field of `attackKey`)\r\n\r\nI am going to make this event to pass `clicked` boolean indicating whether it clicks, without consuming the click.\r\n\r\nWhat if a mod wants to do somthing when the player holds attack key and not pointing to any block? That's why I made it fire every tick.\r\n\r\nFor a raw input event, to cancel attack, it may need to modify key state which may cause unintended side effects. However a raw input event would be useful in other cases.",
      "My main motivation is trying to avoid having ending up with 10 events that do slightly different things as this can be very hard to reason about from a maintenance POV, especially if each event ends up being a slight mixin variation.\r\n\r\nI think having a clicked parameter is a good idea as it makes the event quite versatile, that makes the design fine by me then!\r\n\r\nI wonder if clicked should even be an integer to fully replace checking the key binding. Not sure, your call.",
      "PS: Your example should also include a check for the gamemode and the attack cooldown in a \"real world\" use case I assume.",
      "Changes pushed",
      "I originally want to make two accessors of KeyBinding to have different names to reduce confusion but the github action checks mixin name so two accessors can only have the same name. Now there are two `KeyBindingAccessor`s",
      "Can anyone explain why check_resources failed",
      "You didn’t update the transitive access winders template and then run the gradle task to generate the final file.",
      "After rebasing and push it will show unrelated changes, but changing base to 1.20 and then change back to 1.19.4 makes them disappear. Weird.",
      "(FYI you can run `gradlew checkstyleMain checkstyleTestmod` to run checkstyle locally.)"
    ],
    "commit_messages": [
      "Add an event that fires when client player left-clicks (#3043)\n\nThe ClientPreAttackCallback will fire every tick when the attack key is pressed, before vanilla attack handling. If the callback returns true, then the vanilla handling (breaking block, attacking entity, swining hand) will be cancelled. For multiple callbacks, if the former callback returns true, the later callback won't execute.\r\n\r\nThis event does not consider attack cooldown."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662306490ac82a74541b20d8",
    "number": 3036,
    "body": "This now matches the previous behaviour, however I dont believe its the best behaviour so unless anyone has any strong feelings I think this will be best left out of 1.20.",
    "head_branch": "none_modded_client_registries_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix a regresstion preveting clients with an un-modded regsitry joining servers with modded registries. (#3036)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623064a0ac82a74541b20d9",
    "number": 3033,
    "body": "The existing testmod run config will need editing or regenerating to point to the new `testmodClient` sourceset.",
    "head_branch": "split_test_mods",
    "is_a_fork": true,
    "comments": [
      "Too much to review, but we have tests and we can easily fix things later if they break. :+1:"
    ],
    "commit_messages": [
      "Split test mods into client and common. (#3033)\n\n* Split test mods.\r\n\r\nSigned-off-by: modmuss50 <modmuss50@gmail.com>\r\n\r\n* Fixes\r\n\r\nSigned-off-by: modmuss50 <modmuss50@gmail.com>\r\n\r\n* Fixe datagen client\r\n\r\nSigned-off-by: modmuss50 <modmuss50@gmail.com>\r\n\r\n---------\r\n\r\nSigned-off-by: modmuss50 <modmuss50@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623064b0ac82a74541b20da",
    "number": 3026,
    "body": "This should have no affect as all players in 1.20 will be using an API version that supports the new packet.",
    "head_branch": "cleanup/registry_sync_nbt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[1.20] Remove deprecated NbtRegistryPacketHandler (#3026)\n\n* Remove deprecated NbtRegistryPacketHandler\r\n\r\n* Remove more"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623064c0ac82a74541b20db",
    "number": 3021,
    "body": null,
    "head_branch": "fix-3017",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #3017: ComposterWrapper not always increasing on first insert (#3021)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623064c0ac82a74541b20dc",
    "number": 3020,
    "body": "Quite self-explanatory I believe. This mimics what vanilla is already doing with `type` and `parent`. Closes #3013.",
    "head_branch": "fix-3013",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make custom ingredient types and load conditions appear early in generated JSONs (#3020)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623064d0ac82a74541b20dd",
    "number": 3018,
    "body": "# Breaking changes\r\n- `VillagerPlantableRegistry` replaced with `ItemTags.VILLAGER_PLANTABLE_SEEDS`\r\n- `FabricItemGroup.builder()` no longer takes an `Identifier`\r\n- `FabricItemGroup.build()` no longer registers the ItemGroup, this now needs to go in the vanilla registry.\r\n- `ItemGroupEvents.modifyEntriesEvent` now takes a `RegistryKey<ItemGroup>` in place of an `Identifier`\r\n- `FabricLanguageProvider` now takes a `RegistryKey<ItemGroup>` in place of an `ItemGroup`\r\n- `IdentifiableItemGroup` removed, replaced with vanilla registries.\r\n- `FabricMaterialBuilder` removed, no replacement.\r\n- `HudRenderCallback.onHudRender` now passed a `DrawableHelper` in place of `MatrixStack`\r\n- `ScreenEvents.beforeRender` now passed a `DrawableHelper` in place of `MatrixStack`\r\n- `ScreenEvents.afterRender` now passed a `DrawableHelper` in place of `MatrixStack`\r\n- `Screens.getItemRenderer()` removed. Replace with `MinecraftClient.getItemRenderer()`\r\n\r\n`DrawableHelper` is likely to be renamed soon, see: https://github.com/FabricMC/yarn/pull/3548/\r\n\r\nTODO:\r\n- ~~Update yarn~~\r\n- ~~Ensure item groups have a display message~~\r\n- ~~Update item groups docs~~\r\n- ~~Fix game tests crash~~\r\n- ~~Fix weird tool tips in one of the test mods.~~ Seems they were intentional but broken before.",
    "head_branch": "23w16a",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "23w16a (#3018)\n\n# Breaking changes\r\n- `VillagerPlantableRegistry` replaced with `ItemTags.VILLAGER_PLANTABLE_SEEDS`\r\n- `FabricItemGroup.builder()` no longer takes an `Identifier`\r\n- `FabricItemGroup.build()` no longer registers the ItemGroup, this now needs to go in the vanilla registry.\r\n- `ItemGroupEvents.modifyEntriesEvent` now takes a `RegistryKey<ItemGroup>` in place of an `Identifier`\r\n- `FabricLanguageProvider` now takes a `RegistryKey<ItemGroup>` in place of an `ItemGroup`\r\n- `IdentifiableItemGroup` removed, replaced with vanilla registries.\r\n- `FabricMaterialBuilder` removed, no replacement.\r\n- `HudRenderCallback.onHudRender` now passed a `DrawableHelper` in place of `MatrixStack`\r\n- `ScreenEvents.beforeRender` now passed a `DrawableHelper` in place of `MatrixStack`\r\n- `ScreenEvents.afterRender` now passed a `DrawableHelper` in place of `MatrixStack`\r\n- `Screens.getItemRenderer()` removed. Replace with `MinecraftClient.getItemRenderer()`\r\n\r\n`DrawableHelper` is likely to be renamed soon, see: https://github.com/FabricMC/yarn/pull/3548/"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623064e0ac82a74541b20de",
    "number": 3016,
    "body": null,
    "head_branch": "loom_1_2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update to Loom 1.2 and Gradle 8.1 (#3016)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623064f0ac82a74541b20df",
    "number": 3005,
    "body": "Adds a single API class to the interaction events module: `FakePlayer` extending `ServerPlayerEntity`. A fake player can either be obtained directly using the static `get` method, or the class can be further subclassed if required by a mod for some reason. This makes it easier to make non-players perform player actions (e.g. block break spell, block placing machine, etc...).\r\n\r\n- **Q: Why do we need this API?**\r\n  - A: Each fake player API introduces some edge cases. It's better to have a single implementation for those mods that need to handle the edge cases. It also makes fake player usage easier in general.\r\n- **Q: Why does this not mock more methods?**\r\n  - A: The goal is to stay rather lean. Compatibility issues with vanilla code should be addressed by mocking more methods. Compatibility issues with modded code can be dealt with in the other mod by checking `instanceof FakePlayer`.\r\n- **Q: Why in the interaction events module?**\r\n  - A: This is related to interactions, and I found no better place. Note that in some cases a fake player might be used to fire some event with a player parameter.\r\n\r\nCloses #1980.",
    "head_branch": "fake-player-api",
    "is_a_fork": true,
    "comments": [
      "Should the fake player implementation itself be hidden, and instead be exposed via a factory class, which also exposes an `is` method to check if a player is a fake player?\r\n\r\nalso: Should we allow setting the profile? (See AE2 issue https://github.com/AppliedEnergistics/Applied-Energistics-2/issues/6992)",
      "> Should the fake player implementation itself be hidden, and instead be exposed via a factory class, which also exposes an `is` method to check if a player is a fake player?\r\n\r\nI considered it, but I think it's useful to be able to subclass the fake player if needed. That's why it's not `final`.\r\n\r\n> also: Should we allow setting the profile? (See AE2 issue [AppliedEnergistics/Applied-Energistics-2#6992](https://github.com/AppliedEnergistics/Applied-Energistics-2/issues/6992))\r\n\r\nTo set the profile, you would query another fake player with a different `GameProfile`. I will add a few helper methods to streamline things a bit.",
      "Would it be possible to recommend a different way to check whether a player is a fake player? For example `getClass() != ServerPlayerEntity.class` (from what I know this is what multiple mods do atm), or a method that can be soft-overridden?\r\n\r\nFor example Carpet fake players extend directly `ServerPlayerEntity`, and can't extend this new class given we don't use Fabric API (and I don't think you can conditionally change the base class at runtime easily), so that'd make mods relying on this `instanceof` check to not detect these players as fake.",
      "One goal of this API is to standardize what is definitely supported by fake player implementations, which is why subclassing `FakePlayer` is mandatory. Can you link your fake player implementation?",
      "It's a bit messy as it hasn't received much love in a long time, but it's this: (Mojmap) https://github.com/gnembon/fabric-carpet/blob/51f213fa15cbbd70c5a73f4d5fecb280ac33f846/src/main/java/carpet/patches/EntityPlayerMPFake.java\r\n\r\nIn our case even if it's standardized and it could be used for this use case, that still doesn't solve the issue of what to do when the mod doesn't use Fabric API though. It's not that extending this class would not allow it to do something ~(I haven't checked, probably would be possible)~, it's that we can't extend the class without the dependency.",
      "Actually (from a quick look) these not ticking and being invulnerable is an issue given we want these players to behave mostly like regular players, for their use on testing farms while allowing to automate some actions. Plus other modifications like removing stats may not always be desired.\r\n\r\nThis API may just not be suited for our use case, though I still think mods should be able to find that they're fake players. Though then I'm not understanding what the use case is.",
      "Some prior work for a more flexible fake player check can be found in Architectury API's Fabric code which has an event a bit like this:\r\n```java\r\ninterface FakePlayerCallback {\r\n  Event<FakePlayerCallback> EVENT = ...;\r\n\r\n  TriState isFake(PlayerEntity player);\r\n}\r\n```\r\n\r\n(with the fallback impl doing the check mentioned earlier: `instanceof ServerPlayerEntity && getClass() != ServerPlayerEntity.class`)\r\n\r\nActual code (mojmap warning!!): [FakePlayers.java](https://github.com/architectury/architectury-api/blob/7a715af053ba794d3d4b353c8b201ee5242bdf6a/fabric/src/main/java/dev/architectury/hooks/level/entity/fabric/FakePlayers.java)",
      "@altrisi I'm not sure how exactly you're using fake players, but it's pretty clear that you don't benefit from the provided base implementation.\r\n\r\nWe can move the check to an interface-injected method, but I am worried about people using an instanceof check by mistake",
      "@Technici4n You clearly haven't read the Discord discussion concerning exactly that point regarding Carpet, which is that mocking a player requires mocking everything from clientside interactions, packet handling, etc..\r\n\r\nCarpet bot is not \"fake\", but more like \"client-integrated\". And I believe most uses, outside of the simple \"just let me run this code without NPEing, I do not mind if it deviates a ton from real player\" require such players. This API's scope is still unclear, and I believe this should not be included in the main API.",
      "If the only rationale is that a mod might want to determine if someone is a fake player, injected method or event is enough.",
      "> Carpet bot is not \"fake\", but more like \"client-integrated\".\r\n\r\nWhat does that even mean?",
      "Really exciting to see this! Fake players are incredibly nasty to get right, so one standardised library for it is definitely nice to see :).\r\n\r\nA couple of other vanilla methods it may be worth stubbing:\r\n\r\n - Override `LivingEntity.sleep` to be a no-op. Otherwise fake players right clicking a bed will permanently occupy it.\r\n - Similarly, `Entity.startRiding(Entity, bool)` should just be a no-op and return `false`.\r\n - I'd argue `shouldDamagePlayer` should always return `true`, but that's probably more open  to debate. Thank you for making this a user-extensible class though, as it means this behaviour can be customised!\r\n - `PlayerAdvancementTracker.setOwner` should be a no-op when passed a `FakePlayer`. Otherwise creating a fake player blocks a normal player from obtaining advancements. Probably should also no-op when awarding advancements to a fake player. \r\n\r\n",
      "Thank you Squid for these suggestions, these have been implemented. I chose to override `getScoreboardTeam` which should take care of `shouldDamagePlayer`.\r\n\r\nI also added a default UUID and a helper method to use it. The default UUID matches the one used by Forge to hopefully make some people's lives easier.\r\n\r\nRegarding carpet, since its fake player should behave as much as possible like a real player, it has been decided that it should not be considered a fake player at all, and thus not considered for this PR. Hence, I am keeping the current design as it makes the API much cleaner."
    ],
    "commit_messages": [
      "Add a Fake Player API (#3005)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662306500ac82a74541b20e0",
    "number": 3004,
    "body": "<img width=\"966\" alt=\"Screenshot 2023-04-10 at 18 53 28\" src=\"https://user-images.githubusercontent.com/4324090/230961913-168b666b-3784-467c-a8c8-f82311dd653e.png\">\r\n\r\n- Improves the user experience for players, the old error isnt very helpful.\r\n- All registries are validated before trying to remap, the logs contain the errors for all registries, not just the first to fail\r\n- Required as in 1.20 we cannot easily make the disconnect screen scrollable.\r\n\r\nAdds a `/remote_remap_error_test` testmod command to test this. Please ~~bikeshead~~ discuss the wording and colors.",
    "head_branch": "remote_remap_error_screen",
    "is_a_fork": true,
    "comments": [
      "Ill make this translatable once we happy with the text. We do also need to find a better way for people to submit translations, but thats out of scope of this. 👍 "
    ],
    "commit_messages": [
      "Improve missing local registry entries error message. (#3004)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306500ac82a74541b20e1",
    "number": 2999,
    "body": "In 23w14a `LootManager` class was changed to not only handle `LootTable`, but also `LootFunction` and `LootCondition`.\r\n\r\nWhen the API was updated, this was not taken into account and all entries in  `field_44492` are assumed to be of type `LootTable`.\r\n\r\nThis can cause this issue, when running the latest fabric api with a datapack with predicates:\r\n```\r\n[12:01:36] [main/WARN]: Failed to load datapacks, can't proceed with server load. You can either fix your datapacks or reset to vanilla with --safeMode\r\njava.util.concurrent.ExecutionException: java.lang.ClassCastException: class net.minecraft.class_60$class_5334 cannot be cast to class net.minecraft.class_52 (net.minecraft.class_60$class_5334 and net.minecraft.class_52 are in unnamed module of loader net.fabricmc.loader.impl.launch.knot.KnotClassLoader @7946e1f4)\r\n        at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:396) ~[?:?]\r\n        at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2073) ~[?:?]\r\n        at net.minecraft.server.Main.main(Main.java:209) ~[server-intermediary.jar:?]\r\n        at net.fabricmc.loader.impl.game.minecraft.MinecraftGameProvider.launch(MinecraftGameProvider.java:462) ~[fabric-loader-0.14.19.jar:?]\r\n        at net.fabricmc.loader.impl.launch.knot.Knot.launch(Knot.java:74) ~[fabric-loader-0.14.19.jar:?]\r\n        at net.fabricmc.loader.impl.launch.knot.KnotServer.main(KnotServer.java:23) ~[fabric-loader-0.14.19.jar:?]\r\n        at net.fabricmc.loader.impl.launch.server.FabricServerLauncher.main(FabricServerLauncher.java:69) ~[fabric-loader-0.14.19.jar:?]\r\nCaused by: java.lang.ClassCastException: class net.minecraft.class_60$class_5334 cannot be cast to class net.minecraft.class_52 (net.minecraft.class_60$class_5334 and net.minecraft.class_52 are in unnamed module of loader net.fabricmc.loader.impl.launch.knot.KnotClassLoader @7946e1f4)\r\n        at net.minecraft.class_60.md089aa1$fabric-loot-api-v2$lambda$applyLootTableEvents$1$0(class_60.java:572) ~[server-intermediary.jar:?]\r\n        at com.google.common.collect.RegularImmutableMap.forEach(RegularImmutableMap.java:292) ~[guava-31.1-jre.jar:?]\r\n        at net.minecraft.class_60.applyLootTableEvents(class_60.java:564) ~[server-intermediary.jar:?]\r\n        at net.minecraft.class_60.md089aa1$fabric-loot-api-v2$lambda$reload$0$1(class_60.java:555) ~[server-intermediary.jar:?]\r\n        at java.util.concurrent.CompletableFuture$UniRun.tryFire(CompletableFuture.java:787) ~[?:?]\r\n        at java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510) ~[?:?]\r\n        at java.util.concurrent.CompletableFuture.postFire(CompletableFuture.java:614) ~[?:?]\r\n        at java.util.concurrent.CompletableFuture$UniAccept.tryFire(CompletableFuture.java:726) ~[?:?]\r\n        at java.util.concurrent.CompletableFuture$Completion.run(CompletableFuture.java:482) ~[?:?]\r\n        at net.minecraft.class_4014.method_18365(class_4014.java:69) ~[server-intermediary.jar:?]\r\n        at net.minecraft.class_156.method_43498(class_156.java:933) ~[server-intermediary.jar:?]\r\n        at net.minecraft.class_156.method_43499(class_156.java:921) ~[server-intermediary.jar:?]\r\n        at net.minecraft.server.Main.main(Main.java:160) ~[server-intermediary.jar:?]\r\n        ... 4 more\r\n```\r\n\r\nThis PR fixes this by skipping all non `LootTable` entries.",
    "head_branch": "fix/cce_loot-api-v2",
    "is_a_fork": true,
    "comments": [
      "It appears `LootManager$AndFunction` is only used for [predicates](https://minecraft.fandom.com/wiki/Predicate#Definition_of_predicate_files). The test mod doesn't have any predicates, so this didn't cause any issues. I have added a simple predicate entry to the datapack files (not really sure how you want tests to be handled here)"
    ],
    "commit_messages": [
      "fix: ClassCastException in fabric-loot-api-v2 (23w14a) (#2999)\n\n* fix: ClassCastException in fabric-loot-api-v2\r\n\r\n* change: Add skipped entries into new table\r\n\r\n* add: Simple test case"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306510ac82a74541b20e2",
    "number": 2998,
    "body": "Quoting @PepperCode1:\r\n> Fabric API's `FabricWrappedVanillaResourcePack` does not use the name of the original pack. The regular programmer art pack's name is the string `\"programmer_art\"`, but with Fabric API it's the string result of a translatable component with the key `\"resourcePack.programmer_art.name\"`.\r\n\r\nThis PR fixes said issue; see #2997 for more details.",
    "head_branch": "fix-fabric-wrapped-vanilla-resourcepack-get-name",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix `FabricWrappedVanillaResourcePack::getName` (#2998)\n\n* Fix `FabricWrappedVanillaResourcePack::getName`\r\n\r\n* Remove unused import"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662306520ac82a74541b20e3",
    "number": 2997,
    "body": "`getName` is a misleading Yarn name and should instead be called `getId`. Because of that misleading name I made the method return `Programmer Art` instead of the correct `programmer_art` in #2957. See the initial issue report here:  https://discord.com/channels/507304429255393322/566276937035546624/1090437627108413511.\r\n\r\nThis PR restores the correct Vanilla behavior.",
    "head_branch": "fix-programmer-art-resource-pack-get-name",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix `ProgrammerArtResourcePack::getName` (#2997)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306530ac82a74541b20e4",
    "number": 2995,
    "body": "Currently there is no event that handles the case where the player left-clicks air (not pointing to any block or entity). [The portal gun mod needs this event](https://github.com/iPortalTeam/PortalGun/blob/1.19/src/main/java/tk/meowmc/portalgun/mixin/MixinMinecraft.java).\r\n\r\nThe `ClientPreAttackCallback` will fire when the client player left-clicks and is not in cooldown or in hand-busy state (e.g. pressing W in a boat). As it's a client event, common usages of it requires sending packets to the server.",
    "head_branch": "pr_client_attack_event",
    "is_a_fork": true,
    "comments": [
      "I changed the callback to return a boolean indicating whether to intercept. The event does not touch cooldown now, the developer may need to manually set cooldown.\r\n\r\nThe `MinecraftClient#attackCooldown` is protected, should Fabric API provide an accessor of it?",
      "Thanks for the PR! A few questions:\r\n\r\n- Does this fire even when the client will hit something such as a block or an entity? Might be useful to clarify in the javadoc.\r\n- Is there a way to intercept the action while choosing whether to keep or remove the hand swing, similarly to what other interaction events do? (I believe that's why Juuz suggested a `TriState`).",
      "> Does this fire even when the client will hit something such as a block or an entity?\r\n\r\nYes. Will update doc.\r\n\r\n> Is there a way to intercept the action while choosing whether to keep or remove the hand swing, similarly to what other interaction events do?\r\n\r\nIf it intercepts, it will not do hand swing. However block breaking can still make hand swing. Using `AttackBlockCallback` can disable hand swing caused by block breaking.",
      "Only this event cannot stop block breaking, because vanilla runs block breaking logic when the key is in pressed state every tick, but that event only fires when clicking.\r\n\r\nIf the mod wants to fully disable block breaking when the player is holding some item, it needs to also use `AttackBlockCallback`",
      "git messed up, going to create another PR"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306540ac82a74541b20e5",
    "number": 2988,
    "body": "Fixed a translation bug where \"command.context.parse_error\" was translated with two arguments, while it takes three as input.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add missing error message argument in ClientCommandInternals(#2988)\n\nFixed a translation bug where \"command.context.parse_error\" was translated with two arguments, while it takes three as input."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662306550ac82a74541b20e6",
    "number": 2980,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update Traditional Chinese (#2980)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306550ac82a74541b20e7",
    "number": 2979,
    "body": "This pull request adds a data provider for atlas sources. It also includes a generic class (`FabricDataProvider<T>`) for potential other data generators. (See #2759)\r\n\r\n\\\r\nI do have a few questions myself open for discussion.\r\n\r\nShould `FabricDataProvider<T>` be moved to the `impl` package? It *could* be used by a user to implement their own provider if they decided to add a generator specific for their own mod, which is why I placed it under the `api` package instead.\r\n\r\nShould `FabricAtlasSourceProvider` be moved under a `provider.client` package? Other ones like `FabricModelProvider` aren't under a `client`-specific package either, while the the existing `ModelProvider` is.\r\n\r\nIs it recommended to create a special functional interface in the `FabricDataProvider<T>` class or to use the built-in consumers? In other words, would a `Provider<T>` or a `BiConsumer<Identifier, T>` be more ideal?\r\n```java\r\n@FunctionalInterface\r\npublic interface Provider<T> {\r\n\tvoid accept(Identifier id, T value);\r\n}\r\n```\r\n",
    "head_branch": "atlas-source-datagen",
    "is_a_fork": true,
    "comments": [
      "Nice, this is a good start however I think this would be best just as a simple codec provider, I dont think there is a need to have a specific `FabricAtlasSourceProvider`. It could also be used for some of the dimension jsons for example.",
      "Alright, I renamed `FabricDataProvider` to `FabricCodecDataProvider` as suggested in Discord. I also removed the `FabricAtlasSourceProvider` as it no longer really added anything. I did, however, keep the atlas sources provider in the test mod, mostly to test a specific implementation (as this was the original purpose) and as an example. Not sure if you want it removed as well, or if other ones like one for the dimensions should be included? I'll update the pull request name too to reflect its more general purpose now.\r\n"
    ],
    "commit_messages": [
      "Add codec data provider (#2979)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662306560ac82a74541b20e8",
    "number": 2975,
    "body": "This pull request adds a new event invoked before a player is spawned (i.e. when opening a single-player world or joining a server).\r\nSome use cases are:\r\n- Detecting when a player is about to spawn.\r\n- Overriding where a player initially spawns.\r\n- Changing a player's initial data before the server sends it to the client.\r\n\r\nI have tested it on `1.19.4` and `1.19.3`, but it should work with most previous versions.",
    "head_branch": "1.19.4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306570ac82a74541b20e9",
    "number": 2964,
    "body": "Addresses #2963\r\n\r\nIn order to retain backwards compatibility with the old API, a second interface (WithScreenHandler) was created, that throws if you use the old method to initialize it.",
    "head_branch": "1.19.4",
    "is_a_fork": true,
    "comments": [
      "This approach compromises the quality of the API. A workaround is to use a different screen handler factory every time and store the screen handler in it.",
      "I have created a new PR with a much cleaner none breaking fix: https://github.com/FabricMC/fabric/pull/3077 please let me know what you think."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306580ac82a74541b20ea",
    "number": 2960,
    "body": "Port of #2957 with added support for the new High Contrast resource pack. Still a draft because I'm awaiting feedback for the aforementioned PR first, also this needs some Javadoc improvements.\r\n\r\nFixes #2934.",
    "head_branch": "fix-programmer-art-injection-support-1.19.4",
    "is_a_fork": true,
    "comments": [
      "Hi, is there a reason this PR is marked as a draft? Id ideally like to merge this fix for all versions at the same time?"
    ],
    "commit_messages": [
      "Support Programmer Art and High Contrast injections (#2960)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306590ac82a74541b20eb",
    "number": 2957,
    "body": "Restores and adapts the necessary code that has been lost in the mega-port of #2599. Also incorporates the fix from #2956.\r\n\r\nPartially addresses #2934.",
    "head_branch": "fix-programmer-art-injection-support-1.19.3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Restore Programmer Art injection support (1.19.3) (#2957)\n\n* Restore Programmer Art resource pack injection support\r\n\r\n* Add Programmer Art injection testmod\r\n\r\n* Fix license formatting\r\n\r\n* Remove unnecessary `@Environment` annotation"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623065a0ac82a74541b20ec",
    "number": 2956,
    "body": "Fixes Programmer Art injection support, which has been broken ever since 78a6342.",
    "head_branch": "fix-programmer-art-injection-support-1.19.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Programmer Art resource pack injection support (#2956)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623065a0ac82a74541b20ed",
    "number": 2955,
    "body": "See #2330 & #2649",
    "head_branch": "conventional-tags-tweaks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Conventional Biome Tags tweaks (#2955)\n\n* Birch Forest Tag #2330\r\n\r\n* Fix #2649\r\n\r\n* Run datagen"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623065b0ac82a74541b20ee",
    "number": 2947,
    "body": "The contents of a bundled packet are processed on the main thread, so we shouldn't ignore custom payload packets on the main thread.\r\n\r\nThis fix has the side-effect of going through the ClientPlayNetworkAddon interception logic twice if the custom packet is not registered, but that should not cause problems (it's just a map lookup).\r\n\r\nPS: Trying to flag the packet as \"processed\" could technically be incorrect in case the packet is sent multiple times in an integration connection, so I think it's best avoided.",
    "head_branch": "fix-bundled-packet",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix custom packet inside of bundled packet not being processed (#2947)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623065c0ac82a74541b20ef",
    "number": 2945,
    "body": "Add Simplified Chinese translation.\r\nI'm not professional,if there is any problem please tell me.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Create zh_cn.json (#2945)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623065d0ac82a74541b20f0",
    "number": 2941,
    "body": "Updated base to 1.19.4, Added translation for `pack.description.modResources`",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update ko_kr.json (#2927) (#2941)\n\n* Update ko_kr.json\r\n\r\n* fix typo"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623065e0ac82a74541b20f1",
    "number": 2940,
    "body": "While I know of no mod that actually uses the Fabric API system to inject biomes into the end, I am fairly certain this code is bugged. Not sure how this was missed\r\n\r\nbiomeSetModified is set to false initially. When a locate command or anything calls getBiomes(), biomeSetModified is set to true and the modded biomes added to output of getBiomes(). Afterwards, all future calls to getBiomes() will never have the modded biomes because biomeSetModified is now true which makes the if statement fail.\r\n\r\nYou can change the implementation if you wish but this PR is just a quick fix alternative by introducing another bool to use to properly set biomeSetModified as true or false based on if there are modded biomes or not. And then always add the modded biomes to getBiomes() output if biomeSetModified is true.",
    "head_branch": "1.19.4",
    "is_a_fork": true,
    "comments": [
      "@TelepathicGrunt Does this need backport, or is this 1.19.4 only? (the relevant code has changed in 1.19.4-pre1)",
      "Looks the same in 1.19.3 and 1.19.2. Thus they also have the bug\r\nhttps://github.com/FabricMC/fabric/blob/4c3c5bfdf5426ae9acfef49f36ac2b528542cd26/fabric-biome-api-v1/src/main/java/net/fabricmc/fabric/mixin/biome/TheEndBiomeSourceMixin.java#L109",
      "@TelepathicGrunt No, does this bug actually occur? Or is it theoretical?",
      "Again, I don’t know if any more actually using the biome api to add end biomes. And I can’t run Fabric API in dev as it always breaks for me. \r\n\r\nBut this came up when QSL made a test mod that runs a locate for the modded end biome in the actual game when the world starts up to verify for sure if the biome was injected. It was failing.\r\n\r\njust looking at the code points to why. That biomeSetModified field is false initially for the end biome source. After you call getBiome once, it is set to true and nothing else ever modifies that field again. Thus future getBiomes will not have the modded biomes. \r\n\r\nThis means if you test in game, you may find that /locate biome works once to find the end biome. But I guarantee if you run the locate command a second time, it will fail. This is because locate biome doesn’t start the search for the biome right away. It goes to the biomeSource first, calls getBiomes to get all of the biomes, and then checks if the wanted biome is in that set first before it actually starts checking positions in the world\r\n\r\nSee this for fabric API’s change to getBiomes method itself\r\nhttps://github.com/FabricMC/fabric/blob/153d9bf1aa78eb569ff6e975c4b03c5c1c942a36/fabric-biome-api-v1/src/main/java/net/fabricmc/fabric/mixin/biome/BiomeSourceMixin.java#L37\r\n\r\nso if that biomeSetModified is set to true and never false again, that original code is never going to go inside the if statement to add the modified biome again to the new hash set instance that is created every time with the default vanilla biomes when getBiomes is called",
      "I think it would be useful to have a similar test ourselves.",
      "Automated test would be either too fragile or RAM-eating since we don't fix the seed. The most obvious \"solution\" I won't discuss here.",
      "> Automated test would be either too fragile or RAM-eating since we don't fix the seed. The most obvious \"solution\" I won't discuss here.\r\n\r\nI'm not sure how automatically executing the code of a `/locate biome` command has such issues. The issue here has been caught thanks to such test.",
      "@LambdAurora Since we generate a random world, there is a possibility that the code works, but RNG just disagrees. We can repeat locatebiome command to generate and check for more chunks, but that slows things down especially when running ourselves. The solution here is to use a set seed, but that is a topic for another PR.",
      "Sure there's RNG, but in the case of the test biomes, for the locate code to fail would suggest a more likely broken code than bad luck.",
      "I dont think RAM is an issue. However I can see there being a rare chance that the test fails due to the lack of a hard coded seed. With this one test its unlikely, but if we started locating a lot more of the testmod world gen content it can become quite likely. Having stable tests is critical, when tests become too unstable they get easily ignored/overlooked.\r\n\r\nI agree that this can be resolved at in another PR, as the fix presented here is trivial."
    ],
    "commit_messages": [
      "Fixed end biome source injection (#2940)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623065e0ac82a74541b20f2",
    "number": 2939,
    "body": "Backports #2534, #2451, #2816 and the part of #2526 affecting the data generation API to 1.18.2.\r\n\r\nThere are other commits targetting the data generation API too, but many of them are things like TAW that need a lot of adjusting to Mojang's refactors.\r\n\r\nThe language provider PR was slightly adjusted to fit 1.18.2:\r\n- `Identifier.toTranslationKey` wasn't in the game yet, so I removed the method using it\r\n- Test mod: replaced allays with foxes",
    "head_branch": "1.18-data-backports",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixed blocks with vanilla loot tables making strict validation of datagen fail (#2816)\n\n* Fixed blocks with vanilla loot tables making strict validation of datagen fail\n\nPreviously, blocks that used `.dropsLike(block)` in their block settings to use a vanilla block's loot table, or `.dropsNothing()` to use the `minecraft:empty` loot table, would cause strict validation in data generation to fail as the vanilla loot tables wouldn't be present in the mod's own block loot table generator.\n\nThis fixes that by ensuring that the block's loot table ID has a namespace that matches the loot table generator before adding it to the missing IDs list.\n\nTwo test blocks were added to the testmod, one which uses `.dropsLike(Blocks.STONE)` to use the same loot table as Stone, and one that uses `.dropsNothing()`. Previously, these would have caused strict validation to fail as the `minecraft:stone` and `minecraft:empty` loot tables aren't generated by the testmod's generator. Now they pass just fine.\n\n* Fixed blocks with vanilla loot tables making strict validation of datagen fail\n\nPreviously, blocks that used `.dropsLike(block)` in their block settings to use a vanilla block's loot table, or `.dropsNothing()` to use the `minecraft:empty` loot table, would cause strict validation in data generation to fail as the vanilla loot tables wouldn't be present in the mod's own block loot table generator.\n\nThis fixes that by ensuring that the block's loot table ID has a namespace that matches the loot table generator before adding it to the missing IDs list.\n\nTwo test blocks were added to the testmod, one which uses `.dropsLike(Blocks.STONE)` to use the same loot table as Stone, and one that uses `.dropsNothing()`. Previously, these would have caused strict validation to fail as the `minecraft:stone` and `minecraft:empty` loot tables aren't generated by the testmod's generator. Now they pass just fine."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623065f0ac82a74541b20f3",
    "number": 2936,
    "body": "Previously, in #2921... I suggested translation files without knowing about testmod translation status.\r\nBut now I know that information... I made translations relevant for upcoming 1.19.4!",
    "head_branch": "patch-5",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Tatar Translation for Fabric API. (#2936)\n\n* Tatar Translation for 1.19.4\r\n\r\n* Tatar Translations for 1.19.4"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306600ac82a74541b20f4",
    "number": 2935,
    "body": "Supersedes #2900.",
    "head_branch": "expand-slot-provider-jd",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "EquipmentSlotProvider: Add javadoc link to getPreferredEquipmentSlot (#2935)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306610ac82a74541b20f5",
    "number": 2933,
    "body": "- Remove texture indices\r\n- Add new `QuadView#toBakedQuad` that accepts a shade boolean\r\n- Add `MutableQuadView#fromVanilla(int[], int)`\r\n- Add `NonExtendable` annotation to `SpriteFinder` and `RendererAccess`\r\n- Reorganize method order\r\n\r\n[It is easier to view the useful changes by excluding the changes in the first commit.](https://github.com/PepperCode1/fabric/compare/cf5bc1b3680c23f756ed349d879fe1b8eb000903..pr/1.19.3/remove-texture-indices) The first commit includes only method reorganization and does not perform any actual code changes.",
    "head_branch": "pr/1.19.3/remove-texture-indices",
    "is_a_fork": true,
    "comments": [
      "Replaced by #3044."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306620ac82a74541b20f6",
    "number": 2932,
    "body": "- Restore BlockRenderContext.didOutput\r\n- Restore null checks for AoCalculator.vanillaCalc",
    "head_branch": "pr/1.18.2/fix-2898-backport",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #2898 backport (#2932)\n\n- Restore BlockRenderContext.didOutput\r\n- Restore null checks for AoCalculator.vanillaCalc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306630ac82a74541b20f7",
    "number": 2930,
    "body": "The item function is currently doing `putBlock(Block.getBlockFromItem(item), layer)`. This is both useless and error-prone.",
    "head_branch": "fix-2925",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #2925: deprecate item functions in BlockRenderLayerMap (#2930)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306630ac82a74541b20f8",
    "number": 2929,
    "body": "Update polish language strings.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update pl_pl.json (#2929)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306640ac82a74541b20f9",
    "number": 2928,
    "body": "For backwards compatibility, the old tag IDs are added to the vanilla ones.\r\n\r\nAlso optionally adds Cherry Grove biome to `c:in_overworld`.",
    "head_branch": "1.19.4-conventiontags",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Deprecate some conventional tool tags added to vanilla (#2928)\n\n* Deprecate some conventional tool tags added to vanilla\r\n\r\nFor backwards compatibility, the old tag IDs are added to the vanilla ones. The exposed keys are redirected to their replacements.\r\n\r\nAlso optionally adds Cherry Grove biome to `c:in_overworld`.\r\n\r\n* Keep the convention tags, just deprecated\r\n\r\n* You saw nothing"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306650ac82a74541b20fa",
    "number": 2927,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Hi, thanks for the PR! Would you mind targeting 1.19.4 and adding a translation for `pack.description.modResources`?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306660ac82a74541b20fb",
    "number": 2921,
    "body": "Hello!\r\nThere's all Fabric API's translation files that in Tatar language. Can you add them, please?",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [
      "> Thank you for the contribution. Please remove the translations for the testmods.\r\n\r\nDid I delete all translations for the testmods?",
      "I guess... there's no testmod translations now."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306670ac82a74541b20fc",
    "number": 2916,
    "body": "Adds `BlockSetTypeRegistry` for creating `BlockSetType`s using Identifiers. Also adds `WoodTypeRegistry` to replace `SignTypeRegistry`, matching the new more accurate Yarn name.\r\n\r\nAlso updates Yarn build.",
    "head_branch": "1.19.4-blocksettype",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "BlockSetTypeRegistry and WoodTypeRegistry (#2916)\n\n* BlockSetTypeRegistry and WoodTypeRegistry\r\n\r\nAdds `BlockSetTypeRegistry` for creating `BlockSetType`s using Identifiers.\r\nAlso adds `WoodTypeRegistry` to replace `SignTypeRegistry`, matching the new more accurate Yarn name. The old `SignTypeRegistry` remains as deprecated for compatibility.\r\n\r\nAlso updates Yarn build.\r\n\r\n* Delete SignTypeRegistry.java\r\n\r\nBroke in the update anyway, no use keeping it\r\n\r\n* Suggestions\r\n\r\n* Whoops\r\n\r\n* Suggestions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306670ac82a74541b20fd",
    "number": 2914,
    "body": "These are all targets that do not need remapping.\r\n\r\nWith the changes made with https://github.com/FabricMC/Mixin/compare/42a2c0ac3a2a...c90298501502 there are no more mixin AP warnings when building.",
    "head_branch": "mixin_ap_warnings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix all valid Mixin AP warnings. (#2914)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306680ac82a74541b20fe",
    "number": 2909,
    "body": "Basically what the title says. These are \"soft\" breaking changes, so they're being PR'ed early on to 1.19.4.",
    "head_branch": "transfer-api-v3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Transfer API v3: Allow null directions, remove deprecated exactView override (#2909)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306690ac82a74541b20ff",
    "number": 2908,
    "body": "- Add non-empty iterator system. This allows many slots to be skipped in large inventories provided a suitable tracking structure. Adds `StorageUtil.extractAny`.\r\n- Add `SlottedStorage` that allows storages to optionally expose a slot list. This is optional, and is meant for usage by chest-like inventories.\r\n- Clarify edge case in `SingleVariantStorage#getBlankVariant`.\r\n- Remove unused field from `TransferApiImpl`.\r\n\r\nNone of these should be breaking changes.",
    "head_branch": "trapi-additions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Transfer API: Add slotted storage and non-empty iterator (#2908)\n\n* Transfer API: Add non-empty iterator\r\n\r\n* Add SlottedStorage\r\n\r\n* Add StorageUtil.extractAny\r\n\r\n* Undeprecate ContainerItemContext.withInitial\r\n\r\n* Add licenses\r\n\r\n* Revert \"Undeprecate ContainerItemContext.withInitial\"\r\n\r\nThis reverts commit dcf123eb332ff642cdbd5fda0d8d2237794d93fc.\r\n\r\n* Tweaks\r\n\r\n* Make SlottedStorage#getSlots return a view, remove useless field, add UnmodifiableView annotations\r\n\r\n* Remove useless @inheritDoc\r\n\r\n* Fix infinite loop in the tests"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623066a0ac82a74541b2100",
    "number": 2906,
    "body": "Fixes https://github.com/FabricMC/fabric/issues/2895\r\nRebased https://github.com/FabricMC/fabric/pull/2896 to 1.19.4",
    "head_branch": "patch-4",
    "is_a_fork": true,
    "comments": [
      "Please make sure this compiles (are you using an IDE?), its reverting a change that was made to this code when porting to one of the recent 1.19.4 snapshots.",
      "There we go, didn't need a NASA computer to compile it :sweat_smile: "
    ],
    "commit_messages": [
      "Add a localization string to default Fabric API resource pack (#2906)\n\n* Update FabricModResourcePack.java\r\n\r\n* Update en_us.json\r\n\r\n* Update et_ee.json\r\n\r\n* Use the newer method\r\n\r\n* Fallback as a variable"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623066b0ac82a74541b2101",
    "number": 2905,
    "body": "Fixes #846",
    "head_branch": "fix_846",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Support creating FabricRegistryBuilder with a RegistryKey, deprecate Class based APIs. (#2905)\n\n* Fix #846\r\n\r\n* Update javadoc."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623066b0ac82a74541b2102",
    "number": 2901,
    "body": "- `CoreShaderRegistrationCallback` lets mods register core shader programs (like `POSITION_TEX`, stored in `assets/namespace/shaders/core`) in any namespace.\r\n- Likewise, the individual shader stages (vertex/fragment) can also be in any namespace.\r\n- `#moj_import` in core shaders lets you import files from custom namespaces too. For example, `#moj_import <my_mod:example.glsl>` imports `assets/my_mod/shaders/include/example.glsl`.\r\n\r\nThis functionality is useful especially for GUI rendering where code that is slow on the CPU side can be moved to a simple shader, such as [simple tiled textures](https://github.com/CottonMC/LibGui/pull/185).\r\n\r\nThis PR doesn't touch the post processing shaders (`EffectShaderProgram`) nor their imports so they're still only loadable from the `minecraft` namespace.",
    "head_branch": "core-shader-registry",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add registry for core shaders in custom namespaces (#2901)\n\n* Add registry for core shaders in custom namespaces\r\n\r\n* Apply suggestions from code review\r\n\r\nCo-authored-by: modmuss50 <modmuss50@gmail.com>\r\n\r\n* Use Identifier.NAMESPACE_SEPARATOR instead of \":\"\r\n\r\n* Remove fabric_ prefixes from mixins\r\n\r\n* Move test rendering to lower-right corner for test screenshots\r\n\r\n---------\r\n\r\nCo-authored-by: modmuss50 <modmuss50@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623066c0ac82a74541b2103",
    "number": 2900,
    "body": "Some mods need to access these and there's also no reason to \"hide\" them from mod devs.",
    "head_branch": "equipment-slot-provider-getter",
    "is_a_fork": true,
    "comments": [
      "Not sure about FabricItem since it'd mean that it could be overridden which adds another way of registering the same thing.\r\n\r\nAs for FabricItemStack, it could actually have a method for getting the preferred equipment slot directly I think since you can apply the provider to `this` stack.",
      "> Not sure about FabricItem since it'd mean that it could be overridden which adds another way of registering the same thing.\r\n\r\nAgreed, let's keep the APIs separate.\r\n\r\n> As for FabricItemStack, it could actually have a method for getting the preferred equipment slot directly I think since you can apply the provider to `this` stack.\r\n\r\nWhy not just use the following `LivingEntity` method?\r\n```java\r\n    public static EquipmentSlot getPreferredEquipmentSlot(ItemStack stack) {\r\n```\r\n\r\nMay I also ask what the point of exposing these is?",
      "This was @AlphaMode's request, but I agree the LivingEntity method is probably better. The damage handler is just for the sake of completeness since it uses the same system to attach it to an item.",
      "Closed in favour of a different approach (PR coming shortly)."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623066d0ac82a74541b2104",
    "number": 2898,
    "body": "- Apply disabled shade from vanilla quads directly to material. `MutableQuadViewImpl#fromVanilla` now modifies the passed material to force disable diffuse if the vanilla quad has shade disabled, which allows the material to accurately represent the diffuse state of the quad. `QuadViewImpl` no longer stores a hidden `shade` boolean that cannot be copied by a FRAPI user. These changes do not change the behavior of any Indigo methods.\r\n- Fix `AoCalculator` using AO face data computed with a potentially different shade state. With enhanced AO mode, after a non-axis-aligned quad had AO data calculated and cached, any future quads on the same block with a different shade state would be rendered as though they had the shade state of the first quad. The AO data cache now separates data by shade state to fix this issue.\r\n- Respect cull parameter passed to non-terrain rendering.\r\n- Other minor cleanup and performance improvements",
    "head_branch": "pr/1.19.3/standardized-shade",
    "is_a_fork": true,
    "comments": [
      "Note to future self: Backport to 1.18.2 and 1.19.2"
    ],
    "commit_messages": [
      "Indigo shade related fixes and other changes (#2898)\n\n* Apply disabled shade from vanilla quads directly to material\r\n\r\n- Remove QuadViewImpl.shade\r\n\r\n* Fix enhanced AO calculation and respect non-terrain culling state\r\n\r\n- Fix AoCalculator using AO face data computed with a potentially different shade state\r\n- Move non-cached computation code to separate method in AoCalculator\r\n- Turn AoCalculator's brightnessFunc and aoFunc into abstract methods\r\n- Do not check null check world in non-terrain AO calculation since it cannot be null\r\n- Pass through lightFace and shade state as method arguments in AoCalculator methods to prevent additional lookups\r\n- Do not check for the axis aligned flag in AbstractQuadRenderer.shadeFlatQuad\r\n- Respect cull parameter passed to non-terrain rendering by merging TerrainBlockRenderInfo into BlockRenderInfo\r\n- Use reusable search pos when calling Block.shouldDrawSide to prevent additional BlockPos allocation\r\n- Change BlockRenderContext.render and TerrainRenderContext.tessellateBlock to return void since return value is no longer used\r\n- Remove QuadViewImpl.vertexStart since it is unused\r\n\r\n* Add suggestions\r\n\r\n- Mark Direction parameter to BlockRenderInfo.shouldDrawFace as Nullable\r\n- Reuse MaterialFinder in FrameBakedModel"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623066e0ac82a74541b2105",
    "number": 2896,
    "body": "Fixes #2895\r\nCurrently untested",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [
      "Note that you also need to import the Text class.",
      "Tested by adding `\"pack.description.fabricApi\": \"Ressources des mods.\",` to the `fr_fr.json` file, works great!\r\n![image](https://user-images.githubusercontent.com/13494793/218484096-2cf4c6b1-43fc-4c64-a9ed-207dab8049c3.png)\r\n",
      "The description will be untranslated when reading the pack information from a vanilla client, such as through the `/datapack list` command:\r\n\r\n<img width=\"966\" alt=\"image\" src=\"https://user-images.githubusercontent.com/24855774/218488015-5170498d-8d65-4678-80fe-4b09abb45244.png\">\r\n\r\nKeep in mind that Minecraft 1.19.4 has a `fallback` field for translatable text that can solve this issue. For Minecraft 1.19.3 and below, the issue is minor enough and pre-existing so it isn't worth figuring out a hack for this case.",
      "> The description will be untranslated when reading the pack information from a vanilla client, such as through the `/datapack list` command:\r\n> \r\n> <img alt=\"image\" width=\"966\" src=\"https://user-images.githubusercontent.com/24855774/218488015-5170498d-8d65-4678-80fe-4b09abb45244.png\">\r\n> \r\n> Keep in mind that Minecraft 1.19.4 has a `fallback` field for translatable text that can solve this issue. For Minecraft 1.19.3 and below, the issue is minor enough and pre-existing so it isn't worth figuring out a hack for this case.\r\n\r\nAhh, I thought one can assume the language files are always loaded. But no problem, I can add that as well and target 1.19.4 branch instead.",
      "Rebased to https://github.com/FabricMC/fabric/pull/2906"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623066f0ac82a74541b2106",
    "number": 2894,
    "body": null,
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update et_ee.json (#2894)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306700ac82a74541b2107",
    "number": 2884,
    "body": "Javadoc's likely needs improving.\r\n\r\nMost of the changes in this PR are just adding a structure to the testmods.",
    "head_branch": "entity_structure_processors",
    "is_a_fork": true,
    "comments": [
      "> This should really go into a new module (`fabric-structure-api-v1`?) to avoid adding more structure extensions to the biome API in the future.\r\n\r\nDone 👍 I went with -v1 but started the version at 4.0.0 as we previously had a module with this name released as 3.x.x\r\n\r\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306700ac82a74541b2108",
    "number": 2880,
    "body": "Related to: https://github.com/FabricMC/fabric/issues/2879\r\nDepends on: https://github.com/FabricMC/fabric-loader/pull/764",
    "head_branch": "fix_2879",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[1.19.4] Fail hard when unable to register key bindings, and update Loader. (#2880)\n\nImprove networking API test keybindings."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306710ac82a74541b2109",
    "number": 2878,
    "body": "Adds a 'windswept' tag for biomes that are windswept. I.e., biomes that are hilly with shattered terrain. Similar to the existing `#c:extreme_hills` tag, but also includes the Windswept Forest and Windswept Savanna.",
    "head_branch": "1.19.3",
    "is_a_fork": true,
    "comments": [
      "I don't think this is a good tag name: windswept seems independent from hills",
      "Also somewhat related to this tag, the biome `minecraft:windswept_forest` is *not* part of `#c:extreme_hills`. However, this biome was previously called \"Extreme Hills+\" when it was added in 13w36a ([source](https://minecraft.fandom.com/wiki/Java_Edition_13w36a#World_generation)). I can create a separate issue for this if needed. ",
      "Aren't windswept hills and extreme hills the same thing?",
      "I'd argue they arent; mainly due to the existence of the windswept savanna. 'Windswept' biomes are just biomes that have a 'shattered' appearance in their terrain. Extreme hills are a lower temperature and more specialized subset of windswept biomes that is mostly just a holdout of older biomes. Windswept hills, forest, and gravelly hills are the new names for the pre-1.18 mountains (which was a new name for the same biomes that were called 'extreme hills' prior to 1.13). Before 1.18, the windswept savanna was the 'Shattered Savanna Plateau', and generated as a variant of the Savanna rather than as a variant of mountains/extreme hills. Windswept savannas also generally have a bit more magnified look compared to extreme hills. ",
      "Looks like extreme hills to me:\r\n![image](https://user-images.githubusercontent.com/13494793/218963905-a96bc6bf-4832-4759-bee3-ff1eceba5cf4.png)\r\n\r\n(https://minecraft.fandom.com/wiki/Savanna#Windswept_Savanna)",
      "Hmmm, according to MC wiki we have:\r\n- windswept hills, windswept forest, windswept gravelly hills as variants of windswept hills\r\n- windswept savanna as a variant of savannas.\r\n\r\nSo using `#c:windswept_hills` is probably not accurate? Maybe just `#c:windswept` then tbh... I'd like some input from @FabricMC/fabric-triage."
    ],
    "commit_messages": [
      "Add 'Windswept Hills' biome convention tag (#2878)\n\n* add windswept biome tag\r\n\r\n* change windswept tag to windswept hills\r\n\r\n* list out biomes and revert name change"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662306720ac82a74541b210a",
    "number": 2877,
    "body": "Superseeds: https://github.com/FabricMC/fabric/pull/2699",
    "head_branch": "check_resources",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add github action to check that all resources are generated. (#2877)\n\n* Add github action to check that all resources are generated.\r\n\r\n* Test\r\n\r\n* Revert \"Test\"\r\n\r\nThis reverts commit 8e187bc7815ee44d3b32fa6454973f4b30a05f10."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306730ac82a74541b210b",
    "number": 2874,
    "body": "This requires a 1.18.2, 1.19.2, 1.19.3 and 1.19.4 release.\r\n\r\nNot sure how we ended up having a test for the broken behaviour, opps!\r\n\r\nThis change does now apply the same vanilla bug to modded items.",
    "head_branch": "fix_2873",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix vanilla behaviour change causing Dragon Breath's to leave an empty Glass Bottle in Brewing Stand (#2874)\n\nThis fix restores the previouslly broken behaviour of item remainders in brewing stands."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306740ac82a74541b210c",
    "number": 2864,
    "body": "If anyone has a suggestion for a better module for this to go in please let me know?\r\n\r\nThis is used to raycast without an entity.",
    "head_branch": "raycast",
    "is_a_fork": true,
    "comments": [
      "Big fan of this PR! Thanks for doing this Modmuss!",
      "Im not happy with this. I may come back to it."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306750ac82a74541b210d",
    "number": 2860,
    "body": null,
    "head_branch": "loom_1_1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update to Loom 1.1 (#2860)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306750ac82a74541b210e",
    "number": 2856,
    "body": "In 1.18.x, I had two solutions:\r\n1. Remove non-vanilla dimensions when deserializing as they will be added back later. Was working in 1.18.x. Not working with 1.19 custom presets. https://github.com/FabricMC/fabric/pull/2078\r\n2. Make deserialization fail-soft and remove the invalid entries to avoid having issue in the dangling reference check when freezing registry. https://github.com/FabricMC/fabric/pull/2088\r\n\r\nThe first solution was chosen because of simplicity.\r\n\r\nIn 1.19.3, as I tested, there is no need to manually remove the dangling references to avoid error in freezing process. So the second solution become simpler. This PR removes the first solution and uses the second solution.",
    "head_branch": "1.19.3_pr_fix_dim_unload_new",
    "is_a_fork": true,
    "comments": [
      "I tested \r\n* Loading a world that has bumblezone dimension without bumblezone mod. tested on both client side and server side\r\n* Loading a world that has lost world datapack dimension(https://www.planetminecraft.com/data-pack/the-lost-world-a-liminal-dimension/) after removing the datapack. tested on client side\r\n* That world preset datapack https://github.com/FabricMC/fabric/issues/2805#issuecomment-1367838063 works after relogging. tested on client side",
      "And what about dimension datapacks using vanilla chunk generators/biome sources that users remove and fully expected the dimension to be removed? \r\n\r\nVanilla behavior is to continue to try and create the dimension despite the datapack not on. There won’t be any parsing error since it has no modded entries. Yet the vanilla behavior is a bug and unexpected and against user’s wishes. \r\n\r\nThe nuking behavior at least let users know the dimension is gone when datapack is removed.\r\n\r\nI don’t see any way of properly handling dimensions in level.dat file. It’s a painful and waste of time when the real solution is to make bug reports to Mojang and push Mojang to advance their plans of overhauling how dimension data is stored\r\n\r\nSituation: \r\n\r\nIf a user select a preset and tries to load the world afterwards, then that means the level.dat’s dimension data needs to be trusted and read in order to keep the preset alive.\r\n\r\nBut if the user adds a dimension mod and then later removes it, the level.dat would blow up due to unknown chunk generator types etc. The user expectation is the dimension just gets removed. Not blow up. So the level.dat data can’t be trusted.\r\n\r\nAnd if the user adds a dimension datapack and later removes it, the game still can parse the dimension data and creates it and keeps it persisted against user wishes. No way to know if the dimension datapack is on or not because level.dat is parsed so early before the datapack’s dimensions are read and no way to know if the dimension is removed because it uses valid existing vanilla chunk generators etc. So level.dat data here cannot be trusted either \r\n\r\nConclusion, to fit all use cases, the level.dat file needs to be simultaneously trusted and not trusted at the same time. A paradox with no solution.",
      "As @TelepathicGrunt said, with this PR, removing a dimension datapack that only uses vanilla things will not have that dimension removed. This is a rare case (most dimension datapacks use its own things).\r\n\r\nIt's possible to fix both issues by adding extra data to tell that some dimensions comes from preset and should not be removed before reading `level.dat`. This data can be stored in an extra file. It's more complex than the current solution (I may make a PR when I have time). Another edge case is that the preset dimension depends on some things that a datapack provides and that datapack gets removed.",
      "I think that Minecraft's world preset design is not good. The world preset can add dimensions but there was already the functionality of adding dimensions. So there is a duplication of functionality. The world preset should only be a list of dimension ids and the datapack should add the relevant dimensions in the old way, then in `level.dat` it should reference the world preset id."
    ],
    "commit_messages": [
      "Fix cannot load world after uninstalling dimension mod/datapack without breaking world presets. (#2856)\n\n* Fix the issue that cannot load world after uninstalling a dimension mod/datapack, by making deserialization fail-soft, instead of removing non-vanilla dimensions.\r\n\r\n* Fix style.\r\n\r\n* Fix license.\r\n\r\n* Small changes to FailSoftMapCodec.\r\n\r\n* Make FailSoftMapCodec final.\r\n\r\n* Revert \"Make FailSoftMapCodec final.\"\r\n\r\nThis reverts commit 0c0642a1c47ab53aeaea6bf59acfa56c3f056daf.\r\n\r\n* Use ModifyVariable and change comments.\r\n\r\n* Remove unnecessary `equals`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662306760ac82a74541b210f",
    "number": 2854,
    "body": null,
    "head_branch": "23w03a",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "23w03a (#2854)\n\n* First look at 223w03a\r\n\r\n* Fix login\r\n\r\n* Support onboarding screen in client tests\r\n\r\n* Fix AFTER_ENTITY_CHANGE_WORLD event\r\n\r\n* Bump version"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306770ac82a74541b2110",
    "number": 2848,
    "body": "~~Not completely tested right now, pinging @gliscowo for it™~~ Tested",
    "head_branch": "fix-memory-leak",
    "is_a_fork": true,
    "comments": [
      "I've tested this with owo-lib, and this works: events aren't leaked anymore, even if I open screens\r\n(top is before, bottom is after)\r\n![image](https://user-images.githubusercontent.com/72868417/212559139-dd9cd246-9902-4b2b-9272-5cc46ca3e6e8.png) ![image](https://user-images.githubusercontent.com/72868417/212559145-65d5ae10-28d8-4884-ab86-91d74d0ac359.png)\r\n\r\n",
      "You could use `new MapMaker().weakKeys().makeMap()` instead of `WeakHashMap` to make it thread safe, but it may not be worth the bother.\r\n",
      "That's a good idea and it should probably be done just in case."
    ],
    "commit_messages": [
      "Fix memory leak by using weak set for ArrayBackedEvent list (#2848)\n\n* use weak set for array backed events list\r\n\r\n* use thread safe map"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306780ac82a74541b2111",
    "number": 2842,
    "body": null,
    "head_branch": "SmallFixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306790ac82a74541b2112",
    "number": 2835,
    "body": "The bugfix introduced in #2078 caused dimensions added through 1.19 world presets to be removed when they're loaded, but they don't get added back! I think we should remove this mixin until we can find a fix that doesn't risk breaking vanilla.",
    "head_branch": "fix-2805",
    "is_a_fork": true,
    "comments": [
      "I am sorry for that. In 1.19.3 MC's dimension searialization changes and that may be not useful now. I am going to look into it.",
      "https://github.com/FabricMC/fabric/issues/2805",
      "https://github.com/FabricMC/fabric/pull/2856",
      "Superseded by https://github.com/FabricMC/fabric/pull/2856."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306790ac82a74541b2113",
    "number": 2832,
    "body": "1.19.3 version of https://github.com/FabricMC/fabric/pull/2585 with hanging signs support and tests.\r\n\r\nCo-authored-by: AlphaMode <26313415+alphamode@users.noreply.github.com>",
    "head_branch": "1.19.3_custom_sign_types",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[1.19.3] Implement custom SignTypes (#2832)\n\n* 1.19.3 custom sign types\r\n\r\nCo-authored-by: AlphaMode <26313415+alphamode@users.noreply.github.com>\r\n\r\n* fix mixin name\r\n\r\nCo-authored-by: AlphaMode <26313415+alphamode@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623067a0ac82a74541b2114",
    "number": 2826,
    "body": "See for example https://github.com/AztechMC/Modern-Industrialization/issues/404.",
    "head_branch": "fix-empty-stack",
    "is_a_fork": true,
    "comments": [
      "Does this happen in vanilla?",
      "Unclear whether it happens in vanilla or not, but with mods it creates random crashes that don't point to the original modification. Transfer API is also guilty of calling `.setCount(0)` on empty stacks. You'd expect this to be a safe operation, and patching all the call sites is much uglier...\r\n![image](https://user-images.githubusercontent.com/13494793/210543159-99d7482d-7128-4ab6-a22e-a6175c1de225.png)\r\n\r\nAs for the performance impact: it seems like the whole injector gets inlined into `updateEmptyState` and the CI allocation is gone... Not too sure as I'm not used to reading hotspot output and had to do some \"manual\" disassembly, but it looks ok.",
      "> Unclear whether it happens in vanilla or not, but with mods it creates random crashes that don't point to the original modification. Transfer API is also guilty of calling `.setCount(0)` on empty stacks. You'd expect this to be a safe operation, and patching all the call sites is much uglier... ![image](https://user-images.githubusercontent.com/13494793/210543159-99d7482d-7128-4ab6-a22e-a6175c1de225.png)\r\n> \r\n> As for the performance impact: it seems like the whole injector gets inlined into `updateEmptyState` and the CI allocation is gone... Not too sure as I'm not used to reading hotspot output and had to do some \"manual\" disassembly, but it looks ok.\r\n\r\nHow did you get the disassembly?\r\n\r\nThere is a tool that simplifies it greatly but I forgot the details (as usual :-P))",
      "I used `-XX:+PrintAssembly` which gave this:\r\n![image](https://user-images.githubusercontent.com/13494793/210562302-5cefab02-c0a5-4550-9e70-01d7ab22e3ec.png)\r\nNo decompiler module to directly emit readable assembly, but I copy/pasted the instructions manually into https://defuse.ca/online-x86-assembler.htm. 😅\r\n\r\nI also checked the inlining log (with `-XX:+PrintInlining`):\r\n![image](https://user-images.githubusercontent.com/13494793/210562652-37372795-09c6-4426-a411-4483da8eb39e.png)\r\nwhich suggests that the method got inlined.\r\n\r\nFYI this is what I used to run the tests:\r\n![image](https://user-images.githubusercontent.com/13494793/210562789-81f9282a-6e8a-4561-8968-396a4afe44c0.png)\r\n![image](https://user-images.githubusercontent.com/13494793/210562813-1b02f24a-9303-4838-85fb-37050eea1092.png)\r\n\r\nNot perfect, but seems OK at a glance.",
      "Does this not hurt other items set to count 0 because they won't return null but a wrong value, which is less severe?\r\n\r\nI personally recommend patching the instance field write/reads to local variables or mark the method synchronized for a more comprehensive solution.",
      "We could overwrite the method to `this.empty = this.item == null || this.item == Items.AIR || this.count <= 0`.",
      "Changed to an overwrite. Using a cancellable injector because of lithium's mixin: https://github.com/CaffeineMC/lithium-fabric/blob/1.19.x/dev/src/main/java/me/jellysquid/mods/lithium/mixin/item/ItemStackMixin.java that will conflict with any sort of `@Overwrite`.",
      "> Does this happen in vanilla?\r\n\r\nFor the bug I've reported to mojang, I was able to reproduce this bug in vanilla after several hours, you can see the crash log here. https://bugs.mojang.com/browse/MC-258939",
      ">  I was able to reproduce this bug in vanilla after several hours\r\n\r\nThats awesome! Thanks 👍",
      "> > Does this happen in vanilla?\r\n> \r\n> For the bug I've reported to mojang, I was able to reproduce this bug in vanilla after several hours, you can see the crash log here. https://bugs.mojang.com/browse/MC-258939\r\n\r\nWow. We theorized and joked about this potentially being a vanilla bug. To have it confirmed is another story. Have hunted this issue for over 6 months, so finally putting it to rest is great.\r\nhttps://github.com/Noaaan/MythicMetals/issues/94",
      "> Wow. We theorized and joked about this potentially being a vanilla bug. To have it confirmed is another story. Have hunted this issue for over 6 months, so finally putting it to rest is great. [Noaaan/MythicMetals#94](https://github.com/Noaaan/MythicMetals/issues/94)\r\n\r\nTech told me he didn't think this was a vanilla bug so I had to prove him wrong"
    ],
    "commit_messages": [
      "Fix ItemStack.EMPTY.getItem() rarely returning null due to threading (#2826)\n\n* Fix ItemStack.EMPTY.getItem() rarely returning null due to threading\r\n\r\n* Overwrite instead"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623067b0ac82a74541b2115",
    "number": 2825,
    "body": "Fixes #2822.",
    "head_branch": "fix-2822",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove leftover `@ApiStatus.Internal` annotations and add annotation validation (#2825)\n\n* Remove leftover `@ApiStatus.Internal` annotations and add annotation validation\r\n\r\n* Simplify\r\n\r\n* Simplify more\r\n\r\n* Update gradle/validate-annotations.gradle\r\n\r\nCo-authored-by: Juuz <6596629+Juuxel@users.noreply.github.com>\r\n\r\nCo-authored-by: Juuz <6596629+Juuxel@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623067c0ac82a74541b2116",
    "number": 2824,
    "body": "Useful if you want to test the datagened output from a PR. Not published to maven, only github actions or locally.",
    "head_branch": "datagen_test_datapack",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Generate a test datapack from the datagen testmod output. (#2824)\n\n* Add a datapack zip for testing the datagen module\r\n\r\n* Fix deprecation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623067d0ac82a74541b2117",
    "number": 2823,
    "body": "Fixes #2552.",
    "head_branch": "fix-2552",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #2552: Add way to use resource conditions for block loot table datagen (#2823)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623067d0ac82a74541b2118",
    "number": 2821,
    "body": "- Add `registry_contains` condition. Closes #2548.\r\n- Make `fabric:load_conditions` appear first in generated JSON objects.\r\n- Uniformize implementation a bit:\r\n  - Move the features enabled `ConditionJsonProvider` implementation up next to the other provider implementations.\r\n  - Rename and finalize `ThreadLocal<FeatureSet> currentFeature` to `final ThreadLocal<FeatureSet> CURRENT_FEATURES`.",
    "head_branch": "fix-2548",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Resource Conditions Additions (#2821)\n\n* Resource Conditions Additions\r\n\r\n- Add `registry_contains` condition. Closes #2548.\r\n- Make `fabric:load_conditions` appear first in generated JSON objects.\r\n- Uniformize implementation a bit.\r\n\r\n* Update fabric-resource-conditions-api-v1/src/main/java/net/fabricmc/fabric/mixin/resource/conditions/DataProviderMixin.java\r\n\r\nCo-authored-by: Juuz <6596629+Juuxel@users.noreply.github.com>\r\n\r\n* itemsLoaded -> itemsRegistered\r\n\r\n---------\r\n\r\nCo-authored-by: Juuz <6596629+Juuxel@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623067e0ac82a74541b2119",
    "number": 2820,
    "body": "See the javadoc for designs. Huge thanks to @Technici4n and @Sollace.\r\n\r\n## FAQ\r\n- **Is this a breaking change?** Nope.\r\n- **Is the old API deprecated?** Nope.\r\n",
    "head_branch": "networking-api/new-packet-handler",
    "is_a_fork": true,
    "comments": [
      "Perhaps this should be extended not only to play networking, but also to the login?",
      "@RasmusHD Nope, in fact these APIs need a huge rework. I don't think login stuff would live very long.",
      "@Technici4n Not sure how to split those - the file is big, yes, but there isn't a clear way of splitting them.\r\n\r\nIf we're doing a v2, we can drop some methods that don't make sense in FAPI, but not right now.",
      "Question: should there be Packet#getType? Could remove the packet type from send methods then.",
      "Sure, no split is probably fine.\r\n\r\n> Question: should there be Packet#getType? Could remove the packet type from send methods then.\r\n\r\nNot sure, either is probably ok.",
      "Having `getType` would match vanilla code where most things have that method, so it'd be a good change imo. I don't really see multiple types for one packet instance happening",
      "Removing from last call now, we might want to remove network thread thing after all",
      "This is last-call ready.",
      "Manually merged into 1.19.4, Many Thanks 👍 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623067f0ac82a74541b211a",
    "number": 2818,
    "body": "Fixes #2810 by updating the second half of chests. Comes with a gametest structure. Whether the fix will cause performance issues is yet TBD - if that happens I have some optimization ideas.\r\n\r\nFixes #2522 by making the behavior of `ContainerItemContext.forPlayerInteraction` match that of `ItemUsage.exchangeStack`, more or less.",
    "head_branch": "fix-2810",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Two Transfer API fixes (#2818)\n\n* Fix #2810: Double chest wrapper not always updating both halves\r\n\r\n* Fix #2522: Make creative ContainerItemContext give unique items to the play"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306800ac82a74541b211b",
    "number": 2816,
    "body": "Previously, blocks that used `.dropsLike(block)` in their block settings to use a vanilla block's loot table, or `.dropsNothing()` to use the `minecraft:empty` loot table, would cause strict validation in data generation to fail as the vanilla loot tables wouldn't be present in the mod's own block loot table generator.\r\n\r\nThis fixes that by ensuring that the block's loot table IDhas a namespace that matches the loot table generator before adding it to the missing IDs list. This is in addition to the same check being done on the block's own ID, as previous.\r\n\r\nTwo test blocks were added to the testmod, one which uses `.dropsLike(Blocks.STONE)` to use the same loot table as Stone, and one that uses `.dropsNothing()`. Previously, these would have caused strict validation to fail as the `minecraft:stone` and `minecraft:empty` loot tables aren't generated by the testmod's generator. Now they pass just fine.",
    "head_branch": "1.19.3-datagenfix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixed blocks with vanilla loot tables making strict validation of datagen fail (#2816)\n\n* Fixed blocks with vanilla loot tables making strict validation of datagen fail\r\n\r\nPreviously, blocks that used `.dropsLike(block)` in their block settings to use a vanilla block's loot table, or `.dropsNothing()` to use the `minecraft:empty` loot table, would cause strict validation in data generation to fail as the vanilla loot tables wouldn't be present in the mod's own block loot table generator.\r\n\r\nThis fixes that by ensuring that the block's loot table ID has a namespace that matches the loot table generator before adding it to the missing IDs list.\r\n\r\nTwo test blocks were added to the testmod, one which uses `.dropsLike(Blocks.STONE)` to use the same loot table as Stone, and one that uses `.dropsNothing()`. Previously, these would have caused strict validation to fail as the `minecraft:stone` and `minecraft:empty` loot tables aren't generated by the testmod's generator. Now they pass just fine.\r\n\r\n* Fixed blocks with vanilla loot tables making strict validation of datagen fail\r\n\r\nPreviously, blocks that used `.dropsLike(block)` in their block settings to use a vanilla block's loot table, or `.dropsNothing()` to use the `minecraft:empty` loot table, would cause strict validation in data generation to fail as the vanilla loot tables wouldn't be present in the mod's own block loot table generator.\r\n\r\nThis fixes that by ensuring that the block's loot table ID has a namespace that matches the loot table generator before adding it to the missing IDs list.\r\n\r\nTwo test blocks were added to the testmod, one which uses `.dropsLike(Blocks.STONE)` to use the same loot table as Stone, and one that uses `.dropsNothing()`. Previously, these would have caused strict validation to fail as the `minecraft:stone` and `minecraft:empty` loot tables aren't generated by the testmod's generator. Now they pass just fine."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306810ac82a74541b211c",
    "number": 2813,
    "body": "See #2812\r\nCrashes inside `ClientPlayConnectionEvents.JOIN` previously interrupted the normal join cycle without logging exceptions. This now adds the logging.\r\n\r\nServer-side event is not in this PR; I believe it is covered by vanilla logging.\r\n\r\nRequesting backport to 1.19.2.",
    "head_branch": "networking-api/fail-soft-join",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Catch exception inside client-side JOIN event (#2813)\n\n* Catch exception inside client-side JOIN event\r\n\r\n* Update fabric-networking-api-v1/src/client/java/net/fabricmc/fabric/impl/networking/client/ClientPlayNetworkAddon.java\r\n\r\nCo-authored-by: haykam821 <24855774+haykam821@users.noreply.github.com>\r\n\r\nCo-authored-by: haykam821 <24855774+haykam821@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306820ac82a74541b211d",
    "number": 2803,
    "body": "This fixes changing the creative inventory page or reopening the creative inventory screen resulting in the selected tab being reset to the first one on the page if the search, toolbar, or survival tab was selected.",
    "head_branch": "item_group_selection",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix common tab resetting when reopening creative screen (#2803)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306820ac82a74541b211e",
    "number": 2802,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306830ac82a74541b211f",
    "number": 2801,
    "body": "Supersedes #2555",
    "head_branch": "gametest/structures",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "GameTest: Improve structure loading (#2801)\n\n* GameTest: improve structure loading\r\n\r\n* Address issues\r\n\r\n* Re-run actions\r\n\r\n* Test missing template\r\n\r\n* Revert \"Test missing template\"\r\n\r\nThis reverts commit 0e7189bf73505f7561393cc595b7c18cbf76c6a1.\r\n\r\n* Update fabric-gametest-api-v1/src/main/java/net/fabricmc/fabric/mixin/gametest/StructureTemplateManagerMixin.java\r\n\r\nCo-authored-by: Juuz <6596629+Juuxel@users.noreply.github.com>\r\n\r\n---------\r\n\r\nCo-authored-by: Juuz <6596629+Juuxel@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306840ac82a74541b2120",
    "number": 2800,
    "body": "This broke my automated tooling which relies on knowing nullability (specifically the block break events fucked it up). I very much hope you aren't planning to add more of these into the codebase because these are tremendously annoying and I assumed it was some \"smart view\" mode in my IDE hiding the actual annotation.",
    "head_branch": "1.19.3",
    "is_a_fork": true,
    "comments": [
      "Are they all nullable, or in fact not nullable and commented out for reasons?",
      "I know the block ones are nullable at least for sure, since thats what exploded at runtime",
      "Item ones were old comments, I have no clue on the entity builder because theres both a requireNonNull and a \"if not null\", which seems to imply it can be null but only while building? Theres 0 hints at the intent here\r\n![image](https://user-images.githubusercontent.com/52360088/209622781-3951e49b-1c5b-4e2a-ba89-1b7f26b23c52.png)\r\n",
      "Going to assume its supposed to be nullable internally for building, since\r\n- The field is private, meaning its not public API\r\n- The setter requires the passed value to not be null (only place its interactable in public API)\r\n- The build method makes a check if its not null, because it can be null if the public api consumer doesn't call the set method\r\n\r\nSince reading isnt exposed anywhere, it doesn't really matter since it has 0 impact on public API, so the extra safety for maintainability makes sense"
    ],
    "commit_messages": [
      "Replace old nullability comments with annotations (#2800)\n\n* Replace useless nullability comments with jetbrains annotation\r\n\r\n* These were old comments\r\n\r\n* Revert \"These were old comments\"\r\n\r\nThis reverts commit 4e9555ad51bc95a7bf12a2b33379d8eb03f57d2d.\r\n\r\n* checkstyle + nullability in mixin"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306850ac82a74541b2121",
    "number": 2799,
    "body": "Code cleanups and fixes null being thrown.",
    "head_branch": "key-binding/20221227",
    "is_a_fork": true,
    "comments": [
      "If we're gonna look into keybindings, it might be nice to evaluate solutions to #58 and #1099."
    ],
    "commit_messages": [
      "Keybindings API: New Years cleanup (#2799)\n\n* Keybindings API: New Years cleanup\r\n\r\n* Remove throws"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306860ac82a74541b2122",
    "number": 2798,
    "body": "- Add a way to specify required features for entity types, like for blocks and items.\r\n- Resolves #988\r\n- Misc fixes.\r\n- GameTest.",
    "head_branch": "object-builder/20221227",
    "is_a_fork": true,
    "comments": [
      "Can you also include a fix for #988?"
    ],
    "commit_messages": [
      "Object builder API updates (#2798)\n\n* Add feature support to FabricEntityTypeBuilder\r\n\r\n* Use IdentityHashMap for EntityType-keyed maps\r\n\r\n* Improve tests\r\n\r\n* Update fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/api/object/builder/v1/entity/FabricEntityTypeBuilder.java\r\n\r\nCo-authored-by: Juuz <6596629+Juuxel@users.noreply.github.com>\r\n\r\n* Fix naming of static-final field\r\n\r\n* Address some reviews\r\n\r\n* Rebuild\r\n\r\n* Split gametest\r\n\r\n* Update fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/api/object/builder/v1/entity/MinecartComparatorLogicRegistry.java\r\n\r\nCo-authored-by: Juuz <6596629+Juuxel@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306860ac82a74541b2123",
    "number": 2795,
    "body": "`generateAccessWidener` task in TAW module will now automatically generate TAWs for the constructors of non-abstract item classes, similar to how it already did so for blocks. As such, previously manually added item constructor TAWs have been removed from the template. This also means that `HoeItem` is now TAW'd. (I totally overlooked it earlier... whoops!)",
    "head_branch": "1.19.3-TAWs",
    "is_a_fork": true,
    "comments": [
      "> Please also add previously missed TAWs. For example, https://github.com/FabricMC/fabric/blob/1.19.3/fabric-screen-api-v1/src/client/java/net/fabricmc/fabric/api/client/screen/v1/Screens.java should be deprecated and replaced by TAWs. I believe it would be worth going through all the accessor mixins and checking for similar ones.\r\n\r\nEh, I'd say that is out of scope for this simple PR and should be a follow up.",
      "I think it's reasonable to many missed TAWs in a single pass, see also #2780 where I addressed multiple issues at once.",
      "Would adding a TAW for `StatusEffect` also be suitable to do in this pass? This constructor is also protected."
    ],
    "commit_messages": [
      "Autogenerate Item constructor TAWs (#2795)\n\n`generateAccessWidener` task in TAW module will now automatically generate TAWs for the constructors of non-abstract item classes, similar to how it already did so for blocks.\r\nAs such, previously manually added item constructor TAWs have been removed from the template. This also means that `HoeItem` is now TAW'd. (I totally overlooked it earlier... whoops!)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306870ac82a74541b2124",
    "number": 2789,
    "body": "See each commit's message for description. Resolves #2079",
    "head_branch": "biome-api/holiday-season-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Biome modification API small enhancements  (#2789)\n\n* Allow OptionalInt in BiomeModificationContext\r\n\r\nFor some reason, vanilla uses `Optional<Integer>` instead of\r\nthe preferred `OptionalInt`. Add an override that allows passing\r\n`OptionalInt`. For consistency with vanilla, the old method is NOT\r\ndeprecated.\r\n\r\n* Do not rely on Identifier identity when checking registration\r\n\r\n`Identifier` is a value-based class and should never be compared\r\nusing `==`. Luckily, this does not cause bugs right now.\r\n(Using `equals` is worse, since it'll prevent spawning pigs.)\r\nInstead use the proper method of checking if an entry is registered.\r\n\r\n* Fix #2079"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306880ac82a74541b2125",
    "number": 2787,
    "body": null,
    "head_branch": "1.19.3",
    "is_a_fork": true,
    "comments": [
      "> Doesn't Spanish default to es_es if the others don't exist?\r\n\r\nI just tested and there is no fallback mechanism between say fr_fr and fr_ca.\r\n\r\n> We don't have a british english variant because it goes to en_us.\r\n\r\nThat's because it always goes to en_us if there is no translation. :wink:",
      "@modmuss50 Should maybe change the base branch? (Or merge manually)",
      "I'll merge this manually 👍",
      "Manually squished and merged into 1.20.1: https://github.com/FabricMC/fabric/commit/2825407a16affcc0d1649d676dec35d8a6c91056\r\n\r\nThanks :)"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306890ac82a74541b2126",
    "number": 2785,
    "body": "1.19.3 porting bug.",
    "head_branch": "lang_item_group_gen",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix ItemGroup language generation. (#2785)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623068a0ac82a74541b2127",
    "number": 2784,
    "body": "Fixes #1671.\r\n\r\nHonestly I wasn't sure how to verify this one, but the fix seems trivial enough?",
    "head_branch": "fix-1671",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't break the ordering of ResourcePackProviders (#2784)\n\nFixes #1671."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623068a0ac82a74541b2128",
    "number": 2783,
    "body": "- Fire client chunk unload event when the load distance is decreased. Fixes #1821.\r\n- Fire client chunk unload event before entities are cleared from the chunk to fix block entity unload event not firing. Clarify that block entity data is unreliable in the block entity load events. Fixes #2423.",
    "head_branch": "be-lifecycle-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Block Entity Lifecycle fixes (#2783)\n\n- Fire client chunk unload event when the load distance is decreased.\r\n  Fixes #1821.\r\n- Fire client chunk unload event before entities are cleared from the\r\n  chunk to fix block entity unload event not firing.\r\n  Clarify that block entity data is unreliable in the block entity load\r\n  events.\r\n  Fixes #2423."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623068b0ac82a74541b2129",
    "number": 2782,
    "body": "Fixes #1698",
    "head_branch": "misc/2022-12-23",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Javadoc and typo fixes (#2782)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623068c0ac82a74541b212a",
    "number": 2781,
    "body": "I noticed that running `generateAccessWidener` while working on #2780 caused some changes in the datagen TAW, likely because the order of the classes in the jar changed. This will prevent that in the future.",
    "head_branch": "consistent-datagen-taw",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Ensure consistent ordering of datagen TAW (#2781)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623068d0ac82a74541b212b",
    "number": 2780,
    "body": "- Expose `StateProviderType` constructor. Fixes #474.\r\n- Expose DefaultBiomeCreator.getSkyColor. Fixes #981.\r\n- Make custom `RenderLayer` registration easier. Fixes #1635.\r\n- Add warning at the beginning of the generated AW to prevent manual editing of the file.",
    "head_branch": "more-taws",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add more transitive Access Wideners (#2780)\n\n* Add more transitive Access Wideners\r\n\r\n- Expose `StateProviderType` constructor. Fixes #474.\r\n- Expose DefaultBiomeCreator.getSkyColor. Fixes #981.\r\n- Make custom `RenderLayer` registration easier. Fixes #1635.\r\n- Add warning at the beginning of the generated AW to prevent manual\r\n  editing of the file.\r\n\r\n* Add warning to datagen generated AW"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623068e0ac82a74541b212c",
    "number": 2779,
    "body": "Fixes #602.",
    "head_branch": "fix-602",
    "is_a_fork": true,
    "comments": [
      "Looks like a spurious build failure."
    ],
    "commit_messages": [
      "Fix #602: Allow querying registered `DynamicItemRenderer`s (#2779)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623068e0ac82a74541b212d",
    "number": 2777,
    "body": "Issue reproduced and fixed using the testmod from #2775.\r\n\r\nThe fix is rather straightforward: we need to pass the `BlockState` explicitly. There is a new API addition, but it is backwards-compatible.\r\n",
    "head_branch": "fix-1871",
    "is_a_fork": true,
    "comments": [
      "Actually I'll put this in #2775 because I found more issues, and they are somewhat related."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623068f0ac82a74541b212e",
    "number": 2776,
    "body": null,
    "head_branch": "1.19.3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Traditional Chinese (#2776)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306900ac82a74541b212f",
    "number": 2775,
    "body": "- Fix #2639: Rewire fallback consumers a bit so they go through the same logic as the other ways to emit a mesh.\r\n- Fix #1871: Allow passing the block state explicitly to the fallback consumer by adding a `bakedModelConsumer`.\r\n- Expand testmod to test these behaviors.",
    "head_branch": "fix-2639",
    "is_a_fork": true,
    "comments": [
      "Changed the testmod a bit to test this.\r\n\r\nBefore the first commit: (tried by reversing the first commit after having written the test)\r\n![image](https://user-images.githubusercontent.com/13494793/208912113-4f18c519-5e16-4ac5-bb24-774f6bca7326.png)\r\n\r\nAfter the first commit:\r\n![image](https://user-images.githubusercontent.com/13494793/208911101-a2c02fd2-ea8f-45eb-afa5-f59f5c01b957.png)\r\n",
      "I think it would be nicer to move the `blockFallbackConsumer` to a new `BakedModelConsumer` interface - in case we need more extensions in the future."
    ],
    "commit_messages": [
      "Indigo and Renderer API fixes related to fallback consumers (#2775)\n\n* Fix #2639: Indigo fallback consumer does not respect BlendMode or emissivity\r\n\r\n* Change renderer testmod to test material change\r\n\r\n* Remove presumably unneeded `quad.geometryFlags()` call\r\n\r\n* Also test emissivity\r\n\r\n* Call emitBlockQuads in the testmod\r\n\r\n* Allow passing the block state explicitly to the fallback consumer. Fixes #1871\r\n\r\n* Expand testmod to also test item models\r\n\r\n* Also fix fallback consumer ignoring material for items\r\n\r\n* Slight changes\r\n\r\n* Introduce new interface for the expanded fallback consumer\r\n\r\n* Add javadoc to ModelHelper"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306910ac82a74541b2130",
    "number": 2774,
    "body": "I was only looking for a fix for `UseEntityCallback`, but I also noticed other issues. Please look at each commit separately for a better view of what I changed.\r\n\r\n- Deprecate `BlockAttackInteractionAware`. The `boolean` return type is simply not enough to describe what should happen (swing hand or not? send packet to server or not?). The event should be used instead.\r\n- Picking fixes.\r\n  - Document `BlockPickInteractionAware` and `EntityPickInteractionAware`.\r\n  - Remove unneeded `@Nullable` annotations.\r\n  - Make sure that `BlockPickInteractionAware` is not called when the hit result missed (i.e. when the block is out of range).\r\n- `UseEntityCallback` fixes.\r\n  - Fix #1870 by moving the injection point on the client, and adding a second injection point on the server. This means that in a specific case the hit result can be `null`. So the `@Nullable` is actually required, which resolves #1260.\r\n  - Add `ActionResult.CONSUME` as a valid return type - mimicking the new behavior of `AttackBlockCallback`.\r\n  - Improve documentation.",
    "head_branch": "fix-interaction-events",
    "is_a_fork": true,
    "comments": [
      "Would it be worth simply deprecating the method in `BlockAttackInteractionAware` that returns a boolean in favour of adding a new one that returns an `ActionResult`, instead of deprecating the whole interface? Though I suppose then you'd also have to make sure the new `ActionResult` one had a default impl for backwards compatibility reasons... I dunno, I suppose the event is better anyway.",
      "We could do that, but honestly I don't think this interface is not _that_ useful. The fact that we didn't receive any issue report despite the limited return value options means that it's not used in practice for what I would expect it to be used...",
      "Quick rebase to fix merge conflicts."
    ],
    "commit_messages": [
      "Interaction events fixes (#2774)\n\n* Deprecate `BlockAttackInteractionAware`\r\n\r\n* Document PickBlock events, fix nullability and edge case\r\n\r\n* Fix `UseEntityCallback` usability and documentation. Fixes #1260. Fixes #1870."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306920ac82a74541b2131",
    "number": 2773,
    "body": "Adds the following API to ease testing events within a game test:\r\n\r\n```java\r\npublic class ServerBlockEntityEventsGameTest implements FabricGameTest {\r\n\t@GameTest(templateName = EMPTY_STRUCTURE)\r\n\tpublic void loadBlockEntity(TestContext context) {\r\n\t\tvar spy = context.eventSpy(ServerBlockEntityEvents.BLOCK_ENTITY_LOAD, spyCtx -> (blockEntity, world) -> {\r\n\t\t\t// Call invoke to increment the call count\r\n\t\t\t// Returns true when this test is running, false once this test has completed\r\n\t\t\t// Passing a blockpos to ensure that we only count events triggered from within the test structure\r\n\t\t\tif (spyCtx.invoke(blockEntity.getPos())) {\r\n\t\t\t\t// Test is running can expect inputs\r\n\t\t\t\tif (!(blockEntity instanceof FurnaceBlockEntity)) {\r\n\t\t\t\t\tthrow new GameTestException(\"Expected FurnaceBlockEntity but got %s\".formatted(blockEntity.getClass().getName()));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tcontext.setBlockState(BlockPos.ORIGIN.up(), Blocks.FURNACE);\r\n\r\n\t\tcontext.addFinalTask(() -> {\r\n\t\t\t// Verify that the event was called once while the test is running.\r\n\t\t\tspy.verifyCalledOnce();\r\n\t\t});\r\n\t}\r\n}\r\n```\r\n\r\n`FabricTestContext` is interface injected onto `TestContext` adding two new apis: `eventSpy` and `getGameTestState`.\r\n\r\nI am a little unsure if this in scope or not, If we add a client testing module I think it may become more useful, maybe hold off until that happens? Let me know what you think.\r\n\r\nThis does create a new event listener for each test, technically leaking, it could possibly be reworked to have a static instance of `EventSpy` that can be reused between tests? 🤔 \r\n\r\nAnother option would be to keep this internal to fabric API (similar to the existing client tests) as I expect it might be seldom used by other mods?",
    "head_branch": "event_spy",
    "is_a_fork": true,
    "comments": [
      "Going to close this for now, after thinking about it for a bit this doesnt solve the biggest problems with registering an event listener in the test and likely wont be used by other mods outside of fabric api."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306920ac82a74541b2132",
    "number": 2770,
    "body": "Fixes #2462",
    "head_branch": "fix_2462",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix disconnect screen scissoring on high-resolution displays (#2770)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306930ac82a74541b2133",
    "number": 2769,
    "body": "Adds the \"fabric-api.gametest.command\" system property to enable/disable.\r\nFixes #2315",
    "head_branch": "fix_2315",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Disable the gametest command on the server by default. (#2769)\n\nAdds the \"fabric-api.gametest.command\" system property to enable/disable."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306940ac82a74541b2134",
    "number": 2768,
    "body": "Simple overwrite the result of `this.name = EditGameRulesScreen.this.client.textRenderer.wrapLines(name, 175);` to account for fabric's button being 44 pixels larger.\r\n\r\nFixes #1145.",
    "head_branch": "fix-1145",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #1145: Long enum gamerule name hidden by button (#2768)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306950ac82a74541b2135",
    "number": 2767,
    "body": "3 small cleanups that I noticed while reading through old issues and thought were too small to have dedicated PRs.\r\n\r\nFixes #863. Fixes #1401.",
    "head_branch": "small-cleanup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Small Cleanups (#2767)\n\n* ServerLoginNetworking javadoc fix\r\n\r\n* Improve Rendering Data Attachment javadocs. Fixes #863\r\n\r\n* Deprecate `NbtType`. Fixes #1401\r\n\r\n* Remove redundancy"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306950ac82a74541b2136",
    "number": 2759,
    "body": "As a companion to #2754, this PR aims to provide some new providers for various remaining asset and data types currently present in vanilla Minecraft, such as sounds, particles, worldgen, dimension types and potentially others. Whichever of these types should end up with a dedicated provider can be left open for discussion.\r\n\r\nCurrent list of provider candidates:\r\n- [x] Sounds\r\n- [x] Particles\r\n- [ ] Worldgen\r\n- [ ] Dimension types\r\n- [ ] Structures _(uses .nbt for some reason)_\r\n- [ ] Atlases _(client-only?)_",
    "head_branch": "extra-providers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306960ac82a74541b2137",
    "number": 2755,
    "body": "- Fix BoundedIntRule.validate being client only\r\n- Move ItemTooltipCallback to client sourceset. (Was previously client only).\r\n- Remove @Environment from all classes as it should **never** be used in a split sources setup. Loom automatically adds this to all client only classes in the output jar.\r\n\r\nSplitting the testmods will follow pending some minor loom changes.",
    "head_branch": "split_sources_cleanup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Cleanup Environment annotation usage. (#2755)\n\n* Remove @Environment(EnvType.CLIENT) from BoundedIntRule.validate\r\n\r\n* Move ItemTooltipCallback to client source set\r\n\r\n* Remove @Environment(EnvType.CLIENT) annotation\r\n\r\n* Remove @Environment(EnvType.SERVER) from WorldChunkMixin"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306970ac82a74541b2138",
    "number": 2754,
    "body": "For a while now, I've been meaning to extend Fabric's datagen API in order to provide support for more complex data generation, particularly for block and item models. Ideally, beyond block/item models, extra providers could also be implemented for other data such as particles and sounds.\r\n\r\nAt present, the datagen suite within vanilla itself is severely limited for models, providing not even half of the JSON properties that are actually supported by models such as individual `elements` and item-specific `overrides`. This PR aims to provide various custom builders to facilitate the generation of these properties as additions to vanilla's own model classes via interface injection. These builders mostly follow the spec provided by the following [Minecraft Wiki](https://minecraft.fandom.com/wiki/Tutorials/Models) page.\r\n\r\nCurrently, this is still a very early draft. Among other things, I have not figured out a particularly adequate method for actually building models with these new properties that doesn't just involve toying around with the various models and texture mappings used by the existing vanilla generator methods, as can be seen in the test mod.",
    "head_branch": "datagen-extensions",
    "is_a_fork": true,
    "comments": [
      "I've marked this PR as ready for review as I am more or less content with the model builders themselves in their current form, however I am still open to suggestions on how to process might be better simplified with any specific generator methods. I would hope that the ability to reuse builders and re-generate resulting models should help keep things clean for mods with a greater amount of models with variably-complex properties."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306980ac82a74541b2139",
    "number": 2752,
    "body": "- They are unstable, when any one of these sites goes down it fails the whole build. And leads to dead links in our javadoc's\r\n- A lot of them are not for the specific version being used.\r\n\r\nI think we need to rehost the specific version, possibly driven by yarn?",
    "head_branch": "jd_links",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove 3rd party JD links (#2752)\n\n- They are unstable, when any one of these sites goes down it fails the whole build. And leads to dead links in our javadoc's\r\n\r\n- A lot of them are not for the specific version being used.\r\n\r\nI will revist this to find a better longer term solution soon. 👍"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306990ac82a74541b213a",
    "number": 2751,
    "body": "Fixes #2750",
    "head_branch": "fix_2750",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix previous creative tab not being restored (#2751)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306990ac82a74541b213b",
    "number": 2749,
    "body": "I opened an  [issue](https://github.com/FabricMC/fabric/issues/2747) about this yesterday. `resources/fabric-block-api-v1` -> `resources/assets/fabric-block-api-v1`",
    "head_branch": "assets",
    "is_a_fork": true,
    "comments": [
      "What's with the running workflow lol\r\nIt's been running for more than 2 hours without actually running anything.",
      "> What's with the running workflow lol It's been running for more than 2 hours without actually running anything.\r\n\r\nNot sure :D I have re-ran it."
    ],
    "commit_messages": [
      "Fix block api resources path (#2749)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623069a0ac82a74541b213c",
    "number": 2746,
    "body": "Before:\r\n![image](https://user-images.githubusercontent.com/18296791/206913084-7ed131e4-cf6c-4f95-90be-47e6d3e5ad10.png)\r\nAfter:\r\n![image](https://user-images.githubusercontent.com/18296791/206913063-5e2896b9-abb2-4152-bf75-fe83a36127ce.png)\r\n",
    "head_branch": "1.19.3",
    "is_a_fork": true,
    "comments": [
      "Not a fan; this reduces the contrast too much IMO. In vanilla, buttons usually have a black outline that turns white when they're hovered.",
      "> Not a fan; this reduces the contrast too much IMO. In vanilla, buttons usually have a black outline that turns white when they're hovered.\r\n\r\nwell, as is the black outline makes so much contrast that it is the only thing I focus on.\r\nWith my current change, it makes it so that it is in tune and not out of place with other elements such as the scroll bar and inventory slots.\r\nIt is supposed to be relatively bland and unimportant because you only want to see it when you have to use it.\r\nSince they're small elements, I believe the white outline is the right approach, but the black outline is a lot for the area given. If we can maybe give it more space somehow, I think a black outline would be the right approach.\r\n\r\nAlthough arguably, I understand your perspective and agree ideally with the right circumstances a black outline is ideal, visually here it's too small and too cramped to make it so bold.\r\n\r\nI'm open to experimentation and suggestion, ultimately I want the UI element to stop sticking out like a sore thumb, and if you have any suggestion to achieve that, I'm willing to attempt it, There isn't a middle ground to the contrast here in my mind, but let me know if you come up with anything.",
      "I'm not sure everyone will agree on this contrast thing. I for example prefer the current version with the higher contrast.\r\n\r\nI think it might just be a user preference thing, and the answer will probably end up being \"use a resource pack if you're not happy with the default\".",
      "I prefer the current version too.",
      "Going to close this as you can use a resource pack to adjust the buttons depending on your preferences."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623069b0ac82a74541b213d",
    "number": 2745,
    "body": null,
    "head_branch": "item-api/settings-1.19.3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Item API: override Item.Settings#requires (#2745)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623069c0ac82a74541b213e",
    "number": 2742,
    "body": "![](https://user-images.githubusercontent.com/6596629/206905213-b24c8733-7c9e-43bf-8698-1df81ec2d6aa.png)\r\n\r\nNote: this PR does not supersede #2740 or other future PRs like that, it's just a part of 1.19.3 porting. We've debated this texture a long time in the past, so it's still fine to keep using it for now IMO.",
    "head_branch": "creative-buttons-1.19.3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Adapt the existing creative inventory page button texture to new position (#2742)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623069d0ac82a74541b213f",
    "number": 2741,
    "body": "Resolves #2132",
    "head_branch": "object-builder/block-settings-1.19.3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Refactor FabricBlockSettings to copy and override new stuff (#2741)\n\n* Copy new block settings\r\n\r\n* Sort method calls in copy method\r\n\r\n* Add more overrides"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623069d0ac82a74541b2140",
    "number": 2740,
    "body": "The creative buttons have been moved to the inside of the creative GUI in the 1.19.3 update, and the sprite and positioning don't appropriately reflect this change. The creative buttons also turn blue when hovered, when this design language has been changed in Minecraft.\r\n\r\nBelow I'm including photos before and after my changes to these buttons.\r\n\r\nBefore:\r\n![before](https://user-images.githubusercontent.com/18296791/206884578-0555468b-8b9a-45a2-b53e-242fdcbb3775.PNG)\r\nAfter:\r\n![after](https://user-images.githubusercontent.com/18296791/206884609-9e81c6c5-c2b1-44ba-be03-31c779d837e7.png)\r\n\r\nHovering:\r\n![image](https://user-images.githubusercontent.com/18296791/206884695-77e44552-2f3b-4316-a273-53415afe56d5.png)\r\n\r\nBefore video:\r\nhttps://youtu.be/J3wM2r7FR5M\r\n\r\nAfter video:\r\nhttps://youtu.be/NoKSa3w1-Og\r\n\r\nMethodology:\r\nI enjoyed how the buttons were placed before, but due to the recent changes all available space has been used up, so I agree with moving the buttons into the window. The issue I had was how horrendous the outline looked around the buttons. So, I used the item slots and the menu buttons as references to redesign the buttons.\r\n\r\nTo combat it looking out of place, I did three things.\r\n1. I adopted the style of an item slot, but inverting it to look as if it is extruded out when it can be pressed.\r\n2. I appropriately spaced it between the elements of the creative menu so that no matter what menu was open, (search or player inventory) it looks great.\r\n3. I remove the blue color while hovering in favor of a white outline as 1.14 was the last version that had used this style of selection highlighting. See below.\r\n![Screenshot](https://user-images.githubusercontent.com/18296791/206884778-f8e94eef-5185-4fcf-be1e-c091fcc9eb70.png)\r\n![Screenshot](https://user-images.githubusercontent.com/18296791/206884938-66c70d1a-7c2f-44d9-b6d5-68bfaa289d4d.png)\r\n\r\nFeel free to change anything, but I just want to change from what we currently have in any way, thanks!\r\n",
    "head_branch": "1.19.3",
    "is_a_fork": true,
    "comments": [
      "Could the Programmer Art version of the textures use the old blue background in addition to the default textures using the white outline to indicate focus?",
      "> Could the Programmer Art version of the textures use the old blue background in addition to the default textures using the white outline to indicate focus?\r\n\r\nI think that that would be a little out of scope for simply having a neat implementation that looks like it belongs there, I think it'd be more appropriate for an external resource pack or mod to handle programmer art in this case",
      "> Could the Programmer Art version of the textures use the old blue background in addition to the default textures using the white outline to indicate focus?\r\n\r\nI thought about it and decided that it would be a good feature and implemented it in https://github.com/FabricMC/fabric/pull/2740/commits/3d0697ce223fe563bae42255da27d17aaa044be1\r\n\r\nResult shown in video:\r\n\r\n\r\nhttps://user-images.githubusercontent.com/18296791/206892570-96254c19-32be-4333-aa03-4a95f601cbd6.mp4\r\n\r\n\r\n",
      "Superseded by #2742 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623069e0ac82a74541b2141",
    "number": 2736,
    "body": "Needs to be overriden if you want to have multiple providers of the same type",
    "head_branch": "getName_aw2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Generate access wideners for DataProvider.getName implementations (#2736)\n\n* Generate AW for DataProvider.getName impls\r\n\r\n* Remove final\r\n\r\n* Typo + improve memory usage"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623069f0ac82a74541b2142",
    "number": 2734,
    "body": "Because why not?",
    "head_branch": "gametest/javadoc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "GameTest: improve javadoc (#2734)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306a00ac82a74541b2143",
    "number": 2731,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Sorry, this account make many machine translate PRs, please not to merge"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306a10ac82a74541b2144",
    "number": 2729,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "You have created 2 slightly different PRs, which one is correct? Thanks.",
      "Sorry, my account gets banned. Use [this one](https://github.com/FabricMC/fabric/pull/2731), thank you."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306a10ac82a74541b2145",
    "number": 2727,
    "body": "added a `c:shields` tag and added `minecraft:shield` to it. first FAPI pr so let me know if i messed something up 😆",
    "head_branch": "1.19.3",
    "is_a_fork": true,
    "comments": [
      "i thought i did that-- looks like the tag files were gitignored. is this all that's needed?"
    ],
    "commit_messages": [
      "Add c:shields convention tag (#2727)\n\n* add shield tag\r\n\r\n* regenerata data\r\n\r\nCo-authored-by: itsmiir <itsmiir@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306a20ac82a74541b2146",
    "number": 2726,
    "body": "Without `@Unique`, it's treated as some sort of an overwrite for the `LOGGER` field.\r\n\r\nI also `@Unique`d the other field just in case vanilla adds that field in the future :smile:",
    "head_branch": "fix-logger-overwriting",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Screen API: Fix MinecraftClientMixin overwriting the vanilla logger (#2726)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306a30ac82a74541b2147",
    "number": 2721,
    "body": "Adds new events to `ServerLivingEntityEvents`.\r\n\r\n* `ALLOW_CLIMB` which if any callback returns false, pos is declared unclimbable.\r\n* `MODIFY_CLIMBING_SPEED` which allows players to modify the climbing motion.\r\n\r\nCloses #636 and #871",
    "head_branch": "climbable",
    "is_a_fork": true,
    "comments": [
      "~~I feel like I should split this event into two events that use boolean instead of ActionResult as return type.\r\nOne for mods to check for their own climbable blocks. \r\nAnd one for when minecraft tries to return true. (To check for extra stuff)~~\r\nNevermind this.",
      "`ActionResult` is not a good return value for events unless you actually specify the behaviour of `CONSUME` and `CONSUME_PARTIAL`.",
      "> `ActionResult` is not a good return value for events unless you actually specify the behaviour of `CONSUME` and `CONSUME_PARTIAL`.\r\n\r\nThey acted same as `SUCCESS`, I checked for `ActionResult#isAccepted` in case someone uses them.\r\nAnyway it doesn't matter anymore, rewrote the pr 🙂 ",
      "~~uhh, checkstyle builds on my computer idk why it gave 3 errors in here.~~ \r\nNevermind, I'm stupid I was running checkstyle for data generation api 🤦 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306a40ac82a74541b2148",
    "number": 2719,
    "body": "PR overview:\r\n\r\n* `DynamicRegistryRegistry` : A helper class for registering new dynamic registries. (Name debatable)\r\n* `DynamicRegistryFinalizeCallback` : An event fired just before DRM is immutablized.\r\n* Updated test mod, moved dynamic registry related stuff to it's own initializer.\r\n\r\nCloses #1012 \r\nCloses #2111\r\nReplaces #2112",
    "head_branch": "dynamicregistries",
    "is_a_fork": true,
    "comments": [
      "By the way `impl.registry.sync.packet.NbtRegistryPacketHandler` seems to be marked for removal (has a \"TODO: Remove\"), I can remove it as a part of this pr, along with it's uses in test mod, which seems to be the only place it's used.",
      "One last thing, subpackages for the api part of the module are inconsistent. It goes like `api.event.registry` and contains everything,  even though some are not event related. I didn't touch anything because it would be a breaking change, and I followed it. Just wanted to point it out.",
      "> I personally think that a new module should be created for dynamic registries and possibly other registries, as was done in #1031.\r\n\r\nI partially agree, it doesn't fit any other module, but I also think it's too small to be a module. Expanding registry-sync module to a registry-related module seems more reasonable to me.",
      "@haykam821 I disagree. This:\r\n- is fine in the regsync module, and\r\n- should not be done using entrypoints.",
      "I was mainly referring to the module and not the API design. The `fabric-registry-sync-v0` module is getting overstuffed and should have been primarily a helper module rather than an API module.",
      "It should simply contain all registry-related things, even though this isn't obvious due to the legacy name.",
      "This module already has the DynRegSetupCallback, and various registry events that work with dynamic registries. Might as well support adding dynregs in there.",
      "The location of `DynamicRegistrySetupCallback` was a mistake when it was first merged, and it remains a mistake today. [My stance on this issue has stayed the same.](https://github.com/FabricMC/fabric/pull/2112#issuecomment-1147041087)",
      "I'm converting this pr to draft because I just realized previously loaded dynamic registries can be accessed from the registry being loaded at the time. So I want to add methods to register before and after specific entries.",
      "Okay I updated the pr, and also marked it as experimental like suggested since Mojang can make any changes to these during snapshots and pre-releases. I think it should stay as an experimental feature until full 1.19.3 release.",
      "I need some opinions on this. Are return values for the registering methods really necessary? I can't think of any situation where people would need the entry.",
      "Closes #1012",
      "I don't want to overpopulate this pr but is a `DynamicRegistryFinalizeCallback` suitable for this pr. Or should I open another one after this. The idea is that it will be fired at the end of `RegistryLoader.load` just before DRM becomes immutable.\r\n\r\nAnd which one is the best for the callback parameter:\r\n* Directly pass the mutable DRM and hope no one calls `toImmutable()`.\r\n* Pass a `DynamicRegistryView` and warn modders that they shouldn't use entry added/removed callback helper methods.\r\n* Wrap the mutable DRM with a custom DRM that doesn't implement `toImmutable()`.",
      "Hopefully updated this pr for the last time, at least I've got nothing else stuck on my mind.\r\nI'll just be waiting for reviews from now on.",
      "looking forward to this"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306a50ac82a74541b2149",
    "number": 2717,
    "body": "Building on the success of the prod client test, this PR now uses the real installer to run the testmods against a real server.\r\n\r\nThe testmod jar is also published as I want to look at adding a client and server test similar to this to in loader.",
    "head_branch": "prod_test_server",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add producation server test, publish testmod jar to maven. (#2717)\n\n* Add producation server test, publish testmod jar to maven.\r\n\r\n* Fix deprecation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306a50ac82a74541b214a",
    "number": 2712,
    "body": "Some places in the game require the exact type. See also https://discord.com/channels/507304429255393322/566276937035546624/1046431187570262226",
    "head_branch": "networking-api/packet-generics",
    "is_a_fork": true,
    "comments": [
      "Is this also wanted in 1.19.2?",
      "Yes, seems it does also apply to 1.19.2 👍 "
    ],
    "commit_messages": [
      "Networking: fix type of created packet (#2712)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306a60ac82a74541b214b",
    "number": 2709,
    "body": "### Why I PR this\r\n\r\nIn client, language files can be loaded in any namespaces, even if it is not of any mod id.\r\n\r\nFor example, a mod identified as `cute-octopus` can include both `assets/cute-octopus/lang/*.json` and `assets/cute-octopus-extra/lang/*.json`.\r\n\r\nCurrently, when mods like `cute-octopus` running on a dedicated server, only `assets/cute-octopus/lang/en_us.json` can be loaded. However, things in `assets/cute-octopus-extra` should also be loaded, as modders might have their own reason to split their language files into different namespaces, which is legal on the client.\r\n\r\nThis pull request introduces a way to load language files in alternative namespaces on the dedicated server.\r\n\r\nDue to backwards compatibility with mods, alternative namespaces are automatically detected in which the `en_us.json` is loaded when server language is to be loaded.\r\n\r\n### Testmod\r\n\r\nA language file in alternative namespace (`fabric-resource-loader-v0-testmod-test1`) is loaded by the resource loader on dedicated server.\r\n\r\nYou can find its corresponding test in `LanguageTestMod.java`.\r\n",
    "head_branch": "1.19.3",
    "is_a_fork": true,
    "comments": [
      "I'd prefer if the server language logic was adjusted to match that of the client. I think that would be a simpler approach.",
      "So @Technici4n do you prefer listing possible namespaces in each `ModContainer`, and load them respectively?",
      "I'd suggest scanning for all `language/en_us.json` files.",
      "Ah, now I see what you mean. Yes, listing namespaces might indeed be the easiest way to do that with good performance. My point is that users should not have to configure anything for their lang files to be loaded on the server. :)",
      "To read the namespaces, you can probably make this function `public` and use it:\r\nhttps://github.com/FabricMC/fabric/blob/70063eb9397d2a82209d3c048881952ab3cae94d/fabric-resource-loader-v0/src/main/java/net/fabricmc/fabric/impl/resource/loader/ModNioResourcePack.java#L110.",
      "Is it acceptable to move the logical code from `mixin` to `impl`? They're like fifty lines occupation.",
      "As you prefer.",
      "@Technici4n Done",
      "Testmods & checkstyles have been passed. Ready to merge🚀",
      "> https://github.com/FabricMC/fabric/blob/d3e715aa7e0d1df037ad70f54576066759aeb3b1/fabric-resource-loader-v0/src/main/java/net/fabricmc/fabric/impl/resource/loader/ModNioResourcePack.java#L110\r\n> .\r\n\r\nIs it \"bad\" to make anything package-private in Fabric API?  \r\nIn other words: do I need to change it protected/public?\r\n",
      "Why would package private be bad?",
      "Is it worth backporting to older versions like 1.18.2?"
    ],
    "commit_messages": [
      "Load default translations from all namespaces on the server (#2709)\n\n* Introduce fabric:server-language-namespaces custom meta to fabric-resource-loader-v0 (extension of FabricMC/fabric#2668)\r\n\r\n* Fix testmod assertion message\r\n\r\n* Automatically detect every en_us.json files in mod container\r\nRemove fabric:server-language-namespaces custom meta detection\r\n\r\n* Remove unused custom field in fabric.mod.json\r\n\r\n* Update license\r\n\r\n* Update style\r\n\r\n* cleanup format\r\n\r\n* Fix checkstyle, move constructor\r\n\r\nCo-authored-by: modmuss50 <modmuss50@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306a70ac82a74541b214c",
    "number": 2706,
    "body": "Since a few versions, world presets have been datapackable, so why not have a data provider for it.",
    "head_branch": "worldpresetgenerator",
    "is_a_fork": true,
    "comments": [
      "Custom world presets are not a commonly used feature so just tell me if worldgen related data generation is not in scope.  Because if this gets committed, I might also pr others. (Dimension types, carvers, features, etc.)",
      "This should already be covered by the `FabricDynamicRegistryProvider`. Is this not the case?",
      "It is indeed the case 🤦‍♂️"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306a80ac82a74541b214d",
    "number": 2705,
    "body": "Vanilla checks the stack size later in ItemGroup.EntriesImpl and crashes. This PR adds the same check to FabricItemGroupEntries, resuting in a much more useful stacktrace to help find the cause of empty stacks in an item group.\r\n\r\nI found this when porting one of my mods to 1.19.3",
    "head_branch": "check_stacks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Check stack size in FabricItemGroupEntries (#2705)\n\n* Check stack size in FabricItemGroupEntries\r\n\r\n* Add stack to message"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306a90ac82a74541b214e",
    "number": 2704,
    "body": "They just give warnings during game test, that's enough to bug me 😁\r\n\r\n![](https://i.imgur.com/UntupUc.png)",
    "head_branch": "clientmixins",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix testmod client mixins being applied on the server. (#2704)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306a90ac82a74541b214f",
    "number": 2703,
    "body": "Fabric equivalent of `forge:false`. Prevents a resource from being loaded.\r\n\r\nMost common use case would be mods disabling specific vanilla recipes that don't go along with their mod.\r\n\r\nAlso added a helper data gen method,`FabricRecipeProvider#disabled`, and moved `ResourceConditionsImpl#featuresEnabled` directly under other json providers, before condition implementations, to match the rest of the file.\r\n\r\nBy the way, `DefaultResourceConditions#never` can be a field since it has no properties. Wanted to ask this because there isn't any other conditions like this.",
    "head_branch": "neverever",
    "is_a_fork": true,
    "comments": [
      "I don't see the use case as recipes can be disabled through other means already. Also, wouldn't this condition just cause the recipe to default to whatever was loaded in a lower priority data pack?",
      "Can't we use resource filter in `pack.mcmeta`?",
      "I agree with @apple502j; using filters should be the recommended way to accomplish this goal. For example, `pack.mcmeta` could include the following to remove the beacon recipe:\r\n\r\n```json\r\n{\r\n\t\"filter\": {\r\n\t\t\"block\": [\r\n\t\t\t{\r\n\t\t\t\t\"namespace\": \"minecraft\",\r\n\t\t\t\t\"path\": \"recipes/beacon\\\\.json\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}\r\n```",
      "How do these filters scale if you need to filter out 100s of recipes?\r\n\r\nBTW, this can also be accomplished by using the `or` condition with no inner conditions.",
      "Oh I didn't know that filtering thing. If that's possible, then yeah this isn't really necessary."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306aa0ac82a74541b2150",
    "number": 2700,
    "body": "pretty self explanatory",
    "head_branch": "suggestionnomore",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove fabric-textures-v0 recommendation (#2700)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306ab0ac82a74541b2151",
    "number": 2699,
    "body": "See https://github.com/FabricMC/fabric/pull/2695#discussion_r1032199744.\r\n\r\nThis prevents builds with outdated access wideners when the MC version changes, or when template.accesswidener is modified.\r\n\r\nAlso simplifies the code a bit - `text.lines().collect(Collectors.toCollection { [] })` for getting a mutable list of the lines in a file was replaced with Groovy's `readLines` extension method wrapped in a new `ArrayList` for safety.",
    "head_branch": "generated-aw-validation",
    "is_a_fork": true,
    "comments": [
      "This is a good start, however there are a few modules that have generated TAWs and/or resources. This only covers one module. Running the `generateResources` task during the github action run and then ensuing that git has no changed files may be an easier way to do this?",
      "That's true but needs some more work with the scripting (ofc individually doing my thing for all modules would take more time still) and this can be used locally for validation which is a plus.\r\n\r\nI might still PR the clean-ups from here though, no reason to use streams here."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306ac0ac82a74541b2152",
    "number": 2698,
    "body": "Adds missing javadocs and fixes javadoc errors.",
    "head_branch": "misc/1.19.3-pre2-javadoc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "1.19.3-pre2 javadoc fixes (#2698)\n\n* 1.19.3-pre2 javadoc fixes\r\n\r\n* Update fabric-data-generation-api-v1/src/main/java/net/fabricmc/fabric/api/datagen/v1/FabricDataGenerator.java\r\n\r\nCo-authored-by: Technici4n <13494793+Technici4n@users.noreply.github.com>\r\n\r\nCo-authored-by: Technici4n <13494793+Technici4n@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306ac0ac82a74541b2153",
    "number": 2697,
    "body": "Replaces the useless `createSubPack` method",
    "head_branch": "createBuiltinResourcePack",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add FabricDataGenerator.createBuiltinResourcePack to support data generating builtin resourcepacks (#2697)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306ad0ac82a74541b2154",
    "number": 2696,
    "body": "This introduces `DynamicRegistryView`, which is an context object passed to `DynamicRegistrySetupCallback`. This solves issues with passing a raw `DynamicRegistryManager`, such as `get` method crashing the game.\r\n\r\n## FAQ\r\n### Is this a breaking change?\r\nYes. However, this shouldn't affect most mods; the usage of this API is very low (note, though that they are popular mods). Additionally the `getOptional` method signature is intact.\r\n\r\n### Why getOptional (despite the guideline)?\r\nTo make it consistent with `DynamicRegistryManager`, and to make it clear that it is more often than not that this doesn't return the registry.\r\n\r\n### Why construct and pass a context object?\r\nFirst, this used `DynamicRegistryManager` as a context object before. (The method doesn't have access to DRM anymore since a few weeks ago.) Second, adding a context object means we can extend it for common uses.",
    "head_branch": "reg-sync/load-context",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Pass DynamicRegistryView to DynamicRegistrySetupCallback (#2696)\n\n* Pass DynamicRegistryView to DynamicRegistrySetupCallback\r\n\r\n* Update fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/DynamicRegistryViewImpl.java\r\n\r\nCo-authored-by: Juuz <6596629+Juuxel@users.noreply.github.com>\r\n\r\nCo-authored-by: Juuz <6596629+Juuxel@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306ae0ac82a74541b2155",
    "number": 2695,
    "body": "Fixes #2694",
    "head_branch": "sound_event_taw",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add access widener for SoundEvent.of (#2695)\n\n* Add access widener for SoundEvent.of\r\n\r\n* Update fabric-transitive-access-wideners-v1/template.accesswidener\r\n\r\nCo-authored-by: Juuz <6596629+Juuxel@users.noreply.github.com>\r\n\r\n* Update fabric-transitive-access-wideners-v1/src/main/resources/fabric-transitive-access-wideners-v1.accesswidener\r\n\r\nCo-authored-by: Shnupbups <shnupbups@gmail.com>\r\n\r\nCo-authored-by: Juuz <6596629+Juuxel@users.noreply.github.com>\r\nCo-authored-by: Shnupbups <shnupbups@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306af0ac82a74541b2156",
    "number": 2693,
    "body": "We had a test failing as a mixin it was using failed to apply, there was no indication of this in the log. This change just makes sure that any exeption thown in a test method is logged.",
    "head_branch": "game_test_logging",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Improved error handling in FabricGameTestHelper (#2693)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306b00ac82a74541b2157",
    "number": 2692,
    "body": "Main one is `addAll` this data generates all registry entries where the namespace matches the current effective modid.\r\n\r\nThe usecase I can see is a lot of people will want to generate all of their registry entries.",
    "head_branch": "drp_helpers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add some useful helper methods to FabricDynamicRegistryProvider.Entries (#2692)\n\n* Add some useful helper methods to FabricDynamicRegistryProvider.Entries\r\n\r\n* Update fabric-data-generation-api-v1/src/main/java/net/fabricmc/fabric/api/datagen/v1/provider/FabricDynamicRegistryProvider.java\r\n\r\nCo-authored-by: Juuz <6596629+Juuxel@users.noreply.github.com>\r\n\r\nCo-authored-by: Juuz <6596629+Juuxel@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306b10ac82a74541b2158",
    "number": 2691,
    "body": "Fix `AttackBlockCallback` not properly sending a packet to the server in creative mode when left click is being held. This expands upon the #1872 patch, which missed this edge case. Thanks to @marchermans who spotted the issue, and insisted enough for me to find it!\r\n\r\nI also edited the javadoc to clarify the meaning of the various return values for the event. FYI, here is what the rendered javadoc looks like now:\r\n![image](https://user-images.githubusercontent.com/13494793/203938593-f604ea84-4c9e-462d-83ee-113519c03522.png)\r\n",
    "head_branch": "fix-block-attack",
    "is_a_fork": true,
    "comments": [
      "Oh yes baby. Thanks for finding this. This has been holding up the C&B release for weeks because i thought i had a bug on my end!",
      "I will merge this when we do the next 1.19.2 release as well. 👍 "
    ],
    "commit_messages": [
      "AttackBlockCallback: creative fix and javadoc update (#2691)\n\n* AttackBlockCallback: creative fix and block break delay\r\n\r\n* More return value clarifications\r\n\r\n* Revert CONSUME_PARTIAL behavior\r\n\r\n* Apply suggestions from code review\r\n\r\nCo-authored-by: Juuz <6596629+Juuxel@users.noreply.github.com>\r\n\r\nCo-authored-by: Juuz <6596629+Juuxel@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306b10ac82a74541b2159",
    "number": 2690,
    "body": "Ehm.. So I changed the branch name. I didn't think it would close the pr. #2675\r\nAnyway, this is the same as before.\r\n\r\n> Added an event that is fired when ItemStack#getTooltipData is called. After the event, if possible data list is wrapped with a BundledTooltipData which is later converted to BundledTooltipComponentImpl and rendered.",
    "head_branch": "tooltipdataevent",
    "is_a_fork": true,
    "comments": [
      "Just noticed one thing: this shouldn't be in the client package.",
      "Actually, I just noticed one thing:\r\n\r\nIf this is an event, what's the point of using `TooltipData` at all? We could just go for a client-only event to combine `TooltipComponent`s... Or is vanilla making this harder than it should be? 🤔",
      "By default implementation of vanilla you don't have access to the stack while constructing components, they are handled in different methods.\r\n\r\n<details>\r\n  <summary>Code block from Screen</summary>\r\n\r\n```java\r\n    protected void renderTooltip(MatrixStack matrices, ItemStack stack, int x, int y) {\r\n        this.renderTooltip(matrices, this.getTooltipFromItem(stack), stack.getTooltipData(), x, y);\r\n    }\r\n\r\n    public void renderTooltip(MatrixStack matrices, List<Text> lines, Optional<TooltipData> data, int x, int y) {\r\n        List<TooltipComponent> list = (List)lines.stream().map(Text::asOrderedText).map(TooltipComponent::of).collect(Collectors.toList());\r\n        data.ifPresent((datax) -> {\r\n            // TooltipComponentCallback is fired here\r\n            list.add(1, TooltipComponent.of(datax));\r\n        });\r\n        this.renderTooltipFromComponents(matrices, list, x, y);\r\n    }\r\n```\r\n</details>\r\n\r\nWe can't really change anything without basically overwriting the one with the stack.",
      "Apperently I don't know how to request reviews. Why does it remove others when requesting from someone?",
      "By the way I would like to move `TooltipComponentCallback#EVENT` invoker from `Screen` to `TooltipComponent.of`. It's more generalized. And makes the event compatible with mods that don't require fabric api, as they'll use that method to get components.",
      "> By the way I would like to move `TooltipComponentCallback#EVENT` invoker from `Screen` to `TooltipComponent.of`. It's more generalized. And makes the event compatible with mods that don't require fabric api, as they'll use that method to get components.\r\n\r\nYes, that's a good idea. Probably fine for this PR.",
      "> Why is this not in the rendering API? It could go there next to the existing TooltipComponentCallback event.\r\n\r\nI guess you placed it next to the `ItemTooltipCallback`, which makes sense. So maybe leave it in the item API, but move it to the client source set?",
      "Well I put it in the item API because it's where `ItemTooltipCallback` is. \r\nAlso with my last commit I moved everything to client sourceset to match the change in #2755 \r\nand refactored the mixin package on the client sourceset to match the standard.\r\n`mixin.item.client` -> `mixin.client.item`",
      "> > Why is this not in the rendering API? It could go there next to the existing TooltipComponentCallback event.\r\n> \r\n> I guess you placed it next to the `ItemTooltipCallback`, which makes sense. So maybe leave it in the item API, but move it to the client source set?\r\n\r\nOk I don't know how I missed this entire message but I did exactly what you asked anyway :D",
      "~~Workflow fail is not related to me. It fails to download something and throws a `FileNotFoundException`.~~ Nevermind it succeeded.",
      "I am in favor of a change like this but I think the implementation is a little restrictive, even with current events you don't really have any control over where you are adding components. I think I can mockup a pr in a day or two for may take on an implementation if you'd like to see.\r\n\r\nAlso I'm not really fond of the wrapper `Entry` interface, I think text wrapping function should be implemented through interface injection to `Text` class. With methods like `doWrap(boolean)` and `shouldWrap()`. Then convert to a different `TooltipComponent` if they should be wrapped.",
      "Interface injection into Text would be confusing, as it is used in many places that have different rules about wrapping. Better alternative would be replacing list with custom class like ItemGroup do for example",
      "> Interface injection into Text would be confusing, as it is used in many places that have different rules about wrapping. Better alternative would be replacing list with custom class like ItemGroup do for example\r\n\r\nAh yes, I forgot everything is Text. By the way I was just trying something similar to your suggestion, using a custom list for stack tooltips.",
      "@Technici4n I did a pretty small thing, can you check it and let me know what you think. [The branch](https://github.com/Sideroo/fabric/tree/tooltips)\r\n\r\nIn summary, I replaced the list in `ItemStack#getTooltip` with a custom one that directly stores `TooltipComponent`'s inside itself. Texts are converted to components via a new event (only in some places, will check for other applicable places). I believe this event can be used for checking if the text should be wrapped and if so return a custom component. Added `ItemTooltipEvents` invoked in different stages of `ItemStack#getTooltip`.\r\n",
      "Why not use event phases for ordering?\r\n\r\nI think requiring an explicit wrapping parameter isn't too bad, it forces the modder to choose and generally be aware of wrapping, while keeping it opt-in. We could add a record constructor that sets wrapping to `true` if you think it'd too verbose otherwise.\r\n\r\nI went for the list because I thought it would be the simplest way to do what I wanted.\r\n\r\nAnd I went for the sealed interface because we fundamentally can have two types of entries. This is still a bit awkward at the moment, but it will get nicer with record switched and patterns in a few java versions. :)\r\n\r\nI think my solution is likely the simplest, but of course feel free to suggest anything else, and in any case thanks for tackling this. :)",
      "Just saw your message, I'll be able to check what you did in ~20 mins.",
      "> Just saw your message, I'll be able to check what you did in ~20 mins.\r\n\r\nNo need to rush, It's late for me anyways. I can't check back till morning.",
      "A few comments:\r\n- I don't really see the point of `TextToComponentCallback` ? Is that for tooltip wrapping ? Cause the point of wrapping is to be reasonably automatic, and I don't want it to be more complicated than passing some boolean value. Requiring a separate event is quite annoying as that requires a lot of extra work for modders, and I think we want all wrapped tooltips to be wrapped in the same way, which doesn't work if every modder does it their way.\r\n- The approach of working directly at the `ItemStack#getTooltip` level is quite interesting. The `TooltipList` should definitely not be in the API though, it's too hacky imo.\r\n- We need a reasonable way to inspect tooltips, that's why I don't like immediately converting the `Text` to a `ClientTooltipComponent`. The simple solution is to delay this conversion so that it happens after the event(s).\r\n- This won't work nicely for non-item tooltips, but those could likely use a separate event with a somewhat similar system? At least the phases wouldn't be needed there.\r\n- `ItemStack#getTooltip` is missing some context such as the current screen and the mouse position. These might be useful to have in a more general event, but maybe not for item stacks? What if item tooltips went through 2 events (item-specific one injecting in `getTooltip` and more general tooltip-rendering event)?",
      "* Yes, the `TextToComponentCallback` event looks unnecessary.\r\n* I don't think returning an extension of the previously returned value is hacky.\r\n* Wanting to delay `Text` to `ClientTooltipComponent` is reasonable, maybe instead of an internal `ClientTooltipComponent` list we can use list of a wrapper interface like you suggested above.\r\n* I agree with the idea of having two events.\r\n\r\nI'll look deeper into this when I have some time.",
      "> I don't think returning an extension of the previously returned value is hacky.\r\n\r\nThe concept in general is not, but extending `ArrayList` to also add support for other kinds of entries is extremely hacky. I also don't think remove will work correctly if someone tries to remove something from the middle of the list. This makes me think that my original suggestion might be the simplest to implement. :P",
      "I updated [the branch](https://github.com/Sideroo/fabric/tree/tooltips) again. I believe this is somewhat closer to what you were looking for. If the feature is likely to happen I can open a pr for it after I make it more fabric-like.\r\n\r\n> * The approach of working directly at the `ItemStack#getTooltip` level is quite interesting. The `TooltipList` should definitely not be in the API though, it's too hacky imo.\r\n\r\nDid you mean the `api` package by this? I think I misunderstood you and thought you meant the class is too hacky. Now that I am re-reading this I think you mean it shouldn't be directly exposed in the events and should be in the `impl` package? Am I right?\r\n\r\n",
      "I meant the `api` package, but I'd say it's very hacky and doesn't properly handle removals in general. I think this general approach doesn't work very nicely with removals or modification of tooltip entries in general.\r\n\r\nWhat I would do instead if I wanted to insert a `ClientTooltipComponent` in a very specific position using one of these events:\r\n- Add a marker `Text` that I could replace later. Maybe something like `Text.literal(\"mymod:tooltip_component_marker\")`.\r\n- I would replace the marker `Text` by a proper `ClientTooltipComponent` later on in the more general tooltip event that I suggested.\r\n\r\nSadly this is not the cleanest solution as far as API goes, but it's the most compatible one with what vanilla is doing I believe?\r\n\r\nSo, TLDR of what I suggest:\r\n- Pass a `List<Text>` to the various hooks in `ItemStack#getTooltip`.\r\n- Add an event to modify the tooltip similar to what I suggested in https://github.com/FabricMC/fabric/pull/2690#pullrequestreview-1217901703.\r\n\r\nOf course feel free to disagree, but I think the `TooltipList` with its current design is trying too much to hack around vanilla, and this won't work nicely with existing `ItemTooltipCallback` listeners.",
      "> [...], but move it to the client source set?\r\n\r\nTooltipData are not client-only so I'm not entirely sure it makes sense to have the TooltipData part be client-only.",
      "`TooltipData` only exists because `TooltipComponent` can't be used in common classes; it's only used on the client side."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306b20ac82a74541b215a",
    "number": 2689,
    "body": "Adds a coverage task used to genrate a JaCoCo coverage report (See build output). Datagen is not included, but this does include the client run, and gametests.\r\n\r\nIm unsure if this is worth runing for every build as it can be a little slow. I think its worth adding even if it needs to be ran manually.",
    "head_branch": "coverage",
    "is_a_fork": true,
    "comments": [
      "I would maybe not run it in the CI, as it is also a bit of a waste. It's nice to have the option to run it locally to evaluate how we're doing wrt. tests though.",
      "Yeah, I agree and thats my plan. Just giving it a quick test on GHA to see how slow it is :D",
      "Took 16 mins (3 on my local machine) So yeah run it manually when needed 👍 "
    ],
    "commit_messages": [
      "Add coverage task (#2689)\n\nTo be ran manually as needed."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306b30ac82a74541b215b",
    "number": 2688,
    "body": "At first I just wanted to remove the useless mixins. Then I realised `FrameBlock#onUse` needed cleaning up, and something needed to be written to the tag of the frame BE in all cases.",
    "head_branch": "cleanup-renderer-testmod",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Cleanup Renderer API testmod (#2688)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306b40ac82a74541b215c",
    "number": 2686,
    "body": "Closes #2600.\r\n\r\nReplaces this kind of ugly code from MI:\r\n![image](https://user-images.githubusercontent.com/13494793/203543992-6d67fec5-228f-4c20-8424-ebbf51ec4f8f.png)",
    "head_branch": "model-unwrapping",
    "is_a_fork": true,
    "comments": [
      "Is this for 1.19.3 only?",
      "It's version independent and could be backported if we wanted to, but it's also not critical... More of a long-term improvement over the current workarounds. @PepperCode1 what do you think?",
      "I think it should be added to 1.19.2 and 1.18.2 just in case.",
      "Should technically go in last call, but prob doesnt need the whole week 👍 "
    ],
    "commit_messages": [
      "Add `BakedModel` unwrapping API (#2686)\n\n* Add BakedModel unwrapping API\r\n\r\n* Allow WrapperBakedModel to not have an inner model"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306b50ac82a74541b215d",
    "number": 2685,
    "body": null,
    "head_branch": "trapi-chiseled-bookshelf",
    "is_a_fork": true,
    "comments": [
      "Note for future self: Rebase and merge this"
    ],
    "commit_messages": [
      "Add transfer API Chiseled Bookshelf support (#2685)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306b50ac82a74541b215e",
    "number": 2684,
    "body": "Currently FabricItemGroupBuilderImpl doesn't do anything with the id. I assume this is a oversight and made a pr to fix it.\r\nCurrently I just GROUP_ID_MAP mutable and append the group and id to that. other solutions are possible. but I think this one has the smallest impact.",
    "head_branch": "1.19.3-tabs-fix",
    "is_a_fork": true,
    "comments": [
      "Hmm, can't we store it in a field of the instance?",
      "Good spot, definally an oversight from one of the ports.",
      "Many thanks for the PR, due to the urgency of this, I pushed the fix here: https://github.com/FabricMC/fabric/commit/8790b57d8c1cb37c0f9fc0f5a14e9a39f97d167d"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306b60ac82a74541b215f",
    "number": 2683,
    "body": "Requires all modules updating due to loom update.\r\n\r\nDont add testmod jars as it was causing testmod jars to be generated for mods without a testmod. We dont publish them anyway.",
    "head_branch": "client_only_license",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add license to client only etries for client modules. (#2683)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306b70ac82a74541b2160",
    "number": 2682,
    "body": "No breaking change, major deprecations.\r\n\r\n## Rationale\r\nQuite a lot of mods misuse the Networking API. They call methods of the game within the network IO thread instead of server/render thread. This is very problematic:\r\n\r\n- The network thread could cause a CME, disconnecting the user.\r\n- Or the opposite, which is much worse: the server thread crashes with CME.\r\n- Game could malfunction in a weird way.\r\n- Fastutil objects do not check concurrent modifications, causing object corruption that is potentially exploitable. (See \"Any Falling Block\", an example of such bug in 1.12.2)\r\n\r\nThis isn't a rare occurrence - if you do a code search it is very easy to find hundreds of buggy code. And unlike the other threading bug (reading packet buf in server/render thread), this doesn't always crash.\r\n\r\n## Solution\r\nTODO",
    "head_branch": "networking-api/thread-safety-redo",
    "is_a_fork": true,
    "comments": [
      "I suggest letting mods register one packet -> data object function and one data object + client/server player consumer, like for resource API, which is less error-prone and has cleaner user code. The original API should be kept as it offers max functionality possible, but renamed to like 'registerAdvancedGlobalReceiver' etc.",
      "I'm not going to make a breaking change here, and I don't think the packet object design works well/is easier to use.",
      "A higher level API that functions with Codec's may be an idea? Im not too sure how much it would get used though?",
      "Codec is a bit complex for most uses. Though if we want packet object design (like in vanilla) I can add it.\r\n\r\nPoll: should we adopt the packet object design?",
      "The packet object design doesn't need you to write one lambda within another and already has an analogue in resource api. It's also much like vanilla packets having a constructor called on event loop and apply called on engine thread.\r\n\r\nalso i still suggest keeping the original api as it is useful for other purposes.",
      "@liach Applying Deprecated annotation is the best way to indicate discouragement. (Notice there is no forRemoval.) For the unregister method, the return value could be changed to a simple boolean to not expose backing lambda (no mods use it anyway).",
      "After some consideration, I think this approach is good. We just need to bikeshed naming and how exactly we encourage people to move to the safer alternatives a bit. :smile:\r\n\r\nI'm not a fan of packet objects cause they introduce a lot of boilerplate.",
      "Will make a new PR."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306b80ac82a74541b2161",
    "number": 2681,
    "body": "Used to allow data generation against custom dynamic registry entries such as biomes. Im not too happy with the way I build up the merge RegistryBuilder, I may revist this.",
    "head_branch": "datagen_registry_builder",
    "is_a_fork": true,
    "comments": [
      "I think the new API is fine (just need to cleanup the testmod as I said above).\r\n\r\nNot sure about the exact implementation of merging, but that can easily be improved later on without API breaks, so I wouldn't worry too much about it. :+1:",
      "@Technici4n I have cleaned up the testmod a little, hopefully its a bit more clear now. 👍 ",
      "Done, I dont think its really needed but we might as well use it."
    ],
    "commit_messages": [
      "Add DataGeneratorEntrypoint.buildRegistry (#2681)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306b90ac82a74541b2162",
    "number": 2679,
    "body": "Closes #2665.\r\n\r\nAlso properly fixes Juuxel/Adorn#295 and similar issues where all the entries in a fluid tag like `#minecraft:water` or `#c:milk` are converted to fluid variants without manually checking for flowing fluids. (I'd also note that the crashing is undocumented and unexpected behaviour)",
    "head_branch": "flowing-to-still",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Convert flowing fluids to still ones in fluid variants (#2679)\n\n* Convert flowing fluids to still ones in fluid variants\r\n\r\nCloses #2665.\r\n\r\n* Improve error message"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662306b90ac82a74541b2163",
    "number": 2678,
    "body": "Currently we have a number of automated tests that run on a server (auto test server and game tests), but we have no automated testing of the client. This PR is a proof of concept showing how we might be able to run the full client within github actions. This also runs the game with intermediary names, the same as a \"production\" client.\r\n\r\nThis PR is currently able to load the client, create a new creative world and gracefully save and exit. This is done by automating the UI. Screenshots are also generated and uploaded after the test completes.\r\n\r\nI uploaded a short video showing the tests running on my local machine: https://www.youtube.com/watch?v=CdfCJUZNgo8\r\n\r\nThis isnt designed to be used by other mods and is only included in Fabric API's test mods.\r\n\r\n",
    "head_branch": "client_auto_test",
    "is_a_fork": true,
    "comments": [
      "Incase you were wondering, GHA gets ~6FPS 😄 \r\n![in_game_overworld](https://user-images.githubusercontent.com/4324090/202929904-7a3c2573-f077-4ba9-a521-b565bf22c4b8.png)\r\n",
      ":+1: This is really cool to see!\r\n\r\nNot sure how useful this is, but also recently been having a stab at client tests (https://github.com/cc-tweaked/CC-Tweaked/pull/1219, though not sure how useful the diff actually is. Also, Mojmap warning). One pattern I've found pretty useful is writing client-side tests using vanilla's gametest framework.\r\n\r\nEach client-side test is run in its own batch, and so has exclusive control of the player. Tests can then teleport the player around, make the player perform interactions, and then run assertions on the client or server. I've an example test [here](https://github.com/cc-tweaked/CC-Tweaked/blob/737d8a2585c7ebbb28fe02a49ac38cccf8c72375/projects/common/src/testMod/kotlin/dan200/computercraft/gametest/Computer_Test.kt#L90) (again, Mojmap warning) - apologies for the Kotlin DSL I've built on top of everything :D:.\r\n\r\nThat all said, while I think this is useful for content mods, possibly less helpful for library mods/Fabric API - the sorts of things which need testing are quite different! Not sure! :)",
      "Thanks :) \r\n\r\nWhat you have looks great, and think is similar to what this could be if we wanted to expand it beyond a smoke test and/or provide an API for other mods to use. Im a little on the fence if this is out of scope or not for Fabric API. Having seen how well what I have so far works it does give me more confidence in opening this up for other mods.\r\n\r\nLike you said I cannot think of too many cases were we could write meaningful client tests in fabric API, the main thing I was after to was to just check it doesnt crash basically."
    ],
    "commit_messages": [
      "Add automated client smoke tests. (#2678)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306ba0ac82a74541b2164",
    "number": 2675,
    "body": "Added an event that is fired when `ItemStack#getTooltipData` is called. After the event, if possible data list is wrapped with a `BundledTooltipData` which is later converted to `BundledTooltipComponentImpl` and rendered.",
    "head_branch": "1.19.3",
    "is_a_fork": true,
    "comments": [
      "Hi, would you mind explaining what exactly this adds, and for which use cases?",
      "Minecraft's tooltip data implementation is pretty strict, it only allows one tooltip data and getter method must be overridden to return a custom data. Through this event mods can provide custom tooltip data's to be rendered in the stack's tooltip however they like. \r\n\r\nMod dependent example: A mod has a fluid container implementation for it's items through an interface and wants to render the contained fluid, so it has to override the same method for each item unless they extend the class. With this event they can simply add their data with a instance of check.\r\n\r\nMod independent example: A mod can add weights to all items, like Light and Heavy. And to fancily display this on the items, it can listen to this event and render a feather or an anvil based on items weight.\r\n\r\nThese might be uncommon scenarios, and may be this event just doesn't fit inside fabric's scope, but it's just an idea of mine.",
      "Here is the test. \r\n2 spaces between components might be more than needed.\r\n![](https://i.imgur.com/p3iCuoR.png)\r\n",
      "Thanks for the explanation, I think this feature is in scope. I will take some time to think about how exactly it should be implemented, but I think an event is a good approach. :)",
      "Removed the spacing between components to match vanilla, though they are still far apart from each other.\r\n\r\n<details>\r\n  <summary>New Preview</summary>\r\n   <img src=\"https://i.imgur.com/PgVRq5n.png\"/>\r\n</details>"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306bb0ac82a74541b2165",
    "number": 2674,
    "body": null,
    "head_branch": "patch-5",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix crash in 1.19.3 stack remainder test port (#2674)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306bc0ac82a74541b2166",
    "number": 2670,
    "body": "`BrewingRecipeRegistry` uses Ingredients internally, but the registration methods only support items. This PR adds a new API class with counterparts that accept Ingredients instead of Items, allowing tags to be used.\r\n\r\nThis does not include an Ingredient counterpart to `net.minecraft.recipe.BrewingRecipeRegistry.registerPotionType(Item)`.\r\nThe backend code does support Ingredients, but I'm unsure if it's useful to have multiple items that represent a single potion type (e.g. splash, regular, lingering)",
    "head_branch": "brewing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "API for brewing recipes which use Ingredients instead of Items (#2670)\n\n* API for brewing recipes which use Ingredients instead of Items\r\n\r\n* Improve comments and JavaDoc\r\n\r\n* Update mixin compatibility level\r\n\r\n* Replace accessor mixin with access widener\r\n\r\n* Fix double space\r\n\r\nCo-authored-by: Juuz <6596629+Juuxel@users.noreply.github.com>\r\n\r\nCo-authored-by: Juuz <6596629+Juuxel@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662306bd0ac82a74541b2167",
    "number": 2669,
    "body": "This is a bug caused by vanilla being weird and mods doing Silly Things(TM), so happy for it to be closed if it's out of scope.\r\n\r\n## Background\r\nCC: Tweaked/CC: Restitched add programmable computers to Minecraft, allowing you to write code in game. One of the features this mod provides is the ability to interact with inventories with user-written programs.\r\n\r\nWhen a computer interacts with an inventory, it's useful for it to have a \"complete\" view of the whole inventory, rather than a per-side view. In order to achieve this, we attempt to obtain a directionless view of an inventory with `InventoryStorage.of(blockEntity, null)` before falling back to the directional block lookup API[^1].\r\n\r\n## The Bug\r\nWhen `InventoryStorge` is not given a direction, it only checks validity of inserts using `Inventory.isValid` and _not_ `SidedInventory.canInsert`.\r\n\r\nThis is generally the correct thing to do (while `SidedInventory.canInsert` does accept a `null` side, its semantics are unclear[^2] and so I think best avoided). However, shulker boxes only override `canInsert` and not `isValid`, meaning a directionless `InventoryStorage` allows moving shulker boxes inside other shulker boxes!\r\n\r\nThis patch updates shulkers to also implement `isValid`, preventing this behaviour.\r\n\r\n[^1]: Maybe the solution here is just to add a directionless version of the block lookup API, but that feels like a much harder task :D.\r\n\r\n[^2]: For instance, composters don't accept inserts on the `null` side. ",
    "head_branch": "hotfix/sided-inv",
    "is_a_fork": true,
    "comments": [
      "Do you know of any way to trigger this issue in vanilla/is there an MC bug for this? We want to be careful not to fix any bugs like this in vanilla that people may depend on.",
      "> Do you know of any way to trigger this issue in vanilla/is there an MC bug for this? \r\n\r\nI don't _think_ so, but definitely agree with your concerns. Will follow Technici4n's advice and move this to the slot wrapper.\r\n\r\nThanks both!"
    ],
    "commit_messages": [
      "Fix shulker boxes accepting other shulkers when using a directionless `InventoryStorage` (#2669)\n\n* Fix shulker boxes accepting other shulkers\r\n\r\nIf a mod creates a directionless InventoryStorage, it only calls\r\nInventory.isValid and not SidedInventory.canInsert. However, shulker\r\nboxes only override the latter, allowing shulkers to be inserted into\r\nthem.\r\n\r\n* Check for insertion in inventorySlotWrapper instead"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662306bd0ac82a74541b2168",
    "number": 2668,
    "body": "This is an alternative version of #1501. This aims to solve the same problems, but in a slightly more stripped down way.\r\n\r\n## Motivation\r\nVanilla Minecraft initially loads translations through `ClassLoader.getResourceAsStream`, rather than using the currently loaded resource packs. While these translations are later replaced on the client, this does not happen on the server, meaning modded language keys are never translated.\r\n\r\nThis is especially annoying when in the server console. For instance, even on a server with _just_ fabric-resource-loader-v0-testmod loaded, it's very easy to start seeing untranslated strings:\r\n\r\n```\r\n> /datapack list\r\nThere are 2 data packs enabled: [vanilla (built-in)], [Fabric Mods (pack.source.fabricmod)]\r\nThere are 1 data packs available: [fabric-resource-loader-v0-testmod/test2 (pack.source.builtinMod)]\r\n```\r\n\r\n## Changes\r\nThis PR loops through all currently loaded mods, reads `/assets/lang/{mod_id}/en_us.json` and adds its entries to the currently loaded language map.\r\n\r\nUnlike the vanilla language loader, we use a `HashMap`, meaning that duplicate language keys are allowed. Mods are iterated in load-order, with later mods overriding earlier ones. I don't think this behaviour should be relied on, just noting it for completeness.\r\n\r\n## Scope\r\nThis PR is intentionally limited in scope: its aiming to fix a flaw in Fabric API and mimic vanilla behaviour, rather than adding a more fleshed-out language system. Support for server-side resource packs or alternative languages are (IMO) better served by mods like [Server Translations](https://github.com/NucleoidMC/Server-Translations).",
    "head_branch": "feature/server-language",
    "is_a_fork": true,
    "comments": [
      "Amazing, thank you all!"
    ],
    "commit_messages": [
      "Load modded translations on the server (#2668)\n\n* Load modded translations on the server\r\n\r\n* Don't load built-in mods"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306be0ac82a74541b2169",
    "number": 2667,
    "body": "Adds an entity selector option API.\r\n\r\n## FAQ\r\n### Is this a port from (insert another API library)?\r\nNo. The underlying design might be similar (after all, this is just a wrapper method), but the code is written entirely by me. This also adds an easy way to make a non-repeatable selector.\r\n\r\n### Is this tested?\r\nYes, actually this is tested using GameTest!",
    "head_branch": "command-api/entity-selector",
    "is_a_fork": true,
    "comments": [
      "I noticed that you can use Identifier as the key, but it needs to be quoted for it to work. Should we do that instead of replacing it with underscores? Might need to hack around the autocomplete suggestion though.",
      "@deirn I don't think that's very useful."
    ],
    "commit_messages": [
      "Entity Selector Option API (#2667)\n\n* Entity Selector Option API\r\n\r\n* Fix compile error\r\n\r\n* Add default impl\r\n\r\n* Apply suggestions from code review\r\n\r\nCo-authored-by: Technici4n <13494793+Technici4n@users.noreply.github.com>\r\n\r\nCo-authored-by: modmuss50 <modmuss50@gmail.com>\r\nCo-authored-by: Technici4n <13494793+Technici4n@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306bf0ac82a74541b216a",
    "number": 2666,
    "body": "Backport of https://github.com/FabricMC/fabric/commit/ce46c4cf92aacd3ce0867a60e5179d7adcb6ca5d",
    "head_branch": "nether_biome_injection",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Adjust nether biomes injection point (#2666)\n\nCo-authored-by: apple502j <33279053+apple502j@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306c00ac82a74541b216b",
    "number": 2664,
    "body": "See FabricMC/yarn#3412",
    "head_branch": "22w46a-gson-link",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update Gson javadoc link (#2664)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306c10ac82a74541b216c",
    "number": 2659,
    "body": "Pretty self-explanatory.",
    "head_branch": "fix-2657",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #2657: Transfer API edge case with bad isValid overrides (#2659)\n\nCo-authored-by: modmuss50 <modmuss50@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662306c10ac82a74541b216d",
    "number": 2658,
    "body": "Adds a new resource condition to check whether a feature is enabled.\r\n\r\nMojang: please make FeatureFlag a record\r\n\r\n\r\nTested, works.",
    "head_branch": "resource-conditions/feature-enabled",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Resource Conditions: add feature_enabled (#2658)\n\n* Resource Conditions: add feature_enabled\r\n\r\n* Fix impl\r\n\r\n* Some refactors\r\n\r\n* Address reviews\r\n\r\n* Update testmod\r\n\r\n* Fix checkstyle\r\n\r\n* Move javadoc\r\n\r\n* Sort identifiers"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306c20ac82a74541b216e",
    "number": 2653,
    "body": "- Resolves #2652 \r\n- Fixes #2603 - a bug where special item groups get modified (observable via tooltips showing \"Survival Inventory\" or \"Saved Hotbars\")\r\n- Fixes a bug where switching a page always selects Saved Hotbars tab due to sort order\r\n- Marks the client impl as internal",
    "head_branch": "item-group-api/22w45a-bugfix",
    "is_a_fork": true,
    "comments": [
      "This pull request fixes #2603 as well."
    ],
    "commit_messages": [
      "Item Group API: fix bugs in 22w45a port (#2653)\n\n* Fix item group being missing when Operator Tab is hidden\r\n\r\n* Do not modify special item groups\r\n\r\n* Mark impl as internal\r\n\r\n* Select the modded tab after switching tabs\r\n\r\n* Allow adding items to Operator Blocks"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306c30ac82a74541b216f",
    "number": 2650,
    "body": "PlayerManager now keeps its own copy of DRM, so modify nether biomes just before that. This mixin now applies just before biome modification kicks in.",
    "head_branch": "biome-api/22w45a",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Biome API: modify Nether biomes a bit earlier (#2650)\n\n* Biome API: modify Nether biomes a bit earlier\r\n\r\n* Add comment"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306c40ac82a74541b2170",
    "number": 2647,
    "body": "Item Group changes are the most impactful for mods. Basic usage bellow (Full docs will come once into pre-releases)\r\n\r\n```java\r\n private static final ItemGroup ITEM_GROUP = FabricItemGroup.builder(new Identifier(MOD_ID, \"test_group\"))\r\n   .icon(() -> new ItemStack(Items.DIAMOND))\r\n   .entries((enabledFeatures, entries, operatorEnabled) -> {\r\n      entries.add(TEST_ITEM);\r\n   })\r\n   .build();\r\n```",
    "head_branch": "22w45a",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "22w45a (#2647)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306c50ac82a74541b2171",
    "number": 2646,
    "body": "Added Client Message Events including\r\n\r\n- AllowSendChatMessage, SendChatMessage\r\n- AllowSendCommandMessage, SendCommandMessage\r\n- AllowReceiveChatMessage, ReceiveChatMessage\r\n- AllowReceiveGameMessage, ReceiveGameMessage",
    "head_branch": "clientScreenEvents",
    "is_a_fork": true,
    "comments": [
      "Ok, should be fixed. Also [this](https://github.com/FabricMC/fabric/pull/2618) should be ready for merge.",
      "I think this event should capture all messages and commands sent/executed by the player, including client commands. This gives a way to override all messages and commands. I have updated the docs to reflect this behavior.",
      "I applied the suggestions.",
      "@kevinthegreat1 Can you test if the PR still works with the latest prerelease?",
      "@apple502j Still works in 1.19.3-rc1. I don't expect them to make changes to chat for at least a while.",
      "I don't know why the build failed. Also, I can't find a rerun button in the details now. Can somebody rerun the checks?",
      "Modifying a received chat message seems to be difficult. The signature and narration would be wrong if we change the message. Is it ok if we only changed the displayed message and leave the narration? Also, the player might be seeing different messages than the ones in the log which causes all sorts of issues with chat reporting.",
      "> Also, the player might be seeing different messages than the ones in the log which causes all sorts of issues with chat reporting.\r\n\r\nAh right, that's a good point.",
      "I have added the ability to modify messages. Currently, modified received chat messages are marked with the `Modified by Server` indicator and modified received game messages are not changed and mark with `Game Message` indicator. This is not really accurate and to make it accurate we will have to add our own indicator like `Chat/Game Message Modified by client`.",
      "I have not tested this on multiplayer servers. How do I build a jar for the test mod?",
      "> I have not tested this on multiplayer servers. How do I build a jar for the test mod?\r\n\r\n`gradlew remapTestmodJar` I think?",
      "In that case, maybe it's best to leave out modification entirely (for now at least) ?",
      "Currently, it should keep the original message in the chain. When reporting, you should see the unmodified message.",
      "> The modification events should have modify in the name I think. So `GAME` -> `MODIFY_GAME`, `Game` -> `ModifyGame`, `onReceiveGameMessage` -> `modifyReceivedGameMessage` or something like that.\r\n> \r\n> Do we need plain notification events that get called with the modified message? (Don't think so).\r\n\r\nThe main problem is that people won't know which one to use if they just want to listen for messages. Thats why I didn't add `MODIFY` in front.",
      "Works as intended in multiplayer. Modified secure chat messages are marked with modified indicator when modified on receive. Already modified messages or game messages are not changed. Chat reports use original unmodified and signed messages.",
      "Just to be clear: the unmodified and original message is logged in the chat log, not the modified message.",
      "Yeah, that's quite problematic indeed. I think modification should be removed entirely. 😓",
      "I think if we remove it, mod devs would use less thoughtful ways to achieve this and cause more trouble for users.",
      "I don't see a big problem with the current implementation. Players see the original unmodified message when hovering over the message and when reporting.",
      "@kevinthegreat1 I believe the best solution is, as I said, to cancel and resend. If you're busy I can open a PR with that. What do you think?",
      "I think the best solution is what we have currently. There will be gaps in the log and lack of context when reporting if we cancel the modified messages. Players see the original message when reporting. If you really don't think this is good I can update the pr.",
      "It seems like the best solutions are always narrate the original message or don't narrate modified messages. Do you have any suggestions?",
      "Hmmm, both options are not ideal. There's also the option to remove modification.",
      "Is it fine to just leave it there and maybe add a warning to mods? The modification feature doesn't affect anything when it's not used.",
      "Modification is a security-sensitive part of the API, and I still believe the only way to do it is to cancel and send as system message.\r\n\r\nI don't remember the specific details on how chat reporting works in 1.19.3, but it should be still true that clients send a message acknowledgment to the server, which constitute part of \"evidences\" signed and sent in a chat report. If the user sees a message modified by the client, the user didn't acknowledge the original message.\r\n\r\nSure, we could do what others are doing (see QuiltMC/quilt-standard-libraries#250) and implement a big chat API that is capable of doing everything. It might have made sense in 1.18, but now that the system is more complicated, exposing a bigger API surface is probably more of a maintenance burden than a benefit, especially here where an update is released within hours of snapshot release. There are not that much uses in client-side modifications as far as I can see. Plus, when an API is too costly to maintain here but is still useful, there's still an option to release it as a third-party API (like with Terrablender).\r\n\r\nIf we're keeping the modification functionality, it should just be a wrapper of cancellation event; if a message is modified, cancel and add ourselves. (Also, should this modify the original message or the decorated message? I prefer the former one, and perhaps using `Pair` of `Text` and `MessageType` so that narration works properly.)",
      "Yes. I agree with the potential security issues related to users not actually seeing the message and the maintenance cost. I did not think of this. I am removing modification for received chat messages. There is now a message in the docs directing mods to use the allow event and add modified messages to the hud manually.\r\n\r\nLooking at the quilt implementation, it seems like they're not dealing with all the char reporting. They're modifying the packet when it gets received. It will probably get handled the same way as chat messages modified by the server.",
      "There are separate events for listening and modifying now."
    ],
    "commit_messages": [
      "Added Client Message Events (#2646)\n\n* Added Client Message Events\r\n\r\n* Applied suggestions and fixed checkstyle\r\n\r\n* Inject before fabric-command-api and updated Javadocs\r\n\r\n* Updated Javadocs regarding client commands\r\n\r\n* Update fabric-message-api-v1/src/client/resources/fabric-message-api-v1.client.mixins.json\r\n\r\nCo-authored-by: Juuz <6596629+Juuxel@users.noreply.github.com>\r\n\r\n* Updated Javadocs regarding commands\r\n\r\n* Fixed duplicated package names\r\n\r\n* Updated ClientMessageEvents.java Javadoc\r\n\r\nCo-authored-by: Sideroo <109681866+Sideroo@users.noreply.github.com>\r\n\r\n* Removed duplicated client commands Javadoc\r\n\r\n* Added cancelled sending and receiving events\r\n\r\n* Seperated send and receive events and changed event names\r\n\r\n* Fixed checkstyle\r\n\r\n* Added support for modifying messages\r\n\r\n* Added client command test\r\n\r\n* Added narration and message indicator support for modifying received messages\r\n\r\n* Added tests for modifying messages\r\n\r\n* Updated ClientReceiveMessageEvents#CHAT Javadocs\r\n\r\n* Small Javadoc fixes\r\n\r\n* Added Modify to names\r\n\r\n* Always narrate original message\r\n\r\n* Removed modifying receive chat message\r\n\r\n* Split notify and modify events\r\n\r\n* Fixed checkstyle\r\n\r\n---------\r\n\r\nCo-authored-by: Juuz <6596629+Juuxel@users.noreply.github.com>\r\nCo-authored-by: Sideroo <109681866+Sideroo@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662306c60ac82a74541b2172",
    "number": 2638,
    "body": "It seems like Mojang also changes the name for this. This can be used for message types, which is definitely not worldgen.",
    "head_branch": "data-gen/worldgen-rename",
    "is_a_fork": true,
    "comments": [
      "Yeah I thought about this, but it'll make it relatively hard to discover for people looking for \"How to do worldgen now\".\r\n\r\nWe probably need good release notes for 1.19.3 :-D",
      "Please fix conflict, sorry another one I should have done with the last release..."
    ],
    "commit_messages": [
      "Rename FabricWorldgenProvider to FabricDynamicRegistryProvider (#2638)\n\n* Rename FabricWorldgenProvider\r\n\r\n* Fix merge"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306c60ac82a74541b2173",
    "number": 2637,
    "body": null,
    "head_branch": "item-group-api/permissions",
    "is_a_fork": true,
    "comments": [
      "I rather... quickly... called it showAdminItems :-D\r\nShould it be showOpItems? What's the term we wanna use for the permission-level they check for? is it \"op\"? or \"admin\"?",
      "p.s.: otherwise LGTM",
      "Ah, should have pulled this into the new 1.19.3 build... will make sure to get it into the next one."
    ],
    "commit_messages": [
      "Item Group API: Expose shouldShowOpRestrictedItems (#2637)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306c70ac82a74541b2174",
    "number": 2635,
    "body": "Allows for the use of custom `Model`s and `TextureMap`s for generating item models. ",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Done."
    ],
    "commit_messages": [
      "Add access widener for `ItemModelGenerator#writer` (#2635)\n\nAllows for the use of custom Models and TextureMaps for generating item models."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306c80ac82a74541b2175",
    "number": 2632,
    "body": "Big thanks to @shartte for tackling the majority of this port.\r\n\r\nMajor datagen and worldgen API breakages/changes.",
    "head_branch": "22w44a_wip",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "22w44a (#2632)\n\nCo-authored-by: Sebastian Hartte <shartte@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306c90ac82a74541b2176",
    "number": 2622,
    "body": "This has not be required for years as loom removes nested jars from mod dependencies. This means that the normal jar (that is uploaded to CF and GitHub) will now also be on maven.",
    "head_branch": "remove_remap_maven_jar",
    "is_a_fork": true,
    "comments": [
      "Merged into https://github.com/FabricMC/fabric/pull/2632"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306c90ac82a74541b2177",
    "number": 2618,
    "body": "Small fix for obsolete code in ScreenEvents Javadoc. Also, some random grammatical errors that Intellij yelled at me for.",
    "head_branch": "1.19.3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixed ScreenEvents Javadoc (#2618)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306ca0ac82a74541b2178",
    "number": 2617,
    "body": "This consists of two parts:\r\n<ol><li>splitting packages duplicated between v0/v1 modules (#2616)\r\n<ul><li>here I used the package naming convention from fabric-command-api-v1 where the v0 impl packages have a v0 subpackage</ul>\r\n<li>splitting packages duplicated between client and main in the same module\r\n<ul><li>if a client impl/mixin package already existed, the classes were moved there or to a subpackage\r\n<li>otherwise I followed the newer convention of <code>impl.client.ModuleName</code> (as opposed to <code>impl.ModuleName.client</code>)\r\n</ul></ol>\r\n\r\nThis is a prerequisite for #2615 since both issues cause problems with duplicated package-info files (either in the same sources jar or in multiple compiled jars)",
    "head_branch": "fix-duplicate-packages",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Split all duplicated packages (#2617)\n\n* Move duplicated v0/v1 impl packages to v0 subpackages\r\n\r\nFixes #2616. The convention is adopted from the command API (v1)\r\nwhose impl classes have the v1 subpackage.\r\n\r\n* Separate client code into its own packages everywhere\r\n\r\n* Fix code style\r\n\r\n* Fix code style, part 2\r\n\r\n* Allow v0 in package names\r\n\r\n* Allow v0 in package names (fixed)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662306cb0ac82a74541b2179",
    "number": 2615,
    "body": "The generated files have `@ApiStatus.Internal` annotations for IDE warnings if mods try to access those classes directly.\r\n\r\nExample output:\r\n\r\n```java\r\n// [License header here]\r\n\r\n/**\r\n * Implementation code for fabric-loot-api-v2.\r\n */\r\n@ApiStatus.Internal\r\npackage net.fabricmc.fabric.impl.loot;\r\n\r\nimport org.jetbrains.annotations.ApiStatus;\r\n```",
    "head_branch": "package-info-gen",
    "is_a_fork": true,
    "comments": [
      "Please see build failuire.",
      "Fixed, the issue was the root build.gradle adding the module sources to `javadoc` but voiding the `Buildable` metadata by converting them to plain `Set<File>`s."
    ],
    "commit_messages": [
      "Generate package-info files for all impl and mixin packages (#2615)\n\n* Generate package-info files for all impl and mixin packages\r\n\r\n* Add javadoc to generated package-infos, use multiline string\r\n\r\n* Simplify code\r\n\r\n* Remove manual ApiStatus.Internal on impl classes\r\n\r\n* Update CONTRIBUTING.md to remove ApiStatus.Internal for impl classes\r\n\r\n* Fix Gradle deprecations\r\n\r\n* Fix more Gradle deprecations\r\n\r\n* Add task metadata\r\n\r\n* Support client-main split\r\n\r\n* Remove workaround for client packages\r\n\r\n* Try to fix Gradle 8 deprecations\r\n\r\n* Try to fix Gradle 8 deprecations, part 2\r\n\r\nI'm hoping that using the SourceDirectorySet instead of converting it to a\r\nSet<File> (which is pointless?) will carry the build dependencies over.\r\n\r\n* Add clean packageInfo task\r\n\r\nCo-authored-by: modmuss50 <modmuss50@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662306cc0ac82a74541b217a",
    "number": 2614,
    "body": "See FabricMC/yarn#3370",
    "head_branch": "misc/22w43a-lib-javadoc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Link to JOML/Jetbrains Annotations, update Guava link (#2614)\n\n* Link to JOML, update Guava link\r\n\r\n* Also add Jetbrains Annotations"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306cd0ac82a74541b217b",
    "number": 2613,
    "body": "Based on #2611 (merge that PR first!)\r\n\r\nThis refactors resource loader to use `Text` instead of `String` as the display name. This allows them to be translated. The old String based API is deprecated.",
    "head_branch": "resource-loader/display-text",
    "is_a_fork": true,
    "comments": [
      "This is not super urgent so I'll wait for the prerequisite PR to be merged before reviewing this one ;)"
    ],
    "commit_messages": [
      "Resource Loader: use Text for display name (#2613)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306ce0ac82a74541b217c",
    "number": 2611,
    "body": "Fixes various issues with 22w42a porting and other linter yelling stuff. Should also make \"This world is experimental\" warning disappear for modded worlds, as mods aren't experimental.",
    "head_branch": "resource-loader/22w42a",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "1.19.3 resource loader changes (#2611)\n\n* Fix CLIENT_RESOURCE_PACK_PROVIDER registration\r\n\r\n* Mark FabricModResourcePack as always stable\r\n\r\n* Fix warnings\r\n\r\n* Fix use of deprecated loader API\r\n\r\n* Fix yet another ResourcePack closing issue\r\n\r\n* Make ResourceManagerHelper NonExtendable\r\n\r\n* fix checkstyle"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306ce0ac82a74541b217d",
    "number": 2610,
    "body": "Data generation recieved the largest change. Every provider is now registered a `FabricDataGenerator.Pack` as follows:\r\n\r\n```java\r\npublic class DataGeneratorTestEntrypoint implements DataGeneratorEntrypoint {\r\n\t@Override\r\n\tpublic void onInitializeDataGenerator(FabricDataGenerator dataGenerator) {\r\n\t\tfinal FabricDataGenerator.Pack pack = dataGenerator.create();\r\n\r\n\t\tpack.addProvider(TestRecipeProvider::new);\r\n\t\tpack.addProvider(TestModelProvider::new);\r\n\t\tpack.addProvider(TestAdvancementProvider::new);\r\n\t\tpack.addProvider(TestBlockLootTableProvider::new);\r\n\t\tpack.addProvider(TestBarterLootTableProvider::new);\r\n\t}\r\n}\r\n```\r\n\r\nThe constructors of your providers now must take a `FabricDataOutput` in place of the `FabricDataGenerator`",
    "head_branch": "22w43a",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "22w43a (#2610)\n\nCo-authored-by: Technici4n <13494793+Technici4n@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306cf0ac82a74541b217e",
    "number": 2608,
    "body": "While this is ABI compatible, I'd still like to call this a breaking change because old code certainly crashes. (See javadoc)\r\n\r\n~~`EndDynamicRegistrySetupCallback` can be postponed if we need quicker fix for the bugs.~~ Actually I should probably postpone this\r\n\r\n- Fix `DynamicRegistrySetupCallback` being called too late\r\n- Remove unused code\r\n- Mark impl as internal",
    "head_branch": "reg-sync/22w42a",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "22w42a RegSync changes (#2608)\n\n* Fix DynamicRegistrySetupCallback, add EndDynamicRegistrySetupCallback\r\n\r\n`DynamicRegistrySetupCallback` did not work as intended because the injection\r\nwas too late. This moves the injection point to `RegistryLoader`, just before it\r\nis loaded.\r\n\r\n`EndDynamicRegistrySetupCallback` is a new event triggered when the loading is\r\nfinished. This has access to the combined DRM, allowing context-aware modification.\r\n\r\nThis also replaces `System.out.println` use in testmod.\r\n\r\n* Remove useless force-init of BiomeKeys\r\n\r\n* Remove now-unnecessary DynamicRegistryManagerMixin\r\n\r\n* Fix crash in testmod\r\n\r\nThis caveat needs proper documentation.\r\n\r\n* Add note to javadoc\r\n\r\n* Mark impl as internal\r\n\r\n* Remove EndDynamicRegistrySetupCallback\r\n\r\n* Fix testmod checkstyle issues\r\n\r\n* Add automated event call check\r\n\r\n* Fix test\r\n\r\n* Update javadoc\r\n\r\n* Add `@see`\r\n\r\n* Re-run actions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306d00ac82a74541b217f",
    "number": 2605,
    "body": null,
    "head_branch": "message-api/22w42a",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Message API: update javadoc for 22w42a (#2605)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306d10ac82a74541b2180",
    "number": 2601,
    "body": "Add the first draft of PlayerPlaceBlockEvents\r\n\r\nAfter a discussion with Tech, I've written a draft of PlayerPlaceBlockEvents with the events `ALLOW`, `BEFORE`, `AFTER` and `CANCELLED`\r\nI've tested it all in an external environment and it should all work well",
    "head_branch": "1.19.2",
    "is_a_fork": true,
    "comments": [
      "I don't think mixing into BlockItem.useOnBlock() is correct.\r\nAnybody can subclass BlockItem and override that method without calling super.useOnBlock().\r\nEven if they do, your cir.setReturnValue() is just going to return to their subclass implementation and not necessarily stop all the processing.\r\nI think a better place to put this this event as it stands would probably be ItemStack.useOnBlock() with a check for \r\nItem instanceof BlockItem?\r\n\r\nKind of off topic: \r\nYour original issue is with creating golems. https://github.com/FabricMC/fabric/issues/2598\r\nThese need special handling.\r\ne.g. see CarvedPumpkinBlock.canDispense() used in DispenserBehavior\r\nAlthough that's probably a subject for a different pull request? e.g. being able register BlockPatterns that create entities in CarvedPumpkinBlock or maybe even any block?\r\n",
      "I'll check how forge does it soon (and also this PR), but in principle modders can fire the event themselves for their custom logic, and that's one of the reasons to have it as a fabric api event.",
      "````I'll check how forge does it soon````\r\nTheir event is effectively called from the ItemStack. They have redirected the code to a helper method.\r\n\r\nThey also call it from `EndermanEntity.tick()` and `FrostWalkerEnchantment.freezeWater()`\r\n where they do the `setBlockState()` directly.\r\nThis is because their event is for an entity placing a block rather than just a player.",
      "> Forge does this in a very strange way: they record all block state changes in the world while an item is being used, and then fire an event to undo the block state changes. On top of being a very invasive patch, I think this could also cause correctness issues because it's not possible to fully undo a block state change.\r\n\r\nMy understanding is that forge supports an extra event where you can be notified of all block changes caused by a block placement, including \"recursive\" changes. e.g. redstone updates or fences connecting\r\n\r\nIf you veto/cancel this event it will revert all the blocks.\r\n\r\nIt does this by remembering all changes made by calls to World.setBlockState() when placing a block. \r\nThis includes things like the original NBT of changed/removed block entities.",
      "Oh right, they also store the NBT, I had missed that. I'm not sure we should have that system - it seems quite invasive and error-prone to me.",
      "Can't we inject to `ServerPlayerInteractionManager`?",
      "How do you know if a specific item will place a block though?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306d20ac82a74541b2181",
    "number": 2599,
    "body": "# 22w42a port\r\n\r\nThis PR ports Fabric API to 22w42a. There are a number of changes that affect fabric api on a lower level as well as higher level changes that will affect most modders. Big thanks to @shartte for helping with this port. Also thanks to the yarn contributors for the mappings.\r\n\r\nFabric loader 0.14.10 or later is required.\r\n\r\n## Item Groups\r\n\r\n22w42a changed the way ItemGroups work. `FabricItemGroupBuilder` has been removed and replaced with `FabricItemGroup`. The following snippet of code shows how to create an item group, and add the `TEST_ITEM` to it. This allows for much finer grain control over the ordering of your item groups.\r\n\r\n```java\r\nprivate static final ItemGroup ITEM_GROUP = new FabricItemGroup(new Identifier(MOD_ID, \"test_group\")) {\r\n\t\t@Override\r\n\t\tpublic ItemStack createIcon() {\r\n\t\t\treturn new ItemStack(Items.DIAMOND);\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tprotected void addItems(FeatureSet enabledFeatures, Entries entries) {\r\n\t\t\tentries.add(TEST_ITEM);\r\n\t\t}\r\n\t};\r\n```\r\n\r\nIf you wish to add items to vanilla's groups, or ones added via a mod you can do so with Fabric's new event. Unlike 1.19.2 you also have fine grain control over the ordering of other item groups.\r\n\r\n```java\r\nItemGroupEvents.modifyEntriesEvent(ItemGroups.BUILDING_BLOCKS).register((content) -> {\r\n\t\tcontent.add(TEST_ITEM);\r\n\r\n\t\t// Add a diamond before the oak fence\r\n\t\tcontent.addBefore(Blocks.OAK_FENCE, Items.DIAMOND);\r\n\t\t// Add an emerald after the oak door.\r\n\t\tcontent.addAfter(Blocks.OAK_DOOR, Items.EMERALD);\r\n});\r\n```\r\n\r\n## Biome API changes\r\n\r\nPreviously dynamic registries would source their content from both the `BuiltInRegistries` and data packs. Now the built-in registries are only used for data generation,\r\nand content at runtime is only loaded from data packs.\r\n\r\nMods that previously used JSON objects for these registries exclusively are unaffected by this change. Mods that registered their worldgen content to `BuiltinRegistries` will now have\r\nto generate JSON files and include them in their mod assets. A convenience data provider has been added (`FabricBuiltinRegistriesProvider`) \r\nthat will automatically export JSON files for all objects in `BuiltinRegistries` belonging to the current mod. This means for mods that previously\r\ndid built-in worldgen, this should be the only required change to continue working.\r\n\r\nThe biome modification API will continue to work as before, and will throw more detailed error messages when world-gen \r\nobjects existing only in `BuiltinRegistries` but not in data packs are used.\r\n\r\nThe following data types are affected by this:\r\n\r\n* Dimension Types\r\n* Biomes\r\n* Message Types\r\n* Configured Carvers\r\n* Configured Features\r\n* Placed Features\r\n* Structures\r\n* Structure Sets\r\n* Structure Processor Lists\r\n* Structure Pools\r\n* Chunk Generator Settings\r\n* Noise\r\n* Density Functions\r\n* World Presets\r\n* Flat Level Generator Presets\r\n\r\n## Data Generation\r\n\r\nMinor breaking changes, recipes now require a `RecipeCategory`\r\n\r\n# Texture API\r\n\r\nThe sprites that should be baked into texture atlases are no longer discovered by querying all `UnbakedModel` during the model baking process. Instead, the `SpriteAtlasManager` will independently search for textures using patterns in all available resource packs and bake them into specific texture atlases.\r\n\r\nFor example, `BakedModelManager` defines the block atlas as:\r\n\r\n* All textures in the `block` folder (or any subfolder)\r\n* All textures in the `item` folder (or any subfolder)\r\n* All textures in the `entity/conduit` folder (or any subfolder)\r\n* The texture at `BellBlockEntityRenderer.BELL_BODY_TEXTURE`\r\n* The texture at `EnchantingTableBlockEntityRenderer.BOOK_TEXTURE`\r\n\r\nIn Fabric, the `ClientSpriteRegistryCallback` event has been modified to allow new rules to be appended for any texture atlas.\r\n\r\nFor example, the following would add all textures from the subfolder `part` (recursively) to the atlas (from *any* resource pack/namespace), and also the texture called \"ae2:models/skyblockchest\" specifically.\r\n\r\n```java\r\nClientSpriteRegistryCallback.event(SpriteAtlasTexture.BLOCK_ATLAS_TEXTURE).register((resourceManager, sprites) -> {\r\n  class_7766.method_45834(resourceManager, \"part\", sprites::put);\r\n  class_7766.method_45830(resourceManager, new Identifier(\"ae2:models/skyblockchest\"), sprites::put);\r\n});\r\n```\r\n\r\n\r\n## UnbakedModel Changes\r\n\r\nUnbakedModels no longer have texture dependencies (see Texture API), so the corresponding method was removed without a replacement.\r\nTextures must either be in block/ or item/ to be discovered for the block atlas, or the Texture API needs to be used to add them to the atlas.\r\n\r\nIn addition, Vanilla changed how parent models are loaded by JSON models. It introduced `method_45785` to allow a model to load its parent models.\r\nThis method is only called for models that are initially added to the model load list. If your mod subclasses `UnbakedModel` and uses nested JSON models,\r\nit should always call `method_45785` on its own model dependencies. The used JSON models would not be able to load their parents otherwise.\r\n\r\nExample implementation:\r\n\r\n```java\r\nclass CustomUnbakedModel implements UnbakedModel {\r\n[...]\r\n\r\n  @Override\r\n  default void method_45785(Function<Identifier, UnbakedModel> loader) {\r\n    for (Identifier dependency : getModelDependencies()) {\r\n      loader.apply(dependency).method_45785(loader);\r\n    }\r\n  }\r\n}\r\n```",
    "head_branch": "1.19.3",
    "is_a_fork": true,
    "comments": [
      "This should now be ready to merge very shortly. I expect there will be stuff broken, wrong and missing but we can fix that as people find the issues."
    ],
    "commit_messages": [
      "22w42a 🐫 (#2599)\n\nCo-authored-by: shartte <shartte@users.noreply.github.com>\r\nCo-authored-by: Juuz <6596629+Juuxel@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306d20ac82a74541b2182",
    "number": 2595,
    "body": null,
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [
      "@DrHesperus any update?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306d30ac82a74541b2183",
    "number": 2594,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306d40ac82a74541b2184",
    "number": 2593,
    "body": null,
    "head_branch": "1.19.2",
    "is_a_fork": true,
    "comments": [
      "Why is the old translation not good?",
      "It has the same meaning, but the current translation is a bit more natural."
    ],
    "commit_messages": [
      "Edit `ko-kr` translations for `resource-loader` (#2593)\n\n* Create ko_kr.json\r\n\r\n* Create ko_kr.json\r\n\r\n* Edited ko_kr translation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306d50ac82a74541b2185",
    "number": 2591,
    "body": "Added Korean translation.",
    "head_branch": "1.19.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Create `ko_kr` translations for `resource-loader` and `item-groups` (#2591)\n\n* Create ko_kr.json\r\n\r\n* Create ko_kr.json"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306d50ac82a74541b2186",
    "number": 2590,
    "body": "Add polish translation.",
    "head_branch": "1.19.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Create `pl_pl` translation for `resource-loader` (#2590)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306d60ac82a74541b2187",
    "number": 2589,
    "body": "Refer to FabricMC/discussions/2587 for motivations.",
    "head_branch": "discussions/2587",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Implement a version of `FabricDefaultAttributeRegistry#register` that takes a `DefaultAttributeContainer` (#2589)\n\nRefer to https://github.com/orgs/FabricMC/discussions/2587 for motivations :)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306d70ac82a74541b2188",
    "number": 2586,
    "body": "This API allows modders to define custom `Ingredient`s, with more advanced matching logic than what vanilla allows.\r\n\r\nCustom ingredients need to implement the `CustomIngredient` interface, and also provide and register a `CustomIngredientDeserializer`. No overriding of `Ingredient` is needed.\r\n\r\nHave a look at the API here: https://github.com/Technici4n/fabric/tree/custom-ingredient-api/fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/api/recipe/v1/ingredient.\r\n\r\nThe default conditions can be found here: https://github.com/Technici4n/fabric/blob/custom-ingredient-api/fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/api/recipe/v1/ingredient/DefaultCustomIngredients.java.\r\n\r\nHere is how the default conditions are implemented: https://github.com/Technici4n/fabric/tree/custom-ingredient-api/fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/impl/recipe/ingredient/builtin.\r\n\r\nCloses #116.\r\n\r\nTODO:\r\n- [x] Decide on exact API and impl structure.\r\n- [x] Add partial/strict NBT, and and difference ingredients.\r\n- [x] JSON and network serialization and deserialization tests.\r\n- [x] Shapeless recipe matching tests.\r\n- [x] `isEmpty` checks tests.\r\n- [x] Write javadoc.\r\n- [x] Test what happens with vanilla clients. See https://github.com/FabricMC/fabric/pull/2586#issuecomment-1355037420\r\n- [x] Rename to Recipe API.",
    "head_branch": "custom-ingredient-api",
    "is_a_fork": true,
    "comments": [
      "A possible NBT ingredient would also be useful ",
      "> A possible NBT ingredient would also be useful\r\n\r\nI have the following ingredients in mind, just haven't written them yet: (matching Forge's)\r\n- strict and partial NBT ingredient\r\n- and ingredient\r\n- difference ingredient",
      "Thanks a lot for your detailed explanation.\r\n\r\nI decided to go for the simpler augmenting paths algorithm for the maximum cardinality bipartite matching problem, which should look like this : https://github.com/Technici4n/fabric/blob/custom-ingredient-api/fabric-ingredient-api-v1/src/main/java/net/fabricmc/fabric/impl/ingredient/ShapelessMatch.java. I haven't tested it yet though, but I will definitely add tests similar to what you suggested.\r\n\r\nI also renamed `matchesStack` and `getPreviewStacks` to `test` and `getMatchingStacks` respectively, and provided some javadoc for `CustomIngredient`. I hope the javadoc is clear enough - there's some tricky details that might not always be obvious. I also borrowed your name for `requiresTesting` which I like better than `ignoresNbt` - hopefully you don't mind. :smile:",
      "I just tested the following cases:\r\n- Server with Fabric ingredient API, vanilla client, no recipe using custom ingredients: can connect fine.\r\n- Server with Fabric ingredient API, vanilla client, some recipes using custom ingredients: can't connect, with the following error:\r\n![image](https://user-images.githubusercontent.com/13494793/207747523-ffa718bc-0c38-4998-b5b1-2a912529f249.png)\r\n**Is this fine?**\r\n- Client/server with both Fabric ingredient API and [Faux ingredient extension API](https://github.com/FauxMC/IngredientExtensionAPI): packet writing sending works, but I used the 1.19.2 version of the ingredient extension API, so I get a crash due to other reasons. I think the two APIs are compatible. (Though obviously the ingredient extension API won't be needed anymore once this PR is merged, but I want a smooth transition).\r\n\r\nThis PR is now ready for reviews!",
      "> Client/server with both Fabric ingredient API and [Faux ingredient extension API](https://github.com/FauxMC/IngredientExtensionAPI): packet writing sending works, but I used the 1.19.2 version of the ingredient extension API, so I get a crash due to other reasons. I think the two APIs are compatible. (Though obviously the ingredient extension API won't be needed anymore once this PR is merged, but I want a smooth transition\r\n\r\nWe have no intention of continuing development on the Faux Ingredient Extension API once this PR is merged, so even if it wasn't compatible, it shouldn't be an issue since neither APIs should share a version.",
      "My thinking is that you might release a 1.19.3 version of your Extension API before this PR gets merged in 1.19.3. (I have no idea when it will be merged, it's going to require quite a bit of review).",
      "Would it be out of scope to add a way to give these custom ingredients a recipe remainder that overrides the one in their item's settings?\r\nSo one could, for example, make a \"chocolate milk bucket\" recipe that takes a milk bucket and cocoa beans, without the milk bucket leaving behind an empty bucket by overriding the milk bucket's remainder in just that recipe.",
      "> Would it be out of scope to add a way to give these custom ingredients a recipe remainder that overrides the one in their item's settings? So one could, for example, make a \"chocolate milk bucket\" recipe that takes a milk bucket and cocoa beans, without the milk bucket leaving behind an empty bucket by overriding the milk bucket's remainder in just that recipe.\r\n\r\nI think it would be out of scope. Some of the problems:\r\n- Ingredients are used in many places, so properly supporting this would require a lot of patches.\r\n- The patches are very invasive as they require all remainder logic to go through the ingredient.\r\n- For recipes, we don't even know which ingredients were matched where in the getRecipeRemainder method, so we'd need to recompte the match before we apply custom remainders.\r\nI think it's best left to other mods (for crafting recipes, it's \"easy\" to implement on top of this API with a custom recipe type).",
      "I just implemented a graceful fallback mechanism to make this API work nicely for clients that don't support (some or all) custom ingredients. Summary follows:\r\n- On login, server requests the client's available ingredients.\r\n- The client answers by listing the serializer IDs it supports.\r\n- The server stores that where it's relevant.\r\n- When an ingredient is serialized, we lookup which IDs are supported by the client. If we can lookup and the client doesn't support the ingredient, we send it as a vanilla stack list ingredient instead. Otherwise, we send the custom ingredient as usual.\r\n\r\nList of cases to test:\r\n- [x] Server has ingredient API, client doesn't have the API.\r\n- [x] Server has ingredient API, client has the API but doesn't support some ingredients.\r\n- [x] Server has ingredient API, client has the API and all the used ingredients.",
      "After some consideration, this new module will be renamed Fabric Recipe API v1, and the ingredient stuff will be moved to the `net.fabricmc.fabric.api.recipe.v1.ingredient` package, in preparation for possible other kinds of recipe format extensions.",
      "![image](https://user-images.githubusercontent.com/13494793/208303274-bbfd2db0-3a12-4fe1-803d-ad3536c107d2.png)\r\n\r\nWorks fine on vanilla clients now (ignoring the recipe book) !",
      "Partial support on clients also works: (debug output on server, removed some ingredients on client)\r\n```\r\n[15:28:36] [Server thread/INFO]: Technici4n joined the game\r\nWrote fabric:nbt as a vanilla ingredient\r\nWrote fabric:and as a custom ingredient\r\nWrote fabric:difference as a vanilla ingredient\r\nWrote fabric:nbt as a vanilla ingredient\r\nWrote fabric:or as a custom ingredient\r\n```",
      "Just rebased to fix the `gradle.properties` conflict, and switched `getMatchingStacks` to a `List<ItemStack>`.",
      "I expect out of scope for this PR, but having a condition for a custom ingredient might be useful."
    ],
    "commit_messages": [
      "add fabric-recipe-api-v1: Custom ingredients (#2586)\n\n* Fabric custom ingredient API\r\n\r\n* More Ingredient API work\r\n\r\n* Optimize shapeless matching logic\r\n\r\n* Fix all the things\r\n\r\n* Move custom ingredient network serialization to account for ingredient extension API\r\n\r\n* Apply suggestions from code review\r\n\r\nCo-authored-by: apple502j <33279053+apple502j@users.noreply.github.com>\r\n\r\n* Address 🍎 review\r\n\r\n* Get rid of the @Overwrite\r\n\r\n* Implement graceful fallback for clients not supporting some custom ingredients\r\n\r\n* Move custom ingredient code to new Recipe API module\r\n\r\n* Fix client package change\r\n\r\n* Address review comments\r\n\r\n- And/Or -> All/Any\r\n- Move builtin ingredient registration to entrypoint\r\n- Initial protocol version is 1\r\n- Misc other changes\r\n\r\n* Add testing instructions\r\n\r\n* Use a List for `getMatchingStacks`\r\n\r\n* Overengineer ingredient query a bit\r\n\r\nCo-authored-by: apple502j <33279053+apple502j@users.noreply.github.com>\r\nCo-authored-by: modmuss50 <modmuss50@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306d80ac82a74541b2189",
    "number": 2585,
    "body": "This PR makes the constructor in SignType public and the register method along with it for easy creation of modded SignTypes.\r\nThis also fixes custom SignTypes being hard coded to the vanilla namespace and allows modded namespaces to be used\r\n\r\n![image](https://user-images.githubusercontent.com/26313415/196008162-39c6073a-a424-4a51-b6fc-40d62d6f6d86.png)\r\n\r\nCloses #682.\r\n",
    "head_branch": "1.19.2-sign-types",
    "is_a_fork": true,
    "comments": [
      "Moved everything to the object builder api",
      "A relevant comment from the past: https://github.com/FabricMC/fabric/issues/821#issuecomment-645674820.",
      "This closes #682 BTW."
    ],
    "commit_messages": [
      "[1.19.2] Implement custom SignTypes (#2585)\n\n* Implement custom SingTypes\r\n\r\n* Update fabric-rendering-v1/src/testmod/resources/fabric-rendering-v1-testmod.mixins.json\r\n\r\nCo-authored-by: apple502j <33279053+apple502j@users.noreply.github.com>\r\n\r\n* Replace transitive access widener with SignTypeRegistry\r\n\r\n* Update fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/api/object/builder/v1/sign/SignTypeRegistry.java\r\n\r\nCo-authored-by: apple502j <33279053+apple502j@users.noreply.github.com>\r\n\r\n* Update fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/api/object/builder/v1/sign/SignTypeRegistry.java\r\n\r\nCo-authored-by: apple502j <33279053+apple502j@users.noreply.github.com>\r\n\r\n* Update fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/api/object/builder/v1/sign/SignTypeRegistry.java\r\n\r\nCo-authored-by: apple502j <33279053+apple502j@users.noreply.github.com>\r\n\r\n* Move sign types to object builder api\r\n\r\n* Make TexturedRenderLayersMixin more direct\r\n\r\n* Fix java doc\r\n\r\n* Fix test mod still using the rendering api namespace\r\n\r\n* Add teal sign item texture\r\n\r\n* Add lang for Teal Sign\r\n\r\n* Make checkstyle happy\r\n\r\n* Replace accessor with accesswidener\r\n\r\n* Apply suggestions from code review\r\n\r\n* Fix build\r\n\r\n* Rename local vars\r\n\r\nCo-authored-by: apple502j <33279053+apple502j@users.noreply.github.com>\r\nCo-authored-by: modmuss50 <modmuss50@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662306d90ac82a74541b218a",
    "number": 2584,
    "body": "This fixes the issue from #2583.\r\n\r\nWhat is really happening is that dashloader has a bug causing the sprites in the sprite atlas to have coordinates in raw atlas coordinates, instead of having them normalized to `[0.0, 1.0]`. To avoid the issue, we split such sprites, and we log a warning.",
    "head_branch": "fix-oob-sprite-finder",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Skip adding out-of-bound sprites to SpriteFinderImpl (#2584)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306da0ac82a74541b218b",
    "number": 2583,
    "body": null,
    "head_branch": "1.19.2",
    "is_a_fork": true,
    "comments": [
      "Hi, would you mind explaining in detail what this PR does, which issue it solves, etc?",
      "https://github.com/PepperCode1/Continuity/issues/120#issuecomment-1242888566",
      "It is not immediately obvious how your change addresses the root issue, can you please elaborate on that?\r\n\r\nPS: I suspect the actual issue is caused by machine precision issues.",
      "Without this PR all resourcepacks get unloaded due the exception that gets thrown\r\n\r\n[without.log](https://github.com/FabricMC/fabric/files/9791934/without.log)\r\n\r\n[with.log](https://github.com/FabricMC/fabric/files/9791940/with.log)\r\n",
      "We acknowledge the reason behind making such change, but I'd like to see what the change actually does. Rendering code is complicated and needs extensive comments/documentation.\r\n\r\nCould you tell us how the old and new code works, perhaps? Also do you know the real reason behind stack overflow? (The real problem, I believe, stems from other bugs.)",
      "Could you also provide the zip of the mods you used for testing? This would help us reproduce the issue and validate the fix.",
      "Ah okay thats understandable haha, in this pr the node and quadrants are specified in a more specific way, the finder class contains an array that is expected to have 4 quadrants (lh, hl, ll, hh) of nodes that will again specify another pair of quadrants for sprites instead, resulting in an exact 4 * 4, while in the previous code contains 4 objects that dont specify clear enough if its a sprite or a node, \r\n\r\nfor instance lets say were trying to find a sprite at 0.5, 0.5\r\nin the old code itll check for the quadrant in that area, and return that quadrant if its a sprite but if it isnt a sprite itll search that node to find a sprite in that area, and thats where the issue occurs, because if that node contains another node instead of a sprite, itll once more check for a quadrant in that area returning another sprite, or another node while the recursion size should be at max 16, the cause of that is mostly because of `addInner` creating only a node after a sprite has been added twice, the moment that sprite gets called again it will check if the existing quadrant is a node, if not itll create a new one and add the existing quadrant as a sprite, if the sprite gets used again for that quadrant while its a node, it will add more nodes, resulting in the stackoverflow, hopefully i explained that well lol",
      "> Could you also provide the zip of the mods you used for testing? This would help us reproduce the issue and validate the fix.\r\n\r\nhttps://drive.google.com/file/d/1gsTDpcH_4NqT2c7jYricDhViZiKiN3L1/view?usp=sharing",
      "We've identified the problematic mod - DashLoader - and is working on fixes. Closing, as we'll implement fail-safe measures instead. (The code here is fine.)",
      "The recursion is a feature. Removing it entirely prevents the stack overflow, but it also breaks functionality of the SpriteFinder. However, thanks to your .zip, I was able to reproduce and fix the issue. You can find my fix at #2584.",
      "(note, any recursion code can be rewritten to not use recursion, but yes.)"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306da0ac82a74541b218c",
    "number": 2582,
    "body": "Currently its not possible to register a SignBlockEntityRenderer without making a accessor to the vanilla registry because of a generic mismatch. This PR solves that problem by just making the vanilla registry public and deprecating the old one",
    "head_branch": "1.19.2-be-renderer-registry",
    "is_a_fork": true,
    "comments": [
      "Looks like the issue mentioned in https://github.com/FabricMC/fabric/pull/430 (the reason why `BlockEntityRendererRegistryImpl` is how it is), is indeed not a problem anymore."
    ],
    "commit_messages": [
      "Deprecated BlockEntityRendererRegistry in favor of vanilla's BlockEntityRendererFactories (#2582)\n\n* Deprecated BlockEntityRendererRegistry in favor of vanilla's BlockEntityRendererFactories\r\n\r\n* Undo unintended change\r\n\r\n* Update fabric-transitive-access-wideners-v1/src/main/resources/fabric-transitive-access-wideners-v1.accesswidener\r\n\r\nCo-authored-by: haykam821 <24855774+haykam821@users.noreply.github.com>\r\n\r\n* Update BlockEntityRendererRegistry javadoc to match others\r\n\r\n* Implement sign renderer test\r\n\r\n* Fix template\r\n\r\n* Change SignTestBlockEntity to SignBlockEntityTest\r\n\r\nCo-authored-by: haykam821 <24855774+haykam821@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662306db0ac82a74541b218d",
    "number": 2581,
    "body": null,
    "head_branch": "add-it_it",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added it_it language. (#2581)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306dc0ac82a74541b218e",
    "number": 2580,
    "body": null,
    "head_branch": "1.19.2-patch-keybind",
    "is_a_fork": true,
    "comments": [
      "Great, already tested in #2556"
    ],
    "commit_messages": [
      "Change test LSHIFT keybind to RSHIFT (#2580)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306dd0ac82a74541b218f",
    "number": 2579,
    "body": "The proposed API allows blocks to report looking like a different block on a given face. This allows blocks with connected textures to seamlessly connect to other blocks that mimic them, such as the covers and facades often used to hide cables, without adding any extra dependencies and special-casing for each mod that adds such blocks.\r\n\r\nI discussed this with @PepperCode1, who wrote connected textures for Continuity, CTM Fabric, and Create Fabric. This PR should be the last piece of the puzzle that will allow AE2 and similar mods that have facades/covers to seamlessly work with connected textures from other mods' blocks.\r\n\r\nThis PR is meant to be the Fabric equivalent of MinecraftForge/MinecraftForge#9066. Permission has been granted by @amadornes to reuse his wording for the documentation.\r\n\r\n**Testing**: I wrote a crude vertical connected texture implementation for the renderer API test mod, and checked that it properly connected to the existing frame block which now implements this new API.",
    "head_branch": "block-appearance-api",
    "is_a_fork": true,
    "comments": [
      "Just updated with a new approach, which adds the `fabric-block-api-v1` module with `FabricBlock` and `FabricBlockState`.\r\n\r\nPicture of the testmod :wink:\r\n![image](https://user-images.githubusercontent.com/13494793/195981647-7c6af8cc-6469-4d51-90d2-421fcf4a67fe.png)",
      "Tested this in AE2 and it has some issues with (connected) glass facades:\r\n![image](https://user-images.githubusercontent.com/13494793/199544953-3a3e2823-94dd-4080-98a5-6e1961ba74ce.png)\r\n\r\nI am marking this PR as a draft until I can resolve these issues.",
      "Managed to fix the issues on the AE2 side without changing the API :) "
    ],
    "commit_messages": [
      "Add a block appearance API (#2579)\n\n* Add block appearance API\r\n\r\n* Add class javadoc for FabricBlock and FabricBlockState\r\n\r\n* Address reviews\r\n\r\n* Remove OverrideOnly from getAppearance\r\n\r\n* Fix javadoc issues"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306dd0ac82a74541b2190",
    "number": 2578,
    "body": null,
    "head_branch": "resloader-finnish-update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update Finnish translation for resource loader (#2578)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306de0ac82a74541b2191",
    "number": 2576,
    "body": "This marks the rest of impl classes as internal, marks `ResourceManagerHelper` as non-extendable, fixes use of deprecated Loader APIs, and fixes javadocs.\r\n\r\nOriginally included changes on keyed reloaders (support for predicate/modifier) but excluded in this PR. In v1 we should make this use event phases.",
    "head_branch": "resource-loader/small-refactor",
    "is_a_fork": true,
    "comments": [
      "Should the internal annotation be on the entire package instead of the individual classes?\r\n\r\n> If a package is marked with this annotation, all its containing classes are considered internal.\r\n\r\n<https://javadoc.io/doc/org.jetbrains/annotations/latest/org/jetbrains/annotations/ApiStatus.Internal.html>",
      "Ah, that could be better. Maybe I should use that instead.",
      "@apple502j Mind fixing the build? :)",
      "This can be merged to 1.19.2, seems like the 22w42a port refactors this completely making this unnecessary."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306df0ac82a74541b2192",
    "number": 2573,
    "body": "Add a new `ServerLivingEntityEvents` class, with the following events:\r\n- `ALLOW_DAMAGE` to block damage entirely, for example because the player is wearing a \"creative mode\" armor (my use case).\r\n- `ALLOW_DEATH` to prevent entity death. It is the exact same event as `ServerPlayerEvents.ALLOW_DEATH`, but generalised to living entities. The old event in `ServerPlayerEvents.ALLOW_DEATH` is now deprecated.\r\n- `AFTER_DEATH` to react on entity death. Closes #2551.",
    "head_branch": "death-events",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add `AFTER_DEATH` and `ALLOW_DAMAGE` events; generalise `ALLOW_DEATH` to living entities (#2573)\n\n* Add AFTER_DEATH and ALLOW_DAMAGE events; generalise ALLOW_DEATH to living entities\r\n\r\n* Make class final and constructor private\r\n\r\n* player -> entity; clarify where ALLOW_DAMAGE is fired\r\n\r\n* Also deprecate the old AllowDeath funcint"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306e00ac82a74541b2193",
    "number": 2569,
    "body": null,
    "head_branch": "1.19.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added Brazilian Portuguese translations (#2569)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306e10ac82a74541b2194",
    "number": 2568,
    "body": "Adds those. The one for `item-groups` is basically the same as the existing for `es_mx`.",
    "head_branch": "es_es",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Create `es_es` translations for `resource-loader` and `item-groups` (#2568)\n\n* Create `es_es` language file for `resource-loader`\r\n\r\n* Create `es_es` language file for `item-groups`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306e20ac82a74541b2195",
    "number": 2565,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "French translation update (#2565)\n\n* Update fr_fr.json\r\n\r\n* Add creative tab page"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306e20ac82a74541b2196",
    "number": 2564,
    "body": "Should we deprecate registry-specific datagen methods?",
    "head_branch": "resource-conditions/tag",
    "is_a_fork": true,
    "comments": [
      "> Should we deprecate registry-specific datagen methods?\r\n\r\nI would actually suggest defaulting to the item registry for the new condition, and deprecating the other 3. The item registry is the primary target, so it makes sense for it to be special-cased.",
      "Is the fact that the new condition defaults to items actually documented somewhere? I'd say that's important info for users, as well as the format of the condition (which I think isn't documented currently *at all*)."
    ],
    "commit_messages": [
      "Resource conditions: support all tags (#2564)\n\n* Resource conditions: support all tags\r\n\r\n* Minor improvements; deprecate old methods\r\n\r\n* Fix build?\r\n\r\n* Add more tests, throw on null condition\r\n\r\n* Add more javadoc\r\n\r\n* Javadoc fixes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306e30ac82a74541b2197",
    "number": 2558,
    "body": "There's a couple of mods out there which play dynamically generated sounds, rather than reading from an ogg file. For instance, [Etched](https://github.com/MoonflowerTeam/etched) allows streaming audio from an arbitrary URL and [CC: Restitched](https://github.com/cc-tweaked/cc-restitched) allows players to generate music data and stream it to the client.\r\n\r\nMinecraft's sound engine supports custom audio streams. However, as there is no API exposed for this, mods must use mixins. Unfortunately the sound code is fairly complex and, due to its multi-threaded and callback-based nature, awkward to mixin to. For instance (note, most of these examples are using MojMap):\r\n\r\n - [Etched uses `@Redirect`](https://github.com/MoonflowerTeam/etched/blob/8d459ef623a869f6a87cd57f4d634127dd3db7b2/fabric/src/main/java/gg/moonflower/etched/core/mixin/fabric/client/SoundEngineMixin.java#L33-L38). This is the most \"correct\" method (and is what this PR also does), but is incompatible with any other mod.\r\n - [CC: Restitched `@Inject`s into the `play` method and a callback lambda](https://github.com/cc-tweaked/cc-restitched/blob/55625c72516fda8290820ec57fdbc994bf06dc1c/src/main/java/dan200/computercraft/fabric/mixin/MixinSoundEngine.java#L29-L50). This code is incorrect, due to the multi-threaded nature of the sound code (though works well enough in practice).\r\n - Some mods reimplement some (or all) of the `play` method (i.e. [Infinidisc](https://github.com/DenimsMods/Infinidisc/blob/045dd7190b16c51795ee1ee6abaf162d3d6ca10c/src/main/java/denimred/infinidisc/mixin/SoundEngineMixin.java#L53), [music-box](https://github.com/CmdrJane/music-box/blob/c008602ae615af66882c61a4e81e42561c16cbdc/src/main/java/ru/aiefu/musicbox/mixin/SoundEngineMixin.java#L60)).\r\n\r\nGiven several mods want to provide custom `AudioStream`s, but doing so in a compatible way is tricky to get right, it makes sense for Fabric to provide an API everyone can hook into.\r\n\r\nThis PR adds a interface `FabricSoundInstance`, injected into `SoundInstance`. This provides a new method `getAudioStream`, which can be overridden to return a custom audio stream. The default implementation implements the current behaviour of just reading an `.ogg` file from resource packs.\r\n\r\n## Further notes\r\n - The obvious alternative here would be to add an event, instead of providing a new interface. The current approach felt more natural, as whenever you want this functionality, you're going to be sub-classing `SoundInstance` anyway. Happy to go for either.\r\n\r\n - This does still require `SoundInstance.getSound` to resolve to an actual file, even if that file isn't read by the audio stream. This is definitely a little clunky; I'm just not sure if \"fixing\" this is worth the additional implementation cost. Thoughts welcome!\r\n\r\n - I've added a new module `fabric-sound-api-v1` as nowhere else felt natural. Obviously let me know if I've got anything wrong with adding the new module :).\r\n\r\n - It appears that injected interfaces only work when registered in the main source set. I'm not sure if this is intentional or not?\r\n",
    "head_branch": "feature/audio-stream",
    "is_a_fork": true,
    "comments": [
      "> It appears that injected interfaces only work when registered in the main source set.\r\n\r\nI dont think thats intentional, most likely something I can fix in loom. Ideally client only modules should have everything in the client sourceset as this will prevent the need to split the jar in a mod dev env. I will take a look into this.\r\n\r\nHad a quick look at the PR, it looks great at first glance. I will take a deeper look soon. 👍 ",
      "This should be done by default, something I can fix in a future loom version, for now you should be able to add the following to the sub projects build.gradle:\r\n\r\n```gradle\r\nloom {\r\n\tinterfaceInjection {\r\n\t\tinterfaceInjectionSourceSets.add sourceSets.client\r\n\t}\r\n}\r\n```",
      "> Also why are you shipping the empty ogg farm as part of the API (and not testmod)?\r\n\r\nAs every mod that provides a custom audio stream needs to reference a dummy sound it made sense to provide it in the API, rather than every mod having to bundle their own - much like fabric-gametest-api-v1's empty structure.",
      "@SquidDev Then the existence should be documented somewhere, along with `Identifier` of the empty sound exposed as a field.",
      "> Then the existence should be documented somewhere, along with Identifier of the empty sound exposed as a field.\r\n\r\n:+1:  Is it acceptable just to add it as a constant to `FabricSoundInstance`? Not sure there's a more sensible location until #2503 is resolved.",
      "> Is it acceptable just to add it as a constant to FabricSoundInstance?\r\n\r\nYes, I think that would be a good idea 👍 ",
      "I felt it was probably worth while adding an example, as the need for `sounds.json` is a little awkward and thus worth being explicit in. Happy to revert if it's Too Much :).",
      "Hah, I should know better than to commit without running checkstyle!\r\n\r\nI don't know if there's any interest in adding a pre-commit hook which runs it automatically? Or is that just going to get too irritatingly slow for people?",
      "More documentation is always welcome. :)\r\n\r\nNot sure about the pre-commit hook as I've never used them myself, but it looks like it might end up being rather annoying ? We always wait for CI to pass before merging anything.",
      "IMO it's too slow since running `gradlew checkstyleMain checkstyleTestmod` (or even just the main one) builds all modules and that takes a while even with `--parallel`.",
      "I agree, spotless would also need to be ran making commits very slow. I would reccomend using the checkstyle plugin in your IDE to make it clear when you have an issue.\r\n\r\nAdded to last call, thanks 👍 ",
      "Thank you everyone :)."
    ],
    "commit_messages": [
      "Add Sound API to allow sound instances to play custom audio streams (#2558)\n\n* Allow sound instances to play custom audio streams\r\n\r\nAdds a new interface FabricSoundInstance, which is injected into\r\nvanilla's SoundInstance interface.\r\n\r\nWhen loading an audio stream, the SoundSystem now calls\r\nFabricSoundInstance.getAudioStream, allowing mods to provide their\r\nown audio streams.\r\n\r\n* Some post-review cleanup\r\n\r\n - Manually add the client sources as an interface injection source set,\r\n   allowing us to put everything in the src/client dir (<3 modmuss50).\r\n\r\n - Apply some formatting changes from apple502j.\r\n\r\n* Document the empty sound and its usage in sounds.json\r\n\r\n* Fix one remaining @literal -> @code\r\n\r\n* Fix checkstyle issues"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306e40ac82a74541b2198",
    "number": 2556,
    "body": "This PR allows modders to add stack aware recipe remainders\r\nThis is useful for mods that adds custom buckets that support different fluids\r\n\r\nThis address the long lasting issue https://github.com/FabricMC/fabric/issues/50\r\n\r\nReopened from #2464",
    "head_branch": "1.19.2-remaining",
    "is_a_fork": true,
    "comments": [
      "I've added the remaining tests for brewing stand and recipe, please check them 👍\r\n\r\nhttps://github.com/AlphaMode/fabric/pull/2",
      "This pull request changed vanilla mechanics by using recipe remainders in brewing stands, as documented in #2873."
    ],
    "commit_messages": [
      "Support stack aware recipe remainders (#2556)\n\n* Support stack aware recipe remainders\r\n\r\n* Fix checkstyle\r\n\r\n* Remove all overwrites\r\n\r\n* Add FabricItemStack and make RecipeRemainderHandler thread safe\r\n\r\n* Update fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/item/v1/FabricItem.java\r\n\r\nCo-authored-by: apple502j <33279053+apple502j@users.noreply.github.com>\r\n\r\n* Update fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/item/v1/FabricItem.java\r\n\r\nCo-authored-by: apple502j <33279053+apple502j@users.noreply.github.com>\r\n\r\n* Update fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/item/v1/FabricItem.java\r\n\r\nCo-authored-by: apple502j <33279053+apple502j@users.noreply.github.com>\r\n\r\n* Update fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/item/v1/FabricItem.java\r\n\r\nCo-authored-by: apple502j <33279053+apple502j@users.noreply.github.com>\r\n\r\n* Update fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/item/v1/FabricItem.java\r\n\r\nCo-authored-by: apple502j <33279053+apple502j@users.noreply.github.com>\r\n\r\n* Update fabric-item-api-v1/src/main/java/net/fabricmc/fabric/impl/item/RecipeRemainderHandler.java\r\n\r\nCo-authored-by: Technici4n <13494793+Technici4n@users.noreply.github.com>\r\n\r\n* Remove hasRecipeRemainder, Update test mod and remove unneeded mixins\r\n\r\n* Update fabric-item-api-v1/src/testmod/java/net/fabricmc/fabric/test/item/CustomDamageTest.java\r\n\r\nCo-authored-by: Salvatore Peluso <info@devpelux.xyz>\r\n\r\n* Avoid copying the ItemStack\r\n\r\n* Update fabric-item-api-v1/src/main/java/net/fabricmc/fabric/mixin/item/AbstractFurnaceBlockEntityMixin.java\r\n\r\nCo-authored-by: Salvatore Peluso <info@devpelux.xyz>\r\n\r\n* Sneakily change duplicate keybinding to a less used key\r\n\r\n* make everything thread safe and improve AbstractFurnaceBlockEntityMixin\r\n\r\n* Update fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/item/v1/FabricItem.java\r\n\r\nCo-authored-by: Technici4n <13494793+Technici4n@users.noreply.github.com>\r\n\r\n* Update fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/item/v1/FabricItemStack.java\r\n\r\nCo-authored-by: Technici4n <13494793+Technici4n@users.noreply.github.com>\r\n\r\n* Update fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/item/v1/FabricItem.java\r\n\r\nCo-authored-by: Salvatore Peluso <info@devpelux.xyz>\r\n\r\n* clear thread local and change field prefix\r\n\r\n* forgot the allow\r\n\r\n* Update fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/item/v1/FabricItem.java\r\n\r\nCo-authored-by: Salvatore Peluso <info@devpelux.xyz>\r\n\r\n* Update fabric-item-api-v1/src/testmod/java/net/fabricmc/fabric/test/item/CustomDamageTest.java\r\n\r\nCo-authored-by: Technici4n <13494793+Technici4n@users.noreply.github.com>\r\n\r\n* Add FurnaceGameTest\r\n\r\n* Change test keybind back to LShift\r\n\r\n* Fix brewing stand remainder and fix nitpicks\r\n\r\n* add code example to remainder javadoc\r\n\r\n* Fixed and reformatted docs, changed recipe mixin behavior to store the remainder stack instead of the original stack, refactoring.\r\n\r\n* Added gametests for brewing stand and recipe mixins, fixed furnace gametest compairing stacks with themselves.\r\n\r\n* Use (0,1,0) position for game tests\r\n\r\n* Review changes\r\n\r\nCo-authored-by: apple502j <33279053+apple502j@users.noreply.github.com>\r\nCo-authored-by: Technici4n <13494793+Technici4n@users.noreply.github.com>\r\nCo-authored-by: Salvatore Peluso <info@devpelux.xyz>\r\nCo-authored-by: modmuss50 <modmuss50@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662306e50ac82a74541b2199",
    "number": 2555,
    "body": "If a structure cannot be found, we now fall back to vanilla's codepath, rather than throwing an exception. This offers the following advantages:\r\n\r\n - Makes it easier to use game tests in multi-loader setups, as the structure path is consistent across loaders.\r\n - As structures are now looked up from `testStructuresDirectoryName`, it's now possible to store structures in plain text (.snbt) rather than their binary form (.nbt).\r\n",
    "head_branch": "hotfix/gametest-structure-loading",
    "is_a_fork": true,
    "comments": [
      "> it's now possible to store structures in plain text (.snbt)\r\n\r\n- The existing code only supported using snbt files. \r\n\r\n- With this change a missing structure will throw a misleading error about the fallback location.\r\n\r\n- The testmod should be expanded to cover this.\r\n\r\nI wonder if it would be better to offer an API that allows mods to customise how the structures are loaded? The vanilla location for test structures is less than ideal IMO, allowing mods to have full control over this seems like an even better solution to me?",
      "> The existing code only supported using snbt files.\r\n\r\nAhh, you're entirely right. I think I had registered this at some point, but forgot by the time I came to write the commit message. Apologies! \r\n\r\n> With this change a missing structure will throw a misleading error about the fallback location.\r\n\r\nWould you prefer a more complete implementation which tries the three paths and lists the paths it tried?\r\n\r\n> I wonder if it would be better to offer an API that allows mods to customise how the structures are loaded? The vanilla location for test structures is less than ideal IMO, allowing mods to have full control over this seems like an even better solution to me?\r\n\r\nInitial disclaimer here that this may be in part just a documentation/understanding issue. I'm fairly sure I understand how the vanilla/Forge gametest workflow works, but still trying to grok what Fabric has (and hasn't) changed.\r\n\r\nWhile vanilla's default location definitely isn't perfect, `testStructuresDirectoryName` isn't final, which means mods can overwrite it to point to a more sensible location. More crucially, `/test export` saves to this directory, which makes the test workflow much more convenient than having to shuffle files about after exporting.\r\n\r\nMy concern with an API is that once you start looking in custom locations, you break the symmetry between the `/test import|export` commands and the actual gametest structure loading. I'm not sure - happy to implement whatever API if it is wanted though!",
      ">  More crucially, /test export saves to this directory, which makes the test workflow much more convenient than having to shuffle files about after exporting.\r\n\r\nThis is a great point, the current solution does add a bit more friction for developing these tests. The easier they are to add, the more likely people are going to adopt them. (I dont think many people use them right now)\r\n\r\nIts been a little while since I looked at this stuff so I think I'll need to familiarise my self before I can give a fully informed suggestion.  ",
      "Looking at this patch again, it occurs to me that falling back to vanilla behaviour isn't correct either, as the template name now contains the mod id, so this will look up files in the form `modid:test_name.snbt` instead.\r\n\r\nI wonder if the following set of changes is a little more preferable:\r\n - Make this mixin now search in `Paths.of(testStructuresDirectoryName, structureId.getPath() + \".snbt\")` and _then_ inside the datapack.\r\n - Support setting `testStructuresDirectoryName` via a `fabric-api.gametest.structure-dir` system property.\r\n\r\nMods can then set this property to `src/testmod/resources/data/$modid/gametest/structures` inside their Gradle config. This is a little clunky, so I'm not too sure about it, but it does preserve. the existing layout and behaviour but with the existing advantage that the `/test` commands work as expected.",
      "I believe the proper way, 1.19+, is to register `StructureTemplateManager.Provider` instead of Mixin.",
      "I guess the problem with `StructureTemplateManager.Provider` is that it also doesn't provide the paths it has tried. I don't know how much that matters?",
      "Superseded by #2801."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306e50ac82a74541b219a",
    "number": 2554,
    "body": "This is useful when writing test reports to a child directory, such as `$buildDir/reports/tests/gametest.xml` instead.\r\n\r\nThe alternative option here would be to put this call inside a mixin to `XmlReportingTestCompletionListener`. Creating a subclass felt more elegant, but happy to use a mixin if preferred!",
    "head_branch": "hotfix/gametest-report-dir",
    "is_a_fork": true,
    "comments": [
      "I will merge this in alongside the next bunch of changes 👍",
      "❤️ Thanks all for reviewing :)",
      "Wonderful, thank you so much!"
    ],
    "commit_messages": [
      "Create parent directory when writing test report (#2554)\n\n* Create parent directory when writing test report\r\n\r\n* Change access modifier to package-private\r\n\r\n* Add a wee bit of documentation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306e60ac82a74541b219b",
    "number": 2549,
    "body": "Update GHA to ubuntu 22.04 in an attempt to fix release issues. PR to let actions run to ensure it still builds.",
    "head_branch": "build_container",
    "is_a_fork": true,
    "comments": [
      "This was reverted after merging."
    ],
    "commit_messages": [
      "Update GHA to ubuntu 22.04 to try and fix release issues. (#2549)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306e70ac82a74541b219c",
    "number": 2547,
    "body": "I noticed this warning when trying to use `DefaultResourceConditions.itemTagsPopulated`, and I figured I'd also fix it in the other places.",
    "head_branch": "res-cond-vararg",
    "is_a_fork": true,
    "comments": [
      "~~Actually I am going to combine this fix with an implementation of #2548. :wink:~~ Nevermind."
    ],
    "commit_messages": [
      "Fix @SafeVarargs warnings in Resource Conditions and ColorProviderRegistry (#2547)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306e80ac82a74541b219d",
    "number": 2545,
    "body": "## Summary\r\nThis event is called when the initial resource reload has completed and the splash-screen is beginning to fade to the title screen.\r\n\r\n## Why is it needed?\r\nIt may be necessary for some mods to do post-startup tasks like displaying a toast. It guarantees an environment of safety where everything is loaded and the game has actually started up fully. An example of it's use is in [Zoomify](https://github.com/isXander/Zoomify/blob/1.19/src/main/kotlin/dev/isxander/zoomify/Zoomify.kt#L143).\r\n",
    "head_branch": "1.19.2",
    "is_a_fork": true,
    "comments": [
      "As modmuss said on discord:\r\n> Your use case seems better covered by ScreenEvents.AFTER_INIT?\r\n\r\nIf you agree you can close this PR, otherwise feel free to let us know why. 🙂",
      "I feel a dedicated event here would be best because it's easier to find, if I want an event to fire when the game starts, I immediately look to lifecycles.",
      "If there already exists a general purpose event, I don't see a reason to introduce a more specific one. The documentation issue could be addressed with a wiki page listing all the existing events."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306e90ac82a74541b219e",
    "number": 2544,
    "body": "Yet another data fixer API proposal. This time, it's a port of data fixer API from QSL, with some internal changes and new methods:\r\n\r\n- Unlike QSL, this API saves the data version in a NBT compound `_FabricDataVersions`.\r\n- Current data version can be specified in the `fabric.mod.json` file. (I suggest adding this field in FMJv2.)\r\n- `FabricDataFixerBuilder#build()` overload that uses bootstrap executor.\r\n\r\nFiles with ported code are marked with `// From QSL.` comment and a special license header.\r\n\r\nFully tested.\r\n\r\n## Future Additions?\r\n- [ ] Block entity ID\r\n- [ ] Entity type ID",
    "head_branch": "data-fixer-api/proposal",
    "is_a_fork": true,
    "comments": [
      "Note about the scope:\r\n\r\n- QSL's API seems to be derived from older PRs in this repo.\r\n- This datafixer API solves data fixing for modded contents, such as renaming a modded block or changing NBT structure. However, this provides no integration for vanilla schemas. In vanilla, all block entities and entities must be registered in a schema, otherwise there is a risk of [world corruption](https://github.com/apple502j/UpdateBlockEntity) when vanilla schema changes. There isn't a good way around this.\r\n- This also does not fix the issue with modded stuff using vanilla schema, and vanilla schema updating.\r\n\r\nDataFixer is fundamentally incompatible with the idea of modding - but I do believe that if used correctly, it is one of the most powerful tools we have.",
      "> This also does not fix the issue with modded stuff using vanilla schema, and vanilla schema updating.\r\n\r\nThis is a pretty big limitation, considering it makes this mostly usable for breaking mod updates within a single MC version.",
      "Ok, this has a very big flaw:\r\n\r\n- Modded block entities must register the schema, that certain serialized fields are for item stacks (AKA inventories).\r\n- There is 1 data fixer per each mod.\r\n- The schemas are registered per data fixer, and only the vanilla schema + data fixer's custom schema are considered when updating.\r\n- So, if anyone puts a modded, to-be-renamed item in a modded inventory from another mod, it won't update, causing world corruption.\r\n- To prevent that, you have to register that schema to all of the data fixers. Wait a minute, isn't that the current state, just with 1 schema for vanilla?\r\n\r\nClosing, this API is practically useless."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306e90ac82a74541b219f",
    "number": 2542,
    "body": "I didnt realise this wasnt a thing already untill someone asked me about it! This PR simply supports using a namespace for armor textures in custom ArmorMaterial's.\r\n\r\nAn alternative would be to extend or interface injection ArmorMaterial to add a method that returns the full `Identifier` however we decided this is a bit overkill.\r\n\r\n Closes #96",
    "head_branch": "namespaced_armor_texture",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Support namespaced armor textures. Fixes #96 (#2542)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306ea0ac82a74541b21a0",
    "number": 2540,
    "body": "I would like to enable `-Dmixin.debug.strict=true` to prevent this from happening again in the future however this seems to conflict with Loaders access fixer in dev.",
    "head_branch": "Mixin_shadow_access",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Cleanup incorrect mixin shadow annotations/access"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306eb0ac82a74541b21a1",
    "number": 2538,
    "body": "Checkstyle update is a bit stricter on redundant modifiers.\r\n\r\nLoom update requires all modules to be bumped alongside the JavaDoc fixes PR.",
    "head_branch": "loom_1_0",
    "is_a_fork": true,
    "comments": [
      "Resolves #1991 I think? (see [checkstyle 10.1 change](https://github.com/checkstyle/checkstyle/issues/10776))",
      "Updated this to add the license file to all jars to fix #2277 ",
      "This doesn't seem to have fixed #1991, given the build failure of #2579 ?"
    ],
    "commit_messages": [
      "Update Loom, Yarn, Checkstyle (#2538)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306ec0ac82a74541b21a2",
    "number": 2535,
    "body": "Backport of https://github.com/FabricMC/fabric/pull/2446\r\nFixes: https://github.com/FabricMC/fabric/issues/2527\r\n\r\nI dont believe there is a major wish for this in 1.17, if there is let me know.",
    "head_branch": "fabric_api_1_18",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Rename modid to \"fabric-api\" and provide \"fabric\" (#2535)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306ec0ac82a74541b21a3",
    "number": 2534,
    "body": "This change is needed to allow other mods to generate data for a different modid. My usecase is that I have a `techreborn-datagen` mod that is not shipped in production builds that generates data for the `techreborn` mod.\r\n\r\nThis is needed as the Fabric data gen api has a number of places where it uses the modid in the data generation logic such as: https://github.com/FabricMC/fabric/blob/1.19.2/fabric-data-generation-api-v1/src/main/java/net/fabricmc/fabric/mixin/datagen/ModelProviderMixin.java#L119 \r\n",
    "head_branch": "effective_mod_container",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add DataGeneratorEntrypoint.getEffectiveModId (#2534)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306ed0ac82a74541b21a4",
    "number": 2533,
    "body": "Very simple event on the LivingEntity equipment change, needed to remove a mixin from my (and other people's) mod :)\r\n\r\nThis is only fired on the server and also fires when the entity joins the world.",
    "head_branch": "EquipmentChange",
    "is_a_fork": true,
    "comments": [
      "Note: closes #990."
    ],
    "commit_messages": [
      "Add ServerEntityEvents.EquipmentChange event (#2533)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306ee0ac82a74541b21a5",
    "number": 2526,
    "body": "This is a comprehensive javadoc-fix PR. I recommend bumping all minor versions due to javadoc linking change.\r\n\r\n## Javadoc Links\r\nThe following external links are now resolved:\r\n\r\n- Minecraft (yarn) (why didn't we do this MUCH earlier??)\r\n- Libraries that we currently link to: Netty (Networking), LWJGL (Screen), Gson (Resource Conditions), fastutil (Registry Sync)\r\n- SLF4J (since Log4J is currently resolved)\r\n- Guava docs now link to version 31, the one actually used by the game.\r\n- The following libraries are not added, because they are either undocumented or unnecessary: Brigadier, DFU, Authlib, joptsimple, oshi, Apache Commons (IO, lang3), ICU4J, etc\r\n\r\nI am unsure if this means every MC version bump now requires all mod versions to be bumped too if they have a javadoc; I suppose so. Not a big deal, imo.\r\n\r\n## Typo and rendering issue fix\r\nNote: this does not fix issues arising due to access error (javadoc fails to link to access-restricted things).\r\n\r\n- `BlockEntityRendererRegistry` (Renderer Registries, deprecated): replace intermediary w/ named\r\n- `BooleanFunction` (API Base): fix `an boolean-valued`\r\n- `NbtType` (API Base): fix linking\r\n- `TriState` (API Base): fix missing comma, \"fallback to\"/\"fall back to\"\r\n- `ApiLookupMap` (API Lookup): fix `A a`\r\n- `BiomeModificationContext` (Biome): fix `datapack` (Yarn convention is `data pack`)\r\n- `BiomeModifications` (Biome): fix comma, \"datapack\"\r\n- `BiomeSelectionContext` (Biome): fix link to renamed class\r\n- `BiomeSelectors` (Biome): fix \"datapack\", links to now-removed Fabric Biome Tag API, typos (`whos keys is`, `barrends`)\r\n- `BlockRenderLayerMap` (Block Render Layer): fix `a item`\r\n- `ConventionalBiomeTags` (Conventional Tags): fix `an predominant`\r\n- `ConventionalEnchantmentTags` (Conventional Tags): fix `in regards to`\r\n- `FabricAdvancementProvider` (Datagen): fix link to renamed class\r\n- `FabricRecipeProvider` (Datagen): fix escaping\r\n- `BlockAttackInteractionAware` (Interaction Events): fix typo `Convienence`\r\n- `PlayerBlockBreakEvents` (Interaction Events): fix wrong link syntax\r\n- `GameRuleFactory` (Game Rule): fix comma\r\n- `FabricItem` (Item): fix comma\r\n- `ServerChunkEvents` (Lifecycle Events): fix `an chunk`\r\n- `ServerLifecycleEvents` (Lifecycle Events): fix `it's client`\r\n- `ServerMessageDecoratorEvent` (Messaging): fix escaping\r\n- `ClientPlayConnectionEvents` (Networking): fix `setup` to `set up`\r\n- `ClientPlayNetworking` (Networking): fix `a the`\r\n- `EntityTrackingEvents` (Networking): fix comma\r\n- `ServerLoginNetworking` (Networking): fix link to client code, typo `all all`\r\n- `ServerPlayNetworking` (Networking): fix link to client code, `a the`\r\n- `MinecartComparatorLogicRegistry` (Object Builder): fix `compator`\r\n- `TradeOfferHelper` (Object Builder): fix `trade off factory`\r\n- `FabricSpriteProvider` (Particle): fix `recieve`, `resourcepacks`\r\n- `FabricParticleTypes` (Particle): fix link to non-existent class\r\n- `MutableQuadView` (Renderer): fix `different than` (not from), wrong link to method\r\n- `FabricBakedModel` (Renderer): fix comma, `special- cased` (notice the space)\r\n- `SpriteFinder` (Renderer): fix comma\r\n- `FluidRenderHandler` (Fluid Rendering): fix comma, `@return` on `void` method\r\n- `ColorProviderRegistry` (Rendering): fix `acquire the provide for`\r\n- `LivingEntityFeatureRendererRegistrationCallback` (Rendering): fix `may used`\r\n- `IdentifiableResourceReloadListener` (Resource Loader): fix `an unique`\r\n- `ResourceManagerHelper` (Resource Loader): fix comma\r\n- `ScreenEvents` (Screen): fix `it's`, comma, links to removed method\r\n- `FluidVariantRenderHandler` (Transfer): fix method link\r\n- `ContainerItemContext` (Transfer): fix missing word after `should be`, hyphenate \"nonnegative\"\r\n- `FluidConstants` (Transfer): fix \"how much droplets\" (droplets are countable)\r\n- `FluidVariant` (Transfer): fix method links by replacing with `@code`\r\n- `SingleFluidStorage` (Transfer): hyphenate \"nonnegative\"\r\n- `PlayerInventoryStorage` (Transfer): fix `overriden`\r\n- `Storage` (Transfer): hyphenate \"nonnegative\"\r\n- `TransferVariant` (Transfer): fix method links by replacing with `@code`\r\n- `SingleVariantItemStorage` (Transfer): replace \"subtags\" with \"sub-NBTs\"\r\n- `Transaction` (Transfer): hyphenate \"non null\"\r\n",
    "head_branch": "misc/javadoc-fixes",
    "is_a_fork": true,
    "comments": [
      "> I am unsure if this means every MC version bump now requires all mod versions to be bumped\r\n\r\nThis is what the hash is mainly used to combat possible issues with this, as its just the JavaDoc im not too worried either."
    ],
    "commit_messages": [
      "Fix many javadoc issues (#2526)\n\nCo-authored-by: Juuz <6596629+Juuxel@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306ef0ac82a74541b21a6",
    "number": 2525,
    "body": "Resolves `Packet too big (is x, should be less than 8388608)` error, most commonly caused by `SynchronizeRecipesS2CPacket` becoming too big because of too many recipes, but any packet can cause this, especially if NBT is involved.\r\n\r\n`CustomPayload*Packet` (mod packets) are not affected by this PR and will still error if it exceeds the limit (1mb for S2C, 32kb for C2S), should Fabric also handle splitting those?",
    "head_branch": "split-packet",
    "is_a_fork": true,
    "comments": [
      "This is hard to maintain and does clearly change the behavior that oversized packets kick the player/are discarded. (Those are ones that I believe we should keep. We aren't Spigot.)\r\nWe should split recipe packets only, if at all, and if we do we need to make it compatible with proxies. Oversized NBT has other problems that are more complicated.",
      "I agree, I think this is out of scope of what Fabric API should be doing. As @apple502j pointed out this raises some major compability concerns with 3rd party tools. As well as possibly breaking compaiblity with vanilla or older fabric api clients.\r\n\r\nI would be more open to ensuring our networking API provides the tools to allow a seperate mod achieve this. I also dont think splitting specific packets like the recipes is a good solution either. Ideally this would be fixed by mojang (Its quite possible to hit the limit with a datapack in vanilla).",
      "> I also dont think splitting specific packets like the recipes is a good solution either. Ideally this would be fixed by mojang (Its quite possible to hit the limit with a datapack in vanilla).\r\n\r\nWe can't just wait for mojang to fix stuff if our users are having an issue. There's a lot more recipes in modded than in the typical vanilla + datapacks scenario. IMO",
      "Many thanks for the PR, but im going to close it as it is out of scope for API. There are issues with some vanilla packets growing too large with many mods, im not quite sure what the best solution is. Sadly I dont think this is it."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306f00ac82a74541b21a7",
    "number": 2521,
    "body": "#### **`sounds.json` Entry Helper | [SoundEventEntry](https://github.com/mineblock11/fabric/blob/data-providerathon/fabric-data-generation-api-v1/src/main/java/net/fabricmc/fabric/api/datagen/v1/helpers/SoundEventEntry.java)**\r\n\r\nMojang does not specifically provide codecs for the sounds.json format, since the `sounds.json` provider (FabricSoundsProvider) required a class to store data on entries, I have provided a few codecs that may be useful to modders because the entry helper utilizes the same structure defined by Minecraft. \r\n\r\nMore info on structure on [Minecraft Wiki](https://minecraft.fandom.com/wiki/Sounds.json)\r\n\r\n#### `FabricSoundsProvider`\r\n\r\n> tbd, still in progress",
    "head_branch": "data-providerathon",
    "is_a_fork": true,
    "comments": [
      "I'd avoid the breaking changes, the restructuring doesn't seem necessary here.",
      "Its getting very large though - are package restructuring considered breaking changes? Functionality stays the same?",
      "Yeah, they're breaking changes - running mods built against older versions would crash and compiling old code against the new version would fail.\r\n\r\nedit: Ah yes, github is breaking again",
      "You've just gotta update the imports, unless that causes problems - which it shouldn't?",
      "Yeah, they're breaking changes - running mods built against older versions would crash and compiling old code against the new version would fail.",
      "Ah I see - okay, i'll sort it out then",
      "Reverted",
      "You can probably use the new package style for new stuff.",
      "Closing, will re-PR for hacktoberfest because why not? :D",
      "I don’t think that’s a good idea. You loose all of the comment history. Makes it harder to find the discussion in the future."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306f00ac82a74541b21a8",
    "number": 2519,
    "body": "This is the same as https://github.com/FabricMC/fabric/pull/2437\r\nSee discussion in https://github.com/FabricMC/fabric/pull/2437\r\n\r\n- [x] ~Lithium causes crash because overwrites the mixin.~ (fixed on fabric side by lowering mixin priority to 999, needs an update on lithium side to remove the overwrite mixin (see [PR #392](https://github.com/CaffeineMC/lithium-fabric/pull/392))\r\n- [x] Separate advanced (with world and pos) from main registry, and add a way to check if a block is registered with advanced, or simple, node type customization (this is useful for performance mods).\r\n\r\n# Summary\r\n\r\nThis pr adds a way to specify that a specific block will cause damage, and entities should avoid that block.\r\nIn vanilla this is done by getting the node type for the block while calculating the path for the entity (every block is a node).\r\n\r\nYou can also specify what an entity will think aboud the block when finds it in a neighbor position in his path, while traveling the world terrain.\r\n\r\n# Testing\r\n\r\nDead Bush is marked as dangerous, with the same value as berry bush, every entity (except foxes and bees) avoid it.\r\n\r\nhttps://user-images.githubusercontent.com/32025549/182221967-e24de458-94d0-47d3-8ca9-6e513223cdfb.mp4\r\n",
    "head_branch": "land-path-node-type-registry",
    "is_a_fork": true,
    "comments": [
      "@kevinthegreat1 i've changed almost all files, please re-check again for grammar errors.",
      "Pepper commented the following on Discord:\r\n> Will a method with BlockPos and level be added?\r\nI read that not passing those allows the type to be cached, which is true, but what if that is not enough context? Both paths should exist.\r\n\r\nThoughts?",
      "I have an idea about this, i will push for review tomorrow.\r\n- [x] ~Will a method with BlockPos and level be added?~ reworked including this too",
      "#### Brief resume of the last changes (20 September)\r\nI've used the previous solution (with a registry instead of injected interfaces), but now there are two registration methods (for dynamic and static registration) + some new methods to check if a block is registered and if it is registered as static or dynamic.  \r\nI've also reverted by using dead bush for testing (this is only a detail).",
      "Thanks a lot for this @devpelux and especially for putting in the effort to sort out the issues we found last min when we first merged this. 👍 "
    ],
    "commit_messages": [
      "Add way to specify the PathNodeType for a block, add missing tests in content registries testmod. (#2519)\n\n* Added LandPathNodeTypesRegistry.\r\n\r\n* Added test for LandPathNodeTypesRegistry.\r\n\r\n* Added block state to PathNodeTypeProvider.getPathNodeType.\r\n\r\n* Made LandPathNodeTypesRegistry final, removed unnecessary NotNull.\r\n\r\n* Changed putIfAbsent with put to align with other registries.\r\n\r\n* Cleanup.\r\n\r\nCo-authored-by: Technici4n <13494793+Technici4n@users.noreply.github.com>\r\n\r\n* Removed unused import.\r\n\r\n* Added possibility to specify the node type of block if the block is found in a neighbor position, improved documentation.\r\n\r\n* Merged mixins cleanup.\r\n\r\n* Changed CAPTURE_FAILEXCEPTION into CAPTURE_FAILHARD\r\n\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>\r\n\r\n* Specified some nullables, changed 2 parameter names.\r\n\r\n* Added missing content registries tests, changed NODE_TYPES map to IdentityHashMap, improved docs.\r\n\r\n* Moved PathNodeTypeProvider inside LandPathNodeTypesRegistry.\r\n\r\n* Registry revised to make it possible to distinguish between blocks with dynamic and static node types, reduced LandPathNodeMakerMixin priority, applied suggested docs improvements.\r\n\r\n* Changed INVOKE with shift, with INVOKE_ASSIGN.\r\n\r\n* Merged all LandPathNodeTypesRegistry utility methods used to check the registration type into a single one.\r\n\r\n* Inverted if sequence in LandPathNodeTypesRegistry.getPathNodeType, improved docs.\r\n\r\n* Sealed PathNodeTypeProvider and made public, cleaned and simplified LandPathNodeTypesRegistry by removing useless mechanics.\r\n\r\n* Improved docs.\r\n\r\n* Improved docs (2).\r\n\r\nCo-authored-by: Technici4n <13494793+Technici4n@users.noreply.github.com>\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306f10ac82a74541b21a9",
    "number": 2518,
    "body": "- Add class javadoc, including code usage example and note on creative inventory search.\r\n- Fix consistency issues with the javadoc.\r\n- Fix \"This is used to add an icon *to to* the item group.\" typo in javadoc.\r\n- Make `identifier` field `final`.\r\n- Add argument null checks.\r\n- When expanding the array, use `System.arraycopy` for copying.",
    "head_branch": "item-groups/refactor-and-javadoc",
    "is_a_fork": true,
    "comments": [
      "@Technici4n The present tense 3rd person wording (like \"sets\") is what [Yarn's conventions suggest in their examples](https://github.com/FabricMC/yarn/blob/1.19.2/CONVENTIONS.md#javadocs) and what for example the JDK uses."
    ],
    "commit_messages": [
      "Item Group API: refactor & add more javadoc (#2518)\n\n* Item Group API: add more javadoc\r\n\r\n* Code refactor"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306f20ac82a74541b21aa",
    "number": 2514,
    "body": "[Live example with Fabric API commits](https://github.com/Juuxel/fabric/commit/166e85346389badc1ba3c3334a7a0ebf7f2ae8b6#diff-36b837448e047a6ec77e9ab971eaca76f9e9735eb83d6fce754efd4460057a44)\r\n\r\nScreenshot with Loom: ![](https://github.com/Juuxel/publish-checkstyle-report/raw/main/example.png)",
    "head_branch": "add-checkstyle-report-action",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add publish checkstyle report action (#2514)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306f30ac82a74541b21ab",
    "number": 2509,
    "body": "When a mod comes across an AbstractFileResourcePack, it should be safe to assume that the pack is a resource pack based on a File (as the name suggests).\r\nThat is not true in this implementation as the attached \"base\" File is null.\r\nThis PR adjusts ModNioResourcePack to no longer extend AbstractFileResourcePack and instead implement the small number of features it provided manually.",
    "head_branch": "mod-nio-without-file",
    "is_a_fork": true,
    "comments": [
      "No need for last call as its not an API change, I will test with a handful of mods before merging."
    ],
    "commit_messages": [
      "ModNioResourcePack: don't extend AbstractFileResourcePack (#2509)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306f40ac82a74541b21ac",
    "number": 2506,
    "body": "Adds stack-aware enchantability for modular/tiered tools",
    "head_branch": "1.19.2",
    "is_a_fork": true,
    "comments": [
      "Oops intellij autoformatted the JD",
      "Not sure about this one. It doesn't seem general-purpose enough to be in `FabricItem`. Maybe not even in Fabric API ?",
      "> Not sure about this one. It doesn't seem general-purpose enough to be in `FabricItem`. Maybe not even in Fabric API ?\r\n\r\nMaybe can be useful to get an enchantability count basing on the stack nbt.  \r\nI don't see other usages.",
      "After more considerations I think this would be nice to have. @Devan-Kerman can you fix the build?",
      "Next?",
      "Remember to add a test and update to 1.19.3."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306f40ac82a74541b21ad",
    "number": 2504,
    "body": "A deeper analysis can be found at https://discord.com/channels/507304429255393322/807617284129423370/1015895367168036874",
    "head_branch": "1.19.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix crash when replacing SimpleRegistry contents (#2504)\n\n* Fix crash when replacing SimpleRegistry contents\r\n\r\n* Called .value() two more times"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306f50ac82a74541b21ae",
    "number": 2493,
    "body": "**TODO:**\n\n- [ ] Config Serialization\n- [ ] Structure Definition\n   + [ ] Annotations\n   + [ ] Manual Definition\n- [ ] UI Widget Wrappers\n- [ ] Testmod\n\n<hr>\n\nDiscussion on the Fabric discord has brought up numerous questions on a centralised configuration API that should be part of Fabric API.\r\n\r\nA few points that were recommended:\r\n\r\n- NO Automatic Config Screens\r\n\r\nInstead of automatic config screens being created, config widgets should be provided (`FabricBooleanConfigWidget` as ex.) to ease creation of config screens.\r\n\r\n- Swappable Serializers\r\n\r\nThe API by default will provide TOML, JSON and YML Serializers, the users may extend the `AbstractConfigSerializer` class to create their own Serializers.\r\n\r\n- Config classes being registered at `FabricConfigRegistry` \r\n\r\n- Config files should be found in the config folder, as usual, in the format where the mod ID is the file name.\r\n\r\n<hr>\r\n\r\nHow will this work?\r\n\r\n> Will update this with the test mod examples on Saturday, this is a draft PR for a reason because it's still WIP.\r\n\r\n1) Users can either use annotations, or define their config structure via other means.\n\n\n**Annotations**:\n\nUsers will create a class and mark it using the `FabricConfig` annotation, inside this class, all fields will be serialized into the config file. You can exclude fields and non-static sub classes with the `NoConfig` annotation.\n\n**Manual Defining Structure**:\r\n\r\nUnsure - [TBD] - Open for discussion \r\n\r\n2) Users will then register this class to the `FabricConfigRegistry` during mod init - like so:\r\n\r\nThe user would also specify the Serializer, by default this would be JSON.\r\n\r\n```java\r\nFabricConfigRegistry.register(new Identifier(...), MyConfigClass.class, new YMLSerializer());\r\n```\r\n\r\n4) To access the config instance, the user would call:\r\n\r\n```java\r\nFabricConfigRegistry.get<MyConfigClass>(new Identifier(...));\r\n```\r\nThe user could wrap this call as a static method in their config class for ease of access.\r\n\r\n<hr>\r\n\r\n**FAQ**\r\n\r\nI'll add to this list as questions come in via Discord and on this PR.\r\n\r\nQ: Isn't this a copy of forge?\r\n\r\nThis has been asked a few times when proposing a config API, just because forge has a built-in config API, does not mean that Fabric API can't have one.\r\n\r\nQ: There are plenty of other user created config APIs, why would we even need to add one to Fabric API?\r\n\r\nUser created config APIs have their benefits and disadvantages, but to manage mod compatability, it would be best to have a centralised API that is part of Fabric API already.\r\n\r\nQ: Why don't you use java properties format? \r\n\r\nJava properties do not support complex objects like JSON, TOML, and YML.\r\n\r\nThese three formats are already established in modding, with JSON being used majorly by existing fabric mods, TOML being used by multiplatform mods and YML by ports of spigot and Bukkit plugins for compatability with old configs.\r\n\r\n> Modified readme.md, just so I could open the PR for discussion, this will be overriden by a force push on the first commit (Which should probably be by Saturday, unable to push right now.)",
    "head_branch": "config-api",
    "is_a_fork": true,
    "comments": [
      "Heavily a draft, please drop ideas and suggestions if you have any. Would be very helpful.",
      "I often find myself using more advanced features of libraries like Gson. If this is to be widely adopted, it'd probably be important to have support for things like type adapters and nested objects.\r\n\r\nOn a seperate note, wouldn't this implementation limit the creation of config instances to one per config class? It might be more desirable to use `Identifier`s here for registration and retrieval.",
      "> I often find myself using more advanced features of libraries like Gson. If this is to be widely adopted, it'd probably be important to have support for things like type adapters and nested objects.\n> \n> On a seperate note, wouldn't this implementation limit the creation of config instances to one per config class? It might be more desirable to use `Identifier`s here for registration and retrieval.\n\nUpdated register/get methods concept to use identifiers.\n\nI honestly am not that familiar with GSON adapters/advanced features, I'll take a look and see what applies to this API.",
      "Question: Will the new Config API be able to have server-only or client-only config files?  I have often encountered situations where client and server  have different settings in their respective files, leading to unpredictable results.  This may or may not be a stupid question so I apologize in advance if it is.",
      "This PR needs more justification of its design decisions.  \r\n\r\n> NO Automatic Config Screens\r\n\r\nWhy not? Config screens are more user-friendly than editing a file directly, and automatic generation means more mods will have config screens.\r\n\r\n>  Users can either use annotations, or define their config structure via other means.\r\n\r\nIf the config structure can be defined without the annotation API, why is the annotation API present? What benefits does it provide, and how do they outweigh the increased maintenance and other costs?\r\n\r\nWhy an annotation based API specifically? What benefits does it have over alternatives?\r\n\r\n> Q: There are plenty of other user created config APIs, why would we even need to add one to Fabric API?\r\n>\r\n> User created config APIs have their benefits and disadvantages, but to manage mod compatability, it would be best to have a centralised API that is part of Fabric API already.\r\n\r\nThis boils down to \"to manage mod compatibility\", which is broad and vague. \r\nWhat does managing mod compatibility mean? Why does a 1st party config API do so better than 3rd party APIs?\r\n\r\nNote that I'm playing devil's advocate, these questions don't reflect my ideas of what a config API needs.",
      "That's a pretty decent question, this could probably be done via entrypoints:\n\nRegister server config in Dedicated server entrypoint.\n\nRegister client config in client entrypoint.",
      "Now for my actual opinions\r\n> Config files should be found in the config folder, as usual, in the format where the mod ID is the file name\r\n\r\nThis is a good default, but it's often cleaner or even necessary for a mod to have multiple config files. I've split a config file before because one part needed to be loaded before the game was ready to load a different part. ",
      "> This PR needs more justification of its design decisions.  \n> \n> > NO Automatic Config Screens\n> \n> Why not? Config screens are more user-friendly than editing a file directly, and automatic generation means more mods will have config screens.\n> \n> >  Users can either use annotations, or define their config structure via other means.\n> \n> If the config structure can be defined without the annotation API, why is the annotation API present? What benefits does it provide, and how do they outweigh the increased maintenance and other costs?\n> \n> Why an annotation based API specifically? What benefits does it have over alternatives?\n> \n> > Q: There are plenty of other user created config APIs, why would we even need to add one to Fabric API?\n> >\n> > User created config APIs have their benefits and disadvantages, but to manage mod compatability, it would be best to have a centralised API that is part of Fabric API already.\n> \n> This boils down to \"to manage mod compatibility\", which is broad and vague. \n> What does managing mod compatibility mean? Why does a 1st party config API do so better than 3rd party APIs?\n> \n> Note that I'm playing devil's advocate, these questions don't reflect my ideas of what a config API needs.\n\nThe general consensus was that automatic config screens are repetitive and would make the API more complex than nessecary - however, thinking about it, it's probably better to have automatic config screens.\n\nAutomated config screens would also add the following questions:\n\n- How will the user show the screen to the player?\n- Will they have to depend on mod menu to do so?\n- How would tooltips, descriptions and other key information on config values be managed?\n\n1st party config APIs define the standards, unlike 3rd party APIs, standards defined by 1st party won't just vanish or be randomly marked deprecated - that's really it tbh, you wouldn't have 200+ mods installed that use 6 different config APIs.\n\nThe annotation API would be more efficient and simpler to understand. Some people may prefer annotations over having to define the structure via a builder or whatever is implemented for manual definition.\n\nAnnotations would probably allow automated definition, for cases where the structure doesn't really matter as long as configurations are editable without bother.\n\nManual definition would be useful for dynamic configurations, where for example: You have config values for specific players, eg: `Player372_color=red`\n\n\n\n\n",
      "i'm personally against the idea of default config screens; i believe that should be the responsibility of dedicated config mods. my opinion is that adding a config screen is roughly equivalent to a screen like ModMenu, and is outside the scope of FAPI.",
      "Codecs should have first-class support.",
      "> i'm personally against the idea of default config screens; i believe that should be the responsibility of dedicated config mods. my opinion is that adding a config screen is roughly equivalent to a screen like ModMenu, and is outside the scope of FAPI.\n\nThis is the key debate on auto config screen. FAPI should provide an instance of a config screen, but it should never modify vanilla to make the screen accessible - it should be up to the developer to show the screen.",
      "I'm going to rewrite the PR description to better explain the new structure of the API which I've thought of from the feedback given",
      "> Now for my actual opinions\n> \n> > Config files should be found in the config folder, as usual, in the format where the mod ID is the file name\n> \n> \n> \n> This is a good default, but it's often cleaner or even necessary for a mod to have multiple config files. I've split a config file before because one part needed to be loaded before the game was ready to load a different part. \n\ni agree. flexibility around config paths also makes things like managing config profiles easier. i do think that mods should always have some entry in the the `config/modid` format, if only to point to where the rest of the files are. ",
      "I think we agreed on the discord to split this up into loader, and make API provide screen related stuff. Closing",
      "I see this is closed, is the config api going to happen?\r\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306f60ac82a74541b21af",
    "number": 2492,
    "body": "There is an extremely rare chance that the block entity is different from the one associated with the current block state. For example, if the block state is of a chest but the block entity is a mob spawner, the `(T)` cast below would otherwise fail when a mod registers an API for chests since it tries to cast `MobSpawnerBlockEntity` to `ChestBlockEntity`.\r\n\r\nSee also: `BlockWithEntity#checkType` https://maven.fabricmc.net/docs/yarn-1.19.2+build.8/net/minecraft/block/BlockWithEntity.html#checkType(net.minecraft.block.entity.BlockEntityType,net.minecraft.block.entity.BlockEntityType,net.minecraft.block.entity.BlockEntityTicker)",
    "head_branch": "api-lookup-api/fix-block-entity-cast",
    "is_a_fork": true,
    "comments": [
      "As I said on Discord, I don't think mods should be expected to deal with such desyncs everywhere and silently failing when appropriate, so I don't think Fabric API should guard against it.\r\n![image](https://user-images.githubusercontent.com/13494793/187555859-f293bf1e-a8d0-4d2e-85d4-22d8be0ed3a2.png)\r\n\r\nYour thoughts?",
      "The \"root cause\" AFAIK is a vanilla issue, but I don't know the exact detail and I don't think that should be in FAPI. (I do know that some worldgen glitches caused that in the past and that vanilla game almost never does unchecked cast for BlockEntity.)\r\n\r\nMods generally don't care, but there's also little reason to not merge this. Maybe this is a wontfix, you can decide.",
      "Now that the BE is set as soon as the block is set everywhere, I think these checks are leftovers from legacy code.\r\n\r\nClosing as I don't think this is a good practice. (Might reconsider later if these issues start occurring again)."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306f70ac82a74541b21b0",
    "number": 2490,
    "body": "Added line because people probably want to use their GameEvent for the Warden too.",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added doc to SculkSensorRegistry (#2490)\n\n* Added line to Doc to prevent misconception\r\n\r\nAdded line because people probably want to use their GameEvent for the Warden too.\r\n\r\n* Update SculkSensorFrequencyRegistry.java"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306f80ac82a74541b21b1",
    "number": 2486,
    "body": "Closes #2474\r\n\r\n- Refactors dimension API to store the current target in an entity's field instead of a static field. While memory leak is not a concern, there is a potential issue as described in 2474; however, I'm pretty sure that cannot happen without calling impl code.\r\n- Fixes a bug where end spawn platform gets created when teleporting to the End, if the entity is not a player. This fix also consolidates the 3 mixins into one.\r\n- Add a testmod for teleporting to any dimension.\r\n",
    "head_branch": "dimension-api/refactor",
    "is_a_fork": true,
    "comments": [
      "> Fixed bug when platform is generated.\n\nPretty sure that's vanilla",
      "@mineblock11 This is inconsistent with players, which if teleported using this API do not generate the obsidian platform."
    ],
    "commit_messages": [
      "Refactor Dimension API and fix a bug (#2486)\n\n* Refactor dimension API to use less static var\r\n\r\n* Refactor test code\r\n\r\n* Fix end spawn platform generation with non-player teleport\r\n\r\n* Fix wrong cast\r\n\r\n* Add and refactor tests\r\n\r\n* Fix spotless\r\n\r\n* Mark impl as internal"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306f90ac82a74541b21b2",
    "number": 2478,
    "body": "# Message API ALLOW_MESSAGE_TO_PLAYER\r\n\r\n## Resolves\r\n\r\nImplements some of #1147 \r\n\r\n## What is this?\r\n\r\nThis adds the ALLOW_MESSAGE_TO_PLAYER event to ServerMessageEvents. It's similar to the `ALLOW_COMMAND_MESSAGE` and `ALLOW_CHAT_MESSAGE`  but it operates on a per-player basis. It applies to any messages a player sends, including commands like `/msg`, `/say`, and `/me` and messages sent as normal chat messages through the GUI.\r\n\r\n## What does this not do?\r\n\r\nThis API does not apply to messages sent by anything other than a player.\r\n\r\n## Testing\r\n\r\nThis mod uses the same mixins that the former Message Channels used so all that testing is still useful. I further tested it using the current API with the `/msg`, `/say`, and `/me` commands. It was also tested on sending messages from things other than a player using `/execute`. The testmod blocks the player from seeing any message with their username in it.",
    "head_branch": "message-channels",
    "is_a_fork": true,
    "comments": [
      "Ah, this is per-player. Then we need a new event, yeah. That said we should provide this as generic event, not usage-specific one.",
      "> Ah, this is per-player. Then we need a new event, yeah. That said we should provide this as generic event, not usage-specific one.\n\nI think you're right. I can keep the mixins the same and add the event."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306f90ac82a74541b21b3",
    "number": 2474,
    "body": "Considering some optimizing mod would use multi-thread algorithm on entity calculation, single-thread custom target getting/setting might be not thread-safe, making the entities teleporting to wrong places.\r\n\r\nReplacing it with `ThreadLocal` might solve this potential problem. `Entity.moveToWorld` is single-thread, so using `ThreadLocal` won't miss the data.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "We should instead store this in entity field (assuming that works?)\r\n\r\nI'll try to PR this somewhere this week.",
      "> We should instead store this in entity field (assuming that works?)\n\nWell, that's a great idea. But teleporting is a continuous process, and at one time a thread can only run for one entity, which is enough.\n\nSo there's no need to modify current codebase.",
      "Imo it's fair enough to assume that there's only one active server world at a given time. Multithreading mods are inherently broken, and shouldn't be used.",
      "Of course only one server world is active at one time. But there could be more than 1 thread calculating entities in order to solve Mojang's annoying optimization. Some mod can do this, and I don't wanna see it breaking Fabric API or any essential module.",
      "This API assumes that it is called from the server thread (with the assumption that there is a server thread per server) and crashes otherwise. I don't believe this is what we should support, esp with potential performance concerns ThreadLocal gives."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306fa0ac82a74541b21b4",
    "number": 2473,
    "body": "This is a draft PR as I design an abstraction to work with inventory slots, which will lead to a few (rather minor) breaking changes, and as such will need to be postponed until 1.20.\r\n\r\nIt will be based on [`SlottedStorage`](https://github.com/Technici4n/fabric/blob/transfer-api-v3/fabric-transfer-api-v1/src/main/java/net/fabricmc/fabric/api/transfer/v1/storage/SlottedStorage.java), but I am still going to be figuring out the details for a while.",
    "head_branch": "transfer-api-v3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306fb0ac82a74541b21b5",
    "number": 2464,
    "body": "This PR allows modders to add stack aware recipe remainders\r\nThis is useful for mods that adds custom buckets that support different fluids\r\n\r\nThis address the long lasting issue #50",
    "head_branch": "1.18.2-remaining",
    "is_a_fork": true,
    "comments": [
      "> I'd avoid those `@Overwrite`s if possible. This is quite a lot considering there are **none** currently in Fabric API.\r\n\r\nFor tthese two ones I don't see another way of doing this since they are in for loops and I can't capture the locals with a redirect so this is my only choice unless someone has a better solution I can implement",
      "Sorry i deleted my review before Juuxel comment, however i will do a pr in the source fork. 😅",
      "Removed the `next` tag untill this has been updated to 1.19.2",
      "Any news? @AlphaMode ",
      "Superseded by #2556"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306fc0ac82a74541b21b6",
    "number": 2456,
    "body": "Adds a workaround to still call the AFTER_PLAYER_CHANGE_WORLD event when a player is moving from the end to the overworld.",
    "head_branch": "fix-after-player-world-change",
    "is_a_fork": true,
    "comments": [
      "Not sure if this is the best idea, two different things should not trigger the same event.",
      "I mean, as long as the event is only called once when a player changed worlds, I would say that this is fine. I would not expect the average person using the api to expect that AFTER_PLAYER_CHANGE_WORLD does not apply to changing worlds from the end to the overworld.",
      "If the player is killed and resurrected, wouldn't some sort of player resurrect event make more sense for this?",
      "They aren't really killed. They are just removed from all worlds while they are on the credits screen."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306fd0ac82a74541b21b7",
    "number": 2452,
    "body": "The texture provider will allow the dynamic generation of textures through the usage of BufferedImage/Graphics2D. (or external libraries, a byte[] overload is present for all the consume methods)\r\n\r\nSee testmod for example usage.\r\n\r\nSome things I want to do before this PR is ready:\r\n\r\n- [x] Utility methods to get BufferedImage from any png in the assets/minecraft folder\r\n\r\nPersonally, I don't think fabric should manage image manipulation, it should be the user's decision to pick a suitable method of manipulation.",
    "head_branch": "texture-provider",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306fd0ac82a74541b21b8",
    "number": 2451,
    "body": "The FabricLanguageProvider class allows users to generate lang files dynamically.\r\n\r\nExample usage can be found in the testmod.\r",
    "head_branch": "lang-provider",
    "is_a_fork": true,
    "comments": [
      "Honestly language providers should be separated by class and the language parameter should be specified by the constructor similar to how forge does this",
      "> Honestly language providers should be separated by class and the language parameter should be specified by the constructor similar to how forge does this\r\n\r\nHm, this would prevent some use cases though, for example: Downloading translation exports from translations websites, usually it comes in the format of a json array, with each element being a language. (Well, with experience with translatr, this is the usual export format)\r\n\r\n\r\n\r\n\r\n",
      "I'll seperate lang codes now.",
      "Noteable changes: \r\n\r\nhttps://github.com/FabricMC/fabric/blob/465261613a7b224d3b7412c5f841e8daf864a3b7/fabric-data-generation-api-v1/src/main/java/net/fabricmc/fabric/api/datagen/v1/provider/LanguageConsumer.java#L36-L61",
      "Alright, TreeMap is being used to sort the language files alphabetically, result of testmod (en_us):\r\n\r\n```json\r\n{\r\n  \"attribute.name.generic.armor\": \"Generic Armor\",\r\n  \"block.fabric-data-gen-api-v1-testmod.simple_block\": \"Simple Block\",\r\n  \"entity.minecraft.allay\": \"Allay\",\r\n  \"fabric-data-gen-api-v1-testmod.identifier_test\": \"Identifier Test\",\r\n  \"itemGroup.fabric-data-gen-api-v1-testmod.default\": \"Datagen Itemgroup\"\r\n}\r\n```",
      "I'll commit the rest later",
      "Alright. i've pushed hopefully the last commit - I cannot see where I can improve, if you see anywhere improvable please review :)",
      "I would like to make another PR in the future which organizes the `providers` package, as the future PR will be adding `sounds.json` datagen, `/texts/` datagen, `/fonts/` datagen and some more datapack providers such as `dimension_type`, `item_modifiers` and `predicates`",
      "Not trying to put pressure or anything but will this be done quick cause i need to write wiki on this lol",
      "Alright, should be ready.",
      "I'm going to update the javadoc with the updated terminology later tonight."
    ],
    "commit_messages": [
      "FabricLanguageProvider - Data Generation API (#2451)\n\nCo-authored-by: modmuss50 <modmuss50@gmail.com>\r\nCo-authored-by: apple502j <33279053+apple502j@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306fe0ac82a74541b21b9",
    "number": 2450,
    "body": "Uses the new loom mixin validaition task. Removes a few un-used or duplicate mixins.\r\n\r\nHigh priority as it will be a slight pain for PRs / merging.",
    "head_branch": "rename_mixins",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Rename and validate Mixin class names. (#2450)\n\nAnd update loom."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662306ff0ac82a74541b21ba",
    "number": 2448,
    "body": "- Fix incorrect commands listed as caller. `/msg` is private message and does not \"broadcast\". `/tellraw` does not sign the content.\r\n- Replace \"Message\" with \"message body\" when referencing to the event\r\n- Add the note that events can only block the body and message headers are still broadcast\r\n- Fix incorrect/outdated code example",
    "head_branch": "message-api/docs-fix",
    "is_a_fork": true,
    "comments": [
      "Cherrypicked into 1.19.2 👍 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307000ac82a74541b21bb",
    "number": 2446,
    "body": "- Rename modid to \"fabric-api\" and provide \"fabric\"\r\n- Update loom\r\n- Update loader\r\n- Update gradle\r\n\r\n\r\nSmall looking change, but will need significant testing.",
    "head_branch": "modid-fabric-api",
    "is_a_fork": true,
    "comments": [
      "Might want to mark this as superseding/closing #1263 "
    ],
    "commit_messages": [
      "Rename modid to \"fabric-api\" and provide \"fabric\". Update loom (#2446)\n\n* Rename modid to \"fabric-api\" and provide \"fabric\"\r\nUpdate loom\r\nUpdate loader\r\nUpdate gradle\r\n\r\n* opps\r\n\r\n* Update loom and gradle again."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307010ac82a74541b21bc",
    "number": 2445,
    "body": null,
    "head_branch": "misc/ja-jp",
    "is_a_fork": true,
    "comments": [
      "Manually cherry-picked into the 1.19.2 branch. Thanks a lot 👍 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307020ac82a74541b21bd",
    "number": 2443,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Manually cherry-picked into the 1.19.2 branch. Thanks a lot 👍 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307030ac82a74541b21be",
    "number": 2437,
    "body": "# Content\r\n\r\n> A registry for associations between blocks and path node types, for land entities.\r\n\r\nThis PR adds a new registry to the content registries module, this registry is useful when some mod adds a new block that cause damage and want to flag this block to be avoided by entities.\r\n\r\nIn vanilla this is done by getting the node type for the block while calculating the path for the entity (every block is a node).\r\n\r\nTo establish which node is a specific block is done in `LandPathNodeMaker.getCommonNodeType(BlockView world, BlockPos pos)`.  \r\nThis is basically a series of ifs, so normally you should add a mixin to this method with an if to give a `PathNodeType` for your block.\r\n\r\nThis PR adds a way to do this common thing inside Fabric API.  \r\nI use this way in a mod that i'm developing.\r\n\r\n``` java\r\npublic class LandPathNodeMaker extends PathNodeMaker {\r\n[...]\r\n    protected static PathNodeType getCommonNodeType(BlockView world, BlockPos pos) {\r\n        BlockState blockState = world.getBlockState(pos);\r\n\r\n// INJECTED HERE ANOTHER IF AND RETURN\r\n\r\n        Block block = blockState.getBlock();\r\n        Material material = blockState.getMaterial();\r\n        if (blockState.isAir()) {\r\n            return PathNodeType.OPEN;\r\n        } else if (!blockState.isIn(BlockTags.TRAPDOORS) && !blockState.isOf(Blocks.LILY_PAD) && !blockState.isOf(Blocks.BIG_DRIPLEAF)) {\r\n            if (blockState.isOf(Blocks.POWDER_SNOW)) {\r\n                return PathNodeType.POWDER_SNOW;\r\n            } else if (blockState.isOf(Blocks.CACTUS)) {\r\n                return PathNodeType.DAMAGE_CACTUS;\r\n            } else if (blockState.isOf(Blocks.SWEET_BERRY_BUSH)) {\r\n                return PathNodeType.DAMAGE_OTHER;\r\n            } else if (blockState.isOf(Blocks.HONEY_BLOCK)) {\r\n                return PathNodeType.STICKY_HONEY;\r\n            } else if (blockState.isOf(Blocks.COCOA)) {\r\n                return PathNodeType.COCOA;\r\n            } else {\r\n                FluidState fluidState = world.getFluidState(pos);\r\n                if (fluidState.isIn(FluidTags.LAVA)) {\r\n                    return PathNodeType.LAVA;\r\n                } else if (inflictsFireDamage(blockState)) {\r\n                    return PathNodeType.DAMAGE_FIRE;\r\n                } else if (DoorBlock.isWoodenDoor(blockState) && !(Boolean)blockState.get(DoorBlock.OPEN)) {\r\n                    return PathNodeType.DOOR_WOOD_CLOSED;\r\n                } else if (block instanceof DoorBlock && material == Material.METAL && !(Boolean)blockState.get(DoorBlock.OPEN)) {\r\n                    return PathNodeType.DOOR_IRON_CLOSED;\r\n                } else if (block instanceof DoorBlock && (Boolean)blockState.get(DoorBlock.OPEN)) {\r\n                    return PathNodeType.DOOR_OPEN;\r\n                } else if (block instanceof AbstractRailBlock) {\r\n                    return PathNodeType.RAIL;\r\n                } else if (block instanceof LeavesBlock) {\r\n                    return PathNodeType.LEAVES;\r\n                } else if (blockState.isIn(BlockTags.FENCES) || blockState.isIn(BlockTags.WALLS) || block instanceof FenceGateBlock && !(Boolean)blockState.get(FenceGateBlock.OPEN)) {\r\n                    return PathNodeType.FENCE;\r\n                } else if (!blockState.canPathfindThrough(world, pos, NavigationType.LAND)) {\r\n                    return PathNodeType.BLOCKED;\r\n                } else {\r\n                    return fluidState.isIn(FluidTags.WATER) ? PathNodeType.WATER : PathNodeType.OPEN;\r\n                }\r\n            }\r\n        } else {\r\n            return PathNodeType.TRAPDOOR;\r\n        }\r\n    }\r\n[...]\r\n}\r\n```\r\n\r\n## Getting the node type\r\n\r\n```java\r\n@Mixin(LandPathNodeMaker.class)\r\npublic class LandPathNodeMakerMixin {\r\n    /**\r\n     * Gets the node type for the specified position.\r\n     */\r\n    @Inject(method = \"getCommonNodeType\", at = @At(\"HEAD\"), cancellable = true)\r\n    private static void getCommonNodeType(@NotNull BlockView world, BlockPos pos, @NotNull CallbackInfoReturnable<PathNodeType> cir, BlockState state) {\r\n        PathNodeType nodeType = LandPathNodeTypesRegistry.getPathNodeType(state, world, pos);\r\n\r\n        if (nodeType != null) {\r\n            cir.setReturnValue(nodeType);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n# Why a provider?\r\nI've added the registry as:\r\n```java\r\nprivate static final HashMap<Block, PathNodeTypeProvider> NODE_TYPES = new HashMap<>();\r\n```\r\n\r\nPathNodeTypeProvider is an interface that has one method:\r\n\r\n```java\r\nPathNodeType getPathNodeType(BlockState state, BlockView world, BlockPos pos);\r\n```\r\n\r\nI've chose this way instead to add directly PathNodeType because in a position there is always a block, but in case this block is \"fluid-logged\", in the same position there is the block and a fluid.\r\nWith the provider, is possible to specify what to do if there is a \"fluid-logged\" block, so you can prioritize the block or the fluid.\r\n\r\n# Testing\r\n\r\nFor testing Dead Bush is added to the registry with `PathNodeType.DAMAGE_OTHER`, so it is avoided by entities except foxes.  \r\nThis is the same as sweet berry bushes.  \r\nThis is implemented in the testmod.\r\n\r\nhttps://user-images.githubusercontent.com/32025549/182221967-e24de458-94d0-47d3-8ca9-6e513223cdfb.mp4\r\n",
    "head_branch": "land-path-node-type-registry",
    "is_a_fork": true,
    "comments": [
      "## Update\r\nI've added the possibility to specify the node type of block if the block is found in a neighbor position in the path and improved docs.\r\n\r\nBasically is a mixin to the method above:\r\n`LandPathNodeMaker.getNodeTypeFromNeighbors(BlockView world, BlockPos.Mutable pos, PathNodeType nodeType)`\r\n\r\nThis is completed now.\r\n\r\nNow the provider is changed as this:\r\n\r\n```java\r\nPathNodeType getPathNodeType(BlockState state, BlockView world, BlockPos pos, boolean isNeighbor);\r\n```\r\n\r\nPlease check if the documentation is written correctly in english or there are grammar errors.\r\n\r\n### Tecnical\r\n\r\n```java\r\npublic static PathNodeType getNodeTypeFromNeighbors(BlockView world, BlockPos.Mutable pos, PathNodeType nodeType) {\r\n    int i = pos.getX();\r\n    int j = pos.getY();\r\n    int k = pos.getZ();\r\n\r\n    for(int l = -1; l <= 1; ++l) {\r\n        for(int m = -1; m <= 1; ++m) {\r\n            for(int n = -1; n <= 1; ++n) {\r\n                if (l != 0 || n != 0) {\r\n                    pos.set(i + l, j + m, k + n);\r\n                    BlockState blockState = world.getBlockState(pos);\r\n\r\n// INJECTED HERE ANOTHER IF AND RETURN\r\n\r\n                    if (blockState.isOf(Blocks.CACTUS)) {\r\n                        return PathNodeType.DANGER_CACTUS;\r\n                    }\r\n\r\n                    if (blockState.isOf(Blocks.SWEET_BERRY_BUSH)) {\r\n                        return PathNodeType.DANGER_OTHER;\r\n                    }\r\n\r\n                    if (inflictsFireDamage(blockState)) {\r\n                        return PathNodeType.DANGER_FIRE;\r\n                    }\r\n\r\n                    if (world.getFluidState(pos).isIn(FluidTags.WATER)) {\r\n                        return PathNodeType.WATER_BORDER;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return nodeType;\r\n}\r\n```",
      "I've added missing `CompostingChanceRegistry` and `FuelRegistry` to `ContentRegistryTest` in the testmod.",
      "Merged some minor edits into one single commit, then I've reverted to Objects.requireNotNull, and used IdentityHashMap, that is also used for the main tables in the internal vanilla main registries.",
      "Postmortem: apparently Lithium `@Overwrite`s the very method we mixin into. Whoops.",
      "# September Update (For new readers)\r\nThis is reworked in https://github.com/FabricMC/fabric/pull/2519 because of potential performance issues with the hashmap, some useless things, and problems with lithium."
    ],
    "commit_messages": [
      "Add LandPathNodeTypesRegistry (#2437)\n\n* Added LandPathNodeTypesRegistry.\r\n\r\n* Added test for LandPathNodeTypesRegistry.\r\n\r\n* Added block state to PathNodeTypeProvider.getPathNodeType.\r\n\r\n* Made LandPathNodeTypesRegistry final, removed unnecessary NotNull.\r\n\r\n* Changed putIfAbsent with put to align with other registries.\r\n\r\n* Cleanup.\r\n\r\nCo-authored-by: Technici4n <13494793+Technici4n@users.noreply.github.com>\r\n\r\n* Removed unused import.\r\n\r\n* Added possibility to specify the node type of block if the block is found in a neighbor position, improved documentation.\r\n\r\n* Merged mixins cleanup.\r\n\r\n* Changed CAPTURE_FAILEXCEPTION into CAPTURE_FAILHARD\r\n\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>\r\n\r\n* Specified some nullables, changed 2 parameter names.\r\n\r\n* Added missing content registries tests, changed NODE_TYPES map to IdentityHashMap, improved docs.\r\n\r\n* Moved PathNodeTypeProvider inside LandPathNodeTypesRegistry.\r\n\r\nCo-authored-by: Technici4n <13494793+Technici4n@users.noreply.github.com>\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307040ac82a74541b21bf",
    "number": 2435,
    "body": "Adds the following item tags:\r\n\r\n`c:meat`\r\n`c:poisonous_foods`\r\n`c:raw_meat`\r\n`c:cooked_meat`\r\n`c:raw_fish`\r\n`c:cooked_fish`\r\n`c:books`\r\n`c:sugary_foods`\r\n`c:mushrooms`\r\n`c:seeds`\r\n`c:fruits`",
    "head_branch": "1.19.1",
    "is_a_fork": true,
    "comments": [
      "Converting this PR to draft to add more convention tags.",
      "Fruits is not mentioned. I would suggest adding a tag for `vegetables`",
      "That's a good point actually, I'll add vegetables",
      "Are Glow Berries not fruits? What about both Golden Apples? What about Glistering Melon Slices, do they count even if they can't be eaten? What about Melon Blocks, do they count? Pumpkins are technically fruits, but do they count? I dunno.\r\n\r\nWould a `c:golden_foods` tag be worth having, containing Golden Apples, Enchanted Golden Apples, and Golden Carrots? (and maybe Glistering Melon Slices? again, can't be eaten though...)\r\nCould have `c:golden_apples` too, containing just the two Golden Apples. Then have that tag nested within `c:golden_foods`.\r\nWhat about `c:stews` containing Mushroom Stew, Rabbit Stew, Suspicious Stew, and Beetroot Soup?\r\n`c:maps` containing Map and Filled Map?\r\n`c:berries` containing Sweet Berries and Glow Berries?\r\n`c:helmets`, `c:chestplates`, `c:leggings`, and `c:boots`?\r\nThen those should probably be nested inside `c:head_wearables`, `c:chest_wearables`, `c:legs_wearables`, and `c:feet_wearables` (with carved pumpkin and mob heads also in the head one, and elytra also in the chest one)\r\n`c:horse_armor` and `c:shields`?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307050ac82a74541b21c0",
    "number": 2434,
    "body": "Pretty self explanatory, adds convention tags relating to cooked/raw status of items:\r\n\r\n`c:item/raw_meats`\r\n`c:item/cooked_meats`\r\n`c:item/raw_fish`\r\n`c:item/cooked_fish`\r\n\r\n",
    "head_branch": "food_tags",
    "is_a_fork": true,
    "comments": [
      "Just realised that this stuff is datagenned. Going to redo it"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307060ac82a74541b21c1",
    "number": 2429,
    "body": "`PointOfInterestType` must be registered in `PointOfInterestTypes.POI_STATES`, otherwise the deserializer ignores the serialized POI and re-creates it. `PointOfInterestHelper` now adds the states to the set. (See also MC-254634)\r\n\r\nForwardport needed to 1.19.1, backport to 1.18.2 is not needed",
    "head_branch": "object-builder/fix-poi-register",
    "is_a_fork": true,
    "comments": [
      "Manually cherry-picked into the 1.19.2 branch. Thanks a lot 👍 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307060ac82a74541b21c2",
    "number": 2426,
    "body": "This PR resolves an issue where cancelling chat messages through `ServerMessageEvents` could cause clients to disconnect due to a broken chat signing chain.\r\nWhen a message was hidden through the event, the header for that chat message would not be distributed to other clients. Because each new chat message is signed in relation to the previous message, when that player next sends a new message, clients will detect that it is now referencing another message that it never received. This causes the disconnect for all receiving players.\r\n\r\nThis PR instead distributes the headers for these cancelled messages to ensure the chat chains stay consistent. 🙂 ",
    "head_branch": "broadcast-headers-on-cancel-message",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix: broadcast message headers when chat event is cancelled (#2426)\n\nThis resolves an issue where the chat signing chains for players would be broken when the server cancels a signed player message. This could lead to clients disconnecting after receiving any following message due to the broken chain."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307070ac82a74541b21c3",
    "number": 2425,
    "body": "Resolves #2424 \r\n\r\nThis contains 2 fixes:\r\n\r\n- Fixes wrong method being used to send client command feedback. `MessageHandler` should only be used to handle messages from the server. This once again directly adds the message to the HUD, but keeps the narration previously handled in `MessageHandler#onGameMessage`.\r\n- Fixes client commands not being executed from `ClientPlayerEntity#executeCommand(String)` overload. Observable via click events.\r\n\r\nBoth are 1.19.1 only and is inapplicable in older versions.",
    "head_branch": "command-api/fix-1.19.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix 1.19.1 client command API bugs (#2425)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307080ac82a74541b21c4",
    "number": 2422,
    "body": "The contract `null -> null` is useless, since the parameter is `int` and `null` cannot be passed there.",
    "head_branch": "renderer-api/remove-contract",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "ModelHelper: remove useless contract (#2422)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307090ac82a74541b21c5",
    "number": 2421,
    "body": "The following classes have been made final and unconstructible:\r\n\r\n- All convention tags classes\r\n- `FluidVariantAttributes`\r\n- `FluidVariantRendering`\r\n\r\nThe following classes have been made unconstructible:\r\n\r\n- `BiomeModifications`\r\n- `ClientEntityEvents`\r\n- `ClientTickEvents`\r\n- `LootTableEvents`\r\n- `FabricDefaultAttributeRegistry`\r\n- `MinecartComparatorLogicRegistry`\r\n- `StorageUtil`\r\n\r\nThe following classes have been explicitly marked as final. Note that actually extending such class has always been impossible due to missing public constructor:\r\n\r\n- `VillagerInteractionRegistries`\r\n- `VillagerPlantableRegistry`\r\n- `ModelHelper`\r\n- `StoragePreconditions`\r\n\r\nWhile the first two are technically breaking changes, there is no actual or observed usage for any of those. Just to be safe this targets `1.19.1` branch; there is no practical reason for backporting.\r\n\r\n## Affected classes by module\r\n\r\n|Class                          |Module            |Final   |Unconstructible|\r\n|-------------------------------|------------------|--------|---------------|\r\n|BiomeModifications             |Biome API         |Yes     |No             |\r\n|VillagerInteractionRegistries  |Content Registries|Implicit|Yes            |\r\n|VillagerPlantableRegistry      |Content Registries|Implicit|Yes            |\r\n|ConventionalBiomeTags          |Convention Tags   |No      |No             |\r\n|ConventionalBlockTags          |Convention Tags   |No      |No             |\r\n|ConventionalEnchantmentTags    |Convention Tags   |No      |No             |\r\n|ConventionalEntityTypeTags     |Convention Tags   |No      |No             |\r\n|ConventionalFluidTags          |Convention Tags   |No      |No             |\r\n|ConventionalItemTags           |Convention Tags   |No      |No             |\r\n|ClientEntityEvents             |Lifecycle Events  |Yes     |No             |\r\n|ClientTickEvents               |Lifecycle Events  |Yes     |No             |\r\n|LootTableEvents                |Loot API          |Yes     |No             |\r\n|FabricDefaultAttributeRegistry |Object Builder    |Yes     |No             |\r\n|MinecartComparatorLogicRegistry|Object Builder    |Yes     |No             |\r\n|ModelHelper                    |Renderer API      |Implicit|Yes            |\r\n|FluidVariantAttributes         |Transfer API      |No      |No             |\r\n|FluidVariantRendering          |Transfer API      |No      |No             |\r\n|StoragePreconditions           |Transfer API      |Implicit|Yes            |\r\n|StorageUtil                    |Transfer API      |Yes     |No             |\r\n",
    "head_branch": "misc/fix-exposed-constructor",
    "is_a_fork": true,
    "comments": [
      "Could try adding the checksytle rule [HideUtilityClassConstructor](https://checkstyle.sourceforge.io/config_design.html#HideUtilityClassConstructor) and [FinalClass](https://checkstyle.sourceforge.io/config_design.html#FinalClass)."
    ],
    "commit_messages": [
      "Make static-only classes final and unconstructible (#2421)\n\nThe following classes have been made final and unconstructible:\r\n\r\n- All convention tags classes\r\n- `FluidVariantAttributes`\r\n- `FluidVariantRendering`\r\n\r\nThe following classes have been made unconstructible:\r\n\r\n- `BiomeModifications`\r\n- `ClientEntityEvents`\r\n- `ClientTickEvents`\r\n- `LootTableEvents`\r\n- `FabricDefaultAttributeRegistry`\r\n- `MinecartComparatorLogicRegistry`\r\n- `StorageUtil`\r\n\r\nThe following classes have been explicitly marked as final. Note that actually extending such class has always been impossible due to missing public constructor:\r\n\r\n- `VillagerInteractionRegistries`\r\n- `VillagerPlantableRegistry`\r\n- `ModelHelper`\r\n- `StoragePreconditions`\r\n\r\nWhile the first two are technically breaking changes, there is no actual or observed usage for any of those."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623070a0ac82a74541b21c6",
    "number": 2416,
    "body": "Makes the ICY tag now usable for people. Before, if one makes an ice-based structure and wants it to spawn in icy land biomes like icy spikes or so, the current ICY tag will spawn the structure in the middle of the ocean (froze ocean) which looks wrong and terrible. Thus making the tag unusable. \r\n\r\nThis PR adds a middle ground by taking out the watery biomes that are icy out of ICY tag and put them into a AQUATIC_ICY tag so they can still be used by anyone looking for watery super cold biomes and makes the ICY tag usable for land structures again.",
    "head_branch": "1.19",
    "is_a_fork": true,
    "comments": [
      "Manually cherry-picked into the 1.19.2 branch. Thanks a lot 👍 ",
      "Was removing biomes from the `c:climate_cold` tag intentional? The `c:climate_cold` tag only includes the `c:icy` tag and not the now-separated `c:aquatic_icy` tag:\r\n\r\nhttps://github.com/FabricMC/fabric/blob/58bef3f2cf4beaa9ecbc5a96e568de8fa90e2485/fabric-convention-tags-v1/src/datagen/java/net/fabricmc/fabric/impl/tag/convention/datagen/generators/BiomeTagGenerator.java#L167-L172",
      "Dunno. Been a while. I was mainly focused on separating icy and icy aquatics so my land structures and other people’s land structures can stop spawning in the middle of frozen oceans. You can add it back to climate. Maybe GitHub search first to see if there’s an open source mod that might get weird behaviors if they get aquatics icy in cold climate. Prob not"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623070a0ac82a74541b21c7",
    "number": 2415,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623070b0ac82a74541b21c8",
    "number": 2412,
    "body": "Right now client resource pack with `DEFAULT_ENABLED` only works when `options.txt > resourcePacks` is an empty array, which only happens when the resource pack selection screen is never opened.\r\n\r\nThis PR makes it work by tracking pack ids in an NBT file (`<gameDir>/data/fabricDefaultResourcePacks.dat`):\r\n- If there is NO value with matching resource pack id, add it to the enabled packs and the tracker file.\r\n- If there is a matching value and pack id, do not add it to the enabled packs and let the options value decides if it is enabled or not.\r\n- If there is a value without matching pack id (e.g. because the mod is removed), remove it from the tracker file so that it would be enabled again if added back later.\r\n\r\nAlso possible bug fix (not really tested):\r\n`Fabric Mods` client resource pack _technically_ only gets added to the default packs when there's at least one mod that has a file in the `assets` directory, but since the resource loader module itself has its icon in the `assets` it gets added regardless.",
    "head_branch": "default-enabled-client-resource-pack",
    "is_a_fork": true,
    "comments": [
      "Changes look fine, some sort of test might be nice, not too sure how feasible it would be however.",
      "Changes look fine, some sort of test might be nice, not too sure how feasible it would be however.",
      "Manually cherry-picked into the 1.19.2 branch. Thanks a lot 👍 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623070c0ac82a74541b21c9",
    "number": 2411,
    "body": "## Changes\r\n- **BREAKING**: Provide `MinecraftServer` in `AllowGameMessage` and `GameMessage` events, since they do not have a parameter that allows server access.\r\n- Update javadoc to reflect 1.19.1-pre6 change removing the pure decorator requirement.\r\n- Update testmod to test non-pure decorator and reflect other changes.\r\n\r\n## Testing\r\nTested on dev env (without signing).\r\n\r\n## To Do\r\nThere is one remaining issue: the current `AllowChatMessage`/`AllowCommandMessage` implementation likely fails in authenticated environments, as the message chain will be split if the sender sends another message after a blocked message, disconnecting the sender. If that is true, there are 2 potential fixes, both with pros and cons:\r\n\r\n1. Send the message header to all players, without body. This is what they do for messages fully censored using text filtering. Pros: small change, compatible. Cons: all clients receive the sender's UUID and message hash, which might not be expected in some cases.\r\n2. Move the mixin point before unpacking. This is what they do for messages that fail validation, etc. Pros: does not have to send message header. Cons: requires API-breaking change and introduces inconsistency with unprefixed `ChatMessage`/`GameMessage` events.\r\n\r\nWe first have to check that this is actually a bug (and not a theoretical issue), and try those fixes. Unfortunately it's not easy for me to test these, as my computer isn't beefy enough to run both the dedicated server and the client, and I do not have the second account for testing situations with other players.",
    "head_branch": "message-api/1.19.1-changes",
    "is_a_fork": true,
    "comments": [
      "They released rc2, we can fix allow events later."
    ],
    "commit_messages": [
      "Message API: 1.19.1 changes (#2411)\n\n* BREAKING: Add server param to game message events\r\n\r\n* Update javadocs\r\n\r\n* Update testmod\r\n\r\n* Fix param name in testmod\r\n\r\n* Update ServerMessageEvents.java"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623070d0ac82a74541b21ca",
    "number": 2409,
    "body": "This PR adds a new event that is called before crosshair render.\r\n\r\nFinal test video: [Link](https://streamable.com/y154cf)",
    "head_branch": "1.19",
    "is_a_fork": true,
    "comments": [
      "I made the event in a way that you can add something else to the vanilla crosshair (like vanilla attack cooldown) or replace/cancel it. But either way all listeners are called to render. From what I understand you are talking about a way to completely cancel it without rendering anything. If that's the case how should I go with it's implementation. I can add a method to the event interface that returns true by default and if any of the listeners return it false, it can just cancel crosshair rendering completely before any listeners are called to render.",
      "> replace/cancel it\r\n\r\nThe issue with this is what if there's 2 mods that conditionally replace/cancel it?\r\nThey could both render the cursor without knowing about each other.\r\nAnd that's where there's the issue.\r\n\r\n\"But Aurora, if I stop execution of the listeners when cancelled, what about some other use cases?\"\r\n\r\nEvent phases got you covered, they'll allow mods to order themselves to render in a more proper manner I guess?\r\nbut I'm also doubting it's entirely sufficient.",
      "I'm pretty much gambling with the pr with my last commit, it's not the most efficient but I think I covered all the blind spots. Now only one listener can cancel vanilla crosshair, any other listeners canceling it won't be rendered. You can cancel all rendering by calling ```cancelAll()```. If you don't want any other listeners to render something under specific conditions you can add your render by calling ```renderCancelOthers(...)``` and only yours will be rendered.\r\nAlso added a small test to testmod. Showcasing the test [video](https://streamable.com/y154cf) on streamable."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623070e0ac82a74541b21cb",
    "number": 2408,
    "body": "Right now to open a screen via a command you would need to use some sort of thread schedule like `Timer`:\r\n```java\r\nnew Timer().schedule(new TimerTask() {\r\n    @Override\r\n    public void run() {\r\n        client.execute(() -> client.setScreen(screen));\r\n    }\r\n}, 1);\r\n```\r\nThis is caused by ChatScreen calling `client.setScreen(null)` when enter key is pressed. This PR would make that unnecessary.",
    "head_branch": "open-screen-command",
    "is_a_fork": true,
    "comments": [
      "Fyi you don't have to use a timer, a simple `client.send` call wrapping the screen setter is enough. I don't think we really need this pr since using that method is easy enough.",
      "Ooh, I somehow missed it 😅 thanks, and never mind about this PR then."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623070f0ac82a74541b21cc",
    "number": 2407,
    "body": "Discovered while auditing `String.format`.\r\n\r\n`ModResourcePackUtil#openDefault` in resource loader is used to provide `pack.mcmeta` fallback when one does not exist in a registered pack. This previously constructed the file contents via `String.format`. This contains a mod's name, which can include special characters (usually a quote, but sometimes backslashes).\r\n\r\nNote that it's not easy to properly add those special characters in `fabric.mod.json`: due to Gradle's templating system used in many setups to substitute versions, backslashes are interpreted during build-time jar processing. Of course, the build result must still be a valid JSON. Therefore, to use `\\ \"` as the mod's name `\" \\\\\" \\\\\\\\\"` must be written instead. Since this is not well-known I expect few people would encounter this issue in the first place.\r\n\r\nIf they do, however, and this method is called, then the method is expected to return the stream of a valid JSON. However, they don't, for a couple of reasons:\r\n\r\n1. The current escaping only considers quotes. However, trailing backslashes can cause the string-terminating quote to be escaped.\r\n2. Actually, this escaping doesn't work at all, because of [a quirk with `String#replaceAll`](https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/String.html#replaceAll(java.lang.String,java.lang.String)). Either the second argument [should've been quoted](https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/regex/Matcher.html#quoteReplacement(java.lang.String)) or it should've been [`String#replace` instead](https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/String.html#replace(java.lang.CharSequence,java.lang.CharSequence)).\r\n\r\nInstead of trying to fix the escaping, I just made it use Gson, which is more readable. Note that [the other code](https://github.com/FabricMC/fabric/blob/1.19/fabric-resource-loader-v0/src/main/java/net/fabricmc/fabric/impl/resource/loader/FabricModResourcePack.java#L49) still uses string replacement since it's unaffected.",
    "head_branch": "resource-loader/escape-mod-name",
    "is_a_fork": true,
    "comments": [
      "Question: should I add a testmod for this? That'd require renaming the testmod to include special characters, which is ugly and potentially breaks stuff expecting well-formed preprocessed FMJ file.\r\n\r\nNote that this is tested locally.",
      "> Question: should I add a testmod for this? That'd require renaming the testmod to include special characters, which is ugly and potentially breaks stuff expecting well-formed preprocessed FMJ file.\r\n\r\nWhat about splitting the method to get the string of the JSON and feed that into the JSON parser to check if it's well-formed in the testmod?\r\n\r\nCould then feed lot of different input strings as if you were unit testing.\r\nOr like look into bringing some kind of unit testing into Fabric API?\r\nFeels like this method of testing is particularly adapted to this situation.\r\n\r\n",
      "Yeah, that's a good idea. Maybe I'll do that, don't have that much time right now.",
      "Oops, it's failing. Seems like testmod has a bug. Fixing soon"
    ],
    "commit_messages": [
      "ModResourcePackUtil: Properly handle special chars in mod name (#2407)\n\n* ModResourcePackUtil: Properly handle special chars in mod name\r\n\r\n* Add tests\r\n\r\n* Fix NPE in testmod"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307100ac82a74541b21cd",
    "number": 2402,
    "body": null,
    "head_branch": "1.19.1",
    "is_a_fork": true,
    "comments": [
      "Already working on a work around similar to worldrender context"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307100ac82a74541b21ce",
    "number": 2390,
    "body": "Closes #2151\r\n\r\nAdds optional `fabric:resource_pack_format` and `fabric:data_pack_format` entry to specify client resource and datapack format respectively.",
    "head_branch": "type-specific-pack-format",
    "is_a_fork": true,
    "comments": [
      "I wonder how useful this really is compared to having two separate builtin packs. Forge needed it because mods explicitly have to specify a pack format for the mod resources (directly in the jar), but I don't think we need it.",
      "What about just getting a custom resource pack profile implementation and always make the pack compatible in the screen instead?\r\n\r\nLike, that's already a thing with the mod's own resources internally, the pack format is automatically set in an always compatible way.\r\nAnd considering this is for built-in resource packs primarily, to me that makes the most sense..",
      "I believe this is not useful, see my comment above."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307110ac82a74541b21cf",
    "number": 2388,
    "body": "When using the `HudRenderCallback` usually people want to add something onto the HUD. The position of custom HUD elements is always dependent on the scaled dimensions of the screen. Currently you would have to do get the scaled dimensions through `MinecraftClient` like this:\r\n```\r\nMinecraftClient client = MinecraftClient.getInstance();\r\nint width = client.getWindow().getScaledWidth();\r\nint height = client.getWindow().getScaledHeight();\r\n```\r\nBy having access to the scaled height and width via the method parameter, this step can be dropped and it makes the code a bit cleaner. ",
    "head_branch": "1.19",
    "is_a_fork": true,
    "comments": [
      "You can't just add new parameter to the method, that would break all mods that uses it. You need to make a new event with different interface, I don't think it's worth it tbh.",
      "Yes, this is breaking, I dont think it needs to be passed through as you said its easy enough to access through `MinecraftClient`. So I don't see this beign needed. 👍 ",
      "Alright, closing this, fair enough. I don't think a new interface and event is worth it for the tiny change. "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307120ac82a74541b21d0",
    "number": 2387,
    "body": "Fix https://github.com/FabricMC/fabric/pull/2345#issuecomment-1179474099\r\n\r\nLoads the DRM again before the integrated server starts and replace the `GeneratorOptions` with newly parsed one.\r\nI tried capturing the DRM and `RegistryOps` instance from `create` and `applyDataPacks` lamdas and using it to parse but it only works for default preset ¯\\\\\\_(ツ)\\_/¯.\r\n\r\nDedicated server is not affected.\r\n\r\nAlso for yarn contributors: `GeneratorOptionsHolder` doesn't seem to be the correct name as it holds more than a `GeneratorOptions`.",
    "head_branch": "fix-dimension-again",
    "is_a_fork": true,
    "comments": [
      "Would like to see this backported to 1.18.2, if applicable. Should apply cleanly to 1.19.1."
    ],
    "commit_messages": [
      "fix custom dimension not loaded on world preset other than default (#2387)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307130ac82a74541b21d1",
    "number": 2381,
    "body": "Add `ExactViewStorage`, a storage abstract class that provides a variant-to-slot map.\r\nAdd `ExactViewStorage.ItemImpl`, a simple implement to `ExactViewStorage<ItemVariant>`.\r\n",
    "head_branch": "1.19",
    "is_a_fork": true,
    "comments": [
      "As discussed on Discord, I think it's still too early to include such an implementation in Fabric."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307140ac82a74541b21d2",
    "number": 2380,
    "body": "Issue reported on Discord in #mod-dev-2.\r\n\r\nTesting:\r\n- I did a bit of testing before the patch and the order was indeed random. Netherite chestplate is easy to check cause it has 6 possible permutations; I ran two tests and had two different attribute modifier orders, neither matching the one that I would expect from reading the constructor of `ArmorItem`.\r\n- Order seems consistent after the patch (matches what's defined in the constructor).\r\n\r\nOrdering will still not be consistent between multiple listeners of `ModifyItemAttributeModifiersCallback` that add modifiers to the same items, but these cases should be very rare, and can be solved by these mods using event phases.",
    "head_branch": "fix-attribute-modifier-ordering",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix inconsistent ordering of item attribute modifiers by using a linked hashmap (#2380)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307150ac82a74541b21d3",
    "number": 2377,
    "body": "**[Rendered View](https://github.com/Technici4n/fabric/blob/development-guidelines/CONTRIBUTING.md)**\r\n\r\nThis PR adds a `CONTRIBUTING.md` document encoding Fabric API development guidelines. This will ensure that everyone can check what our contribution standards are. The goal is to ultimately make writing and reviewing Fabric PRs a better experience.\r\n\r\nThis document has been in the works for a long time. I want to give a special thanks to @i509VCB and @Vaerian for their important contributions to the draft that was made over a year ago, and the rest of team who provided valuable feedback.\r\n\r\nI would like to ask those who are interested in contributing to Fabric API and have some time to read this document, and comment on this PR if something is not clear.\r\n\r\nNote that there are still a few TODO items, I will be addressing them over the coming days.",
    "head_branch": "development-guidelines",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add development guidelines (CONTRIBUTING.md) (#2377)\n\n* Add development guidelines (CONTRIBUTING.md)\r\n\r\n* Fix typos\r\n\r\nCo-authored-by: apple502j <33279053+apple502j@users.noreply.github.com>\r\n\r\n* Address remaining TODOs, a few formatting changes\r\n\r\n* Apply feedback\r\n\r\n- Add links to sections in summary\r\n- Add note about thread-safe caching\r\n- Functionalities added by vanilla MC don't need to be ported to new module versions\r\n- Do not use deprecated to generate compiler/IDE warnings\r\n- TAW updates\r\n- Interface injection indents\r\n- A few more fixes\r\n\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>\r\nCo-authored-by: liach <7806504+liach@users.noreply.github.com>\r\n\r\n* Apply suggestions from code review\r\n\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>\r\n\r\n* Apply suggestions from Juuz\r\n\r\n* Remove mention of self types\r\n\r\nCo-authored-by: apple502j <33279053+apple502j@users.noreply.github.com>\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>\r\nCo-authored-by: liach <7806504+liach@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307150ac82a74541b21d4",
    "number": 2375,
    "body": "New features:\r\n- Add `ContainerItemContext.forPlayerInteraction` that can be used to avoid mutating a player's hand stack in creative mode.\r\n- Add `FluidStorageUtil`, at the moment it only contains `interactWithStorage`. This is a convenient helper to make interacting with a tank via `onUse` trivial, while ensuring the correct behavior (playing the sound, not mutating the stack if the player is in creative mode, etc). The provided functionality is roughly equivalent to Forge's `FluidUtil.interactWithFluidHandler`.\r\n- Improve single variant base implementations to reduce boilerplate code for API users. More precisely:\r\n  - Add `writeNbt` method in `SingleVariantStorage`.\r\n  - Introduce the `SingleFluidStorage` and `SingleItemStorage` subclasses that override `getBlankVariant()` and also provide a matching `readNbt`.\r\n  - Add a way to create a `SingleFluidStorage` without needing a subclass: `SingleFluidStorage.withFixedCapacity(long capacity, Runnable onChange)`.\r\n- Add `FluidVariantAttributes#enableColoredVanillaFluidNames`. This method can be called by mods that wish to have colored water and lava names. If nobody calls this method, the names are shown in white. **This doesn't influence vanilla behavior, it only affects mods that call `FluidVariantAttributes.getName(variant)`**.\r\n- Add `TransferVariant.getOrCopyNbt`, a few people asked for it.\r\n\r\nCleanup changes:\r\n- Deprecate the transaction-aware `Storage.getExactView` and introduce an overload that doesn't require a transaction parameter. I forgot to remove the transaction parameter in #2139. Fixes #2325.\r\n- Remove outdated comment in `StorageView` saying that views are bound to a transaction. This was also forgotten in #2139.\r\n- Make `FluidStorage.GENERAL_COMBINED_PROVIDER` final. This was an oversight, there is no reason for the field not to be final.",
    "head_branch": "transfer-api-improvements-4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Transfer API improvements 4 (#2375)\n\n* Transfer API improvements 4\r\n\r\n* Actually copy the nbt in `copyOrCreateNbt`\r\n\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>\r\n\r\n* Add SingleFluidStorage.withFixedCapacity\r\n\r\n* Remove unneeded iterator() overrides\r\n\r\n* Add temporary workaround for bottle sounds\r\n\r\n* Address review comments\r\n\r\n* Change parameter name from compound to nbt\r\n\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307160ac82a74541b21d5",
    "number": 2373,
    "body": "Resolves #2305\r\n\r\nThis adds `FabricScreenHandlerFactory` (interface-injected to `NamedScreenHandlerFactory`).\r\n\r\nThis also fixes a crash when passing `SimpleNamedScreenHandlerFactory` that wraps a `ExtendedScreenHandlerFactory`. The mixin now un-wraps the factory.\r\n\r\nNote: I did not make the testmod since I don't know the exact usage. If anyone can make it, I'd appreciate it.",
    "head_branch": "screen-handler-should-close",
    "is_a_fork": true,
    "comments": [
      "I just tested this for AE2 and it worked flawlessly, thank you! 😄",
      "Manually cherry-picked into 1.19.2 👍 \r\n\r\nhttps://github.com/FabricMC/fabric/commit/1cc24b1b0ee52352e24f556d24708631dc7ebcfe"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307170ac82a74541b21d6",
    "number": 2369,
    "body": "When implementing a custom BiomeSource for the End, we need to know what the intended placement of an End-biome was. This PR adds Methods to `TheEndBiomeData` that are similar to `NetherBiomes.canGenerateInNether`.",
    "head_branch": "add_end_biome_type_query",
    "is_a_fork": true,
    "comments": [
      "I am mot sure if the \"intended\" naming is good. ",
      "We could use `canGenerateAs` instead (similar to `NetherBiomes.canGenerateInNether`).",
      "I think it would be better if WeightedPicker stored the entries as sets, etc. @deirn what do you think?",
      "> We could use canGenerateAs instead (similar to NetherBiomes.canGenerateInNether).\r\n\r\nIt's still too verbose imo, I'd just named it like the `add` methods, e.g. `isMidlandsBiome` or so.\r\n\r\n> I think it would be better if WeightedPicker stored the entries as sets, etc. @deirn what do you think?\r\n\r\nI'm not really sure how `WeightedPicker` works tbh, but it looks like it needs to be a list?\r\n",
      "> > I think it would be better if WeightedPicker stored the entries as sets, etc. @deirn what do you think?\r\n> \r\n> I'm not really sure how `WeightedPicker` works tbh, but it looks like it needs to be a list?\r\n\r\nI think the `search`-method needs a list for deterministic results.\r\n\r\n",
      "@quiqueck The suggestion was to use both a set and a list. Anyway, seems like it was solved."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307180ac82a74541b21d7",
    "number": 2367,
    "body": "Update remotesign to a parallel capable version.\r\nSet org.gradle.parallel.threads in actions as we are IO bound a lot of time (signing, and publishing to maven). (Might be best to only set for releases)",
    "head_branch": "parallel_builds",
    "is_a_fork": true,
    "comments": [
      "Merged manually into 1.19.1 didnt help much sadly. Should aid in dev a bit tho when you have a few cores going spare.",
      "I will manually cherry pick this back, now working well in the 1.19.1 branch. 👍 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307190ac82a74541b21d8",
    "number": 2365,
    "body": "Resolves #2364\r\nNote: bug only exists in 1.18.2",
    "head_branch": "fix-end-modification",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix biome modification for modded end biomes (#2365)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307190ac82a74541b21d9",
    "number": 2363,
    "body": "Fixes #2359 \r\nLock issue needs to be investigated later, not now since it doesn't seem to be actually causing a bug.\r\nAlso, this file has never been modified since the networking v1 PR... wow.",
    "head_branch": "patch-4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix incorrect check in GlobalReceiverRegistry (#2363)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623071a0ac82a74541b21da",
    "number": 2356,
    "body": "Resolves #2348 \r\nShould also work as a bandaid fix for #2315 (although I bet this would just make the bug more obscure)\r\n",
    "head_branch": "fix-regsync-ns",
    "is_a_fork": true,
    "comments": [
      "Test seems to be failing: `Attempted to register object test twice! (at raw IDs 0 and 1 )`"
    ],
    "commit_messages": [
      "Fix registry sync namespace check (#2356)\n\n* Fix registry sync namespace check\r\n\r\n* Remove bad test.\r\n\r\n* Fix wrong comment\r\n\r\nCo-authored-by: modmuss50 <modmuss50@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623071b0ac82a74541b21db",
    "number": 2353,
    "body": "The bitwise comparison is doing the opposite of what we want. It's currently checking for the *absence* of the BAKE_NORMALIZED flag. And if the flag is absent, it is normalizing. This should do the opposite.",
    "head_branch": "fix_bake_normalized",
    "is_a_fork": true,
    "comments": [
      "Going to release into 1.19 now, will chery pick into 1.18 to release alongside the next batch of 1.18 changes. (Not worth doing a whole release just for this fix). Thanks 👍 ",
      "Awesome! Thank you as well :)",
      "Sorry this was actually wrong, the flag is meant to indicate already normalized UVs, as per the javadoc and it using the past tense normalized. The default is to expect 16th."
    ],
    "commit_messages": [
      "Fix the bitwise comparison for BAKE_NORMALIZED (#2353)\n\nThe bitwise comparison is doing the opposite of what we want. It's currently checking for the *absence* of the BAKE_NORMALIZED flag. And if the flag is absent, it is normalizing. This should do the opposite."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623071c0ac82a74541b21dc",
    "number": 2349,
    "body": "![2022-06-21_21 38 30](https://user-images.githubusercontent.com/21150434/174827276-78e554fb-6917-488a-afda-607f40b5533f.png)\r\n\r\nMostly happens when regsync failed caused by modpack update.",
    "head_branch": "scrollable-disconnect-reason",
    "is_a_fork": true,
    "comments": [
      "The change is good, but maybe we should move it to some sort of utility/enhancement module? networking-api seems a bit inappropriate",
      "Yeah.. We dont really have anything like this right now, could there be anything similar in the future?",
      "I believe so, e.g. around networking (e.g. error induced disconnect are a pain to investigate atm) but maybe also other areas. I'd go for a generic module for little enhancements, especially ones that are perceivable by the end user, but don't warrant explicit opt-in/out.",
      "Can't we keep this in networking API as long as the logic is not required anywhere else? It's impl-only, so we can freely move it around.",
      "For now maybe, would like to move it eventually though to not bundle optional \"behavior\" changes with an api."
    ],
    "commit_messages": [
      "Make disconnected screen reason text scrollable (#2349)\n\n* Make disconnected screen reason text scrollable\r\n\r\n* Remove redundant mixin.\r\n\r\n* wrong unique\r\n\r\n* fix max scroll having additional line-sized gap\r\n\r\n* turns out it's the testmod fault for having an extra new line\r\n\r\nCo-authored-by: modmuss50 <modmuss50@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623071d0ac82a74541b21dd",
    "number": 2345,
    "body": "- Port ServerBugfixMixin to 1.19, fixes the issue on dedicated server.\r\n- `WorldPresets#createDefaultOptions` doesn't load custom dimension, causing this issue. The workaround is to parse (?) `GeneratorOptions` with custom dimension jsons. Also apparently when you add a new datapack in selection screen the issue won't happen.\r\n",
    "head_branch": "1.19-fix-dimension",
    "is_a_fork": true,
    "comments": [
      "BTW, since we were tired of these issues in AE2, we simply create the `ServerWorld` directly in 1.19. Would recommend dimension mods to do that because mojang's system is a PITA to use, and still causes various issues when a mod is removed, etc... Mojmap warning: https://github.com/AppliedEnergistics/Applied-Energistics-2/blob/master/src/main/java/appeng/mixins/spatial/MinecraftServerMixin.java.",
      "That's cursed :P. The mod removal issue should already be fixed in #2078.",
      "Has this been tested in single player as well? The issue is occurring with my bumblezone dimension mod for 1.19 MC with 0.56.3 Fabric API. To reproduce, put on a dimension mod, create a new single player world, do `/execute in` and see the modded dimension is not loaded in. Exit the world and then re-enter and now the dimension is loaded in.",
      "> Has this been tested in single player as well?\r\n\r\nYes, it's how it got doscovered in the first place :P.",
      "Now data packs about dimensions are loaded correctly when creating a default world.\r\nBut the test mod of dimension API crashed when creating a super flat world. It seems that the data packs about dimensions are not loaded when creating a super flat(as well as large biomes and amplified) world for the first time.",
      "@thiamine128 Please open a new issue if there is still something to fix. This PR is closed and nobody is really going to look at it again."
    ],
    "commit_messages": [
      "Fix custom dimension not getting loaded on first world load (#2345)\n\n* re-enable custom dimension test\r\n\r\n* port ServerBugfixMixin to 1.19\r\n\r\n* fix custom dimension not loading on first load on client"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623071e0ac82a74541b21de",
    "number": 2344,
    "body": "- Ensure `calcFastVanilla` and `computeFace` have parity with vanilla\r\n- Ensure `BlockState`s are not queried more than once for the same position\r\n- Replace deprecated `FabricLoader#getConfigDirectory` call with `FabricLoader#getConfigDir`\r\n- This fix should be backported to 1.18.2.\r\n- Fixes #1475\r\n- Fixes #1708",
    "head_branch": "1.19-fix-ao",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Indigo AO calculation (#2344)\n\n* Fix AO calculation\r\n\r\n- Ensure calcFastVanilla and computeFace have parity with vanilla\r\n- Ensure BlockStates are not queried more than once for the same position\r\n- Replace deprecated FabricLoader#getConfigDirectory call with FabricLoader#getConfigDir\r\n\r\n* Revert opaque sides fix\r\n\r\n* More AO fixes and optimizations"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623071e0ac82a74541b21df",
    "number": 2343,
    "body": "The first commit is just to enable the test, checkout that first to check that custom dimensions are indeed not working. Then delete the world folder and test with the second commit.",
    "head_branch": "ServerBugfixMixin-1.18.2",
    "is_a_fork": true,
    "comments": [
      "Superseded by #2345",
      "Wait, that PR is for a different version :P"
    ],
    "commit_messages": [
      "Port fix for MC-195468 to 1.18.2 (#2343)\n\n* re-enable custom dimension test\r\n\r\n* port ServerBugfixMixin to 1.18.2"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623071f0ac82a74541b21e0",
    "number": 2341,
    "body": "More TAWs - this time for non-datagen stuff.\r\n\r\n- `DamageSource` constructor and methods made accessible - supersedes #1085\r\n- `SpawnRestriction` method `register` made accessible - allows `SpawnRestrictionAccessor` mixin to be removed\r\n- `TradeOffers` trade factory inner classes made accessible\r\n- `Material$Builder` methods made accessible (except `lightPassesThrough` method as that would break binary compat in `FabricMaterialBuilder`\r\n- Fixed `generateAccessWideners` task for TAWs module so it can now find the jar\r\n- `AxeItem`, `MusicDiscItem`, and `PickaxeItem` constructors made accessible\r\n- `ItemUsageContext` and `ItemPlacementContext` alternate constructors made accessible - allows passing a `null` PlayerEntity\r\n- `Factory` inner classes of both `CookingRecipeSerializer` and `CuttingRecipeSerializer` made accessible\r\n- `BrewingRecipeRegistry` methods `registerItemRecipe`, `registerPotionType`, and `registerPotionRecipe` made accessible\r\n- `ScoreboardCriterion` `create` methods made accessible\r\n- `ModelPart` inner classes `Vertex` and `Quad` made accessible\r\n- `RenderLayer` `of` method made accessible\r\n- `SensorType` and `Activity` constructors made accessible\r\n- `LivingEntity` methods `damageArmor`, `damageHelmet`, and `damageShield` made accessible\r\n- `ProjectileEntity` constructor made accessible\r\n- `FishingBobberEntity` alternate constructor made accessible - allows passing luck of the sea or lure levels for custom fishing bobbers\r\n- `ServerWorld` method `sendToPlayerIfNearby` made accessible\r\n- `TextColor` method `getHexCode` made accessible\r\n- `TranslatableTextContent` method `getArg` made accessible",
    "head_branch": "1.19-moreTAWs2",
    "is_a_fork": true,
    "comments": [
      "Most recent commit adds the following:\r\n- Made constructor of `ProjectileEntity` accessible, to allow for subclasses to be constructed\r\n- Made alternate constructor of `FishingBobberEntity` accessible, to allow for custom fishing bobber entity types with non-zero luck of the sea or lure levels\r\n- Made alternate constructors of `ItemUsageContext` and `ItemPlacementContext` accessible, to allow for passing a null player entity\r\n- Made text filtering methods in `ServerPlayNetworkHandler` accessible, so mods can filter text in places other than chat, signs, and books\r\n- Made register methods for `EntityRenderers` and `BlockEntityRendererFactories` accessible, so mods can use those instead of the Fabric API hooks if they want (not sure if this means we should deprecate those hooks, or if they're still useful in some form?)\r\n- Made recipe factory subclasses for `CookingRecipeSerializer` and `CuttingRecipe$Serializer` accessible, so those serializers can be used for datagen (or other thing, I guess)\r\n- Made register methods in `BrewingRecipeRegistry` accessible, so brewing recipes (and even new potion types beyond regular, splash and lingering) can be registered\r\n- Made create/register methods in `ScoreboardCriterion` accessible, so custom scoreboard criteria can be created and registered\r\n- Made subclasses of `ModelPart` accessible, I had a look around GitHub and saw quite a few mods do this, so I'm sure it's useful\r\n- Made a few other miscellaneous methods accessible - getting the item for an `AbstractMinecartEntity`, getting the hex code of a `TextColor`, getting the arg of a `TranslatableTextContent`, and a method in `ServerWorld` for sending a packet to a player if they're near a specific position",
      "Can you add the following?\r\n![image](https://user-images.githubusercontent.com/13494793/174657548-c5f7c046-275e-4fd8-b029-ce84a3b415c0.png)\r\n\r\nShould also probably have a look at forge's AT and decide for each entry if we want to have it or not.",
      "Added your suggestions - and also a ton of methods related to entities.\r\nAlmost every private or package private entity method made accessible, as well as a few protected ones that are nice to have.\r\nI also made a version that includes almost all protected entity methods, but felt that may be excessive...\r\nIn fact, this may be considered excessive by some, so let me know what you think, if I should cut it down a notch.\r\nIf you think it's too much, then tell me which ones I should keep.",
      "Imo we should only have the essential TAWs, otherwise we will end up with every protected and private method, which is definitely not the point.",
      "It would be interesting to run a scraper on GitHub's search results for access wideners to find to most commonly-used access wideners.",
      "Removed a majority of the entity methods again",
      "Any news about completing this?",
      "> Any news about completing this?\r\n\r\nWaiting for #2154."
    ],
    "commit_messages": [
      "Add many more transitive access wideners (#2341)\n\n- `DamageSource` constructor and methods made accessible - supersedes #1085\r\n- `SpawnRestriction` method `register` made accessible - allows `SpawnRestrictionAccessor` mixin to be removed\r\n- `TradeOffers` trade factory inner classes made accessible\r\n- `Material$Builder` methods made accessible (except `lightPassesThrough` method as that would break binary compat in `FabricMaterialBuilder`\r\n- Fixed `generateAccessWideners` task for TAWs module so it can now find the jar\r\n- `AxeItem`, `MusicDiscItem`, and `PickaxeItem` constructors made accessible\r\n- `ItemUsageContext` and `ItemPlacementContext` alternate constructors made accessible - allows passing a `null` PlayerEntity\r\n- `Factory` inner classes of both `CookingRecipeSerializer` and `CuttingRecipeSerializer` made accessible\r\n- `BrewingRecipeRegistry` methods `registerItemRecipe`, `registerPotionType`, and `registerPotionRecipe` made accessible\r\n- `ScoreboardCriterion` `create` methods made accessible\r\n- `ModelPart` inner classes `Vertex` and `Quad` made accessible\r\n- `RenderLayer` `of` method made accessible\r\n- `SensorType` and `Activity` constructors made accessible\r\n- `LivingEntity` methods `damageArmor`, `damageHelmet`, and `damageShield` made accessible\r\n- `ProjectileEntity` constructor made accessible\r\n- `FishingBobberEntity` alternate constructor made accessible - allows passing luck of the sea or lure levels for custom fishing bobbers\r\n- `ServerWorld` method `sendToPlayerIfNearby` made accessible\r\n- `TextColor` method `getHexCode` made accessible\r\n- `TranslatableTextContent` method `getArg` made accessible"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307200ac82a74541b21e1",
    "number": 2339,
    "body": "NIO Files.exists is notoriously slow and allocation heavy, when the path is on the computers FS using the legacy .exists API is much faster. This is only an issue when you have a directory based resource pack, zip files are not affected (What most people use anyway)\r\n\r\nSee:\r\n\r\n![](https://cdn.discordapp.com/attachments/566276937035546624/987995309927964692/unknown.png)\r\n[Nio vs Io File Absence performance](https://gist.github.com/CodingFabian/422b6cf4bfcdfece54c1)\r\n[Open JDK does the same in 21 places](https://github.com/openjdk/jdk/blob/b544b8b7d43907e93263db31ba3cc6d5951bcaee/src/jdk.jfr/share/classes/jdk/jfr/internal/SecuritySupport.java#L388-L389)\r\n\"brings reload times from 30s to 5s or so in testmod client\" - Technici4n\r\n\r\nStill needs propper testing, but I think it should be good.",
    "head_branch": "fast_exists",
    "is_a_fork": true,
    "comments": [
      "Just curious, how fast is the zip fs provider implementation compared to, say, zipfile for checking existence?\r\n\r\nThe fact that they throw 2 exceptions in a check alone is shocking enough to me.",
      "> Just curious, how fast is the zip fs provider implementation compared to, say, zipfile for checking existence?\r\n> \r\n> The fact that they throw 2 exceptions in a check alone is shocking enough to me.\r\n\r\nI dont have comparision numbers, but I know for sure its not as bad as this. The zip fs impl is used a lot with this without any noticable slowdown. These exceptions seen in the profile are beign thrown within the WindowsFileSystemProvider.\r\n\r\nThere may well be further room for improvement around this, but that will need further investigation."
    ],
    "commit_messages": [
      "Optimise file exists check in ModNioResourcePack (#2339)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307210ac82a74541b21e2",
    "number": 2338,
    "body": "Resolves #1569 \r\n\r\nThe original crash `ScreenMixin` was trying to catch can no longer happen after 1.17. However, the crash still occurs on off-thread `setScreen` as that introduces a race condition. This PR fixes the crash message.\r\n\r\nAdditionally, this also adds a check for current thread on `setScreen` itself. The vanilla check is only for `isDevelopment` environment and the error was too short. Our error includes the screen class name and the thread name which should make it clear what's going on (calling setScreen on Netty thread/Server thread/etc).",
    "head_branch": "fix-screen-error",
    "is_a_fork": true,
    "comments": [
      "I am not sure, why does this one method deserve a thread-check, while all the other API mehods are just as thread-hostile and don't get one? :-P",
      "@shartte Because some people encountered this situation and it's not easy to debug. Currently, calling `setScreen` on the wrong thread will crash randomly due to `GameRenderer` racing."
    ],
    "commit_messages": [
      "Make screen API crash easier to debug (#2338)\n\n* Make screen API crash easier to debug\r\n\r\n* Update fabric-screen-api-v1/src/client/java/net/fabricmc/fabric/mixin/screen/ScreenMixin.java"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307210ac82a74541b21e3",
    "number": 2336,
    "body": "- Move `ItemRenderer` injection point from `HEAD` to before `BakedModel.isBuiltin` check.\r\n- This allows model replacement to run before Indigo renders items so that 2D trident and spyglass models can be rendered with Indigo as well.\r\n- Additionally, this change may improve mod compatibility.\r\n- Copied code in `ItemRendererContext` has been removed to accommodate the later injection point.\r\n- This fix should be backported to 1.18.2.",
    "head_branch": "1.19-defer-indigo-item",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Defer Indigo item rendering (#2336)\n\n- Move ItemRenderer injection point from head to before isBuiltin check to allow model replacement to run"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307220ac82a74541b21e4",
    "number": 2327,
    "body": "Currently the icon for fabric-command-api-v2 in modmenu is not showing because the path to the file is incorrect.\r\n![image](https://user-images.githubusercontent.com/63669478/174070272-0c800fe2-749e-48a8-a281-646ac14bc233.png)\r\n",
    "head_branch": "1.19",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix icon path (#2327)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307230ac82a74541b21e5",
    "number": 2326,
    "body": "Switched to the approach used by the FuelRegistry.",
    "head_branch": "fix-2108",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #2108: FlammableBlockRegistry ignores tags unless /reload (#2326)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662307240ac82a74541b21e6",
    "number": 2322,
    "body": "- Added transitive-accessible wideners for `BlockStateModelGenerator$TintType`, `BlockStateModelGenerator$BlockTexturePool`, `BlockStateModelGenerator$LogTexturePool`, and `BlockStateModelGenerator$BuiltinModelPool` classes\r\n- Added transitive-accessible widener for `TexturedModel#makeFactory` method\r\n- Moved transitive-accessible wideners for `ItemModelGenerator` methods to the `generateAccessWideners` task, so it covers the 2 new methods `registerCompass` and `registerClock`, and any future new ones\r\n- Fixed `generateAccessWideners` task so it can now find the jar\r\n- Tweaked the whitespace in the accesswidener file a bit",
    "head_branch": "1.19-moreTAWs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add some more TAWs to the Datagen Module (#2322)\n\n- Added transitive-accessible wideners for `BlockStateModelGenerator$TintType`, `BlockStateModelGenerator$BlockTexturePool`, `BlockStateModelGenerator$LogTexturePool`, and `BlockStateModelGenerator$BuiltinModelPool` classes\r\n- Added transitive-accessible widener for `TexturedModel#makeFactory` method\r\n- Moved transitive-accessible wideners for `ItemModelGenerator` methods to the generate run, so it covers the 2 new methods and any future ones\r\n- Fixed `generateAccessWideners` task so it can now find the jar\r\n- Tweaked the whitespace in the accesswidener file a bit"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307250ac82a74541b21e7",
    "number": 2321,
    "body": "Backport of #2261 and #2282 to 1.18.2\r\nFixes #2334\r\n\r\nThis backports the following changes:\r\n\r\n- Mod-provided data packs and their DRM entries now always load. Note that such mod might produce \"experimental world generation\" warning. This is expected as the mods use the vanilla data pack system and it is not feasible to hide this without changing the behavior for vanilla data packs.\r\n- End biomes are loaded lazily to allow data pack DRM entries to be used.\r\n- Nether biomes are modified just before `ServerWorld` gets created to allow data pack DRM entries to be used. There aren't many other injection points which allow this sort of stuff, because `MultiNoiseBiomeSource` gets created too early.\r\n- @deirn's fix: Fixes biome set not being modified for End biomes.\r\n- `TheEndBiomeData` no longer assumes identity of `RegistryEntry`. See #2310 for solutions. This includes custom `Hash.Strategy` for them (used for fastutil hashmaps/hashsets) which we might want to expose in Registry Sync.\r\n- Clamps the perlin noise value in `WeightedPicker` to fix a crash. As noted in #2127 perlin noises can in rare cases go outside `0 <= n < 1` range. Clamping should not mess up worldgen because it's very rare from my understanding, and weird generation is better than a crash.\r\n- Testmod changes.\r\n\r\nThe following changes made in 1.19 branch are inapplicable to 1.18.2 thus not backported:\r\n- Crash involving missing seed during custom end biome generation.\r\n- Off-by-one error with custom end midlands/barrens.\r\n- Attaching perlin noise sampler to multi noise sampler.",
    "head_branch": "biome-fix-backport",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Backport fixes to resource loader and biome API (#2321)\n\n* Load mod-provided data packs and DRM entries (backport of #2261)\r\n\r\n* Port biome testmod changes\r\n\r\n* Fix Biome API bugs (backport of #2282)\r\n\r\n* Re-run tests"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662307250ac82a74541b21e8",
    "number": 2314,
    "body": "It can modify the existing loot pools by turning them to builders (like `LootTableEvents.MODIFY`), modifying them using a `Consumer`, rebuilding them and replacing them in place.",
    "head_branch": "loot-pool-mod",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add FabricLootTableBuilder.modifyPools (#2314)\n\n* Add FabricLootTableBuilder.modifyPools\r\n\r\n* Fix typo in javadoc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307260ac82a74541b21e9",
    "number": 2308,
    "body": "Add a client tags module to allow clients to use mod provided tags even when the mod is not present on the server.",
    "head_branch": "client_tags",
    "is_a_fork": true,
    "comments": [
      "I still think that trying to hook into `TagKey`s is better for modder ergonomics.",
      "> I still think that trying to hook into `TagKey`s is better for modder ergonomics.\r\n\r\n@LambdAurora The idea is to ensure that this system cannot ever leak into the real tags.",
      "> > I still think that trying to hook into `TagKey`s is better for modder ergonomics.\r\n> \r\n> @LambdAurora The idea is to ensure that this system cannot ever leak into the real tags.\r\n\r\nHooking into TagKeys doesn't mean the system will leak into real tags :P",
      "> > > I still think that trying to hook into `TagKey`s is better for modder ergonomics.\r\n> > \r\n> > \r\n> > @LambdAurora The idea is to ensure that this system cannot ever leak into the real tags.\r\n> \r\n> Hooking into TagKeys doesn't mean the system will leak into real tags :P\r\n\r\nYour approach is rather ergonomic, but also very hacky. Player decided to go for an approach where single client tags are only read on-demand, and the client tag system is separate from the normal tags. You can find the full discussion on discord.",
      "Hmmmm\r\n![image](https://user-images.githubusercontent.com/13494793/176400213-711d4fed-3af8-4729-bac9-712a8154d29e.png)\r\n",
      "This crash can be reproduced using the `Testmod Client` run config.",
      "Closes #2293.",
      "Another tiny question: what happens with optional tags vs non-optional tags? I guess they are all loaded regardless?",
      "I believe they are all loaded.",
      "Would be worth checking, and maybe having a javadoc comment explaining that the returned IDs may not exist in the registries.",
      "Seems you have a checkstyle issue. Other than that looks good from me.",
      "> Seems you have a checkstyle issue. Other than that looks good from me.\r\n\r\nFixed!"
    ],
    "commit_messages": [
      "Add client tags module (#2308)\n\n* Add client tags module\r\n\r\n* Fix not actually returning the tag eval. for dynamic registry fallback\r\n\r\n* Use dynamic registry where needed\r\n\r\n* Make ClientTags uninititializable\r\n\r\n* Resolve feedback\r\n\r\n* Change package\r\n\r\nCo-authored-by: deirn <deirn@bai.lol>\r\n\r\n* Change package\r\n\r\nCo-authored-by: deirn <deirn@bai.lol>\r\n\r\n* Remove unused dep. block\r\n\r\nCo-authored-by: deirn <deirn@bai.lol>\r\n\r\n* Fix imports\r\n\r\n* Move the files to match new package\r\n\r\n* Apply feedback\r\n\r\n* Apply feedback\r\n\r\n* Add test mod\r\n\r\n* Fix CME\r\n\r\n* Fix checkstyle\r\n\r\n* Apply feedback\r\n\r\n* Apply feedback\r\n\r\n* Apply feedback\r\n\r\n* Fix checkstyle\r\n\r\nCo-authored-by: deirn <deirn@bai.lol>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307270ac82a74541b21ea",
    "number": 2307,
    "body": "Resolves #2276 \r\n\r\nGeneric tag queries.",
    "head_branch": "tag_util",
    "is_a_fork": true,
    "comments": [
      "Hmm, do we actually use interface injection to add our own methods?",
      "> Hmm, do we actually use interface injection to add our own methods?\r\n\r\nIsn't adding methods to vanilla classes the whole point of interface injection?",
      "I'm not sure II will be helpful for discovery, since all other tag checks are done on other objects, not the tagkey itself.",
      "@Technici4n The main use of interface injection, as far as I'm aware, is to allow subclassses of vanilla class to implement Fabric methods.\r\n\r\nAnother thing to consider is that using interface injection there completely misses the point of the 1.18.2 tag refactor. `TagKey` is just a key and does not hold the values, unlike `Tag.Identified`. Having `isIn` methods (which, if injected, should be `contains` I think?) makes it look like the key holds the values.",
      "Yeah, I guess it's not ideal here. Let's go for the separate static helpers then."
    ],
    "commit_messages": [
      "Add TagUtil (#2307)\n\n* Add TagUtil\r\n\r\n* Allow for the registry manager to passed in allowing for dynamic tags to be used\r\n\r\n* Update JD\r\n\r\n* Remove redundant fallback\r\n\r\n* Make TagUtil final\r\n\r\nCo-authored-by: haykam821 <24855774+haykam821@users.noreply.github.com>\r\n\r\n* Make TagUtil uninititializable\r\n\r\n* Add test mod\r\n\r\n* Fix spotless for test mod\r\n\r\n* JD indent\r\n\r\nCo-authored-by: Technici4n <13494793+Technici4n@users.noreply.github.com>\r\n\r\n* Apply suggestions\r\n\r\n* Fix checkstyle\r\n\r\n* Apply feedback\r\n\r\nCo-authored-by: haykam821 <24855774+haykam821@users.noreply.github.com>\r\nCo-authored-by: Technici4n <13494793+Technici4n@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307280ac82a74541b21eb",
    "number": 2301,
    "body": "Closes #2292\r\nAlso fixes custom end biomes couldn't be found using `locateBiome` method.\r\n",
    "head_branch": "fix-2292",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307290ac82a74541b21ec",
    "number": 2296,
    "body": "WIP, untested.\r\n\r\nThis update will bring ~~three~~ two things:\r\n\r\n- `ClientMessageEvents`. Like `ServerMessageEvents`, if the message is blocked by the client, it won't be handled. It uses a similar set of callbacks using the same parameter orders with the server-side ones, however command callback obviously does not exist, and `RegistryKey<MessageType> typeKey` is replaced with `MessageType type` due to technical reasons. (Those who need the key can lookup DRM.) Currently there is no Allow callback. This is implemented by adding a custom `ClientChatListener` to `InGameHud#listeners`.\r\n- `ClientMessageHelper`. The event will receive `MessageSender`, but the client might want to resolve the otherwise-empty record; these methods provide UUID-to-entity/player list entry lookup.\r\n- ~~`ServerChatEvents#MODIFY_SENDER_NAME` event. This can be used for coloring player names (note that custom message type might be better), pronouns mods, nicknames, etc. Since the name is not signed, we can modify this with no issue. This will use event phases like `ServerMessageDecoratorEvent`.~~ (postponed due to usability issues)",
    "head_branch": "message-api-v1.1",
    "is_a_fork": true,
    "comments": [
      "Note: MODIFY_SENDER_NAME is postponed. This PR is therefore ready to review.",
      "So this is not in progress anymore?",
      "@Technici4n Yes",
      "Seems easy enough. What would be the use case? Would the ability to cancel the message and/or change it would make sense compared to only having \"notification\" callbacks?",
      "@Technici4n Not sure about the use case for changing the message client-side. Canceling might have a use, but probably later.\r\n\r\nMain use case would be mods that ping the user or store messages in other places.",
      "Sure thing, I assume cancel and modify would be different events running before the ones added by this PR anyway; they could easily be added after the fact.",
      "Closing; will PR targeting 1.19.1 instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307290ac82a74541b21ed",
    "number": 2291,
    "body": null,
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Mark ArgumentTypeRegistry as final (#2291)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623072a0ac82a74541b21ee",
    "number": 2290,
    "body": "Resolves #2288 \r\nThis is a temporary fix, the better fix would be the one haykam suggested. This works because on networking thread the call is terminated with an unchecked exception from `forceMainThread`.\r\n\r\nI think this code means the event is currently triggered twice on load, on two threads, which is definitely not good in my opinion.",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make sure only render thread can call onGameJoin (#2290)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623072b0ac82a74541b21ef",
    "number": 2282,
    "body": "Fixes #2127 \r\nFixes #2259 \r\nFixes #2292 \r\nFixes #2310 \r\nFixes #2311 \r\nCloses #2301 \r\n\r\n# Changes\r\n- End biomes are loaded lazily to allow data pack DRM entries to be used.\r\n- Nether biomes are modified just before `ServerWorld` gets created to allow data pack DRM entries to be used. There aren't many other injection points which allow this sort of stuff, because `MultiNoiseBiomeSource` gets created too early.\r\n- @deirn 's fix: Fixes crash with modded End biomes due to missing seed.\r\n- deirn's fix: Fixes biome set not being modified for End biomes.\r\n- `TheEndBiomeData` no longer assumes identity of `RegistryEntry`. See #2310 for solutions. This includes custom `Hash.Strategy` for them (used for fastutil hashmaps/hashsets) which we might want to expose in Registry Sync.\r\n- If modded highlands has exactly one modded midlands/barrens, they now generate, instead of vanilla ones. This is caused by an off-by-one error in the code.\r\n- Clamps the perlin noise value in `WeightedPicker` to fix a crash. As noted in #2127 perlin noises can in rare cases go outside `0 <= n < 1` range. Clamping should not mess up worldgen because it's very rare from my understanding, and weird generation is better than a crash.\r\n- deirn's refactor: `MultiNoiseSampler` now stores the perlin noise sampler directly instead of using a map. Might work as a performance optimization, unsure.",
    "head_branch": "datapack-fix-again",
    "is_a_fork": true,
    "comments": [
      "I have added a command to this PR to help test the other issues. Hope you dont mind.",
      "@modmuss50 great! ~~will also fix the seed issue soonish~~ nvm #2301",
      "Updated, ready to review."
    ],
    "commit_messages": [
      "Fix Biome API bugs (#2282)\n\n* Fix loading data pack biomes\r\n\r\n* Add command to help test.\r\n\r\n* Fix custom end biomes crash\r\ncloses #2292\r\n\r\n* add plains biome to the end\r\n\r\n* remove unnecessary field prefix\r\n\r\n* End biomes now generate properly\r\n\r\n* Remove test logging\r\n\r\n* Remove test command (was barely functional)\r\n\r\n* Fix checkstyle\r\n\r\n* Some small refactors\r\n\r\n* Save the sampler directly on MultiNoiseSampler instance (#1)\r\n\r\nCo-authored-by: modmuss50 <modmuss50@gmail.com>\r\nCo-authored-by: deirn <deirn@bai.lol>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623072c0ac82a74541b21f0",
    "number": 2280,
    "body": "Hopefully fixes #2259",
    "head_branch": "fix_2259_again",
    "is_a_fork": true,
    "comments": [
      "Superseded by #2282"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623072d0ac82a74541b21f1",
    "number": 2279,
    "body": "- Mixin'd to `SculkSensorBlock` to make its `FREQUENCIES` map modifiable.\r\n- Created `SculkSensorFrequencyRegistry` with a dedicated method for registering these frequencies, with all necessary checks to avoid issues, and javadoc to assist in understanding.\r\n- Added tests to the test mod, as well as a block that emits a test event, to ensure it all works.\r\n\r\nUnfortunately, the mixin currently uses a Redirect. If this is undesired, feel free to suggest other ways of achieving the end result of being able to modify the frequencies map.",
    "head_branch": "1.19-sculk-frequencies",
    "is_a_fork": true,
    "comments": [
      "Looks good, please fix conflicts 👍 "
    ],
    "commit_messages": [
      "Sculk Sensor Frequency Registry (#2279)\n\n* Sculk Sensor Frequency Registry\r\n\r\n- Mixin'd to `SculkSensorBlock` to make its `FREQUENCIES` map modifiable.\r\n- Created `SculkSensorFrequencyRegistry` with a dedicated method for registering these frequencies, with all necessary checks to avoid issues, and javadoc to assist in understanding.\r\n- Added tests to the test mod, as well as a block that emits a test event, to ensure it all works.\r\n\r\nUnfortunately, the mixin currently uses a Redirect. If this is undesired, feel free to suggest other ways of achieving the end result of being able to modify the frequencies map.\r\n\r\n* Update SculkSensorFrequencyRegistry.java\r\n\r\n* cleaner javadoc\r\n\r\n* Update fabric-content-registries-v0/src/main/resources/fabric-content-registries-v0.mixins.json\r\n\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>\r\n\r\n* Final touches\r\n\r\n...get it?\r\n\r\n(oh and removed that Dynamic because tech didn't like it)\r\n\r\n* Whoops\r\n\r\nForgot to remove the Dynamic import\r\nAlso restored the actual contents of the dynamic, as javadoc.\r\n\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623072d0ac82a74541b21f2",
    "number": 2273,
    "body": "Fix #2244\r\n\r\n- `c:is_savanna`\r\n\r\nFix #2243 \r\n\r\n- `c:in_overworld`\r\n- `c:in_the_end`\r\n\r\nFix #2242 \r\n\r\n- `c:taiga` \r\n- `c:snowy_taiga`\r\n- `c:old_growth_pine_taiga` \r\n- `c:old_growth_spruce_taiga`",
    "head_branch": "1.19",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add all missing tags for SAVANNA, TAIGA, OVERWORLD and END (#2273)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623072e0ac82a74541b21f3",
    "number": 2272,
    "body": "Fix #2244\r\n\r\n- `c:is_savanna`\r\n\r\nFix #2243 \r\n\r\n- `c:in_overworld`\r\n- `c:in_the_end`\r\n\r\nFix #2242 \r\n\r\n- `c:taiga` \r\n- `c:snowy_taiga`\r\n- `c:old_growth_pine_taiga` \r\n- `c:old_growth_spruce_taiga`",
    "head_branch": "1.19",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623072f0ac82a74541b21f4",
    "number": 2268,
    "body": "Adds the following convention tags for both items/blocks:\r\n* `c:villager_job_sites`\r\n* `c:yellow_sandstone_blocks`\r\n* `c:red_sandstone_blocks`\r\n* `c:sandstone_blocks`\r\n* `c:yellow_sandstone_slabs`\r\n* `c:red_sandstone_slabs`\r\n* `c:sandstone_slabs`\r\n* `c:yellow_sandstone_stairs`\r\n* `c:red_sandstone_stairs`\r\n* `c:sandstone_stairs`",
    "head_branch": "new_convention_tags",
    "is_a_fork": true,
    "comments": [
      "I don't think regular sandstone should be referred to as yellow sandstone. Is there a use case for having a combined sandstone tag? Since sandstone and red sandstone are clearly different blocks that wouldn't make sense to be part of the same tag, I think that `c:yellow_sandstone_blocks` and similar tags should be renamed to `c:sandstone_blocks`.",
      "It is quite common, on Forge at least, to be able to use red sand in recipes that use sand. So would it make sense to be able to use both kinds of sandstone with a common tag? Not sure.",
      "> I don't think regular sandstone should be referred to as yellow sandstone. Is there a use case for having a combined sandstone tag? Since sandstone and red sandstone are clearly different blocks that wouldn't make sense to be part of the same tag, I think that `c:yellow_sandstone_blocks` and similar tags should be renamed to `c:sandstone_blocks`.\r\n\r\n> It is quite common, on Forge at least, to be able to use red sand in recipes that use sand. So would it make sense to be able to use both kinds of sandstone with a common tag? Not sure.\r\n\r\nThis was along my trail of thought, happy to change it if the consensus is otherwise though.",
      "As tags are a collection, there is ambiguity if `sandstone` means all sandstones or just the original sandstone. Unless the collection of all sandstones is given some demarcating feature, the original sandstone collections should be marked as `yellow`,  `normal`, or other.",
      "Sandstone isn't referred to as yellow within vanilla Minecraft, so it shouldn't be referred to as yellow within tags.\r\n\r\nI think that any tags containing only sandstone and not red sandstone should be prefixed with 'normal' or similar, or the sandstone and red sandstone combined tags should be prefixed with 'all' or similar.",
      "I'm not a huge fan of the normal prefix - it's only the color being \"normal\", but not the structure/naturalness. Uncolored or so might be better. The slabs and stairs lack the prefix while the blocks have it.",
      "> The slabs and stairs lack the prefix while the blocks have it.\r\n\r\nThere are both \"normal\"/uncoloured/yellow and \"all\" (unprefixed) versions of the slab and stair tags, though?",
      "Right, I missed that, so only the proper prefix choice question remains.",
      "@aws404 Sorry for the delay! Could you please change the naming back to yellow? (We had some discussion on discord... Normal doesn't really work, and we couldn't find a better alternative). Should be fine after that.",
      "I don't see a reason to add a special these special sandstone tags. A sandstone stairs should have 3 tags : sandstone (material), stairs (type) and yellow (color) so it would work for recipes which accept sandstone or recipes that only accept yellow sandstone.\r\n\r\nTLDR: We should use composite tag not special tag",
      "Someone gonna has to explain me how in hell the base sandstone is yellow.",
      "I want someone to look at me straight in the eyes and tell me that normal terracotta is actually brown terracotta and that the normal shulker box is actually purple shulker box. While there's already a specific dyed variant for those colors.\r\n\r\n![image](https://user-images.githubusercontent.com/12587332/175832271-6b9a53d6-8b21-49e8-b2e0-1daf64a76fc8.png)\r\n",
      "> Someone gonna has to explain me how in hell the base sandstone is yellow.\r\n\r\nIf we have to assign it a Minecraft color (https://minecraft.fandom.com/wiki/Dye), it's definitely yellow ",
      "> If we have to assign it a Minecraft color (https://minecraft.fandom.com/wiki/Dye), it's definitely yellow\r\n\r\nIt's called sand, not yellow_sand.\r\n",
      "Another update, this time final I hope, after some more discussion on Discord: please change to `uncolored` for the regular sandstone.",
      "Replaced by #3051."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307300ac82a74541b21f5",
    "number": 2266,
    "body": "Previously, the code would just send disconnect.genericReason which is empty when no argument is provided, causing blank disconnect messages without the error responsible.",
    "head_branch": "fix-disconnect-reason",
    "is_a_fork": true,
    "comments": [
      "It'd be nice to log the exception with a higher level than vanilla's debug since that's rather unapproachable to server admins and mods can cause all sorts of issues that end up there. This may however require pre-filtering the typical pure network exceptions, which is well beyond this PR."
    ],
    "commit_messages": [
      "Fix errors not showing up in disconnect messages (#2266)\n\n* Fix errors causing disconnects during server connection not showing up in the disconnect message\r\n\r\n* Replace unnecessary inject with the throwable provided in the redirect"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307310ac82a74541b21f6",
    "number": 2265,
    "body": "This PR adds two useful lifecycle events.\r\n\r\n1. `SyncDataPackContents`. Quite straightforward. I need this event for Modern Dynamics where I have a custom resource reload listener whose contents I want to sync with the client, to display in REI. A similar effect could be achieved using a connection event, and the EndDataPackReload event, however the latter runs too late if REI expects all data to have arrived before the tag and the recipe sync packets.\r\n2. `TagsLoaded`. This event is useful when a tag-dependent cache needs to be invalidated because tags have changed. Not sure if the `DynamicRegistryManager` and the `isClient` parameters are useful, but I thought I might as well provide them. There were two places in Fabric API that I converted to use this event (`FuelRegistry` cache, and the `MiningLevelManagerImpl`). It also turns out that `FuelRegistry` didn't invalidate its cache when a server is started, which could theoretically be an issue when logging out of a singleplayer and then logging back in with a different datapack.",
    "head_branch": "sync-datapacks-and-tags",
    "is_a_fork": true,
    "comments": [
      "Interesting prior art for `TagsLoaded`: (mojmap ofc) https://github.com/MinecraftForge/MinecraftForge/pull/8636, I just realized.",
      "Since this is a prerequisite for a clean fix of #2108, I am marking this as medium priority."
    ],
    "commit_messages": [
      "Add SyncDataPackContents and TagsLoaded lifecycle events (#2265)\n\n* Add SyncDataPackContents and TagsLoaded lifecycle events\r\n\r\n* tagsLoaded -> onTagsLoaded, isClient -> client\r\n\r\n* Compile error in testmod\r\n\r\n* Make SyncDataPackContents fire for every player\r\n\r\n* syncDataPackContents -> onSyncDataPackContents"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662307310ac82a74541b21f7",
    "number": 2264,
    "body": "Allows usage of CommandRegistryAccess in client command arguments more easily",
    "head_branch": "1.19-client-command-change",
    "is_a_fork": true,
    "comments": [
      "Putting this into last call for a little (not the whole week) as this needs to go in ASAP."
    ],
    "commit_messages": [
      "Change client command api to use registration event (#2264)\n\n* wip client command changes\r\n\r\n* Move field and add javadoc\r\n\r\n* Switch to jetbrains annotations and add missing annotations\r\n\r\n* Add note about integrated servers\r\n\r\n* Rename DISPATCHER field"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307320ac82a74541b21f8",
    "number": 2261,
    "body": "Fixes #2225\r\nFixes #2259\r\n\r\nThere were 2 issues in the existing `CreateWorldScreenMixin` mixin, specifically with `create(MinecraftClient, Screen)` method:\r\n\r\n- There were two references to `DataPackSettings#SAFE_MODE`. The first one was used to load the DRM, and the second one is passed to the constructor. Previously, only the second one was replaced to include Fabric-provided data packs.\r\n- There were no attempts to load dynamic registry from the provided data packs.\r\n\r\nThis fixes both issues, plus a code change to try-with-resources `createResourcePack`.\r\n\r\nThe first issue also affected dedicated servers, and both for test servers, which should be fixed as well.\r\n\r\nBiome API testmod now includes a test for adding a placed feature (pile of red concrete) defined in a data pack. Previously this caused a crash.",
    "head_branch": "dynamic-registry-client",
    "is_a_fork": true,
    "comments": [
      "Seems like this still crashes in dedicated/gametest server. Need to fix this.",
      "~~The code for dedicated servers need 1.18.2 backport. Client-side code I believe should be fine, but we need some testing. No backport is necessary for 1.18.1 or earlier, as ServerBugfixMixin handles these cases.~~\r\n\r\nNo backport needed."
    ],
    "commit_messages": [
      "Load mod-provided data packs and DRM entries (#2261)\n\n* Load mod-provided data packs and DRM entries in CreateWorldScreen\r\n\r\nFixes #2225\r\n\r\n* Fix ModifyArg target\r\n\r\n* Fix injection failure\r\n\r\n* Fix again\r\n\r\n* checkstyle\r\n\r\n* Fix it once again\r\n\r\n* Add data pack load test to biome api testmod\r\n\r\n* Also fix this for the dedicated server\r\n\r\n* Fix TestServer not loading data packs\r\n\r\n* Load dynamic registry in TestServer"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307330ac82a74541b21f9",
    "number": 2257,
    "body": null,
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [
      "This has been implemented when porting to 1.19.3 thanks to Mojang's changes in this area."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307340ac82a74541b21fa",
    "number": 2256,
    "body": null,
    "head_branch": "fat_testmod",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Create fat testmod jar (#2256)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307350ac82a74541b21fb",
    "number": 2252,
    "body": "Fixes #2237.",
    "head_branch": "close-2237",
    "is_a_fork": true,
    "comments": [
      "A test mod would be very useful imo.",
      "Any chance of adding a testmod to this? Or shall I just merge it anyway?",
      "I'll add a test mod don't worry. Before 1.19 for sure.",
      "Testmod is added and it works! 😄\r\n\r\n![image](https://user-images.githubusercontent.com/13494793/171227429-109a7d4a-799f-41ee-b349-699d6e08e7f6.png)\r\n![image](https://user-images.githubusercontent.com/13494793/171227245-5e58342b-b240-4fe0-b7f4-24ee2fd384d1.png)\r\n![image](https://user-images.githubusercontent.com/13494793/171227266-cc36fed6-5855-4b4c-a2a0-ffbd6eb93783.png)\r\n![image](https://user-images.githubusercontent.com/13494793/171227301-f4951cd4-97d1-42f1-99e5-af24805b3303.png)\r\n![image](https://user-images.githubusercontent.com/13494793/171227317-267a5543-0670-4646-9f20-69f4f6ca1b8a.png)\r\n"
    ],
    "commit_messages": [
      "Fix #2237: Allow registering argument types without interacting with the class map (#2252)\n\n* Fix #2237: Allow registering argument types without interacting with the class map\r\n\r\n* Add testmod :)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307350ac82a74541b21fc",
    "number": 2251,
    "body": "Fix #2152",
    "head_branch": "fix-2152",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #2152: End server world tick too early and conditional (#2251)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307360ac82a74541b21fd",
    "number": 2250,
    "body": "1. Closes #2228.\r\n2. Closes #2241.\r\n3. Fixes #2240. Item models are now always automatically generated, but only for blocks whose blockstate jsons are generated. Calling `excludeFromSimpleItemModelGeneration(block)` on the `BlockStateModelGenerator` will opt out of this behavior (regular vanilla datagen feature). **Might require a major version bump since it's a breaking change for mods relying on the previous (wrong) behavior.**\r\n\r\nTesting I did, for each commit respectively:\r\n1. I just checked that the jar was indeed included in the built fatjar.\r\n2. Expanded the testmod to check this, work as expected.\r\n3. I tested various combinations of strictness, not registering some blocks, and explicitly disabling the item models with `excludeFromSimpleItemModelGeneration`, everything works as expected now.",
    "head_branch": "datagen-fixes",
    "is_a_fork": true,
    "comments": [
      "Seems fine, will major bump it. But not give it a new module as it was technically a bug,  dev only and small logic change. The breakage is as minimal as its ever going to be.",
      "Might be nice to rebase instead of squash these commits, since I think only the first two should be backported to 1.18.2. The datagen \"breaking change\" is a bit annoying this late in the 1.18.2 cycle imo."
    ],
    "commit_messages": [
      "A few datagen fixes (#2250)\n\n* Include datagen in the production fatjar. Closes #2228\r\n\r\n* Allow exclusion of block loot tables from strict validation. Closes #2241\r\n\r\n* Auto-generate item models even when strict validation is disabled. Fixes #2240"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662307370ac82a74541b21fe",
    "number": 2249,
    "body": "Fixes #2239 and Fixes #2238\r\n\r\nThis API was mainly designed to teleport entities between diffrent dimensions, however I think it makes sense to handle the same dimension case better.",
    "head_branch": "teleport_fixes",
    "is_a_fork": true,
    "comments": [
      "Does this account for https://bugs.mojang.com/browse/MC-124177 ?\nIIRC, I've seen it same-dimension, tho I might be misremembering.",
      "This shouldnt affect that same-dimension. And doesnt fix it across dimensions."
    ],
    "commit_messages": [
      "Handle teleporting within the same dimension better. (#2249)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307380ac82a74541b21ff",
    "number": 2248,
    "body": "Port of #1820 to 1.18.2. I confirmed that the leak originally reported in #1819 still occurred with the current `1.18.2` branch (before applying the fix), and that it doesn't happen anymore after the cherry-pick and the fixup commit.",
    "head_branch": "fix-2206",
    "is_a_fork": true,
    "comments": [
      "Will we port to 1.19 too?",
      "> Will we port to 1.19 too?\r\n\r\nImo we should, otherwise we'll have the same report a third time in a few months. 😄",
      "Will we port to 1.16.5 forge too? It's really important to me, hopefully\r\nThis version also has this problem。\r\n"
    ],
    "commit_messages": [
      "Fix #2206: Client chunk cache grows unbounded (#2248)\n\n* Fix missing some chunk unloads events leading to a possible memory leak. (#1820)\r\n\r\n* Update fix for 1.18.2. Fixes #2206\r\n\r\nCo-authored-by: modmuss50 <modmuss50@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307390ac82a74541b2200",
    "number": 2247,
    "body": null,
    "head_branch": "fix_2205",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Sync new 1.19 registries as required. Closes #2205 (#2247)\n\n* Sync new 1.19 registries as required. Closes #2205\r\n\r\n* Comment fixes."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307390ac82a74541b2201",
    "number": 2235,
    "body": "Looks like I unwillingly removed it in #2157, this readds it.\r\n\r\nThis is useful for those cases where mods decide to use 3 letter ids instead of the full mod name.\r\n\r\nI have not tested how the new output looks like.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Restore printing the mod name in crash reports (#2235)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623073a0ac82a74541b2202",
    "number": 2233,
    "body": "This PR add somes AW for EntityModelLayers functions like `registerMain`, `register`, etc...\r\n\r\nThat can be usefull for custom entity model in 1.19.",
    "head_branch": "aw_rendering",
    "is_a_fork": true,
    "comments": [
      "Two things:\r\n- If you don't use transitive access wideners, they can't be used in dependent mods, which defeats the point.\r\n- This should like go in the transitive access widener module instead.",
      "> Two things:\r\n> \r\n>     * If you don't use transitive access wideners, they can't be used in dependent mods, which defeats the point.\r\n> \r\n>     * This should like go in the transitive access widener module instead.\r\n\r\nThis is changed.",
      "You added them to the wrong file I believe, there should be a template instead. Make sure to add to the template and run the task to update the autogenerated file. This file is autogenerated and should not be edited manually.",
      "> You added them to the wrong file I believe, there should be a template instead. Make sure to add to the template and run the task to update the autogenerated file. This file is autogenerated and should not be edited manually.\r\n\r\nDone, normaly ^^",
      "All `EntityModelLayers` methods create `EntityModelLayer` with `minecraft` namespace, I don't think we want modders to do that.\r\n\r\nFrom what I can tell, registering `EntityModelLayer` is more involved than calling one of those methods, we need to modify the map `EntityModels#getModels` returns. Fabric API already provide [`EntityModelLayerRegistry`](https://github.com/FabricMC/fabric/blob/1.19/fabric-rendering-v1/src/client/java/net/fabricmc/fabric/api/client/rendering/v1/EntityModelLayerRegistry.java) for that."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623073b0ac82a74541b2203",
    "number": 2227,
    "body": "same as https://github.com/FabricMC/fabric/pull/2083",
    "head_branch": "cmdApi",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update command registration API to reflect 1.19 vanilla changes (#2227)\n\n* Update command registration API to reflect vanilla changes\r\n\r\n* Allow module versions in impl+mixin packages\r\n\r\n* Use v2 module, keeping v1 for server commands at least\r\n\r\n* update, address review\r\n\r\nCo-authored-by: modmuss50 <modmuss50@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623073c0ac82a74541b2204",
    "number": 2220,
    "body": "# Fabric Message API v1\r\n## Resolves\r\nResolves #26\r\nResolves #971\r\nImplements some of #1147\r\n\r\n## What is this?\r\nIn 22w19a, Mojang introduced a change for modders specifically: \"chat decorators\". This is already in a state where a mod can use it directly with just one simple mixin. But here is the problem - I wrote \"a mod\", not \"mods\". Cross-compatibility will be a huge pain without a central mod providing a way for multiple mods to register chat decorators. This provides exactly that.\r\n\r\nWhen making chat APIs with compatibility in mind, execution order becomes a issue. This PR tries to partially solve it by using the \"event phases\" in Event API. The API provides two phases - content and styling. The default phase sits in between. I will not try to address mod compatibilities between content-modifying mods, since that'd be a neverending process.\r\n\r\nThis also adds some events called when chat messages are sent, because it is not easy to get the right injection point.\r\n\r\n## What this is NOT\r\n- This **does not provide client-side functionality** (e.g. `ClientChatReceiveEvent`, exposing `ClientChatListener` registering, etc), I'm currently waiting for #2179 \r\n- The API **cannot be used for proper censoring** (unless the server owner is fine with disabling chat signing or users being able to see censored content before sending).\r\n- ~~The API **cannot block messages**. This needs a different callback. Returning `null` in chat decorator will crash the game (and the API provided by this intentionally throws earlier), and returning `Text.empty()` will probably cause an empty text to be sent (untested).~~ Blocking callback added.\r\n- ~~The API **is not blocking-safe**. The decorator is called in the server thread.~~ Can execute asyncly since 1.19-pre1\r\n\r\n## Testing\r\n**Fully tested** on dedicated server with MSA, chat preview, and Only Show Secure Chat.\r\n\r\nThe testmod contains five manual tests:\r\n\r\n- Basic (content): messages containing `tater` will have ` :tiny_potato:` appended\r\n- Basic (styling): messages from creative-mode players will be colored in orange\r\n- Logging for sent chat messages to check that the events trigger\r\n- Blocking chat and command messages: messages containing `sadtater` are blocked\r\n- Blocking game messages: death messages are no longer sent",
    "head_branch": "chat-api",
    "is_a_fork": true,
    "comments": [
      "Handful of checkstyle issues need resolving.",
      "I will remove the caching stuff because it's so hard to make it work right in all situations.",
      "This is basically done. Other things like blocking or client stuff can go later. :winktato:",
      "I recommend calling this message event api instead, given we call them message in yarn and this only provide events",
      "@liach Perhaps. In that case the module is `fabric-message-events`?"
    ],
    "commit_messages": [
      "Fabric Message API v1 (experimental) (#2220)\n\n* Initial skeleton\r\n\r\n* Fabric Chat API v1 (experimental)\r\n\r\n* Run checkstyle\r\n\r\n* Fix checkstyle (testmod)\r\n\r\n* Support 1.19-pre1\r\n\r\n* Fix spotless\r\n\r\n* Fixes\r\n\r\n* Remove caching of messages\r\nThis is hard to maintain and has several edge cases. Mods should cache themselves when needed.\r\n\r\n* Make constructor private\r\n\r\n* Add ServerChatEvents\r\n\r\n* Update mappings\r\n\r\n* Prepare for the rename\r\n\r\n* Include chat decorator in exception\r\n\r\n* Add support for blocking messages\r\n\r\n* Rename to fabric-message-api-v1\r\n\r\n* Update to 1.19-pre2\r\n\r\n* Use fabric namespace\r\n\r\n* Rename ChatDecoratorEvent\r\n\r\n* Rename events and add more javadoc\r\n\r\n* Rename ServerChatEvents\r\n\r\n* Rename ChatDecorator\r\n\r\n* Only block bad respawn point death in testmod\r\n\r\n* Fix wrong word in javadoc\r\n\r\n* Improve javadoc\r\n\r\nCo-authored-by: modmuss50 <modmuss50@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623073d0ac82a74541b2205",
    "number": 2217,
    "body": "Resolves #2215 \r\n\r\n`ClientCommandInternals` was changed to take unprefixed command messages (same as `ClientPlayerEntity#sendCommand`). This has some user-visible (although minor) change; the profiler and the debug logs now log unprefixed command.\r\n\r\nTested, works.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update client commands to reflect 22w19a changes (#2217)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623073d0ac82a74541b2206",
    "number": 2200,
    "body": null,
    "head_branch": "1.18.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623073e0ac82a74541b2207",
    "number": 2193,
    "body": "This PR adds the following content registries for villager interactions:\r\n- VillagerCollectableRegistry: Allows changing the items which villagers can collect into their inventory\r\n- VillagerCompostableRegistry: Allows changing which items farmer villagers can use with a composter\r\n- VillagerFoodRegistry: Allows changing which items villagers can use as food\r\n- VillagerPlantableRegistry: Allows changing which crops farmer villagers can plant\r\n- VillagerHeroGiftRegisty: Allows adding to the map of hero of the village loot tables\r\n\r\nExample uses can be seen in the test mod",
    "head_branch": "1.18.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add registries for villager interactions to fabric-content-registries module (#2193)\n\n* Add VillagerFoodRegistry\r\n\r\n* Fix style\r\n\r\n* Add VillagerCompostingRegistry and separate CollectablesRegistry from FoodRegistry\r\n\r\n* Add VillagerPlantableRegistry\r\n\r\n* Add warning when registering a non-compostable item as a villager compostable\r\n\r\n* Rename some registries, use block placement sound\r\n\r\n* Add VillagerHeroGiftRegistry\r\n\r\n* Add javadoc\r\n\r\n* Combined all registries into one API class\r\n\r\n* Remove now redundant class\r\n\r\n* Change registries to a static method\r\n\r\n* Combine into VillagerInteractionRegistries class\r\n\r\n* Fix typo\r\n\r\n* Move ImmutableCollectionUtils to impl\r\n\r\n* Add isEmpty check to plantables, prefix mixin methods with fabric_\r\n\r\n* VillagerPlantableRegistry Rework\r\n\r\n* Remove dangling comment\r\n\r\n* notNulls, included vanilla items in plantable registry, checkstyle fix"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623073f0ac82a74541b2208",
    "number": 2189,
    "body": "- This PR fixes the large performance issue in `InventorySlotWrapper#setStack` due to `ThreadLocal`, as can be seen in https://spark.lucko.me/ZOTanHYIYN. This doesn't fix the problem entirely, but most other issues are to blame on other mods. :P\r\nI have decided to use mixin to directly store that info in the relevant `Inventory` subclasses instead.\r\n![image](https://user-images.githubusercontent.com/13494793/166557142-c6c85af9-f79c-4df6-a258-04d53292ef77.png)\r\n![image](https://user-images.githubusercontent.com/13494793/166557050-ebc2978b-4329-4623-9105-1172c76a3c1a.png)\r\n![image](https://user-images.githubusercontent.com/13494793/166557640-8c8f15fc-5c14-4c5a-abd3-936d100808d2.png)\r\n- Another optimization is to cache in `ItemVariantImpl` the `ItemStack` used for `Inventory.isValid` and `SidedInventory.canInsert/canExtract` to avoid needing to create a new stack every time.\r\n- I also took the chance to slightly optimize `SingleStackStorage#isResourceBlank`, but that is very minor.\r\n- Also fixes #2201.",
    "head_branch": "fix-2164",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #2164: Transfer API performance issues (#2189)\n\n* Fix #2164: Transfer API performance issue\r\n\r\n* Cache ItemStack in ItemVariantImpl\r\n\r\n* Fix checkstyle\r\n\r\n* Fix #2201\r\n\r\n* Update comment in getCachedStack()"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662307400ac82a74541b2209",
    "number": 2179,
    "body": "### What and why\r\n\r\nA common source of crashes on modded Minecraft servers comes from modders accidently calling client only code from the client, this PR is another large step towards elimitating that.\r\n\r\nThis PR has been months in the making and years in the planning, requiring major changes to [Loom](https://github.com/FabricMC/fabric-loom/pull/561) & [Loader](https://github.com/FabricMC/fabric-loader/pull/630). In recent Minecraft versions Mojang has made it easier than ever to cleanly split the jar, going against the status-quo of merging the client and server into one jar.\r\n\r\nFrom the start we have designed Fabric to have a very clear split between client and common (client & server) code. Fabric has always encoraged keeping client only code seprate from the server, this can be seen at a fundamental level with the entrypoints in Loader. Fabric API's have all been designed with this mind.\r\n\r\nThis PR provides a compile safety net around Fabric API using client only code on the server. Even though there are almost 400 changed files, minimal changes beyond moving the files were required to achieve this in Fabric API, thanks to the effort of all contributors in the past.\r\n\r\nThese changes should not affect modders or players in anyway, a single \"universal\" jar is still produced. Im happy to awnswer any questions.\r\n\r\n### TODO\r\n\r\n- [x] Fix a loom issue causing invalid modclasspath groups.\r\n- [x] Invistage why it fails to build. (I expect another loom issue)\r\n- [x] Ensure that users of other IDEs (Eclipse and Vscode?) can still develop fabric api.\r\n- [x] Testing to make sure nothing broke.\r\n\r\n### Future work\r\n\r\n- [ ] Loom should re-split Fabric API (and any other mods you depend on) to provide compile time safety for mods using these APIs. Loom already includes the client only entries in the jar's manifest.\r\n- [ ] Enoruage modders to opt-in to compile time sidedness saftey.",
    "head_branch": "split_sourcesets",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Split client only code into its own sourceset. (#2179)\n\nA common source of crashes on modded Minecraft servers comes from modders accidently calling client only code from the client, this PR is another large step towards elimitating that.\r\n\r\nThis PR has been months in the making and years in the planning, requiring major changes to Loom & Loader. In recent Minecraft versions Mojang has made it easier than ever to cleanly split the jar, going against the status-quo of merging the client and server into one jar.\r\n\r\nFrom the start we have designed Fabric to have a very clear split between client and common (client & server) code. Fabric has always encoraged keeping client only code seprate from the server, this can be seen at a fundamental level with the entrypoints in Loader. Fabric API's have all been designed with this mind.\r\n\r\nThis PR provides a compile safety net around Fabric API using client only code on the server. Even though there are almost 400 changed files, minimal changes beyond moving the files were required to achieve this in Fabric API, thanks to the effort of all contributors in the past.\r\n\r\nThese changes should not affect modders or players in anyway, a single \"universal\" jar is still produced. Im happy to awnswer any questions."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307410ac82a74541b220a",
    "number": 2175,
    "body": "Closes #2120 \r\n\r\nAdds an ItemAttributeModifiersCallback\r\n\r\nIDK about you guys but I feel shaky about the stuff in ItemStackMixin.\r\n\r\nI did add a test and that test is also the example code in the javadoc.\r\n\r\n\r\nBelow is a link to the image showing that the test mod works\r\nhttps://discord.com/channels/507304429255393322/566276937035546624/970066641817858058",
    "head_branch": "item-attribute-modifier-callback",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add ModifyItemAttributeModifiersCallback (#2175)\n\n* Add ItemAttributeModifiersCallback\r\n\r\n* fix checkstyle errors\r\n\r\n* fix checkstyle errors v2\r\n\r\n* Edit javadoc per Technician's review\r\n\r\n* Update fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/item/v1/ItemAttributeModifiersCallback.java\r\n\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>\r\n\r\n* Change functional interface name per Juuz's review\r\n\r\n* Change name to ModifyItemAttributeModifiers per Juuz and Technician's request\r\n\r\n* Forgot to add callback to the name\r\n\r\n* Return mutable map\r\n\r\n* Remove unused import\r\n\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662307410ac82a74541b220b",
    "number": 2172,
    "body": "This API allows attaching arbitrary data to various game objects such as worlds, chunks, entities and block entities. Data can be attached client-side and server-side, but no syncing is provided in the API. The data can optionally be persisted on the server side.\r\n\r\nThe use case is generally to store data for a specific game object directly with the game object instead of having to store it separately and rely on load/unload events.\r\n\r\nThis is similar to the \"data attachment\" part of Forge capabilities, however API queries should be handled by API Lookup as before.\r\n\r\n## API overview\r\nThere are two classes in the API: `AttachmentType` and `AttachmentSerializer`.\r\n\r\n`AttachmentType<A, T>` is the \"key\" identifying a data attachment of type `A` to game objects of type `T`. It also contains the `get`, `computeIfAbsent`, `set` and `remove` methods that actually allow one to retrieve, update, and remove attached values.\r\n\r\n`AttachmentType`s should be stored in `static final` variables, and created using one of the `for*` constructors by passing an identifier, the attachment class, and optionally a serializer:\r\n```java\r\npublic interface AttachmentType<A, T> {\r\n\tstatic <A> AttachmentType<A, BlockEntity> forBlockEntity(Identifier identifier, Class<A> attachmentClass, @Nullable AttachmentSerializer<A, ? super BlockEntity> serializer) { ... }\r\n\tstatic <A> AttachmentType<A, WorldChunk> forChunk(Identifier identifier, Class<A> attachmentClass, @Nullable AttachmentSerializer<A, ? super WorldChunk> serializer) { }\r\n\t// etc...\r\n```\r\n\r\n### Serialization\r\nAttachments types may be registered with an `AttachmentSerializer<A, T>` if they wish to be persisted to NBT. The signature is self-explanatory, and there is also a helper to create a serializer from a DFU Codec:\r\n```java\r\npublic interface AttachmentSerializer<A, T> {\r\n\t/**\r\n\t * Serialize the value to a new NBT compound.\r\n\t * If {@code null} is returned, the value will not be saved at all.\r\n\t *\r\n\t * @param value The current value of the attachment. Never {@code null}.\r\n\t * @return The serialized attachment, or {@code null} if nothing should be saved.\r\n\t */\r\n\t@Nullable\r\n\tNbtCompound toNbt(A value);\r\n\r\n\t/**\r\n\t * Create a new instance from an NBT compound previously created by {@link #toNbt}.\r\n\t * If {@code null} is returned, the instance will not be placed in the attachment target.\r\n\t *\r\n\t * @param target The target of this attachment. This can be used to capture a reference (for example to a host entity).\r\n\t * @param nbt The nbt data of this attachment. Never {@code null}.\r\n\t * @return The deserialized attachment, or {@code null} if no attachment should be loaded.\r\n\t */\r\n\t@Nullable\r\n\tA fromNbt(T target, NbtCompound nbt);\r\n```\r\n\r\n## API usage example\r\n### Using a mutable type\r\n```java\r\nclass ManaContainer {\r\n    int mana = 0;\r\n}\r\n\r\npublic static final AttachmentType<ManaContainer, Entity> MANA_CONTAINER = AttachmentType.forEntity(\r\n    new Identifier(\"mymod:mana_container\"), // identifier for serialization\r\n    ManaContainer.class, // class for type safety\r\n    /* serializer, omitted here */ // or null if the attachment should not be serialized\r\n);\r\n\r\nPlayerEntity player = ...;\r\n// Query\r\nManaContainer maybeContainer = MANA_CONTAINER.get(player);\r\n// Increment mana\r\nMANA_CONTAINER.computeIfAbsent(player, player -> new ManaContainer()).mana++;\r\n// Remove\r\nMANA_CONTAINER.remove(player);\r\n\r\n// Entities are always persisted, so no markDirty call is needed.\r\n```\r\n\r\n### Using an immutable type\r\n```java\r\npublic static final AttachmentType<Integer, Entity> MANA = AttachmentType.forEntity(\r\n    new Identifier(\"mymod:mana\"), // identifier for serialization\r\n    Integer.class, // class for type safety\r\n    AttachmentSerializer.fromCodec(Codec.INT) // codec-based serializers are very easy to obtain\r\n);\r\n\r\nPlayerEntity player = ...;\r\n// Query\r\nint currentMana = Objects.requireNonNullElse(MANA.get(player), 0);\r\n// Increment mana\r\nMANA.set(player, Objects.requireNonNullElse(MANA.get(player), 0) + 1);\r\n// Remove\r\nMANA.remove(player);\r\n```\r\n\r\n## TODO\r\n- [x] Figure out why chunk attachments are not properly persisted?\r\n- [ ] Make this API experimental (remember to change in the FMJ).\r\n- [ ] Split networking javadoc fix to other PR.\r\n- [ ] Mark internal classes as `@ApiStatus.Internal`.\r\n- [ ] More utility methods in `AttachmentType`?\r\n- [ ] Check that entities do indeed always get saved.\r\n- [ ] Decide whether using `fabric:value` in `AttachmentSerializer.fromCodec` for codecs that don't result in an NbtCompound is acceptable.",
    "head_branch": "data-attachment",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307420ac82a74541b220c",
    "number": 2171,
    "body": "Move deprecated modules to a sub directory.\r\nRemove deprecated modules from the default maven pom\r\nCreate a new \"fabric-api-deprecated\" bom with the deprecated modules.\r\nUpdates loom and gradle.\r\nMove to spotless for license header checks.\r\n\r\nDevelopers that wish to depend on the deprecated modules will need to use \r\n\r\n```gradle\r\nmodImplementation \"net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}\"\r\n```\r\n\r\nShould this be backported to 1.18? or just stick to beign for 1.19?\r\n\r\nEdit: Tested works as expected.",
    "head_branch": "deprecated_sub_dir",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Move deprecated modules, create own maven BOM for the deprecated modules. (#2171)\n\n* Move deprecated modules to a sub directory.\r\nRemove deprecated modules from the default maven pom\r\nCreate a new \"fabric-api-legacy\" bom with the deprecated modules.\r\n\r\n* Fix main \"fabric\" project not beign a dep for the legacy bom.\r\n\r\n* rename artifact to fabric-api-deprecated\r\n\r\n* Spotless\r\n\r\n* Use the latest version of spotless."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307430ac82a74541b220d",
    "number": 2170,
    "body": "add language file",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307440ac82a74541b220e",
    "number": 2169,
    "body": null,
    "head_branch": "1_19-tag-update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update conventional tags to 22w17a (#2169)\n\nMake all tags have same line endings"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307450ac82a74541b220f",
    "number": 2166,
    "body": "Fixes #2153 \r\n\r\nThe mixin is unnecessary since 22w15a because vanilla code now does the exact same thing.",
    "head_branch": "remove-bedblock-mixin",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove BedBlockMixin (#2166)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307460ac82a74541b2210",
    "number": 2163,
    "body": "Hey!\r\n\r\nThe PR changes `StructureTestUtilMixin` to allow a fallback to the vanilla structure loading for gametests. The fallback will only happen if the structure defined through `@GameTest` was not found in `gametest/structures/*.snbt`, to ensure old tests are still working. \r\n\r\nReminder what the fallback is: Using the structure manager from the level to find the `.nbt` structure. If this is not possible, it will take a look at `gameteststructures` in the root directory from the minecraft instance. \r\n\r\nTwo reasons for this change: \r\n- Use already existing structures without the need to convert them into additional `.snbt` files. Also helpful for mods with custom structures.\r\n- In a multiloader project it helps to use one structure format for everything as the default behavior is to load from the structure manager. ",
    "head_branch": "1.18.2-vanilla-structure-fallback",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307460ac82a74541b2211",
    "number": 2157,
    "body": "Supersedes #1462. Resolves #1422.\r\n\r\nThis PR makes mods be shown in a tree view in crash reports. The main purpose of this issue/PR was to prevent mods called `fabric-something` to be confused within fabric API modules (and therefore considered as not the cause).\r\n\r\nUses the containing/container mod API from Fabric loader 0.13+.\r\n\r\nSupports mods contained by contained mods, with any depth.\r\n\r\n<details>\r\n<summary>Example result</summary>\r\n\r\n```\r\n\tFabric Mods: \r\n\t\tcanvas: 1.0.2282\r\n\t\t\tblue_endless_jankson: 1.2.1\r\n\t\t\tcloth-config: 6.1.48\r\n\t\t\t\tcloth-basic-math: 0.6.0\r\n\t\t\tfabric-api-base: 0.4.1+b4f4f6cdc8\r\n\t\t\tfabric-key-binding-api-v1: 1.0.8+c8aba2f3c8\r\n\t\t\tfabric-lifecycle-events-v1: 1.4.10+c15ca335c8\r\n\t\t\tfabric-resource-loader-v0: 0.4.11+3ac43d95c8\r\n\t\t\tio_vram_bitraster: 1.5.53\r\n\t\t\tio_vram_dtklib: 1.0.3\r\n\t\t\tio_vram_special-circumstances: 1.10.7\r\n\t\t\tjson-model-extensions: 1.22.243\r\n\t\t\t\tfrex: 6.0.236\r\n\t\t\t\t\tio_vram_bitkit: 1.0.1\r\n\t\t\torg_anarres_jcpp: 1.4.14\r\n\t\tcarpet: 1.4.56\r\n\t\tdynamicfps: 1.2.1\r\n\t\tfabric: 0.45.0+1.18\r\n\t\t\tfabric-api-lookup-api-v1: 1.5.0+17be577f65\r\n\t\t\tfabric-biome-api-v1: 6.0.1+ded849a965\r\n\t\t\tfabric-blockrenderlayer-v1: 1.1.9+3ac43d9565\r\n\t\t\tfabric-command-api-v1: 1.1.6+3ac43d9565\r\n\t\t\tfabric-commands-v0: 0.2.5+b4f4f6cd65\r\n\t\t\tfabric-containers-v0: 0.1.18+d154e2c665\r\n\t\t\tfabric-content-registries-v0: 0.4.5+6f53a73d65\r\n\t\t\tfabric-dimensions-v1: 2.1.7+43d2957165\r\n\t\t\tfabric-entity-events-v1: 1.4.5+6b21378a65\r\n\t\t\tfabric-events-interaction-v0: 0.4.16+bfa23f1765\r\n\t\t\tfabric-events-lifecycle-v0: 0.2.6+b4f4f6cd65\r\n\t\t\tfabric-game-rule-api-v1: 1.0.10+3ac43d9565\r\n\t\t\tfabric-item-api-v1: 1.3.0+691a79b565\r\n\t\t\tfabric-item-groups-v0: 0.3.3+3ac43d9565\r\n\t\t\tfabric-keybindings-v0: 0.2.6+b4f4f6cd65\r\n\t\t\tfabric-loot-tables-v1: 1.0.8+3ac43d9565\r\n\t\t\tfabric-mining-level-api-v1: 1.0.3+3ac43d9565\r\n\t\t\tfabric-mining-levels-v0: 0.1.7+b4f4f6cd65\r\n\t\t\tfabric-models-v0: 0.3.3+3ac43d9565\r\n\t\t\tfabric-networking-api-v1: 1.0.18+3ac43d9565\r\n\t\t\tfabric-networking-v0: 0.3.5+b4f4f6cd65\r\n\t\t\tfabric-object-builder-api-v1: 1.11.0+3b82842e65\r\n\t\t\tfabric-object-builders-v0: 0.7.8+3ac43d9565\r\n\t\t\tfabric-particles-v1: 0.2.9+526dc1ac65\r\n\t\t\tfabric-registry-sync-v0: 0.8.6+533be9ba65\r\n\t\t\tfabric-renderer-api-v1: 0.4.9+3ac43d9565\r\n\t\t\tfabric-renderer-indigo: 0.4.12+3ac43d9565\r\n\t\t\tfabric-renderer-registries-v1: 3.2.7+b4f4f6cd65\r\n\t\t\tfabric-rendering-data-attachment-v1: 0.3.4+7242e9d765\r\n\t\t\tfabric-rendering-fluids-v1: 0.1.18+3ac43d9565\r\n\t\t\tfabric-rendering-v0: 1.1.9+b4f4f6cd65\r\n\t\t\tfabric-rendering-v1: 1.10.3+6b21378a65\r\n\t\t\tfabric-screen-api-v1: 1.0.7+3ac43d9565\r\n\t\t\tfabric-screen-handler-api-v1: 1.1.11+3ac43d9565\r\n\t\t\tfabric-structure-api-v1: 2.0.8+295197a765\r\n\t\t\tfabric-tag-extensions-v0: 1.2.5+3ac43d9565\r\n\t\t\tfabric-textures-v0: 1.0.9+3ac43d9565\r\n\t\t\tfabric-tool-attribute-api-v1: 1.3.4+7de09f5565\r\n\t\t\tfabric-transfer-api-v1: 1.5.6+b4f4f6cd65\r\n\t\tfabric-crash-report-info-v1: 0.1.11+nogit\r\n\t\tfabricloader: 0.13.3\r\n\t\tfastopenlinksandfolders: 1.0.1\r\n\t\tforgetmechunk: 1.18.X-1.0.3\r\n\t\tjava: 17\r\n\t\tlazydfu: 0.1.1\r\n\t\tlithium: 0.7.7\r\n\t\tminecraft: 1.18.1\r\n\t\tphosphor: 0.8.1\r\n```\r\n\r\n</details>",
    "head_branch": "tree-mods",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make `crash-report-info` print mods in a tree form (#2157)\n\n* Make `crash-report-info` print mods in a tree form\r\n\r\n* Bump required loader version\r\n\r\n* Add mods to a list and sort instead of using a TreeSet\r\n\r\n* Remove the `:` between id and version and change style in loop"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307470ac82a74541b2212",
    "number": 2154,
    "body": "List of changes:\r\n- Add TAW for `BlockEntityType.BlockEntityFactory`, which allows using vanilla's builder. **`FabricBlockEntityTypeBuilder` is kept without deprecation (for now).**\r\n- Deprecate `VillagerProfessionBuilder` and replace it by a TAW for the constructor of `VillagerProfession`.\r\n- Deprecate `VillagerTypeHelper` and replace it by TAWs for the constructor of `VillagerType` and the static map `VillagerType.BIOME_TO_TYPE`.\r\n- Add a TAW for `SimpleInventory.stacks` because it is so useful when working with the transfer API.\r\n\r\nNote that the testmods from other modules are still using the deprecated `FabricBlockEntityTypeBuilder` because TAWs from other modules are not visible to them.",
    "head_branch": "object-builders-to-taws",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Move a few object builders to transitive AWs (#2154)\n\n* Move a few object builders to transitive AWs\r\n\r\n* Remove outdated access widener\r\n\r\n* Remove controversial deprecation of FabricBlockEntityTypeBuilder"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307480ac82a74541b2213",
    "number": 2149,
    "body": "This compiles but doesnt quite run due to some changes in the `ChunkBuilder`\r\n\r\nhttps://github.com/FabricMC/fabric/blob/1.18.2/fabric-renderer-indigo/src/main/java/net/fabricmc/fabric/mixin/client/indigo/renderer/MixinChunkRenderData.java#L31-L32 was removed, need to work on a solution.",
    "head_branch": "22w16b",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "22w16b\n\nCo-authored-by: Player <player@player.to>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307490ac82a74541b2214",
    "number": 2147,
    "body": "Fixes #2146.",
    "head_branch": "fix-2146",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #c:brown_dyes containing purple dye instead of brown (#2147)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623074a0ac82a74541b2215",
    "number": 2142,
    "body": "This makes them consistent with the name format used in Minecraft and other `c` tags like `c:copper_ingots`. (This breaks two conventions: plural instead of singular and suffix instead of directory).\r\n\r\nEdit: I created plural-named fields (`WATER_BUCKETS` etc) and deprecated the old ones, as well as moved them down in the source file.",
    "head_branch": "fix-bucket-tag-ids",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix convention bucket tag ID format (#2142)\n\n* Fix convention bucket tag ID format\r\n\r\n* Create plural fields, deprecate singular fields"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623074a0ac82a74541b2216",
    "number": 2141,
    "body": "![](https://s.modm.us/idea64_yrr6CK5jaO.png)\r\n\r\nBefore this change gradle/CI would pass the build when the data generator failed. This fixes that, and adds some infomation about the mod causing the issues.",
    "head_branch": "data_gen_failiure",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix datagen failures not exiting with a none zero exit code. (#2141)\n\n* Fix datagen failures not exiting with a none zero exit code.\r\n\r\n* Checkstyle :)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623074b0ac82a74541b2217",
    "number": 2139,
    "body": "This PR aims to improve the transfer API after feedback from practical use.\r\n\r\nSince the transfer API is experimental, we reserve the right to make breaking changes. However, many mods rely on the transfer API staying stable, and it would be insane to break them at this stage. That's why this PR is only targeted at 1.19: I expect most mods to have to update already, so while these changes are going to be inconvenient, at least we won't break the ecosystem mid-release. The idea is for this PR to be merged before the first 1.19 pre-release drops.\r\n\r\nThis also means that the transfer API likely won't be stabilized before 1.20, as we might want to do another round of breaking changes in the 1.19 to 1.20 update.\r\n\r\n_Note to maintainers_: The transfer API version should be bumped to `2.0.0` after this PR is merged.\r\n\r\n## Changes\r\n### Remove deprecated APIs\r\nSelf-explanatory. Cleanup of existing deprecated APIs. Since there might be many more iterations of the transfer API, we shouldn't let these clutter the place.\r\n\r\n### Remove the transaction requirement for storage iterator\r\nIt turns out that the transaction parameter doesn't seem useful in practice (the use case it was intended for can be done in other ways). Removing the parameter makes the API less akward, since `Storage<T>` now implements `Iterable<StorageView<T>>`. The `iterator(TransactionContext)` and `iterable(TransactionContext)` are removed.\r\nIteration is now easier: `for (StorageView<T> view : storage) {` instead of `for (StorageView<T> view : storage.iterable(transaction)) {`\r\nFixes #2003.\r\n\r\n### Allow client-side API queries for existence checks\r\nTo check whether a block exposes a `Storage` on the client-side, for example to decide if a block might be supported or if the player hand should swing, it's often a lot easier to perform a `find(...) != null` check on the client, even if it might be incorrect in some edge cases, than to perform the query on the server and wait for its response.\r\n\r\nHence, querying storages on the client-side is now allowed for existence checks, however it should be noted that their contents are unreliable.\r\n\r\n### (Not breaking) Introduce `SidedStorageBlockEntity` for easier Storage registration\r\nMany mods already roll their own similar interface, so we make it easier for them by providing a straightforward helper.\r\n\r\n### (Not breaking) Improve SnapshotParticipant javadoc\r\nHopefully this makes `SnapshotParticipant` a little bit easier to understand.",
    "head_branch": "transfer-api-v2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Transfer API improvements and breaking changes for 1.19 (#2139)\n\n* Remove deprecated APIs\r\n\r\n* Remove the transaction requirement for storage iteration\r\n\r\n* Remove useless TransactionContext parameters in StorageUtil\r\n\r\n* Improve SnapshotParticipant javadoc\r\n\r\n* Fix tests\r\n\r\n* Allow client-side SIDED item/fluid storage queries with a few caveats\r\n\r\n* Add SidedStorageBlockEntity for easier block entity hierarchy registration"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623074c0ac82a74541b2218",
    "number": 2129,
    "body": "Vanilla never adds an AttributeModifier for ArmorMaterial.getKnockbackResistance() unless the ArmorMaterial is NETHERITE.\r\nThis PR changes that. Any ArmorMaterial that returns > 0.0F from getKnockbackResistance() will cause ArmorItem to add an AttributeModifier for knockback resistance.\r\n\r\nI am proposing this for inclusion in fabric-item-api-v1 as armour is a common mod addition, and the required mixin is non-trivial.\r\n\r\nThere are several other ways the mixin could have been written, but I believe the ModifyVariable is clear, simple, and maintainable. The options are as follows:\r\n* `@Inject` at `TAIL`, copy the entries of `ArmorItem.attributeModifiers` into a new builder, add the knockback resistance modifier if necessary, then build and assign the value to `ArmorItem.attributeModifiers`. This works, but there are easy alternatives that avoid copying.\r\n* `@Inject` at a point where the `builder` local is available, use local capture, and add the knockback resistance modifier if necessary. Avoids copying, but local capture is fragile.\r\n* `@Redirect` the read of `ArmorMaterials.NETHERITE` like so\r\n  ```java\r\n  @Redirect(method = \"<init>\", at = @At(value = \"FIELD\", target = \"Lnet/minecraft/item/ArmorMaterials;NETHERITE:Lnet/minecraft/item/ArmorMaterial;\")) \r\n  private ArmorMaterial fabric_knockbackResistance(ArmorMaterial material)                                                                           \r\n  {                                                                                                                                                   \r\n      return knockbackResistance > 0.0F ? ArmorMaterials.NETHERITE : material;                                                                        \r\n  }                                                                                                                                                   \r\n  ```\r\n  This is very short, but it isn't easily understandable. If Mojang ever adds other effects to the if statement, it would cause those to be applied to armors with knockback resistance too.\r\n* `@ModifyVariable` the `builder` local to get access to it, then add the knockback resistance modifier if necessary. This avoids copying, it's clear what it does, and it's less sensitive to changes in the LVT than a local capturing `@Inject`.\r\n",
    "head_branch": "armor_kb_resist",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make getKnockbackResistance() work for all materials (#2129)\n\n* Make getKnockbackResistance() work for all materials\r\n\r\n* Add missing license to ArmorItemMixin.java\r\n\r\n* Fix all build failures\r\n\r\n* Document ArmorItemMixin"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623074d0ac82a74541b2219",
    "number": 2119,
    "body": "Same as #1984, I changed the branch's name and github automatically closed the previous PR. Sorry about that 😅 ",
    "head_branch": "1.18.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #1947, #1873: FabricBlockSettings#copy does not copy all settings, the sequel (#2119)\n\n* Fix FabricMC#1947, FabricMC#1873\r\n\r\n* Ordered import to follow checkstyle\r\n\r\n* Removed broken 1.18 code on 1.18.2 branch\r\n\r\n* Added note specyfing that FabricBlockSettings copies settings Block.Settings doesn't."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623074e0ac82a74541b221a",
    "number": 2116,
    "body": "```\r\n@Inject(@At(\"INVOKE\")) Shift.BY=3 on fabric-lifecycle-events-v1.mixins.json:client.WorldChunkMixin::handler$zkc000$onLoadBlockEntity exceeds the maximum allowed value: 0. Increase the value of maxShiftBy to suppress this warning.\r\n```\r\n\r\nremoves this warning from launch",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "remove annoying warning shift BY (#2116)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623074e0ac82a74541b221b",
    "number": 2112,
    "body": "Links to #2111 \r\n\r\nThis small callback adds EndDynamicRegistrySetupCallback\r\nIf you are trying to mess with multiple dynamic registries, the safest place is after all of them have loaded. \r\n\r\nI guess you can discuss whether this is necessary?\r\nBut to be more precise, this is to facilitate a variety of use cases, such as letting people do something similar to #1540, which sadly was deleted in 1.18. Due to the increasing weirdness of dynamic registries, this implementation doesn't work unless it wants to get really bloated and unnecessary, which would not fit in fabric api.\r\n\r\nBut I am sure this event will be useful for other use cases.\r\n\r\nThere is also the case of the name, which I am still unsure of. ",
    "head_branch": "1.18.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623074f0ac82a74541b221c",
    "number": 2110,
    "body": "- Fix `QuadView#copyTo` not copying enough data\r\n  - The specification (Javadoc) says that this method copies everything except for the material. In reality, it was copying everything except the header bits, which include the cull face, light face, normal set flags, geometry flags, and material, and then marking the target quad's geometry as valid. This did not make sense as the quad data which includes vertex positions was replaced but the header bits which include the geometry were not.\r\n- Refactor `ItemRenderContext`\r\n  - Fix enchantment glint not rendering on item models rendered with this context\r\n  - Make vertex consumer calculation mirror vanilla\r\n  - Improve vertex consumer caching\r\n  - Restructure quad rendering to be more efficient and consistent with block rendering\r\n- Remove unnecessary code including `CompatibilityHelper`\r\n- Add `@Unique` annotations to fields added by Indigo\r\n- Fix typos\r\n- Organize imports\r\n\r\nI have tested these changes with Continuity, a mod that heavily utilizes the renderer API, and did not notice any new issues.",
    "head_branch": "1.18.2-modernize-indigo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Modernize Indigo (#2110)\n\n* Modernize Indigo\r\n\r\n- Restructure ItemRenderContext to be more efficient and consistent with block rendering\r\n- Remove unnecessary code including CompatibilityHelper\r\n- Add Unique annotations to fields added by Indigo\r\n- Fix typos\r\n- Organize imports\r\n\r\n* Remove unused import\r\n\r\n* Fix bugs\r\n\r\n- Fix enchantment glint not rendering on item models\r\n- Fix QuadView#copyTo not copying enough data\r\n- Make ItemRenderContext vertex consumer calculation mirror vanilla and be more efficient\r\n\r\n* Clear the target quad's material\r\n\r\n* Tweaks\r\n\r\n- Retain material during copyTo instead of clearing it\r\n- Standardize mixins\r\n\r\n* Direct return\r\n\r\n- Return from ItemRenderContext#quadVertexConsumer instead of assigning value to variable"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662307500ac82a74541b221d",
    "number": 2104,
    "body": "## Changes\r\n- Moved `ExtendedScreenHandlerType` to the API and remove its `final` modifier\r\n  - Creating ESHTs directly matches how \"simple\" screen handler types should be created now that there's a TAW for it\r\n    **=> prevents users' confusion**\r\n  - Allowing direct creation is also good for multiplatform (Fabric+Forge) projects where you can handle registering and creation very nicely if they're split to be two different things\r\n  - Added documentation\r\n  - It now accepts `ExtendedScreenHandlerType.ExtendedFactory` instead of `ScreenHandlerRegistry.ExtendedClientHandlerFactory` though the interface itself is exactly the same (the latter extends the former now)\r\n- Deprecated `ScreenHandlerRegistry` completely as the creation is now exposed in other ways and registering has always been available in vanilla\r\n- Removed `@Environment(EnvType.CLIENT)` from screen handler factories' `create` methods. This matches vanilla in newer versions where there aren't any specific client-only *members* in otherwise shared classes.\r\n- Expanded the package JD with documentation from `ScreenHandlerRegistry` and new docs as well.\r\n\r\n## Motivation\r\n- Simplifies registration in mods like Adorn: [see this change](https://github.com/Juuxel/Adorn/commit/fd36247e2545df7fc7fc88759f5570eee8deb4be)\r\n- Some mods, including the quite popular Architectury API as well as Create Fabric, currently have to either mixin to `Registry` to disable registration or use the current implementation class `ExtendedScreenHandlerType`. This cleans up those use cases.",
    "head_branch": "public-screen-handler-creation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Expose extended screen handler type creation in SH API (#2104)\n\n* Expose extended screen handler type creation in SH API\r\n\r\n* Update SHAPI test mod to use non-deprecated API"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307510ac82a74541b221e",
    "number": 2102,
    "body": "This PR propose an implementation of #1999 by injecting the `getFabricBucketEmptySound()` method into the Fluid class to get the bucket emptying sound.  \r\nThis is implemented into the transfer api.",
    "head_branch": "bucket-emptying-sound-method",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307520ac82a74541b221f",
    "number": 2101,
    "body": "### Scope of the PR\r\n\r\nUpdate the `FluidRenderHandler` by including a `FluidFogHandler` to customize the fog rendered when the player camera is inside the fluid.",
    "head_branch": "rendering-fluids-fog",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307520ac82a74541b2220",
    "number": 2100,
    "body": "I have a use case for this in MI to datagen block tags based on an integer mining level.",
    "head_branch": "mining-level-to-tag",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add MiningLevelManager#getBlockTag (#2100)\n\n* Add MiningLevelManager#getBlockTag\r\n\r\n* Update fabric-mining-level-api-v1/src/main/java/net/fabricmc/fabric/api/mininglevel/v1/MiningLevelManager.java\r\n\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>\r\n\r\n* Update comment\r\n\r\n* Update fabric-mining-level-api-v1/src/main/java/net/fabricmc/fabric/api/mininglevel/v1/MiningLevelManager.java\r\n\r\nCo-authored-by: haykam821 <24855774+haykam821@users.noreply.github.com>\r\n\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>\r\nCo-authored-by: haykam821 <24855774+haykam821@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307530ac82a74541b2221",
    "number": 2099,
    "body": "Not the cleanest, but it should be acceptable. See also this comment from the PR:\r\n```java\r\n/**\r\n * Stores the tags deserialized by {@link TagManagerLoader} before they are bound, to use them in the tags_populated conditions.\r\n * The tags are set at the end of the \"apply\" phase in {@link TagManagerLoader}, and cleared in {@link net.minecraft.server.DataPackContents#refresh}.\r\n * If the resource reload fails, the thread local is not cleared and:\r\n * - the map will remain in memory until the next reload;\r\n * - any call to {@link #tagsPopulatedMatch} will check the tags from the failed reload instead of failing directly.\r\n * This is probably acceptable.\r\n */\r\n```\r\n\r\nAlso includes a commit by @deirn that moves the gametest entrypoint further up. This prevents loading resources twice, and would have caused the existing tags_populated test to fail, as it should have.",
    "head_branch": "fix-tags-populated",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix tags_populated resource conditions in 1.18.2 (#2099)\n\n* Fix tags_populated resource conditions\r\n\r\n* move gametest entrypoint further up before resource manager getting loaded\r\n\r\n* Add maxShiftBy\r\n\r\nCo-authored-by: deirn <deirn@bai.lol>\r\nCo-authored-by: modmuss50 <modmuss50@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307540ac82a74541b2222",
    "number": 2098,
    "body": "This changes the semantics of `PlayerInventoryStorage#drop` from summoning the item at the player's coord to _throwing_ the item (like when you press `q`) as that's what `PlayerInventory#offerOrDrop` do. Also adds methods that accept `dropItem` arguments.",
    "head_branch": "actually-throw",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Change `PlayerInventoryStorage#drop` to use `PlayerEntity#dropItem` (#2098)\n\n* change `PlayerInventoryStorage#drop` to use `PlayerEntity#dropItem`\r\n\r\n* at -> from\r\n\r\n* remainder"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307550ac82a74541b2223",
    "number": 2095,
    "body": "This PR introduces fluid variant attributes, that can be useful in a variety of situations for mods using the transfer API.\r\n\r\nThe new `FluidVariantAttributeHandler` and `FluidVariantAttributes` are designed similarly to the existing `FluidVariantRenderHandler` and `FluidVariantRendering` classes, but they are also available on the server.\r\n\r\nI propose the following attributes:\r\n- `getName` and `isLighterThanAir`, replacing the existing rendering `getName` and `fillsFromTop`, making these two also available on the server.\r\n- `getFillSound`, `getEmptySound`, and `getLuminance`: self-explanatory.\r\n- `getTemperature`, `getViscosity`: these are somewhat arbitrary, but they can be useful I think. These and their default values are copied from Forge.\r\n\r\nThere has been some discussion around allowing an arbitrary number of attributes, for example with `AttributeKey<T>` and `<T> T getAttribute(AttributeKey<T>)`, but imo it is unnecessary.",
    "head_branch": "fluid-properties",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add common (client/server) FluidVariant attributes (#2095)\n\n* Add common (client/server) FluidVariant properties\r\n\r\n* Remove density, move constants to FluidConstants, javadoc\r\n\r\n* Javadoc, downgrade exception to LOGGER.warn\r\n\r\n* attributes -> properties\r\n\r\n* Property -> attribute\r\n\r\n* Apply reviews\r\n\r\n* Use optional sounds, mix into BucketItem\r\n\r\n* Automatically implement Fluid#getBucketFillSound from the attribute\r\n\r\n* Update fabric-transfer-api-v1/src/main/java/net/fabricmc/fabric/api/transfer/v1/fluid/FluidConstants.java\r\n\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>\r\n\r\n* Tests, a few fixes\r\n\r\n* Add gametest for viscosity, isLighterThanAir -> flowsUpwards\r\n\r\n* flowsUpwards -> isLighterThanAir\r\n\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307560ac82a74541b2224",
    "number": 2094,
    "body": "Tooltip when hovering over item group buttons is off by one if the amount of item groups is a multiple of 9 (= the last page is full).\r\n<img width=\"966\" alt=\"image\" src=\"https://user-images.githubusercontent.com/13403842/159772858-e59433f0-7030-4a51-96f9-7031bc06d0ea.png\">",
    "head_branch": "itemgroup-off-by-one",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix off-by-one error in item group tooltip (#2094)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307560ac82a74541b2225",
    "number": 2092,
    "body": "Fixes #2091.",
    "head_branch": "fix-2091",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #2091: multiple mods adding to the same tag not working"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307570ac82a74541b2226",
    "number": 2090,
    "body": "Adds an ItemStack-aware version of `Item#getAttributeModifiers(EquipmentSlot slot)` to `FabricItem`. This functionality used to be available until 1.18.1 as `DynamicAttributeTool#getDynamicModifiers(EquipmentSlot slot, ItemStack stack, @Nullable LivingEntity user)`. I have decided to leave the `@Nullable LivingEntity user` out since:\r\n- due to the way the attribute modifiers are cached and updated, wearer-dependent modifiers are easy to get wrong;\r\n- if absolutely necessary, it is possible to retrieve it by iterating over all current entities, and comparing item stacks with `==`.\r\n\r\nAlso adds an ItemStack-aware version of `Item#isSuitableFor(BlockState state)`. Together with the previous item, these should be a full replacement for the old dynamic tool API. The testmod shows a dynamic item.\r\n\r\nAlso implements interface injection for `FabricItem`.",
    "head_branch": "stack-aware-attribute-modifiers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add stack-aware getAttributeModifiers and isSuitableFor to FabricItem (#2090)\n\n* Add stack-aware getAttributeModifiers to FabricItem\r\n\r\n* Add stack-aware version of isSuitableFor\r\n\r\n* Use the standard attack damage UUID"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307580ac82a74541b2227",
    "number": 2088,
    "body": "Different to https://github.com/FabricMC/fabric/pull/2078  this PR use another way to fix this issue.\r\nIt makes dimension deserialization fail-soft and purge the invalid registry entries to prevent failing registry freeze.\r\n\r\nAs I tested, it can fix the issue of unloading dimension datapacks. But I didn't tested the DFU issue. It may still fail when DFU cannot recognize custom dimensions.\r\nThe old PR https://github.com/FabricMC/fabric/pull/2078 does not have any issue from DFU. This PR may have more potential issues than the old PR.\r\n\r\nThis PR maintains the (probably unwanted) vanilla behavior: if you have a simple dimension datapack that does not define its own things, then its dimension cannot be removed from the world.\r\n\r\nThe mod https://www.curseforge.com/minecraft/mc-mods/dimension-fix-some-forge-patches-ported is similar to this PR",
    "head_branch": "dim-fix2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307590ac82a74541b2228",
    "number": 2086,
    "body": "List of changes:\r\n- [x] **(Slightly source-breaking change)** Change the return type of `Storage#iterator` and `Storage#iterable` from `Iterator<StorageView<T>>` to `Iterator<? extends StorageView<T>>` to allow returning a list directly. Most modders shouldn't be affected by this (this only broke one call site in the whole module).\r\n- [x] Precise that using the iterator or a view after the transaction is closed is \"undefined behavior\". Also specify that calling remove on the iterator is not allowed.\r\n- [x] Add `StorageView#getUnderlyingView` to be able to tell if some views are equal. This is useful to **compute the contents of multiple storage views without duplicates** (see testmod).\r\n- [x] Expose the lifecycle of the transaction manager cleanly with an enum.\r\n- [x] Definalize some methods in `SingleStackStorage` to allow custom implementations of some of them if needed.\r\n- [x] Add a note to `BlockApiLookup` to fix #1998.\r\n- [x] Play the composter empty sound when it is emptied through the transfer API, as a comment in the source code suggests.",
    "head_branch": "transfer-api-improvements-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623075a0ac82a74541b2229",
    "number": 2085,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make @see refer to the right class (#2085)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623075a0ac82a74541b222a",
    "number": 2083,
    "body": "There are two ways to go about this, keep a part of v1 and otherwise migrate to v2 or update v1 directly. The command-api-v1 module will receive a major version bump either way.\r\n\r\noption 1 with partial legacy bridging - full PR\r\n\r\ncommand api v1 loses its client command part (not bridging friendly enough) and forwards the server command event to v2\r\ncommand api v2 is a copy of v1 with the new register signature\r\neverything has been adjusted to use v2\r\n\r\noption 2 without bridging - only the first commit",
    "head_branch": "1.19",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623075b0ac82a74541b222b",
    "number": 2082,
    "body": "Updates the Modrinth plugin from v1.1.0 to v2.1.1, re: [migration guide on the wiki](https://fabricmc.net/wiki/tutorial:minotaur#updating_from_minotaur_1x_to_2x)\r\n\r\n[Minotaur's changelog is here](https://github.com/modrinth/minotaur/compare/v1.1.0...v2.1.1) if you're curious, main changes were moving to an extension and the removal of `addLoader` and `addGameVersion`.\r\n\r\nGame version, loader, project version, and token are automatically detected. You may have to bump the Minotaur version too if Loom makes breaking changes to the way that Minotaur [finds the Minecraft dependency](https://github.com/modrinth/minotaur/blob/3f4f065ba8d041497a9e26268acd64858c736ff8/src/main/java/com/modrinth/minotaur/compat/FabricLoomCompatibility.java#L11-L18), but I saw that pinning specific versions was preferred rather than using the latest version like Modrinth recommends.\r\n\r\nTested to work well [on staging](https://staging.modrinth.com/mod/freeeedom/version/0.48.0+local-update-minotaur).\r\n\r\n",
    "head_branch": "update-minotaur",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update Modrinth plugin version (#2082)\n\n* Update Modrinth plugin version from 1.1.0 to 2.4.3\r\n\r\n* Fix checkVersion task"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623075c0ac82a74541b222c",
    "number": 2081,
    "body": "Fixes #2080",
    "head_branch": "fix-screen-crash",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix 22w11a crash due to invalid signature"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623075d0ac82a74541b222d",
    "number": 2078,
    "body": "Minecraft stores custom dimension chunk generators in `level.dat`. To deserialize the chunk generator, it reads the registries (biome registry, chunk generator codec registry, etc.). After uninstalling a dimension mod or a dimension datapack, it fails to deserialize the custom dimensions. And Minecraft cannot load the world. (In 1.18.2, clicking the \"Safe mode\" button has no effect.)\r\n\r\nThis is important because uninstalling a dimension mod should be an allowed operation. Forge already contains the fix to this issue. It's easy to fix this issue by removing non-vanilla dimensions from the NBT tag before feeding into DFU and the deserializer. The custom dimensions will be re-added later.\r\n\r\nIn vanilla, if you have a simple dimension datapack that does define its own thing (for example, it only has a dimension with simple superfalt generation, and does not have any biome or noise settings), then after uninstalling that datapack, the dimension still exists. Vanilla does not give a way to remove custom dimensions. I think this is a wrong behavior. Almost no player want this behavior. After uninstalling a dimension datapack or a dimension mod, its dimension should vanish. This Mixin changes that behavior: it will make the dimensions of uninstalled datapacks vanish normally.\r\n",
    "head_branch": "dim-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix the issue of uninstalling a dimension mod or datapack (#2078)\n\n* Fix the vanilla bug of uninstalling dimensions.\r\n\r\n* fix license\r\n\r\n* fix style\r\n\r\n* Rename LevelStorageMixin and some minor changes."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623075e0ac82a74541b222e",
    "number": 2070,
    "body": "When tags are referenced in another tag's json, it is required to prefix them with `#`.\r\n\r\n`FabricTagProvider.FabricTagBuilder#addOptionalTag(net.minecraft.util.Identifier)` uses the relevant vanilla code to do so; however,\r\n`FabricTagProvider.FabricTagBuilder#addOptionalTag(net.minecraft.tag.TagKey<T>)` uses the logic for adding a non-tag id to a tag, causing the `#` to be missing from the generated jsons, and therefore tags that do not function as expected.\r\n\r\nOther versions of the API may also be affected.",
    "head_branch": "tag-gen-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix optional tag from tagkey generation (#2070)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623075f0ac82a74541b222f",
    "number": 2069,
    "body": "See #2066 ",
    "head_branch": "fix-valid-namespaces",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow dots in namespaces to match vanilla behavior (#2069)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623075f0ac82a74541b2230",
    "number": 2063,
    "body": "The addition of a common set of tags in FAPI will better server to define the conventions and make the already existing tags more discoverable for new modders.\r\n\r\nThis also serves to replace the missing tool tags that were removed in the update to 1.18.2 (snapshots). They are marked deprecated as they don't \"function\" like they did prior to 1.18.2, but are included to so that mods still using those tags can work and be added to `c:<tool>` by default.\r\n\r\nCovering all commonly mod-extended vanilla features that can have tags is the goal, but beginning with a more restricted subset to begin with may be desirable.\r\n\r\nSome open questions:\r\n- Use Fabric datagen to make the tag jsons, or is it preferable to have them as static files?\r\n- What should we have?\r\n- Do we want to expose minecraft tags in the API, or have a common tag that by default includes the minecraft tag?\r\n\r\nTodo: more tags, and javadoc\r\n\r\nMade as a draft to garner feedback about what should (not) be included and its implementation. ~~Especially before finding out everything needs to be rewritten.~~",
    "head_branch": "tag-common",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add a commons-tag-v1 (#2063)\n\n* Add framework for common-tags-v1\r\n\r\n* Add javadoc to fabric tool tags\r\n\r\n* Fix wrong package arrangement\r\n\r\n* Add some more tags\r\n\r\n* Add more biome tags\r\nThanks to TelepathicGrunt for the suggestions\r\n\r\n* Update fabric-common-tags-api-v1/src/main/java/net/fabricmc/fabric/api/tags/v1/CommonEnchantmentTags.java\r\n\r\nCo-authored-by: haykam821 <24855774+haykam821@users.noreply.github.com>\r\n\r\n* Update fabric-common-tags-api-v1/src/main/java/net/fabricmc/fabric/api/tags/v1/CommonEnchantmentTags.java\r\n\r\nCo-authored-by: haykam821 <24855774+haykam821@users.noreply.github.com>\r\n\r\n* Clarify enchantment tags\r\n\r\n* Add no-shulker tag\r\n\r\n* Add minecart tag\r\n\r\n* Begin work on datagen and populating tags\r\n\r\n* Add bucket tags\r\n\r\n* First pass at populating biome tags\r\n\r\n* Add boat tag\r\n\r\n* Fix missing inclusion of f:shears into c:shears\r\n\r\n* Hide fabric tool tags in datagen\r\n\r\n* Add weapon damage enhancement tag\r\n\r\n* Change impl package name to be inline with rest of fapi\r\n\r\n* Rename enchantment tags\r\n\r\n* Some cleanup\r\n\r\n* Populate blocktag datagen\r\nRemove crops tag\r\n\r\n* Add javadoc links to vanilla counterparts\r\n\r\n* Move datagen to its own sourceset\r\n\r\n* Fix package names for checkstyle\r\n\r\n* Populate more entries\r\n\r\n* Remove exclusion tag\r\n\r\n* Add license headers\r\nFix checkstyle\r\n\r\n* Add missing nether quarts to ores tag\r\n\r\n* Use `worldgen/biome` instead of `biomes` for biome tags\r\n\r\nCo-authored-by: haykam821 <24855774+haykam821@users.noreply.github.com>\r\n\r\n* Manually include all biomes for overworld\r\n\r\n* Remove ancient debris from NetheriteOres\r\n\r\n* Add and populate glass tags\r\n\r\n* Add and populate movement enhancement\r\n\r\n* Break up item tags\r\n\r\n* Add armour damage reduction tag\r\n\r\n* Add missing ore and related tags\r\n\r\n* Fix quartz tags\r\n\r\n* Add floral tag\r\n\r\n* Add golden carrot\r\n\r\n* Correct some biome tag issues\r\n\r\n* Separate SNOWY_PLAINS and PLAINS\r\n\r\n* Add SNOWY tag and remove snowy biomes from ICY\r\n\r\n* Correct enchantment tag\r\nRemove silk touch tag\r\n\r\n* Fix more biome issues\r\n\r\n* Add deep and shllow ocean tags\r\n\r\n* Add no-move tag\r\n\r\n* Remove netherite ores\r\n\r\n* Add shulker tags\r\n\r\n* Add raw ore\r\n\r\n* Add dye tags\r\n\r\n* Fif dye tags\r\n\r\n* Fix typo\r\n\r\n* Document some biome tags where the naming may not be clear\r\n\r\n* Remove tag mirroring for blocks and items\r\n\r\n* Rename module\r\nRemove unused methods\r\n\r\n* Rename impl package\r\n\r\n* Rename packages and module\r\n\r\n* Rename folder\r\n\r\n* Rename api classes\r\n\r\n* Add generateResources task to cover all resource generation tasks.\r\n\r\n* Add generated tags to repo\r\n\r\n* Fix ocean tag excluding shallow ocean\r\n\r\n* Iterate registry to generate foods tag\r\n\r\n* Remove cache, add to gitignore\r\n\r\n* Rename generated folder\r\n\r\nCo-authored-by: haykam821 <24855774+haykam821@users.noreply.github.com>\r\nCo-authored-by: modmuss50 <modmuss50@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662307600ac82a74541b2231",
    "number": 2062,
    "body": "Tested, seems to work now.",
    "head_branch": "jarsign",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Jar and PGP sign artifacts. (#2062)\n\n* Jar and PGP sign artifacts.\r\n\r\n* Fixes.\r\n\r\n* Update remotesign and fixes.\r\n\r\n* Update gradle.\r\n\r\n* Revert \"Update gradle.\"\r\n\r\nThis reverts commit 91b96ec2db5609202e1851ef60add2f2ea0ec118."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307610ac82a74541b2232",
    "number": 2054,
    "body": "Some testmod doesn't depend on `fabric-registry-sync-v0`, making it crashes if it registers new objects if you run it individually.\r\nThis PR will fix that for all modules by adding it into the runtime classpath. You need to explicitly use `testmodImplementation` if you want to access the API.",
    "head_branch": "reg-sync-runtime-cp",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add `fabric-registry-sync-v0` to all testmods runtime classpath (#2054)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307620ac82a74541b2233",
    "number": 2045,
    "body": "Reduce log level of \"Found reference to unknown structure\" log output, as it spams for every chunk load, causing confusion for players.",
    "head_branch": "structure_data_fix_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix a vanilla bug causing missing structures to reset chunks when upgrading a world from previous versions. (#2045)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307630ac82a74541b2234",
    "number": 2044,
    "body": "- All non-public Block constructors for non-abstract Block classes (autogenerated via ASM)\r\n- Various registries already present in Fabric API (and deprecating the now unnecessary classes/methods)\r\n- Screen handler type creation (SHAPI's \"simple\" screen handler types, to be specific)",
    "head_branch": "transitive-aw-module",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Create transitive AW module (#2044)\n\n* Add transitive AW module with block constructors\r\n\r\n* Add various registries to transitive AW module\r\n\r\n* Fix module name in README, add skip flags to class reading\r\n\r\n* Add reasons for TAWs, document Block ctor finding algorithm"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307630ac82a74541b2235",
    "number": 2043,
    "body": "Scope of the pull request:\r\n1. Update the `FluidRenderHandler` by including a `FluidFogHandler` to customize the fog rendered when the player camera is inside the fluid.\r\n2. Inject a new method `getFabricBucketEmptySound` to the `Fluid` class, to get the bucket emptying sound from the fluid itself.\r\n\r\n---\r\n\r\nCompared to the previous closed (by me) pull request https://github.com/FabricMC/fabric/pull/1894:\r\n`FabricFlowableFluid` with all the unnecessary features has been removed.\r\n`FabricFluidBlock` has been removed because is now useless.\r\nThe textures are no more auto-registered (the new usage was too tricky and could deliver unexpected side-effects).\r\nAll the other unnecessary features/utilities about fluid-matching and interactions have been removed.",
    "head_branch": "rendering-fluids-update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307640ac82a74541b2236",
    "number": 2037,
    "body": null,
    "head_branch": "debug_chuck_gen",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix MC-197259 - Modded blocks not present in debug world type. (#2037)\n\nCloses #2031\r\n\r\n* Fix MC-197259 - Modded blocks not present in debug world type.\r\n\r\n* Remove un-used method."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307650ac82a74541b2237",
    "number": 2029,
    "body": "This PR add a new module with somes AW to let modder access to register functions\r\n\r\n- [x] Villager Profession\r\n- [x] SpawnRestriction\r\n\r\nWIP",
    "head_branch": "access_module",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307660ac82a74541b2238",
    "number": 2028,
    "body": "This is an API breaking change, however the API is effectively broken/useless anyway.\r\n\r\nA quick search of the source seems to suggest this is all that was missed.",
    "head_branch": "Block2ObjectMap_tag_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Block2ObjectMap not using TagKey (#2028)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307670ac82a74541b2239",
    "number": 2024,
    "body": "Fixes a small maths error ",
    "head_branch": "1.18.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Order of operations in FabricEntityTypeBuilder (#2024)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307670ac82a74541b223a",
    "number": 2019,
    "body": "- Fixes forceAddTag not doing anything (Broke in the port)\r\n- Set the modid as the tag source\r\n- Add a few new helper methods.\r\n- General cleanup, use the vanilla method for getting the correct paths.",
    "head_branch": "tag_gen_fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Misc FabricTagProvider fixes and improvements. (#2019)\n\n* Misc tag data gen fixes.\r\n\r\n* Fix backwards compat issue."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307680ac82a74541b223b",
    "number": 2010,
    "body": "Looks like we need a new structure API, will need some more work.",
    "head_branch": "1.18.2-biomeapi",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "1.18.2-pre1 Biome API (#2010)\n\n* Fix BiomeSelectors.tag\r\n\r\n* Update fabric-biome-api-v1/src/main/java/net/fabricmc/fabric/api/biome/v1/BiomeSelectionContext.java\r\n\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>\r\n\r\n* Checkstyle\r\n\r\n* Port Biome API\r\n\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307690ac82a74541b223c",
    "number": 2009,
    "body": "This is a breaking API change, the API was effectively broken anyway so it makes sense to do this ASAP.",
    "head_branch": "lrm",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix type passed to data pack reload events. (#2009)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623076a0ac82a74541b223d",
    "number": 2001,
    "body": "This pull request fixes data pack reload events and the `/reload` command being broken:\r\n\r\n![](https://user-images.githubusercontent.com/24855774/153929167-d7154563-7ed8-4fef-82ce-72f95370b720.png)\r\n\r\nThis change matches vanilla refactors to the `serverResourceManager` field. Except for with structures, resource manager accesses have been changed to use the `managers` record component instead:\r\n\r\n```diff\r\n  public ServerAdvancementLoader getAdvancementLoader() {\r\n-  \treturn this.serverResourceManager.getServerAdvancementLoader();\r\n+ \treturn this.serverResourceManager.managers.getServerAdvancementLoader();\r\n  }\r\n```\r\n\r\nThis fix should in theory not affect mods expecting certain resources to be available from the manager, but further testing would be required.",
    "head_branch": "fix-data-pack-reload-class-cast",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix a ClassCastException being thrown when a data pack reload event is invoked (#2001)\n\n* Fix a ClassCastException being thrown when a data pack reload event is invoked\r\n\r\n* Fix Checkstyle errors"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623076b0ac82a74541b223e",
    "number": 1990,
    "body": "Thanks @Juuxel for spotting.\r\n\r\nPR as I dont plan on doing another release this evening.",
    "head_branch": "biome_tag_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623076b0ac82a74541b223f",
    "number": 1989,
    "body": "Port to 22w06a\r\n\r\nThis snapshot is possibly one of the most impactful for API we have ever had. This PR is an inital port to support 22w06a, stuff will be missing and broken. \r\n\r\n# Removed modules:\r\n- fabric-mining-levels-v0 - Previously deprecated\r\n- fabric-object-builders-v0 - Previously deprecated\r\n- fabric-tag-extensions-v0\r\n- fabric-tool-attribute-api-v1\r\n\r\n# Modules with API breaking changes:\r\n- fabric-biome-api-v1\r\n- fabric-content-registries-v0\r\n- fabric-data-generation-api-v1\r\n- fabric-mining-level-api-v1\r\n- fabric-object-builder-api-v1\r\n- fabric-resource-conditions-api-v1\r\n- fabric-structure-api-v1\r\n\r\n# Impactful API changes:\r\n### fabric-object-builder-api-v1\r\n- Removed - FabricBlockSettings.breakByHand\r\n- Removed - FabricBlockSettings.breakByTool  - Previously deprecated\r\n\r\n# Notable changes\r\n\r\n- fabric-registry-sync-v0 moves vanilla's new registry freezing to a later point in time, allowing mods to add to the registry during init.\r\n\r\n# Known issues:\r\n- ServerBugfixMixin used to fix https://bugs.mojang.com/browse/MC-195468 has not yet been ported.\r\n",
    "head_branch": "22w06a",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Port to 22w06a (#1989)\n\nThis snapshot is possibly one of the most impactful for API we have ever had. This PR is an inital port to support 22w06a, stuff will be missing and broken. \r\n\r\n# Removed modules:\r\n- fabric-mining-levels-v0 - Previously deprecated\r\n- fabric-object-builders-v0 - Previously deprecated\r\n- fabric-tag-extensions-v0\r\n- fabric-tool-attribute-api-v1\r\n\r\n# Modules with API breaking changes:\r\n- fabric-biome-api-v1\r\n- fabric-content-registries-v0\r\n- fabric-data-generation-api-v1\r\n- fabric-mining-level-api-v1\r\n- fabric-object-builder-api-v1\r\n- fabric-resource-conditions-api-v1\r\n- fabric-structure-api-v1\r\n\r\n# Impactful API changes:\r\n### fabric-object-builder-api-v1\r\n- Removed - FabricBlockSettings.breakByHand\r\n- Removed - FabricBlockSettings.breakByTool  - Previously deprecated\r\n\r\n# Notable changes\r\n\r\n- fabric-registry-sync-v0 moves vanilla's new registry freezing to a later point in time, allowing mods to add to the registry during init.\r\n\r\n# Known issues:\r\n- ServerBugfixMixin used to fix https://bugs.mojang.com/browse/MC-195468 has not yet been ported."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623076c0ac82a74541b2240",
    "number": 1984,
    "body": null,
    "head_branch": "1.18",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623076d0ac82a74541b2241",
    "number": 1983,
    "body": "Adds `FabricResource` that contains `getFabricPackSource()` for determining where a resource comes from (vanilla, a mod or a user-provided resource pack). Note: requires changes if #1827 merged since the sources aren't constant anymore\r\n\r\n## Why is this useful?\r\n\r\nThis is a prerequisite for loot table sources in #1241, where we can similarly determine where a loot table comes from. This can be used in Fabric API for de-hardcoding tools like shears in vanilla loot tables - we replace a loot table if its `LootTableSource` is `VANILLA`. This PR's source tracking is used as the base for that.",
    "head_branch": "resource-origins",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623076e0ac82a74541b2242",
    "number": 1982,
    "body": "Fixes #1981",
    "head_branch": "fix-indigo-multi-render",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Indigo rendering item models without transforms multiple times (#1982)\n\nFixes #1981"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623076f0ac82a74541b2243",
    "number": 1979,
    "body": "Fixes the issue by deferring the logic in `setStack` to `onFinalCommit` when necessary.\r\nIncludes regression tests.",
    "head_branch": "fix-1972",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #1912 and #1972: inventory updates in transactions (#1979)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623076f0ac82a74541b2244",
    "number": 1974,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307700ac82a74541b2245",
    "number": 1966,
    "body": "To have access to the actual level generation settings for the level, which is required to correctly answer the question \"does biome X generate in dimension Y\".\r\n\r\nThis is a semantic change of when the modifications are applied and needs additional testing.\r\n\r\nIt's currently also built on the assumption that the dynamic registries are not reused between different instances of `MinecraftServer`. For the dedicated server this is trivial to see, for the integrated server, at least using manual testing, this doesn't seem to be the case either.\r\n\r\np.s.: This likely needs some testing to ensure this has no unintended side-effects.",
    "head_branch": "move-biome-mods-into-server-ctor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Move biome modification into the MinecraftServer constructor (#1966)\n\n* Move biome modification into the MinecraftServer constructor to have access to the actual level generation settings for the level.\r\n\r\n* Move biome modification into the MinecraftServer constructor to have access to the actual level generation settings for the level.\r\n\r\n* Move biome modification into the MinecraftServer constructor to have access to the actual level generation settings for the level.\r\n\r\n* Ensure the feature ordering in BiomeSource is updated after modifying biomes.\r\n\r\n* Don't use var\r\n\r\n* Use the opportunity to check the real chunk generators for\r\nthe specified structure."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307710ac82a74541b2246",
    "number": 1962,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "workaround mixin agent not correctly handling mixins in subpackages declared using '/'"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307720ac82a74541b2247",
    "number": 1960,
    "body": "Loom 0.11 moves log4j to the runtime only classpath, moving to slf4j is done to follow what mojang are doing.",
    "head_branch": "slf4j",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Migrate to SLF4j and update loom (#1960)\n\n* Migrate to SLF4j and update loom\r\n\r\n* Update loom\r\n\r\n* Update to latest loom"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307730ac82a74541b2248",
    "number": 1957,
    "body": "closes #1954",
    "head_branch": "fix-1954",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix tags_populated conditions not working (#1957)\n\ncloses #1954"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307740ac82a74541b2249",
    "number": 1946,
    "body": "## Fix for a serious issue:\r\n\r\nWhen you return from the end, you'll spawn at world-spawn even if you have a valid spawnpoint.\r\n\r\nprobably it was a typo.\r\n",
    "head_branch": "1.18",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix returning from the end always going to world spawn (#1946)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307750ac82a74541b224a",
    "number": 1945,
    "body": "When using the `MutableQuadView.BAKE_ROTATE_90` flag, Indigo does a diagonal flip instead of a 90-degree rotation. Since the docs for the flags don't specify whether the rotations should be clockwise or counter-clockwise, I assumed the `BAKE_ROTATE_270` flag is working correctly and the rotations should be clockwise. This fix makes the `BAKE_ROTATE_90` flag apply a 90-degree clockwise rotation. The screenshots below are the results of using the relevant flags.\r\n\r\n\r\n`BAKE_ROTATE_NONE`\r\n![no-rotation](https://user-images.githubusercontent.com/5130165/148239532-3634c577-e22a-485b-8568-e6328db9dd3d.png)\r\n\r\n`BAKE_ROTATE_90` (without fix)\r\n![90-rotation-bug](https://user-images.githubusercontent.com/5130165/148239755-b9e6eabc-6cd4-4d81-be9b-81b13e7d1e3b.png)\r\n\r\n`BAKE_ROTATE_90` (with fix)\r\n![90-rotation-fix](https://user-images.githubusercontent.com/5130165/148239809-de46552b-858c-4400-b13d-9980ae17e772.png)\r\n",
    "head_branch": "1.18-uv-rotation-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Indigo UV rotation (#1945)\n\n* Fix Indigo UV rotation\r\n\r\n* Update MutableQuadView bakeFlags javadocs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307750ac82a74541b224b",
    "number": 1938,
    "body": null,
    "head_branch": "fix/dimension-api-end-events-trigger",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Preventing END special events with dimensional api (#1938)\n\n* Preventing END special events with dimensional api\r\n\r\n* Style errors fix"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307760ac82a74541b224c",
    "number": 1928,
    "body": "Since the inject is cancelled, it always runs last, and other mixins aren't able to target the map *after* the inject has been applied.\r\n\r\nThis is the code output of trying to modify the map after the inject has been applied (in this case, there are 2 `ModifyVariable`s used to show how they chain):\r\n```java\r\nMultimap<Attribute, AttributeModifier> multimap = this.localvar$zli000$modifyMapTwo((Multimap)multimap, slot);\r\nmultimap = this.localvar$zlh000$modifyMapOne(multimap, slot);\r\nCallbackInfoReturnable callbackInfo8 = new CallbackInfoReturnable(\"getAttributeModifiers\", true, multimap);\r\nthis.handler$zga000$getAttributeModifiers(slot, callbackInfo8, multimap);\r\nreturn callbackInfo8.isCancelled() ? (Multimap)callbackInfo8.getReturnValue() : multimap;\r\n```\r\n`modifyMapTwo` has a priority of `999` and `modifyMapOne` has a priority of `1001`, so regardless of what priority you use, you can't change the output of `getAttributeModifiers`.\r\n\r\nMy use-case is being able to nuke all attributes from an item, even if they are \"default\".\r\n\r\n",
    "head_branch": "fix/attribute-modifier-inject-limitations",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix attribute modifiers inject limiting other mixins. (#1928)\n\n* Fix attribute modifiers inject limiting other mixins.\r\n\r\n* Fix style"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307770ac82a74541b224d",
    "number": 1927,
    "body": "Currently when you fail a GameTest, you don't really get any useful information.\r\nThese tests:\r\n```java\r\n    @GameTest(template = \"crafttweaker:empty\")\r\n    public void alwaysFail(GameTestHelper helper) {\r\n        \r\n        helper.fail(\"This will always fail because I told it to, this is useful information to know.\");\r\n    }\r\n\r\n    @GameTest(template = \"crafttweaker:empty\")\r\n    private void notAccessible(GameTestHelper helper) {\r\n        \r\n        helper.fail(\"I'm not accessible, since I'm private.\");\r\n    }\r\n```\r\n\r\noutput:\r\n```xml\r\n        <testcase classname=\"crafttweaker:empty\" name=\"jsonconvertertest.alwaysfail\" time=\"0.082\">\r\n            <failure\r\n                    message=\"Failed to invoke test method (alwaysFail) in (com.blamejared.crafttweaker.gametest.api.data.JsonConverterTest)\"/>\r\n        </testcase>\r\n        <testcase classname=\"crafttweaker:empty\" name=\"jsonconvertertest.notaccessible\" time=\"0.09\">\r\n            <failure\r\n                    message=\"Failed to invoke test method (notAccessible) in (com.blamejared.crafttweaker.gametest.api.data.JsonConverterTest)\"/>\r\n        </testcase>\r\n```\r\n\r\nWhich doesn't really tell me anything about what is wrong with them.\r\n\r\nThis PR makes it that those tests produce:\r\n```xml\r\n        <testcase classname=\"crafttweaker:empty\" name=\"jsonconvertertest.alwaysfail\" time=\"0.111\">\r\n            <failure message=\"This will always fail because I told it to, this is useful information to know.\"/>\r\n        </testcase>\r\n        <testcase classname=\"crafttweaker:empty\" name=\"jsonconvertertest.notaccessible\" time=\"0.109\">\r\n            <failure\r\n                    message=\"Failed to invoke test method (notAccessible) in (com.blamejared.crafttweaker.gametest.api.data.JsonConverterTest) because class net.fabricmc.fabric.impl.gametest.FabricGameTestHelper cannot access a member of class com.blamejared.crafttweaker.gametest.api.data.JsonConverterTest with modifiers &quot;private&quot;\"/>\r\n        </testcase>\r\n```\r\n\r\nWhich I'm sure we can all agree is way more useful than before.\r\n\r\nSomething of note, I am *not* using `FabricGameTest` for my test classes.\r\nLooking at the code, I believe if I was I would get the correct information, but as that interface says, it is optional.",
    "head_branch": "fix/game-test-exceptions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use the correct information when throwing Exceptions for failed tests. (#1927)\n\n* Use the correct information when throwing Exceptions for failed tests.\r\n\r\n* Re-throw the exception if it is already a RuntimeException\r\n\r\n* Use pattern matching instead of casting"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307780ac82a74541b224e",
    "number": 1926,
    "body": "Fixes the conflicts with: https://github.com/FabricMC/fabric/pull/1909 Made a new PR as I dont have perms to push the merge to the origial branch.",
    "head_branch": "add-vanilla-tag",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow adding vanilla tags to FabricTagBuilder (#1926)\n\nCo-authored-by: deirn <deirn@bai.lol>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307790ac82a74541b224f",
    "number": 1923,
    "body": "Fixes #1921: Synchronize BlockEntityType to the client since mods use the Vanilla mechanism for block entity updates since 1.18.",
    "head_branch": "fix-1921",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixes #1921: Synchronize BlockEntityType to the client since mods use the Vanilla mechanism for block entity updates since 1.18. (#1923)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307790ac82a74541b2250",
    "number": 1918,
    "body": "See https://github.com/FabricMC/fabric-loader/pull/585 which is a prerequisite\r\n\r\nThis also optimizes ModNioResourcePack through early namespace based filtering and removal of streams. The hot path should now only do file system accesses if the namespace is known to be present.\r\n\r\nThe way namespaces are cached limits hot reloading in dev slightly, it won't react to any namespaces changes without restarting the game. This is however a really obscure scenario and thus not a real problem.",
    "head_branch": "multiRootPaths",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Support Loader 0.13's multiple mod root paths, optimize ModNioResourcePack (#1918)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623077a0ac82a74541b2251",
    "number": 1911,
    "body": "Adds TAWs for `BlockStateModelGenerator.blockStateCollector`, `BlockStateModelGenerator.modelCollector`, `TextureKey.of(String)`, and `TextureKey.of(String, TextureKey)`.\r\nAdds method in `FabricTagBuilder` for adding a non-identified tag, which simply casts the tag to identified as it's highly unlikely that any tags will *not* be identified. Helps with adding old Tag fields from FAPI (like Tool Tags).\r\nMakes `ItemTagProvider#copy` filter out any item entries that don't exist in the item registry.\r\n\r\n(supersedes #1889 , this one contains just the additions from that)",
    "head_branch": "1.18-datagen-additions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Datagen Additions (#1911)\n\n* Datagen additions\r\n\r\nNow separated from #1889\r\n\r\n* add throws javadoc tag, and test for copying a block tag that contains a block without an item form to an item tag\r\n\r\n* linkplain\r\n\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>\r\n\r\n* Add javadoc note about copy filtering\r\n\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623077b0ac82a74541b2252",
    "number": 1910,
    "body": "Refactor names to match yarn pr FabricMC/yarn#2905\r\n\r\n(supersedes #1889 , this one contains just the renames from that)",
    "head_branch": "1.18-datagen-renames",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Datagen Renames (#1910)\n\n* Renames\r\n\r\n* whoops\r\n\r\n* Return dataGenerator fields in deprecated classes\r\n\r\n* fix up conflicts\r\n\r\n* Update FabricRecipesProvider.java"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623077c0ac82a74541b2253",
    "number": 1909,
    "body": "Also add `forceAddTag` that always add the tag regardless if it present or not.\r\n\r\nCloses #1908",
    "head_branch": "add-vanilla-tag",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623077d0ac82a74541b2254",
    "number": 1905,
    "body": "Allows for using them in datagen without annoying casting",
    "head_branch": "1.18-identified",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623077d0ac82a74541b2255",
    "number": 1904,
    "body": null,
    "head_branch": "gametest_arguments",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix missing test ArgumentTypes (#1904)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623077e0ac82a74541b2256",
    "number": 1894,
    "body": "This pull requests does 3 things:\r\n1. Adds a new module called \"fabric-fluid-api\" with two classes `FabricFlowableFluid` that inherits from `FlowableFluid`, implementing some common fluid functions, to avoid reimplementing them and write less code, and a `FabricFluidBlock` class that inherits from `FluidBlock` with a public constructor, plus some utility (static methods) grouped into two classes `FluidInteractions` and `FluidMatching`.\r\n2. Adds the possibility to customize the fog on custom fluids (this requires a dependency on the module \"fabric-fluid-api\" to get the fog parameters from the fluid, that must inherit from FabricFlowableFluid to customize the fog parameters).\r\n3. Imports the texture registration inside FluidRenderHandlerRegistryImpl: Now there is no need to use `ClientSpriteRegistryCallback.event(PlayerScreenHandler.BLOCK_ATLAS_TEXTURE).register((atlasTexture, registry) -> {...})`, because the used textures will be automatically registered: see this commit for info https://github.com/FabricMC/fabric/commit/27b7162a1dc24ddc3f22a6630527b96cc5c929d8\r\nThis avoid to forget to register the textures, and hides this method that in my opinion must be internal.\r\nThe implementation avoids duplicate registrations, so if the texture is already registered, will not be registered anymore.\r\n4. Added `public static SimpleFluidRenderHandler coloredLava(int tint)` in `SimpleFluidRenderHandler`.",
    "head_branch": "rendering-fluids-fog",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623077f0ac82a74541b2257",
    "number": 1890,
    "body": "Some dynamic registries have a default registry in `BuiltinRegistries`, making it (somewhat) possible to use it in `FabricTagProvider` ctor. This is not the case for dimension type though, it doesn't have a default static registry.\r\n\r\nThere are two ways to make a support for dynamic registry tag datagen:\r\n- Make our own `DataProvider` and copy all methods from `AbstractTagProvider` to it, besides the registry checking bit.\r\n- Use a fake registry that always returns `true` on `Registry#containsId` calls, practically skipping the registry check.\r\n\r\nI decided to go with the second option.\r\n\r\nThis PR:\r\n- Adds `FabricTagProvider.DynamicRegistryTagProvider` that accepts a `RegistryKey` instead of `Registry`. It checks for whether the registry is dynamic and throws an exception if not.\r\n- Throws an exception if someone use regular `FabricTagProvider` ctor with a registry from `BuiltinRegistries`.\r\n- Adds `add` methods in `FabricTagBuilder` that accepts `Identifier` instead of registry object. This is the only way to add non-optional entries to dynamic registry tags.\r\n- Throws an exception if someone call `add` with a default registry object on a dynamic registry tag provider.\r\n",
    "head_branch": "dynamic-registry-tag-provider",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add datagen support for dynamic registry tags (#1890)\n\n* Add datagen support for dynamic registry tags\r\n\r\n* Update according review\r\n\r\n* Make FabricTagBuilder final\r\n\r\n* Throw AssertionError if expected errors didn't happen"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307800ac82a74541b2258",
    "number": 1889,
    "body": "Refactor names to match yarn pr https://github.com/FabricMC/yarn/pull/2905\r\n\r\nAdd TAWs for `BlockStateModelGenerator.blockStateCollector` and `BlockStateModelGenerator.modelCollector`",
    "head_branch": "1.18-datagen-stuff",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307810ac82a74541b2259",
    "number": 1879,
    "body": "This pull request backports the fluid api module #1784 to Minecraft 1.16.\r\nFor every info about this, checkout #1784.\r\n\r\n## Additions\r\n\r\n* `FabricFlowableFluid` class that extends `FlowableFluid`, implementing some common fluid customizations, and adding new customizations, such as fog, particles, sounds, viscosity, events...\r\n* `FabricFluidTags` class that adds new tags for fluid customizations.\r\n* `FabricFluidBlock` class that extends `FluidBlock`, adding a public constructor, so you don't need anymore to create a new class.\r\n\r\n## Extra\r\n\r\n* `FluidUtils` class that contains some utilities for fluids.\r\n* `FabricFluidEntity` interface that implements some fluid-related entity features.\r\n* `FabricFluidClientPlayerEntity` interface that implements some fluid-related client-side player entity features.\r\n* `SoundParameters` class that incapsulates some sound parameters.\r\n* `UnderfluidSoundLoop` class that implements a sound loop player used when the player is submerged by a fluid.",
    "head_branch": "fluid-api-1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307820ac82a74541b225a",
    "number": 1874,
    "body": "This pull request updates the fluid api module #1784 to Minecraft 1.18.\r\nFor every info about this, checkout #1784.\r\n\r\n## Additions\r\n\r\n* `FabricFlowableFluid` class that extends `FlowableFluid`, implementing some common fluid customizations, and adding new customizations, such as fog, particles, sounds, viscosity, events...\r\n* `FabricFluidTags` class that adds new tags for fluid customizations.\r\n* `FabricFluidBlock` class that extends `FluidBlock`, adding a public constructor, so you don't need anymore to create a new class.\r\n\r\n## Extra\r\n\r\n* `FluidUtils` class that contains some utilities for fluids.\r\n* `FabricFluidEntity` interface that implements some fluid-related entity features.\r\n* `FabricFluidClientPlayerEntity` interface that implements some fluid-related client-side player entity features.\r\n* `FabricFluidCamera` interface that implements some fluid-related camera features.\r\n* `SoundParameters` class that incapsulates some sound parameters.\r\n* `UnderfluidSoundLoop` class that implements a sound loop player used when the player is submerged by a fluid.",
    "head_branch": "fluid-api-1.18",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307820ac82a74541b225b",
    "number": 1872,
    "body": "Attacking a chest with a lava bucket (see testmod) fails without this mixin patch. I also removed all the useless cancels and returns after `ci.setReturnValue` in other methods.",
    "head_branch": "fix-attack-block-cb",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix AttackBlockCallback on the client not sending a packet to the server (#1872)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307830ac82a74541b225c",
    "number": 1866,
    "body": "Fixes #1838. I deprecated `LookupFactory` for removal because this is a very niche API (I couldn't find any use of it on github besides fabric's own uses), so hopefully we can remove it one day:tm:.\r\n\r\n~~Will conflict with #1836, and will need updating to also add the identifier getter to `EntityApiLookup`. That's why it's still a draft.~~ Updated.",
    "head_branch": "fix-1838",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add id getter to ApiLookups and expose the BE in BlockApiCache (#1866)\n\n* Add id getter to ApiLookups and expose the BE in BlockApiCache\r\n\r\n* identifier() -> getIdentifier(), and add some query methods to BlockApiCache\r\n\r\n* getId"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307840ac82a74541b225d",
    "number": 1864,
    "body": "- Fixes source jar publishing\r\n- Publishes maven local to github actions\r\n- No longer use a PAT to release (I do hope this works 🤞)\r\n- Fix prerelease option not working as intended.\r\n\r\nWaiting on https://github.com/FabricMC/fabric-loom/pull/543 somewhat.",
    "head_branch": "maven_upload_fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update loom and misc buildscript fixes (#1864)\n\nFixes sources not being published to maven."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307850ac82a74541b225e",
    "number": 1854,
    "body": "One issue with the new implementation is that it's not re-entrant, but I'm not sure the previous one was. I changed it because it was way too hard to reason about. If re-entrancy is needed, I can save a `Stack<LivingEntity>` in the threadlocal, but I am concerned about some edge cases where we would forget to pop said stack. Perhaps a redirect with a `try/finally` should be preferred to the current pairs of hooks? Let me know what you think!\r\n\r\nAlso removed the unused (and broken) `MixinToolItem`.",
    "head_branch": "dat-entity-context",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307860ac82a74541b225f",
    "number": 1853,
    "body": "The compression method is based on #416, with some changes:\r\n- This PR also groups all registry id with same namespace, alongside grouping the object id.\r\n- This PR sends empty string in place of `minecraft` namespace :tiny_potato:\r\n- This PR changes how to send the bulk rawIds. Since most mods registers all at once, the rawId of those objects would be adjacent to each other (the differential would be 1). We can skip sending those differential varints by sending the difference of the first raw id and the last raw id of the bulk before, alongside the size of each bulk. Then let the client loop and increment the raw id.\r\n\r\nThis PR also keeps the old NBT-based packet to support old server/client.\r\n\r\nNumber comparison is with [AOF4](https://www.curseforge.com/minecraft/modpacks/all-of-fabric-4/files/3526987) plus [Concistency+](https://www.curseforge.com/minecraft/mc-mods/consistency/files/3510835), which is a mod that has [a fair amount](https://github.com/ConsistencyPlus/ConsistencyPlus/blob/0.4.1/src/main/java/io/github/consistencyplus/consistency_plus/registry/CPlusBlocks.java) of reg objects ;-)\r\n| Packet | Raw size | Deflated size |\r\n| :-: | -: | -: |\r\n| NBT (Old) | `768102` | `210493` |\r\n| Direct (New) | `400934` | `101688` |\r\n\r\nCloses #416 \r\nEdit: had a big brain moment and saved some more bytes lol",
    "head_branch": "registry-packet-optimization",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Registry sync packet compression II (#1853)\n\n* Optimize registry sync packet\r\n\r\n* Make sure that the id map is sorted by the raw id\r\nSend the difference of the first raw id and the last raw id from the bulk before\r\n\r\n* Add packet size log prints\r\n\r\n* Use Boolean.getBoolean\r\nDon't send sync packet if the player is the server host\r\n\r\n* Use generic Map\r\n\r\n* Multiple raw id bulk test\r\n\r\n* Group object namespace first before grouping raw ids\r\n\r\n* Revert \"Add packet size log prints\"\r\n\r\nThis reverts commit fcb8b71e\r\n\r\n* RegistrySyncPacket -> RegistryPacketSerializer\r\nMove RegistryPacketSerializer singleton to the interface\r\n\r\n* Packet size log prints\r\n\r\n* Sort raw id on each namespace group\r\n\r\n* Use Identifier.DEFAULT_NAMESPACE\r\n\r\n* Slice to multiple packet if necessary\r\n\r\n* Make MAX_PAYLOAD_SIZE configurable\r\nMake testmod registry bigger\r\nPrint buffer size in equality test\r\n\r\n* Move static packet handler instance to RegistrySyncManager\r\nRelease combinedBuf before discarding it\r\nDiscard syncedRegistryMap after it's accessed\r\n\r\n* Use PacketByteBufs to create buffers"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662307860ac82a74541b2260",
    "number": 1844,
    "body": "Mostly a good test of the transitive access wideners, and becuase I needed these. ;)\r\n\r\nDoes bump the min loader to 0.12, and the useage of v2 AW does force loom 0.10, as this PR is 1.18 only its a good place to test before emposing those requirements on 1.17 IMO.",
    "head_branch": "biome_transitive_accesswideners",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add some useful worldgen transitive access-wideners. (#1844)\n\n* Add a handful of useful transitive access wideners for world gen.\r\n\r\n* Require loaded 0.12\r\n\r\n* Add some more."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307870ac82a74541b2261",
    "number": 1839,
    "body": "This is due to vanilla now calling thread.setPriority (thus accessing the field twice).",
    "head_branch": "fix-double-client-start-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixes double-invoking of the client start event. (#1839)\n\nThis is due to vanilla now calling thread.setPriority (thus accessing the field twice)."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307880ac82a74541b2262",
    "number": 1836,
    "body": "`EntityType#create` requires a world instance to call, making `registerSelf` check needs to be made on the server started event, I wonder if it's worth the trouble checking in the first place.\r\n\r\nAlso, do we want to include some helper method for querying API from `World`+`BlockPos`? That'll be like how Hopper checks for container minecarts (`HopperBlockEntity#getInventoryAt`).\r\n\r\nThe testmod reuses the `Inspectable`, that's why I moved things around.",
    "head_branch": "entity-lookup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Entity API Lookup (#1836)\n\n* Entity API Lookup\r\n\r\n* Update fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/entity/EntityApiLookup.java\r\n\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>\r\n\r\n* Update according to review\r\n\r\n* Check for valid entity\r\n\r\n* Use synchronized block on REGISTERED_SELVES accesses\r\n\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662307890ac82a74541b2263",
    "number": 1834,
    "body": "Restored functionality back to what it was during the snapshot. And I took the liberty of converting the biome modification API from accessors to AWs since this much more easily exposes the compilation issues that accessors hide.\r\n\r\nMojang essentially split decorators off from ConfiguredFeature and introduced `class_6796`, which is \"placed feature\" (-> Yarn names this `Registry.PLACED_FEATURE_WORLDGEN`). So in essence, the modification API now requires modders to add registered placed features instead of configured features into biomes.\r\n\r\nGlaring omissions right now:\r\n\r\n- No overworld biome addition API\r\n- No way to easily modify the material rules used for surface builders (essentially the chunk generator now has a rule-list that says how to generate biomes surfaces)\r\n\r\nI tested feature generation in the overworld (custom desert well), that nether and end biomes spawn, and custom sky color modifications.",
    "head_branch": "biome-api-1.18",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Restored the state of the biome api to what it was during the snapshots. Migrated from accessors to AWs. (#1834)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623078a0ac82a74541b2264",
    "number": 1832,
    "body": "Mods can add blocks that, like vanilla's Copper Blocks, can be waxed, stripped of wax, and/or stripped of oxidation decay.\r\n\r\nI attempted to document it, let me know if it's sufficient.\r\n\r\nThis PR will be useful for mods attempting to add new Copper-based blocks into the game, such as Copper Buttons from the recent Mob Vote, without reimplementing a bunch of logic and/or using similar mixins to this PR.\r\n\r\nExample:\r\n```java\r\nOxidizableBlocksRegistry.registerOxidizableBlockPair(ModBlocks.COPPER_BUTTON, ModBlocks.EXPOSED_COPPER_BUTTON);\r\nOxidizableBlocksRegistry.registerOxidizableBlockPair(ModBlocks.EXPOSED_COPPER_BUTTON, ModBlocks.WEATHERED_COPPER_BUTTON);\r\nOxidizableBlocksRegistry.registerOxidizableBlockPair(ModBlocks.WEATHERED_COPPER_BUTTON, ModBlocks.OXIDIZED_COPPER_BUTTON);\r\n\r\nOxidizableBlocksRegistry.registerWaxableBlockPair(ModBlocks.COPPER_BUTTON, ModBlocks.WAXED_COPPER_BUTTON);\r\nOxidizableBlocksRegistry.registerWaxableBlockPair(ModBlocks.EXPOSED_COPPER_BUTTON, ModBlocks.WAXED_EXPOSED_COPPER_BUTTON);\r\nOxidizableBlocksRegistry.registerWaxableBlockPair(ModBlocks.WEATHERED_COPPER_BUTTON, ModBlocks.WAXED_WEATHERED_COPPER_BUTTON);\r\nOxidizableBlocksRegistry.registerWaxableBlockPair(ModBlocks.OXIDIZED_COPPER_BUTTON, ModBlocks.WAXED_OXIDIZED_COPPER_BUTTON);\r\n``` ",
    "head_branch": "1.17-oxidizable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Oxidizable and Waxable Blocks registries (#1832)\n\n* Oxidizable Blocks registry\r\n\r\n* Allow waxable blocks to be registered outside of OxidizableFamilies\r\n\r\n* Refactor\r\n\r\nSeparated OxidizableBlocksRegistry and WaxableBlocksRegistry\r\nSeparated OxidizableFamily and WaxableBlockPair\r\nAdded null check to WaxableBlockPair\r\nAdded several methods\r\n\r\n* whoops lol\r\n\r\n* Apply suggestions from code review\r\n\r\nCo-authored-by: haykam821 <24855774+haykam821@users.noreply.github.com>\r\n\r\n* Update ContentRegistryTest.java\r\n\r\n* Refactor again lol\r\n\r\nNow uses mixins to change the vanilla ImmutableBiMaps to HashBiMaps and adds to them instead of keeping separate maps and having methods of their own. Much cleaner!\r\n\r\n* gutted everything lol\r\n\r\nremoved all the charm and character- uh, i mean, superfluous stuff and reduced the api to the bare basics\r\noh and also one-way methods which is neat i guess if you're into that sort of thing\r\n\r\n* 🦀one way methods are gone🦀\r\n\r\nall my homies hate one way methods\r\nmaps are linked again\r\n\r\n* re-merged oxidizable and waxable registry classes\r\n\r\n* Update ContentRegistryTest.java\r\n\r\n* implement suggestions by @Juuxel\r\n\r\n* Oxidization -> Oxidation\r\n\r\nas per https://github.com/FabricMC/yarn/pull/2837\r\n\r\n* Improve Dynamics\r\n\r\nCo-authored-by: haykam821 <24855774+haykam821@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623078b0ac82a74541b2265",
    "number": 1830,
    "body": null,
    "head_branch": "1.17-fixeditorconfig",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update .editorconfig (#1830)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623078b0ac82a74541b2266",
    "number": 1827,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow Built in Resource Packs to have custom names (#1827)\n\n* TooltipComponent API (#1695)\r\n\r\n* TooltipComponent API\r\n\r\n* Add warning\r\n\r\n* Fix handling of orphaned registry entries (#1759)\r\n\r\n* Fix handling of orphaned registry entries\r\n\r\n* Fix handling of orphaned registry entries in RegistrySyncManager\r\n\r\n* Transfer API: bugfixes and improvements (#1762)\r\n\r\n* Fix SingleVariantItemStorage extraction bug\r\n\r\n* Inventory wrappers: reuse the original stack more aggressively\r\n\r\n* Add some filtered overloads to StorageUtil methods\r\n\r\n* Override PlayerInventoryStorage#insert to call #offer\r\n\r\n* Add small comment regarding predicates\r\n\r\n* Bump version\r\n\r\n* Fix refamp generation for gametest API. Fixes #1722\r\n\r\n* Bump version.\r\n\r\n* Add two more sleep events (#1755)\r\n\r\n* Add event for setting bed occupation state\r\n\r\n* Add wake up pos event and update tests\r\n\r\n* Bump version\r\n\r\nJust in case. I have a bad feeling that\r\nthis could become a patch version otherwise.\r\n\r\n* Add code tags for true/false/null in EntitySleepEvents jd\r\n\r\n* Add Dynamic annotations for lambda body mixins\r\n\r\n* Update class javadoc to contain the new events\r\n\r\n* Bump version\r\n\r\n* Fix Registry.GAME_EVENT not being synced.\r\n\r\n* Updated mappings to yarn 1.17.1+build.63 (#1786)\r\n\r\n* Updated mappings to yarn 1.17.1+build.63\r\n\r\n* Forgot some bits.\r\n\r\n* Forgot to reeable\r\n\r\n* Make biome & dimension api stable. And change usage around @Deprecated (#1783)\r\n\r\n* Make biome & dimension api stable (for 1.17). Remove the usage of @Deprecated for other experimental modules.\r\n\r\nThe @Deprecated should be used for experimental/volatile APIs that are highly likely to change.\r\n\r\n* Apply suggestions from code review\r\n\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>\r\n\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>\r\n\r\n* ItemGroup API: Remove return and call super so all others ItemStack's get appended (#1617)\r\n\r\n* Remove return and call super so all others ItemStack's get appended\r\n\r\n* Add method to FabricItemGroupBuilder to pass ItemGroup with appendItems and change stacksForDisplay to a BiConsumer\r\n\r\n* Update ItemGroupBuilder javadoc and add example to testmod\r\n\r\n* Remove leftover aw\r\n\r\n* Update fabric-item-groups-v0/src/main/java/net/fabricmc/fabric/api/client/itemgroup/FabricItemGroupBuilder.java\r\n\r\nCo-authored-by: liach <7806504+liach@users.noreply.github.com>\r\n\r\n* Update fabric-item-groups-v0/src/testmod/java/net/fabricmc/fabric/test/item/group/ItemGroupTest.java\r\n\r\nCo-authored-by: Technici4n <13494793+Technici4n@users.noreply.github.com>\r\n\r\n* Remove used import in ItemGroupTest\r\n\r\n* Clean up\r\n\r\n* Fix damn checkstyle\r\n\r\n* Change version to 0.3.0\r\n\r\nCo-authored-by: liach <7806504+liach@users.noreply.github.com>\r\nCo-authored-by: Technici4n <13494793+Technici4n@users.noreply.github.com>\r\n\r\n* Bump version\r\n\r\n* Add tag-based mining level API, fix and deprecate FabricBlockSettings.breakByTool (#1629)\r\n\r\n* Mining Level API, part 1\r\n\r\n* Fix incorrect netherite mining level in MiningLevelManager docs\r\n\r\n* Add some format checks in dynamic mining level tag checking\r\n\r\n* Add mining level API test mod\r\n\r\n* Grammar\r\n\r\n* Add cursed basic support for the tool attribute api\r\n\r\n* Fix tool attribute JD\r\n\r\n* Add proper compat for tool attribute api\r\n\r\nAlso fixes the remaining bugs in it!\r\n\r\n* Update license headers\r\n\r\n* stuff\r\n\r\n* better comments\r\n\r\n* more test mod work\r\n\r\n* more\r\n\r\n* Fix test mod\r\n\r\n* i'm done with this module\r\n\r\n* Address some code review things\r\n\r\n* Use Reference2IntMap (basically IdentityHashMap for int values)\r\n\r\n* Prefix mixin handlers with fabric$\r\n\r\n* Add missing license header\r\n\r\n* Update fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/api/object/builder/v1/block/FabricBlockSettings.java\r\n\r\n* Resolve liach's comment\r\n\r\n* Update to use TagFactory\r\n\r\n* Add event phases (#1669)\r\n\r\n* Proof of concept\r\n\r\n* Simplify and document\r\n\r\n* Allow events to be registered with default phases\r\n\r\n* Use modified Kosaraju for the toposort, and add test for cyclic dependency graphs\r\n\r\n* Separate phase-related functionality in an EventPhase class\r\n\r\n* Revert \"Separate phase-related functionality in an EventPhase class\"\r\n\r\nThis reverts commit e433f348f4d3d056e6c5ccf1802d11103e3fe961.\r\n\r\n* Ensure that the phase order is deterministic\r\n\r\n* Add pretty graphs\r\n\r\n* Add a test, fix a bug, only do one sort for every constraint registration\r\n\r\n* Environmental renderers (#1727)\r\n\r\n* Environmental Renderers\r\n\r\n* Remove defunt hideClouds and hideWeather\r\n\r\n* Pushed missing License\r\n\r\n* Push checkstyle fixes\r\n\r\n* remove unused\r\n\r\n* Unwrapped the test mod sky rendering.\r\n\r\n* Added a first attempt at javadoc.\r\n\r\n* Forgot a blank line\r\n\r\n* Moved Environment references out of class\r\n\r\n* Moved Lamda functions for fog override, thick fog usage and fog color adjustment to their own interfaces and gave them proper javadoc.\r\n\r\n* Made FabricSkyProperties private\r\n\r\n* PURGE THE H...I mean FabricSkyPropertyBuilder and FabricSkyProperties.\r\n\r\n- Reverted unintentional mixin changes\r\n- Fix various typo errors that were pointed out.\r\n- Added missing javadocs and added the ability to override.\r\n\r\n* Forgot some pluggin in some overrides.\r\n\r\n* Added missing javadoc suggestion\r\n\r\n* Changed api a bit so that it fires a exception if renderer not being overridden and one already exists.\r\n\r\n* Split Implemtnation and Interface\r\n\r\n* Forgot a license\r\n\r\n* Added WorldRenderContext to Renderers\r\n\r\n* Added logging\r\n\r\n* Added missing javadocs and removed the override option.\r\n\r\n* Removed INSTANCE\r\n\r\n* Environmental Renderers\r\n\r\n* Remove defunt hideClouds and hideWeather\r\n\r\n* Pushed missing License\r\n\r\n* Push checkstyle fixes\r\n\r\n* remove unused\r\n\r\n* Unwrapped the test mod sky rendering.\r\n\r\n* Added a first attempt at javadoc.\r\n\r\n* Forgot a blank line\r\n\r\n* Moved Environment references out of class\r\n\r\n* Moved Lamda functions for fog override, thick fog usage and fog color adjustment to their own interfaces and gave them proper javadoc.\r\n\r\n* Made FabricSkyProperties private\r\n\r\n* PURGE THE H...I mean FabricSkyPropertyBuilder and FabricSkyProperties.\r\n\r\n- Reverted unintentional mixin changes\r\n- Fix various typo errors that were pointed out.\r\n- Added missing javadocs and added the ability to override.\r\n\r\n* Forgot some pluggin in some overrides.\r\n\r\n* Added missing javadoc suggestion\r\n\r\n* Changed api a bit so that it fires a exception if renderer not being overridden and one already exists.\r\n\r\n* Split Implemtnation and Interface\r\n\r\n* Forgot a license\r\n\r\n* Added WorldRenderContext to Renderers\r\n\r\n* Added logging\r\n\r\n* Added missing javadocs and removed the override option.\r\n\r\n* Removed INSTANCE\r\n\r\n* Fixed Issues\r\n\r\n* Fixed formatting issue.\r\n\r\n* completed Juuxl's suggestions and removed null check on adding skyproperties. Changed SkyProperties registering to take an Identifier. Registration turns out to be only adding new options to the \"effects\" entry of dimension type jsonjson.\r\n\r\n* Forgot to reenable this.\r\n\r\n* Just did suggested tweaks\r\n\r\n* Changed SkyProperties to DimensionEffects\r\n\r\n* Pushed suggestions of Haykam and apple502j\r\n\r\n* Added missing changes from sky properties to dimension effects.\r\n\r\n* Corrected me being inconsistent.\r\n\r\n* Forgot to remove import.\r\n\r\n* Impliments \r\n\r\nhttps://github.com/FabricMC/fabric/pull/1727#discussion_r734988305\r\nhttps://github.com/FabricMC/fabric/pull/1727#discussion_r734988265\r\n\r\n* Implements https://github.com/FabricMC/fabric/pull/1727#discussion_r730429748\r\n\r\n* Last minute tweak. Runnable that controls fog runs right before dimension spefific rendering is done. Based on more subtle issues discovered while working api with twilight forest.\r\n\r\nCo-authored-by: AlphaMode <AlphaModeYT@gmail.com>\r\n\r\n* Another wave of transfer API improvements (#1801)\r\n\r\n* Another wave of transfer API improvements\r\n\r\n* Cleaner implementation of FilteringStorage#...Of\r\n\r\n* Undo colored name for water and lava variants\r\n\r\n* Custom fluid renderers and enhanced vanilla fluid renderer customization (#1687)\r\n\r\n* Implement custom fluid rendering\r\n\r\n* Move custom renderers in FluidRenderer mixin and add overlay sprite support to FluidRenderHandlers\r\n\r\n* Add vanilla-like fluid renderer. Maybe very unnecessary, might remove.\r\n\r\n* Optimize imports\r\n\r\n* Allow custom fluid renderers to call the default renderer. Re-add DEFAULT.\r\n\r\n* Add interface to implement by blocks that enforces overlay texture on fluids\r\n\r\n* Some comments\r\n\r\n* Simplify API and remove DefaultLikeFluidRenderer\r\n\r\n* Make simple renderer overlay texture nullable\r\n\r\nCo-authored-by: Technici4n <13494793+Technici4n@users.noreply.github.com>\r\n\r\n* Expand test mod\r\n\r\n* Checkstyle and licenses\r\n\r\n* Easy shortcut for custom colored vanilla water fluids\r\n\r\n* Easy way to register a renderer for two (still+flowing) fluids\r\n\r\n* Update fabric-rendering-fluids-v1/src/main/java/net/fabricmc/fabric/api/client/render/fluid/v1/FluidRenderHandlerRegistry.java\r\n\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>\r\n\r\n* Update fabric-rendering-fluids-v1/src/main/java/net/fabricmc/fabric/mixin/client/rendering/fluid/MixinFluidRenderer.java\r\n\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>\r\n\r\nCo-authored-by: Technici4n <13494793+Technici4n@users.noreply.github.com>\r\nCo-authored-by: modmuss50 <modmuss50@gmail.com>\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>\r\n\r\n* Bump versions\r\n\r\nAll of the version need to be bumped due to fabric-api-base being updated, this highlights the need for a better solution.\r\n\r\n* Target the void world in the DimensionalRenderingTest\r\n\r\nIt's a bit too obnoxious for the overworld.\r\n\r\n* Fix shears being the ultimate mining tool (#1809)\r\n\r\n* Add detail about default value to MiningLevelManager jd\r\n\r\n* Fix shears being the ultimate mining tool\r\n\r\nIn more technical terms, fix an invalid\r\ncomparison in TaggedToolsModdedBlocksToolHandler.\r\nThe code was supposed to check if the tool's\r\nmining level was at least the block's minimum\r\nmining level. Instead, the check succeeded\r\nwhenever the block required a tool\r\n(min level >= 0).\r\n\r\n* WIP fixing tool attribute api bugs\r\n\r\n* Fix mostly everything\r\n\r\n* Simplify to (== 0) with explanation\r\n\r\n* A less breaking workaround for https://github.com/FabricMC/fabric/issues/1806 (#1811)\r\n\r\n* A less breaking workaround for https://github.com/FabricMC/fabric/issues/1806\r\n\r\n* Checkstyle\r\n\r\n* Bump version\r\n\r\n* Update Loom and Loader. Cleanup/improve buildscript. (#1802)\r\n\r\nCo-authored-by: shartte <shartte@users.noreply.github.com>\r\n\r\n* Fix missing some chunk unloads events leading to a possible memory leak. (#1820)\r\n\r\n* Fix crash when loading resources from a UNC (windows) network share.\r\n\r\nSee: https://bugs.openjdk.java.net/browse/JDK-8178726\r\n\r\n* Update ResourceManagerHelper.java\r\n\r\n* Update ResourceManagerHelperImpl.java\r\n\r\n* Update ResourceManagerHelperImpl.java\r\n\r\n* attempt to get rid of trailing whitespace\r\n\r\n* works\r\n\r\n* Update the test mod\r\n\r\n* Split TestPack to check if unnamed packs still load and display correctly\r\n\r\n* update javadoc\r\n\r\n* bump testmod version\r\n\r\n* Update fabric-resource-loader-v0/src/main/java/net/fabricmc/fabric/api/resource/ResourceManagerHelper.java\r\n\r\nCo-authored-by: LambdAurora <aurora42lambda@gmail.com>\r\n\r\n* Use modid in description\r\n\r\n* Add lang\r\n\r\nCo-Authored-By: LambdAurora <email@lambdaurora.dev>\r\n\r\n* Update fabric-resource-loader-v0/src/main/java/net/fabricmc/fabric/impl/resource/loader/ResourceManagerHelperImpl.java\r\n\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>\r\n\r\n* Fix optional server resource loading\r\n\r\n* small changes and adhere to checkstyle\r\n\r\n* Remove ResourcePackProfileAccessor from mixin json\r\n\r\n* bump pack_format\r\n\r\nCo-authored-by: Technici4n <13494793+Technici4n@users.noreply.github.com>\r\nCo-authored-by: BasiqueEvangelist <basiqueevangelist@yandex.ru>\r\nCo-authored-by: modmuss50 <modmuss50@gmail.com>\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>\r\nCo-authored-by: Waterpicker <Waterpickerenternity@gmail.com>\r\nCo-authored-by: AlphaMode <AlphaModeYT@gmail.com>\r\nCo-authored-by: liach <7806504+liach@users.noreply.github.com>\r\nCo-authored-by: Shadew <11669132+FoxShadew@users.noreply.github.com>\r\nCo-authored-by: shartte <shartte@users.noreply.github.com>\r\nCo-authored-by: LambdAurora <aurora42lambda@gmail.com>\r\nCo-authored-by: LambdAurora <email@lambdaurora.dev>\r\nCo-authored-by: deirn <deirn@bai.lol>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623078c0ac82a74541b2267",
    "number": 1824,
    "body": "This PR allows mods to generate JSON data/assets for their mods. See the minimal example bellow:\r\n\r\n```java\r\npublic class DataGeneratorTestInitializer implements DataGeneratorInitializer {\r\n\t@Override\r\n\tpublic void onInitializeDataGenerator(FabricDataGenerator dataGenerator) {\r\n\t\tdataGenerator.addProvider(TestRecipeProvider::new);\r\n\t}\r\n\r\n\tprivate static class TestRecipeProvider extends FabricRecipeProvider {\r\n\t\tprivate TestRecipeProvider(FabricDataGenerator dataGenerator) {\r\n\t\t\tsuper(dataGenerator);\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic void generate(Consumer<RecipeJsonProvider> exporter) {\r\n\t\t\tofferPlanksRecipe2(exporter, Blocks.ACACIA_PLANKS, ItemTags.ACACIA_LOGS);\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nSee the test mod here: https://github.com/modmuss50/fabric/blob/datagen/fabric-data-generation-api-v1/src/testmod/java/net/fabricmc/fabric/test/datagen/DataGeneratorTestEntrypoint.java for a full example.\r\n\r\nThere may be more scope for additional data providers and validation down the line, but right now this covers all of the data providers included with vanilla. You can of course create your own data provider if you have custom data.\r\n\r\nThe datagen can run on the client or server (both headless) through gradle:\r\n\r\n```groovy\r\nsourceSets {\r\n\tmain{\r\n\t\tresources {\r\n\t\t\tsrcDirs += [\r\n\t\t\t\t'src/main/generated'\r\n\t\t\t]\r\n\t\t}\r\n\t}\r\n}\r\n\r\nloom {\r\n\truns {\r\n\t\tdatagen {\r\n\t\t\tserver()\r\n\r\n\t\t\tname \"Data Generation\"\r\n\t\t\tvmArg \"-Dfabric-api.datagen\"\r\n\t\t\tvmArg \"-Dfabric-api.datagen.output-dir=${file(\"src/main/generated\")}\"\r\n\r\n\t\t\trunDir \"build/datagen\"\r\n\t\t}\r\n\t}\r\n}\r\nassemble.dependsOn runDatagen\r\n```\r\n\r\nI plan to write a wiki page with an more indepth tutorial on how to use it once released.\r\n\r\nPlease let me know if you see anything wrong/missing. 👍 ",
    "head_branch": "datagen",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fabric Data Generation API (#1824)\n\n* First look at datagen\r\n\r\n* First pass on item/block models\r\n\r\n* Tags\r\n\r\n* Advancements + BlockFamilies\r\n\r\n* Loot tables\r\n\r\n* Cleanup\r\n\r\n* Start on javadocs, and cleanup\r\n\r\n* Update for new mappings.\r\n\r\n* Added client-side entrypoint and more logging.\r\n\r\n* Complete javadoc, add modid filter and misc fixes/cleanup.\r\n\r\n* Minor fixes.\r\n\r\n* Renames and misc changes.\r\n\r\n* Strict validation fixes.\r\n\r\n* Apply suggestions from code review\r\n\r\nCo-authored-by: Shnupbups <shnupbups@gmail.com>\r\n\r\n* Update fabric-data-generation-api-v1/src/main/java/net/fabricmc/fabric/api/datagen/v1/FabricDataGenerator.java\r\n\r\nCo-authored-by: Shnupbups <shnupbups@gmail.com>\r\n\r\n* Update fabric-data-generation-api-v1/src/main/java/net/fabricmc/fabric/api/datagen/v1/FabricDataGenerator.java\r\n\r\nCo-authored-by: Shnupbups <shnupbups@gmail.com>\r\n\r\n* Review fixes.\r\n\r\n* Set generated dir as resources not sources.\r\n\r\nCo-authored-by: Sebastian Hartte <shartte@users.noreply.github.com>\r\nCo-authored-by: Shnupbups <shnupbups@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623078d0ac82a74541b2268",
    "number": 1820,
    "body": null,
    "head_branch": "chunk_leak",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix missing some chunk unloads events leading to a possible memory leak. (#1820)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623078e0ac82a74541b2269",
    "number": 1815,
    "body": "- Add an `ALLOW` event to block elytra flight entirely, and a `CUSTOM` event for modded \"custom\" elytras.\r\n- Add the `FabricElytraItem` interface for the most common use case.\r\n- Add an event to disable cape rendering. **I'd appreciate some testing with this one (just wear the `diamond_elytra` test item) by someone who has a cape.**\r\n\r\nNote that if you test this on AOF4 it's not going to work. This is because FallFlyingLib completely overwrites the vanilla logic. One objective of this PR is to replace FallFlyingLib, or at least allow it to call this event.\r\n\r\nThe mixin injections are not obvious, but being straight injects they should not cause compatibility issues, and they work around existing libraries. I haven't tested it in production yet, but I expect this addition to work on AOF4 with FallFlyingLib (and dependent mods) removed.\r\n\r\nTODO:\r\n- [x] Test on AOF4 with FFL removed",
    "head_branch": "elytra",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add AllowElytraFlight event (#1815)\n\nUse explicit casts instead of .class.cast in mixins\r\n\r\nReorganize API class, and make it work for any living entity\r\n\r\nadd LivingEntityFeatureRenderEvents to disable cape rendering\r\n\r\nReorganize/rename hook, and add ALLOW event\r\n\r\nFix missing mixin return & cosmetic adjustements"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623078f0ac82a74541b226a",
    "number": 1811,
    "body": "https://github.com/FabricMC/fabric/pull/1808 was too breaking, lets go with this for 1.17 and 1808 for 1.18",
    "head_branch": "impl_class_loading_order_is_annoying",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "A less breaking workaround for https://github.com/FabricMC/fabric/issues/1806 (#1811)\n\n* A less breaking workaround for https://github.com/FabricMC/fabric/issues/1806\r\n\r\n* Checkstyle"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307900ac82a74541b226b",
    "number": 1809,
    "body": "Fixes #1805. Most of this PR is testmod changes to catch these types of errors in the future, and the actual fix is a one-liner.\r\n\r\nNote that this doesn't `fix` #1810 which is most likely only theoretical and thus not critical.",
    "head_branch": "sadly-shears-shouldn't-be-this-good",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix shears being the ultimate mining tool (#1809)\n\n* Add detail about default value to MiningLevelManager jd\r\n\r\n* Fix shears being the ultimate mining tool\r\n\r\nIn more technical terms, fix an invalid\r\ncomparison in TaggedToolsModdedBlocksToolHandler.\r\nThe code was supposed to check if the tool's\r\nmining level was at least the block's minimum\r\nmining level. Instead, the check succeeded\r\nwhenever the block required a tool\r\n(min level >= 0).\r\n\r\n* WIP fixing tool attribute api bugs\r\n\r\n* Fix mostly everything\r\n\r\n* Simplify to (== 0) with explanation"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307900ac82a74541b226c",
    "number": 1808,
    "body": "One solution to fix: https://github.com/FabricMC/fabric/issues/1806 See for other suggestions for fixes. \r\n\r\nThis will break a few mods that used the impl. (Seems to just be TechReborn in AOF 4, I am releasing a fix now so I think this is a none issue) To reduce the impact of this it may be a better idea to just fix the FluidRenderHandlerRegistry?",
    "head_branch": "impl_shadowing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307910ac82a74541b226d",
    "number": 1804,
    "body": "This PR introduces improvements upon the tag-based mining level API introduced in #1629, mostly focused around Shears\r\n\r\n- Shears now work with mining level tags.\r\n- Vanilla Shears have a mining level of 2, equivalent to that of Iron tools.\r\n- Introduced `fabric:mineable/shears_fast` and `fabric:mineable/shears_slow` block tags, allowing for utilisation of the mining speeds used by leaves and vines respectively - these tags are nested in the already present `fabric:mineable/shears`, so it is not necessary to manually put a block in both. Blocks not present in either fast nor slow will use the standard speed used by wool.\r\n- Added `FabricTool`, an interface implemented by `ToolItem` and `ShearsItem` and extended by `DynamicAttributeTool` - allows for Shears to utilise `ToolMaterial`s, and provides some potentially useful methods.\r\n- Added `FabricShearsItem`, a class that extends `ShearsItem` - provides a simple way to pass a `ToolMaterial` into shears.\r\n- Potentially fixed issues regarding `DynamicAttributeTool`s mining blocks with dynamic mining levels\r\n- Added stuff to the Test Mod which utilises new functionality introduced by this PR",
    "head_branch": "1.17-shears",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307920ac82a74541b226e",
    "number": 1802,
    "body": "- Update loom/loader.\r\n- Remove almost all of the major hacks in the gradle buildscript, just 1 places where `afterEvaluate` is needed (planned to be fixed in 0.11 loom if all goes well.\r\n- Run GameTest's against all modules\r\n- remove the auto test server, gametests should now be used instead.\r\n- Adds a WIP helper script to make bumping the versions a bit easier.\r\n\r\nGoing forward, testmods should try and make good use of the gametest framework, inplace of the first tick checks a number of eixsting test mods do rn.\r\n\r\nTODO before merge:\r\n\r\n- [x] Wait for stable 0.12 loader\r\n- [x] Wait for stable 7.3 gradle\r\n- [x] Test! Especially the maven publications",
    "head_branch": "loom_0_10",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update Loom and Loader. Cleanup/improve buildscript. (#1802)\n\nCo-authored-by: shartte <shartte@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662307930ac82a74541b226f",
    "number": 1801,
    "body": "- ~~Add a water and lava `FluidVariantRenderHandler` to have cool-looking blue and red names (respectively).~~ People don't want it so it will go into my mods instead.\r\n- [x] Remove the notBlank check for `ContainerItemContext.withInitial` as it forced users to add a check themselves.\r\n- [x] Clarify that `isResourceBlank()` is equivalent to `getResource().isBlank()` for transfer variants.\r\n- [x] Add a few `FilteringStorage` static methods to wrap an existing storage, while blocking insertion or extraction entirely.\r\n- [x] Deprecate for removal the fluid variant rendering methods that return a single sprite, and replace them with methods that return a `Sprite[]`. This will provide a standard way to retrieve a flowing fluid sprite for pipes, e.g. for use in pipes.\r\n- [x] Add `insertStacking` to `StorageUtil`.\r\n- [x] Add a fallback to the sided storages that throws an exception if the world is not a server world to guard against incorrect API usage (client worlds are not allowed).\r\n\r\n(most of #1760).",
    "head_branch": "transfer-api-improvements",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Another wave of transfer API improvements (#1801)\n\n* Another wave of transfer API improvements\r\n\r\n* Cleaner implementation of FilteringStorage#...Of\r\n\r\n* Undo colored name for water and lava variants"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662307940ac82a74541b2270",
    "number": 1796,
    "body": "Follows the vanilla behaviour of adding all the features to this set. Idk why it exists in the first place tbh.",
    "head_branch": "allowed_features",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add features to the allowed features set. Fixes features not spawning when added via the biome api. (#1796)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307950ac82a74541b2271",
    "number": 1790,
    "body": "Introduce the `FabricItem` interface. In the future the idea is to make it visible on the `Item` class in dev (FabricMC/fabric-loom#496).\r\n- `allowNbtUpdateAnimation` allows cancelling the NBT/count update animation for held items.\r\n- `allowContinuingBlockBreaking` allows continuing block breaking even if the NBT changes.\r\n\r\nSupersedes #860. Closes #856.",
    "head_branch": "nbt-update-animation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow canceling the NBT update animation and block break reset (#1790)\n\n* Allow canceling the NBT update animation\r\n\r\n* Remove the event and introduce FabricItem instead\r\n\r\n* Remove FabricItem and add an item setting instead\r\n\r\n* Revert \"Remove FabricItem and add an item setting instead\"\r\n\r\nThis reverts commit a93205c9276044113271163fbb706b3fce46f1a6.\r\n\r\nAfter some discussion, it was agreed upon internally that an interface is better than item settings for behavior extensions.\r\n\r\n* Add allowContinuingBlockBreaking\r\n\r\n* Update ClientPlayerInteractionManagerMixin comment and inject name"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662307950ac82a74541b2272",
    "number": 1787,
    "body": null,
    "head_branch": "player_tick_event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307960ac82a74541b2273",
    "number": 1786,
    "body": null,
    "head_branch": "1.17.1+build.63",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated mappings to yarn 1.17.1+build.63 (#1786)\n\n* Updated mappings to yarn 1.17.1+build.63\r\n\r\n* Forgot some bits.\r\n\r\n* Forgot to reeable"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307970ac82a74541b2274",
    "number": 1784,
    "body": "This pull request implements a new module \"fabric-fluid-api-v1\" that is focused on improving everything about the fluid creation, compared with vanilla one.\r\n\r\nI've implemented all the #1136 pull request features, but in a simpler way, plus some additions about the fluid customizations.\r\n\r\n## Steps\r\n\r\n- [x] Ready-to-use basic abstract FlowableFluid class.\r\n- [x] Ready-to-use basic FluidBlock class.\r\n- [x] Custom fog.\r\n- [x] Custom sounds.\r\n- [x] Pushing strength.\r\n- [x] Splash event.\r\n- [x] Splash event: particles.\r\n- [x] Submerged event.\r\n- [x] Submerged event: entity drowning.\r\n- [x] Touching event.\r\n- [x] Touching event: entity on fire.\r\n- [x] Specify if the fluid can light fire.\r\n- [x] Handling hot and fire damage.\r\n- [x] Handling fall damage.\r\n- [x] Specify if the fluid can wet entities.\r\n- [x] Handling drowning.\r\n- [x] Boats over the fluid.\r\n- [x] Entity swimming.\r\n- [x] Fix some small things...\r\n- [x] Check if everything is ok, and avoid any potential compatibility breaks.\r\n- [x] Cleanup.\r\n- [x] Updated to 1.18. (Checkout #1874)\r\n- [x] Backported to 1.16. (Checkout #1879)\r\n\r\n## Additions\r\n\r\n* `FabricFlowableFluid` class that extends `FlowableFluid`, implementing some common fluid customizations, and adding new customizations, such as fog, particles, sounds, viscosity, events...\r\n* `FabricFluidTags` class that adds new tags for fluid customizations.\r\n* `FabricFluidBlock` class that extends `FluidBlock`, adding a public constructor, so you don't need anymore to create a new class.\r\n\r\n## Extra\r\n\r\n* `FluidUtils` class that contains some utilities for fluids.\r\n* `EntityFluidExtensions` interface that implements some fluid-related entity features.\r\n* `LivingEntityFluidExtensions` interface that implements some fluid-related living entity features.\r\n* `ClientPlayerEntityFluidExtensions` interface that implements some fluid-related client-side player entity features.\r\n* `CameraFluidExtensions` interface that implements some fluid-related camera features.\r\n* `SoundParameters` class that incapsulates some sound parameters.\r\n* `UnderfluidSoundLoop` class that implements a sound loop player used when the player is submerged by a fluid.\r\n\r\n## Note\r\n\r\n* All acquatic creatures cannot swim on custom fluids, even if the fluid is tagged as swimmable.\r\n  The tag is meant for land creatures (like the player and all other land mobs, chicken, wolves...).\r\n  For acquatic creatures the swimming activity (how to swim in custom fluids) must be injected in their brain, so maybe this is a job for mod developers, and not for fabric-api...",
    "head_branch": "1.17",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307980ac82a74541b2275",
    "number": 1783,
    "body": "Remove the usage of @Deprecated for other experimental modules. This idea clealy hasnt worked out quite how we had first imagined.\r\n\r\nGoing forward the @Deprecated should be used for experimental/volatile APIs that are highly likely to change (Such as APIs developed in snapshots). And the jetbrains `@ApiStatus.Experimental` annoation should be used for everything else. We cannot tell the future so the apis should only be consdiered stable for the branch's target mc version.\r\n\r\nI'm happy to discuss any other ideas people may have. Once accpeted I will make a similar PR for 1.18 but keeping the biome api experimental.",
    "head_branch": "stable_biome",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make biome & dimension api stable. And change usage around @Deprecated (#1783)\n\n* Make biome & dimension api stable (for 1.17). Remove the usage of @Deprecated for other experimental modules.\r\n\r\nThe @Deprecated should be used for experimental/volatile APIs that are highly likely to change.\r\n\r\n* Apply suggestions from code review\r\n\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>\r\n\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662307990ac82a74541b2276",
    "number": 1777,
    "body": "This appears to fix #1772  by replacing an ArrayList with an ReferenceArrayList, this replicates the pre 1.17 behaviour of remove duplicate keys based on reference equality.",
    "head_branch": "1.17",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #1772 (#1777)\n\n* Fix #1772\r\n\r\n* Fix import order\r\n\r\n* Update fabric-key-binding-api-v1/src/main/java/net/fabricmc/fabric/impl/client/keybinding/KeyBindingRegistryImpl.java\r\n\r\nCo-authored-by: Player <sfPlayer1@users.noreply.github.com>\r\n\r\n* Fix checkstyle\r\n\r\nCo-authored-by: modmuss50 <modmuss50@gmail.com>\r\nCo-authored-by: Player <sfPlayer1@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623079a0ac82a74541b2277",
    "number": 1771,
    "body": "Reviving https://github.com/FabricMC/fabric/pull/916. Test Mod still has an issue where it won't see any assets but I probably just overlooked something there.",
    "head_branch": "Item_Overlay_API",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623079a0ac82a74541b2278",
    "number": 1762,
    "body": "- Thanks to @virusek20 who spotted the `SingleVariantItemStorage` bug.\r\n- The change to inventory wrappers works around more vanilla cases. The original motivation for this change is that mining with a powered tool would otherwise cancel the mining if the energy of the tool changes through the transfer API during the mining operation. This is because vanilla captures a reference to the original stack, and if it becomes empty the mining operation is cancelled.\r\n- I also used this opportunity to add filtering to a few `StorageUtil` methods.\r\n- Overrode `PlayerInventoryStorage#insert` to avoid the surprising behavior of blindly inserting into armor and offhand slots:\r\n![image](https://user-images.githubusercontent.com/13494793/136273050-657cdab6-6d90-40f2-8bdd-f9f3a0c9d97d.png)\r\n",
    "head_branch": "transfer-api-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Transfer API: bugfixes and improvements (#1762)\n\n* Fix SingleVariantItemStorage extraction bug\r\n\r\n* Inventory wrappers: reuse the original stack more aggressively\r\n\r\n* Add some filtered overloads to StorageUtil methods\r\n\r\n* Override PlayerInventoryStorage#insert to call #offer\r\n\r\n* Add small comment regarding predicates"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623079b0ac82a74541b2279",
    "number": 1759,
    "body": "Right now, Fabric API overwrites the IDs of any orphaned registry entries with 0. This is because the code tries to get the id from the registry tag, which it just checked that it doesn't have it.\r\nThis PR fixes this, restoring the intended behavior of the code.",
    "head_branch": "dont-override-unknown-biome-ids",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix handling of orphaned registry entries (#1759)\n\n* Fix handling of orphaned registry entries\r\n\r\n* Fix handling of orphaned registry entries in RegistrySyncManager"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623079c0ac82a74541b227a",
    "number": 1756,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623079d0ac82a74541b227b",
    "number": 1755,
    "body": "These are the last things I found when porting Adorn's sofas over to sleep events.\r\n\r\n- **This PR de-hardcodes the usual wake up code path from bed blocks to any block matching `ALLOW_BED`.** The two events below are needed for it to work correctly.\r\n  - The code handles player positioning/rotation and occupied marking for you, and it would be a pain to reimplement this in mods.\r\n- `SET_BED_OCCUPATION_STATE` event: this marks the bed as occupied or unoccupied\r\n  - This is needed if the block uses some other method instead of the `BedBlock.OCCUPIED` property\r\n  - The vanilla check is also de-hardcoded from `instance BedBlock` to `BlockState.contains(BedBlock.OCCUPIED)`\r\n- `MODIFY_WAKE_UP_POSITION` event: self-explanatory\r\n  - Works like `MODIFY_SLEEPING_DIRECTION`, so modifies an existing value or provides a new value\r\n  - Needed for blocks where `BedBlock.findWakeUpPosition` doesn't work",
    "head_branch": "set-occupied-bed",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add two more sleep events (#1755)\n\n* Add event for setting bed occupation state\r\n\r\n* Add wake up pos event and update tests\r\n\r\n* Bump version\r\n\r\nJust in case. I have a bad feeling that\r\nthis could become a patch version otherwise.\r\n\r\n* Add code tags for true/false/null in EntitySleepEvents jd\r\n\r\n* Add Dynamic annotations for lambda body mixins\r\n\r\n* Update class javadoc to contain the new events"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623079e0ac82a74541b227c",
    "number": 1735,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Forgot to include biome-api (#1735)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623079e0ac82a74541b227d",
    "number": 1732,
    "body": "The biome-api module is actually composed of four relatively independent components:\r\n- Biome Modification\r\n- Modifying the default Overworld biome source\r\n- Modifying the default Nether biome source\r\n- Modifying the default End biome source\r\n\r\nThe PR removes the overworld component while restoring the others. Overworld has changed significantly and now uses the same basic generation approach as the nether. It's quite uncomfortable to add biomes via noise points however, and there probably needs to be a new API for modifying how overworld biomes are generated. There's no reason to keep the rest inactive, however.\r\n\r\nChanges to the other bits:\r\n- Biome depth and scale are gone since those related to generation, which has changed in Vanilla\r\n- Structure starts are no longer defined directly in a Biome, which means that biome modification's addStructure, hasStructure, removeStructure do not translate 1:1. The information is now stored in the ChunkGeneratorSettings which is more powerful than before (i.e. PLAINS as part of Overworld can be treated differently from PLAINS as part of a different chunk generator settings). To keep compatibility with the old API, adding/removing a structure start from a biome will operate on all registered chunk generator settings.\r\n- Modifying Nether and End biomes is functionally unchanged\r\n- I took the opportunity to split up the InternalBiomeData godclass into the separate pieces for Nether, End and Overworld biome modification since they're not really related.\r\n- Vanilla now prevents biomes with different generation order for the same feature-type from being used together. This breaks the use of BEACH with any nether biomes in the test mod. I switched this to using THE_END for the demo since the test just demonstrates that a foreign biome now generates in the nether.\r\n\r\nFuture improvements:\r\n\r\n- Overworld API, obviously. There is potential for a low-level API that is 1:1 the same a the Nether biome API (since Overworld is now also multi-noise based). But in addition, since Vanilla uses a higher-level \"generator\" to generate the multi-noise points for its biomes, we can also provide an API to hook mods into this generator's output, providing a more abstract way of modifying biomes in the Overworld. (The generator still deals in humidity, temperature, mountains, etc.)\r\n- The End uses a simple perlin noise source, but since it now has access to the multi noise source (even if Vanilla ignores it for the end), the noise could be sampled for weirdness to decide which modded biome gets used. This is best left to actual worldgen experts to decide, however.\r\n- Biome modification could allow structures to be added to biomes only for specific chunk generation settings now.",
    "head_branch": "biome_api_restoration_1.18",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Biome API without Overworld for now [1.18] (#1732)\n\n* Restore Biome API as far as possible. Removed Overworld Biome additions for now until a new API can be worked out while the Vanilla changes stabilize.\r\n\r\n* Now with more checkstyle."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623079f0ac82a74541b227e",
    "number": 1731,
    "body": "New JFR option to server main needs to be added to the Mixin locals.\r\n\r\nThis should fix the build and running game tests.\r\n",
    "head_branch": "1.18",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix running game tests / build [1.18] (#1731)\n\n* Fix running game tests.\r\n\r\n* Fix dimension api bugfix mixin. Of note: The Vanilla bug is still present, and the bugfix still needed.\r\n\r\n* Fix references to unmatched RegistryOps method."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307a00ac82a74541b227f",
    "number": 1730,
    "body": "These fixes allow the testmod to go ingame for the structure-api and the test structure will spawn correctly in a superflat world (which the changes relate to).\r\n\r\nStructures are no longer linked to Biomes via an instance field  in the Biome class. Instead they are linked by registry keys. This means that standard biome structure start rules also apply to superflat worlds, and their biomes (default=PLAINS).\r\n\r\nThe superflat chunk generator now has its own StructuresConfig object, which only contains a hardcoded list of structures.\r\nChanges the FabricStructureBuilder to allow adding structures to this default list.",
    "head_branch": "structure-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixes the structure API for 1.18. (#1730)\n\nStructures are no longer linked to Biomes via an instance field  in the Biome class. Instead they are linked by registry keys. This means that standard biome spawning rules also apply to superflat worlds, instead of the hardcoded list of structures linked with superflat worlds by default. Changes the FabricStructureBuilder to allow adding structures to this default list."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307a10ac82a74541b2280",
    "number": 1729,
    "body": null,
    "head_branch": "compile-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Compile Fixes (#1729)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307a20ac82a74541b2281",
    "number": 1727,
    "body": "I don't know how to write this in technical babble so I'll be blunt about it.\r\n\r\nSkyProperties are hardcoded so need a way to build and register custom ones.\r\n\r\nCustom Sky/Cloud/Weather rendering already requires mixins so I just make hooks for them.\r\n\r\nAn example of why having custom Sky Rendering hooked this way is a mod I personally work on, Dimensional Doors.\r\n\r\nIn the new datapack dungeon system, pockets can have various attributes. Among them is the ability to specify the sky rendering of other dimensions as if they were self contained demiplanes of D&D. \r\n\r\nAnother example where this PR would be useful is the fabric port of Twilight Forest that current has a completely custom SkyProperties class and custom Sky/Weather renderers.\r\n\r\n```java\r\nDimensionRenderingRegistry.setSkyRenderer(World.OVERWORLD, (world, matrices, tickDelta) -> {\r\n    // Custom sky Rendering code\r\n});\r\n```",
    "head_branch": "environmental-renderers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Environmental renderers (#1727)\n\n* Environmental Renderers\r\n\r\n* Remove defunt hideClouds and hideWeather\r\n\r\n* Pushed missing License\r\n\r\n* Push checkstyle fixes\r\n\r\n* remove unused\r\n\r\n* Unwrapped the test mod sky rendering.\r\n\r\n* Added a first attempt at javadoc.\r\n\r\n* Forgot a blank line\r\n\r\n* Moved Environment references out of class\r\n\r\n* Moved Lamda functions for fog override, thick fog usage and fog color adjustment to their own interfaces and gave them proper javadoc.\r\n\r\n* Made FabricSkyProperties private\r\n\r\n* PURGE THE H...I mean FabricSkyPropertyBuilder and FabricSkyProperties.\r\n\r\n- Reverted unintentional mixin changes\r\n- Fix various typo errors that were pointed out.\r\n- Added missing javadocs and added the ability to override.\r\n\r\n* Forgot some pluggin in some overrides.\r\n\r\n* Added missing javadoc suggestion\r\n\r\n* Changed api a bit so that it fires a exception if renderer not being overridden and one already exists.\r\n\r\n* Split Implemtnation and Interface\r\n\r\n* Forgot a license\r\n\r\n* Added WorldRenderContext to Renderers\r\n\r\n* Added logging\r\n\r\n* Added missing javadocs and removed the override option.\r\n\r\n* Removed INSTANCE\r\n\r\n* Environmental Renderers\r\n\r\n* Remove defunt hideClouds and hideWeather\r\n\r\n* Pushed missing License\r\n\r\n* Push checkstyle fixes\r\n\r\n* remove unused\r\n\r\n* Unwrapped the test mod sky rendering.\r\n\r\n* Added a first attempt at javadoc.\r\n\r\n* Forgot a blank line\r\n\r\n* Moved Environment references out of class\r\n\r\n* Moved Lamda functions for fog override, thick fog usage and fog color adjustment to their own interfaces and gave them proper javadoc.\r\n\r\n* Made FabricSkyProperties private\r\n\r\n* PURGE THE H...I mean FabricSkyPropertyBuilder and FabricSkyProperties.\r\n\r\n- Reverted unintentional mixin changes\r\n- Fix various typo errors that were pointed out.\r\n- Added missing javadocs and added the ability to override.\r\n\r\n* Forgot some pluggin in some overrides.\r\n\r\n* Added missing javadoc suggestion\r\n\r\n* Changed api a bit so that it fires a exception if renderer not being overridden and one already exists.\r\n\r\n* Split Implemtnation and Interface\r\n\r\n* Forgot a license\r\n\r\n* Added WorldRenderContext to Renderers\r\n\r\n* Added logging\r\n\r\n* Added missing javadocs and removed the override option.\r\n\r\n* Removed INSTANCE\r\n\r\n* Fixed Issues\r\n\r\n* Fixed formatting issue.\r\n\r\n* completed Juuxl's suggestions and removed null check on adding skyproperties. Changed SkyProperties registering to take an Identifier. Registration turns out to be only adding new options to the \"effects\" entry of dimension type jsonjson.\r\n\r\n* Forgot to reenable this.\r\n\r\n* Just did suggested tweaks\r\n\r\n* Changed SkyProperties to DimensionEffects\r\n\r\n* Pushed suggestions of Haykam and apple502j\r\n\r\n* Added missing changes from sky properties to dimension effects.\r\n\r\n* Corrected me being inconsistent.\r\n\r\n* Forgot to remove import.\r\n\r\n* Impliments \r\n\r\nhttps://github.com/FabricMC/fabric/pull/1727#discussion_r734988305\r\nhttps://github.com/FabricMC/fabric/pull/1727#discussion_r734988265\r\n\r\n* Implements https://github.com/FabricMC/fabric/pull/1727#discussion_r730429748\r\n\r\n* Last minute tweak. Runnable that controls fog runs right before dimension spefific rendering is done. Based on more subtle issues discovered while working api with twilight forest.\r\n\r\nCo-authored-by: AlphaMode <AlphaModeYT@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662307a20ac82a74541b2282",
    "number": 1726,
    "body": "Keybinding registry's exceptions and returns have been overcomplicated and confused.\r\n**What's Changed?**\r\n```java\r\nif (existingKeyBindings == binding) {\r\n\tthrow null;\r\n}\r\n``` \r\nthrowing null is not a shorthand but a de-reference of null, causing a `NullPointerException` as a result. This abstracts the exception making. It has been replaced with an `IllegalArgumentException` with a suitable description.\r\n```java\r\n... if (existingKeyBindings.getTranslationKey().equals(binding.getTranslationKey())) {\r\n\tthrow new RuntimeException(\"...\");\r\n}\r\n``` \r\nThrowing a `RuntimeException` is very bad because it makes catching fabric specific exceptions difficult. It has instead been replaced with `IllegalArgumentException`. This makes more sense because... it's an illegal argument. You can't register two keybindings with an equal ID.\r\n```java\r\nreturn moddedKeyBindings.add(binding) ? binding : null;\r\n```\r\nthis is completely useless. `add()` always returns true.",
    "head_branch": "1.17",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307a30ac82a74541b2283",
    "number": 1701,
    "body": "Per the spec, `InvalidateRenderStateCallback` should trigger:\r\n```\r\n ... when the world renderer reloads, usually as result of changing resource pack\r\n or video configuration, or when the player types F3+A in the debug screen.\r\n ```\r\n\r\nWhen `InvalidateRenderStateCallback` was made, there was only one `reload()` method in `WorldRenderer`. Sometime later (I didn't track down precisely when) another method was mapped to `reload()` that accepts a `ResourceManager` parameter and is only called on resource reload.  It comes first in the class, so now `InvalidateRenderStateCallback` does not trigger on F3+A.\r\n\r\nThis PR restores the original, intended behavior of `InvalidateRenderStateCallback` by making the mixin target fully qualified.",
    "head_branch": "1.17",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix InvalidateRenderStateCallback only firing on resource reload (#1701)\n\nCo-authored-by: grondag <>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307a40ac82a74541b2284",
    "number": 1700,
    "body": "Ensure that Inventory wrappers will try to mutate the backing stack as much as possible. In many cases, MC code captures a reference to the ItemStack so we want to edit that stack directly and not a copy whenever we can. Obviously this can't be perfect, but we try to cover as many cases as possible.\r\n\r\nThis is the kind of change that makes me happy I wrote tests. :smile:",
    "head_branch": "transfer-api-item-stacks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Work around vanilla capturing ItemStack references (#1700)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307a50ac82a74541b2285",
    "number": 1699,
    "body": null,
    "head_branch": "fbetb-add-blocks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add methods to the FabricBlockEntityTypeBuilder class for adding additional blocks (#1699)\n\n* Add methods to the FabricBlockEntityTypeBuilder class for adding additional blocks\r\n\r\n* Fix the FabricBlockEntityTypeBuilder class creating a fixed-size initial blocks list\r\n\r\n* Document the FabricBlockEntityTypeBuilder#addBlock method\r\n\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>\r\n\r\n* Document the FabricBlockEntityTypeBuilder#addBlocks method\r\n\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>\r\n\r\n* Add tests for the FabricBlockEntityTypeBuilder class\r\n\r\n* Fix license violations in the BlockEntityTypeBuilderTest class\r\n\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307a60ac82a74541b2286",
    "number": 1696,
    "body": "- Brings the gradle changes inline with 1.17\r\n- Allows me to use it on my arm mac :)\r\n\r\nMade a PR to make sure GHA can still build it.",
    "head_branch": "loom0.9.116",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update loom and gradle. Requires J16 to build, still targets J8 (#1696)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307a70ac82a74541b2287",
    "number": 1695,
    "body": null,
    "head_branch": "tooltip-component",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "TooltipComponent API (#1695)\n\n* TooltipComponent API\r\n\r\n* Add warning"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662307a70ac82a74541b2288",
    "number": 1692,
    "body": "Gets it up to date on mappings, and makes 1.18 exp snapshots easier.",
    "head_branch": "loom0.9",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update Gradle/Loom and mappings. (#1692)\n\n* Update Gradle/Loom and mappings.\r\n\r\n* Fix deprecations and enforce\r\n\r\n* Review feedback\r\n\r\n* More cleanup and deprecation fixes."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307a80ac82a74541b2289",
    "number": 1689,
    "body": "Canceling a block break event on a block entity currently resets the block back to its data-less state. For example a steve head, blank sign and banners just disappear.",
    "head_branch": "fix_block_break_cancel",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Send block entity update packet along with regular block update packet (#1689)\n\n* Send block entity update packet along with regular block update packet\r\n\r\n* Fix style"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307a90ac82a74541b228a",
    "number": 1688,
    "body": "Allows registering a custom mapping from `TooltipData` to `TooltipComponent`.\r\n\r\nUnfortunately this is done by vanilla in the static `TooltipComponent#of` and mixin doesn't allow injecting into interface methods, even if they are static. So I used a mixin plugin to overwrite the method through ASM. This is the first time I use ASM, so it may not be optimal. Perhaps injecting right before the exception instead of throwing would be suitable as well, but then I'd have to learn how to do that. :smile:",
    "head_branch": "tooltip-component",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307aa0ac82a74541b228b",
    "number": 1687,
    "body": "PR for #1684:\r\n\r\n> The `fabric-rendering-fluid` provides an easy and compatible way to assign custom textures to modded fluid blocks. However, when it comes to more customized implementations of fluid blocks, the builtin fluid renderer may not be enough.\r\n> \r\n> As an example, I'll use the idea of a fluid that acts entirely upside down (there could be actual uses for that). The default `FlowingFluid` implementation does not work for this, so this needs a custom implementation of `Fluid`: `UpwardsFlowingFluid`. Implementing and registering the custom fluid block is not an issue, but the vanilla fluid renderer is not made to render fluid blocks upside down. Instead, we want a custom fluid renderer implementation to render the fluid upside down.\r\n\r\n```java\r\nFluidRendererRegistry.INSTANCE.registerCustomRenderer(ModFluids.AIR, HiddenFluidRenderer.INSTANCE);\r\nFluidRendererRegistry.INSTANCE.registerCustomRenderer(ModFluids.FLOWING_AIR, HiddenFluidRenderer.INSTANCE);\r\n```\r\n\r\n```java\r\npublic class HiddenFluidRenderer implements CustomFluidRenderer {\r\n    public static final HiddenFluidRenderer INSTANCE = new HiddenFluidRenderer();\r\n\r\n    @Override\r\n    public boolean renderFluid(BlockPos pos, BlockRenderView world, VertexConsumer vertexConsumer, FluidState state) {\r\n        // Mods could implement completely custom rendering here. This could be useful for blocks too, something to consider\r\n        \r\n        // True is returned if any face is tessellated, false otherwise\r\n        return false;\r\n    }\r\n}\r\n```\r\n\r\nThis PR adds the ability to register custom renderers for modded fluids, or vanilla fluids if wanted. A custom fluid renderer overrides `FluidRenderHandler`s for the fluids the renderer is registered for, but the renderer can still decide to look up the desired fluid textures through the `FluidRenderHandler`.\r\n\r\n**Overview of the changes**\r\n- `FluidRenderHandlerRegistry` is now `FluidRenderRegistry`, and `FluidRenderHandlerRegistry` is kept as a deprecated compatibility wrapper.\r\n  - `get` is now `getRenderHandler`, with `get` being kept as deprecated compatibility proxy.\r\n  - `register` is now `registerRenderHandler`, with `register` being kept as deprecated compatibility proxy.\r\n- `FluidRenderRegistry` now allows the registry of `CustomFluidRenderer`s, alongside `FluidRenderHandlers`.\r\n  - Similar `registerCustomRenderer` and `getCustomRenderer` exist now to register/get the custom renderers\r\n- `CustomFluidRenderer.DEFAULT` delegates to the vanilla fluid renderer directly\r\n- ~~A new mixin into `BlockRenderManager` redirects the default fluid renderer to the custom fluid renderer, if one is registered for the fluid being rendered.~~ (Done via existing mixin now)\r\n- A `DefaultLikeFluidRenderer` exists that can be instantiated/inherited for more customized, but default fluid rendering.\r\n- It is now possible to return a glass overlay sprite for a custom fluid by returning a third sprite in the sprite array.\r\n- A `FluidOverlayBlock` interface is added that blocks can implement to enforce an overlay texture instead of a falling fluid texture where the fluid is seen through the block. Comes in handy where blocks cannot extend `TransparentBlock` anymore because they already extend another block type.\r\n\r\n**In other words**\r\n- Fluids can now have entirely custom renderers\r\n- Glass overlay sprites can now be specified as part of the fluid render handler\r\n- It is now possible to make any custom block have a fluid overlay texture (instead of the flowing texture)",
    "head_branch": "1.17",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Custom fluid renderers and enhanced vanilla fluid renderer customization (#1687)\n\n* Implement custom fluid rendering\r\n\r\n* Move custom renderers in FluidRenderer mixin and add overlay sprite support to FluidRenderHandlers\r\n\r\n* Add vanilla-like fluid renderer. Maybe very unnecessary, might remove.\r\n\r\n* Optimize imports\r\n\r\n* Allow custom fluid renderers to call the default renderer. Re-add DEFAULT.\r\n\r\n* Add interface to implement by blocks that enforces overlay texture on fluids\r\n\r\n* Some comments\r\n\r\n* Simplify API and remove DefaultLikeFluidRenderer\r\n\r\n* Make simple renderer overlay texture nullable\r\n\r\nCo-authored-by: Technici4n <13494793+Technici4n@users.noreply.github.com>\r\n\r\n* Expand test mod\r\n\r\n* Checkstyle and licenses\r\n\r\n* Easy shortcut for custom colored vanilla water fluids\r\n\r\n* Easy way to register a renderer for two (still+flowing) fluids\r\n\r\n* Update fabric-rendering-fluids-v1/src/main/java/net/fabricmc/fabric/api/client/render/fluid/v1/FluidRenderHandlerRegistry.java\r\n\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>\r\n\r\n* Update fabric-rendering-fluids-v1/src/main/java/net/fabricmc/fabric/mixin/client/rendering/fluid/MixinFluidRenderer.java\r\n\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>\r\n\r\nCo-authored-by: Technici4n <13494793+Technici4n@users.noreply.github.com>\r\nCo-authored-by: modmuss50 <modmuss50@gmail.com>\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662307ab0ac82a74541b228c",
    "number": 1685,
    "body": "`Transaction#getCurrentUnsafe` makes my life a bit easier when implementing support for AE2. It will also be useful for LBA should it attempt to have compatibility.\r\n\r\nAdding a `fabric_` prefix will prevent conflicts with older versions of FastTransferLib that used to contain the exact same `ItemMixin` (with a `cachedItemVariant` field). `@Unique` only prevents conflicts with the mixin target, so it is effectively useless in 99% of the cases.",
    "head_branch": "get-current-transaction",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Transaction#getCurrentUnsafe and fix mixin fields (#1685)\n\n* Add Transaction#getCurrentUnsafe and fix mixin fields\r\n\r\n* Update fabric-transfer-api-v1/src/main/java/net/fabricmc/fabric/impl/transfer/transaction/TransactionManagerImpl.java\r\n\r\nCo-authored-by: BasiqueEvangelist <basiqueevangelist@yandex.ru>\r\n\r\nCo-authored-by: BasiqueEvangelist <basiqueevangelist@yandex.ru>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307ac0ac82a74541b228d",
    "number": 1681,
    "body": "Closes #1679 and fixes #1680. Also clarified what the \"sleeping direction\" means in jd.\r\n\r\nThis probably needs backporting to 1.16 as well.",
    "head_branch": "sleeping-event-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Sleeping event fixes (#1681)\n\n* Un-hardcode FACING property checks from only BedBlocks\r\n\r\n* Use a better injection point for EntitySleepEvents.ALLOW_BED\r\n\r\n* Fix #1680\r\n\r\n* Bump entity events version\r\n\r\n* Clarify javadoc\r\n\r\n* Let's not forget license headers\r\n\r\n* Add a note about the vanilla bug\r\n\r\n* Update BedBlockMixin.java"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307ac0ac82a74541b228e",
    "number": 1669,
    "body": "This is an extension of the event system to allow ordering constraints between event listeners.\r\n\r\n## Design points\r\n- No direct ordering constraints between listeners, as they cannot be identified reliably.\r\n- No integer priorities, and no fixed `EventPriority` enum (or a similar limited and hardcoded set of priorities).\r\n- An arbitrary number of event phases may be added, with **soft** ordering constraints w.r.t. other phases (a failure to resolve the constraints should not crash the game). Adding both soft and hard ordering constraints might also be possible, but I wasn't able to figure out how to implement them.\r\n- Listeners may be added to any phase.\r\n- This ordering system should only be used as a last resort. When it is clear from the start that multiple phases are necessary (for example `ALLOW`, `ADD`, `MODIFY`), multiple events should still be created as usual. However, the phase system allows adding ordering constraints beyond what the API author originally thought of.\r\n\r\n## Examples\r\n### Damage canceling\r\nAn example use case: some potion mod registers an `AllowDamage` handler for an invincibility potion, and some tech mod registers an `AllowDamage` handler for its powered armor. Ideally, the powered armor callback should be executed later, to avoid consuming energy when the potion already prevents the damage. This is impossible to predict when adding this kind of event.\r\nThis is how this PR would address it:\r\n```java\r\n// Define a set of standard phases in the API (names just for illustration).\r\npublic static final Identifier\r\n  FREE = new Identifier(\"fabric\", \"free\"), // for free damage cancel (no cost).\r\n  RENEWABLE = new Identifier(\"fabric\", \"renewable\"), // for renewable damage cancel (e.g. power armor)\r\n  DEFAULT = Event.DEFAULT_PHASE,// default\r\n  SINGLE_USE = new Identifier(\"fabric\", \"single_use\"); // for single use expensive cancel\r\n// Define the event\r\nEvent<AllowDamage> ALLOW_DAMAGE = EventFactory.createWithPhases(AllowDamage.class, factory, FREE, RENEWABLE, DEFAULT, SINGLE_USE);\r\n// Register a few listeners:\r\nALLOW_DAMAGE.register(FREE, (player, damage) -> return !player.hasPotion(INVINCIBILITY)); // potion handler\r\nALLOW_DAMAGE.register(RENEWABLE, (player, damage) -> return !(isWearingPoweredArmor(player) && tryUseEnergy(player, damage))); // powered armor\r\n// etc...\r\n```\r\n\r\n### Override the transfer API's item fallback\r\nA somewhat involved use case, that would be useful to port TechReborn to the item transfer API: if API Lookup fallback providers were exposed as an `Event<BlockApiProvider<A, C>>`, a mod could override the default wrapping of `Inventory` as `Storage<ItemVariant>` in the item transfer API by registering its own fallback provider in an early event phase.\r\n\r\n```java\r\ninterface BlockApiLookup<A, C> {\r\n    // Assume this is added:\r\n    Event<BlockApiProvider<A, C>> fallback();\r\n    default void registerFallback(BlockApiProvider<A, C> provider) {\r\n        fallback().register(provider);\r\n    }\r\n}\r\n// Default behavior:\r\nItemStorage.SIDED.registerFallback((world, pos, be, state, direction) -> {\r\n    if (be instanceof MyModBe) {\r\n        // runs after fabric's compat with Inventory, this will never run if MyModBe implements Inventory\r\n    }\r\n});\r\n// With event phases:\r\nIdentifier phase = new Identifier(\"mymod\", \"before_fabric\");\r\nItemStorage.SIDED.fallback().addPhaseOrdering(phase, Event.DEFAULT_PHASE);\r\nItemStorage.SIDED.fallback().register(phase, (world, pos, be, state, direction) -> {\r\n    if (be instanceof MyModBe) {\r\n        // runs BEFORE fabric's compat with Inventory, this will run even if MyModBe implements Inventory!\r\n    }\r\n});\r\n// In practice fabric would provide this early phase, for this exact use case.\r\n```\r\n\r\nAny comment is welcome! :smile:",
    "head_branch": "event-phases",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add event phases (#1669)\n\n* Proof of concept\r\n\r\n* Simplify and document\r\n\r\n* Allow events to be registered with default phases\r\n\r\n* Use modified Kosaraju for the toposort, and add test for cyclic dependency graphs\r\n\r\n* Separate phase-related functionality in an EventPhase class\r\n\r\n* Revert \"Separate phase-related functionality in an EventPhase class\"\r\n\r\nThis reverts commit e433f348f4d3d056e6c5ccf1802d11103e3fe961.\r\n\r\n* Ensure that the phase order is deterministic\r\n\r\n* Add pretty graphs\r\n\r\n* Add a test, fix a bug, only do one sort for every constraint registration"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662307ad0ac82a74541b228f",
    "number": 1665,
    "body": "Added features:\r\n\r\n* Fix `PlayerInventoryStorage#offerOrDrop` not working server-side!\r\n* Add tentative `InventoryProvider` support for the Item API. Mods such as Tech Reborn that used `InventoryProvider` as a way to delegate to an internal `Inventory` are now supported correctly out of the box.\r\n* [`SingleVariantItemStorage`](https://github.com/Technici4n/fabric/blob/transfer-api-helpers/fabric-transfer-api-v1/src/main/java/net/fabricmc/fabric/api/transfer/v1/storage/base/SingleVariantItemStorage.java): the base implementation for tanks and similar items. Supports stacking just fine, by emptying/filling one by one. The testmod shows an [implementation example](https://github.com/Technici4n/fabric/blob/e9fa25dfe0fdabfdc8e7929f2dc37d80ee906f0e/fabric-transfer-api-v1/src/testmod/java/net/fabricmc/fabric/test/transfer/unittests/SingleVariantItemStorageTests.java#L125).\r\n* [`FilteringStorage`](https://github.com/Technici4n/fabric/blob/transfer-api-helpers/fabric-transfer-api-v1/src/main/java/net/fabricmc/fabric/api/transfer/v1/storage/base/FilteringStorage.java): pluggable `canInsert`/`canExtract` facade for a `Storage`.\r\n* `simulateInsert` and `simulateExtract` default implementations for `Storage`. I could not add one for `StorageView` otherwise it would conflict with the one from `Storage` for classes that implement both interfaces.\r\n* Some goodies regarding `InventoryStorage` and `PlayerInventoryStorage`.\r\n\r\nCloses #1664.",
    "head_branch": "transfer-api-helpers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Transfer API: continuous fluid-containing items and other base implementations. (#1665)\n\n* Transfer API: continuous fluid-containing items and other base implementations\r\n\r\n* Update player inventory storage TODO\r\n\r\n* Add PlayerInventoryStorage test\r\n\r\n* getHandSlot() and small fixes\r\n\r\n* Use simulateExtract in findExtractableContent\r\n\r\n* Apply review\r\n\r\n* Post-rebase fixes\r\n\r\n* Add tentative InventoryProvider support\r\n\r\nCo-authored-by: Player <player@player.to>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307ae0ac82a74541b2290",
    "number": 1660,
    "body": null,
    "head_branch": "fix-early-dynamicregistrymanager",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix DynamicRegistryManager being initialized too early (#1660)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307af0ac82a74541b2291",
    "number": 1656,
    "body": "Closes #1644.\r\n\r\nExample recipe\r\n```json\r\n{\r\n  \"type\": \"minecraft:crafting_shapeless\",\r\n  \"ingredients\": [\r\n    {\r\n      \"item\": \"minecraft:stick\"\r\n    }\r\n  ],\r\n  \"result\": {\r\n    \"item\": \"minecraft:diamond\"\r\n  },\r\n  \"fabric:conditions\": [\r\n    {\r\n      \"condition\": \"fabric:not\",\r\n      \"value\": {\r\n        \"condition\": \"fabric:all_mods_loaded\",\r\n        \"values\": [\r\n          \"a\"\r\n        ]\r\n      }\r\n    }\r\n  ]\r\n}\r\n```\r\nExample condition implementation, with the helper to generate json entries too:\r\n```java\r\n// ID will be used multiple times\r\n\tprivate static final Identifier MODS_LOADED = new Identifier(\"fabric:mods_loaded\");\r\n// Only API we need is the json provider\r\n\tpublic static ConditionJsonProvider modsLoaded(String... modIds) {\r\n\t\treturn new ConditionJsonProvider() {\r\n\t\t\t@Override\r\n\t\t\tpublic void serialize(JsonObject object) {\r\n\t\t\t\tJsonArray array = new JsonArray();\r\n\t\t\t\tfor (var modId : modIds) {\r\n\t\t\t\t\tarray.add(modId);\r\n\t\t\t\t}\r\n\t\t\t\tobject.add(\"values\", array);\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic Identifier getConditionIdentifier() {\r\n\t\t\t\treturn MODS_LOADED;\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n// Register the condition\r\n\tstatic {\r\n\t\tResourceConditions.register(MODS_LOADED, object -> {\r\n\t\t\tJsonArray array = JsonHelper.getArray(object, \"values\");\r\n\r\n\t\t\tfor (JsonElement element : array) {\r\n\t\t\t\tif (element.isJsonPrimitive()) {\r\n\t\t\t\t\tif (!FabricLoader.getInstance().isModLoaded(element.getAsString())) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new JsonParseException(\"Invalid mod id entry: \" + element);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\t}\r\n```\r\n\r\nPlease let me know what you think of the approach, and which additional conditions should be provided.\r\n\r\nTODO:\r\n- [x] Recipe conditions.\r\n- [x] Integration in the datagen API.\r\n- [x] Validating testmod.\r\n- [x] Document the conditions we provide by default.\r\n- [x] Document where we check for conditions.",
    "head_branch": "recipe-conditions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "* Fabric Resource Conditions, first draft (#1656)\n\n* First completed draft\r\n\r\n* Update PR, should be close to ready now\r\n\r\n* Add fluid/item_tags_populated conditions\r\n\r\n* Log processed resource with trace log level\r\n\r\n* Use debug instead of trace log level\r\n\r\n* Apply suggestions from code review\r\n\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>\r\n\r\n* Code review suggestions\r\n\r\n* writeAdditional -> writeParameters\r\n\r\n* Apply suggestions from code review\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>\r\n\r\n* CONDITION_ID -> CONDITION_ID_KEY"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662307b00ac82a74541b2292",
    "number": 1655,
    "body": null,
    "head_branch": "backport-1652",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Backport \"Reorganize transfer API testmod and rework item api injections (#1652)\" to 1.16 (#1655)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662307b00ac82a74541b2293",
    "number": 1652,
    "body": null,
    "head_branch": "rework-item-api-injections",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Reorganize transfer API testmod and rework item api injections (#1652)\n\n* Reorganize the transer API testmod\r\n\r\n* Rework mixins. Closes #1649."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307b10ac82a74541b2294",
    "number": 1647,
    "body": null,
    "head_branch": "fix-1646",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix droppers deleting items when they fail to insert (#1646) (#1647)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307b20ac82a74541b2295",
    "number": 1640,
    "body": "This PR adds a helper function into `BiomeSelectors` that accept a biome tag.\r\nAlso contains changes from #1571 for it to actually work.\r\n\r\n<details>\r\n<summary>A screenshot</summary>\r\n\r\n![2021-08-18_11 40 55](https://user-images.githubusercontent.com/21150434/129838468-9c055d6e-d06e-4da9-8314-dde0f4b0dd28.png)\r\n\r\n</details>",
    "head_branch": "biome-tag-selector",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add biome tag selector (#1640)\n\n* Move biome modifications after datapack loaded\r\n\r\n* Biome tag selector"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307b30ac82a74541b2296",
    "number": 1639,
    "body": null,
    "head_branch": "item-api-backport",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Backport \"Fabric Transfer API: item transfer and fluid-containing items.\" (#1553) to 1.16 (#1639)\n\n* Initial cherry-pick\r\n\r\n* Adapt to 1.16 minecraft and naming, and java 8\r\n\r\n* Fix checkstyle"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662307b40ac82a74541b2297",
    "number": 1638,
    "body": "Closes #1636.",
    "head_branch": "register-for-single-be",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add BlockApiLookup#registerForBlockEntity (#1638)\n\n* Add BlockApiLookup#registerForBlockEntity\r\n\r\n* Typo"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307b50ac82a74541b2298",
    "number": 1637,
    "body": null,
    "head_branch": "fix-biome-api-typo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix typo (#1637)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307b50ac82a74541b2299",
    "number": 1634,
    "body": null,
    "head_branch": "1.17",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307b60ac82a74541b229a",
    "number": 1633,
    "body": "Added 9 entity events related to sleep:\r\n- starting to sleep\r\n- waking up\r\n- checking if a block is a valid bed for an entity (useful for custom beds)\r\n- modifying the sleeping direction (useful for custom beds)\r\n- only for players:\r\n  - an \"allow sleep time\" event\r\n  - an \"allow setting spawn\" event\r\n  - an \"allow sleeping\" event (as in, allow to start sleeping)\r\n  - an \"allow nearby monsters\" event that can also be used to do custom monster checks (to force a failed monster check)\r\n  - an \"allow resetting time\" event (whether the player counts towards the minimum for skipping the night)",
    "head_branch": "sleeping-events",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add sleeping events (#1633)\n\n* Add sleeping events\r\n\r\n* Fix wake up event triggering on every wakeUp() call\r\n\r\n* Make direction modifications stackable\r\n\r\n* Simplify by not using Optional in MODIFY_SLEEPING_DIRECTION\r\n\r\n* Add two new events\r\n\r\n* Let's call it VERIFY_BED\r\n\r\n* And it's ALLOW_BED now\r\n\r\n* Add the rest of the events\r\n\r\n* Clarify docs\r\n\r\n* Expand docs, add missing vanillaResult\r\n\r\n* WAKE_UP -> STOP_SLEEPING, javadoc\r\n\r\n* Make sleepingPos checks more consistent in LivingEntityMixin"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307b70ac82a74541b229b",
    "number": 1632,
    "body": "Spiritual successor to a small part of #1125 (which I feel should still be resurrected once again, but I'm not the one to do that).\r\n\r\n- Adds registries for flattenable blocks (use with shovel), strippable blocks (use with axe) and tillable blocks (use with hoe).\r\n- The registries are close to vanilla, so there is no support for tags (unlike the flammable block registry). If someone needs it, I might look into making them `Block2ObjectMap`s.\r\n- The tillable block registry includes a few extra methods for the most common registration types (block -> block state, block -> block state + drop an item) that use vanilla methods, but also exposes the raw functionality.",
    "head_branch": "fst-registries",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add flattening, stripping and tilling registries (#1632)\n\n* Add flattening, stripping and tilling registries\r\n\r\n* Where'd the spaces come from?\r\n\r\n* Clarify docs\r\n\r\n* Better overloads for TillableBlockRegistry.register\r\n\r\n* Mutablise AxeItem.STRIPPED_BLOCKS if needed\r\n\r\n* Remove simplest TillableBlockRegistry.register overload because the default predicate is for farmland\r\n\r\n* Add test mod\r\n\r\n* Update fabric-content-registries-v0/src/main/java/net/fabricmc/fabric/api/registry/TillableBlockRegistry.java\r\n\r\nCo-authored-by: haykam821 <24855774+haykam821@users.noreply.github.com>\r\n\r\nCo-authored-by: haykam821 <24855774+haykam821@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307b80ac82a74541b229c",
    "number": 1629,
    "body": "Closes #1534. Fixes #1533.\r\n\r\n- Deprecated `FabricBlockSettings.breakByTool` in favour of the two following features:\r\n- (1) Added `#fabric:mineable/sword` and `#fabric:mineable/shears` to mirror `#mineable/[pickaxe|axe|shovel|hoe]`\r\n- (2) Added dynamic mining level tags (like vanilla's `#needs_diamond_tool`)\r\n  - The format is `fabric:needs_tool_level_N` where *N* is the wanted mining level as an int (as described by [Yarn's docs](https://github.com/FabricMC/yarn/blob/1.17.1/src/constants/java/net/fabricmc/yarn/constants/MiningLevels.java))\r\n  - They can be used alongside vanilla tags, and when the wanted mining level is higher than what vanilla has tags for (eg. netherite)\r\n- Adds a new, much simpler mining level API containing a simple block state -> required mining level int getter. This does not catch mining levels registered with the deprecated `breakByTool` for modularity purposes!\r\n- Fixes #1533\r\n- Fixes effective checks failing for tagged tool items (that are in `#fabric:your_favourite_tool_tag` but aren't instances of `DynamicToolItem` or `ToolItem`)\r\n\r\nThis PR does not fix the tool attribute API's tests not actually testing the dynamic tool functionality, which is out of scope.",
    "head_branch": "module/mining-level-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add tag-based mining level API, fix and deprecate FabricBlockSettings.breakByTool (#1629)\n\n* Mining Level API, part 1\r\n\r\n* Fix incorrect netherite mining level in MiningLevelManager docs\r\n\r\n* Add some format checks in dynamic mining level tag checking\r\n\r\n* Add mining level API test mod\r\n\r\n* Grammar\r\n\r\n* Add cursed basic support for the tool attribute api\r\n\r\n* Fix tool attribute JD\r\n\r\n* Add proper compat for tool attribute api\r\n\r\nAlso fixes the remaining bugs in it!\r\n\r\n* Update license headers\r\n\r\n* stuff\r\n\r\n* better comments\r\n\r\n* more test mod work\r\n\r\n* more\r\n\r\n* Fix test mod\r\n\r\n* i'm done with this module\r\n\r\n* Address some code review things\r\n\r\n* Use Reference2IntMap (basically IdentityHashMap for int values)\r\n\r\n* Prefix mixin handlers with fabric$\r\n\r\n* Add missing license header\r\n\r\n* Update fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/api/object/builder/v1/block/FabricBlockSettings.java\r\n\r\n* Resolve liach's comment\r\n\r\n* Update to use TagFactory"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662307b90ac82a74541b229d",
    "number": 1622,
    "body": "```java\r\n// optional to impl FabricGameTest\r\npublic class ExampleFabricTestSuite implements FabricGameTest {\r\n\t/**\r\n\t * By overriding invokeTestMethod you can wrap the method call.\r\n\t * This can be used as shown to run code before and after each test.\r\n\t */\r\n\t@Override\r\n\tpublic void invokeTestMethod(TestContext context, Method method) {\r\n\t\tbeforeEach(context);\r\n\r\n\t\tFabricGameTest.super.invokeTestMethod(context, method);\r\n\r\n\t\tafterEach(context);\r\n\t}\r\n\r\n\tprivate void beforeEach(TestContext context) {\r\n\t\tSystem.out.println(\"Hello beforeEach\");\r\n\t\tcontext.setBlockState(0, 5, 0, Blocks.GOLD_BLOCK);\r\n\t}\r\n\r\n\tprivate void afterEach(TestContext context) {\r\n\t\tcontext.addInstantFinalTask(() ->\r\n\t\t\t\tcontext.checkBlock(new BlockPos(0, 5, 0), (block) -> block == Blocks.GOLD_BLOCK, \"Expect block to be gold\")\r\n\t\t);\r\n\t}\r\n\r\n\t@GameTest(structureName = \"fabric-game-test-api-v1-testmod:exampletestsuite.diamond\")\r\n\tpublic void diamond(TestContext context) {\r\n\t\tcontext.addInstantFinalTask(() ->\r\n\t\t\t\tcontext.checkBlock(new BlockPos(0, 2, 0), (block) -> block == Blocks.DIAMOND_BLOCK, \"Expect block to be diamond\")\r\n\t\t);\r\n\t}\r\n\r\n\t@GameTest(structureName = EMPTY_STRUCTURE)\r\n\tpublic void noStructure(TestContext context) {\r\n\t\tcontext.setBlockState(0, 2, 0, Blocks.DIAMOND_BLOCK);\r\n\r\n\t\tcontext.addInstantFinalTask(() ->\r\n\t\t\t\tcontext.checkBlock(new BlockPos(0, 2, 0), (block) -> block == Blocks.DIAMOND_BLOCK, \"Expect block to be diamond\")\r\n\t\t);\r\n\t}\r\n}\r\n```\r\n\r\nThis example has 2 tests, the first one uses a structure that can be manually built and exported using the test command. The 2nd test uses an empty structure provided via the api, this allows you to write code only tests. `invokeTestMethod` can be used to customise and extend the test method invocation, useful for before/after methods or having a custom context.\r\n\r\nThese tests can easily be ran headless via gradle:\r\n\r\n```groovy\r\nloom {\r\n\truns {\r\n\t\tgametest {\r\n\t\t\tserver()\r\n\t\t\tname = \"Game Test\"\r\n\t\t\tvmArg \"-Dfabric-api.gametest.server=true\"\r\n\t\t}\r\n\t}\r\n}\r\ntest.dependsOn runGametest\r\n```\r\n\r\nRegistered via entrypoints like so:\r\n\r\n```json\r\n  \"entrypoints\": {\r\n    \"fabric-game-test\" : [\r\n      \"net.fabricmc.fabric.test.test.ExampleFabricTestSuite\",\r\n      \"net.fabricmc.fabric.test.test.ExampleTestSuite\"\r\n    ]\r\n  }\r\n``",
    "head_branch": "gametest",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fabric Game Test API (#1622)\n\n* First proof of concept pass\r\n\r\n* Cleanup and fixes.\r\n\r\n* Checkstyle\r\n\r\n* Fix running.\r\n\r\n* Updated\r\n\r\n* Fix build\r\n\r\n* Cleanup + fixes.\r\n\r\n* Fix package\r\n\r\n* and test package\r\n\r\n* game-test -> gametest\r\n\r\n* Fix exclusion\r\n\r\n* Review feedback and fixes.\r\n\r\n* Remove comment\r\n\r\n* Review feedback.\r\n\r\n* Don't set the game instance\r\n\r\n* Fix\r\n\r\n* Work around shadowed fields from super classes not getting remapped... dejavu anyone?\r\n\r\nSee: https://github.com/FabricMC/fabric/commit/2e359e933a5a3e188c90c14f286d578f2aad290c#diff-0956caa3cd38a54f5910979f0cfd98198a93e4d585e111300f2f7ab7301ad122\r\n\r\n* Add mixin to exit with a non-zero exit code in case the test server fails to start.\r\n\r\n* Enable JUnit XML report generation.\r\n\r\nCo-authored-by: Sebastian Hartte <sebastian@hartte.de>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307ba0ac82a74541b229e",
    "number": 1620,
    "body": "Closes #1582.\r\n\r\nAlso adds a helper `FluidVariantRendering.getTooltip(FluidVariant)`.",
    "head_branch": "positional-fluid-variant-rendering",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow fluid variant colors to depend on the position (#1620)\n\n* Allow fluid variant colors to depend on the position\r\n\r\nAlso add a smarter FluidVariantRendering#getTooltip.\r\n\r\n* Add fluid variant rendering testmod\r\n\r\n* 255/256 is not 1\r\n\r\n* Actually it's in the top left"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307ba0ac82a74541b229f",
    "number": 1617,
    "body": null,
    "head_branch": "1.17",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "ItemGroup API: Remove return and call super so all others ItemStack's get appended (#1617)\n\n* Remove return and call super so all others ItemStack's get appended\r\n\r\n* Add method to FabricItemGroupBuilder to pass ItemGroup with appendItems and change stacksForDisplay to a BiConsumer\r\n\r\n* Update ItemGroupBuilder javadoc and add example to testmod\r\n\r\n* Remove leftover aw\r\n\r\n* Update fabric-item-groups-v0/src/main/java/net/fabricmc/fabric/api/client/itemgroup/FabricItemGroupBuilder.java\r\n\r\nCo-authored-by: liach <7806504+liach@users.noreply.github.com>\r\n\r\n* Update fabric-item-groups-v0/src/testmod/java/net/fabricmc/fabric/test/item/group/ItemGroupTest.java\r\n\r\nCo-authored-by: Technici4n <13494793+Technici4n@users.noreply.github.com>\r\n\r\n* Remove used import in ItemGroupTest\r\n\r\n* Clean up\r\n\r\n* Fix damn checkstyle\r\n\r\n* Change version to 0.3.0\r\n\r\nCo-authored-by: liach <7806504+liach@users.noreply.github.com>\r\nCo-authored-by: Technici4n <13494793+Technici4n@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662307bb0ac82a74541b22a0",
    "number": 1607,
    "body": "This PR reimplements ArmorRenderingRegistry, fixing #1532. This approach is more minimalist and consistent, mostly matching BuiltinItemRendererRegistry.",
    "head_branch": "1.17",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Re-implement ArmorRenderingRegistry (#1607)\n\n* reimplement ArmorRenderingRegistry\r\n\r\n* fix license headers\r\n\r\n* remove todo\r\n\r\n* move registry to static method\r\n\r\n* minor reformat\r\n\r\n* reduce api classes into one\r\n\r\n* reformat\r\n\r\n* make registry static\r\n\r\n* reformat\r\n\r\n* change Item in registry to ItemConvertible\r\n\r\n* register mixin properly this time\r\n\r\n* explain test mod\r\n\r\n* reformat\r\n\r\n* stricter null check"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307bc0ac82a74541b22a1",
    "number": 1606,
    "body": "Lossless compression only - 'oxipng -r -s -o max'",
    "head_branch": "1.17",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307bd0ac82a74541b22a2",
    "number": 1592,
    "body": "This makes a simple changelog based off the commit messages. See https://github.com/FabricMC/fabric-action-scripts/blob/main/src/changelog.ts for the code behind it.\r\n\r\nI have tested this in my own mod here: https://github.com/TechReborn/TechReborn/releases/tag/5.0.4-beta%2Bbuild.83\r\n\r\nShould also be quite useful for other mods/projects as there is no reason why anyone cannot use it.",
    "head_branch": "changelog",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Generate a changelog (#1592)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307be0ac82a74541b22a3",
    "number": 1581,
    "body": "Fixes https://github.com/FabricMC/fabric/issues/1580\r\n\r\nIt seems that Minecraft is using a different WorldChunk instance every time. So this uses a HashMap to workaround that issue. \r\n\r\nNo memory leak from there after generating ~1493k chunks with [chunky the pregenerator](https://github.com/pop4959/Chunky). (Although I spotted another memory leak from vanilla)\r\n\r\nPushing this onto a production server with a high playercount will make this problem much easier to reproduce. \r\n",
    "head_branch": "1.17-fixmemleak",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307be0ac82a74541b22a4",
    "number": 1571,
    "body": "This PR restores 1.16 behavior in which biomes would only be modified after datapacks loaded.\r\nNow the behavior will actually match the javadocs.",
    "head_branch": "biome-modification-after-datapack",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Move biome modifications after datapack loaded (#1571)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307bf0ac82a74541b22a5",
    "number": 1564,
    "body": "This is a major performance optimization.\r\n\r\nWithout this PR, on AOF4, the model loading worker thread takes ~17s.\r\nThe sampler results include such stack traces:\r\n![image](https://user-images.githubusercontent.com/13494793/125519719-934ff5f7-dd72-4a6c-acab-d940e2c3b34a.png)\r\n\r\nWith this PR, the worker thread takes ~11.5s.\r\n\r\nShould also fix #66 for good.",
    "head_branch": "resource-loader-faster",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Stop DefaultResourcePack scanning the entire classpath (#1564)\n\n* Stop DefaultResourcePack scanning the entire classpath\r\n\r\n* Use another approach to find the JAR\r\n\r\n* Make it work for filesystem assets as well (tested, it works!)\r\n\r\n* Only patch what is necessary"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307c00ac82a74541b22a6",
    "number": 1562,
    "body": "This PR adds `TagFactory<T>` that can be used to make tags for any given registry, works for both static or dynamic.\r\nThis PR also deprecates `TagRegistry` in favor of static factories in `TagFactory`.\r\n\r\n### Example\r\nTo make biome tags, what would you do is the following\r\n```java\r\nTagFactory<Biome> factory = TagFactory.of(Registry.BIOME_KEY, \"tags/biomes\");\r\nTag<Biome> biomeTag = factory.create(new Identifier(\"test:biomes\"));\r\n```\r\n\r\n### Problem with dynamic registries\r\nMinecraft calls `ServerResourceManager#reload` before loading dynamic registries, making tags for them failed to load if the tag mentions datapack entries because it's not yet resolved. The workaround that I can think of is to delay loading the dynamic reg tag until the registry finished loading.\r\n\r\n### Testmod\r\nThe testmod contains a really basic biome JSON, just to make sure the tag loading works.\r\n\r\nReplaces #1555 \r\nCloses #1467",
    "head_branch": "tag-factory",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Tag Factory API (#1562)\n\n* Tag factory\r\n\r\n* Add static biome tag factory to the API\r\n\r\n* Use SERVER_STARTING event\r\n\r\n* Use the ctor directly\r\n\r\n* Use the default BIOME factory\r\n\r\n* AccessorDynamicRegistryManager -> DynamicRegistryManagerAccess\r\n\r\n* Return Tag.Identified\r\n\r\n* Load dynamic registry tags right after datapack entries loaded\r\n\r\n* DynamicRegistryManagerAccess -> DynamicRegistryManagerAccessor\r\n\r\n* Fix grammar"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307c10ac82a74541b22a7",
    "number": 1560,
    "body": "",
    "head_branch": "fluid-api-1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix cauldrons for 1.16 (#1560)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662307c20ac82a74541b22a8",
    "number": 1555,
    "body": "Adds ability to register custom tag lists aside from built-in ones.\r\nThe mixin also makes the game doesn't crash when registering multiple tag lists with the same `registryKey` and `dataType`, it'll simply return the same list.\r\n\r\nContains test for both `RequiredTagList#add` and `TagRegistry#create` along with JSON only tag that doesn't mentioned in code.\r\n\r\nCloses #1467",
    "head_branch": "tag-list-registry",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307c20ac82a74541b22a9",
    "number": 1554,
    "body": "Closes #1476.\r\n\r\nUnlike adding the fuel items directly, calling `AbstractFurnaceBlockEntity.addFuel` checks that the fuel is not excluded in `#minecraft:non_flammable_wood`. This makes Fabric API fuels match the vanilla behaviour, which is also configurable via data packs.\r\n\r\n(I had to use an AW instead of an accessor due to SpongePowered/Mixin#399 - the two `addFuel` overloads broke the Mixin AP.)",
    "head_branch": "fuel-checks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix FuelRegistry not following vanilla checks for valid fuels (#1554)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307c30ac82a74541b22aa",
    "number": 1553,
    "body": "This PR expands #1356 to add an item transfer API, and item support for the fluid API. This PR is currently being tested in prod by Modern Industrialization, without issues so far.\r\n\r\nIf you want to test this, I am hosting experimental builds for in-dev testing:\r\n```groovy\r\nrepositories {\r\n    maven {\r\n        name = \"Technici4n\"\r\n        url = \"https://raw.githubusercontent.com/Technici4n/Technici4n-maven/master/\"\r\n        content {\r\n            includeGroup \"net.fabricmc.fabric-api\"\r\n        }\r\n    }\r\n}\r\ndependencies {\r\n    modImplementation(\"net.fabricmc.fabric-api:fabric-api-lookup-api-v1:1.3.0+b246072f13\")\r\n    modImplementation(\"net.fabricmc.fabric-api:fabric-transfer-api-v1:1.1.0-pre.04+648b8b6c18\")\r\n}\r\n```\r\n\r\n## Item API\r\nThe Item transfer API is very similar to the Fluid transfer API:\r\n* [`ItemVariant`](https://github.com/Technici4n/fabric/blob/item-transfer-api/fabric-transfer-api-v1/src/main/java/net/fabricmc/fabric/api/transfer/v1/item/ItemVariant.java) is a trivial adaptation of `FluidVariant` to items.\r\n* You will not be surprised to learn that the main interface for item transfer is `Storage<ItemVariant>`, of which instances can be retrieved through [`ItemStorage`](https://github.com/Technici4n/fabric/blob/item-transfer-api/fabric-transfer-api-v1/src/main/java/net/fabricmc/fabric/api/transfer/v1/item/ItemStorage.java).\r\n* `Inventory`, `SidedInventory` and `PlayerInventory` compatibility is provided by the public [`InventoryStorage`](https://github.com/Technici4n/fabric/blob/item-transfer-api/fabric-transfer-api-v1/src/main/java/net/fabricmc/fabric/api/transfer/v1/item/InventoryStorage.java) and [`PlayerInventoryStorage`](https://github.com/Technici4n/fabric/blob/item-transfer-api/fabric-transfer-api-v1/src/main/java/net/fabricmc/fabric/api/transfer/v1/item/PlayerInventoryStorage.java) helpers. Modders can feel free to use them for their needs, and this PR also uses the wrappers directly to register a fallback in `ItemStorage`.\r\n\r\nCompatibility with vanilla droppers and hoppers is included as well: (notice how clean the API is to use! :smile:)\r\n* [`DropperBlockMixin`](https://github.com/Technici4n/fabric/blob/item-transfer-api/fabric-transfer-api-v1/src/main/java/net/fabricmc/fabric/mixin/transfer/DropperBlockMixin.java).\r\n* [`HopperBlockEntityMixin`](https://github.com/Technici4n/fabric/blob/item-transfer-api/fabric-transfer-api-v1/src/main/java/net/fabricmc/fabric/mixin/transfer/HopperBlockEntityMixin.java).\r\n\r\n## Fluid-containing items\r\nThis one is a bit more tricky. As noted in #1356:\r\n> There will be two challenges here: designing a context type C that is suitable for all kinds of inventories that may store fluid-containing items, and providing ad-hoc helpers to allow multiple mods to register fluid empty/fill actions for the same item (so that for example mod A could add a honey fluid to fill honey bottles and mod B could add a milk fluid and milk bottles - while allowing bottles to be filled with either fluid).\r\n\r\n### `ContainerItemContext`\r\n[`FluidStorage`](https://github.com/Technici4n/fabric/blob/item-transfer-api/fabric-transfer-api-v1/src/main/java/net/fabricmc/fabric/api/transfer/v1/fluid/FluidStorage.java) now contains an `ItemApiLookup<Storage<FluidVariant>, ContainerItemContext>` to expose and query fluid API instances for items.\r\n\r\n[`ContainerItemContext`](https://github.com/Technici4n/fabric/blob/item-transfer-api/fabric-transfer-api-v1/src/main/java/net/fabricmc/fabric/api/transfer/v1/context/ContainerItemContext.java) allows fluid-containing items to interface with their containing inventory in a clean way: operations are reflected in the inventory directly so that operations can properly compound within transactions. It has been designed with both player inventories and foreign inventories (think bottling machine) in mind.\r\n\r\n### `FluidStorage.CombinedItemApiProvider`\r\n`FluidStorage` additionally contains some events that allow multiple `Storage<FluidVariant>` instances to be offered in a single API query, which is not possible through direct use of API Lookup.\r\nFabric API uses this to register handlers for buckets and water bottles in a compatible way.\r\n\r\n### A few examples\r\nI added the following public base implementations (one of them is used for full buckets):\r\n* [`EmptyItemStorage`](https://github.com/Technici4n/fabric/blob/item-transfer-api/fabric-transfer-api-v1/src/main/java/net/fabricmc/fabric/api/transfer/v1/fluid/base/EmptyItemStorage.java).\r\n* [`FullItemStorage`](https://github.com/Technici4n/fabric/blob/item-transfer-api/fabric-transfer-api-v1/src/main/java/net/fabricmc/fabric/api/transfer/v1/fluid/base/FullItemStorage.java).\r\n\r\nHave a look at the implementation of the empty bucket storage as well:\r\n* [`EmptyBucketStorage`](https://github.com/Technici4n/fabric/blob/item-transfer-api/fabric-transfer-api-v1/src/main/java/net/fabricmc/fabric/impl/transfer/fluid/EmptyBucketStorage.java).",
    "head_branch": "item-transfer-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fabric Transfer API: item transfer and fluid-containing items. (#1553)\n\n* Add item and \"fluid item\" APIs\r\n\r\n* Rework ContainerItemContext javadoc\r\n\r\n* Rework the Inventory wrapper API\r\n\r\n* Cleanup inventory wrapper implementation, add < 64 max stack count test, separate tests better\r\n\r\n* Fix Inventory wrapper not limiting the stack count correctly (thanks @lilybeevee!)\r\n\r\n* Rewrite inventory wrapper, add SingleStackStorage base implementation\r\n\r\n* Composters\r\n\r\n* SingleStackStorage adjustements\r\n\r\n* Bump version\r\n\r\n* Move icon to correct location. Closes #1565\r\n\r\n* Bump version\r\n\r\n* Remove composter implementation (it's broken), slight renames\r\n\r\n* Fix SidedInventory extract\r\n\r\n* Bump version\r\n\r\n* Don't use MAVEN_USERNAME if it's not specified\r\n\r\n* Add comparator output, add missing markDirty calls, fix tests\r\n\r\n* Bump version\r\n\r\n* Add SingleVariantStorage, deprecate SingleFluidStorage, definalize a few things, make sure markDirty() is only called once per successful outer transaction in inventory wrappers\r\n\r\n* Add composter support\r\n\r\n* Move EmptyFluidView to BlankVariantView, update README and package-info\r\n\r\n* Bump version\r\n\r\n* Key -> variant\r\n\r\n* Add Transaction#openNested(@Nullable TransactionContext)\r\n\r\n* Add SingleSlotContainerItemContext\r\n\r\n* Bump prerelease version\r\n\r\n* Remove useless comment\r\n\r\n* Remove ContainerItemContext#getWorld\r\n\r\n* Bump prerelease version\r\n\r\n* Add StorageUtil#findExtractableContent and ContainerItemContext#withInitial\r\n\r\n* Bump prerelease version"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307c40ac82a74541b22ab",
    "number": 1541,
    "body": "SpriteFinder was originally designed for use with block/item rendering. Since then, Mojang has added new sprite atlas textures and each atlas has it's own \"missing\" sprite.  However, SpriteFinder still returns the block/item missing sprite in all cases.  This sprite will almost certainly not render correctly when used with other atlases, causing confusion. \r\n\r\nThis will be only a cosmetic problem in most cases, but mods with atlas-specific mixins or logic can have more negative impacts.\r\n \r\nThis PR causes SpriteFinder to return the correct, atlas-specific missing Sprite.  \r\n\r\n ",
    "head_branch": "1.17",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Prevent SpriteFinder from returning Missing sprite for wrong atlas (#1541)\n\nCo-authored-by: grondag <>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307c50ac82a74541b22ac",
    "number": 1540,
    "body": "Basically redos #1389 Even though it's exactly the same except FabricStructurePool is a record.\r\nThis PR adds a callback to allow players to modify structure pools. \r\n\r\nI was going to make it different but I decided not too- I was thinking of using DynamicRegistryLoadingEvent or whatever it's called, but that loads before so nah. So this is basically just retargetted to 1.17. \r\n\r\nAnyway, the important part is that this is data-pack safe. Repurposed Structures, for example, uses structure pool in json instead of using builtin and they show up using the testmod and RS together. I guess you could test this by making a RS addon? The best use case, though, will be to allow people to add houses to villages. Say you add a profession, you will need a house for that profession, this is the way you add it. ",
    "head_branch": "structure-pool-added-callback",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Structure Pool Callback (#1540)\n\n* Structure Pool Callback\r\n\r\n* Update build.gradle\r\n\r\n* Update fabric-structure-api-v1/src/main/java/net/fabricmc/fabric/api/structure/v1/FabricStructurePool.java\r\n\r\nCo-authored-by: liach <7806504+liach@users.noreply.github.com>\r\n\r\n* Update fabric-structure-api-v1/src/main/java/net/fabricmc/fabric/api/structure/v1/FabricStructurePool.java\r\n\r\nCo-authored-by: liach <7806504+liach@users.noreply.github.com>\r\n\r\n* Fix certain concerns\r\n\r\n* Expose identifier for easier access\r\n\r\n* Final test mod thing\r\n\r\n* fix access widener\r\n\r\n* Fix a few things\r\n\r\n* Fix a few things\r\n\r\n* Fix license\r\n\r\n* haha lets see if this works\r\n\r\n* checkstyle was working after I did checkstyleMain so u bettar work\r\n\r\n* i take too much time to do checkstyle fixes\r\n\r\n* checkstyle fix testmod ugh amirite\r\n\r\n* Fix a few concerns brought up <3\r\n\r\n* Oops, forgot to add a mutanle there\r\n\r\n* Let's test this one more time?\r\n\r\n* Remove Access Widener woop woop\r\n\r\n* rename to poolAccessor\r\n\r\n* Simplify the pool modification a bit\r\n\r\nCo-authored-by: liach <7806504+liach@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662307c50ac82a74541b22ad",
    "number": 1518,
    "body": "Allows the client to access various new fields in `FabricClientCommandSource`, or alternatively alter them with their own Mixin. This functionality is inspired by `ServerCommandSource`.",
    "head_branch": "client-command-source-properties",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add client command source properties (#1518)\n\n* Add extra fields to FabricClientCommandSource\r\n\r\n* Re-add `getPlayer`\r\n\r\n* Fix style errors\r\n\r\n* Make the meta property a `Map`\r\n\r\n* Update Javadoc\r\n\r\n* Implement requested changes\r\n\r\n* Fix styling errors\r\n\r\n* Implement requested changes\r\n\r\n* Implement requested changes\r\n\r\n* Implement requested changes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307c60ac82a74541b22ae",
    "number": 1507,
    "body": "This PR adds functionality for creating and registering registry wrappers primarily used by trees like `TrunkPlacerType`s.\r\n\r\nThis is **not** a new module, it's an addition to the already existing Object Builders API.\r\n\r\nThis is my first time contributing to the Fabric project (except for my Wiki contributions) and any feedback, corrections and criticism would be really appreciated!\r\n\r\nThanks for your attention! \r\n\r\n**UPDATE**: this PR will no longer receive updates. I do not understand why the review process must take so long. thanks everyone who has helped me with this. I'm going to make this into a third-party library because this is ridiculous.\r\n\r\n**UPDATE**: The library that does this is now available at https://github.com/RedGrapefruit09/Arctree",
    "head_branch": "1.17",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307c70ac82a74541b22af",
    "number": 1501,
    "body": "~This PR adds a ServerLanguages API which does two things:~\r\n~1) Loads all present mods en_us lang files into the Language instance on the dedicated server.\r\n2) Allows mods to set what language they would like their translations keys to map to on the dedicated server, in case a mod that adds commands would like their commands to be translatable on the actual server console.~\r\n\r\nSee comments below: We've agreed the API was messy and not a good solution for what it was trying to solve. Now this PR is only for loading mods' en_us lang files on the dedicated server. As this seems like something mods could benefit from having done for them.\r\n\r\nThe motivation for this PR came from an issue I had while contributing to CC: Restitched, a CC: Tweaked port for fabric. We needed the server to be able to translate text before sending it to the client, but to our surprise the dedicated server only ever loads minecraft's en_us lang file, so our translation keys were being sent raw. CC: Restitched also has a management command that uses translatable text, which shows raw translation keys in the dedicated server console without a fix like this. So, rather than just it fix it for ourselves I thought I'd put some sort of solution out there that could work in the Fabric API. \r\n\r\n~I imagine most mod authors who benefit from this change will never actually interact with this API.~ Their translation keys will load on the dedicated server (for the server's default language, en_us) and they won't have do that work themselves. ~But for some added functionality I put in the ability for mods to change which language they want their mod to use on the dedicated server in case they need to localize management commands.~\r\n\r\nHope this is helpful or can be adapted to suite broader needs.",
    "head_branch": "server-languages",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307c80ac82a74541b22b0",
    "number": 1498,
    "body": "Please tell me if I should change anything in the code",
    "head_branch": "1.17",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix ClientPickBlockApplyCallback.EVENT not working as expected Fixes #1493 (#1498)\n\nCo-authored-by: Player <player@player.to>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307c90ac82a74541b22b1",
    "number": 1497,
    "body": "Closes #1477. No need to bind the shader, `drawTexture` does it for us already.\r\n\r\nThis was the only (last?) use of `bindTexture()` in the entire API.",
    "head_branch": "fix-1477",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix screen testmod. Closes #1477 (#1497)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307c90ac82a74541b22b2",
    "number": 1495,
    "body": "Fixes #1494\r\n\r\nThe problem was that data packs that add a custom chunk generator will not get structure configs and thus not apply structures to these biomes. This becomes a problem with data packs like the caves data pack. \r\n\r\nThe problem was that Structure API added Structure Configs by first using *two* mixins to capture StructuresConfig (the class that holds a map of StructureConfig s to Structures). Then, during the FabricStructureBuilder's register method, it would iterate through a list of StructureConfigs captured by the two mixins and add the structure config. \r\n\r\nNow, we just have a Map of structure features to configs that we add to when we call register, and when it is needed, the map is added to the StructuresConfig at use. This simplifies that part of the code by a lot. It also now depends on lifecycles.\r\n\r\nThis will need backporting to 1.16. ",
    "head_branch": "1.17",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix structure config not applying in every case (#1495)\n\n* Fix structure config not applying in every case\r\n\r\n* Make tempmap immutable\r\n\r\n* delete unfinished sentence\r\n\r\noop\r\n\r\n* Some more cleanup\r\nThis was done at the request of Technician\r\n\r\n* Update fabric-structure-api-v1/src/main/resources/fabric.mod.json\r\n\r\nCo-authored-by: liach <7806504+liach@users.noreply.github.com>\r\n\r\nCo-authored-by: liach <7806504+liach@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307ca0ac82a74541b22b3",
    "number": 1492,
    "body": "Looks like it's the last one to the old methods. Should fix the datapack issues. ",
    "head_branch": "1.17",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307cb0ac82a74541b22b4",
    "number": 1491,
    "body": null,
    "head_branch": "fabric-content-registries-v0-testmod",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307cc0ac82a74541b22b5",
    "number": 1486,
    "body": "Closes #1464. I had a few minutes to write this, not high priority but at the same time very simple.",
    "head_branch": "block-api-lookup-classes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make BlockApiLookup expose the API and context classes (#1486)\n\n* Make BlockApiLookup expose the API and context classes\r\n\r\n* Test API and context classes in testmod"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662307cd0ac82a74541b22b6",
    "number": 1484,
    "body": "### Adds:\r\n\r\n- `VillagerTaskProvider`: A handler for dynamically adding tasks to a villager's task-list based on their `VillagerProfession`.  Essentially extends the hardcoded `net.minecraft.entity.ai.brain.VillagerTaskListProvider` and makes it able to adapt based on profession.  Two types of tasks can be changed: constant (added to the main list) and random (added to the list passed to that task-list's RandomTask).  Task \"category\" is chosen based on an enum - each value corresponding to a different `create<X>Tasks` method in `VillagerTaskListProvider`.\r\n- Base!`VillagerTaskProvider`: Allows modders to change the tasks of _every_ villager, regardless of profession.\r\n- `VillagerTaskProviderRegistry`: Registers `VillagerTaskProvider`s, mapped to `VillagerProfession`.  If multiple task-lists are submitted for the same profession, the lists will be merged.\r\n- `VillagerTaskProviderInternals`: Allows `VillagerTaskListProviderInjector` to retrieve entries from the `VillagerTaskProvider` registry at runtime.  The Profession-TaskProvider map is retrieved from `VillagerTaskProviderRegistry` during startup, converted to an `ImmutableMap`, and stored as a static property of this class.\r\n- `WorkerVillagerTask`: A framework for creating simple world-altering `VillagerTask`s.  Includes handler methods for scanning the surrounding area, registering and selecting a random target, and adding a look/walk target.  Includes hooks for run conditions, executing world actions, duration, and other factors that need to be considered when implementing `Task<LivingEntity>`.  The framework is not required; it's just an easier way to implement `Task<LivingEntity>`.\r\n- Extensive documentation for each of these.\r\n\r\n### Future Maintenance:\r\n\r\n- If a new method is added to `VillagerTaskListProvider`, three things will need to be added:\r\n1. An `@Inject` mixin for that method's \"Constant\" method (inject into the main list),\r\n2. A `@ModifyArgs` mixin for that method's \"Random\" tasks (inject into the list passed to `RandomTask`), or add a new `RandomTask` to that list if none is included by default (copy from the other methods of that kind and change the enum), and,\r\n3. A new enum value for that category.\r\n\r\n- Potential signature changes are documented in `VillagerTaskListProviderInjector`.\r\n\r\n",
    "head_branch": "1.16.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307cd0ac82a74541b22b7",
    "number": 1474,
    "body": "`ButtonList` now properly handles `drawables`, `selectables` and `children`.\r\n\r\nCloses https://github.com/FabricMC/fabric/issues/1473",
    "head_branch": "screen-api-1.17",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Screen API ButtonList in 1.17 (#1474)\n\n* Fix Screen API ButtonList in 1.17\r\n\r\n* Lint"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307ce0ac82a74541b22b8",
    "number": 1470,
    "body": "Resolves #1383.\r\n\r\nOf course keeps all public API methods and classes functional, though just they call the new API instead.\r\n\r\nUsed a Java 9 feature (private methods in interfaces) in order to register a handler to invoke the old event from the new one.",
    "head_branch": "deprecate-rendering-registries",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Deprecate and move fabric-rendering-registries-v1 into fabric-rendering-v1 (#1470)\n\n* Deprecate and move fabric-rendering-registries-v1 into fabric-rendering-v1\r\n\r\n* Make the event work again\r\n\r\n* Use lambda for RegistrationHelper\r\n\r\n* Checkstyle in rendererregistries\r\n\r\n* Checkstyle for rendering-v1\r\n\r\n* Remove mixins file\r\n\r\nAnd add two `forRemoval`\r\n\r\n* Raise EntityModelLayerRegistry out of experimental\r\n\r\nAnd update javadoc\r\n\r\n* Change INSTANCE to a static method in two registries\r\n\r\n* Readd unwillingly removed annotation\r\n\r\n* Disallow constructing API instances\r\n\r\n* Added Environment and ApiStatus annotations\r\n\r\n* Update testmod's entrypoint\r\n\r\nCo-authored-by: Technici4n <13494793+Technici4n@users.noreply.github.com>\r\n\r\n* Remove renderer-registries testmod\r\n\r\n* Remove `var` usage\r\n\r\n* Don't specify `forRemoval = true` in `@Deprecated`\r\n\r\n* Inline old registry implementations in anonymous classes\r\n\r\nCo-authored-by: Technici4n <13494793+Technici4n@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307cf0ac82a74541b22b9",
    "number": 1469,
    "body": "A Nice Fabric Alternative to Forge Energy",
    "head_branch": "1.17",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307d00ac82a74541b22ba",
    "number": 1463,
    "body": "Issue report: https://github.com/FabricMC/fabric/issues/1269\r\n\r\nIt was what I thought. The set of \"modified biome registrykeys\" was failing and causing Biome Modification API to not apply changes to JSON biomes. In fact, the whole set is completely unnecessary too as each time the RegistryOps is fired, the biome instances inside are unique each time and have no changes from the other times RegistryOps fired. Thus, yeeting the set fixed the issue during my testing.\r\n\r\nTo double check this PR, use this datapack\r\n[desert_test.zip](https://github.com/FabricMC/fabric/files/6527047/desert_test.zip)\r\n\r\nI added a desert well once per chunk in the test mod to the vanilla desert biome. The very center top of the well shows what chunk spawned it when you show chunk boundaries with F3+G. \r\n\r\nRun the test without the datapack by creating a world. Do /locate desert and teleport to it to see the 1 well per chunk. Then exit that world and re-enter it and go to a new desert. See how it is still 1 well per chunk. Repeat these two tests but with the datapack on each time and the wells now still generate once per chunk. ",
    "head_branch": "1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixed Biome Modification API not working for datapack provided biomes (#1463)\n\n* Fixed Biome Modification API not working for json biome\r\n\r\n* upgraded test to add to all deserts and added json biome. (note the test mod won't load the json biome tho. Make it into a datapack so it works)\r\n\r\n* switched set of rgeistrykeys to set of biome instances\r\n\r\n* added datapack as backup to test mod\r\n\r\n* removed unused imports\r\n\r\n* removed the biome json file from the test mod's data folder"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662307d10ac82a74541b22bb",
    "number": 1462,
    "body": "Resolves #1422.\r\n\r\nSince I wasn't really able to find a way in Loader to keep the JiJed mods in their parents container in order to implement the second approach (I'm not familiar with Loader's codebase), I implemented the one that checks for the mandatory `fabric-api:module-lifecycle` custom value when the full API is present in order to hide the modules.\r\n\r\nThis therefore still keeps the `fabric-api` container in the modlist, and the specific module versions are still printed at the start of the log by Loader.",
    "head_branch": "1.16-crash-report-hiding",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307d20ac82a74541b22bc",
    "number": 1460,
    "body": "WIP 21w20a port, fabric-screen-api-v1/src/main/java/net/fabricmc/fabric/mixin/screen/ScreenMixin.java will fail to apply.\r\n\r\nRuns without the screen api, I ran out of time for this evening so leaving this here if anyone wants to pick up",
    "head_branch": "21w20a",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307d20ac82a74541b22bd",
    "number": 1459,
    "body": "Because java 16 made it a possibility.",
    "head_branch": "feature/update-deprecated",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307d30ac82a74541b22be",
    "number": 1448,
    "body": "This is more in line with the new textures.\r\nPreview:\r\n![highlight](https://user-images.githubusercontent.com/28286961/117574285-b6236a00-b0dc-11eb-8f95-7daa5b6a5889.gif)\r\n",
    "head_branch": "white-highlight",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307d40ac82a74541b22bf",
    "number": 1440,
    "body": "The existing networking-api implementation doesn't maintain GlobalReceiverRegistry.trackedAddons properly, accumulating stale Network(Handler)Addon instances. It also doesn't fire the disconnect event reliably, in particular the clientside disconnect event doesn't happen when leaving a SP game normally through the menu.\r\n\r\nI fixed the issue by clearing LoginNetworkAddon instances when client/server transition from LOGIN to PLAY and by hooking the Netty-driven ClientConnection.channelInactive to capture all disconnects eventually. I left the regular disconnect hooks in to avoid potentially introducing extra delays in case the vanilla code doesn't close the connection immediately besides other potential regressions.\r\n\r\nThis should fix https://github.com/FabricMC/fabric/issues/1439",
    "head_branch": "1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix network api accumulating connection handlers and not firing\nsome disconnect events"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662307d50ac82a74541b22c0",
    "number": 1433,
    "body": "Should hopefully fix https://github.com/FabricMC/fabric/issues/1431 - (needs testing, can pull the build from GHA)\r\n\r\nThe ideal solution is to update to loom 0.7 but thats got some issues that need resolving.\r\n\r\nThese kinds of issues also prove the need for better automated testing.",
    "head_branch": "hack/update-mce",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "#1431 - Foce update MCE to fix bad refmap  (#1433)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307d60ac82a74541b22c1",
    "number": 1430,
    "body": "This will just write to the underlying map directly. It might be too simple, did I miss something obvious?\r\n\r\nCloses #1377.\r\nCloses #1427.",
    "head_branch": "fix-trade-offers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix trade offers by writing to the trade map directly (#1430)\n\n* Write to the trade map directly\r\n\r\n* Add warning when TradeOfferHelper#refreshOffers is called\r\n\r\n* Correctly use synchronized, just in case\r\n\r\n* Add null check - PR should be ready for merge now\r\n\r\n* Make ctor private to hide it from javadoc"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662307d70ac82a74541b22c2",
    "number": 1428,
    "body": "Closes #1296 \r\n\r\nAdds missing fields name, icon, authors, and description.\r\nLooks like this was forgotten in #1233 ",
    "head_branch": "1.17",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add missing metadata to dimensions api, remove JCenter (#1428)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307d70ac82a74541b22c3",
    "number": 1421,
    "body": "Reopening #1374 already. This is not final, I have to investigate if this addition will also work for non-player living entities, and document that behavior.",
    "head_branch": "elytra",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307d80ac82a74541b22c4",
    "number": 1418,
    "body": "",
    "head_branch": "mexican-translation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Mexican spanish translation (#1418)\n\n* Create es_mx.json\r\n\r\n* Update es_mx.json"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307d90ac82a74541b22c5",
    "number": 1416,
    "body": "",
    "head_branch": "finnish",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Finnish translation (#1416)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307da0ac82a74541b22c6",
    "number": 1407,
    "body": "- Upgrading to loom 0.7 and the new run config system\r\n- Update to gradle 7\r\n- Start looking at singing the jars - currently just pgp. jar singing is TODO\r\n- Build reproducable jars\r\n- Build testmod jars - a fat jar depends on some loom work\r\n- Incease default mem to 4G\r\n- Enable parallel by default",
    "head_branch": "loom0.7",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307db0ac82a74541b22c7",
    "number": 1404,
    "body": "https://discord.com/channels/507304429255393322/507982478276034570/827246117867356250 for context.\r\n\r\nIts really hard to make commands for server side or client side only. This pr switches to an event system that is very similar to the command API, but instead of passing a boolean for a dedicated server, it passes a boolean for a remote server (lan or dedicated). The dispatcher is reset each time the client joins a new world, but this is unavoidable with how brigadier is set up ",
    "head_branch": "better-client-commands",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307db0ac82a74541b22c8",
    "number": 1403,
    "body": "",
    "head_branch": "1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Greek translation (#1403)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307dc0ac82a74541b22c9",
    "number": 1402,
    "body": "Adds an event when a fluid flows. Yes i know its in the object builder API, I'm waiting for #1136 to be merged, or if we merge these into one larger fluid api",
    "head_branch": "flowing-fluid-interactions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307dd0ac82a74541b22ca",
    "number": 1395,
    "body": "Pr #1075 has fallen a bit to the wayside. This PR picks up where it left off. \r\n\r\nThe changes I have made so far were switching the storage of `ResourceCondition`s to a registry and exposing the default fabric conditions publicly so that they can be used outside of the API.\r\n\r\n",
    "head_branch": "conditional_recipes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307de0ac82a74541b22cb",
    "number": 1394,
    "body": "### PR Contents\r\n\r\nThis PR adds a new event, `ServerPlayerEvents.ALLOW_DEATH`. This is called when a player has just taken fatal damage. Mods can return `false` from this to cancel the death.\r\n\r\n### Rationale\r\n\r\nMods may want to cancel a player's death in certain circumstances - [Gunpowder](https://github.com/Gunpowder-MC/Gunpowder/blob/c62a696eda68ca5648d78ed10779bf363efcb506/gunpowder-base/src/main/java/io/github/gunpowder/mixin/base/LivingEntityMixin_Base.java#L43) and [Haema](https://github.com/williambl/haema/blob/c7026d9ee18e9414b2a1e7eba8f033a68a2a44a8/src/main/java/com/williambl/haema/mixin/LivingEntityMixin.java#L46) are two mods which do.\r\n\r\nUnfortunately, this requires a redirect mixin - however, this same redirect being needed for multiple mods (thus making them incompatible) suggests that it is appropriate for Fabric API.\r\n\r\nCC: @martmists-gh",
    "head_branch": "player-death-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add ServerPlayerEvents.ALLOW_DEATH event (#1394)\n\nCo-authored-by: NinjaPhenix <5214513+NinjaPhenix@users.noreply.github.com>\r\nCo-authored-by: liach <7806504+liach@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662307df0ac82a74541b22cc",
    "number": 1393,
    "body": "This PR adds the ability of defining custom fluid overlay sprite behavior to the `FluidRenderHandler`. This feature is needed because if a custom fluid is in the water tag, it will use the water overlay texture no matter what, which makes it look incorrect when behind glass or other similar transparent blocks. This change should not affect any existing code since the extra entry in the sprite array is optional. The javadoc has been updated to explain what an overlay sprite does, how it is used, and how to define custom behavior.\r\n\r\nFrom the javadoc:\r\n\r\n> The \"overlay\" sprite is rendered instead of the \"flowing\" sprite when behind\r\nTransparentBlock or LeavesBlock. It is also only rendered on the\r\noutside of the fluid block, whereas the other two sprites are rendered on both\r\nsides. When the \"overlay\" sprite is used, only the top left quarter is actually\r\nused for rendering.  This section is also reflected horizontally before rendering.\r\n\r\n> return An array of size two or three. The first entry contains the \"still\" sprite,\r\nwhile the second entry contains the \"flowing\" sprite. If the array is of size two,\r\nthe default behavior for the \"overlay\" sprite is used. If the array is of size three,\r\nthe third entry contains the \"overlay\" sprite. If it is null, no \"overlay\" sprite is\r\nused.",
    "head_branch": "1.16-fluid-overlay-texture",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307df0ac82a74541b22cd",
    "number": 1392,
    "body": "This pull request allows the `BlockEntityRendererRegistry` to accept `BlockEntityRenderer`s that render for a super type of the `BlockEntity` that the current `BlockEntityType` refers to. This makes sense, because one renderer can work for multiple types of `BlockEntity`s (that have the same super type) or an abstract renderer that has one type of `BlockEntity` that it renders for can change its behavior based on implementations of abstract methods. The workaround for this currently is to cast both arguments to raw types, which is not ideal.",
    "head_branch": "1.16-ber-super-type",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow more flexibility when registering BER (#1392)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307e00ac82a74541b22ce",
    "number": 1391,
    "body": "This pull request adds two new methods to the `ScreenHandlerRegistry` that allow users to create `ScreenHandler`s without registering them. There is no simple alternative for this because vanilla's factory is private and `ExtendedScreenHandlerType` is in the impl package, meaning only the API itself should use it. Creating a `ScreenHandler` without registering it could be useful when, for example, making builders that create objects but those objects are registered later in a different class.",
    "head_branch": "1.16-screen-handler-creation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307e10ac82a74541b22cf",
    "number": 1390,
    "body": "If a model is loaded using an `ExtraModelProvider`, there is no way to retrieve it from the `BakedModelManager` after it is baked because it does not have a corresponding `ModelIdentifier`. This pull request adds a `ModelHelper` that allows retrieving a model via `Identifier` instead of `ModelIdentifier`. This works by exposing the full functionality of `BakedModelManager`'s internal model map, which stores `Identifier`s as keys, even though vanilla's retrieval method requires a `ModelIdentifier`. The same `Identifier` used to load the model can be used in `ModelHelper#getModel` to get the baked model.",
    "head_branch": "1.16-model-map-helper",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow getting BakedModels using Identifiers (#1390)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662307e20ac82a74541b22d0",
    "number": 1389,
    "body": "Hello! Today this PR adds a simple StructurePoolAddCallback and a FabricStructurePool.\r\n\r\nA few notes:\r\n\r\n- The callback is called during data pack reloads (I think?)\r\n- FabricStructurePool currently contains methods to add to a structure pool, however more methods can be added upon reviews/requests\r\n- This is my first fabric pr, be gentle! ",
    "head_branch": "structure-pool-added-callback",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307e30ac82a74541b22d1",
    "number": 1388,
    "body": "I was too quick and tired when I created this file and forgot to actually translate the one and only line, so I had to make a second commit.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Create sv_se.json (#1388)\n\n* Create sv_se.json\r\n\r\n* Update sv_se.json"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307e40ac82a74541b22d2",
    "number": 1387,
    "body": "could be expanded to include all tick events for the client and the server, but receiving feedback on the start is more important",
    "head_branch": "tick-helper",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307e40ac82a74541b22d3",
    "number": 1374,
    "body": "Follows in the footsteps of #1210 and #1367 for extensions of vanilla items. Only adds one API class for an elytra interface.\r\n\r\nThe reasoning for adding the player to the can use logic is so that elytras can be based on player capabilities, allowing for things like the test mod, where an elytra is creative only.",
    "head_branch": "elytra",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307e50ac82a74541b22d4",
    "number": 1371,
    "body": "*Being able to register recipes directly through code is amazing.*\r\n\r\nSo here it is! Recipe API v1!\r\nIt's basically a very simple API to register recipes through code.\r\n\r\n## Why should I use this?\r\n\r\nThis allows you to register recipes without ever having to touch JSON, the way it is done avoid serializing recipes to JSON to end up deserializing them.  \r\nIt allows you to register recipes conditionally (in the case of mod compatibility) and do data-generation.\r\n\r\n## What does it replace?\r\n\r\nIn Fabric API? Nothing.\r\nIn ARRP? The recipe stuff it has. Though this API is much more simpler as it only accepts `Recipe<?>` objects, and there is no helper for the Vanilla recipe types in this API, so there is still an interest into using ARRP but I would recommend ARRP to change how they handle recipes internally.\r\n\r\n## But won't it break datapacks?\r\n\r\ntl;dr no\r\n\r\nThe way this works is it will only truly register a recipe if nothing provides it already.\r\n\r\n## What could be future plans for this module?\r\n\r\nIn the future this module could be extended to have more helpers to build Vanilla recipes.\r\nLike an IngredientHelper to build a DefaultList of ingredients using a String pattern with keys and ingredient values.\r\nBut this won't be in this PR to keep it simple and lightweight (so easier to review)\r\n\r\n## Testmod?\r\n\r\nThe testmod tests the static recipe registering and the dynamic registering, the static one is just a Stick -> Diamond shapeless recipe, the dynamic one is [Iron,Gold,Coal,Charcoal] -> randomized item at reload 4x4 shaped recipe.",
    "head_branch": "recipe-api-v1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307e60ac82a74541b22d5",
    "number": 1369,
    "body": "This PR changes the behavior of `EventFactory.createArrayBacked` so that the factory is invoked even when there is one listener.\r\n\r\nThe main motivation for this PR is that something like #1322 can best be implemented as an event + an `instanceof` check for easy self-implementation on the relevant argument:\r\n```java\r\npublic interface SlotClick {\r\n    // Return false to stop vanilla Item#onClicked processing.\r\n    boolean allowClick(Slot slot, ItemStack heldStack, ClickType type, PlayerInventory inventory);\r\n}\r\n\r\n@AutoInvokingEvent // This PR adds this annotation as well!\r\nEvent<SlotClick> SLOT_CLICK = EventFactory.createArrayBacked(SlotClick.class, listeners -> (slot, heldStack, type, inventory) -> {\r\n    boolean vanillaClick = true;\r\n    if (slot instanceof SlotClick) {\r\n        vanillaClick = ((SlotClick) slot).allowClick(slot, heldStack, type, inventory) && vanillaClick;\r\n    }\r\n    for (SlotClick listener : listeners) {\r\n        vanillaClick = listener.allowClick(slot, heldStack, type, inventory) && vanillaClick;\r\n    }\r\n    return vanillaClick;\r\n})\r\n```\r\n\r\nSadly this won't work currently, as the invoker factory will not be invoked when there is exactly one registered listener. I don't think this behavior change should break anything.\r\n\r\nThis PR also introduces [`AutoInvokingEvent`](https://github.com/Technici4n/fabric/blob/event-cleanup/fabric-api-base/src/main/java/net/fabricmc/fabric/api/event/AutoInvokingEvent.java) to document such events.\r\n\r\nI have also simplified the `ArrayBackedEvent` implementation by moving the empty listener/singleton listener to the body of the custom empty invoker overload, and by removing the special case where `listeners` could be `null` by allocating an empty array in the constructor.\r\n\r\nEdit: Closes #1311.",
    "head_branch": "event-cleanup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Change event behavior for one listener, introduce `AutoInvokingEvent`, update `ArrayBackedEvent` implementation (#1369)\n\n* Cleanup Events\r\n\r\n* Add the AutoInvokingEvent annotation.\r\n\r\nCo-authored-by: Player <sfPlayer1@users.noreply.github.com>\r\nCo-authored-by: Technici4n <13494793+Technici4n@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662307e70ac82a74541b22d6",
    "number": 1367,
    "body": "Very similar to #1210, in fact, some classes are the same, just with the other pr's logic removed (I will update the other or once one is merged). Luckily crossbows are less :mojank: and the logic for firing them is not attached to the users, but the item itself, reducing the complexity of the event system.",
    "head_branch": "crossbows",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307e80ac82a74541b22d7",
    "number": 1366,
    "body": "This picks up from #1357 and how the fabric API is bloated. This targets the 1.17 snapshots as any changes to 1.16 would be too breaking. This is a work in progress and any suggestions will be considered.\r\n\r\nEdit: I know this is super early, but the sooner we start, the easier it will be to meet the target when 1.17 is implemented",
    "head_branch": "demodularization",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307e80ac82a74541b22d8",
    "number": 1365,
    "body": "This PR cleans up the `ArrayBackedEvent` implementation and explores the use of a new `createArrayBacked` function that uses the `invokerFactory` for any number of listeners (the current functions don't call the `invokerFactory` when there is only 1 listener).\r\n\r\nThe main motivation for this PR is that something like #1322 can best be implemented as an event + an `instanceof` check for easy self-implementation on the relevant argument:\r\n```java\r\npublic interface SlotClick {\r\n    // Return false to stop vanilla Item#onClicked processing.\r\n    boolean allowClick(Slot slot, ItemStack heldStack, ClickType type, PlayerInventory inventory);\r\n}\r\n\r\nEvent<SlotClick> SLOT_CLICK = EventFactory.createArrayBacked(SlotClick.class, listeners -> (slot, heldStack, type, inventory) -> {\r\n    boolean vanillaClick = true;\r\n    if (slot instanceof SlotClick) {\r\n        vanillaClick = ((SlotClick) slot).allowClick(slot, heldStack, type, inventory) && vanillaClick;\r\n    }\r\n    for (SlotClick listener : listeners) {\r\n        vanillaClick = listener.allowClick(slot, heldStack, type, inventory) && vanillaClick;\r\n    }\r\n    return vanillaClick;\r\n})\r\n```\r\n\r\nSadly this won't work currently, as this will not be invoked when there is exactly one registered listener.\r\nThis PR explores how this could be improved, by introducing a new function similar to `createArrayBacked` that gives the factory full freedom to manage its listeners. Note how the old behavior is trivial to implement in terms of the new function.\r\n\r\nI am suggesting a change in name so that the weird `createArrayBacked` that calls the factory in all cases except when there is 1 listener is not used by mistake.\r\nThe other overload can stay for performance-sensitive cases: either you specify an empty invoker AND singleton listeners are directly returned, or the invoker factory is called in every case, but I have deprecated the old name for consistency over the long run.\r\n\r\nThe new function name is obviously not suitable but I couldn't come up with a better name while writing this, so I decided to make the intent clear. I would like something quite different from the old name. Suggestions are welcome.\r\n\r\nI have also massively cleaned up the `ArrayBackedEvent` implementation because frankly it was horrible. Registration performance is irrelevant anyway (as long as it's reasonable).",
    "head_branch": "event-cleanup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307e90ac82a74541b22d9",
    "number": 1364,
    "body": "Fixes #1360",
    "head_branch": "fix-interact-at-mixin",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix the onPlayerInteractEntity mixin causing a crash because the target method signature was not specified (#1364)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307ea0ac82a74541b22da",
    "number": 1359,
    "body": "Currently, if a mod wants to pass custom settings for items, the best way is to subclass either `Item.Settings` or `FabricItemSettings` and add the behavior there yourself. An example of this is in [The Aether](https://github.com/devs-immortal/The-Aether/blob/master/src/main/java/com/aether/items/AetherItemSettings.java), where custom item settings are used for a custom rarity and enchantment glint color. If another mod, however, adds an item setting for their items via the same method, there's no way for one item to share both properties.\r\n\r\nThis pull request solves that by allowing mods to attach arbitrary data to item settings. As part of this change, both the `EquipmentSlotProvider` and `CustomDamageHandler` have been migrated to use this system. Their public-facing API's remain unchanged.\r\n\r\nThis pull request also fixes a small bug in the testmod, wherein one of the test entrypoints would fail to launch.",
    "head_branch": "custom-item-settings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307eb0ac82a74541b22db",
    "number": 1358,
    "body": "This fixes a discrepancy between how error messages are formatted in client commands vs server commands.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix sendError discrepency with client commands (#1358)\n\nThis fixes a discrepancy between how error messages are formatted in client commands vs server commands."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307ec0ac82a74541b22dc",
    "number": 1356,
    "body": "# Fabric Transfer API: \"fluid only\" edition\r\nBuilding on #1234, this PR adds a new `fabric-transfer-api-v1` for transfer of generic game resources, and uses it to define a \"Fluid API\" for blocks.\r\n\r\nThis PR replaces #1278 that I deemed too big to be implemented and reviewed properly. Let's go for quality above quantity.\r\n\r\nI am also hosting builds of this module on my \"maven\" so that it's easier to try it out: https://github.com/Technici4n/Technici4n-maven. Please give it a try, any feedback is appreciated!\r\n\r\n## Problem scope\r\nThis PR is centered around fluid transfer between blocks: Reading fluids stored in a block, extracting fluids from a block and inserting fluids into a block.\r\n\r\nContrarily to #1278, this PR does NOT cover:\r\n* item transfer between blocks,\r\n* fluid-containing items such as buckets or portable tanks.\r\n\r\nI will talk about these things a bit later.\r\n\r\n## API overview\r\n### Transactions\r\nThis PR introduces the transaction concept. Essentially, a transaction allows setting checkpoints like in a video game: if something doesn't go as expected, the state of the game reverts to what it was at the previous checkpoint. Game objects that take part in a transaction are commonly referred to as \"participants\" or \"endpoints\".\r\n\r\nHere is an example that hopefully makes this clearer:\r\n```java\r\ntry (Transaction outerTransaction = Transaction.openOuter()) {\r\n    /* (A) some transaction operations */\r\n    try (Transaction nestedTransaction = outerTransaction.openNested()) {\r\n        /* (B) more operations */\r\n        nestedTransaction.commit(); // Validate the changes that happened in this transaction.\r\n                                    // This is a nested transaction, so changes will only be applied if the outer\r\n                                    // transaction is committed too.\r\n    }\r\n    /* (C) even more operations */\r\n    outerTransaction.commit(); // This is an outer transaction: changes (A), (B) and (C) are applied.\r\n}\r\n// If we hadn't committed the outerTransaction, all changes (A), (B) or (C) would have been reverted.\r\n```\r\n\r\nTransaction aborting or committing is done by registering a callback with `Transaction#addCloseCallback`. This gives full freedom to participants to manage their state the way they want to. In practice, this is very low-level and participants that wish to save their state before modification so that changes can be reverted when a transaction is aborted can subclass [`SnapshotParticipant`](https://github.com/Technici4n/fabric/blob/fluid-transfer-api/fabric-transfer-api-v1/src/main/java/net/fabricmc/fabric/api/transfer/v1/transaction/base/SnapshotParticipant.java) and call `updateSnapshots` right before mutating their internal state. That way, modifications will be cancelled by applying a previously saved state if necessary. Uncancellable modifications such as `markDirty()` or neighbor block updates should be deferred until `onFinalCommit`.\r\n\r\nMore details can be found [in the Transaction javadoc](https://github.com/Technici4n/fabric/blob/fluid-transfer-api/fabric-transfer-api-v1/src/main/java/net/fabricmc/fabric/api/transfer/v1/transaction/Transaction.java), and I will be happy to answer any question.\r\n\r\n### `Storage`\r\nBuilding on the transaction concept, this PR introduces [`Storage<T>`](https://github.com/Technici4n/fabric/blob/fluid-transfer-api/fabric-transfer-api-v1/src/main/java/net/fabricmc/fabric/api/transfer/v1/storage/Storage.java): an interface that containers of game resources of type `T` can implement.\r\nThe rest of the [`storage` package](https://github.com/Technici4n/fabric/tree/fluid-transfer-api/fabric-transfer-api-v1/src/main/java/net/fabricmc/fabric/api/transfer/v1/storage) provides related base implementations and helpers.\r\n\r\nAs an example of how this API works, have a look at [the generic `StorageUtil#move` function](https://github.com/Technici4n/fabric/blob/fluid-transfer-api/fabric-transfer-api-v1/src/main/java/net/fabricmc/fabric/api/transfer/v1/storage/StorageUtil.java) that moves game resources between two storages.\r\n\r\n### `Storage<FluidVariant>`\r\nThis API then defines an API lookup for `Storage<FluidVariant>` so that mods can start using this API for fluid transfer right away.\r\nCauldron compatibility for water is builtin. That and fluid constant definitions and a few preconditons can be found in the [`fluid` package](https://github.com/Technici4n/fabric/tree/fluid-transfer-api/fabric-transfer-api-v1/src/main/java/net/fabricmc/fabric/api/transfer/v1/fluid).\r\n\r\nIt is expected that most modders will use subclasses of [`SingleFluidStorage`](https://github.com/Technici4n/fabric/blob/fluid-transfer-api/fabric-transfer-api-v1/src/main/java/net/fabricmc/fabric/api/transfer/v1/fluid/base/SingleFluidStorage.java) to implement their containers in most cases. These subclasses can be combined using [`CombinedStorage`](https://github.com/Technici4n/fabric/blob/fluid-transfer-api/fabric-transfer-api-v1/src/main/java/net/fabricmc/fabric/api/transfer/v1/storage/base/CombinedStorage.java) for fluid inventories that have multiple \"tanks\"/\"slots\".\r\n\r\nWhat exactly is a [`FluidVariant`](https://github.com/Technici4n/fabric/blob/fluid-transfer-api/fabric-transfer-api-v1/src/main/java/net/fabricmc/fabric/api/transfer/v1/fluid/FluidVariant.java)? It is the immutable combination of a `Fluid` and an optional NBT tag, the methods should be quite straightforward. [Client-side fluid variant rendering is also provided by this PR](https://github.com/Technici4n/fabric/tree/fluid-transfer-api/fabric-transfer-api-v1/src/main/java/net/fabricmc/fabric/api/transfer/v1/client/fluid).\r\n\r\n### Cauldron support\r\nEmpty, water and lava cauldrons are supported. Mods can register mappings for other vanilla cauldrons, or for their own cauldrons. Mappings can be inspected. For example, a mod adding a powder snow fluid would first check for an existing mapping for the powder snow cauldron, before trying to register its own fluid. More details in [`CauldronFluidContent`](https://github.com/Technici4n/fabric/blob/fluid-transfer-api/fabric-transfer-api-v1/src/main/java/net/fabricmc/fabric/api/transfer/v1/fluid/CauldronFluidContent.java).\r\n\r\n### The fluid unit\r\n**Fluid transfer happens in discrete amounts: 1/81000s of a bucket**. There have been attempts to allow per-call denominators (a denominator for every function call) or fractions. Unfortunately, none of those have proven to be practical.\r\n* Per-call denominators introduce a massive API complexity, and since this API is generic, modders that wish to use it for item, essentia or <other game resource> transfer need to suffer from this special case that only pertains to fluids.\r\n* It is simply impossible to prevent overflows with fractions. On top of the very not-so-ergonomic API this would imply, literally any operation (+, -, *, /) can cause overflows. Anyone who says otherwise is lying to you!\r\n\r\nEssentially we are left with the choice of a denominator. 81000 is divisible by all the relevant numbers and can be easily expressed as millibuckets with a slight rounding error (possibly displayed only when shifting) - how the fluid amounts are displayed to the end user is not specified by this API. This API however provides a name for 1/81000 of a bucket: a _droplet_.\r\n\r\nWhat about future-proofing or other denominator choices? Well, thanks to fallback providers that can be registered with API Lookups, we can provide an easy migration path if this choice of denominator proves to be wrong at some point in the future. In general, anyone can define their `Storage<FluidVariant>` lookup and register the suitable fallback providers at `FluidTransfer.SIDED`. The only place where the unit is encoded is with the cauldron compatibility, and the various constants in `FluidConstants`.\r\n\r\n### Unsided fluid transfer\r\nNot all fluid transfer is sided. However, most of it is. That's why the API uses a non-null `Direction` context. Another lookup that would be unsided may be introduced in the future if it turns out to be useful. Note that 3rd-party mods can all refer to a `BlockApiLookup<Storage<FluidVariant>, Void>` with a common agreed-upon ID, and `BlockApiLookup#get` will return the same instance for every query with that ID.\r\n\r\n## The future\r\n### Item Transfer\r\nIn a subsequent PR, immutable count-less item stacks called `ItemVariant` are to be introduced, similar to `FluidVariant`s. They are not included in this PR because providing a `Storage<ItemVariant>` implementation that wraps `Inventory`, `SidedInventory` and `PlayerInventory` adds a lot of implementation, and I would like reviews to focus on the generic API for this PR.\r\n\r\nDo however keep in mind that `Storage<T>` can only work with immutable resource types `T`. This means that **`Storage<ItemStack>` is not an option**, and that must be considered before this PR is merged! I believe that using `ItemVariant`s makes the API much less error-prone: inventory contents cannot be mutated, and there is no risk that someone forgets to copy a stack somewhere, leading to duplication or voiding bugs.\r\n\r\n### Fluid-containing items\r\nOnce #1352 is merged, we can look into providing an `ItemApiLookup` for access to `Storage<FluidVariant>` instances. There will be two challenges here: designing a context type `C` that is suitable for all kinds of inventories that may store fluid-containing items, and providing ad-hoc helpers to allow multiple mods to register fluid empty/fill actions for the same item (so that for example mod A could add a honey fluid to fill honey bottles and mod B could add a milk fluid and milk bottles - while allowing bottles to be filled with either fluid). I do however not expect that to be an issue.",
    "head_branch": "fluid-transfer-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fabric Transfer API: \"fluid only\" edition (#1356)\n\n* Original fluid API design\r\n\r\n* Rework the transaction system\r\n\r\n* First javadoc pass\r\n\r\n* Add a testmod, a base implementation for fluid storages and fix some little bugs\r\n\r\n* Fix checkstyle\r\n\r\n* Make Movement#move extract from the view and not the whole Storage\r\n\r\n* Document and update FluidPreconditions\r\n\r\n* Use for-each in CombinedStorage and document a little\r\n\r\n* Remove useless overrides in Insertion/ExtractionOnlyStorage\r\n\r\n* Move SnapshotParticipant#snapshots to the top of the class, and make updateSnapshots public\r\n\r\n* Fix garbage collection of unused CauldronWrappers\r\n\r\n* Use ArrayList directly\r\n\r\n* Remove locking, reorganize transaction implementation, and add outer close callback\r\n\r\n* Add more javadoc\r\n\r\n* Rework Storage#forEach into Storage#iterator\r\n\r\n* Add a few missing `transaction.addCloseCallback(iterator)`\r\n\r\n* Add anyView(), exactView(), capacity() and isEmpty()\r\n\r\n* Add Storage#iterable to make iteration friendlier to for loops\r\n\r\n* Storages may now have multiple open iterators\r\n\r\nCo-authored-by: Devan-Kerman <dev.sel20@gmail.com>\r\n\r\n* Make CombinedStorage#supportsInsertion/Extraction iterate through the parts\r\n\r\n* Block updates should be used when the supportsInsertion/Extraction status changes\r\n\r\n* Fluid -> FluidKey\r\n\r\n* Remove all references to ItemKey inside FluidKey, and other minor tweaks\r\n\r\n* Cache FluidKeys with a null tag inside Fluid directly\r\n\r\n* Fluid unit convention\r\n\r\n* Add FluidKeyRendering and RenderHandler\r\n\r\n* Bump version for more testing (also published to my maven)\r\n\r\n* Add SingleViewIterator, massively reduce code duplication!\r\n\r\n* Make API experimental, and add README\r\n\r\n* Bump version\r\n\r\n* Apparently Fluids.EMPTY is flowing\r\n\r\n* Add package info\r\n\r\n* Minor adjustements\r\n\r\n* 1.17 port, cauldron support, add ResourceKey\r\n\r\n* Checkstyle, gas rendering, use record for ResourceAmount\r\n\r\n* Add a few helpers, rename some stuff\r\n\r\n* Remove anyView, allow nullable in StorageUtil#find*, fix missing try block\r\n\r\n* Slight findStoredResource cleanup\r\n\r\n* Slightly improve implementation\r\n\r\n* Bump version\r\n\r\n* Fix wrong transaction\r\n\r\n* I wrote in a comment that this could happen...\r\n\r\n* Fix SingleFluidStorage bugs, add tests in the testmod, add testmod assets\r\n\r\n* Add extract stick\r\n\r\n* Rename a few things\r\n\r\n* `ResourceKey<T>` -> `TransferKey<O>`\r\n* `ResourceKey#getResource()` -> `TransferKey#getObject()` as resource is already widely used through the API for the keys themselves.\r\n* `tag` -> `nbt`\r\n* Add `get` prefixes to `StorageView` functions\r\n\r\n* Bump version\r\n\r\n* FluidKey -> FluidVariant\r\n\r\n* Bump version\r\n\r\n* Expand getVersion() documentation, make it thread-safe and use long.\r\n\r\nCo-authored-by: Player <player@player.to>\r\n\r\n* empty resource -> blank resource, and update SingleFluidStorage\r\n\r\nCo-authored-by: Player <player@player.to>\r\n\r\n* Make CauldronFluidContent a final class instead of a record.\r\n\r\nCo-authored-by: Player <player@player.to>\r\n\r\n* Get rid of CauldronFluidContent#minLevel (was always 1)\r\n\r\n* Fix nested commits. (Thanks @warjort!)\r\n\r\n* Separate Transaction and TransactionContext\r\n\r\nCo-authored-by: Devan-Kerman <dev.sel20@gmail.com>\r\nCo-authored-by: Player <player@player.to>\r\n\r\n* Change WorldLocation into a private record\r\n\r\n* Bump version\r\n\r\n* Guard against exceptions thrown in close callbacks\r\n\r\n* Make sure blank fluid variants don't have a tag\r\n\r\n* Add documentation, make CauldronStorage clearer\r\n\r\nCo-authored-by: frqnny <45723631+frqnny@users.noreply.github.com>\r\n\r\n* Allow null storages in StorageUtil#move, and clarify sidedness of FluidStorage\r\n\r\n* Add explicit hashCode and equals for transfer variants\r\n\r\n* Remove ugly equals and hashCode overrides, and add constant time hashcode spec\r\n\r\nCo-authored-by: Devan-Kerman <dev.sel20@gmail.com>\r\nCo-authored-by: liach <liach@users.noreply.github.com>\r\nCo-authored-by: Player <player@player.to>\r\nCo-authored-by: frqnny <45723631+frqnny@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307ed0ac82a74541b22dd",
    "number": 1355,
    "body": "**Full Context:** read #1353\r\n**tl;dr:** `DynamicAttributeTool#getDynamicModifiers` does not remove attributes properly. This fix makes it arguably cleaner than before while patching up bugs while still providing entity context.\r\n\r\n[Before - streamable](https://streamable.com/nolbtn)\r\n[🌟After ✨ - streamable](https://streamable.com/vanr6g)\r\n\r\n---\r\n\r\nThis PR removes the current attribute-merging functionality of the API (which seems to boil down to supporting Entity context) and consolidates all logic for dynamic attributes into `Item#getDynamicAttributes`. The main issue is still entity context, so we inject into all the locations `getDynamicAttributes` is called at to set context on the stack before calling the method.\r\n\r\nThe only potential edge case I can think of with this API is someone calling `Item#getAttributeModifiers` and expecting to get entity-context-dependent dynamic attributes in return, but the caller is also free to go straight to `getDynamicModifiers` and pass in the entity themselves.\r\n\r\nMost of the decisions here are the result of eliminating everything else, so if you have any particular questions about other approaches (or what I did), feel free to ask. \r\n\r\n---\r\n\r\nNote: [almost nobody uses this particular functionality](https://github.com/search?q=getDynamicModifiers&type=code), and there are no breaking changes, so I think we can get this through faster, considering how the current version is not usable.",
    "head_branch": "dynamic-tool-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update Dynamic Attribute Tool modifier application to fix #1353 (#1355)\n\n* dynamic tool attributes v2, part 1\r\n\r\n* move duck interface to impl package\r\n\r\n* add licenses\r\n\r\n* fix mixin build failure on a dedicated server\r\n\r\n* remove unused shadow of getItem()\r\n\r\n* add a simple user-context-based attribute tool to the test item suite\r\n\r\n* add clarifying comments in DynamicAttributeTool jdoc regarding parameter reliability + extended docs on getDynamicModifiers for attribute freshing\r\n\r\n* player -> user because context is not always a player\r\n\r\n* add license to TestNullableItem"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662307ed0ac82a74541b22de",
    "number": 1352,
    "body": "This PR extends #1234 to Item-provided APIs. The only (rather straightforward) API addition is [`ItemApiLookup`](https://github.com/FabLabsMC/fabric/blob/item-api-lookup/fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/item/ItemApiLookup.java), there you can also find example code.\r\n\r\n~~I decided to only have `Item` as the mandatory first parameter of queries, and let other information such as NBT or count be provided by the generic context `C`. I am pretty sure most APIs will be able to find an expressive context that suits them better.~~ The queries now have an `ItemStack` parameter.\r\n\r\nThere is no `ItemApiCache` because there are no expensive block state and block entity queries to cache.",
    "head_branch": "item-api-lookup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add ItemApiLookup (#1352)\n\n* Initial version of Item API API\r\n\r\n* Use an ItemStack parameter instead of an Item parameter for API queries\r\n\r\n* Add ItemStack modification note\r\n\r\n* Kindly ask providers not to modify the stack\r\n\r\n* Expose the API and context types\r\n\r\n* Bump version to 1.2.0"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662307ee0ac82a74541b22df",
    "number": 1351,
    "body": "This PR extends #1234 to Item-provided APIs. The only (rather straightforward) API addition is [`ItemApiLookup`](https://github.com/FabLabsMC/fabric/blob/item-api-lookup/fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/item/ItemApiLookup.java), there you can also find example code.\r\n\r\nI decided to only have `Item` as the mandatory first parameter of queries, and let other information such as NBT or count be provided by the generic context `C`. I am pretty sure most APIs will be able to find an expressive context that suits them better.\r\n\r\nThere is no `ItemApiCache` because there are no expensive block state and block entity queries to cache.",
    "head_branch": "item-api-lookup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307ef0ac82a74541b22e0",
    "number": 1343,
    "body": "This is just more handy to be able to register an item as fuel directly in its builder",
    "head_branch": "1.16-fuel",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307f00ac82a74541b22e1",
    "number": 1339,
    "body": "This PR adds an API to allow registring an entry that will not be synced to the client. \r\n\r\nIs this something we want to support? Are there better solutions to this?",
    "head_branch": "serveronlyregistryids",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307f10ac82a74541b22e2",
    "number": 1338,
    "body": "* Upgrading to loom 0.6 and the new run config system\r\n* Fix some of the gradle 7 deprecation warnings, there are more left in loom. Once complelte I want to fail the build on deprecations.\r\n* Start looking at singing the jars - currently just pgp. jar singing is TODO\r\n* Build reproducable jars\r\n* Build testmod jars - a fat jar depends on some loom work",
    "head_branch": "loom0.6",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307f20ac82a74541b22e3",
    "number": 1331,
    "body": "This pull request builds upon [my Fabric Loader pull request](https://github.com/FabricMC/fabric-loader/pull/390) by adding several Minecraft-specific config features. \r\n\r\nThe first of these changes is the implementation of `ValueContainerProvider` on `ServerInfo` to handle remote config values and `MinecraftServer` to handle level-specific config values.\r\n\r\nThe second is the addition of the `USER` and `LEVEL` config save types.\r\n\r\n`USER` configs are stored in the same root config folder as `SaveType#ROOT` configs, but can additionally be synced to the server and other clients. This is useful for mods with server-side components that would like each player to be able to configure for themselves. It also allows for users to send config values to each other (one example being allowing players to set their own nameplate color).\r\n\r\n`LEVEL` configs are stored in a given levels config folder (`.minecraft/saves/New World/config`, for instance). These can be used as a more robust alternative to gamerules for mods that wish to save complex settings on a per-world basis. These config values can be synced to clients to allow the server to control certain client-side behavior (such as block collision).\r\n\r\nThe final addition is the parsing of language files and automatic adding of comments to config values and definitions, both client-side and server-side. Comments are recognized as having keys equal to the value key appended by `<VALUE_KEY>.*\\\\.comment.*`. Comment keys are expected to be unique, but no suffix style is enforced. Comments will be serialized in the order they appear in the lang file (despite order of objects not being defined by the JSON specification).\r\n\r\nThis pull request does *not* include any GUI elements or builders. [Conrad](https://github.com/Hephaestus-Dev/Conrad/tree/fapi) is a library that automatically transforms registered configs into screens using [Vivid](https://github.com/Hephaestus-Dev/vivid/tree/fapi) and registers them to Mod Menu. This behavior could be merged into Fabric API at a future date if it was deemed suitable.\r\n\r\n<br>This pull request contains a large number of changes, and testing them all would require writing an entire mod on its own, so you'll notice the testmod is rather light. As an alternative, I have converted [a mod of my own](https://github.com/Hephaestus-Dev/TinyTweaks/tree/config) to use this system, as well as most of the features offered by it that can act as a test mod.",
    "head_branch": "configs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307f20ac82a74541b22e4",
    "number": 1327,
    "body": "This PR intends to provide a way to directly modify certain aspects vanilla loot tables without having to write complex boilerplate or replace the whole thing (See #1287). This is done using the visitor pattern to avoid coupling the algorithm to the structure of the loot table in the event it changes.\r\n\r\nThis PR is nowhere near done and is only being opened so people are aware that it's being worked on and can comment on it.",
    "head_branch": "loot-table-visitors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307f30ac82a74541b22e5",
    "number": 1322,
    "body": "Adds `SlotWithClickAction`, an interface slots can implement to have a click action à la `Item#onClicked`. This is called before `Item#onClicked` and `Item#onStackClicked`. I've run into a handful of situations where this behavior would be useful, here's a couple potential use cases:\r\n* An item filter, where clicking a stack onto the filter slot adds it as a filter, instead of consuming the stack.\r\n* A sorted storage screen, where clicking on any slot with a stack in hand will deposit it into the system, instead of swapping with the clicked slot, and clicking on it with an empty hand will pull at most 64 items out of the stacks that internally hold more than 64.\r\n* An inventory that consumes added items and spits out new resources.\r\n* Other cases where you want slots that don't actual represent an `ItemStack`, but a more abstract portion of a screen.",
    "head_branch": "1.17",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307f40ac82a74541b22e6",
    "number": 1321,
    "body": "",
    "head_branch": "detectorrail",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add ability for minecarts to specify their detector rail comparator value (#1321)\n\n* Add ability for minecarts to specify their detector rail comparator value\r\n\r\nAddress comments\r\n\r\n* Apply suggestions from code review\r\n\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>\r\n\r\n* Warn instead of debug\r\n\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662307f50ac82a74541b22e7",
    "number": 1320,
    "body": "Added a clear method to MutableQuadView and inheritors.\r\n\r\nIndigo currently combines the MQV and QE impls anyway, and the clear method actually already exists. This PR provides a safer way to access it.",
    "head_branch": "clear-mqv",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307f60ac82a74541b22e8",
    "number": 1319,
    "body": "When `getBuffer` is called on `VertexConsumerProvider.Immediate` (the one used for outline rendering) with a different layer than the active one, it draws the old render layer and then changes its internal state to accept vertices for the format of the new render layer. In particular, this means that the `RenderLayer.getLines()` `VertexConsumer` obtained by vanilla before the `BLOCK_OUTLINE` event but used after the handlers are run may become invalid if the event handlers change the current render layer of the immediate mode VCP.\r\n\r\nTo reproduce, just put `worldRenderContext.consumers().getBuffer(RenderLayer.getTranslucent())` in an event handler and the game will crash when rendering the default block outline as it tries to emit lines to the immediate mode VCP still configured to emit translucent quads.\r\n\r\nThis PR:\r\n* Adds a call to `getBuffer(RenderLayer.getLines())` after the invocation of the event handlers to make sure the default block outline emits to the immediate mode VCP in the correct state.\r\n* Changes the implementation of `BlockOutlineContext#vertexConsumer()` to make sure that the VCP is in the correct state after each call, and deprecates the method as there is no reason to keep it.\r\n\r\nFull discussion on fabricord: https://discord.com/channels/507304429255393322/566276937035546624/810582855603847169.",
    "head_branch": "blockoutline-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix a WorldRenderEvents.BLOCK_OUTLINE bug (#1319)\n\n* Fix bug related to immediate mode VCP\r\n\r\n* Add testmod"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662307f60ac82a74541b22e9",
    "number": 1317,
    "body": "I used Gradle's CLI `--warning-mode all` option to show deprecation warnings then fixed them.\r\n\r\nWhen importing with Gradle, it still shows the infamous warning:\r\n\r\n> ```\r\n> Deprecated Gradle features were used in this build, making it incompatible with Gradle 7.0.\r\n> Use '--warning-mode all' to show the individual deprecation warnings.\r\n> See https://docs.gradle.org/6.8.2/userguide/command_line_interface.html#sec:command_line_warnings\r\n> ```\r\n\r\nBut I suspect that's got something to do with Loom itself, which will hopefully be fixed in 0.6.\r\n\r\n\r\nfixes #1316 ",
    "head_branch": "1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307f70ac82a74541b22ea",
    "number": 1309,
    "body": "* Switches from events-lifecycle-v0 to lifecycle-events-v1",
    "head_branch": "1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update key-binding-api-v1 example (#1309)\n\nSwitches from events-lifecycle-v0 to lifecycle-events-v1"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307f80ac82a74541b22eb",
    "number": 1308,
    "body": "The `notSolid` method in `FabricMaterialBuilder` returns `Material.Builder` instead of `FabricMaterialBuilder`. Because this is a builder pattern, returning the super type prevents any subsequent method calls from using `FabricMaterialBuilder` methods.",
    "head_branch": "fix-material-builder",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix FabricMaterialBuilder.notSolid having the wrong return type (#1308)\n\nShould be backwards compatible."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307f90ac82a74541b22ec",
    "number": 1305,
    "body": "This will ensure that concurrent registrations are safe and ensure safe publication of the updated invoker. My chosen approach should be the most appropriate until Java 9, which could tweak the invoker access to use release/acquire instead of the full volatile.\r\n\r\nIssue originally spotted by @Technici4n ",
    "head_branch": "1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make event registration thread safe (#1305)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662307fa0ac82a74541b22ed",
    "number": 1301,
    "body": "Makes `MultipartBakedModel`s and `WeightedBakedModel`s use frapi.",
    "head_branch": "fix-1273",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #1273 (Make MultipartBakedModel and WeightedBackedModel implement FabricBakedModel properly) (#1301)\n\n* fix #1273\r\n\r\n* Expand testmod to test multipart and weighted models with FRAPI submodels\r\n\r\nCo-authored-by: Technici4n <13494793+Technici4n@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662307fb0ac82a74541b22ee",
    "number": 1295,
    "body": "This adds a simple testmod to the renderer api to allow some level of testing if the implementation works.\r\n\r\nI also used this pull request to figure out where renderer api documentation is lacking and will open an issue to address the issues I have seen in documentation.",
    "head_branch": "renderer-api-testmods",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Create a simple renderer api testmod (#1295)\n\n* Create a simple renderer api testmod\r\n\r\n* Update fabric-renderer-api-v1/src/testmod/java/net/fabricmc/fabric/test/renderer/simple/client/RendererClientTest.java\r\n\r\nCo-authored-by: liach <7806504+liach@users.noreply.github.com>\r\n\r\nCo-authored-by: liach <7806504+liach@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662307fb0ac82a74541b22ef",
    "number": 1293,
    "body": "This fixes a bug in vanilla code where removing a dimension will also remove every other dimension but the overworld even if the other dimensions are present.\r\n\r\nTracking Mojang issue: https://bugs.mojang.com/browse/MC-197860",
    "head_branch": "dim-fix-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307fc0ac82a74541b22f0",
    "number": 1291,
    "body": "This migrates all uses of v0 networking to v1 api, and changes the readme to not mention networking-v0 in the example for dependencies.\r\n\r\nThis effectively makes v0 removable if it breaks in the future beyond repair. Though I expect v0 to last quite a bit longer.\r\n\r\nThis also fixes an issue where the new screen handler api does not release the packet byte buf after opening the screen.",
    "head_branch": "networking-ports",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove all inter-module dependencies on fabric-networking-v0 (#1291)\n\nThis migrates all uses of v0 networking to v1 api, and changes the readme to not mention networking-v0 in the example for dependencies.\r\n\r\nThis effectively makes v0 removable if it breaks in the future beyond repair. Though I expect v0 to last quite a bit longer."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307fd0ac82a74541b22f1",
    "number": 1287,
    "body": "Redirects all `item == Items.SHEARS` from vanilla.\r\nUsed this to transform the loot tables (of course i'm not doing that manually)\r\n```bash\r\ngrep -L '\"item\": \"minecraft:shears\"' * | xargs rm -f\r\ngrep -rli '\"item\": \"minecraft:shears\"' * | xargs -i@ sed -i 's/\"item\": \"minecraft:shears\"/\"tag\": \"fabric:shears\"/g' @\r\n```\r\nCloses #1226 ",
    "head_branch": "shears",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307fe0ac82a74541b22f2",
    "number": 1285,
    "body": "Fixes crashes with screens that do not call super.init such as REI here: https://github.com/shedaniel/RoughlyEnoughItems/blob/39ed7b648c853e19fc448f297aa9716ccfa7d60a/RoughlyEnoughItems-runtime/src/main/java/me/shedaniel/rei/gui/DelegateScreen.java#L261\r\n\r\nThe events may not fire, or behave correctly in this case, but its better than crashing.",
    "head_branch": "screen-api-const",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307ff0ac82a74541b22f3",
    "number": 1284,
    "body": "Since Fabric API is now on Modrinth, I thought this would be nice to have.\r\n\r\n----------\r\n\r\nThis PR adds Modrinth publishing to the `release.yml` workflow, provided a `MODRINTH_API_TOKEN` GitHub secret that should be added to the organization or the repository.\r\n\r\nTODO:\r\n- [X] Write Code\r\n- [X] Test\r\n- [ ] Receive Feedback ~~and rewrite the entire thing~~",
    "head_branch": "1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662307ff0ac82a74541b22f4",
    "number": 1282,
    "body": "This documents the custom values Fabric API provides or consumes.",
    "head_branch": "custom-value-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308000ac82a74541b22f5",
    "number": 1280,
    "body": "Also adds a preRelase global var that will be sent for snapshots, in the past I was just changing curseforge to beta.",
    "head_branch": "modrinth",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Modrith upload (#1280)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308010ac82a74541b22f6",
    "number": 1278,
    "body": "**Disclaimer**: _Yes, this is a fluid api PR. Please keep the discussion constructive, or I will make sure that this issue is locked to contributors._\r\n\r\nThis PR is very big, and I expect many questions, so please open a code review thread to discuss a specific part of it.\r\n\r\nThis PR is also a draft. Please review the API as much as possible, as I think it is close to its final state. I am opening this PR already because the implementation details are taking a while, but there is no need to delay the review of the API for that... So please, I need your comments on the API already while I polish the implementation details and the javadoc. If you want to comment on that too, go ahead, I appreciate any feedback.\r\n\r\nI am using `[WIP]` blocks in this message to indicate what still needs to be done, the rest can be considered ready for review.\r\n\r\n# Fabric Transfer API v1\r\n## Introduction\r\nBuilding on #1234, this pull requests introduces `fabric-transfer-api-v1`: a new module for generic resource transfer. That module contains generic resource transfer classes and helpers, and a few helpers to make working with fluids and items easier. Generic means that the API can be used to transfer fluids, items, energy, gasses, enchanted potions, Thaumcraft essentia, or any other quantifiable game resource that can be imagined. (Note: the diff contains #1234 as well, I will rebase when that is merged.)\r\n\r\nThis pull requests also introduces an `item` package to `fabric-api-lookup-api-v1` which contains ApiLookups for item-provided Apis, and `ItemKey` which is the equivalent of `Fluid` for item transfer.\r\n\r\nMany thanks to @Grondag who wrote Fluidity, of which this PR is very much inspired.\r\n\r\nCloses #1166.\r\n\r\n### Problem scope\r\nThe problems this API aims to solve is:\r\n* Item transfer between blocks. Example use case: AE2, item pipes, machines, ...\r\n* Fluid transfer between blocks. Example use case: AE2, fluid pipes, machines, ...\r\n* Fluid transfer with items. Example use case: emptying and filling buckets or modded containers, from the player inventory or from a machine inventory.\r\n\r\nMore specifically, when we talk about transfer, we mean:\r\n* Insertion of resources.\r\n* Extraction of resources.\r\n* Reading of available resources (think ME Storage Bus).\r\n\r\n## The API\r\n### The core transfer API: `Storage` and `StorageView`\r\n[`Storage<T>`](https://github.com/FabLabsMC/fabric/blob/transfer-api/fabric-transfer-api-v1/src/main/java/net/fabricmc/fabric/api/transfer/v1/storage/Storage.java) is a container for resources of type `T`. It allows inserting, extracting, and reading the contents. `getVersion` is optional, and is really meant for AE2-like mods to skip checking inventories that haven't change since the last scan.\r\n\r\n[`StorageView<T>`](https://github.com/FabLabsMC/fabric/blob/transfer-api/fabric-transfer-api-v1/src/main/java/net/fabricmc/fabric/api/transfer/v1/storage/StorageView.java) represents some stored resource, and optionally allows extracting it as well.\r\n\r\nNote that there is an asymmetry between insertion and extraction.\r\nThat is because when we are inserting we know what we want to insert,\r\nbut in some cases we don't know what exactly to extract and we have to read the inventory's storage.\r\nThat's why it's also possible to extract directly from a `StorageView`.\r\n\r\n[WIP] Base implementations (combined, insert only, extract only).\r\n\r\n### Transactions\r\nNote that multiple functions have a transaction parameter. A transaction is a global operation where participants guarantee atomicity: either the whole operation succeeds, or it is completely cancelled. In that case, we say that it is aborted. Nested transactions are also supported.\r\n\r\nSee [the `Transaction` class](https://github.com/FabLabsMC/fabric/blob/transfer-api/fabric-transfer-api-v1/src/main/java/net/fabricmc/fabric/api/transfer/v1/transaction/Transaction.java) for more details. Important detail: participants are automatically enrolled in all the transactions of the transaction stack.\r\n\r\n### Fluid API\r\nThe fluid api is simply sided access to `Storage<Fluid>` instances.\r\nUnsided access may be considered for a later PR.\r\n\r\n[WIP] Cauldron compatibility is NYI, and will be added soon for regular 1.16 water cauldrons. For 1.17, I have a plan to allow registration of modded cauldrons.\r\n[WIP] I want to provide a `SimpleFluidStorage` implementation, and will get to it eventually.\r\n\r\n### Item API\r\nThe item api is sided access to `Storage<ItemKey>` instances. `ItemKey`s are an item, and an immutable associated NBT tag. See [the class](https://github.com/FabLabsMC/fabric/blob/transfer-api/fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/item/ItemKey.java) for more details. It is planned that no mods will be using `Inventory` and `SidedInventory` directly after this API is merged. Thanks to a fallback provider in the `BlockApiLookup`, vanilla containers and modded containers relying on the vanilla interfaces are still supported.\r\n\r\n`Inventory`, `SidedInventory` and `PlayerInventory` wrappers are also available: [InventoryWrappers](https://github.com/FabLabsMC/fabric/blob/transfer-api/fabric-transfer-api-v1/src/main/java/net/fabricmc/fabric/api/transfer/v1/item/InventoryWrappers.java). Note the existence of an `offerOrDrop` function with transaction support.\r\n\r\nAgain, unsided access may be considered for a later PR.\r\n\r\n[WIP] I will provide a base implementation for \"simple\" item storages.\r\n[WIP] I will provide a `Slot` implementation to allow interacting with `ItemKey`-based storages. This is quite tricky as all the vanilla `ScreenHandler` methods mutate the returned item stacks directly.\r\n\r\n### Item-provided APIs\r\nThis PR adds `ItemApiLookup` and `ItemApiLookupRegistry` to the `fabric-api-lookup-api-v1` module (see #1234).\r\n\r\nThis PR then defines [`ContainerItemContext`](https://github.com/FabLabsMC/fabric/blob/transfer-api/fabric-transfer-api-v1/src/main/java/net/fabricmc/fabric/api/transfer/v1/context/ContainerItemContext.java) to allow items to interact with the underlying container.\r\n\r\nIt uses these two building blocks to define the fluid api for container items. Item-containing items (think shulker boxes or backpacks) are out of scope for this PR.\r\n\r\n[WIP] I will explain in detail how it works.\r\n[WIP] Vanilla compat is not done yet, for now only water and lava bucket emptying is supported.\r\n\r\n### Other things\r\n#### Unsided APIs\r\nUnsided APIs are out of scope because they are not essential for mod compatibility, and the requirements are not that clear to me. The community can use the provided transfer APIs and the `fabric-api-lookup-api-v1` module to experiment with that.\r\n\r\n#### Change notification\r\nI also believe that storage change notification is way too complicated to be added to the API. It requires listener management for inventories, and it introduces the need to identify the slot where the change happened, which is non-trivial for complicated inventories such as ME Chests. It would also be optional (we can't support it for `Inventory` wrappers anyway), and so it would still require special casing by the api consumer. I hope that `Storage#getVersion` will be good enough for small and mid size storages. Very large storages probably require a specialized thrid party API anyway, for which this PR can probably provide a lot of helpful building blocks.\r\n\r\n[WIP] An extensive test mod will be added, for now I am porting my own mod Modern Industrialization to this API.\r\n[WIP] A README will be added too, and a lot of javadoc, including `package-info.java`.",
    "head_branch": "transfer-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308020ac82a74541b22f7",
    "number": 1272,
    "body": "I need something like this for 1.16.4",
    "head_branch": "input-events",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308030ac82a74541b22f8",
    "number": 1270,
    "body": "Note about implementing or extending the interface `RenderContext` has been moved from a method's javadoc to the class' javadoc to make more sense.\r\n`blockOutlieContext` in `WorldRenderEvents` has been renamed to `blockOutlineContext`.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix javadoc and typo (#1270)\n\n* Update RenderContext.java\r\n\r\n* Update WorldRenderEvents.java"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662308030ac82a74541b22f9",
    "number": 1266,
    "body": "",
    "head_branch": "1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308040ac82a74541b22fa",
    "number": 1264,
    "body": "This is not complete yet, but available for viewing so people can comment on the new module as it comes together.\r\n\r\nSo far I have implemented the block break/place events for the logical server and other parts will be implemented over the next few days.\r\n\r\nThere are also other things being considered such as an Interact/Attack air event and other things discussed in #1247\r\n\r\nThis will resolve #1247",
    "head_branch": "ft/interaction-evt-v1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308050ac82a74541b22fb",
    "number": 1263,
    "body": "This PR at the time of writing does two things:\r\n- Changes the mod id to `fabric-api`\r\n- Adds a `provides` entry with `fabric` as a provided mod",
    "head_branch": "1.17",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308060ac82a74541b22fc",
    "number": 1259,
    "body": "The stack trace that led to this PR:\r\n\r\n```\r\njava.lang.IllegalArgumentException: Last character in replacement string can't be \\, character to be escaped is required.\r\n\tat java.lang.String.checkLastChar(String.java:56)\r\n\tat java.lang.String.replaceAll(String.java:3558)\r\n\tat net.fabricmc.fabric.impl.resource.loader.ModResourcePackUtil.appendModResourcePacks(ModResourcePackUtil.java:60)\r\n\tat net.minecraft.client.resource.ClientBuiltinResourcePackProvider.getProgrammerArtModResourcePacks(ClientBuiltinResourcePackProvider.java:565)\r\n\tat net.minecraft.client.resource.ClientBuiltinResourcePackProvider.handler$zef000$onSupplyZipProgrammerArtPack(ClientBuiltinResourcePackProvider.java:553)\r\n\tat net.minecraft.client.resource.ClientBuiltinResourcePackProvider.method_25457(ClientBuiltinResourcePackProvider.java:229)\r\n\tat net.minecraft.client.resource.ClientBuiltinResourcePackProvider$$Lambda$2697/000000000000000000.get(Unknown Source)\r\n\tat net.minecraft.resource.ResourcePackProfile.of(ResourcePackProfile.java:36)\r\n\tat net.minecraft.client.resource.ClientBuiltinResourcePackProvider.getProgrammerArtResourcePackProfile(ClientBuiltinResourcePackProvider.java:242)\r\n\tat net.minecraft.client.resource.ClientBuiltinResourcePackProvider.getProgrammerArtResourcePackProfile(ClientBuiltinResourcePackProvider.java:229)\r\n\tat net.minecraft.client.resource.ClientBuiltinResourcePackProvider.register(ClientBuiltinResourcePackProvider.java:84)\r\n\tat net.minecraft.resource.ResourcePackManager.providePackProfiles(ResourcePackManager.java:45)\r\n\tat net.minecraft.resource.ResourcePackManager.scanPacks(ResourcePackManager.java:38)\r\n\tat net.minecraft.client.MinecraftClient.<init>(MinecraftClient.java:481)\r\n\tat net.minecraft.client.main.Main.main(Main.java:177)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat net.fabricmc.loader.game.MinecraftGameProvider.launch(MinecraftGameProvider.java:224)\r\n\tat net.fabricmc.loader.launch.knot.Knot.init(Knot.java:141)\r\n\tat net.fabricmc.loader.launch.knot.KnotClient.main(KnotClient.java:27)\r\n\tat net.fabricmc.devlaunchinjector.Main.main(Main.java:86)\r\n```\r\n\r\nNoticed it was the only place where `replaceAll` was used, other places with similar code prior to latest releases always used `replace`.",
    "head_branch": "resource-loader-fix-dev-windows",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix dev env crash on Windows."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308070ac82a74541b22fd",
    "number": 1258,
    "body": "Works similar to `ItemTooltipCallback` but for the new 1.17 stuff that bundles use.",
    "head_branch": "1.17",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308080ac82a74541b22fe",
    "number": 1256,
    "body": "Closes #1255 \r\n\r\nEntities can exist in uninitialized portals again:\r\n![2021-01-02_21 06 55](https://user-images.githubusercontent.com/9124288/103470974-6d7b2f00-4d3f-11eb-8f41-44e1e0509f04.png)\r\n",
    "head_branch": "fix-nether-portal-crash",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix nether portal crash (#1256)\n\n* Correct ordinal of `afterWorldChanged` mixin to the correct return\r\n\r\nCo-authored-by: i509VCB <git@i509.me>\r\n\r\n* Handle null entity when unable to be created\r\n\r\n* Comply with Checkstyle\r\n\r\n* Remove redundant ordinal and only use null return to check valid teleports\r\n\r\nCo-authored-by: Player <player@player.to>\r\n\r\nCo-authored-by: i509VCB <git@i509.me>\r\nCo-authored-by: Player <player@player.to>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308090ac82a74541b22ff",
    "number": 1254,
    "body": "Release notes of the respective bumped libraries:\r\n\r\n[GitHub-API Release Notes](https://github.com/hub4j/github-api/releases)\r\n[Licenser Release Notes](https://github.com/CadixDev/licenser/releases)\r\n[GRGIT Release Notes](https://github.com/ajoberstar/grgit/releases)\r\n\r\n",
    "head_branch": "update-deps",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308090ac82a74541b2300",
    "number": 1253,
    "body": "This adds a custom value to all Fabric API modules:\r\n\r\nThis custom value is located at `custom.fabric-api:module-lifecycle`. This is a string custom value and has three supported values: `stable`, `experimental` and `deprecated`. These denotations are per the suggestions in #1118. This also adds a task to verify each submodule has this custom value in it's `fabric.mod.json` and it contains the proper value.\r\n\r\nThis new custom value may be used by other mods to have a look into the module lifecycle of a fabric api module - possibly modmenu.\r\n\r\n~~My hand has sadly been forced by the fact JsonSlurper is not available in main buildscript no matter what I try so I have been forced to open up buildSrc.~~\r\n\r\nThis adds a `validateModules` task that is called as part of the `check` task so module validation will also be handled in github actions.\r\n\r\nThis pull request also updates the gradle wrapper to 6.7.1",
    "head_branch": "module-lifecycle-cv",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add custom value denoting module lifecycles.  (#1253)\n\n* Add custom value denoting module lifecycles.\r\n\r\n* Make the module validation work.\r\n\r\nMy hand has been forced - we must use buildSrc since JsonSlurper is not available in main buildscript.\r\n\r\n* Apply task to each project and dont cross projects\r\n\r\n* A horrible hack\r\n\r\n* Wait what\r\n\r\n* It works now.\r\n\r\n* Not needed\r\n\r\n* Drop unneeded maven repo, cache map lookup"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623080a0ac82a74541b2301",
    "number": 1252,
    "body": "I think it's worth using larger expected sizes of these maps for other mods.\r\n\r\nHowever, I have not tested if the performance has increased. Perhaps someone has thoughts on this matter and perhaps my idea is meaningless — let me know, I'm interested.",
    "head_branch": "optimize-registry",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623080b0ac82a74541b2302",
    "number": 1251,
    "body": "Fixes #1250",
    "head_branch": "fix-entityevt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Workaround for shadowed fields from supermixins do not remap. (#1251)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623080c0ac82a74541b2303",
    "number": 1249,
    "body": "Companion to FabricMC/fabric-meta#10\r\n\r\nWhen a release is built, adds the API version to the list of MC versions based on the MC version it was built against.",
    "head_branch": "1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623080d0ac82a74541b2304",
    "number": 1245,
    "body": "**What broke?**\r\nMojang introduced a new API class, that I am donning \"Observer\" which wraps a tracking server player, providing a getter for it, and a simple packet dispatching method alongside. The API was still mixing in expecting a collection of server players to expose for `PlayerLookup#tracking(Entity)` which has since been replaced which this new observer type. This generic type mismatch results in a class cast exception at runtime when this API method is called. This pull request migrates the mixins and PlayerLookup implementation to support this change and fix the crash.\r\n\r\n**What changed?**\r\nThere has been a migration to the new API class internally, and a refactor of entity tracker access. Previously the networking API had a mixin into TACS that shadowed the field and added a non-null lookup. The shadow has been replaced with an accessor mixin and the null checking migrated to the PlayerLookup call site.",
    "head_branch": "1.17-networking",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update networking API to 20w46a+, simplify mixin impl (#1245)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623080d0ac82a74541b2305",
    "number": 1244,
    "body": "This should help direct people who are asking for help to the discord or GitHub Discussions if it is not directly related to issues with or feature requests for Fabric API.\r\n\r\nScreenshot (Outdated):\r\n![image](https://user-images.githubusercontent.com/30619168/103123242-4b035a80-4649-11eb-87af-7b13fe681c2a.png)\r\n",
    "head_branch": "github/contact-pages",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add contact links to issue template page (#1244)\n\n* Add contact links to issue template page\r\n\r\n\r\nWhoops\r\n\r\n* Update .github/ISSUE_TEMPLATE/config.yml\r\n\r\nCo-authored-by: haykam821 <24855774+haykam821@users.noreply.github.com>\r\n\r\n* Update .github/ISSUE_TEMPLATE/config.yml\r\n\r\nCo-authored-by: haykam821 <24855774+haykam821@users.noreply.github.com>\r\n\r\n* Update .github/ISSUE_TEMPLATE/config.yml\r\n\r\nCo-authored-by: haykam821 <24855774+haykam821@users.noreply.github.com>\r\n\r\nCo-authored-by: haykam821 <24855774+haykam821@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623080e0ac82a74541b2306",
    "number": 1243,
    "body": "Somewhat requested by @LambdAurora, the event added in this pull request is called when the client's world is changed. This may be used for reference cleanup when the client has changed worlds in case a mod tracks the current client world.",
    "head_branch": "lifecycle/client-world",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623080f0ac82a74541b2307",
    "number": 1242,
    "body": "This does not do anything at the moment but it will be used in the future to allow creating distributions of Fabric API which do not bundle deprecated modules.\r\n\r\nThis also updates licenser since I had to apply it in buildSrc project.\r\n\r\n**Whats the deal with a whole extension for this?**\r\n\r\nThe plan is to move a lot of the cruft in the main buildscript and centralize some module information such as the big mess for `moduleDependencies` into this `module` closure.\r\n\r\nThe entire buildscript for a module could look like this when this whole thing is complete:\r\n```groovy\r\nmodule {\r\n\tname(\"fabric-registry-sync-v0\") // This is archivesBaseName\r\n\tversion(\"0.8.0\")\r\n\tstable() // The only part included in the PR so far\r\n\taccessWidener() // Resolves the access widener at `src/main/resources/fabric-registry-sync-v0.accesswidener`\r\n\r\n\tdependency(\"fabric-api-base\") // This would replace `moduleDependencies`\r\n\tdependency(\"fabric-networking-api-v1\")\r\n\ttestDependency(\"fabric-lifecycle-events-v1\") // This would simplify the mess of dependencies in the `testmodCompile` configuration\r\n}\r\n```\r\n\r\nThe above module configuration could also be used to generate a `fabric.mod.json` at compile time for publish or testing in IDE as to reduce the amount of inconsistency between the `fabric.mod.json` between every module.",
    "head_branch": "module-types",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308100ac82a74541b2308",
    "number": 1241,
    "body": "**Edit (13 May 2022):** Now merged with 1.18.2 branch and official TAW module. Also includes an internal API for resource tracking ported from #1983.\r\n\r\n**Edit (31 Jan 2022):** This PR has now been updated to 1.18.1, uses interface injection and also creates the TAW module. The multipurpose `LootTableLoadingCallback` was replaced with two events with clear purposes (replacing or modifying).\r\n\r\n**Edit (27 Nov 2021):** After 18 months of working this API, I made another refactor and started using transitive AWs instead of static accessor classes. They'll be merged into the TAW module once that comes along, so this is a draft for now.\r\n\r\n## What does the loot table API do?\r\nThe main use case of this API is adding items/loot pools to loot tables (example: modded seeds to vanilla grass) or modifying them in some other way. There are also extended and more convenient versions of the vanilla loot table/pool builders, like in v1.\r\n\r\nThis PR is also a replacement for #629 with a different approach. This one is also backwards compatible (I had some trouble with that using the same design).\r\n\r\n## Changes from V1\r\n\r\nThis API uses modern Yarn names and avoids \"magic interfaces\" implemented on vanilla classes. It also drops some unnecessary functionality that is fully public in modern vanilla.\r\n\r\n### Transitive access wideners instead of magic interfaces and static access classes\r\n\r\nThe magic interfaces `FabricLootSupplier` and `FabricLootPool` are replaced with **transitive access wideners**. I also dropped some functionality that is now available in vanilla (`LootJsonParser` and `LootEntryTypeRegistry`).\r\n\r\n- The returned lists from V1 magic interfaces are now immutable. The mutability was not documented at all, and this is safer.\r\n- The access wideners also expose the bonus rolls of a loot pool.\r\n- The implementation is much simpler now for V1 as well:\r\n  - `LootEntryTypeRegistry` no longer uses mixins but calls `Registry.register` directly.\r\n  - `LootJsonParser` no longer uses reflection.\r\n\r\n### Injected builder interfaces\r\n\r\nIn the new V2 module, there are `FabricLootPoolBuilder` and `FabricLootTableBuilder` to replace the V1 builders.\r\n\r\n- They are now interfaces that are injected to `LootPool.Builder` and `LootTable.Builder`, respectively.\r\n- Minor renames: `of(LootTable/Pool)` -> `copyOf`\r\n- The loot pool builder now has methods for working with collections as parameters.\r\n- All `copyFrom` methods are gone. They had weird and arbitrarily chosen boolean flag parameters, and their few use cases can be replicated using v2 API methods.\r\n\r\n### Changes to events\r\n\r\n`LootTableLoadingCallback` has been replaced with `LootTableEvents.REPLACE` and `LootTableEvents.MODIFY` which clearly separate the two different purposes. `REPLACE` runs before `MODIFY`.\r\n\r\n- The callback loop is now stopped when a loot table is replaced. This isn't really a breaking change to v1 as that behaviour was not defined at all.\r\n- You can access a loot table's source in the events. This can be used to only apply modifications to built-in resources and not user-overridden ones, for example.\r\n  - `VANILLA` and `MOD` for built-in content\r\n  - `DATA_PACK` for external data packs\r\n  - `REPLACED` for loot tables created in `LootTableEvents.REPLACE` (naturally only exists for loot tables processed in `LootTableEvents.MODIFY`)\r\n  - This is implemented via a new internal API in resource loader for resource source tracking. The `FabricResource` interface, which might be promoted to public API in the future, exposes the `ResourcePackSource` of the `ResourcePack` instance that created the `Resource`.",
    "head_branch": "loot-table-v1-improvements",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Loot table API v2, iteration 2 (#1241)\n\n* Improve loot table API\r\n\r\nAlternative to #629.\r\n\r\n- Deprecates all classes and methods that use outdated Yarn names.\r\n- Adds FabricLootTable and FabricLootTableBuilder to replace\r\n  the LootSupplier naming variants.\r\n- Deprecates LootEntryTypeRegistry and LootJsonParser\r\n  as their functionality is exposed in vanilla now.\r\n- Adds methods to FabricLootPoolBuilder for working\r\n  with collections as builder parameters.\r\n- FabricLootPool and FabricLootTable/Supplier now return immutable lists\r\n  instead of modifiable fixed-size ones.\r\n\r\nStill WIP: LootTableLoadingCallback uses the deprecated FabricLootSupplier.\r\n\r\nUpdate fabric-loot-tables-v1/src/main/java/net/fabricmc/fabric/api/loot/v1/FabricLootTableBuilder.java\r\n\r\nCo-authored-by: i509VCB <i509vcb@gmail.com>\r\n\r\nFix compilation\r\n\r\nCreate loot table API v2\r\n\r\nMove incorrect classes and revert unnecessary change\r\n\r\nAdd test for replacing loot tables\r\n\r\nDocument FabricLootPools\r\n\r\nbuilder() -> create()\r\n\r\nAdd accessor for LootPool.bonusRolls\r\n\r\nAdd loot pool builder method for bonus rolls\r\n\r\nUse Blocks.DIRT.getLootTableId() instead of raw string in v1 loot test mod\r\n\r\nMake links in deprecation docs cleaner\r\n\r\nMake FabricLootPoolBuilder.copyFrom(pool, true) also copy bonus rolls\r\n\r\n...and mention it in the javadoc\r\n\r\nRemove copyFrom from v2 builders\r\n\r\nIt seems like a maintainability mess if Mojang ever decides\r\nto extend loot tables, and the chosen boolean flags are arbitrary.\r\nIt also doesn't really have use cases apart from the internal use\r\nin the copyOf methods, and even then users can replicate its functionality\r\nwith the other API methods.\r\n\r\nRename 'supplier' to 'table' in LootManagerMixin\r\n\r\nAdd 'stable' lifecycle to loot-table-api-v2, deprecate v1\r\n\r\nAdd internal comment for implementors about updates\r\n\r\nCancel all remaining callbacks when a loot table is replaced\r\n\r\nRemove unused shadowed logger from LootManagerMixin\r\n\r\nMigrate subproject versioning to new system\r\n\r\nStart the AW migration\r\n\r\nUpdate test mod\r\n\r\n* Use interface injection\r\n\r\n* Fix some issues\r\n\r\n* Remove outdated bonusRolls test from LootTest\r\n\r\nIt's a vanilla feature now.\r\n\r\n* Create transitive access widener module\r\n\r\n* Replace LootTableLoadingCallback with two events\r\n\r\n* Use friendlier exception message\r\n\r\n* Add resource source tracking\r\n\r\n* Add loot table sources\r\n\r\n* Add resource pack source for DefaultResourcePack$1 (anon resource)\r\n\r\n* Add license header\r\n\r\n* Make FabricResource an internal API in resource loader\r\n\r\n* Remove my TAW module\r\n\r\n* Add loot table-related TAWs\r\n\r\n* Run CI\r\n\r\n* Fix LootUtil.determineSource giving null values\r\n\r\n* Clarify LootUtil comment\r\n\r\n* Rename loot-table-api => loot-api + minor comment changes\r\n\r\n* Add README\r\n\r\n* Fix mixin file name\r\n\r\n* Use ImmutableMap.Builder instead of HashMap.computeIfAbsent in loot event impl\r\n\r\n* Prefix accessor methods with fabric_ to prevent conflicts with loot v1\r\n\r\n* Document mixins\r\n\r\n* Document mixins more extensively\r\n\r\n* Improve NRMMixin comments\r\n\r\n* Change weird wording in FabricResourceImpl\r\n\r\n* Minor updates\r\n\r\n- Support new built-in mod respack source\r\n- Fix ResourceMixin comment\r\n- Add more docs to LootTableEvents.MODIFY\r\n- Add package-info\r\n\r\n* Add license header"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662308110ac82a74541b2309",
    "number": 1240,
    "body": "- Fix resource reload listeners not being sorted.\r\n- Fix missing/broken reload listener keys.\r\n- Add a debug log line for missing reload keys\r\n- Add some basic tests.",
    "head_branch": "reload_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix a number of issues with reload listeners (#1240)\n\n* Fix resource reload listeners not being sorted.\r\nFix missing/broken reload listener keys.\r\nAdd a debug log line for missing reload keys\r\nAdd some basic tests.\r\n\r\n* Undo adding new keys, we can look at this later.\r\n\r\n* use AssertionError\r\n\r\n* Fix test on server"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308120ac82a74541b230a",
    "number": 1239,
    "body": "Fix an issue that slipped in #1186 which creates resource leak and makes .mcmeta not read from mod resource packs.",
    "head_branch": "resource-loader-1.16-again",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Hot fix for resource loader. (#1239)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308120ac82a74541b230b",
    "number": 1238,
    "body": "Rotating UV coordinates using vector math becomes extremely annoying when every `sprite` call requires the individual `u` and `v` coordinates to be extracted again.\r\n\r\nThis change will allow passing UV coordinates in a container that will always be available.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow passing UV coordinates as Vec2f (#1238)\n\n* Allow passing UV coordinates as Vec2f\r\n\r\nRotating UV coordinates using vector math becomes extremely annoying when every `sprite` call requires the individual `u` and `v` coordinates to be extracted again.\r\n\r\nThis change will allow passing UV coordinates in a container that will always be available.\r\n\r\n* Revert b0fe27e0d78678fb2aece2271c80639287fe62b5\r\n\r\n* Allow Vec2f UVs in MutableQuadView\r\n\r\nThis seems like the better place to put this.\r\n\r\n* Fix return type\r\n\r\noops\r\n\r\n* Add override in QuadEmitter\r\n\r\n* Fix JavaDoc styling\r\n\r\n* Duplicate JavaDoc and function definition\r\n\r\nThere is probably a way in Java to override the method while keeping the JavaDoc, but I can't be bothered, and this way, the user gets a more relevant JavaDoc anyway.\r\n\r\n* Remove Trailing Whitespace\r\n\r\nI'm pretty sure QuadEmitter allowed trailing whitespace, though...\r\n\r\n* Fix JavaDoc styling in QuadEmitter\r\n\r\nAlso removes trailing whitespace"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662308130ac82a74541b230c",
    "number": 1237,
    "body": "The previous implementation does not quite correctly describe what it does",
    "head_branch": "improve-readme",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix example implementation of using FAPI modules for Groovy (#1237)\n\n* Fix example implementation of using FAPI modules for Groovy\r\n\r\nThe previous implementation does not quite correctly describe what it does\r\n\r\n* Improve description of adding dependencies\r\n\r\n* Undo the last commit changes for Kotlin DSL"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308140ac82a74541b230d",
    "number": 1236,
    "body": "And other related prs from 1.15 just before it. Also per request of masa.",
    "head_branch": "net-v1/1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix v0 deprecation javadoc error (#1209)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662308150ac82a74541b230e",
    "number": 1235,
    "body": "Masa requested this so I obliged.",
    "head_branch": "net-v1/1.15",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Backport networking v1 fixes from 1.16 to 1.15 (#1235)\n\n* Fix registry sync being applied when its not supposed to be.\r\n\r\nFixes #1217\r\nFixes #1216\r\n\r\n* Check channels the server can receive, not channels the client can (#1224)\r\n\r\n* Fix v0 deprecation javadoc error (#1209)\r\n\r\nCo-authored-by: modmuss50 <modmuss50@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662308160ac82a74541b230f",
    "number": 1234,
    "body": "# Fabric API Lookup API v1\r\n## Introduction\r\nThis module allows Api instances to be associated with game objects without specifying how the association is implemented. This is useful when the same Api could be implemented more than once or implemented in different ways.\r\n\r\nMany thanks to @Grondag for providing the original concept (#1072).\r\nThanks also go to @i509VCB, @Pyrofab, @sfPlayer1 and the others who were involved with the design of this module.\r\n\r\nThis is the foundation upon which can be built for example a fluid transfer api (#1166). Closes #1199.\r\n\r\n## Flexible Api Querying\r\n## Block Api Usage example\r\n## Building blocks\r\nThis PR was changed a lot, please have a look at the README, the package info, and the javadoc for `BlockApiLookup` and `ApiLookupMap` for up-to-date documentation.\r\n\r\n## More usage examples\r\nFastTransferLib (https://github.com/Technici4n/FastTransferLib) is an experiment to build an item, fluid and energy transfer api on top of this module. (Which was until recently called `fabric-provider-api-v1`.)\r\n\r\n## Missing things?\r\n~~I could add an overload of `BlockApiLookup#find` with nullable `BlockState` and `BlockEntity` parameters, so that the caller can directly provide them if they are available for some reason.~~ Added in later commits.\r\n\r\nThere is no module to retrieve apis from items or entities yet because there were unsolved issues with those. The community can use the provided building blocks to experiment with their own implementations of `ItemStackApiLookup` and `EntityApiLookup` until the way forward becomes clear, but let's please not delay the `BlockApiLookup` because of that.",
    "head_branch": "api-provider",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fabric API Lookup (#1234)\n\n# Fabric API Lookup API v1\r\n## Introduction\r\nThis module allows Api instances to be associated with game objects without specifying how the association is implemented. This is useful when the same Api could be implemented more than once or implemented in different ways.\r\n\r\nMany thanks to @Grondag for providing the original concept (#1072).\r\nThanks also go to @i509VCB, @Pyrofab, @sfPlayer1 and the others who were involved with the design of this module.\r\n\r\nThis is the foundation upon which can be built for example a fluid transfer api (#1166). Closes #1199.\r\n\r\n## Flexible Api Querying\r\n## Block Api Usage example\r\n## Building blocks\r\nThis PR was changed a lot, please have a look at the README, the package info, and the javadoc for `BlockApiLookup` and `ApiLookupMap` for up-to-date documentation.\r\n\r\n## More usage examples\r\nFastTransferLib (https://github.com/Technici4n/FastTransferLib) is an experiment to build an item, fluid and energy transfer api on top of this module. (Which was until recently called `fabric-provider-api-v1`.)\r\n\r\n## Missing things?\r\n~~I could add an overload of `BlockApiLookup#find` with nullable `BlockState` and `BlockEntity` parameters, so that the caller can directly provide them if they are available for some reason.~~ Added in later commits.\r\n\r\nThere is no module to retrieve apis from items or entities yet because there were unsolved issues with those. The community can use the provided building blocks to experiment with their own implementations of `ItemStackApiLookup` and `EntityApiLookup` until the way forward becomes clear, but let's please not delay the `BlockApiLookup` because of that.\r\n\r\nCo-authored-by: i509VCB <git@i509.me>\r\nCo-authored-by: PepperBell <44146161+PepperCode1@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662308160ac82a74541b2310",
    "number": 1233,
    "body": "This pull request adds icons to the following modules:\r\n\r\n- `fabric-commands-v0`\r\n- `fabric-game-rule-api-v1`\r\n- `fabric-particles-v1`\r\n- `fabric-structure-api-v1`\r\n\r\nIn addition, it adds the `name`, `environment`, `contact`, `authors`, and `description` fields to the metadata of the `fabric-particles-v1` module.\r\n\r\nFixes #1232",
    "head_branch": "fix-missing-metadata",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix missing metadata (#1233)\n\n* Fix certain modules not having icons\r\n\r\n* Add additional metadata to the fabric-particles-v1 module"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308170ac82a74541b2311",
    "number": 1231,
    "body": "Currently this has tags for:\r\n - Bookshelves\r\n - Totems of Undying\r\n\r\nI figured these would be useful as it would allow mods to add objects that have tags to not use mixins and help with compatibility between mods. It would also allow for other mods such as custom enchanting table to easily support custom bookshelves.\r\n\r\nI named the tag JSONs `bookshelf.json` and `totem_of_undying.json` because it is closer to the original names in the code, even though they could also be plural. (As well as `totems_of_undying` and `totem_of_undyings` booth seem kinda of awkward.)\r\n\r\nHopefully as time goes on there can be more things added to this module.\r\n\r\nReasons for mixins:\r\n - EnchantingTableBlockMixin: This is used to make the enchantment particles use the tag instead of a `Blocks` reference.\r\n - EnchantmentScreenHandlerMixin: This is used to make the bookshelf check use the tag instead of a `Blocks` reference.\r\n - ClientPlayNetworkHandlerMixin: This is used to get the totem of undying for the activation effect based on the tags instead of a `Items` reference. This fixes it always using the totem instead of the correct item.\r\n - LivingEntityMixin: This is used to change the totem check to use the tag instead of a `Items` reference. It also patches the statistics to use the correct item instead of always using the Totem.",
    "head_branch": "1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308180ac82a74541b2312",
    "number": 1224,
    "body": "Thank you to shedaniel for telling me this broke",
    "head_branch": "welp-4th",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Check channels the server can receive, not channels the client can (#1224)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308190ac82a74541b2313",
    "number": 1210,
    "body": "This PR is part of many that split up the proposed extensibility API into their own modules. This one focuses on the usage of bows in Minecraft. The main goal is to make sure that no mods will have any conflicts with the mixins for their custom bows",
    "head_branch": "Bows",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308190ac82a74541b2314",
    "number": 1209,
    "body": "Not immediately concerning but a fix to deprecation javadoc in v0 networking.",
    "head_branch": "net-v1-fix-jd",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix v0 deprecation javadoc error (#1209)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623081a0ac82a74541b2315",
    "number": 1208,
    "body": "THIS SHOULD WORK.\r\n\r\nDO NOT MERGE BEFORE TESTING MODMUSS",
    "head_branch": "third-times-a-charm",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Networking V1: Hopefully the final fix (#1208)\n\nTHIS SHOULD WORK."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623081b0ac82a74541b2316",
    "number": 1207,
    "body": "No API changes.",
    "head_branch": "net-fixes-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Networking V1: Fool me once shame on me. Fool me twice shame on me. (#1207)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623081c0ac82a74541b2317",
    "number": 1206,
    "body": "I don't know why this is private, pretty odd, but me and others end up making accessors for this field. \r\nSo I thought it might be nice to just add it to fapi to make it easier for everyone",
    "head_branch": "1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623081d0ac82a74541b2318",
    "number": 1205,
    "body": "This fixes a case where the packet falling to `NetworkThreadUtils.forceMainThread` will block the client thread which is causing reg sync to go haywire? Testing shows this seems to work.\r\n\r\nTwo new events, `Client/ServerPlayConnectionEvents#PLAY_READY` are introduced for notification when the client/server may start sending packets. This occupies the space `PLAY_INIT` originally was located at. PlayInit is akin to the Login stage init events now.",
    "head_branch": "net-fixes-116",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix networking v1 (#1205)\n\n* Handle registration of global handlers as early as possible.\r\n\r\nThis may not be correct?\r\n\r\n* Do not handle packets on game thread\r\n\r\n* Add PLAY_READY event\r\n\r\n* READY -> JOIN, some javadoc clarifications and impl oversight fixes\r\n\r\n* Omit redundant PLAY and LOGIN prefixes in events\r\n\r\n* Checkstyle go brr"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623081d0ac82a74541b2319",
    "number": 1204,
    "body": "Fixes #1203",
    "head_branch": "lookup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Block entity unload: compensate for WorldChunk code changes (#1204)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623081e0ac82a74541b231a",
    "number": 1201,
    "body": "This replaces the simple `removeAll` in vanilla and replaces it with a set allocation and use of removeIf + set lookup for reducing overhead in removing from the list of a world's block entities that fabric api redirects for it's block entity events.\r\n\r\nWe may want to consider only allocating the list of the world's block entity list is only so big? Apparently this issue occurs with 20k block entities on AOF3 NA.\r\n\r\nThis is result of the following spark profile: https://spark.lucko.me/#SwMPsVKNM1\r\n\r\n@Technici4n came up with the general idea for the optimization, it needs to be combed through with the profiler.\r\n\r\nSpecifically for @sfPlayer1: you should make sure this fix isn't insane or if a better solution exists.\r\n\r\nI think a good test for this is to fill a several chunks with a load of block entities and unload and load em frequently.\r\n\r\nThis is not needed in 1.17, but since block entities are stored by chunk in that version, things may be faster.",
    "head_branch": "speedy-unload",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623081f0ac82a74541b231b",
    "number": 1197,
    "body": "This adds a new experimental logic to allow registration of entity model layers and the corresponding textured model data provided by the model layers",
    "head_branch": "ft/model-layers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add registry for creating entity model layers and texture data (#1197)\n\n* Add registry for creating entity model layers and texture data\r\n\r\n* Add ApiStatus annotations and document factory method\r\n\r\n* Helper -> Registry"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308200ac82a74541b231c",
    "number": 1196,
    "body": "This PR shows this when the jar is run as an executable. This would fix a lot of the confusion around the API, and the current code does not seem to have problems with anything else in the API.\r\n![fabricapi](https://user-images.githubusercontent.com/31803019/104359093-1fdf8e80-54c4-11eb-9b27-2fcc0f74a323.PNG)\r\n\r\n",
    "head_branch": "1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308210ac82a74541b231d",
    "number": 1193,
    "body": "extend fabric-command-api-v1\r\nadd support for client-side commands.",
    "head_branch": "1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308210ac82a74541b231e",
    "number": 1192,
    "body": "This PR adds an event which is called when the player picks up an item from the ground.\r\n\r\nIt relates with this issue : #1130",
    "head_branch": "item_pickup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308220ac82a74541b231f",
    "number": 1191,
    "body": "This is for 1.17 only as 1.16 has many differing changes. I will look at 1.16 after this is merged.\r\n\r\nThis completes the parity between client and server entity events.",
    "head_branch": "server-entity-unload",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Implement entity unload event on server (#1191)\n\n* Start toying with server entity unload event\r\n\r\n* Implement testmod stuff\r\n\r\n* Implement shutdown implementation of unload entities\r\n\r\n* Update fabric-lifecycle-events-v1/src/testmod/java/net/fabricmc/fabric/test/event/lifecycle/ServerEntityLifecycleTests.java\r\n\r\nCo-authored-by: Pyrofab <redstoneinfire@gmail.com>\r\n\r\n* Comment suggestion\r\n\r\nCo-authored-by: Pyrofab <redstoneinfire@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308230ac82a74541b2320",
    "number": 1187,
    "body": "This adds two interaction events that fire before `ItemStack#onClicked` and `ItemStack#onStackClicked`. Both are cancellable.\r\n\r\nhere's the testmod (a miniature fluid api 😄) - https://i.imgur.com/2APkSj3.mp4\r\n",
    "head_branch": "upstreamupstream/clickinteractionevents",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308240ac82a74541b2321",
    "number": 1186,
    "body": "Basically, another PR from me for resource loader.\r\n\r\nChanges:\r\n - Add `ResourcePackActivationType`, and change the built-in resource pack API (deprecated method still exists and work for legacy), allow mod authors to register always enabled packs, useful for datapacks and inter-mod recipes for example.\r\n - Add Programmer Art injection support.\r\n    Any mod can create a directory `programmer_art` in the `resources` folder of the dev environment and it will load the provided resources with the Programmer Art resource pack, it does not allow to modify programmer art resources.\r\n - Group all mod resource packs into one unique pack.\r\n   The reason is simple but yet complicated:\r\n     - In the pack screen GUI, when we change the priority of a pack, the invisible mod resource packs affects the little arrows, which means it gives the impression it does not move and the user unknowingly messes with the resource pack priority of mods.\r\n     - This fixes the problem by making the mod resource packs visible again, but as a unique pack to avoid cluttering the pack menu, it cannot be disabled but priority can be modified like the Default resource pack.\r\n     - There's one last thing to fix, if no mod resource pack existed before, it will be appended at the top priority, which is not wanted.\r\n",
    "head_branch": "resource-loader-1.16-again",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Resource loader improvements (#1186)\n\n* Add resource pack activation type, programmer art API, group mod resource packs.\r\n\r\n* Add missing license headers.\r\n\r\n* Cleanup and add documentation.\r\n\r\n* Fix performance issues.\r\n\r\n* Rename invoker.\r\n\r\n* Add comment in ReloadableResourceManagerImplMixin.\r\n\r\n* Add package-info to resource loader."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662308250ac82a74541b2322",
    "number": 1183,
    "body": "Adds three methods to allow giving the block a different render layer\r\n\r\nThe testmod does not crash on a dedicated server\r\n![server480](https://user-images.githubusercontent.com/62552372/100219372-ebc40480-2f3b-11eb-8177-642437c21fc2.gif)\r\n",
    "head_branch": "1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308250ac82a74541b2323",
    "number": 1182,
    "body": "`WorldRenderer.render` is complicated and extensive but many mods need to target it for rendering.  This PR makes injection into world rendering more convenient and promotes compatibility.\r\n\r\nIt also solves the problem of Canvas or a similar mod replacing all or large chunks of vanilla code and thereby breaking mixin targets. A mod that breaks the mixin targets simply needs to invoke the event handlers itself at the appropriate time.\r\n\r\nThese events are based on my experience of adding Canvas compatibility hooks for about a dozen mods via reflection hacks.  (Sadly necessary because these events don't exist yet.) Many common use cases should be covered.\r\n\r\nThese events are also a useful extension point for third-party renderers.  For example, when Canvas is active  the `VertexConsumerProvider` instance exposed in the event context can be cast to an extended interface with additional functionality.\r\n\r\nThat said, these events are self-contained and have no dependency on Indigo, Canvas or the renderer API more generally.",
    "head_branch": "WorldRenderEvents",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add WorldRenderEvents (#1182)\n\n* Add WorldRenderEvents\r\n\r\n* Fix typos\r\n\r\n* Incorporate PR feedback\r\n\r\n* Simplify context and block outline events\r\n\r\n* Update implementation\r\n\r\n* Ensure the BLOCK_OUTLINE mixin does nothing if BEFORE_BLOCK_OUTLINE mixin is disabled\r\n\r\n* Document event order in class header\r\n\r\n* Update fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/WorldRenderEvents.java\r\n\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>\r\n\r\n* Add environment tag to nested type\r\n\r\n* More envionment tags\r\n\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662308260ac82a74541b2324",
    "number": 1181,
    "body": "Adds an item setting for bundle occupancy to FabricItemSettings. \r\n\r\nFixes #1167",
    "head_branch": "upstreamupstream/conduits",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308270ac82a74541b2325",
    "number": 1180,
    "body": "Adds a conditional recipe remainder (that returns an ItemStack) to FabricItemSettings\r\nalso fixes an issue with duplicate keys in the fabric item api v1 testmod fabric.mod.json\r\n\r\n![gravel](https://user-images.githubusercontent.com/62552372/100070040-77b42e80-2e5f-11eb-9448-7253e7f028d3.gif)\r\n![sand](https://user-images.githubusercontent.com/62552372/100070045-78e55b80-2e5f-11eb-9438-d7ac1c81d542.gif)\r\n\r\nFixes #50\r\n",
    "head_branch": "upstreamupstream/furnacereciperemainders",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308280ac82a74541b2326",
    "number": 1179,
    "body": "This fixes #1165\r\n\r\nThe old behaviour was to silently remove the registry entry from the registry. This now assigns a new ID at the end of the registry for the entries.\r\n\r\nThanks to @Fourmisain for pointing me in the right direction with this issue in #1165",
    "head_branch": "client_registry_entries",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Assign a new ID to client only registry entries when syncing. (#1179)\n\n* Assign a new ID to client only registry entries when syncing.\r\n\r\nFixes #1165\r\n\r\n* Cleanup + review comments"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308290ac82a74541b2327",
    "number": 1178,
    "body": "A common ask is the ability to load an arbitrary model json from the resource paths (for example, to use in a block entity or entity renderer). The existing `ModelAppender` system only accepts `ModelIdentifier`s, which identify a variant within a blockstate json (or a item model via the magic variant `inventory`), which means its use is limited to those cases.\r\n\r\nThis PR extends `ModelAppender` to support `Identifier` as well for loading a json path anywhere in the model tree. The existing vanilla `addModel` called by us only takes `ModelIdentifier`, but the restriction is arbitrary. The same logic can be reused verbatim for plain `Identifier`.\r\n\r\nFor those wiling to look, this is equivalent to Forge's `addSpecialModel` which I also added and has been used widely, so in the implementation/design space this is pretty well-tread ground already. It's used in Botania-forge and I need it for Botania-fabric :)",
    "head_branch": "modelapp",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Provide replacement for ModelAppender that allows loading non-blockstate paths (#1178)\n\n* Extend ModelAppender to allow loading non-blockstate paths\r\n\r\n* Use a new interface instead of adding to the old one\r\n\r\n* Rename new interface"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623082a0ac82a74541b2328",
    "number": 1177,
    "body": "This completely reimplements the lifecycle events module.\r\n\r\nPending testing of course to validate the mixins and reenabling the tests.",
    "head_branch": "block-entity-reimpl",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Reimplement block entity (un)load events (#1177)\n\n* Reimplement block entity (un)load events\r\n\r\nThis is pending testing to verify the tracking is reliable.\r\n\r\n* Forgot that null check for parity\r\n\r\n* Everything is implemented. Now for testing\r\n\r\n* Fix server block entity unload events\r\n\r\n* Bah indentations broke\r\n\r\n* Handle world chunks instead of the positions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623082a0ac82a74541b2329",
    "number": 1176,
    "body": "This fix has been well battle tested in: https://github.com/modmuss50/Voyager\r\n\r\nI see no reason why it cannot go into fabric.",
    "head_branch": "MC-149777",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix MC-149777 - java.util.ConcurrentModificationException when using Java 11 or above (#1176)\n\n* Fix MC-149777\r\n\r\n* Fix license"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623082b0ac82a74541b232a",
    "number": 1175,
    "body": "Literally the same thing as https://github.com/FabricMC/fabric-loader/pull/335 but we have licenser at a decent version already on api",
    "head_branch": "remote-buildscript-yeet",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Drop use of remote buildscripts (#1175)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623082c0ac82a74541b232b",
    "number": 1174,
    "body": "This makes testing a bit easier when in game as some mixins may not be loaded immediately when running testmods normally.",
    "head_branch": "mixin-audit-command",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add command to audit mixin environment in game (#1174)\n\n* Add command to audit mixin environment in game\r\n\r\n* Throw assertion error instead and add success message\r\n\r\nAssertion errors will bypass the command exceptions being eaten."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623082d0ac82a74541b232c",
    "number": 1173,
    "body": "Simple extension to the API to add optional entries to the tag builders. I hope this doesn't take 5 months to land like my last PR :tiny_potato:",
    "head_branch": "opttagbuilder",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add tag builder method for the new optional entries (#1173)\n\n* Add tag builder method for the new optional entries\r\n\r\n* Address comments\r\n\r\n* Rename addOptional to addOptionalObject\r\n\r\n* Flesh out doc\r\n\r\n* Move mixin to target proper class"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623082e0ac82a74541b232d",
    "number": 1172,
    "body": "Supersedes teleportation component of #1040\r\n",
    "head_branch": "dimensions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update the Dimension API (#1172)\n\n* Reimplement Dimension API\r\n\r\n* Forgot to update dimension-api mixins.json\r\n\r\n* Did suggested changes.\r\n\r\n* Move Nullable import.\r\n\r\n* Remove unneeded whitespace\r\n\r\n* Added automatic testing testmod feature.\r\n\r\n* ...Removed unused imports...\r\n\r\n* And other stuff the auto style system complains about...\r\n\r\n* ...\r\n\r\n* Drop Networking\r\n\r\n* Completed suggested changes.\r\n\r\n* Revert \"Completed suggested changes.\"\r\n\r\nThis reverts commit 97740e6134400f6e1c826400cb9702b66b39653c.\r\n\r\n* Did requested changes.\r\n\r\n* Forgot colon\r\n\r\n* Turn plural to singular\r\n\r\nCo-authored-by: i509VCB <git@i509.me>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623082f0ac82a74541b232e",
    "number": 1168,
    "body": "This is loosly bassed off the existing registrys sync stuff, but just the required bits, and trying to be minimal. I have tried to leave some comments explainng whats doing what, hopefully its fairly easy to follow.\r\n\r\nThis is missing the backing up of the data files, do we still need/want this? (Minecraft does appear to show a warning screen with an option to backup if changing this stuff?)\r\n\r\nI look forward to your reviews and testing.",
    "head_branch": "biome-registry-sync",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix MC-202036 - Shifting biome IDs (#1168)\n\n* First pass on PersistentDynamicRegistryHandler, not tested\r\n\r\n* Extra debugging + fix it not working\r\n\r\n* Fix build\r\n\r\n* Minor tweaks\r\n\r\n* checkstyle ;)\r\n\r\n* Improve comments + fix issues with tag reading/writing\r\n\r\n* Simplify mixin"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623082f0ac82a74541b232f",
    "number": 1164,
    "body": "There was some issues with #830 that weren't caught before merging; the merge was reverted but the PR could not be reopened so this one has been opened to replace it.",
    "head_branch": "end-biomes-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "End Biomes Api [1.16] Take Two (#1164)\n\n* Create EndBiomes.java\r\n\r\n* Revert \"Create EndBiomes.java\"\r\n\r\nThis reverts commit 4d1736fad99e1be0921ef92d9576e8f503e64be4.\r\n\r\n* Revert \"Revert \"Create EndBiomes.java\"\"\r\n\r\nThis reverts commit 673c508d825a0eb095f94ff9b5cb88d1b77e395c.\r\n\r\n* Rename ContinentalBiomeEntry to WeightedBiomeEntry\r\n\r\n* Complete API for adding biomes to the end\r\n\r\n* Mixin to end biome source\r\n\r\n* Revert \"Rename ContinentalBiomeEntry to WeightedBiomeEntry\"\r\n\r\nThis reverts commit 849197e15d18c26af2a6f2aa1766b7d73d9a7144.\r\n\r\n* Revert \"Revert \"Rename ContinentalBiomeEntry to WeightedBiomeEntry\"\"\r\n\r\nThis reverts commit c2aa4ab097eb3daed71e82d4e77142671ed04316.\r\n\r\n* Create SimpleLayerRandomnessSource for use with end biome source mixin\r\n\r\n* Renamed MAIN region to MAIN_ISLANDS\r\n\r\n* Create test mod\r\n\r\n* Added pickFromNoise method to WeightedBiomePicker\r\n\r\n* Javadoc and licensing info\r\n\r\n* Comply with checkstyle\r\n\r\n* Internalize EndRegion\r\n\r\n* Added stretching when getting the biome for the end\r\n\r\n* Rename EndBiomes to TheEndBiomes to be consistent with yarn mappings\r\n\r\n* Fix typo\r\n\r\nCourtesy of i509VBC\r\n\r\nCo-authored-by: i509VCB <i509vcb@gmail.com>\r\n\r\n* Add @Unique to private fields in MixinTheEndBiomeSource\r\n\r\n* Made end test biome consistent in style with previous test\r\n\r\nCourtesy of i509VBC\r\n\r\nCo-authored-by: i509VCB <i509vcb@gmail.com>\r\n\r\n* Fix imports\r\n\r\n* Didn't know test mods needed to follow the checkstyle\r\n\r\n* SimpleLayerRandomnessSource's random is now use to instantiate its noise sampler\r\n\r\n* A very important note\r\n\r\n* Update javadoc for adding biomes to the Main Island region\r\n\r\n* Remove method that is leftover from when EndRegion was part of the API\r\n\r\n* Ported 1.16.1 biomes-api-v1 to 1.16.2.\r\nPublic API changes:\r\n- Removed flagging biomes as suitable for player spawns since that is now handled in the Biome Builder.\r\n- Changed API over to RegistryKey's, not because it's necessary, but because it is more ergonomic since Vanilla Biomes in BuiltInBiomes are now all exposed as keys, rather than instances.\r\n\r\n* Increase memory size to fix build failures.\r\n\r\n* Add the ability to add modded dimensions to the regions of the end.\r\n\r\n* Hopefully fixed everything that went wrong during the rebase\r\n\r\n* Update fabric-biome-api-v1.mixins.json\r\n\r\n* Finally got custom end biomes to generate\r\n\r\n* Thanks for nothing, GitHub Desktop\r\n\r\n* Bad GitHub Desktop\r\n\r\n* Bad newline no cookie\r\n\r\n* Got everything to follow the checkstyle\r\n\r\n* Bring branch up-to-date with main repo (#11)\r\n\r\n* Revert \"Bring branch up-to-date with main repo (#11)\"\r\n\r\nThis reverts commit dc471062410ec2de0899a7520584b16f5ddb88f1.\r\n\r\n* Remove some stuff that's not supposed to be there\r\n\r\n* Fix git silliness\r\n\r\n* Update FabricBiomeTest.java\r\n\r\n* TheEndBiomes is now Deprecated to match OverworldBiomes and NetherBiomes\r\n\r\n* Update some checkNotNull messages\r\n\r\n* Change the noise scale when replacing end biomes\r\n\r\n* Bad space no cookie\r\n\r\n* Remove unnecessary code\r\n\r\n* Remove unused imports\r\n\r\n* Set up InternalBiomeData to treat End Midlands and End Barrens as border biomes\r\n\r\n* Changed the API to reflect midlands and barrens biomes being considered border biomes\r\n\r\n* Start work on getting the new system fully working\r\n\r\n* Finally got everything working and cleaned up the Javadoc\r\n\r\n* Fixed checkstyle violations\r\n\r\n* Fix checkstyle violations again\r\n\r\n* Drop fabric_ prefix\r\n\r\n* Calling SimpleLayerRandomnessSource#nextInt() now throws an exception\r\n\r\n* If the midlands or barrens biome picker is null, the replacement key defaults to the vanilla one\r\n\r\n* Fix usage of vanilla identifier\r\n\r\n* Update MixinTheEndBiomeSource.java\r\n\r\n* Fix checkstyle violations\r\n\r\nCo-authored-by: i509VCB <i509vcb@gmail.com>\r\nCo-authored-by: Sebastian Hartte <sebastian@hartte.de>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662308300ac82a74541b2330",
    "number": 1163,
    "body": "`runAutoTestServer` runs a dedicated server with all test mods, and then gracefully shuts it down. Mixin will also audit the remaining mixin targets.\r\n\r\nSee an example run here: https://github.com/modmuss50/fabric/runs/1397667784?check_suite_focus=true",
    "head_branch": "autserver",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Spin up a dedicated server on github actions + add run tasks for test mods. (#1163)\n\n* Add test mod run tasks, add a very basic auto test server task\r\n\r\n* License header\r\n\r\n* Minor cleanup\r\n\r\n* Fix bad depends"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308310ac82a74541b2331",
    "number": 1161,
    "body": "",
    "head_branch": "1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added Persian translation (#1161)\n\n* added persian translation\r\n\r\n* small change"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308320ac82a74541b2332",
    "number": 1152,
    "body": "",
    "head_branch": "1.17/mapping-feature-rend",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Temp fix for feature renderer testmod, update mappings, reimplement client entity events (#1152)\n\n* Temp fix for feature renderer testmod, update mappings\r\n\r\n* Deprecation comments...\r\n\r\n* Reimplement client entity events\r\n\r\n* Readd the client world change entity event stuff"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308330ac82a74541b2333",
    "number": 1151,
    "body": "",
    "head_branch": "1.17/entity-(un)load",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Reimplement server entity load event (#1151)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308330ac82a74541b2334",
    "number": 1149,
    "body": "# Addtions\r\n\r\n* Added FabricBlockEntityTypeBuilder - The factory interface is private\r\n\r\n# Breakages\r\n\r\n* Reworked EntityRendererRegistry\r\n* Ported BlockEntityRendererRegistry\r\n\r\n# Removals\r\n\r\n* TDB\r\n\r\n# TODO\r\n\r\n- [ ] Remove deprecated modules\r\n\r\n- [ ] Look at the PickBlock/Entity API It may no longer be required\r\n\r\n- [ ] Look at fixing lifecycle events",
    "head_branch": "port-20w45a",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "20w45a\n\nAdded FabricBlockEntityTypeBuilder\r\nReworked EntityRendererRegistry\r\nPorted BlockEntityRendererRegistry"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308340ac82a74541b2335",
    "number": 1148,
    "body": "This updates modules where needed due to changes.\r\n\r\n`fabric-lifecycle-events-v1` has had the (block)entity (un)load events turned off for the moment until we have mappings to help assist with updating.\r\n\r\nThanks to @LambdAurora resource-loader-v0 is also now updated in this PR.\r\n\r\nDoes not guarantee the game works, just a few modules that have been tested.",
    "head_branch": "1.17/lifecycle-events-v1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1148 from i509VCB/1.17/lifecycle-events-v1\n\n20w45a: Partially update Fabric API"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308350ac82a74541b2336",
    "number": 1146,
    "body": "Currenly very Lightly tested, done in a rush.\r\n\r\nShould fix https://bugs.mojang.com/browse/MC-202036\r\n\r\nTesting and feedback would be much applicated.",
    "head_branch": "builtin_registry_sync",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308360ac82a74541b2337",
    "number": 1144,
    "body": "",
    "head_branch": "generator-types-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308370ac82a74541b2338",
    "number": 1140,
    "body": "This removes a redirect in fabric api and fixes the location of the command api's icon.\r\n\r\nThis utilizes the new feature in the mixin fork.\r\n\r\nThis also updates the testmod to use `fabric-lifecycle-events-v1`",
    "head_branch": "commands/noredirect",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update command api to use new non-tail constructor inject (#1140)\n\n* Update command api to use new non-tail constructor inject\r\n\r\nThis removes a redirect in fabric api and fixes the location of the command api's icon.\r\n\r\n* Update lifecycle events for command-api-v1 testmod"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308380ac82a74541b2339",
    "number": 1136,
    "body": "This module adds a new FabricFlowableFluid class and FabricFluidBlock class. The new fluid class lets the user register one fluid instead of both a still fluid and a flowing fluid the vanilla way. It also lets the user set the maximum level of the fluid via an abstract method. Both classes provide some optimizations over vanilla's counterpart classes and contain some new methods that can be overriden for more control.",
    "head_branch": "1.16-fluid-extensions-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308380ac82a74541b233a",
    "number": 1134,
    "body": "Hi, it's me, PR-ing resource loader again!\r\n\r\nThis PR contains:\r\n - an internal refactor of resource loader\r\n   - renamed every mixins and repackage client mixins to match modern Fabric-API conventions.\r\n   - removed legacy code about deferring IO which was never enabled and only useful with Paulscode which is not present in Minecraft anymore.\r\n   - removed the `name` argument in the `ModNioResourcePack` in favor of a more contextual approach.\r\n - fix #878.\r\n\r\nThis PR should not break any current features. ",
    "head_branch": "1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Internal refactor, remove legacy code, fix FabricMC/fabric#878. (#1134)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662308390ac82a74541b233b",
    "number": 1129,
    "body": "This splits all the registration side logic from registry-sync-v0. Also moves the registry attribute system to use Identifier keys instead.",
    "head_branch": "ft/registry-api-v1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623083a0ac82a74541b233c",
    "number": 1128,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Turkish language (#1128)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623083b0ac82a74541b233d",
    "number": 1127,
    "body": "Updates yarn mappings to latest version",
    "head_branch": "update-mappings-1.16.3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update yarn mappings (#1127)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623083c0ac82a74541b233e",
    "number": 1126,
    "body": "On the actions:\r\n\r\n- ~Add a general `check` task that runs on java 11 and checks licenses and checkstyle~\r\n- ~The java-specific tasks now only compile java, remap, and compile test mods~\r\n- Use Docker for building (This differs from Loom and uses the `openjdk` instead of `gradle` since we want to test with the wrapper only)\r\n- Use a consistent version for uploading artifacts\r\n\r\nOn the gradle.properties\r\n- ~Enable parallel building by default~\r\n- Add Gimpansor's gradle options and reduce the needed RAM to 1gb. (There was no real impact from increasing the memory to 2gb)\r\n- ~Disable the Gradle daemon by default--it sits around eating the Xmx worth of memory, and it's really not worth wasting 1-2gb of memory on most people's machines for this.~\r\n\r\nIt would be worth considering adding these options to fabric example mod by default, but that's a discussion for a different time and place.",
    "head_branch": "actions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623083c0ac82a74541b233f",
    "number": 1125,
    "body": "This replaces #678, which replaces #576.\r\n\r\nCommits had to be manually cherry-picked because of some missed commits on API not allowing an easy merge. The changed committer shouldn't be an issue since FAPI uses squash merges.\r\n\r\nFor clarity, the outstanding comments on the previous PR were:\r\n- Trying to remove the `List<Runnable>`\r\n- More documentation\r\n- ~~Getting the prefix from the registry in FlammableBlockRegistry~~ (resolved)",
    "head_branch": "content-registry-v1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623083d0ac82a74541b2340",
    "number": 1124,
    "body": "This PR makes the required changes to use github actions to build and release fabric api to maven, curse and github. Currenly Fabric API is built by a jenkins that I have been running for a number of years. Builds are manually triggered after a version bump, this apporach has been kept.\r\n\r\nThere should be no user or modder facing impact to these changes. The only change they will notice is the build number will reset back to 1. This should not be an issue as it is only version metadata.\r\n\r\nMy longer term plan is move all builds over to github actions as its easier to manage, and has a number of benefits over self hosting a jenkins.\r\n\r\n* Also updates gradle",
    "head_branch": "actions-releases",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Publish releases using github actions (#1124)\n\n* Publish releases using github actions\r\n\r\n* # Conflicts:\r\n#\tbuild.gradle\r\n\r\n* Remove build number + add task to check version has not already been released"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623083e0ac82a74541b2341",
    "number": 1122,
    "body": "Fixes #1024. Also, there was a mistake in the uv locking for the textures, which I fixed too.",
    "head_branch": "rendering-sprite-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix sprite and spriteBake (#1122)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623083f0ac82a74541b2342",
    "number": 1120,
    "body": "",
    "head_branch": "1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308400ac82a74541b2343",
    "number": 1119,
    "body": "This adds a readme to the module which details all the events the module contains + some details about the events.",
    "head_branch": "readme/fabric-lifecycle-events-v1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add readme for fabric-lifecycle-events-v1 (#1119)\n\n* Add readme for fabric-lifecycle-events-v1\r\n\r\n* Spelling lol\r\n\r\n* Update fabric-lifecycle-events-v1/README.md\r\n\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>\r\n\r\n* Don't document everything under the sun. Instead explain what there is\r\n\r\n* Indicate > specify\r\n\r\n* Consistent referral to the types of worlds.\r\n\r\n* Update fabric-lifecycle-events-v1/README.md\r\n\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>\r\n\r\n* Update fabric-lifecycle-events-v1/README.md\r\n\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>\r\n\r\n* Grammer go brr\r\n\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308410ac82a74541b2344",
    "number": 1116,
    "body": "This also moves use of deprecated `classifier` from AbstractArchiveTask to `archiveClassifier`\r\n\r\nAlso this moves loader to the Globals class.\r\n\r\nAlong with some addition of whitespace where needed to make things less cramped.\r\n\r\nThis PR does not touch the individual modules intentionally since there are other PRs open which modify those files.",
    "head_branch": "gradle-consistency",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use `\"` consistently in main gradle buildscript and some deprecation (#1116)\n\nThis also moves use of deprecated `classifier` from AbstractArchiveTask to `archiveClassifier`\r\n\r\nAlso this moves loader to the Globals class.\r\n\r\nThis PR does not touch the individual modules since there are other PRs open which modify those."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308420ac82a74541b2345",
    "number": 1115,
    "body": "Extends fabric-command-api-v1 with support for fully client-side commands. Mirrored in a [FabLabs project](https://github.com/FabLabsMC/ClientCommands).\r\n\r\nThe commands are only executed on the client. If a valid client command is sent in chat, it won't reach the server and it will be executed. If the user sends something beginning with a command prefix but isn't a command, it will be sent as usual.\r\n\r\nThe API also adds a `/fcc help` client command that works just like `/help` if there are any other client commands present.",
    "head_branch": "client-commands",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Client-sided commands (#1115)\n\n* Move command API icon to correct location\r\n\r\n* Add client-sided command API\r\n\r\n* Add jd note about threads\r\n\r\n* Add license headers\r\n\r\n* ArgumentBuilders => ClientArgumentBuilders\r\n\r\n* Yeet custom prefixes\r\n\r\n* Migrate testmod to lifecycle-events-v1\r\n\r\n* Improve client command test\r\n\r\n* Make client command test more similar to the server one\r\n\r\n* Update to new yarn names\r\n\r\n* Add handling for requires() in command suggestions\r\n\r\n* Remove outdated TODO\r\n\r\n* Playerification\r\n\r\n* Clarify comments in ClientCommandInternals\r\n\r\n* Use \"s\" instead of \"it\"\r\n\r\n* Improve CommandSyntaxException logging\r\n\r\n* Add missing import\r\n\r\n* Add /fcc help command\r\n\r\n* Add comments about server-client precedence rules\r\n\r\n* Add missing license header\r\n\r\n* Add /fabric-command-api-v1:client as an alias for /fcc"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662308420ac82a74541b2346",
    "number": 1112,
    "body": "Close #1073 if applied first.\r\n\r\n### Summary\r\nProvide & recommend the use of `ToolLevel` instead of `int` in `breakByTool`. Allows in-between mining levels that are essentially decimal mining levels.\r\n\r\n### Other changes\r\n`MixinToolItem` has been removed, it is a broken mixin that was removed from the mixin json temporarily, and not needed after tool-attribute 1.1\r\n\r\n### Non-Goals\r\nIt is not a goal to offer users a way to edit vanilla blocks' mining levels **in bulk** since those are hardcoded in their respective items.\r\nHowever, for modders, mining levels for blocks individually (including vanilla blocks) can now be edited via `ToolManager#setBlockBreakLevel`.\r\n\r\n### Material Level Voting\r\nVoting can be done via `ToolLevel#by`, defining an `Identifier`, and creating a json file at `data/namespace/fabric_tool_levels/path.json`:\r\n```json5\r\n// Please don't be so dumb and copy this file directly, comments are not supported in real use.\r\n{\r\n  \"replace\": false, // Optional value\r\n  \"value\": 1.5 // Decimal number defining the mining level. 1.5 is between 1 (stone) and 2 (iron)\r\n}\r\n```\r\nThe tool levels are voted by the data packs, and if there is more than 1 winner, the ones applied later shall prevail.\r\n### Tool items using the level\r\n#### Vanilla tools\r\nMods can implement `FabricToolMaterial` instead of `ToolMaterial` to get the enhanced hook of `getToolLevel` returning `ToolLevel`.\r\nHere's an example:\r\n```java\r\nprivate static final ToolMaterial TIN_MATERIAL = new FabricToolMaterial() {\r\n\t@Override\r\n\tpublic ToolLevel getToolLevel() {\r\n\t\treturn ToolLevel.by(new Identifier(\"c\", \"tin\"));\r\n\t}\r\n\r\n\t@Override\r\n\tpublic int getDurability() {\r\n\t\treturn 500;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic float getMiningSpeedMultiplier() {\r\n\t\treturn 4;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic float getAttackDamage() {\r\n\t\treturn 1;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic int getEnchantability() {\r\n\t\treturn 30;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic Ingredient getRepairIngredient() {\r\n\t\treturn Ingredient.EMPTY;\r\n\t}\r\n};\r\n```\r\nThe `FabricToolMaterial` could be used as vanilla tool materials.\r\n```java\r\nnew PickaxeItem(TIN_MATERIAL, 1, -2.8F, new Item.Settings())\r\n```\r\n#### Dynamic Tools\r\nHere's an example:\r\n```java\r\npublic class DynamicToolItem extends Item implements DynamicAttributeTool {\r\n\tprivate final Tag<Item> toolType;\r\n\tprivate final ToolLevel miningLevel;\r\n\tprivate final float toolSpeed;\r\n\r\n\t// The durability of the item can be applied via Settings#maxDamage\r\n\tprivate DynamicToolItem(Settings settings, Tag<Item> toolType, ToolLevel miningLevel, float toolSpeed) {\r\n\t\tsuper(settings);\r\n\t\tthis.toolType = toolType;\r\n\t\tthis.miningLevel = miningLevel;\r\n\t\tthis.toolSpeed = toolSpeed;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic float getToolMiningLevel(Tag<Item> tag, BlockState state, ItemStack stack, LivingEntity user) {\r\n\t\tif (tag.equals(toolType)) {\r\n\t\t\treturn this.miningLevel.getLevel();\r\n\t\t}\r\n\r\n\t\treturn ToolLevel.NONE.getLevel();\r\n\t}\r\n\r\n\t@Override\r\n\tpublic float getMiningSpeedMultiplier(Tag<Item> tag, BlockState state, ItemStack stack, LivingEntity user) {\r\n\t\tif (tag.equals(toolType)) {\r\n\t\t\treturn toolSpeed;\r\n\t\t}\r\n\r\n\t\treturn 1.0F;\r\n\t}\r\n}\r\n```",
    "head_branch": "custom_tool_levels",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308430ac82a74541b2347",
    "number": 1110,
    "body": "Bamboo is normally instamined by anything that's `instanceof SwordItem`. \r\nThis change lets items in the `fabric:swords` tag do so as well.\r\n\r\n(Not sure if these should be two separate mixins or one mixin targeting both classes since the injects are identical.)",
    "head_branch": "sword-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix items with sword tool tag not instantly breaking bamboo (#1110)\n\n* Fix items with sword tool tag not instantly breaking bamboo\r\n\r\n* Consolidate mixins\r\n\r\n* Add Javadoc to injection"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662308440ac82a74541b2348",
    "number": 1109,
    "body": "This is long overdue, so I have taken the time to write the start of a larger readme PR. This just covers the root readme.md to start",
    "head_branch": "readme.md",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Write a proper readme (#1109)\n\n* Write a proper readme\r\n\r\n* Remove unnessecary comments\r\n\r\n* Apply suggestions from code review\r\n\r\nCo-authored-by: haykam821 <24855774+haykam821@users.noreply.github.com>\r\n\r\n* Some changes for clarity\r\n\r\n* Dev environment\r\n\r\nCo-authored-by: haykam821 <24855774+haykam821@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308450ac82a74541b2349",
    "number": 1108,
    "body": "Currently, the fuel time map is rebuilt every time it is queried, which is taking 65% of the tick time on one of the public AOF3 servers.\r\n\r\nThis PR\r\n1) Caches the map, rebuilding it only when necessary.\r\n2) Changes the furnace implementation to use the `FuelRegistry` so that the vanilla furnaces benefit from the caching as well.\r\n\r\nI tested this on a server with ezpas (EZ Pipes and Stuff), which does a lot of `isValid` calls every tick.\r\n* Without the fix: https://spark.lucko.me/#I8zDOn3zKB\r\n* With the fix using the `createFuelTimeMap` directly: https://spark.lucko.me/#YtC8VuWArQ\r\n* With the fix using a map from fastutil: https://spark.lucko.me/#a8C6Tmj1yK",
    "head_branch": "fuel-map-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Cache the fuel time map in the fuel registry (#1108)\n\n* Cache the fuel time map in the fuel registry\r\n\r\n* Use a faster map for the fuel times\r\n\r\n* Rebuild the fuel times map on the client side too\r\n\r\n* Use more compatible mixins\r\n\r\n* Replace a function overwrite by a TAIL inject\r\n\r\n* Mixin formatting\r\n\r\n* Indentation\r\n\r\n* Make cache thread-safe, switch to boxed collection (IHM) since most\r\nuses yield boxed results, refactor cache clearing\r\n\r\n* fix import formatting\r\n\r\nCo-authored-by: Player <player@player.to>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308460ac82a74541b234a",
    "number": 1107,
    "body": "Also adds Nullable annotations to part of the implementation.",
    "head_branch": "ft/item-explosion-handler",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308470ac82a74541b234b",
    "number": 1106,
    "body": "The fix from https://github.com/FabricMC/fabric/commit/95c147c6a1455e062b175a90173a622fdc63a193 was never cherrypicked over, so I have done the fix here.\r\n\r\nFixes #1103 and fixes #1105",
    "head_branch": "villager-fix-over",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Copy over villager trade fix from 1.16 (#1106)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662308470ac82a74541b234c",
    "number": 1104,
    "body": "This should allow developers to depend on a single module without having to depend on the transitive dependencies of that module as well.",
    "head_branch": "module-deps",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add module dependencies to maven POM (#1104)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308480ac82a74541b234d",
    "number": 1102,
    "body": "Updated the proposed enchantment target api for 1.16.3. Seems like Mojang removed `EnchantmentTarget.ALL`, so this version uses a null value to indicate that functionality should be handled in another way. In the process I replaced the redirect mixin with a more compatibility forward inject. This should also fix the concerns about thread safety. Closes #203. Closes #202.",
    "head_branch": "fabric-enchantment-target-api-v1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308490ac82a74541b234e",
    "number": 1100,
    "body": "This fix is required or else worlds where a mod is removed WILL NOT SAVE.\r\n\r\nThis issue is fixed by removing null keys in the structure references map and marks the chunk to be saved as soon as possible if a null key was present.\r\n\r\nThis issue is tracked by: https://bugs.mojang.com/browse/MC-194811",
    "head_branch": "fix/structure-bug",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add fix for handling removal of old structures. (#1100)\n\n* Add fix for handling removal of old structures.\r\n\r\nThis fix is required or else worlds where a mod is removed WILL NOT SAVE.\r\n\r\n* Only mark for saving if the chunk has a null key\r\n\r\n* Add label for issue being fixed\r\n\r\n* Actually fix the redirect lol\r\n\r\n* Licenses...\r\n\r\n* Use ThreadLocal boolean instead of nullable unit\r\n\r\n* Checkstyle is picky\r\n\r\n* remove unnecessary `containsKey`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623084a0ac82a74541b234f",
    "number": 1097,
    "body": "This builds on the previousy biome API PR to add a way for modifying existing Biomes. This is needed since 1.16.2 made Biomes immutable, and introduced several copy-steps which make it harder to simply modify the Biomes in BuiltInBiomes and be done with it.\r\n\r\nThis API aims to add a more generic way of allowing ordered modifications, while building some heavily used convenience methods on top of that more generic API (i.e. adding features, and structure should be easy, while still allowing more wide-spread mods).\r\n\r\n**Implementation Notes**\r\n- This will modify only after datapacks are loaded, so no modifications for the demo world or server.properties parsing (I don't think anyone cares)\r\n- Any method using RegistryKey parameters will work with purely JSON defined worldgen objects too, the test cases test this fully (different PR for the Unit Tests). This means JSON configured features can be added to vanilla biomes\r\n- Biomes overridden or defined in data packs will run through this system too\r\n- Any method that's called addBuiltIn*/removeBuiltIn* will use the BuiltInRegistries to resolve a registry key and continue with that, this means that built-in worldgen objects can easily be added to any biome (be it JSON or built-in)\r\n- Ordering of modifiers is based around both the given order (first), then alphabetically based on the modifier ID (given to BiomeModifications.create), to guarantee consistent feature ordering regardless of mod-loading order\r\n- The IDs have the additional benefit of allowing other mods like KubeJS or WorldGenDebug to specifically target biome modifiers by ID to disable or modify their order (great for modpacks), or print before/after reports while attributing changes to the actual modifiers that caused them\r\n- The convenience methods found on BiomeModifications that quickly add modifiers for common use cases will automatically use the ID of the added worldgen objects as the ID of the modifiers they add, which works well for mod-defined worldgen objects (i.e. the example below where \"ae2:quartz_ore\" is added will use that as the ID for the modifier)\r\n\r\n**Most important classes:**\r\n- `BiomeModifications` is the entry point for any form of modification\r\n- `BiomeSelectors` contains commonly used selectors such as `all biomes in the overworld`, `all biomes in the nether`, `all biomes in a given list`, etc. (selectors can be combined like standard Java predicates)\r\n- `BiomeModificationContext` is the object given to the actual modifier to add/remove/change the biome as needed\r\n\r\n**Example usage (for the simple ore generation case, with some extra config bonus):**\r\n```java\r\nboolean isQuartzOreWorldgenEnabled = /* from mod config file */;\r\nboolean isChargedQuartzOreWorldgenEnabled = /* from mod config file */;\r\nSet<RegistryKey<Biome>> quartzOreBiomeBlacklist = /* from mod config file */;\r\n\r\nif (isQuartzOreWorldgenEnabled) {\r\n    Predicate<BiomeSelectionContext> biomeSelector = BiomeSelectors.foundInOverworld()\r\n            .and(BiomeSelectors.excludeByKey(quartzOreBiomeBlacklist)));\r\n    BiomeModifications.addFeature(biomeSelector, GenerationStep.Feature.UNDERGROUND_ORES, WorldGenKeys.QUARTZ_ORE);\r\n\r\n    if (isChargedQuartzOreWorldgenEnabled) {\r\n        BiomeModifications.addFeature(biomeSelector, GenerationStep.Feature.UNDERGROUND_DECORATION, WorldGenKeys.CHARGED_QUARTZ_ORE);\r\n    }\r\n}\r\n```\r\n\r\n**Example usage (for the simple custom structure case, with some extra config bonus):**\r\n```java\r\nboolean isMeteoriteWorldgenEnabled = /* from mod config file */;\r\nSet<RegistryKey<Biome>> meteoriteBiomeBlacklist = /* from mod config file */;\r\n\r\nif (isMeteoriteWorldgenEnabled) {\r\n    Predicate<BiomeSelectionContext> biomeSelector = BiomeSelectors.foundInOverworld()\r\n            .and(BiomeSelectors.excludeByKey(meteoriteBiomeBlacklist)));\r\n    BiomeModifications.addStructure(biomeSelector, WorldGenKeys.METEORITE);\r\n}\r\n```\r\n\r\n**Example usage (biome-specific mineshafts using biome-based selectors and multiple modifiers):**\r\n```java\r\nBiomeModifications.create(new Identifier(\"mymod:biome_mineshafts\"))\r\n        .add(BiomeModifications.ORDER_REPLACEMENTS,\r\n                BiomeSelectors.includeByKey(BiomeKeys.PLAINS, BiomeKeys.SUNFLOWER_PLAINS),\r\n                context -> {\r\n                    if (context.getGenerationSettings().removeStructure(StructureFeature.MINESHAFT)) {\r\n                        context.getGenerationSettings().addStructure(WorldGenKeys.PLAINS_MINESHAFT);\r\n                    }\r\n                })\r\n        .add(BiomeModifications.ORDER_REPLACEMENTS,\r\n                BiomeSelectors.includeByKey(BiomeKeys.JUNGLE, BiomeKeys.JUNGLE_HILLS, BiomeKeys.JUNGLE_EDGE/*, ... more jungles */),\r\n                context -> {\r\n                    if (context.getGenerationSettings().removeStructure(StructureFeature.MINESHAFT)) {\r\n                        context.getGenerationSettings().addStructure(WorldGenKeys.JUNGLE_MINESHAFT);\r\n                    }\r\n                });\r\n```\r\n\r\n**Example usage (biome-specific mineshafts using context-sensitive modifier):**\r\n```java\r\nBiomeModifications.create(new Identifier(\"mymod:biome_mineshafts\"))\r\n        .add(BiomeModifications.ORDER_REPLACEMENTS,\r\n                context -> context.getBiome().getGenerationSettings().hasStructureFeature(StructureFeature.MINESHAFT),\r\n                (selectionContext, context) -> {\r\n                    RegistryKey<ConfiguredStructureFeature<?, ?>> replacement = REPLACEMENT_BY_BIOME.get(selectionContext.getBiomeKey());\r\n                    \r\n                    if (replacement != null) {\r\n                        context.getGenerationSettings().removeStructure(StructureFeature.MINESHAFT);\r\n                        context.getGenerationSettings().addStructure(replacement);\r\n                    }\r\n                });\r\n```\r\n\r\n**Example usage (making an entity spawn  in all biomes that also spawn sheep):**\r\n```java\r\nBiomeModifications.addSpawn(\r\n        BiomeSelectors.spawnsOneOf(EntityType.SHEEP),\r\n        SpawnGroup.CREATURE,\r\n        MyEntityTypes.SUPER_SHEEP,\r\n        1 /* weight */,\r\n        2 /* minGroupSize */,\r\n        3 /* maxGroupSize */\r\n);\r\n```\r\n\r\n**Example usage (replace sheep spawns with custom sheep in all overworld biomes below a given temperature as long as they're not oceans, and inherit their spawn settings - requires a custom accessor to get all properties of existing spawn entries):**\r\n```java\r\nBiomeModifications.create(new Identifier(\"mymod:extra_wooly_sheeps\"))\r\n    .add(BiomeModifications.ORDER_REPLACEMENTS,\r\n        BiomeSelectors.foundInOverworld().and(context -> {\r\n            Biome biome = context.getBiome();\r\n            return biome.getCategory() != Biome.Category.OCEAN && biome.getTemperature() < 0.2f\r\n        }),\r\n        (selection, context) -> {\r\n            List<SpawnSettings.SpawnEntry> oldSpawns = selection.getBiome().getSpawnSettings().getSpawnEntry(SpawnGroup.CREATURE);\r\n            for (SpawnSettings.SpawnEntry spawnEntry : oldSpawns) {\r\n                if (spawnEntry.type == EntityType.SHEEP) {\r\n                    context.getSpawnSettings().addSpawn(SpawnGroup.CREATURE, new SpawnSettings.SpawnEntry(\r\n                            MyEntityTypes.EXTRA_WOOLY_SHEEP, /* TODO: get weight from spawn entry */, spawnEntry.minGroupSize,spawnEntry.maxGroupSize\r\n                    ));\r\n                }\r\n            }\r\n            context.getSpawnSettings().removeSpawnsOfEntityType(EntityType.SHEEP);\r\n        });\r\n    }\r\n}\r\n```\r\n\r\nFor the curious, the tests are currently here: https://github.com/FabricMC/fabric/commit/b02d6a785b63057945bebf315538d2efe0c08a43",
    "head_branch": "biome-modification-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Biome Modification API (#1097)\n\n* Biome Modification API\r\n\r\n* Improved docs on Mixins.\r\n\r\n* Added convenience methods to select biomes by mob-spawns, and added a top-level convenience method to add new spawns.\r\n\r\n* Checkstyle fixes.\r\n\r\n* Replace a reference to DRM with DynamicRegistryManager\r\n\r\n* Replaced integer order with phase-based ordering.\r\n\r\n* Changed to @Deprecated\r\n\r\n* Checkstyle fix\r\n\r\n* Added category selector."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623084b0ac82a74541b2350",
    "number": 1095,
    "body": "Adds new things to FabricBlockSettings to allow for overriding values from a block's material.\r\nCurrently includes Piston Behavior, Replaceable, and Solid.\r\nA Test Mod is included, featuring 2 different blocks that use these new settings.\r\n\r\nSo if you want a block of the `WOOD` material to be immovable by pistons, you don't have to make a new Block class and override `getPistonBehavior` just to do it, you just slap it in the block settings.\r\n\r\nAs a side effect, also adds methods for `isReplaceable` and stuff (with a `BlockState` argument!) for easy checking of things that are otherwise annoying to check as well as simpler overriding for those things.",
    "head_branch": "extra-block-settings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623084c0ac82a74541b2351",
    "number": 1094,
    "body": "This is most definitely not a great solution as it allows people to over-specify the type argument and therefore cause class cast exceptions at creation time.\r\n\r\nThe intention here is to remove the need for explicit type arguments:\r\n\r\nBefore:\r\n```java\r\n// Omit type argument and this fails to compile\r\nstatic EntityType<TestEntity> OLD_TEST = FabricEntityTypeBuilder.<TestEntity>createLiving()\r\n\t\t.entityFactory(TestEntity::new)\r\n\t\t.spawnGroup(SpawnGroup.CREATURE)\r\n\t\t.build();\r\n```\r\n\r\nAfter:\r\n```java\r\n// Changes make this compile\r\nstatic EntityType<TestEntity> TEST_ENTITY_1 = FabricEntityTypeBuilder.createLiving()\r\n\t\t.entityFactory(TestEntity::new)\r\n\t\t.spawnGroup(SpawnGroup.CREATURE)\r\n\t\t.build();\r\n```",
    "head_branch": "entity-builder-generics",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Tweak entity type builder generics to eliminate explicit type arguments (#1094)\n\n* Tweak entity type builder generics to eliminate explicit type arguments\r\n\r\n* Apply different generic on the entity factory method"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623084c0ac82a74541b2352",
    "number": 1092,
    "body": "Supersedes #517. Splits off the player tracking aspect of v0 networking into a new module. Also adds events that are called when an entity starts or stops being tracked by a player.\r\n\r\n`PlayerStream` isn't great tbf. A better name would be nice, possibly just going for `PlayerTracking`?",
    "head_branch": "ft/player_tracking",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623084d0ac82a74541b2353",
    "number": 1091,
    "body": "Just an updated and merged version of: https://github.com/FabricMC/fabric/pull/613\r\n\r\nWas easier to open a new PR and let github do the sqishing.",
    "head_branch": "feature/criterion",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Custom advancement criterion registry (#1091)\n\n* Custom advancement criterion registry\r\n\r\nFixes #20\r\n\r\nSigned-off-by: liach <liach@users.noreply.github.com>\r\n\r\n* Update fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/api/object/builder/v1/advancement/FabricCriterionRegistry.java\r\n\r\n* Update fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/api/object/builder/v1/advancement/FabricCriterionRegistry.java\r\n\r\n* Rename fabric criterion registry -> criterion registry\r\n\r\nSigned-off-by: liach <liach@users.noreply.github.com>\r\n\r\n* Remove unnecessary build.gradle parts\r\n\r\nWill add manually when I run tests\r\n\r\nSigned-off-by: liach <liach@users.noreply.github.com>\r\n\r\n* Fine I give up\r\n\r\nHope my github editing skill suffices\r\n\r\n* Code style\r\n\r\nCo-authored-by: liach <liach@users.noreply.github.com>\r\nCo-authored-by: liach <7806504+liach@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623084e0ac82a74541b2354",
    "number": 1087,
    "body": "Minecraft has a lot of hardcoded features that make adding unique items and blocks often very difficult, with many mixins. The goal of this module is to create a common set of mixins to help with this hardcoding so that mod developers dont need to track down 30 references of a item/block and that these mixins dont conflict (one of the main reasons i believe this should be part of fabric-api).",
    "head_branch": "1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623084f0ac82a74541b2355",
    "number": 1085,
    "body": "I created this very simple PR to avoid Boilerplate code when creating custom DamageSources in my mod.  \r\n\r\nThe issue is that almost all setters in the vanilla DamageSource class are protected, so in order to create your own you need to subclass DamageSource and copy all the setter methods into your class.  \r\n\r\nI have included methods which were already public in the superclass to make this more maintainable in case the access modifiers in vanilla code change.",
    "head_branch": "DamageSourceBuilder",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308500ac82a74541b2356",
    "number": 1082,
    "body": "Cleaned up use of Generics in registry-sync-v0 and used Registry#getKey where possible instead of reverse-lookup of the registry key.\r\n\r\nThere's also a Registry#getKey function that returns the registries own registry key, which I used in a few places where previously the ID was being looked up in Registry.ROOT (this makes it easier to support registries that aren't in there, such as biomes later).",
    "head_branch": "fabric-registry-sync-cleanup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Cleaned up use of Generics in registry-sync-v0 and used Registry#getKey where possible instead of reverse-lookup of the registry key. (#1082)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308510ac82a74541b2357",
    "number": 1081,
    "body": "This is partially based of off and supersedes #605. This pull request is based off the `feature/cut` branch on the fablabs drafting repository. This pull request was primarily written by @liach but has been adapted into a new pull request on the FabLabs fabric api fork to continue the pull request.\r\n\r\nThis pull request migrates the networking api to v1 and deprecates the old api (minus player streams which need to be migrated by a different pull request). The old networking api is re-implemented using the new networking api in a backwards compatible way.\r\n\r\nRegistration of custom packet handlers is now done through the client or server networking's play receiver. The interface used to read the packet and apply (originally PacketConsumer) is now much more ergonomic, as it exposes the client and serve respectively along with the network handler. This effectively resolves #345.\r\n\r\nThis pull request also adds the ability for mods to send and handle login query messages. This allows the client and server to communicate much earlier and delay login for the client/server until tasks have been completed on either side (async tasks included).\r\n\r\nEvents related to the connection/disconnection of the client or server were added to the respective `Client/ServerConnectionEvents`. This effectively resolves #247\r\n\r\nAlso resolves #187, and prepares the groundwork for a system described in #164.",
    "head_branch": "pr/networking-v1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fabric Networking API V1 (#1081)\n\n* Networking api v1\r\n\r\n\r\n\r\n\r\nSome final docs?\r\n\r\n\r\nLicenses and testmod\r\n\r\n\r\nFix a bunch o imports and make things work for v1 (v0 is bork)\r\n\r\n\r\nMake the testmod pass checkstyle and work\r\n\r\n\r\nDocs for v1\r\n\r\n* Deprecate v0 and implement using v1\r\n\r\n* Drop files down one package due to package check error\r\n\r\n* Fix issue with channel registration, add another testmod\r\n\r\n* jaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaavadoc\r\n\r\n* Make javadoc use `code`, move impl interface to package access\r\n\r\n* this things\r\n\r\n* Rename a few internal methods\r\n\r\n* Mark all client side stuff client only, move client mixins\r\n\r\n* Add null checks around the place, clarify some javadoc and method names\r\n\r\n* Make FutureListeners uninstantiable\r\n\r\n* Some internal nullable annotations\r\n\r\n* An impl class I forgot to rename\r\n\r\n* Some comments and clarify some client login handler javadoc\r\n\r\n* Add a missing FunctionalInterface annotation\r\n\r\n* Split play and login, move client stuff to right package\r\n\r\n* No interface left behind\r\n\r\n* Inline channel registries in api\r\n\r\n* Login and play subpackages not needed\r\n\r\n* Add helper method to create play custom packets\r\n\r\n* hasGlobalChannel -> hasGlobalReceiver\r\n\r\n* Just rename the collection method for now\r\n\r\n* Inline PlayPacketSender into static methods\r\n\r\n* Start on testmod idea for verifying dynamic registration\r\n\r\n* Add client login events\r\n\r\n* You don't say hello when talking to yourself.\r\n\r\nAlso more testmod stuff\r\n\r\n* Make event names present tense\r\n\r\n* Some javadoc and impl interface rename\r\n\r\n* Change the test keybinding\r\n\r\n* Begin working on dynamic reg\r\n\r\n* Dynamic reg works, just need a lot of cleanup and reimpling global\r\n\r\n* A few renames, readd global methods\r\n\r\n* Try to reduce the amount of duplicate registration logic\r\n\r\n* Reimplement dynamic accessors\r\n\r\n* More impl\r\n\r\n* Start reimplementing global receivers. Still very hacky solution.\r\n\r\n* Reimplement some server global reciever stuff\r\n\r\n* Add login init event for server login.\r\n\r\n* Implement client login query start event\r\n\r\n* Move event invocations into addon, don't dual register global recievers\r\n\r\n* Finally reimplement global recievers for all networking phases\r\n\r\n* A revelation: Send packets properly\r\n\r\nThis also finds the issue with screen getting the proper S2C channels, current on TODO list.\r\n\r\n* Disconnect event does not need a packet sender\r\n\r\n* Clarify, add methods to get channels net handler can recieve on client\r\n\r\n* Unregister actually works now\r\n\r\n* Bunch of null checks, add simpler login delay test for vanilla clients\r\n\r\n* Add some debug logging entries, fix unregister on client's session reg\r\n\r\n* Play channel event javadoc and rename login query handlers\r\n\r\n* More channel -> channelName\r\n\r\n* thisening\r\n\r\n* Introduce the basics infrastructure for tracking global receivers\r\n\r\n* Add more substantial javadoc to login connection events\r\n\r\n* Javadoc, reimplement unreg methods on v0, 1 impl fix\r\n\r\n* Implement tracking for global recievers\r\n\r\n* Dont forget to start tracked sessions in 3/4 cases\r\n\r\n* Global receiver docs and move methods in classes\r\n\r\n* Complete null checks\r\n\r\n* big boi javadoc part 1\r\n\r\n* Finish the main javadoc, usage javadoc is left\r\n\r\n* Set so has method is not needed\r\n\r\n* Rename receiveable and sendable methods\r\n\r\n* Add the two missing private ctors\r\n\r\n* buildscript update to upstream\r\n\r\n* Split out player finding stuff to networking player tracking API v1\r\n\r\nSigned-off-by: liach <liach@users.noreply.github.com>\r\n\r\nForward v0 PlayerStream to new module, add entity track events\r\n\r\nRename module to player tracking\r\n\r\nWell javadoc can make sense\r\n\r\nDecide on tracking for the name\r\n\r\nUpdate fabric-player-tracking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/player/tracking/v1/package-info.java\r\n\r\nCo-authored-by: Erlend Åmdal <erlend@aamdal.com>\r\nRemove exceptions from javadoc that are not thrown\r\n\r\njavadoc fix again\r\n\r\nHandle a case where the player manager happens to be null\r\n\r\nrename player tracking to player lookup\r\n\r\nYeet\r\n\r\n* Cherrypick #1092\r\n\r\n* Remove some redundant client networking methods, rename `(un)register` to `(un)registerReceiver`\r\n\r\n* Simplify access to dynamic reg on client\r\n\r\n* Param shifting, let users get sender.\r\n\r\n* Warning about time and distance units\r\n\r\n* Make sure these are client only\r\n\r\n* Fix control flow in ClientPlayNetworking#send\r\n\r\n* Correct example code javadoc\r\n\r\n* javadoc correction in server login\r\n\r\n* Put login delay tests behind system property\r\n\r\nAlso remove unnecessary junk added by old module that was merged together.\r\n\r\n* Fix ordering so channel registrations during `PHASE`_INIT work\r\n\r\n* Fix prod bug and an oversight\r\n\r\n* Fix login when connecting to dedicated server\r\n\r\n* Update registry sync to v0 to prevent issue with reg sync hanging client\r\n\r\n* this is done"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662308510ac82a74541b2358",
    "number": 1078,
    "body": "Raised from https://github.com/FabricMC/fabric/pull/1069#issuecomment-690337405\r\n\r\nThis is a collection of client side events which client side mods can use to detect block breaks and placements.\r\n\r\nThe added events are as follows:\r\n\r\n```\r\nClientBlockPlaceEvent.BEFORE\r\nClientBlockPlaceEvent.CANCELED\r\nClientBlockPlaceEvent.AFTER\r\n\r\nClientBlockBreakEvent.ON_START\r\nClientBlockBreakEvent.ON_PROGRESS\r\nClientBlockBreakEvent.ON_CANCEL\r\nClientBlockBreakEvent.ON_BREAK\r\n```",
    "head_branch": "client-block-place-break",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308520ac82a74541b2359",
    "number": 1076,
    "body": "",
    "head_branch": "feature/create_villager_types",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add helper methods to create custom villager types. (#1076)\n\n* Add helper methods to create custom villager types.\r\n\r\n* Rename biome method\r\n\r\n* Make it register and register the instance of the villager type.\r\n\r\n* Javadoc 2\r\n\r\n* Add texture javadoc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308530ac82a74541b235a",
    "number": 1075,
    "body": "Adds conditional JSON resource loading via the JSON. Conditions can be registered via ResourceConditions#register.\r\nHere is an example:\r\n```javascript\r\n{\r\n  \"type\": \"fabric:mod\",\r\n  \"condition\": {\r\n    \"minecraft\": \">=1.16.3\",\r\n    \"yes\": [\r\n      \"<1.0.0\",\r\n      \">=2.0.0\"\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nThe above JSON can be put in a file named `<original file>.fabricmeta` to apply to individual files or `.fabricmeta` to apply to the whole folder.\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>",
    "head_branch": "conditional_recipes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308540ac82a74541b235b",
    "number": 1073,
    "body": "…tool types.\r\n\r\nThis PR does not change any of the behaviour, this PR simply does 3 things:\r\n- Add @Nullable and @ApiStatus.Internal (people are not supposed to touch them!! whoever using the internal events please stop) annotations\r\n- Remove redundant VanillaToolsModdedBlocksToolHandler's Tag#contains, it is already checked beforehand.\r\n- Add a custom tool type (tater) in the testmod, and blocks that are effectively broken by taters. \r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>",
    "head_branch": "custom_tool_tags",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Clean up to tool-attributes, add annotations and add test for custom … (#1073)\n\n* Clean up to tool-attributes, add annotations and add test for custom tool types.\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\n* Change version to 1.2.3\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\n* remove unrelated change\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\n* Turn build.gradle to tabs\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\n* Fix checkstyle\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\n* Fix some review issues\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\n* Add license to package-info.java\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\n* Remove line between the javadoc and the package line\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\n* Move the @NotNull annotation\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308550ac82a74541b235c",
    "number": 1072,
    "body": "Replaces #1067 \r\n\r\nThis module allows API instances to be associated with game objects without specifying how the association is implemented. This is useful when the same API could be implemented more than once or implemented in different ways.\r\n\r\nFor example, a fluid API might be implemented for a block in the following ways:\r\n- Using BlockState and some kind of wrapper (A vanilla cauldron implementation might do this)\r\n- Directly in a BlockEntity for a simple tank\r\n- As a more complicated data structure for a multi-block tank\r\n- As one of several instances within a machine block containing multiple fluid buffers\r\n\r\n This variation is managed by a mapping function given when an API provider is registered. The provider interface\r\nis meant to be extended as needed to handle a given use case.  (Sidedness, instance ID, permissions, etc)\r\n\r\nOnce registered, API providers can be retrieved without any knowledge of the API or provider implementations, and then used according to the contract of the provider to obtain an API instance.\r\n\r\nNote that this model allows API providers to be associated with game objects that don't natively support them. This will require a wrapper or data attachment facility (or mixins) to be effective in most cases, all of which are outside the scope of this module. However, the decoupling of retrieval from implementation affords maximum flexibility for implementors.\r\n\r\nThis module could easily extended to cover additional game objects and probably should be if accepted.\r\n\r\nThis module could be implemented with slightly more efficiency if a data attachment facility were available, but that is left for another day. \r\n\r\nHere is a simple (and silly) example of usage:\r\n```java\r\n// The API we want to expose\r\ninterface Boop {\r\n\tvoid boop();\r\n}\r\n\r\n// Our absent provider\r\nstatic final Boop NO_BOOP_FOR_YOU = () -> {};\r\n\r\n// Our provider interface - in this case we don't rely on block entity\r\n// Illustrates how providers can add the access parameters they need\r\n@FunctionalInterface\r\ninterface BoopProvider extends ApiProvider<BoopProvider, Boop> {\r\n\tBoop getBoop(Direction side, PlayerEntity player);\r\n\r\n\t@Override\r\n\tdefault Boop getApi() {\r\n\t\treturn NO_BOOP_FOR_YOU;\r\n\t}\r\n}\r\n\r\n// Our singleton provider access mapping function - real examples would usually get/create providers from game state\r\nstatic final BoopProvider HAVE_A_BOOP_MAYBE = (side, player) -> (side == Direction.UP && player.isSneaking()) ? () -> System.out.println(\"Boop! Side = \" + side.toString()) : NO_BOOP_FOR_YOU;\r\n\r\n// Registration of our access along with our absent provider \r\npublic static final BlockApiProviderAccess<BoopProvider, Boop> BOOP_ACCESS = BlockApiProviderAccess.registerAcess(new Identifier(\"boop:boop\"), Boop.class, (side, player) -> NO_BOOP_FOR_YOU);\r\n\r\n// Registration of our provider for a specific block\r\nstatic {\r\n\tBOOP_ACCESS.registerProviderForBlock((world, pos, blockState) -> HAVE_A_BOOP_MAYBE, Blocks.COBBLESTONE);\r\n}\r\n\r\n// Would be called from a block or item in response to a player action\r\nstatic void boopItUp(PlayerEntity player, BlockHitResult hit) {\r\n\tBOOP_ACCESS.getProviderFromBlock(player.world, hit.getBlockPos()).getBoop(hit.getSide(), player).boop();\r\n}\r\n\r\n// A variant of our provider meant for ItemStacks\r\n// Illustrates how same API can have different provider methods.\r\ninterface StackBooper extends ApiProvider<StackBooper, Boop> {\r\n\tBoop getBoop(ItemStack stack);\r\n\r\n\t@Override\r\n\tdefault Boop getApi() {\r\n\t\treturn NO_BOOP_FOR_YOU;\r\n\t}\r\n}\r\n\r\n// Registration of our item access along with our absent provider\r\npublic static final ItemApiProviderAccess<StackBooper, Boop> BOOP_ITEM_ACCESS = ItemApiProviderAccess.registerAccess(new Identifier(\"boop:boop\"), Boop.class, stack -> NO_BOOP_FOR_YOU);\r\n\r\n// Another silly provider\r\nstatic StackBooper BOOP_THE_STACK = stack -> stack.getCount() == 1 ? () -> System.out.println(\"Boop!\") : NO_BOOP_FOR_YOU;\r\n\r\n// Registration of our provider for a few random items\r\nstatic {\r\n\tBOOP_ITEM_ACCESS.registerProviderForItem(s -> BOOP_THE_STACK, Items.RED_CARPET, Items.RED_CONCRETE, Items.REDSTONE);\r\n}\r\n\r\n// would be called from an item or block in response to a player action\r\nstatic void boopThatStack(ItemStack stack) {\r\n\tBOOP_ITEM_ACCESS.getProviderFromStack(stack).getBoop(stack).boop();\r\n}\r\n```",
    "head_branch": "fabric-api-provider",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308560ac82a74541b235d",
    "number": 1069,
    "body": "Completes Issue #970 ",
    "head_branch": "block-place",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308560ac82a74541b235e",
    "number": 1067,
    "body": "# Component Provider\r\nA component provider is a functional role - there is no `ComponentProvider` interface or class.  Component providers are game objects (currently blocks, items or entities) associated with one or more \"Component Type\" instances. Components are also conceptual and can be of any type - there is no `Component` interface.\r\n\r\nMany readers will note some resemblance here to entity attribute frameworks like Cardinal Components or the old capabilities system in Forge.  The resemblance is only approximate: this API facilitates *access* to components but handles no aspects of implementation or persistence.  It solves the problem of \"how do I get the thing from the other thing when I don't know how the first thing is implemented in the other thing\" problem.\r\n\r\nThis API is in no way a general-purpose entity attribute library, nor is it meant to replace one.  The intent here is to decouple component access from component implementation, and to do so without adding or requiring external dependences.  It should be complimentary to CCA, LBA or similar frameworks, and also works just as well when components are implemented directly as part of a BlockEntity, Entity, etc. \r\n\r\n## Registering Component Types\r\nCreating a new component type is straightforward:\r\n\r\n```java\r\nComponentType<Thing> THING_COMPONENT = ComponentRegistry.INSTANCE.createComponent(new Identifier(ExampleMod.MOD_ID, \"thing\"), EMPTY_THING);\r\n```\r\n\r\nNote that two components can share the same type. This may be useful when the same component type could have a different purpose or meaning for the same provider. \r\n```java\r\nComponentType<Thing> OTHER_THING_COMPONENT = ComponentRegistry.INSTANCE.createComponent(new Identifier(ExampleMod.MOD_ID, \"other_thing\"), EMPTY_THING);\r\n```\r\n\r\nThe second parameter to `ComponentRegistry.createComponent()` is the value that should be returned when the component is absent, and made visible via `ComponentType.absent()`.  Avoid using `null` here - cleaner code results when the absent value is a no-effect dummy instance. \r\n\r\n## Using Components\r\nObtaining a component instance is a two-step process:\r\n\r\n1) Call a variation of `ComponentType.getAccess()` to retrieve a `ComponentAccess` instance. Currently there are methods to get access from blocks (or block positions within a world), entities, and from Items, which may or may not be held by a player.  Future versions may add access methods for other game objects if there are interesting use cases for them. \r\n\r\n2) Use a variant of `ComponentType.get()` to get the actual component instance, or the absent value if the component is unavailable.\r\n\r\n`ComponentType.get()` accepts two parameters, both of which can be omitted: \r\n\r\n* **`Direction`** For components that are accessible via a specific side.  Pass `null` (or call a `get()` variant without this argument) for components that have no side or to get the non-specific instance.  Component types that do not have sides should ignore this parameter and access attempts from a specific side should always provide it, unless it is somehow known to be unnecessary.\r\n\r\n* **`Identifier`** Components may optionally have named instances and accept access requests for a specific named instance.  This may be useful, for example, with machines that have more than one input/output buffer that may be accessible from the same side.  Such a machine could return a different instance depending on which named buffer was requested.  Use of this feature is optional and implementation-specific; This API currently makes no attempt to standardize these identifiers or their meanings. \r\n\r\nOften, access to a component is for a single use.  In these cases, `ComponentType.acceptIfPresent()` can simplify code. It works like `get()` but also accepts a `Consumer` for the component type and if it finds a non-absent component instance it applies the consumer and returns true. It returns false when the component is absent.\r\n\r\nSimilar convenience is offered by `ComponentType.applyIfPresent()`. It accepts a `Function` over the component type, and returns the result of that function if a non-absent component instance is found, or `null` otherwise.\r\n\r\n## Providing Components\r\nThe API can only return component instances that have been mapped via `ComponentType.registerProvider()`, like so:\r\n\r\n```java\r\nTHING_COMPONENT.registerProvider(ctx -> ((ThingBlockEntity) ctx.blockEntity()).getThing(), THING_BLOCK_ENTITY);\r\n```\r\n\r\nWhile access to components requires two steps, provisioning is handled by a single function.  All of the information about the world/block/item/entity/side/id is marshaled into a `BlockComponentContext`, `EntityComponentContext` or `ItemComponentContext` instance that the function consumes.\r\n\r\nMost block implementations will use a `BlockEntity` as their component holder/provider, but this is not required.  The provider function must map the context data to a component instance. How that happens is unspecified. The `BlockEntity` value in the context can be `null`, but `World` and `BlockPos` values will always be present.\r\n\r\n## Item Actions\r\nThe API includes an opt-in system for adding behaviors to items that to perform some action when used on blocks that contain or are associated with a component.  \r\n\r\n`ComponentType.registerAction` associates a potential action with a component type and one or more items.  The first argument is a `BiPredicate` that accepts an `ItemComponentContext` and a component instance.  The intent is that multiple consumers can be registered for the same item/component, and processing will stop after any consumer returns true. Order of execution is unspecified, but this should not matter much in practice - the player can only be holding one item and clicking on one block at a time.\r\n\r\nNote these actions have no effect unless mods invoke the action handler in a block's `onUse` method (or wherever is appropriate) using `Component.applyActions` or `Component.applyActionsWithHeld`. This should only be done server-side. \r\n```",
    "head_branch": "fabric-component-access",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308570ac82a74541b235f",
    "number": 1066,
    "body": "This pull request is to make the creation for bows and crossbows way easier. Just implementing the interface will allow any bow/crossbow to easily edit the hard-coded features from Minecraft.",
    "head_branch": "1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308580ac82a74541b2360",
    "number": 1062,
    "body": "## Documentation Expansion\r\n\r\n### Why\r\n\r\nFabric API is a **mess**. Well maybe not _that_ big of a **mess**. Maybe more of a mess, not a **mess**. Either way, there's been many recommendations to standardize contributions made to Fabric API, and an equal number of attempts. However, somewhere along the way, in an attempt to organize Fabric API, we became disorganized in the amount of attempts we made to get organized.\r\n\r\n### What\r\n\r\nThis draft PR/RFC/Whatever you want to call it, is meant to act as a centralized place to get our footing and understand the scope of standardization. I'm not naïve to the fact that this will likely take ages to develop a consensus on these standards, and that it'll take many a revision to get to a place where people are happy.\r\n\r\nThat being said, although it's kind of annoying to deal with through GitHub, I'd like to use [Vaerian/fabric](https://github.com/Vaerian/fabric/tree/documentation-expansion) as like a central repo for figuring this out. I've enabled issues on the repo so larger more general discussion can happen here, and the specifics can happen in issues on the forked repo. If they request it I'm going to give i509VCB, Player, and modmuss50 push access to the repo (actually it sounds like people with push access to FabricMC/fabric can just straight up make commits to this PR, so it's probably not necessary, but the offer remains), as ultimately they have authority over whether this PR will get in or not, all other issues will get pulled in based on democratic discussion (again, to the best of my ability). PRs into [Vaerian/fabric on documentation-expansion](https://github.com/Vaerian/fabric/tree/documentation-expansion) are highly encouraged.\r\n\r\nHere's to hoping something good comes out of this 🤞🏻 \r\n\r\n### Are You Insane?\r\n\r\nYou're probably asking yourself, why would anyone ever subject themselves to managing a \"sub repository\" developing standards for an open source project? That sounds horrible. Here's the deal, I have like problematic levels of OCD and so bikeshedding is like my passion. Little side tangent, I was tasked with figuring out a GH Action for managing releases and all of that for a mod, that turned into me writing a command line tool for creating fabric projects and managing them, that turned into me writing a command line tool for managing a changelog, and then that turned into me writing a rust library for parsing command line input. The point is I thrive in areas that are organized and have standards and such. I once had a dream where I created an organization that standardized other standards organizations. So for me it's actually really fun going through the repository issues and compiling it all together, and managing figuring all of this out. Maybe that makes me masochist I'm not sure.\r\n\r\nPlease ping me `@Vaerian` on fabricord, or basically any other fabric related server (I think I'm on most of them at this point), if you have anything you wanna discuss. I'm never against a good ping.\r\n\r\n### The Meat And Potatoes\r\n\r\nAs topic areas are brought up I’ll add them to the list up here. This PR should only be for outlining the standards, and writing the contribution guidelines, not for actually implementing it in Fabric API. Presumably a separate PR will be made later to align Fabric API with the standards officially set in place by this PR. Additionally, all future style related PRs should both add to the CONVENTIONS.md file and modify all of Fabric API to meet the new style.\r\n\r\nPR scope\r\n- [x] Closes #328 \r\n- [x] Resolves #417\r\n- [x] Includes / Resolves #499 \r\n- [x] Includes / Resolves #575 \r\n- [x] Includes / Resolves #510 \r\n- [x] Includes / Resolves #587 \r\n- [x] Includes / Resolves #637 \r\n- [ ] More in depth CONTRIBUTING.md guide\r\n- [ ] Revival of additional standards that have fallen to the wayside\r\n- [ ] Addition of some de facto standards already in Fabric API\r\n- [ ] Figure out the common namespace in a separate RFC and then add that to CONVENTIONS.md\r\n\r\nThis PR should replace #417 and close #328 along with standardizing the other related issues listed below. After this is pulled in an admin should take a look at all of the related issues and assess whether or not they should be closed or not.\r\n\r\nRelated issues\r\n- [#587] Mixins shadowing final fields should use `@Final`\r\n- [#637] Lets Talk: Inconsistent names for classes and mixins.\r\n- [#986] minor mixin improvements\r\n- [#328] Add a proper README.md\r\n- [#417] Improved README\r\n- [#510] Inconsistent method names for mixin methods\r\n- [#531] Refactor several old names\r\n- [#575] [RFC] New module naming scheme\r\n- [#499] [RFC] Experimental APIs",
    "head_branch": "documentation-expansion",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308590ac82a74541b2361",
    "number": 1060,
    "body": "This should be a lot faster. \r\n\r\nNeeds a little bit more testing before id by happy using it to build. This will allow the use of the jetbrains annotations as well. (Out of scope for this PR)",
    "head_branch": "loom_0_5",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update loom to 0.5 (#1060)\n\nYou may need to run `--refresh-dependencies` if you have odd issues. Please ask if you need help."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623085a0ac82a74541b2362",
    "number": 1059,
    "body": "old one ( #1025 ) became riddled with merge conflicts\r\n",
    "head_branch": "mixin-suffixes-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623085a0ac82a74541b2363",
    "number": 1053,
    "body": "Public API changes:\r\n- Removed flagging biomes as suitable for player spawns since that is now handled in the Biome Builder.\r\n- Changed API over to RegistryKey's, not because it's necessary, but because it is more ergonomic since Vanilla Biomes in BuiltInBiomes are now all exposed as keys, rather than instances.\r\n\r\nI also increased Gradle-Memory-Settings to 3G since I saw OOM errors in unrelated modules.\r\n\r\nThis aims to simply restore the biome module for now, and split off the work required to post-process biomes so it becomes more manageable. (See #1036)\r\n\r\nThis PR in conjunction with #1052 will enable mods to port from 1.16.1 in a safe manner by moving from Registry.* to BuiltInRegistry.* for their WorldGen objects. After this, the next step is to provide simple APIs for adding carvers/features/structures to other biomes (See #1036).",
    "head_branch": "biome-api-fixing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Ported 1.16.1 biomes-api-v1 to 1.16.2 (#1053)\n\n* Ported 1.16.1 biomes-api-v1 to 1.16.2.\r\nPublic API changes:\r\n- Removed flagging biomes as suitable for player spawns since that is now handled in the Biome Builder.\r\n- Changed API over to RegistryKey's, not because it's necessary, but because it is more ergonomic since Vanilla Biomes in BuiltInBiomes are now all exposed as keys, rather than instances.\r\n\r\n* Changed to CheaterCode's mixin for modifying the nether biomes, saving us one accessor.\r\n\r\n* Move Bonanza\r\n\r\n* Finished moving and updating of the module, added experimental markers.\r\n\r\n* Adjusted experimental notes.\r\n\r\n* Finished rename from biomes-v1 to biome-api-v1\r\n\r\n* Reverted memory settings in preparation for loom-0.5"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623085b0ac82a74541b2364",
    "number": 1052,
    "body": "Problem:\r\nThe static initializer of DynamicRegistryManager will copy all current entries from BuiltInRegistries into `field_26733` and from then on only use entries from that copy instead of the source. In \"normal\" operation, `DynamicRegistryManager` will only be class-loaded **after** initialization of all Mods has completed, because Vanilla will create its first dynamic registry afterwards (loader version 0.9.2 moves the server-side entrypoint to make this be true on the dedicated server too).\r\nHowever. Another mod _might_ still class-load `DynamicRegistryManager` during its own Mod initializer, which will lead to all subsequent mods Worldgen registration in BuiltInRegistries to be ignored. This PR aims to fix that by mixing into the static initializer of DynamicRegistryManager and setting up registry event listeners for all source-registries in BuiltInRegistries. The listeners propagate entries that are added to the builtin registries after the static initializer has run into the builtin dynamic registry manager.\r\n\r\nWhile it's possible for Mods to set up Events and register into `field_26733` directly, this will a) leave BuiltInRegistries and `field_26733` out of sync b) is more complex since `field_26733` is private c) more important it will create a problem for layering since adding everything to BuiltInRegistries will create consistent raw-ids for use in Biome layering, while having a desync between BuiltInRegistries and `field_26733` will make this a convoluted mess (if possible at all).\r\n\r\nWhen this is merged, it will be simple to recommend to mods to register their built-in Worldgen objects to BuiltInRegistries, like Vanilla does. To support modded Biomes in layering, I'll make another PR that also properly  synchronized BuiltInRegistries to the raw-id map in `Biomes.BIOMES`.",
    "head_branch": "built-in-registry-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make BuiltInRegistries safe for Worldgen Registration during Mod Initialization (#1052)\n\n* Adds a synchronisation for entries in BuiltInRegistries to the built-in DynamicRegistryManager, to a void class-loading DynamicRegistryManager during Mod initialization from messing up the Worldgen registrations of subsequently loaded mods.\r\n\r\n* Changed to use updated Yarn mappings."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623085c0ac82a74541b2365",
    "number": 1051,
    "body": "The majority of issues made on the fabric repository can be classified as either a legitimate issue relating to fabric api and its development, or a user troubleshooting issue. Obviously the former is the intended use of the issues section, and the latter results in a lot of unnecessary clutter in the issues section, and while I recognize that no solution will completely prevent misuse of the issues section, adding some issues templates might reduce the amount of invalid issues, or at the very least help manage them better.\r\n\r\nI propose first that an issues label be added called \"support\" in order to distinguish between a development issue and a support issue. This PR adds an issue template for support issues that automatically adds that support tag.\r\n\r\nThe default contents of the issue template contains information for users on how to troubleshoot, and where to get actual support (on the fabric discord). Worst case scenario they ignore all of that and we have an extra issue, but this time it's actually sorted into a category. Best case scenario the issues section isn't unnecessarily cluttered, somebody actually got the help they needed, and everyone is happy.\r\n\r\nThe goal is to eventually make some more PRs like this to add helpful issue templates for new module ideas, etc... but this one seemed specifically helpful.",
    "head_branch": "support-issue-template",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623085d0ac82a74541b2366",
    "number": 1047,
    "body": "",
    "head_branch": "1.16.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Block break event (#980)\n\n* Block break event\r\n\r\n* License headers + after event\r\n\r\n* Before and after events, testmod\r\n\r\n* Fix checkstyle\r\n\r\n* Version bump, fix client method call\r\n\r\n* Move to one event class\r\n\r\n* Expand event parameters + javadoc\r\n\r\n* Add cancelation event and move javadocs\r\n\r\n* Move JavaDoc + Make success have same function as pass\r\n\r\n* Fix success bug\r\n\r\n* Fix documentation again, change approach\r\n\r\n* Fix checkstyle\r\n\r\n* Update fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java\r\n\r\nCo-authored-by: liach <7806504+liach@users.noreply.github.com>\r\n\r\n* Update fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java\r\n\r\nCo-authored-by: liach <7806504+liach@users.noreply.github.com>\r\n\r\n* Update fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java\r\n\r\nCo-authored-by: liach <7806504+liach@users.noreply.github.com>\r\n\r\n* Update fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java\r\n\r\nCo-authored-by: liach <7806504+liach@users.noreply.github.com>\r\n\r\n* Update fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java\r\n\r\nCo-authored-by: liach <7806504+liach@users.noreply.github.com>\r\n\r\n* Update fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java\r\n\r\nCo-authored-by: liach <7806504+liach@users.noreply.github.com>\r\n\r\n* Fix checkstyle\r\n\r\n* Rename stuff\r\n\r\n* fixes\r\n\r\n* Update fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/PlayerBlockBreakEvents.java\r\n\r\nCo-authored-by: i509VCB <i509vcb@gmail.com>\r\n\r\n* Update fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/PlayerBlockBreakEvents.java\r\n\r\nCo-authored-by: i509VCB <i509vcb@gmail.com>\r\n\r\n* Update fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/impl/event/interaction/InteractionEventsRouter.java\r\n\r\nCo-authored-by: i509VCB <i509vcb@gmail.com>\r\n\r\n* Update fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/PlayerBlockBreakEvents.java\r\n\r\nCo-authored-by: i509VCB <i509vcb@gmail.com>\r\n\r\n* Rename Canceled Event Method Name\r\n\r\nCo-authored-by: liach <7806504+liach@users.noreply.github.com>\r\nCo-authored-by: i509VCB <i509vcb@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623085e0ac82a74541b2367",
    "number": 1046,
    "body": "This PR fixes a defect that causes Indigo to track in incorrect light face after a transform is applied.\r\n\r\nAs part of the fix, it simplifies geometry tracking generally and also ~~deprecates some public non-API methods that are no longer needed or which should have reduced scope.  The intention is these methods should be removed or changed in the 1.17 cycle.~~ removes or reduces the scope of some non-API methods that are no longer needed or should not be used externally.\r\n\r\nLastly, it exposes an improved `fromVanilla` method on `MutableQuadView` that is used in the implementation. This version is more compact and offers better encapsulation and consistency.  The existing method is deprecated and should be removed in the 1.17 cycle.\r\n\r\nThis change has been briefly tested with a [modified fork of AE2](https://github.com/grondag/Applied-Energistics-2/tree/indigo-fix) to confirm it fixes the reported issue, and also with Exotic Blocks and RenderBender which make extensive use of the API.\r\n\r\nBefore (with modified AE2 fork that removes current hack)\r\n![2020-08-25_09 07 33](https://user-images.githubusercontent.com/6106235/91199439-be548a00-e6b2-11ea-9e95-7c6f089da8d8.png)\r\n\r\nAfter (with same fork)\r\n![2020-08-25_09 09 13](https://user-images.githubusercontent.com/6106235/91199480-cb717900-e6b2-11ea-91bb-27fd8549316b.png)\r\n\r\n\r\n",
    "head_branch": "indigo-fixes-1.16.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix for #987 (#1046)\n\n* Fix #987, simplify geometry tracking, clean up scoping\r\n\r\n* Bump indigo version\r\n\r\n* Expose improved fromVanilla method\r\n\r\n* Strip deprecations in non-API components\r\n\r\n* bump renderer api version\r\n\r\n* Clear tag for converted quads\r\n\r\nOtherwise possible for tags added by transforms to pollute subsequent quads\r\n\r\n* Borrow from Canvas - don't set nominal face twice, prevent header state leakage"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623085e0ac82a74541b2368",
    "number": 1043,
    "body": "Resolves #622 \r\n\r\nThis is a precursor to my permissions API PR, the tri-state extensions allow for additional handling of the tri-state valued returned by permissions checks.",
    "head_branch": "tristate-extensions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Tristate extensions (#1043)\n\n* Tri-state extensions\r\n\r\nAdds new extensions to tri-state and some javadoc.\r\n\r\n* Part 2\r\n\r\n* Comment fix\r\n\r\n* More conistent codestyle, abstract the map and ifxyz code a bit\r\n\r\n* Annotations\r\n\r\n* Player said no to qualifying static members local to the TriState enum.\r\n\r\n* Exceptional spelling\r\n\r\n* add a more Optional-like map method and drop if*State*\r\n\r\n* ? extends T this time\r\n\r\n* Compare to default rather than null of getBoxed\r\n\r\n* Puncation of course"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623085f0ac82a74541b2369",
    "number": 1040,
    "body": "This makes the dimension API work again.\r\n\r\nVanilla no longer creates portals for dimensions other than the nether, so the entire Placement Handling is not necessarily needed for mods that just want to port to a specific point in their dimension.\r\n\r\nI also introduced two different term here:\r\n- ~~Untargeted Teleportation means teleporting to a dimension without specifying a destination point (nether portals, end portals, Vanilla `moveToWorld` API)~~\r\n- Targeted Teleportation means teleporting to a dimension while specifying the destination point in the target dimension fully (this will apply to most mods porting players into their own dimensions using teleports or various other methods)\r\n\r\n~~A modded dimension needs to opt-in to support the untargeted teleportation case, by specifying a handler for it. That handler would then carry out tasks such as:~~\r\n- ~~Determining the actual destination, for example by deriving it from the entities current position~~\r\n- ~~Placing a portal - if desired~~\r\n\r\n~~To support special use cases such as performing an untargeted teleportation into a mod dimension _WITHOUT_ placing a portal, the API supports optionally passing attributes along with the teleportation request, which the handler can then inspect.~~\r\n\r\n**edit**: I decided to rip out the untargeted teleportation for now since it seems like a niche use case and would require us to replicate Vanilla's coordinate mapping/scaling behavior to teleport to the overworld in an untargetted fashion.\r\n\r\nAdditionally, I introduced two new methods to allow mods to mark their dimension and dimension_type JSON files as stable so that they do not trigger the experimental warning screen anymore. This requires any used Chunk Generators to use a fully stable codec (the test mod's Codec was experimental, which cost me quite a bit of time).\r\n\r\nThe mixin into RegistryOps could potentially be replaced with dynamic registry events if those are merged, but is currently independent.",
    "head_branch": "dimension-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308600ac82a74541b236a",
    "number": 1036,
    "body": "Because of too many changes to world generation, the old biome API requires a complete rewrite.\r\n\r\nThis is my initial attempt at a 1.16.2 biome API.\r\nWhile I'm confident in most of my code, if this *does* get merged, it should probably still be merged as an experimental feature since the underlying vanilla code is also experimental.\r\n\r\nWhile this is a draft, I'd like to get this out reasonably fast, even if incomplete as a experimental API since many mods need it.\r\nAlso please help me with this through discussions or critique, I am pretty new to fabric api development.\r\n\r\n**This requires #1029** (will rebase once that gets merged)\r\n**This replaces #982**\r\n**This replaces #996**\r\n\r\n## Todo List\r\n\r\n- [x] Register new Biomes\r\n- [ ] Add Overworld Biomes to vanilla world gen\r\n- [x] Add Nether Biomes to vanilla world gen\r\n- [ ] Add End Biomes to vanilla world gen (Probably not happening)\r\n- [x] Modify existing Biomes (Covers #982 )\r\n- [ ] Easier addition of features to the builder (e.g. using RegistryKey instead of a supplier)\r\n- [ ] Provide access to the DynamicRegistryManager in the callback (also needs to be changed in #1029 )\r\n\r\n\r\n## About Overworld Biomes\r\nI don't actually know how feasible it is to provide a proper API for this.\r\nIt seems like the mess in `BiomeLayer.build` is responsible for selecting the biomes to generate and it seems to use a lot of hardcoded biome ids.\r\nPlease let any ideas be known.",
    "head_branch": "biome-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308610ac82a74541b236b",
    "number": 1035,
    "body": "This hit us because our block entity renderer constructors access the client, and it was unclear to me that the factory would be called immediately if some other mod already had accessed the class initializer.",
    "head_branch": "BlockEntityRendererRegistry-apidoc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Clarify an aspect about the block renderer registry (#1035)\n\n* Clarify an aspect about the block renderer registry.\r\n\r\n* Update fabric-renderer-registries-v1/src/main/java/net/fabricmc/fabric/api/client/rendereregistry/v1/BlockEntityRendererRegistry.java\r\n\r\nCo-authored-by: liach <7806504+liach@users.noreply.github.com>\r\n\r\nCo-authored-by: liach <7806504+liach@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308620ac82a74541b236c",
    "number": 1034,
    "body": "Effectively a placeholder that can be replaced by a decided convention in the future.",
    "head_branch": "tag-naming-conventions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308630ac82a74541b236d",
    "number": 1033,
    "body": "Adds:\r\n> helper method to create new tags conveniently by just passing the path part\r\n\r\n\\- Player\r\n\r\nCommon namespace getter's effectively a placeholder for putting a decided convention into in the future.",
    "head_branch": "tag-registry-helpers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308630ac82a74541b236e",
    "number": 1031,
    "body": "This pull request adds the `fabric-dynamic-registry-api-v1` module. This module is used by implementing `DynamicRegistryProvider` in a `dynamic-registry-provider` entrypoint.",
    "head_branch": "fabric-dynamic-registry-api-v1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308640ac82a74541b236f",
    "number": 1030,
    "body": "We hit this issue with a modded block that:\r\n- Can be harvested without a tool\r\n- Defines PICKAXE + mining level 0 as effective\r\n- Does not have a vanilla material\r\n\r\nThis causes a dynamic tool (The TechReborn drill in this case) to not get their mining speed and mine with speed 1.",
    "head_branch": "fix-tool-api-mininglevel0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix dynamic tools not using their mining speed on modded blocks with mining level 0. (#1030)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308650ac82a74541b2370",
    "number": 1029,
    "body": "## Outline\r\nSince 1.16.2, some registries are handled by the `DynamicRegistryManager`.\r\nFor those Registries, one can't simply create a RegistryAddedCallbackEvent.\r\nThis PR aims to fix that.\r\n\r\nThis PR was made as a foundation for future worldgen APIs like the Biome API.\r\n\r\n## Changes to Existing Code\r\nMinor changes to MixinIdRegistry.\r\nInstead of injecting into `set` it now injects into `method_31051` (in newer yarn also `set`).\r\nThis adds the `checkDuplicateKeys` parameter that is passed as `false` by `MutableRegistry.replace`.\r\nI made this also skip the equality check on rawIds since that was causing issues with `MutableRegistry.replace`\r\n\r\n## DynamicRegistryEntryAddedCallback\r\nThe only exposed part of the changes.\r\nI tried to mimic the `RegistryEntryAddedCallback` as much as possible.\r\n\r\nThe rest of the code should be rather self-explanatory,\r\nbut if anyone knows how to fix the generics in `DynamicRegistryManagerMixin`, let me know :)\r\n\r\nI hope this can be merged rather soon so I can work on a Biome API.\r\nThat's also why I refrained from refactoring any code, even though this should probably happen at some point.",
    "head_branch": "dynregman",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "DynamicRegistryEvents (#1029)\n\n* Added DynamicRegistryEntryAddedCallback\r\n\r\n* bumbed loader version, finalized DynamicRegistryEvents\r\n\r\n* Fixed some generics\r\n\r\n* Changed the event to a more generic one\r\n\r\n* Added some javadoc and the license header\r\n\r\n* increased gradle memory in the hope it fixes the github action fail\r\n\r\n* Added DynamicRegistryEntryAddedCallback\r\n\r\n* bumbed loader version, finalized DynamicRegistryEvents\r\n\r\n* Fixed some generics\r\n\r\n* Changed the event to a more generic one\r\n\r\n* reverted memory change\r\n\r\n* updated mixin for new mappings\r\n\r\n* removed redundant supressions\r\n\r\n* renamed event method"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308660ac82a74541b2371",
    "number": 1028,
    "body": "allow key bindings to be registered and checking whether they are registered and close #1026",
    "head_branch": "keybinding",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308670ac82a74541b2372",
    "number": 1025,
    "body": "All* Mixin classes now use suffix naming, as per Yarn standard. Previously, it was inconsistent, with some using suffixes and many using prefixes.\r\n\r\nSome Mixin class names updated to current Yarn names.\r\n\r\nCombined the Registry Sync module's `MixinIdRegistry` and `MixinSimpleRegistry` into `SimpleRegistryMixin` as they both targeted `SimpleRegistry`.\r\n\r\nMoved client-based Mixins from the Resource Loader module into a `client` package, as per various other modules.\r\n\r\n*note: not actually all, I left the mixin in `fabric-events-lifecycle-v0` alone",
    "head_branch": "mixin-suffixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308670ac82a74541b2373",
    "number": 1023,
    "body": "Sometimes you might not want the block break particles and sounds to appear for a block. However, the only good way to do this (if you want access to the breaking entity) is a ``@Redirect`` in ``World#breakBlock``. This has already caused a conflict between Magna and EnergonRelics.\r\n\r\n```java\r\n\t\tBlockBreakEffectsCallback.EVENT.register((world, breakingEntity, pos) -> {\r\n\t\t\tBlockState state = world.getBlockState(pos);\r\n\t\t\treturn state.getBlock() == Blocks.BEDROCK ? ActionResult.FAIL : ActionResult.PASS;\r\n\t\t});\r\n```",
    "head_branch": "block-break-effects",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308680ac82a74541b2374",
    "number": 1011,
    "body": "This PR is a bit huge and a bit scary when seeing all the files that are gone but it's actually better I guess.\r\n\r\nSo this PR changes a lot of things, it basically removes all the resource pack list injections that happened before in favor of the `ResourcePackProvider` named `ModResourcePackCreator`. It's way more reliable and doesn't change any behaviors, also all mod resource packs are now set \"always active\" which also removes the need of the old mixin which forced mod datapacks to be enabled.\r\n\r\nThis also adds a new API for mods to add a built-in resource/data pack, it's useful to bundle \"extensions\" resource packs in mods which should not always be active and let the user decide.\r\n\r\nI'm not yet happy with how a built-in resource pack is registered as the `ModContainer` is a bit annoying to retrieve, so I'm open to suggestions for that.\r\n\r\nNote: I have not bumped the FAPI version as I do not know if I should and what to set.",
    "head_branch": "1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Resource loader changes and built-in mod resource/data packs API (#1011)\n\n* WIP built-in resource packs API.\r\n\r\n* Add built-in resource pack register API and fix old injection methods.\r\n\r\n* Fix code style.\r\n\r\n* Fix code style.\r\n\r\n* Add documentation.\r\n\r\n* Drop useless else.\r\n\r\n* Fix resource packs and data packs isolation issues, and more.\r\n\r\n* Move ResourcePackManagerAccessor to its own accessor mixin.\r\n\r\n* Make the built-in mod pack test mod work on server too because data pack part.\r\n\r\n* Add new argument to built-in pack method and make mod data packs always active.\r\n\r\n* Add documentation.\r\n\r\n* Complete documentation in GameOptions mixin.\r\n\r\n* Remove register built-in pack overload as Player requested."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308690ac82a74541b2375",
    "number": 1010,
    "body": "This should be more performant than recreating the sync packet every single time a player joins.\r\n\r\nStill need to figure out how to handle the fact a registry may change. Though registries are expected to be static when a server has started, nothing prevents registries from being changed then at the moment.\r\n\r\nThis is bound to the player manager, so restarting the integrated server on a client will recreate the sync packet using the current registry in the session.\r\n\r\nI am about 1000% sure `duplicate()` will be bikeshedded.",
    "head_branch": "localchan",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623086a0ac82a74541b2376",
    "number": 1007,
    "body": "Add null related annotations where null was mentioned in comments, or Nullable annotation was referenced, and boost to Loom 0.5 to facilitate that.",
    "head_branch": "1.16-nullification",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add @Nullable and friends (#1007)\n\n* Boost to Loom 0.5\r\nAdd null related annotations\r\n\r\n* Rearrange nullable to be overline\r\n\r\n* Fix anno sorting for picky\r\n\r\n* Add imports\r\n\r\n* Address feedback\r\n\r\n* Fix import"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623086b0ac82a74541b2377",
    "number": 1003,
    "body": "~~This was renamed in yarn almost a month ago, so who knows how many times it's crashed~~\r\n\r\nGrondag has said that the game will crash if you use `TagRegistry` without this fix.",
    "head_branch": "fix_tags",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix crashes by actually targetting the correct class in mixin (#1003)\n\nThis was renamed in yarn almost a month ago, so who knows how many times it's crashed"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623086b0ac82a74541b2378",
    "number": 999,
    "body": "A lot of the shield functionality in the game is hard-coded. This registry adds an easy way to make sure shields added by mods work correctly in all circumstances.\r\n\r\nShields are created by simply overriding the necessary `use` methods from the `Item` class (like setting the `BLOCK` use action). This PR does not change that, it only fills in the missing gaps to make modded shields behave the same way as the vanilla ones by:\r\n- Damaging the shield when blocking a hit\r\n- Disabling the shield when it's hit by an axe\r\n- Making it so mobs carry shields in their offhand slot\r\n- Making sure Piglins don't drop their shield when bartering\r\n\r\nThis PR does not offer extra/different functionality over vanilla like:\r\n- Different shield block/break sounds\r\n- Different chances for a cooldown when hit with an axe",
    "head_branch": "1.16-shields",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623086c0ac82a74541b2379",
    "number": 996,
    "body": "**A list of the changes:**\r\n\r\nAll API biome methods require use of `RegistryKey<Biome>`. This is in line with vanilla now\r\n\r\n`FabricBiomes#addSpawnBiome` is no longer needed since this is now a field on `Biome` itself. So it has been removed.\r\n\r\nReplace the one instance of reflection in biome api with an accessor mixin.\r\n\r\nUpdate (most?) of the mixins that aren't nuked completely by the update\r\n\r\nObvously this does not work yet and some internal logic needs to be changed a bit or looked at still",
    "head_branch": "biomesupdatep1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623086d0ac82a74541b237a",
    "number": 995,
    "body": "This prevents API from building",
    "head_branch": "1-16-2pre2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "licenser... (#995)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623086e0ac82a74541b237b",
    "number": 985,
    "body": "Port of #984 to 1.16.1",
    "head_branch": "1.16.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623086f0ac82a74541b237c",
    "number": 984,
    "body": "",
    "head_branch": "1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix FabricBlockSettings not copying the toolRequired boolean (#984)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623086f0ac82a74541b237d",
    "number": 982,
    "body": "Also updated the module based of the old wiki page for adding ores.",
    "head_branch": "biome_features",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308700ac82a74541b237e",
    "number": 980,
    "body": "Just a simple block break event, code is from OneEvents.",
    "head_branch": "block-break",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Block break event (#980)\n\n* Block break event\r\n\r\n* License headers + after event\r\n\r\n* Before and after events, testmod\r\n\r\n* Fix checkstyle\r\n\r\n* Version bump, fix client method call\r\n\r\n* Move to one event class\r\n\r\n* Expand event parameters + javadoc\r\n\r\n* Add cancelation event and move javadocs\r\n\r\n* Move JavaDoc + Make success have same function as pass\r\n\r\n* Fix success bug\r\n\r\n* Fix documentation again, change approach\r\n\r\n* Fix checkstyle\r\n\r\n* Update fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java\r\n\r\nCo-authored-by: liach <7806504+liach@users.noreply.github.com>\r\n\r\n* Update fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java\r\n\r\nCo-authored-by: liach <7806504+liach@users.noreply.github.com>\r\n\r\n* Update fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java\r\n\r\nCo-authored-by: liach <7806504+liach@users.noreply.github.com>\r\n\r\n* Update fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java\r\n\r\nCo-authored-by: liach <7806504+liach@users.noreply.github.com>\r\n\r\n* Update fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java\r\n\r\nCo-authored-by: liach <7806504+liach@users.noreply.github.com>\r\n\r\n* Update fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/BlockBreakEvents.java\r\n\r\nCo-authored-by: liach <7806504+liach@users.noreply.github.com>\r\n\r\n* Fix checkstyle\r\n\r\n* Rename stuff\r\n\r\n* fixes\r\n\r\n* Update fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/PlayerBlockBreakEvents.java\r\n\r\nCo-authored-by: i509VCB <i509vcb@gmail.com>\r\n\r\n* Update fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/PlayerBlockBreakEvents.java\r\n\r\nCo-authored-by: i509VCB <i509vcb@gmail.com>\r\n\r\n* Update fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/impl/event/interaction/InteractionEventsRouter.java\r\n\r\nCo-authored-by: i509VCB <i509vcb@gmail.com>\r\n\r\n* Update fabric-events-interaction-v0/src/main/java/net/fabricmc/fabric/api/event/player/PlayerBlockBreakEvents.java\r\n\r\nCo-authored-by: i509VCB <i509vcb@gmail.com>\r\n\r\n* Rename Canceled Event Method Name\r\n\r\nCo-authored-by: liach <7806504+liach@users.noreply.github.com>\r\nCo-authored-by: i509VCB <i509vcb@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308710ac82a74541b237f",
    "number": 978,
    "body": "1.16 added a new mining level above diamond. We should allow modded tools to mine vanilla blocks of this level. Note that there are currently no vanilla blocks that require this mining level so this won't change anything until level 4 vanilla blocks are added.",
    "head_branch": "1.16-netherite",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Netherite mining level to vanilla blocks ToolHandler (#978)\n\n* Add Netherite mining level to vanilla blocks ToolHandler\r\n\r\n* Version bump, fix icon"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308720ac82a74541b2380",
    "number": 977,
    "body": "### Overview\r\n`Spawner`s are used for certain entities' custom spawning logic, such as Pillagers, Wandering Traders, and Phantoms. Minecraft uses an immutable map to hold the Spawners it uses, making adding Spawners difficult. This PR adds a registry, in `fabric-object-builder-api-v1`, which modders can use to add spawners simply. The registry can also be used to get all currently-registered spawners, which may be useful.\r\n\r\n### Example usage\r\n\r\nRegistering a spawner is simple:\r\n```java\r\nFabricSpawnerRegistry.register(TestSpawner::new);\r\n```\r\n\r\nIt can be done at any point before the (dedicated / integrated) server starts, as the entries in the registry are copied into vanilla's immutable map after server start. Registering a spawner after this point does nothing to the current server.\r\n\r\n### Why suppliers?\r\n\r\nThe registry did originally handle Spawners themselves - however, with that approach, if the the server is restarted without restarting the game (such as when a player leaves and rejoins a singleplayer world), the spawners in the registry would keep their state. This would lead to incorrect behaviour.\r\n\r\n### N.B\r\n\r\nI can't work out how to run the testmod I've added, so I have been unable to test this PR. However, the code is based on a similar thing which worked in my mod.",
    "head_branch": "custom-spawners",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308730ac82a74541b2381",
    "number": 975,
    "body": "I've got a couple mods now that need to trigger something when structures generate. This doesn't seem big enough for its own library, but seems like it would fit nicely into Fabric API so other dependencies aren't necessary.\r\n\r\nThis module allows mods to register callbacks for when structure pieces (both jigsaw and \"normal\") are registered, as well as for when structure features are generated.",
    "head_branch": "1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308730ac82a74541b2382",
    "number": 973,
    "body": "This PR simply adds a new interface which supplies the additional `Mode` parameter.\r\nAll old renderers are delegated to an implementation of the new renderer, thereby making this PR still backwards compatible with all existing renderers.",
    "head_branch": "extraparambuiltinitemrenderer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add item renderer with model transformation mode, deprecate old one. (#973)\n\n* Add item renderer with model transformation mode, deprecate old one.\r\n\r\nThis PR simply adds a new interface which supplies the additional `Mode` parameter.\r\nAll old renderers are delegated to an implementation of the new renderer, thereby making this PR still backwards compatable with all existing renderers.\r\n\r\n(cherry picked from commit 7c9162e99f48c6e3989eec9a46afaa935d65ce30)\r\n\r\n* Update fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRendererWithMode.java\r\n\r\nCo-authored-by: shartte <shartte@users.noreply.github.com>\r\n\r\n* Rename new interfact to `DynamicItemRenderer`, make it an inner class of the registry class.\r\n\r\n* Update fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java\r\n\r\nCo-authored-by: liach <7806504+liach@users.noreply.github.com>\r\n\r\n* Update BuiltinItemRendererRegistryImpl.java\r\n\r\n* Update BuiltinItemRendererRegistryImpl.java\r\n\r\n* Imports\r\n\r\n* Use ItemConvertible for new render method\r\n\r\n* Rename new interfact to `DynamicItemRenderer`, make it an inner class of the registry class.\r\n\r\nfabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRendererRegistry.java\r\n\r\n* Move inner class out, fix formatting issue in loot-tables with linux oses\r\n\r\n* why was this multilined\r\n\r\n* license header lol\r\n\r\n* Apply suggestions from code review\r\n\r\nCo-authored-by: liach <7806504+liach@users.noreply.github.com>\r\n\r\n* Make renderer a nested class again\r\n\r\n* putIfAbsent\r\n\r\nCo-authored-by: shartte <shartte@users.noreply.github.com>\r\nCo-authored-by: liach <7806504+liach@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308740ac82a74541b2383",
    "number": 964,
    "body": "Introduces an interface for items that wish to have a say in how they are damaged. There is one method, and it takes the requested damage and returns the amount to pass to vanilla logic.\r\n\r\nThis is a usecase run into by pretty much every mod with \"power tools\" or tools powered by external sources, and I'll be needing it for Botania.\r\n\r\nImplementation wise, it's pretty simple. In order to pass the entity and breakCallback to the ModifyArg hook though, I needed to save and clear it on entry/exit from the method.",
    "head_branch": "customdamagehook",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add hook for custom damage logic (#964)\n\n* Add hook for custom damage logic\r\n\r\n* Address comments\r\n\r\n* Change to use new FabricItemSettings\r\n\r\n* Make CustomDamageHandler a functional interface"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308750ac82a74541b2384",
    "number": 963,
    "body": "**This PR mainly adds two classes:**\r\n**ArmorModelRegistry** -> A class for registering custom armor models for items, to be provided by a contextual provider.\r\n**ArmorTextureRegistry** -> A class for registering custom armor textures for items, to be provided by a contextual provider. Since armor textures identifier in vanilla is hardcoded to be in the `minecraft` namespace, this registry can also be used to use a custom namespace if desired.\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>",
    "head_branch": "armor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fabric-rendering-v1: Custom Armor Model & Texture (#963)\n\n* Moving testmod id to rendering-v1\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\nMoving testmod to rendering-v1\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\nReviews\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\nprefix the extensions with armor\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\nchange name\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\ndrop custom\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\nthing\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\njavadocs\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\nfix imports\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\nforgot to do asItem\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\nadd null checks and convert to ItemConvertible\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\nfix license\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\ndid thing\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\nit now compiles\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\nchange to a registry\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\nadd @Unique\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\nmigrate to fabric-item-api-v1\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\ndid some renaming and improvements\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\ndon't need that\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\narmor\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\n* add license to CustomArmorTests\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\n* Add @Nullable annotations and fix compile\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\n* javadoc\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\n* Fix reviews\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\n* Update fabric-rendering-v1/src/main/java/net/fabricmc/fabric/mixin/client/rendering/MixinArmorFeatureRenderer.java\r\n\r\nCo-authored-by: Erlend Åmdal <erlend@aamdal.com>\r\n\r\n* Add registerSimpleTexture\r\nPass through secondLayer and suffix\r\nUse Identifier's over strings\r\nFix the test mod\r\n\r\n* license fix\r\n\r\nCo-authored-by: Erlend Åmdal <erlend@aamdal.com>\r\nCo-authored-by: modmuss50 <modmuss50@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662308760ac82a74541b2385",
    "number": 957,
    "body": "First up is an event fired after a living entity is damaged. All vanilla living entities except armor stands work with this event.\r\n\r\nA few events include:\r\n - Entity changing world\r\n - Player changing world (seperate since these semantics are different)\r\n - Player respawn\r\n - Player copied (data half of respawn, is long before packets are sent)\r\n - When an entity is killed by another entity\r\n\r\nThis also fixes a bug related to vanilla's built-in killed by method not be invoked when a server player entity kills another entity.",
    "head_branch": "entity-post-damage-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Entity Events v1 (#957)\n\n* Entity Events v1.\r\n\r\nFirst up is an event fired after a living entity is damaged. All vanilla living entities except armor stands work with this event.\r\n\r\n* Events related to killing of entities, changing world, player respawn/copyFrom\r\n\r\nDeath related:\r\nan entity killing something and an entity being killed by an adversary\r\n\r\nPlayer related:\r\nAfter respawn, copy to\r\n\r\n* Adversary stuff isn't needed\r\n\r\n* checkstyle again\r\n\r\n* Call AFTER_KILLED_OTHER on a ServerPlayerEntity upon death.\r\n\r\n* Add event which is fired when a player first joined a server and add functional interface annotations\r\n\r\n* Update build.gradle\r\n\r\n* mispelled\r\n\r\n* Some renames, test events, drop damage event\r\n\r\nDamage events need further consideration in future\r\n\r\n* Comments and null check\r\n\r\n* Update for mappings\r\n\r\n* Warning comment\r\n\r\n* Remove first join event and teleport helper\r\n\r\nFirst join does not work atm and teleport is in dimensions pr\r\n\r\n* Module dependencies\r\n\r\n* Javadoc tweaks\r\n\r\n* The serverening"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662308770ac82a74541b2386",
    "number": 956,
    "body": "Closes #952.\r\n\r\nThis PR adds two new types to the item API: `FabricItemSettings` and `EquipmentSlotProvider`.\r\n\r\n- `FabricItemSettings`\r\n  - Similar to the `FabricBlockSettings` class in the object builder API, `FabricItemSettings` extends `Item.Settings` with additional hooks. The only hook in this PR is `equipmentSlot`, which sets the item's `EquipmentSlotProvider`.\r\n- `EquipmentSlotProvider`\r\n  - A hook for `MobEntity.getPreferredEquipmentSlot` which allows modded items to set their preferred equipment slots.\r\n    This is useful with non-armor items that can go in armor slots, such as a block that can be a helmet.",
    "head_branch": "patch-16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add FabricItemSettings and an API for custom item equipment slots (#956)\n\n* Add FabricItemSettings and an API for custom item equipment slots\r\n\r\nCloses #952.\r\n\r\n* Bump module version\r\n\r\n* Rename duck method to have fabric_ prefix and add Unique to mixin field\r\n\r\n* Switch to FabricItemInternals + ExtraData like in FabricBlockSettings"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308770ac82a74541b2387",
    "number": 955,
    "body": "Closes #953.",
    "head_branch": "patch-15",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add ItemConvertible overload for BuiltinItemRendererRegistry (#955)\n\nCloses #953."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308780ac82a74541b2388",
    "number": 917,
    "body": "Replaces #687.\r\n\r\nThis PR adds an API to allow for custom structures to be registered, and adds APIs for setting basic behaviour of the structure not already easy to set with the vanilla API (like surface adjusting).\r\nThis API does *not* add structures to biomes, as it's easy to do that with the vanilla API.\r\n\r\nThis is the first API module I've added, so apologies for any mistakes with that.\r\n\r\nStill to do:\r\n- [x] Documentation\r\n- [x] Test mod",
    "head_branch": "feature/structures",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Structures API (#917)\n\n* Initial structures API implementation\r\n\r\n* Improve generics + add a superflatFeature helper method\r\n\r\n* Initialize StructuresConfig class early to prevent its assertion failing\r\n\r\n* Add a testmod\r\n\r\n* Documentation and null assertions\r\n\r\n* Apply review suggestions\r\n\r\n* Update fabric-structure-api-v1/src/main/java/net/fabricmc/fabric/api/structure/v1/FabricStructureBuilder.java\r\n\r\nCo-authored-by: shartte <shartte@users.noreply.github.com>\r\n\r\n* Apply review suggestions\r\n\r\n* Update to 1.16.2\r\n\r\nCo-authored-by: shartte <shartte@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308790ac82a74541b2389",
    "number": 916,
    "body": "A more specialized approach to customizing item overlays, with the generic approach I implemented in #881 still intact.\r\n\r\n### Features\r\n- Configuring every component of the item overlay\r\n  - Count label (`ItemLabelInfo`) - visibility, contents, color\r\n  - Damage bar (`ItemDamageBarInfo`) - visibility, fill factor, color\r\n  - Cooldown overlay (`ItemCooldownInfo`) - visibility, fill factor, color\r\n- Rendering before item overlay *or* replacing it entirely (`ItemOverlayRenderer.Pre`)\r\n  - Identical to #881's `ItemOverlayRenderer`\r\n- Appending to the item overlay (`ItemOverlayRenderer.Post`)\r\n\r\n### To-do\r\n**All done!** Ready for merging!!!\r\n- [x] Test mod\r\n  - [x] Count label\r\n  - [x] Damage bar\r\n  - [x] Cooldown overlay\r\n  - [x] Item overlay replacement\r\n  - [x] Item overlay appending\r\n- [x] Javadocs for the 3 component property interfaces",
    "head_branch": "1.16-itemoverlay-v2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623087a0ac82a74541b238a",
    "number": 901,
    "body": "This fixes #898. Further testing has shown, that for fully undirected quads (cullFace=null), the\r\neditor-quad will be forced to have a lighting face set, which will cause the light sampling position\r\nto be offset in that direction. The old code had explicitly reset geometry for faces with cullFace=null,\r\nand this fixed version of the PR restores the behavior, which fixes grass.\r\n\r\nIn addition, I discovered that this PR (and the previous one) fix a rendering issue with cauldrons. \r\nTo make it more pronounced, I replaced the cauldron textures with flat white surfaces to clearly\r\nsee the diffuse lighting that is applied:\r\n\r\n**Vanilla 1.16.1:**\r\n![2020-07-20 21_31_56-Minecraft 1 16 1 - Singleplayer](https://user-images.githubusercontent.com/1261399/87979923-1b1cbd80-cad3-11ea-885a-4a27579e09c6.png)\r\n\r\n**Current fabric-api Indigo:**\r\n![2020-07-20 21_34_15-Minecraft_ 1 16 1 - Singleplayer](https://user-images.githubusercontent.com/1261399/87979955-27a11600-cad3-11ea-8f9e-b33c182c7983.png)\r\n\r\n*Explanation:* The  inside faces of the cauldron have cullFace=up and lightingFace=west/east/north/south. Due to the current behavior, the lightingFace is forced to the cullFace (=up), which gives all of the inside faces the diffuse lighting for a face that points up.\r\n\r\n**With this PR:**\r\n![2020-07-20 21_43_39-Minecraft_ 1 16 1 - Singleplayer](https://user-images.githubusercontent.com/1261399/87980070-4c958900-cad3-11ea-8ec1-9deda6ae6b63.png)\r\n\r\n**Original PR Description:**\r\nMake Indigo more closely aligned with vanilla's behavior when\r\nrendering flat-shaded quads. Use the cull-face (if present)\r\nto determine where the light-value is being sampled from,\r\nand use the light-face to apply diffuse lighting.\r\nAlso do not force the light-face to be set to the cull-face,\r\nsince some blocks use faces where these are both set and different\r\n(see the insides of a Cauldron for example).",
    "head_branch": "indigo-flat-lighting-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make Indigo more closely aligned with vanilla's behavior when (#901)\n\nrendering flat-shaded quads. Use the cull-face (if present)\r\nto determine where the light-value is being sampled from,\r\nand use the light-face to apply diffuse lighting.\r\nAlso do not force the light-face to be set to the cull-face,\r\nsince some blocks use faces where these are both set and different\r\n(see the insides of a Cauldron for example)."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623087b0ac82a74541b238b",
    "number": 898,
    "body": "Make Indigo more closely aligned with vanilla's behavior when\r\nrendering flat-shaded quads. Use the cull-face (if present)\r\nto determine where the light-value is being sampled from,\r\nand use the light-face to apply diffuse lighting.",
    "head_branch": "indigo-flat-lighting-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Indigo Flat-Shading Lighting Fix (#898)\n\n* Make Indigo more closely aligned with vanilla's behavior when\r\nrendering flat-shaded quads. Use the cull-face (if present)\r\nto determine where the light-value is being sampled from,\r\nand use the light-face to apply diffuse lighting.\r\n\r\n* Bump Indigo version to 0.3.4"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623087b0ac82a74541b238c",
    "number": 896,
    "body": "This fixes the crash by:\r\n```\r\njava.lang.StackOverflowError: Initializing game\r\n    at net.fabricmc.fabric.api.client.keybinding.v1.KeyBindingHelper.getBoundKeyOf(KeyBindingHelper.java:56)\r\n    at net.fabricmc.fabric.api.client.keybinding.FabricKeyBinding.getBoundKey(FabricKeyBinding.java:46)\r\n    at net.fabricmc.fabric.api.client.keybinding.v1.KeyBindingHelper.getBoundKeyOf(KeyBindingHelper.java:56)\r\n    at net.fabricmc.fabric.api.client.keybinding.FabricKeyBinding.getBoundKey(FabricKeyBinding.java:46)\r\n    at net.fabricmc.fabric.api.client.keybinding.v1.KeyBindingHelper.getBoundKeyOf(KeyBindingHelper.java:56)\r\n    at net.fabricmc.fabric.api.client.keybinding.FabricKeyBinding.getBoundKey(FabricKeyBinding.java:46)\r\n```\r\n\r\nSomehow the mixin will call the method in the old v0 keybinding getBoundKey() instead of getting from the accessor.\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>",
    "head_branch": "patch-4212",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix getBoundKey() recursion (#896)\n\n* Fix getBoundKey() recursion\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\n* Change to underscore\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623087c0ac82a74541b238d",
    "number": 895,
    "body": "",
    "head_branch": "feature/lifecycle-events3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add world unload event (And functional interface annotations to events) (#895)\n\n* Add world unload event\r\n\r\n* Add functional interface annotations to all events"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623087d0ac82a74541b238e",
    "number": 892,
    "body": "…rial to block.\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>",
    "head_branch": "patch-124",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix the javadocs of object-builders as the method was moved from material to block. (#892)\n\nSigned-off-by: shedaniel <daniel@shedaniel.me>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623087e0ac82a74541b238f",
    "number": 884,
    "body": "This pull request compresses every image in the repository, bringing its overall size down from 30 MB to 29 MB. The Fabric icon, which is duplicated for each individual module, changed from 2 KB to 227 B (an 86% decrease).",
    "head_branch": "compress-images",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623087f0ac82a74541b2390",
    "number": 881,
    "body": "Apparently `Item2ObjectMap` is from `content-registries`, so I just kinda... rolled my own version of it.\r\nAnyway, this implementation has been tested and works fine on 20w28a.",
    "head_branch": "1.16-itemoverlay",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623087f0ac82a74541b2391",
    "number": 875,
    "body": "It validates the checksums of Gradle Wrapper JAR files present in the source tree and fails if unknown Gradle Wrapper JAR files are found. https://github.com/gradle/wrapper-validation-action",
    "head_branch": "tsao-chi-patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "github actions: add wrapper validation (#875)\n\nIt validates the checksums of Gradle Wrapper JAR files present in the source tree and fails if unknown Gradle Wrapper JAR files are found. https://github.com/gradle/wrapper-validation-action"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308800ac82a74541b2392",
    "number": 874,
    "body": "This update fixes the Biome Module on 20w28a. The biggest changes were the Biome registry moving to `class_5458.field_25933` (unmapped), and `Biome.MixedNoisePoint` logic not being associated with `Biome.Settings` (it's actually just hardcoded now). \r\n\r\nTo keep track of  `Biome.MixedNoisePoint` instances, I keep a map in `InternalBiomeData`. `NetherBiomes#addNetherBiome` now takes in a `Biome` and `Biome.MixedNoisePoint` instead of just a `Biome`.\r\n\r\nDue to the `addNetherBiome` changes, I bumped the module version to 0.3.0. Overworld Biomes work, but I can't get Nether Biomes to work: I assume I am either using them wrong (couldn't get old Nether Biomes to work either), or missed something in my mixin. Scoder said he would help figure it out (because he wrote the Nether biome logic).",
    "head_branch": "biomes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "20w28a Biome Module fixes (#874)\n\n* 20w28a biome module fixes\r\n\r\n* update version to 0.3.0\r\n\r\n* major version bump to 1.0.0\r\n\r\n* Update mappings\r\n\r\n* Fix nether biome test's\r\n\r\n* Fix nether biome's on the server\r\nCloses https://github.com/FabricMC/fabric/issues/861\r\n\r\n* Accessor name changes\r\n\r\nCo-authored-by: modmuss50 <modmuss50@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308810ac82a74541b2393",
    "number": 873,
    "body": "",
    "head_branch": "feature-renderers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add callback to allow registration of feature renderers. (#873)\n\n* Add callback to allow registration of feature renderers.\r\n\r\n* Laymans terms for those who don't map yarn for a living.\r\n\r\n* Be a little less generic\r\n\r\n* Dispatch events in a better spot, play with generics again, move to renderer-registries.\r\n\r\nAlso move this to render registries\r\n\r\n* Handle players as well\r\n\r\n* Tweak generics\r\n\r\n* Hide acceptor impl\r\n\r\n* Add actual testmod, fix where player events are fired, Simplify to returning a list.\r\n\r\n* the old style worked fine\r\n\r\n* registerRenderers\r\n\r\n* Rename the event interface\r\n\r\n* Javadoc fixes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308820ac82a74541b2394",
    "number": 870,
    "body": "This fixes #869 (for me at least), but probably needs a sanity check from someone more familiar with Indigo's internals.\r\nOn top of that, this change also makes it use the random/seed supplied via the BlockModelRenderer#render method.",
    "head_branch": "fix-869",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Reuse TerrainFallbackConsumer to render vanilla models when (#870)\n\ncalled from BlockModelRenderer. Fixes #869."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308820ac82a74541b2395",
    "number": 864,
    "body": "Very simple\r\nInvoker by Linguardium on discord\r\nCloses #230 ",
    "head_branch": "spawn-restriction",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308830ac82a74541b2396",
    "number": 860,
    "body": "This PR is a solution to [issue 856](https://github.com/FabricMC/fabric/issues/856). I would recommend reading the issue for context.\r\n\r\n**Design**\r\ni509VCB and I spoke a little bit about what route to take on the API. I originally favored keeping it as an event, mostly so multiple people could have a say in whether an item updated, but that issue seems like a small edge case, so I rolled with an interface instead. Keeping it as an interface also makes this API simpler and smaller. \r\n\r\nWhen creating an Item class, you can implement `UpdateAnimationHandler` to take control of whether or not the animation update plays every tick (not sure if that's game or render tick, think it's the latter). \r\n\r\n```java\r\npublic class PatchedUpdatingItem extends UpdatingItem implements UpdateAnimationHandler {\r\n\r\n\tpublic PatchedUpdatingItem(Settings settings) {\r\n\t\tsuper(settings);\r\n\t}\r\n\r\n       @Override\r\n\tpublic void inventoryTick(ItemStack stack, World world, Entity entity, int slot, boolean selected) {\r\n\t\tfloat currentTicks = stack.getOrCreateTag().getFloat(\"ticks\");\r\n\t\tstack.getOrCreateTag().putFloat(\"ticks\", currentTicks + 1);\r\n\t\tsuper.inventoryTick(stack, world, entity, slot, selected);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic boolean shouldRunAnimationUpdate(ItemStack original, ItemStack updated) {\r\n\t\treturn false;\r\n\t}\r\n}\r\n```\r\n\r\nThis code, without the interface, would normally cause the item to spaz out when held in your hand. This is because `ItemStack.areEqual(this.mainHand, itemStack)` returns false, which causes the update animation to play. I counteract this in Inmis by overriding `ItemStack#equals` for my backpack items, which is similar to how this solution works. In this API, I redirect both `areEqual` methods in `HeldItemRenderer#updateHeldItems` (for main-hand & off-hand) and then ask the item if it should update. Note that:\r\n  - The interface method is only called if *both stacks* are the same. \r\n  - If both items are not the same or they don't implement the interface, the default behavior is used.\r\n  \r\n**Improvements**\r\nThe one thing I am still considering is whether or not the method needs more *context*. It might be appropriate to give the method information on whether the item is in the main-hand or off-hand. \r\n\r\nI'm also not *entirely* sold on the method name of `shouldRunAnimationUpdate` because it feels a little bit bulky. I intentionally reversed the logic (boolean is flipped in `HeldItemRendererMixin`) so that the method makes more sense for implementers: *normally* the method would be returning true for equality, which is the opposite of returning true for whether the animation update should play. Having it flipped so the conditions are equal, eg. `shouldSkipAnimationUpdate`, seems weird, if that makes sense.\r\n\r\n**Tests**\r\nI updated the testmods module with a `UpdateAnimationTests` mod. It registers two items, `fabrictest:patched` and `fabrictest:original`. Both of them increment a tag every tick, and the patched item has the update interface returning false. As you would expect, the original item spazzes out while held, but the patched item does not update.",
    "head_branch": "item-reload-animation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308840ac82a74541b2397",
    "number": 857,
    "body": "Fixes #845. By removing some unnecessary generic wildcards, calling `ScreenRegistry.register` doesn't require specifying the generics manually anymore as it did before in most cases.\r\n\r\nAlso updated the test mod to use vanilla's new automatic title drawing and removed the generic parameter of `PositionedScreen` to make method references work there as well.",
    "head_branch": "patch-14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Tweak the screen registry's generics to fix type inference (#857)\n\n* Tweak the screen registry's generics to fix type inference\r\n\r\n* Fix test mod"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308850ac82a74541b2398",
    "number": 855,
    "body": "Currently mining levels are ignored in a few situations, namely when using a Dynamic tool and when using vanilla tools on modded blocks. Modded tools also behave differently on blocks they can't mine vs vanilla tools.\r\n\r\nThis PR fixes those bugs, the associated issues are #853 and #841",
    "head_branch": "tool-attributes-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix tool attributes mining levels (#855)\n\n* Decoupled effective checks and mining speed\r\n\r\n* Fixed typo\r\n\r\n* Bump major for method sig change\r\n\r\n* Fix semvar\r\n\r\n* Re-add original API method\r\n\r\n* Extend test mod\r\n\r\n* Fix bug discovered by testing\r\n\r\n* Change current to vanillaResult, update doc for postProcessMiningSpeed\r\n\r\n* Remove </p> tag\r\n\r\n* Add vanilla tests and rename vars"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308860ac82a74541b2399",
    "number": 854,
    "body": "",
    "head_branch": "hide_res_packs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Hide mods from the resource/data pack screen (#854)\n\n* Hide mods from the resource/data pack screen\r\n\r\n* License"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308860ac82a74541b239a",
    "number": 850,
    "body": "Currently when using dynamic tools on vanilla blocks the `isEffectiveOn` check returns true if a vanilla tool of the given mining level would be effective or if a vanilla tool of the given mining level would have a mining speed multiplier other than 1.\r\n\r\nVanilla pickaxes now return a mining speed higher than 1 on any metal or stone block. As a result dynamic tools are able to mine and drop any vanilla block.\r\n\r\nThis fixes that bug by removing the mining speed check, it's possible this check is serving a purpose I'm unaware of in which case I'll rework this PR.",
    "head_branch": "tool-mining-level-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308870ac82a74541b239b",
    "number": 848,
    "body": "Adds ~~all the~~ some events from #445, thereby superseding it:\r\n\r\n - `ServerLifecycleEvents.START_DATA_PACK_RELOAD`\r\n - `ServerLifecycleEvents.END_DATA_PACK_RELOAD`\r\n ~~`ServerLifecycleEvents.SAVE`~~\r\n\r\nAlso adds:\r\n\r\n- `ServerWorldEvents.WORLD_LOAD` (Called when a world is loaded onto a server)\r\n- `ServerLifecycleEvents.SERVER_STARTING` (Cannot be backported to 1.15 or 1.14 because of dedicated server entrypoint occuring after this).\r\n\r\nAlso adds system properties to enable load and unload debug messaging for entity and block entity events (So we can debug the other stuff in peace lol).",
    "head_branch": "morelifecycle",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Lifecycle Events: Part 2, Electric Boogaloo (#848)\n\n* Add a few new server lifecycle events\r\n\r\nServer starting, Load World, Before server resource reload, After server resource reload\r\n\r\n* Save event\r\n\r\n* Split world load into ServerWorldEvents, add failure event for data pack reload\r\n\r\n* cause\r\n\r\n* Merge fail and regular end.\r\n\r\n* Present tense lol\r\n\r\n* So we can just plainly specify the system properties\r\n\r\n* use handleAsync instead"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308880ac82a74541b239c",
    "number": 844,
    "body": "Prior to making new features, this brief PR aims to improve clarity, consistency, and introduce some optimizations.\r\n\r\nEdit: sorry for the double commits; the PR itself is correct. merging traffic accident.",
    "head_branch": "player-lifecycle",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308890ac82a74541b239d",
    "number": 840,
    "body": "1.16 introduced a new data-driven way to add new dimensions. But it requires the new dimension's ChunkGenerator to be deserialized from a fixed json file. And constructing a ChunkGenerator usually needs the seed information and the seed cannot be hardcoded. This pr adds an injection which calls `withSeed` method on server startup to provide the seed information. And `withSeed` method is client only, so I made it exist in dedicated server.\r\nTo use this, the modder needs to \r\n1.make the custom ChunkGenerator that extends FabricChunkGenerator\r\n2.implement fabricWithSeed\r\n3.exclude the seed from the ChunkGenerator's codec. (for example the codec can construct the ChunkGenerator with seed 0)",
    "head_branch": "1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623088a0ac82a74541b239e",
    "number": 836,
    "body": "This basically adds consistency by defining directly the max tracking distance for clients the same way as vanilla mobs (removed maths) and adds a new method for non-repetitive `trackTickInterval` values.",
    "head_branch": "object-builder",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Tweaks to EntityTypeBuilder [1.16] (#836)\n\n* Better consistency with vanilla mobs\r\n\r\n* Added a new method for just tracking distance\r\n\r\n* Renamed param names\r\n\r\n* Update FabricEntityTypeBuilder.java\r\n\r\n* Updated v0 for backwards compatibility\r\n\r\n* Updated descriptions and parameter names of FabricEntityTypeBuilder\r\n\r\n* Added compat with new builders\r\n\r\n* Style fix\r\n\r\n* Fix style again\r\n\r\n* Added backwards compat"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623088b0ac82a74541b239f",
    "number": 832,
    "body": "Also reintroduces the loot API test mod.\r\nMay be considered a temporary fix before #629 is merged.",
    "head_branch": "fix/loot-tables",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix loot table API for 1.16 (#832)\n\n* Fix loot table API for 1.16\r\n\r\n* Bump module version to 1.0.0\r\n\r\n* Apply review suggestions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623088b0ac82a74541b23a0",
    "number": 830,
    "body": "This PR adds an API which allows for adding biomes to one of the five \"regions\" of the End corresponding to the vanilla biomes. It uses a weight system similar to the Overworld biome API. It also does some internal changes, mainly to `WeightedBiomePicker`.\r\n\r\n~~Would it be desirable to add custom regions to the End? What vanilla does is just pick base the biome off of a noise value from 40 to -40 (And a circle for the main island), but it's hard-coded so adding in custom regions/ranges is going to be more intrusive. EDIT: Should mention that doing this may cause noticeable deviations from vanilla end generation.~~",
    "head_branch": "end-biomes-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "End Biomes Api [1.16] (#830)\n\n* Create EndBiomes.java\r\n\r\n* Revert \"Create EndBiomes.java\"\r\n\r\nThis reverts commit 4d1736fad99e1be0921ef92d9576e8f503e64be4.\r\n\r\n* Revert \"Revert \"Create EndBiomes.java\"\"\r\n\r\nThis reverts commit 673c508d825a0eb095f94ff9b5cb88d1b77e395c.\r\n\r\n* Rename ContinentalBiomeEntry to WeightedBiomeEntry\r\n\r\n* Complete API for adding biomes to the end\r\n\r\n* Mixin to end biome source\r\n\r\n* Revert \"Rename ContinentalBiomeEntry to WeightedBiomeEntry\"\r\n\r\nThis reverts commit 849197e15d18c26af2a6f2aa1766b7d73d9a7144.\r\n\r\n* Revert \"Revert \"Rename ContinentalBiomeEntry to WeightedBiomeEntry\"\"\r\n\r\nThis reverts commit c2aa4ab097eb3daed71e82d4e77142671ed04316.\r\n\r\n* Create SimpleLayerRandomnessSource for use with end biome source mixin\r\n\r\n* Renamed MAIN region to MAIN_ISLANDS\r\n\r\n* Create test mod\r\n\r\n* Added pickFromNoise method to WeightedBiomePicker\r\n\r\n* Javadoc and licensing info\r\n\r\n* Comply with checkstyle\r\n\r\n* Internalize EndRegion\r\n\r\n* Added stretching when getting the biome for the end\r\n\r\n* Rename EndBiomes to TheEndBiomes to be consistent with yarn mappings\r\n\r\n* Fix typo\r\n\r\nCourtesy of i509VBC\r\n\r\nCo-authored-by: i509VCB <i509vcb@gmail.com>\r\n\r\n* Add @Unique to private fields in MixinTheEndBiomeSource\r\n\r\n* Made end test biome consistent in style with previous test\r\n\r\nCourtesy of i509VBC\r\n\r\nCo-authored-by: i509VCB <i509vcb@gmail.com>\r\n\r\n* Fix imports\r\n\r\n* Didn't know test mods needed to follow the checkstyle\r\n\r\n* SimpleLayerRandomnessSource's random is now use to instantiate its noise sampler\r\n\r\n* A very important note\r\n\r\n* Update javadoc for adding biomes to the Main Island region\r\n\r\n* Remove method that is leftover from when EndRegion was part of the API\r\n\r\n* Ported 1.16.1 biomes-api-v1 to 1.16.2.\r\nPublic API changes:\r\n- Removed flagging biomes as suitable for player spawns since that is now handled in the Biome Builder.\r\n- Changed API over to RegistryKey's, not because it's necessary, but because it is more ergonomic since Vanilla Biomes in BuiltInBiomes are now all exposed as keys, rather than instances.\r\n\r\n* Increase memory size to fix build failures.\r\n\r\n* Add the ability to add modded dimensions to the regions of the end.\r\n\r\n* Hopefully fixed everything that went wrong during the rebase\r\n\r\n* Update fabric-biome-api-v1.mixins.json\r\n\r\n* Finally got custom end biomes to generate\r\n\r\n* Thanks for nothing, GitHub Desktop\r\n\r\n* Bad GitHub Desktop\r\n\r\n* Bad newline no cookie\r\n\r\n* Got everything to follow the checkstyle\r\n\r\n* Bring branch up-to-date with main repo (#11)\r\n\r\n* Revert \"Bring branch up-to-date with main repo (#11)\"\r\n\r\nThis reverts commit dc471062410ec2de0899a7520584b16f5ddb88f1.\r\n\r\n* Remove some stuff that's not supposed to be there\r\n\r\n* Fix git silliness\r\n\r\n* Update FabricBiomeTest.java\r\n\r\n* TheEndBiomes is now Deprecated to match OverworldBiomes and NetherBiomes\r\n\r\n* Update some checkNotNull messages\r\n\r\n* Change the noise scale when replacing end biomes\r\n\r\n* Bad space no cookie\r\n\r\n* Remove unnecessary code\r\n\r\n* Remove unused imports\r\n\r\n* Set up InternalBiomeData to treat End Midlands and End Barrens as border biomes\r\n\r\n* Changed the API to reflect midlands and barrens biomes being considered border biomes\r\n\r\n* Start work on getting the new system fully working\r\n\r\n* Finally got everything working and cleaned up the Javadoc\r\n\r\n* Fixed checkstyle violations\r\n\r\n* Fix checkstyle violations again\r\n\r\n* Drop fabric_ prefix\r\n\r\n* Calling SimpleLayerRandomnessSource#nextInt() now throws an exception\r\n\r\nCo-authored-by: i509VCB <i509vcb@gmail.com>\r\nCo-authored-by: Sebastian Hartte <sebastian@hartte.de>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623088c0ac82a74541b23a1",
    "number": 829,
    "body": "Quick tweak to the packet type callbacks -- I read the callback class names as referring to the direction of the packet identifiers provided, not the direction of the `minecraft:register` packet which they actually refer to.\r\n\r\nIt seems like the naming is clear more clear in the upcoming networking-api v1 PR, but hopefully these doc changes will clarify for anyone trying to use networking callbacks in the meantime.",
    "head_branch": "fix/1.16/networking-jd",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "networking: Clarify packet type callback JD (#829)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623088d0ac82a74541b23a2",
    "number": 828,
    "body": "Per requests in #825.\r\n\r\nThis allows use of the entity type builder to define default attributes.",
    "head_branch": "entitybuilderexpansions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add ability to define default attributes and spawn restirctions within the entity type builder. (#828)\n\n* Add ability to define default attributes within the entity type builder.\r\n\r\n* Update fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/api/object/builder/v1/entity/FabricDefaultAttributeRegistry.java\r\n\r\nCo-authored-by: Pyrofab <redstoneinfire@gmail.com>\r\n\r\n* Add ability to specify spawn restriction. Add a Living and Mob builder to handle attributes and spawn restrictions seperately from default builder.\r\n\r\n* Let's not cast like a maniac\r\n\r\n* Add misc overloads for living builder\r\n\r\n* Add a few null checks\r\n\r\n* Allow factory to be defined in builder\r\n\r\n* Make spawn group a builder parameter\r\n\r\nCo-authored-by: Pyrofab <redstoneinfire@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623088e0ac82a74541b23a3",
    "number": 827,
    "body": "I tried to use https://github.com/marketplace/actions/run-java-checkstyle to comment on PRs with the checkstyle results but it seemed to fail to build even when it passed with no useful log output.\r\n\r\nShould this also build against java 8? I dont see a big need for it, but it might be useful.\r\n\r\nOnce this is merged I will move this to the other projects that have travis (just loader I think). As for replacing jenkins with actions it might be possible.",
    "head_branch": "actions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Replace Travis with github actions. (#827)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623088f0ac82a74541b23a4",
    "number": 823,
    "body": "Yes the cause of the issue was the fact the method reference did invoke on the server, thereby causing it to fail to start.",
    "head_branch": "fix/handlertests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix screen handler test mod crashing on dedicated server. (#823)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308900ac82a74541b23a5",
    "number": 822,
    "body": "Also adds a small test to verify the commands can be invoked by functions. This acts as a sort of sanity check for validating the command mixins are loaded in the right place.",
    "head_branch": "fix/commands",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix issue with commands being registered on dedicated servers after a resource reload. (#822)\n\n* Add a small datapack to test if custom commands work with command functions\r\n\r\n* Fix issue with commands being registered on dedicated servers after a /reload\r\n\r\nAlso this adds testmods for command functions to verify they are registered properly.\r\n\r\n* Clarify a comment\r\n\r\n* Use the variable we allocate lol"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308900ac82a74541b23a6",
    "number": 687,
    "body": "Full disclaimer at the top of this. I have no expectation that any of this code will actually make it into fabric with the way that it is. This is my first major contribution to the project and there's probably a lot of things wrong with it, but the start of this PR is simply meant to start the discussion on getting a public structures module for 1.16 and the new structure changes.\r\n\r\nThis PR addresses information from #661 and #123, here's a quick rundown to get you up to speed.\r\n\r\n1.16 completely severed structures from features and added a new and slightly convoluted way of registering and making sure structures generate. This PR is meant to address some of those problems, specifically.\r\n\r\n1. The ability to add structures to the generation step hash map through the use of an access widener (it's a private hashmap that is only ever used in a private method so unless we choose to mix into literally every place that hashmap is used this seems like the best bet)\r\n2. Strongly recommending, but not forcing, developers to add their structure to the serialization hashmap to prevent the spam of errors in the log.\r\n    1. Consequently by adding structures to this hashmap they are added to the /locate command\r\n3. A FabricStructure class that standardizes which fields are responsible for registering what information for a structure and gives easier control to developers to control which name their structure is generated under and which generation step it is a part of\r\n    1. This is done by strongly overriding a couple methods from StructureFeature to make the StructureFeature class itself the final call on generation steps, and to reference the StructureFeature itself in registering the generation step\r\n    2. Softly overriding the default getName implementation to make it easier to include full identifiers to organize structures by mod and prevent conflicts than to not, while still providing all existing functionality and configurability for developers.\r\n\r\nOverall I think the way things are currently implemented are the bare minimum to make things work, but they could easily be stricter if there's a need for a larger structures module.\r\n\r\nA couple last things there are still a few unknowns in the structure equation. This PR doesn't handle anything associated to net.minecraft.world.gen.chunk.StructureConfig (the class formerly known as class_5311) but in my experience modifications to that weren't necessary to get structures to generate. That being said it's something that should be looked into so developers can control the spread between structures (if we're fitting with this style I'd recommend, once we figure out what's going on, having a method in FabricStructure that controls spread).\r\n\r\nAdditionally there are the very real concerns of #654 that should a mod be uninstalled that adds a structure, or the name of the structure changes it would potentially ruin the world. It would be awesome to provide a set of tools for developers, or a system behind the scenes that could control these kind of edge case situations where structures in mods no longer exist.\r\n\r\nSo just to recap this PR contains the bare minimum needed for mod authors to generate structures in the 1.16 prereleases but is meant as a way of starting the discussion about a larger structures module. Ideally said module would handle\r\n- Adding structures to generation steps (this PR)\r\n- Adding structures to serialization (this PR)\r\n- Encouraging structure registration under identifiers (this PR)\r\n- Adding structures to /locate (this PR)\r\n- Organizing the chaos a little bit and making the StructureFeature themselves in control of things like their name and their generation step (this PR)\r\n- Providing a tool to control the spread of structures (needs more looking into)\r\n- Providing a tool to handle missing or renamed structures between versions (needs more looking into)\r\n\r\nHopefully this PR makes sense, once again this is my first major contribution so if it's totally wrong I'm sorry about that. Looking forward to discussing what else needs to be in a fabric structures module.\r\n\r\nCompletely separate to this, I'm hoping to go and make a PR to change some of the yarn mappings away from verbage that implies the union of Structures and Features (so like changing `StructureFeature<?>` to just `Structure<?>`) given that they are now officially severed. So if some of the language in this seems weird that's because I've been playing around with that kind of naming.",
    "head_branch": "1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308910ac82a74541b23a7",
    "number": 681,
    "body": "This is a sister PR to #619 \r\n\r\nAll review comments should be resolved in #619 and will be cherry-picked to this PR when resolved.",
    "head_branch": "feature/v1/lifecycle116",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Lifecycle Events V1 [1.16] (#681)\n\n* Lifecycle Events V1 (1.16)\r\n\r\nNow includes Chunk and (Block)Entity (un)load events\r\n\r\n(cherry picked from commit 82b372873fd930dd07768331f7b70f6f9d3d441d)\r\n\r\n* Move around code to work on 1.16\r\n\r\n* Checkstyle\r\n\r\n* Remove primary server getters\r\n\r\n(cherry picked from commit c84f36209d0072ab9c4083c0bf111917720d54e1)\r\n\r\n* IJ DO YOU SPEAK RESOLVING IMPORTS\r\n\r\n* Prune the tests that shouldn't exist\r\n\r\n(cherry picked from commit a5112223ca4505fb7777b1ef53d3478d0155079d)\r\n\r\n* Listen here checkstyle you bugger\r\n\r\n* Split up events to individual interfaces. Make Chunk events use WorldChunk instead.\r\n\r\n(cherry picked from commit 3431c0d894309f137f39f288174a5d14c6423cee)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308920ac82a74541b23a8",
    "number": 678,
    "body": "Fixes some issues with, and includes, #576, which the author no longer wants to maintain.",
    "head_branch": "content-registry-v1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308930ac82a74541b23a9",
    "number": 671,
    "body": "**Overview**\r\nThis is a simple player join event targeted at 1.16. It hooks in at the end of `PlayerManager#onPlayerConnect`. All style/license checks pass, and the testmod works.\r\n\r\n**Use Cases**\r\nA few use cases of this include:\r\n   - giving items to the player when they first join\r\n   - sending welcome messages to players on login\r\n   - broadcasting join messages\r\n\r\nI know several people who use this as an inject spot (including myself) for doing things on player join, so it seems like an appropriate addition to the API.\r\n \r\n**Examples**\r\n*The following code is a snippet of the test mod.*\r\n```java\r\n@Override\r\npublic void onInitialize() {\r\n\tPlayerJoinCallback.EVENT.register(player -> {\r\n\t\tplayer.giveItemStack(new ItemStack(Items.APPLE));\r\n\t});\r\n}\r\n```\r\n\r\n**Notes**\r\nI opted to inject into the end of `onPlayerConnect` because I can't think of any valid reasons to go before it, besides making the event cancellable, which wasn't something I wanted.  I think the earliest you could go (while keeping it practical as a post join event) would be when the player's world is set halfway down the method.\r\n\r\nI figured a network PR or a custom mixin would be better suited for denying logins (or something similar), but I could provide a pre-connect and post-connect event instead of a single post-connect event if needed.",
    "head_branch": "join-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308940ac82a74541b23aa",
    "number": 669,
    "body": "Adds a single method to `fabric-containers-v0` which allows modders to check if a container factory with a given identifier has already been registered.\r\n\r\nReasoning behind this PR is that I would like to implement a config for my mod to specify which screen / container factory is used and would like to be able to tell the user if they have picked an unsupported value.\r\n\r\nThis won't be needed for the new screen handler updated version of this module as the screen handlers are registered to a minecraft registry instead of a private map.\r\n\r\nIf there are any issues with checkstyle ( I have ran it locally ) or with the version number please let me know.",
    "head_branch": "containerFactoryExists/1.15.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308950ac82a74541b23ab",
    "number": 668,
    "body": "The lower methods in the class are commented with their categories:\r\n\r\n`FABRIC DELEGATE WRAPPERS` for additional methods to allow editing fields not actually exposed in vanilla.\r\n\r\n`FABRIC HELPERS` for methods to handle things like mining levels.\r\n\r\nPer these two categories, the new method does not belong in `FABRIC HELPERS` and has been moved accordingly",
    "head_branch": "fix/settingsorder",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Move new method in FabricBlockSettings to correct place in class. (#668)\n\nThe lower methods in the class are commented with their categories:\r\n\r\n`FABRIC DELEGATE WRAPPERS` for additional methods to allow editing fields not actually exposed in vanilla.\r\n\r\n`FABRIC HELPERS` for methods to handle things like mining levels.\r\n\r\nPer these two categories, the new method does not belong in `FABRIC HELPERS` and has been moved accordingly"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308950ac82a74541b23ac",
    "number": 666,
    "body": "This PR adds a transaction API created for use in the fluid API (#657), but this is designed so it can be used for anything, inventories, power systems, ... so that transfers across different systems can be done safely.",
    "head_branch": "transactions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308960ac82a74541b23ad",
    "number": 665,
    "body": "Not expecting this to be merged, as Player has expressed a strong preference for a different sort of shape, but want to illustrate that Transaction support can be done without too much hassle.  Having this available can simplify something like a Fluid API,  but has general utility explained below.\r\n\r\nThis code is already tested/used via my Facility mod. I'm certain it has defects and people find fault with it, but it works.\r\n\r\nThis code is excerpted from [Fluidity](https://github.com/grondag/fluidity) with minor adaptations for Fabric.   Fluidity has extensive notes on its transaction support which largely apply just as well here, so I have reproduced these below with minor edits to avoid confusion. \r\n\r\n# Transactions\r\nTransactions allow any class that implements `TransactionParticipant` to be notified when an operation is part of a transaction and may need to be undone.  Participants are then given an opportunity to save any necessary rollback state before the operation happens, and then notified when the transaction is committed or rolled back.\r\n\r\nParticipants can be explicitly enlisted in a transaction when their involvement is known, but implementations can also self-enlist.  This is particularly useful for transportation networks with cost accounting - the initiator of an operation may not know all of the attendant costs and side effects of the transport network, or even that they exist.  If the transport network can self-enlist, all of that can be handled without complicating the initiating code. \r\n\r\nTransactions are useful in at least two ways:\r\n1. Operations across multiple participants do not have to forecast results with perfect accuracy, nor handle clean up of participant state when things do not go according to plan.  When working with complicated implementations (something like a Project E table, for example) both the forecasting and the cleanup could be nigh-impossible to get right and will inevitably result in undesirable coupling of implementations.\r\n2. Code that initiates an operation does not have to know of and handle all of the possible side effects that could result because transaction participants that aren't directly known or meaningful to the initiator can self-enlist.\r\n\r\n## Using Transactions\r\n* **`Transaction`**  A single transaction - may be nested within another transaction. The initiator obtains this instance and uses it to commit or roll back the transaction, and to enlist participants.  Should be enclosed in a try-with-resources block - default close behavior is to roll back unless `commit()` was called successfully before `close()`.\r\n* **`TransactionParticipant`**  Provides a `TransactionDelegate` and indicates if the participant is self-enlisting. Implement this on stores, transport carriers, machines or other game objects that can benefit from transaction handling. All Fluidity base implementations (except aggregate views) include transaction support.\r\n\t* **`TransactionDelegate`** Does the actual rollback preparation and handles closure notifications. Allows participants to share the same rollback state.  The `ArticleFunction` interface itself extends `TransactionParticipant` so it is common to have multiple `ArticleFunctions` instances that internally update the same state.\r\n* **`TransactionContext`**  Exposed to participants at time of enlistment, and again at close.  Used to save and retrieve rollback state, and to query commit/rollback status at close.\r\n\r\nHere's an example of a simple transaction reliably transferring one unit of something between two stores:\r\n\r\n```java\r\ntry(Transaction tx = Transaction.open()) {\r\n\ttx.enlist(firstStore);\r\n\ttx.enlist(secondStore);\r\n\r\n\tif (firstStore.supply(myArticle), 1) == 1 && secondStore.accept(myArticle, 1) == 1) {\r\n\t\ttx.commit();\r\n\t}\r\n}\r\n```\r\n\r\n## Implementing Transaction Support\r\nImplementations can avoid overhead by deferring rollback state creation until something actually changes, unless creating rollback state is very inexpensive.  Often, the easiest way to accomplish this is to make `TransctionParticipant.isSelfEnlisting()` return true, and then call `Transaction.current.enlistSelf()` right before something changes.\r\n\r\nTransactions track which delegates have already been enlisted (self-enlisted or otherwise), and guarantees that `TransactionDelegate.prepareRollback()` will be called exactly once, immediately when the delegate first becomes enlisted.\r\n\r\nThe rollback state provided by the delegate via `TransactionContext.setState()` can be any Object, or null.  It will never be inspected or altered by the transaction manager, and will be provided back to the delegate via `TransactionContext.getState()` when the transaction is closed.\r\n\r\nThe `Consumer` function returned by `prepareRollback()` will *always* be called, both when a transaction is committed and when it is rolled back deliberately or due to an exception.  Implementations *must* therefore check the value of `TransactionContext.isCommited()` to know what action is appropriate.\r\n\r\nOddball implementations that don't need to do anything on commit or rollback can return `TransactionDelegate.IGNORE` as their delegate, which does exactly what you'd expect it to do.  Examples of this are creative-type storage or void blocks where state is essentially immutable, and aggregate storage implementations that don't have any internal, independent state that would need to be restored but instead rely on their component instances to handle transaction state and change notifications as needed. \r\n\r\nHowever, a class that extends `TrasactionDelegate` *must* provide transaction support to the extent that it means anything for that implementation.  Transaction delegates should not be null and they should not be `TransactionDelegate.IGNORE` unless that gives \"correct\" results. \r\n\r\n## Transaction Mechanics\r\nTransaction State is global state.  There is only ever one current transaction, across all threads.\r\n\r\nAs we all know, global state is always bad.  Sometimes, it is also *least* bad. Nobody wants to wear the cleanest dirty shirt, and being forced to do so may motivate us to improve the regularity of our laundering habits, but sometimes we must choose from a menu of unsavory options. The author believes such is the case here.\r\n\r\nEarlier designs considered the possibility of partitioning transaction state into isolated scopes, and to allow concurrent transactions from multiple threads, much as a modern RDBMS would do.  However this immediately introduces many complicating problems, including the need to track which objects are visible in which scope(s) and the need for synchronization when such objects are referenced in more than one scope. It also creates the need to detect and handle deadlocks, or otherwise shape the API in a (probably onerous and restrictive) way so that deadlocks cannot occur. It's simply not worth it in the context of modded Minecraft, assuming it could be made to work at all before we have all moved on to other pursuits. \r\n\r\nWhen there can only be a single current transaction, transaction state is *de-facto* global state.  *Exposing* it as explicit global state is not essential, but it ends up being *very* nice for allowing transaction participants to self-enlist.  This single change greatly simplified implementations that benefit from lazy rollback preparation or want to automatically include side-effects (like transport costs) in the transaction that caused the side effects to occur. Doing this without global visibility requires cluttering the API to pass the current transaction up and down the call stack, or exposing it on some accessible instance such that it becomes effectively global anyway.\r\n\r\nThe API also supports nested transactions, and making the overall transaction state a singleton allows the nesting implementation to be a simple stack of zero or more transactions associated with a single thread, which brings us to the question of support for multiple threads. \r\n\r\nThe API *does* support transactions initiated from any server-side thread, and automatically synchronizes the current state via a specialized locking mechanism. This mechanism makes the following guarantees:\r\n* Only one thread can own the current transaction state.\r\n* To open a new transaction, there must be no current transaction, or the calling thread must already own the current state.\r\n* A thread that tries to open a transaction without holding the lock will block until the transaction is complete. This will not cause deadlocks unless an action somehow waits on a blocked thread through some dependency other than the transaction.  That would be strange and bad. Don't do that.\r\n* Most important: the Minecraft server thread is *always* given priority above all other threads. If a transaction from another thread is open when the server thread tries to open a transaction, the server thread will block until that thread completes, and will then be scheduled before any other waiting threads.  Non-server threads should be scheduled in an approximately fair order. \r\n\r\nThe rational for this last guarantee is performance: the server thread should not be held up by locks from other threads.  That said, the server thread will not be using the transaction state most of the time - server ticks only happen 20 times per second and, ideally, are short.  A future update may further restrict locks from other threads, only allowing them to proceed outside of the server tick event.\r\n\r\nThat all said, the best practice for opening transactions from other threads is: don't.  It makes everything much more complicated and prone to breakage.\r\n\r\nIf, like the author, you have some mods that *really* must move some work off the server thread to avoid killing it, the answer is *still* don't initiate transactions from outside the server thread.  If you are querying or changing any state you don't completely control, it probably doesn't expect to be queried or changed from anywhere other than the server thread, preferably during server tick. \r\n\r\nA better approach is to completely isolate the state that will be processed off-thread, buffering world state if needed, and then synchronizing with world state during each server tick.  During the server tick you can initiate transactions on the server thread, and those transactions can consume or produce state that is the result of or input to off-thread processing.  Server ticks may take a little longer to run, but you won't block them or break the game (probably), and usually there is time to spare or to be found with server-side optimization mods.  \r\n\r\nOther libraries outside the scope of Fabric may provide some mechanisms that could be useful for this sort of setup, and if you are committed to doing concurrent processing server-side it should be something you are comfortable doing on your own if needed.\r\n\r\nConsistent with this recommendation, there is a non-zero chance support for transactions from non-server threads will be altogether *removed* in some future release and this is a topic on which the author would value feedback.  For now the feature remains to account for scenarios that may not have been anticipated, and because someone will probably try to do it anyway.\r\n\r\nLastly, note that transactions are a server-side construct, and no client-side code should ever reference them.  This is difficult to enforce directly without expensive checks, and so for now mod authors are on the honor system to get this right.  If it becomes a problem, some checks may be added, perhaps with configuration to turn them on or off.",
    "head_branch": "transactions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308970ac82a74541b23ae",
    "number": 663,
    "body": "Closes #662 ",
    "head_branch": "datapack-load-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make Fabric mod data packs automatically enable on world creation, allow mod data packs to load on dedicated servers (#663)\n\n* make mod data packs load on dedi servers, auto-enable\r\n\r\n* license headers"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308980ac82a74541b23af",
    "number": 660,
    "body": " >org.jetbrains.annotations\r\nAnnotation Type Nullable\r\n \r\n>@Documented\r\n @Retention(value=CLASS)\r\n @Target(value={METHOD,FIELD,PARAMETER,LOCAL_VARIABLE,TYPE_USE})\r\npublic @interface Nullable\r\nAn element annotated with Nullable claims null value is perfectly valid to return (for methods), pass to (parameters) or hold in (local variables and fields). Apart from documentation purposes this annotation is intended to be used by static analysis tools to validate against probable runtime errors or element contract violations. By convention, this annotation applied only when the value should always be checked against null because the developer could do nothing to prevent null from happening. Otherwise, too eager Nullable usage could lead to too many false positives from static analysis tools. For example, Map.get(Object key) should not be annotated Nullable because someone may have put not-null value in the map by this key and is expecting to find this value there ever since. On the other hand, the Reference.get() should be annotated Nullable because it returns null if object got collected which can happen at any time completely unexpectedly.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308990ac82a74541b23b0",
    "number": 658,
    "body": "Apparently the method changed a bit since the biome list was a local parameter instead of a fixed variable in the method\r\nI also added a testmod just in case",
    "head_branch": "biomes-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "1.16 fix for nether biomes (#658)\n\n* 20w22a support for nether biomes\r\n\r\n* Apply suggestions from code review\r\n\r\nCo-authored-by: Joseph Burton <burtonjae@hotmail.co.uk>\r\n\r\n* Checked style and bumped version\r\n\r\n* Fixed some testmods\r\n\r\n* Made TestCrimsonForestBiome an inner class in FabricBiomeTest\r\n\r\nCo-authored-by: Joseph Burton <burtonjae@hotmail.co.uk>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623089a0ac82a74541b23b1",
    "number": 657,
    "body": "Fluid Api, it's not complete and I haven't revised it too much, there's quite a bit missing but I'd like to get feedback on this, I'd prefer if you pinged me on discord over talking here (using this as an archive of the conversation is cool though), as it's faster\r\n\r\nvery rough, hence the draft status",
    "head_branch": "1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623089a0ac82a74541b23b2",
    "number": 656,
    "body": "Fluid Api, it's not complete, there's quite a bit missing but I'd like to get feedback on this, I'd prefer if you pinged me on discord over talking here (using this as an archive of the conversation is cool though), as it's faster",
    "head_branch": "1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623089b0ac82a74541b23b3",
    "number": 655,
    "body": "",
    "head_branch": "backport/objectbuilders",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Backport Object builders v1 to 1.14 (#655)\n\n* Object builders v0->v1 migration (#537)\r\n\r\nCo-authored-by: modmuss50 <modmuss50@gmail.com>\r\n(cherry picked from commit 796d1cc4d323af03097e83d3c4f73e8c6fe8255b)\r\n\r\n* Fix issue from future commit to object builders"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623089c0ac82a74541b23b4",
    "number": 652,
    "body": "Fixed the nether biome mixin on MultiNoiseBiomeSource solving #650\r\n\r\nThis can be a temporary fix just so that mods that add nether biomes aren't totally ruined in the short term. I'm not the best at mixins so I don't know if there's a better way to do, but I couldn't think of one. \r\n\r\nBasically the game makes an immutable list and then in one line using a lambda on a stream of the list remaps it from List<Biome> to List<Pair<MixedNoisePoint, Biome>> and then sends that to the constructor. The fix was just to do the same remapping process on the nether biomes in the InternalBiomeData class before appending them to the replaced list.",
    "head_branch": "1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixed the nether biome mixin (#652)\n\nFixed the nether biome mixin on MultiNoiseBiomeSource solving #650"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623089d0ac82a74541b23b5",
    "number": 649,
    "body": "[Hold a min so I can bump versions]",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make villager profession builder create method public [1.15] (#649)\n\n* Make method public\r\n\r\n* bump module version\r\n\r\n* Bump main version"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623089e0ac82a74541b23b6",
    "number": 647,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make the create method public on villager profession builder (#647)\n\n* Make the create method public\r\n\r\n* Bump module ver\r\n\r\n* Bump main version"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623089e0ac82a74541b23b7",
    "number": 645,
    "body": "Supersedes and is based off of #249 brought up to kit with checkstyle and module naming.\r\n\r\nThis is a work in progress module, so far you can:\r\n* Listen to screens being initialized\r\n* Add elements and button widgets to a screen\r\n* Adds `Screens` util class, which allows access to a screen's buttons, widgets, item renderer and text renderer.\r\n\r\nRequests for additional functionality are open, if you have any ideas, just comment below and I'll see if they are feasible.",
    "head_branch": "screen-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Screen API v1 (#645)\n\n* Implement screen api\r\n\r\n* Actually update to 20w27a\r\n\r\n* Split render and tick events to before and after\r\n\r\n* Rename and update\r\n\r\n* A bit of javadoc and profiler name fixes\r\n\r\n* Add functional interface annotations, move render and ticking events to actual FabricScreen instance.\r\n\r\n* Add after screen resize event\r\n\r\n* Implement key and mouse click/press and release events.\r\n\r\n* Move keyboard and mouse events to their own pojos\r\n\r\n* Init and resize are the same thing. Maybe Screen#init needs a rename\r\n\r\n* Add mouse scroll events\r\n\r\n* checkstyle\r\n\r\n* Refresh event instances after init\r\n\r\n* Before init is nessecary to listen to addition/removal of child elements\r\n\r\n* Polish up the javadoc and do a rename to the public api interface.\r\n\r\n* Mappings updates on testmod\r\n\r\n* javadoc formatting again\r\n\r\n* Rework screen api design to be more ergonomic.\r\n\r\n* Add remove event, some javadoc\r\n\r\n* Add allow phase\r\n\r\n* Module dependencies\r\n\r\n* Fix null ticking when no screen is open\r\n\r\n* Refer to GLFW constants in mouse click/release events\r\n\r\n* Keyboard event GLFW constant javadoc\r\n\r\n* Remove redundant qualifier\r\n\r\n* Some docs, degetterifying\r\n\r\n* Because global go brr add screen params back around\r\n\r\n* Add module lifecycle to FMJ"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623089f0ac82a74541b23b8",
    "number": 644,
    "body": "This is much less prone to breakage and possibly more precise.",
    "head_branch": "6slice",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use a Slice over the Shift.BEFORE by -6 (#644)\n\n* Use a Slice over the Shift.BEFORE by -6\r\n\r\nThis is much less prone to breakage and possibly more precise.\r\n\r\n* bump version"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308a00ac82a74541b23b9",
    "number": 641,
    "body": "Allows mods to register gamerules.\r\n\r\nIncludes support for the following rule types:\r\n\r\n__Integer__ (vanilla), Double and Float. All of these can have bounded values.\r\n__Boolean__ (vanilla).\r\n__Enum rule__. Can be made to only support certain enum constants. Will appear as literals in the command, so it isn't possible to enter invalid values.\r\n\r\nAlso allows custom rules to use the new `Edit GameRules` screen added in 1.16.\r\n\r\nAnd the ability to register custom rule categories without any enum asm hackery. Including colored categories.\r\n\r\nThanks to @Hephaestus-Dev (Haven) for the logic to allow custom rule categories.\r\n\r\nSupersedes https://github.com/FabricMC/fabric/pull/283",
    "head_branch": "gamerules",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Create Game Rule API (#641)\n\n* Create GameRule API\r\n\r\n* Some tweaks\r\n\r\n* gamerule -> game-rule\r\n\r\n* Fix translation keys and update to 20w22a\r\n\r\n* Command results and remove unnessecary factory method\r\n\r\n* Update to 1.16-pre1\r\n\r\n* Update fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/FabricRuleTypeConsumer.java\r\n\r\nCo-authored-by: liach <7806504+liach@users.noreply.github.com>\r\n\r\n* I like final things\r\n\r\n* Update to 1.16-pre3, change enum button style\r\n\r\n* checkstyle\r\n\r\n* use right min values\r\n\r\n* Document ValidatableRule\r\n\r\n* Document LiteralRule, clarify generics\r\n\r\n* Update to 20w27a\r\n\r\n* Rename some parts to compensate for future yarn renames.\r\n\r\nFlatten some logic related to EnumRules\r\n\r\n* forgot one\r\n\r\n* javadoc galore\r\n\r\n* finish javadoc\r\n\r\n* Start things\r\n\r\n* Update to 20w29a, drop float rule\r\n\r\n* Make cycle naming more accurate\r\n\r\n* Convert colors to hex\r\n\r\nCo-authored-by: Erlend Åmdal <erlend@aamdal.com>\r\n\r\n* Update to 20w30a\r\n\r\n* imports again\r\n\r\nCo-authored-by: liach <7806504+liach@users.noreply.github.com>\r\nCo-authored-by: Prospector <6166773+Prospector@users.noreply.github.com>\r\nCo-authored-by: Erlend Åmdal <erlend@aamdal.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308a10ac82a74541b23ba",
    "number": 640,
    "body": "In 1.16 Mojang added a shade indicator to bake quads and moved diffuse shading to buffer time instead of pre-multiplying quad vertex colors.  They also made diffuse shade dimension-specific. Diffuse shade may be < 1 in the Nether even for unshaded quads.\r\n\r\nThis PR makes Indigo handle these changes properly for modded models using the API\r\n\r\n- Fixes #638 - don't apply diffuse shading twice\r\n- Changes the flat (non-AO) lighting path to correctly control shade based on render material\r\n- Honor render material diffuse shading selection in AO path\r\n- Remove non-API helper methods that are no longer needed\r\n- Interpolate diffuse shade for models with non-cubic quads or when vertex normals are present\r\n- Bump indigo patch version ( could perhaps merit a minor bump, up to admins)\r\n\r\nBefore\r\n![2020-05-25_09 34 32](https://user-images.githubusercontent.com/6106235/82838644-b3a31280-9e81-11ea-8790-74c7933b8648.png)\r\n\r\nAfter\r\n![2020-05-25_09 55 01](https://user-images.githubusercontent.com/6106235/82838687-d1707780-9e81-11ea-8453-2e60b3d40296.png)\r\n\r\nBefore\r\n![2020-05-25_11 44 27](https://user-images.githubusercontent.com/6106235/82838708-de8d6680-9e81-11ea-9b44-c70fce725246.png)\r\n\r\nAfter\r\n![2020-05-25_11 19 01](https://user-images.githubusercontent.com/6106235/82838718-e77e3800-9e81-11ea-8b2b-5c351312f696.png)\r\n\r\nBefore\r\n![2020-05-25_09 34 41](https://user-images.githubusercontent.com/6106235/82838738-f49b2700-9e81-11ea-9fde-1e8ed00506a8.png)\r\n\r\nAfter\r\n![2020-05-25_09 54 46](https://user-images.githubusercontent.com/6106235/82838743-fa910800-9e81-11ea-8ae1-35d186d6ffc4.png)\r\n\r\nBefore\r\n![2020-05-25_11 44 56](https://user-images.githubusercontent.com/6106235/82838757-04b30680-9e82-11ea-8f95-63d5d2338f0e.png)\r\n\r\nAfter\r\n![2020-05-25_11 39 43](https://user-images.githubusercontent.com/6106235/82838767-0bda1480-9e82-11ea-8245-513f14784a95.png)\r\n\r\nBefore\r\n![2020-05-25_11 51 44](https://user-images.githubusercontent.com/6106235/82838773-14cae600-9e82-11ea-8645-1b56ac070ead.png)\r\n\r\nAfter\r\n![2020-05-25_11 53 48](https://user-images.githubusercontent.com/6106235/82838788-1dbbb780-9e82-11ea-9f95-9dd5a3611275.png)\r\n\r\n\r\n",
    "head_branch": "indigo-fixes-20w20b",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Various Indigo lighting fixes (#640)\n\n* Various lighting fixes\r\n\r\n* 20w22a\r\n\r\n* Various lighting fixes\r\n\r\nCo-authored-by: modmuss50 <modmuss50@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308a20ac82a74541b23bb",
    "number": 639,
    "body": "A fix for #336 to make it work with Fabric's latest version. Here's a GIF of it in action:\r\n![2020-05-24-12-53-40](https://user-images.githubusercontent.com/18202329/82763663-277be700-9dbe-11ea-954f-fe2032b7dd62.gif)\r\nSorry for the 2 line PR!",
    "head_branch": "1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Move creative pagination buttons (#639)\n\n* Move creative pagination buttons\r\n\r\n* Bump module version + Update Texture\r\n\r\n* Remove Krita Autogenerated File\r\n\r\n* Add Hover and Update Texture\r\n\r\n* Fix button positions\r\n\r\n* Fix checkstyle"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308a30ac82a74541b23bc",
    "number": 634,
    "body": "Instead of appending the version hash, append the version itself. This allows mod devs to know what version a Fabric API module was built against. Note that this does not imply a version range that a module is compatible with.\r\n\r\nThis PR is part of [a plan to improve depending on Fabric API](https://gist.github.com/kvverti/3fc6a05d974210f785a9a751d5e0ae28).",
    "head_branch": "new-build-version",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308a30ac82a74541b23bd",
    "number": 633,
    "body": "Not to be confused with #493 which is for professions.\r\n\r\nWhat this PR does:\r\n\r\nFixes vanilla bug prevent registration of custom villager profession.\r\nFor hardcoded trades that depend on villager type, (type-aware) if the resulting item is air, do not attach the offer to the villager.\r\n\r\nAdds utility classes to simplify adding trades to villagers and wandering traders. ",
    "head_branch": "feature/villagertype",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308a40ac82a74541b23be",
    "number": 629,
    "body": "- The main change is that v2 uses new 1.16 Yarn names for all methods, and the previously renamed `LootTable` instead of `LootSupplier` as well.\r\n- All uses of reflection were removed.\r\n- v2 supports the entire API of v1 with the exception of `LootJsonParser` and `LootEntryTypeRegistry` which have become useless in Minecraft updates. (Now you can just use `LootGsons` and `Registry.LOOT_POOL_ENTRY_TYPE` from vanilla.)\r\n- Added a few new methods in `FabricLootPoolBuilder` that work with collections of children.\r\n- Changes to v1:\r\n  - v1 was retrofitted to always fall back to v2 when possible.\r\n  - v1's `LootEntryTypeRegistry` was changed to directly register to the vanilla registry.",
    "head_branch": "patch-12",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308a50ac82a74541b23bf",
    "number": 627,
    "body": "Its possible for mods to add dimensions without any code, and without any input from fabric using vanilla's new datapack system. This PR currenly re-adds the custom entity teleportation stuff that was present in the old API, in an almost exact manner.\r\n\r\nThe example mod does add a dimension using vanilla's new system, however it marks the world as experimental. I tried to remove mod added dims from this check, but got lost in DFU. My idea was an api such as `FabricDimensions.registerStableDimension`. \r\n\r\n![](https://s.modm.us/java_2020-06-10_20-43-42.png)\r\n\r\nI think the best course of action is to move this PR into a custom module for the custom portal placement logic as this can be used on its own, or with vanilla datapack added dimensions.",
    "head_branch": "dim-v2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Rework Dimensions for 1.16 (#627)\n\n* dim api initial port\r\n\r\n* A whole bunch of work\r\n\r\n* Checkstyle :)\r\n\r\n* Minor tweaks based on feedback\r\n\r\n* Update to latest snapshot\r\n\r\n* Checkstyle ;)\r\n\r\n* Some more dim work\r\n\r\n* Re add default placer's, the example mod includes a test dim that currently marks the world as experimental\r\n\r\n* license\r\n\r\n* Fixup javadoc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308a60ac82a74541b23c0",
    "number": 619,
    "body": "1.16 Sister PR is #681\r\n\r\nNow includes Chunk and (Block)Entity (un)load events as well.\r\n\r\nCreates a new module `fabric-lifecycle-events-v1`\r\n\r\nThis also creates `fabric-item-api-v1` for the `ItemTooltipCallback` that doesn't belong in the lifecycle module.\r\n\r\nLegacy events have been deprecated and verified that they still work.\r\n\r\n(Un)Load events have been tested, but still converting them to fabric's testing format and cleaning up some of the tracking mechanism in testing.\r\n\r\n### **Edit 1:**\r\nLifecycle events have been moved to either `ServerXYZEvents` or `ClientXYZEvents` depending on whether the event fires on a logical client or server. Note events defined in `ClientXYZEvents` are client only.\r\n\r\n**Renamed Events:**\r\n- `ServerStartCallback` -> `ServerLifecycleEvents.SERVER_STARTED`\r\n- `ServerStopCallback` -> `ServerLifecycleEvents.SERVER_STOPPING`\r\n- `ServerTickCallback` -> `ServerTickEvents.END_SERVER_TICK`\r\n- `WorldTickCallback`: This has been split up to correspond with the logical world type.\r\n  - `ServerWorld` -> `ServerTickEvents.END_WORLD_TICK`\r\n  - `ClientWorld` -> `ClientTickEvents.END_WORLD_TICK`\r\n\r\n- `ClientTickCallback` -> `ClientTickEvents.END_CLIENT_TICK`\r\n- `ItemTooltipCallback` -> Moved to `fabric-item-api-v1`\r\n\r\n**New Events (Client & Server):**\r\n- Entity Load\r\n  - `ClientEntityEvents.LOAD_ENTITY`\r\n  - `ServerEntityEvents.LOAD_ENTITY`\r\n\r\n- BlockEntity Load\r\n  - `ClientBlockEntityEvents.LOAD_BLOCK_ENTITY`\r\n  - `ServerBlockEntityEvents.LOAD_BLOCK_ENTITY`\r\n\r\n- BlockEntity Unload\r\n  - `ClientBlockEntityEvents.UNLOAD_BLOCK_ENTITY`\r\n  - `ServerBlockEntityEvents.UNLOAD_BLOCK_ENTITY`\r\n\r\n- Chunk Load\r\n  - `ClientChunkEvents.LOAD_CHUNK`\r\n  - `ServerChunkEvents.LOAD_CHUNK`\r\n\r\n- Chunk Unload\r\n  - `ClientChunkEvents.UNLOAD_CHUNK`\r\n  - `ServerChunkEvents.UNLOAD_CHUNK`\r\n\r\n- Ticking\r\n  - `ClientTickEvents.START_CLIENT_TICK`\r\n  - `ClientTickEvents.START_WORLD_TICK`\r\n\r\n**New Events (Server)**\r\n- Server Stopped\r\n  - `ServerLifecycleEvents.SERVER_STOPPED` (Called the instant after the server has completely stopped. This is the last event called on a dedicated server before the process closes.)\r\n\r\n- Ticking\r\n  - `ServerTickEvents.START_SERVER_TICK`\r\n  - `ServerTickEvents.START_WORLD_TICK`\r\n\r\n**New Events (Client)**\r\n- `ClientEntityEvents.UNLOAD_ENTITY` (This is client only since tracking entity unloads on a server is too unreliable).\r\n- `ClientLifecycleEvents.CLIENT_STARTED` (Called when the client is about to tick for the first time)\r\n- `ClientLifecycleEvents.CLIENT_STOPPING` (Called when the client begins to stop. (Called before the client's player is disconnected if in game))\r\n\r\n__A few more thing to do:__\r\n ~~- Add tick events to correspond to the beginning of a tick on a client, server and world~~\r\n ~~- Docs. Lots of them~~",
    "head_branch": "feature/v1/lifecycle",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Lifecycle Events V1 [1.15] (#619)\n\n* Lifecycle Events V1\r\n\r\nNow includes Chunk and (Block)Entity (un)load events\r\n\r\n* Add some tests to verify worlds are ticking in the log\r\n\r\n* Lambda boogaloo\r\n\r\n* Add some docs. Distinguish between a server starting to stop and server which has stopped.\r\n\r\n* Split up test mods, some tweaks to (block)entity (un)load events.\r\n\r\nBind the ServerWorld being closed during shutdown to unload (block)entities.\r\n\r\n* Shift around a few profiler variables and finalize\r\n\r\n* Complete the tests, Block entities on server should be reliably tracked now.\r\n\r\nEntities on the server obviously still need to be wrangled.\r\n\r\n* Drop Server Entity Unload callback.\r\n\r\nBelieve me, this was a hard decision but it stands on the fact that about 20-40% of entities silently unload without going through the proper \"unloadEntity\" method in ServerWorld. No amount of debug hacks, double tracking unload events and even replacing the entity maps do not fix this issue. So I have decided to drop this from the feature set.\r\n\r\n* checkstyle\r\n\r\n* generic-events -> item-api\r\n\r\n* Server start -> Server started\r\n\r\n* Allow getting current server from Lifecycle\r\n\r\nPeople have asked for this, but it is not encouraged for obvious reasons. Should be staged well enough to revert if we decide to.\r\n\r\n* checkstyle lol\r\n\r\n* update injection name\r\n\r\n* Checkstyle lol: Redundant modifiers\r\n\r\n* Add client starting, stopping and stopped callbacks.\r\n\r\n* Loicenses\r\n\r\n* Reorganize so each event category has it's own class.\r\n\r\nAlso this collapses the pretty widely reaching interfaces into more specific inner classes to avoid issues with generics.\r\n\r\n* Some docs and slight name changes\r\n\r\n* Add start tick callbacks to worlds, server and client\r\n\r\n* Enhance some client related docs to life cycle\r\n\r\n* Deprecate for reasons of discouraging singletonish server getter methods in lifecycle\r\n\r\n* Add some description related to integrated server on server stopping.\r\n\r\n* Add small test to verify tick starts are right spot of load\r\n\r\n* Docs and a tiny bit more testing.\r\n\r\n* Try clarifying client docs\r\n\r\n* Drop a slightly unnessecary event\r\n\r\n* Actually call and implement START_SERVER_TICK event\r\n\r\n* Remove non-existent test\r\n\r\n* again\r\n\r\n* Refer to minecraft itself in client lifecycle docs\r\n\r\n* Refer to Minecraft itself within ServerLifecycleEvents\r\n\r\n* Remove primary server getters\r\n\r\n* IJ DO YOU SPEAK RESOLVING IMPORTS\r\n\r\n(cherry picked from commit c9257e8a11d8361469349f4171263121bb111af7)\r\n\r\n* Prune the tests that shouldn't exist\r\n\r\n* Listen here checkstyle you bugger\r\n\r\n(cherry picked from commit 9701bba4002cec089c9d3738b1f226128078c130)\r\n\r\n* Split up events to individual interfaces. Make Chunk events use WorldChunk instead."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662308a70ac82a74541b23c1",
    "number": 615,
    "body": "This is an edited clone of #244 as that seemed dead and I want to push stuff going faster.\r\n\r\n- Fixed checkstyle issues\r\n- Migrated to fabric-keybindings-v1\r\n- Added a test mod\r\n- Added FabricKeyBinding#getBoundKeyOf for getting vanilla bound keys with ease\r\n- Renamed `registered` to `automaticallyRegister` as that is more of a better name\r\n- Added a couple of Objects.requireNonNull validations",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "migrate to fabric-keybindings-v1 and remove builder (#615)\n\n* Edited Clone of #244\r\n- Fixed checkstyle issues\r\n- Migrated to fabric-keybindings-v1\r\n- Removed sticky keybindings from #244 as it sounds useless and you can just around it by simply adding that functionality yourself, I might add it back if someone can tell me the advantages of sticky keys except bloat\r\n- Added a test mod\r\n- Added FabricKeyBinding#getBoundKeyOf for getting vanilla bound keys with ease\r\n- Renamed `registered` to `automaticallyRegister` as that is more of a better name\r\n- Added a couple Objects.requireNonNull validations\r\n\r\n* Add back StickyFabricKeyBinding as it is in vanilla, did not notice.\r\n\r\n* Remove extra \"key.\"\r\n\r\n* Bump to 1.0.0\r\n\r\n* build().register()\r\n\r\n* Remove `register()`\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\n* Fix test\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\n* Rename module\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\n* Fix checkstyle violation\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\n* major refactor\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\n* revert some stuff\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\n* fix build\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\n* major stuff\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\n* fix license, of course\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\n* Add resource loader v0\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\n* Let's not break the api.\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\n* Rename to buildAndRegister\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\n* resolve reviews\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\n* Use GLFW\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\n* Dump the builder entirely\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>\r\n\r\n* Rename to Key Binding\r\n\r\nSigned-off-by: shedaniel <daniel@shedaniel.me>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662308a70ac82a74541b23c2",
    "number": 613,
    "body": "Fixes #20\r\n\r\nAlso fixed object builder api v1 having icon at wrong location  @i509VCB :eyes:\r\n\r\nTested and works well:\r\n\r\n![image](https://user-images.githubusercontent.com/7806504/81487084-af3eee80-921f-11ea-9fec-ef629299ce9c.png)\r\n![2020-05-09_17 58 40](https://user-images.githubusercontent.com/7806504/81487090-b6fe9300-921f-11ea-97a9-ae288925ee74.png)\r\n\r\n\r\nSigned-off-by: liach <liach@users.noreply.github.com>",
    "head_branch": "feature/criterion",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308a80ac82a74541b23c3",
    "number": 611,
    "body": "We Fix this by marking the old v0 mixins as `OldMixinTarget`\r\n\r\nThis is related to this issue:\r\n```\r\nduplicate input class net/fabricmc/fabric/mixin/object/builder/MixinBlock, from /Users/haykam/.gradle/caches/modules-2/files-2.1/net.fabricmc.fabric-api\r\n/fabric-object-builders-v0/0.5.0+796d1cc40c/e8bbfe3e5381024bd07eeaeb28fb9fe4c4d1e3ae/fabric-object-builders-v0-0.5.0+796d1cc40c.jar and /Users/haykam/.g\r\nradle/caches/modules-2/files-2.1/net.fabricmc.fabric-api/fabric-object-builder-api-v1/1.0.0+796d1cc40c/e974ac243291b884d5849109d6c56021edb5071e/fabric-object-builder-api-v1-1.0.0+796d1cc40c.jar\r\n```",
    "head_branch": "fix/duplicate_object_builder",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix duplicate input class from object builder mixins (#611)\n\nWe Fix this by marking the old v0 mixins as `OldMixinTarget`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308a90ac82a74541b23c4",
    "number": 609,
    "body": "Closes #600 ",
    "head_branch": "netherite-tool-tags",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add netherite tools to tool tags (#609)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308aa0ac82a74541b23c5",
    "number": 607,
    "body": "A new test mod for the new command api.\r\n\r\nThis adds three commands, one should be present always and other depending on whether a server is integrated or dedicated.\r\n\r\nThis will also automatically check if the commands that should be present are actually present or else the server will crash with an AssertionError.\r\n\r\nThe commands will throw a CommandSyntaxException causing them to fail if they happen to be executed on the wrong server type.\r\n\r\nThe test commands are as follows:\r\n`/fabric_common_test_command` -> Present always\r\n`/fabric_dedicated_test_command` -> Only present on a dedicated server\r\n`/fabric_integrated_test_command` -> Only present on an integrated server",
    "head_branch": "tests/cmd2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Create command api test mod (#607)\n\n* Create command api test mod\r\n\r\n* Verify the callback is only called once per server instance."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308aa0ac82a74541b23c6",
    "number": 605,
    "body": "This fabric networking API v1 is a low-level API (or more exactly, hooks) that covers basic custom-payload/plugin message packets offered by the vanilla Minecraft protocol.\r\n\r\nUsage: Users are supposed to use stuff exposed in `ClientNetworking` or `ServerNetworking`, or utilities in `net.fabricmc.fabric.api.networking.v1.util` package.\r\n\r\nInitial content based off FabLabsMC/networking-api-v1-draft@eb256236cdfa9cb3b0697ceb12a957c47582fec3.\r\nJavadoc for draft available at https://fablabsmc.github.io/networking-api-v1-draft/\r\n\r\nWill perform v0 deprecation/migration only after the new api is accepted, or this pr is going to be too large.\r\n\r\nSupersedes #455. Issue coverage: #164, #187, #247, #345, #424\r\n\r\nThanks @i509VCB for previewing the draft before I submit this pull request.\r\n\r\nSigned-off-by: liach <liach@users.noreply.github.com>",
    "head_branch": "feature/networking-v1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308ab0ac82a74541b23c7",
    "number": 604,
    "body": "Based off the same fix I made a year or two ago...",
    "head_branch": "commands_fix_2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix commands on servers. (#604)\n\n* Fix commands on servers.\r\n\r\nBased off the same fix I made a year or two ago...\r\n\r\n* Fix"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308ac0ac82a74541b23c8",
    "number": 601,
    "body": "In 20w18a, model predicate provider (old item property for models) have register methods that are not public. As a result, an api is necessary for registering the model predicate providers. Hence this pr.\r\n\r\nSigned-off-by: liach <liach@users.noreply.github.com>",
    "head_branch": "feature/model-predicate",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add fabric model predicate provider registry (#601)\n\n* Add fabric model predicate provider registry\r\n\r\nSigned-off-by: liach <liach@users.noreply.github.com>\r\n\r\n* Fix jd with new mappings\r\n\r\nSigned-off-by: liach <liach@users.noreply.github.com>\r\n\r\n* Bump module version\r\n\r\nSigned-off-by: liach <liach@users.noreply.github.com>\r\n\r\n* Remove redundant line\r\n\r\n* Move inner class accessor to outer class\r\n\r\nCo-authored-by: liach <liach@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308ad0ac82a74541b23c9",
    "number": 598,
    "body": "Probably the most controversial PR in this repo",
    "head_branch": "1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308ae0ac82a74541b23ca",
    "number": 597,
    "body": "On the 1.16, 1.0.0 was already reserved for the 1.16 update, which means that there are now two 1.0.0s for 1.16 with different features (the later one has my builtin item rendering PR).\r\n\r\nThis doesn't fix the problem that the 1.15 version is also 1.0.0 with a different commit hash (that one contains the PR).",
    "head_branch": "patch-11",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Bump fabric-rendering-v1 to 1.1.0 (#597)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308af0ac82a74541b23cb",
    "number": 594,
    "body": "",
    "head_branch": "bytebuf",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308af0ac82a74541b23cc",
    "number": 593,
    "body": "This PR removed all of the old very outdated test mods.\r\n\r\nEach module has its own testmod sourceset, the root project's sourceset depends on all of the sub projects making it easy to run with or without the test mods. (By setting the module in the run config to .main or .testmod)\r\n\r\nI have included a very basic test for the itemgroups module mainly just to test the gradle setup and act as an example.\r\n\r\nI think once we have this in all new modules should have a basic test mod, as it will make it a lot easier when updating to validate things work, and will also act as a good example for people learning the module.",
    "head_branch": "testmods",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Restart Testmods (#593)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308b00ac82a74541b23cd",
    "number": 589,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "tool attribute 1.1 (#589)\n\n* Actual support\r\n\r\n* Remove this useless mixin\r\n\r\n* Resolve some issues\r\n\r\n* Remove duplicate entries\r\n\r\n* maybe?\r\n\r\n* fix max breaking speed\r\n\r\n* choose an item that is the closest\r\n\r\n* Set version to 1.1\r\n\r\n* better docs remove stuff\r\n\r\n* deprecation doc and no todo comments\r\n\r\n* Check if block has valid mining level\r\n\r\n* javadocs\r\n\r\n* Most of the issues resolved\r\n\r\n* Some more javadoc and resolve some issues\r\n\r\n* Forgot to change order for these\r\n\r\n* Adds post process method to DynamicAttributeTool\r\nFixed going to vanilla again to query\r\nFixed tool mining level < 0\r\nFixed vanilla items on modded blocks not working\r\nRenamed taggedToolHandlerInvoker to toolHandlerInvoker\r\nRenamed entries to ENTRIES\r\n\r\n* New comparision method for modded tools to vanilla blocks\r\n\r\n* Remove useless mixins and use getMaterial().getMiningSpeed to support more tools.\r\n\r\n* Simply mixin\r\n\r\n* Some useful javadocs\r\n\r\n* Fix license\r\n\r\n* Bump fabric-object-builders-v0 because we are good\r\n\r\n* Bump version of fabric-object-builder-api-v1 because we are nice\r\n\r\n* Resolve some issues\r\n\r\n* a\r\n\r\n* remove vanilla tools vanilla blocks thing ok\r\n\r\n* descriptive\r\n\r\n* Get the faster speed instead\r\n\r\n* Rename ModdedToolsVanillaBlocksToolHandler\r\n\r\n* Remove tri state\r\n\r\n* Fix compile errors\r\n\r\n* testmod\r\n\r\n* fix formatting\r\n\r\n* fix testmod javadoc\r\n\r\n* forgot to license format testmod\r\n\r\n* Bump to 1.1.0"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662308b10ac82a74541b23ce",
    "number": 588,
    "body": "Because I want `0.5.1+1.15+build.+` to work.\r\n\r\nThis is a change I would obviously like to see on every branch, but I can only make one PR at once, and probably only should do one.\r\n\r\nCommence discussion.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308b20ac82a74541b23cf",
    "number": 586,
    "body": "Introduces an `Entrypoint` annotation for marking entry points in source code. Useful for readability, and can also be used as an annotation to suppress \"unused\" warnings in IDEs. The documentation is loosely based on the JDK's `FunctionalInterface` annotation documentation and describes the annotation as having no impact on semantics.\r\n\r\nI am unsure as to whether this annotation should instead be named `EntryPoint`, as technically \"entrypoint\" is not a real word. Unfortunately, there are mixed uses in Fabric's environment, with the mod metadata entry being named \"entrypoint\" too, as opposed to \"entry_point\".",
    "head_branch": "entrypoint-annotation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308b30ac82a74541b23d0",
    "number": 584,
    "body": "<img src=\"https://cdn.discordapp.com/attachments/521545796882006027/700409365558984704/unknown.png\" alt=\"a real screen handler\" height=256> Closes #175.\r\n\r\nAdds a screen handler API based on `ScreenHandlerType`s.\r\n\r\n- The `ScreenHandlerType` constructor is private in vanilla. This API adds two new methods for creating the types:\r\n  - `ScreenHandlerRegistry.registerSimple()` creates and registers the type for a simple vanilla-like screen handler.\r\n  - `ScreenHandlerRegistry.registerExtended()` creates and registers the type for an *extended* screen handler. Extended screen handlers can send additional data to the client when they are opened.\r\n- `ScreenRegistry` replaces the registration methods of vanilla's `HandledScreens`, which are private.\r\n- Because these screen handlers are type-based, they can be opened with vanilla's method: `ServerPlayerEntity.openHandledScreen(NamedScreenHandlerFactory)`.\r\n  - Extended screen handlers have their own factory interface, `ExtendedScreenHandlerFactory`, that extends `NamedScreenHandlerFactory`. It defines one extra method for writing the additional data sent to the client into a packet buffer.\r\n- The old fabric-containers-v0 module is deprecated. Due to it not tracking the types of screen handlers, it can't be ported cleanly on top of this module.\r\n\r\nThis PR is mirrored in [the FabLabs Screen Handlers project](https://github.com/FabLabsMC/ScreenHandlers), and it can be downloaded as a standalone library from there. The FabLabs repository also includes [a test/example mod](https://github.com/FabLabsMC/ScreenHandlers/tree/1.16/example/src/main/java/io/github/fablabsmc/fablabs/impl/screenhandler/example).",
    "head_branch": "patch-8",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Screen handler API (#584)\n\n* Add screen handler API\r\n\r\n* Use more descriptive letters for FabricHandledScreens generics\r\n\r\n* Add missing Deprecated annotations\r\n\r\n* Bump fabric-containers-v0 version\r\n\r\n* Remove unused ServerPlayerEntityAccessor\r\n\r\n* Remove [Fabric] from log messages\r\n\r\n* Convert FabricHandledScreens to a class\r\n\r\n* Add dependency on networking-v0\r\n\r\n* Resolve threading issues with NetworkingClient\r\n\r\n* Use Identifiers instead of int IDs, make ScreenHandlers a class\r\n\r\nAlso added a private constructor to FabricHandledScreens.\r\n\r\n* NetworkingClient -> ClientNetworking\r\n\r\n* Use more descriptive names for injections\r\n\r\n* Use ID parameter instead of fetching again\r\n\r\n* Add clarifying comment\r\n\r\n* Port changes from FabLabs\r\n\r\n* Fix compilation\r\n\r\n* Replace the content of links in FabricHandledScreens for readability\r\n\r\n* Sync with FabLabs\r\n\r\n* Add test mod\r\n\r\n* I suppose IInv shouldn't have CC0 anymore :eyes:\r\n\r\n* Improve logging\r\n\r\n- Networking now uses a logger instead of an exception\r\n- The loggers are now suffixed with their side\r\n- Fixed the client unregistered screen message using the title instead of the ID\r\n\r\n* Fix test mod on 20w21a\r\n\r\n* Fix ExtendedScreenHandlerFactory javadoc referencing old names\r\n\r\n* Update test mod to 1.16-pre2\r\n\r\nJust a simple mapping update. :)\r\n\r\n* Fix incorrect javadoc references to screen-handler-api in containers-v0\r\n\r\n* Remove Minecraft exclusion from build.gradle (thanks to Loom 0.4) + testmod change\r\n\r\nResource loader v0 is now testmodRuntimeOnly as it's not needed for compiling."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308b30ac82a74541b23d1",
    "number": 583,
    "body": "### Fast:\r\n![](https://ss.modmuss50.me/java_2020-04-17_21-19-33.png)\r\n\r\n### Max Smooth Lighting:\r\n\r\n![](https://ss.modmuss50.me/java_2020-04-17_21-24-46.png)\r\n\r\n![](https://ss.modmuss50.me/java_2020-04-17_21-26-35.png)\r\n\r\nShould fix #546 It may be worth doing a side-by-side with vanilla to ensure they are all close.",
    "head_branch": "lighting_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix lighting issues (#583)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308b40ac82a74541b23d2",
    "number": 576,
    "body": "The old fabric-content-registries-v0 module has now been deprecated in its entirety. In its place is fabric-content-registries-v1, with the old APIs rewritten (pretty much) from the ground up.\r\n\r\n### Old features rewritten:\r\n* FuelRegistry -> FuelItemRegistry\r\n* CompostingChanceRegistry -> CompostableItemRegistry\r\n* FlammableBlockRegistry -> FlammableBlockRegistry\r\n* LootTableTypeRegistry -> Was deprecated & moved to another module ages ago\r\n\r\n### New features:\r\n* TillableBlockRegistry\r\n* StrippableBlockRegistry\r\n* FlattenableBlockRegistry\r\n\r\n**Note:** The old .clear methods from Block/Item2ObjectMaps are now gone. I couldn't figure out a good use for them and they were a pain to implement across all registries. I spoke with asie about why they were added in the first place and he said possibly with tweaker mods in mind, but he wasn't sure. Either way, the functionality of restoring vanilla values seems like out of scope for Fabric API to me.\r\n\r\n**This PR passes checkLicense and checkstyle & conforms to the new module naming scheme (#575)**",
    "head_branch": "content-registry-v1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308b50ac82a74541b23d3",
    "number": 574,
    "body": "This will ensure mod auto update tools like Modsman know it's a Fabric jar.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Check the Fabric box when uploading to curseforge (#574)\n\n* Check the Fabric box when uploading to curseforge\r\n\r\nThis will ensure mod auto update tools know it's a Fabric jar.\r\n\r\n* Update cursegradle version"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308b60ac82a74541b23d4",
    "number": 568,
    "body": "Fixes #551\r\n\r\n- [x] Test in production environment with an actual mod using the api",
    "head_branch": "feature/attribute-registry",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Entity attribute registry (#568)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308b70ac82a74541b23d5",
    "number": 563,
    "body": "Closes #488.\r\n\r\nThis hook allows modders to register \"builtin renderers\" for their items, which can be used to render their items with custom code such as BERs.",
    "head_branch": "patch-10",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add a hook for BuiltinModelItemRenderer (#563)\n\n* Add builtin item renderers\r\n\r\nCloses #488.\r\n\r\n* Bump fabric-rendering-v1 to 1.0.0\r\n\r\n* Code review\r\n\r\n* Add comments\r\n\r\n* Code review II\r\n\r\nCo-authored-by: liach <liach@users.noreply.github.com>\r\n\r\n* Add missing license headers\r\n\r\n* Switch to ugly class singletons\r\n\r\n* Add null checks to BuiltinItemRendererRegistry.register\r\n\r\n* Protect against overwriting others' renderers by catching exceptions\r\n\r\nCo-authored-by: liach <liach@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662308b70ac82a74541b23d6",
    "number": 562,
    "body": "This was supposed to be a callback, but ~~I couldn't get it to work~~ I've realized that's probably highly unnecessary for this.\r\n\r\nThis PR adds a very simplistic (in both implementation and usage) average color lookup utility, that works with nothing but a Sprite (and sometimes an int). Most of it is documented, although briefly.\r\n\r\nHere's the thing in action:\r\n![image](https://user-images.githubusercontent.com/11313954/78988190-e3e45b00-7b38-11ea-9754-63aafaaa3c22.png)\r\n(The colors are off because RGB averaging favors darker colours, even in non-linear averaging. Hit me up if you'd prefer HSV.)\r\n![2020-04-10_14 17 31](https://user-images.githubusercontent.com/11313954/78988172-d7600280-7b38-11ea-852a-d5ebcdeac2d6.png)\r\n",
    "head_branch": "1.15.color-sniffer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308b80ac82a74541b23d7",
    "number": 559,
    "body": "This prevents incompatibility warnings about mod resource and data packs in 1.16 (pack version was bumped to 5) and it'll always automatically be the newest version.",
    "head_branch": "patch-9",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make resource-loader-v0's generated resource packs use the latest data version (#559)\n\nThis prevents incompatibility warnings about mod resource and data packs."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308b90ac82a74541b23d8",
    "number": 558,
    "body": "This is a simple backport of the tag from 1.16, hence why I used the minecraft namespace. It's meant to seamlessly transition 1.15 mods that need climbable blocks to using the tag for 1.16 because why not. You can be assured this code, however, is original and is not ripped straight out of Minecraft 1.16 (I did not look at Mojang's code beforehand) so there is no licensing issue here.\r\n\r\n**Note:** This module makes use of a new module naming scheme that I proposed as a compromise between using singular module names and using plural module names in packages. Please comment what you think about it.",
    "head_branch": "feature/climbable-api-v1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fabric-climbable-api-v1 - Re-implementing minecraft:climbable on 1.15 (#558)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308ba0ac82a74541b23d9",
    "number": 552,
    "body": "The reflection approach broke in 20w14a, and `FluidTags.getContainer` is public in 20w14a (and 1.15.2).\r\nThis PR's fix is also applicable to the `1.15` branch.",
    "head_branch": "fix/fluid-tags",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use public fluid tag container getter instead of reflection (#552)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308bb0ac82a74541b23da",
    "number": 550,
    "body": "Signed-off-by: liach <liach@users.noreply.github.com>\r\n\r\nFor a preview, should work in theory",
    "head_branch": "fix/javadoc-build",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix javadoc jar generation and javadoc building (#550)\n\n* Update build.gradle for testing\r\n\r\nSigned-off-by: liach <liach@users.noreply.github.com>\r\n\r\n* Fix javadocs\r\n\r\nSigned-off-by: liach <liach@users.noreply.github.com>\r\n\r\nCo-authored-by: liach <liach@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308bb0ac82a74541b23db",
    "number": 545,
    "body": "(I haven't tested it) (Maybe it's not the sole conflict with optifine pre10)",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308bc0ac82a74541b23dc",
    "number": 539,
    "body": "This migrates commands to v1 and makes some changes to the registration process of commands.\r\n\r\nCommands are registered in an event now. These changes now allow for listeners of the event to have a definite context about whether a server is an integrated server (when checking `!dedicated`).",
    "head_branch": "v0-v1/commands",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Migrate commands to v1 (#539)\n\n* Migrate commands to v1\r\n\r\n* Update fabric-commands-v1/src/main/resources/fabric.mod.json\r\n\r\nCo-Authored-By: liach <7806504+liach@users.noreply.github.com>\r\n\r\n* Update fabric-commands-v1/src/main/java/net/fabricmc/fabric/api/command/v1/CommandRegistrationCallback.java\r\n\r\nCo-Authored-By: liach <7806504+liach@users.noreply.github.com>\r\n\r\n* commands -> command and improved javadoc.\r\n\r\n* Fix the stragglers\r\n\r\n* swap dedicated and dispatcher params\r\n\r\n* Update fabric-command-v1/src/main/java/net/fabricmc/fabric/api/command/v1/CommandRegistrationCallback.java\r\n\r\nWhoops forgot that one\r\n\r\nCo-Authored-By: Juuxel <6596629+Juuxel@users.noreply.github.com>\r\n\r\n* module name order has been restored.\r\n\r\nCo-authored-by: liach <7806504+liach@users.noreply.github.com>\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662308bd0ac82a74541b23dd",
    "number": 538,
    "body": "An event for monitoring any entity's health being updated. \r\nReturns the entity's (new) health, but leaves tracking the difference in health and damage source to the dev. ",
    "head_branch": "EntityDamageEvent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308be0ac82a74541b23de",
    "number": 537,
    "body": "Supersedes #530 \r\n\r\nnow with a side of 1.16\r\n\r\n",
    "head_branch": "tempobjbuilder",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Object builders v0->v1 migration (#537)\n\n* Migrate object builders from v0 -> v1\r\n\r\n* Port entity attribute registry to v1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308bf0ac82a74541b23df",
    "number": 535,
    "body": "Relics of previous iterations of the particle API, changes were made to the API but not to the docs. This fixes that.",
    "head_branch": "particle-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix particle API javadocs (#535)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662308c00ac82a74541b23e0",
    "number": 534,
    "body": "As is tradition, particles require competing pull requests. This is an alternative to #527.\r\n\r\nThis implementation is simpler in the sense that it contains less logic duplicated from vanilla while still providing the full API introduced in #341. In some ways, this implementations bears similarities with #264. By staying closer to the vanilla particle system, this implementation also resolves the issue of sprites not being added to the particle texture atlas.\r\n\r\nThis simplification comes at the cost of some light reflection, which one could argue introduces a maintenance cost. However, I believe this implementation is more maintainable overall.\r\n\r\nThese changes were tested locally with a mod adding particles without issue.\r\n\r\n[Based on this comment.](https://github.com/FabricMC/fabric/pull/527#issuecomment-600353164)",
    "head_branch": "particles-redux",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Simplify fabric-particles-v1 and resolve sprites not being added to the particle sprite atlas (#534)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662308c10ac82a74541b23e1",
    "number": 533,
    "body": "Binary compatibility should be preserved despite the return type being changed. Callers expecting the old type will simply call the synthetic bridge override method.",
    "head_branch": "material-builder-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix FabricMaterialBuilder#notSolid returning the wrong builder type (#533)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308c10ac82a74541b23e2",
    "number": 531,
    "body": "Tiny pr to fix old yarn name.",
    "head_branch": "1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308c20ac82a74541b23e3",
    "number": 530,
    "body": "This migrates object builders to v1, only two things need some consideration:\r\n\r\nOld Registry events and whether we want to so some additional handling\r\n\r\nv0 FabricMaterialBuilder needs some additional consideration since it can't be easily delegated to the v1 classes like many of the other objects.\r\n\r\nThis is relevant to #305, #493 and #528.",
    "head_branch": "v0-v1/object-builders",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308c30ac82a74541b23e4",
    "number": 528,
    "body": "This PR completes the deprecation cycle on old methods, along with renaming\r\nothers to match their current Yarn names and adding methods that are present in EntityType.Builder but not FabricEntityTypeBuilder. The old names have been kept, but\r\nmarked as deprecated for removal.\r\n\r\n`setMaxDespawnDistance` does not have a Yarn name in EntityType.Builder and is\r\nstill unmapped. Its name was inferred from b7d52fa581a5166e6d80f5ea60ca0ff9ea5edebf.\r\n\r\nPlease note:\r\n`create(EntityCategory category, Function<? super World, ? extends T> function)`\r\nand `size(float width, float height)` had been deprecated for 13 months.\r\n\r\nEDIT: The idea of updating method names with deprecation comes from #415",
    "head_branch": "refactor/entitytypebuilder",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308c40ac82a74541b23e5",
    "number": 527,
    "body": "…e sprite sheet\r\n\r\nThe particles module should now handle custom sprite textures correctly. No need to mess with custom sprite sheets, or registering textures. The loader will itself pick up your particle's textures and insert them into the vanilla sprite sheet.\r\n\r\nOther than that, no mod code needs to be changed.\r\n\r\n<img src=\"https://cdn.discordapp.com/attachments/566276937035546624/688087173911675017/unknown.png\"></img>\r\n\r\nOther changes:\r\n - changed the sprites added by the test mod to show off the features a bit more\r\n - the custom one moves slower and will use a custom corn texture\r\n - the simple one looks like floating beef, using an item texture\r\n - changed the simple one to use the `ParticleTextureSheet.TERRAIN_SHEET` instead of the transparent one it had before (so now it actually renders properly)",
    "head_branch": "fix_particle_sprites_not_registering_1_15",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308c50ac82a74541b23e6",
    "number": 525,
    "body": "This is a proof of concept, and is here to try and get more feedback on fixing the unlaying issues. #507 is another possible solution.\r\n\r\nThis trys to detect if a registry is modded, if its not it will left alone and no syncing or saving will take place.\r\n\r\nI can see this incorrectaly NOT detecting a modded registry if a mod adds/edits the registries during Bootstrap under the `minecraft` namespace.\r\n\r\nIm not sure about getting the registry ids hashcode, this may not be needed.\r\n\r\nRight now if the registry is none modded nothing will happen, it wont sync or save, should it still sync?\r\n\r\nThis is a common issue that needs to be fixed, any input will be appricated.",
    "head_branch": "vanilla_registries",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix some known issues with the registry sync module. (#525)\n\n* Try to detect if a registry is modded, if its not it will left alone and no syncing or saving will take place.\r\n\r\n* Some more work on moddable registries\r\n\r\n* Checkstyle\r\n\r\n* Fix licences\r\n\r\n* Cleanup registry attributes\r\n\r\n* Rework again\r\n\r\n* Some small tweaks\r\n\r\n* Yet another refactor\r\n\r\n* Some minor style fixes\r\n\r\n* Finish checking registries\r\n\r\n* Start on a test mod, and apply some fixes.\r\n\r\n* Checkstyle fixes\r\n\r\n* Tweak the logic behind previously modded registries\r\n\r\n* Use EnumSet\r\n\r\n* Update fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\r\n\r\nCo-authored-by: liach <7806504+liach@users.noreply.github.com>\r\n\r\n* Fix generics, add javadoc, add tests\r\n\r\n* More changes\r\n\r\n* Checkstyle fixes\r\n\r\n* Minor fixes\r\n\r\n* Remove hash stuff\r\n\r\n* 20w21a - massive changes\r\n\r\n* fix build\r\n\r\n* Update fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\r\n\r\nCo-authored-by: Joseph Burton <burtonjae@hotmail.co.uk>\r\n\r\n* Feedback and update mappings\r\n\r\n* No longer apply mappings to vanilla registries, no longer save empty mapping data.\r\n\r\n* Use Identifier in FabricRegistryBuilder over RegistryKey\r\nImprove empty registry tag handling\r\n\r\n* Reorder toTag empty checks\r\n\r\n* Minor fixes\r\n\r\n* Make FabricRegistryBuilder final\r\n\r\n* Update registry attributes\r\n\r\n* Fix compile issue\r\n\r\nCo-authored-by: liach <7806504+liach@users.noreply.github.com>\r\nCo-authored-by: Joseph Burton <burtonjae@hotmail.co.uk>\r\nCo-authored-by: Player <player@player.to>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308c50ac82a74541b23e7",
    "number": 522,
    "body": "My last 2 DataFixer PRs had a major flaw: They were far too big. So this time I've decided to split up the process into more digestible bits. These pieces of the puzzle are the simplest to understand, so we start here.\r\n\r\nThis PR only includes:\r\nA way for mods to register a datafixer for.\r\n3 Simple fixes: Biome, Block and Item renames.\r\n\r\nMore advanced features will come in future PRs.\r\n\r\nThis supersedes #371 and #440",
    "head_branch": "datafixer3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308c60ac82a74541b23e8",
    "number": 521,
    "body": "This PR deprecates the old V0 `tag-extensions` module and replaces it with `fabric-tag-api-v1`\r\n\r\n~~This resolves #263~~\r\nExtra tag types sadly impose a client and server mod requirement which is unacceptable for vanilla clients. I will open up my own libraries or future pull requests to handle that special case later.",
    "head_branch": "feature/registry-tags",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308c70ac82a74541b23e9",
    "number": 520,
    "body": "",
    "head_branch": "wiggle_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix AttackBlockCallback being fired for incorrect player actions (#520)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308c80ac82a74541b23ea",
    "number": 518,
    "body": "gradlew is already executable 100755, so i only updated gradlew bat\r\n\r\nSigned-off-by: liach <liach@users.noreply.github.com>",
    "head_branch": "feature/chmod-set",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update checkstyle and change tab width to be 4 than 8 (#518)\n\n* Remove unnecessary chmod in travis script\r\n* Update checkstyle and fix indent config\r\n* Travis CI optimizations and checkstyle fixes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308c90ac82a74541b23eb",
    "number": 517,
    "body": "This player tracking module has a horrible name. Please suggest a better name for me (guess it can match the new api name pattern suggested in #575)",
    "head_branch": "feature/networking/util",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308ca0ac82a74541b23ec",
    "number": 508,
    "body": "This callback is fired when a player is respawned, this occurs either when a player dies and a new player entity is created, or for example a player returns from the end. In the vanilla game this would handle things such as learned recipes, advancements, Inventories (if the game rule is set) and spawn location (such as a bed).\r\n\r\nHowever some mods like to store extra details on the player entity, and these are lost when a player dies (for example a second ender chest like inventory). This Callback allows mods to be notified when a player respawns so this data can be transfered between the old and new ServerPlayerEntity. ",
    "head_branch": "feature/callbacks/player_death",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308ca0ac82a74541b23ed",
    "number": 507,
    "body": "This is a proof of conecpt fix for incorrect ids beind sent to a vanilla client.\r\n\r\nTo repoduce this:\r\n\r\n- Create a fabric server with fabric api on an older version such as 1.14.4\r\n\r\n- Move that world to a 1.15.2 fabric server with fabric api as well.\r\n\r\n- Login with a vanilla client and notice the issues.\r\n\r\nThis is caused by the new server using the old id map, and being unable to sync those ids to the vanilla client.\r\n\r\n![](https://i.imgur.com/b9QGVrx.png)\r\n\r\nThe current work around for this is to delete the fabricregistry.dat file. This has been reported many times on the discord and here #464 and #458 and #418 and #122 and possibly #14\r\n\r\nThis PR is more of a possible solution to this issue, and is not a full fix as it requires finding all the registrys that are not saved to disk using their ids. (Biomes are for example.)\r\n\r\nThere may be other solutions to this issue, but this seems the easyist. A lot of testing will need to be done before merging a fix like this in.",
    "head_branch": "registry_blacklist_save",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308cb0ac82a74541b23ee",
    "number": 505,
    "body": "Basically a redux of (#184) which has been rebased to 1.15 and made checkstyle complaint.\r\n\r\nOf course credit due to @Boundarybreaker who started this PR and @Pyrofab for the Cascading event impl.\r\n\r\nI haven't tested the test mod yet to be honest but I'll look at that tomorrow.",
    "head_branch": "feature/entity-tick-callback2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308cc0ac82a74541b23ef",
    "number": 504,
    "body": "",
    "head_branch": "travis",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add travis.yml file to build PRs, useful for ensuring that checkstyle passes (#504)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308cd0ac82a74541b23f0",
    "number": 503,
    "body": "This jar can be extracted once on the maven to be easily browseable from a normal web browser.\r\n\r\nOnly includes API classes.\r\n\r\nExample jar:\r\n[fabric-api-0.4.30+local-1.16-fatjavadoc.jar](https://ss.modmuss50.me/fabric-api-0.4.30%2Blocal-1.16-fatjavadoc.jar)\r\n\r\nOnline Example:\r\n[fabric-api-0.4.30+local-1.16-fatjavadoc](https://modmuss50.me/fabric-api-0.4.30+local-1.16-fatjavadoc/)",
    "head_branch": "fat_jd",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Publish a fat javadoc jar to maven (#503)\n\n* Publish a fat javadoc jar to maven\r\n\r\n* Cleanup"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308ce0ac82a74541b23f1",
    "number": 502,
    "body": "",
    "head_branch": "fix_501",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix ForwardingBakedModel not forwarding isSideLit. Closes #501 (#502)\n\n* Fix ForwardingBakedModel not forwarding isSideLit. Closes #501\r\n\r\n* Remove unused DamageModel\r\n\r\n* Bump version"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308ce0ac82a74541b23f2",
    "number": 500,
    "body": "Currently the renderer discards quads immediately if the baked model says they have a certain cull face, without giving potential transformers to change that information. This makes it impossible to rotate a model correctly since the old cull faces will still be used. This PR delays the cull face check until after the transformer pipeline has run.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Check cullface after transform"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308cf0ac82a74541b23f3",
    "number": 496,
    "body": "Add a new class and mixin to allow modders to inject their own biomes into the nether in a compatible manner.",
    "head_branch": "1.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Experimental nether biomes API (#496)\n\n* Add nether biomes API\r\n\r\n* Update fabric-biomes-v1.mixins.json\r\n\r\n* fixed license\r\n\r\n* smarter injection point\r\n\r\n* Apply suggestions from coderbot's review\r\n\r\nCo-Authored-By: coderbot16 <coderbot16@gmail.com>\r\n\r\n* fix code style\r\n\r\n* remove redundant import\r\n\r\n* improve docs and update yarn version\r\n\r\n* Apply suggestions from code review\r\n\r\nCo-Authored-By: coderbot16 <coderbot16@gmail.com>\r\nCo-Authored-By: Juuxel <6596629+Juuxel@users.noreply.github.com>\r\n\r\n* bump version\r\n\r\n* mark classes as final\r\n\r\n* Changes from modmuss's review\r\n\r\nadd 1.16 dependency, merge NetherBiomesImpl into InternalBiomeData, fix code style, and fix mixin target\r\n\r\n* Update build.gradle\r\n\r\n* Update API to inform users that it is experimental\r\n\r\n* remove beta annotion\r\n\r\n* optimize imports\r\n\r\nCo-authored-by: coderbot16 <coderbot16@gmail.com>\r\nCo-authored-by: Juuxel <6596629+Juuxel@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308d00ac82a74541b23f4",
    "number": 493,
    "body": "As a requirement for creating villager professions, we also expose allowing the creation of `PointOfInterestType`s for workstations.\r\n\r\n~~The PR also comes with some generic `TradeOffers.Factory`s for generation of some trades since mojang made these implementations `static` inner classes, though anyone could make their own trades just by implementing the api.~~\r\n\r\nI thought these additions would work best in the object builders module since this involves the creation of villager professions, point of interest types ~~and trade offer factories~~.",
    "head_branch": "feature/villager-professions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add object builders to simplify the process of creating Villager professions (#493)\n\n* Add Object builders for simplifying the process of creating villager professions and point of interest types.\r\n\r\n* Move everything to new object-builders-api\r\n\r\n* flatten a bit down\r\n\r\n* a few javadoc changes\r\n\r\n* More JD tweaks"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662308d10ac82a74541b23f5",
    "number": 491,
    "body": "Let's hope I didn't stuff up the merge: loom decided to not work, and I had to use the superior editor notepad++\r\n\r\n1.15 version of #369 ",
    "head_branch": "1.15-update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308d20ac82a74541b23f6",
    "number": 487,
    "body": "# fabric-crafting-v1\r\nThis PR covers 2 commonly asked for things:\r\n\r\n## ItemCraftCallback \r\nItemCraftCallback gets called when an item is crafted, this allows for the output stack to be manipulated.\r\n\r\n## FabricRecipeRemainder\r\nFabricRecipeRemainder is a stack based recipe remainder, this is most commonly used to allow items to be damaged when crafted.\r\n\r\nBoth of these apis have a nullable PlayerEntity, as these apis can be invoked via automated machines (Autocrafting table for example).\r\n\r\n## Current issues with the PR\r\nShift clicking an item out of the crafting table fires the event, but does not maintain the modified NBT.\r\n\r\nIf there is anything else around this area that may be a good fit for this module let me know. \r\n\r\nThanks in advance for the reviews.",
    "head_branch": "fabric-crafting-v1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308d30ac82a74541b23f7",
    "number": 484,
    "body": "The live version of `MixinClientPlayerInteractionManager` treats the return type of the Vanilla  `interactItem` method as a `TypedActionResult`, but it is really a `ActionResult`. This very fixes this issue and brings it in line with other methods in the same file such as `interactBlock`. This issue was first identified in #470 ",
    "head_branch": "1.15",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Resolve ClassCastException in UseItemCallback\n\nReturns ActionResult, not TypedActionResult"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308d30ac82a74541b23f8",
    "number": 483,
    "body": "",
    "head_branch": "1.15",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308d40ac82a74541b23f9",
    "number": 482,
    "body": "Not applying this causes certain environments (such as a local instance) to build artifacts in subdirectories with shortened names when the branch name contains a `/` such as `foo/bar`.\r\nA workaround was applied to the environment variable method by someone else--this PR copies that behavior for getting the branch name through grgit.",
    "head_branch": "fix/getbranch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Always only return the last part of a branch\nNot applying this causes certain environments (such as a local instance) to build artifacts in subdirectories with shortened names."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308d50ac82a74541b23fa",
    "number": 480,
    "body": "Fixes flower and other blocks always rendering in the center of the block.\r\n\r\nExample of the issue: \r\n![](https://cdn.discordapp.com/attachments/507982478276034570/660109963024400404/unknown.png)",
    "head_branch": "offset-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix render offset not being applied.\nFixes flower and other blocks always rendering in the center of the block"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308d60ac82a74541b23fb",
    "number": 479,
    "body": "- Un-hardcoded `World.isDay()` and `World.isNight()`. Instead of checking for the overworld, they check for a visible sky like clocks. The check is false for the nether and the end but true for the overworld, so vanilla behaviour stays the same.\r\n\r\n- ~~Vanilla only sets the world time in one dimension when players wake up in the morning. This is not a problem in vanilla, as that dimension is the overworld. The vanilla behaviour breaks sleeping in other dimensions, so I've added a loop going over modded dimensions and setting the time.~~\r\n  - Removed in 08ed96e because there are more changes needed for sleeping in other dimensions.",
    "head_branch": "patch-6",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308d60ac82a74541b23fc",
    "number": 478,
    "body": "As much as I love broken Finnish machine translations, it'd be nice to know what's wrong with the style.",
    "head_branch": "patch-7",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make checkstyle always use English"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308d70ac82a74541b23fd",
    "number": 461,
    "body": "In pull requests like #460, we observe a need for nullability annotations for the API.\r\n\r\nThis pull request adopts `org.checkerframework:checker-qual` annotation library, which has `@NonNull`, `@MonotonicNonNull` (reading is nullable, writing is non-null), and `@Nullable` annotations. This library also has abilities like defining array length, etc.\r\n\r\nSince this is a java 8 library, it can annotate on type use, such as `Supplier<@Nullable Entity>` declarations, which makes it even more useful.",
    "head_branch": "feature/checker-annotations",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308d80ac82a74541b23fe",
    "number": 460,
    "body": "Reimplementation of #352 on the 1.15 branch, now without merge conflicts!\r\n\r\nMoves the ToolManager and tool tags declared in fabric-mining-levels-v0 to a new fabric-tool-attributes-v1, along with adding new interfaces to be implemented on tools so that mining speed, mining level, and entity attribute modifiers can be decided by the itemstack.",
    "head_branch": "tool-attributes-115",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fabric-mining-levels-v0 -> fabric-tool-attribute-api-v1 (1.15 edition) (#460)\n\nMoves the ToolManager and tool tags declared in fabric-mining-levels-v0 to a new fabric-tool-attributes-v1, along with adding new interfaces to be implemented on tools so that mining speed, mining level, and entity attribute modifiers can be decided by the itemstack."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662308d90ac82a74541b23ff",
    "number": 459,
    "body": "Can be repoduced in java 13.0.1 with OpenJ9",
    "head_branch": "indigo_j9_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Work around odd crash in OpenJ9 due to an anonymous in a mixin."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308da0ac82a74541b2400",
    "number": 457,
    "body": "The build passes, no worries\r\n\r\nSigned-off-by: liach <liach@users.noreply.github.com>",
    "head_branch": "feature/tinyv2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update loom, use tinyv2 (for params/jd), update loader\n\nThe build passes, no worries\n\nSigned-off-by: liach <liach@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308db0ac82a74541b2401",
    "number": 455,
    "body": "This api, compared to the old one, has:\r\n\r\n- handling for login custom payload\r\n- clear receiver/sender split (receiver registration is generic and global while sender logic is split to each network handler)\r\n\r\nGoals:\r\n - Expose login custom payload sending/receiving (#164)\r\n - Add some networking events (partially covers #247)\r\n - Add utilities to handle packet byte bufs more easily\r\n - Split player stream into another module than pure networking (not related to custom-payload networking)\r\n - Replace all networking v0 api usages with networking v1 api usage in the current Fabric API.\r\n - Login protocol tweaks (vanilla protocol compatible, to make impl easier)\r\n   - Send a handshake packet for channel registration early so one side doesn't wait for the other side's register packet and get no reliable result.\r\n   - Send compression early before the custom login query request/responses\r\n\r\nNon-goals:\r\n - Won't add a handshaking system in the API itself in this pr\r\n    - The hooks for mods to add their custom handshaking system is ready though\r\n - Won't add other hooks to change the handshaking behavior (e.g. login time)\r\n - Won't tweak API to allow multiple receivers to handle a channel (open discussion if anyone wants, not the goal of this pr though)\r\n - Won't move current dim sync/registry sync packets to login handshaking\r\n   - Will do in a separate pr\r\n\r\nthis may allow us to move packets like mod handshake or registry sync to the login stage than the play stage of network.\r\n\r\nThis pr is now feature complete. \r\nFuture commits will only fix problems spotted by reviews, not change impl/add new features.\r\n(Of course, the network test mod will be removed prior to merge)",
    "head_branch": "feature/network-v1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308db0ac82a74541b2402",
    "number": 454,
    "body": "… didn't declare ability to receive the packet\r\n\r\nReplaces #426.\r\n\r\nSigned-off-by: liach <liach@users.noreply.github.com>",
    "head_branch": "feature/unhandled-channel",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308dc0ac82a74541b2403",
    "number": 450,
    "body": "1.15 extension of #260 due to butchered git history. See original PR for discussion & details.",
    "head_branch": "drop",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308dd0ac82a74541b2404",
    "number": 449,
    "body": "Extension of #260 built for the 1.15 branch. Everything from this PR is based on the discussion from the previous one. Tell me if I missed anything~",
    "head_branch": "pickup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308de0ac82a74541b2405",
    "number": 447,
    "body": "replaces #384\r\n\r\nSigned-off-by: liach <liach@users.noreply.github.com>",
    "head_branch": "feature/networking-entity",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308df0ac82a74541b2406",
    "number": 445,
    "body": "Signed-off-by: liach <liach@users.noreply.github.com>\r\n\r\nSupersedes #363",
    "head_branch": "feature/lifecycle-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308df0ac82a74541b2407",
    "number": 444,
    "body": "Closes #438.\r\n\r\nAdds three utility methods to `BlockRenderLayerMap`: `putBlocks`, `putItems` and `putFluids`, which set the render layer of multiple entries with a single call.",
    "head_branch": "patch-5",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308e00ac82a74541b2408",
    "number": 443,
    "body": "Updates the ItemRenderContext and related mixin to correctly select vertex consumer for modded models.  Bonus is that emissive rendering and cutout layers should now render correctly in an item context.",
    "head_branch": "indigo-1.15-pre-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix gui item rendering (issue #412 PR #443)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308e10ac82a74541b2409",
    "number": 442,
    "body": "",
    "head_branch": "1.15",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix BER registration accessing dispatcher instance through uninitialized\nfield"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308e20ac82a74541b240a",
    "number": 440,
    "body": "This is meant to be a replacement to #371 due to 1.15 conflicts being so great. All that needs to be done is some wiki writing and addition of the rest of ModDataVersion entiries being added into NBT tags where nessecary. ",
    "head_branch": "pr/datafixer/1.15",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308e30ac82a74541b240b",
    "number": 435,
    "body": "Got 1.14_combat-3 snapshot to work; it seems like the only issue was that `EntityHitResult` has a new int parameter. I don't know what the new parameter does-- it seems to be related to the distance between entity A and B, but it's stuck inside a lot of unmapped parameters, so I can't fully figure it out. Regardless, no mod would rely on this parameter (and it's not present in 1.15), so I am simply passing 0 for now.\r\n\r\nNot sure where this would go; if you don't want it on the main repo, I can certainly host the branch somewhere else and build a jar for it.\r\n\r\nIn response to #432.",
    "head_branch": "1.14-combat3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308e30ac82a74541b240c",
    "number": 434,
    "body": "`nonOpaque` is a new method in `Block.Settings` which is used for stuff like glass and ice. The method is public, but it should still be in `FabricBlockSettings` for consistency. ",
    "head_branch": "blocksettings-opaque",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add nonOpaque to FabricBlockSettings (#434)\n\n* add nonOpaque FabricBlockSettings builder method\r\n\r\n* module version bump (0.1.2 -> 0.1.3)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308e40ac82a74541b240d",
    "number": 430,
    "body": "In 1.15 snapshots, `BlockEntityRender` registration was changed a small bit. You now have to access `BlockEntityRenderer.INSTANCE` and pass it up in your BER class.\r\n\r\nThis has a small side effect: when mods reference the `INSTANCE` field, the Piston BER is initialized. This happens _before_ `MinecraftClient`'s instance of `BlockRenderManager` is initialized, and the piston renderer class saves said instance on creation. \r\n\r\nThis means: when pistons attempt to render after being powered, they will crash the game, assuming another mod is present that registers a BER.\r\n\r\nThis patch simply double-checks the manager in the piston class isn't null before using it (and initializes it if it's not). As far as I can see, there aren't any other usages that would break under the same circumstances.",
    "head_branch": "ber-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308e50ac82a74541b240e",
    "number": 426,
    "body": "Replaces #425\r\n\r\nSigned-off-by: liach <liach@users.noreply.github.com>",
    "head_branch": "feature/unhandled-channel-warning",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308e60ac82a74541b240f",
    "number": 425,
    "body": "Resolves #424 \r\n\r\nSigned-off-by: liach <liach@users.noreply.github.com>",
    "head_branch": "feature/optional-packet-send-14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308e70ac82a74541b2410",
    "number": 423,
    "body": "This should fix https://github.com/FabricMC/fabric/issues/419\r\n\r\nA likely better yet more involved way to do this is having a direct reference to the target tag in the delegate and clearing this reference whenever tags get reloaded. This may be attempted in a future PR.",
    "head_branch": "1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Fabric-side thread safety for Tags obtained from TagRegistry"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662308e70ac82a74541b2411",
    "number": 422,
    "body": "also fix #421\r\n\r\nNeeds testing, so marking this as a draft for now.\r\n\r\nSigned-off-by: liach <liach@users.noreply.github.com>",
    "head_branch": "fix/tag-ref",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308e80ac82a74541b2412",
    "number": 417,
    "body": "It's about time we get a proper README. Suggestions welcome.",
    "head_branch": "readme",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308e90ac82a74541b2413",
    "number": 416,
    "body": "As described in #410, we have a problem with the registry sync packet being too large. Specifically, the NBT compound that contains the whole state that is sent to the client can be too large to deserialize. The registries must be very bloated for this to be a problem, but we have seen that it can happen in certain setups.\r\n\r\nThis packet is compressible, and compressing it should be beneficial even if the registries aren't excessively large. This reduces the size of the \"vanilla\" registry sync message by an estimated 45%, and in a specific modded case reduces it by an estimated 40%. It should also avoid the exception described in the issue. However, we will not have backward compatibility until we can actually perform some sort of handshake.\r\n\r\nInstead of using NBT, this uses the byte buffer directly, which avoids some overhead both in processing and in raw byte size, and allows some compression tricks to improve it even further.\r\n\r\nThis proposed solution uses some assumptions about the state of the registries, namely:\r\n\r\n1. Registry objects are grouped into a few namespaces where each namespace generally has multiple objects. Generally, each mod places multiple objects into its own one namespace.\r\n2. The raw IDs of objects within a namespace are somewhat densely packed. Generally, mods register objects in bulks under the same namespace, where objects in a bulk are assigned raw IDs in series.\r\n\r\nFor each registry, registry objects are grouped by namespace so that the namespace string does not have to be re-written for each object in the namespace. The objects within each namespace are written in ascending order of raw IDs. The raw IDs within a group are written with differential encoding using varints.\r\n\r\nNote that vanilla will by default compress messages using a Deflater. I have been unable to measure the true compressed size, but I have manually deflated the packets and measured their length which should be equivalent.\r\n\r\n| Packet | Raw size (bytes) | Deflated size (bytes) |\r\n| - | ---: | ---: |\r\n| Vanilla 19w44a (Old) | 105805 | 27219 |\r\n| Vanilla 19w44a (New) | 57283 | 15030 |\r\n| Vanilla 19w44a + Painting Mod (Old) | 322399 | 66795 |\r\n| Vanilla 19w44a + Painting Mod (New) | 185099 | 39566 |\r\n\r\nIt is a bit tricky to measure this with mods when targeting 19w44a, as many mods have not been updated, but I tested with Painting Mod, which is notorious for filling the registries.\r\n\r\nNote that the differential encoding doesn't affect the raw byte size that much, but without it, deflate is less effective.",
    "head_branch": "registry-sync-compression",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308ea0ac82a74541b2414",
    "number": 415,
    "body": "",
    "head_branch": "1.15",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308eb0ac82a74541b2415",
    "number": 414,
    "body": "This targets another frequently missed review item, the package structure.\r\n\r\nThe formalized structure in accordance with the existing majority status-quo is:\r\n```\r\nbase package name: net.fabricmc.fabric\r\n+ api/implementation/mixin subpackage: api/impl/mixin\r\n+ client/dedicated server/common env subpackage: client/server/<nothing>\r\n+ module name subpackage, singular, may contain multiple .-separated parts\r\n+ api only: module major version with v prefix (e.g. v1)\r\n+ other subpackages as needed, all singular\r\n```\r\n\r\nSince API packages can't be changed after the fact due to compatibility concerns, I've restricted edits to impl+mixin code and whitelisted the legacy api packages in the checkstyle.xml regex.\r\n\r\nThe regex can't verify that the module name matches the package, this still needs to be checked in reviews.",
    "head_branch": "checkstyle",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add checkstyle verification for package names, fix non-API packages."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662308ec0ac82a74541b2416",
    "number": 413,
    "body": "This PR adds a checkstyle configuration similar to the existing code, adds it to gradle for automatic verification and modifies the existing code to be compliant.\r\n\r\nMost notably the following stylistic choices were nailed down and had broader impact:\r\n- don't indent labels (especially switch-case)\r\n- indent continued lines twice (disambiguates)\r\n- add blank lines before and after block statements if there is no indentation level change\r\n- reorder imports with the following blank like separated groups according to their proximity/dep order: java, javax, (other), net.minecraft, net.fabricmc\r\n- replace wildcard imports with concrete imports\r\n\r\nSome modules were converted from spaces to tabs. A lot of JavaDoc had to be fixed.\r\n\r\nThe existing code has been adjusted manually to avoid changing formatting that wasn't covered. There should be no functional changes, only redundancy removal, whitespace replacing, import reordering and minor JavaDoc editing.\r\n\r\nIDE plugins for checkstyle work great and are highly recommended!",
    "head_branch": "checkstyle",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add checkstyle, format existing code accordingly. (#413)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662308ec0ac82a74541b2417",
    "number": 409,
    "body": "In 19w42a new class (class_4699) that contains 3 maps for Item, Block and Fluid RenderLayers.\r\nBefore these maps were in the RenderLayer class causing them to be populated well before this API had a chance to get to handling the consumers.\r\n\r\nI have tweaked the impl to handle RenderLayers being added before initialize is called and after, this removes the need to ensure the class load order is correct.",
    "head_branch": "renderlayer-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix BlockRenderLayerMapImpl no longer working in 19w42a. Move some LOG.warns to InvalidParameterException (#409)\n\n* Fix BlockRenderLayerMapImpl no longer working in 19w42a. Move some LOG.warns to InvalidParameterException\r\n\r\nIn 19w42a new class (class_4699) that contains 3 maps for Item, Block and Fluid RenderLayers.\r\nBefore these maps were in the RenderLayer class causing them to be populated well before this API had a chance to get to handling the consumers.\r\n\r\nI have tweaked the impl to handle RenderLayers being added before initialize is called and after, this removes the need to ensure the class load order is correct.\r\n\r\n* quick cleanup\r\n\r\n* InvalidParameterException -> IllegalArgumentException\r\n\r\n* Move to single lines + add a blank line"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308ed0ac82a74541b2418",
    "number": 406,
    "body": "19w42a now applies a matrix transformation to vertex normals in both block and item rendering.  The normals are apparently used by the block breaking render (along with an extra UV vertex element) to correctly map the breaking texture coordinates.  \r\n\r\nThis change was probably part of a fix for the breaking textures that would float when the player moved in prior snapshots.\r\n\r\nIndigo now applies the matrix to vertex normals. \r\n\r\nSadly, diffuse shading in GUI item rendering is incorrect for models with blended vertex normals, but that appears to be for unrelated reasons and won't be addressed right now.  (Will post an issue.)\r\n\r\nLastly, the latest changes suggest additional opportunities for simplifying the Indigo implementation, but would prefer to wait until 1.15 rendering is more stable for before investing that time\r\n![2019-10-17_19 17 37](https://user-images.githubusercontent.com/6106235/67061325-d1064600-f114-11e9-86ac-df097841fdde.png)\r\n.",
    "head_branch": "19w42a-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix breaking render for API models (#406)\n\n* Fix breaking render for API models\r\n\r\n* Bump versions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308ee0ac82a74541b2419",
    "number": 405,
    "body": "Mojang moved matrix translation setup for chunk position up the stack into the methods that call `tesselateBlock.`  Indigo still applies the matrix to vertex data but the translation setup logic was removed.",
    "head_branch": "19w42a",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix indigo rendering in 19w42a (#405)\n\n* Fix indigo rendering in 19w42a\r\n* Prevent crashes for modded item rendering\r\n\r\nVertexConsumer now thows unless all vertex elements are populated.  Overlay UV coordinates are thus required for block breaking, item glint, etc.  Block breaking doesn't seem to work fully for non-vanilla models, but cause isn't yet clear."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308ef0ac82a74541b241a",
    "number": 404,
    "body": "Originally part of #383, but it turns out I need to use this elsewhere, so I am pulling this out early.\r\n\r\nExample usage: https://github.com/FabricMC/fabric/pull/383/files#diff-702c12488002da9a8842a6c40eef956dR36-R42 (allow generic callbacks)\r\nExample usage 2: https://github.com/liachmodded/cartprotocol/blob/4fa341e55b44c73ade63c05668a2a301800ff7b2/src/code/java/com/github/liachmodded/cartprotocol/api/event/EventTools.java#L27\r\n(Can remove that cast and suppress warnings once this pr is accepted)\r\n\r\n@sfPlayer1 This pr should be backward compatible bytecode wise and compilation wise so I hope you can consider this and merge this. It would be very helpful if you do merge this pull request.\r\n\r\nAlso a cherry pick to 1.14 should be easy as well.\r\n\r\nSigned-off-by: liach <liach@users.noreply.github.com>",
    "head_branch": "feature/generic-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allows generic event declaration\n\nSigned-off-by: liach <liach@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308f00ac82a74541b241b",
    "number": 394,
    "body": "Bring up to date with 1.14 branch and fix disabled renderer features",
    "head_branch": "dev-1.15",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "1.14 Updates and Render Fixes (#394)\n\n* Fix EntityRenderDispatcher hook (again)\r\n\r\n* Add fabric-particles-v1\r\n\r\n* Add a sync() method to BlockEntityClientSerializable\r\n\r\n* Prevent CME due to off-thread block entity updates (#367)\r\n\r\n* Restore rendering features disabled in first 19w39a release\r\n\r\n* Remove rendering stuffs no longer needed due to snapshots\r\n\r\n* Bump versions as needed"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308f00ac82a74541b241c",
    "number": 393,
    "body": "",
    "head_branch": "19w39a-render-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "19w39a render fixes (#393)\n\n* Fix terrain rendering\r\n\r\n* Fix item rendering\r\n\r\n* Fix EntityRenderDispatcher injection crash (again)\r\n\r\n* Bump versions as needed\r\n\r\n* Remove stuff no longer needed due to snapshots"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662308f10ac82a74541b241d",
    "number": 392,
    "body": "Fixes #389",
    "head_branch": "dev-1.15",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix EntityRendererRegistry crashes (#392)\n\n* Move EntityRenderDispatcher init hook (#390)\r\n\r\nFixes FabricMC/fabric#389\r\n\r\n* Bump API patch version\r\n\r\n* Bump renderer registries patch version"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308f20ac82a74541b241e",
    "number": 391,
    "body": "",
    "head_branch": "dev-1.14",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Particle API, BlockEntitySerializable.synch() and various fixes (#391)\n\n* Added fabric-particles-v1\r\n\r\n* Create an example mod for creating particles\r\n\r\n* Add a sync() method to BlockEntityClientSerializable\r\n\r\n* Attempt to prevent CME due to off-thread block entity updates (#367)\r\n\r\n* Bump API version"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662308f30ac82a74541b241f",
    "number": 390,
    "body": "This PR fixes entity renderer registration by putting the EntityRendererRegistry initialization hook where the vanilla renderers are registered. Specifically, it registers modded renderers right after the method where most vanilla renderers are registered, but before the player renderer is registered.",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Move EntityRenderDispatcher init hook (#390)\n\nFixes FabricMC/fabric#389"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308f40ac82a74541b2420",
    "number": 387,
    "body": "",
    "head_branch": "19w39a-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "19w39a fixes (#387)\n\n* Clean up blockrenderlayer implementation package name\r\n\r\n* Remove broken parts of rendering, bump major version\r\n\r\n* Add renderer-registries, replaces broken parts of rendering api\r\n\r\n* Slap a band-aid on renderer/Indigo - won't render properly, but runs\r\n\r\n* Bump distribution versions, add renderer-registries"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662308f50ac82a74541b2421",
    "number": 386,
    "body": "Feedback wanted on `BlockEntityRendererRegistry`\r\n\r\nRender fixes are still to be done.",
    "head_branch": "wip-19w39a",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Wip 19w39a (#386)\n\n* 19w39a fixes (#387)\r\n\r\n* Bump versions\r\n\r\n* Breaks: BlockEntityRendererRegistry and EntityRendererRegistry\r\n\r\n* Remove broken parts of rendering, bump major version\r\n\r\n* Add renderer-registries, replaces broken parts of rendering api\r\n\r\n* Slap a band-aid on renderer/Indigo - won't render properly, but runs\r\n\r\n* Bump distribution versions, add renderer-registries to main build\r\n\r\n* Clean up blockrenderlayer implementation package name"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308f50ac82a74541b2422",
    "number": 384,
    "body": "I added a new module called fabric-networking-entity-v1 (I did this specifically because fabric-networking-blockentity-v0 was already a thing) which adds a simple mixin into `ClientPlayNetworkHandler::onEntitySpawn` to sync custom non-living entities to the client. This seems to properly sync non-living entities just fine, as evidenced from my own testing here https://github.com/Zundrel/Ollivanders-Fabric (at that repo I have a particularly ugly MixinServerChat class, that'll be changed to not use `@Overwrite` soon).\r\n\r\nI first `@Inject` into onEntitySpawn from HEAD and set a local variable to the packet in the arguments of onEntitySpawn. I had to do this because `@ModifyVariable` methods are only allowed to have a single argument, which is the previous instance of the variable you are changing, so I could not access the packet otherwise. I then used `@ModifyVariable` to modify the variable where the variable is set to null and set it to an Entity instance created by the EntityType.\r\n\r\nThe large advantage of doing things this way is that Vanilla behavior is relied on entirely UNLESS the method reaches a point that it still isn't a vanilla entity. This means that there is no way that vanilla behavior can be modified by this Mixin.\r\n\r\nThis will likely change drastically over time.",
    "head_branch": "entity_syncing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308f60ac82a74541b2423",
    "number": 383,
    "body": "Now always show mod resource packs in resource pack list so users can order them\r\n\r\nNote: This pr covers #79 and #124 as well.\r\n\r\nSigned-off-by: liach <liach@users.noreply.github.com>",
    "head_branch": "feature/resource-pack-container-creator",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308f70ac82a74541b2424",
    "number": 382,
    "body": "Currently BlockEntityClientSerializable is missing a clear and side-effect-free way to trigger the actual sync. Marking the block for update on the world itself causes mobs to re-path around the block, so we let the ServerChunkManager know (in the future we might perhaps map `method_14178` as `getServerChunkManager`, as it's a casted version of `getChunkManager`).\r\n\r\nThis is the sync method working in https://github.com/CottonMC/UnitedConveyors/blob/master/src/main/java/io/github/cottonmc/conveyors/ConveyorBlockEntity.java#L227-L231",
    "head_branch": "1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #382 from falkreon/1.14\n\nAdd a sync() method to BlockEntityClientSerializable"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662308f80ac82a74541b2425",
    "number": 380,
    "body": "Replaced all usage of reflection with mixin accessors except the last one in a deprecated class\r\n\r\nkeybinding and loot table receive bump version because they have some interface changes; version for biome api stays as only its impl detail changed.\r\n\r\nSigned-off-by: liach <liach@users.noreply.github.com>",
    "head_branch": "tweak-loot-table",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308f90ac82a74541b2426",
    "number": 376,
    "body": "This PR cleans up and simplifies the rendering codebase in anticipation of additional rendering changes in the 1.15 snapshots. It introduces no new features.\r\n\r\nSpecific changes include:\r\n\r\n- Make whitespace more consistent with Fabric norms\r\n- Remove implementation of disabled multi-sprite quad feature\r\n- Simplify quad header encoding - most attributes are now directly encoded to array data\r\n- Simplify material encoding - exploiting low number of possible materials\r\n- Add minimal validations related to sprite index\r\n- Codify magic numbers and make derivations more clear/explicit\r\n- Fix defect #374 \r\n\r\nTo review functional changes more easily see these individual commits:\r\n[`Codify constants and improve constant derivations`](https://github.com/FabricMC/fabric/commit/d6ba53209e0694826f79e52a8b66e4fca28883c6)\r\n[`Simplify quad encoding - persist directly to array when practical`](https://github.com/FabricMC/fabric/commit/24ac8357dcd73af5c842ce2a91d7343658d386a1)\r\n[`Handle unsupported sprite index values`](https://github.com/FabricMC/fabric/commit/2797caf611fcc86e9d514ee8e6a5ece9b54e48e9)\r\n[`Codify vanilla strides and ensure consistency`](https://github.com/FabricMC/fabric/commit/08becfbb433189e75d5e7a292e8198722c39e8c7)\r\n",
    "head_branch": "1_15_indigo_cleanup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "1.15 Rendering Cleanup (#376)\n\n* Make whitespace more consistent with Fabric norms\r\n* Remove implementation of disabled multi-sprite quad feature\r\n* Simplify quad header encoding - most attributes are now directly encoded to array data\r\n* Simplify material encoding - exploiting low number of possible materials\r\n* Add minimal validations related to sprite index\r\n* Codify magic numbers and make derivations more clear/explicit\r\n* Fix defect #374\r\n* Bump patch versions\r\n* Use unmodified vanilla AO calculator"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308fa0ac82a74541b2427",
    "number": 373,
    "body": "Most of this is a straightforward merge of the just-added Dimension API from the 1.14 branch to the 1.15 branch.\r\n\r\nHowever, DimensionType has a new biome-related function in the constructor.  I added a new builder attributed and patched in a default to make it run, but someone with more depth in biomes and dimensions should evaluate this before it is merged.\r\n\r\nPlease feel welcome to fork my code and submit a new PR if that is more convenient.",
    "head_branch": "dim_merge_1_15",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Bring dimension API to 1.15 branch (#373)\n\n* Update versioning to match 1.15 branch\r\n\r\n* Fix builtin mods being added as resource packs\r\n\r\n* Update fabric-loader to replace deprecated methods\r\n\r\n* Add more metadata to the modules (#353)\r\n\r\n* Add fabric-api-base as a dep to fabric-networking-v0\r\n\r\n* Allow for running fabric-api-base on the server-side environment (#360)\r\n\r\n* Set curse version to 1.14.4\r\nAlso forces it to build again\r\n\r\n* Fix NPE in fluid renderer mixin (#361)\r\n\r\n* Fix NPE in fluid renderer mixin\r\n* Ensure state, view, and pos are never null\r\n* Bump fabric-rendering-fluids-v1 version\r\n\r\n* Cooler dimension API, #309 (#319)\r\n\r\n* pyro API\r\n\r\n* Update fabric-dimensions-v1/src/main/java/net/fabricmc/fabric/api/dimension/EntityPlacer.java\r\n\r\nclarify portalDir param\r\n\r\nCo-Authored-By: Pyrofab <redstoneinfire@gmail.com>\r\n\r\n* Update fabric-dimensions-v1/src/main/java/net/fabricmc/fabric/api/dimension/EntityPlacer.java\r\n\r\nrename & clarify verticalOffset param\r\n\r\nCo-Authored-By: Pyrofab <redstoneinfire@gmail.com>\r\n\r\n* Update fabric-dimensions-v1/src/main/java/net/fabricmc/fabric/api/dimension/FabricDimensions.java\r\n\r\nCo-Authored-By: Pyrofab <redstoneinfire@gmail.com>\r\n\r\n* Update fabric-dimensions-v1/src/main/java/net/fabricmc/fabric/api/dimension/EntityPlacer.java\r\n\r\nCo-Authored-By: Pyrofab <redstoneinfire@gmail.com>\r\n\r\n* update parameter\r\n\r\n* Add fabric-networking and fabric-registry-sync to dependencies\r\n\r\n* Refactor FabricDimensionType to use a builder\r\n\r\nAlso adds a desiredRawId field separate from the actual raw\r\nid fixed internally. The fixedRawId field is now set by\r\nDimensionIdsFixer through reflection.\r\nThis change addresses concerns about the ability for any mod\r\nto set a FabricDimensionType's raw id at any time.\r\n\r\n* Improve javadoc of FabricDimensions#teleport\r\n\r\n* Add an overload for FabricDimensions#teleport\r\n\r\n* Update javadoc on DimensionIdsFixer\r\n\r\n* Inline clientside packet handling\r\n\r\n* Add side assertions to FabricDimensions#teleport\r\n\r\n* Nuke minecraft's attempts to overwrite bad level properties\r\n\r\n* Add license headers\r\n\r\n* Reformat dimension API source code\r\n\r\n* Update FabricDimensionType javadoc\r\n\r\n* Remove redundant ThreadLocal from FabricDimensionInternals\r\n\r\n* Fix crash on dedicated servers\r\n\r\n* Fix Illegal Access during remapping\r\n\r\n* Fix dimension remap exception propagation\r\n\r\n* clarify EntityPlacer docs\r\n\r\n* spacing fixes\r\n\r\n* api.dimension -> api.dimension.v1\r\n\r\n* Increment API patch version\r\n\r\nSignifies inclusion of new Dimension API\r\n\r\n* Partial fix to FabricDimensionType\r\n\r\n* Bump dimension version\r\n\r\n* Updates based on feedback"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308fb0ac82a74541b2428",
    "number": 371,
    "body": "Adds new API module fabric-datafixer-v1\r\nAdds a SimpleFixes class full of common datafixes such as renaming blocks, items, entities, biomes.\r\nAdds a DataFixerHelper method to help register the DataFixer.\r\n\r\n### TODO:\r\nFully Implement saving mechanism to store mod's DataVersion within world save data, ditermine where and where this isn't necessary.\r\n\r\nTest mod to verify DataFixing works. (Blocks and items work). Will be integrated into Test mods near release.\r\n\r\nTutorial page on wiki (The documentation Mojang should have written). \r\nBasically two tutorials:\r\n\r\nHow to use the simple DataFixes.\r\nHow to make your own DataFixes.\r\n\r\n### WIP:\r\n\r\nWriting Wiki Articles: \r\nA draft is here, will not be final: https://gist.github.com/i509VCB/f31ceab03730ecd8f936451d52ace810\r\n\r\nFixing (Block)Entities. Schema system is done, just need to verify it works and test it.",
    "head_branch": "datafixer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308fc0ac82a74541b2429",
    "number": 370,
    "body": "Fixes obvious breaks, mostly in rendering.\r\nSome additional refactoring is merited - not done in interest of speed.\r\n\r\nDeferred\r\n- In-depth feature testing - more breaks are expected week-to-week\r\n- Performance testing / optimizations\r\n- Aforementioned refactors - mostly culling unused features, magic numbers, other cruft removal",
    "head_branch": "19w38b-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "19w38b API Fixes (#370)\n\n* Fix compilation errors (untested)\r\n\r\n* Random fixes\r\n\r\n* Various modded rendering fixes\r\n\r\n* Restore contract of RenderAttachedBlockView\r\n\r\n* Bump versions as needed\r\n\r\n* Add API for BlockRenderLayer\r\n\r\n* Minor format / name cleanup\r\n\r\nWill do a more comprehensive pass as part of separate refactor PR\r\n\r\n* Bump versions not handled earlier\r\n\r\n* Bump loader/mc bounds for dependent modules\r\n\r\n* Update fabric-blockrenderlayer-v1/src/main/java/net/fabricmc/fabric/impl/blockrenderlayer/v1/BlockRenderLayerMapImpl.java\r\n\r\nCo-Authored-By: liach <7806504+liach@users.noreply.github.com>\r\n\r\n* Update fabric-blockrenderlayer-v1/src/main/java/net/fabricmc/fabric/impl/blockrenderlayer/v1/BlockRenderLayerMapImpl.java\r\n\r\nCo-Authored-By: liach <7806504+liach@users.noreply.github.com>\r\n\r\n* Minor clean ups\r\n\r\n* Improve docs, minor format corrections.\r\n\r\n* Update MC dependency"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308fd0ac82a74541b242a",
    "number": 369,
    "body": "**Adds methods for:**\r\n  - **Large edges**, which use a bipredicate of the bordering biome (for each bordering biome) and randomness source, and a weight.\r\n       - The mixin for this is targeted at _EaseBiomeEdgeLayer_\r\n  - **Sub Biomes**, which work like variants, but at the same scale that sunflower plains are added\r\n       - The mixin for this is targeted at _AddSunflowerPlainsLayer_\r\n",
    "head_branch": "1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308fd0ac82a74541b242b",
    "number": 367,
    "body": "Attempt to fix #366 \r\n\r\nTest build is [here](https://github.com/grondag/fabric/releases/download/Fix366Test1/fabric-rendering-data-attachment-v1-0.1.1+1436934f42.jar).  \r\n\r\nThe crash is intermittent and doesn't happen for everyone, so this should not be merged until we get some field reports to indicate that it works.\r\n",
    "head_branch": "RenderDataCmeFix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Attempt to prevent CME due to off-thread block entity updates (#367)\n\n* Attempt to prevent CME due to off-thread block entity updates\r\n\r\n* Use Player's ugly but expedient solution"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308fe0ac82a74541b242c",
    "number": 365,
    "body": "Changed the use item callback to always return a typed action result (which now includes hand swing info for client after the latest 19w37a update)\r\n\r\nSigned-off-by: liach <liach@users.noreply.github.com>",
    "head_branch": "fix/364",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update UseItemCallback to 19w37a\n\n* A fix for #364\r\n\r\nSigned-off-by: liach <liach@users.noreply.github.com>\r\n\r\n* Version to 0.2.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662308ff0ac82a74541b242d",
    "number": 363,
    "body": "I am actually not sure if we want the disposal events of worlds... maybe we can change to save event for server and drop the one for the client\r\n\r\nOn a side note, the resource reload post event can cover #262's need",
    "head_branch": "feature/server-lifecycle",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309000ac82a74541b242e",
    "number": 361,
    "body": "Fixes potential NPE when rendering non-vanilla fluids.",
    "head_branch": "1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix NPE in fluid renderer mixin (#361)\n\n* Fix NPE in fluid renderer mixin\r\n* Ensure state, view, and pos are never null\r\n* Bump fabric-rendering-fluids-v1 version"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309010ac82a74541b242f",
    "number": 360,
    "body": "I suppose that `fabric-api-base` has been mistakenly configured to run only on the client-side. It causes ClassNotFoundException on the server-side:\r\n\r\n```\r\n[21:43:39] [main/INFO]: Loading for game Minecraft 1.14.4\r\n[21:43:40] [main/INFO]: [FabricLoader] Loading 28 mods: minecraft@1.14.4, fabric-renderer-api-v1@0.1.1+591e97ae42, fabric-networking-blockentity-v0@0.1.1+591e97ae42, fabric-keybindings-v0@0.1.1+591e97ae42, fabricloader@0.6.1+build.165, fabric-renderer-indigo@0.1.13+591e97ae42, fabric-containers-v0@0.1.2+591e97ae42, fabric-biomes-v1@0.1.0+591e97ae42, fabric-events-interaction-v0@0.1.1+591e97ae42, fabric-crash-report-info-v1@0.1.1+591e97ae42, fabric-api-base@0.1.0+591e97ae42, fabric-rendering-v0@0.1.1+591e97ae42, fabric-rendering-data-attachment-v1@0.1.0+591e97ae42, fabric-resource-loader-v0@0.1.3+591e97ae42, fabric-textures-v0@0.1.4+591e97ae42, fabric-content-registries-v0@0.1.1+591e97ae42, fabric-tag-extensions-v0@0.1.1+591e97ae42, fabric-rendering-fluids-v1@0.1.1+591e97ae42, fabric-commands-v0@0.1.1+591e97ae42, fabric-registry-sync-v0@0.2.2+591e97ae42, fabric-mining-levels-v0@0.1.0+591e97ae42, fabric-events-lifecycle-v0@0.1.1+591e97ae42, fabric-loot-tables-v1@0.1.0+591e97ae42, fabric@0.3.2+build.220-1.14, fabric-item-groups-v0@0.1.0+591e97ae42, fabric-models-v0@0.1.0+591e97ae42, fabric-object-builders-v0@0.1.1+591e97ae42, fabric-networking-v0@0.1.3+591e97ae42\r\n[21:43:40] [main/INFO]: SpongePowered MIXIN Subsystem Version=0.7.11 Source=file:/opt/minecraft/server/1.14.4-fabric/fabric-server-launch.jar Service=Knot/Fabric Env=SERVER\r\n[21:43:40] [main/INFO]: Compatibility level set to JAVA_8\r\n[21:43:41] [main/WARN]: Error loading class: net/fabricmc/fabric/api/event/Event (java.lang.ClassNotFoundException: net/fabricmc/fabric/api/event/Event)\r\n```\r\n\r\nSo this patch fixes `fabric-api-base` to run on the server-side.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow for running fabric-api-base on the server-side environment (#360)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309010ac82a74541b2430",
    "number": 359,
    "body": "This will aid mods adding text/stuff on-screen (either maybe those tiny hud mods where you can see fps without f3)\r\n\r\nalso bumped module version",
    "head_branch": "a",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fabric-rendering-v1 module & added HudRenderCallback (#359)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309020ac82a74541b2431",
    "number": 353,
    "body": "The `fabric:fabricApiModule` custom element is to allow other mods to detect fabric modules and not have to do insane regex and hardcoding to detect them.",
    "head_branch": "1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add more metadata to the modules (#353)\n\n* Add fabric-api-base as a dep to fabric-networking-v0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309030ac82a74541b2432",
    "number": 352,
    "body": "Not sure if this is worth a V1 or not. I've got a bit of a gut feeling that it isn't.\r\n\r\nCurrently, the API is set up so that the mining level and mining speed of a given item is hardcoded on creation. This is unhelpful to mods like Materialisation or other tinkers-likes, which need to be able to change their mining level and speed based on NBT. This PR adds a new interface to do so, and leaves existing behavior intact otherwise. As mining level and speed are the only aspects of a tool that are affected by Fabric API, the interface doesn't have anything else at this time. In the future, it can be upgraded to add more if needed.",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309040ac82a74541b2433",
    "number": 351,
    "body": "This will be pushed to a new `1.14` branch.\r\n\r\n",
    "head_branch": "1.14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309050ac82a74541b2434",
    "number": 350,
    "body": "Requires https://github.com/FabricMC/fabric-loader/pull/147",
    "head_branch": "mc-dep",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add 1.15 MC deps where needed, update loader, bump versions."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309060ac82a74541b2435",
    "number": 341,
    "body": "This is an alternative approach to implementing the particles API. The forward facing interface is a little simpler and registering particles that use a custom sprite supplier is identical to vanilla.\r\n\r\nCreating a particle type (client and server):\r\n```\r\n\tpublic static final DefaultParticleType SIMPLE_TEST_PARTICLE = FabricParticleTypes.simple();\r\n\tpublic static final DefaultParticleType CUSTOM_TEST_PARTICLE = FabricParticleTypes.simple();\r\n\r\n    @Override\r\n    public void onInitialize() {\r\n        Registry.register(Registry.PARTICLE_TYPE, new Identifier(\"testmod\", \"simple\"), SIMPLE_TEST_PARTICLE);\r\n        Registry.register(Registry.PARTICLE_TYPE, new Identifier(\"testmod\", \"custom\"), CUSTOM_TEST_PARTICLE);\r\n    }\r\n```\r\n\r\nRegistering a particle factory (client):\r\n```\r\n\t@Override\r\n\tpublic void onInitializeClient() {\r\n\t\tParticleFactoryRegistry.getInstance().register(SIMPLE_TEST_PARTICLE, SimpleTestParticle::new);\r\n\t\tParticleFactoryRegistry.getInstance().register(CUSTOM_TEST_PARTICLE, CustomTestParticle.Factory::new);\r\n\t}\r\n```\r\n\r\nThe particle classes:\r\n```\r\n\t@Environment(EnvType.CLIENT)\r\n\tstatic class SimpleTestParticle extends SpriteBillboardParticle {\r\n\r\n\t\tpublic SimpleTestParticle(ParticleEffect effect, World world, double x, double y, double z, double velX, double velY, double velZ) {\r\n\t\t\tsuper(world, x, y, z, velX, velY, velZ);\r\n\r\n\t\t\tsetSprite(MinecraftClient.getInstance().getItemRenderer().getModels().getSprite(Items.BARRIER));\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic ParticleTextureSheet getType() {\r\n\t\t\treturn ParticleTextureSheet.PARTICLE_SHEET_TRANSLUCENT;\r\n\t\t}\r\n\t}\r\n\r\n\t@Environment(EnvType.CLIENT)\r\n\tstatic class CustomTestParticle extends AnimatedParticle {\r\n\r\n\t\tprotected CustomTestParticle(World world, double x, double y, double z, SpriteProvider sprites) {\r\n\t\t\tsuper(world, x, y, z, sprites, 1);\r\n\r\n\t\t\tsetSprite(sprites.getSprite(world.random));\r\n\t\t}\r\n\r\n\t\t@Environment(EnvType.CLIENT)\r\n\t\tpublic static class Factory implements ParticleFactory<DefaultParticleType> {\r\n\r\n\t\t\tprivate final FabricSpriteProvider sprites;\r\n\r\n\t\t\tpublic Factory(FabricSpriteProvider sprites) {\r\n\t\t\t\tthis.sprites = sprites;\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic Particle createParticle(DefaultParticleType type, World world, double x, double y, double z, double vX, double vY, double vZ) {\r\n\t\t\t   return new CustomTestParticle(world, x, y, z, sprites);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n```\r\n\r\n<s>Among these are also some helper. `ParticleUtils` provides some methods to spawn a particle that accept position and velocity as `Vec3d`.</s>",
    "head_branch": "fabric-particles-v1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #341 from Sollace/fabric-particles-v1\n\nFabric particles v1"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662309070ac82a74541b2436",
    "number": 336,
    "body": "![new-buttons](https://user-images.githubusercontent.com/3780606/62644173-6f21a700-b941-11e9-99c0-1f0fa291a7fe.gif)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309080ac82a74541b2437",
    "number": 335,
    "body": "Fixes #333\r\n\r\nVanilla uses brittle special-case logic to render water next to glass using a specialized sprite. \r\n\r\nThis PR sets the local variable that controls that logic in a way that should activate it for any fluid that matches the `WATER` tag. \r\n\r\nTest build here:  https://github.com/grondag/fabric/releases/download/fluidrender-0.1.1-rc1/fabric-renderer-api-v1-0.1.1+099c1e8b-dev.jar",
    "head_branch": "fluid-render",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309080ac82a74541b2438",
    "number": 334,
    "body": "See #329 and #330 for explanation.\r\n\r\nChanges include:\r\n\r\n- Move compatibility warning to a separate class for reuse\r\n- Implement tranform in ItemRenderContext\r\n- Remove block state from  method signature for Ao brightness cache function (can only cause problems)\r\n- Remove brightness cache function for flat rendering path\r\n- Use block state value for lit block to retrieve block brightness for flat lighting, w/o caching (must be done this way to match vanilla logic)\r\n\r\nTest build available here:  https://github.com/grondag/fabric/releases/download/indigo-0.1.10-rc1/fabric-renderer-indigo-0.1.10-rc1.jar",
    "head_branch": "indigo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309090ac82a74541b2439",
    "number": 332,
    "body": "This is here to show the current implementation I have made and also to discuss if the packet system needs a different syntax within the CompoundTag used to transmit the fabric:hello packet.\r\n\r\nCredit: asie for starting the structure behind the whole handshake mechanism.\r\n\r\n~~**Edit 1:**~~\r\n~~After some consideration and recommendations. I have decided to change the implementation though I will still use the same fabric:hello packet system, this change will allow mods more flexibility in requiring a client to have a mod or several mods (allowing extension mods to exist).~~\r\n\r\n~~However this will require steps:~~\r\n\r\n~~**1.** Add flag intounder custom tags (as of asie's request on discord) This flag will default to true unless the mod specifies it within~~\r\n\r\n~~**2.** Create base for handler system mods can optionally implement (allowing each mod to have several handlers), such as checking for a range of mod versions (great for patches/bugfix versions)~~\r\n\r\n~~**3.** Change the handshake process slightly. So if a mod defines handler(s), then run those through a callback and kick client if any of them fail (ActionResult of PASS or SUCCESS is fine). If the modid specifies no handlers and the flag is set to true or doesn't exist inside of then check for the EXACT same version on client and server or kick. If the mod has set to false then let it go on assuming no handlers stop it.~~\r\n\r\n**Edit 2:**\r\nThe final result is getting closer and I have decided on the following:\r\n\r\n1. Mod developers can optionally opt-out of Handshake using a custom element inside of `fabric.mod.json`.\r\n\r\n2. Mod developers can provide a Handshake Handler to allow a range of client mod versions to work, (allowing patches/bugfix updates serverside) to work with older versions of the mod without forcing all your users to update their mod on client.\r\n\r\n3. If the Handshake fails within the handler, then the mod developer can provide their own error text to be sent with player's disconnect message specifying for example a range of versions or more info.\r\n\r\n4. ~~Sister commit to add handshake opt-out to fabricloader required before commit.~~ Sister commit is here: https://github.com/FabricMC/fabric-loader/pull/148\r\n\r\n**Edit 3:**\r\nThe handshake process works now. Just have to wait on sister commit in fabricloader and do some handler testing and it will be done.",
    "head_branch": "networking-handshake",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623090a0ac82a74541b243a",
    "number": 331,
    "body": "This is based of work from #251 and the suggestion from @Pyrofab \r\n\r\nIm sure ive made some mistakes and I didnt take a lot of care in naming/testing things.",
    "head_branch": "testmod-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623090b0ac82a74541b243b",
    "number": 326,
    "body": "Introduce yourself to buttons! These revolutionary widgets can do a wide variety of things when you interact with it, in this case, it will cycle through the pages in the creative menu, allowing more item groups that you can play with! Additionally, they also turn blue when you hover them! Wait a minute, what is this??\r\n![Bad picture](https://user-images.githubusercontent.com/34910653/62066914-15481f80-b265-11e9-99ea-5085b6d79d6c.png)\r\nThere is only one thing you could say to this situation: <img src=\"https://cdn.discordapp.com/emojis/559880832148439077.png?v=1\" width=\"16\" height=\"25\">\r\n\r\nThe buttons in the fabric creative menu are also flat and plastic: \r\n![ugly](https://user-images.githubusercontent.com/34910653/62067280-eda58700-b265-11e9-9254-cf829075c6dd.png)\r\nno not close enough, THIS:\r\n![uglybig](https://user-images.githubusercontent.com/34910653/62067365-1d548f00-b266-11e9-8657-3c4204920c88.png)\r\nSee? the background is flat and the text does not have a shadow, banned.\r\n\r\n**With patch 1893123**, you can finally enjoy browsing through the creative menu!\r\n![Good picture](https://user-images.githubusercontent.com/34910653/62066886-07929a00-b265-11e9-9037-0b10b7a807e8.png)\r\nno not close enough, THIS:\r\n![good](https://user-images.githubusercontent.com/34910653/62067540-8dfbab80-b266-11e9-9e2d-0c8161fe145b.png)\r\n\r\n10/10 fix!\r\n<details>\r\n<summary>Actual Changelogs for nerds</summary>\r\n<p>\r\n<ul>\r\n<li>Fixed the button background so it is not flat</li>\r\n<li>Added shadows to text</li>\r\n<li>Moved & Resized the buttons a little bit so it looks better</li>\r\n</ul>\r\n</p>\r\n</details>",
    "head_branch": "patch-1893123",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623090c0ac82a74541b243c",
    "number": 325,
    "body": "The signature of the target method changed in 1.14.4 so this method breaks. Only causes errors sometimes under strange and inconsistent circumstances, but this should theoretically fix it.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623090d0ac82a74541b243d",
    "number": 323,
    "body": "This PR replaces the problemmatic hashes with a build number.\r\n\r\nBased off the ideas from #316 but fixes the issue of multiple branches.\r\n\r\nThis creates a json file that keeps track of the build number -> hash. This json is stored in the global gradle file so will not easily get lost (I can setup a backup job for it on jenkins).\r\n\r\nAlso returns 9999+local when not being built on jenkins",
    "head_branch": "fix/buildnumbers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623090d0ac82a74541b243e",
    "number": 322,
    "body": "PR #310 should have bumped this but didn't",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623090e0ac82a74541b243f",
    "number": 319,
    "body": "Welcome to Dimension API: v3, @Pyrofab [edition](https://andrewphan.co.uk/wp-content/uploads/2018/08/thanos.gif). Uses ideas & discussion generated from #256 and #309 to squash things once and for all. This was written by Pyrofab, so all credit goes to him. I was hired as the PR manager.\r\n\r\n**Overview:**\r\n- adds dimensions-v1 module\r\n- adapts EntityPlacer & relevant mechanics from #309 \r\n- fixes dimension ID crash by giving dimensions a full Identifier (similar to #256 patch)\r\n- adds FabricDimensions, which is a utility class for teleporting entities to avoid default mechanics (such as portals being created when going to the overworld)\r\n- PortalForcer crash patch/fix\r\n- actual thought out documentation\r\n\r\n**Class specifics:**\r\n- EntityPlacer: defines placement logic for an entity upon dimension join\r\n- FabricDimensiontype: dimension with placement logic & methods for identifiers\r\n- FabricDimensions: a utility class for teleporting entities\r\n\r\nHas been tested, and the results are the same as #309 (see \"in action\" category).\r\n\r\n**Practical usage:**\r\n - devs: register a FabricDimensionType and provide custom placement for entities\r\n - use `Entity#changeDimension` for patched default mechanics\r\n - use `FabricDimensions.teleport` for teleportation with custom placement pos & actions (if custom placement is specified, no portals are created)\r\n\r\n**Example usage repo:**\r\nhttps://github.com/Draylar/dimension-example-mod/tree/custom-api",
    "head_branch": "pyro-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Cooler dimension API, #309 (#319)\n\n* pyro API\r\n\r\n* Update fabric-dimensions-v1/src/main/java/net/fabricmc/fabric/api/dimension/EntityPlacer.java\r\n\r\nclarify portalDir param\r\n\r\nCo-Authored-By: Pyrofab <redstoneinfire@gmail.com>\r\n\r\n* Update fabric-dimensions-v1/src/main/java/net/fabricmc/fabric/api/dimension/EntityPlacer.java\r\n\r\nrename & clarify verticalOffset param\r\n\r\nCo-Authored-By: Pyrofab <redstoneinfire@gmail.com>\r\n\r\n* Update fabric-dimensions-v1/src/main/java/net/fabricmc/fabric/api/dimension/FabricDimensions.java\r\n\r\nCo-Authored-By: Pyrofab <redstoneinfire@gmail.com>\r\n\r\n* Update fabric-dimensions-v1/src/main/java/net/fabricmc/fabric/api/dimension/EntityPlacer.java\r\n\r\nCo-Authored-By: Pyrofab <redstoneinfire@gmail.com>\r\n\r\n* update parameter\r\n\r\n* Add fabric-networking and fabric-registry-sync to dependencies\r\n\r\n* Refactor FabricDimensionType to use a builder\r\n\r\nAlso adds a desiredRawId field separate from the actual raw\r\nid fixed internally. The fixedRawId field is now set by\r\nDimensionIdsFixer through reflection.\r\nThis change addresses concerns about the ability for any mod\r\nto set a FabricDimensionType's raw id at any time.\r\n\r\n* Improve javadoc of FabricDimensions#teleport\r\n\r\n* Add an overload for FabricDimensions#teleport\r\n\r\n* Update javadoc on DimensionIdsFixer\r\n\r\n* Inline clientside packet handling\r\n\r\n* Add side assertions to FabricDimensions#teleport\r\n\r\n* Nuke minecraft's attempts to overwrite bad level properties\r\n\r\n* Add license headers\r\n\r\n* Reformat dimension API source code\r\n\r\n* Update FabricDimensionType javadoc\r\n\r\n* Remove redundant ThreadLocal from FabricDimensionInternals\r\n\r\n* Fix crash on dedicated servers\r\n\r\n* Fix Illegal Access during remapping\r\n\r\n* Fix dimension remap exception propagation\r\n\r\n* clarify EntityPlacer docs\r\n\r\n* spacing fixes\r\n\r\n* api.dimension -> api.dimension.v1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6623090f0ac82a74541b2440",
    "number": 318,
    "body": "Adds an API to allow for accounting of fluids and insertion and extraction from blocks and items.  The present PR focuses on FluidVolume and supporting classes, as it is fundamental to everything else.\r\n\r\nThe current implementation of RationalNumber is not well tested and likely has significant defects, however the the overall shape is representative of the intent. \r\n\r\nHave at it. I will definitely regret this.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309100ac82a74541b2441",
    "number": 316,
    "body": "Currently, this leads to Funny Occurences as build.gradle has been edited 82 times so far - but it's better than nothing. Suggestions?",
    "head_branch": "commit_patch_ver",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309100ac82a74541b2442",
    "number": 310,
    "body": "These changes ensure that the Default resource pack does not capture resources under assets/minecraft and data/minecraft from modded jars, if the resource exists in the minecraft JAR.\r\n\r\nThis could also fix #186 as well, but I have not tested that.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Prevent mods from shadowing default resources (Fixes #66) (#310)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309110ac82a74541b2443",
    "number": 309,
    "body": "Had a discussion with Upcraft and Ansraer last night regarding the Dimension API. I ended up re-writing a portion of it while adapting Upcraft's original implementation. Summary at the bottom if you want to avoid reading a wall of text.\r\n\r\n**Conext:**\r\nEntity's `changeDimension` method crashes when dealing with non-vanilla dimensions. The solution most people have been using is a mixin into `PortalForcer#usePortal`, which is where the crash takes place (and then redirecting some code around). To prevent \"I didn't implement my mixin like I was supposed to\" crashes, I introduced #256, which has a fallback for crashes that basically just plops you in a random spot. It was agreed that while this may work temporarily, it was probably not worth the effort of maintaining when we could just build a teleportation API.\r\n\r\n**Overview:**\r\nThis PR:\r\n  - adds dimensions-v1 module\r\n  - adds FabricEntityTeleporter which can be used to teleport entities between dimensions\r\n  - fixes changeDimension by redirecting it to FabricEntityTeleporter when custom dimensions are involved\r\n  - adds FabricDimensionType to use instead of DimensionType\r\n  - adds EntityPlacer which is responsible for actions done when an entity is teleported (such as setting their location or spawning a portal)\r\n  - adds a dimension teleport event (DimensionTeleportCallback) which can be used to cancel dimension teleports\r\n\r\nEntityPlacer and FabricDimensionType were adapted from Upcraft's PR. The difference with mine is that all logic ends up in the FabricEntityTeleporter (when you are traveling to or from a custom dimension), which unifies things a tiny bit.\r\n\r\nThis is a rough draft done in a single day, so it's not intended to be a final product. I'm more interested in verification on the design idea right now.\r\n\r\n**Specifics:**\r\nFrom a developer's point of view, you can register a `FabricDimensionType` instead of a `DimensionType`, and then set a dimension `EntityPlacer`. This is the positioning and entry logic used when an entity joins your dimension. An example is putting the player at the first solid block at 0, 0, or spawning a portal at their location.\r\n\r\nEntity and ServerPlayerEntity both have a mixin to their `changeDimension` method. \r\n   - If they are going to a FabricDimensionType world, we use the `FabricEntityTeleporter` to change their dimension. \r\n   - If we are leaving a FabricDimensionType world, we set 3 values that would otherwise cause an NPE, and then leave the rest to vanilla. This is achieved with an interface to set the methods (TeleportingServerPlayerEntity) and a mixin (ServerPlayerEntityAccessor). \r\n   - If we are not traveling to or from a custom dimension, vanilla behavior is used.\r\n\r\nIf placement logic is specified and you go to any dimension (custom or vanilla), the placement logic takes priority. If it is null, the default is used. The difference between `changeDimension` in Entity and `changeDimension` in FabricEntityTeleporter (with no placement logic) is that the latter will *not*, say, spawn a portal if you travel to the overworld. It is clean teleportation with no extra side effects or mechanics.\r\n\r\nLogic is then run depending on whether the entity is `Entity` or `ServerPlayerEntity` (as the latter has some extra things that need to be done), and I've made an attempt at splitting it up to make it slightly more readable. A lot of work can still be done in this area to make it more concise. \r\n\r\n**In action:**\r\nI implemented 4 items into a test mod that uses these mechanics:\r\n   Default, which uses `entity.changeDimension` to teleport the player\r\n   No-specification, which uses `FabricEntityTeleporter.changeDimension` while also not specifying placement logic\r\n   Specification, which uses `FabricEntityTeleporter.changeDimension` while providing placement logic that puts the entity at a certain position\r\n   Entity teleport, which teleports an entity you click on to a custom dimension using the entity's `changeDimension` method.\r\n\r\nResults are as follows:\r\n  Default:\r\n    Overworld -> custom: (0, 100, 0) from custom dimension's EntityPlacer\r\n    Overworld -> nether: acts as normal\r\n    Custom -> overworld: Near spawn at top block (-5, 68, -12) with portal; default vanilla behavior\r\n  No-spec:\r\n     Overworld -> custom: (0, 100, 0) no custom placer specified, fallback to dimension's placer\r\n    Overworld -> nether: \r\n    Custom -> overworld: (0, 100, 0) no custom placer specified, save old position, no nether portal spawned\r\n  Spec:\r\n    Overworld -> custom: (0, 500, 0) custom placer's coordinates\r\n    Custom -> overworld: (0, 25, 500) custom placer's coordinates\r\n\r\nIn other words, this works and doesn't crash. Yippe.\r\n\r\n**To-do:**\r\n  - a large amount of cleanup\r\n  - class renames\r\n  - testing in prod\r\n  - ~~working example project (will be up soon)~~ https://github.com/Draylar/dimension-example-mod/tree/custom-api\r\n  - properly name methods in TeleportingServerPlayerEntity (and rename class)\r\n\r\n**Summary:**\r\nAdded a new teleporter class which default `changeDimension` mechanics redirect to when custom dimensions are involved. You can use `EntityPlacer`s to specify custom spawn locations or mechanics, or you can rely on fallbacks, which are available for both custom dimensions and vanilla dimensions. This should cover all use cases of `changeDimension`.\r\n\r\n**Feedback:**\r\nWhile I certainly do appreciate help on smaller things (\"typo here, forgot docs here\"), I would first like to confirm this is a proper approach/fix. After we get that out of the way, we can work on docs/class renames/style and such. Thanks! ",
    "head_branch": "dimapi",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309120ac82a74541b2444",
    "number": 305,
    "body": "An updated version of #115, which adds a `FabricChunkGeneratorType`.\r\n\r\nTo recap, `ChunkGeneratorType` requires a non-accessible interface in its constructor. You can't register one without a nice reflection hack, which Miner's Horizon, Void World, and Wastelands each use. Passing null isn't an option. \r\n\r\nB0undary's implementation was correct, but modularization happened. I've tested this in my own dimension building API, and Ansraer has a similar setup that works. If needed, I can make a small example project to show this in action.\r\n\r\nThanks!",
    "head_branch": "dimension-chunkgentype",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add FabricChunkGeneratorType (#305)\n\n* added dimensions-v1 & FabricChunkGeneratorType\r\n\r\n* documentation & fixed supplier type\r\n\r\n* fix issues; move to fabric-world-v1\r\n\r\n* Fix build and add register\r\n\r\n* change string param to identifier\r\n\r\n* Factory to inner class of Type; move to object builders module.\r\n\r\n* reformat type class\r\n\r\n* clean up javadocs\r\n\r\n* delete world package\r\n\r\n* fix settings.gradle accidental change\r\n\r\n* Merge branch '1.14' + checkstyle fixes\r\n\r\n* remove trailing whitespace in settings.gradle\r\n\r\n* change package to pass checkstyle\r\n\r\n* v1 -> v1.gen\r\n\r\n* Update fabric-object-builders-v0/src/main/java/net/fabricmc/fabric/api/world/v1/gen/FabricChunkGeneratorType.java\r\n\r\nCo-Authored-By: liach <7806504+liach@users.noreply.github.com>\r\n\r\n* make factory field final\r\n\r\n* update javadocs\r\n\r\nCo-authored-by: Dinolek <18579460+Dinolek@users.noreply.github.com>\r\nCo-authored-by: liach <7806504+liach@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662309130ac82a74541b2445",
    "number": 302,
    "body": "First quick pass mainly to get feedback, im not great at picking names so please leave some feedback.\r\n\r\nAlso moved the Indigo DebugHUD text to use this API.\r\n\r\nCannot get a lot easier to use:\r\n\r\n```java\r\nDebugHudCallback.EVENT_LEFT.register(list -> list.add(\"test\"));\r\n\t\t\r\nItemTooltipCallback.EVENT.register((stack, tooltipContext, components) -> components.add(new LiteralText(\"test\")));\r\n```",
    "head_branch": "feature/more-events",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309140ac82a74541b2446",
    "number": 301,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Estonian translation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309150ac82a74541b2447",
    "number": 300,
    "body": "Addresses #299",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Bump indigo version to 0.1.9\n\nVery small patch but easier to communicate for support purposes."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309160ac82a74541b2448",
    "number": 298,
    "body": "",
    "head_branch": "resource-loader-optimization",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309160ac82a74541b2449",
    "number": 296,
    "body": "Fixes #294",
    "head_branch": "square-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309170ac82a74541b244a",
    "number": 295,
    "body": "This PR resolves the following issues:\r\n#199  Vanilla Bug: Glowstone creates AO shade\r\n#289  Rendering on the Cutout and Transparent Layers together interferes with water rendering\r\n#290  Smooth lighting breaks on continuous angled surfaces\r\n#291  QuadEmitter not cleared on MeshBuilder.build()\r\n#292  Render context QuadEmitter crash with flat lighting\r\n#293  Relax vertex order requirements for modded quads\r\n\r\nIt also removes some unused declarations and bumps the Indigo build number to 0.1.8.\r\n\r\n[A test build is available](https://github.com/grondag/fabric/releases/download/indigo-0.1.8-rc4/fabric-renderer-indigo-0.1.8+7070da39.jar).\r\n\r\nYou'll also need this [Test build of OptiFabric ](https://ss.modmuss50.me/optifabric-0.4.0-test2.jar)\r\n\r\n\r\nEdit:  this PR now also improves compatibility with Optifine shaders.  Renderer features should remain intact.  Chunk loading is 15% to 20% slower when compatibility is enabled because of more conservative BufferBuilder input methods.   Test build is updated also.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309180ac82a74541b244b",
    "number": 284,
    "body": "With these fixes \"gradle javadoc\" should generate without throwing errors.",
    "head_branch": "javadoc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #284 from svipthedrunk/javadoc\n\nJavadoc fixes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309190ac82a74541b244c",
    "number": 283,
    "body": "Game rules changed a lot in 1.14.3, so I thought it's a good time to make a game rule API in Fabric. I've decided to make it use Identifiers for mod-uniqueness. There's really two options for the API as I see:\r\n\r\n1. keep it restricted to just int and boolean rules like with Vanilla.\r\n2. use some [not-too-hacky reflections](https://github.com/Boundarybreaker/Locky/blob/master/src/main/java/space/bbkr/locky/Locky.java#L77) to let people create their own RuleTypes, since every constructor in the GameRules subclasses are public *except* for the RuleType one.\r\n\r\nShould I add in support for extended rule types or not?",
    "head_branch": "game-rules",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623091a0ac82a74541b244d",
    "number": 277,
    "body": "Relevant change: https://github.com/FabricMC/yarn/pull/745\r\n\r\nMappings themselves have not been updated for the project sources.\r\n~~Also added two new methods, `fixedDimensions` and `changingDimensions` for cleaner API calls, e.g `dimensions(EntityDimensions.fixed(1.0F, 1.0F))` -> `fixedDimensions(1.0F, 1.0F)`.~~",
    "head_branch": "entity/dimensions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623091a0ac82a74541b244e",
    "number": 275,
    "body": "After being completely lost trying to read some source code using only yarn, Masa directed me to the example mod to get my dev environment set up. I think it could be useful for discoverability to have it linked here.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623091b0ac82a74541b244f",
    "number": 273,
    "body": "Fixes #272.\r\n\r\nThe defect was introduced with PR #254.  Before that change, geometry flags were always set to 0 for interior faces with flat lighting.\r\n\r\nThat change instead invalidated the quad geometry flags to force geometric analysis of the quad to determine if the face is actually an interior face or on the block face.  (Quads on the block face should use neighbor brightness instead of interior brightness.) Vanilla flat lighting operates similarly via BlockModelRenderer.updateShape(), but that method is incompatible with the Mesh/QuadView data structures used by Indigo.\r\n\r\nThat change was OK except that geometry analysis flags are lazily computed.  This meant they were not being computed until they were needed in AbstractQuadRenderer.flatBrightness().  But this call happens *after* block position offsets are applied, which invalidates the quad geometry. \r\n\r\nWith positions offsets applied, vertices will almost always have values outside the 0-1 range and thus be classified as \"on-face\" quads. Those quads use neighbor brightness, which for something like a door is usually an opaque block with zero brightness.  The result is completely dark lighting.\r\n\r\nThe fix is simply to call QuadView.geometryFlags() immediately after invalidation to ensure geometric analysis happens before offsets are applied.  The same thing is done for quads with AmbientOcclusion shading a few lines above for the same reason.\r\n\r\nThe defect wasn't caught by the AoCalculator vanilla comparison logic because that validation (obviously) does not cover flat lighting.  It may be worth adding a comparison validation for flat lighting in the future but it would be non-trivial and outside the scope of this PR.  Nothing indicates the flat lighting output is wrong; the problem here was incorrect input. ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix dark faces on interior quads with flat lighting (#273)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623091c0ac82a74541b2450",
    "number": 264,
    "body": "This PR implements a simple particle creation/registry API as outlined in #192. \r\n\r\nDue to how Minecraft deals with particle textures, it is nearly if not impossible to create modded particles that use the Vanilla system of passing a `SpriteProvider` to the constructor of a `ParticleFactory`. This API circumvents that process by creating hooks into `ParticleManager` that can be used to register `ParticleFactory`s and retrieve the appropriate sprites. This entire process is exposed to modders via the following classes:\r\n\r\n- `ClientSpriteRegistryCallback` from `fabric-textures-v0`; used to register sprites.\r\n- `FabricParticles`; used to register `ParticleFactory`s and access the particle sprite sheet.\r\n- `FabricParticleTypes`: used to create `ParticleType`s.\r\n\r\nBelow follows some example code for creating and registering a particle via this API:\r\n\r\n```java\r\npublic class ParticleTest implements ModInitializer, ClientModInitializer {\r\n\t// Create a ParticleType for our custom particle\r\n\tprivate static final DefaultParticleType testParticleType = FabricParticleTypes.createSimpleParticleType();\r\n\t// The ID of our particle, for repeated use in registry\r\n\tprivate static final Identifier testParticleID = new Identifier(\"particletest:test_particle\");\r\n\r\n\tpublic void onInitialize() {\r\n\t\t// Register our particle type\r\n\t\tRegistry.register(Registry.PARTICLE_TYPE, testParticleID, testParticleType);\r\n\t}\r\n\r\n\t@Environment(EnvType.CLIENT)\r\n\tpublic void onInitializeClient() {\r\n\t\t// Register the sprite for our particle\r\n\t\tClientSpriteRegistryCallback.event(SpriteAtlasTexture.PARTICLE_ATLAS_TEX).register((atlasTexture, registry) -> {\r\n\t\t\tregistry.register(testParticleID);\r\n\t\t});\r\n\r\n\t\t// Register a ParticleFactory for our custom particle\r\n\t\tFabricParticles.INSTANCE.registerParticleFactory(testParticleType, (type, world, x, y, z, vx, vy, vz) ->\r\n\t\t\tnew TestParticle(world, x, y, z, vx, vy, vz));\r\n\t}\r\n\r\n\t// Implement our custom particle\r\n\t@Environment(EnvType.CLIENT)\r\n\tstatic class TestParticle extends SpriteBillboardParticle {\r\n\t\tTestParticle(World w, double x, double y, double z, double vx, double vy, double vz) {\r\n\t\t\tsuper(w, x, y, z, vx, vy, vz);\r\n\t\t\tthis.setSprite(FabricParticles.getParticleSpriteAtlas().getSprite(testParticleID));\r\n\t\t}\r\n\r\n\t\tpublic ParticleTextureSheet getType() { return ParticleTextureSheet.PARTICLE_SHEET_OPAQUE; }\r\n\t}\r\n}\r\n```\r\n\r\nParticles can then be spawned with `world.addParticle(particleType, x, y, z, vx, vy, vz)` just as in Vanilla. More complex particles that require extra data (such as Redstone dust particles) can be implemented by subclassing `ParticleEffect` (as in Vanilla) and using `createParticleType(parameterFactory)` instead of `createSimpleParticleType` (see Vanilla's `DustParticleEffect` for implementation of such a `parameterFactory`). Such more complex particles will require an instance of their `ParticleEffect` to be passed to `world.addParticle` instead of their `ParticleType`, again just as in Vanilla.\r\n\r\n### TODO\r\n\r\n- [x] License headers\r\n- [x] Javadoc\r\n- [ ] Wiki documentation",
    "head_branch": "fabric-particles-v1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623091d0ac82a74541b2451",
    "number": 261,
    "body": "Same idea as #260, but this works for item pickups instead of item drops.\r\n\r\n**Usages:**\r\n  - denying item pickup based on current inventory status\r\n  - limit picking up large stack sizes\r\n  - change item when picked up, or trigger an NBT change",
    "head_branch": "event-pickup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623091e0ac82a74541b2452",
    "number": 260,
    "body": "As the name suggests, this event is called when the player drops an item. I made a fun test implementation that changes the type of item that comes out when a stack is dropped... can't PR it because the testmods module PR isn't accepted yet, but it works at the very least. Fairly straightforward.\r\n\r\n**Usages:**\r\n  - change item that is dropped\r\n  - trigger advancements (give a diamond to someone?)\r\n  - items that explode when dropped\r\n  - preventing drops for soul-bound items",
    "head_branch": "event-drop",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623091e0ac82a74541b2453",
    "number": 259,
    "body": "Fixes #258 ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623091f0ac82a74541b2454",
    "number": 257,
    "body": "Hotfix for #231.\r\nIt seems like, from [this](https://github.com/FabricMC/fabric/issues/231#issuecomment-499715120) crash log, the Int2ObjectMap is crashing when multiple old IDs point to the same object. **This may not be a fix for that underlying problem**, but it should hopefully prevent crashes from it trying to convert a messed-up map to a less messed-up one. Currently unsure of impact on load/remap times.",
    "head_branch": "registry-sync-hotfix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309200ac82a74541b2455",
    "number": 256,
    "body": "This PR:\r\n - adds a new dimension module for future dimension PRs to use\r\n - fixes #246, which causes custom dimensions to crash under certain situations\r\n\r\nThe fix was very easy once I realized what the issue was while laying in bed. `DimensionType#byRawId` is used under the assumption that the int being passed in (which is the raw ID of the dimension) is used to get the DimensionType with the corresponding ID. This is not the case; `byRawId` just calls `Registry.DIMENSION.get(id)`, which is (obviously) index based. My guess is this was a mistake, but nobody noticed it, because it works perfectly fine in vanilla given how their IDs are set up and ordered. \r\n\r\nMiner's Horizon 1.5.0 uses this mixin and it fixes everything. This is _required_ for custom dimensions to prevent crashes & world bricks until the supposed \"dimensions are registered under identifiers instead of IDs\" update comes out.\r\n\r\nNot entirely sure I got the gradle setup right, so I'd appreciate it if someone would look it over quickly.",
    "head_branch": "dimension-id",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309210ac82a74541b2456",
    "number": 255,
    "body": "Fixes #234.\r\n\r\nThis should reduce reported issues with vanilla blocks/resource packs but still offer decent lighting for models using the API.  The tradeoff is some potential minor inconsistency on lighting outcomes between vanilla models and modded models having the same geometry.  \r\n\r\nGiven that vanilla and vanilla resource packs routinely exploit the shortcomings of the vanilla lighter to achieve effects that aren't directly supported, the potential for discrepancy really can't be helped without a much more extensive change.\r\n\r\nIf someone really wants consistent lighting then they can always change the mode to ENHANCED, (or VANILLA/EMULATED) or create a resource pack with models that exploit the API.",
    "head_branch": "hybrid_mode",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make HYBRID the default lighting mod (#255)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309220ac82a74541b2457",
    "number": 254,
    "body": "Closes #253 \r\n\r\nFor quads with no cull face, re-enables the geometry check that was disabled for #223 so that quad on the block face use neighbor brightness instead of self brightness.   Also mimics the Block.isShapeFullCube() check that the vanilla BlockModelRenderer performs in this case, which also forces neighbor brightness when true.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix bad flat lighting on inset quads (#253) (#254)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309220ac82a74541b2458",
    "number": 251,
    "body": "Butchered my last PR again, so here's a cleaner version. This PR fixes the testmods module. A full changelog is:\r\n - renamed testmods to testmods-v0\r\n - add testmods build.gradle that adds module dependencies\r\n - fixed broken mappings\r\n - updated run mod.json with all working test mods\r\nI don't know how to include a project (so it is configured as a module) while also preventing it from being present in the main jar, so I'd like some tips on that (that is to say: a built version of this PR would have the testmods changes). Other than this issue, everything works fine: you can fork my repo, switch to the `portal` branch, generate run configs, and run the testmods main module (and it works). ",
    "head_branch": "portal",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309230ac82a74541b2459",
    "number": 250,
    "body": "Vanilla currently has no way to add new brewing stand recipes; all brewing recipes are hardcoded in `BrewingRecipeRegistry`. This API module extends the vanilla brewing stand with JSON recipe compatibility.\r\n\r\nAs of the initial PR, this module *does not* modify or disable any of the default vanilla recipes. It simply injects its own crafting logic ahead of vanilla's, deferring to the existing implementation if no valid custom recipes are found. If making vanilla brewing recipes data-driven is determined to be within the scope of the Fabric API, I would be happy to change this.\r\n\r\nTo create a custom brewing recipe, the following JSON recipe format can be used:\r\n\r\n```json\r\n{\r\n  \"type\": \"fabric:brewing\",\r\n  \"input\": { \"item\": \"minecraft:stick\" },\r\n  \"base\": { \"potion\": \"minecraft:leaping\", \"type\": \"splash\" },\r\n  \"output\": { \"potion\": \"minecraft:strong_swiftness\" }\r\n}\r\n```\r\n\r\n`input` is the item in the top slot of the brewing stand, `base` is the item in any of the three bottom slots, and `output` is the resulting item. All three can use the standard `item` ingredient format, and `input` and `base` can use the `tag` ingredient format. Additionally, all three can use the special `PotionIngredient` format, consisting of the keys `potion` (the potion identifier) and `type` (`normal`, `splash`, or `lingering` - defaults to `normal`).  A list of vanilla potion identifiers can be found in `net.minecraft.potion.Potions`, and they generally consist of a base identifier preceded by `long_` or `strong_` if applicable. This should be fully compatible with modded potions as well.\r\n\r\nPotential considerations / additions:\r\n\r\n- Should vanilla's recipes be overridden and converted to JSON recipes (currently not)?\r\n  - If so, how should brewing recipe mixins by existing mods be handled?\r\n- Should the recipe type be namespaced under `fabric` or `minecraft` (currently `fabric`)?\r\n- `output` does not currently support the `count` property that most recipes have.\r\n- Recipe remainders for `input` are supported, but currently cannot be extracted via hopper.\r\n- Custom brewing fuel types are not currently supported.\r\n- Are API interfaces for `BrewingRecipe`/`PotionIngredient` needed?",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309240ac82a74541b245a",
    "number": 249,
    "body": "Here's the promised new version of that screens module.\r\n\r\nRewrite with some changes\r\n - Added a dedicated button list that keeps the buttons/elements lists in sync\r\n - Renamed ScreenView -> ScreenAccess\r\n - Use the screen itself in the event\r\n - Provide the client as a useful addition",
    "head_branch": "fabric-screen-v1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309250ac82a74541b245b",
    "number": 248,
    "body": "Added all the eclipse files and generated binaries to the gitignore. This was part of a previous PR, but i figured it would be better merged on its own.\r\n\r\nEdit: Exhibit A\r\n![image](https://user-images.githubusercontent.com/6429283/58954085-776e3200-8798-11e9-9bff-c27f73a0e2ee.png)\r\n",
    "head_branch": "update_gitignore",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309260ac82a74541b245c",
    "number": 247,
    "body": "Adds events for LOGIN, JOIN, LEAVE on client and server.\r\n\r\nUsage:\r\n```java\r\nS2CPlayConnectCallback.EVENT.register((connection, packetListener) -> {\r\n     // joined on client\r\n    ClientPlayNetworkHandler handler = (ClientPlayNetworkHandler) packetListener;\r\n });\r\nC2SPlayConnectCallback.EVENT.register((connection, packetListener) -> {\r\n    // joined on server\r\n    ServerPlayNetworkHandler handler = (ServerPlayNetworkHandler) packetListener;\r\n});\r\n```",
    "head_branch": "connect-events",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309270ac82a74541b245d",
    "number": 245,
    "body": "See #229 for more information; I accidentally deleted my PR repo and was unable to work on the changes requested. Latest commit fixes Prospector's request.",
    "head_branch": "keycode",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309270ac82a74541b245e",
    "number": 244,
    "body": "This does ~~two~~ three things:\r\n - it adds proper builder-esque methods for the FabricKeyBinding.Builder class.\r\n - it adds a list of vanilla keybindings so modders can easily pick and choose which ones are available.\r\n - expose the identifier mods use to create/register their keybindings so it can be used later.\r\n\r\nI'd like to allow custom categories, but I don't know where the warning on \"unknown key categories\" comes from so I can't change that.",
    "head_branch": "keybindings_factory",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309280ac82a74541b245f",
    "number": 243,
    "body": "…he vanilla cetegory types.\r\n\r\nThe old builder... wasn't really a builder. I also don't like that it cut you off from using the vanilla constructor. The best API is an optional API, after all.\r\n\r\nWith this new design you can generate Keybindings like so:\r\n\r\n```\r\nKeyBinding binding = FabricKeyBinding.Builder.create()\r\n    .name(new Identifier(\"minelittlepony\", \"settings\")) // Or just \"key.minelittlepony.settings\" if you got that from your lang file\r\n    .code(GLFW.GLFW_KEY_F9)\r\n    .type(InputUtil.Type.KEYSYM) // optional\r\n    .category(KeyCategory.MISC) // optional\r\n    .build();\r\n```",
    "head_branch": "fix-keybindings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309290ac82a74541b2460",
    "number": 242,
    "body": "Taken from https://github.com/MineLittlePony/HDSkins/commit/7b48e3f22d34c2a2d5abdd3f438c4026f003f766#commitcomment-33799596",
    "head_branch": "fabric-gui-v0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623092a0ac82a74541b2461",
    "number": 238,
    "body": "Closes #96\r\n\r\nBased on #98",
    "head_branch": "feature/item-materials",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623092b0ac82a74541b2462",
    "number": 237,
    "body": "Problem: The blocks that are usable as beacon bases are hardcoded, and stuck within two `for` statements that each use `break`s. Injecting in to change the `if` statement used for compatibility checks is nigh impossible, due to `Inject` not supporting flow control.\r\n\r\nSolution: Add a check for if the tag `fabric:beacon_base` contains the block currently being checked, and if so, modify the Block being passed to the if statement to be a `minecraft:iron_block`, which will allow it to be part of the beacon base. This isn't an optimal solution, but it's the best I can think of without the ability to control for statement flow.\r\n\r\nI couldn't find a great place to put this, so I just put it inside content registries, even though it uses a tag.",
    "head_branch": "beacon-base-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623092b0ac82a74541b2463",
    "number": 236,
    "body": "Hi, I fixed the test mods module for the API (which was basically just re-structuring and replacing bad imports/mappings). You can now use it again to test API functionality. Rejoice!\r\n\r\nUnfortunately, I know 0 gradle, so dependencies are not set up. I'm trying to figure it out now, and may or may not add it to this PR if I figure it out. \r\n\r\nI've loaded in once and confirmed it works.\r\n\r\nedit: I'm horrible at git, let me try this again",
    "head_branch": "portal",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623092c0ac82a74541b2464",
    "number": 235,
    "body": "~~Still to figure out: icons.~~\r\n\r\n~~Should I put the same icon in every module or make a unique one for each? (I'm willing to make them if it's alright with asie)~~\r\n\r\nEdit: Postponed icons to another time",
    "head_branch": "modmenu-support",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623092d0ac82a74541b2465",
    "number": 229,
    "body": "KeyBinding stores a configured KeyCode and a default KeyCode. As #171 mentions, the configured KeyCode is not public and doesn't have a getter method, so the only solution for people looking to get the key is an accessor mixin. I propose we simply add a getter method to the already existing FabricKeyBinding class to make this easier.\r\n\r\n**Naming:**\r\nKeyBinding already has a _getDefaultKeyCode_ method, so it makes sense to name the new method _getConfiguredKeyCode_.\r\nThere's already a MixinKeyBinding class so I opted to name the new mixin _MixinKeyBindingAccessor_-- can't come up with anything better.\r\n\r\n**Usage:**\r\nKey press emulation. Can't retrieve the configured key codes without an accessor, so it seems fairly appropriate to add to the API.\r\n\r\nI can't get the test project to run so I'm unable to test this in full, but it does work in a mod in a separate environment. ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623092e0ac82a74541b2466",
    "number": 228,
    "body": "Fix for #221 \r\n\r\nThis PR improves lighting of models found in resource packs that have quads exceeding unit-cube boundaries.  Such models are extremely rare for vanilla terrain (Lectern is one) and Vanilla cannot light them correctly with smooth lighting because the information available to the lighter is only complete and accurate within the block boundaries.\r\n\r\nThe PR makes two significant changes:\r\n\r\n1) The test for \"cubic\" quads - quads that span all four corners of the block from the perspective of the \"light\" face - now counts vertices outside the corner as spanning. (Which is what vanilla does.)  This ensures face-aligned quads using a fast-path lighting computation accurately mimic vanilla results but does not help angled quads.\r\n\r\n2) For angled quads or quads that are not spanning, vertex coordinates are clamped to the unit cube before light values are weighted.\r\n\r\nLastly, the PR adds configuration settings for this new clamping feature (enabled by default) and two other configuration options not previously exposed. (Vanilla debug comparison and smooth lighting offset fix.) \r\n\r\nMore sophisticated solutions are possible. IIRC, Forge does per-vertex sampling in world space to get light values within a somewhat larger area - at the cost of additional lookups and calculations.  The approach used in the PR is reliable, simple, computationally inexpensive and highly consistent with vanilla results in the vast majority of cases.\r\n\r\nNote that angled quads like the leaf models used for testing in the screenshots linked below will not look identical to vanilla  in _enhanced_ mode because enhanced mode was deliberately designed to light angled quads and quads having imperfect vertex sorting with fewer bad outcomes.  The test results demonstrate these difference.  While such distinctions are inherently subjective, enhanced mode results are at least reasonably acceptable if not universally superior.  \r\n\r\nTest results: https://imgur.com/a/pEiXPvL\r\n\r\nBrief testing with [this resource pack](https://minecraft.curseforge.com/projects/beyond-the-lands) in emulation mode and debug comparison on found no discrepancies after the fixes, except for the lectern which appears to be due to a flaw in that vanilla model - probably an incorrect vertex sorting.  It is unlikely this will be noticed and was not addressed.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #228 from grondag/master\n\nImprove lighting of exterior vertices"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623092f0ac82a74541b2467",
    "number": 224,
    "body": "Fixes #223 ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623092f0ac82a74541b2468",
    "number": 219,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make FabricToolTags not deprecated"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309300ac82a74541b2469",
    "number": 217,
    "body": "I've found this event to be handy in a couple mods now.  Not particularly difficult to Mixin independently, but also not complex and unlikely to be abused.",
    "head_branch": "RenderReloadCallback",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309310ac82a74541b246a",
    "number": 216,
    "body": "Fix for #215 ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309320ac82a74541b246b",
    "number": 213,
    "body": "Fixes #211 ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309330ac82a74541b246c",
    "number": 207,
    "body": "I'm not able to get the build working locally so I've been unable to test this fully, but I believe the the method reference to a shadowed method is the part that isn't getting remapped correctly.\r\n\r\nIt's possible the proposed fix is overkill - maybe referencing the shadowed method directly in the lambda would be sufficient - but as I noted above I wasn't able to make a local build to know for certain.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309330ac82a74541b246d",
    "number": 206,
    "body": "While working with some minor model redirection stuff for my Redstone Tweaks mod, I discovered that Fabric's `ModelLoadingRegistry` (and more specifically its `ModelProviderContext`) didn't expose access to `ModelLoader#getOrLoadModel`. This causes some serious issues, since if you need to load the same model multiple times, it will severely drag down loading times by skipping the cache and reloading the model/blockstate files every time. Although `getOrLoadModel` itself is public, it sadly can't be accessed from `ModelProviderContext`, since the `loader` field thereof is private. This PR simply exposes `getOrLoadModel` as a method of `ModelProviderContext`, in the same way that `loadModel` is already exposed (though there is no need to add it to `ModelLoaderHooks` since it's already public in `ModelLoader`).\r\n\r\nWhile I did not precisely benchmark the different implementations, I estimate the following:\r\n\r\n- Baseline: no caching (direct call to `loadModel`), very slow\r\n- Manual caching (`HashMap`, `loadModel` behind `computeIfAbsent`), ~3x faster or more than baseline\r\n- Builtin caching (mixin/PR to expose `getOrLoadModel`), ~2x faster than manual caching\r\n\r\nThis seems like a fairly serious oversight, and I think it should be directly implemented into the API. I'm honestly kind of baffled that this wasn't already available.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309340ac82a74541b246e",
    "number": 205,
    "body": "This gets Indigo far enough to load, and provides a mechanism for supporting certain mostly-vanilla-compatible formats (like the ShadersMod block format) without too much additional overhead (not benchmarked, though).\r\n\r\nHowever, the ShadersMod item format is not vanilla-compatible at all. For this reason, MODE_UNSUPPORTED must be implemented in a way where it uses the public BufferBuilder methods (however slowly is necessary) to emit the quad, and the error then demoted to a warning.\r\n\r\nNot much effort should be put into this - the ideal solution for supporting alternate environments is for those environments to implement a Fabric API-compatible renderer. However, we cannot always count on this happening.",
    "head_branch": "indigo-improvements",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309350ac82a74541b246f",
    "number": 203,
    "body": "Would fix #202.\r\n\r\nThis adds an api for adding custom enchantment targets.\r\nSince vanilla is using an enum for them this pr heavily relies on `Redirect` and modifying the `EnchantmentTarget.ALL`.\r\n\r\nIt also adds an interface for blocks that provide enchantment power to the enchanting table.\r\n\r\nI still don't know if I did the subproject right.",
    "head_branch": "enchantment-target-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309360ac82a74541b2470",
    "number": 200,
    "body": "Adds some methods to allow easier biome adding. (Tested on 1.14.2 Pre-release 2)\r\n\r\nbuild.gradle still not added, since it appears modules have a different build.gradle format?\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309370ac82a74541b2471",
    "number": 197,
    "body": "",
    "head_branch": "networking-leak-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Fabric-caused networking ByteBuf leaks (#197)\n\nA vanilla-caused leak remains, which appears to be a new take on an old Mojang bug: https://bugs.mojang.com/browse/MC-121884?focusedCommentId=548927&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-548927"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309370ac82a74541b2472",
    "number": 195,
    "body": "This resolves a part of #192 , allowing for easy usage of texture registration callbacks *for a specific sprite atlas*, as opposed to all of them - as would have happened previously.\r\n\r\nI think it's complete, requesting reviews.",
    "head_branch": "textures-paths-0.1.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add sprite atlas path hooks, path-specific events (#195)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309380ac82a74541b2473",
    "number": 194,
    "body": "i hate IdList i hate IdList i hate IdList",
    "head_branch": "registry-event-api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Registry event API + loot table fix (#194)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309390ac82a74541b2474",
    "number": 189,
    "body": "what",
    "head_branch": "indigo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[#65] Renderer API + Indigo (#189)\n\nBig thanks to Grondag and Player for all the pain and trouble we all went through."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623093a0ac82a74541b2475",
    "number": 184,
    "body": "~~Replaces #127, the same code from there but updated to 0.3.0 packages~~\r\n\r\n~~This gives an opportunity for mods to tick players, along with any items in their inventory. This is helpful for all sorts of things, from equipment ticking to ticking status effects.~~\r\n\r\nNow refactored into a generic entity tick event! It takes an EntityType and will tick all entities of that type, theoretically.",
    "head_branch": "player-events-030",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623093b0ac82a74541b2476",
    "number": 183,
    "body": "Done conceptually, requires testing.",
    "head_branch": "registry-sync-0.1.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623093b0ac82a74541b2477",
    "number": 177,
    "body": "",
    "head_branch": "material-builder",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623093c0ac82a74541b2478",
    "number": 174,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add the translation (Traditional Chinese, Taiwan) (#174)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623093d0ac82a74541b2479",
    "number": 169,
    "body": "Look! I'm helping!",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Create de_de.json (#169)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623093e0ac82a74541b247a",
    "number": 166,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fabric-item-groups: Bulgarian translation (#166)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623093f0ac82a74541b247b",
    "number": 164,
    "body": "Other changes:\r\n\r\n* Mark the EntityTracker mixin in fabric-networking as optional (it only adds internal APIs, and the method using them has a fallback)\r\n* Clean up fabric-registry-sync a little",
    "head_branch": "networking-handshake",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623093f0ac82a74541b247c",
    "number": 160,
    "body": "This follows on the work laid out in #77 with some changes:\r\n\r\n* Adapted to new directory format\r\n* The mixins now use Accessors\r\n* LootUtilities -> LootJsonParser with some naming clean-up\r\n* LootEntryTypeRegistry is now a part of api.loot.v1 (with deprecation)\r\n* LootTableLoadingCallback now receives the LootManager instance, allowing to get other loot tables than one's own.\r\n* LootTableLoadingCallback now applies modifications at the end of all processing, which means LootManager can be read from safely.\r\n* LootTableLoadingCallback received a setter, allowing you to override the loot table instance being iterated on completely. I am not sure if that is a good idea, but I think that's the only way we can faciliate removals at this time?",
    "head_branch": "loot-tables-v1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309400ac82a74541b247d",
    "number": 155,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add zh_cn translation to fabric-item-groups (#155)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309410ac82a74541b247e",
    "number": 153,
    "body": "- The implementation now uses Invoker/Accessor mixins\r\n- Added static `copyOf` for wrapping existing `Block$Settings`\r\n- Added a static utility class `BlockSettingsExtensions` for calling these without a builder\r\n- Builder delegates each hook-requiring call to the utility class\r\n- Rewrote the internal data implementation\r\n\t- Exposed to package for the utility class\r\n\t- Added final modifiers and private constructors\r\n\t- Encapsulated fields\r\n\t- `Information` is now `ExtraData`\r\n\t- `MiningInformation` is now `MiningLevel`\r\n\r\nThis pull request should break no binary compatibility, the API has been left intact.",
    "head_branch": "block-settings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309420ac82a74541b247f",
    "number": 151,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309430ac82a74541b2480",
    "number": 148,
    "body": "AAAAAAAAAAAAAAAAAA\r\n\r\nStill in development.",
    "head_branch": "03x-refactor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309430ac82a74541b2481",
    "number": 147,
    "body": "Updated the fabric.mod.json to Schema Version 1, alongside consolidating the mixin jsons to the new standard single mixin json.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309440ac82a74541b2482",
    "number": 146,
    "body": "If there are problems or better ways of doing things please let me know.\r\n\r\nThis does not add biomes to the world: it merely provides a way to register them.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309450ac82a74541b2483",
    "number": 145,
    "body": "",
    "head_branch": "entity-tracking-update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "update entity tracking registration code for new snapshot changes (#145)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309460ac82a74541b2484",
    "number": 144,
    "body": "This PR currently only handles fluid accounting - it's not a full fluid API - but the accounting was the contentious part.  It allows mods to use/display whatever units they want, avoids floating point error, and scales up and down to vast/tiny amounts. \r\n\r\nFluidMeter internal implementation is simple - just two longs: buckets and fractionalUnits, basis for the later being the common denominator determined by the FluidUnitRegistry.\r\n\r\nThis API does not constrain which units can be used by which fluids because it will be trivially easy for devices using the FluidMeter to do that if desired.  Registering and enforcing constraints for each FluidUnit/Fluid combination would just add needless complexity and one mod requesting that all units be available for all fluids would circumvent it entirely.\r\n",
    "head_branch": "fluid",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309470ac82a74541b2485",
    "number": 143,
    "body": "https://github.com/FabricMC/fabric/issues/142",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309480ac82a74541b2486",
    "number": 141,
    "body": "",
    "head_branch": "pre2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309480ac82a74541b2487",
    "number": 138,
    "body": "Move the test mod to a subproject, makes it a lot easier to run with all the test mods.\r\n\r\nIncludes https://github.com/FabricMC/fabric/pull/95 along with a fix to it.\r\n\r\nIdeally loom would be able to create custom run configs for sub project, but I have a feeling its not worth doing this for loom 0.2, right now its just a matter of changing the module to run.\r\n\r\nStill needs testing to ensure the correct things are still pushed to maven and curse. ",
    "head_branch": "feature/sub-projects",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309490ac82a74541b2488",
    "number": 137,
    "body": "`ResourceReloadListener#apply` was recently renamed to `reload` in yarn. Because Fabric's override wasn't marked as such, it seems it was missed during the update.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix SimpleResourceReloadListener reload override (#137)\n\n`ResourceReloadListener#apply` was recently renamed to `reload` in yarn. Because Fabric's override wasn't marked as such, it seems it was missed during the update."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623094a0ac82a74541b2489",
    "number": 136,
    "body": "The `/fabric mods` command (op players only) returns a list of all the mods loaded, with their name, version and authors.\r\nThis is useful if someone does not use ModMenu.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623094b0ac82a74541b248a",
    "number": 133,
    "body": "Saw this spelling error when digging through the code, looks like it's only used internally so nothing should break",
    "head_branch": "doublej472/immune-to-fire",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "FabricEntityTypeBuilder: Rename immunteToFire field to immuneToFire (#133)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623094c0ac82a74541b248b",
    "number": 128,
    "body": "Pros:\r\n- based on JSON, so a lot more familiar to pack devs and end users\r\n- includes comments and a lot of leniency in comma placement, so easy to use and understand\r\n- tested and confirmed to be working\r\n\r\nCons:\r\n- ~~shadows Jankson, so it has to have `-shadow` appended to the name due to the nature of fabric loader's remapping (if you make it so the shadow task doesn't add a suffix, remap will fail to include the shadowed bit)~~ fixed!\r\n- ~~we've mostly been avoiding annotations in Fabric; the ConfigFile annotation is used for the sake of not having the file name be serialized but it might be a better idea overall to have the file name/path declared when `loadConfig` is run~~ Annotation is no longer used\r\n- might not be fully optimized, feel free to give feedback\r\n\r\n(please ignore the mess of commits, I've accidentally screwed over my fabric fork big time)",
    "head_branch": "config",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623094c0ac82a74541b248c",
    "number": 127,
    "body": "I think it's a good idea to have something to tick equipped items, so that they can give players various effects like the turtle helmet, along with anything else equipment might want to do. I've designed it in a  way that's extensible for Baubles-likes, where it's passed a `Player`, an `Inventory`, an `int`, and an `ItemStack` so that mods can know what slot something is in. The current mixin for the event only targets vanilla equipment slots, and has to do so a bit weirdly due to how PlayerInventory is set up.",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623094d0ac82a74541b248d",
    "number": 115,
    "body": "closes #114, using @Pyrofab's idea of passing up a null factory and reimpl'ing the `create` method ourselves. I haven't been able to test this just yet, so we should do that before merging.\r\n\r\nplease excuse/squash all the junk commits, I don't know how to git\r\nalso apparently this pr includes #95 because I messed up my branches a lot",
    "head_branch": "worldgen-types",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623094e0ac82a74541b248e",
    "number": 113,
    "body": "",
    "head_branch": "registry-tweaks-19w08b",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623094f0ac82a74541b248f",
    "number": 112,
    "body": "This seems to fix the id mismatching, cant find any problems so far but it feels too simple to be the complete solution.\r\n\r\nHaven't found any problems with it so its likely the full fix for #88 (in terms of upcrafts comment)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309500ac82a74541b2490",
    "number": 111,
    "body": "I need to fix the tint color patch location, but other than that it's working. Allows defining custom renderers, simple custom renderers with sprites, and fallbacks for vanilla fluids. The API might need refinement.\r\n\r\nI have mild performance concerns. Any ideas, @grondag?",
    "head_branch": "fluid-render-patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309500ac82a74541b2491",
    "number": 110,
    "body": "first work on a dimensions API that allows for easy travel between dimensions.\r\n\r\n## additions:\r\n- a pre teleportation event\r\n- mods have the ability to register custom entity placers for their dimensions\r\n\r\n## TODO / bugs:\r\n- [x] ~loading existing worlds crashes the game~ FIXED!\r\n- [ ] post teleportation event?",
    "head_branch": "dimensions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309510ac82a74541b2492",
    "number": 107,
    "body": " Split command api into API/Impl. Add CommandType to allow more control over where the command is registered.\r\n\r\nThis is an idea I had when working on the command fix, it cleans the code up a bit, removes the Deprecated api.\r\n\r\nMain change is the addition of CommandType  that allows for more control over where the command is registered, as well as future expansion.\r\n\r\nThis is just an idea, so all feedback would be great.",
    "head_branch": "feature-commands",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309520ac82a74541b2493",
    "number": 106,
    "body": "I see room for improvement with the command api, I may open another pr that includes some breaking changes to get some feedback.",
    "head_branch": "fix-commands",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix dedicated server commands (#93) - hopefully a temporary approach (I wish...) (#106)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309530ac82a74541b2494",
    "number": 103,
    "body": "",
    "head_branch": "nio-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "update mappings, fix NIO resource pack support on paulscode, minor cleanup/tweaks (#103)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309540ac82a74541b2495",
    "number": 100,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309540ac82a74541b2496",
    "number": 99,
    "body": "TODO:\r\n\r\n* Better interface name?\r\n* Is capturing ItemStack here useful for modders? Do modders realistically vary their armor textures by NBT at any point, often enough to not justify mixing deeper into ArmorFeatureRenderer with a custom renderer? Would simplify the patch not to.",
    "head_branch": "armor-texture-patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309550ac82a74541b2497",
    "number": 98,
    "body": "Interpretes the name as Identifier - like suggested.",
    "head_branch": "armormaterial-patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309560ac82a74541b2498",
    "number": 95,
    "body": "- change `mod.json` to `fabric.mod.json`\r\n- add all the new sample code mods that weren't in the mod.json before",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309570ac82a74541b2499",
    "number": 94,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "remove redundant ItemStack.EMPTY check (#94)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309570ac82a74541b249a",
    "number": 91,
    "body": "",
    "head_branch": "port-19w07a",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309580ac82a74541b249b",
    "number": 90,
    "body": "Related to #86 and #89 - @fnuecke could you take a look?",
    "head_branch": "pick-block-take-two",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309590ac82a74541b249c",
    "number": 83,
    "body": "TODO:\r\n\r\n- [x] Actually implement minecraft:register/unregister *sending*\r\n- [ ] Add events for locations in the handshaking projects for datapack providers to inject their own packets\r\n- [ ] Detect vanilla clients (and servers!) and flag them appropriately\r\n- [ ] Forbid vanilla instances from going into Fabric servers with non-vanilla registries (might be out of scope)",
    "head_branch": "networking-0.2.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623095a0ac82a74541b249d",
    "number": 82,
    "body": "",
    "head_branch": "pick-event-hook",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[0.2.0] add pick item callback (#82)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623095b0ac82a74541b249e",
    "number": 81,
    "body": "This class is simply to allow easier access to registering a key code and to be able to look at it and understand what key the code is bonded to.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623095b0ac82a74541b249f",
    "number": 77,
    "body": "Adds an event that can be used to modify loot tables when they're loaded.\r\n\r\nEdit: Tagging issue #7.",
    "head_branch": "patch-4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623095c0ac82a74541b24a0",
    "number": 76,
    "body": "Adds a registry for blocks that can be punched to extinguish / destroy, like fire.",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623095d0ac82a74541b24a1",
    "number": 75,
    "body": "",
    "head_branch": "flammable-block-registry",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add flammable block registry, *2ObjectMap.clear to remove Fabric overrides (#75)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623095e0ac82a74541b24a2",
    "number": 74,
    "body": "The goal of the changed event system was to:\r\n\r\n* decouple chaining (the act of processing a collection of events to get a single result) from the actual event processing,\r\n* hide the specifics of handling interfaces (a future commit may allow registering A->B interface converters - so that we can, say, add AttackBlockEventV2 and deprecate AttackBlockEventV1 without removing it, if need be),\r\n* do all of this while not sacrificing performance.\r\n\r\nThis is a proposal more than something definite - I'd like to listen to your input!\r\n\r\nThe *real* performance implications probably have to be checked, but I think this might be preferable to the old system in the long run",
    "head_branch": "events-0.2.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623095e0ac82a74541b24a3",
    "number": 72,
    "body": "@Falkreon",
    "head_branch": "resource-reload-hooks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623095f0ac82a74541b24a4",
    "number": 67,
    "body": "The default minecraft packet handler for opening containers updates the container in the player entity while the fabric one didn't, this caused some desync issues as mentioned in #61.",
    "head_branch": "feature/fix-containers-desync",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix container desync in the client (#61) (#67)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309600ac82a74541b24a5",
    "number": 65,
    "body": "This PR is a successor to #45 and #55 made in response to feedback.  It specifies interfaces and creates hooks for the implementation of a ModelRenderer that provides the following features:\r\n\r\n- Enhanced static block rendering: emissive rendering, ~~overlay textures~~, multiple blend modes (solid, cutout, translucent) in the same model.\r\n- Dynamic block models, with or without block entities: some or all of a block model can be generated during chunk rebuild.\r\n- ~~Dynamic Block Entity Rendering: some or all of a block model can be re-buffered every tick or every frame, with the option to redraw prior buffers if model state is unchanged.~~\r\n- Enhanced item model rendering: emissive, etc. ~~but limited to variation provided by `ModelItemPropertyOverrideList`.~~\r\n- Freedom for ModelRenderer implementations to employ novel lighting, rendering and optimization techniques with minimal technical constraints and maximum compatibility for mod content using these interfaces. \r\n\r\nThis freedom is achieved by delegating most of the functionality to the ModelRenderer implementation.  Some implementations may focus on aesthetics (shaders) and some may focus on performance, and others still may try to balance both. \r\n\r\nTo enable compatible variation, the standard hides vertex formats, vertex data structures, and other implementation details from mod authors, instead requiring the implementation to provide builders for creating materials and enhanced/dynamic models. Mod authors who use these interfaces can be assured their content will render well across a diverse range of implementation approaches. \r\n\r\nA reference implementation to prove viability and offer baseline functionality until more advanced options emerge is in progress [here](https://github.com/grondag/indigo/tree/alternate/classic).",
    "head_branch": "alternate",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309610ac82a74541b24a6",
    "number": 64,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309620ac82a74541b24a7",
    "number": 63,
    "body": "The idea is being able to, say, provide vanilla behaviour compatibility in a hook, but also allow overriding it for \"total conversion\" datapacks.",
    "head_branch": "tag-replace-check",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309630ac82a74541b24a8",
    "number": 62,
    "body": "~~I created the Climbable interface which can be implemented on any block class to allow entities to climb it as well as (hopefully) implemented the necessary hooks for it to work. Before this gets merged, however, there are a few things to discuss:~~\r\n\r\n-  ~~How we would handle instances where someone wants to change the climbable area of their blocks to, say, match scaffolding, or if handling that is within the scope of Fabric.~~\r\n-  ~~If there is anything else this needs to function.~~\r\n-  ~~If I got my injection points correct.~~\r\n\r\nThe above information is no longer accurate. The Climbable API currently consists of an event for climbing a block and an event for getting the fall death suffix for the block/situation.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309630ac82a74541b24a9",
    "number": 60,
    "body": "The placeholders for the GuiProvider/ContainerProvider error-messages are wrong: it should be `{}` instead of `%s`\r\n\r\nBefore commit:\r\n`No container factory found for %s`\r\n\r\nAfter commit:\r\n`No container factory found for Minecraft:example_container_not_found!`",
    "head_branch": "fix-placeholders",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix wrong placeholders. (#60)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309640ac82a74541b24aa",
    "number": 59,
    "body": "Adds a way to register custom loot entry types.\r\n\r\n~~Also includes an entry type for choosing a random item from a tag. This can be removed if it's not suitable for Fabric API.~~ (Edit: removed)",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309650ac82a74541b24ab",
    "number": 57,
    "body": "",
    "head_branch": "keybinding",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309660ac82a74541b24ac",
    "number": 56,
    "body": "Will close #52 once complete.\r\n\r\nRough outline of what I think is needed.\r\n\r\n**As usual I look forward to having your feedback.**\r\n\r\n_Also updated the mappings if you are wondering why some odd things changed_",
    "head_branch": "feature-dimensions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309660ac82a74541b24ad",
    "number": 55,
    "body": "This PR  defines standards for implementing a RenderPlugin and standard vertex formats and interfaces to be used by enhanced and/or dynamic models to provide vertex data to such plugins.  The intention is to allow cross-compatibility across the widest possible range of rendering needs and implementation approaches with minimum viable patches and logic in the Fabric API itself.  \r\n\r\nIt includes a reliable and performant hook for an enhanced and/or dynamic model to retrieve extended world state in response to chunk rebuilds. \r\n\r\nIt establishes minimal interfaces and functional expectations for a rendering plug in and creates a lightweight registration system for such a plug-in to make itself accessible. The scope of the specification includes block rendering, item rendering and fast block entity rendering.\r\n \r\nThis PR does not make any changes to vertex lighting or buffering. All such hooks are delegated to plug-in implementations.\r\n\r\nThis PR is feature-complete and I do not intend to make any changes except in response to defects or reviewer input.  While is it under review I will work on a barebones reference implementation for RenderPlugin.\r\n\r\n**Update:** I have a working proof-of-concept plug-in implementation that handles block rendering with accurate lighting and comparable performance.  The intent was not to create something elegant or optimal, just demonstrate viability. That code is [here](https://github.com/grondag/indigo/tree/master/classic/src/main/java/grondag/indigo).\r\n\r\nAs it stands, I am going to set this PR aside and submit a different PR with an alternate approach in response to feedback.  Scope will be similar.  Nothing is yet settled, so feedback on this PR is still welcome.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309670ac82a74541b24ae",
    "number": 53,
    "body": "Simple.\r\n\r\nNotes:\r\n\r\n* NBT-based fuel hooks would unfortunately have to be furnace/Fabric-specific, so I opted not to add them here. If you can convince me otherwise...\r\n* Caching the Map can be done by refreshing the instance on datapack reload, but is out of scope for Fabric.",
    "head_branch": "fuel-hooks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309680ac82a74541b24af",
    "number": 46,
    "body": "Adding a class called ServerProvider can retreive the current MinecraftServer instance.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309690ac82a74541b24b0",
    "number": 45,
    "body": "See https://github.com/FabricMC/fabric/issues/43 for prior art.\r\n\r\nThere are many questions left to be answered; this is mostly putting out *some* code and a general idea of my approach to discuss.",
    "head_branch": "dynamic-baking-render-cache",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623096a0ac82a74541b24b1",
    "number": 44,
    "body": "TODO:\r\n\r\n- [x] Better button texture/location/size\r\n\r\n- [x] Docs\r\n\r\n- [x] Expand FabricItemGroup, move more of it to an api/impl \r\n\r\n\r\nThe idea for this early PR is to get inital feedback and suggestions. I have tried to keep the mixins to a minimum and I feel like I have succeed well. There are a few magic numbers around the place that might need to be changed.\r\n\r\nDo we need a way to remove / replace item groups?\r\n\r\nThe gui is untouched if no item groups are added.\r\n\r\nThanks for your feedback, hopefully this PR can move a bit faster than the container one did.\r\n\r\nGIF:\r\n\r\n![2018-12-23_23-05-19](https://user-images.githubusercontent.com/4324090/50388538-55648400-0711-11e9-9a31-118349eb6efa.gif)\r\n",
    "head_branch": "feature-itemgroups",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Item Group API (#44)\n\n* Inital proof of concept on the item group api\r\n\r\n* Some changes\r\n\r\n* Show hotbar tab + fix bug with inv slots not clearing out\r\n\r\n* Better button textures + docs + tweaks/auto format\r\n\r\n* Add an api to provide the stack to display and expand the example mod\r\n\r\n* Use COMMON_GROUPS in all places\r\n\r\n* Add a tooltip showing the page numbers"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623096a0ac82a74541b24b2",
    "number": 39,
    "body": "Do not merge yet. This is for initial review - please also raise additional needs, if necessary.",
    "head_branch": "model-loading",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623096b0ac82a74541b24b3",
    "number": 37,
    "body": "",
    "head_branch": "custom-baked-model",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623096c0ac82a74541b24b4",
    "number": 35,
    "body": "The missing license was causing the build to fail. Really sorry about this - I keep forgetting to add it to the test sources.",
    "head_branch": "hotfix/license",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #35 from SquidDev/hotfix/license\n\nAdd a license to the ServerEventMod"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623096d0ac82a74541b24b5",
    "number": 34,
    "body": "We provide connected and disconnected events for the client (when they have successfully connected to the server) and server (whenever a new client connects).\r\n\r\nThere are some caveats with this implementation, namely that the client-side events are fired on the network thread. It may be worth investigating if there are better places the hooks could be placed.",
    "head_branch": "feature/connection-event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623096d0ac82a74541b24b6",
    "number": 33,
    "body": "@Prospector\r\nhttps://discordapp.com/channels/507304429255393322/507304429255393324/524024406880813076",
    "head_branch": "feature/datapacks-folder",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623096e0ac82a74541b24b7",
    "number": 30,
    "body": "This may allow mods to perform any additional clean up of resources, or what not.\r\n\r\nNote, this is fired _after_ `MinecraftServer.shutdown()` has been called, but before `MinecraftServer.exit()`, and so things like the player list has been removed, the network shutdown, etc.... I'd like some feedback on if this is the most useful place for this event  or if there's another, more-suitable palace to fire it.",
    "head_branch": "feature/server-stop",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #30 from SquidDev/feature/server-stop\n\nAdd an event for when the server is about to stop"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6623096f0ac82a74541b24b8",
    "number": 28,
    "body": "Alternative title: _Gave this fabric a thorough washing_\r\n\r\nAdded .editorconfig from https://github.com/FabricMC/fabric-docs/pull/4 and also ran the IDEA formatter through the project, removing unused imports. Looks like most people correctly use it, as there aren't that many changes.",
    "head_branch": "codestyle",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309700ac82a74541b24b9",
    "number": 25,
    "body": "Resolves #24, hopefully with nothing extra needed to be added for pistonExtension or this might explode instead.",
    "head_branch": "ehwuts-patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309710ac82a74541b24ba",
    "number": 21,
    "body": "Hi, this is a rough outline for the container handler. The idea behind this is to make opening a gui with a container on the client easy. This is a common thing to do in mods, so being in fabric it should help a lot of people.\r\n\r\n### Things still to do\r\n\r\n- [x] Finalise API\r\n\r\n- [x] Fully impalement it (still needs registering, and some validation)\r\n\r\n- [x] Auto handle the container `syncId`\r\n\r\n- [x] Test it\r\n\r\nThis api provides you with a PacketByteBuf that allows you send anything you want along with the packet. Will be useful for people who want to open containers on items for example. There is also a default implementation that uses BlockPos along with FabricContainerProvider.\r\n\r\nFabricContainerProvider is an extension of vanilla's ContainerProvider that simplifies the implementation while keeping it compatible. Its not needed, but I think it makes things a bit cleaner in the tile class.\r\n\r\n# Example usage\r\n\r\n```java\r\n\t\t//Registers a container factory that opens our example Container, this reads the block pos from the buffer\r\n\t\tContainerProviderRegistry.INSTANCE.registerFactory(EXAMPLE_CONTAINER, (player, buf) -> {\r\n\t\t\tBlockPos pos = buf.readBlockPos();\r\n\t\t\treturn new ExampleContainer(pos, player);\r\n\t\t});\r\n\r\n\t\t//Registers a gui factory that opens our example gui, this reads the block pos from the buffer\r\n\t\tGuiProviderRegistry.INSTANCE.registerFactory(EXAMPLE_CONTAINER, (player, buf) -> {\r\n\t\t\tBlockPos pos = buf.readBlockPos();\r\n\t\t\treturn new ExampleContainerGui(pos, player);\r\n\t\t});\r\n\r\n\t\t//Registers a gui factory that opens our example gui, this uses the container created by ContainerProviderRegistry\r\n\t\tGuiProviderRegistry.INSTANCE.registerFactory(ContainerMod.EXAMPLE_CONTAINER, ExampleContainerGui2::new);\r\n```\r\n\r\nThis example shows how you would register a container and a gui for a basic tile entity.\r\n\r\nThis PR is fully open to change, the docs are bad, the class/method names arent great. Please leave any feedback you have. \r\n\r\nThanks for your time 👍 \r\n",
    "head_branch": "feature-containers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309710ac82a74541b24bb",
    "number": 17,
    "body": "",
    "head_branch": "feature/fc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #17 from kashike/feature/fc\n\nRename a few methods to be more builder-friendly"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309720ac82a74541b24bc",
    "number": 15,
    "body": "This is the gitignore from fabric-loader. Probably a good idea to have that in here.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #15 from therealfarfetchd/master\n\nAdd .gitignore"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309730ac82a74541b24bd",
    "number": 13,
    "body": "",
    "head_branch": "rf/hl",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #13 from kashike/rf/hl\n\nBe more specific with return type"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309740ac82a74541b24be",
    "number": 11,
    "body": "This simply builds up a mapping of `Item` -> `ItemColorMapper`, and then registers them into the backing map when it becomes available.",
    "head_branch": "feature/item-color-registry",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add primitive registry for ItemColorMappers (#11)\n\n* An initial implementation for colour mapper registries\r\n\r\nThere's elements I'm still not entirely happy here, but it appears to\r\nwork as expected.\r\n\r\n* Add a test mod for colour mappers\r\n\r\n* Fix license violations\r\n\r\n* Rename everything to correspond with future names\r\n\r\n* Woops"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662309750ac82a74541b24bf",
    "number": 1,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662389990eca39297c49b51b",
    "number": 3722,
    "body": "Resolves #3719",
    "head_branch": "biome-api/rebuild-feature",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66239f9b4521c759abdac346",
    "number": 3723,
    "body": null,
    "head_branch": "registry-syncing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Test for and fix registries that need syncing (#3723)\n\n* Test for and fix registries that need syncing\r\n\r\n* Fix duplicate"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  }
]